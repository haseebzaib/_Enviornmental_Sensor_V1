
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000004  20000000  20000000  00026000  2**0
                  ALLOC
  2 .text         000204a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002ab4  08020640  08020640  00021640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080230f4  080230f4  00025330  2**0
                  CONTENTS
  5 .ARM          00000008  080230f4  080230f4  000240f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080230fc  080230fc  00025330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080230fc  080230fc  000240fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08023100  08023100  00024100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000032c  20000004  08023104  00025004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000034e8  20000330  08023430  00025330  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003818  08023430  00025818  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00025330  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003541a  00000000  00000000  00025360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008505  00000000  00000000  0005a77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002de0  00000000  00000000  00062c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002357  00000000  00000000  00065a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258b1  00000000  00000000  00067db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00041f2f  00000000  00000000  0008d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3adf  00000000  00000000  000cf597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00183076  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d5bc  00000000  00000000  001830bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  00190678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000330 	.word	0x20000330
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08020628 	.word	0x08020628

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000334 	.word	0x20000334
 80001dc:	08020628 	.word	0x08020628

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e03d      	b.n	80010a4 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d21b      	bcs.n	8001068 <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	43db      	mvns	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	4002      	ands	r2, r0
 800104c:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4403      	add	r3, r0
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e01a      	b.n	800109e <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	43db      	mvns	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	440b      	add	r3, r1
 8001080:	4002      	ands	r2, r0
 8001082:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4403      	add	r3, r0
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010aa:	d3bd      	bcc.n	8001028 <setSoftPWM+0x14>
		}
	}

}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (blue_led_pwm_val != 0) {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <toggle_blue_led+0x34>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <toggle_blue_led+0x16>
		blue_led_pwm_val = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <toggle_blue_led+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e003      	b.n	80010da <toggle_blue_led+0x1e>
	} else {
		blue_led_pwm_val = 1000;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <toggle_blue_led+0x34>)
 80010d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d8:	801a      	strh	r2, [r3, #0]
	}
	BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <toggle_blue_led+0x34>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <toggle_blue_led+0x38>)
 80010e2:	4619      	mov	r1, r3
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff ff95 	bl	8001014 <setSoftPWM>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200012f2 	.word	0x200012f2
 80010f4:	2000034c 	.word	0x2000034c

080010f8 <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <pir_interrupt+0x2c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001102:	2101      	movs	r1, #1
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <pir_interrupt+0x30>)
 8001106:	f004 fd87 	bl	8005c18 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <pir_interrupt+0x34>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 8001116:	e002      	b.n	800111e <pir_interrupt+0x26>
		pir_motion_flag = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <pir_interrupt+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200014e1 	.word	0x200014e1
 8001128:	40020000 	.word	0x40020000
 800112c:	200014e0 	.word	0x200014e0

08001130 <timer_interrupt>:

void timer_interrupt() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <timer_interrupt+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <timer_interrupt+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <timer_interrupt+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001146:	d302      	bcc.n	800114e <timer_interrupt+0x1e>
		time_keep = 0;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <timer_interrupt+0x2c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 800114e:	f002 fd97 	bl	8003c80 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a02      	ldr	r2, [pc, #8]	@ (8001160 <timer_interrupt+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200014d4 	.word	0x200014d4
 8001160:	20001718 	.word	0x20001718

08001164 <power_off_detect>:

void power_off_detect() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 8001168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <power_off_detect+0x2c>)
 800116e:	f004 fd53 	bl	8005c18 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <power_off_detect+0x26>
		_RunTime_Packet.pwr_off_det = 1;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <power_off_detect+0x30>)
 800117a:	2201      	movs	r2, #1
 800117c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2108      	movs	r1, #8
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <power_off_detect+0x34>)
 8001186:	f004 fd5f 	bl	8005c48 <HAL_GPIO_WritePin>
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	2000148c 	.word	0x2000148c
 8001198:	40020400 	.word	0x40020400

0800119c <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2044      	movs	r0, #68	@ 0x44
 80011c4:	f003 fb3f 	bl	8004846 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011c8:	2044      	movs	r0, #68	@ 0x44
 80011ca:	f003 fb58 	bl	800487e <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <pwr_off_detected>:

static void pwr_off_detected() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <pwr_off_detected+0x3c>)
 80011e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <pwr_off_detected+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		GREEN_LED_PWM(disable_led);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <pwr_off_detected+0x40>)
 80011f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
		RED_LED_PWM(disable_led);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <pwr_off_detected+0x40>)
 80011fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
		BLUE_LED_PWM(0);
 8001202:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <pwr_off_detected+0x44>)
 8001204:	2100      	movs	r1, #0
 8001206:	2008      	movs	r0, #8
 8001208:	f7ff ff04 	bl	8001014 <setSoftPWM>
		HAL_Delay(3500);
 800120c:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001210:	f002 fd42 	bl	8003c98 <HAL_Delay>

	}
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000148c 	.word	0x2000148c
 800121c:	40000400 	.word	0x40000400
 8001220:	2000034c 	.word	0x2000034c

08001224 <clock_speed_slow>:
/*
 * setting clock speed to 250khz
 */
static void clock_speed_slow() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

//we will set clock speed to 250khz
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f01b ff7a 	bl	801d12c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <clock_speed_slow+0xbc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a23      	ldr	r2, [pc, #140]	@ (80012e0 <clock_speed_slow+0xbc>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <clock_speed_slow+0xbc>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <clock_speed_slow+0xc0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001270:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <clock_speed_slow+0xc0>)
 8001272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <clock_speed_slow+0xc0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001284:	2306      	movs	r3, #6
 8001286:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001288:	2301      	movs	r3, #1
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f007 f92b 	bl	80084f8 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <clock_speed_slow+0x88>
		Error_Handler();
 80012a8:	f001 ffa6 	bl	80031f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80012b4:	23c0      	movs	r3, #192	@ 0xc0
 80012b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f007 fb8e 	bl	80089e8 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <clock_speed_slow+0xb2>
		Error_Handler();
 80012d2:	f001 ff91 	bl	80031f8 <Error_Handler>
	}

}
 80012d6:	bf00      	nop
 80012d8:	3750      	adds	r7, #80	@ 0x50
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <clock_speed_high>:

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	@ 0x50
 80012ec:	af00      	add	r7, sp, #0
	//we will set clock speed to 84Mhz
	uint16_t timeout;

	/* Enable HSI clock */
	RCC->CR |= RCC_CR_HSION;
 80012ee:	4b45      	ldr	r3, [pc, #276]	@ (8001404 <clock_speed_high+0x11c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a44      	ldr	r2, [pc, #272]	@ (8001404 <clock_speed_high+0x11c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is ready */
	timeout = 0xFFFF;
 80012fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	while (!(RCC->CR & RCC_CR_HSIRDY) && timeout--)
 8001302:	bf00      	nop
 8001304:	4b3f      	ldr	r3, [pc, #252]	@ (8001404 <clock_speed_high+0x11c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d106      	bne.n	800131e <clock_speed_high+0x36>
 8001310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	f8a7 204e 	strh.w	r2, [r7, #78]	@ 0x4e
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f2      	bne.n	8001304 <clock_speed_high+0x1c>
		;

	/* Select HSI clock as main clock */
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
 800131e:	4b39      	ldr	r3, [pc, #228]	@ (8001404 <clock_speed_high+0x11c>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	4a38      	ldr	r2, [pc, #224]	@ (8001404 <clock_speed_high+0x11c>)
 8001324:	f023 0303 	bic.w	r3, r3, #3
 8001328:	6093      	str	r3, [r2, #8]

	/* Disable PLL */
	RCC->CR &= ~RCC_CR_PLLON;
 800132a:	4b36      	ldr	r3, [pc, #216]	@ (8001404 <clock_speed_high+0x11c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a35      	ldr	r2, [pc, #212]	@ (8001404 <clock_speed_high+0x11c>)
 8001330:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001334:	6013      	str	r3, [r2, #0]

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	2230      	movs	r2, #48	@ 0x30
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f01b fef4 	bl	801d12c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <clock_speed_high+0x11c>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	4a29      	ldr	r2, [pc, #164]	@ (8001404 <clock_speed_high+0x11c>)
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	@ 0x40
 8001364:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <clock_speed_high+0x11c>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <clock_speed_high+0x120>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800137c:	4a22      	ldr	r2, [pc, #136]	@ (8001408 <clock_speed_high+0x120>)
 800137e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <clock_speed_high+0x120>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001390:	2305      	movs	r3, #5
 8001392:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001394:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001398:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800139a:	2301      	movs	r3, #1
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 80013a8:	2319      	movs	r3, #25
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80013ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013b0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013b2:	2304      	movs	r3, #4
 80013b4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80013b6:	2307      	movs	r3, #7
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 f89a 	bl	80084f8 <HAL_RCC_OscConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <clock_speed_high+0xe6>
		Error_Handler();
 80013ca:	f001 ff15 	bl	80031f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013ce:	230f      	movs	r3, #15
 80013d0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d2:	2302      	movs	r3, #2
 80013d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2102      	movs	r1, #2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f007 fafc 	bl	80089e8 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <clock_speed_high+0x112>
		Error_Handler();
 80013f6:	f001 feff 	bl	80031f8 <Error_Handler>
	}

}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	@ 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001412:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <load_param+0xa4>)
 8001414:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8b3 3195 	ldrh.w	r3, [r3, #405]	@ 0x195
 800141c:	b29b      	uxth	r3, r3
 800141e:	f44f 52c2 	mov.w	r2, #6208	@ 0x1840
 8001422:	4293      	cmp	r3, r2
 8001424:	d118      	bne.n	8001458 <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 8001426:	4a23      	ldr	r2, [pc, #140]	@ (80014b4 <load_param+0xa8>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f240 1397 	movw	r3, #407	@ 0x197
 8001432:	461a      	mov	r2, r3
 8001434:	f01b ff91 	bl	801d35a <memcpy>

		if (strstr(_Flash_Packet.File_Name, "devEUI")) {
 8001438:	491f      	ldr	r1, [pc, #124]	@ (80014b8 <load_param+0xac>)
 800143a:	481e      	ldr	r0, [pc, #120]	@ (80014b4 <load_param+0xa8>)
 800143c:	f01b fee8 	bl	801d210 <strstr>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d019      	beq.n	800147a <load_param+0x6e>
			sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 8001446:	f000 ff99 	bl	800237c <ver_GetUid>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	491b      	ldr	r1, [pc, #108]	@ (80014bc <load_param+0xb0>)
 8001450:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <load_param+0xa8>)
 8001452:	f01b fd21 	bl	801ce98 <siprintf>
 8001456:	e010      	b.n	800147a <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 8001458:	4a16      	ldr	r2, [pc, #88]	@ (80014b4 <load_param+0xa8>)
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <load_param+0xb4>)
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f240 1397 	movw	r3, #407	@ 0x197
 8001464:	461a      	mov	r2, r3
 8001466:	f01b ff78 	bl	801d35a <memcpy>
		sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800146a:	f000 ff87 	bl	800237c <ver_GetUid>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4912      	ldr	r1, [pc, #72]	@ (80014bc <load_param+0xb0>)
 8001474:	480f      	ldr	r0, [pc, #60]	@ (80014b4 <load_param+0xa8>)
 8001476:	f01b fd0f 	bl	801ce98 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 800147a:	4912      	ldr	r1, [pc, #72]	@ (80014c4 <load_param+0xb8>)
 800147c:	4812      	ldr	r0, [pc, #72]	@ (80014c8 <load_param+0xbc>)
 800147e:	f01b fec7 	bl	801d210 <strstr>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <load_param+0xc0>)
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001490:	e00a      	b.n	80014a8 <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001492:	490f      	ldr	r1, [pc, #60]	@ (80014d0 <load_param+0xc4>)
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <load_param+0xbc>)
 8001496:	f01b febb 	bl	801d210 <strstr>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <load_param+0xc0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	08060000 	.word	0x08060000
 80014b4:	200012f4 	.word	0x200012f4
 80014b8:	08020640 	.word	0x08020640
 80014bc:	08020648 	.word	0x08020648
 80014c0:	0802262c 	.word	0x0802262c
 80014c4:	0802064c 	.word	0x0802064c
 80014c8:	20001358 	.word	0x20001358
 80014cc:	2000148c 	.word	0x2000148c
 80014d0:	08020654 	.word	0x08020654

080014d4 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014da:	b672      	cpsid	i
}
 80014dc:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80014de:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <store_param+0xc0>)
 80014e0:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80014e2:	f003 fe91 	bl	8005208 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <store_param+0xc4>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <store_param+0xc4>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80014f2:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <store_param+0xc4>)
 80014f4:	2210      	movs	r2, #16
 80014f6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <store_param+0xc4>)
 80014fa:	2220      	movs	r2, #32
 80014fc:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <store_param+0xc4>)
 8001500:	2240      	movs	r2, #64	@ 0x40
 8001502:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <store_param+0xc4>)
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800150a:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <store_param+0xc4>)
 800150c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001510:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <store_param+0xc8>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <store_param+0xc8>)
 800151a:	2202      	movs	r2, #2
 800151c:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 800151e:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <store_param+0xc8>)
 8001520:	2207      	movs	r2, #7
 8001522:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <store_param+0xc8>)
 8001526:	2201      	movs	r2, #1
 8001528:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800152a:	463b      	mov	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	481b      	ldr	r0, [pc, #108]	@ (800159c <store_param+0xc8>)
 8001530:	f003 ffe8 	bl	8005504 <HAL_FLASHEx_Erase>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800153a:	f003 fe97 	bl	800526c <HAL_FLASH_GetError>
 800153e:	4603      	mov	r3, r0
 8001540:	e024      	b.n	800158c <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001542:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <store_param+0xcc>)
 8001544:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <store_param+0xd0>)
 8001548:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800154a:	e016      	b.n	800157a <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 800154c:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	2002      	movs	r0, #2
 8001556:	f003 fe03 	bl	8005160 <HAL_FLASH_Program>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <store_param+0x9a>

		{
			WrAdr += 4;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3304      	adds	r3, #4
 8001564:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3304      	adds	r3, #4
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	e005      	b.n	800157a <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 800156e:	f003 fe6d 	bl	800524c <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001572:	f003 fe7b 	bl	800526c <HAL_FLASH_GetError>
 8001576:	4603      	mov	r3, r0
 8001578:	e008      	b.n	800158c <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3e4      	bcc.n	800154c <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001582:	f003 fe63 	bl	800524c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001586:	b662      	cpsie	i
}
 8001588:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800158a:	2300      	movs	r3, #0

}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200012f4 	.word	0x200012f4
 8001598:	40023c00 	.word	0x40023c00
 800159c:	20001734 	.word	0x20001734
 80015a0:	08060197 	.word	0x08060197
 80015a4:	08060000 	.word	0x08060000

080015a8 <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	if (save_param) {
 80015ac:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <save_data+0x58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d022      	beq.n	80015fa <save_data+0x52>
		if (start_timer) {
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <save_data+0x5c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00b      	beq.n	80015d4 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80015bc:	4812      	ldr	r0, [pc, #72]	@ (8001608 <save_data+0x60>)
 80015be:	f009 fa5b 	bl	800aa78 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80015c2:	4811      	ldr	r0, [pc, #68]	@ (8001608 <save_data+0x60>)
 80015c4:	f009 f9f6 	bl	800a9b4 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <save_data+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <save_data+0x5c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <save_data+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80015dc:	d30d      	bcc.n	80015fa <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80015de:	480a      	ldr	r0, [pc, #40]	@ (8001608 <save_data+0x60>)
 80015e0:	f009 fa4a 	bl	800aa78 <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80015e4:	f7ff ff76 	bl	80014d4 <store_param>
			time_keep = 0;
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <save_data+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <save_data+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <save_data+0x5c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200014d1 	.word	0x200014d1
 8001604:	200014d2 	.word	0x200014d2
 8001608:	200018d0 	.word	0x200018d0
 800160c:	200014d4 	.word	0x200014d4

08001610 <init_scd30_i2c>:
	//error = scd4x_stop_periodic_measurement();
}

#elif use_scd30
static void init_scd30_i2c()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	 int16_t error = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	80fb      	strh	r3, [r7, #6]
	  sensirion_i2c_hal_init();
 800161a:	f011 fef3 	bl	8013404 <sensirion_i2c_hal_init>
	  init_driver(SCD30_I2C_ADDR_61);
 800161e:	2061      	movs	r0, #97	@ 0x61
 8001620:	f011 fb86 	bl	8012d30 <init_driver>
	    scd30_stop_periodic_measurement();
 8001624:	f011 fc1c 	bl	8012e60 <scd30_stop_periodic_measurement>
	 //   scd30_soft_reset();
	    uint8_t major = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	717b      	strb	r3, [r7, #5]
	    uint8_t minor = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	713b      	strb	r3, [r7, #4]
	    error = scd30_read_firmware_version(&major, &minor);
 8001630:	1d3a      	adds	r2, r7, #4
 8001632:	1d7b      	adds	r3, r7, #5
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f011 fd3a 	bl	80130b0 <scd30_read_firmware_version>
 800163c:	4603      	mov	r3, r0
 800163e:	80fb      	strh	r3, [r7, #6]
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <get_scd30_measurement>:

void get_scd30_measurement()
{
 8001648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800164c:	b09e      	sub	sp, #120	@ 0x78
 800164e:	af04      	add	r7, sp, #16
	 int16_t error = NO_ERROR;
 8001650:	2300      	movs	r3, #0
 8001652:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 8001656:	2000      	movs	r0, #0
 8001658:	f011 fbca 	bl	8012df0 <scd30_start_periodic_measurement>

	  uint16_t repetition = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	    for (repetition = 0; repetition < 1; repetition++) {
 8001662:	2300      	movs	r3, #0
 8001664:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8001668:	e070      	b.n	800174c <get_scd30_measurement+0x104>
	    	sensirion_i2c_hal_sleep_usec(1500000);
 800166a:	483d      	ldr	r0, [pc, #244]	@ (8001760 <get_scd30_measurement+0x118>)
 800166c:	f011 ff40 	bl	80134f0 <sensirion_i2c_hal_sleep_usec>
	        error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 8001670:	4a3c      	ldr	r2, [pc, #240]	@ (8001764 <get_scd30_measurement+0x11c>)
 8001672:	493d      	ldr	r1, [pc, #244]	@ (8001768 <get_scd30_measurement+0x120>)
 8001674:	483d      	ldr	r0, [pc, #244]	@ (800176c <get_scd30_measurement+0x124>)
 8001676:	f011 fb9b 	bl	8012db0 <scd30_blocking_read_measurement_data>
 800167a:	4603      	mov	r3, r0
 800167c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
					&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

			if (debug_scd_pm) {
 8001680:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <get_scd30_measurement+0x128>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d05c      	beq.n	8001742 <get_scd30_measurement+0xfa>
				char buf[100];
				if (error) {
 8001688:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <get_scd30_measurement+0x70>
					sprintf(buf, "error executing blocking_read_measurement_data(): %i\n",
 8001690:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 8001694:	463b      	mov	r3, r7
 8001696:	4937      	ldr	r1, [pc, #220]	@ (8001774 <get_scd30_measurement+0x12c>)
 8001698:	4618      	mov	r0, r3
 800169a:	f01b fbfd 	bl	801ce98 <siprintf>
							error);
					HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800169e:	463b      	mov	r3, r7
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fdfd 	bl	80002a0 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4639      	mov	r1, r7
 80016ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b0:	4831      	ldr	r0, [pc, #196]	@ (8001778 <get_scd30_measurement+0x130>)
 80016b2:	f00a f99d 	bl	800b9f0 <HAL_UART_Transmit>
 80016b6:	e044      	b.n	8001742 <get_scd30_measurement+0xfa>
				} else if (_RunTime_Packet.co2 == 0) {
 80016b8:	4b2c      	ldr	r3, [pc, #176]	@ (800176c <get_scd30_measurement+0x124>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d111      	bne.n	80016ec <get_scd30_measurement+0xa4>
					sprintf(buf, "Invalid sample detected, skipping.\n");
 80016c8:	463b      	mov	r3, r7
 80016ca:	492c      	ldr	r1, [pc, #176]	@ (800177c <get_scd30_measurement+0x134>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f01b fbe3 	bl	801ce98 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016d2:	463b      	mov	r3, r7
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fde3 	bl	80002a0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4639      	mov	r1, r7
 80016e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e4:	4824      	ldr	r0, [pc, #144]	@ (8001778 <get_scd30_measurement+0x130>)
 80016e6:	f00a f983 	bl	800b9f0 <HAL_UART_Transmit>
 80016ea:	e02a      	b.n	8001742 <get_scd30_measurement+0xfa>
				} else {

					sprintf(buf, "Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
										_RunTime_Packet.co2, _RunTime_Packet.temperature,
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <get_scd30_measurement+0x124>)
 80016ee:	681b      	ldr	r3, [r3, #0]
					sprintf(buf, "Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff41 	bl	8000578 <__aeabi_f2d>
 80016f6:	4680      	mov	r8, r0
 80016f8:	4689      	mov	r9, r1
										_RunTime_Packet.co2, _RunTime_Packet.temperature,
 80016fa:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <get_scd30_measurement+0x124>)
 80016fc:	685b      	ldr	r3, [r3, #4]
					sprintf(buf, "Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff3a 	bl	8000578 <__aeabi_f2d>
 8001704:	4604      	mov	r4, r0
 8001706:	460d      	mov	r5, r1
										_RunTime_Packet.humidity);
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <get_scd30_measurement+0x124>)
 800170a:	689b      	ldr	r3, [r3, #8]
					sprintf(buf, "Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff33 	bl	8000578 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4638      	mov	r0, r7
 8001718:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800171c:	e9cd 4500 	strd	r4, r5, [sp]
 8001720:	4642      	mov	r2, r8
 8001722:	464b      	mov	r3, r9
 8001724:	4916      	ldr	r1, [pc, #88]	@ (8001780 <get_scd30_measurement+0x138>)
 8001726:	f01b fbb7 	bl	801ce98 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800172a:	463b      	mov	r3, r7
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fdb7 	bl	80002a0 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	4639      	mov	r1, r7
 8001738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173c:	480e      	ldr	r0, [pc, #56]	@ (8001778 <get_scd30_measurement+0x130>)
 800173e:	f00a f957 	bl	800b9f0 <HAL_UART_Transmit>
	    for (repetition = 0; repetition < 1; repetition++) {
 8001742:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001746:	3301      	adds	r3, #1
 8001748:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800174c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001750:	2b00      	cmp	r3, #0
 8001752:	d08a      	beq.n	800166a <get_scd30_measurement+0x22>
				}
			}
	    }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3768      	adds	r7, #104	@ 0x68
 800175a:	46bd      	mov	sp, r7
 800175c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001760:	0016e360 	.word	0x0016e360
 8001764:	20001494 	.word	0x20001494
 8001768:	20001490 	.word	0x20001490
 800176c:	2000148c 	.word	0x2000148c
 8001770:	200014d0 	.word	0x200014d0
 8001774:	0802065c 	.word	0x0802065c
 8001778:	200019c0 	.word	0x200019c0
 800177c:	08020694 	.word	0x08020694
 8001780:	080206b8 	.word	0x080206b8

08001784 <init_sps30>:

#endif



static void init_sps30() {
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	@ 0x30
 8001788:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 800178a:	480b      	ldr	r0, [pc, #44]	@ (80017b8 <init_sps30+0x34>)
 800178c:	f012 fab4 	bl	8013cf8 <sensirion_sleep_usec>

	sensirion_uart_open();
 8001790:	f012 f9fc 	bl	8013b8c <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4618      	mov	r0, r3
 8001798:	f012 fbcd 	bl	8013f36 <sps30_read_version>
 800179c:	4603      	mov	r3, r0
 800179e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4618      	mov	r0, r3
 80017a6:	f012 fabb 	bl	8013d20 <sps30_get_serial>
 80017aa:	4603      	mov	r3, r0
 80017ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 80017ae:	bf00      	nop
 80017b0:	3730      	adds	r7, #48	@ 0x30
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	000f4240 	.word	0x000f4240

080017bc <get_sps30_measurement>:
void get_sps30_measurement() {
 80017bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c0:	b0a0      	sub	sp, #128	@ 0x80
 80017c2:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 80017c4:	f012 fad8 	bl	8013d78 <sps30_start_measurement>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 80017ce:	483a      	ldr	r0, [pc, #232]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017d0:	f012 fafe 	bl	8013dd0 <sps30_read_measurement>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 80017da:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a37      	ldr	r2, [pc, #220]	@ (80018bc <get_sps30_measurement+0x100>)
 80017e0:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 80017e2:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4a35      	ldr	r2, [pc, #212]	@ (80018bc <get_sps30_measurement+0x100>)
 80017e8:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 80017ea:	4b33      	ldr	r3, [pc, #204]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4a33      	ldr	r2, [pc, #204]	@ (80018bc <get_sps30_measurement+0x100>)
 80017f0:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 80017f2:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	4a31      	ldr	r2, [pc, #196]	@ (80018bc <get_sps30_measurement+0x100>)
 80017f8:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 80017fa:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db54      	blt.n	80018ac <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 8001802:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <get_sps30_measurement+0x104>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d050      	beq.n	80018ac <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 800180a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800180e:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8001812:	b21b      	sxth	r3, r3
 8001814:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001818:	4293      	cmp	r3, r2
 800181a:	d113      	bne.n	8001844 <get_sps30_measurement+0x88>
				sprintf(buffer,
 800181c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001820:	b2da      	uxtb	r2, r3
 8001822:	463b      	mov	r3, r7
 8001824:	4927      	ldr	r1, [pc, #156]	@ (80018c4 <get_sps30_measurement+0x108>)
 8001826:	4618      	mov	r0, r3
 8001828:	f01b fb36 	bl	801ce98 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 800182c:	463b      	mov	r3, r7
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fd36 	bl	80002a0 <strlen>
 8001834:	4603      	mov	r3, r0
 8001836:	b29a      	uxth	r2, r3
 8001838:	4639      	mov	r1, r7
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	4822      	ldr	r0, [pc, #136]	@ (80018c8 <get_sps30_measurement+0x10c>)
 8001840:	f00a f8d6 	bl	800b9f0 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001844:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001846:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe95 	bl	8000578 <__aeabi_f2d>
 800184e:	4682      	mov	sl, r0
 8001850:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001854:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe8e 	bl	8000578 <__aeabi_f2d>
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001862:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe87 	bl	8000578 <__aeabi_f2d>
 800186a:	4680      	mov	r8, r0
 800186c:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001870:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe80 	bl	8000578 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4638      	mov	r0, r7
 800187e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001882:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001886:	e9cd 4500 	strd	r4, r5, [sp]
 800188a:	4652      	mov	r2, sl
 800188c:	465b      	mov	r3, fp
 800188e:	490f      	ldr	r1, [pc, #60]	@ (80018cc <get_sps30_measurement+0x110>)
 8001890:	f01b fb02 	bl	801ce98 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001894:	463b      	mov	r3, r7
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fd02 	bl	80002a0 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4639      	mov	r1, r7
 80018a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a6:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <get_sps30_measurement+0x10c>)
 80018a8:	f00a f8a2 	bl	800b9f0 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 80018ac:	bf00      	nop
 80018ae:	3768      	adds	r7, #104	@ 0x68
 80018b0:	46bd      	mov	sp, r7
 80018b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018b6:	bf00      	nop
 80018b8:	200016f0 	.word	0x200016f0
 80018bc:	2000148c 	.word	0x2000148c
 80018c0:	200014d0 	.word	0x200014d0
 80018c4:	080206ec 	.word	0x080206ec
 80018c8:	200019c0 	.word	0x200019c0
 80018cc:	08020720 	.word	0x08020720

080018d0 <check_peripheral_error>:
static void check_peripheral_error() {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	@ 0x38
 80018d4:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 80018d6:	4b26      	ldr	r3, [pc, #152]	@ (8001970 <check_peripheral_error+0xa0>)
 80018d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <check_peripheral_error+0x1c>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 80018e0:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <check_peripheral_error+0xa0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		console_uart_init();
 80018e8:	f00f fa9c 	bl	8010e24 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 80018ec:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <check_peripheral_error+0xa0>)
 80018ee:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d015      	beq.n	8001922 <check_peripheral_error+0x52>
		_RunTime_Packet.sps30_uart_error = 0;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <check_peripheral_error+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		disable_5v();
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001904:	481b      	ldr	r0, [pc, #108]	@ (8001974 <check_peripheral_error+0xa4>)
 8001906:	f004 f99f 	bl	8005c48 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800190a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800190e:	f002 f9c3 	bl	8003c98 <HAL_Delay>
		enable_5v();
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001918:	4816      	ldr	r0, [pc, #88]	@ (8001974 <check_peripheral_error+0xa4>)
 800191a:	f004 f995 	bl	8005c48 <HAL_GPIO_WritePin>
		init_sps30();
 800191e:	f7ff ff31 	bl	8001784 <init_sps30>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
	}
#elif use_scd30
	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 8001922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001926:	2205      	movs	r2, #5
 8001928:	21c2      	movs	r1, #194	@ 0xc2
 800192a:	4813      	ldr	r0, [pc, #76]	@ (8001978 <check_peripheral_error+0xa8>)
 800192c:	f004 fe56 	bl	80065dc <HAL_I2C_IsDeviceReady>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d018      	beq.n	8001968 <check_peripheral_error+0x98>
			!= HAL_OK) {

		if(debug_scd_pm)
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <check_peripheral_error+0xac>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <check_peripheral_error+0x90>
		{char buf_error[50];
		sprintf(buf_error, "error in scd30 i2c so not running it\n");
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	490f      	ldr	r1, [pc, #60]	@ (8001980 <check_peripheral_error+0xb0>)
 8001942:	4618      	mov	r0, r3
 8001944:	f01b faa8 	bl	801ce98 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error), 1000);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fca8 	bl	80002a0 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	1d39      	adds	r1, r7, #4
 8001956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195a:	480a      	ldr	r0, [pc, #40]	@ (8001984 <check_peripheral_error+0xb4>)
 800195c:	f00a f848 	bl	800b9f0 <HAL_UART_Transmit>
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 8001960:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <check_peripheral_error+0xa0>)
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
#endif

}
 8001968:	bf00      	nop
 800196a:	3738      	adds	r7, #56	@ 0x38
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000148c 	.word	0x2000148c
 8001974:	40020400 	.word	0x40020400
 8001978:	20001790 	.word	0x20001790
 800197c:	200014d0 	.word	0x200014d0
 8001980:	08020758 	.word	0x08020758
 8001984:	200019c0 	.word	0x200019c0

08001988 <sensor_calibration>:
static void sensor_calibration() {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <sensor_calibration+0x28>)
 800198e:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <sensor_calibration+0x24>
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <sensor_calibration+0x28>)
 8001998:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <sensor_calibration+0x28>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		sps30_start_manual_fan_cleaning();
 80019a8:	f012 fab1 	bl	8013f0e <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000148c 	.word	0x2000148c

080019b4 <sleep>:
static void sleep() {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(disable_led);
 80019b8:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <sleep+0x8c>)
 80019ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 80019c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <sleep+0x8c>)
 80019c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019c6:	639a      	str	r2, [r3, #56]	@ 0x38
	BLUE_LED_PWM(disable_led);
 80019c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a44 <sleep+0x90>)
 80019ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019ce:	2008      	movs	r0, #8
 80019d0:	f7ff fb20 	bl	8001014 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 80019d4:	481c      	ldr	r0, [pc, #112]	@ (8001a48 <sleep+0x94>)
 80019d6:	f002 fa0a 	bl	8003dee <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	220b      	movs	r2, #11
 80019e0:	491a      	ldr	r1, [pc, #104]	@ (8001a4c <sleep+0x98>)
 80019e2:	481b      	ldr	r0, [pc, #108]	@ (8001a50 <sleep+0x9c>)
 80019e4:	f00a f804 	bl	800b9f0 <HAL_UART_Transmit>
	disable_5v();
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ee:	4819      	ldr	r0, [pc, #100]	@ (8001a54 <sleep+0xa0>)
 80019f0:	f004 f92a 	bl	8005c48 <HAL_GPIO_WritePin>
	disable_motion();
 80019f4:	2201      	movs	r2, #1
 80019f6:	2102      	movs	r1, #2
 80019f8:	4817      	ldr	r0, [pc, #92]	@ (8001a58 <sleep+0xa4>)
 80019fa:	f004 f925 	bl	8005c48 <HAL_GPIO_WritePin>
#ifdef use_scd40x
	scd4x_stop_periodic_measurement();
	scd4x_power_down();
#elif use_scd30
	scd30_stop_periodic_measurement();
 80019fe:	f011 fa2f 	bl	8012e60 <scd30_stop_periodic_measurement>
#endif
	console_uart_deinit();
 8001a02:	f00f fa03 	bl	8010e0c <console_uart_deinit>
	sensirion_i2c_hal_free();
 8001a06:	f011 fd2f 	bl	8013468 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001a0a:	f012 f8ff 	bl	8013c0c <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001a0e:	f019 fb8b 	bl	801b128 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001a12:	4812      	ldr	r0, [pc, #72]	@ (8001a5c <sleep+0xa8>)
 8001a14:	f008 ff1f 	bl	800a856 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8001a18:	4811      	ldr	r0, [pc, #68]	@ (8001a60 <sleep+0xac>)
 8001a1a:	f008 ff1c 	bl	800a856 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001a1e:	4811      	ldr	r0, [pc, #68]	@ (8001a64 <sleep+0xb0>)
 8001a20:	f008 ff19 	bl	800a856 <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 8001a24:	4810      	ldr	r0, [pc, #64]	@ (8001a68 <sleep+0xb4>)
 8001a26:	f003 f805 	bl	8004a34 <HAL_DMA_DeInit>

	clock_speed_slow();
 8001a2a:	f7ff fbfb 	bl	8001224 <clock_speed_slow>

	HAL_SuspendTick();
 8001a2e:	f002 f957 	bl	8003ce0 <HAL_SuspendTick>

	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001a32:	2101      	movs	r1, #1
 8001a34:	2001      	movs	r0, #1
 8001a36:	f006 fd33 	bl	80084a0 <HAL_PWR_EnterSTOPMode>

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40000400 	.word	0x40000400
 8001a44:	2000034c 	.word	0x2000034c
 8001a48:	20001748 	.word	0x20001748
 8001a4c:	08020780 	.word	0x08020780
 8001a50:	200019c0 	.word	0x200019c0
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	20001888 	.word	0x20001888
 8001a60:	200018d0 	.word	0x200018d0
 8001a64:	20001918 	.word	0x20001918
 8001a68:	20001960 	.word	0x20001960

08001a6c <wakeup>:
static void wakeup() {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_ResumeTick();
 8001a70:	f002 f946 	bl	8003d00 <HAL_ResumeTick>
	clock_speed_high();
 8001a74:	f7ff fc38 	bl	80012e8 <clock_speed_high>
	enable_5v();
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a7e:	4838      	ldr	r0, [pc, #224]	@ (8001b60 <wakeup+0xf4>)
 8001a80:	f004 f8e2 	bl	8005c48 <HAL_GPIO_WritePin>
	enable_motion();
 8001a84:	2200      	movs	r2, #0
 8001a86:	2102      	movs	r1, #2
 8001a88:	4836      	ldr	r0, [pc, #216]	@ (8001b64 <wakeup+0xf8>)
 8001a8a:	f004 f8dd 	bl	8005c48 <HAL_GPIO_WritePin>
	console_uart_init();
 8001a8e:	f00f f9c9 	bl	8010e24 <console_uart_init>

	MX_DMA_Init();
 8001a92:	f7ff fb83 	bl	800119c <MX_DMA_Init>
	MX_TIM1_Init();
 8001a96:	f001 f8ab 	bl	8002bf0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001a9a:	f001 f8f9 	bl	8002c90 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001a9e:	f001 f945 	bl	8002d2c <MX_TIM3_Init>

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8001aa2:	f7ff fdb5 	bl	8001610 <init_scd30_i2c>
#endif

	if (Mount_SD("/") == FR_OK) {
 8001aa6:	4830      	ldr	r0, [pc, #192]	@ (8001b68 <wakeup+0xfc>)
 8001aa8:	f018 fcce 	bl	801a448 <Mount_SD>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <wakeup+0x52>
		Unmount_SD("/");
 8001ab2:	482d      	ldr	r0, [pc, #180]	@ (8001b68 <wakeup+0xfc>)
 8001ab4:	f018 fcf4 	bl	801a4a0 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8001ab8:	f019 fb48 	bl	801b14c <MX_USB_DEVICE_Init>
 8001abc:	e002      	b.n	8001ac4 <wakeup+0x58>
	} else {
		datawritten = 2;
 8001abe:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <wakeup+0x100>)
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001ac4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ac8:	4826      	ldr	r0, [pc, #152]	@ (8001b64 <wakeup+0xf8>)
 8001aca:	f004 f8a5 	bl	8005c18 <HAL_GPIO_ReadPin>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <wakeup+0x6e>
		init_sps30();
 8001ad4:	f7ff fe56 	bl	8001784 <init_sps30>
 8001ad8:	e00f      	b.n	8001afa <wakeup+0x8e>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001ada:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <wakeup+0x104>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_start_timer = 1;
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <wakeup+0x104>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8001aea:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <wakeup+0x108>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001af0:	f002 f8c6 	bl	8003c80 <HAL_GetTick>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a20      	ldr	r2, [pc, #128]	@ (8001b78 <wakeup+0x10c>)
 8001af8:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001afa:	4820      	ldr	r0, [pc, #128]	@ (8001b7c <wakeup+0x110>)
 8001afc:	f008 ff00 	bl	800a900 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001b00:	491f      	ldr	r1, [pc, #124]	@ (8001b80 <wakeup+0x114>)
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	4a1f      	ldr	r2, [pc, #124]	@ (8001b84 <wakeup+0x118>)
 8001b08:	481f      	ldr	r0, [pc, #124]	@ (8001b88 <wakeup+0x11c>)
 8001b0a:	f002 fff1 	bl	8004af0 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <wakeup+0x110>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <wakeup+0x110>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b1c:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001b1e:	4a18      	ldr	r2, [pc, #96]	@ (8001b80 <wakeup+0x114>)
 8001b20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b24:	2008      	movs	r0, #8
 8001b26:	f7ff fa75 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4817      	ldr	r0, [pc, #92]	@ (8001b8c <wakeup+0x120>)
 8001b2e:	f009 f82b 	bl	800ab88 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001b32:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <wakeup+0x124>)
 8001b34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b38:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	4813      	ldr	r0, [pc, #76]	@ (8001b8c <wakeup+0x120>)
 8001b3e:	f009 f823 	bl	800ab88 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <wakeup+0x124>)
 8001b44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b48:	639a      	str	r2, [r3, #56]	@ 0x38

	pwr_off_detected();
 8001b4a:	f7ff fb47 	bl	80011dc <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b52:	220a      	movs	r2, #10
 8001b54:	490f      	ldr	r1, [pc, #60]	@ (8001b94 <wakeup+0x128>)
 8001b56:	4810      	ldr	r0, [pc, #64]	@ (8001b98 <wakeup+0x12c>)
 8001b58:	f009 ff4a 	bl	800b9f0 <HAL_UART_Transmit>
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40020400 	.word	0x40020400
 8001b64:	40020000 	.word	0x40020000
 8001b68:	0802078c 	.word	0x0802078c
 8001b6c:	20002369 	.word	0x20002369
 8001b70:	2000148c 	.word	0x2000148c
 8001b74:	200014dc 	.word	0x200014dc
 8001b78:	20001720 	.word	0x20001720
 8001b7c:	20001888 	.word	0x20001888
 8001b80:	2000034c 	.word	0x2000034c
 8001b84:	40020418 	.word	0x40020418
 8001b88:	20001960 	.word	0x20001960
 8001b8c:	20001918 	.word	0x20001918
 8001b90:	40000400 	.word	0x40000400
 8001b94:	08020790 	.word	0x08020790
 8001b98:	200019c0 	.word	0x200019c0

08001b9c <green_led_blink>:

static void green_led_blink() {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <green_led_blink+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001ba6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001baa:	f002 f875 	bl	8003c98 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <green_led_blink+0x4c>)
 8001bb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bb4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001bb6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001bba:	f002 f86d 	bl	8003c98 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <green_led_blink+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001bc4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001bc8:	f002 f866 	bl	8003c98 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <green_led_blink+0x4c>)
 8001bce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bd2:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001bd4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001bd8:	f002 f85e 	bl	8003c98 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001bdc:	4b02      	ldr	r3, [pc, #8]	@ (8001be8 <green_led_blink+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40000400 	.word	0x40000400

08001bec <led_awake_routine>:

static void led_awake_routine() {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001bf0:	4ba6      	ldr	r3, [pc, #664]	@ (8001e8c <led_awake_routine+0x2a0>)
 8001bf2:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 8195 	bne.w	8001f26 <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001bfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c00:	48a3      	ldr	r0, [pc, #652]	@ (8001e90 <led_awake_routine+0x2a4>)
 8001c02:	f004 f809 	bl	8005c18 <HAL_GPIO_ReadPin>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d025      	beq.n	8001c58 <led_awake_routine+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001c0c:	4b9f      	ldr	r3, [pc, #636]	@ (8001e8c <led_awake_routine+0x2a0>)
 8001c0e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c12:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001e94 <led_awake_routine+0x2a8>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	db0d      	blt.n	8001c3c <led_awake_routine+0x50>
				GREEN_LED_PWM(0);
 8001c20:	4b9d      	ldr	r3, [pc, #628]	@ (8001e98 <led_awake_routine+0x2ac>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001c26:	4b9c      	ldr	r3, [pc, #624]	@ (8001e98 <led_awake_routine+0x2ac>)
 8001c28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c2c:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001c2e:	4a9b      	ldr	r2, [pc, #620]	@ (8001e9c <led_awake_routine+0x2b0>)
 8001c30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c34:	2008      	movs	r0, #8
 8001c36:	f7ff f9ed 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001c3a:	e196      	b.n	8001f6a <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001c3c:	4b96      	ldr	r3, [pc, #600]	@ (8001e98 <led_awake_routine+0x2ac>)
 8001c3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c42:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001c44:	4b94      	ldr	r3, [pc, #592]	@ (8001e98 <led_awake_routine+0x2ac>)
 8001c46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c4a:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8001c4c:	4a93      	ldr	r2, [pc, #588]	@ (8001e9c <led_awake_routine+0x2b0>)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2008      	movs	r0, #8
 8001c52:	f7ff f9df 	bl	8001014 <setSoftPWM>
}
 8001c56:	e188      	b.n	8001f6a <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001c58:	4a90      	ldr	r2, [pc, #576]	@ (8001e9c <led_awake_routine+0x2b0>)
 8001c5a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c5e:	2008      	movs	r0, #8
 8001c60:	f7ff f9d8 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001c64:	4b89      	ldr	r3, [pc, #548]	@ (8001e8c <led_awake_routine+0x2a0>)
 8001c66:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c6a:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001e94 <led_awake_routine+0x2a8>
 8001c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	db38      	blt.n	8001cea <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001c78:	4b87      	ldr	r3, [pc, #540]	@ (8001e98 <led_awake_routine+0x2ac>)
 8001c7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c7e:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001c80:	4a86      	ldr	r2, [pc, #536]	@ (8001e9c <led_awake_routine+0x2b0>)
 8001c82:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c86:	2008      	movs	r0, #8
 8001c88:	f7ff f9c4 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001c8c:	4b84      	ldr	r3, [pc, #528]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <led_awake_routine+0xbc>
					green_led_pwm_val += 5;
 8001c94:	4b83      	ldr	r3, [pc, #524]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3305      	adds	r3, #5
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	4b80      	ldr	r3, [pc, #512]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001ca4:	801a      	strh	r2, [r3, #0]
 8001ca6:	e008      	b.n	8001cba <led_awake_routine+0xce>
					green_led_pwm_val -= 5;
 8001ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	3b05      	subs	r3, #5
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	b21a      	sxth	r2, r3
 8001cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001cb8:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001cba:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cc4:	dd03      	ble.n	8001cce <led_awake_routine+0xe2>
					green_led_pwm_flag = 1;
 8001cc6:	4b76      	ldr	r3, [pc, #472]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	e007      	b.n	8001cde <led_awake_routine+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8001cce:	4b75      	ldr	r3, [pc, #468]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	dc02      	bgt.n	8001cde <led_awake_routine+0xf2>
					green_led_pwm_flag = 0;
 8001cd8:	4b71      	ldr	r3, [pc, #452]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001cde:	4b71      	ldr	r3, [pc, #452]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001ce0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e98 <led_awake_routine+0x2ac>)
 8001ce6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ce8:	e13f      	b.n	8001f6a <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8001cea:	4b68      	ldr	r3, [pc, #416]	@ (8001e8c <led_awake_routine+0x2a0>)
 8001cec:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cf0:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	dd42      	ble.n	8001d84 <led_awake_routine+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001cfe:	4b63      	ldr	r3, [pc, #396]	@ (8001e8c <led_awake_routine+0x2a0>)
 8001d00:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d04:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001e94 <led_awake_routine+0x2a8>
 8001d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	d838      	bhi.n	8001d84 <led_awake_routine+0x198>
				RED_LED_PWM(disable_led);
 8001d12:	4b61      	ldr	r3, [pc, #388]	@ (8001e98 <led_awake_routine+0x2ac>)
 8001d14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d18:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d1a:	4a60      	ldr	r2, [pc, #384]	@ (8001e9c <led_awake_routine+0x2b0>)
 8001d1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d20:	2008      	movs	r0, #8
 8001d22:	f7ff f977 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001d26:	4b5e      	ldr	r3, [pc, #376]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <led_awake_routine+0x156>
					green_led_pwm_val += 5;
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3305      	adds	r3, #5
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001d3e:	801a      	strh	r2, [r3, #0]
 8001d40:	e008      	b.n	8001d54 <led_awake_routine+0x168>
					green_led_pwm_val -= 5;
 8001d42:	4b58      	ldr	r3, [pc, #352]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3b05      	subs	r3, #5
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	4b54      	ldr	r3, [pc, #336]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001d52:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001d54:	4b53      	ldr	r3, [pc, #332]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d5e:	dd03      	ble.n	8001d68 <led_awake_routine+0x17c>
					green_led_pwm_flag = 1;
 8001d60:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e007      	b.n	8001d78 <led_awake_routine+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8001d68:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	dc02      	bgt.n	8001d78 <led_awake_routine+0x18c>
					green_led_pwm_flag = 0;
 8001d72:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001d78:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001d7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d7e:	4b46      	ldr	r3, [pc, #280]	@ (8001e98 <led_awake_routine+0x2ac>)
 8001d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d82:	e0f2      	b.n	8001f6a <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001d84:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <led_awake_routine+0x2a0>)
 8001d86:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d8a:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ea8 <led_awake_routine+0x2bc>
 8001d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	f340 808d 	ble.w	8001eb4 <led_awake_routine+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e8c <led_awake_routine+0x2a0>)
 8001d9c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001da0:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	f200 8082 	bhi.w	8001eb4 <led_awake_routine+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001db0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <led_awake_routine+0x2c0>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d003      	beq.n	8001dc4 <led_awake_routine+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <led_awake_routine+0x2c0>)
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	4b37      	ldr	r3, [pc, #220]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001dc2:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8001dc4:	4a35      	ldr	r2, [pc, #212]	@ (8001e9c <led_awake_routine+0x2b0>)
 8001dc6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dca:	2008      	movs	r0, #8
 8001dcc:	f7ff f922 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001dd0:	4b33      	ldr	r3, [pc, #204]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <led_awake_routine+0x200>
					green_led_pwm_val += 5;
 8001dd8:	4b32      	ldr	r3, [pc, #200]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3305      	adds	r3, #5
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	e008      	b.n	8001dfe <led_awake_routine+0x212>
					green_led_pwm_val -= 5;
 8001dec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b05      	subs	r3, #5
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001dfc:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001dfe:	4b29      	ldr	r3, [pc, #164]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e08:	dd03      	ble.n	8001e12 <led_awake_routine+0x226>
					green_led_pwm_flag = 1;
 8001e0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e007      	b.n	8001e22 <led_awake_routine+0x236>
				} else if (green_led_pwm_val <= 0) {
 8001e12:	4b24      	ldr	r3, [pc, #144]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	dc02      	bgt.n	8001e22 <led_awake_routine+0x236>
					green_led_pwm_flag = 0;
 8001e1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <led_awake_routine+0x2b4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8001e22:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <led_awake_routine+0x2c0>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <led_awake_routine+0x252>
					red_led_pwm_val += 5;
 8001e2a:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <led_awake_routine+0x2c4>)
 8001e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3305      	adds	r3, #5
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <led_awake_routine+0x2c4>)
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	e008      	b.n	8001e50 <led_awake_routine+0x264>
					red_led_pwm_val -= 5;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <led_awake_routine+0x2c4>)
 8001e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b05      	subs	r3, #5
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <led_awake_routine+0x2c4>)
 8001e4e:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001e50:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <led_awake_routine+0x2c4>)
 8001e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e5a:	dd03      	ble.n	8001e64 <led_awake_routine+0x278>
					red_led_pwm_flag = 1;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <led_awake_routine+0x2c0>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
 8001e62:	e007      	b.n	8001e74 <led_awake_routine+0x288>
				} else if (red_led_pwm_val <= 0) {
 8001e64:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <led_awake_routine+0x2c4>)
 8001e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	dc02      	bgt.n	8001e74 <led_awake_routine+0x288>
					red_led_pwm_flag = 0;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <led_awake_routine+0x2c0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001e74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <led_awake_routine+0x2b8>)
 8001e76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <led_awake_routine+0x2ac>)
 8001e7c:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <led_awake_routine+0x2c4>)
 8001e80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e84:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <led_awake_routine+0x2ac>)
 8001e86:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e88:	e06f      	b.n	8001f6a <led_awake_routine+0x37e>
 8001e8a:	bf00      	nop
 8001e8c:	2000148c 	.word	0x2000148c
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40833333 	.word	0x40833333
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	2000034c 	.word	0x2000034c
 8001ea0:	200012ec 	.word	0x200012ec
 8001ea4:	200012ee 	.word	0x200012ee
 8001ea8:	40533333 	.word	0x40533333
 8001eac:	200012ed 	.word	0x200012ed
 8001eb0:	200012f0 	.word	0x200012f0
				GREEN_LED_PWM(disable_led);
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <led_awake_routine+0x384>)
 8001eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001eba:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 8001ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8001f74 <led_awake_routine+0x388>)
 8001ebe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ec2:	2008      	movs	r0, #8
 8001ec4:	f7ff f8a6 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f78 <led_awake_routine+0x38c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <led_awake_routine+0x2f8>
					red_led_pwm_val += 5;
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <led_awake_routine+0x390>)
 8001ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3305      	adds	r3, #5
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	b21a      	sxth	r2, r3
 8001ede:	4b27      	ldr	r3, [pc, #156]	@ (8001f7c <led_awake_routine+0x390>)
 8001ee0:	801a      	strh	r2, [r3, #0]
 8001ee2:	e008      	b.n	8001ef6 <led_awake_routine+0x30a>
					red_led_pwm_val -= 5;
 8001ee4:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <led_awake_routine+0x390>)
 8001ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b05      	subs	r3, #5
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <led_awake_routine+0x390>)
 8001ef4:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001ef6:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <led_awake_routine+0x390>)
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f00:	dd03      	ble.n	8001f0a <led_awake_routine+0x31e>
					red_led_pwm_flag = 1;
 8001f02:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <led_awake_routine+0x38c>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e007      	b.n	8001f1a <led_awake_routine+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <led_awake_routine+0x390>)
 8001f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	dc02      	bgt.n	8001f1a <led_awake_routine+0x32e>
					red_led_pwm_flag = 0;
 8001f14:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <led_awake_routine+0x38c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001f1a:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <led_awake_routine+0x390>)
 8001f1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f20:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <led_awake_routine+0x384>)
 8001f22:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001f24:	e021      	b.n	8001f6a <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8001f26:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <led_awake_routine+0x384>)
 8001f28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f2c:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 8001f2e:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <led_awake_routine+0x388>)
 8001f30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f34:	2008      	movs	r0, #8
 8001f36:	f7ff f86d 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <led_awake_routine+0x390>)
 8001f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f44:	d004      	beq.n	8001f50 <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8001f46:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <led_awake_routine+0x390>)
 8001f48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	e002      	b.n	8001f56 <led_awake_routine+0x36a>
			red_led_pwm_val = 0;
 8001f50:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <led_awake_routine+0x390>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <led_awake_routine+0x390>)
 8001f58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f5c:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <led_awake_routine+0x384>)
 8001f5e:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 8001f60:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f64:	f001 fe98 	bl	8003c98 <HAL_Delay>
}
 8001f68:	e7ff      	b.n	8001f6a <led_awake_routine+0x37e>
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40000400 	.word	0x40000400
 8001f74:	2000034c 	.word	0x2000034c
 8001f78:	200012ed 	.word	0x200012ed
 8001f7c:	200012f0 	.word	0x200012f0

08001f80 <blink_red>:

void blink_red() {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 8001f84:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <blink_red+0x60>)
 8001f86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f8a:	635a      	str	r2, [r3, #52]	@ 0x34
	BLUE_LED_PWM(disable_led);
 8001f8c:	4a15      	ldr	r2, [pc, #84]	@ (8001fe4 <blink_red+0x64>)
 8001f8e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f92:	2008      	movs	r0, #8
 8001f94:	f7ff f83e 	bl	8001014 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <blink_red+0x60>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001f9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa2:	f001 fe79 	bl	8003c98 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <blink_red+0x60>)
 8001fa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fac:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001fae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fb2:	f001 fe71 	bl	8003c98 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <blink_red+0x60>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001fbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fc0:	f001 fe6a 	bl	8003c98 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <blink_red+0x60>)
 8001fc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fca:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001fcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd0:	f001 fe62 	bl	8003c98 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8001fd4:	4b02      	ldr	r3, [pc, #8]	@ (8001fe0 <blink_red+0x60>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	2000034c 	.word	0x2000034c

08001fe8 <led_awake_routine1>:

static void led_awake_routine1() {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001fec:	4ba6      	ldr	r3, [pc, #664]	@ (8002288 <led_awake_routine1+0x2a0>)
 8001fee:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 8195 	bne.w	8002322 <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001ff8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ffc:	48a3      	ldr	r0, [pc, #652]	@ (800228c <led_awake_routine1+0x2a4>)
 8001ffe:	f003 fe0b 	bl	8005c18 <HAL_GPIO_ReadPin>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d025      	beq.n	8002054 <led_awake_routine1+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8002008:	4b9f      	ldr	r3, [pc, #636]	@ (8002288 <led_awake_routine1+0x2a0>)
 800200a:	edd3 7a08 	vldr	s15, [r3, #32]
 800200e:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8002290 <led_awake_routine1+0x2a8>
 8002012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201a:	db0d      	blt.n	8002038 <led_awake_routine1+0x50>
				GREEN_LED_PWM(0);
 800201c:	4b9d      	ldr	r3, [pc, #628]	@ (8002294 <led_awake_routine1+0x2ac>)
 800201e:	2200      	movs	r2, #0
 8002020:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8002022:	4b9c      	ldr	r3, [pc, #624]	@ (8002294 <led_awake_routine1+0x2ac>)
 8002024:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002028:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 800202a:	4a9b      	ldr	r2, [pc, #620]	@ (8002298 <led_awake_routine1+0x2b0>)
 800202c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002030:	2008      	movs	r0, #8
 8002032:	f7fe ffef 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8002036:	e196      	b.n	8002366 <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8002038:	4b96      	ldr	r3, [pc, #600]	@ (8002294 <led_awake_routine1+0x2ac>)
 800203a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800203e:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8002040:	4b94      	ldr	r3, [pc, #592]	@ (8002294 <led_awake_routine1+0x2ac>)
 8002042:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002046:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8002048:	4a93      	ldr	r2, [pc, #588]	@ (8002298 <led_awake_routine1+0x2b0>)
 800204a:	2100      	movs	r1, #0
 800204c:	2008      	movs	r0, #8
 800204e:	f7fe ffe1 	bl	8001014 <setSoftPWM>
}
 8002052:	e188      	b.n	8002366 <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8002054:	4a90      	ldr	r2, [pc, #576]	@ (8002298 <led_awake_routine1+0x2b0>)
 8002056:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800205a:	2008      	movs	r0, #8
 800205c:	f7fe ffda 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8002060:	4b89      	ldr	r3, [pc, #548]	@ (8002288 <led_awake_routine1+0x2a0>)
 8002062:	edd3 7a08 	vldr	s15, [r3, #32]
 8002066:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8002290 <led_awake_routine1+0x2a8>
 800206a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002072:	db38      	blt.n	80020e6 <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 8002074:	4b87      	ldr	r3, [pc, #540]	@ (8002294 <led_awake_routine1+0x2ac>)
 8002076:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800207a:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 800207c:	4a86      	ldr	r2, [pc, #536]	@ (8002298 <led_awake_routine1+0x2b0>)
 800207e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002082:	2008      	movs	r0, #8
 8002084:	f7fe ffc6 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002088:	4b84      	ldr	r3, [pc, #528]	@ (800229c <led_awake_routine1+0x2b4>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <led_awake_routine1+0xbc>
					green_led_pwm_val += 40;
 8002090:	4b83      	ldr	r3, [pc, #524]	@ (80022a0 <led_awake_routine1+0x2b8>)
 8002092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002096:	b29b      	uxth	r3, r3
 8002098:	3328      	adds	r3, #40	@ 0x28
 800209a:	b29b      	uxth	r3, r3
 800209c:	b21a      	sxth	r2, r3
 800209e:	4b80      	ldr	r3, [pc, #512]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80020a0:	801a      	strh	r2, [r3, #0]
 80020a2:	e008      	b.n	80020b6 <led_awake_routine1+0xce>
					green_led_pwm_val -= 40;
 80020a4:	4b7e      	ldr	r3, [pc, #504]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80020a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b28      	subs	r3, #40	@ 0x28
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	b21a      	sxth	r2, r3
 80020b2:	4b7b      	ldr	r3, [pc, #492]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80020b4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80020b6:	4b7a      	ldr	r3, [pc, #488]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80020b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020c0:	dd03      	ble.n	80020ca <led_awake_routine1+0xe2>
					green_led_pwm_flag = 1;
 80020c2:	4b76      	ldr	r3, [pc, #472]	@ (800229c <led_awake_routine1+0x2b4>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e007      	b.n	80020da <led_awake_routine1+0xf2>
				} else if (green_led_pwm_val <= 0) {
 80020ca:	4b75      	ldr	r3, [pc, #468]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80020cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	dc02      	bgt.n	80020da <led_awake_routine1+0xf2>
					green_led_pwm_flag = 0;
 80020d4:	4b71      	ldr	r3, [pc, #452]	@ (800229c <led_awake_routine1+0x2b4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80020da:	4b71      	ldr	r3, [pc, #452]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80020dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002294 <led_awake_routine1+0x2ac>)
 80020e2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80020e4:	e13f      	b.n	8002366 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 80020e6:	4b68      	ldr	r3, [pc, #416]	@ (8002288 <led_awake_routine1+0x2a0>)
 80020e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80020ec:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80020f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f8:	dd42      	ble.n	8002180 <led_awake_routine1+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 80020fa:	4b63      	ldr	r3, [pc, #396]	@ (8002288 <led_awake_routine1+0x2a0>)
 80020fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8002100:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002290 <led_awake_routine1+0x2a8>
 8002104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	d838      	bhi.n	8002180 <led_awake_routine1+0x198>
				RED_LED_PWM(disable_led);
 800210e:	4b61      	ldr	r3, [pc, #388]	@ (8002294 <led_awake_routine1+0x2ac>)
 8002110:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002116:	4a60      	ldr	r2, [pc, #384]	@ (8002298 <led_awake_routine1+0x2b0>)
 8002118:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800211c:	2008      	movs	r0, #8
 800211e:	f7fe ff79 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002122:	4b5e      	ldr	r3, [pc, #376]	@ (800229c <led_awake_routine1+0x2b4>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <led_awake_routine1+0x156>
					green_led_pwm_val += 40;
 800212a:	4b5d      	ldr	r3, [pc, #372]	@ (80022a0 <led_awake_routine1+0x2b8>)
 800212c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002130:	b29b      	uxth	r3, r3
 8002132:	3328      	adds	r3, #40	@ 0x28
 8002134:	b29b      	uxth	r3, r3
 8002136:	b21a      	sxth	r2, r3
 8002138:	4b59      	ldr	r3, [pc, #356]	@ (80022a0 <led_awake_routine1+0x2b8>)
 800213a:	801a      	strh	r2, [r3, #0]
 800213c:	e008      	b.n	8002150 <led_awake_routine1+0x168>
					green_led_pwm_val -= 40;
 800213e:	4b58      	ldr	r3, [pc, #352]	@ (80022a0 <led_awake_routine1+0x2b8>)
 8002140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b28      	subs	r3, #40	@ 0x28
 8002148:	b29b      	uxth	r3, r3
 800214a:	b21a      	sxth	r2, r3
 800214c:	4b54      	ldr	r3, [pc, #336]	@ (80022a0 <led_awake_routine1+0x2b8>)
 800214e:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8002150:	4b53      	ldr	r3, [pc, #332]	@ (80022a0 <led_awake_routine1+0x2b8>)
 8002152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002156:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800215a:	dd03      	ble.n	8002164 <led_awake_routine1+0x17c>
					green_led_pwm_flag = 1;
 800215c:	4b4f      	ldr	r3, [pc, #316]	@ (800229c <led_awake_routine1+0x2b4>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	e007      	b.n	8002174 <led_awake_routine1+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8002164:	4b4e      	ldr	r3, [pc, #312]	@ (80022a0 <led_awake_routine1+0x2b8>)
 8002166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216a:	2b00      	cmp	r3, #0
 800216c:	dc02      	bgt.n	8002174 <led_awake_routine1+0x18c>
					green_led_pwm_flag = 0;
 800216e:	4b4b      	ldr	r3, [pc, #300]	@ (800229c <led_awake_routine1+0x2b4>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002174:	4b4a      	ldr	r3, [pc, #296]	@ (80022a0 <led_awake_routine1+0x2b8>)
 8002176:	f9b3 2000 	ldrsh.w	r2, [r3]
 800217a:	4b46      	ldr	r3, [pc, #280]	@ (8002294 <led_awake_routine1+0x2ac>)
 800217c:	635a      	str	r2, [r3, #52]	@ 0x34
 800217e:	e0f2      	b.n	8002366 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8002180:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <led_awake_routine1+0x2a0>)
 8002182:	edd3 7a08 	vldr	s15, [r3, #32]
 8002186:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80022a4 <led_awake_routine1+0x2bc>
 800218a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002192:	f340 808d 	ble.w	80022b0 <led_awake_routine1+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8002196:	4b3c      	ldr	r3, [pc, #240]	@ (8002288 <led_awake_routine1+0x2a0>)
 8002198:	edd3 7a08 	vldr	s15, [r3, #32]
 800219c:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80021a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	f200 8082 	bhi.w	80022b0 <led_awake_routine1+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 80021ac:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <led_awake_routine1+0x2b4>)
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	4b3d      	ldr	r3, [pc, #244]	@ (80022a8 <led_awake_routine1+0x2c0>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d003      	beq.n	80021c0 <led_awake_routine1+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 80021b8:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <led_awake_routine1+0x2c0>)
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	4b37      	ldr	r3, [pc, #220]	@ (800229c <led_awake_routine1+0x2b4>)
 80021be:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 80021c0:	4a35      	ldr	r2, [pc, #212]	@ (8002298 <led_awake_routine1+0x2b0>)
 80021c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021c6:	2008      	movs	r0, #8
 80021c8:	f7fe ff24 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80021cc:	4b33      	ldr	r3, [pc, #204]	@ (800229c <led_awake_routine1+0x2b4>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <led_awake_routine1+0x200>
					green_led_pwm_val += 40;
 80021d4:	4b32      	ldr	r3, [pc, #200]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80021d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3328      	adds	r3, #40	@ 0x28
 80021de:	b29b      	uxth	r3, r3
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	4b2f      	ldr	r3, [pc, #188]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	e008      	b.n	80021fa <led_awake_routine1+0x212>
					green_led_pwm_val -= 40;
 80021e8:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80021ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b28      	subs	r3, #40	@ 0x28
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80021f8:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80021fa:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <led_awake_routine1+0x2b8>)
 80021fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002200:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002204:	dd03      	ble.n	800220e <led_awake_routine1+0x226>
					green_led_pwm_flag = 1;
 8002206:	4b25      	ldr	r3, [pc, #148]	@ (800229c <led_awake_routine1+0x2b4>)
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e007      	b.n	800221e <led_awake_routine1+0x236>
				} else if (green_led_pwm_val <= 0) {
 800220e:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <led_awake_routine1+0x2b8>)
 8002210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002214:	2b00      	cmp	r3, #0
 8002216:	dc02      	bgt.n	800221e <led_awake_routine1+0x236>
					green_led_pwm_flag = 0;
 8002218:	4b20      	ldr	r3, [pc, #128]	@ (800229c <led_awake_routine1+0x2b4>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 800221e:	4b22      	ldr	r3, [pc, #136]	@ (80022a8 <led_awake_routine1+0x2c0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <led_awake_routine1+0x252>
					red_led_pwm_val += 40;
 8002226:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <led_awake_routine1+0x2c4>)
 8002228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222c:	b29b      	uxth	r3, r3
 800222e:	3328      	adds	r3, #40	@ 0x28
 8002230:	b29b      	uxth	r3, r3
 8002232:	b21a      	sxth	r2, r3
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <led_awake_routine1+0x2c4>)
 8002236:	801a      	strh	r2, [r3, #0]
 8002238:	e008      	b.n	800224c <led_awake_routine1+0x264>
					red_led_pwm_val -= 40;
 800223a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <led_awake_routine1+0x2c4>)
 800223c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b28      	subs	r3, #40	@ 0x28
 8002244:	b29b      	uxth	r3, r3
 8002246:	b21a      	sxth	r2, r3
 8002248:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <led_awake_routine1+0x2c4>)
 800224a:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 800224c:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <led_awake_routine1+0x2c4>)
 800224e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002252:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002256:	dd03      	ble.n	8002260 <led_awake_routine1+0x278>
					red_led_pwm_flag = 1;
 8002258:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <led_awake_routine1+0x2c0>)
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e007      	b.n	8002270 <led_awake_routine1+0x288>
				} else if (red_led_pwm_val <= 0) {
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <led_awake_routine1+0x2c4>)
 8002262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002266:	2b00      	cmp	r3, #0
 8002268:	dc02      	bgt.n	8002270 <led_awake_routine1+0x288>
					red_led_pwm_flag = 0;
 800226a:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <led_awake_routine1+0x2c0>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <led_awake_routine1+0x2b8>)
 8002272:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <led_awake_routine1+0x2ac>)
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 800227a:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <led_awake_routine1+0x2c4>)
 800227c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002280:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <led_awake_routine1+0x2ac>)
 8002282:	639a      	str	r2, [r3, #56]	@ 0x38
 8002284:	e06f      	b.n	8002366 <led_awake_routine1+0x37e>
 8002286:	bf00      	nop
 8002288:	2000148c 	.word	0x2000148c
 800228c:	40020000 	.word	0x40020000
 8002290:	40833333 	.word	0x40833333
 8002294:	40000400 	.word	0x40000400
 8002298:	2000034c 	.word	0x2000034c
 800229c:	200012ec 	.word	0x200012ec
 80022a0:	200012ee 	.word	0x200012ee
 80022a4:	40533333 	.word	0x40533333
 80022a8:	200012ed 	.word	0x200012ed
 80022ac:	200012f0 	.word	0x200012f0
				GREEN_LED_PWM(disable_led);
 80022b0:	4b2e      	ldr	r3, [pc, #184]	@ (800236c <led_awake_routine1+0x384>)
 80022b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022b6:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 80022b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002370 <led_awake_routine1+0x388>)
 80022ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022be:	2008      	movs	r0, #8
 80022c0:	f7fe fea8 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 80022c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002374 <led_awake_routine1+0x38c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <led_awake_routine1+0x2f8>
					red_led_pwm_val += 40;
 80022cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002378 <led_awake_routine1+0x390>)
 80022ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3328      	adds	r3, #40	@ 0x28
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	b21a      	sxth	r2, r3
 80022da:	4b27      	ldr	r3, [pc, #156]	@ (8002378 <led_awake_routine1+0x390>)
 80022dc:	801a      	strh	r2, [r3, #0]
 80022de:	e008      	b.n	80022f2 <led_awake_routine1+0x30a>
					red_led_pwm_val -= 40;
 80022e0:	4b25      	ldr	r3, [pc, #148]	@ (8002378 <led_awake_routine1+0x390>)
 80022e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b28      	subs	r3, #40	@ 0x28
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <led_awake_routine1+0x390>)
 80022f0:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 80022f2:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <led_awake_routine1+0x390>)
 80022f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022fc:	dd03      	ble.n	8002306 <led_awake_routine1+0x31e>
					red_led_pwm_flag = 1;
 80022fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <led_awake_routine1+0x38c>)
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	e007      	b.n	8002316 <led_awake_routine1+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8002306:	4b1c      	ldr	r3, [pc, #112]	@ (8002378 <led_awake_routine1+0x390>)
 8002308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230c:	2b00      	cmp	r3, #0
 800230e:	dc02      	bgt.n	8002316 <led_awake_routine1+0x32e>
					red_led_pwm_flag = 0;
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <led_awake_routine1+0x38c>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002316:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <led_awake_routine1+0x390>)
 8002318:	f9b3 2000 	ldrsh.w	r2, [r3]
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <led_awake_routine1+0x384>)
 800231e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002320:	e021      	b.n	8002366 <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 8002322:	4b12      	ldr	r3, [pc, #72]	@ (800236c <led_awake_routine1+0x384>)
 8002324:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002328:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 800232a:	4a11      	ldr	r2, [pc, #68]	@ (8002370 <led_awake_routine1+0x388>)
 800232c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002330:	2008      	movs	r0, #8
 8002332:	f7fe fe6f 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <led_awake_routine1+0x390>)
 8002338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002340:	d004      	beq.n	800234c <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 8002342:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <led_awake_routine1+0x390>)
 8002344:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e002      	b.n	8002352 <led_awake_routine1+0x36a>
			red_led_pwm_val = 0;
 800234c:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <led_awake_routine1+0x390>)
 800234e:	2200      	movs	r2, #0
 8002350:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <led_awake_routine1+0x390>)
 8002354:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <led_awake_routine1+0x384>)
 800235a:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 800235c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002360:	f001 fc9a 	bl	8003c98 <HAL_Delay>
}
 8002364:	e7ff      	b.n	8002366 <led_awake_routine1+0x37e>
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40000400 	.word	0x40000400
 8002370:	2000034c 	.word	0x2000034c
 8002374:	200012ed 	.word	0x200012ed
 8002378:	200012f0 	.word	0x200012f0

0800237c <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 8002382:	f001 fcd9 	bl	8003d38 <HAL_GetUIDw1>
 8002386:	4603      	mov	r3, r0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 800238c:	f001 fcd4 	bl	8003d38 <HAL_GetUIDw1>
 8002390:	4603      	mov	r3, r0
 8002392:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <ver_GetUid+0x8c>)
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8002398:	4c1c      	ldr	r4, [pc, #112]	@ (800240c <ver_GetUid+0x90>)
 800239a:	f001 fcd9 	bl	8003d50 <HAL_GetUIDw2>
 800239e:	4603      	mov	r3, r0
 80023a0:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b23      	cmp	r3, #35	@ 0x23
 80023a6:	d909      	bls.n	80023bc <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b3d      	cmp	r3, #61	@ 0x3d
 80023ac:	bf28      	it	cs
 80023ae:	233d      	movcs	r3, #61	@ 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	333d      	adds	r3, #61	@ 0x3d
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b14      	ldr	r3, [pc, #80]	@ (8002408 <ver_GetUid+0x8c>)
 80023b8:	71da      	strb	r2, [r3, #7]
 80023ba:	e00b      	b.n	80023d4 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b09      	cmp	r3, #9
 80023c0:	d901      	bls.n	80023c6 <ver_GetUid+0x4a>
 80023c2:	2241      	movs	r2, #65	@ 0x41
 80023c4:	e000      	b.n	80023c8 <ver_GetUid+0x4c>
 80023c6:	2230      	movs	r2, #48	@ 0x30
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <ver_GetUid+0x8c>)
 80023d2:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 80023d4:	f001 fca4 	bl	8003d20 <HAL_GetUIDw0>
 80023d8:	4603      	mov	r3, r0
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	480b      	ldr	r0, [pc, #44]	@ (8002410 <ver_GetUid+0x94>)
 80023e2:	f010 fb73 	bl	8012acc <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 80023e6:	f001 fc9b 	bl	8003d20 <HAL_GetUIDw0>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	4808      	ldr	r0, [pc, #32]	@ (8002414 <ver_GetUid+0x98>)
 80023f2:	f010 fb6b 	bl	8012acc <CharToHexasc>
	sUid[12] = 0;
 80023f6:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <ver_GetUid+0x8c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 80023fc:	4b02      	ldr	r3, [pc, #8]	@ (8002408 <ver_GetUid+0x8c>)
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}
 8002406:	bf00      	nop
 8002408:	20001724 	.word	0x20001724
 800240c:	20001727 	.word	0x20001727
 8002410:	2000172c 	.word	0x2000172c
 8002414:	2000172e 	.word	0x2000172e

08002418 <app_main>:

void app_main() {
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0

	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 800241e:	2244      	movs	r2, #68	@ 0x44
 8002420:	2100      	movs	r1, #0
 8002422:	4893      	ldr	r0, [pc, #588]	@ (8002670 <app_main+0x258>)
 8002424:	f01a fe82 	bl	801d12c <memset>

	load_param();
 8002428:	f7fe fff0 	bl	800140c <load_param>

	HAL_TIM_Base_Start(&htim1);
 800242c:	4891      	ldr	r0, [pc, #580]	@ (8002674 <app_main+0x25c>)
 800242e:	f008 fa67 	bl	800a900 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8002432:	4991      	ldr	r1, [pc, #580]	@ (8002678 <app_main+0x260>)
 8002434:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002438:	4a90      	ldr	r2, [pc, #576]	@ (800267c <app_main+0x264>)
 800243a:	4891      	ldr	r0, [pc, #580]	@ (8002680 <app_main+0x268>)
 800243c:	f002 fb58 	bl	8004af0 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002440:	4b8c      	ldr	r3, [pc, #560]	@ (8002674 <app_main+0x25c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	4b8b      	ldr	r3, [pc, #556]	@ (8002674 <app_main+0x25c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800244e:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8002450:	4a89      	ldr	r2, [pc, #548]	@ (8002678 <app_main+0x260>)
 8002452:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002456:	2008      	movs	r0, #8
 8002458:	f7fe fddc 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 800245c:	2100      	movs	r1, #0
 800245e:	4889      	ldr	r0, [pc, #548]	@ (8002684 <app_main+0x26c>)
 8002460:	f008 fb92 	bl	800ab88 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8002464:	4b88      	ldr	r3, [pc, #544]	@ (8002688 <app_main+0x270>)
 8002466:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800246a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 800246c:	2104      	movs	r1, #4
 800246e:	4885      	ldr	r0, [pc, #532]	@ (8002684 <app_main+0x26c>)
 8002470:	f008 fb8a 	bl	800ab88 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8002474:	4b84      	ldr	r3, [pc, #528]	@ (8002688 <app_main+0x270>)
 8002476:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800247a:	639a      	str	r2, [r3, #56]	@ 0x38

	if (Mount_SD("/") == FR_OK) {
 800247c:	4883      	ldr	r0, [pc, #524]	@ (800268c <app_main+0x274>)
 800247e:	f017 ffe3 	bl	801a448 <Mount_SD>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <app_main+0x7c>

		Unmount_SD("/");
 8002488:	4880      	ldr	r0, [pc, #512]	@ (800268c <app_main+0x274>)
 800248a:	f018 f809 	bl	801a4a0 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 800248e:	f018 fe5d 	bl	801b14c <MX_USB_DEVICE_Init>
 8002492:	e002      	b.n	800249a <app_main+0x82>

	} else {
		datawritten = 2;
 8002494:	4b7e      	ldr	r3, [pc, #504]	@ (8002690 <app_main+0x278>)
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
	}
	prev_usb_time_ = HAL_GetTick();
 800249a:	f001 fbf1 	bl	8003c80 <HAL_GetTick>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a7c      	ldr	r2, [pc, #496]	@ (8002694 <app_main+0x27c>)
 80024a2:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80024a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024a8:	487b      	ldr	r0, [pc, #492]	@ (8002698 <app_main+0x280>)
 80024aa:	f003 fbb5 	bl	8005c18 <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <app_main+0xa2>
		init_sps30();
 80024b4:	f7ff f966 	bl	8001784 <init_sps30>
 80024b8:	e016      	b.n	80024e8 <app_main+0xd0>
	} else {
		_RunTime_Packet.usb_detection = 0;
 80024ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002670 <app_main+0x258>)
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_first_start = 1;
 80024c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002670 <app_main+0x258>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		_RunTime_Packet.usb_active_disable_pm = 1;
 80024ca:	4b69      	ldr	r3, [pc, #420]	@ (8002670 <app_main+0x258>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		_RunTime_Packet.usb_start_timer = 1;
 80024d2:	4b67      	ldr	r3, [pc, #412]	@ (8002670 <app_main+0x258>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 80024da:	4b70      	ldr	r3, [pc, #448]	@ (800269c <app_main+0x284>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
		_RunTime_Packet.showPrompt = 1;
 80024e0:	4b63      	ldr	r3, [pc, #396]	@ (8002670 <app_main+0x258>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	//init_sps30();

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 80024e8:	f7ff f892 	bl	8001610 <init_scd30_i2c>
#endif
	console_init();
 80024ec:	f00e fcce 	bl	8010e8c <console_init>
	Rtc_set_alarm();
 80024f0:	f010 f95e 	bl	80127b0 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	2200      	movs	r2, #0
 80024fa:	4619      	mov	r1, r3
 80024fc:	4868      	ldr	r0, [pc, #416]	@ (80026a0 <app_main+0x288>)
 80024fe:	f006 ff33 	bl	8009368 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_year = sDate.Year;
 8002502:	7ffb      	ldrb	r3, [r7, #31]
 8002504:	461a      	mov	r2, r3
 8002506:	4b5a      	ldr	r3, [pc, #360]	@ (8002670 <app_main+0x258>)
 8002508:	855a      	strh	r2, [r3, #42]	@ 0x2a
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

	//if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	if(RetainState != 1)
 800250a:	4b66      	ldr	r3, [pc, #408]	@ (80026a4 <app_main+0x28c>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d00b      	beq.n	800252a <app_main+0x112>
	{
		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8002512:	4965      	ldr	r1, [pc, #404]	@ (80026a8 <app_main+0x290>)
 8002514:	4865      	ldr	r0, [pc, #404]	@ (80026ac <app_main+0x294>)
 8002516:	f018 fd8d 	bl	801b034 <createfile>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	4b54      	ldr	r3, [pc, #336]	@ (8002670 <app_main+0x258>)
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
			_Flash_Packet.File_Format);

		RetainState = 1;
 8002524:	4b5f      	ldr	r3, [pc, #380]	@ (80026a4 <app_main+0x28c>)
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
	// else
	// {
	// 	 _RunTime_Packet.sd_file_creation = -1;
	// }

	green_led_blink();
 800252a:	f7ff fb37 	bl	8001b9c <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 800252e:	23c8      	movs	r3, #200	@ 0xc8
 8002530:	2215      	movs	r2, #21
 8002532:	495f      	ldr	r1, [pc, #380]	@ (80026b0 <app_main+0x298>)
 8002534:	485f      	ldr	r0, [pc, #380]	@ (80026b4 <app_main+0x29c>)
 8002536:	f009 fa5b 	bl	800b9f0 <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 800253a:	f001 fba1 	bl	8003c80 <HAL_GetTick>
 800253e:	4603      	mov	r3, r0
 8002540:	4a5d      	ldr	r2, [pc, #372]	@ (80026b8 <app_main+0x2a0>)
 8002542:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 8002544:	f001 fb9c 	bl	8003c80 <HAL_GetTick>
 8002548:	4603      	mov	r3, r0
 800254a:	4a5c      	ldr	r2, [pc, #368]	@ (80026bc <app_main+0x2a4>)
 800254c:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 800254e:	4b5c      	ldr	r3, [pc, #368]	@ (80026c0 <app_main+0x2a8>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
		pwr_off_detected();
 8002554:	f7fe fe42 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002558:	e175      	b.n	8002846 <app_main+0x42e>
		{
			pwr_off_detected();
 800255a:	f7fe fe3f 	bl	80011dc <pwr_off_detected>
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}

			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 800255e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002562:	484d      	ldr	r0, [pc, #308]	@ (8002698 <app_main+0x280>)
 8002564:	f003 fb58 	bl	8005c18 <HAL_GPIO_ReadPin>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <app_main+0x160>
					{
				prev_sleep_time = HAL_GetTick();
 800256e:	f001 fb87 	bl	8003c80 <HAL_GetTick>
 8002572:	4603      	mov	r3, r0
 8002574:	4a50      	ldr	r2, [pc, #320]	@ (80026b8 <app_main+0x2a0>)
 8002576:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	4847      	ldr	r0, [pc, #284]	@ (80026a0 <app_main+0x288>)
 8002582:	f006 fe0f 	bl	80091a4 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	2200      	movs	r2, #0
 800258a:	4619      	mov	r1, r3
 800258c:	4844      	ldr	r0, [pc, #272]	@ (80026a0 <app_main+0x288>)
 800258e:	f006 feeb 	bl	8009368 <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 8002592:	79ba      	ldrb	r2, [r7, #6]
 8002594:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <app_main+0x258>)
 8002596:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
			_RunTime_Packet.month = sDate.Month;
 800259a:	797a      	ldrb	r2, [r7, #5]
 800259c:	4b34      	ldr	r3, [pc, #208]	@ (8002670 <app_main+0x258>)
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			_RunTime_Packet.year = sDate.Year;
 80025a2:	79fa      	ldrb	r2, [r7, #7]
 80025a4:	4b32      	ldr	r3, [pc, #200]	@ (8002670 <app_main+0x258>)
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			if (_RunTime_Packet.prev_year != sDate.Year) {
 80025aa:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <app_main+0x258>)
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d007      	beq.n	80025c4 <app_main+0x1ac>
				_RunTime_Packet.year_changed = 1; //this for year now
 80025b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002670 <app_main+0x258>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				_RunTime_Packet.prev_year = sDate.Year;
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	461a      	mov	r2, r3
 80025c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <app_main+0x258>)
 80025c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
			}

			check_peripheral_error();
 80025c4:	f7ff f984 	bl	80018d0 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 80025c8:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <app_main+0x258>)
 80025ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d104      	bne.n	80025dc <app_main+0x1c4>
					|| _RunTime_Packet.usb_first_start) {
 80025d2:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <app_main+0x258>)
 80025d4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d045      	beq.n	8002668 <app_main+0x250>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 80025dc:	4b24      	ldr	r3, [pc, #144]	@ (8002670 <app_main+0x258>)
 80025de:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <app_main+0x1d6>
				{

					start_usb_timer = 1;
 80025e6:	4b37      	ldr	r3, [pc, #220]	@ (80026c4 <app_main+0x2ac>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	e003      	b.n	80025f6 <app_main+0x1de>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <app_main+0x258>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 80025f6:	f001 fb43 	bl	8003c80 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <app_main+0x27c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	1ad2      	subs	r2, r2, r3
 8002602:	4b31      	ldr	r3, [pc, #196]	@ (80026c8 <app_main+0x2b0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d329      	bcc.n	800265e <app_main+0x246>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <app_main+0x258>)
 800260c:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d10d      	bne.n	8002632 <app_main+0x21a>
							&& _RunTime_Packet.usb_first_start) {
 8002616:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <app_main+0x258>)
 8002618:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <app_main+0x21a>
						_RunTime_Packet.sd_file_creation = createfile(
 8002620:	4921      	ldr	r1, [pc, #132]	@ (80026a8 <app_main+0x290>)
 8002622:	4822      	ldr	r0, [pc, #136]	@ (80026ac <app_main+0x294>)
 8002624:	f018 fd06 	bl	801b034 <createfile>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <app_main+0x258>)
 800262e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 8002632:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <app_main+0x258>)
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
					_RunTime_Packet.usb_detection = 0;
 800263a:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <app_main+0x258>)
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					_RunTime_Packet.usb_active_disable_pm = 0;
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <app_main+0x258>)
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
					start_usb_timer = 0;
 800264a:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <app_main+0x2ac>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8002650:	f7ff f898 	bl	8001784 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 8002654:	f001 fb14 	bl	8003c80 <HAL_GetTick>
 8002658:	4603      	mov	r3, r0
 800265a:	4a18      	ldr	r2, [pc, #96]	@ (80026bc <app_main+0x2a4>)
 800265c:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 800265e:	f001 fb0f 	bl	8003c80 <HAL_GetTick>
 8002662:	4603      	mov	r3, r0
 8002664:	4a14      	ldr	r2, [pc, #80]	@ (80026b8 <app_main+0x2a0>)
 8002666:	6013      	str	r3, [r2, #0]
			}

			console_process();
 8002668:	f00e fbc4 	bl	8010df4 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 800266c:	e040      	b.n	80026f0 <app_main+0x2d8>
 800266e:	bf00      	nop
 8002670:	2000148c 	.word	0x2000148c
 8002674:	20001888 	.word	0x20001888
 8002678:	2000034c 	.word	0x2000034c
 800267c:	40020418 	.word	0x40020418
 8002680:	20001960 	.word	0x20001960
 8002684:	20001918 	.word	0x20001918
 8002688:	40000400 	.word	0x40000400
 800268c:	0802078c 	.word	0x0802078c
 8002690:	20002369 	.word	0x20002369
 8002694:	20001720 	.word	0x20001720
 8002698:	40020000 	.word	0x40020000
 800269c:	200014dc 	.word	0x200014dc
 80026a0:	200017e4 	.word	0x200017e4
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20001358 	.word	0x20001358
 80026ac:	200012f4 	.word	0x200012f4
 80026b0:	0802079c 	.word	0x0802079c
 80026b4:	200019c0 	.word	0x200019c0
 80026b8:	20001718 	.word	0x20001718
 80026bc:	2000171c 	.word	0x2000171c
 80026c0:	20000010 	.word	0x20000010
 80026c4:	200014d8 	.word	0x200014d8
 80026c8:	2000000c 	.word	0x2000000c
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 80026cc:	f00e fb92 	bl	8010df4 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 80026d0:	4b8e      	ldr	r3, [pc, #568]	@ (800290c <app_main+0x4f4>)
 80026d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <app_main+0x2c6>
#ifdef use_scd40x
					get_scd4x_measurement();
#elif use_scd30
		get_scd30_measurement();
 80026da:	f7fe ffb5 	bl	8001648 <get_scd30_measurement>
#endif

				}

				get_sps30_measurement();
 80026de:	f7ff f86d 	bl	80017bc <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 80026e2:	488b      	ldr	r0, [pc, #556]	@ (8002910 <app_main+0x4f8>)
 80026e4:	f010 fa88 	bl	8012bf8 <adc_Measure>
				led_awake_routine1();
 80026e8:	f7ff fc7e 	bl	8001fe8 <led_awake_routine1>
				pwr_off_detected();
 80026ec:	f7fe fd76 	bl	80011dc <pwr_off_detected>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80026f0:	f001 fac6 	bl	8003c80 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b87      	ldr	r3, [pc, #540]	@ (8002914 <app_main+0x4fc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	4b86      	ldr	r3, [pc, #536]	@ (8002918 <app_main+0x500>)
 80026fe:	681b      	ldr	r3, [r3, #0]
					&& !_RunTime_Packet.usb_first_start)
 8002700:	429a      	cmp	r2, r3
 8002702:	d809      	bhi.n	8002718 <app_main+0x300>
					&& !_RunTime_Packet.usb_detection
 8002704:	4b81      	ldr	r3, [pc, #516]	@ (800290c <app_main+0x4f4>)
 8002706:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <app_main+0x300>
					&& !_RunTime_Packet.usb_first_start)
 800270e:	4b7f      	ldr	r3, [pc, #508]	@ (800290c <app_main+0x4f4>)
 8002710:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0d9      	beq.n	80026cc <app_main+0x2b4>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 8002718:	f7ff f936 	bl	8001988 <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 800271c:	4b7f      	ldr	r3, [pc, #508]	@ (800291c <app_main+0x504>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d018      	beq.n	8002756 <app_main+0x33e>
 8002724:	4b79      	ldr	r3, [pc, #484]	@ (800290c <app_main+0x4f4>)
 8002726:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800272a:	2b00      	cmp	r3, #0
 800272c:	d113      	bne.n	8002756 <app_main+0x33e>
					&& !_RunTime_Packet.usb_first_start
 800272e:	4b77      	ldr	r3, [pc, #476]	@ (800290c <app_main+0x4f4>)
 8002730:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10e      	bne.n	8002756 <app_main+0x33e>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 8002738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800273c:	4878      	ldr	r0, [pc, #480]	@ (8002920 <app_main+0x508>)
 800273e:	f003 fa6b 	bl	8005c18 <HAL_GPIO_ReadPin>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <app_main+0x33e>
					USB_DETECT_Pin)) {
#ifdef use_scd40x
				scd4x_stop_periodic_measurement();
#elif use_scd30
				 scd30_stop_periodic_measurement();
 8002748:	f010 fb8a 	bl	8012e60 <scd30_stop_periodic_measurement>
#endif

				sps30_stop_measurement();
 800274c:	f011 fb2c 	bl	8013da8 <sps30_stop_measurement>
				stop_measurement = 0;
 8002750:	4b72      	ldr	r3, [pc, #456]	@ (800291c <app_main+0x504>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 8002756:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800275a:	4871      	ldr	r0, [pc, #452]	@ (8002920 <app_main+0x508>)
 800275c:	f003 fa5c 	bl	8005c18 <HAL_GPIO_ReadPin>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d050      	beq.n	8002808 <app_main+0x3f0>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 8002766:	4b6f      	ldr	r3, [pc, #444]	@ (8002924 <app_main+0x50c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d04c      	beq.n	8002808 <app_main+0x3f0>
 800276e:	4b67      	ldr	r3, [pc, #412]	@ (800290c <app_main+0x4f4>)
 8002770:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002774:	2b00      	cmp	r3, #0
 8002776:	d147      	bne.n	8002808 <app_main+0x3f0>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.year_changed || _RunTime_Packet.filename_changed
 8002778:	4b64      	ldr	r3, [pc, #400]	@ (800290c <app_main+0x4f4>)
 800277a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <app_main+0x38a>
 8002782:	4b62      	ldr	r3, [pc, #392]	@ (800290c <app_main+0x4f4>)
 8002784:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <app_main+0x38a>
						|| _RunTime_Packet.fileformat_changed
 800278c:	4b5f      	ldr	r3, [pc, #380]	@ (800290c <app_main+0x4f4>)
 800278e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <app_main+0x38a>
						|| _RunTime_Packet.sd_file_creation == -1) {
 8002796:	4b5d      	ldr	r3, [pc, #372]	@ (800290c <app_main+0x4f4>)
 8002798:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d114      	bne.n	80027cc <app_main+0x3b4>
					_RunTime_Packet.year_changed = 0;
 80027a2:	4b5a      	ldr	r3, [pc, #360]	@ (800290c <app_main+0x4f4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					_RunTime_Packet.filename_changed = 0;
 80027aa:	4b58      	ldr	r3, [pc, #352]	@ (800290c <app_main+0x4f4>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
					_RunTime_Packet.fileformat_changed = 0;
 80027b2:	4b56      	ldr	r3, [pc, #344]	@ (800290c <app_main+0x4f4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
					_RunTime_Packet.sd_file_creation = createfile(
 80027ba:	495b      	ldr	r1, [pc, #364]	@ (8002928 <app_main+0x510>)
 80027bc:	485b      	ldr	r0, [pc, #364]	@ (800292c <app_main+0x514>)
 80027be:	f018 fc39 	bl	801b034 <createfile>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b51      	ldr	r3, [pc, #324]	@ (800290c <app_main+0x4f4>)
 80027c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);
				}
				if (filesaving_process()) {
 80027cc:	f018 fc08 	bl	801afe0 <filesaving_process>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d013      	beq.n	80027fe <app_main+0x3e6>
					HAL_Delay(1500);
 80027d6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80027da:	f001 fa5d 	bl	8003c98 <HAL_Delay>
					if (filesaving_process()) {
 80027de:	f018 fbff 	bl	801afe0 <filesaving_process>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <app_main+0x3e6>
						HAL_Delay(1500);
 80027e8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80027ec:	f001 fa54 	bl	8003c98 <HAL_Delay>
						if (filesaving_process()) {
 80027f0:	f018 fbf6 	bl	801afe0 <filesaving_process>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <app_main+0x3e6>
							HAL_NVIC_SystemReset();
 80027fa:	f002 f85c 	bl	80048b6 <HAL_NVIC_SystemReset>
						}
					}
				}

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 80027fe:	f001 fa3f 	bl	8003c80 <HAL_GetTick>
 8002802:	4603      	mov	r3, r0
 8002804:	4a43      	ldr	r2, [pc, #268]	@ (8002914 <app_main+0x4fc>)
 8002806:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 8002808:	f00f ffd2 	bl	80127b0 <Rtc_set_alarm>

			adc_Measure(&_RunTime_Packet.battery_voltage);
 800280c:	4840      	ldr	r0, [pc, #256]	@ (8002910 <app_main+0x4f8>)
 800280e:	f010 f9f3 	bl	8012bf8 <adc_Measure>
			led_awake_routine();
 8002812:	f7ff f9eb 	bl	8001bec <led_awake_routine>
			save_data();
 8002816:	f7fe fec7 	bl	80015a8 <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 800281a:	2101      	movs	r1, #1
 800281c:	4840      	ldr	r0, [pc, #256]	@ (8002920 <app_main+0x508>)
 800281e:	f003 f9fb 	bl	8005c18 <HAL_GPIO_ReadPin>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <app_main+0x41e>
				_RunTime_Packet.motion_detection = 1;
 8002828:	4b38      	ldr	r3, [pc, #224]	@ (800290c <app_main+0x4f4>)
 800282a:	2201      	movs	r2, #1
 800282c:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 800282e:	4b40      	ldr	r3, [pc, #256]	@ (8002930 <app_main+0x518>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e005      	b.n	8002842 <app_main+0x42a>
			} else {
				_RunTime_Packet.motion_detection = 0;
 8002836:	4b35      	ldr	r3, [pc, #212]	@ (800290c <app_main+0x4f4>)
 8002838:	2200      	movs	r2, #0
 800283a:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 800283c:	4b3c      	ldr	r3, [pc, #240]	@ (8002930 <app_main+0x518>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 8002842:	f7fe fccb 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002846:	f001 fa1b 	bl	8003c80 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	4b39      	ldr	r3, [pc, #228]	@ (8002934 <app_main+0x51c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1ad2      	subs	r2, r2, r3
 8002852:	4b39      	ldr	r3, [pc, #228]	@ (8002938 <app_main+0x520>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	f67f ae7f 	bls.w	800255a <app_main+0x142>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		//_RunTime_Packet.day_changed ||
		if (_RunTime_Packet.year_changed || _RunTime_Packet.filename_changed
 800285c:	4b2b      	ldr	r3, [pc, #172]	@ (800290c <app_main+0x4f4>)
 800285e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <app_main+0x46e>
 8002866:	4b29      	ldr	r3, [pc, #164]	@ (800290c <app_main+0x4f4>)
 8002868:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <app_main+0x46e>
				|| _RunTime_Packet.fileformat_changed
 8002870:	4b26      	ldr	r3, [pc, #152]	@ (800290c <app_main+0x4f4>)
 8002872:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <app_main+0x46e>
				|| _RunTime_Packet.sd_file_creation == -1) {
 800287a:	4b24      	ldr	r3, [pc, #144]	@ (800290c <app_main+0x4f4>)
 800287c:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d114      	bne.n	80028b0 <app_main+0x498>


			_RunTime_Packet.year_changed = 0;
 8002886:	4b21      	ldr	r3, [pc, #132]	@ (800290c <app_main+0x4f4>)
 8002888:	2200      	movs	r2, #0
 800288a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			_RunTime_Packet.filename_changed = 0;
 800288e:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <app_main+0x4f4>)
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			_RunTime_Packet.fileformat_changed = 0;
 8002896:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <app_main+0x4f4>)
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			_RunTime_Packet.sd_file_creation = createfile(
 800289e:	4922      	ldr	r1, [pc, #136]	@ (8002928 <app_main+0x510>)
 80028a0:	4822      	ldr	r0, [pc, #136]	@ (800292c <app_main+0x514>)
 80028a2:	f018 fbc7 	bl	801b034 <createfile>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b18      	ldr	r3, [pc, #96]	@ (800290c <app_main+0x4f4>)
 80028ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);
		}
		if (filesaving_process()) {
 80028b0:	f018 fb96 	bl	801afe0 <filesaving_process>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d013      	beq.n	80028e2 <app_main+0x4ca>
			HAL_Delay(1500);
 80028ba:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80028be:	f001 f9eb 	bl	8003c98 <HAL_Delay>
			if (filesaving_process()) {
 80028c2:	f018 fb8d 	bl	801afe0 <filesaving_process>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <app_main+0x4ca>
				HAL_Delay(1500);
 80028cc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80028d0:	f001 f9e2 	bl	8003c98 <HAL_Delay>
				if (filesaving_process()) {
 80028d4:	f018 fb84 	bl	801afe0 <filesaving_process>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <app_main+0x4ca>
					HAL_NVIC_SystemReset();
 80028de:	f001 ffea 	bl	80048b6 <HAL_NVIC_SystemReset>
				}
			}
		}
		prev_sleep_time = HAL_GetTick();
 80028e2:	f001 f9cd 	bl	8003c80 <HAL_GetTick>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <app_main+0x51c>)
 80028ea:	6013      	str	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80028ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028f0:	480b      	ldr	r0, [pc, #44]	@ (8002920 <app_main+0x508>)
 80028f2:	f003 f991 	bl	8005c18 <HAL_GPIO_ReadPin>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d103      	bne.n	8002904 <app_main+0x4ec>

			sleep();
 80028fc:	f7ff f85a 	bl	80019b4 <sleep>
			wakeup();
 8002900:	f7ff f8b4 	bl	8001a6c <wakeup>

		}
		pwr_off_detected();
 8002904:	f7fe fc6a 	bl	80011dc <pwr_off_detected>
		prev_sleep_time = HAL_GetTick();
 8002908:	e617      	b.n	800253a <app_main+0x122>
 800290a:	bf00      	nop
 800290c:	2000148c 	.word	0x2000148c
 8002910:	200014ac 	.word	0x200014ac
 8002914:	2000171c 	.word	0x2000171c
 8002918:	20000008 	.word	0x20000008
 800291c:	20000010 	.word	0x20000010
 8002920:	40020000 	.word	0x40020000
 8002924:	2000002d 	.word	0x2000002d
 8002928:	20001358 	.word	0x20001358
 800292c:	200012f4 	.word	0x200012f4
 8002930:	200014e1 	.word	0x200014e1
 8002934:	20001718 	.word	0x20001718
 8002938:	20000004 	.word	0x20000004

0800293c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002940:	f001 f938 	bl	8003bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002944:	f000 f820 	bl	8002988 <SystemClock_Config>
  MX_FATFS_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
#endif
  HAL_Delay(1000);
 8002948:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800294c:	f001 f9a4 	bl	8003c98 <HAL_Delay>
  MX_GPIO_Init();
 8002950:	f000 fae2 	bl	8002f18 <MX_GPIO_Init>
  MX_DMA_Init();
 8002954:	f000 fac0 	bl	8002ed8 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002958:	f000 f92a 	bl	8002bb0 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 800295c:	f000 fa68 	bl	8002e30 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002960:	f000 f900 	bl	8002b64 <MX_RTC_Init>
  MX_I2C1_Init();
 8002964:	f000 f8d0 	bl	8002b08 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002968:	f000 f992 	bl	8002c90 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800296c:	f000 fa8a 	bl	8002e84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002970:	f000 f878 	bl	8002a64 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002974:	f00f fd6c 	bl	8012450 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002978:	f000 f93a 	bl	8002bf0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800297c:	f000 f9d6 	bl	8002d2c <MX_TIM3_Init>


  app_main(); //keep mx_usb_device_init off here
 8002980:	f7ff fd4a 	bl	8002418 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <main+0x48>

08002988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b094      	sub	sp, #80	@ 0x50
 800298c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800298e:	f107 0320 	add.w	r3, r7, #32
 8002992:	2230      	movs	r2, #48	@ 0x30
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f01a fbc8 	bl	801d12c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a5c <SystemClock_Config+0xd4>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	4a29      	ldr	r2, [pc, #164]	@ (8002a5c <SystemClock_Config+0xd4>)
 80029b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80029bc:	4b27      	ldr	r3, [pc, #156]	@ (8002a5c <SystemClock_Config+0xd4>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80029c8:	2300      	movs	r3, #0
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <SystemClock_Config+0xd8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80029d4:	4a22      	ldr	r2, [pc, #136]	@ (8002a60 <SystemClock_Config+0xd8>)
 80029d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b20      	ldr	r3, [pc, #128]	@ (8002a60 <SystemClock_Config+0xd8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80029e8:	2305      	movs	r3, #5
 80029ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029f2:	2301      	movs	r3, #1
 80029f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029f6:	2302      	movs	r3, #2
 80029f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002a00:	2319      	movs	r3, #25
 8002a02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002a08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a0e:	2307      	movs	r3, #7
 8002a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a12:	f107 0320 	add.w	r3, r7, #32
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 fd6e 	bl	80084f8 <HAL_RCC_OscConfig>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a22:	f000 fbe9 	bl	80031f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a26:	230f      	movs	r3, #15
 8002a28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	2102      	movs	r1, #2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f005 ffd0 	bl	80089e8 <HAL_RCC_ClockConfig>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002a4e:	f000 fbd3 	bl	80031f8 <Error_Handler>
  }
}
 8002a52:	bf00      	nop
 8002a54:	3750      	adds	r7, #80	@ 0x50
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40007000 	.word	0x40007000

08002a64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a76:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002a78:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <MX_ADC1_Init+0x9c>)
 8002a7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002a7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a90:	4b1a      	ldr	r3, [pc, #104]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a96:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a9e:	4b17      	ldr	r3, [pc, #92]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002aa4:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002aa6:	4a17      	ldr	r2, [pc, #92]	@ (8002b04 <MX_ADC1_Init+0xa0>)
 8002aa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002aaa:	4b14      	ldr	r3, [pc, #80]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ab0:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ab6:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002abe:	4b0f      	ldr	r3, [pc, #60]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ac4:	480d      	ldr	r0, [pc, #52]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002ac6:	f001 f94f 	bl	8003d68 <HAL_ADC_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ad0:	f000 fb92 	bl	80031f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002ad4:	230a      	movs	r3, #10
 8002ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4805      	ldr	r0, [pc, #20]	@ (8002afc <MX_ADC1_Init+0x98>)
 8002ae6:	f001 fb35 	bl	8004154 <HAL_ADC_ConfigChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002af0:	f000 fb82 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20001748 	.word	0x20001748
 8002b00:	40012000 	.word	0x40012000
 8002b04:	0f000001 	.word	0x0f000001

08002b08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b0e:	4a13      	ldr	r2, [pc, #76]	@ (8002b5c <MX_I2C1_Init+0x54>)
 8002b10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b12:	4b11      	ldr	r3, [pc, #68]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b14:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <MX_I2C1_Init+0x58>)
 8002b16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b38:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b44:	4804      	ldr	r0, [pc, #16]	@ (8002b58 <MX_I2C1_Init+0x50>)
 8002b46:	f003 f8b1 	bl	8005cac <HAL_I2C_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b50:	f000 fb52 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20001790 	.word	0x20001790
 8002b5c:	40005400 	.word	0x40005400
 8002b60:	000186a0 	.word	0x000186a0

08002b64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba8 <MX_RTC_Init+0x44>)
 8002b6a:	4a10      	ldr	r2, [pc, #64]	@ (8002bac <MX_RTC_Init+0x48>)
 8002b6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <MX_RTC_Init+0x44>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <MX_RTC_Init+0x44>)
 8002b76:	227f      	movs	r2, #127	@ 0x7f
 8002b78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <MX_RTC_Init+0x44>)
 8002b7c:	22ff      	movs	r2, #255	@ 0xff
 8002b7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b80:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <MX_RTC_Init+0x44>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b86:	4b08      	ldr	r3, [pc, #32]	@ (8002ba8 <MX_RTC_Init+0x44>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <MX_RTC_Init+0x44>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b92:	4805      	ldr	r0, [pc, #20]	@ (8002ba8 <MX_RTC_Init+0x44>)
 8002b94:	f006 f9f6 	bl	8008f84 <HAL_RTC_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002b9e:	f000 fb2b 	bl	80031f8 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200017e4 	.word	0x200017e4
 8002bac:	40002800 	.word	0x40002800

08002bb0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <MX_SDIO_SD_Init+0x38>)
 8002bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8002bec <MX_SDIO_SD_Init+0x3c>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002bba:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <MX_SDIO_SD_Init+0x38>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002bc0:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <MX_SDIO_SD_Init+0x38>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002bc6:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <MX_SDIO_SD_Init+0x38>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <MX_SDIO_SD_Init+0x38>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002bd2:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <MX_SDIO_SD_Init+0x38>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	@ (8002be8 <MX_SDIO_SD_Init+0x38>)
 8002bda:	2205      	movs	r2, #5
 8002bdc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	20001804 	.word	0x20001804
 8002bec:	40012c00 	.word	0x40012c00

08002bf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c04:	463b      	mov	r3, r7
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <MX_TIM1_Init+0x98>)
 8002c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c8c <MX_TIM1_Init+0x9c>)
 8002c10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <MX_TIM1_Init+0x98>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	@ (8002c88 <MX_TIM1_Init+0x98>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <MX_TIM1_Init+0x98>)
 8002c20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c26:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <MX_TIM1_Init+0x98>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c2c:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <MX_TIM1_Init+0x98>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c32:	4b15      	ldr	r3, [pc, #84]	@ (8002c88 <MX_TIM1_Init+0x98>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c38:	4813      	ldr	r0, [pc, #76]	@ (8002c88 <MX_TIM1_Init+0x98>)
 8002c3a:	f007 fdbd 	bl	800a7b8 <HAL_TIM_Base_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002c44:	f000 fad8 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	4619      	mov	r1, r3
 8002c54:	480c      	ldr	r0, [pc, #48]	@ (8002c88 <MX_TIM1_Init+0x98>)
 8002c56:	f008 fa11 	bl	800b07c <HAL_TIM_ConfigClockSource>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002c60:	f000 faca 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c64:	2320      	movs	r3, #32
 8002c66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c6c:	463b      	mov	r3, r7
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4805      	ldr	r0, [pc, #20]	@ (8002c88 <MX_TIM1_Init+0x98>)
 8002c72:	f008 fdbf 	bl	800b7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c7c:	f000 fabc 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c80:	bf00      	nop
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20001888 	.word	0x20001888
 8002c8c:	40010000 	.word	0x40010000

08002c90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <MX_TIM2_Init+0x98>)
 8002cae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <MX_TIM2_Init+0x98>)
 8002cb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <MX_TIM2_Init+0x98>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002cc2:	4b19      	ldr	r3, [pc, #100]	@ (8002d28 <MX_TIM2_Init+0x98>)
 8002cc4:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8002cc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cca:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <MX_TIM2_Init+0x98>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <MX_TIM2_Init+0x98>)
 8002cd2:	2280      	movs	r2, #128	@ 0x80
 8002cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cd6:	4814      	ldr	r0, [pc, #80]	@ (8002d28 <MX_TIM2_Init+0x98>)
 8002cd8:	f007 fd6e 	bl	800a7b8 <HAL_TIM_Base_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002ce2:	f000 fa89 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cec:	f107 0308 	add.w	r3, r7, #8
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	480d      	ldr	r0, [pc, #52]	@ (8002d28 <MX_TIM2_Init+0x98>)
 8002cf4:	f008 f9c2 	bl	800b07c <HAL_TIM_ConfigClockSource>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002cfe:	f000 fa7b 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4806      	ldr	r0, [pc, #24]	@ (8002d28 <MX_TIM2_Init+0x98>)
 8002d10:	f008 fd70 	bl	800b7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d1a:	f000 fa6d 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200018d0 	.word	0x200018d0

08002d2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	@ 0x38
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d40:	f107 0320 	add.w	r3, r7, #32
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
 8002d58:	615a      	str	r2, [r3, #20]
 8002d5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d5c:	4b32      	ldr	r3, [pc, #200]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002d5e:	4a33      	ldr	r2, [pc, #204]	@ (8002e2c <MX_TIM3_Init+0x100>)
 8002d60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d62:	4b31      	ldr	r3, [pc, #196]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d68:	4b2f      	ldr	r3, [pc, #188]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002d70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d76:	4b2c      	ldr	r3, [pc, #176]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002d7e:	2280      	movs	r2, #128	@ 0x80
 8002d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d82:	4829      	ldr	r0, [pc, #164]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002d84:	f007 fd18 	bl	800a7b8 <HAL_TIM_Base_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d8e:	f000 fa33 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4822      	ldr	r0, [pc, #136]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002da0:	f008 f96c 	bl	800b07c <HAL_TIM_ConfigClockSource>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002daa:	f000 fa25 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002dae:	481e      	ldr	r0, [pc, #120]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002db0:	f007 fe91 	bl	800aad6 <HAL_TIM_PWM_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002dba:	f000 fa1d 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dc6:	f107 0320 	add.w	r3, r7, #32
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4816      	ldr	r0, [pc, #88]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002dce:	f008 fd11 	bl	800b7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002dd8:	f000 fa0e 	bl	80031f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ddc:	2360      	movs	r3, #96	@ 0x60
 8002dde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	2200      	movs	r2, #0
 8002df0:	4619      	mov	r1, r3
 8002df2:	480d      	ldr	r0, [pc, #52]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002df4:	f008 f880 	bl	800aef8 <HAL_TIM_PWM_ConfigChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002dfe:	f000 f9fb 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2204      	movs	r2, #4
 8002e06:	4619      	mov	r1, r3
 8002e08:	4807      	ldr	r0, [pc, #28]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002e0a:	f008 f875 	bl	800aef8 <HAL_TIM_PWM_ConfigChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002e14:	f000 f9f0 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e18:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <MX_TIM3_Init+0xfc>)
 8002e1a:	f000 fc0d 	bl	8003638 <HAL_TIM_MspPostInit>

}
 8002e1e:	bf00      	nop
 8002e20:	3738      	adds	r7, #56	@ 0x38
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20001918 	.word	0x20001918
 8002e2c:	40000400 	.word	0x40000400

08002e30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e34:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <MX_USART1_UART_Init+0x4c>)
 8002e36:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <MX_USART1_UART_Init+0x50>)
 8002e38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <MX_USART1_UART_Init+0x4c>)
 8002e3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <MX_USART1_UART_Init+0x4c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <MX_USART1_UART_Init+0x4c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <MX_USART1_UART_Init+0x4c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e54:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <MX_USART1_UART_Init+0x4c>)
 8002e56:	220c      	movs	r2, #12
 8002e58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <MX_USART1_UART_Init+0x4c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <MX_USART1_UART_Init+0x4c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e66:	4805      	ldr	r0, [pc, #20]	@ (8002e7c <MX_USART1_UART_Init+0x4c>)
 8002e68:	f008 fd46 	bl	800b8f8 <HAL_UART_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e72:	f000 f9c1 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200019c0 	.word	0x200019c0
 8002e80:	40011000 	.word	0x40011000

08002e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e88:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <MX_USART2_UART_Init+0x4c>)
 8002e8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <MX_USART2_UART_Init+0x50>)
 8002e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <MX_USART2_UART_Init+0x4c>)
 8002e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <MX_USART2_UART_Init+0x4c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed0 <MX_USART2_UART_Init+0x4c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <MX_USART2_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ea8:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <MX_USART2_UART_Init+0x4c>)
 8002eaa:	220c      	movs	r2, #12
 8002eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eae:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <MX_USART2_UART_Init+0x4c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <MX_USART2_UART_Init+0x4c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eba:	4805      	ldr	r0, [pc, #20]	@ (8002ed0 <MX_USART2_UART_Init+0x4c>)
 8002ebc:	f008 fd1c 	bl	800b8f8 <HAL_UART_Init>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ec6:	f000 f997 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20001a04 	.word	0x20001a04
 8002ed4:	40004400 	.word	0x40004400

08002ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <MX_DMA_Init+0x3c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <MX_DMA_Init+0x3c>)
 8002ee8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eee:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <MX_DMA_Init+0x3c>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	2100      	movs	r1, #0
 8002efe:	2044      	movs	r0, #68	@ 0x44
 8002f00:	f001 fca1 	bl	8004846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002f04:	2044      	movs	r0, #68	@ 0x44
 8002f06:	f001 fcba 	bl	800487e <HAL_NVIC_EnableIRQ>

}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	@ 0x28
 8002f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1e:	f107 0314 	add.w	r3, r7, #20
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	4b71      	ldr	r3, [pc, #452]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	4a70      	ldr	r2, [pc, #448]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	4a69      	ldr	r2, [pc, #420]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5a:	4b67      	ldr	r3, [pc, #412]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4b63      	ldr	r3, [pc, #396]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	4a62      	ldr	r2, [pc, #392]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f76:	4b60      	ldr	r3, [pc, #384]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	4b5c      	ldr	r3, [pc, #368]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f92:	4b59      	ldr	r3, [pc, #356]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	4b55      	ldr	r3, [pc, #340]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	4a54      	ldr	r2, [pc, #336]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002fa8:	f043 0308 	orr.w	r3, r3, #8
 8002fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fae:	4b52      	ldr	r3, [pc, #328]	@ (80030f8 <MX_GPIO_Init+0x1e0>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	484f      	ldr	r0, [pc, #316]	@ (80030fc <MX_GPIO_Init+0x1e4>)
 8002fc0:	f002 fe42 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fca:	484d      	ldr	r0, [pc, #308]	@ (8003100 <MX_GPIO_Init+0x1e8>)
 8002fcc:	f002 fe3c 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2108      	movs	r1, #8
 8002fd4:	484a      	ldr	r0, [pc, #296]	@ (8003100 <MX_GPIO_Init+0x1e8>)
 8002fd6:	f002 fe37 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002fda:	f642 63fe 	movw	r3, #12030	@ 0x2efe
 8002fde:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	4619      	mov	r1, r3
 8002fee:	4845      	ldr	r0, [pc, #276]	@ (8003104 <MX_GPIO_Init+0x1ec>)
 8002ff0:	f002 fbaa 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	4619      	mov	r1, r3
 8003006:	483d      	ldr	r0, [pc, #244]	@ (80030fc <MX_GPIO_Init+0x1e4>)
 8003008:	f002 fb9e 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 800300c:	2302      	movs	r3, #2
 800300e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003010:	2301      	movs	r3, #1
 8003012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003018:	2302      	movs	r3, #2
 800301a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4619      	mov	r1, r3
 8003022:	4836      	ldr	r0, [pc, #216]	@ (80030fc <MX_GPIO_Init+0x1e4>)
 8003024:	f002 fb90 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8003028:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 800302c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800302e:	2303      	movs	r3, #3
 8003030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	482f      	ldr	r0, [pc, #188]	@ (80030fc <MX_GPIO_Init+0x1e4>)
 800303e:	f002 fb83 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003042:	f247 4307 	movw	r3, #29703	@ 0x7407
 8003046:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003048:	2303      	movs	r3, #3
 800304a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4619      	mov	r1, r3
 8003056:	482a      	ldr	r0, [pc, #168]	@ (8003100 <MX_GPIO_Init+0x1e8>)
 8003058:	f002 fb76 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 800305c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003062:	2301      	movs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800306a:	2302      	movs	r3, #2
 800306c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	4619      	mov	r1, r3
 8003074:	4822      	ldr	r0, [pc, #136]	@ (8003100 <MX_GPIO_Init+0x1e8>)
 8003076:	f002 fb67 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800307a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800307e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003080:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003086:	2302      	movs	r3, #2
 8003088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800308a:	f107 0314 	add.w	r3, r7, #20
 800308e:	4619      	mov	r1, r3
 8003090:	481a      	ldr	r0, [pc, #104]	@ (80030fc <MX_GPIO_Init+0x1e4>)
 8003092:	f002 fb59 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8003096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800309a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800309c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80030a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a2:	2301      	movs	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	4813      	ldr	r0, [pc, #76]	@ (80030fc <MX_GPIO_Init+0x1e4>)
 80030ae:	f002 fb4b 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80030b2:	2308      	movs	r3, #8
 80030b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030be:	2300      	movs	r3, #0
 80030c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80030c2:	f107 0314 	add.w	r3, r7, #20
 80030c6:	4619      	mov	r1, r3
 80030c8:	480d      	ldr	r0, [pc, #52]	@ (8003100 <MX_GPIO_Init+0x1e8>)
 80030ca:	f002 fb3d 	bl	8005748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2100      	movs	r1, #0
 80030d2:	2017      	movs	r0, #23
 80030d4:	f001 fbb7 	bl	8004846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030d8:	2017      	movs	r0, #23
 80030da:	f001 fbd0 	bl	800487e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	2028      	movs	r0, #40	@ 0x28
 80030e4:	f001 fbaf 	bl	8004846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030e8:	2028      	movs	r0, #40	@ 0x28
 80030ea:	f001 fbc8 	bl	800487e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ee:	bf00      	nop
 80030f0:	3728      	adds	r7, #40	@ 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020000 	.word	0x40020000
 8003100:	40020400 	.word	0x40020400
 8003104:	40020800 	.word	0x40020800

08003108 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003118:	d101      	bne.n	800311e <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 800311a:	f7fe f809 	bl	8001130 <timer_interrupt>
}

}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 8003138:	f7fd ffde 	bl	80010f8 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003142:	d118      	bne.n	8003176 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        _RunTime_Packet.showPrompt = 1;
 8003144:	4b11      	ldr	r3, [pc, #68]	@ (800318c <HAL_GPIO_EXTI_Callback+0x64>)
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        _RunTime_Packet.usb_detection = 1;
 800314c:	4b0f      	ldr	r3, [pc, #60]	@ (800318c <HAL_GPIO_EXTI_Callback+0x64>)
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        _RunTime_Packet.usb_start_timer = 1;
 8003154:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <HAL_GPIO_EXTI_Callback+0x64>)
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        usb_time_keep = 0;
 800315c:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <HAL_GPIO_EXTI_Callback+0x68>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 8003162:	f000 fd8d 	bl	8003c80 <HAL_GetTick>
 8003166:	4603      	mov	r3, r0
 8003168:	4a0a      	ldr	r2, [pc, #40]	@ (8003194 <HAL_GPIO_EXTI_Callback+0x6c>)
 800316a:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 800316c:	f000 fd88 	bl	8003c80 <HAL_GetTick>
 8003170:	4603      	mov	r3, r0
 8003172:	4a09      	ldr	r2, [pc, #36]	@ (8003198 <HAL_GPIO_EXTI_Callback+0x70>)
 8003174:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800317c:	d101      	bne.n	8003182 <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	power_off_detect();
 800317e:	f7fd fff1 	bl	8001164 <power_off_detect>
    }
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000148c 	.word	0x2000148c
 8003190:	200014dc 	.word	0x200014dc
 8003194:	20001720 	.word	0x20001720
 8003198:	20001718 	.word	0x20001718

0800319c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	RtcInt();
 80031a4:	f00f fad2 	bl	801274c <RtcInt>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a0d      	ldr	r2, [pc, #52]	@ (80031f0 <HAL_UART_ErrorCallback+0x40>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d106      	bne.n	80031ce <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	43d2      	mvns	r2, r2
 80031ca:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 80031cc:	e009      	b.n	80031e2 <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a08      	ldr	r2, [pc, #32]	@ (80031f4 <HAL_UART_ErrorCallback+0x44>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d105      	bne.n	80031e2 <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	43d2      	mvns	r2, r2
 80031e0:	601a      	str	r2, [r3, #0]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	200019c0 	.word	0x200019c0
 80031f4:	20001a04 	.word	0x20001a04

080031f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031fc:	b672      	cpsid	i
}
 80031fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 8003200:	f001 fb59 	bl	80048b6 <HAL_NVIC_SystemReset>
  while (1)
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <Error_Handler+0xc>

08003208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	4b10      	ldr	r3, [pc, #64]	@ (8003254 <HAL_MspInit+0x4c>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	4a0f      	ldr	r2, [pc, #60]	@ (8003254 <HAL_MspInit+0x4c>)
 8003218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800321c:	6453      	str	r3, [r2, #68]	@ 0x44
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <HAL_MspInit+0x4c>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <HAL_MspInit+0x4c>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	4a08      	ldr	r2, [pc, #32]	@ (8003254 <HAL_MspInit+0x4c>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	@ 0x40
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_MspInit+0x4c>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a17      	ldr	r2, [pc, #92]	@ (80032d4 <HAL_ADC_MspInit+0x7c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d127      	bne.n	80032ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <HAL_ADC_MspInit+0x80>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	4a15      	ldr	r2, [pc, #84]	@ (80032d8 <HAL_ADC_MspInit+0x80>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003288:	6453      	str	r3, [r2, #68]	@ 0x44
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <HAL_ADC_MspInit+0x80>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <HAL_ADC_MspInit+0x80>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	4a0e      	ldr	r2, [pc, #56]	@ (80032d8 <HAL_ADC_MspInit+0x80>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a6:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <HAL_ADC_MspInit+0x80>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 80032b2:	2301      	movs	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032b6:	2303      	movs	r3, #3
 80032b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 80032be:	f107 0314 	add.w	r3, r7, #20
 80032c2:	4619      	mov	r1, r3
 80032c4:	4805      	ldr	r0, [pc, #20]	@ (80032dc <HAL_ADC_MspInit+0x84>)
 80032c6:	f002 fa3f 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032ca:	bf00      	nop
 80032cc:	3728      	adds	r7, #40	@ 0x28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40012000 	.word	0x40012000
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40020800 	.word	0x40020800

080032e0 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a08      	ldr	r2, [pc, #32]	@ (8003310 <HAL_ADC_MspDeInit+0x30>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d109      	bne.n	8003306 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80032f2:	4b08      	ldr	r3, [pc, #32]	@ (8003314 <HAL_ADC_MspDeInit+0x34>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	4a07      	ldr	r2, [pc, #28]	@ (8003314 <HAL_ADC_MspDeInit+0x34>)
 80032f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032fc:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 80032fe:	2101      	movs	r1, #1
 8003300:	4805      	ldr	r0, [pc, #20]	@ (8003318 <HAL_ADC_MspDeInit+0x38>)
 8003302:	f002 fba5 	bl	8005a50 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40012000 	.word	0x40012000
 8003314:	40023800 	.word	0x40023800
 8003318:	40020800 	.word	0x40020800

0800331c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	@ 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a19      	ldr	r2, [pc, #100]	@ (80033a0 <HAL_I2C_MspInit+0x84>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d12c      	bne.n	8003398 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <HAL_I2C_MspInit+0x88>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	4a17      	ldr	r2, [pc, #92]	@ (80033a4 <HAL_I2C_MspInit+0x88>)
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	6313      	str	r3, [r2, #48]	@ 0x30
 800334e:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <HAL_I2C_MspInit+0x88>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 800335a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800335e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003360:	2312      	movs	r3, #18
 8003362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003368:	2303      	movs	r3, #3
 800336a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800336c:	2304      	movs	r3, #4
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4619      	mov	r1, r3
 8003376:	480c      	ldr	r0, [pc, #48]	@ (80033a8 <HAL_I2C_MspInit+0x8c>)
 8003378:	f002 f9e6 	bl	8005748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	4b08      	ldr	r3, [pc, #32]	@ (80033a4 <HAL_I2C_MspInit+0x88>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	4a07      	ldr	r2, [pc, #28]	@ (80033a4 <HAL_I2C_MspInit+0x88>)
 8003386:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800338a:	6413      	str	r3, [r2, #64]	@ 0x40
 800338c:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <HAL_I2C_MspInit+0x88>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003398:	bf00      	nop
 800339a:	3728      	adds	r7, #40	@ 0x28
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40005400 	.word	0x40005400
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020400 	.word	0x40020400

080033ac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0b      	ldr	r2, [pc, #44]	@ (80033e8 <HAL_I2C_MspDeInit+0x3c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10f      	bne.n	80033de <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80033be:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <HAL_I2C_MspDeInit+0x40>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <HAL_I2C_MspDeInit+0x40>)
 80033c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033c8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 80033ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033ce:	4808      	ldr	r0, [pc, #32]	@ (80033f0 <HAL_I2C_MspDeInit+0x44>)
 80033d0:	f002 fb3e 	bl	8005a50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 80033d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033d8:	4805      	ldr	r0, [pc, #20]	@ (80033f0 <HAL_I2C_MspDeInit+0x44>)
 80033da:	f002 fb39 	bl	8005a50 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40005400 	.word	0x40005400
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020400 	.word	0x40020400

080033f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033fc:	f107 030c 	add.w	r3, r7, #12
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a10      	ldr	r2, [pc, #64]	@ (8003454 <HAL_RTC_MspInit+0x60>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d119      	bne.n	800344a <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003416:	2302      	movs	r3, #2
 8003418:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800341a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800341e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	4618      	mov	r0, r3
 8003426:	f005 fcbf 	bl	8008da8 <HAL_RCCEx_PeriphCLKConfig>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003430:	f7ff fee2 	bl	80031f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003434:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <HAL_RTC_MspInit+0x64>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2100      	movs	r1, #0
 800343e:	2029      	movs	r0, #41	@ 0x29
 8003440:	f001 fa01 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003444:	2029      	movs	r0, #41	@ 0x29
 8003446:	f001 fa1a 	bl	800487e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800344a:	bf00      	nop
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40002800 	.word	0x40002800
 8003458:	42470e3c 	.word	0x42470e3c

0800345c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	@ 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a28      	ldr	r2, [pc, #160]	@ (800351c <HAL_SD_MspInit+0xc0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d14a      	bne.n	8003514 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	4b27      	ldr	r3, [pc, #156]	@ (8003520 <HAL_SD_MspInit+0xc4>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	4a26      	ldr	r2, [pc, #152]	@ (8003520 <HAL_SD_MspInit+0xc4>)
 8003488:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800348c:	6453      	str	r3, [r2, #68]	@ 0x44
 800348e:	4b24      	ldr	r3, [pc, #144]	@ (8003520 <HAL_SD_MspInit+0xc4>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <HAL_SD_MspInit+0xc4>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003520 <HAL_SD_MspInit+0xc4>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003520 <HAL_SD_MspInit+0xc4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <HAL_SD_MspInit+0xc4>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	4a18      	ldr	r2, [pc, #96]	@ (8003520 <HAL_SD_MspInit+0xc4>)
 80034c0:	f043 0308 	orr.w	r3, r3, #8
 80034c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034c6:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <HAL_SD_MspInit+0xc4>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80034d2:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80034d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e0:	2303      	movs	r3, #3
 80034e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034e4:	230c      	movs	r3, #12
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	4619      	mov	r1, r3
 80034ee:	480d      	ldr	r0, [pc, #52]	@ (8003524 <HAL_SD_MspInit+0xc8>)
 80034f0:	f002 f92a 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034f4:	2304      	movs	r3, #4
 80034f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f8:	2302      	movs	r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003500:	2303      	movs	r3, #3
 8003502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003504:	230c      	movs	r3, #12
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	4619      	mov	r1, r3
 800350e:	4806      	ldr	r0, [pc, #24]	@ (8003528 <HAL_SD_MspInit+0xcc>)
 8003510:	f002 f91a 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003514:	bf00      	nop
 8003516:	3728      	adds	r7, #40	@ 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40023800 	.word	0x40023800
 8003524:	40020800 	.word	0x40020800
 8003528:	40020c00 	.word	0x40020c00

0800352c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a3a      	ldr	r2, [pc, #232]	@ (8003624 <HAL_TIM_Base_MspInit+0xf8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d13f      	bne.n	80035be <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <HAL_TIM_Base_MspInit+0xfc>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	4a38      	ldr	r2, [pc, #224]	@ (8003628 <HAL_TIM_Base_MspInit+0xfc>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6453      	str	r3, [r2, #68]	@ 0x44
 800354e:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <HAL_TIM_Base_MspInit+0xfc>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800355a:	4b34      	ldr	r3, [pc, #208]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 800355c:	4a34      	ldr	r2, [pc, #208]	@ (8003630 <HAL_TIM_Base_MspInit+0x104>)
 800355e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8003560:	4b32      	ldr	r3, [pc, #200]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 8003562:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003566:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003568:	4b30      	ldr	r3, [pc, #192]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 800356a:	2240      	movs	r2, #64	@ 0x40
 800356c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800356e:	4b2f      	ldr	r3, [pc, #188]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 8003570:	2200      	movs	r2, #0
 8003572:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003574:	4b2d      	ldr	r3, [pc, #180]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 8003576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800357a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800357c:	4b2b      	ldr	r3, [pc, #172]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 800357e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003582:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003584:	4b29      	ldr	r3, [pc, #164]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 8003586:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800358a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800358c:	4b27      	ldr	r3, [pc, #156]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 800358e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003592:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003594:	4b25      	ldr	r3, [pc, #148]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 8003596:	2200      	movs	r2, #0
 8003598:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800359a:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 800359c:	2200      	movs	r2, #0
 800359e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80035a0:	4822      	ldr	r0, [pc, #136]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 80035a2:	f001 f999 	bl	80048d8 <HAL_DMA_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80035ac:	f7ff fe24 	bl	80031f8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a1e      	ldr	r2, [pc, #120]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 80035b4:	621a      	str	r2, [r3, #32]
 80035b6:	4a1d      	ldr	r2, [pc, #116]	@ (800362c <HAL_TIM_Base_MspInit+0x100>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035bc:	e02e      	b.n	800361c <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c6:	d116      	bne.n	80035f6 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	4b16      	ldr	r3, [pc, #88]	@ (8003628 <HAL_TIM_Base_MspInit+0xfc>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <HAL_TIM_Base_MspInit+0xfc>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80035d8:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <HAL_TIM_Base_MspInit+0xfc>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035e4:	2200      	movs	r2, #0
 80035e6:	2100      	movs	r1, #0
 80035e8:	201c      	movs	r0, #28
 80035ea:	f001 f92c 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035ee:	201c      	movs	r0, #28
 80035f0:	f001 f945 	bl	800487e <HAL_NVIC_EnableIRQ>
}
 80035f4:	e012      	b.n	800361c <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <HAL_TIM_Base_MspInit+0x108>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10d      	bne.n	800361c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <HAL_TIM_Base_MspInit+0xfc>)
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	4a07      	ldr	r2, [pc, #28]	@ (8003628 <HAL_TIM_Base_MspInit+0xfc>)
 800360a:	f043 0302 	orr.w	r3, r3, #2
 800360e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <HAL_TIM_Base_MspInit+0xfc>)
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40010000 	.word	0x40010000
 8003628:	40023800 	.word	0x40023800
 800362c:	20001960 	.word	0x20001960
 8003630:	40026488 	.word	0x40026488
 8003634:	40000400 	.word	0x40000400

08003638 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003640:	f107 030c 	add.w	r3, r7, #12
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	60da      	str	r2, [r3, #12]
 800364e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a12      	ldr	r2, [pc, #72]	@ (80036a0 <HAL_TIM_MspPostInit+0x68>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d11d      	bne.n	8003696 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	4b11      	ldr	r3, [pc, #68]	@ (80036a4 <HAL_TIM_MspPostInit+0x6c>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	4a10      	ldr	r2, [pc, #64]	@ (80036a4 <HAL_TIM_MspPostInit+0x6c>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	6313      	str	r3, [r2, #48]	@ 0x30
 800366a:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <HAL_TIM_MspPostInit+0x6c>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003676:	2330      	movs	r3, #48	@ 0x30
 8003678:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003686:	2302      	movs	r3, #2
 8003688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368a:	f107 030c 	add.w	r3, r7, #12
 800368e:	4619      	mov	r1, r3
 8003690:	4805      	ldr	r0, [pc, #20]	@ (80036a8 <HAL_TIM_MspPostInit+0x70>)
 8003692:	f002 f859 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003696:	bf00      	nop
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020400 	.word	0x40020400

080036ac <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a16      	ldr	r2, [pc, #88]	@ (8003714 <HAL_TIM_Base_MspDeInit+0x68>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10b      	bne.n	80036d6 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 80036be:	4b16      	ldr	r3, [pc, #88]	@ (8003718 <HAL_TIM_Base_MspDeInit+0x6c>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	4a15      	ldr	r2, [pc, #84]	@ (8003718 <HAL_TIM_Base_MspDeInit+0x6c>)
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 f9b0 	bl	8004a34 <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 80036d4:	e019      	b.n	800370a <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036de:	d109      	bne.n	80036f4 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 80036e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <HAL_TIM_Base_MspDeInit+0x6c>)
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003718 <HAL_TIM_Base_MspDeInit+0x6c>)
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80036ec:	201c      	movs	r0, #28
 80036ee:	f001 f8d4 	bl	800489a <HAL_NVIC_DisableIRQ>
}
 80036f2:	e00a      	b.n	800370a <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a08      	ldr	r2, [pc, #32]	@ (800371c <HAL_TIM_Base_MspDeInit+0x70>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d105      	bne.n	800370a <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80036fe:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003704:	f023 0302 	bic.w	r3, r3, #2
 8003708:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40010000 	.word	0x40010000
 8003718:	40023800 	.word	0x40023800
 800371c:	40000400 	.word	0x40000400

08003720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08c      	sub	sp, #48	@ 0x30
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	f107 031c 	add.w	r3, r7, #28
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a3a      	ldr	r2, [pc, #232]	@ (8003828 <HAL_UART_MspInit+0x108>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d134      	bne.n	80037ac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	4b39      	ldr	r3, [pc, #228]	@ (800382c <HAL_UART_MspInit+0x10c>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	4a38      	ldr	r2, [pc, #224]	@ (800382c <HAL_UART_MspInit+0x10c>)
 800374c:	f043 0310 	orr.w	r3, r3, #16
 8003750:	6453      	str	r3, [r2, #68]	@ 0x44
 8003752:	4b36      	ldr	r3, [pc, #216]	@ (800382c <HAL_UART_MspInit+0x10c>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	4b32      	ldr	r3, [pc, #200]	@ (800382c <HAL_UART_MspInit+0x10c>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	4a31      	ldr	r2, [pc, #196]	@ (800382c <HAL_UART_MspInit+0x10c>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6313      	str	r3, [r2, #48]	@ 0x30
 800376e:	4b2f      	ldr	r3, [pc, #188]	@ (800382c <HAL_UART_MspInit+0x10c>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 800377a:	23c0      	movs	r3, #192	@ 0xc0
 800377c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003786:	2303      	movs	r3, #3
 8003788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800378a:	2307      	movs	r3, #7
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378e:	f107 031c 	add.w	r3, r7, #28
 8003792:	4619      	mov	r1, r3
 8003794:	4826      	ldr	r0, [pc, #152]	@ (8003830 <HAL_UART_MspInit+0x110>)
 8003796:	f001 ffd7 	bl	8005748 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800379a:	2200      	movs	r2, #0
 800379c:	2100      	movs	r1, #0
 800379e:	2025      	movs	r0, #37	@ 0x25
 80037a0:	f001 f851 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037a4:	2025      	movs	r0, #37	@ 0x25
 80037a6:	f001 f86a 	bl	800487e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037aa:	e038      	b.n	800381e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a20      	ldr	r2, [pc, #128]	@ (8003834 <HAL_UART_MspInit+0x114>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d133      	bne.n	800381e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	4b1c      	ldr	r3, [pc, #112]	@ (800382c <HAL_UART_MspInit+0x10c>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	4a1b      	ldr	r2, [pc, #108]	@ (800382c <HAL_UART_MspInit+0x10c>)
 80037c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c6:	4b19      	ldr	r3, [pc, #100]	@ (800382c <HAL_UART_MspInit+0x10c>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	4b15      	ldr	r3, [pc, #84]	@ (800382c <HAL_UART_MspInit+0x10c>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	4a14      	ldr	r2, [pc, #80]	@ (800382c <HAL_UART_MspInit+0x10c>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037e2:	4b12      	ldr	r3, [pc, #72]	@ (800382c <HAL_UART_MspInit+0x10c>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 80037ee:	230c      	movs	r3, #12
 80037f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	2302      	movs	r3, #2
 80037f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fa:	2303      	movs	r3, #3
 80037fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037fe:	2307      	movs	r3, #7
 8003800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	4619      	mov	r1, r3
 8003808:	480b      	ldr	r0, [pc, #44]	@ (8003838 <HAL_UART_MspInit+0x118>)
 800380a:	f001 ff9d 	bl	8005748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	2026      	movs	r0, #38	@ 0x26
 8003814:	f001 f817 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003818:	2026      	movs	r0, #38	@ 0x26
 800381a:	f001 f830 	bl	800487e <HAL_NVIC_EnableIRQ>
}
 800381e:	bf00      	nop
 8003820:	3730      	adds	r7, #48	@ 0x30
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40011000 	.word	0x40011000
 800382c:	40023800 	.word	0x40023800
 8003830:	40020400 	.word	0x40020400
 8003834:	40004400 	.word	0x40004400
 8003838:	40020000 	.word	0x40020000

0800383c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a13      	ldr	r2, [pc, #76]	@ (8003898 <HAL_UART_MspDeInit+0x5c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10d      	bne.n	800386a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800384e:	4b13      	ldr	r3, [pc, #76]	@ (800389c <HAL_UART_MspDeInit+0x60>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003852:	4a12      	ldr	r2, [pc, #72]	@ (800389c <HAL_UART_MspDeInit+0x60>)
 8003854:	f023 0310 	bic.w	r3, r3, #16
 8003858:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 800385a:	21c0      	movs	r1, #192	@ 0xc0
 800385c:	4810      	ldr	r0, [pc, #64]	@ (80038a0 <HAL_UART_MspDeInit+0x64>)
 800385e:	f002 f8f7 	bl	8005a50 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003862:	2025      	movs	r0, #37	@ 0x25
 8003864:	f001 f819 	bl	800489a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003868:	e011      	b.n	800388e <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a0d      	ldr	r2, [pc, #52]	@ (80038a4 <HAL_UART_MspDeInit+0x68>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d10c      	bne.n	800388e <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003874:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_UART_MspDeInit+0x60>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	4a08      	ldr	r2, [pc, #32]	@ (800389c <HAL_UART_MspDeInit+0x60>)
 800387a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800387e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 8003880:	210c      	movs	r1, #12
 8003882:	4809      	ldr	r0, [pc, #36]	@ (80038a8 <HAL_UART_MspDeInit+0x6c>)
 8003884:	f002 f8e4 	bl	8005a50 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003888:	2026      	movs	r0, #38	@ 0x26
 800388a:	f001 f806 	bl	800489a <HAL_NVIC_DisableIRQ>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40011000 	.word	0x40011000
 800389c:	40023800 	.word	0x40023800
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40004400 	.word	0x40004400
 80038a8:	40020000 	.word	0x40020000

080038ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 80038b0:	f001 f801 	bl	80048b6 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <NMI_Handler+0x8>

080038b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80038bc:	f000 fffb 	bl	80048b6 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <HardFault_Handler+0x8>

080038c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 80038c8:	f000 fff5 	bl	80048b6 <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038cc:	bf00      	nop
 80038ce:	e7fd      	b.n	80038cc <MemManage_Handler+0x8>

080038d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80038d4:	f000 ffef 	bl	80048b6 <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <BusFault_Handler+0x8>

080038dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80038e0:	f000 ffe9 	bl	80048b6 <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038e4:	bf00      	nop
 80038e6:	e7fd      	b.n	80038e4 <UsageFault_Handler+0x8>

080038e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 80038ec:	f000 ffe3 	bl	80048b6 <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 80038f8:	f000 ffdd 	bl	80048b6 <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}

08003900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003904:	f000 ffd7 	bl	80048b6 <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}

0800390c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003910:	f000 f9a2 	bl	8003c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}

08003918 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 800391c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003920:	f002 f9ac 	bl	8005c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}

08003928 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800392c:	4802      	ldr	r0, [pc, #8]	@ (8003938 <TIM2_IRQHandler+0x10>)
 800392e:	f007 f9db 	bl	800ace8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200018d0 	.word	0x200018d0

0800393c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003940:	4802      	ldr	r0, [pc, #8]	@ (800394c <USART1_IRQHandler+0x10>)
 8003942:	f008 f97d 	bl	800bc40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	200019c0 	.word	0x200019c0

08003950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003954:	4802      	ldr	r0, [pc, #8]	@ (8003960 <USART2_IRQHandler+0x10>)
 8003956:	f008 f973 	bl	800bc40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20001a04 	.word	0x20001a04

08003964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 8003968:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800396c:	f002 f986 	bl	8005c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}

08003974 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003978:	4802      	ldr	r0, [pc, #8]	@ (8003984 <RTC_Alarm_IRQHandler+0x10>)
 800397a:	f005 fe87 	bl	800968c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200017e4 	.word	0x200017e4

08003988 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800398c:	4802      	ldr	r0, [pc, #8]	@ (8003998 <OTG_FS_IRQHandler+0x10>)
 800398e:	f003 fc2c 	bl	80071ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20002948 	.word	0x20002948

0800399c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80039a0:	4802      	ldr	r0, [pc, #8]	@ (80039ac <DMA2_Stream5_IRQHandler+0x10>)
 80039a2:	f001 f973 	bl	8004c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20001960 	.word	0x20001960

080039b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return 1;
 80039b4:	2301      	movs	r3, #1
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <_kill>:

int _kill(int pid, int sig)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039ca:	f019 fc91 	bl	801d2f0 <__errno>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2216      	movs	r2, #22
 80039d2:	601a      	str	r2, [r3, #0]
  return -1;
 80039d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <_exit>:

void _exit (int status)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039e8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ffe7 	bl	80039c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039f2:	bf00      	nop
 80039f4:	e7fd      	b.n	80039f2 <_exit+0x12>

080039f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e00a      	b.n	8003a1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a08:	f3af 8000 	nop.w
 8003a0c:	4601      	mov	r1, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	60ba      	str	r2, [r7, #8]
 8003a14:	b2ca      	uxtb	r2, r1
 8003a16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	dbf0      	blt.n	8003a08 <_read+0x12>
  }

  return len;
 8003a26:	687b      	ldr	r3, [r7, #4]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e009      	b.n	8003a56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	60ba      	str	r2, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3301      	adds	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	dbf1      	blt.n	8003a42 <_write+0x12>
  }
  return len;
 8003a5e:	687b      	ldr	r3, [r7, #4]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <_close>:

int _close(int file)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a90:	605a      	str	r2, [r3, #4]
  return 0;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_isatty>:

int _isatty(int file)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003aa8:	2301      	movs	r3, #1
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ad8:	4a14      	ldr	r2, [pc, #80]	@ (8003b2c <_sbrk+0x5c>)
 8003ada:	4b15      	ldr	r3, [pc, #84]	@ (8003b30 <_sbrk+0x60>)
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ae4:	4b13      	ldr	r3, [pc, #76]	@ (8003b34 <_sbrk+0x64>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aec:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <_sbrk+0x64>)
 8003aee:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <_sbrk+0x68>)
 8003af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003af2:	4b10      	ldr	r3, [pc, #64]	@ (8003b34 <_sbrk+0x64>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d207      	bcs.n	8003b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b00:	f019 fbf6 	bl	801d2f0 <__errno>
 8003b04:	4603      	mov	r3, r0
 8003b06:	220c      	movs	r2, #12
 8003b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0e:	e009      	b.n	8003b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b10:	4b08      	ldr	r3, [pc, #32]	@ (8003b34 <_sbrk+0x64>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b16:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <_sbrk+0x64>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	4a05      	ldr	r2, [pc, #20]	@ (8003b34 <_sbrk+0x64>)
 8003b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b22:	68fb      	ldr	r3, [r7, #12]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20018000 	.word	0x20018000
 8003b30:	00000400 	.word	0x00000400
 8003b34:	20001a48 	.word	0x20001a48
 8003b38:	20003818 	.word	0x20003818

08003b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b40:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <SystemInit+0x20>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b46:	4a05      	ldr	r2, [pc, #20]	@ (8003b5c <SystemInit+0x20>)
 8003b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b64:	480d      	ldr	r0, [pc, #52]	@ (8003b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b66:	490e      	ldr	r1, [pc, #56]	@ (8003ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b68:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b6c:	e002      	b.n	8003b74 <LoopCopyDataInit>

08003b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b72:	3304      	adds	r3, #4

08003b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b78:	d3f9      	bcc.n	8003b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b7c:	4c0b      	ldr	r4, [pc, #44]	@ (8003bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b80:	e001      	b.n	8003b86 <LoopFillZerobss>

08003b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b84:	3204      	adds	r2, #4

08003b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b88:	d3fb      	bcc.n	8003b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b8a:	f7ff ffd7 	bl	8003b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b8e:	f019 fbb5 	bl	801d2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b92:	f7fe fed3 	bl	800293c <main>
  bx  lr    
 8003b96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003b9c:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8003ba0:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8003ba4:	08023104 	.word	0x08023104
  ldr r2, =_sbss
 8003ba8:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8003bac:	20003818 	.word	0x20003818

08003bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bb0:	e7fe      	b.n	8003bb0 <ADC_IRQHandler>
	...

08003bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <HAL_Init+0x40>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf4 <HAL_Init+0x40>)
 8003bbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_Init+0x40>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf4 <HAL_Init+0x40>)
 8003bca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bd0:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <HAL_Init+0x40>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a07      	ldr	r2, [pc, #28]	@ (8003bf4 <HAL_Init+0x40>)
 8003bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bdc:	2003      	movs	r0, #3
 8003bde:	f000 fe27 	bl	8004830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003be2:	200f      	movs	r0, #15
 8003be4:	f000 f808 	bl	8003bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003be8:	f7ff fb0e 	bl	8003208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023c00 	.word	0x40023c00

08003bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c00:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <HAL_InitTick+0x54>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b12      	ldr	r3, [pc, #72]	@ (8003c50 <HAL_InitTick+0x58>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fe51 	bl	80048be <HAL_SYSTICK_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00e      	b.n	8003c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b0f      	cmp	r3, #15
 8003c2a:	d80a      	bhi.n	8003c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	f000 fe07 	bl	8004846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c38:	4a06      	ldr	r2, [pc, #24]	@ (8003c54 <HAL_InitTick+0x5c>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000014 	.word	0x20000014
 8003c50:	2000001c 	.word	0x2000001c
 8003c54:	20000018 	.word	0x20000018

08003c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c5c:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <HAL_IncTick+0x20>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_IncTick+0x24>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4413      	add	r3, r2
 8003c68:	4a04      	ldr	r2, [pc, #16]	@ (8003c7c <HAL_IncTick+0x24>)
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	2000001c 	.word	0x2000001c
 8003c7c:	20001a4c 	.word	0x20001a4c

08003c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return uwTick;
 8003c84:	4b03      	ldr	r3, [pc, #12]	@ (8003c94 <HAL_GetTick+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20001a4c 	.word	0x20001a4c

08003c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ca0:	f7ff ffee 	bl	8003c80 <HAL_GetTick>
 8003ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d005      	beq.n	8003cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cdc <HAL_Delay+0x44>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cbe:	bf00      	nop
 8003cc0:	f7ff ffde 	bl	8003c80 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d8f7      	bhi.n	8003cc0 <HAL_Delay+0x28>
  {
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000001c 	.word	0x2000001c

08003ce0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003ce4:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <HAL_SuspendTick+0x1c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	@ (8003cfc <HAL_SuspendTick+0x1c>)
 8003cea:	f023 0302 	bic.w	r3, r3, #2
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000e010 	.word	0xe000e010

08003d00 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_ResumeTick+0x1c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a04      	ldr	r2, [pc, #16]	@ (8003d1c <HAL_ResumeTick+0x1c>)
 8003d0a:	f043 0302 	orr.w	r3, r3, #2
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000e010 	.word	0xe000e010

08003d20 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003d24:	4b03      	ldr	r3, [pc, #12]	@ (8003d34 <HAL_GetUIDw0+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	1fff7a10 	.word	0x1fff7a10

08003d38 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003d3c:	4b03      	ldr	r3, [pc, #12]	@ (8003d4c <HAL_GetUIDw1+0x14>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	1fff7a14 	.word	0x1fff7a14

08003d50 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003d54:	4b03      	ldr	r3, [pc, #12]	@ (8003d64 <HAL_GetUIDw2+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	1fff7a18 	.word	0x1fff7a18

08003d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e033      	b.n	8003de6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff fa66 	bl	8003258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d118      	bne.n	8003dd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003dae:	f023 0302 	bic.w	r3, r3, #2
 8003db2:	f043 0202 	orr.w	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 faec 	bl	8004398 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8003dd6:	e001      	b.n	8003ddc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e022      	b.n	8003e4a <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	f043 0202 	orr.w	r2, r3, #2
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d108      	bne.n	8003e40 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fa56 	bl	80032e0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_ADC_Start+0x1a>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e097      	b.n	8003f9e <HAL_ADC_Start+0x14a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d018      	beq.n	8003eb6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e94:	4b45      	ldr	r3, [pc, #276]	@ (8003fac <HAL_ADC_Start+0x158>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a45      	ldr	r2, [pc, #276]	@ (8003fb0 <HAL_ADC_Start+0x15c>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	0c9a      	lsrs	r2, r3, #18
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ea8:	e002      	b.n	8003eb0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f9      	bne.n	8003eaa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d15f      	bne.n	8003f84 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003eee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f02:	d106      	bne.n	8003f12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f08:	f023 0206 	bic.w	r2, r3, #6
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f10:	e002      	b.n	8003f18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f20:	4b24      	ldr	r3, [pc, #144]	@ (8003fb4 <HAL_ADC_Start+0x160>)
 8003f22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003f2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10f      	bne.n	8003f5a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d129      	bne.n	8003f9c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	e020      	b.n	8003f9c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a16      	ldr	r2, [pc, #88]	@ (8003fb8 <HAL_ADC_Start+0x164>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d11b      	bne.n	8003f9c <HAL_ADC_Start+0x148>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d114      	bne.n	8003f9c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	e00b      	b.n	8003f9c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f88:	f043 0210 	orr.w	r2, r3, #16
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000014 	.word	0x20000014
 8003fb0:	431bde83 	.word	0x431bde83
 8003fb4:	40012300 	.word	0x40012300
 8003fb8:	40012000 	.word	0x40012000

08003fbc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_ADC_Stop+0x16>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e021      	b.n	8004016 <HAL_ADC_Stop+0x5a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403e:	d113      	bne.n	8004068 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800404a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800404e:	d10b      	bne.n	8004068 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e063      	b.n	8004130 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004068:	f7ff fe0a 	bl	8003c80 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800406e:	e021      	b.n	80040b4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d01d      	beq.n	80040b4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <HAL_ADC_PollForConversion+0x6c>
 800407e:	f7ff fdff 	bl	8003c80 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d212      	bcs.n	80040b4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d00b      	beq.n	80040b4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	f043 0204 	orr.w	r2, r3, #4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e03d      	b.n	8004130 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d1d6      	bne.n	8004070 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f06f 0212 	mvn.w	r2, #18
 80040ca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d123      	bne.n	800412e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d11f      	bne.n	800412e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d006      	beq.n	800410a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004106:	2b00      	cmp	r3, #0
 8004108:	d111      	bne.n	800412e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d105      	bne.n	800412e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	f043 0201 	orr.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x1c>
 800416c:	2302      	movs	r3, #2
 800416e:	e105      	b.n	800437c <HAL_ADC_ConfigChannel+0x228>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b09      	cmp	r3, #9
 800417e:	d925      	bls.n	80041cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68d9      	ldr	r1, [r3, #12]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	3b1e      	subs	r3, #30
 8004196:	2207      	movs	r2, #7
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	43da      	mvns	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	400a      	ands	r2, r1
 80041a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68d9      	ldr	r1, [r3, #12]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4618      	mov	r0, r3
 80041b8:	4603      	mov	r3, r0
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4403      	add	r3, r0
 80041be:	3b1e      	subs	r3, #30
 80041c0:	409a      	lsls	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	60da      	str	r2, [r3, #12]
 80041ca:	e022      	b.n	8004212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6919      	ldr	r1, [r3, #16]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	4613      	mov	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4413      	add	r3, r2
 80041e0:	2207      	movs	r2, #7
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43da      	mvns	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	400a      	ands	r2, r1
 80041ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6919      	ldr	r1, [r3, #16]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	4618      	mov	r0, r3
 8004202:	4603      	mov	r3, r0
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4403      	add	r3, r0
 8004208:	409a      	lsls	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b06      	cmp	r3, #6
 8004218:	d824      	bhi.n	8004264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	3b05      	subs	r3, #5
 800422c:	221f      	movs	r2, #31
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43da      	mvns	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	400a      	ands	r2, r1
 800423a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	4618      	mov	r0, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	3b05      	subs	r3, #5
 8004256:	fa00 f203 	lsl.w	r2, r0, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	635a      	str	r2, [r3, #52]	@ 0x34
 8004262:	e04c      	b.n	80042fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d824      	bhi.n	80042b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	3b23      	subs	r3, #35	@ 0x23
 800427e:	221f      	movs	r2, #31
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43da      	mvns	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	400a      	ands	r2, r1
 800428c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	4618      	mov	r0, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	3b23      	subs	r3, #35	@ 0x23
 80042a8:	fa00 f203 	lsl.w	r2, r0, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80042b4:	e023      	b.n	80042fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	3b41      	subs	r3, #65	@ 0x41
 80042c8:	221f      	movs	r2, #31
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	400a      	ands	r2, r1
 80042d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	4618      	mov	r0, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	3b41      	subs	r3, #65	@ 0x41
 80042f2:	fa00 f203 	lsl.w	r2, r0, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042fe:	4b22      	ldr	r3, [pc, #136]	@ (8004388 <HAL_ADC_ConfigChannel+0x234>)
 8004300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a21      	ldr	r2, [pc, #132]	@ (800438c <HAL_ADC_ConfigChannel+0x238>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d109      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x1cc>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b12      	cmp	r3, #18
 8004312:	d105      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a19      	ldr	r2, [pc, #100]	@ (800438c <HAL_ADC_ConfigChannel+0x238>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d123      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x21e>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b10      	cmp	r3, #16
 8004330:	d003      	beq.n	800433a <HAL_ADC_ConfigChannel+0x1e6>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b11      	cmp	r3, #17
 8004338:	d11b      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b10      	cmp	r3, #16
 800434c:	d111      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800434e:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <HAL_ADC_ConfigChannel+0x23c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a10      	ldr	r2, [pc, #64]	@ (8004394 <HAL_ADC_ConfigChannel+0x240>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	0c9a      	lsrs	r2, r3, #18
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004364:	e002      	b.n	800436c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	3b01      	subs	r3, #1
 800436a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f9      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40012300 	.word	0x40012300
 800438c:	40012000 	.word	0x40012000
 8004390:	20000014 	.word	0x20000014
 8004394:	431bde83 	.word	0x431bde83

08004398 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043a0:	4b79      	ldr	r3, [pc, #484]	@ (8004588 <ADC_Init+0x1f0>)
 80043a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	021a      	lsls	r2, r3, #8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80043f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6859      	ldr	r1, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442a:	4a58      	ldr	r2, [pc, #352]	@ (800458c <ADC_Init+0x1f4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800443e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6899      	ldr	r1, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6899      	ldr	r1, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	e00f      	b.n	8004496 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0202 	bic.w	r2, r2, #2
 80044a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6899      	ldr	r1, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	7e1b      	ldrb	r3, [r3, #24]
 80044b0:	005a      	lsls	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01b      	beq.n	80044fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80044e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	3b01      	subs	r3, #1
 80044f0:	035a      	lsls	r2, r3, #13
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	e007      	b.n	800450c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800450a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800451a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	3b01      	subs	r3, #1
 8004528:	051a      	lsls	r2, r3, #20
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6899      	ldr	r1, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800454e:	025a      	lsls	r2, r3, #9
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6899      	ldr	r1, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	029a      	lsls	r2, r3, #10
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	40012300 	.word	0x40012300
 800458c:	0f000001 	.word	0x0f000001

08004590 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e031      	b.n	800460c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045b0:	4b19      	ldr	r3, [pc, #100]	@ (8004618 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f023 021f 	bic.w	r2, r3, #31
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40012300 	.word	0x40012300

0800461c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800462c:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <__NVIC_SetPriorityGrouping+0x44>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004638:	4013      	ands	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004644:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800464c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800464e:	4a04      	ldr	r2, [pc, #16]	@ (8004660 <__NVIC_SetPriorityGrouping+0x44>)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	60d3      	str	r3, [r2, #12]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004668:	4b04      	ldr	r3, [pc, #16]	@ (800467c <__NVIC_GetPriorityGrouping+0x18>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	0a1b      	lsrs	r3, r3, #8
 800466e:	f003 0307 	and.w	r3, r3, #7
}
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	2b00      	cmp	r3, #0
 8004690:	db0b      	blt.n	80046aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	f003 021f 	and.w	r2, r3, #31
 8004698:	4907      	ldr	r1, [pc, #28]	@ (80046b8 <__NVIC_EnableIRQ+0x38>)
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2001      	movs	r0, #1
 80046a2:	fa00 f202 	lsl.w	r2, r0, r2
 80046a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	e000e100 	.word	0xe000e100

080046bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	db12      	blt.n	80046f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	f003 021f 	and.w	r2, r3, #31
 80046d4:	490a      	ldr	r1, [pc, #40]	@ (8004700 <__NVIC_DisableIRQ+0x44>)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2001      	movs	r0, #1
 80046de:	fa00 f202 	lsl.w	r2, r0, r2
 80046e2:	3320      	adds	r3, #32
 80046e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046e8:	f3bf 8f4f 	dsb	sy
}
 80046ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80046ee:	f3bf 8f6f 	isb	sy
}
 80046f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	e000e100 	.word	0xe000e100

08004704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	6039      	str	r1, [r7, #0]
 800470e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004714:	2b00      	cmp	r3, #0
 8004716:	db0a      	blt.n	800472e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	490c      	ldr	r1, [pc, #48]	@ (8004750 <__NVIC_SetPriority+0x4c>)
 800471e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	440b      	add	r3, r1
 8004728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800472c:	e00a      	b.n	8004744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4908      	ldr	r1, [pc, #32]	@ (8004754 <__NVIC_SetPriority+0x50>)
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	3b04      	subs	r3, #4
 800473c:	0112      	lsls	r2, r2, #4
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	440b      	add	r3, r1
 8004742:	761a      	strb	r2, [r3, #24]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	e000e100 	.word	0xe000e100
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004758:	b480      	push	{r7}
 800475a:	b089      	sub	sp, #36	@ 0x24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f1c3 0307 	rsb	r3, r3, #7
 8004772:	2b04      	cmp	r3, #4
 8004774:	bf28      	it	cs
 8004776:	2304      	movcs	r3, #4
 8004778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3304      	adds	r3, #4
 800477e:	2b06      	cmp	r3, #6
 8004780:	d902      	bls.n	8004788 <NVIC_EncodePriority+0x30>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3b03      	subs	r3, #3
 8004786:	e000      	b.n	800478a <NVIC_EncodePriority+0x32>
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800478c:	f04f 32ff 	mov.w	r2, #4294967295
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43da      	mvns	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	401a      	ands	r2, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a0:	f04f 31ff 	mov.w	r1, #4294967295
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	fa01 f303 	lsl.w	r3, r1, r3
 80047aa:	43d9      	mvns	r1, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b0:	4313      	orrs	r3, r2
         );
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3724      	adds	r7, #36	@ 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80047c4:	f3bf 8f4f 	dsb	sy
}
 80047c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80047ca:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <__NVIC_SystemReset+0x24>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80047d2:	4904      	ldr	r1, [pc, #16]	@ (80047e4 <__NVIC_SystemReset+0x24>)
 80047d4:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <__NVIC_SystemReset+0x28>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80047da:	f3bf 8f4f 	dsb	sy
}
 80047de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80047e0:	bf00      	nop
 80047e2:	e7fd      	b.n	80047e0 <__NVIC_SystemReset+0x20>
 80047e4:	e000ed00 	.word	0xe000ed00
 80047e8:	05fa0004 	.word	0x05fa0004

080047ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047fc:	d301      	bcc.n	8004802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047fe:	2301      	movs	r3, #1
 8004800:	e00f      	b.n	8004822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004802:	4a0a      	ldr	r2, [pc, #40]	@ (800482c <SysTick_Config+0x40>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3b01      	subs	r3, #1
 8004808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800480a:	210f      	movs	r1, #15
 800480c:	f04f 30ff 	mov.w	r0, #4294967295
 8004810:	f7ff ff78 	bl	8004704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004814:	4b05      	ldr	r3, [pc, #20]	@ (800482c <SysTick_Config+0x40>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800481a:	4b04      	ldr	r3, [pc, #16]	@ (800482c <SysTick_Config+0x40>)
 800481c:	2207      	movs	r2, #7
 800481e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	e000e010 	.word	0xe000e010

08004830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff feef 	bl	800461c <__NVIC_SetPriorityGrouping>
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af00      	add	r7, sp, #0
 800484c:	4603      	mov	r3, r0
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004858:	f7ff ff04 	bl	8004664 <__NVIC_GetPriorityGrouping>
 800485c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	6978      	ldr	r0, [r7, #20]
 8004864:	f7ff ff78 	bl	8004758 <NVIC_EncodePriority>
 8004868:	4602      	mov	r2, r0
 800486a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ff47 	bl	8004704 <__NVIC_SetPriority>
}
 8004876:	bf00      	nop
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	4603      	mov	r3, r0
 8004886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fef7 	bl	8004680 <__NVIC_EnableIRQ>
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	4603      	mov	r3, r0
 80048a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80048a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff ff07 	bl	80046bc <__NVIC_DisableIRQ>
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80048ba:	f7ff ff81 	bl	80047c0 <__NVIC_SystemReset>

080048be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff ff90 	bl	80047ec <SysTick_Config>
 80048cc:	4603      	mov	r3, r0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048e4:	f7ff f9cc 	bl	8003c80 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e099      	b.n	8004a28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0201 	bic.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004914:	e00f      	b.n	8004936 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004916:	f7ff f9b3 	bl	8003c80 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b05      	cmp	r3, #5
 8004922:	d908      	bls.n	8004936 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2203      	movs	r2, #3
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e078      	b.n	8004a28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e8      	bne.n	8004916 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4b38      	ldr	r3, [pc, #224]	@ (8004a30 <HAL_DMA_Init+0x158>)
 8004950:	4013      	ands	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800496e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800497a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	2b04      	cmp	r3, #4
 800498e:	d107      	bne.n	80049a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	4313      	orrs	r3, r2
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f023 0307 	bic.w	r3, r3, #7
 80049b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d117      	bne.n	80049fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00e      	beq.n	80049fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fb43 	bl	8005068 <DMA_CheckFifoParam>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2240      	movs	r2, #64	@ 0x40
 80049ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80049f6:	2301      	movs	r3, #1
 80049f8:	e016      	b.n	8004a28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fafa 	bl	8004ffc <DMA_CalcBaseAndBitshift>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a10:	223f      	movs	r2, #63	@ 0x3f
 8004a12:	409a      	lsls	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	f010803f 	.word	0xf010803f

08004a34 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e050      	b.n	8004ae8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d101      	bne.n	8004a56 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
 8004a54:	e048      	b.n	8004ae8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2200      	movs	r2, #0
 8004a84:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2221      	movs	r2, #33	@ 0x21
 8004a94:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fab0 	bl	8004ffc <DMA_CalcBaseAndBitshift>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac8:	223f      	movs	r2, #63	@ 0x3f
 8004aca:	409a      	lsls	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_DMA_Start+0x20>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e026      	b.n	8004b5e <HAL_DMA_Start+0x6e>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d115      	bne.n	8004b50 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 fa31 	bl	8004fa0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e005      	b.n	8004b5c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b74:	f7ff f884 	bl	8003c80 <HAL_GetTick>
 8004b78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d008      	beq.n	8004b98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2280      	movs	r2, #128	@ 0x80
 8004b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e052      	b.n	8004c3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0216 	bic.w	r2, r2, #22
 8004ba6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bb6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d103      	bne.n	8004bc8 <HAL_DMA_Abort+0x62>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0208 	bic.w	r2, r2, #8
 8004bd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004be8:	e013      	b.n	8004c12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bea:	f7ff f849 	bl	8003c80 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	d90c      	bls.n	8004c12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2203      	movs	r2, #3
 8004c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e015      	b.n	8004c3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e4      	bne.n	8004bea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	223f      	movs	r2, #63	@ 0x3f
 8004c26:	409a      	lsls	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d004      	beq.n	8004c64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2280      	movs	r2, #128	@ 0x80
 8004c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e00c      	b.n	8004c7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2205      	movs	r2, #5
 8004c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0201 	bic.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c98:	4b8e      	ldr	r3, [pc, #568]	@ (8004ed4 <HAL_DMA_IRQHandler+0x248>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a8e      	ldr	r2, [pc, #568]	@ (8004ed8 <HAL_DMA_IRQHandler+0x24c>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	0a9b      	lsrs	r3, r3, #10
 8004ca4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004caa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01a      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d013      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0204 	bic.w	r2, r2, #4
 8004cde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf0:	f043 0201 	orr.w	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d012      	beq.n	8004d2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d26:	f043 0202 	orr.w	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d32:	2204      	movs	r2, #4
 8004d34:	409a      	lsls	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d012      	beq.n	8004d64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00b      	beq.n	8004d64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d50:	2204      	movs	r2, #4
 8004d52:	409a      	lsls	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5c:	f043 0204 	orr.w	r2, r3, #4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d68:	2210      	movs	r2, #16
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d043      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d03c      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d86:	2210      	movs	r2, #16
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d018      	beq.n	8004dce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d108      	bne.n	8004dbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d024      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
 8004dba:	e01f      	b.n	8004dfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01b      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
 8004dcc:	e016      	b.n	8004dfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d107      	bne.n	8004dec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0208 	bic.w	r2, r2, #8
 8004dea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e00:	2220      	movs	r2, #32
 8004e02:	409a      	lsls	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 808f 	beq.w	8004f2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8087 	beq.w	8004f2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e22:	2220      	movs	r2, #32
 8004e24:	409a      	lsls	r2, r3
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d136      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0216 	bic.w	r2, r2, #22
 8004e44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <HAL_DMA_IRQHandler+0x1da>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0208 	bic.w	r2, r2, #8
 8004e74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7a:	223f      	movs	r2, #63	@ 0x3f
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d07e      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4798      	blx	r3
        }
        return;
 8004ea2:	e079      	b.n	8004f98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01d      	beq.n	8004eee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10d      	bne.n	8004edc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d031      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4798      	blx	r3
 8004ed0:	e02c      	b.n	8004f2c <HAL_DMA_IRQHandler+0x2a0>
 8004ed2:	bf00      	nop
 8004ed4:	20000014 	.word	0x20000014
 8004ed8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d023      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
 8004eec:	e01e      	b.n	8004f2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10f      	bne.n	8004f1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0210 	bic.w	r2, r2, #16
 8004f0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d032      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d022      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2205      	movs	r2, #5
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d307      	bcc.n	8004f74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f2      	bne.n	8004f58 <HAL_DMA_IRQHandler+0x2cc>
 8004f72:	e000      	b.n	8004f76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4798      	blx	r3
 8004f96:	e000      	b.n	8004f9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f98:	bf00      	nop
    }
  }
}
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004fbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b40      	cmp	r3, #64	@ 0x40
 8004fcc:	d108      	bne.n	8004fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fde:	e007      	b.n	8004ff0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	60da      	str	r2, [r3, #12]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	3b10      	subs	r3, #16
 800500c:	4a14      	ldr	r2, [pc, #80]	@ (8005060 <DMA_CalcBaseAndBitshift+0x64>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005016:	4a13      	ldr	r2, [pc, #76]	@ (8005064 <DMA_CalcBaseAndBitshift+0x68>)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b03      	cmp	r3, #3
 8005028:	d909      	bls.n	800503e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	1d1a      	adds	r2, r3, #4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	659a      	str	r2, [r3, #88]	@ 0x58
 800503c:	e007      	b.n	800504e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	aaaaaaab 	.word	0xaaaaaaab
 8005064:	080227dc 	.word	0x080227dc

08005068 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d11f      	bne.n	80050c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d856      	bhi.n	8005136 <DMA_CheckFifoParam+0xce>
 8005088:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <DMA_CheckFifoParam+0x28>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050a1 	.word	0x080050a1
 8005094:	080050b3 	.word	0x080050b3
 8005098:	080050a1 	.word	0x080050a1
 800509c:	08005137 	.word	0x08005137
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d046      	beq.n	800513a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b0:	e043      	b.n	800513a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050ba:	d140      	bne.n	800513e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c0:	e03d      	b.n	800513e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ca:	d121      	bne.n	8005110 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d837      	bhi.n	8005142 <DMA_CheckFifoParam+0xda>
 80050d2:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <DMA_CheckFifoParam+0x70>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	080050ef 	.word	0x080050ef
 80050e0:	080050e9 	.word	0x080050e9
 80050e4:	08005101 	.word	0x08005101
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
      break;
 80050ec:	e030      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d025      	beq.n	8005146 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050fe:	e022      	b.n	8005146 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005108:	d11f      	bne.n	800514a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800510e:	e01c      	b.n	800514a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d903      	bls.n	800511e <DMA_CheckFifoParam+0xb6>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b03      	cmp	r3, #3
 800511a:	d003      	beq.n	8005124 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800511c:	e018      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
      break;
 8005122:	e015      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00e      	beq.n	800514e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
      break;
 8005134:	e00b      	b.n	800514e <DMA_CheckFifoParam+0xe6>
      break;
 8005136:	bf00      	nop
 8005138:	e00a      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
      break;
 800513a:	bf00      	nop
 800513c:	e008      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
      break;
 800513e:	bf00      	nop
 8005140:	e006      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
      break;
 8005142:	bf00      	nop
 8005144:	e004      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
      break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
      break;   
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
      break;
 800514e:	bf00      	nop
    }
  } 
  
  return status; 
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop

08005160 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005172:	4b23      	ldr	r3, [pc, #140]	@ (8005200 <HAL_FLASH_Program+0xa0>)
 8005174:	7e1b      	ldrb	r3, [r3, #24]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_FLASH_Program+0x1e>
 800517a:	2302      	movs	r3, #2
 800517c:	e03b      	b.n	80051f6 <HAL_FLASH_Program+0x96>
 800517e:	4b20      	ldr	r3, [pc, #128]	@ (8005200 <HAL_FLASH_Program+0xa0>)
 8005180:	2201      	movs	r2, #1
 8005182:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005184:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005188:	f000 f87c 	bl	8005284 <FLASH_WaitForLastOperation>
 800518c:	4603      	mov	r3, r0
 800518e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d12b      	bne.n	80051ee <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800519c:	783b      	ldrb	r3, [r7, #0]
 800519e:	4619      	mov	r1, r3
 80051a0:	68b8      	ldr	r0, [r7, #8]
 80051a2:	f000 f927 	bl	80053f4 <FLASH_Program_Byte>
 80051a6:	e016      	b.n	80051d6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d105      	bne.n	80051ba <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80051ae:	883b      	ldrh	r3, [r7, #0]
 80051b0:	4619      	mov	r1, r3
 80051b2:	68b8      	ldr	r0, [r7, #8]
 80051b4:	f000 f8fa 	bl	80053ac <FLASH_Program_HalfWord>
 80051b8:	e00d      	b.n	80051d6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d105      	bne.n	80051cc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	4619      	mov	r1, r3
 80051c4:	68b8      	ldr	r0, [r7, #8]
 80051c6:	f000 f8cf 	bl	8005368 <FLASH_Program_Word>
 80051ca:	e004      	b.n	80051d6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80051cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d0:	68b8      	ldr	r0, [r7, #8]
 80051d2:	f000 f897 	bl	8005304 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051d6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80051da:	f000 f853 	bl	8005284 <FLASH_WaitForLastOperation>
 80051de:	4603      	mov	r3, r0
 80051e0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80051e2:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <HAL_FLASH_Program+0xa4>)
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	4a07      	ldr	r2, [pc, #28]	@ (8005204 <HAL_FLASH_Program+0xa4>)
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80051ee:	4b04      	ldr	r3, [pc, #16]	@ (8005200 <HAL_FLASH_Program+0xa0>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20001a50 	.word	0x20001a50
 8005204:	40023c00 	.word	0x40023c00

08005208 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005212:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <HAL_FLASH_Unlock+0x38>)
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	da0b      	bge.n	8005232 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800521a:	4b09      	ldr	r3, [pc, #36]	@ (8005240 <HAL_FLASH_Unlock+0x38>)
 800521c:	4a09      	ldr	r2, [pc, #36]	@ (8005244 <HAL_FLASH_Unlock+0x3c>)
 800521e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005220:	4b07      	ldr	r3, [pc, #28]	@ (8005240 <HAL_FLASH_Unlock+0x38>)
 8005222:	4a09      	ldr	r2, [pc, #36]	@ (8005248 <HAL_FLASH_Unlock+0x40>)
 8005224:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005226:	4b06      	ldr	r3, [pc, #24]	@ (8005240 <HAL_FLASH_Unlock+0x38>)
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	da01      	bge.n	8005232 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005232:	79fb      	ldrb	r3, [r7, #7]
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40023c00 	.word	0x40023c00
 8005244:	45670123 	.word	0x45670123
 8005248:	cdef89ab 	.word	0xcdef89ab

0800524c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005250:	4b05      	ldr	r3, [pc, #20]	@ (8005268 <HAL_FLASH_Lock+0x1c>)
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	4a04      	ldr	r2, [pc, #16]	@ (8005268 <HAL_FLASH_Lock+0x1c>)
 8005256:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800525a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40023c00 	.word	0x40023c00

0800526c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005270:	4b03      	ldr	r3, [pc, #12]	@ (8005280 <HAL_FLASH_GetError+0x14>)
 8005272:	69db      	ldr	r3, [r3, #28]
}  
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20001a50 	.word	0x20001a50

08005284 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005290:	4b1a      	ldr	r3, [pc, #104]	@ (80052fc <FLASH_WaitForLastOperation+0x78>)
 8005292:	2200      	movs	r2, #0
 8005294:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005296:	f7fe fcf3 	bl	8003c80 <HAL_GetTick>
 800529a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800529c:	e010      	b.n	80052c0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d00c      	beq.n	80052c0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d007      	beq.n	80052bc <FLASH_WaitForLastOperation+0x38>
 80052ac:	f7fe fce8 	bl	8003c80 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d201      	bcs.n	80052c0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e019      	b.n	80052f4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80052c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005300 <FLASH_WaitForLastOperation+0x7c>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e8      	bne.n	800529e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80052cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <FLASH_WaitForLastOperation+0x7c>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <FLASH_WaitForLastOperation+0x7c>)
 80052da:	2201      	movs	r2, #1
 80052dc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80052de:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <FLASH_WaitForLastOperation+0x7c>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80052ea:	f000 f8a5 	bl	8005438 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
  
}  
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20001a50 	.word	0x20001a50
 8005300:	40023c00 	.word	0x40023c00

08005304 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005310:	4b14      	ldr	r3, [pc, #80]	@ (8005364 <FLASH_Program_DoubleWord+0x60>)
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	4a13      	ldr	r2, [pc, #76]	@ (8005364 <FLASH_Program_DoubleWord+0x60>)
 8005316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800531a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800531c:	4b11      	ldr	r3, [pc, #68]	@ (8005364 <FLASH_Program_DoubleWord+0x60>)
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	4a10      	ldr	r2, [pc, #64]	@ (8005364 <FLASH_Program_DoubleWord+0x60>)
 8005322:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005326:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005328:	4b0e      	ldr	r3, [pc, #56]	@ (8005364 <FLASH_Program_DoubleWord+0x60>)
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4a0d      	ldr	r2, [pc, #52]	@ (8005364 <FLASH_Program_DoubleWord+0x60>)
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800533a:	f3bf 8f6f 	isb	sy
}
 800533e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	000a      	movs	r2, r1
 800534e:	2300      	movs	r3, #0
 8005350:	68f9      	ldr	r1, [r7, #12]
 8005352:	3104      	adds	r1, #4
 8005354:	4613      	mov	r3, r2
 8005356:	600b      	str	r3, [r1, #0]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40023c00 	.word	0x40023c00

08005368 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005372:	4b0d      	ldr	r3, [pc, #52]	@ (80053a8 <FLASH_Program_Word+0x40>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	4a0c      	ldr	r2, [pc, #48]	@ (80053a8 <FLASH_Program_Word+0x40>)
 8005378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800537c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800537e:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <FLASH_Program_Word+0x40>)
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	4a09      	ldr	r2, [pc, #36]	@ (80053a8 <FLASH_Program_Word+0x40>)
 8005384:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005388:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800538a:	4b07      	ldr	r3, [pc, #28]	@ (80053a8 <FLASH_Program_Word+0x40>)
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	4a06      	ldr	r2, [pc, #24]	@ (80053a8 <FLASH_Program_Word+0x40>)
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	601a      	str	r2, [r3, #0]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40023c00 	.word	0x40023c00

080053ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053b8:	4b0d      	ldr	r3, [pc, #52]	@ (80053f0 <FLASH_Program_HalfWord+0x44>)
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	4a0c      	ldr	r2, [pc, #48]	@ (80053f0 <FLASH_Program_HalfWord+0x44>)
 80053be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <FLASH_Program_HalfWord+0x44>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	4a09      	ldr	r2, [pc, #36]	@ (80053f0 <FLASH_Program_HalfWord+0x44>)
 80053ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80053d0:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <FLASH_Program_HalfWord+0x44>)
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	4a06      	ldr	r2, [pc, #24]	@ (80053f0 <FLASH_Program_HalfWord+0x44>)
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	801a      	strh	r2, [r3, #0]
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40023c00 	.word	0x40023c00

080053f4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005400:	4b0c      	ldr	r3, [pc, #48]	@ (8005434 <FLASH_Program_Byte+0x40>)
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	4a0b      	ldr	r2, [pc, #44]	@ (8005434 <FLASH_Program_Byte+0x40>)
 8005406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800540a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800540c:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <FLASH_Program_Byte+0x40>)
 800540e:	4a09      	ldr	r2, [pc, #36]	@ (8005434 <FLASH_Program_Byte+0x40>)
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005414:	4b07      	ldr	r3, [pc, #28]	@ (8005434 <FLASH_Program_Byte+0x40>)
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	4a06      	ldr	r2, [pc, #24]	@ (8005434 <FLASH_Program_Byte+0x40>)
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	701a      	strb	r2, [r3, #0]
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40023c00 	.word	0x40023c00

08005438 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800543c:	4b2f      	ldr	r3, [pc, #188]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005448:	4b2d      	ldr	r3, [pc, #180]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	f043 0310 	orr.w	r3, r3, #16
 8005450:	4a2b      	ldr	r2, [pc, #172]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 8005452:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005454:	4b29      	ldr	r3, [pc, #164]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 8005456:	2210      	movs	r2, #16
 8005458:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800545a:	4b28      	ldr	r3, [pc, #160]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005466:	4b26      	ldr	r3, [pc, #152]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f043 0308 	orr.w	r3, r3, #8
 800546e:	4a24      	ldr	r2, [pc, #144]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 8005470:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005472:	4b22      	ldr	r3, [pc, #136]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 8005474:	2220      	movs	r2, #32
 8005476:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005478:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005484:	4b1e      	ldr	r3, [pc, #120]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	4a1c      	ldr	r2, [pc, #112]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 800548e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005490:	4b1a      	ldr	r3, [pc, #104]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 8005492:	2240      	movs	r2, #64	@ 0x40
 8005494:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005496:	4b19      	ldr	r3, [pc, #100]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80054a2:	4b17      	ldr	r3, [pc, #92]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	4a15      	ldr	r2, [pc, #84]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 80054ac:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80054ae:	4b13      	ldr	r3, [pc, #76]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 80054b0:	2280      	movs	r2, #128	@ 0x80
 80054b2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80054b4:	4b11      	ldr	r3, [pc, #68]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d009      	beq.n	80054d4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80054c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 80054ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80054cc:	4b0b      	ldr	r3, [pc, #44]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 80054ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054d2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80054d4:	4b09      	ldr	r3, [pc, #36]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80054e0:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f043 0320 	orr.w	r3, r3, #32
 80054e8:	4a05      	ldr	r2, [pc, #20]	@ (8005500 <FLASH_SetErrorCode+0xc8>)
 80054ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80054ec:	4b03      	ldr	r3, [pc, #12]	@ (80054fc <FLASH_SetErrorCode+0xc4>)
 80054ee:	2202      	movs	r2, #2
 80054f0:	60da      	str	r2, [r3, #12]
  }
}
 80054f2:	bf00      	nop
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	40023c00 	.word	0x40023c00
 8005500:	20001a50 	.word	0x20001a50

08005504 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005516:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <HAL_FLASHEx_Erase+0xd8>)
 8005518:	7e1b      	ldrb	r3, [r3, #24]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_FLASHEx_Erase+0x1e>
 800551e:	2302      	movs	r3, #2
 8005520:	e058      	b.n	80055d4 <HAL_FLASHEx_Erase+0xd0>
 8005522:	4b2e      	ldr	r3, [pc, #184]	@ (80055dc <HAL_FLASHEx_Erase+0xd8>)
 8005524:	2201      	movs	r2, #1
 8005526:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005528:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800552c:	f7ff feaa 	bl	8005284 <FLASH_WaitForLastOperation>
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d148      	bne.n	80055cc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f04f 32ff 	mov.w	r2, #4294967295
 8005540:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d115      	bne.n	8005576 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	b2da      	uxtb	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	4619      	mov	r1, r3
 8005556:	4610      	mov	r0, r2
 8005558:	f000 f844 	bl	80055e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800555c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005560:	f7ff fe90 	bl	8005284 <FLASH_WaitForLastOperation>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005568:	4b1d      	ldr	r3, [pc, #116]	@ (80055e0 <HAL_FLASHEx_Erase+0xdc>)
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	4a1c      	ldr	r2, [pc, #112]	@ (80055e0 <HAL_FLASHEx_Erase+0xdc>)
 800556e:	f023 0304 	bic.w	r3, r3, #4
 8005572:	6113      	str	r3, [r2, #16]
 8005574:	e028      	b.n	80055c8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	e01c      	b.n	80055b8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	4619      	mov	r1, r3
 8005586:	68b8      	ldr	r0, [r7, #8]
 8005588:	f000 f850 	bl	800562c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800558c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005590:	f7ff fe78 	bl	8005284 <FLASH_WaitForLastOperation>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005598:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <HAL_FLASHEx_Erase+0xdc>)
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	4a10      	ldr	r2, [pc, #64]	@ (80055e0 <HAL_FLASHEx_Erase+0xdc>)
 800559e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80055a2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	601a      	str	r2, [r3, #0]
          break;
 80055b0:	e00a      	b.n	80055c8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	3301      	adds	r3, #1
 80055b6:	60bb      	str	r3, [r7, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4413      	add	r3, r2
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d3da      	bcc.n	800557e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80055c8:	f000 f878 	bl	80056bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80055cc:	4b03      	ldr	r3, [pc, #12]	@ (80055dc <HAL_FLASHEx_Erase+0xd8>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	761a      	strb	r2, [r3, #24]

  return status;
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20001a50 	.word	0x20001a50
 80055e0:	40023c00 	.word	0x40023c00

080055e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	6039      	str	r1, [r7, #0]
 80055ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80055f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005628 <FLASH_MassErase+0x44>)
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005628 <FLASH_MassErase+0x44>)
 80055f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80055fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005628 <FLASH_MassErase+0x44>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	4a09      	ldr	r2, [pc, #36]	@ (8005628 <FLASH_MassErase+0x44>)
 8005602:	f043 0304 	orr.w	r3, r3, #4
 8005606:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005608:	4b07      	ldr	r3, [pc, #28]	@ (8005628 <FLASH_MassErase+0x44>)
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	4313      	orrs	r3, r2
 8005612:	4a05      	ldr	r2, [pc, #20]	@ (8005628 <FLASH_MassErase+0x44>)
 8005614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005618:	6113      	str	r3, [r2, #16]
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40023c00 	.word	0x40023c00

0800562c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	e010      	b.n	800566a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d103      	bne.n	8005656 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800564e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e009      	b.n	800566a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d103      	bne.n	8005664 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800565c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e002      	b.n	800566a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005664:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005668:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800566a:	4b13      	ldr	r3, [pc, #76]	@ (80056b8 <FLASH_Erase_Sector+0x8c>)
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	4a12      	ldr	r2, [pc, #72]	@ (80056b8 <FLASH_Erase_Sector+0x8c>)
 8005670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005674:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005676:	4b10      	ldr	r3, [pc, #64]	@ (80056b8 <FLASH_Erase_Sector+0x8c>)
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	490f      	ldr	r1, [pc, #60]	@ (80056b8 <FLASH_Erase_Sector+0x8c>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <FLASH_Erase_Sector+0x8c>)
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	4a0c      	ldr	r2, [pc, #48]	@ (80056b8 <FLASH_Erase_Sector+0x8c>)
 8005688:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800568c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800568e:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <FLASH_Erase_Sector+0x8c>)
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	4313      	orrs	r3, r2
 8005698:	4a07      	ldr	r2, [pc, #28]	@ (80056b8 <FLASH_Erase_Sector+0x8c>)
 800569a:	f043 0302 	orr.w	r3, r3, #2
 800569e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80056a0:	4b05      	ldr	r3, [pc, #20]	@ (80056b8 <FLASH_Erase_Sector+0x8c>)
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	4a04      	ldr	r2, [pc, #16]	@ (80056b8 <FLASH_Erase_Sector+0x8c>)
 80056a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056aa:	6113      	str	r3, [r2, #16]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40023c00 	.word	0x40023c00

080056bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80056c0:	4b20      	ldr	r3, [pc, #128]	@ (8005744 <FLASH_FlushCaches+0x88>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d017      	beq.n	80056fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80056cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005744 <FLASH_FlushCaches+0x88>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005744 <FLASH_FlushCaches+0x88>)
 80056d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80056d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005744 <FLASH_FlushCaches+0x88>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a19      	ldr	r2, [pc, #100]	@ (8005744 <FLASH_FlushCaches+0x88>)
 80056de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4b17      	ldr	r3, [pc, #92]	@ (8005744 <FLASH_FlushCaches+0x88>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a16      	ldr	r2, [pc, #88]	@ (8005744 <FLASH_FlushCaches+0x88>)
 80056ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056f0:	4b14      	ldr	r3, [pc, #80]	@ (8005744 <FLASH_FlushCaches+0x88>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a13      	ldr	r2, [pc, #76]	@ (8005744 <FLASH_FlushCaches+0x88>)
 80056f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056fa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80056fc:	4b11      	ldr	r3, [pc, #68]	@ (8005744 <FLASH_FlushCaches+0x88>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005704:	2b00      	cmp	r3, #0
 8005706:	d017      	beq.n	8005738 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005708:	4b0e      	ldr	r3, [pc, #56]	@ (8005744 <FLASH_FlushCaches+0x88>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a0d      	ldr	r2, [pc, #52]	@ (8005744 <FLASH_FlushCaches+0x88>)
 800570e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005712:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005714:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <FLASH_FlushCaches+0x88>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a0a      	ldr	r2, [pc, #40]	@ (8005744 <FLASH_FlushCaches+0x88>)
 800571a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4b08      	ldr	r3, [pc, #32]	@ (8005744 <FLASH_FlushCaches+0x88>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a07      	ldr	r2, [pc, #28]	@ (8005744 <FLASH_FlushCaches+0x88>)
 8005726:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800572a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800572c:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <FLASH_FlushCaches+0x88>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a04      	ldr	r2, [pc, #16]	@ (8005744 <FLASH_FlushCaches+0x88>)
 8005732:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005736:	6013      	str	r3, [r2, #0]
  }
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40023c00 	.word	0x40023c00

08005748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	@ 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	e159      	b.n	8005a18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005764:	2201      	movs	r2, #1
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4013      	ands	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	429a      	cmp	r2, r3
 800577e:	f040 8148 	bne.w	8005a12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	2b01      	cmp	r3, #1
 800578c:	d005      	beq.n	800579a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005796:	2b02      	cmp	r3, #2
 8005798:	d130      	bne.n	80057fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	2203      	movs	r2, #3
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4013      	ands	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057d0:	2201      	movs	r2, #1
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	f003 0201 	and.w	r2, r3, #1
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	2b03      	cmp	r3, #3
 8005806:	d017      	beq.n	8005838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2203      	movs	r2, #3
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d123      	bne.n	800588c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	08da      	lsrs	r2, r3, #3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3208      	adds	r2, #8
 800584c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	220f      	movs	r2, #15
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4013      	ands	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	08da      	lsrs	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	3208      	adds	r2, #8
 8005886:	69b9      	ldr	r1, [r7, #24]
 8005888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	2203      	movs	r2, #3
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 0203 	and.w	r2, r3, #3
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80a2 	beq.w	8005a12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	4b57      	ldr	r3, [pc, #348]	@ (8005a30 <HAL_GPIO_Init+0x2e8>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d6:	4a56      	ldr	r2, [pc, #344]	@ (8005a30 <HAL_GPIO_Init+0x2e8>)
 80058d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80058de:	4b54      	ldr	r3, [pc, #336]	@ (8005a30 <HAL_GPIO_Init+0x2e8>)
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058ea:	4a52      	ldr	r2, [pc, #328]	@ (8005a34 <HAL_GPIO_Init+0x2ec>)
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	3302      	adds	r3, #2
 80058f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	220f      	movs	r2, #15
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4013      	ands	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a49      	ldr	r2, [pc, #292]	@ (8005a38 <HAL_GPIO_Init+0x2f0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d019      	beq.n	800594a <HAL_GPIO_Init+0x202>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a48      	ldr	r2, [pc, #288]	@ (8005a3c <HAL_GPIO_Init+0x2f4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <HAL_GPIO_Init+0x1fe>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a47      	ldr	r2, [pc, #284]	@ (8005a40 <HAL_GPIO_Init+0x2f8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00d      	beq.n	8005942 <HAL_GPIO_Init+0x1fa>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a46      	ldr	r2, [pc, #280]	@ (8005a44 <HAL_GPIO_Init+0x2fc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <HAL_GPIO_Init+0x1f6>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a45      	ldr	r2, [pc, #276]	@ (8005a48 <HAL_GPIO_Init+0x300>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d101      	bne.n	800593a <HAL_GPIO_Init+0x1f2>
 8005936:	2304      	movs	r3, #4
 8005938:	e008      	b.n	800594c <HAL_GPIO_Init+0x204>
 800593a:	2307      	movs	r3, #7
 800593c:	e006      	b.n	800594c <HAL_GPIO_Init+0x204>
 800593e:	2303      	movs	r3, #3
 8005940:	e004      	b.n	800594c <HAL_GPIO_Init+0x204>
 8005942:	2302      	movs	r3, #2
 8005944:	e002      	b.n	800594c <HAL_GPIO_Init+0x204>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <HAL_GPIO_Init+0x204>
 800594a:	2300      	movs	r3, #0
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	f002 0203 	and.w	r2, r2, #3
 8005952:	0092      	lsls	r2, r2, #2
 8005954:	4093      	lsls	r3, r2
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	4313      	orrs	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800595c:	4935      	ldr	r1, [pc, #212]	@ (8005a34 <HAL_GPIO_Init+0x2ec>)
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	089b      	lsrs	r3, r3, #2
 8005962:	3302      	adds	r3, #2
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800596a:	4b38      	ldr	r3, [pc, #224]	@ (8005a4c <HAL_GPIO_Init+0x304>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	43db      	mvns	r3, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4013      	ands	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800598e:	4a2f      	ldr	r2, [pc, #188]	@ (8005a4c <HAL_GPIO_Init+0x304>)
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005994:	4b2d      	ldr	r3, [pc, #180]	@ (8005a4c <HAL_GPIO_Init+0x304>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	43db      	mvns	r3, r3
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4013      	ands	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059b8:	4a24      	ldr	r2, [pc, #144]	@ (8005a4c <HAL_GPIO_Init+0x304>)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059be:	4b23      	ldr	r3, [pc, #140]	@ (8005a4c <HAL_GPIO_Init+0x304>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	43db      	mvns	r3, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	4013      	ands	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059e2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a4c <HAL_GPIO_Init+0x304>)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059e8:	4b18      	ldr	r3, [pc, #96]	@ (8005a4c <HAL_GPIO_Init+0x304>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	43db      	mvns	r3, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4013      	ands	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8005a4c <HAL_GPIO_Init+0x304>)
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	3301      	adds	r3, #1
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b0f      	cmp	r3, #15
 8005a1c:	f67f aea2 	bls.w	8005764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	3724      	adds	r7, #36	@ 0x24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800
 8005a34:	40013800 	.word	0x40013800
 8005a38:	40020000 	.word	0x40020000
 8005a3c:	40020400 	.word	0x40020400
 8005a40:	40020800 	.word	0x40020800
 8005a44:	40020c00 	.word	0x40020c00
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40013c00 	.word	0x40013c00

08005a50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e0bb      	b.n	8005be4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	f040 80ab 	bne.w	8005bde <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005a88:	4a5c      	ldr	r2, [pc, #368]	@ (8005bfc <HAL_GPIO_DeInit+0x1ac>)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	3302      	adds	r3, #2
 8005a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a94:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	220f      	movs	r2, #15
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a54      	ldr	r2, [pc, #336]	@ (8005c00 <HAL_GPIO_DeInit+0x1b0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d019      	beq.n	8005ae6 <HAL_GPIO_DeInit+0x96>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a53      	ldr	r2, [pc, #332]	@ (8005c04 <HAL_GPIO_DeInit+0x1b4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <HAL_GPIO_DeInit+0x92>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a52      	ldr	r2, [pc, #328]	@ (8005c08 <HAL_GPIO_DeInit+0x1b8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00d      	beq.n	8005ade <HAL_GPIO_DeInit+0x8e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a51      	ldr	r2, [pc, #324]	@ (8005c0c <HAL_GPIO_DeInit+0x1bc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <HAL_GPIO_DeInit+0x8a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a50      	ldr	r2, [pc, #320]	@ (8005c10 <HAL_GPIO_DeInit+0x1c0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d101      	bne.n	8005ad6 <HAL_GPIO_DeInit+0x86>
 8005ad2:	2304      	movs	r3, #4
 8005ad4:	e008      	b.n	8005ae8 <HAL_GPIO_DeInit+0x98>
 8005ad6:	2307      	movs	r3, #7
 8005ad8:	e006      	b.n	8005ae8 <HAL_GPIO_DeInit+0x98>
 8005ada:	2303      	movs	r3, #3
 8005adc:	e004      	b.n	8005ae8 <HAL_GPIO_DeInit+0x98>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e002      	b.n	8005ae8 <HAL_GPIO_DeInit+0x98>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <HAL_GPIO_DeInit+0x98>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	f002 0203 	and.w	r2, r2, #3
 8005aee:	0092      	lsls	r2, r2, #2
 8005af0:	4093      	lsls	r3, r2
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d132      	bne.n	8005b5e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005af8:	4b46      	ldr	r3, [pc, #280]	@ (8005c14 <HAL_GPIO_DeInit+0x1c4>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	43db      	mvns	r3, r3
 8005b00:	4944      	ldr	r1, [pc, #272]	@ (8005c14 <HAL_GPIO_DeInit+0x1c4>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005b06:	4b43      	ldr	r3, [pc, #268]	@ (8005c14 <HAL_GPIO_DeInit+0x1c4>)
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	4941      	ldr	r1, [pc, #260]	@ (8005c14 <HAL_GPIO_DeInit+0x1c4>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005b14:	4b3f      	ldr	r3, [pc, #252]	@ (8005c14 <HAL_GPIO_DeInit+0x1c4>)
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	493d      	ldr	r1, [pc, #244]	@ (8005c14 <HAL_GPIO_DeInit+0x1c4>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005b22:	4b3c      	ldr	r3, [pc, #240]	@ (8005c14 <HAL_GPIO_DeInit+0x1c4>)
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	493a      	ldr	r1, [pc, #232]	@ (8005c14 <HAL_GPIO_DeInit+0x1c4>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	220f      	movs	r2, #15
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005b40:	4a2e      	ldr	r2, [pc, #184]	@ (8005bfc <HAL_GPIO_DeInit+0x1ac>)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	089b      	lsrs	r3, r3, #2
 8005b46:	3302      	adds	r3, #2
 8005b48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	43da      	mvns	r2, r3
 8005b50:	482a      	ldr	r0, [pc, #168]	@ (8005bfc <HAL_GPIO_DeInit+0x1ac>)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	089b      	lsrs	r3, r3, #2
 8005b56:	400a      	ands	r2, r1
 8005b58:	3302      	adds	r3, #2
 8005b5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	2103      	movs	r1, #3
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	401a      	ands	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	08da      	lsrs	r2, r3, #3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3208      	adds	r2, #8
 8005b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	220f      	movs	r2, #15
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	08d2      	lsrs	r2, r2, #3
 8005b94:	4019      	ands	r1, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	3208      	adds	r2, #8
 8005b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	2103      	movs	r1, #3
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	401a      	ands	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	2101      	movs	r1, #1
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	401a      	ands	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	2103      	movs	r1, #3
 8005bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	401a      	ands	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	3301      	adds	r3, #1
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b0f      	cmp	r3, #15
 8005be8:	f67f af40 	bls.w	8005a6c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40013800 	.word	0x40013800
 8005c00:	40020000 	.word	0x40020000
 8005c04:	40020400 	.word	0x40020400
 8005c08:	40020800 	.word	0x40020800
 8005c0c:	40020c00 	.word	0x40020c00
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40013c00 	.word	0x40013c00

08005c18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	887b      	ldrh	r3, [r7, #2]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
 8005c34:	e001      	b.n	8005c3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	807b      	strh	r3, [r7, #2]
 8005c54:	4613      	mov	r3, r2
 8005c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c58:	787b      	ldrb	r3, [r7, #1]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c5e:	887a      	ldrh	r2, [r7, #2]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c64:	e003      	b.n	8005c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c66:	887b      	ldrh	r3, [r7, #2]
 8005c68:	041a      	lsls	r2, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	619a      	str	r2, [r3, #24]
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c86:	4b08      	ldr	r3, [pc, #32]	@ (8005ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c92:	4a05      	ldr	r2, [pc, #20]	@ (8005ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fd fa44 	bl	8003128 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40013c00 	.word	0x40013c00

08005cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e12b      	b.n	8005f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fd fb22 	bl	800331c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2224      	movs	r2, #36	@ 0x24
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d10:	f003 f822 	bl	8008d58 <HAL_RCC_GetPCLK1Freq>
 8005d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4a81      	ldr	r2, [pc, #516]	@ (8005f20 <HAL_I2C_Init+0x274>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d807      	bhi.n	8005d30 <HAL_I2C_Init+0x84>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a80      	ldr	r2, [pc, #512]	@ (8005f24 <HAL_I2C_Init+0x278>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	bf94      	ite	ls
 8005d28:	2301      	movls	r3, #1
 8005d2a:	2300      	movhi	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	e006      	b.n	8005d3e <HAL_I2C_Init+0x92>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4a7d      	ldr	r2, [pc, #500]	@ (8005f28 <HAL_I2C_Init+0x27c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	bf94      	ite	ls
 8005d38:	2301      	movls	r3, #1
 8005d3a:	2300      	movhi	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e0e7      	b.n	8005f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4a78      	ldr	r2, [pc, #480]	@ (8005f2c <HAL_I2C_Init+0x280>)
 8005d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4e:	0c9b      	lsrs	r3, r3, #18
 8005d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4a6a      	ldr	r2, [pc, #424]	@ (8005f20 <HAL_I2C_Init+0x274>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d802      	bhi.n	8005d80 <HAL_I2C_Init+0xd4>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	e009      	b.n	8005d94 <HAL_I2C_Init+0xe8>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	4a69      	ldr	r2, [pc, #420]	@ (8005f30 <HAL_I2C_Init+0x284>)
 8005d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d90:	099b      	lsrs	r3, r3, #6
 8005d92:	3301      	adds	r3, #1
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005da6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	495c      	ldr	r1, [pc, #368]	@ (8005f20 <HAL_I2C_Init+0x274>)
 8005db0:	428b      	cmp	r3, r1
 8005db2:	d819      	bhi.n	8005de8 <HAL_I2C_Init+0x13c>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	1e59      	subs	r1, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dc2:	1c59      	adds	r1, r3, #1
 8005dc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005dc8:	400b      	ands	r3, r1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <HAL_I2C_Init+0x138>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1e59      	subs	r1, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de2:	e051      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005de4:	2304      	movs	r3, #4
 8005de6:	e04f      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d111      	bne.n	8005e14 <HAL_I2C_Init+0x168>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1e58      	subs	r0, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6859      	ldr	r1, [r3, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	440b      	add	r3, r1
 8005dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e02:	3301      	adds	r3, #1
 8005e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bf0c      	ite	eq
 8005e0c:	2301      	moveq	r3, #1
 8005e0e:	2300      	movne	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e012      	b.n	8005e3a <HAL_I2C_Init+0x18e>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1e58      	subs	r0, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6859      	ldr	r1, [r3, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	0099      	lsls	r1, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_I2C_Init+0x196>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e022      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10e      	bne.n	8005e68 <HAL_I2C_Init+0x1bc>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1e58      	subs	r0, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6859      	ldr	r1, [r3, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	440b      	add	r3, r1
 8005e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e66:	e00f      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	1e58      	subs	r0, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6859      	ldr	r1, [r3, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	0099      	lsls	r1, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e7e:	3301      	adds	r3, #1
 8005e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	6809      	ldr	r1, [r1, #0]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005eb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6911      	ldr	r1, [r2, #16]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68d2      	ldr	r2, [r2, #12]
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	000186a0 	.word	0x000186a0
 8005f24:	001e847f 	.word	0x001e847f
 8005f28:	003d08ff 	.word	0x003d08ff
 8005f2c:	431bde83 	.word	0x431bde83
 8005f30:	10624dd3 	.word	0x10624dd3

08005f34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e021      	b.n	8005f8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2224      	movs	r2, #36	@ 0x24
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0201 	bic.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fd fa24 	bl	80033ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	817b      	strh	r3, [r7, #10]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fa8:	f7fd fe6a 	bl	8003c80 <HAL_GetTick>
 8005fac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	f040 80e0 	bne.w	800617c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	2319      	movs	r3, #25
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4970      	ldr	r1, [pc, #448]	@ (8006188 <HAL_I2C_Master_Transmit+0x1f4>)
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fd86 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e0d3      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_I2C_Master_Transmit+0x50>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e0cc      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d007      	beq.n	800600a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0201 	orr.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006018:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2221      	movs	r2, #33	@ 0x21
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2210      	movs	r2, #16
 8006026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	893a      	ldrh	r2, [r7, #8]
 800603a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4a50      	ldr	r2, [pc, #320]	@ (800618c <HAL_I2C_Master_Transmit+0x1f8>)
 800604a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800604c:	8979      	ldrh	r1, [r7, #10]
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6a3a      	ldr	r2, [r7, #32]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fbf0 	bl	8006838 <I2C_MasterRequestWrite>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e08d      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006078:	e066      	b.n	8006148 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	6a39      	ldr	r1, [r7, #32]
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 fe00 	bl	8006c84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00d      	beq.n	80060a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608e:	2b04      	cmp	r3, #4
 8006090:	d107      	bne.n	80060a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e06b      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	781a      	ldrb	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d11b      	bne.n	800611c <HAL_I2C_Master_Transmit+0x188>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d017      	beq.n	800611c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	6a39      	ldr	r1, [r7, #32]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 fdf0 	bl	8006d06 <I2C_WaitOnBTFFlagUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00d      	beq.n	8006148 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006130:	2b04      	cmp	r3, #4
 8006132:	d107      	bne.n	8006144 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006142:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e01a      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800614c:	2b00      	cmp	r3, #0
 800614e:	d194      	bne.n	800607a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800615e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e000      	b.n	800617e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	00100002 	.word	0x00100002
 800618c:	ffff0000 	.word	0xffff0000

08006190 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08c      	sub	sp, #48	@ 0x30
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	461a      	mov	r2, r3
 800619c:	460b      	mov	r3, r1
 800619e:	817b      	strh	r3, [r7, #10]
 80061a0:	4613      	mov	r3, r2
 80061a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061a4:	f7fd fd6c 	bl	8003c80 <HAL_GetTick>
 80061a8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	f040 820b 	bne.w	80065ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	2319      	movs	r3, #25
 80061be:	2201      	movs	r2, #1
 80061c0:	497c      	ldr	r1, [pc, #496]	@ (80063b4 <HAL_I2C_Master_Receive+0x224>)
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fc88 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
 80061d0:	e1fe      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_I2C_Master_Receive+0x50>
 80061dc:	2302      	movs	r3, #2
 80061de:	e1f7      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d007      	beq.n	8006206 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2222      	movs	r2, #34	@ 0x22
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2210      	movs	r2, #16
 8006222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	893a      	ldrh	r2, [r7, #8]
 8006236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4a5c      	ldr	r2, [pc, #368]	@ (80063b8 <HAL_I2C_Master_Receive+0x228>)
 8006246:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006248:	8979      	ldrh	r1, [r7, #10]
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fb74 	bl	800693c <I2C_MasterRequestRead>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e1b8      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	d113      	bne.n	800628e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006266:	2300      	movs	r3, #0
 8006268:	623b      	str	r3, [r7, #32]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	623b      	str	r3, [r7, #32]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	623b      	str	r3, [r7, #32]
 800627a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	e18c      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006292:	2b01      	cmp	r3, #1
 8006294:	d11b      	bne.n	80062ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	61fb      	str	r3, [r7, #28]
 80062ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	e16c      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d11b      	bne.n	800630e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f6:	2300      	movs	r3, #0
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	e14c      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800631c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006334:	e138      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633a:	2b03      	cmp	r3, #3
 800633c:	f200 80f1 	bhi.w	8006522 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006344:	2b01      	cmp	r3, #1
 8006346:	d123      	bne.n	8006390 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800634a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fd1b 	bl	8006d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e139      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800638e:	e10b      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006394:	2b02      	cmp	r3, #2
 8006396:	d14e      	bne.n	8006436 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	2200      	movs	r2, #0
 80063a0:	4906      	ldr	r1, [pc, #24]	@ (80063bc <HAL_I2C_Master_Receive+0x22c>)
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fb98 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d008      	beq.n	80063c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e10e      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
 80063b2:	bf00      	nop
 80063b4:	00100002 	.word	0x00100002
 80063b8:	ffff0000 	.word	0xffff0000
 80063bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006434:	e0b8      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	2200      	movs	r2, #0
 800643e:	4966      	ldr	r1, [pc, #408]	@ (80065d8 <HAL_I2C_Master_Receive+0x448>)
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fb49 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e0bf      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800645e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	2200      	movs	r2, #0
 800649a:	494f      	ldr	r1, [pc, #316]	@ (80065d8 <HAL_I2C_Master_Receive+0x448>)
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fb1b 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e091      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006520:	e042      	b.n	80065a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006524:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fc2e 	bl	8006d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e04c      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d118      	bne.n	80065a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006592:	3b01      	subs	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f47f aec2 	bne.w	8006336 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e000      	b.n	80065d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80065ce:	2302      	movs	r3, #2
  }
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3728      	adds	r7, #40	@ 0x28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	00010004 	.word	0x00010004

080065dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	@ 0x28
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	460b      	mov	r3, r1
 80065ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80065ec:	f7fd fb48 	bl	8003c80 <HAL_GetTick>
 80065f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b20      	cmp	r3, #32
 8006600:	f040 8111 	bne.w	8006826 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	2319      	movs	r3, #25
 800660a:	2201      	movs	r2, #1
 800660c:	4988      	ldr	r1, [pc, #544]	@ (8006830 <HAL_I2C_IsDeviceReady+0x254>)
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fa62 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800661a:	2302      	movs	r3, #2
 800661c:	e104      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_I2C_IsDeviceReady+0x50>
 8006628:	2302      	movs	r3, #2
 800662a:	e0fd      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d007      	beq.n	8006652 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2224      	movs	r2, #36	@ 0x24
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a70      	ldr	r2, [pc, #448]	@ (8006834 <HAL_I2C_IsDeviceReady+0x258>)
 8006674:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006684:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2200      	movs	r2, #0
 800668e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 fa20 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ac:	d103      	bne.n	80066b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066b4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e0b6      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066ba:	897b      	ldrh	r3, [r7, #10]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80066ca:	f7fd fad9 	bl	8003c80 <HAL_GetTick>
 80066ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b02      	cmp	r3, #2
 80066dc:	bf0c      	ite	eq
 80066de:	2301      	moveq	r3, #1
 80066e0:	2300      	movne	r3, #0
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066fe:	e025      	b.n	800674c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006700:	f7fd fabe 	bl	8003c80 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d302      	bcc.n	8006716 <HAL_I2C_IsDeviceReady+0x13a>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	22a0      	movs	r2, #160	@ 0xa0
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b02      	cmp	r3, #2
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800673e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2ba0      	cmp	r3, #160	@ 0xa0
 8006756:	d005      	beq.n	8006764 <HAL_I2C_IsDeviceReady+0x188>
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d102      	bne.n	8006764 <HAL_I2C_IsDeviceReady+0x188>
 800675e:	7dbb      	ldrb	r3, [r7, #22]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0cd      	beq.n	8006700 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b02      	cmp	r3, #2
 8006778:	d129      	bne.n	80067ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006788:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800678a:	2300      	movs	r3, #0
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	2319      	movs	r3, #25
 80067a6:	2201      	movs	r2, #1
 80067a8:	4921      	ldr	r1, [pc, #132]	@ (8006830 <HAL_I2C_IsDeviceReady+0x254>)
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f994 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e036      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e02c      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80067e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2319      	movs	r3, #25
 80067ee:	2201      	movs	r2, #1
 80067f0:	490f      	ldr	r1, [pc, #60]	@ (8006830 <HAL_I2C_IsDeviceReady+0x254>)
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f970 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e012      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	3301      	adds	r3, #1
 8006806:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	f4ff af32 	bcc.w	8006676 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006826:	2302      	movs	r3, #2
  }
}
 8006828:	4618      	mov	r0, r3
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	00100002 	.word	0x00100002
 8006834:	ffff0000 	.word	0xffff0000

08006838 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af02      	add	r7, sp, #8
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	460b      	mov	r3, r1
 8006846:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b08      	cmp	r3, #8
 8006852:	d006      	beq.n	8006862 <I2C_MasterRequestWrite+0x2a>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d003      	beq.n	8006862 <I2C_MasterRequestWrite+0x2a>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006860:	d108      	bne.n	8006874 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	e00b      	b.n	800688c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006878:	2b12      	cmp	r3, #18
 800687a:	d107      	bne.n	800688c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800688a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f91d 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b2:	d103      	bne.n	80068bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e035      	b.n	800692c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068c8:	d108      	bne.n	80068dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068ca:	897b      	ldrh	r3, [r7, #10]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80068d8:	611a      	str	r2, [r3, #16]
 80068da:	e01b      	b.n	8006914 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068dc:	897b      	ldrh	r3, [r7, #10]
 80068de:	11db      	asrs	r3, r3, #7
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 0306 	and.w	r3, r3, #6
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f063 030f 	orn	r3, r3, #15
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	490e      	ldr	r1, [pc, #56]	@ (8006934 <I2C_MasterRequestWrite+0xfc>)
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 f943 	bl	8006b86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e010      	b.n	800692c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800690a:	897b      	ldrh	r3, [r7, #10]
 800690c:	b2da      	uxtb	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	4907      	ldr	r1, [pc, #28]	@ (8006938 <I2C_MasterRequestWrite+0x100>)
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f933 	bl	8006b86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	00010008 	.word	0x00010008
 8006938:	00010002 	.word	0x00010002

0800693c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	607a      	str	r2, [r7, #4]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	460b      	mov	r3, r1
 800694a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006950:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006960:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b08      	cmp	r3, #8
 8006966:	d006      	beq.n	8006976 <I2C_MasterRequestRead+0x3a>
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d003      	beq.n	8006976 <I2C_MasterRequestRead+0x3a>
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006974:	d108      	bne.n	8006988 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e00b      	b.n	80069a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698c:	2b11      	cmp	r3, #17
 800698e:	d107      	bne.n	80069a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800699e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f893 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00d      	beq.n	80069d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c6:	d103      	bne.n	80069d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e079      	b.n	8006ac8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069dc:	d108      	bne.n	80069f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069de:	897b      	ldrh	r3, [r7, #10]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	611a      	str	r2, [r3, #16]
 80069ee:	e05f      	b.n	8006ab0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80069f0:	897b      	ldrh	r3, [r7, #10]
 80069f2:	11db      	asrs	r3, r3, #7
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f003 0306 	and.w	r3, r3, #6
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	f063 030f 	orn	r3, r3, #15
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4930      	ldr	r1, [pc, #192]	@ (8006ad0 <I2C_MasterRequestRead+0x194>)
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 f8b9 	bl	8006b86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e054      	b.n	8006ac8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a1e:	897b      	ldrh	r3, [r7, #10]
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	4929      	ldr	r1, [pc, #164]	@ (8006ad4 <I2C_MasterRequestRead+0x198>)
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f8a9 	bl	8006b86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e044      	b.n	8006ac8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	613b      	str	r3, [r7, #16]
 8006a52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f831 	bl	8006ad8 <I2C_WaitOnFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00d      	beq.n	8006a98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a8a:	d103      	bne.n	8006a94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a92:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e017      	b.n	8006ac8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a98:	897b      	ldrh	r3, [r7, #10]
 8006a9a:	11db      	asrs	r3, r3, #7
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0306 	and.w	r3, r3, #6
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f063 030e 	orn	r3, r3, #14
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	4907      	ldr	r1, [pc, #28]	@ (8006ad4 <I2C_MasterRequestRead+0x198>)
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f865 	bl	8006b86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	00010008 	.word	0x00010008
 8006ad4:	00010002 	.word	0x00010002

08006ad8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ae8:	e025      	b.n	8006b36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d021      	beq.n	8006b36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af2:	f7fd f8c5 	bl	8003c80 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d302      	bcc.n	8006b08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d116      	bne.n	8006b36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e023      	b.n	8006b7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	0c1b      	lsrs	r3, r3, #16
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10d      	bne.n	8006b5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	43da      	mvns	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bf0c      	ite	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	2300      	movne	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	e00c      	b.n	8006b76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	43da      	mvns	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bf0c      	ite	eq
 8006b6e:	2301      	moveq	r3, #1
 8006b70:	2300      	movne	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d0b6      	beq.n	8006aea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b94:	e051      	b.n	8006c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba4:	d123      	bne.n	8006bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bda:	f043 0204 	orr.w	r2, r3, #4
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e046      	b.n	8006c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d021      	beq.n	8006c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf6:	f7fd f843 	bl	8003c80 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d302      	bcc.n	8006c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d116      	bne.n	8006c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c26:	f043 0220 	orr.w	r2, r3, #32
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e020      	b.n	8006c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	0c1b      	lsrs	r3, r3, #16
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d10c      	bne.n	8006c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	43da      	mvns	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	bf14      	ite	ne
 8006c56:	2301      	movne	r3, #1
 8006c58:	2300      	moveq	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	e00b      	b.n	8006c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	43da      	mvns	r2, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d18d      	bne.n	8006b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c90:	e02d      	b.n	8006cee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f8ce 	bl	8006e34 <I2C_IsAcknowledgeFailed>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e02d      	b.n	8006cfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d021      	beq.n	8006cee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006caa:	f7fc ffe9 	bl	8003c80 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d302      	bcc.n	8006cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d116      	bne.n	8006cee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e007      	b.n	8006cfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf8:	2b80      	cmp	r3, #128	@ 0x80
 8006cfa:	d1ca      	bne.n	8006c92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d12:	e02d      	b.n	8006d70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f88d 	bl	8006e34 <I2C_IsAcknowledgeFailed>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e02d      	b.n	8006d80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2a:	d021      	beq.n	8006d70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2c:	f7fc ffa8 	bl	8003c80 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d302      	bcc.n	8006d42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d116      	bne.n	8006d70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5c:	f043 0220 	orr.w	r2, r3, #32
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e007      	b.n	8006d80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	f003 0304 	and.w	r3, r3, #4
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d1ca      	bne.n	8006d14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d94:	e042      	b.n	8006e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d119      	bne.n	8006dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0210 	mvn.w	r2, #16
 8006dac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e029      	b.n	8006e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd8:	f7fc ff52 	bl	8003c80 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d302      	bcc.n	8006dee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d116      	bne.n	8006e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e08:	f043 0220 	orr.w	r2, r3, #32
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e007      	b.n	8006e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e26:	2b40      	cmp	r3, #64	@ 0x40
 8006e28:	d1b5      	bne.n	8006d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e4a:	d11b      	bne.n	8006e84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e70:	f043 0204 	orr.w	r2, r3, #4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e94:	b08f      	sub	sp, #60	@ 0x3c
 8006e96:	af0a      	add	r7, sp, #40	@ 0x28
 8006e98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e10f      	b.n	80070c4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f014 fb28 	bl	801b514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f006 fc45 	bl	800d772 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	603b      	str	r3, [r7, #0]
 8006eee:	687e      	ldr	r6, [r7, #4]
 8006ef0:	466d      	mov	r5, sp
 8006ef2:	f106 0410 	add.w	r4, r6, #16
 8006ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006efe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f02:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f06:	1d33      	adds	r3, r6, #4
 8006f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f0a:	6838      	ldr	r0, [r7, #0]
 8006f0c:	f006 fb1c 	bl	800d548 <USB_CoreInit>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e0d0      	b.n	80070c4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2100      	movs	r1, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f006 fc33 	bl	800d794 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
 8006f32:	e04a      	b.n	8006fca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f34:	7bfa      	ldrb	r2, [r7, #15]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	333d      	adds	r3, #61	@ 0x3d
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006f48:	7bfa      	ldrb	r2, [r7, #15]
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	333c      	adds	r3, #60	@ 0x3c
 8006f58:	7bfa      	ldrb	r2, [r7, #15]
 8006f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006f5c:	7bfa      	ldrb	r2, [r7, #15]
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	b298      	uxth	r0, r3
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	4613      	mov	r3, r2
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	3344      	adds	r3, #68	@ 0x44
 8006f70:	4602      	mov	r2, r0
 8006f72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f74:	7bfa      	ldrb	r2, [r7, #15]
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	3340      	adds	r3, #64	@ 0x40
 8006f84:	2200      	movs	r2, #0
 8006f86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f88:	7bfa      	ldrb	r2, [r7, #15]
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4413      	add	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	3348      	adds	r3, #72	@ 0x48
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f9c:	7bfa      	ldrb	r2, [r7, #15]
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	334c      	adds	r3, #76	@ 0x4c
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006fb0:	7bfa      	ldrb	r2, [r7, #15]
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	3354      	adds	r3, #84	@ 0x54
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	73fb      	strb	r3, [r7, #15]
 8006fca:	7bfa      	ldrb	r2, [r7, #15]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d3af      	bcc.n	8006f34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73fb      	strb	r3, [r7, #15]
 8006fd8:	e044      	b.n	8007064 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006fda:	7bfa      	ldrb	r2, [r7, #15]
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	00db      	lsls	r3, r3, #3
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ff0:	7bfa      	ldrb	r2, [r7, #15]
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	4413      	add	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8007002:	7bfa      	ldrb	r2, [r7, #15]
 8007004:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007006:	7bfa      	ldrb	r2, [r7, #15]
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8007018:	2200      	movs	r2, #0
 800701a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800701c:	7bfa      	ldrb	r2, [r7, #15]
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007032:	7bfa      	ldrb	r2, [r7, #15]
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	4613      	mov	r3, r2
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007048:	7bfa      	ldrb	r2, [r7, #15]
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	4613      	mov	r3, r2
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	440b      	add	r3, r1
 8007056:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	3301      	adds	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
 8007064:	7bfa      	ldrb	r2, [r7, #15]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	429a      	cmp	r2, r3
 800706c:	d3b5      	bcc.n	8006fda <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	687e      	ldr	r6, [r7, #4]
 8007076:	466d      	mov	r5, sp
 8007078:	f106 0410 	add.w	r4, r6, #16
 800707c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800707e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007084:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007088:	e885 0003 	stmia.w	r5, {r0, r1}
 800708c:	1d33      	adds	r3, r6, #4
 800708e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007090:	6838      	ldr	r0, [r7, #0]
 8007092:	f006 fbcb 	bl	800d82c <USB_DevInit>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e00d      	b.n	80070c4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f007 fd69 	bl	800eb94 <USB_DevDisconnect>

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070cc <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e015      	b.n	800710a <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2203      	movs	r2, #3
 80070e2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f007 fcbc 	bl	800ea68 <USB_StopDevice>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e007      	b.n	800710a <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f014 fa5e 	bl	801b5bc <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_PCD_Start+0x1c>
 800712a:	2302      	movs	r3, #2
 800712c:	e020      	b.n	8007170 <HAL_PCD_Start+0x5e>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713a:	2b01      	cmp	r3, #1
 800713c:	d109      	bne.n	8007152 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007142:	2b01      	cmp	r3, #1
 8007144:	d005      	beq.n	8007152 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f006 fafa 	bl	800d750 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4618      	mov	r0, r3
 8007162:	f007 fcf6 	bl	800eb52 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800718c:	2b01      	cmp	r3, #1
 800718e:	d101      	bne.n	8007194 <HAL_PCD_Stop+0x1c>
 8007190:	2302      	movs	r3, #2
 8007192:	e026      	b.n	80071e2 <HAL_PCD_Stop+0x6a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f006 fae6 	bl	800d772 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f007 fcf2 	bl	800eb94 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2110      	movs	r1, #16
 80071b6:	4618      	mov	r0, r3
 80071b8:	f006 fc9c 	bl	800daf4 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d109      	bne.n	80071d8 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d005      	beq.n	80071d8 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80071ea:	b590      	push	{r4, r7, lr}
 80071ec:	b08d      	sub	sp, #52	@ 0x34
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4618      	mov	r0, r3
 8007202:	f007 fd7b 	bl	800ecfc <USB_GetMode>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	f040 848a 	bne.w	8007b22 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f007 fcdf 	bl	800ebd6 <USB_ReadInterrupts>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8480 	beq.w	8007b20 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	0a1b      	lsrs	r3, r3, #8
 800722a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f007 fccc 	bl	800ebd6 <USB_ReadInterrupts>
 800723e:	4603      	mov	r3, r0
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b02      	cmp	r3, #2
 8007246:	d107      	bne.n	8007258 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695a      	ldr	r2, [r3, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f002 0202 	and.w	r2, r2, #2
 8007256:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f007 fcba 	bl	800ebd6 <USB_ReadInterrupts>
 8007262:	4603      	mov	r3, r0
 8007264:	f003 0310 	and.w	r3, r3, #16
 8007268:	2b10      	cmp	r3, #16
 800726a:	d161      	bne.n	8007330 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0210 	bic.w	r2, r2, #16
 800727a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	f003 020f 	and.w	r2, r3, #15
 8007288:	4613      	mov	r3, r2
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	4413      	add	r3, r2
 8007298:	3304      	adds	r3, #4
 800729a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	0c5b      	lsrs	r3, r3, #17
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d124      	bne.n	80072f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80072ae:	4013      	ands	r3, r2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d035      	beq.n	8007320 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	091b      	lsrs	r3, r3, #4
 80072bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	6a38      	ldr	r0, [r7, #32]
 80072c8:	f007 faa2 	bl	800e810 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	091b      	lsrs	r3, r3, #4
 80072d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072d8:	441a      	add	r2, r3
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	6a1a      	ldr	r2, [r3, #32]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	091b      	lsrs	r3, r3, #4
 80072e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072ea:	441a      	add	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	621a      	str	r2, [r3, #32]
 80072f0:	e016      	b.n	8007320 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	0c5b      	lsrs	r3, r3, #17
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	2b06      	cmp	r3, #6
 80072fc:	d110      	bne.n	8007320 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007304:	2208      	movs	r2, #8
 8007306:	4619      	mov	r1, r3
 8007308:	6a38      	ldr	r0, [r7, #32]
 800730a:	f007 fa81 	bl	800e810 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	6a1a      	ldr	r2, [r3, #32]
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	091b      	lsrs	r3, r3, #4
 8007316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800731a:	441a      	add	r2, r3
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0210 	orr.w	r2, r2, #16
 800732e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f007 fc4e 	bl	800ebd6 <USB_ReadInterrupts>
 800733a:	4603      	mov	r3, r0
 800733c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007340:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007344:	f040 80a7 	bne.w	8007496 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4618      	mov	r0, r3
 8007352:	f007 fc53 	bl	800ebfc <USB_ReadDevAllOutEpInterrupt>
 8007356:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007358:	e099      	b.n	800748e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800735a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 808e 	beq.w	8007482 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	4611      	mov	r1, r2
 8007370:	4618      	mov	r0, r3
 8007372:	f007 fc77 	bl	800ec64 <USB_ReadDevOutEPInterrupt>
 8007376:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00c      	beq.n	800739c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800738e:	461a      	mov	r2, r3
 8007390:	2301      	movs	r3, #1
 8007392:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fef0 	bl	800817c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00c      	beq.n	80073c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b2:	461a      	mov	r2, r3
 80073b4:	2308      	movs	r3, #8
 80073b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80073b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 ffc6 	bl	800834c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f003 0310 	and.w	r3, r3, #16
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d008      	beq.n	80073dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d6:	461a      	mov	r2, r3
 80073d8:	2310      	movs	r3, #16
 80073da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d030      	beq.n	8007448 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ee:	2b80      	cmp	r3, #128	@ 0x80
 80073f0:	d109      	bne.n	8007406 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007400:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007404:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007408:	4613      	mov	r3, r2
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	4413      	add	r3, r2
 8007418:	3304      	adds	r3, #4
 800741a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	78db      	ldrb	r3, [r3, #3]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d108      	bne.n	8007436 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2200      	movs	r2, #0
 8007428:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	b2db      	uxtb	r3, r3
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f014 f995 	bl	801b760 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007442:	461a      	mov	r2, r3
 8007444:	2302      	movs	r3, #2
 8007446:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d008      	beq.n	8007464 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745e:	461a      	mov	r2, r3
 8007460:	2320      	movs	r3, #32
 8007462:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800747a:	461a      	mov	r2, r3
 800747c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007480:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	3301      	adds	r3, #1
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	2b00      	cmp	r3, #0
 8007492:	f47f af62 	bne.w	800735a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f007 fb9b 	bl	800ebd6 <USB_ReadInterrupts>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074aa:	f040 80db 	bne.w	8007664 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f007 fbbc 	bl	800ec30 <USB_ReadDevAllInEpInterrupt>
 80074b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80074be:	e0cd      	b.n	800765c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80074c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 80c2 	beq.w	8007650 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	4611      	mov	r1, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f007 fbe2 	bl	800eca0 <USB_ReadDevInEPInterrupt>
 80074dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d057      	beq.n	8007598 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80074e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ea:	f003 030f 	and.w	r3, r3, #15
 80074ee:	2201      	movs	r2, #1
 80074f0:	fa02 f303 	lsl.w	r3, r2, r3
 80074f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	43db      	mvns	r3, r3
 8007502:	69f9      	ldr	r1, [r7, #28]
 8007504:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007508:	4013      	ands	r3, r2
 800750a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007518:	461a      	mov	r2, r3
 800751a:	2301      	movs	r3, #1
 800751c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d132      	bne.n	800758c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800752a:	4613      	mov	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	334c      	adds	r3, #76	@ 0x4c
 8007536:	6819      	ldr	r1, [r3, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800753c:	4613      	mov	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4403      	add	r3, r0
 8007546:	3348      	adds	r3, #72	@ 0x48
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4419      	add	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007550:	4613      	mov	r3, r2
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4403      	add	r3, r0
 800755a:	334c      	adds	r3, #76	@ 0x4c
 800755c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	2b00      	cmp	r3, #0
 8007562:	d113      	bne.n	800758c <HAL_PCD_IRQHandler+0x3a2>
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	3354      	adds	r3, #84	@ 0x54
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d108      	bne.n	800758c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007584:	461a      	mov	r2, r3
 8007586:	2101      	movs	r1, #1
 8007588:	f007 fbea 	bl	800ed60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f014 f85f 	bl	801b656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ae:	461a      	mov	r2, r3
 80075b0:	2308      	movs	r3, #8
 80075b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d008      	beq.n	80075d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ca:	461a      	mov	r2, r3
 80075cc:	2310      	movs	r3, #16
 80075ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e6:	461a      	mov	r2, r3
 80075e8:	2340      	movs	r3, #64	@ 0x40
 80075ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d023      	beq.n	800763e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80075f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075f8:	6a38      	ldr	r0, [r7, #32]
 80075fa:	f006 fa7b 	bl	800daf4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80075fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007600:	4613      	mov	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	3338      	adds	r3, #56	@ 0x38
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	3304      	adds	r3, #4
 8007610:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	78db      	ldrb	r3, [r3, #3]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d108      	bne.n	800762c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2200      	movs	r2, #0
 800761e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	b2db      	uxtb	r3, r3
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f014 f8ac 	bl	801b784 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007638:	461a      	mov	r2, r3
 800763a:	2302      	movs	r3, #2
 800763c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007648:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fd08 	bl	8008060 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	3301      	adds	r3, #1
 8007654:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007658:	085b      	lsrs	r3, r3, #1
 800765a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800765c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765e:	2b00      	cmp	r3, #0
 8007660:	f47f af2e 	bne.w	80074c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4618      	mov	r0, r3
 800766a:	f007 fab4 	bl	800ebd6 <USB_ReadInterrupts>
 800766e:	4603      	mov	r3, r0
 8007670:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007674:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007678:	d122      	bne.n	80076c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007688:	f023 0301 	bic.w	r3, r3, #1
 800768c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8007694:	2b01      	cmp	r3, #1
 8007696:	d108      	bne.n	80076aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80076a0:	2100      	movs	r1, #0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fef0 	bl	8008488 <HAL_PCDEx_LPM_Callback>
 80076a8:	e002      	b.n	80076b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f014 f84a 	bl	801b744 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695a      	ldr	r2, [r3, #20]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80076be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f007 fa86 	bl	800ebd6 <USB_ReadInterrupts>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076d4:	d112      	bne.n	80076fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d102      	bne.n	80076ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f014 f806 	bl	801b6f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695a      	ldr	r2, [r3, #20]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80076fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4618      	mov	r0, r3
 8007702:	f007 fa68 	bl	800ebd6 <USB_ReadInterrupts>
 8007706:	4603      	mov	r3, r0
 8007708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800770c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007710:	f040 80b7 	bne.w	8007882 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007722:	f023 0301 	bic.w	r3, r3, #1
 8007726:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2110      	movs	r1, #16
 800772e:	4618      	mov	r0, r3
 8007730:	f006 f9e0 	bl	800daf4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007734:	2300      	movs	r3, #0
 8007736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007738:	e046      	b.n	80077c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800773a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007746:	461a      	mov	r2, r3
 8007748:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800774c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800774e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007768:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800776c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800776e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777a:	461a      	mov	r2, r3
 800777c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007780:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007792:	0151      	lsls	r1, r2, #5
 8007794:	69fa      	ldr	r2, [r7, #28]
 8007796:	440a      	add	r2, r1
 8007798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800779c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077b2:	0151      	lsls	r1, r2, #5
 80077b4:	69fa      	ldr	r2, [r7, #28]
 80077b6:	440a      	add	r2, r1
 80077b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c4:	3301      	adds	r3, #1
 80077c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3b3      	bcc.n	800773a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077e0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80077e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d016      	beq.n	800781c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077fe:	f043 030b 	orr.w	r3, r3, #11
 8007802:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800780c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780e:	69fa      	ldr	r2, [r7, #28]
 8007810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007814:	f043 030b 	orr.w	r3, r3, #11
 8007818:	6453      	str	r3, [r2, #68]	@ 0x44
 800781a:	e015      	b.n	8007848 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	69fa      	ldr	r2, [r7, #28]
 8007826:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800782a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800782e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007832:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007842:	f043 030b 	orr.w	r3, r3, #11
 8007846:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007856:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800785a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800786c:	461a      	mov	r2, r3
 800786e:	f007 fa77 	bl	800ed60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	695a      	ldr	r2, [r3, #20]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f007 f9a5 	bl	800ebd6 <USB_ReadInterrupts>
 800788c:	4603      	mov	r3, r0
 800788e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007896:	d124      	bne.n	80078e2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f007 fa3b 	bl	800ed18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f006 f9a1 	bl	800dbee <USB_GetDevSpeed>
 80078ac:	4603      	mov	r3, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681c      	ldr	r4, [r3, #0]
 80078b8:	f001 fa42 	bl	8008d40 <HAL_RCC_GetHCLKFreq>
 80078bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	4620      	mov	r0, r4
 80078c8:	f005 fea0 	bl	800d60c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f013 feea 	bl	801b6a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695a      	ldr	r2, [r3, #20]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80078e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f007 f975 	bl	800ebd6 <USB_ReadInterrupts>
 80078ec:	4603      	mov	r3, r0
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d10a      	bne.n	800790c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f013 fec7 	bl	801b68a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	695a      	ldr	r2, [r3, #20]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f002 0208 	and.w	r2, r2, #8
 800790a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4618      	mov	r0, r3
 8007912:	f007 f960 	bl	800ebd6 <USB_ReadInterrupts>
 8007916:	4603      	mov	r3, r0
 8007918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800791c:	2b80      	cmp	r3, #128	@ 0x80
 800791e:	d122      	bne.n	8007966 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800792c:	2301      	movs	r3, #1
 800792e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007930:	e014      	b.n	800795c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007936:	4613      	mov	r3, r2
 8007938:	00db      	lsls	r3, r3, #3
 800793a:	4413      	add	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d105      	bne.n	8007956 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	b2db      	uxtb	r3, r3
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fb27 	bl	8007fa4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	3301      	adds	r3, #1
 800795a:	627b      	str	r3, [r7, #36]	@ 0x24
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007962:	429a      	cmp	r2, r3
 8007964:	d3e5      	bcc.n	8007932 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4618      	mov	r0, r3
 800796c:	f007 f933 	bl	800ebd6 <USB_ReadInterrupts>
 8007970:	4603      	mov	r3, r0
 8007972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800797a:	d13b      	bne.n	80079f4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800797c:	2301      	movs	r3, #1
 800797e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007980:	e02b      	b.n	80079da <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007996:	4613      	mov	r3, r2
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	440b      	add	r3, r1
 80079a0:	3340      	adds	r3, #64	@ 0x40
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d115      	bne.n	80079d4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80079a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da12      	bge.n	80079d4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079b2:	4613      	mov	r3, r2
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	333f      	adds	r3, #63	@ 0x3f
 80079be:	2201      	movs	r2, #1
 80079c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fae8 	bl	8007fa4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	3301      	adds	r3, #1
 80079d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d3ce      	bcc.n	8007982 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695a      	ldr	r2, [r3, #20]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80079f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f007 f8ec 	bl	800ebd6 <USB_ReadInterrupts>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a08:	d155      	bne.n	8007ab6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a0e:	e045      	b.n	8007a9c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a24:	4613      	mov	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d12e      	bne.n	8007a96 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	da2b      	bge.n	8007a96 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8007a4a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d121      	bne.n	8007a96 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a56:	4613      	mov	r3, r2
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	440b      	add	r3, r1
 8007a60:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007a64:	2201      	movs	r2, #1
 8007a66:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a92:	6053      	str	r3, [r2, #4]
            break;
 8007a94:	e007      	b.n	8007aa6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a98:	3301      	adds	r3, #1
 8007a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d3b4      	bcc.n	8007a10 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	695a      	ldr	r2, [r3, #20]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f007 f88b 	bl	800ebd6 <USB_ReadInterrupts>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aca:	d10a      	bne.n	8007ae2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f013 fe6b 	bl	801b7a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695a      	ldr	r2, [r3, #20]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f007 f875 	bl	800ebd6 <USB_ReadInterrupts>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d115      	bne.n	8007b22 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f013 fe5b 	bl	801b7c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	605a      	str	r2, [r3, #4]
 8007b1e:	e000      	b.n	8007b22 <HAL_PCD_IRQHandler+0x938>
      return;
 8007b20:	bf00      	nop
    }
  }
}
 8007b22:	3734      	adds	r7, #52	@ 0x34
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd90      	pop	{r4, r7, pc}

08007b28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d101      	bne.n	8007b42 <HAL_PCD_SetAddress+0x1a>
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e013      	b.n	8007b6a <HAL_PCD_SetAddress+0x42>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	78fa      	ldrb	r2, [r7, #3]
 8007b4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f006 ffd3 	bl	800eb06 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	461a      	mov	r2, r3
 8007b80:	4603      	mov	r3, r0
 8007b82:	70fb      	strb	r3, [r7, #3]
 8007b84:	460b      	mov	r3, r1
 8007b86:	803b      	strh	r3, [r7, #0]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da0f      	bge.n	8007bb8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	f003 020f 	and.w	r2, r3, #15
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	3338      	adds	r3, #56	@ 0x38
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	4413      	add	r3, r2
 8007bac:	3304      	adds	r3, #4
 8007bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	705a      	strb	r2, [r3, #1]
 8007bb6:	e00f      	b.n	8007bd8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	f003 020f 	and.w	r2, r3, #15
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	3304      	adds	r3, #4
 8007bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007be4:	883a      	ldrh	r2, [r7, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	78ba      	ldrb	r2, [r7, #2]
 8007bee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	785b      	ldrb	r3, [r3, #1]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d004      	beq.n	8007c02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c02:	78bb      	ldrb	r3, [r7, #2]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d102      	bne.n	8007c0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_PCD_EP_Open+0xaa>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e00e      	b.n	8007c3a <HAL_PCD_EP_Open+0xc8>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68f9      	ldr	r1, [r7, #12]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f006 f804 	bl	800dc38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8007c38:	7afb      	ldrb	r3, [r7, #11]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	da0f      	bge.n	8007c76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	f003 020f 	and.w	r2, r3, #15
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	3338      	adds	r3, #56	@ 0x38
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	4413      	add	r3, r2
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	705a      	strb	r2, [r3, #1]
 8007c74:	e00f      	b.n	8007c96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	f003 020f 	and.w	r2, r3, #15
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_PCD_EP_Close+0x6e>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e00e      	b.n	8007cce <HAL_PCD_EP_Close+0x8c>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68f9      	ldr	r1, [r7, #12]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f006 f842 	bl	800dd48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ce6:	7afb      	ldrb	r3, [r7, #11]
 8007ce8:	f003 020f 	and.w	r2, r3, #15
 8007cec:	4613      	mov	r3, r2
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2200      	movs	r2, #0
 8007d16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d18:	7afb      	ldrb	r3, [r7, #11]
 8007d1a:	f003 030f 	and.w	r3, r3, #15
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d102      	bne.n	8007d32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d109      	bne.n	8007d50 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	6979      	ldr	r1, [r7, #20]
 8007d4a:	f006 fb21 	bl	800e390 <USB_EP0StartXfer>
 8007d4e:	e008      	b.n	8007d62 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6818      	ldr	r0, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	6979      	ldr	r1, [r7, #20]
 8007d5e:	f006 f8cf 	bl	800df00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	f003 020f 	and.w	r2, r3, #15
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	4613      	mov	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8007d8e:	681b      	ldr	r3, [r3, #0]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	607a      	str	r2, [r7, #4]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	460b      	mov	r3, r1
 8007daa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dac:	7afb      	ldrb	r3, [r7, #11]
 8007dae:	f003 020f 	and.w	r2, r3, #15
 8007db2:	4613      	mov	r3, r2
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	4413      	add	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	3338      	adds	r3, #56	@ 0x38
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d102      	bne.n	8007df6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007df6:	7afb      	ldrb	r3, [r7, #11]
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d109      	bne.n	8007e14 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6979      	ldr	r1, [r7, #20]
 8007e0e:	f006 fabf 	bl	800e390 <USB_EP0StartXfer>
 8007e12:	e008      	b.n	8007e26 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	461a      	mov	r2, r3
 8007e20:	6979      	ldr	r1, [r7, #20]
 8007e22:	f006 f86d 	bl	800df00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	f003 020f 	and.w	r2, r3, #15
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d901      	bls.n	8007e4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e050      	b.n	8007ef0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da0f      	bge.n	8007e76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	f003 020f 	and.w	r2, r3, #15
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	3338      	adds	r3, #56	@ 0x38
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	4413      	add	r3, r2
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	705a      	strb	r2, [r3, #1]
 8007e74:	e00d      	b.n	8007e92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	4413      	add	r3, r2
 8007e88:	3304      	adds	r3, #4
 8007e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d101      	bne.n	8007eb2 <HAL_PCD_EP_SetStall+0x82>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e01e      	b.n	8007ef0 <HAL_PCD_EP_SetStall+0xc0>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68f9      	ldr	r1, [r7, #12]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f006 fcfd 	bl	800e8c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	b2d9      	uxtb	r1, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f006 ff3d 	bl	800ed60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	f003 020f 	and.w	r2, r3, #15
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d901      	bls.n	8007f16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e042      	b.n	8007f9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da0f      	bge.n	8007f3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	f003 020f 	and.w	r2, r3, #15
 8007f24:	4613      	mov	r3, r2
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	3338      	adds	r3, #56	@ 0x38
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	4413      	add	r3, r2
 8007f32:	3304      	adds	r3, #4
 8007f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	705a      	strb	r2, [r3, #1]
 8007f3c:	e00f      	b.n	8007f5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	f003 020f 	and.w	r2, r3, #15
 8007f44:	4613      	mov	r3, r2
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	4413      	add	r3, r2
 8007f54:	3304      	adds	r3, #4
 8007f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <HAL_PCD_EP_ClrStall+0x86>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e00e      	b.n	8007f9c <HAL_PCD_EP_ClrStall+0xa4>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68f9      	ldr	r1, [r7, #12]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f006 fd05 	bl	800e99c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	da0c      	bge.n	8007fd2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	f003 020f 	and.w	r2, r3, #15
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	3338      	adds	r3, #56	@ 0x38
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4413      	add	r3, r2
 8007fcc:	3304      	adds	r3, #4
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e00c      	b.n	8007fec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fd2:	78fb      	ldrb	r3, [r7, #3]
 8007fd4:	f003 020f 	and.w	r2, r3, #15
 8007fd8:	4613      	mov	r3, r2
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	3304      	adds	r3, #4
 8007fea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68f9      	ldr	r1, [r7, #12]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f006 fb24 	bl	800e640 <USB_EPStopXfer>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007ffc:	7afb      	ldrb	r3, [r7, #11]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	460b      	mov	r3, r1
 8008010:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_PCD_EP_Flush+0x1a>
 800801c:	2302      	movs	r3, #2
 800801e:	e01b      	b.n	8008058 <HAL_PCD_EP_Flush+0x52>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8008028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800802c:	2b00      	cmp	r3, #0
 800802e:	da09      	bge.n	8008044 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	4619      	mov	r1, r3
 800803c:	4610      	mov	r0, r2
 800803e:	f005 fd59 	bl	800daf4 <USB_FlushTxFifo>
 8008042:	e004      	b.n	800804e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4618      	mov	r0, r3
 800804a:	f005 fd87 	bl	800db5c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	@ 0x28
 8008064:	af02      	add	r7, sp, #8
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	4613      	mov	r3, r2
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	3338      	adds	r3, #56	@ 0x38
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	3304      	adds	r3, #4
 8008086:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1a      	ldr	r2, [r3, #32]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	429a      	cmp	r2, r3
 8008092:	d901      	bls.n	8008098 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e06c      	b.n	8008172 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	699a      	ldr	r2, [r3, #24]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d902      	bls.n	80080b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	3303      	adds	r3, #3
 80080b8:	089b      	lsrs	r3, r3, #2
 80080ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080bc:	e02b      	b.n	8008116 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d902      	bls.n	80080da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	3303      	adds	r3, #3
 80080de:	089b      	lsrs	r3, r3, #2
 80080e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6919      	ldr	r1, [r3, #16]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	4603      	mov	r3, r0
 80080f8:	6978      	ldr	r0, [r7, #20]
 80080fa:	f006 fb4b 	bl	800e794 <USB_WritePacket>

    ep->xfer_buff  += len;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	691a      	ldr	r2, [r3, #16]
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	441a      	add	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6a1a      	ldr	r2, [r3, #32]
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	441a      	add	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	429a      	cmp	r2, r3
 800812a:	d809      	bhi.n	8008140 <PCD_WriteEmptyTxFifo+0xe0>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1a      	ldr	r2, [r3, #32]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008134:	429a      	cmp	r2, r3
 8008136:	d203      	bcs.n	8008140 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1be      	bne.n	80080be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	699a      	ldr	r2, [r3, #24]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	429a      	cmp	r2, r3
 800814a:	d811      	bhi.n	8008170 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	f003 030f 	and.w	r3, r3, #15
 8008152:	2201      	movs	r2, #1
 8008154:	fa02 f303 	lsl.w	r3, r2, r3
 8008158:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	43db      	mvns	r3, r3
 8008166:	6939      	ldr	r1, [r7, #16]
 8008168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800816c:	4013      	ands	r3, r2
 800816e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3720      	adds	r7, #32
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b088      	sub	sp, #32
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	333c      	adds	r3, #60	@ 0x3c
 8008194:	3304      	adds	r3, #4
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d17b      	bne.n	80082aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d015      	beq.n	80081e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	4a61      	ldr	r2, [pc, #388]	@ (8008344 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	f240 80b9 	bls.w	8008338 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 80b3 	beq.w	8008338 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081de:	461a      	mov	r2, r3
 80081e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081e4:	6093      	str	r3, [r2, #8]
 80081e6:	e0a7      	b.n	8008338 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d009      	beq.n	8008206 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fe:	461a      	mov	r2, r3
 8008200:	2320      	movs	r3, #32
 8008202:	6093      	str	r3, [r2, #8]
 8008204:	e098      	b.n	8008338 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800820c:	2b00      	cmp	r3, #0
 800820e:	f040 8093 	bne.w	8008338 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	4a4b      	ldr	r2, [pc, #300]	@ (8008344 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d90f      	bls.n	800823a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00a      	beq.n	800823a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008230:	461a      	mov	r2, r3
 8008232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008236:	6093      	str	r3, [r2, #8]
 8008238:	e07e      	b.n	8008338 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	4613      	mov	r3, r2
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	4413      	add	r3, r2
 800824c:	3304      	adds	r3, #4
 800824e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	0159      	lsls	r1, r3, #5
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	440b      	add	r3, r1
 800825c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008266:	1ad2      	subs	r2, r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d114      	bne.n	800829c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d109      	bne.n	800828e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008284:	461a      	mov	r2, r3
 8008286:	2101      	movs	r1, #1
 8008288:	f006 fd6a 	bl	800ed60 <USB_EP0_OutStart>
 800828c:	e006      	b.n	800829c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	691a      	ldr	r2, [r3, #16]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	441a      	add	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f013 f9bc 	bl	801b620 <HAL_PCD_DataOutStageCallback>
 80082a8:	e046      	b.n	8008338 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	4a26      	ldr	r2, [pc, #152]	@ (8008348 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d124      	bne.n	80082fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082c8:	461a      	mov	r2, r3
 80082ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082ce:	6093      	str	r3, [r2, #8]
 80082d0:	e032      	b.n	8008338 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082e8:	461a      	mov	r2, r3
 80082ea:	2320      	movs	r3, #32
 80082ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f013 f993 	bl	801b620 <HAL_PCD_DataOutStageCallback>
 80082fa:	e01d      	b.n	8008338 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d114      	bne.n	800832c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	4613      	mov	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	440b      	add	r3, r1
 8008310:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d108      	bne.n	800832c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008324:	461a      	mov	r2, r3
 8008326:	2100      	movs	r1, #0
 8008328:	f006 fd1a 	bl	800ed60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	b2db      	uxtb	r3, r3
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f013 f974 	bl	801b620 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	4f54300a 	.word	0x4f54300a
 8008348:	4f54310a 	.word	0x4f54310a

0800834c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	333c      	adds	r3, #60	@ 0x3c
 8008364:	3304      	adds	r3, #4
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4a15      	ldr	r2, [pc, #84]	@ (80083d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d90e      	bls.n	80083a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008388:	2b00      	cmp	r3, #0
 800838a:	d009      	beq.n	80083a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008398:	461a      	mov	r2, r3
 800839a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800839e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f013 f92b 	bl	801b5fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4a0a      	ldr	r2, [pc, #40]	@ (80083d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d90c      	bls.n	80083c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d108      	bne.n	80083c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80083c0:	461a      	mov	r2, r3
 80083c2:	2101      	movs	r1, #1
 80083c4:	f006 fccc 	bl	800ed60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	4f54300a 	.word	0x4f54300a

080083d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
 80083e4:	4613      	mov	r3, r2
 80083e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d107      	bne.n	8008406 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80083f6:	883b      	ldrh	r3, [r7, #0]
 80083f8:	0419      	lsls	r1, r3, #16
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	430a      	orrs	r2, r1
 8008402:	629a      	str	r2, [r3, #40]	@ 0x28
 8008404:	e028      	b.n	8008458 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840c:	0c1b      	lsrs	r3, r3, #16
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	4413      	add	r3, r2
 8008412:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
 8008418:	e00d      	b.n	8008436 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	3340      	adds	r3, #64	@ 0x40
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	0c1b      	lsrs	r3, r3, #16
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	4413      	add	r3, r2
 800842e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	3301      	adds	r3, #1
 8008434:	73fb      	strb	r3, [r7, #15]
 8008436:	7bfa      	ldrb	r2, [r7, #15]
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	3b01      	subs	r3, #1
 800843c:	429a      	cmp	r2, r3
 800843e:	d3ec      	bcc.n	800841a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008440:	883b      	ldrh	r3, [r7, #0]
 8008442:	0418      	lsls	r0, r3, #16
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6819      	ldr	r1, [r3, #0]
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	3b01      	subs	r3, #1
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	4302      	orrs	r2, r0
 8008450:	3340      	adds	r3, #64	@ 0x40
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	460b      	mov	r3, r1
 8008470:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	887a      	ldrh	r2, [r7, #2]
 8008478:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80084ac:	4b10      	ldr	r3, [pc, #64]	@ (80084f0 <HAL_PWR_EnterSTOPMode+0x50>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f023 0203 	bic.w	r2, r3, #3
 80084b4:	490e      	ldr	r1, [pc, #56]	@ (80084f0 <HAL_PWR_EnterSTOPMode+0x50>)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80084bc:	4b0d      	ldr	r3, [pc, #52]	@ (80084f4 <HAL_PWR_EnterSTOPMode+0x54>)
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	4a0c      	ldr	r2, [pc, #48]	@ (80084f4 <HAL_PWR_EnterSTOPMode+0x54>)
 80084c2:	f043 0304 	orr.w	r3, r3, #4
 80084c6:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80084c8:	78fb      	ldrb	r3, [r7, #3]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80084ce:	bf30      	wfi
 80084d0:	e002      	b.n	80084d8 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80084d2:	bf40      	sev
    __WFE();
 80084d4:	bf20      	wfe
    __WFE();
 80084d6:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80084d8:	4b06      	ldr	r3, [pc, #24]	@ (80084f4 <HAL_PWR_EnterSTOPMode+0x54>)
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	4a05      	ldr	r2, [pc, #20]	@ (80084f4 <HAL_PWR_EnterSTOPMode+0x54>)
 80084de:	f023 0304 	bic.w	r3, r3, #4
 80084e2:	6113      	str	r3, [r2, #16]
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	40007000 	.word	0x40007000
 80084f4:	e000ed00 	.word	0xe000ed00

080084f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e267      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d075      	beq.n	8008602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008516:	4b88      	ldr	r3, [pc, #544]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f003 030c 	and.w	r3, r3, #12
 800851e:	2b04      	cmp	r3, #4
 8008520:	d00c      	beq.n	800853c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008522:	4b85      	ldr	r3, [pc, #532]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800852a:	2b08      	cmp	r3, #8
 800852c:	d112      	bne.n	8008554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800852e:	4b82      	ldr	r3, [pc, #520]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800853a:	d10b      	bne.n	8008554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800853c:	4b7e      	ldr	r3, [pc, #504]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d05b      	beq.n	8008600 <HAL_RCC_OscConfig+0x108>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d157      	bne.n	8008600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e242      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800855c:	d106      	bne.n	800856c <HAL_RCC_OscConfig+0x74>
 800855e:	4b76      	ldr	r3, [pc, #472]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a75      	ldr	r2, [pc, #468]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	e01d      	b.n	80085a8 <HAL_RCC_OscConfig+0xb0>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008574:	d10c      	bne.n	8008590 <HAL_RCC_OscConfig+0x98>
 8008576:	4b70      	ldr	r3, [pc, #448]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a6f      	ldr	r2, [pc, #444]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800857c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	4b6d      	ldr	r3, [pc, #436]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a6c      	ldr	r2, [pc, #432]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	e00b      	b.n	80085a8 <HAL_RCC_OscConfig+0xb0>
 8008590:	4b69      	ldr	r3, [pc, #420]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a68      	ldr	r2, [pc, #416]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	4b66      	ldr	r3, [pc, #408]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a65      	ldr	r2, [pc, #404]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 80085a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d013      	beq.n	80085d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085b0:	f7fb fb66 	bl	8003c80 <HAL_GetTick>
 80085b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085b8:	f7fb fb62 	bl	8003c80 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b64      	cmp	r3, #100	@ 0x64
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e207      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ca:	4b5b      	ldr	r3, [pc, #364]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0f0      	beq.n	80085b8 <HAL_RCC_OscConfig+0xc0>
 80085d6:	e014      	b.n	8008602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085d8:	f7fb fb52 	bl	8003c80 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085e0:	f7fb fb4e 	bl	8003c80 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b64      	cmp	r3, #100	@ 0x64
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e1f3      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085f2:	4b51      	ldr	r3, [pc, #324]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <HAL_RCC_OscConfig+0xe8>
 80085fe:	e000      	b.n	8008602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d063      	beq.n	80086d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800860e:	4b4a      	ldr	r3, [pc, #296]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f003 030c 	and.w	r3, r3, #12
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00b      	beq.n	8008632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800861a:	4b47      	ldr	r3, [pc, #284]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008622:	2b08      	cmp	r3, #8
 8008624:	d11c      	bne.n	8008660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008626:	4b44      	ldr	r3, [pc, #272]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d116      	bne.n	8008660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008632:	4b41      	ldr	r3, [pc, #260]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_RCC_OscConfig+0x152>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d001      	beq.n	800864a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e1c7      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800864a:	4b3b      	ldr	r3, [pc, #236]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	4937      	ldr	r1, [pc, #220]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800865a:	4313      	orrs	r3, r2
 800865c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800865e:	e03a      	b.n	80086d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d020      	beq.n	80086aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008668:	4b34      	ldr	r3, [pc, #208]	@ (800873c <HAL_RCC_OscConfig+0x244>)
 800866a:	2201      	movs	r2, #1
 800866c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866e:	f7fb fb07 	bl	8003c80 <HAL_GetTick>
 8008672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008674:	e008      	b.n	8008688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008676:	f7fb fb03 	bl	8003c80 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d901      	bls.n	8008688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e1a8      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008688:	4b2b      	ldr	r3, [pc, #172]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0302 	and.w	r3, r3, #2
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008694:	4b28      	ldr	r3, [pc, #160]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	4925      	ldr	r1, [pc, #148]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	600b      	str	r3, [r1, #0]
 80086a8:	e015      	b.n	80086d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086aa:	4b24      	ldr	r3, [pc, #144]	@ (800873c <HAL_RCC_OscConfig+0x244>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b0:	f7fb fae6 	bl	8003c80 <HAL_GetTick>
 80086b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086b6:	e008      	b.n	80086ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086b8:	f7fb fae2 	bl	8003c80 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e187      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1f0      	bne.n	80086b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d036      	beq.n	8008750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d016      	beq.n	8008718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086ea:	4b15      	ldr	r3, [pc, #84]	@ (8008740 <HAL_RCC_OscConfig+0x248>)
 80086ec:	2201      	movs	r2, #1
 80086ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f0:	f7fb fac6 	bl	8003c80 <HAL_GetTick>
 80086f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086f8:	f7fb fac2 	bl	8003c80 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e167      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800870a:	4b0b      	ldr	r3, [pc, #44]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800870c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0f0      	beq.n	80086f8 <HAL_RCC_OscConfig+0x200>
 8008716:	e01b      	b.n	8008750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008718:	4b09      	ldr	r3, [pc, #36]	@ (8008740 <HAL_RCC_OscConfig+0x248>)
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800871e:	f7fb faaf 	bl	8003c80 <HAL_GetTick>
 8008722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008724:	e00e      	b.n	8008744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008726:	f7fb faab 	bl	8003c80 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d907      	bls.n	8008744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e150      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
 8008738:	40023800 	.word	0x40023800
 800873c:	42470000 	.word	0x42470000
 8008740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008744:	4b88      	ldr	r3, [pc, #544]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1ea      	bne.n	8008726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 8097 	beq.w	800888c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008762:	4b81      	ldr	r3, [pc, #516]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10f      	bne.n	800878e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
 8008772:	4b7d      	ldr	r3, [pc, #500]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008776:	4a7c      	ldr	r2, [pc, #496]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800877c:	6413      	str	r3, [r2, #64]	@ 0x40
 800877e:	4b7a      	ldr	r3, [pc, #488]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008786:	60bb      	str	r3, [r7, #8]
 8008788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800878a:	2301      	movs	r3, #1
 800878c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800878e:	4b77      	ldr	r3, [pc, #476]	@ (800896c <HAL_RCC_OscConfig+0x474>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008796:	2b00      	cmp	r3, #0
 8008798:	d118      	bne.n	80087cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800879a:	4b74      	ldr	r3, [pc, #464]	@ (800896c <HAL_RCC_OscConfig+0x474>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a73      	ldr	r2, [pc, #460]	@ (800896c <HAL_RCC_OscConfig+0x474>)
 80087a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087a6:	f7fb fa6b 	bl	8003c80 <HAL_GetTick>
 80087aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087ac:	e008      	b.n	80087c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087ae:	f7fb fa67 	bl	8003c80 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d901      	bls.n	80087c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e10c      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087c0:	4b6a      	ldr	r3, [pc, #424]	@ (800896c <HAL_RCC_OscConfig+0x474>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d0f0      	beq.n	80087ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d106      	bne.n	80087e2 <HAL_RCC_OscConfig+0x2ea>
 80087d4:	4b64      	ldr	r3, [pc, #400]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d8:	4a63      	ldr	r2, [pc, #396]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087da:	f043 0301 	orr.w	r3, r3, #1
 80087de:	6713      	str	r3, [r2, #112]	@ 0x70
 80087e0:	e01c      	b.n	800881c <HAL_RCC_OscConfig+0x324>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	2b05      	cmp	r3, #5
 80087e8:	d10c      	bne.n	8008804 <HAL_RCC_OscConfig+0x30c>
 80087ea:	4b5f      	ldr	r3, [pc, #380]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ee:	4a5e      	ldr	r2, [pc, #376]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087f0:	f043 0304 	orr.w	r3, r3, #4
 80087f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80087f6:	4b5c      	ldr	r3, [pc, #368]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087fa:	4a5b      	ldr	r2, [pc, #364]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087fc:	f043 0301 	orr.w	r3, r3, #1
 8008800:	6713      	str	r3, [r2, #112]	@ 0x70
 8008802:	e00b      	b.n	800881c <HAL_RCC_OscConfig+0x324>
 8008804:	4b58      	ldr	r3, [pc, #352]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008808:	4a57      	ldr	r2, [pc, #348]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 800880a:	f023 0301 	bic.w	r3, r3, #1
 800880e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008810:	4b55      	ldr	r3, [pc, #340]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008814:	4a54      	ldr	r2, [pc, #336]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008816:	f023 0304 	bic.w	r3, r3, #4
 800881a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d015      	beq.n	8008850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008824:	f7fb fa2c 	bl	8003c80 <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800882a:	e00a      	b.n	8008842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800882c:	f7fb fa28 	bl	8003c80 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800883a:	4293      	cmp	r3, r2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e0cb      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008842:	4b49      	ldr	r3, [pc, #292]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0ee      	beq.n	800882c <HAL_RCC_OscConfig+0x334>
 800884e:	e014      	b.n	800887a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008850:	f7fb fa16 	bl	8003c80 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008856:	e00a      	b.n	800886e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008858:	f7fb fa12 	bl	8003c80 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008866:	4293      	cmp	r3, r2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e0b5      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800886e:	4b3e      	ldr	r3, [pc, #248]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1ee      	bne.n	8008858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d105      	bne.n	800888c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008880:	4b39      	ldr	r3, [pc, #228]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008884:	4a38      	ldr	r2, [pc, #224]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800888a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 80a1 	beq.w	80089d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008896:	4b34      	ldr	r3, [pc, #208]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 030c 	and.w	r3, r3, #12
 800889e:	2b08      	cmp	r3, #8
 80088a0:	d05c      	beq.n	800895c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d141      	bne.n	800892e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088aa:	4b31      	ldr	r3, [pc, #196]	@ (8008970 <HAL_RCC_OscConfig+0x478>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b0:	f7fb f9e6 	bl	8003c80 <HAL_GetTick>
 80088b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088b6:	e008      	b.n	80088ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088b8:	f7fb f9e2 	bl	8003c80 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d901      	bls.n	80088ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e087      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ca:	4b27      	ldr	r3, [pc, #156]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1f0      	bne.n	80088b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	69da      	ldr	r2, [r3, #28]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e4:	019b      	lsls	r3, r3, #6
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	085b      	lsrs	r3, r3, #1
 80088ee:	3b01      	subs	r3, #1
 80088f0:	041b      	lsls	r3, r3, #16
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f8:	061b      	lsls	r3, r3, #24
 80088fa:	491b      	ldr	r1, [pc, #108]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008900:	4b1b      	ldr	r3, [pc, #108]	@ (8008970 <HAL_RCC_OscConfig+0x478>)
 8008902:	2201      	movs	r2, #1
 8008904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008906:	f7fb f9bb 	bl	8003c80 <HAL_GetTick>
 800890a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800890c:	e008      	b.n	8008920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800890e:	f7fb f9b7 	bl	8003c80 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b02      	cmp	r3, #2
 800891a:	d901      	bls.n	8008920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e05c      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008920:	4b11      	ldr	r3, [pc, #68]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0f0      	beq.n	800890e <HAL_RCC_OscConfig+0x416>
 800892c:	e054      	b.n	80089d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800892e:	4b10      	ldr	r3, [pc, #64]	@ (8008970 <HAL_RCC_OscConfig+0x478>)
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008934:	f7fb f9a4 	bl	8003c80 <HAL_GetTick>
 8008938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800893c:	f7fb f9a0 	bl	8003c80 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e045      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800894e:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1f0      	bne.n	800893c <HAL_RCC_OscConfig+0x444>
 800895a:	e03d      	b.n	80089d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d107      	bne.n	8008974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e038      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
 8008968:	40023800 	.word	0x40023800
 800896c:	40007000 	.word	0x40007000
 8008970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008974:	4b1b      	ldr	r3, [pc, #108]	@ (80089e4 <HAL_RCC_OscConfig+0x4ec>)
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d028      	beq.n	80089d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800898c:	429a      	cmp	r2, r3
 800898e:	d121      	bne.n	80089d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800899a:	429a      	cmp	r2, r3
 800899c:	d11a      	bne.n	80089d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80089a4:	4013      	ands	r3, r2
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80089aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d111      	bne.n	80089d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ba:	085b      	lsrs	r3, r3, #1
 80089bc:	3b01      	subs	r3, #1
 80089be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d107      	bne.n	80089d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d001      	beq.n	80089d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	40023800 	.word	0x40023800

080089e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0cc      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089fc:	4b68      	ldr	r3, [pc, #416]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d90c      	bls.n	8008a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a0a:	4b65      	ldr	r3, [pc, #404]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a12:	4b63      	ldr	r3, [pc, #396]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d001      	beq.n	8008a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e0b8      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d020      	beq.n	8008a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a3c:	4b59      	ldr	r3, [pc, #356]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	4a58      	ldr	r2, [pc, #352]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0308 	and.w	r3, r3, #8
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a54:	4b53      	ldr	r3, [pc, #332]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	4a52      	ldr	r2, [pc, #328]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a60:	4b50      	ldr	r3, [pc, #320]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	494d      	ldr	r1, [pc, #308]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d044      	beq.n	8008b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d107      	bne.n	8008a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a86:	4b47      	ldr	r3, [pc, #284]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d119      	bne.n	8008ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e07f      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d003      	beq.n	8008aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d107      	bne.n	8008ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d109      	bne.n	8008ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e06f      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e067      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ac6:	4b37      	ldr	r3, [pc, #220]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f023 0203 	bic.w	r2, r3, #3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	4934      	ldr	r1, [pc, #208]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ad8:	f7fb f8d2 	bl	8003c80 <HAL_GetTick>
 8008adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ade:	e00a      	b.n	8008af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ae0:	f7fb f8ce 	bl	8003c80 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e04f      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008af6:	4b2b      	ldr	r3, [pc, #172]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 020c 	and.w	r2, r3, #12
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d1eb      	bne.n	8008ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b08:	4b25      	ldr	r3, [pc, #148]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0307 	and.w	r3, r3, #7
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d20c      	bcs.n	8008b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b16:	4b22      	ldr	r3, [pc, #136]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	b2d2      	uxtb	r2, r2
 8008b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b1e:	4b20      	ldr	r3, [pc, #128]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d001      	beq.n	8008b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e032      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d008      	beq.n	8008b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b3c:	4b19      	ldr	r3, [pc, #100]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	4916      	ldr	r1, [pc, #88]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0308 	and.w	r3, r3, #8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d009      	beq.n	8008b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b5a:	4b12      	ldr	r3, [pc, #72]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	490e      	ldr	r1, [pc, #56]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b6e:	f000 f821 	bl	8008bb4 <HAL_RCC_GetSysClockFreq>
 8008b72:	4602      	mov	r2, r0
 8008b74:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	091b      	lsrs	r3, r3, #4
 8008b7a:	f003 030f 	and.w	r3, r3, #15
 8008b7e:	490a      	ldr	r1, [pc, #40]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8008b80:	5ccb      	ldrb	r3, [r1, r3]
 8008b82:	fa22 f303 	lsr.w	r3, r2, r3
 8008b86:	4a09      	ldr	r2, [pc, #36]	@ (8008bac <HAL_RCC_ClockConfig+0x1c4>)
 8008b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b8a:	4b09      	ldr	r3, [pc, #36]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fb f832 	bl	8003bf8 <HAL_InitTick>

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	40023c00 	.word	0x40023c00
 8008ba4:	40023800 	.word	0x40023800
 8008ba8:	080227c4 	.word	0x080227c4
 8008bac:	20000014 	.word	0x20000014
 8008bb0:	20000018 	.word	0x20000018

08008bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb8:	b090      	sub	sp, #64	@ 0x40
 8008bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bcc:	4b59      	ldr	r3, [pc, #356]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f003 030c 	and.w	r3, r3, #12
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d00d      	beq.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	f200 80a1 	bhi.w	8008d20 <HAL_RCC_GetSysClockFreq+0x16c>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <HAL_RCC_GetSysClockFreq+0x34>
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d003      	beq.n	8008bee <HAL_RCC_GetSysClockFreq+0x3a>
 8008be6:	e09b      	b.n	8008d20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008be8:	4b53      	ldr	r3, [pc, #332]	@ (8008d38 <HAL_RCC_GetSysClockFreq+0x184>)
 8008bea:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008bec:	e09b      	b.n	8008d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bee:	4b53      	ldr	r3, [pc, #332]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8008bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008bf2:	e098      	b.n	8008d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bfc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bfe:	4b4d      	ldr	r3, [pc, #308]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d028      	beq.n	8008c5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	099b      	lsrs	r3, r3, #6
 8008c10:	2200      	movs	r2, #0
 8008c12:	623b      	str	r3, [r7, #32]
 8008c14:	627a      	str	r2, [r7, #36]	@ 0x24
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4b47      	ldr	r3, [pc, #284]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8008c20:	fb03 f201 	mul.w	r2, r3, r1
 8008c24:	2300      	movs	r3, #0
 8008c26:	fb00 f303 	mul.w	r3, r0, r3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	4a43      	ldr	r2, [pc, #268]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8008c2e:	fba0 1202 	umull	r1, r2, r0, r2
 8008c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c34:	460a      	mov	r2, r1
 8008c36:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c3a:	4413      	add	r3, r2
 8008c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c40:	2200      	movs	r2, #0
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	61fa      	str	r2, [r7, #28]
 8008c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008c4e:	f7f8 f833 	bl	8000cb8 <__aeabi_uldivmod>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4613      	mov	r3, r2
 8008c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c5a:	e053      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c5c:	4b35      	ldr	r3, [pc, #212]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	099b      	lsrs	r3, r3, #6
 8008c62:	2200      	movs	r2, #0
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	617a      	str	r2, [r7, #20]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008c6e:	f04f 0b00 	mov.w	fp, #0
 8008c72:	4652      	mov	r2, sl
 8008c74:	465b      	mov	r3, fp
 8008c76:	f04f 0000 	mov.w	r0, #0
 8008c7a:	f04f 0100 	mov.w	r1, #0
 8008c7e:	0159      	lsls	r1, r3, #5
 8008c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c84:	0150      	lsls	r0, r2, #5
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	ebb2 080a 	subs.w	r8, r2, sl
 8008c8e:	eb63 090b 	sbc.w	r9, r3, fp
 8008c92:	f04f 0200 	mov.w	r2, #0
 8008c96:	f04f 0300 	mov.w	r3, #0
 8008c9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008c9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008ca2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008ca6:	ebb2 0408 	subs.w	r4, r2, r8
 8008caa:	eb63 0509 	sbc.w	r5, r3, r9
 8008cae:	f04f 0200 	mov.w	r2, #0
 8008cb2:	f04f 0300 	mov.w	r3, #0
 8008cb6:	00eb      	lsls	r3, r5, #3
 8008cb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cbc:	00e2      	lsls	r2, r4, #3
 8008cbe:	4614      	mov	r4, r2
 8008cc0:	461d      	mov	r5, r3
 8008cc2:	eb14 030a 	adds.w	r3, r4, sl
 8008cc6:	603b      	str	r3, [r7, #0]
 8008cc8:	eb45 030b 	adc.w	r3, r5, fp
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	f04f 0200 	mov.w	r2, #0
 8008cd2:	f04f 0300 	mov.w	r3, #0
 8008cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cda:	4629      	mov	r1, r5
 8008cdc:	028b      	lsls	r3, r1, #10
 8008cde:	4621      	mov	r1, r4
 8008ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	028a      	lsls	r2, r1, #10
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4619      	mov	r1, r3
 8008cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cee:	2200      	movs	r2, #0
 8008cf0:	60bb      	str	r3, [r7, #8]
 8008cf2:	60fa      	str	r2, [r7, #12]
 8008cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cf8:	f7f7 ffde 	bl	8000cb8 <__aeabi_uldivmod>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4613      	mov	r3, r2
 8008d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d04:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	0c1b      	lsrs	r3, r3, #16
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	3301      	adds	r3, #1
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008d14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d1e:	e002      	b.n	8008d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d20:	4b05      	ldr	r3, [pc, #20]	@ (8008d38 <HAL_RCC_GetSysClockFreq+0x184>)
 8008d22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3740      	adds	r7, #64	@ 0x40
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d32:	bf00      	nop
 8008d34:	40023800 	.word	0x40023800
 8008d38:	00f42400 	.word	0x00f42400
 8008d3c:	017d7840 	.word	0x017d7840

08008d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d40:	b480      	push	{r7}
 8008d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d44:	4b03      	ldr	r3, [pc, #12]	@ (8008d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d46:	681b      	ldr	r3, [r3, #0]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20000014 	.word	0x20000014

08008d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d5c:	f7ff fff0 	bl	8008d40 <HAL_RCC_GetHCLKFreq>
 8008d60:	4602      	mov	r2, r0
 8008d62:	4b05      	ldr	r3, [pc, #20]	@ (8008d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	0a9b      	lsrs	r3, r3, #10
 8008d68:	f003 0307 	and.w	r3, r3, #7
 8008d6c:	4903      	ldr	r1, [pc, #12]	@ (8008d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d6e:	5ccb      	ldrb	r3, [r1, r3]
 8008d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	080227d4 	.word	0x080227d4

08008d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d84:	f7ff ffdc 	bl	8008d40 <HAL_RCC_GetHCLKFreq>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	4b05      	ldr	r3, [pc, #20]	@ (8008da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	0b5b      	lsrs	r3, r3, #13
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	4903      	ldr	r1, [pc, #12]	@ (8008da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d96:	5ccb      	ldrb	r3, [r1, r3]
 8008d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40023800 	.word	0x40023800
 8008da4:	080227d4 	.word	0x080227d4

08008da8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d105      	bne.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d035      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008dd0:	4b67      	ldr	r3, [pc, #412]	@ (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008dd6:	f7fa ff53 	bl	8003c80 <HAL_GetTick>
 8008dda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ddc:	e008      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008dde:	f7fa ff4f 	bl	8003c80 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d901      	bls.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e0ba      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008df0:	4b60      	ldr	r3, [pc, #384]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1f0      	bne.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	019a      	lsls	r2, r3, #6
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	071b      	lsls	r3, r3, #28
 8008e08:	495a      	ldr	r1, [pc, #360]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008e10:	4b57      	ldr	r3, [pc, #348]	@ (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008e12:	2201      	movs	r2, #1
 8008e14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e16:	f7fa ff33 	bl	8003c80 <HAL_GetTick>
 8008e1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e1c:	e008      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008e1e:	f7fa ff2f 	bl	8003c80 <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d901      	bls.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e09a      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e30:	4b50      	ldr	r3, [pc, #320]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0f0      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8083 	beq.w	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]
 8008e4e:	4b49      	ldr	r3, [pc, #292]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e52:	4a48      	ldr	r2, [pc, #288]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e5a:	4b46      	ldr	r3, [pc, #280]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008e66:	4b44      	ldr	r3, [pc, #272]	@ (8008f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a43      	ldr	r2, [pc, #268]	@ (8008f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e72:	f7fa ff05 	bl	8003c80 <HAL_GetTick>
 8008e76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e78:	e008      	b.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e7a:	f7fa ff01 	bl	8003c80 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d901      	bls.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e06c      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8008f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0f0      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e98:	4b36      	ldr	r3, [pc, #216]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ea0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d02f      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d028      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ebe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008ecc:	4a29      	ldr	r2, [pc, #164]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ed2:	4b28      	ldr	r3, [pc, #160]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d114      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008ede:	f7fa fecf 	bl	8003c80 <HAL_GetTick>
 8008ee2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ee4:	e00a      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ee6:	f7fa fecb 	bl	8003c80 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d901      	bls.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e034      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008efc:	4b1d      	ldr	r3, [pc, #116]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0ee      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f14:	d10d      	bne.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008f16:	4b17      	ldr	r3, [pc, #92]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f2a:	4912      	ldr	r1, [pc, #72]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	608b      	str	r3, [r1, #8]
 8008f30:	e005      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008f32:	4b10      	ldr	r3, [pc, #64]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	4a0f      	ldr	r2, [pc, #60]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f38:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008f3c:	6093      	str	r3, [r2, #8]
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f4a:	490a      	ldr	r1, [pc, #40]	@ (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0308 	and.w	r3, r3, #8
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d003      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	7c1a      	ldrb	r2, [r3, #16]
 8008f60:	4b07      	ldr	r3, [pc, #28]	@ (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008f62:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	42470068 	.word	0x42470068
 8008f74:	40023800 	.word	0x40023800
 8008f78:	40007000 	.word	0x40007000
 8008f7c:	42470e40 	.word	0x42470e40
 8008f80:	424711e0 	.word	0x424711e0

08008f84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e066      	b.n	8009068 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7f5b      	ldrb	r3, [r3, #29]
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d105      	bne.n	8008fb0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7fa fa22 	bl	80033f4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	22ca      	movs	r2, #202	@ 0xca
 8008fbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2253      	movs	r2, #83	@ 0x53
 8008fc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fbce 	bl	8009768 <RTC_EnterInitMode>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d12c      	bne.n	8009030 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	6812      	ldr	r2, [r2, #0]
 8008fe0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008fe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fe8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6899      	ldr	r1, [r3, #8]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	68d2      	ldr	r2, [r2, #12]
 8009010:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6919      	ldr	r1, [r3, #16]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	041a      	lsls	r2, r3, #16
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fbd5 	bl	80097d6 <RTC_ExitInitMode>
 800902c:	4603      	mov	r3, r0
 800902e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d113      	bne.n	800905e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009044:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	699a      	ldr	r2, [r3, #24]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	22ff      	movs	r2, #255	@ 0xff
 8009064:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 8009066:	7bfb      	ldrb	r3, [r7, #15]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009070:	b590      	push	{r4, r7, lr}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	7f1b      	ldrb	r3, [r3, #28]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_RTC_SetTime+0x1c>
 8009088:	2302      	movs	r3, #2
 800908a:	e087      	b.n	800919c <HAL_RTC_SetTime+0x12c>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2202      	movs	r2, #2
 8009096:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d126      	bne.n	80090ec <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d102      	bne.n	80090b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2200      	movs	r2, #0
 80090b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fbb2 	bl	8009820 <RTC_ByteToBcd2>
 80090bc:	4603      	mov	r3, r0
 80090be:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	785b      	ldrb	r3, [r3, #1]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fbab 	bl	8009820 <RTC_ByteToBcd2>
 80090ca:	4603      	mov	r3, r0
 80090cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80090ce:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	789b      	ldrb	r3, [r3, #2]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fba3 	bl	8009820 <RTC_ByteToBcd2>
 80090da:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80090dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	78db      	ldrb	r3, [r3, #3]
 80090e4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	e018      	b.n	800911e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d102      	bne.n	8009100 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2200      	movs	r2, #0
 80090fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800910c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009112:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	78db      	ldrb	r3, [r3, #3]
 8009118:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800911a:	4313      	orrs	r3, r2
 800911c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	22ca      	movs	r2, #202	@ 0xca
 8009124:	625a      	str	r2, [r3, #36]	@ 0x24
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2253      	movs	r2, #83	@ 0x53
 800912c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 fb1a 	bl	8009768 <RTC_EnterInitMode>
 8009134:	4603      	mov	r3, r0
 8009136:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009138:	7cfb      	ldrb	r3, [r7, #19]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d120      	bne.n	8009180 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009148:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800914c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800915c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6899      	ldr	r1, [r3, #8]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	431a      	orrs	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 fb2d 	bl	80097d6 <RTC_ExitInitMode>
 800917c:	4603      	mov	r3, r0
 800917e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009180:	7cfb      	ldrb	r3, [r7, #19]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	22ff      	movs	r2, #255	@ 0xff
 8009192:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	771a      	strb	r2, [r3, #28]

  return status;
 800919a:	7cfb      	ldrb	r3, [r7, #19]
}
 800919c:	4618      	mov	r0, r3
 800919e:	371c      	adds	r7, #28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd90      	pop	{r4, r7, pc}

080091a4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80091d6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80091da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	0c1b      	lsrs	r3, r3, #16
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	0a1b      	lsrs	r3, r3, #8
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009204:	b2da      	uxtb	r2, r3
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	0d9b      	lsrs	r3, r3, #22
 800920e:	b2db      	uxtb	r3, r3
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	b2da      	uxtb	r2, r3
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d11a      	bne.n	8009256 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fb18 	bl	800985a <RTC_Bcd2ToByte>
 800922a:	4603      	mov	r3, r0
 800922c:	461a      	mov	r2, r3
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	785b      	ldrb	r3, [r3, #1]
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fb0f 	bl	800985a <RTC_Bcd2ToByte>
 800923c:	4603      	mov	r3, r0
 800923e:	461a      	mov	r2, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	789b      	ldrb	r3, [r3, #2]
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fb06 	bl	800985a <RTC_Bcd2ToByte>
 800924e:	4603      	mov	r3, r0
 8009250:	461a      	mov	r2, r3
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	7f1b      	ldrb	r3, [r3, #28]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_RTC_SetDate+0x1c>
 8009278:	2302      	movs	r3, #2
 800927a:	e071      	b.n	8009360 <HAL_RTC_SetDate+0x100>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2201      	movs	r2, #1
 8009280:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2202      	movs	r2, #2
 8009286:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10e      	bne.n	80092ac <HAL_RTC_SetDate+0x4c>
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	785b      	ldrb	r3, [r3, #1]
 8009292:	f003 0310 	and.w	r3, r3, #16
 8009296:	2b00      	cmp	r3, #0
 8009298:	d008      	beq.n	80092ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	785b      	ldrb	r3, [r3, #1]
 800929e:	f023 0310 	bic.w	r3, r3, #16
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	330a      	adds	r3, #10
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d11c      	bne.n	80092ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	78db      	ldrb	r3, [r3, #3]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fab2 	bl	8009820 <RTC_ByteToBcd2>
 80092bc:	4603      	mov	r3, r0
 80092be:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	785b      	ldrb	r3, [r3, #1]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 faab 	bl	8009820 <RTC_ByteToBcd2>
 80092ca:	4603      	mov	r3, r0
 80092cc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80092ce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	789b      	ldrb	r3, [r3, #2]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 faa3 	bl	8009820 <RTC_ByteToBcd2>
 80092da:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80092dc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80092e6:	4313      	orrs	r3, r2
 80092e8:	617b      	str	r3, [r7, #20]
 80092ea:	e00e      	b.n	800930a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	78db      	ldrb	r3, [r3, #3]
 80092f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092f8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80092fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	22ca      	movs	r2, #202	@ 0xca
 8009310:	625a      	str	r2, [r3, #36]	@ 0x24
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2253      	movs	r2, #83	@ 0x53
 8009318:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fa24 	bl	8009768 <RTC_EnterInitMode>
 8009320:	4603      	mov	r3, r0
 8009322:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009324:	7cfb      	ldrb	r3, [r7, #19]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10c      	bne.n	8009344 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009334:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009338:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 fa4b 	bl	80097d6 <RTC_ExitInitMode>
 8009340:	4603      	mov	r3, r0
 8009342:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009344:	7cfb      	ldrb	r3, [r7, #19]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d102      	bne.n	8009350 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	22ff      	movs	r2, #255	@ 0xff
 8009356:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	771a      	strb	r2, [r3, #28]

  return status;
 800935e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009360:	4618      	mov	r0, r3
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	bd90      	pop	{r4, r7, pc}

08009368 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009374:	2300      	movs	r3, #0
 8009376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009382:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009386:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	0c1b      	lsrs	r3, r3, #16
 800938c:	b2da      	uxtb	r2, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	0a1b      	lsrs	r3, r3, #8
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 031f 	and.w	r3, r3, #31
 800939c:	b2da      	uxtb	r2, r3
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	0b5b      	lsrs	r3, r3, #13
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d11a      	bne.n	80093fc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	78db      	ldrb	r3, [r3, #3]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fa45 	bl	800985a <RTC_Bcd2ToByte>
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	785b      	ldrb	r3, [r3, #1]
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fa3c 	bl	800985a <RTC_Bcd2ToByte>
 80093e2:	4603      	mov	r3, r0
 80093e4:	461a      	mov	r2, r3
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	789b      	ldrb	r3, [r3, #2]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fa33 	bl	800985a <RTC_Bcd2ToByte>
 80093f4:	4603      	mov	r3, r0
 80093f6:	461a      	mov	r2, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
	...

08009408 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009408:	b590      	push	{r4, r7, lr}
 800940a:	b089      	sub	sp, #36	@ 0x24
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009414:	4b9a      	ldr	r3, [pc, #616]	@ (8009680 <HAL_RTC_SetAlarm_IT+0x278>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a9a      	ldr	r2, [pc, #616]	@ (8009684 <HAL_RTC_SetAlarm_IT+0x27c>)
 800941a:	fba2 2303 	umull	r2, r3, r2, r3
 800941e:	0adb      	lsrs	r3, r3, #11
 8009420:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009424:	fb02 f303 	mul.w	r3, r2, r3
 8009428:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	7f1b      	ldrb	r3, [r3, #28]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d101      	bne.n	800943e <HAL_RTC_SetAlarm_IT+0x36>
 800943a:	2302      	movs	r3, #2
 800943c:	e11c      	b.n	8009678 <HAL_RTC_SetAlarm_IT+0x270>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2202      	movs	r2, #2
 8009448:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d137      	bne.n	80094c0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800945a:	2b00      	cmp	r3, #0
 800945c:	d102      	bne.n	8009464 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2200      	movs	r2, #0
 8009462:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 f9d9 	bl	8009820 <RTC_ByteToBcd2>
 800946e:	4603      	mov	r3, r0
 8009470:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	785b      	ldrb	r3, [r3, #1]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f9d2 	bl	8009820 <RTC_ByteToBcd2>
 800947c:	4603      	mov	r3, r0
 800947e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009480:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	789b      	ldrb	r3, [r3, #2]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f9ca 	bl	8009820 <RTC_ByteToBcd2>
 800948c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800948e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	78db      	ldrb	r3, [r3, #3]
 8009496:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009498:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 f9bc 	bl	8009820 <RTC_ByteToBcd2>
 80094a8:	4603      	mov	r3, r0
 80094aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80094ac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80094b4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80094ba:	4313      	orrs	r3, r2
 80094bc:	61fb      	str	r3, [r7, #28]
 80094be:	e023      	b.n	8009508 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d102      	bne.n	80094d4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2200      	movs	r2, #0
 80094d2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80094e0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80094e6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	78db      	ldrb	r3, [r3, #3]
 80094ec:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80094ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094f6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80094f8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80094fe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009504:	4313      	orrs	r3, r2
 8009506:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009510:	4313      	orrs	r3, r2
 8009512:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	22ca      	movs	r2, #202	@ 0xca
 800951a:	625a      	str	r2, [r3, #36]	@ 0x24
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2253      	movs	r2, #83	@ 0x53
 8009522:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800952c:	d141      	bne.n	80095b2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800953c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	b2da      	uxtb	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800954e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	1e5a      	subs	r2, r3, #1
 8009554:	617a      	str	r2, [r7, #20]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10b      	bne.n	8009572 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	22ff      	movs	r2, #255	@ 0xff
 8009560:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2203      	movs	r2, #3
 8009566:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e082      	b.n	8009678 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d0e7      	beq.n	8009550 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689a      	ldr	r2, [r3, #8]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800959e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80095ae:	609a      	str	r2, [r3, #8]
 80095b0:	e04b      	b.n	800964a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80095c0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80095d2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80095d4:	4b2a      	ldr	r3, [pc, #168]	@ (8009680 <HAL_RTC_SetAlarm_IT+0x278>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a2a      	ldr	r2, [pc, #168]	@ (8009684 <HAL_RTC_SetAlarm_IT+0x27c>)
 80095da:	fba2 2303 	umull	r2, r3, r2, r3
 80095de:	0adb      	lsrs	r3, r3, #11
 80095e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80095e4:	fb02 f303 	mul.w	r3, r2, r3
 80095e8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	1e5a      	subs	r2, r3, #1
 80095ee:	617a      	str	r2, [r7, #20]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10b      	bne.n	800960c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	22ff      	movs	r2, #255	@ 0xff
 80095fa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2203      	movs	r2, #3
 8009600:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	e035      	b.n	8009678 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0e7      	beq.n	80095ea <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	69fa      	ldr	r2, [r7, #28]
 8009620:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009638:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009648:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800964a:	4b0f      	ldr	r3, [pc, #60]	@ (8009688 <HAL_RTC_SetAlarm_IT+0x280>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a0e      	ldr	r2, [pc, #56]	@ (8009688 <HAL_RTC_SetAlarm_IT+0x280>)
 8009650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009654:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009656:	4b0c      	ldr	r3, [pc, #48]	@ (8009688 <HAL_RTC_SetAlarm_IT+0x280>)
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	4a0b      	ldr	r2, [pc, #44]	@ (8009688 <HAL_RTC_SetAlarm_IT+0x280>)
 800965c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009660:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	22ff      	movs	r2, #255	@ 0xff
 8009668:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2201      	movs	r2, #1
 800966e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3724      	adds	r7, #36	@ 0x24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd90      	pop	{r4, r7, pc}
 8009680:	20000014 	.word	0x20000014
 8009684:	10624dd3 	.word	0x10624dd3
 8009688:	40013c00 	.word	0x40013c00

0800968c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d012      	beq.n	80096c8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7f9 fd73 	bl	800319c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80096c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d012      	beq.n	80096fc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f8d4 	bl	8009892 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80096fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80096fc:	4b05      	ldr	r3, [pc, #20]	@ (8009714 <HAL_RTC_AlarmIRQHandler+0x88>)
 80096fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009702:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	775a      	strb	r2, [r3, #29]
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	40013c00 	.word	0x40013c00

08009718 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009732:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009734:	f7fa faa4 	bl	8003c80 <HAL_GetTick>
 8009738:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800973a:	e009      	b.n	8009750 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800973c:	f7fa faa0 	bl	8003c80 <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800974a:	d901      	bls.n	8009750 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e007      	b.n	8009760 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	f003 0320 	and.w	r3, r3, #32
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0ee      	beq.n	800973c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009782:	2b00      	cmp	r3, #0
 8009784:	d122      	bne.n	80097cc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68da      	ldr	r2, [r3, #12]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009794:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009796:	f7fa fa73 	bl	8003c80 <HAL_GetTick>
 800979a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800979c:	e00c      	b.n	80097b8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800979e:	f7fa fa6f 	bl	8003c80 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097ac:	d904      	bls.n	80097b8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2204      	movs	r2, #4
 80097b2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d102      	bne.n	80097cc <RTC_EnterInitMode+0x64>
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d1e8      	bne.n	800979e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f003 0320 	and.w	r3, r3, #32
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ff89 	bl	8009718 <HAL_RTC_WaitForSynchro>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d004      	beq.n	8009816 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2204      	movs	r2, #4
 8009810:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800982e:	e005      	b.n	800983c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	3301      	adds	r3, #1
 8009834:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	3b0a      	subs	r3, #10
 800983a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	2b09      	cmp	r3, #9
 8009840:	d8f6      	bhi.n	8009830 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	011b      	lsls	r3, r3, #4
 8009846:	b2da      	uxtb	r2, r3
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	4313      	orrs	r3, r2
 800984c:	b2db      	uxtb	r3, r3
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800985a:	b480      	push	{r7}
 800985c:	b085      	sub	sp, #20
 800985e:	af00      	add	r7, sp, #0
 8009860:	4603      	mov	r3, r0
 8009862:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	091b      	lsrs	r3, r3, #4
 800986c:	b2db      	uxtb	r3, r3
 800986e:	461a      	mov	r2, r3
 8009870:	0092      	lsls	r2, r2, #2
 8009872:	4413      	add	r3, r2
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	b2da      	uxtb	r2, r3
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	4413      	add	r3, r2
 8009884:	b2db      	uxtb	r3, r3
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009892:	b480      	push	{r7}
 8009894:	b083      	sub	sp, #12
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800989a:	bf00      	nop
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e022      	b.n	80098fe <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d105      	bne.n	80098d0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7f9 fdc6 	bl	800345c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2203      	movs	r2, #3
 80098d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f815 	bl	8009908 <HAL_SD_InitCard>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e00a      	b.n	80098fe <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009908:	b5b0      	push	{r4, r5, r7, lr}
 800990a:	b08e      	sub	sp, #56	@ 0x38
 800990c:	af04      	add	r7, sp, #16
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009910:	2300      	movs	r3, #0
 8009912:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009914:	2300      	movs	r3, #0
 8009916:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009918:	2300      	movs	r3, #0
 800991a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800991c:	2300      	movs	r3, #0
 800991e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009920:	2300      	movs	r3, #0
 8009922:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009924:	2376      	movs	r3, #118	@ 0x76
 8009926:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681d      	ldr	r5, [r3, #0]
 800992c:	466c      	mov	r4, sp
 800992e:	f107 0314 	add.w	r3, r7, #20
 8009932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800993a:	f107 0308 	add.w	r3, r7, #8
 800993e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009940:	4628      	mov	r0, r5
 8009942:	f003 f8cf 	bl	800cae4 <SDIO_Init>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800994c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e04f      	b.n	80099f8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009958:	4b29      	ldr	r3, [pc, #164]	@ (8009a00 <HAL_SD_InitCard+0xf8>)
 800995a:	2200      	movs	r2, #0
 800995c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4618      	mov	r0, r3
 8009964:	f003 f907 	bl	800cb76 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009968:	4b25      	ldr	r3, [pc, #148]	@ (8009a00 <HAL_SD_InitCard+0xf8>)
 800996a:	2201      	movs	r2, #1
 800996c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800996e:	2002      	movs	r0, #2
 8009970:	f7fa f992 	bl	8003c98 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fe69 	bl	800a64c <SD_PowerON>
 800997a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00b      	beq.n	800999a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	431a      	orrs	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e02e      	b.n	80099f8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fd88 	bl	800a4b0 <SD_InitCard>
 80099a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00b      	beq.n	80099c0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	431a      	orrs	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e01b      	b.n	80099f8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80099c8:	4618      	mov	r0, r3
 80099ca:	f003 f966 	bl	800cc9a <SDMMC_CmdBlockLength>
 80099ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00f      	beq.n	80099f6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a0a      	ldr	r2, [pc, #40]	@ (8009a04 <HAL_SD_InitCard+0xfc>)
 80099dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	431a      	orrs	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e000      	b.n	80099f8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3728      	adds	r7, #40	@ 0x28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bdb0      	pop	{r4, r5, r7, pc}
 8009a00:	422580a0 	.word	0x422580a0
 8009a04:	004005ff 	.word	0x004005ff

08009a08 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b092      	sub	sp, #72	@ 0x48
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009a16:	f7fa f933 	bl	8003c80 <HAL_GetTick>
 8009a1a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d107      	bne.n	8009a3a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e1bd      	b.n	8009db6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	f040 81b0 	bne.w	8009da8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009a4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	441a      	add	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d907      	bls.n	8009a6c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a60:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e1a4      	b.n	8009db6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2203      	movs	r2, #3
 8009a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d002      	beq.n	8009a8a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a86:	025b      	lsls	r3, r3, #9
 8009a88:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a8e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	025b      	lsls	r3, r3, #9
 8009a94:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009a96:	2390      	movs	r3, #144	@ 0x90
 8009a98:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009a9a:	2302      	movs	r3, #2
 8009a9c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f107 0214 	add.w	r2, r7, #20
 8009aae:	4611      	mov	r1, r2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f003 f8c6 	bl	800cc42 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d90a      	bls.n	8009ad2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f003 f92a 	bl	800cd22 <SDMMC_CmdReadMultiBlock>
 8009ace:	6478      	str	r0, [r7, #68]	@ 0x44
 8009ad0:	e009      	b.n	8009ae6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f003 f8fd 	bl	800ccde <SDMMC_CmdReadSingleBlock>
 8009ae4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d012      	beq.n	8009b12 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a7a      	ldr	r2, [pc, #488]	@ (8009cdc <HAL_SD_ReadBlocks+0x2d4>)
 8009af2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009afa:	431a      	orrs	r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e151      	b.n	8009db6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009b16:	e061      	b.n	8009bdc <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d03c      	beq.n	8009ba0 <HAL_SD_ReadBlocks+0x198>
 8009b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d039      	beq.n	8009ba0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b30:	e033      	b.n	8009b9a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f002 ffff 	bl	800cb3a <SDIO_ReadFIFO>
 8009b3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b48:	3301      	adds	r3, #1
 8009b4a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b54:	0a1b      	lsrs	r3, r3, #8
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b5a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b5e:	3301      	adds	r3, #1
 8009b60:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b64:	3b01      	subs	r3, #1
 8009b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6a:	0c1b      	lsrs	r3, r3, #16
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b74:	3301      	adds	r3, #1
 8009b76:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b80:	0e1b      	lsrs	r3, r3, #24
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b86:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b90:	3b01      	subs	r3, #1
 8009b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8009b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b96:	3301      	adds	r3, #1
 8009b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b9c:	2b07      	cmp	r3, #7
 8009b9e:	d9c8      	bls.n	8009b32 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009ba0:	f7fa f86e 	bl	8003c80 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d902      	bls.n	8009bb6 <HAL_SD_ReadBlocks+0x1ae>
 8009bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d112      	bne.n	8009bdc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a48      	ldr	r2, [pc, #288]	@ (8009cdc <HAL_SD_ReadBlocks+0x2d4>)
 8009bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e0ec      	b.n	8009db6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009be2:	f240 332a 	movw	r3, #810	@ 0x32a
 8009be6:	4013      	ands	r3, r2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d095      	beq.n	8009b18 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d022      	beq.n	8009c40 <HAL_SD_ReadBlocks+0x238>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d91f      	bls.n	8009c40 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d01b      	beq.n	8009c40 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f003 f8ef 	bl	800cdf0 <SDMMC_CmdStopTransfer>
 8009c12:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d012      	beq.n	8009c40 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8009cdc <HAL_SD_ReadBlocks+0x2d4>)
 8009c20:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c28:	431a      	orrs	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e0ba      	b.n	8009db6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c46:	f003 0308 	and.w	r3, r3, #8
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d012      	beq.n	8009c74 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a22      	ldr	r2, [pc, #136]	@ (8009cdc <HAL_SD_ReadBlocks+0x2d4>)
 8009c54:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c5a:	f043 0208 	orr.w	r2, r3, #8
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e0a0      	b.n	8009db6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c7a:	f003 0302 	and.w	r3, r3, #2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d012      	beq.n	8009ca8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a15      	ldr	r2, [pc, #84]	@ (8009cdc <HAL_SD_ReadBlocks+0x2d4>)
 8009c88:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8e:	f043 0202 	orr.w	r2, r3, #2
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e086      	b.n	8009db6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cae:	f003 0320 	and.w	r3, r3, #32
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d063      	beq.n	8009d7e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a08      	ldr	r2, [pc, #32]	@ (8009cdc <HAL_SD_ReadBlocks+0x2d4>)
 8009cbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc2:	f043 0220 	orr.w	r2, r3, #32
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e06c      	b.n	8009db6 <HAL_SD_ReadBlocks+0x3ae>
 8009cdc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f002 ff28 	bl	800cb3a <SDIO_ReadFIFO>
 8009cea:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d02:	0a1b      	lsrs	r3, r3, #8
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d08:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d12:	3b01      	subs	r3, #1
 8009d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d18:	0c1b      	lsrs	r3, r3, #16
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d1e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d22:	3301      	adds	r3, #1
 8009d24:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2e:	0e1b      	lsrs	r3, r3, #24
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d34:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d38:	3301      	adds	r3, #1
 8009d3a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009d42:	f7f9 ff9d 	bl	8003c80 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d902      	bls.n	8009d58 <HAL_SD_ReadBlocks+0x350>
 8009d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d112      	bne.n	8009d7e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a18      	ldr	r2, [pc, #96]	@ (8009dc0 <HAL_SD_ReadBlocks+0x3b8>)
 8009d5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e01b      	b.n	8009db6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <HAL_SD_ReadBlocks+0x38a>
 8009d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1a6      	bne.n	8009ce0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009d9a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	e006      	b.n	8009db6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
  }
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3748      	adds	r7, #72	@ 0x48
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	004005ff 	.word	0x004005ff

08009dc4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b092      	sub	sp, #72	@ 0x48
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009dd2:	f7f9 ff55 	bl	8003c80 <HAL_GetTick>
 8009dd6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d107      	bne.n	8009df6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e166      	b.n	800a0c4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	f040 8159 	bne.w	800a0b6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	441a      	add	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d907      	bls.n	8009e28 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e1c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e14d      	b.n	800a0c4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2200      	movs	r2, #0
 8009e36:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d002      	beq.n	8009e46 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e42:	025b      	lsls	r3, r3, #9
 8009e44:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e46:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	025b      	lsls	r3, r3, #9
 8009e50:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009e52:	2390      	movs	r3, #144	@ 0x90
 8009e54:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009e56:	2300      	movs	r3, #0
 8009e58:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f107 0218 	add.w	r2, r7, #24
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f002 fee8 	bl	800cc42 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d90a      	bls.n	8009e8e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2220      	movs	r2, #32
 8009e7c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e84:	4618      	mov	r0, r3
 8009e86:	f002 ff90 	bl	800cdaa <SDMMC_CmdWriteMultiBlock>
 8009e8a:	6478      	str	r0, [r7, #68]	@ 0x44
 8009e8c:	e009      	b.n	8009ea2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2210      	movs	r2, #16
 8009e92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f002 ff63 	bl	800cd66 <SDMMC_CmdWriteSingleBlock>
 8009ea0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d012      	beq.n	8009ece <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a87      	ldr	r2, [pc, #540]	@ (800a0cc <HAL_SD_WriteBlocks+0x308>)
 8009eae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e0fa      	b.n	800a0c4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009ed2:	e065      	b.n	8009fa0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d040      	beq.n	8009f64 <HAL_SD_WriteBlocks+0x1a0>
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d03d      	beq.n	8009f64 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	643b      	str	r3, [r7, #64]	@ 0x40
 8009eec:	e037      	b.n	8009f5e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009efc:	3b01      	subs	r3, #1
 8009efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	021a      	lsls	r2, r3, #8
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0e:	3301      	adds	r3, #1
 8009f10:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f14:	3b01      	subs	r3, #1
 8009f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	041a      	lsls	r2, r3, #16
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f26:	3301      	adds	r3, #1
 8009f28:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	061a      	lsls	r2, r3, #24
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3e:	3301      	adds	r3, #1
 8009f40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f44:	3b01      	subs	r3, #1
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f107 0214 	add.w	r2, r7, #20
 8009f50:	4611      	mov	r1, r2
 8009f52:	4618      	mov	r0, r3
 8009f54:	f002 fdfe 	bl	800cb54 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f60:	2b07      	cmp	r3, #7
 8009f62:	d9c4      	bls.n	8009eee <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009f64:	f7f9 fe8c 	bl	8003c80 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d902      	bls.n	8009f7a <HAL_SD_WriteBlocks+0x1b6>
 8009f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d112      	bne.n	8009fa0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a53      	ldr	r2, [pc, #332]	@ (800a0cc <HAL_SD_WriteBlocks+0x308>)
 8009f80:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e091      	b.n	800a0c4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fa6:	f240 331a 	movw	r3, #794	@ 0x31a
 8009faa:	4013      	ands	r3, r2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d091      	beq.n	8009ed4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d022      	beq.n	800a004 <HAL_SD_WriteBlocks+0x240>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d91f      	bls.n	800a004 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d01b      	beq.n	800a004 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f002 ff0d 	bl	800cdf0 <SDMMC_CmdStopTransfer>
 8009fd6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d012      	beq.n	800a004 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a3a      	ldr	r2, [pc, #232]	@ (800a0cc <HAL_SD_WriteBlocks+0x308>)
 8009fe4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fec:	431a      	orrs	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e05f      	b.n	800a0c4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a00a:	f003 0308 	and.w	r3, r3, #8
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d012      	beq.n	800a038 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a2d      	ldr	r2, [pc, #180]	@ (800a0cc <HAL_SD_WriteBlocks+0x308>)
 800a018:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a01e:	f043 0208 	orr.w	r2, r3, #8
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e045      	b.n	800a0c4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03e:	f003 0302 	and.w	r3, r3, #2
 800a042:	2b00      	cmp	r3, #0
 800a044:	d012      	beq.n	800a06c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a20      	ldr	r2, [pc, #128]	@ (800a0cc <HAL_SD_WriteBlocks+0x308>)
 800a04c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a052:	f043 0202 	orr.w	r2, r3, #2
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e02b      	b.n	800a0c4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a072:	f003 0310 	and.w	r3, r3, #16
 800a076:	2b00      	cmp	r3, #0
 800a078:	d012      	beq.n	800a0a0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a13      	ldr	r2, [pc, #76]	@ (800a0cc <HAL_SD_WriteBlocks+0x308>)
 800a080:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a086:	f043 0210 	orr.w	r2, r3, #16
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e011      	b.n	800a0c4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a0a8:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e006      	b.n	800a0c4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
  }
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3748      	adds	r7, #72	@ 0x48
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	004005ff 	.word	0x004005ff

0800a0d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0de:	0f9b      	lsrs	r3, r3, #30
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0ea:	0e9b      	lsrs	r3, r3, #26
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	f003 030f 	and.w	r3, r3, #15
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0fc:	0e1b      	lsrs	r3, r3, #24
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	b2da      	uxtb	r2, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a10e:	0c1b      	lsrs	r3, r3, #16
 800a110:	b2da      	uxtb	r2, r3
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a11a:	0a1b      	lsrs	r3, r3, #8
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a126:	b2da      	uxtb	r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a130:	0d1b      	lsrs	r3, r3, #20
 800a132:	b29a      	uxth	r2, r3
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a13c:	0c1b      	lsrs	r3, r3, #16
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	f003 030f 	and.w	r3, r3, #15
 800a144:	b2da      	uxtb	r2, r3
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a14e:	0bdb      	lsrs	r3, r3, #15
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	b2da      	uxtb	r2, r3
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a160:	0b9b      	lsrs	r3, r3, #14
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a172:	0b5b      	lsrs	r3, r3, #13
 800a174:	b2db      	uxtb	r3, r3
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a184:	0b1b      	lsrs	r3, r3, #12
 800a186:	b2db      	uxtb	r3, r3
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2200      	movs	r2, #0
 800a196:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d163      	bne.n	800a268 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1a4:	009a      	lsls	r2, r3, #2
 800a1a6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a1b0:	0f92      	lsrs	r2, r2, #30
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1bc:	0edb      	lsrs	r3, r3, #27
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1ce:	0e1b      	lsrs	r3, r3, #24
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	f003 0307 	and.w	r3, r3, #7
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1e0:	0d5b      	lsrs	r3, r3, #21
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1f2:	0c9b      	lsrs	r3, r3, #18
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a204:	0bdb      	lsrs	r3, r3, #15
 800a206:	b2db      	uxtb	r3, r3
 800a208:	f003 0307 	and.w	r3, r3, #7
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	7e1b      	ldrb	r3, [r3, #24]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	f003 0307 	and.w	r3, r3, #7
 800a226:	3302      	adds	r3, #2
 800a228:	2201      	movs	r2, #1
 800a22a:	fa02 f303 	lsl.w	r3, r2, r3
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a232:	fb03 f202 	mul.w	r2, r3, r2
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	7a1b      	ldrb	r3, [r3, #8]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	f003 030f 	and.w	r3, r3, #15
 800a244:	2201      	movs	r2, #1
 800a246:	409a      	lsls	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a254:	0a52      	lsrs	r2, r2, #9
 800a256:	fb03 f202 	mul.w	r2, r3, r2
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a264:	661a      	str	r2, [r3, #96]	@ 0x60
 800a266:	e031      	b.n	800a2cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d11d      	bne.n	800a2ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a274:	041b      	lsls	r3, r3, #16
 800a276:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a27e:	0c1b      	lsrs	r3, r3, #16
 800a280:	431a      	orrs	r2, r3
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	3301      	adds	r3, #1
 800a28c:	029a      	lsls	r2, r3, #10
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2a0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	661a      	str	r2, [r3, #96]	@ 0x60
 800a2aa:	e00f      	b.n	800a2cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a58      	ldr	r2, [pc, #352]	@ (800a414 <HAL_SD_GetCardCSD+0x344>)
 800a2b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e09d      	b.n	800a408 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2d0:	0b9b      	lsrs	r3, r3, #14
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2e2:	09db      	lsrs	r3, r3, #7
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a304:	0fdb      	lsrs	r3, r3, #31
 800a306:	b2da      	uxtb	r2, r3
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a310:	0f5b      	lsrs	r3, r3, #29
 800a312:	b2db      	uxtb	r3, r3
 800a314:	f003 0303 	and.w	r3, r3, #3
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a322:	0e9b      	lsrs	r3, r3, #26
 800a324:	b2db      	uxtb	r3, r3
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a334:	0d9b      	lsrs	r3, r3, #22
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f003 030f 	and.w	r3, r3, #15
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a346:	0d5b      	lsrs	r3, r3, #21
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a362:	0c1b      	lsrs	r3, r3, #16
 800a364:	b2db      	uxtb	r3, r3
 800a366:	f003 0301 	and.w	r3, r3, #1
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a376:	0bdb      	lsrs	r3, r3, #15
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a38a:	0b9b      	lsrs	r3, r3, #14
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	b2da      	uxtb	r2, r3
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a39e:	0b5b      	lsrs	r3, r3, #13
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3b2:	0b1b      	lsrs	r3, r3, #12
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3c6:	0a9b      	lsrs	r3, r3, #10
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	f003 0303 	and.w	r3, r3, #3
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3da:	0a1b      	lsrs	r3, r3, #8
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	f003 0303 	and.w	r3, r3, #3
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3ee:	085b      	lsrs	r3, r3, #1
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	004005ff 	.word	0x004005ff

0800a418 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a47c:	f107 030c 	add.w	r3, r7, #12
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f970 	bl	800a768 <SD_SendStatus>
 800a488:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d005      	beq.n	800a49c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	0a5b      	lsrs	r3, r3, #9
 800a4a0:	f003 030f 	and.w	r3, r3, #15
 800a4a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a4a6:	693b      	ldr	r3, [r7, #16]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3718      	adds	r7, #24
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a4b0:	b5b0      	push	{r4, r5, r7, lr}
 800a4b2:	b094      	sub	sp, #80	@ 0x50
 800a4b4:	af04      	add	r7, sp, #16
 800a4b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f002 fb66 	bl	800cb92 <SDIO_GetPowerState>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d102      	bne.n	800a4d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a4cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a4d0:	e0b8      	b.n	800a644 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d02f      	beq.n	800a53a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f002 fd4d 	bl	800cf7e <SDMMC_CmdSendCID>
 800a4e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <SD_InitCard+0x40>
    {
      return errorstate;
 800a4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ee:	e0a9      	b.n	800a644 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f002 fb90 	bl	800cc1c <SDIO_GetResponse>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2104      	movs	r1, #4
 800a508:	4618      	mov	r0, r3
 800a50a:	f002 fb87 	bl	800cc1c <SDIO_GetResponse>
 800a50e:	4602      	mov	r2, r0
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2108      	movs	r1, #8
 800a51a:	4618      	mov	r0, r3
 800a51c:	f002 fb7e 	bl	800cc1c <SDIO_GetResponse>
 800a520:	4602      	mov	r2, r0
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	210c      	movs	r1, #12
 800a52c:	4618      	mov	r0, r3
 800a52e:	f002 fb75 	bl	800cc1c <SDIO_GetResponse>
 800a532:	4602      	mov	r2, r0
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a53e:	2b03      	cmp	r3, #3
 800a540:	d00d      	beq.n	800a55e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f107 020e 	add.w	r2, r7, #14
 800a54a:	4611      	mov	r1, r2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f002 fd53 	bl	800cff8 <SDMMC_CmdSetRelAdd>
 800a552:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <SD_InitCard+0xae>
    {
      return errorstate;
 800a55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a55c:	e072      	b.n	800a644 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a562:	2b03      	cmp	r3, #3
 800a564:	d036      	beq.n	800a5d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a566:	89fb      	ldrh	r3, [r7, #14]
 800a568:	461a      	mov	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a576:	041b      	lsls	r3, r3, #16
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	f002 fd1d 	bl	800cfba <SDMMC_CmdSendCSD>
 800a580:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <SD_InitCard+0xdc>
    {
      return errorstate;
 800a588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a58a:	e05b      	b.n	800a644 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2100      	movs	r1, #0
 800a592:	4618      	mov	r0, r3
 800a594:	f002 fb42 	bl	800cc1c <SDIO_GetResponse>
 800a598:	4602      	mov	r2, r0
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2104      	movs	r1, #4
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f002 fb39 	bl	800cc1c <SDIO_GetResponse>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2108      	movs	r1, #8
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f002 fb30 	bl	800cc1c <SDIO_GetResponse>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	210c      	movs	r1, #12
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f002 fb27 	bl	800cc1c <SDIO_GetResponse>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2104      	movs	r1, #4
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f002 fb1e 	bl	800cc1c <SDIO_GetResponse>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	0d1a      	lsrs	r2, r3, #20
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a5e8:	f107 0310 	add.w	r3, r7, #16
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7ff fd6e 	bl	800a0d0 <HAL_SD_GetCardCSD>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d002      	beq.n	800a600 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a5fe:	e021      	b.n	800a644 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6819      	ldr	r1, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a608:	041b      	lsls	r3, r3, #16
 800a60a:	2200      	movs	r2, #0
 800a60c:	461c      	mov	r4, r3
 800a60e:	4615      	mov	r5, r2
 800a610:	4622      	mov	r2, r4
 800a612:	462b      	mov	r3, r5
 800a614:	4608      	mov	r0, r1
 800a616:	f002 fc0d 	bl	800ce34 <SDMMC_CmdSelDesel>
 800a61a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <SD_InitCard+0x176>
  {
    return errorstate;
 800a622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a624:	e00e      	b.n	800a644 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681d      	ldr	r5, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	466c      	mov	r4, sp
 800a62e:	f103 0210 	add.w	r2, r3, #16
 800a632:	ca07      	ldmia	r2, {r0, r1, r2}
 800a634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a638:	3304      	adds	r3, #4
 800a63a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a63c:	4628      	mov	r0, r5
 800a63e:	f002 fa51 	bl	800cae4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3740      	adds	r7, #64	@ 0x40
 800a648:	46bd      	mov	sp, r7
 800a64a:	bdb0      	pop	{r4, r5, r7, pc}

0800a64c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a654:	2300      	movs	r3, #0
 800a656:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	2300      	movs	r3, #0
 800a65e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4618      	mov	r0, r3
 800a666:	f002 fc08 	bl	800ce7a <SDMMC_CmdGoIdleState>
 800a66a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	e072      	b.n	800a75c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f002 fc1b 	bl	800ceb6 <SDMMC_CmdOperCond>
 800a680:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00d      	beq.n	800a6a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4618      	mov	r0, r3
 800a694:	f002 fbf1 	bl	800ce7a <SDMMC_CmdGoIdleState>
 800a698:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d004      	beq.n	800a6aa <SD_PowerON+0x5e>
    {
      return errorstate;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	e05b      	b.n	800a75c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d137      	bne.n	800a722 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f002 fc1b 	bl	800cef4 <SDMMC_CmdAppCommand>
 800a6be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d02d      	beq.n	800a722 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a6ca:	e047      	b.n	800a75c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f002 fc0e 	bl	800cef4 <SDMMC_CmdAppCommand>
 800a6d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <SD_PowerON+0x98>
    {
      return errorstate;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	e03b      	b.n	800a75c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	491e      	ldr	r1, [pc, #120]	@ (800a764 <SD_PowerON+0x118>)
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f002 fc24 	bl	800cf38 <SDMMC_CmdAppOperCommand>
 800a6f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a6fc:	e02e      	b.n	800a75c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2100      	movs	r1, #0
 800a704:	4618      	mov	r0, r3
 800a706:	f002 fa89 	bl	800cc1c <SDIO_GetResponse>
 800a70a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	0fdb      	lsrs	r3, r3, #31
 800a710:	2b01      	cmp	r3, #1
 800a712:	d101      	bne.n	800a718 <SD_PowerON+0xcc>
 800a714:	2301      	movs	r3, #1
 800a716:	e000      	b.n	800a71a <SD_PowerON+0xce>
 800a718:	2300      	movs	r3, #0
 800a71a:	613b      	str	r3, [r7, #16]

    count++;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	3301      	adds	r3, #1
 800a720:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a728:	4293      	cmp	r3, r2
 800a72a:	d802      	bhi.n	800a732 <SD_PowerON+0xe6>
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0cc      	beq.n	800a6cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a738:	4293      	cmp	r3, r2
 800a73a:	d902      	bls.n	800a742 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a73c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a740:	e00c      	b.n	800a75c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	645a      	str	r2, [r3, #68]	@ 0x44
 800a752:	e002      	b.n	800a75a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	c1100000 	.word	0xc1100000

0800a768 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d102      	bne.n	800a77e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a778:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a77c:	e018      	b.n	800a7b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a786:	041b      	lsls	r3, r3, #16
 800a788:	4619      	mov	r1, r3
 800a78a:	4610      	mov	r0, r2
 800a78c:	f002 fc55 	bl	800d03a <SDMMC_CmdSendStatus>
 800a790:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	e009      	b.n	800a7b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f002 fa3a 	bl	800cc1c <SDIO_GetResponse>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e041      	b.n	800a84e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7f8 fea4 	bl	800352c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	f000 fd30 	bl	800b25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b082      	sub	sp, #8
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2202      	movs	r2, #2
 800a862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6a1a      	ldr	r2, [r3, #32]
 800a86c:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a870:	4013      	ands	r3, r2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10f      	bne.n	800a896 <HAL_TIM_Base_DeInit+0x40>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6a1a      	ldr	r2, [r3, #32]
 800a87c:	f240 4344 	movw	r3, #1092	@ 0x444
 800a880:	4013      	ands	r3, r2
 800a882:	2b00      	cmp	r3, #0
 800a884:	d107      	bne.n	800a896 <HAL_TIM_Base_DeInit+0x40>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f022 0201 	bic.w	r2, r2, #1
 800a894:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7f8 ff08 	bl	80036ac <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b01      	cmp	r3, #1
 800a912:	d001      	beq.n	800a918 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e03c      	b.n	800a992 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a1e      	ldr	r2, [pc, #120]	@ (800a9a0 <HAL_TIM_Base_Start+0xa0>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d018      	beq.n	800a95c <HAL_TIM_Base_Start+0x5c>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a932:	d013      	beq.n	800a95c <HAL_TIM_Base_Start+0x5c>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a1a      	ldr	r2, [pc, #104]	@ (800a9a4 <HAL_TIM_Base_Start+0xa4>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d00e      	beq.n	800a95c <HAL_TIM_Base_Start+0x5c>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a19      	ldr	r2, [pc, #100]	@ (800a9a8 <HAL_TIM_Base_Start+0xa8>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d009      	beq.n	800a95c <HAL_TIM_Base_Start+0x5c>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a17      	ldr	r2, [pc, #92]	@ (800a9ac <HAL_TIM_Base_Start+0xac>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d004      	beq.n	800a95c <HAL_TIM_Base_Start+0x5c>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a16      	ldr	r2, [pc, #88]	@ (800a9b0 <HAL_TIM_Base_Start+0xb0>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d111      	bne.n	800a980 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	f003 0307 	and.w	r3, r3, #7
 800a966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2b06      	cmp	r3, #6
 800a96c:	d010      	beq.n	800a990 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f042 0201 	orr.w	r2, r2, #1
 800a97c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a97e:	e007      	b.n	800a990 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f042 0201 	orr.w	r2, r2, #1
 800a98e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	40010000 	.word	0x40010000
 800a9a4:	40000400 	.word	0x40000400
 800a9a8:	40000800 	.word	0x40000800
 800a9ac:	40000c00 	.word	0x40000c00
 800a9b0:	40014000 	.word	0x40014000

0800a9b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d001      	beq.n	800a9cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e044      	b.n	800aa56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68da      	ldr	r2, [r3, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f042 0201 	orr.w	r2, r2, #1
 800a9e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a1e      	ldr	r2, [pc, #120]	@ (800aa64 <HAL_TIM_Base_Start_IT+0xb0>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d018      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x6c>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9f6:	d013      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x6c>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a1a      	ldr	r2, [pc, #104]	@ (800aa68 <HAL_TIM_Base_Start_IT+0xb4>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d00e      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x6c>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a19      	ldr	r2, [pc, #100]	@ (800aa6c <HAL_TIM_Base_Start_IT+0xb8>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d009      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x6c>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a17      	ldr	r2, [pc, #92]	@ (800aa70 <HAL_TIM_Base_Start_IT+0xbc>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d004      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x6c>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a16      	ldr	r2, [pc, #88]	@ (800aa74 <HAL_TIM_Base_Start_IT+0xc0>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d111      	bne.n	800aa44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f003 0307 	and.w	r3, r3, #7
 800aa2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b06      	cmp	r3, #6
 800aa30:	d010      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f042 0201 	orr.w	r2, r2, #1
 800aa40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa42:	e007      	b.n	800aa54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f042 0201 	orr.w	r2, r2, #1
 800aa52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	40010000 	.word	0x40010000
 800aa68:	40000400 	.word	0x40000400
 800aa6c:	40000800 	.word	0x40000800
 800aa70:	40000c00 	.word	0x40000c00
 800aa74:	40014000 	.word	0x40014000

0800aa78 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f022 0201 	bic.w	r2, r2, #1
 800aa8e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6a1a      	ldr	r2, [r3, #32]
 800aa96:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10f      	bne.n	800aac0 <HAL_TIM_Base_Stop_IT+0x48>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6a1a      	ldr	r2, [r3, #32]
 800aaa6:	f240 4344 	movw	r3, #1092	@ 0x444
 800aaaa:	4013      	ands	r3, r2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d107      	bne.n	800aac0 <HAL_TIM_Base_Stop_IT+0x48>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f022 0201 	bic.w	r2, r2, #1
 800aabe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d101      	bne.n	800aae8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e041      	b.n	800ab6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d106      	bne.n	800ab02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f839 	bl	800ab74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2202      	movs	r2, #2
 800ab06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	3304      	adds	r3, #4
 800ab12:	4619      	mov	r1, r3
 800ab14:	4610      	mov	r0, r2
 800ab16:	f000 fba1 	bl	800b25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d109      	bne.n	800abac <HAL_TIM_PWM_Start+0x24>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	bf14      	ite	ne
 800aba4:	2301      	movne	r3, #1
 800aba6:	2300      	moveq	r3, #0
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	e022      	b.n	800abf2 <HAL_TIM_PWM_Start+0x6a>
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d109      	bne.n	800abc6 <HAL_TIM_PWM_Start+0x3e>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b01      	cmp	r3, #1
 800abbc:	bf14      	ite	ne
 800abbe:	2301      	movne	r3, #1
 800abc0:	2300      	moveq	r3, #0
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	e015      	b.n	800abf2 <HAL_TIM_PWM_Start+0x6a>
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b08      	cmp	r3, #8
 800abca:	d109      	bne.n	800abe0 <HAL_TIM_PWM_Start+0x58>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	bf14      	ite	ne
 800abd8:	2301      	movne	r3, #1
 800abda:	2300      	moveq	r3, #0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	e008      	b.n	800abf2 <HAL_TIM_PWM_Start+0x6a>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b01      	cmp	r3, #1
 800abea:	bf14      	ite	ne
 800abec:	2301      	movne	r3, #1
 800abee:	2300      	moveq	r3, #0
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e068      	b.n	800accc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d104      	bne.n	800ac0a <HAL_TIM_PWM_Start+0x82>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac08:	e013      	b.n	800ac32 <HAL_TIM_PWM_Start+0xaa>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b04      	cmp	r3, #4
 800ac0e:	d104      	bne.n	800ac1a <HAL_TIM_PWM_Start+0x92>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2202      	movs	r2, #2
 800ac14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac18:	e00b      	b.n	800ac32 <HAL_TIM_PWM_Start+0xaa>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b08      	cmp	r3, #8
 800ac1e:	d104      	bne.n	800ac2a <HAL_TIM_PWM_Start+0xa2>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac28:	e003      	b.n	800ac32 <HAL_TIM_PWM_Start+0xaa>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2202      	movs	r2, #2
 800ac2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2201      	movs	r2, #1
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fdb4 	bl	800b7a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a23      	ldr	r2, [pc, #140]	@ (800acd4 <HAL_TIM_PWM_Start+0x14c>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d107      	bne.n	800ac5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ac58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a1d      	ldr	r2, [pc, #116]	@ (800acd4 <HAL_TIM_PWM_Start+0x14c>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d018      	beq.n	800ac96 <HAL_TIM_PWM_Start+0x10e>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac6c:	d013      	beq.n	800ac96 <HAL_TIM_PWM_Start+0x10e>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a19      	ldr	r2, [pc, #100]	@ (800acd8 <HAL_TIM_PWM_Start+0x150>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d00e      	beq.n	800ac96 <HAL_TIM_PWM_Start+0x10e>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a17      	ldr	r2, [pc, #92]	@ (800acdc <HAL_TIM_PWM_Start+0x154>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d009      	beq.n	800ac96 <HAL_TIM_PWM_Start+0x10e>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a16      	ldr	r2, [pc, #88]	@ (800ace0 <HAL_TIM_PWM_Start+0x158>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d004      	beq.n	800ac96 <HAL_TIM_PWM_Start+0x10e>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a14      	ldr	r2, [pc, #80]	@ (800ace4 <HAL_TIM_PWM_Start+0x15c>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d111      	bne.n	800acba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	f003 0307 	and.w	r3, r3, #7
 800aca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2b06      	cmp	r3, #6
 800aca6:	d010      	beq.n	800acca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f042 0201 	orr.w	r2, r2, #1
 800acb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acb8:	e007      	b.n	800acca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f042 0201 	orr.w	r2, r2, #1
 800acc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	40010000 	.word	0x40010000
 800acd8:	40000400 	.word	0x40000400
 800acdc:	40000800 	.word	0x40000800
 800ace0:	40000c00 	.word	0x40000c00
 800ace4:	40014000 	.word	0x40014000

0800ace8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	f003 0302 	and.w	r3, r3, #2
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d122      	bne.n	800ad44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	f003 0302 	and.w	r3, r3, #2
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d11b      	bne.n	800ad44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f06f 0202 	mvn.w	r2, #2
 800ad14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	699b      	ldr	r3, [r3, #24]
 800ad22:	f003 0303 	and.w	r3, r3, #3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa77 	bl	800b21e <HAL_TIM_IC_CaptureCallback>
 800ad30:	e005      	b.n	800ad3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fa69 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fa7a 	bl	800b232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	f003 0304 	and.w	r3, r3, #4
 800ad4e:	2b04      	cmp	r3, #4
 800ad50:	d122      	bne.n	800ad98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d11b      	bne.n	800ad98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f06f 0204 	mvn.w	r2, #4
 800ad68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fa4d 	bl	800b21e <HAL_TIM_IC_CaptureCallback>
 800ad84:	e005      	b.n	800ad92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fa3f 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fa50 	bl	800b232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	f003 0308 	and.w	r3, r3, #8
 800ada2:	2b08      	cmp	r3, #8
 800ada4:	d122      	bne.n	800adec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	f003 0308 	and.w	r3, r3, #8
 800adb0:	2b08      	cmp	r3, #8
 800adb2:	d11b      	bne.n	800adec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f06f 0208 	mvn.w	r2, #8
 800adbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2204      	movs	r2, #4
 800adc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	f003 0303 	and.w	r3, r3, #3
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fa23 	bl	800b21e <HAL_TIM_IC_CaptureCallback>
 800add8:	e005      	b.n	800ade6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fa15 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fa26 	bl	800b232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	f003 0310 	and.w	r3, r3, #16
 800adf6:	2b10      	cmp	r3, #16
 800adf8:	d122      	bne.n	800ae40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f003 0310 	and.w	r3, r3, #16
 800ae04:	2b10      	cmp	r3, #16
 800ae06:	d11b      	bne.n	800ae40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f06f 0210 	mvn.w	r2, #16
 800ae10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2208      	movs	r2, #8
 800ae16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d003      	beq.n	800ae2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f9f9 	bl	800b21e <HAL_TIM_IC_CaptureCallback>
 800ae2c:	e005      	b.n	800ae3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f9eb 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f9fc 	bl	800b232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	f003 0301 	and.w	r3, r3, #1
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d10e      	bne.n	800ae6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	f003 0301 	and.w	r3, r3, #1
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d107      	bne.n	800ae6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f06f 0201 	mvn.w	r2, #1
 800ae64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7f8 f94e 	bl	8003108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae76:	2b80      	cmp	r3, #128	@ 0x80
 800ae78:	d10e      	bne.n	800ae98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae84:	2b80      	cmp	r3, #128	@ 0x80
 800ae86:	d107      	bne.n	800ae98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ae90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fd26 	bl	800b8e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aea2:	2b40      	cmp	r3, #64	@ 0x40
 800aea4:	d10e      	bne.n	800aec4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb0:	2b40      	cmp	r3, #64	@ 0x40
 800aeb2:	d107      	bne.n	800aec4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f9c1 	bl	800b246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	f003 0320 	and.w	r3, r3, #32
 800aece:	2b20      	cmp	r3, #32
 800aed0:	d10e      	bne.n	800aef0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f003 0320 	and.w	r3, r3, #32
 800aedc:	2b20      	cmp	r3, #32
 800aede:	d107      	bne.n	800aef0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f06f 0220 	mvn.w	r2, #32
 800aee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fcf0 	bl	800b8d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d101      	bne.n	800af16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af12:	2302      	movs	r3, #2
 800af14:	e0ae      	b.n	800b074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2201      	movs	r2, #1
 800af1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b0c      	cmp	r3, #12
 800af22:	f200 809f 	bhi.w	800b064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800af26:	a201      	add	r2, pc, #4	@ (adr r2, 800af2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2c:	0800af61 	.word	0x0800af61
 800af30:	0800b065 	.word	0x0800b065
 800af34:	0800b065 	.word	0x0800b065
 800af38:	0800b065 	.word	0x0800b065
 800af3c:	0800afa1 	.word	0x0800afa1
 800af40:	0800b065 	.word	0x0800b065
 800af44:	0800b065 	.word	0x0800b065
 800af48:	0800b065 	.word	0x0800b065
 800af4c:	0800afe3 	.word	0x0800afe3
 800af50:	0800b065 	.word	0x0800b065
 800af54:	0800b065 	.word	0x0800b065
 800af58:	0800b065 	.word	0x0800b065
 800af5c:	0800b023 	.word	0x0800b023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68b9      	ldr	r1, [r7, #8]
 800af66:	4618      	mov	r0, r3
 800af68:	f000 f9f8 	bl	800b35c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	699a      	ldr	r2, [r3, #24]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f042 0208 	orr.w	r2, r2, #8
 800af7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	699a      	ldr	r2, [r3, #24]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f022 0204 	bic.w	r2, r2, #4
 800af8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6999      	ldr	r1, [r3, #24]
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	691a      	ldr	r2, [r3, #16]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	430a      	orrs	r2, r1
 800af9c:	619a      	str	r2, [r3, #24]
      break;
 800af9e:	e064      	b.n	800b06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68b9      	ldr	r1, [r7, #8]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 fa3e 	bl	800b428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	699a      	ldr	r2, [r3, #24]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	699a      	ldr	r2, [r3, #24]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6999      	ldr	r1, [r3, #24]
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	021a      	lsls	r2, r3, #8
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	619a      	str	r2, [r3, #24]
      break;
 800afe0:	e043      	b.n	800b06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68b9      	ldr	r1, [r7, #8]
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 fa89 	bl	800b500 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	69da      	ldr	r2, [r3, #28]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f042 0208 	orr.w	r2, r2, #8
 800affc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	69da      	ldr	r2, [r3, #28]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f022 0204 	bic.w	r2, r2, #4
 800b00c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69d9      	ldr	r1, [r3, #28]
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	691a      	ldr	r2, [r3, #16]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	430a      	orrs	r2, r1
 800b01e:	61da      	str	r2, [r3, #28]
      break;
 800b020:	e023      	b.n	800b06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fad3 	bl	800b5d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	69da      	ldr	r2, [r3, #28]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b03c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	69da      	ldr	r2, [r3, #28]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b04c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	69d9      	ldr	r1, [r3, #28]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	021a      	lsls	r2, r3, #8
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	430a      	orrs	r2, r1
 800b060:	61da      	str	r2, [r3, #28]
      break;
 800b062:	e002      	b.n	800b06a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	75fb      	strb	r3, [r7, #23]
      break;
 800b068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b072:	7dfb      	ldrb	r3, [r7, #23]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b090:	2b01      	cmp	r3, #1
 800b092:	d101      	bne.n	800b098 <HAL_TIM_ConfigClockSource+0x1c>
 800b094:	2302      	movs	r3, #2
 800b096:	e0b4      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x186>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b0b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b0be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0d0:	d03e      	beq.n	800b150 <HAL_TIM_ConfigClockSource+0xd4>
 800b0d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0d6:	f200 8087 	bhi.w	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0de:	f000 8086 	beq.w	800b1ee <HAL_TIM_ConfigClockSource+0x172>
 800b0e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0e6:	d87f      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0e8:	2b70      	cmp	r3, #112	@ 0x70
 800b0ea:	d01a      	beq.n	800b122 <HAL_TIM_ConfigClockSource+0xa6>
 800b0ec:	2b70      	cmp	r3, #112	@ 0x70
 800b0ee:	d87b      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0f0:	2b60      	cmp	r3, #96	@ 0x60
 800b0f2:	d050      	beq.n	800b196 <HAL_TIM_ConfigClockSource+0x11a>
 800b0f4:	2b60      	cmp	r3, #96	@ 0x60
 800b0f6:	d877      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0f8:	2b50      	cmp	r3, #80	@ 0x50
 800b0fa:	d03c      	beq.n	800b176 <HAL_TIM_ConfigClockSource+0xfa>
 800b0fc:	2b50      	cmp	r3, #80	@ 0x50
 800b0fe:	d873      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b100:	2b40      	cmp	r3, #64	@ 0x40
 800b102:	d058      	beq.n	800b1b6 <HAL_TIM_ConfigClockSource+0x13a>
 800b104:	2b40      	cmp	r3, #64	@ 0x40
 800b106:	d86f      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b108:	2b30      	cmp	r3, #48	@ 0x30
 800b10a:	d064      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b10c:	2b30      	cmp	r3, #48	@ 0x30
 800b10e:	d86b      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b110:	2b20      	cmp	r3, #32
 800b112:	d060      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b114:	2b20      	cmp	r3, #32
 800b116:	d867      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d05c      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b11c:	2b10      	cmp	r3, #16
 800b11e:	d05a      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b120:	e062      	b.n	800b1e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6818      	ldr	r0, [r3, #0]
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	6899      	ldr	r1, [r3, #8]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f000 fb19 	bl	800b768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	609a      	str	r2, [r3, #8]
      break;
 800b14e:	e04f      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	6899      	ldr	r1, [r3, #8]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	f000 fb02 	bl	800b768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689a      	ldr	r2, [r3, #8]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b172:	609a      	str	r2, [r3, #8]
      break;
 800b174:	e03c      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6818      	ldr	r0, [r3, #0]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	6859      	ldr	r1, [r3, #4]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	461a      	mov	r2, r3
 800b184:	f000 fa76 	bl	800b674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2150      	movs	r1, #80	@ 0x50
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 facf 	bl	800b732 <TIM_ITRx_SetConfig>
      break;
 800b194:	e02c      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6818      	ldr	r0, [r3, #0]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	6859      	ldr	r1, [r3, #4]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f000 fa95 	bl	800b6d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2160      	movs	r1, #96	@ 0x60
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 fabf 	bl	800b732 <TIM_ITRx_SetConfig>
      break;
 800b1b4:	e01c      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6818      	ldr	r0, [r3, #0]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	6859      	ldr	r1, [r3, #4]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f000 fa56 	bl	800b674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2140      	movs	r1, #64	@ 0x40
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 faaf 	bl	800b732 <TIM_ITRx_SetConfig>
      break;
 800b1d4:	e00c      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f000 faa6 	bl	800b732 <TIM_ITRx_SetConfig>
      break;
 800b1e6:	e003      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ec:	e000      	b.n	800b1f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b1ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b200:	7bfb      	ldrb	r3, [r7, #15]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b212:	bf00      	nop
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b226:	bf00      	nop
 800b228:	370c      	adds	r7, #12
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b232:	b480      	push	{r7}
 800b234:	b083      	sub	sp, #12
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b23a:	bf00      	nop
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b246:	b480      	push	{r7}
 800b248:	b083      	sub	sp, #12
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b24e:	bf00      	nop
 800b250:	370c      	adds	r7, #12
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
	...

0800b25c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a34      	ldr	r2, [pc, #208]	@ (800b340 <TIM_Base_SetConfig+0xe4>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d00f      	beq.n	800b294 <TIM_Base_SetConfig+0x38>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b27a:	d00b      	beq.n	800b294 <TIM_Base_SetConfig+0x38>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a31      	ldr	r2, [pc, #196]	@ (800b344 <TIM_Base_SetConfig+0xe8>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d007      	beq.n	800b294 <TIM_Base_SetConfig+0x38>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a30      	ldr	r2, [pc, #192]	@ (800b348 <TIM_Base_SetConfig+0xec>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d003      	beq.n	800b294 <TIM_Base_SetConfig+0x38>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a2f      	ldr	r2, [pc, #188]	@ (800b34c <TIM_Base_SetConfig+0xf0>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d108      	bne.n	800b2a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b29a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a25      	ldr	r2, [pc, #148]	@ (800b340 <TIM_Base_SetConfig+0xe4>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d01b      	beq.n	800b2e6 <TIM_Base_SetConfig+0x8a>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2b4:	d017      	beq.n	800b2e6 <TIM_Base_SetConfig+0x8a>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a22      	ldr	r2, [pc, #136]	@ (800b344 <TIM_Base_SetConfig+0xe8>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d013      	beq.n	800b2e6 <TIM_Base_SetConfig+0x8a>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a21      	ldr	r2, [pc, #132]	@ (800b348 <TIM_Base_SetConfig+0xec>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d00f      	beq.n	800b2e6 <TIM_Base_SetConfig+0x8a>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a20      	ldr	r2, [pc, #128]	@ (800b34c <TIM_Base_SetConfig+0xf0>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d00b      	beq.n	800b2e6 <TIM_Base_SetConfig+0x8a>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b350 <TIM_Base_SetConfig+0xf4>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d007      	beq.n	800b2e6 <TIM_Base_SetConfig+0x8a>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a1e      	ldr	r2, [pc, #120]	@ (800b354 <TIM_Base_SetConfig+0xf8>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d003      	beq.n	800b2e6 <TIM_Base_SetConfig+0x8a>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b358 <TIM_Base_SetConfig+0xfc>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d108      	bne.n	800b2f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	4313      	orrs	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	689a      	ldr	r2, [r3, #8]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a08      	ldr	r2, [pc, #32]	@ (800b340 <TIM_Base_SetConfig+0xe4>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d103      	bne.n	800b32c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	691a      	ldr	r2, [r3, #16]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	615a      	str	r2, [r3, #20]
}
 800b332:	bf00      	nop
 800b334:	3714      	adds	r7, #20
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	40010000 	.word	0x40010000
 800b344:	40000400 	.word	0x40000400
 800b348:	40000800 	.word	0x40000800
 800b34c:	40000c00 	.word	0x40000c00
 800b350:	40014000 	.word	0x40014000
 800b354:	40014400 	.word	0x40014400
 800b358:	40014800 	.word	0x40014800

0800b35c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b087      	sub	sp, #28
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	f023 0201 	bic.w	r2, r3, #1
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f023 0303 	bic.w	r3, r3, #3
 800b392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	f023 0302 	bic.w	r3, r3, #2
 800b3a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a1c      	ldr	r2, [pc, #112]	@ (800b424 <TIM_OC1_SetConfig+0xc8>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d10c      	bne.n	800b3d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	f023 0308 	bic.w	r3, r3, #8
 800b3be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	697a      	ldr	r2, [r7, #20]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	f023 0304 	bic.w	r3, r3, #4
 800b3d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a13      	ldr	r2, [pc, #76]	@ (800b424 <TIM_OC1_SetConfig+0xc8>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d111      	bne.n	800b3fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	699b      	ldr	r3, [r3, #24]
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	697a      	ldr	r2, [r7, #20]
 800b416:	621a      	str	r2, [r3, #32]
}
 800b418:	bf00      	nop
 800b41a:	371c      	adds	r7, #28
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	40010000 	.word	0x40010000

0800b428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	f023 0210 	bic.w	r2, r3, #16
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	021b      	lsls	r3, r3, #8
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	4313      	orrs	r3, r2
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f023 0320 	bic.w	r3, r3, #32
 800b472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	011b      	lsls	r3, r3, #4
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a1e      	ldr	r2, [pc, #120]	@ (800b4fc <TIM_OC2_SetConfig+0xd4>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d10d      	bne.n	800b4a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b48e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	011b      	lsls	r3, r3, #4
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	4313      	orrs	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a15      	ldr	r2, [pc, #84]	@ (800b4fc <TIM_OC2_SetConfig+0xd4>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d113      	bne.n	800b4d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	695b      	ldr	r3, [r3, #20]
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	699b      	ldr	r3, [r3, #24]
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	621a      	str	r2, [r3, #32]
}
 800b4ee:	bf00      	nop
 800b4f0:	371c      	adds	r7, #28
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	40010000 	.word	0x40010000

0800b500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b500:	b480      	push	{r7}
 800b502:	b087      	sub	sp, #28
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a1b      	ldr	r3, [r3, #32]
 800b50e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b52e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f023 0303 	bic.w	r3, r3, #3
 800b536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	4313      	orrs	r3, r2
 800b540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	021b      	lsls	r3, r3, #8
 800b550:	697a      	ldr	r2, [r7, #20]
 800b552:	4313      	orrs	r3, r2
 800b554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a1d      	ldr	r2, [pc, #116]	@ (800b5d0 <TIM_OC3_SetConfig+0xd0>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d10d      	bne.n	800b57a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	021b      	lsls	r3, r3, #8
 800b56c:	697a      	ldr	r2, [r7, #20]
 800b56e:	4313      	orrs	r3, r2
 800b570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a14      	ldr	r2, [pc, #80]	@ (800b5d0 <TIM_OC3_SetConfig+0xd0>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d113      	bne.n	800b5aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	011b      	lsls	r3, r3, #4
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	011b      	lsls	r3, r3, #4
 800b5a4:	693a      	ldr	r2, [r7, #16]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	685a      	ldr	r2, [r3, #4]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	621a      	str	r2, [r3, #32]
}
 800b5c4:	bf00      	nop
 800b5c6:	371c      	adds	r7, #28
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	40010000 	.word	0x40010000

0800b5d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b60a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	021b      	lsls	r3, r3, #8
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	4313      	orrs	r3, r2
 800b616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b61e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	031b      	lsls	r3, r3, #12
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	4313      	orrs	r3, r2
 800b62a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a10      	ldr	r2, [pc, #64]	@ (800b670 <TIM_OC4_SetConfig+0x9c>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d109      	bne.n	800b648 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b63a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	019b      	lsls	r3, r3, #6
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	4313      	orrs	r3, r2
 800b646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	621a      	str	r2, [r3, #32]
}
 800b662:	bf00      	nop
 800b664:	371c      	adds	r7, #28
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	40010000 	.word	0x40010000

0800b674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b674:	b480      	push	{r7}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6a1b      	ldr	r3, [r3, #32]
 800b684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	f023 0201 	bic.w	r2, r3, #1
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b69e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	011b      	lsls	r3, r3, #4
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f023 030a 	bic.w	r3, r3, #10
 800b6b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	621a      	str	r2, [r3, #32]
}
 800b6c6:	bf00      	nop
 800b6c8:	371c      	adds	r7, #28
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b087      	sub	sp, #28
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	60f8      	str	r0, [r7, #12]
 800b6da:	60b9      	str	r1, [r7, #8]
 800b6dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6a1b      	ldr	r3, [r3, #32]
 800b6e2:	f023 0210 	bic.w	r2, r3, #16
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	699b      	ldr	r3, [r3, #24]
 800b6ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b6fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	031b      	lsls	r3, r3, #12
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	4313      	orrs	r3, r2
 800b706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b70e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	011b      	lsls	r3, r3, #4
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	4313      	orrs	r3, r2
 800b718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	697a      	ldr	r2, [r7, #20]
 800b71e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	621a      	str	r2, [r3, #32]
}
 800b726:	bf00      	nop
 800b728:	371c      	adds	r7, #28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b732:	b480      	push	{r7}
 800b734:	b085      	sub	sp, #20
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	4313      	orrs	r3, r2
 800b750:	f043 0307 	orr.w	r3, r3, #7
 800b754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	609a      	str	r2, [r3, #8]
}
 800b75c:	bf00      	nop
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b768:	b480      	push	{r7}
 800b76a:	b087      	sub	sp, #28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	021a      	lsls	r2, r3, #8
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	431a      	orrs	r2, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4313      	orrs	r3, r2
 800b790:	697a      	ldr	r2, [r7, #20]
 800b792:	4313      	orrs	r3, r2
 800b794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	697a      	ldr	r2, [r7, #20]
 800b79a:	609a      	str	r2, [r3, #8]
}
 800b79c:	bf00      	nop
 800b79e:	371c      	adds	r7, #28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	f003 031f 	and.w	r3, r3, #31
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b7c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6a1a      	ldr	r2, [r3, #32]
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	43db      	mvns	r3, r3
 800b7ca:	401a      	ands	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6a1a      	ldr	r2, [r3, #32]
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	f003 031f 	and.w	r3, r3, #31
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	621a      	str	r2, [r3, #32]
}
 800b7e6:	bf00      	nop
 800b7e8:	371c      	adds	r7, #28
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
	...

0800b7f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b804:	2b01      	cmp	r3, #1
 800b806:	d101      	bne.n	800b80c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b808:	2302      	movs	r3, #2
 800b80a:	e050      	b.n	800b8ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a1c      	ldr	r2, [pc, #112]	@ (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d018      	beq.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b858:	d013      	beq.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a18      	ldr	r2, [pc, #96]	@ (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d00e      	beq.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a16      	ldr	r2, [pc, #88]	@ (800b8c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d009      	beq.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a15      	ldr	r2, [pc, #84]	@ (800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d004      	beq.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a13      	ldr	r2, [pc, #76]	@ (800b8cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d10c      	bne.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	4313      	orrs	r3, r2
 800b892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	40010000 	.word	0x40010000
 800b8c0:	40000400 	.word	0x40000400
 800b8c4:	40000800 	.word	0x40000800
 800b8c8:	40000c00 	.word	0x40000c00
 800b8cc:	40014000 	.word	0x40014000

0800b8d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e03f      	b.n	800b98a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d106      	bne.n	800b924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7f7 fefe 	bl	8003720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2224      	movs	r2, #36	@ 0x24
 800b928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68da      	ldr	r2, [r3, #12]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b93a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fe5d 	bl	800c5fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	691a      	ldr	r2, [r3, #16]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	695a      	ldr	r2, [r3, #20]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68da      	ldr	r2, [r3, #12]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2220      	movs	r2, #32
 800b97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2220      	movs	r2, #32
 800b984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e021      	b.n	800b9e8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2224      	movs	r2, #36	@ 0x24
 800b9a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68da      	ldr	r2, [r3, #12]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b9ba:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7f7 ff3d 	bl	800383c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b08a      	sub	sp, #40	@ 0x28
 800b9f4:	af02      	add	r7, sp, #8
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	603b      	str	r3, [r7, #0]
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ba00:	2300      	movs	r3, #0
 800ba02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	2b20      	cmp	r3, #32
 800ba0e:	d17c      	bne.n	800bb0a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <HAL_UART_Transmit+0x2c>
 800ba16:	88fb      	ldrh	r3, [r7, #6]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e075      	b.n	800bb0c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d101      	bne.n	800ba2e <HAL_UART_Transmit+0x3e>
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	e06e      	b.n	800bb0c <HAL_UART_Transmit+0x11c>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2221      	movs	r2, #33	@ 0x21
 800ba40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba44:	f7f8 f91c 	bl	8003c80 <HAL_GetTick>
 800ba48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	88fa      	ldrh	r2, [r7, #6]
 800ba4e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	88fa      	ldrh	r2, [r7, #6]
 800ba54:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba5e:	d108      	bne.n	800ba72 <HAL_UART_Transmit+0x82>
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	691b      	ldr	r3, [r3, #16]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d104      	bne.n	800ba72 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	61bb      	str	r3, [r7, #24]
 800ba70:	e003      	b.n	800ba7a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba76:	2300      	movs	r3, #0
 800ba78:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800ba82:	e02a      	b.n	800bada <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	2180      	movs	r1, #128	@ 0x80
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f000 fb6e 	bl	800c170 <UART_WaitOnFlagUntilTimeout>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ba9a:	2303      	movs	r3, #3
 800ba9c:	e036      	b.n	800bb0c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10b      	bne.n	800babc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	461a      	mov	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bab2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	3302      	adds	r3, #2
 800bab8:	61bb      	str	r3, [r7, #24]
 800baba:	e007      	b.n	800bacc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	781a      	ldrb	r2, [r3, #0]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	3301      	adds	r3, #1
 800baca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	3b01      	subs	r3, #1
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bade:	b29b      	uxth	r3, r3
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1cf      	bne.n	800ba84 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	2200      	movs	r2, #0
 800baec:	2140      	movs	r1, #64	@ 0x40
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 fb3e 	bl	800c170 <UART_WaitOnFlagUntilTimeout>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bafa:	2303      	movs	r3, #3
 800bafc:	e006      	b.n	800bb0c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2220      	movs	r2, #32
 800bb02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e000      	b.n	800bb0c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bb0a:	2302      	movs	r3, #2
  }
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3720      	adds	r7, #32
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b20      	cmp	r3, #32
 800bb2c:	d11d      	bne.n	800bb6a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <HAL_UART_Receive_IT+0x26>
 800bb34:	88fb      	ldrh	r3, [r7, #6]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d101      	bne.n	800bb3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e016      	b.n	800bb6c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d101      	bne.n	800bb4c <HAL_UART_Receive_IT+0x38>
 800bb48:	2302      	movs	r3, #2
 800bb4a:	e00f      	b.n	800bb6c <HAL_UART_Receive_IT+0x58>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bb5a:	88fb      	ldrh	r3, [r7, #6]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	68b9      	ldr	r1, [r7, #8]
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f000 fb73 	bl	800c24c <UART_Start_Receive_IT>
 800bb66:	4603      	mov	r3, r0
 800bb68:	e000      	b.n	800bb6c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bb6a:	2302      	movs	r3, #2
  }
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08c      	sub	sp, #48	@ 0x30
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b20      	cmp	r3, #32
 800bb8c:	d152      	bne.n	800bc34 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800bb94:	88fb      	ldrh	r3, [r7, #6]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e04b      	b.n	800bc36 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d101      	bne.n	800bbac <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800bba8:	2302      	movs	r3, #2
 800bbaa:	e044      	b.n	800bc36 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800bbba:	88fb      	ldrh	r3, [r7, #6]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	68b9      	ldr	r1, [r7, #8]
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f000 fb43 	bl	800c24c <UART_Start_Receive_IT>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bbcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d12c      	bne.n	800bc2e <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d125      	bne.n	800bc28 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbdc:	2300      	movs	r3, #0
 800bbde:	613b      	str	r3, [r7, #16]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	613b      	str	r3, [r7, #16]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	613b      	str	r3, [r7, #16]
 800bbf0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	330c      	adds	r3, #12
 800bbf8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	e853 3f00 	ldrex	r3, [r3]
 800bc00:	617b      	str	r3, [r7, #20]
   return(result);
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f043 0310 	orr.w	r3, r3, #16
 800bc08:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	330c      	adds	r3, #12
 800bc10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc12:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc14:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc16:	6a39      	ldr	r1, [r7, #32]
 800bc18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc1a:	e841 2300 	strex	r3, r2, [r1]
 800bc1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e5      	bne.n	800bbf2 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800bc26:	e002      	b.n	800bc2e <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bc2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc32:	e000      	b.n	800bc36 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800bc34:	2302      	movs	r3, #2
  }
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3730      	adds	r7, #48	@ 0x30
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b0ba      	sub	sp, #232	@ 0xe8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bc66:	2300      	movs	r3, #0
 800bc68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bc72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc76:	f003 030f 	and.w	r3, r3, #15
 800bc7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bc7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10f      	bne.n	800bca6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc8a:	f003 0320 	and.w	r3, r3, #32
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d009      	beq.n	800bca6 <HAL_UART_IRQHandler+0x66>
 800bc92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc96:	f003 0320 	and.w	r3, r3, #32
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d003      	beq.n	800bca6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fbf1 	bl	800c486 <UART_Receive_IT>
      return;
 800bca4:	e256      	b.n	800c154 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f000 80de 	beq.w	800be6c <HAL_UART_IRQHandler+0x22c>
 800bcb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d106      	bne.n	800bcca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bcbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcc0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f000 80d1 	beq.w	800be6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bcca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00b      	beq.n	800bcee <HAL_UART_IRQHandler+0xae>
 800bcd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d005      	beq.n	800bcee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce6:	f043 0201 	orr.w	r2, r3, #1
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bcee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcf2:	f003 0304 	and.w	r3, r3, #4
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00b      	beq.n	800bd12 <HAL_UART_IRQHandler+0xd2>
 800bcfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d005      	beq.n	800bd12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd0a:	f043 0202 	orr.w	r2, r3, #2
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd16:	f003 0302 	and.w	r3, r3, #2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00b      	beq.n	800bd36 <HAL_UART_IRQHandler+0xf6>
 800bd1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd22:	f003 0301 	and.w	r3, r3, #1
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d005      	beq.n	800bd36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd2e:	f043 0204 	orr.w	r2, r3, #4
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bd36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd3a:	f003 0308 	and.w	r3, r3, #8
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d011      	beq.n	800bd66 <HAL_UART_IRQHandler+0x126>
 800bd42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd46:	f003 0320 	and.w	r3, r3, #32
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d105      	bne.n	800bd5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d005      	beq.n	800bd66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd5e:	f043 0208 	orr.w	r2, r3, #8
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 81ed 	beq.w	800c14a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd74:	f003 0320 	and.w	r3, r3, #32
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d008      	beq.n	800bd8e <HAL_UART_IRQHandler+0x14e>
 800bd7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd80:	f003 0320 	and.w	r3, r3, #32
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 fb7c 	bl	800c486 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd98:	2b40      	cmp	r3, #64	@ 0x40
 800bd9a:	bf0c      	ite	eq
 800bd9c:	2301      	moveq	r3, #1
 800bd9e:	2300      	movne	r3, #0
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdaa:	f003 0308 	and.w	r3, r3, #8
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d103      	bne.n	800bdba <HAL_UART_IRQHandler+0x17a>
 800bdb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d04f      	beq.n	800be5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fa84 	bl	800c2c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdca:	2b40      	cmp	r3, #64	@ 0x40
 800bdcc:	d141      	bne.n	800be52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3314      	adds	r3, #20
 800bdd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bddc:	e853 3f00 	ldrex	r3, [r3]
 800bde0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bde4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bde8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3314      	adds	r3, #20
 800bdf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bdfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bdfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800be06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be0a:	e841 2300 	strex	r3, r2, [r1]
 800be0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800be12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1d9      	bne.n	800bdce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d013      	beq.n	800be4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be26:	4a7d      	ldr	r2, [pc, #500]	@ (800c01c <HAL_UART_IRQHandler+0x3dc>)
 800be28:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be2e:	4618      	mov	r0, r3
 800be30:	f7f8 ff09 	bl	8004c46 <HAL_DMA_Abort_IT>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d016      	beq.n	800be68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800be44:	4610      	mov	r0, r2
 800be46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be48:	e00e      	b.n	800be68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7f7 f9b0 	bl	80031b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be50:	e00a      	b.n	800be68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7f7 f9ac 	bl	80031b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be58:	e006      	b.n	800be68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7f7 f9a8 	bl	80031b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800be66:	e170      	b.n	800c14a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be68:	bf00      	nop
    return;
 800be6a:	e16e      	b.n	800c14a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be70:	2b01      	cmp	r3, #1
 800be72:	f040 814a 	bne.w	800c10a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800be76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be7a:	f003 0310 	and.w	r3, r3, #16
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 8143 	beq.w	800c10a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be88:	f003 0310 	and.w	r3, r3, #16
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f000 813c 	beq.w	800c10a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be92:	2300      	movs	r3, #0
 800be94:	60bb      	str	r3, [r7, #8]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	60bb      	str	r3, [r7, #8]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	60bb      	str	r3, [r7, #8]
 800bea6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beb2:	2b40      	cmp	r3, #64	@ 0x40
 800beb4:	f040 80b4 	bne.w	800c020 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bec4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 8140 	beq.w	800c14e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bed6:	429a      	cmp	r2, r3
 800bed8:	f080 8139 	bcs.w	800c14e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bee2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bee8:	69db      	ldr	r3, [r3, #28]
 800beea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800beee:	f000 8088 	beq.w	800c002 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	330c      	adds	r3, #12
 800bef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf00:	e853 3f00 	ldrex	r3, [r3]
 800bf04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bf08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bf0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	330c      	adds	r3, #12
 800bf1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bf1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bf22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bf2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bf36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1d9      	bne.n	800bef2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3314      	adds	r3, #20
 800bf44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf48:	e853 3f00 	ldrex	r3, [r3]
 800bf4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bf4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf50:	f023 0301 	bic.w	r3, r3, #1
 800bf54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3314      	adds	r3, #20
 800bf5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bf62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bf66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bf6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bf6e:	e841 2300 	strex	r3, r2, [r1]
 800bf72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bf74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1e1      	bne.n	800bf3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	3314      	adds	r3, #20
 800bf80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf84:	e853 3f00 	ldrex	r3, [r3]
 800bf88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bf8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	3314      	adds	r3, #20
 800bf9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bf9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bfa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bfa4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bfa6:	e841 2300 	strex	r3, r2, [r1]
 800bfaa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bfac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d1e3      	bne.n	800bf7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2220      	movs	r2, #32
 800bfb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	330c      	adds	r3, #12
 800bfc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfca:	e853 3f00 	ldrex	r3, [r3]
 800bfce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bfd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfd2:	f023 0310 	bic.w	r3, r3, #16
 800bfd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	330c      	adds	r3, #12
 800bfe0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bfe4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bfe6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bfea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bfec:	e841 2300 	strex	r3, r2, [r1]
 800bff0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e3      	bne.n	800bfc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7f8 fdb2 	bl	8004b66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	1ad3      	subs	r3, r2, r3
 800c00e:	b29b      	uxth	r3, r3
 800c010:	4619      	mov	r1, r3
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f007 fe24 	bl	8013c60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c018:	e099      	b.n	800c14e <HAL_UART_IRQHandler+0x50e>
 800c01a:	bf00      	nop
 800c01c:	0800c38f 	.word	0x0800c38f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c028:	b29b      	uxth	r3, r3
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c034:	b29b      	uxth	r3, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 808b 	beq.w	800c152 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c03c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 8086 	beq.w	800c152 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	330c      	adds	r3, #12
 800c04c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c050:	e853 3f00 	ldrex	r3, [r3]
 800c054:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c05c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	330c      	adds	r3, #12
 800c066:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c06a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c06c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c070:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c072:	e841 2300 	strex	r3, r2, [r1]
 800c076:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e3      	bne.n	800c046 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	3314      	adds	r3, #20
 800c084:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c088:	e853 3f00 	ldrex	r3, [r3]
 800c08c:	623b      	str	r3, [r7, #32]
   return(result);
 800c08e:	6a3b      	ldr	r3, [r7, #32]
 800c090:	f023 0301 	bic.w	r3, r3, #1
 800c094:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	3314      	adds	r3, #20
 800c09e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c0a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800c0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0aa:	e841 2300 	strex	r3, r2, [r1]
 800c0ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1e3      	bne.n	800c07e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	330c      	adds	r3, #12
 800c0ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	e853 3f00 	ldrex	r3, [r3]
 800c0d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f023 0310 	bic.w	r3, r3, #16
 800c0da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	330c      	adds	r3, #12
 800c0e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c0e8:	61fa      	str	r2, [r7, #28]
 800c0ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ec:	69b9      	ldr	r1, [r7, #24]
 800c0ee:	69fa      	ldr	r2, [r7, #28]
 800c0f0:	e841 2300 	strex	r3, r2, [r1]
 800c0f4:	617b      	str	r3, [r7, #20]
   return(result);
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1e3      	bne.n	800c0c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f007 fdac 	bl	8013c60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c108:	e023      	b.n	800c152 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c10e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c112:	2b00      	cmp	r3, #0
 800c114:	d009      	beq.n	800c12a <HAL_UART_IRQHandler+0x4ea>
 800c116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c11a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d003      	beq.n	800c12a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f947 	bl	800c3b6 <UART_Transmit_IT>
    return;
 800c128:	e014      	b.n	800c154 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c12e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00e      	beq.n	800c154 <HAL_UART_IRQHandler+0x514>
 800c136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c13a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d008      	beq.n	800c154 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 f987 	bl	800c456 <UART_EndTransmit_IT>
    return;
 800c148:	e004      	b.n	800c154 <HAL_UART_IRQHandler+0x514>
    return;
 800c14a:	bf00      	nop
 800c14c:	e002      	b.n	800c154 <HAL_UART_IRQHandler+0x514>
      return;
 800c14e:	bf00      	nop
 800c150:	e000      	b.n	800c154 <HAL_UART_IRQHandler+0x514>
      return;
 800c152:	bf00      	nop
  }
}
 800c154:	37e8      	adds	r7, #232	@ 0xe8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop

0800c15c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b090      	sub	sp, #64	@ 0x40
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	603b      	str	r3, [r7, #0]
 800c17c:	4613      	mov	r3, r2
 800c17e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c180:	e050      	b.n	800c224 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c188:	d04c      	beq.n	800c224 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c18a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d007      	beq.n	800c1a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c190:	f7f7 fd76 	bl	8003c80 <HAL_GetTick>
 800c194:	4602      	mov	r2, r0
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d241      	bcs.n	800c224 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	330c      	adds	r3, #12
 800c1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1aa:	e853 3f00 	ldrex	r3, [r3]
 800c1ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800c1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	330c      	adds	r3, #12
 800c1be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c1c0:	637a      	str	r2, [r7, #52]	@ 0x34
 800c1c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c1c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c1c8:	e841 2300 	strex	r3, r2, [r1]
 800c1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1e5      	bne.n	800c1a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	3314      	adds	r3, #20
 800c1da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	e853 3f00 	ldrex	r3, [r3]
 800c1e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	f023 0301 	bic.w	r3, r3, #1
 800c1ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	3314      	adds	r3, #20
 800c1f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1f4:	623a      	str	r2, [r7, #32]
 800c1f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f8:	69f9      	ldr	r1, [r7, #28]
 800c1fa:	6a3a      	ldr	r2, [r7, #32]
 800c1fc:	e841 2300 	strex	r3, r2, [r1]
 800c200:	61bb      	str	r3, [r7, #24]
   return(result);
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1e5      	bne.n	800c1d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2220      	movs	r2, #32
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2220      	movs	r2, #32
 800c214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e00f      	b.n	800c244 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	4013      	ands	r3, r2
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	429a      	cmp	r2, r3
 800c232:	bf0c      	ite	eq
 800c234:	2301      	moveq	r3, #1
 800c236:	2300      	movne	r3, #0
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	461a      	mov	r2, r3
 800c23c:	79fb      	ldrb	r3, [r7, #7]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d09f      	beq.n	800c182 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3740      	adds	r7, #64	@ 0x40
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	4613      	mov	r3, r2
 800c258:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	88fa      	ldrh	r2, [r7, #6]
 800c264:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	88fa      	ldrh	r2, [r7, #6]
 800c26a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2200      	movs	r2, #0
 800c270:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2222      	movs	r2, #34	@ 0x22
 800c276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d007      	beq.n	800c29a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68da      	ldr	r2, [r3, #12]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c298:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	695a      	ldr	r2, [r3, #20]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f042 0201 	orr.w	r2, r2, #1
 800c2a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68da      	ldr	r2, [r3, #12]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f042 0220 	orr.w	r2, r2, #32
 800c2b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3714      	adds	r7, #20
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b095      	sub	sp, #84	@ 0x54
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	330c      	adds	r3, #12
 800c2d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2da:	e853 3f00 	ldrex	r3, [r3]
 800c2de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	330c      	adds	r3, #12
 800c2ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2f0:	643a      	str	r2, [r7, #64]	@ 0x40
 800c2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2f8:	e841 2300 	strex	r3, r2, [r1]
 800c2fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e5      	bne.n	800c2d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	3314      	adds	r3, #20
 800c30a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	e853 3f00 	ldrex	r3, [r3]
 800c312:	61fb      	str	r3, [r7, #28]
   return(result);
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	f023 0301 	bic.w	r3, r3, #1
 800c31a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3314      	adds	r3, #20
 800c322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c324:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c326:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c32a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c32c:	e841 2300 	strex	r3, r2, [r1]
 800c330:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1e5      	bne.n	800c304 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d119      	bne.n	800c374 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	330c      	adds	r3, #12
 800c346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	e853 3f00 	ldrex	r3, [r3]
 800c34e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	f023 0310 	bic.w	r3, r3, #16
 800c356:	647b      	str	r3, [r7, #68]	@ 0x44
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	330c      	adds	r3, #12
 800c35e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c360:	61ba      	str	r2, [r7, #24]
 800c362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	6979      	ldr	r1, [r7, #20]
 800c366:	69ba      	ldr	r2, [r7, #24]
 800c368:	e841 2300 	strex	r3, r2, [r1]
 800c36c:	613b      	str	r3, [r7, #16]
   return(result);
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1e5      	bne.n	800c340 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2220      	movs	r2, #32
 800c378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c382:	bf00      	nop
 800c384:	3754      	adds	r7, #84	@ 0x54
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c39a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f7f6 ff01 	bl	80031b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3ae:	bf00      	nop
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b085      	sub	sp, #20
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b21      	cmp	r3, #33	@ 0x21
 800c3c8:	d13e      	bne.n	800c448 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3d2:	d114      	bne.n	800c3fe <UART_Transmit_IT+0x48>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d110      	bne.n	800c3fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a1b      	ldr	r3, [r3, #32]
 800c3e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	881b      	ldrh	r3, [r3, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a1b      	ldr	r3, [r3, #32]
 800c3f6:	1c9a      	adds	r2, r3, #2
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	621a      	str	r2, [r3, #32]
 800c3fc:	e008      	b.n	800c410 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	1c59      	adds	r1, r3, #1
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	6211      	str	r1, [r2, #32]
 800c408:	781a      	ldrb	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c414:	b29b      	uxth	r3, r3
 800c416:	3b01      	subs	r3, #1
 800c418:	b29b      	uxth	r3, r3
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	4619      	mov	r1, r3
 800c41e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10f      	bne.n	800c444 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68da      	ldr	r2, [r3, #12]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c432:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68da      	ldr	r2, [r3, #12]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c442:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	e000      	b.n	800c44a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c448:	2302      	movs	r3, #2
  }
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr

0800c456 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b082      	sub	sp, #8
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68da      	ldr	r2, [r3, #12]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c46c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2220      	movs	r2, #32
 800c472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7ff fe70 	bl	800c15c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b08c      	sub	sp, #48	@ 0x30
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b22      	cmp	r3, #34	@ 0x22
 800c498:	f040 80ab 	bne.w	800c5f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4a4:	d117      	bne.n	800c4d6 <UART_Receive_IT+0x50>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d113      	bne.n	800c4d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ce:	1c9a      	adds	r2, r3, #2
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	629a      	str	r2, [r3, #40]	@ 0x28
 800c4d4:	e026      	b.n	800c524 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4e8:	d007      	beq.n	800c4fa <UART_Receive_IT+0x74>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10a      	bne.n	800c508 <UART_Receive_IT+0x82>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d106      	bne.n	800c508 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	b2da      	uxtb	r2, r3
 800c502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c504:	701a      	strb	r2, [r3, #0]
 800c506:	e008      	b.n	800c51a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c514:	b2da      	uxtb	r2, r3
 800c516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c518:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c528:	b29b      	uxth	r3, r3
 800c52a:	3b01      	subs	r3, #1
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	4619      	mov	r1, r3
 800c532:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c534:	2b00      	cmp	r3, #0
 800c536:	d15a      	bne.n	800c5ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	68da      	ldr	r2, [r3, #12]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f022 0220 	bic.w	r2, r2, #32
 800c546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68da      	ldr	r2, [r3, #12]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	695a      	ldr	r2, [r3, #20]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0201 	bic.w	r2, r2, #1
 800c566:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2220      	movs	r2, #32
 800c56c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c574:	2b01      	cmp	r3, #1
 800c576:	d135      	bne.n	800c5e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	330c      	adds	r3, #12
 800c584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	e853 3f00 	ldrex	r3, [r3]
 800c58c:	613b      	str	r3, [r7, #16]
   return(result);
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	f023 0310 	bic.w	r3, r3, #16
 800c594:	627b      	str	r3, [r7, #36]	@ 0x24
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	330c      	adds	r3, #12
 800c59c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c59e:	623a      	str	r2, [r7, #32]
 800c5a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a2:	69f9      	ldr	r1, [r7, #28]
 800c5a4:	6a3a      	ldr	r2, [r7, #32]
 800c5a6:	e841 2300 	strex	r3, r2, [r1]
 800c5aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1e5      	bne.n	800c57e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 0310 	and.w	r3, r3, #16
 800c5bc:	2b10      	cmp	r3, #16
 800c5be:	d10a      	bne.n	800c5d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	60fb      	str	r3, [r7, #12]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	60fb      	str	r3, [r7, #12]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c5da:	4619      	mov	r1, r3
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f007 fb3f 	bl	8013c60 <HAL_UARTEx_RxEventCallback>
 800c5e2:	e002      	b.n	800c5ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f002 fc4d 	bl	800ee84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e002      	b.n	800c5f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e000      	b.n	800c5f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c5f2:	2302      	movs	r3, #2
  }
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3730      	adds	r7, #48	@ 0x30
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c600:	b0c0      	sub	sp, #256	@ 0x100
 800c602:	af00      	add	r7, sp, #0
 800c604:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c618:	68d9      	ldr	r1, [r3, #12]
 800c61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	ea40 0301 	orr.w	r3, r0, r1
 800c624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	431a      	orrs	r2, r3
 800c634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c638:	695b      	ldr	r3, [r3, #20]
 800c63a:	431a      	orrs	r2, r3
 800c63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c640:	69db      	ldr	r3, [r3, #28]
 800c642:	4313      	orrs	r3, r2
 800c644:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c654:	f021 010c 	bic.w	r1, r1, #12
 800c658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c662:	430b      	orrs	r3, r1
 800c664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	695b      	ldr	r3, [r3, #20]
 800c66e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c676:	6999      	ldr	r1, [r3, #24]
 800c678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	ea40 0301 	orr.w	r3, r0, r1
 800c682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	4b8f      	ldr	r3, [pc, #572]	@ (800c8c8 <UART_SetConfig+0x2cc>)
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d005      	beq.n	800c69c <UART_SetConfig+0xa0>
 800c690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	4b8d      	ldr	r3, [pc, #564]	@ (800c8cc <UART_SetConfig+0x2d0>)
 800c698:	429a      	cmp	r2, r3
 800c69a:	d104      	bne.n	800c6a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c69c:	f7fc fb70 	bl	8008d80 <HAL_RCC_GetPCLK2Freq>
 800c6a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c6a4:	e003      	b.n	800c6ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c6a6:	f7fc fb57 	bl	8008d58 <HAL_RCC_GetPCLK1Freq>
 800c6aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6b8:	f040 810c 	bne.w	800c8d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c6bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c6c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c6ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c6ce:	4622      	mov	r2, r4
 800c6d0:	462b      	mov	r3, r5
 800c6d2:	1891      	adds	r1, r2, r2
 800c6d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c6d6:	415b      	adcs	r3, r3
 800c6d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c6da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c6de:	4621      	mov	r1, r4
 800c6e0:	eb12 0801 	adds.w	r8, r2, r1
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	eb43 0901 	adc.w	r9, r3, r1
 800c6ea:	f04f 0200 	mov.w	r2, #0
 800c6ee:	f04f 0300 	mov.w	r3, #0
 800c6f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c6f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c6fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c6fe:	4690      	mov	r8, r2
 800c700:	4699      	mov	r9, r3
 800c702:	4623      	mov	r3, r4
 800c704:	eb18 0303 	adds.w	r3, r8, r3
 800c708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c70c:	462b      	mov	r3, r5
 800c70e:	eb49 0303 	adc.w	r3, r9, r3
 800c712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c722:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c72a:	460b      	mov	r3, r1
 800c72c:	18db      	adds	r3, r3, r3
 800c72e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c730:	4613      	mov	r3, r2
 800c732:	eb42 0303 	adc.w	r3, r2, r3
 800c736:	657b      	str	r3, [r7, #84]	@ 0x54
 800c738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c73c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c740:	f7f4 faba 	bl	8000cb8 <__aeabi_uldivmod>
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	4b61      	ldr	r3, [pc, #388]	@ (800c8d0 <UART_SetConfig+0x2d4>)
 800c74a:	fba3 2302 	umull	r2, r3, r3, r2
 800c74e:	095b      	lsrs	r3, r3, #5
 800c750:	011c      	lsls	r4, r3, #4
 800c752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c756:	2200      	movs	r2, #0
 800c758:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c75c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c764:	4642      	mov	r2, r8
 800c766:	464b      	mov	r3, r9
 800c768:	1891      	adds	r1, r2, r2
 800c76a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c76c:	415b      	adcs	r3, r3
 800c76e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c774:	4641      	mov	r1, r8
 800c776:	eb12 0a01 	adds.w	sl, r2, r1
 800c77a:	4649      	mov	r1, r9
 800c77c:	eb43 0b01 	adc.w	fp, r3, r1
 800c780:	f04f 0200 	mov.w	r2, #0
 800c784:	f04f 0300 	mov.w	r3, #0
 800c788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c78c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c794:	4692      	mov	sl, r2
 800c796:	469b      	mov	fp, r3
 800c798:	4643      	mov	r3, r8
 800c79a:	eb1a 0303 	adds.w	r3, sl, r3
 800c79e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c7a2:	464b      	mov	r3, r9
 800c7a4:	eb4b 0303 	adc.w	r3, fp, r3
 800c7a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c7b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c7bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	18db      	adds	r3, r3, r3
 800c7c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	eb42 0303 	adc.w	r3, r2, r3
 800c7cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c7d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c7d6:	f7f4 fa6f 	bl	8000cb8 <__aeabi_uldivmod>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4b3b      	ldr	r3, [pc, #236]	@ (800c8d0 <UART_SetConfig+0x2d4>)
 800c7e2:	fba3 2301 	umull	r2, r3, r3, r1
 800c7e6:	095b      	lsrs	r3, r3, #5
 800c7e8:	2264      	movs	r2, #100	@ 0x64
 800c7ea:	fb02 f303 	mul.w	r3, r2, r3
 800c7ee:	1acb      	subs	r3, r1, r3
 800c7f0:	00db      	lsls	r3, r3, #3
 800c7f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c7f6:	4b36      	ldr	r3, [pc, #216]	@ (800c8d0 <UART_SetConfig+0x2d4>)
 800c7f8:	fba3 2302 	umull	r2, r3, r3, r2
 800c7fc:	095b      	lsrs	r3, r3, #5
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c804:	441c      	add	r4, r3
 800c806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c80a:	2200      	movs	r2, #0
 800c80c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c810:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c818:	4642      	mov	r2, r8
 800c81a:	464b      	mov	r3, r9
 800c81c:	1891      	adds	r1, r2, r2
 800c81e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c820:	415b      	adcs	r3, r3
 800c822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c828:	4641      	mov	r1, r8
 800c82a:	1851      	adds	r1, r2, r1
 800c82c:	6339      	str	r1, [r7, #48]	@ 0x30
 800c82e:	4649      	mov	r1, r9
 800c830:	414b      	adcs	r3, r1
 800c832:	637b      	str	r3, [r7, #52]	@ 0x34
 800c834:	f04f 0200 	mov.w	r2, #0
 800c838:	f04f 0300 	mov.w	r3, #0
 800c83c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c840:	4659      	mov	r1, fp
 800c842:	00cb      	lsls	r3, r1, #3
 800c844:	4651      	mov	r1, sl
 800c846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c84a:	4651      	mov	r1, sl
 800c84c:	00ca      	lsls	r2, r1, #3
 800c84e:	4610      	mov	r0, r2
 800c850:	4619      	mov	r1, r3
 800c852:	4603      	mov	r3, r0
 800c854:	4642      	mov	r2, r8
 800c856:	189b      	adds	r3, r3, r2
 800c858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c85c:	464b      	mov	r3, r9
 800c85e:	460a      	mov	r2, r1
 800c860:	eb42 0303 	adc.w	r3, r2, r3
 800c864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c874:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c87c:	460b      	mov	r3, r1
 800c87e:	18db      	adds	r3, r3, r3
 800c880:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c882:	4613      	mov	r3, r2
 800c884:	eb42 0303 	adc.w	r3, r2, r3
 800c888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c88a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c88e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c892:	f7f4 fa11 	bl	8000cb8 <__aeabi_uldivmod>
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	4b0d      	ldr	r3, [pc, #52]	@ (800c8d0 <UART_SetConfig+0x2d4>)
 800c89c:	fba3 1302 	umull	r1, r3, r3, r2
 800c8a0:	095b      	lsrs	r3, r3, #5
 800c8a2:	2164      	movs	r1, #100	@ 0x64
 800c8a4:	fb01 f303 	mul.w	r3, r1, r3
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	00db      	lsls	r3, r3, #3
 800c8ac:	3332      	adds	r3, #50	@ 0x32
 800c8ae:	4a08      	ldr	r2, [pc, #32]	@ (800c8d0 <UART_SetConfig+0x2d4>)
 800c8b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c8b4:	095b      	lsrs	r3, r3, #5
 800c8b6:	f003 0207 	and.w	r2, r3, #7
 800c8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4422      	add	r2, r4
 800c8c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c8c4:	e106      	b.n	800cad4 <UART_SetConfig+0x4d8>
 800c8c6:	bf00      	nop
 800c8c8:	40011000 	.word	0x40011000
 800c8cc:	40011400 	.word	0x40011400
 800c8d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c8d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c8de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c8e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c8e6:	4642      	mov	r2, r8
 800c8e8:	464b      	mov	r3, r9
 800c8ea:	1891      	adds	r1, r2, r2
 800c8ec:	6239      	str	r1, [r7, #32]
 800c8ee:	415b      	adcs	r3, r3
 800c8f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c8f6:	4641      	mov	r1, r8
 800c8f8:	1854      	adds	r4, r2, r1
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	eb43 0501 	adc.w	r5, r3, r1
 800c900:	f04f 0200 	mov.w	r2, #0
 800c904:	f04f 0300 	mov.w	r3, #0
 800c908:	00eb      	lsls	r3, r5, #3
 800c90a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c90e:	00e2      	lsls	r2, r4, #3
 800c910:	4614      	mov	r4, r2
 800c912:	461d      	mov	r5, r3
 800c914:	4643      	mov	r3, r8
 800c916:	18e3      	adds	r3, r4, r3
 800c918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c91c:	464b      	mov	r3, r9
 800c91e:	eb45 0303 	adc.w	r3, r5, r3
 800c922:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c932:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c936:	f04f 0200 	mov.w	r2, #0
 800c93a:	f04f 0300 	mov.w	r3, #0
 800c93e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c942:	4629      	mov	r1, r5
 800c944:	008b      	lsls	r3, r1, #2
 800c946:	4621      	mov	r1, r4
 800c948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c94c:	4621      	mov	r1, r4
 800c94e:	008a      	lsls	r2, r1, #2
 800c950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c954:	f7f4 f9b0 	bl	8000cb8 <__aeabi_uldivmod>
 800c958:	4602      	mov	r2, r0
 800c95a:	460b      	mov	r3, r1
 800c95c:	4b60      	ldr	r3, [pc, #384]	@ (800cae0 <UART_SetConfig+0x4e4>)
 800c95e:	fba3 2302 	umull	r2, r3, r3, r2
 800c962:	095b      	lsrs	r3, r3, #5
 800c964:	011c      	lsls	r4, r3, #4
 800c966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c96a:	2200      	movs	r2, #0
 800c96c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c970:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c978:	4642      	mov	r2, r8
 800c97a:	464b      	mov	r3, r9
 800c97c:	1891      	adds	r1, r2, r2
 800c97e:	61b9      	str	r1, [r7, #24]
 800c980:	415b      	adcs	r3, r3
 800c982:	61fb      	str	r3, [r7, #28]
 800c984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c988:	4641      	mov	r1, r8
 800c98a:	1851      	adds	r1, r2, r1
 800c98c:	6139      	str	r1, [r7, #16]
 800c98e:	4649      	mov	r1, r9
 800c990:	414b      	adcs	r3, r1
 800c992:	617b      	str	r3, [r7, #20]
 800c994:	f04f 0200 	mov.w	r2, #0
 800c998:	f04f 0300 	mov.w	r3, #0
 800c99c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c9a0:	4659      	mov	r1, fp
 800c9a2:	00cb      	lsls	r3, r1, #3
 800c9a4:	4651      	mov	r1, sl
 800c9a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c9aa:	4651      	mov	r1, sl
 800c9ac:	00ca      	lsls	r2, r1, #3
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	4642      	mov	r2, r8
 800c9b6:	189b      	adds	r3, r3, r2
 800c9b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c9bc:	464b      	mov	r3, r9
 800c9be:	460a      	mov	r2, r1
 800c9c0:	eb42 0303 	adc.w	r3, r2, r3
 800c9c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c9d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c9d4:	f04f 0200 	mov.w	r2, #0
 800c9d8:	f04f 0300 	mov.w	r3, #0
 800c9dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	008b      	lsls	r3, r1, #2
 800c9e4:	4641      	mov	r1, r8
 800c9e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c9ea:	4641      	mov	r1, r8
 800c9ec:	008a      	lsls	r2, r1, #2
 800c9ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c9f2:	f7f4 f961 	bl	8000cb8 <__aeabi_uldivmod>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	4611      	mov	r1, r2
 800c9fc:	4b38      	ldr	r3, [pc, #224]	@ (800cae0 <UART_SetConfig+0x4e4>)
 800c9fe:	fba3 2301 	umull	r2, r3, r3, r1
 800ca02:	095b      	lsrs	r3, r3, #5
 800ca04:	2264      	movs	r2, #100	@ 0x64
 800ca06:	fb02 f303 	mul.w	r3, r2, r3
 800ca0a:	1acb      	subs	r3, r1, r3
 800ca0c:	011b      	lsls	r3, r3, #4
 800ca0e:	3332      	adds	r3, #50	@ 0x32
 800ca10:	4a33      	ldr	r2, [pc, #204]	@ (800cae0 <UART_SetConfig+0x4e4>)
 800ca12:	fba2 2303 	umull	r2, r3, r2, r3
 800ca16:	095b      	lsrs	r3, r3, #5
 800ca18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca1c:	441c      	add	r4, r3
 800ca1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca22:	2200      	movs	r2, #0
 800ca24:	673b      	str	r3, [r7, #112]	@ 0x70
 800ca26:	677a      	str	r2, [r7, #116]	@ 0x74
 800ca28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ca2c:	4642      	mov	r2, r8
 800ca2e:	464b      	mov	r3, r9
 800ca30:	1891      	adds	r1, r2, r2
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	415b      	adcs	r3, r3
 800ca36:	60fb      	str	r3, [r7, #12]
 800ca38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca3c:	4641      	mov	r1, r8
 800ca3e:	1851      	adds	r1, r2, r1
 800ca40:	6039      	str	r1, [r7, #0]
 800ca42:	4649      	mov	r1, r9
 800ca44:	414b      	adcs	r3, r1
 800ca46:	607b      	str	r3, [r7, #4]
 800ca48:	f04f 0200 	mov.w	r2, #0
 800ca4c:	f04f 0300 	mov.w	r3, #0
 800ca50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ca54:	4659      	mov	r1, fp
 800ca56:	00cb      	lsls	r3, r1, #3
 800ca58:	4651      	mov	r1, sl
 800ca5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca5e:	4651      	mov	r1, sl
 800ca60:	00ca      	lsls	r2, r1, #3
 800ca62:	4610      	mov	r0, r2
 800ca64:	4619      	mov	r1, r3
 800ca66:	4603      	mov	r3, r0
 800ca68:	4642      	mov	r2, r8
 800ca6a:	189b      	adds	r3, r3, r2
 800ca6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca6e:	464b      	mov	r3, r9
 800ca70:	460a      	mov	r2, r1
 800ca72:	eb42 0303 	adc.w	r3, r2, r3
 800ca76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca82:	667a      	str	r2, [r7, #100]	@ 0x64
 800ca84:	f04f 0200 	mov.w	r2, #0
 800ca88:	f04f 0300 	mov.w	r3, #0
 800ca8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ca90:	4649      	mov	r1, r9
 800ca92:	008b      	lsls	r3, r1, #2
 800ca94:	4641      	mov	r1, r8
 800ca96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca9a:	4641      	mov	r1, r8
 800ca9c:	008a      	lsls	r2, r1, #2
 800ca9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800caa2:	f7f4 f909 	bl	8000cb8 <__aeabi_uldivmod>
 800caa6:	4602      	mov	r2, r0
 800caa8:	460b      	mov	r3, r1
 800caaa:	4b0d      	ldr	r3, [pc, #52]	@ (800cae0 <UART_SetConfig+0x4e4>)
 800caac:	fba3 1302 	umull	r1, r3, r3, r2
 800cab0:	095b      	lsrs	r3, r3, #5
 800cab2:	2164      	movs	r1, #100	@ 0x64
 800cab4:	fb01 f303 	mul.w	r3, r1, r3
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	011b      	lsls	r3, r3, #4
 800cabc:	3332      	adds	r3, #50	@ 0x32
 800cabe:	4a08      	ldr	r2, [pc, #32]	@ (800cae0 <UART_SetConfig+0x4e4>)
 800cac0:	fba2 2303 	umull	r2, r3, r2, r3
 800cac4:	095b      	lsrs	r3, r3, #5
 800cac6:	f003 020f 	and.w	r2, r3, #15
 800caca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4422      	add	r2, r4
 800cad2:	609a      	str	r2, [r3, #8]
}
 800cad4:	bf00      	nop
 800cad6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800cada:	46bd      	mov	sp, r7
 800cadc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cae0:	51eb851f 	.word	0x51eb851f

0800cae4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cae4:	b084      	sub	sp, #16
 800cae6:	b480      	push	{r7}
 800cae8:	b085      	sub	sp, #20
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	f107 001c 	add.w	r0, r7, #28
 800caf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cafa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cafc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cafe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800cb02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800cb06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800cb0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800cb0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800cb1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	431a      	orrs	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	b004      	add	sp, #16
 800cb38:	4770      	bx	lr

0800cb3a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cb3a:	b480      	push	{r7}
 800cb3c:	b083      	sub	sp, #12
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	370c      	adds	r7, #12
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr

0800cb76 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cb76:	b480      	push	{r7}
 800cb78:	b083      	sub	sp, #12
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2203      	movs	r2, #3
 800cb82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	370c      	adds	r7, #12
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cb92:	b480      	push	{r7}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 0303 	and.w	r3, r3, #3
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cbae:	b480      	push	{r7}
 800cbb0:	b085      	sub	sp, #20
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbcc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cbd2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cbd8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cbe8:	f023 030f 	bic.w	r3, r3, #15
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	431a      	orrs	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cc02:	b480      	push	{r7}
 800cc04:	b083      	sub	sp, #12
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	b2db      	uxtb	r3, r3
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	3314      	adds	r3, #20
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	4413      	add	r3, r2
 800cc30:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
}  
 800cc36:	4618      	mov	r0, r3
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cc42:	b480      	push	{r7}
 800cc44:	b085      	sub	sp, #20
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc68:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cc6e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cc74:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc80:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	431a      	orrs	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0

}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3714      	adds	r7, #20
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b088      	sub	sp, #32
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cca8:	2310      	movs	r3, #16
 800ccaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccac:	2340      	movs	r3, #64	@ 0x40
 800ccae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccba:	f107 0308 	add.w	r3, r7, #8
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f7ff ff74 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ccc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccca:	2110      	movs	r1, #16
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 f9d7 	bl	800d080 <SDMMC_GetCmdResp1>
 800ccd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccd4:	69fb      	ldr	r3, [r7, #28]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3720      	adds	r7, #32
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b088      	sub	sp, #32
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ccec:	2311      	movs	r3, #17
 800ccee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccf0:	2340      	movs	r3, #64	@ 0x40
 800ccf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccfe:	f107 0308 	add.w	r3, r7, #8
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff ff52 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cd0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd0e:	2111      	movs	r1, #17
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f9b5 	bl	800d080 <SDMMC_GetCmdResp1>
 800cd16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd18:	69fb      	ldr	r3, [r7, #28]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b088      	sub	sp, #32
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
 800cd2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cd30:	2312      	movs	r3, #18
 800cd32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd34:	2340      	movs	r3, #64	@ 0x40
 800cd36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd42:	f107 0308 	add.w	r3, r7, #8
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff ff30 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cd4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd52:	2112      	movs	r1, #18
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f993 	bl	800d080 <SDMMC_GetCmdResp1>
 800cd5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd5c:	69fb      	ldr	r3, [r7, #28]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3720      	adds	r7, #32
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b088      	sub	sp, #32
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cd74:	2318      	movs	r3, #24
 800cd76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd78:	2340      	movs	r3, #64	@ 0x40
 800cd7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd86:	f107 0308 	add.w	r3, r7, #8
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff ff0e 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cd92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd96:	2118      	movs	r1, #24
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 f971 	bl	800d080 <SDMMC_GetCmdResp1>
 800cd9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cda0:	69fb      	ldr	r3, [r7, #28]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3720      	adds	r7, #32
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b088      	sub	sp, #32
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cdb8:	2319      	movs	r3, #25
 800cdba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdbc:	2340      	movs	r3, #64	@ 0x40
 800cdbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdca:	f107 0308 	add.w	r3, r7, #8
 800cdce:	4619      	mov	r1, r3
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f7ff feec 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cdd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdda:	2119      	movs	r1, #25
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f94f 	bl	800d080 <SDMMC_GetCmdResp1>
 800cde2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cde4:	69fb      	ldr	r3, [r7, #28]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3720      	adds	r7, #32
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
	...

0800cdf0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b088      	sub	sp, #32
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cdfc:	230c      	movs	r3, #12
 800cdfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce00:	2340      	movs	r3, #64	@ 0x40
 800ce02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce04:	2300      	movs	r3, #0
 800ce06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce0e:	f107 0308 	add.w	r3, r7, #8
 800ce12:	4619      	mov	r1, r3
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f7ff feca 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ce1a:	4a05      	ldr	r2, [pc, #20]	@ (800ce30 <SDMMC_CmdStopTransfer+0x40>)
 800ce1c:	210c      	movs	r1, #12
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 f92e 	bl	800d080 <SDMMC_GetCmdResp1>
 800ce24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce26:	69fb      	ldr	r3, [r7, #28]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3720      	adds	r7, #32
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	05f5e100 	.word	0x05f5e100

0800ce34 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b08a      	sub	sp, #40	@ 0x28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ce44:	2307      	movs	r3, #7
 800ce46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce48:	2340      	movs	r3, #64	@ 0x40
 800ce4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce54:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce56:	f107 0310 	add.w	r3, r7, #16
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f7ff fea6 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ce62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce66:	2107      	movs	r1, #7
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f000 f909 	bl	800d080 <SDMMC_GetCmdResp1>
 800ce6e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800ce70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3728      	adds	r7, #40	@ 0x28
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b088      	sub	sp, #32
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ce82:	2300      	movs	r3, #0
 800ce84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ce86:	2300      	movs	r3, #0
 800ce88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce98:	f107 0308 	add.w	r3, r7, #8
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7ff fe85 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 fb23 	bl	800d4f0 <SDMMC_GetCmdError>
 800ceaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceac:	69fb      	ldr	r3, [r7, #28]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3720      	adds	r7, #32
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b088      	sub	sp, #32
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cebe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cec4:	2308      	movs	r3, #8
 800cec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cec8:	2340      	movs	r3, #64	@ 0x40
 800ceca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cecc:	2300      	movs	r3, #0
 800cece:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ced0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ced4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ced6:	f107 0308 	add.w	r3, r7, #8
 800ceda:	4619      	mov	r1, r3
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff fe66 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 fab6 	bl	800d454 <SDMMC_GetCmdResp7>
 800cee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceea:	69fb      	ldr	r3, [r7, #28]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3720      	adds	r7, #32
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b088      	sub	sp, #32
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cf02:	2337      	movs	r3, #55	@ 0x37
 800cf04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf06:	2340      	movs	r3, #64	@ 0x40
 800cf08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf14:	f107 0308 	add.w	r3, r7, #8
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff fe47 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cf20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf24:	2137      	movs	r1, #55	@ 0x37
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f8aa 	bl	800d080 <SDMMC_GetCmdResp1>
 800cf2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf2e:	69fb      	ldr	r3, [r7, #28]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3720      	adds	r7, #32
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cf48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cf4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cf4e:	2329      	movs	r3, #41	@ 0x29
 800cf50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf52:	2340      	movs	r3, #64	@ 0x40
 800cf54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf56:	2300      	movs	r3, #0
 800cf58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf60:	f107 0308 	add.w	r3, r7, #8
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7ff fe21 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 f9bd 	bl	800d2ec <SDMMC_GetCmdResp3>
 800cf72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf74:	69fb      	ldr	r3, [r7, #28]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3720      	adds	r7, #32
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b088      	sub	sp, #32
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cf86:	2300      	movs	r3, #0
 800cf88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf8a:	2302      	movs	r3, #2
 800cf8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cf8e:	23c0      	movs	r3, #192	@ 0xc0
 800cf90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf92:	2300      	movs	r3, #0
 800cf94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf9c:	f107 0308 	add.w	r3, r7, #8
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7ff fe03 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 f957 	bl	800d25c <SDMMC_GetCmdResp2>
 800cfae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfb0:	69fb      	ldr	r3, [r7, #28]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3720      	adds	r7, #32
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b088      	sub	sp, #32
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cfc8:	2309      	movs	r3, #9
 800cfca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cfcc:	23c0      	movs	r3, #192	@ 0xc0
 800cfce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfda:	f107 0308 	add.w	r3, r7, #8
 800cfde:	4619      	mov	r1, r3
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff fde4 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f938 	bl	800d25c <SDMMC_GetCmdResp2>
 800cfec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfee:	69fb      	ldr	r3, [r7, #28]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3720      	adds	r7, #32
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d002:	2300      	movs	r3, #0
 800d004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d006:	2303      	movs	r3, #3
 800d008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d00a:	2340      	movs	r3, #64	@ 0x40
 800d00c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d00e:	2300      	movs	r3, #0
 800d010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d016:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d018:	f107 0308 	add.w	r3, r7, #8
 800d01c:	4619      	mov	r1, r3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7ff fdc5 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	2103      	movs	r1, #3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f99d 	bl	800d368 <SDMMC_GetCmdResp6>
 800d02e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d030:	69fb      	ldr	r3, [r7, #28]
}
 800d032:	4618      	mov	r0, r3
 800d034:	3720      	adds	r7, #32
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b088      	sub	sp, #32
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d048:	230d      	movs	r3, #13
 800d04a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d04c:	2340      	movs	r3, #64	@ 0x40
 800d04e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d050:	2300      	movs	r3, #0
 800d052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d058:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d05a:	f107 0308 	add.w	r3, r7, #8
 800d05e:	4619      	mov	r1, r3
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff fda4 	bl	800cbae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d06a:	210d      	movs	r1, #13
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f807 	bl	800d080 <SDMMC_GetCmdResp1>
 800d072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d074:	69fb      	ldr	r3, [r7, #28]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3720      	adds	r7, #32
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
	...

0800d080 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b088      	sub	sp, #32
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	460b      	mov	r3, r1
 800d08a:	607a      	str	r2, [r7, #4]
 800d08c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d08e:	4b70      	ldr	r3, [pc, #448]	@ (800d250 <SDMMC_GetCmdResp1+0x1d0>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a70      	ldr	r2, [pc, #448]	@ (800d254 <SDMMC_GetCmdResp1+0x1d4>)
 800d094:	fba2 2303 	umull	r2, r3, r2, r3
 800d098:	0a5a      	lsrs	r2, r3, #9
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	fb02 f303 	mul.w	r3, r2, r3
 800d0a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	1e5a      	subs	r2, r3, #1
 800d0a6:	61fa      	str	r2, [r7, #28]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d102      	bne.n	800d0b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d0b0:	e0c9      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d0ef      	beq.n	800d0a2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1ea      	bne.n	800d0a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0d0:	f003 0304 	and.w	r3, r3, #4
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d004      	beq.n	800d0e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2204      	movs	r2, #4
 800d0dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0de:	2304      	movs	r3, #4
 800d0e0:	e0b1      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d004      	beq.n	800d0f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e0a6      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	22c5      	movs	r2, #197	@ 0xc5
 800d0fc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f7ff fd7f 	bl	800cc02 <SDIO_GetCommandResponse>
 800d104:	4603      	mov	r3, r0
 800d106:	461a      	mov	r2, r3
 800d108:	7afb      	ldrb	r3, [r7, #11]
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d001      	beq.n	800d112 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d10e:	2301      	movs	r3, #1
 800d110:	e099      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d112:	2100      	movs	r1, #0
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f7ff fd81 	bl	800cc1c <SDIO_GetResponse>
 800d11a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	4b4e      	ldr	r3, [pc, #312]	@ (800d258 <SDMMC_GetCmdResp1+0x1d8>)
 800d120:	4013      	ands	r3, r2
 800d122:	2b00      	cmp	r3, #0
 800d124:	d101      	bne.n	800d12a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d126:	2300      	movs	r3, #0
 800d128:	e08d      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	da02      	bge.n	800d136 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d134:	e087      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d140:	2340      	movs	r3, #64	@ 0x40
 800d142:	e080      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d001      	beq.n	800d152 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d14e:	2380      	movs	r3, #128	@ 0x80
 800d150:	e079      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d15c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d160:	e071      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d16c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d170:	e069      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d002      	beq.n	800d182 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d17c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d180:	e061      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d18c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d190:	e059      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d002      	beq.n	800d1a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d19c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1a0:	e051      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d002      	beq.n	800d1b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d1ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d1b0:	e049      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d1bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d1c0:	e041      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d1cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1d0:	e039      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d002      	beq.n	800d1e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d1dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d1e0:	e031      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d1ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d1f0:	e029      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d002      	beq.n	800d202 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d1fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d200:	e021      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d002      	beq.n	800d212 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d20c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d210:	e019      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d21c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d220:	e011      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d002      	beq.n	800d232 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d22c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d230:	e009      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	f003 0308 	and.w	r3, r3, #8
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d002      	beq.n	800d242 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d23c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d240:	e001      	b.n	800d246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d246:	4618      	mov	r0, r3
 800d248:	3720      	adds	r7, #32
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	20000014 	.word	0x20000014
 800d254:	10624dd3 	.word	0x10624dd3
 800d258:	fdffe008 	.word	0xfdffe008

0800d25c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d264:	4b1f      	ldr	r3, [pc, #124]	@ (800d2e4 <SDMMC_GetCmdResp2+0x88>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a1f      	ldr	r2, [pc, #124]	@ (800d2e8 <SDMMC_GetCmdResp2+0x8c>)
 800d26a:	fba2 2303 	umull	r2, r3, r2, r3
 800d26e:	0a5b      	lsrs	r3, r3, #9
 800d270:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d274:	fb02 f303 	mul.w	r3, r2, r3
 800d278:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	1e5a      	subs	r2, r3, #1
 800d27e:	60fa      	str	r2, [r7, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d102      	bne.n	800d28a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d284:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d288:	e026      	b.n	800d2d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d28e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d296:	2b00      	cmp	r3, #0
 800d298:	d0ef      	beq.n	800d27a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1ea      	bne.n	800d27a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2a8:	f003 0304 	and.w	r3, r3, #4
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d004      	beq.n	800d2ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2204      	movs	r2, #4
 800d2b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2b6:	2304      	movs	r3, #4
 800d2b8:	e00e      	b.n	800d2d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2be:	f003 0301 	and.w	r3, r3, #1
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d004      	beq.n	800d2d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e003      	b.n	800d2d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	22c5      	movs	r2, #197	@ 0xc5
 800d2d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3714      	adds	r7, #20
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr
 800d2e4:	20000014 	.word	0x20000014
 800d2e8:	10624dd3 	.word	0x10624dd3

0800d2ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2f4:	4b1a      	ldr	r3, [pc, #104]	@ (800d360 <SDMMC_GetCmdResp3+0x74>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a1a      	ldr	r2, [pc, #104]	@ (800d364 <SDMMC_GetCmdResp3+0x78>)
 800d2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d2fe:	0a5b      	lsrs	r3, r3, #9
 800d300:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d304:	fb02 f303 	mul.w	r3, r2, r3
 800d308:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	1e5a      	subs	r2, r3, #1
 800d30e:	60fa      	str	r2, [r7, #12]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d102      	bne.n	800d31a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d314:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d318:	e01b      	b.n	800d352 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d31e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d326:	2b00      	cmp	r3, #0
 800d328:	d0ef      	beq.n	800d30a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1ea      	bne.n	800d30a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d338:	f003 0304 	and.w	r3, r3, #4
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d004      	beq.n	800d34a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2204      	movs	r2, #4
 800d344:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d346:	2304      	movs	r3, #4
 800d348:	e003      	b.n	800d352 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	22c5      	movs	r2, #197	@ 0xc5
 800d34e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3714      	adds	r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	20000014 	.word	0x20000014
 800d364:	10624dd3 	.word	0x10624dd3

0800d368 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b088      	sub	sp, #32
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	460b      	mov	r3, r1
 800d372:	607a      	str	r2, [r7, #4]
 800d374:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d376:	4b35      	ldr	r3, [pc, #212]	@ (800d44c <SDMMC_GetCmdResp6+0xe4>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a35      	ldr	r2, [pc, #212]	@ (800d450 <SDMMC_GetCmdResp6+0xe8>)
 800d37c:	fba2 2303 	umull	r2, r3, r2, r3
 800d380:	0a5b      	lsrs	r3, r3, #9
 800d382:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d386:	fb02 f303 	mul.w	r3, r2, r3
 800d38a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	1e5a      	subs	r2, r3, #1
 800d390:	61fa      	str	r2, [r7, #28]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d102      	bne.n	800d39c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d396:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d39a:	e052      	b.n	800d442 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d0ef      	beq.n	800d38c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1ea      	bne.n	800d38c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ba:	f003 0304 	and.w	r3, r3, #4
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d004      	beq.n	800d3cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2204      	movs	r2, #4
 800d3c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3c8:	2304      	movs	r3, #4
 800d3ca:	e03a      	b.n	800d442 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e02f      	b.n	800d442 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f7ff fc0d 	bl	800cc02 <SDIO_GetCommandResponse>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	7afb      	ldrb	r3, [r7, #11]
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d001      	beq.n	800d3f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	e025      	b.n	800d442 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	22c5      	movs	r2, #197	@ 0xc5
 800d3fa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f7ff fc0c 	bl	800cc1c <SDIO_GetResponse>
 800d404:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d106      	bne.n	800d41e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	0c1b      	lsrs	r3, r3, #16
 800d414:	b29a      	uxth	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d41a:	2300      	movs	r3, #0
 800d41c:	e011      	b.n	800d442 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d42c:	e009      	b.n	800d442 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d434:	2b00      	cmp	r3, #0
 800d436:	d002      	beq.n	800d43e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d43c:	e001      	b.n	800d442 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d43e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d442:	4618      	mov	r0, r3
 800d444:	3720      	adds	r7, #32
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	20000014 	.word	0x20000014
 800d450:	10624dd3 	.word	0x10624dd3

0800d454 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d45c:	4b22      	ldr	r3, [pc, #136]	@ (800d4e8 <SDMMC_GetCmdResp7+0x94>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a22      	ldr	r2, [pc, #136]	@ (800d4ec <SDMMC_GetCmdResp7+0x98>)
 800d462:	fba2 2303 	umull	r2, r3, r2, r3
 800d466:	0a5b      	lsrs	r3, r3, #9
 800d468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d46c:	fb02 f303 	mul.w	r3, r2, r3
 800d470:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	1e5a      	subs	r2, r3, #1
 800d476:	60fa      	str	r2, [r7, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d102      	bne.n	800d482 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d47c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d480:	e02c      	b.n	800d4dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d486:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d0ef      	beq.n	800d472 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1ea      	bne.n	800d472 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4a0:	f003 0304 	and.w	r3, r3, #4
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d004      	beq.n	800d4b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2204      	movs	r2, #4
 800d4ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4ae:	2304      	movs	r3, #4
 800d4b0:	e014      	b.n	800d4dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4b6:	f003 0301 	and.w	r3, r3, #1
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d004      	beq.n	800d4c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e009      	b.n	800d4dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d002      	beq.n	800d4da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2240      	movs	r2, #64	@ 0x40
 800d4d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d4da:	2300      	movs	r3, #0
  
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	20000014 	.word	0x20000014
 800d4ec:	10624dd3 	.word	0x10624dd3

0800d4f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d4f8:	4b11      	ldr	r3, [pc, #68]	@ (800d540 <SDMMC_GetCmdError+0x50>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a11      	ldr	r2, [pc, #68]	@ (800d544 <SDMMC_GetCmdError+0x54>)
 800d4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d502:	0a5b      	lsrs	r3, r3, #9
 800d504:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d508:	fb02 f303 	mul.w	r3, r2, r3
 800d50c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	1e5a      	subs	r2, r3, #1
 800d512:	60fa      	str	r2, [r7, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d102      	bne.n	800d51e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d518:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d51c:	e009      	b.n	800d532 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d526:	2b00      	cmp	r3, #0
 800d528:	d0f1      	beq.n	800d50e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	22c5      	movs	r2, #197	@ 0xc5
 800d52e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3714      	adds	r7, #20
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	20000014 	.word	0x20000014
 800d544:	10624dd3 	.word	0x10624dd3

0800d548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d548:	b084      	sub	sp, #16
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	f107 001c 	add.w	r0, r7, #28
 800d556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d122      	bne.n	800d5a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d564:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800d574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d105      	bne.n	800d59a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f001 fc3e 	bl	800ee1c <USB_CoreReset>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	73fb      	strb	r3, [r7, #15]
 800d5a4:	e01a      	b.n	800d5dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f001 fc32 	bl	800ee1c <USB_CoreReset>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d5bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d106      	bne.n	800d5d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	639a      	str	r2, [r3, #56]	@ 0x38
 800d5ce:	e005      	b.n	800d5dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d10b      	bne.n	800d5fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	f043 0206 	orr.w	r2, r3, #6
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	f043 0220 	orr.w	r2, r3, #32
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d606:	b004      	add	sp, #16
 800d608:	4770      	bx	lr
	...

0800d60c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b087      	sub	sp, #28
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	4613      	mov	r3, r2
 800d618:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d61a:	79fb      	ldrb	r3, [r7, #7]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d165      	bne.n	800d6ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	4a41      	ldr	r2, [pc, #260]	@ (800d728 <USB_SetTurnaroundTime+0x11c>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d906      	bls.n	800d636 <USB_SetTurnaroundTime+0x2a>
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	4a40      	ldr	r2, [pc, #256]	@ (800d72c <USB_SetTurnaroundTime+0x120>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d202      	bcs.n	800d636 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d630:	230f      	movs	r3, #15
 800d632:	617b      	str	r3, [r7, #20]
 800d634:	e062      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	4a3c      	ldr	r2, [pc, #240]	@ (800d72c <USB_SetTurnaroundTime+0x120>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d306      	bcc.n	800d64c <USB_SetTurnaroundTime+0x40>
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	4a3b      	ldr	r2, [pc, #236]	@ (800d730 <USB_SetTurnaroundTime+0x124>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d202      	bcs.n	800d64c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d646:	230e      	movs	r3, #14
 800d648:	617b      	str	r3, [r7, #20]
 800d64a:	e057      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	4a38      	ldr	r2, [pc, #224]	@ (800d730 <USB_SetTurnaroundTime+0x124>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d306      	bcc.n	800d662 <USB_SetTurnaroundTime+0x56>
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	4a37      	ldr	r2, [pc, #220]	@ (800d734 <USB_SetTurnaroundTime+0x128>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d202      	bcs.n	800d662 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d65c:	230d      	movs	r3, #13
 800d65e:	617b      	str	r3, [r7, #20]
 800d660:	e04c      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	4a33      	ldr	r2, [pc, #204]	@ (800d734 <USB_SetTurnaroundTime+0x128>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d306      	bcc.n	800d678 <USB_SetTurnaroundTime+0x6c>
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	4a32      	ldr	r2, [pc, #200]	@ (800d738 <USB_SetTurnaroundTime+0x12c>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d802      	bhi.n	800d678 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d672:	230c      	movs	r3, #12
 800d674:	617b      	str	r3, [r7, #20]
 800d676:	e041      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	4a2f      	ldr	r2, [pc, #188]	@ (800d738 <USB_SetTurnaroundTime+0x12c>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d906      	bls.n	800d68e <USB_SetTurnaroundTime+0x82>
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	4a2e      	ldr	r2, [pc, #184]	@ (800d73c <USB_SetTurnaroundTime+0x130>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d802      	bhi.n	800d68e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d688:	230b      	movs	r3, #11
 800d68a:	617b      	str	r3, [r7, #20]
 800d68c:	e036      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	4a2a      	ldr	r2, [pc, #168]	@ (800d73c <USB_SetTurnaroundTime+0x130>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d906      	bls.n	800d6a4 <USB_SetTurnaroundTime+0x98>
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	4a29      	ldr	r2, [pc, #164]	@ (800d740 <USB_SetTurnaroundTime+0x134>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d802      	bhi.n	800d6a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d69e:	230a      	movs	r3, #10
 800d6a0:	617b      	str	r3, [r7, #20]
 800d6a2:	e02b      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	4a26      	ldr	r2, [pc, #152]	@ (800d740 <USB_SetTurnaroundTime+0x134>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d906      	bls.n	800d6ba <USB_SetTurnaroundTime+0xae>
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	4a25      	ldr	r2, [pc, #148]	@ (800d744 <USB_SetTurnaroundTime+0x138>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d202      	bcs.n	800d6ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d6b4:	2309      	movs	r3, #9
 800d6b6:	617b      	str	r3, [r7, #20]
 800d6b8:	e020      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	4a21      	ldr	r2, [pc, #132]	@ (800d744 <USB_SetTurnaroundTime+0x138>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d306      	bcc.n	800d6d0 <USB_SetTurnaroundTime+0xc4>
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	4a20      	ldr	r2, [pc, #128]	@ (800d748 <USB_SetTurnaroundTime+0x13c>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d802      	bhi.n	800d6d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d6ca:	2308      	movs	r3, #8
 800d6cc:	617b      	str	r3, [r7, #20]
 800d6ce:	e015      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	4a1d      	ldr	r2, [pc, #116]	@ (800d748 <USB_SetTurnaroundTime+0x13c>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d906      	bls.n	800d6e6 <USB_SetTurnaroundTime+0xda>
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	4a1c      	ldr	r2, [pc, #112]	@ (800d74c <USB_SetTurnaroundTime+0x140>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d202      	bcs.n	800d6e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d6e0:	2307      	movs	r3, #7
 800d6e2:	617b      	str	r3, [r7, #20]
 800d6e4:	e00a      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d6e6:	2306      	movs	r3, #6
 800d6e8:	617b      	str	r3, [r7, #20]
 800d6ea:	e007      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d6ec:	79fb      	ldrb	r3, [r7, #7]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d102      	bne.n	800d6f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d6f2:	2309      	movs	r3, #9
 800d6f4:	617b      	str	r3, [r7, #20]
 800d6f6:	e001      	b.n	800d6fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d6f8:	2309      	movs	r3, #9
 800d6fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	68da      	ldr	r2, [r3, #12]
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	029b      	lsls	r3, r3, #10
 800d710:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d714:	431a      	orrs	r2, r3
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d71a:	2300      	movs	r3, #0
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	371c      	adds	r7, #28
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr
 800d728:	00d8acbf 	.word	0x00d8acbf
 800d72c:	00e4e1c0 	.word	0x00e4e1c0
 800d730:	00f42400 	.word	0x00f42400
 800d734:	01067380 	.word	0x01067380
 800d738:	011a499f 	.word	0x011a499f
 800d73c:	01312cff 	.word	0x01312cff
 800d740:	014ca43f 	.word	0x014ca43f
 800d744:	016e3600 	.word	0x016e3600
 800d748:	01a6ab1f 	.word	0x01a6ab1f
 800d74c:	01e84800 	.word	0x01e84800

0800d750 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	f043 0201 	orr.w	r2, r3, #1
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d764:	2300      	movs	r3, #0
}
 800d766:	4618      	mov	r0, r3
 800d768:	370c      	adds	r7, #12
 800d76a:	46bd      	mov	sp, r7
 800d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d770:	4770      	bx	lr

0800d772 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d772:	b480      	push	{r7}
 800d774:	b083      	sub	sp, #12
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	f023 0201 	bic.w	r2, r3, #1
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d786:	2300      	movs	r3, #0
}
 800d788:	4618      	mov	r0, r3
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	460b      	mov	r3, r1
 800d79e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d7b0:	78fb      	ldrb	r3, [r7, #3]
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d115      	bne.n	800d7e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d7c2:	2001      	movs	r0, #1
 800d7c4:	f7f6 fa68 	bl	8003c98 <HAL_Delay>
      ms++;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f001 fa94 	bl	800ecfc <USB_GetMode>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d01e      	beq.n	800d818 <USB_SetCurrentMode+0x84>
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b31      	cmp	r3, #49	@ 0x31
 800d7de:	d9f0      	bls.n	800d7c2 <USB_SetCurrentMode+0x2e>
 800d7e0:	e01a      	b.n	800d818 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d7e2:	78fb      	ldrb	r3, [r7, #3]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d115      	bne.n	800d814 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d7f4:	2001      	movs	r0, #1
 800d7f6:	f7f6 fa4f 	bl	8003c98 <HAL_Delay>
      ms++;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f001 fa7b 	bl	800ecfc <USB_GetMode>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d005      	beq.n	800d818 <USB_SetCurrentMode+0x84>
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b31      	cmp	r3, #49	@ 0x31
 800d810:	d9f0      	bls.n	800d7f4 <USB_SetCurrentMode+0x60>
 800d812:	e001      	b.n	800d818 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d814:	2301      	movs	r3, #1
 800d816:	e005      	b.n	800d824 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b32      	cmp	r3, #50	@ 0x32
 800d81c:	d101      	bne.n	800d822 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d81e:	2301      	movs	r3, #1
 800d820:	e000      	b.n	800d824 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d82c:	b084      	sub	sp, #16
 800d82e:	b580      	push	{r7, lr}
 800d830:	b086      	sub	sp, #24
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d83a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d83e:	2300      	movs	r3, #0
 800d840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d846:	2300      	movs	r3, #0
 800d848:	613b      	str	r3, [r7, #16]
 800d84a:	e009      	b.n	800d860 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	3340      	adds	r3, #64	@ 0x40
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	4413      	add	r3, r2
 800d856:	2200      	movs	r2, #0
 800d858:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	3301      	adds	r3, #1
 800d85e:	613b      	str	r3, [r7, #16]
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	2b0e      	cmp	r3, #14
 800d864:	d9f2      	bls.n	800d84c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d11c      	bne.n	800d8a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d87a:	f043 0302 	orr.w	r3, r3, #2
 800d87e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d884:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d890:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d89c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	639a      	str	r2, [r3, #56]	@ 0x38
 800d8a4:	e00b      	b.n	800d8be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8b6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8d8:	461a      	mov	r2, r3
 800d8da:	680b      	ldr	r3, [r1, #0]
 800d8dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d10c      	bne.n	800d8fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d104      	bne.n	800d8f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d8ea:	2100      	movs	r1, #0
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 f965 	bl	800dbbc <USB_SetDevSpeed>
 800d8f2:	e008      	b.n	800d906 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d8f4:	2101      	movs	r1, #1
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f960 	bl	800dbbc <USB_SetDevSpeed>
 800d8fc:	e003      	b.n	800d906 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d8fe:	2103      	movs	r1, #3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 f95b 	bl	800dbbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d906:	2110      	movs	r1, #16
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 f8f3 	bl	800daf4 <USB_FlushTxFifo>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d914:	2301      	movs	r3, #1
 800d916:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 f91f 	bl	800db5c <USB_FlushRxFifo>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d924:	2301      	movs	r3, #1
 800d926:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d92e:	461a      	mov	r2, r3
 800d930:	2300      	movs	r3, #0
 800d932:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d93a:	461a      	mov	r2, r3
 800d93c:	2300      	movs	r3, #0
 800d93e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d946:	461a      	mov	r2, r3
 800d948:	2300      	movs	r3, #0
 800d94a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d94c:	2300      	movs	r3, #0
 800d94e:	613b      	str	r3, [r7, #16]
 800d950:	e043      	b.n	800d9da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	015a      	lsls	r2, r3, #5
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	4413      	add	r3, r2
 800d95a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d968:	d118      	bne.n	800d99c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10a      	bne.n	800d986 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	015a      	lsls	r2, r3, #5
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	4413      	add	r3, r2
 800d978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d97c:	461a      	mov	r2, r3
 800d97e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d982:	6013      	str	r3, [r2, #0]
 800d984:	e013      	b.n	800d9ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	015a      	lsls	r2, r3, #5
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	4413      	add	r3, r2
 800d98e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d992:	461a      	mov	r2, r3
 800d994:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d998:	6013      	str	r3, [r2, #0]
 800d99a:	e008      	b.n	800d9ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	015a      	lsls	r2, r3, #5
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	015a      	lsls	r2, r3, #5
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	2300      	movs	r3, #0
 800d9be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	015a      	lsls	r2, r3, #5
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d9d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	613b      	str	r3, [r7, #16]
 800d9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9dc:	693a      	ldr	r2, [r7, #16]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d3b7      	bcc.n	800d952 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	613b      	str	r3, [r7, #16]
 800d9e6:	e043      	b.n	800da70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	015a      	lsls	r2, r3, #5
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d9fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d9fe:	d118      	bne.n	800da32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10a      	bne.n	800da1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	015a      	lsls	r2, r3, #5
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	4413      	add	r3, r2
 800da0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da12:	461a      	mov	r2, r3
 800da14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800da18:	6013      	str	r3, [r2, #0]
 800da1a:	e013      	b.n	800da44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	015a      	lsls	r2, r3, #5
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	4413      	add	r3, r2
 800da24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da28:	461a      	mov	r2, r3
 800da2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800da2e:	6013      	str	r3, [r2, #0]
 800da30:	e008      	b.n	800da44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	015a      	lsls	r2, r3, #5
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	4413      	add	r3, r2
 800da3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da3e:	461a      	mov	r2, r3
 800da40:	2300      	movs	r3, #0
 800da42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	015a      	lsls	r2, r3, #5
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	4413      	add	r3, r2
 800da4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da50:	461a      	mov	r2, r3
 800da52:	2300      	movs	r3, #0
 800da54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	015a      	lsls	r2, r3, #5
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	4413      	add	r3, r2
 800da5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da62:	461a      	mov	r2, r3
 800da64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800da68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	3301      	adds	r3, #1
 800da6e:	613b      	str	r3, [r7, #16]
 800da70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da72:	693a      	ldr	r2, [r7, #16]
 800da74:	429a      	cmp	r2, r3
 800da76:	d3b7      	bcc.n	800d9e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da7e:	691b      	ldr	r3, [r3, #16]
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800da86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800da98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800da9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d105      	bne.n	800daac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	f043 0210 	orr.w	r2, r3, #16
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	699a      	ldr	r2, [r3, #24]
 800dab0:	4b0f      	ldr	r3, [pc, #60]	@ (800daf0 <USB_DevInit+0x2c4>)
 800dab2:	4313      	orrs	r3, r2
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d005      	beq.n	800daca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	f043 0208 	orr.w	r2, r3, #8
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800daca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d107      	bne.n	800dae0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dad8:	f043 0304 	orr.w	r3, r3, #4
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3718      	adds	r7, #24
 800dae6:	46bd      	mov	sp, r7
 800dae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800daec:	b004      	add	sp, #16
 800daee:	4770      	bx	lr
 800daf0:	803c3800 	.word	0x803c3800

0800daf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dafe:	2300      	movs	r3, #0
 800db00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	3301      	adds	r3, #1
 800db06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	4a13      	ldr	r2, [pc, #76]	@ (800db58 <USB_FlushTxFifo+0x64>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d901      	bls.n	800db14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800db10:	2303      	movs	r3, #3
 800db12:	e01b      	b.n	800db4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	daf2      	bge.n	800db02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800db1c:	2300      	movs	r3, #0
 800db1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	019b      	lsls	r3, r3, #6
 800db24:	f043 0220 	orr.w	r2, r3, #32
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	3301      	adds	r3, #1
 800db30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	4a08      	ldr	r2, [pc, #32]	@ (800db58 <USB_FlushTxFifo+0x64>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d901      	bls.n	800db3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e006      	b.n	800db4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	f003 0320 	and.w	r3, r3, #32
 800db46:	2b20      	cmp	r3, #32
 800db48:	d0f0      	beq.n	800db2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3714      	adds	r7, #20
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	00030d40 	.word	0x00030d40

0800db5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b085      	sub	sp, #20
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db64:	2300      	movs	r3, #0
 800db66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	3301      	adds	r3, #1
 800db6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	4a11      	ldr	r2, [pc, #68]	@ (800dbb8 <USB_FlushRxFifo+0x5c>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d901      	bls.n	800db7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800db76:	2303      	movs	r3, #3
 800db78:	e018      	b.n	800dbac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	daf2      	bge.n	800db68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800db82:	2300      	movs	r3, #0
 800db84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2210      	movs	r2, #16
 800db8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	3301      	adds	r3, #1
 800db90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	4a08      	ldr	r2, [pc, #32]	@ (800dbb8 <USB_FlushRxFifo+0x5c>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d901      	bls.n	800db9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800db9a:	2303      	movs	r3, #3
 800db9c:	e006      	b.n	800dbac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	f003 0310 	and.w	r3, r3, #16
 800dba6:	2b10      	cmp	r3, #16
 800dba8:	d0f0      	beq.n	800db8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3714      	adds	r7, #20
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	00030d40 	.word	0x00030d40

0800dbbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	78fb      	ldrb	r3, [r7, #3]
 800dbd6:	68f9      	ldr	r1, [r7, #12]
 800dbd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dbee:	b480      	push	{r7}
 800dbf0:	b087      	sub	sp, #28
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	f003 0306 	and.w	r3, r3, #6
 800dc06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d102      	bne.n	800dc14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	75fb      	strb	r3, [r7, #23]
 800dc12:	e00a      	b.n	800dc2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d002      	beq.n	800dc20 <USB_GetDevSpeed+0x32>
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2b06      	cmp	r3, #6
 800dc1e:	d102      	bne.n	800dc26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dc20:	2302      	movs	r3, #2
 800dc22:	75fb      	strb	r3, [r7, #23]
 800dc24:	e001      	b.n	800dc2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dc26:	230f      	movs	r3, #15
 800dc28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dc2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	371c      	adds	r7, #28
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	785b      	ldrb	r3, [r3, #1]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d13a      	bne.n	800dcca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc5a:	69da      	ldr	r2, [r3, #28]
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	f003 030f 	and.w	r3, r3, #15
 800dc64:	2101      	movs	r1, #1
 800dc66:	fa01 f303 	lsl.w	r3, r1, r3
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	68f9      	ldr	r1, [r7, #12]
 800dc6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dc72:	4313      	orrs	r3, r2
 800dc74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	015a      	lsls	r2, r3, #5
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d155      	bne.n	800dd38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	015a      	lsls	r2, r3, #5
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	4413      	add	r3, r2
 800dc94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	791b      	ldrb	r3, [r3, #4]
 800dca6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dca8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	059b      	lsls	r3, r3, #22
 800dcae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	68ba      	ldr	r2, [r7, #8]
 800dcb4:	0151      	lsls	r1, r2, #5
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	440a      	add	r2, r1
 800dcba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dcbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dcc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dcc6:	6013      	str	r3, [r2, #0]
 800dcc8:	e036      	b.n	800dd38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcd0:	69da      	ldr	r2, [r3, #28]
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	f003 030f 	and.w	r3, r3, #15
 800dcda:	2101      	movs	r1, #1
 800dcdc:	fa01 f303 	lsl.w	r3, r1, r3
 800dce0:	041b      	lsls	r3, r3, #16
 800dce2:	68f9      	ldr	r1, [r7, #12]
 800dce4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dce8:	4313      	orrs	r3, r2
 800dcea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	015a      	lsls	r2, r3, #5
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d11a      	bne.n	800dd38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	015a      	lsls	r2, r3, #5
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	4413      	add	r3, r2
 800dd0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	791b      	ldrb	r3, [r3, #4]
 800dd1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd1e:	430b      	orrs	r3, r1
 800dd20:	4313      	orrs	r3, r2
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	0151      	lsls	r1, r2, #5
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	440a      	add	r2, r1
 800dd2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
	...

0800dd48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b085      	sub	sp, #20
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	785b      	ldrb	r3, [r3, #1]
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d161      	bne.n	800de28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	015a      	lsls	r2, r3, #5
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dd76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd7a:	d11f      	bne.n	800ddbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	015a      	lsls	r2, r3, #5
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	4413      	add	r3, r2
 800dd84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	0151      	lsls	r1, r2, #5
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	440a      	add	r2, r1
 800dd92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dd9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	015a      	lsls	r2, r3, #5
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	4413      	add	r3, r2
 800dda4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	0151      	lsls	r1, r2, #5
 800ddae:	68fa      	ldr	r2, [r7, #12]
 800ddb0:	440a      	add	r2, r1
 800ddb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ddb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ddba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	f003 030f 	and.w	r3, r3, #15
 800ddcc:	2101      	movs	r1, #1
 800ddce:	fa01 f303 	lsl.w	r3, r1, r3
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	43db      	mvns	r3, r3
 800ddd6:	68f9      	ldr	r1, [r7, #12]
 800ddd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dddc:	4013      	ands	r3, r2
 800ddde:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dde6:	69da      	ldr	r2, [r3, #28]
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	f003 030f 	and.w	r3, r3, #15
 800ddf0:	2101      	movs	r1, #1
 800ddf2:	fa01 f303 	lsl.w	r3, r1, r3
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	43db      	mvns	r3, r3
 800ddfa:	68f9      	ldr	r1, [r7, #12]
 800ddfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800de00:	4013      	ands	r3, r2
 800de02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	015a      	lsls	r2, r3, #5
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	4413      	add	r3, r2
 800de0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	0159      	lsls	r1, r3, #5
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	440b      	add	r3, r1
 800de1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de1e:	4619      	mov	r1, r3
 800de20:	4b35      	ldr	r3, [pc, #212]	@ (800def8 <USB_DeactivateEndpoint+0x1b0>)
 800de22:	4013      	ands	r3, r2
 800de24:	600b      	str	r3, [r1, #0]
 800de26:	e060      	b.n	800deea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	015a      	lsls	r2, r3, #5
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	4413      	add	r3, r2
 800de30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800de3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800de3e:	d11f      	bne.n	800de80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	015a      	lsls	r2, r3, #5
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	4413      	add	r3, r2
 800de48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	0151      	lsls	r1, r2, #5
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	440a      	add	r2, r1
 800de56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800de5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	015a      	lsls	r2, r3, #5
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	4413      	add	r3, r2
 800de68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	0151      	lsls	r1, r2, #5
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	440a      	add	r2, r1
 800de76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800de7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	f003 030f 	and.w	r3, r3, #15
 800de90:	2101      	movs	r1, #1
 800de92:	fa01 f303 	lsl.w	r3, r1, r3
 800de96:	041b      	lsls	r3, r3, #16
 800de98:	43db      	mvns	r3, r3
 800de9a:	68f9      	ldr	r1, [r7, #12]
 800de9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dea0:	4013      	ands	r3, r2
 800dea2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800deaa:	69da      	ldr	r2, [r3, #28]
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	f003 030f 	and.w	r3, r3, #15
 800deb4:	2101      	movs	r1, #1
 800deb6:	fa01 f303 	lsl.w	r3, r1, r3
 800deba:	041b      	lsls	r3, r3, #16
 800debc:	43db      	mvns	r3, r3
 800debe:	68f9      	ldr	r1, [r7, #12]
 800dec0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dec4:	4013      	ands	r3, r2
 800dec6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	015a      	lsls	r2, r3, #5
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	4413      	add	r3, r2
 800ded0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	0159      	lsls	r1, r3, #5
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	440b      	add	r3, r1
 800dede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dee2:	4619      	mov	r1, r3
 800dee4:	4b05      	ldr	r3, [pc, #20]	@ (800defc <USB_DeactivateEndpoint+0x1b4>)
 800dee6:	4013      	ands	r3, r2
 800dee8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800deea:	2300      	movs	r3, #0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3714      	adds	r7, #20
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr
 800def8:	ec337800 	.word	0xec337800
 800defc:	eff37800 	.word	0xeff37800

0800df00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08a      	sub	sp, #40	@ 0x28
 800df04:	af02      	add	r7, sp, #8
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	4613      	mov	r3, r2
 800df0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	785b      	ldrb	r3, [r3, #1]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	f040 815c 	bne.w	800e1da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	699b      	ldr	r3, [r3, #24]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d132      	bne.n	800df90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	015a      	lsls	r2, r3, #5
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	4413      	add	r3, r2
 800df32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	69ba      	ldr	r2, [r7, #24]
 800df3a:	0151      	lsls	r1, r2, #5
 800df3c:	69fa      	ldr	r2, [r7, #28]
 800df3e:	440a      	add	r2, r1
 800df40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800df48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800df4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	015a      	lsls	r2, r3, #5
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	4413      	add	r3, r2
 800df56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	69ba      	ldr	r2, [r7, #24]
 800df5e:	0151      	lsls	r1, r2, #5
 800df60:	69fa      	ldr	r2, [r7, #28]
 800df62:	440a      	add	r2, r1
 800df64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800df6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	015a      	lsls	r2, r3, #5
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	4413      	add	r3, r2
 800df76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df7a:	691b      	ldr	r3, [r3, #16]
 800df7c:	69ba      	ldr	r2, [r7, #24]
 800df7e:	0151      	lsls	r1, r2, #5
 800df80:	69fa      	ldr	r2, [r7, #28]
 800df82:	440a      	add	r2, r1
 800df84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df88:	0cdb      	lsrs	r3, r3, #19
 800df8a:	04db      	lsls	r3, r3, #19
 800df8c:	6113      	str	r3, [r2, #16]
 800df8e:	e074      	b.n	800e07a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	015a      	lsls	r2, r3, #5
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	4413      	add	r3, r2
 800df98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df9c:	691b      	ldr	r3, [r3, #16]
 800df9e:	69ba      	ldr	r2, [r7, #24]
 800dfa0:	0151      	lsls	r1, r2, #5
 800dfa2:	69fa      	ldr	r2, [r7, #28]
 800dfa4:	440a      	add	r2, r1
 800dfa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfaa:	0cdb      	lsrs	r3, r3, #19
 800dfac:	04db      	lsls	r3, r3, #19
 800dfae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	015a      	lsls	r2, r3, #5
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	69ba      	ldr	r2, [r7, #24]
 800dfc0:	0151      	lsls	r1, r2, #5
 800dfc2:	69fa      	ldr	r2, [r7, #28]
 800dfc4:	440a      	add	r2, r1
 800dfc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800dfce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800dfd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	015a      	lsls	r2, r3, #5
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	4413      	add	r3, r2
 800dfdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfe0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	6999      	ldr	r1, [r3, #24]
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	440b      	add	r3, r1
 800dfec:	1e59      	subs	r1, r3, #1
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	fbb1 f3f3 	udiv	r3, r1, r3
 800dff6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dff8:	4b9d      	ldr	r3, [pc, #628]	@ (800e270 <USB_EPStartXfer+0x370>)
 800dffa:	400b      	ands	r3, r1
 800dffc:	69b9      	ldr	r1, [r7, #24]
 800dffe:	0148      	lsls	r0, r1, #5
 800e000:	69f9      	ldr	r1, [r7, #28]
 800e002:	4401      	add	r1, r0
 800e004:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e008:	4313      	orrs	r3, r2
 800e00a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	015a      	lsls	r2, r3, #5
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	4413      	add	r3, r2
 800e014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e018:	691a      	ldr	r2, [r3, #16]
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e022:	69b9      	ldr	r1, [r7, #24]
 800e024:	0148      	lsls	r0, r1, #5
 800e026:	69f9      	ldr	r1, [r7, #28]
 800e028:	4401      	add	r1, r0
 800e02a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e02e:	4313      	orrs	r3, r2
 800e030:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	791b      	ldrb	r3, [r3, #4]
 800e036:	2b01      	cmp	r3, #1
 800e038:	d11f      	bne.n	800e07a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	015a      	lsls	r2, r3, #5
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	4413      	add	r3, r2
 800e042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e046:	691b      	ldr	r3, [r3, #16]
 800e048:	69ba      	ldr	r2, [r7, #24]
 800e04a:	0151      	lsls	r1, r2, #5
 800e04c:	69fa      	ldr	r2, [r7, #28]
 800e04e:	440a      	add	r2, r1
 800e050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e054:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e058:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	015a      	lsls	r2, r3, #5
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	4413      	add	r3, r2
 800e062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	69ba      	ldr	r2, [r7, #24]
 800e06a:	0151      	lsls	r1, r2, #5
 800e06c:	69fa      	ldr	r2, [r7, #28]
 800e06e:	440a      	add	r2, r1
 800e070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e074:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e078:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d14b      	bne.n	800e118 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d009      	beq.n	800e09c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	015a      	lsls	r2, r3, #5
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	4413      	add	r3, r2
 800e090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e094:	461a      	mov	r2, r3
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	695b      	ldr	r3, [r3, #20]
 800e09a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	791b      	ldrb	r3, [r3, #4]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d128      	bne.n	800e0f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d110      	bne.n	800e0d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	015a      	lsls	r2, r3, #5
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	69ba      	ldr	r2, [r7, #24]
 800e0c4:	0151      	lsls	r1, r2, #5
 800e0c6:	69fa      	ldr	r2, [r7, #28]
 800e0c8:	440a      	add	r2, r1
 800e0ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e0ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e0d2:	6013      	str	r3, [r2, #0]
 800e0d4:	e00f      	b.n	800e0f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e0d6:	69bb      	ldr	r3, [r7, #24]
 800e0d8:	015a      	lsls	r2, r3, #5
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	4413      	add	r3, r2
 800e0de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	69ba      	ldr	r2, [r7, #24]
 800e0e6:	0151      	lsls	r1, r2, #5
 800e0e8:	69fa      	ldr	r2, [r7, #28]
 800e0ea:	440a      	add	r2, r1
 800e0ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e0f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e0f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	015a      	lsls	r2, r3, #5
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	69ba      	ldr	r2, [r7, #24]
 800e106:	0151      	lsls	r1, r2, #5
 800e108:	69fa      	ldr	r2, [r7, #28]
 800e10a:	440a      	add	r2, r1
 800e10c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e110:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e114:	6013      	str	r3, [r2, #0]
 800e116:	e133      	b.n	800e380 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	015a      	lsls	r2, r3, #5
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	4413      	add	r3, r2
 800e120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	69ba      	ldr	r2, [r7, #24]
 800e128:	0151      	lsls	r1, r2, #5
 800e12a:	69fa      	ldr	r2, [r7, #28]
 800e12c:	440a      	add	r2, r1
 800e12e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e132:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e136:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	791b      	ldrb	r3, [r3, #4]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d015      	beq.n	800e16c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 811b 	beq.w	800e380 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	f003 030f 	and.w	r3, r3, #15
 800e15a:	2101      	movs	r1, #1
 800e15c:	fa01 f303 	lsl.w	r3, r1, r3
 800e160:	69f9      	ldr	r1, [r7, #28]
 800e162:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e166:	4313      	orrs	r3, r2
 800e168:	634b      	str	r3, [r1, #52]	@ 0x34
 800e16a:	e109      	b.n	800e380 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d110      	bne.n	800e19e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e17c:	69bb      	ldr	r3, [r7, #24]
 800e17e:	015a      	lsls	r2, r3, #5
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	4413      	add	r3, r2
 800e184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	69ba      	ldr	r2, [r7, #24]
 800e18c:	0151      	lsls	r1, r2, #5
 800e18e:	69fa      	ldr	r2, [r7, #28]
 800e190:	440a      	add	r2, r1
 800e192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e196:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e19a:	6013      	str	r3, [r2, #0]
 800e19c:	e00f      	b.n	800e1be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	015a      	lsls	r2, r3, #5
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	69ba      	ldr	r2, [r7, #24]
 800e1ae:	0151      	lsls	r1, r2, #5
 800e1b0:	69fa      	ldr	r2, [r7, #28]
 800e1b2:	440a      	add	r2, r1
 800e1b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e1b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e1bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	6919      	ldr	r1, [r3, #16]
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	781a      	ldrb	r2, [r3, #0]
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	699b      	ldr	r3, [r3, #24]
 800e1ca:	b298      	uxth	r0, r3
 800e1cc:	79fb      	ldrb	r3, [r7, #7]
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f000 fade 	bl	800e794 <USB_WritePacket>
 800e1d8:	e0d2      	b.n	800e380 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	015a      	lsls	r2, r3, #5
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	69ba      	ldr	r2, [r7, #24]
 800e1ea:	0151      	lsls	r1, r2, #5
 800e1ec:	69fa      	ldr	r2, [r7, #28]
 800e1ee:	440a      	add	r2, r1
 800e1f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e1f4:	0cdb      	lsrs	r3, r3, #19
 800e1f6:	04db      	lsls	r3, r3, #19
 800e1f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	015a      	lsls	r2, r3, #5
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	4413      	add	r3, r2
 800e202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	69ba      	ldr	r2, [r7, #24]
 800e20a:	0151      	lsls	r1, r2, #5
 800e20c:	69fa      	ldr	r2, [r7, #28]
 800e20e:	440a      	add	r2, r1
 800e210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e214:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e218:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e21c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d126      	bne.n	800e274 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	015a      	lsls	r2, r3, #5
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	4413      	add	r3, r2
 800e22e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e232:	691a      	ldr	r2, [r3, #16]
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e23c:	69b9      	ldr	r1, [r7, #24]
 800e23e:	0148      	lsls	r0, r1, #5
 800e240:	69f9      	ldr	r1, [r7, #28]
 800e242:	4401      	add	r1, r0
 800e244:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e248:	4313      	orrs	r3, r2
 800e24a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	015a      	lsls	r2, r3, #5
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	4413      	add	r3, r2
 800e254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e258:	691b      	ldr	r3, [r3, #16]
 800e25a:	69ba      	ldr	r2, [r7, #24]
 800e25c:	0151      	lsls	r1, r2, #5
 800e25e:	69fa      	ldr	r2, [r7, #28]
 800e260:	440a      	add	r2, r1
 800e262:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e266:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e26a:	6113      	str	r3, [r2, #16]
 800e26c:	e03a      	b.n	800e2e4 <USB_EPStartXfer+0x3e4>
 800e26e:	bf00      	nop
 800e270:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	699a      	ldr	r2, [r3, #24]
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	4413      	add	r3, r2
 800e27e:	1e5a      	subs	r2, r3, #1
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	fbb2 f3f3 	udiv	r3, r2, r3
 800e288:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	8afa      	ldrh	r2, [r7, #22]
 800e290:	fb03 f202 	mul.w	r2, r3, r2
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	015a      	lsls	r2, r3, #5
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	4413      	add	r3, r2
 800e2a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2a4:	691a      	ldr	r2, [r3, #16]
 800e2a6:	8afb      	ldrh	r3, [r7, #22]
 800e2a8:	04d9      	lsls	r1, r3, #19
 800e2aa:	4b38      	ldr	r3, [pc, #224]	@ (800e38c <USB_EPStartXfer+0x48c>)
 800e2ac:	400b      	ands	r3, r1
 800e2ae:	69b9      	ldr	r1, [r7, #24]
 800e2b0:	0148      	lsls	r0, r1, #5
 800e2b2:	69f9      	ldr	r1, [r7, #28]
 800e2b4:	4401      	add	r1, r0
 800e2b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	015a      	lsls	r2, r3, #5
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2ca:	691a      	ldr	r2, [r3, #16]
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	69db      	ldr	r3, [r3, #28]
 800e2d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2d4:	69b9      	ldr	r1, [r7, #24]
 800e2d6:	0148      	lsls	r0, r1, #5
 800e2d8:	69f9      	ldr	r1, [r7, #28]
 800e2da:	4401      	add	r1, r0
 800e2dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d10d      	bne.n	800e306 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	691b      	ldr	r3, [r3, #16]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d009      	beq.n	800e306 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	6919      	ldr	r1, [r3, #16]
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	015a      	lsls	r2, r3, #5
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e302:	460a      	mov	r2, r1
 800e304:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	791b      	ldrb	r3, [r3, #4]
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d128      	bne.n	800e360 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e314:	689b      	ldr	r3, [r3, #8]
 800e316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d110      	bne.n	800e340 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	015a      	lsls	r2, r3, #5
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	4413      	add	r3, r2
 800e326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	69ba      	ldr	r2, [r7, #24]
 800e32e:	0151      	lsls	r1, r2, #5
 800e330:	69fa      	ldr	r2, [r7, #28]
 800e332:	440a      	add	r2, r1
 800e334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e338:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e33c:	6013      	str	r3, [r2, #0]
 800e33e:	e00f      	b.n	800e360 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	015a      	lsls	r2, r3, #5
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	4413      	add	r3, r2
 800e348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	69ba      	ldr	r2, [r7, #24]
 800e350:	0151      	lsls	r1, r2, #5
 800e352:	69fa      	ldr	r2, [r7, #28]
 800e354:	440a      	add	r2, r1
 800e356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e35a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e35e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	015a      	lsls	r2, r3, #5
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	4413      	add	r3, r2
 800e368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	69ba      	ldr	r2, [r7, #24]
 800e370:	0151      	lsls	r1, r2, #5
 800e372:	69fa      	ldr	r2, [r7, #28]
 800e374:	440a      	add	r2, r1
 800e376:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e37a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e37e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3720      	adds	r7, #32
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	1ff80000 	.word	0x1ff80000

0800e390 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e390:	b480      	push	{r7}
 800e392:	b087      	sub	sp, #28
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	4613      	mov	r3, r2
 800e39c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	785b      	ldrb	r3, [r3, #1]
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	f040 80ce 	bne.w	800e54e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	699b      	ldr	r3, [r3, #24]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d132      	bne.n	800e420 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	015a      	lsls	r2, r3, #5
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3c6:	691b      	ldr	r3, [r3, #16]
 800e3c8:	693a      	ldr	r2, [r7, #16]
 800e3ca:	0151      	lsls	r1, r2, #5
 800e3cc:	697a      	ldr	r2, [r7, #20]
 800e3ce:	440a      	add	r2, r1
 800e3d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e3d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e3dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	015a      	lsls	r2, r3, #5
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3ea:	691b      	ldr	r3, [r3, #16]
 800e3ec:	693a      	ldr	r2, [r7, #16]
 800e3ee:	0151      	lsls	r1, r2, #5
 800e3f0:	697a      	ldr	r2, [r7, #20]
 800e3f2:	440a      	add	r2, r1
 800e3f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e3fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	015a      	lsls	r2, r3, #5
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	4413      	add	r3, r2
 800e406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	693a      	ldr	r2, [r7, #16]
 800e40e:	0151      	lsls	r1, r2, #5
 800e410:	697a      	ldr	r2, [r7, #20]
 800e412:	440a      	add	r2, r1
 800e414:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e418:	0cdb      	lsrs	r3, r3, #19
 800e41a:	04db      	lsls	r3, r3, #19
 800e41c:	6113      	str	r3, [r2, #16]
 800e41e:	e04e      	b.n	800e4be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	015a      	lsls	r2, r3, #5
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	4413      	add	r3, r2
 800e428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e42c:	691b      	ldr	r3, [r3, #16]
 800e42e:	693a      	ldr	r2, [r7, #16]
 800e430:	0151      	lsls	r1, r2, #5
 800e432:	697a      	ldr	r2, [r7, #20]
 800e434:	440a      	add	r2, r1
 800e436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e43a:	0cdb      	lsrs	r3, r3, #19
 800e43c:	04db      	lsls	r3, r3, #19
 800e43e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	015a      	lsls	r2, r3, #5
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	4413      	add	r3, r2
 800e448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e44c:	691b      	ldr	r3, [r3, #16]
 800e44e:	693a      	ldr	r2, [r7, #16]
 800e450:	0151      	lsls	r1, r2, #5
 800e452:	697a      	ldr	r2, [r7, #20]
 800e454:	440a      	add	r2, r1
 800e456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e45a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e45e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e462:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	699a      	ldr	r2, [r3, #24]
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d903      	bls.n	800e478 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	68da      	ldr	r2, [r3, #12]
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	015a      	lsls	r2, r3, #5
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	4413      	add	r3, r2
 800e480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e484:	691b      	ldr	r3, [r3, #16]
 800e486:	693a      	ldr	r2, [r7, #16]
 800e488:	0151      	lsls	r1, r2, #5
 800e48a:	697a      	ldr	r2, [r7, #20]
 800e48c:	440a      	add	r2, r1
 800e48e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e492:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	015a      	lsls	r2, r3, #5
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	4413      	add	r3, r2
 800e4a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4a4:	691a      	ldr	r2, [r3, #16]
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	699b      	ldr	r3, [r3, #24]
 800e4aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4ae:	6939      	ldr	r1, [r7, #16]
 800e4b0:	0148      	lsls	r0, r1, #5
 800e4b2:	6979      	ldr	r1, [r7, #20]
 800e4b4:	4401      	add	r1, r0
 800e4b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e4be:	79fb      	ldrb	r3, [r7, #7]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d11e      	bne.n	800e502 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	695b      	ldr	r3, [r3, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d009      	beq.n	800e4e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	015a      	lsls	r2, r3, #5
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4d8:	461a      	mov	r2, r3
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	695b      	ldr	r3, [r3, #20]
 800e4de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	015a      	lsls	r2, r3, #5
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	0151      	lsls	r1, r2, #5
 800e4f2:	697a      	ldr	r2, [r7, #20]
 800e4f4:	440a      	add	r2, r1
 800e4f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e4fe:	6013      	str	r3, [r2, #0]
 800e500:	e097      	b.n	800e632 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	015a      	lsls	r2, r3, #5
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	4413      	add	r3, r2
 800e50a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	0151      	lsls	r1, r2, #5
 800e514:	697a      	ldr	r2, [r7, #20]
 800e516:	440a      	add	r2, r1
 800e518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e51c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e520:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	699b      	ldr	r3, [r3, #24]
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 8083 	beq.w	800e632 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	f003 030f 	and.w	r3, r3, #15
 800e53c:	2101      	movs	r1, #1
 800e53e:	fa01 f303 	lsl.w	r3, r1, r3
 800e542:	6979      	ldr	r1, [r7, #20]
 800e544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e548:	4313      	orrs	r3, r2
 800e54a:	634b      	str	r3, [r1, #52]	@ 0x34
 800e54c:	e071      	b.n	800e632 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	015a      	lsls	r2, r3, #5
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	4413      	add	r3, r2
 800e556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e55a:	691b      	ldr	r3, [r3, #16]
 800e55c:	693a      	ldr	r2, [r7, #16]
 800e55e:	0151      	lsls	r1, r2, #5
 800e560:	697a      	ldr	r2, [r7, #20]
 800e562:	440a      	add	r2, r1
 800e564:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e568:	0cdb      	lsrs	r3, r3, #19
 800e56a:	04db      	lsls	r3, r3, #19
 800e56c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	015a      	lsls	r2, r3, #5
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	4413      	add	r3, r2
 800e576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e57a:	691b      	ldr	r3, [r3, #16]
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	0151      	lsls	r1, r2, #5
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	440a      	add	r2, r1
 800e584:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e588:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e58c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e590:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	699b      	ldr	r3, [r3, #24]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d003      	beq.n	800e5a2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	68da      	ldr	r2, [r3, #12]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	68da      	ldr	r2, [r3, #12]
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	015a      	lsls	r2, r3, #5
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5b6:	691b      	ldr	r3, [r3, #16]
 800e5b8:	693a      	ldr	r2, [r7, #16]
 800e5ba:	0151      	lsls	r1, r2, #5
 800e5bc:	697a      	ldr	r2, [r7, #20]
 800e5be:	440a      	add	r2, r1
 800e5c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e5c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	015a      	lsls	r2, r3, #5
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5d6:	691a      	ldr	r2, [r3, #16]
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	69db      	ldr	r3, [r3, #28]
 800e5dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5e0:	6939      	ldr	r1, [r7, #16]
 800e5e2:	0148      	lsls	r0, r1, #5
 800e5e4:	6979      	ldr	r1, [r7, #20]
 800e5e6:	4401      	add	r1, r0
 800e5e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e5f0:	79fb      	ldrb	r3, [r7, #7]
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d10d      	bne.n	800e612 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	691b      	ldr	r3, [r3, #16]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d009      	beq.n	800e612 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	6919      	ldr	r1, [r3, #16]
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	015a      	lsls	r2, r3, #5
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	4413      	add	r3, r2
 800e60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e60e:	460a      	mov	r2, r1
 800e610:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	015a      	lsls	r2, r3, #5
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	4413      	add	r3, r2
 800e61a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	693a      	ldr	r2, [r7, #16]
 800e622:	0151      	lsls	r1, r2, #5
 800e624:	697a      	ldr	r2, [r7, #20]
 800e626:	440a      	add	r2, r1
 800e628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e62c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e630:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e632:	2300      	movs	r3, #0
}
 800e634:	4618      	mov	r0, r3
 800e636:	371c      	adds	r7, #28
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e640:	b480      	push	{r7}
 800e642:	b087      	sub	sp, #28
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e64a:	2300      	movs	r3, #0
 800e64c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e64e:	2300      	movs	r3, #0
 800e650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	785b      	ldrb	r3, [r3, #1]
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d14a      	bne.n	800e6f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	015a      	lsls	r2, r3, #5
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	4413      	add	r3, r2
 800e668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e672:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e676:	f040 8086 	bne.w	800e786 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	015a      	lsls	r2, r3, #5
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	4413      	add	r3, r2
 800e684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	7812      	ldrb	r2, [r2, #0]
 800e68e:	0151      	lsls	r1, r2, #5
 800e690:	693a      	ldr	r2, [r7, #16]
 800e692:	440a      	add	r2, r1
 800e694:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e698:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e69c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	015a      	lsls	r2, r3, #5
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	683a      	ldr	r2, [r7, #0]
 800e6b0:	7812      	ldrb	r2, [r2, #0]
 800e6b2:	0151      	lsls	r1, r2, #5
 800e6b4:	693a      	ldr	r2, [r7, #16]
 800e6b6:	440a      	add	r2, r1
 800e6b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e6c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d902      	bls.n	800e6d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	75fb      	strb	r3, [r7, #23]
          break;
 800e6d6:	e056      	b.n	800e786 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	015a      	lsls	r2, r3, #5
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6f0:	d0e7      	beq.n	800e6c2 <USB_EPStopXfer+0x82>
 800e6f2:	e048      	b.n	800e786 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	015a      	lsls	r2, r3, #5
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e708:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e70c:	d13b      	bne.n	800e786 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	015a      	lsls	r2, r3, #5
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	4413      	add	r3, r2
 800e718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	7812      	ldrb	r2, [r2, #0]
 800e722:	0151      	lsls	r1, r2, #5
 800e724:	693a      	ldr	r2, [r7, #16]
 800e726:	440a      	add	r2, r1
 800e728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e72c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e730:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	015a      	lsls	r2, r3, #5
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	4413      	add	r3, r2
 800e73c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	683a      	ldr	r2, [r7, #0]
 800e744:	7812      	ldrb	r2, [r2, #0]
 800e746:	0151      	lsls	r1, r2, #5
 800e748:	693a      	ldr	r2, [r7, #16]
 800e74a:	440a      	add	r2, r1
 800e74c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e750:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e754:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	3301      	adds	r3, #1
 800e75a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e762:	4293      	cmp	r3, r2
 800e764:	d902      	bls.n	800e76c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e766:	2301      	movs	r3, #1
 800e768:	75fb      	strb	r3, [r7, #23]
          break;
 800e76a:	e00c      	b.n	800e786 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	015a      	lsls	r2, r3, #5
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	4413      	add	r3, r2
 800e776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e780:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e784:	d0e7      	beq.n	800e756 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e786:	7dfb      	ldrb	r3, [r7, #23]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	371c      	adds	r7, #28
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e794:	b480      	push	{r7}
 800e796:	b089      	sub	sp, #36	@ 0x24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	60b9      	str	r1, [r7, #8]
 800e79e:	4611      	mov	r1, r2
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	71fb      	strb	r3, [r7, #7]
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e7b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d123      	bne.n	800e802 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e7ba:	88bb      	ldrh	r3, [r7, #4]
 800e7bc:	3303      	adds	r3, #3
 800e7be:	089b      	lsrs	r3, r3, #2
 800e7c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	61bb      	str	r3, [r7, #24]
 800e7c6:	e018      	b.n	800e7fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e7c8:	79fb      	ldrb	r3, [r7, #7]
 800e7ca:	031a      	lsls	r2, r3, #12
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e7ee:	69fb      	ldr	r3, [r7, #28]
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	61bb      	str	r3, [r7, #24]
 800e7fa:	69ba      	ldr	r2, [r7, #24]
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d3e2      	bcc.n	800e7c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	3724      	adds	r7, #36	@ 0x24
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e810:	b480      	push	{r7}
 800e812:	b08b      	sub	sp, #44	@ 0x2c
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	4613      	mov	r3, r2
 800e81c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e826:	88fb      	ldrh	r3, [r7, #6]
 800e828:	089b      	lsrs	r3, r3, #2
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e82e:	88fb      	ldrh	r3, [r7, #6]
 800e830:	f003 0303 	and.w	r3, r3, #3
 800e834:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e836:	2300      	movs	r3, #0
 800e838:	623b      	str	r3, [r7, #32]
 800e83a:	e014      	b.n	800e866 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e846:	601a      	str	r2, [r3, #0]
    pDest++;
 800e848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e84a:	3301      	adds	r3, #1
 800e84c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e850:	3301      	adds	r3, #1
 800e852:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e856:	3301      	adds	r3, #1
 800e858:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e85c:	3301      	adds	r3, #1
 800e85e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e860:	6a3b      	ldr	r3, [r7, #32]
 800e862:	3301      	adds	r3, #1
 800e864:	623b      	str	r3, [r7, #32]
 800e866:	6a3a      	ldr	r2, [r7, #32]
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d3e6      	bcc.n	800e83c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e86e:	8bfb      	ldrh	r3, [r7, #30]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d01e      	beq.n	800e8b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e874:	2300      	movs	r3, #0
 800e876:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e87e:	461a      	mov	r2, r3
 800e880:	f107 0310 	add.w	r3, r7, #16
 800e884:	6812      	ldr	r2, [r2, #0]
 800e886:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	6a3b      	ldr	r3, [r7, #32]
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	00db      	lsls	r3, r3, #3
 800e890:	fa22 f303 	lsr.w	r3, r2, r3
 800e894:	b2da      	uxtb	r2, r3
 800e896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e898:	701a      	strb	r2, [r3, #0]
      i++;
 800e89a:	6a3b      	ldr	r3, [r7, #32]
 800e89c:	3301      	adds	r3, #1
 800e89e:	623b      	str	r3, [r7, #32]
      pDest++;
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e8a6:	8bfb      	ldrh	r3, [r7, #30]
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e8ac:	8bfb      	ldrh	r3, [r7, #30]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1ea      	bne.n	800e888 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	372c      	adds	r7, #44	@ 0x2c
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b085      	sub	sp, #20
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	785b      	ldrb	r3, [r3, #1]
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d12c      	bne.n	800e936 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	015a      	lsls	r2, r3, #5
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	db12      	blt.n	800e914 <USB_EPSetStall+0x54>
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00f      	beq.n	800e914 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	015a      	lsls	r2, r3, #5
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	68ba      	ldr	r2, [r7, #8]
 800e904:	0151      	lsls	r1, r2, #5
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	440a      	add	r2, r1
 800e90a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e90e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e912:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	015a      	lsls	r2, r3, #5
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	4413      	add	r3, r2
 800e91c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	68ba      	ldr	r2, [r7, #8]
 800e924:	0151      	lsls	r1, r2, #5
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	440a      	add	r2, r1
 800e92a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e92e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e932:	6013      	str	r3, [r2, #0]
 800e934:	e02b      	b.n	800e98e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	015a      	lsls	r2, r3, #5
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	4413      	add	r3, r2
 800e93e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	db12      	blt.n	800e96e <USB_EPSetStall+0xae>
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00f      	beq.n	800e96e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	015a      	lsls	r2, r3, #5
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	4413      	add	r3, r2
 800e956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	0151      	lsls	r1, r2, #5
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	440a      	add	r2, r1
 800e964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e968:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e96c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	015a      	lsls	r2, r3, #5
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	4413      	add	r3, r2
 800e976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	68ba      	ldr	r2, [r7, #8]
 800e97e:	0151      	lsls	r1, r2, #5
 800e980:	68fa      	ldr	r2, [r7, #12]
 800e982:	440a      	add	r2, r1
 800e984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e988:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e98c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3714      	adds	r7, #20
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	785b      	ldrb	r3, [r3, #1]
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d128      	bne.n	800ea0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	015a      	lsls	r2, r3, #5
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	4413      	add	r3, r2
 800e9c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	0151      	lsls	r1, r2, #5
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	440a      	add	r2, r1
 800e9ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e9d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	791b      	ldrb	r3, [r3, #4]
 800e9dc:	2b03      	cmp	r3, #3
 800e9de:	d003      	beq.n	800e9e8 <USB_EPClearStall+0x4c>
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	791b      	ldrb	r3, [r3, #4]
 800e9e4:	2b02      	cmp	r3, #2
 800e9e6:	d138      	bne.n	800ea5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	015a      	lsls	r2, r3, #5
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	68ba      	ldr	r2, [r7, #8]
 800e9f8:	0151      	lsls	r1, r2, #5
 800e9fa:	68fa      	ldr	r2, [r7, #12]
 800e9fc:	440a      	add	r2, r1
 800e9fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea06:	6013      	str	r3, [r2, #0]
 800ea08:	e027      	b.n	800ea5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	015a      	lsls	r2, r3, #5
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	4413      	add	r3, r2
 800ea12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	0151      	lsls	r1, r2, #5
 800ea1c:	68fa      	ldr	r2, [r7, #12]
 800ea1e:	440a      	add	r2, r1
 800ea20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ea28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	791b      	ldrb	r3, [r3, #4]
 800ea2e:	2b03      	cmp	r3, #3
 800ea30:	d003      	beq.n	800ea3a <USB_EPClearStall+0x9e>
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	791b      	ldrb	r3, [r3, #4]
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d10f      	bne.n	800ea5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	015a      	lsls	r2, r3, #5
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	4413      	add	r3, r2
 800ea42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	68ba      	ldr	r2, [r7, #8]
 800ea4a:	0151      	lsls	r1, r2, #5
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	440a      	add	r2, r1
 800ea50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ea5a:	2300      	movs	r3, #0
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3714      	adds	r7, #20
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800ea74:	2300      	movs	r3, #0
 800ea76:	617b      	str	r3, [r7, #20]
 800ea78:	e016      	b.n	800eaa8 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	015a      	lsls	r2, r3, #5
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	4413      	add	r3, r2
 800ea82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea86:	461a      	mov	r2, r3
 800ea88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ea8c:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	015a      	lsls	r2, r3, #5
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	4413      	add	r3, r2
 800ea96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800eaa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	617b      	str	r3, [r7, #20]
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	2b0e      	cmp	r3, #14
 800eaac:	d9e5      	bls.n	800ea7a <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eab4:	461a      	mov	r2, r3
 800eab6:	2300      	movs	r3, #0
 800eab8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eac0:	461a      	mov	r2, r3
 800eac2:	2300      	movs	r3, #0
 800eac4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eacc:	461a      	mov	r2, r3
 800eace:	2300      	movs	r3, #0
 800ead0:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7ff f842 	bl	800db5c <USB_FlushRxFifo>
 800ead8:	4603      	mov	r3, r0
 800eada:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800eadc:	7bfb      	ldrb	r3, [r7, #15]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d001      	beq.n	800eae6 <USB_StopDevice+0x7e>
  {
    return ret;
 800eae2:	7bfb      	ldrb	r3, [r7, #15]
 800eae4:	e00b      	b.n	800eafe <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800eae6:	2110      	movs	r1, #16
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff f803 	bl	800daf4 <USB_FlushTxFifo>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800eaf2:	7bfb      	ldrb	r3, [r7, #15]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d001      	beq.n	800eafc <USB_StopDevice+0x94>
  {
    return ret;
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
 800eafa:	e000      	b.n	800eafe <USB_StopDevice+0x96>
  }

  return ret;
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3718      	adds	r7, #24
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eb06:	b480      	push	{r7}
 800eb08:	b085      	sub	sp, #20
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	460b      	mov	r3, r1
 800eb10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eb24:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800eb28:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	78fb      	ldrb	r3, [r7, #3]
 800eb34:	011b      	lsls	r3, r3, #4
 800eb36:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800eb3a:	68f9      	ldr	r1, [r7, #12]
 800eb3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eb40:	4313      	orrs	r3, r2
 800eb42:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800eb44:	2300      	movs	r3, #0
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3714      	adds	r7, #20
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr

0800eb52 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eb52:	b480      	push	{r7}
 800eb54:	b085      	sub	sp, #20
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eb6c:	f023 0303 	bic.w	r3, r3, #3
 800eb70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eb80:	f023 0302 	bic.w	r3, r3, #2
 800eb84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3714      	adds	r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b085      	sub	sp, #20
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ebae:	f023 0303 	bic.w	r3, r3, #3
 800ebb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ebc2:	f043 0302 	orr.w	r3, r3, #2
 800ebc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr

0800ebd6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ebd6:	b480      	push	{r7}
 800ebd8:	b085      	sub	sp, #20
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	695b      	ldr	r3, [r3, #20]
 800ebe2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	699b      	ldr	r3, [r3, #24]
 800ebe8:	68fa      	ldr	r2, [r7, #12]
 800ebea:	4013      	ands	r3, r2
 800ebec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ebee:	68fb      	ldr	r3, [r7, #12]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3714      	adds	r7, #20
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec0e:	699b      	ldr	r3, [r3, #24]
 800ec10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec18:	69db      	ldr	r3, [r3, #28]
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	0c1b      	lsrs	r3, r3, #16
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3714      	adds	r7, #20
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b085      	sub	sp, #20
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec42:	699b      	ldr	r3, [r3, #24]
 800ec44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec4c:	69db      	ldr	r3, [r3, #28]
 800ec4e:	68ba      	ldr	r2, [r7, #8]
 800ec50:	4013      	ands	r3, r2
 800ec52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	b29b      	uxth	r3, r3
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3714      	adds	r7, #20
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ec74:	78fb      	ldrb	r3, [r7, #3]
 800ec76:	015a      	lsls	r2, r3, #5
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec8a:	695b      	ldr	r3, [r3, #20]
 800ec8c:	68ba      	ldr	r2, [r7, #8]
 800ec8e:	4013      	ands	r3, r2
 800ec90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec92:	68bb      	ldr	r3, [r7, #8]
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3714      	adds	r7, #20
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b087      	sub	sp, #28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	460b      	mov	r3, r1
 800ecaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecb6:	691b      	ldr	r3, [r3, #16]
 800ecb8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecc2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ecc4:	78fb      	ldrb	r3, [r7, #3]
 800ecc6:	f003 030f 	and.w	r3, r3, #15
 800ecca:	68fa      	ldr	r2, [r7, #12]
 800eccc:	fa22 f303 	lsr.w	r3, r2, r3
 800ecd0:	01db      	lsls	r3, r3, #7
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	693a      	ldr	r2, [r7, #16]
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ecda:	78fb      	ldrb	r3, [r7, #3]
 800ecdc:	015a      	lsls	r2, r3, #5
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	4413      	add	r3, r2
 800ece2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	693a      	ldr	r2, [r7, #16]
 800ecea:	4013      	ands	r3, r2
 800ecec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ecee:	68bb      	ldr	r3, [r7, #8]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	371c      	adds	r7, #28
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	695b      	ldr	r3, [r3, #20]
 800ed08:	f003 0301 	and.w	r3, r3, #1
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b085      	sub	sp, #20
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68fa      	ldr	r2, [r7, #12]
 800ed2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed32:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ed36:	f023 0307 	bic.w	r3, r3, #7
 800ed3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3714      	adds	r7, #20
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr
	...

0800ed60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b087      	sub	sp, #28
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	333c      	adds	r3, #60	@ 0x3c
 800ed76:	3304      	adds	r3, #4
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	4a26      	ldr	r2, [pc, #152]	@ (800ee18 <USB_EP0_OutStart+0xb8>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d90a      	bls.n	800ed9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed94:	d101      	bne.n	800ed9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ed96:	2300      	movs	r3, #0
 800ed98:	e037      	b.n	800ee0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eda0:	461a      	mov	r2, r3
 800eda2:	2300      	movs	r3, #0
 800eda4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	697a      	ldr	r2, [r7, #20]
 800edb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800edb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800edb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edc0:	691b      	ldr	r3, [r3, #16]
 800edc2:	697a      	ldr	r2, [r7, #20]
 800edc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800edc8:	f043 0318 	orr.w	r3, r3, #24
 800edcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edd4:	691b      	ldr	r3, [r3, #16]
 800edd6:	697a      	ldr	r2, [r7, #20]
 800edd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eddc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ede0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ede2:	7afb      	ldrb	r3, [r7, #11]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d10f      	bne.n	800ee08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edee:	461a      	mov	r2, r3
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	697a      	ldr	r2, [r7, #20]
 800edfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee02:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ee06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	371c      	adds	r7, #28
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr
 800ee16:	bf00      	nop
 800ee18:	4f54300a 	.word	0x4f54300a

0800ee1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ee24:	2300      	movs	r3, #0
 800ee26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	4a13      	ldr	r2, [pc, #76]	@ (800ee80 <USB_CoreReset+0x64>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d901      	bls.n	800ee3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ee36:	2303      	movs	r3, #3
 800ee38:	e01b      	b.n	800ee72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	daf2      	bge.n	800ee28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ee42:	2300      	movs	r3, #0
 800ee44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	691b      	ldr	r3, [r3, #16]
 800ee4a:	f043 0201 	orr.w	r2, r3, #1
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	3301      	adds	r3, #1
 800ee56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	4a09      	ldr	r2, [pc, #36]	@ (800ee80 <USB_CoreReset+0x64>)
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d901      	bls.n	800ee64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ee60:	2303      	movs	r3, #3
 800ee62:	e006      	b.n	800ee72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	691b      	ldr	r3, [r3, #16]
 800ee68:	f003 0301 	and.w	r3, r3, #1
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d0f0      	beq.n	800ee52 <USB_CoreReset+0x36>

  return HAL_OK;
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3714      	adds	r7, #20
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr
 800ee7e:	bf00      	nop
 800ee80:	00030d40 	.word	0x00030d40

0800ee84 <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time = 0;
uint8_t invoke_date = 0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	4a13      	ldr	r2, [pc, #76]	@ (800eedc <HAL_UART_RxCpltCallback+0x58>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d11f      	bne.n	800eed4 <HAL_UART_RxCpltCallback+0x50>
 800ee94:	4b12      	ldr	r3, [pc, #72]	@ (800eee0 <HAL_UART_RxCpltCallback+0x5c>)
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d01b      	beq.n	800eed4 <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	4911      	ldr	r1, [pc, #68]	@ (800eee4 <HAL_UART_RxCpltCallback+0x60>)
 800eea0:	480e      	ldr	r0, [pc, #56]	@ (800eedc <HAL_UART_RxCpltCallback+0x58>)
 800eea2:	f7fc fe37 	bl	800bb14 <HAL_UART_Receive_IT>
		UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800eea6:	4b10      	ldr	r3, [pc, #64]	@ (800eee8 <HAL_UART_RxCpltCallback+0x64>)
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d10a      	bne.n	800eec4 <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800eeae:	4b0d      	ldr	r3, [pc, #52]	@ (800eee4 <HAL_UART_RxCpltCallback+0x60>)
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800eeb4:	4b0d      	ldr	r3, [pc, #52]	@ (800eeec <HAL_UART_RxCpltCallback+0x68>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	7bfa      	ldrb	r2, [r7, #15]
 800eeba:	4611      	mov	r1, r2
 800eebc:	4618      	mov	r0, r3
 800eebe:	f002 f90d 	bl	80110dc <embeddedCliReceiveChar>
 800eec2:	e002      	b.n	800eeca <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800eec4:	4b0a      	ldr	r3, [pc, #40]	@ (800eef0 <HAL_UART_RxCpltCallback+0x6c>)
 800eec6:	2201      	movs	r2, #1
 800eec8:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800eeca:	f7f4 fed9 	bl	8003c80 <HAL_GetTick>
 800eece:	4603      	mov	r3, r0
 800eed0:	4a08      	ldr	r2, [pc, #32]	@ (800eef4 <HAL_UART_RxCpltCallback+0x70>)
 800eed2:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800eed4:	bf00      	nop
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	200019c0 	.word	0x200019c0
 800eee0:	20001a7d 	.word	0x20001a7d
 800eee4:	20001a7c 	.word	0x20001a7c
 800eee8:	20001a7e 	.word	0x20001a7e
 800eeec:	20001a70 	.word	0x20001a70
 800eef0:	20001a7f 	.word	0x20001a7f
 800eef4:	20001718 	.word	0x20001718

0800eef8 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	460b      	mov	r3, r1
 800ef02:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800ef04:	78fb      	ldrb	r3, [r7, #3]
 800ef06:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800ef08:	f107 010f 	add.w	r1, r7, #15
 800ef0c:	2364      	movs	r3, #100	@ 0x64
 800ef0e:	2201      	movs	r2, #1
 800ef10:	4803      	ldr	r0, [pc, #12]	@ (800ef20 <writeCharToCli+0x28>)
 800ef12:	f7fc fd6d 	bl	800b9f0 <HAL_UART_Transmit>
}
 800ef16:	bf00      	nop
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	200019c0 	.word	0x200019c0

0800ef24 <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800ef24:	b40e      	push	{r1, r2, r3}
 800ef26:	b580      	push	{r7, lr}
 800ef28:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ef32:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800ef36:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800ef38:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800ef3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ef40:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800ef44:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800ef46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ef4a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800ef4e:	f107 000c 	add.w	r0, r7, #12
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 800ef58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ef5c:	f00e f82a 	bl	801cfb4 <vsniprintf>
 800ef60:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800ef64:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	da08      	bge.n	800ef7e <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800ef6c:	4b0c      	ldr	r3, [pc, #48]	@ (800efa0 <cli_printf+0x7c>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68db      	ldr	r3, [r3, #12]
 800ef72:	221d      	movs	r2, #29
 800ef74:	2101      	movs	r1, #1
 800ef76:	480b      	ldr	r0, [pc, #44]	@ (800efa4 <cli_printf+0x80>)
 800ef78:	f00d ff10 	bl	801cd9c <fwrite>
 800ef7c:	e009      	b.n	800ef92 <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800ef7e:	f107 020c 	add.w	r2, r7, #12
 800ef82:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ef86:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800ef8a:	4611      	mov	r1, r2
 800ef8c:	6818      	ldr	r0, [r3, #0]
 800ef8e:	f002 f98b 	bl	80112a8 <embeddedCliPrint>
}
 800ef92:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 800ef96:	46bd      	mov	sp, r7
 800ef98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ef9c:	b003      	add	sp, #12
 800ef9e:	4770      	bx	lr
 800efa0:	20000174 	.word	0x20000174
 800efa4:	080207b4 	.word	0x080207b4

0800efa8 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b088      	sub	sp, #32
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800efb4:	2300      	movs	r3, #0
 800efb6:	61fb      	str	r3, [r7, #28]
	int i, j;
	prev_max_wait_time = HAL_GetTick();
 800efb8:	f7f4 fe62 	bl	8003c80 <HAL_GetTick>
 800efbc:	4603      	mov	r3, r0
 800efbe:	4a5b      	ldr	r2, [pc, #364]	@ (800f12c <receiveString+0x184>)
 800efc0:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800efc2:	4b5b      	ldr	r3, [pc, #364]	@ (800f130 <receiveString+0x188>)
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f000 80a0 	beq.w	800f10c <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800efcc:	4b59      	ldr	r3, [pc, #356]	@ (800f134 <receiveString+0x18c>)
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	2b0d      	cmp	r3, #13
 800efd2:	d004      	beq.n	800efde <receiveString+0x36>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	3b01      	subs	r3, #1
 800efd8:	69fa      	ldr	r2, [r7, #28]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d164      	bne.n	800f0a8 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	4413      	add	r3, r2
 800efe4:	2200      	movs	r2, #0
 800efe6:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800efe8:	4b51      	ldr	r3, [pc, #324]	@ (800f130 <receiveString+0x188>)
 800efea:	2200      	movs	r2, #0
 800efec:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				//Iterating each character and removing non alphabetical characters.
				for (i = 0; buffer[i] != '\0'; ++i) {
 800efee:	2300      	movs	r3, #0
 800eff0:	61bb      	str	r3, [r7, #24]
 800eff2:	e052      	b.n	800f09a <receiveString+0xf2>
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
							|| buffer[i] == '_' || buffer[i] == ':'
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
							|| buffer[i] == '\0')) {
						for (j = i; buffer[j] != '\0'; ++j) {
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	617b      	str	r3, [r7, #20]
 800eff8:	e00b      	b.n	800f012 <receiveString+0x6a>
							buffer[j] = buffer[j + 1];
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	3301      	adds	r3, #1
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	441a      	add	r2, r3
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	68b9      	ldr	r1, [r7, #8]
 800f006:	440b      	add	r3, r1
 800f008:	7812      	ldrb	r2, [r2, #0]
 800f00a:	701a      	strb	r2, [r3, #0]
						for (j = i; buffer[j] != '\0'; ++j) {
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	3301      	adds	r3, #1
 800f010:	617b      	str	r3, [r7, #20]
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	68ba      	ldr	r2, [r7, #8]
 800f016:	4413      	add	r3, r2
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1ed      	bne.n	800effa <receiveString+0x52>
						}
						buffer[j] = '\0';
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	4413      	add	r3, r2
 800f024:	2200      	movs	r2, #0
 800f026:	701a      	strb	r2, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	4413      	add	r3, r2
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	2b60      	cmp	r3, #96	@ 0x60
 800f032:	d905      	bls.n	800f040 <receiveString+0x98>
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	4413      	add	r3, r2
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	2b7a      	cmp	r3, #122	@ 0x7a
 800f03e:	d929      	bls.n	800f094 <receiveString+0xec>
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800f040:	69bb      	ldr	r3, [r7, #24]
 800f042:	68ba      	ldr	r2, [r7, #8]
 800f044:	4413      	add	r3, r2
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	2b40      	cmp	r3, #64	@ 0x40
 800f04a:	d905      	bls.n	800f058 <receiveString+0xb0>
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	4413      	add	r3, r2
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	2b5a      	cmp	r3, #90	@ 0x5a
 800f056:	d91d      	bls.n	800f094 <receiveString+0xec>
							|| buffer[i] == '_' || buffer[i] == ':'
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	4413      	add	r3, r2
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	2b5f      	cmp	r3, #95	@ 0x5f
 800f062:	d017      	beq.n	800f094 <receiveString+0xec>
 800f064:	69bb      	ldr	r3, [r7, #24]
 800f066:	68ba      	ldr	r2, [r7, #8]
 800f068:	4413      	add	r3, r2
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	2b3a      	cmp	r3, #58	@ 0x3a
 800f06e:	d011      	beq.n	800f094 <receiveString+0xec>
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800f070:	69bb      	ldr	r3, [r7, #24]
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	4413      	add	r3, r2
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	2b2f      	cmp	r3, #47	@ 0x2f
 800f07a:	d905      	bls.n	800f088 <receiveString+0xe0>
 800f07c:	69bb      	ldr	r3, [r7, #24]
 800f07e:	68ba      	ldr	r2, [r7, #8]
 800f080:	4413      	add	r3, r2
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	2b39      	cmp	r3, #57	@ 0x39
 800f086:	d905      	bls.n	800f094 <receiveString+0xec>
							|| buffer[i] == '\0')) {
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	68ba      	ldr	r2, [r7, #8]
 800f08c:	4413      	add	r3, r2
 800f08e:	781b      	ldrb	r3, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f090:	2b00      	cmp	r3, #0
 800f092:	d1af      	bne.n	800eff4 <receiveString+0x4c>
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	3301      	adds	r3, #1
 800f098:	61bb      	str	r3, [r7, #24]
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	4413      	add	r3, r2
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1c0      	bne.n	800f028 <receiveString+0x80>
					}
				}
				break;
 800f0a6:	e03d      	b.n	800f124 <receiveString+0x17c>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b'
 800f0a8:	4b22      	ldr	r3, [pc, #136]	@ (800f134 <receiveString+0x18c>)
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b08      	cmp	r3, #8
 800f0ae:	d003      	beq.n	800f0b8 <receiveString+0x110>
						|| UART_CLI_rxBuffer[0] == 0x7F)) {
 800f0b0:	4b20      	ldr	r3, [pc, #128]	@ (800f134 <receiveString+0x18c>)
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	2b7f      	cmp	r3, #127	@ 0x7f
 800f0b6:	d117      	bne.n	800f0e8 <receiveString+0x140>
					cli->writeChar(cli, '\b');
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	2108      	movs	r1, #8
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	4798      	blx	r3
					cli->writeChar(cli, ' ');
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2120      	movs	r1, #32
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	4798      	blx	r3
					cli->writeChar(cli, '\b');
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2108      	movs	r1, #8
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	4798      	blx	r3
					--index;
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	61fb      	str	r3, [r7, #28]
					buffer[index] = '\0';
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	e00e      	b.n	800f106 <receiveString+0x15e>
				} else {
					buffer[index++] = UART_CLI_rxBuffer[0];
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	1c5a      	adds	r2, r3, #1
 800f0ec:	61fa      	str	r2, [r7, #28]
 800f0ee:	68ba      	ldr	r2, [r7, #8]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	4a10      	ldr	r2, [pc, #64]	@ (800f134 <receiveString+0x18c>)
 800f0f4:	7812      	ldrb	r2, [r2, #0]
 800f0f6:	701a      	strb	r2, [r3, #0]
					cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a0d      	ldr	r2, [pc, #52]	@ (800f134 <receiveString+0x18c>)
 800f0fe:	7812      	ldrb	r2, [r2, #0]
 800f100:	4611      	mov	r1, r2
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800f106:	4b0a      	ldr	r3, [pc, #40]	@ (800f130 <receiveString+0x188>)
 800f108:	2200      	movs	r2, #0
 800f10a:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - prev_max_wait_time > max_wait_time) {
 800f10c:	f7f4 fdb8 	bl	8003c80 <HAL_GetTick>
 800f110:	4602      	mov	r2, r0
 800f112:	4b06      	ldr	r3, [pc, #24]	@ (800f12c <receiveString+0x184>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	1ad2      	subs	r2, r2, r3
 800f118:	4b07      	ldr	r3, [pc, #28]	@ (800f138 <receiveString+0x190>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d800      	bhi.n	800f122 <receiveString+0x17a>
		if (flag_cli) {
 800f120:	e74f      	b.n	800efc2 <receiveString+0x1a>
			//we break the loop if time goes above 5min
			break;
 800f122:	bf00      	nop
		}

	}
}
 800f124:	bf00      	nop
 800f126:	3720      	adds	r7, #32
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}
 800f12c:	20001a74 	.word	0x20001a74
 800f130:	20001a7f 	.word	0x20001a7f
 800f134:	20001a7c 	.word	0x20001a7c
 800f138:	20000020 	.word	0x20000020

0800f13c <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f148:	4903      	ldr	r1, [pc, #12]	@ (800f158 <onClearCLI+0x1c>)
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f7ff feea 	bl	800ef24 <cli_printf>
}
 800f150:	bf00      	nop
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}
 800f158:	080207d4 	.word	0x080207d4

0800f15c <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b092      	sub	sp, #72	@ 0x48
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f168:	4b24      	ldr	r3, [pc, #144]	@ (800f1fc <debug_scd4x_PM25+0xa0>)
 800f16a:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to enable debug for scd4x and PM y/n?");
 800f16c:	4924      	ldr	r1, [pc, #144]	@ (800f200 <debug_scd4x_PM25+0xa4>)
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f7ff fed8 	bl	800ef24 <cli_printf>

	cli_other = 1;
 800f174:	4b23      	ldr	r3, [pc, #140]	@ (800f204 <debug_scd4x_PM25+0xa8>)
 800f176:	2201      	movs	r2, #1
 800f178:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f17a:	4b23      	ldr	r3, [pc, #140]	@ (800f208 <debug_scd4x_PM25+0xac>)
 800f17c:	2200      	movs	r2, #0
 800f17e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f180:	f107 0310 	add.w	r3, r7, #16
 800f184:	2232      	movs	r2, #50	@ 0x32
 800f186:	4619      	mov	r1, r3
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f7ff ff0d 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f18e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f190:	f7f1 f886 	bl	80002a0 <strlen>
 800f194:	4603      	mov	r3, r0
 800f196:	b29a      	uxth	r2, r3
 800f198:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f19c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f19e:	481b      	ldr	r0, [pc, #108]	@ (800f20c <debug_scd4x_PM25+0xb0>)
 800f1a0:	f7fc fc26 	bl	800b9f0 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800f1a4:	f107 0310 	add.w	r3, r7, #16
 800f1a8:	2179      	movs	r1, #121	@ 0x79
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f00d ffc6 	bl	801d13c <strchr>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d007      	beq.n	800f1c6 <debug_scd4x_PM25+0x6a>
		debug_scd_pm = 1;
 800f1b6:	4b16      	ldr	r3, [pc, #88]	@ (800f210 <debug_scd4x_PM25+0xb4>)
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug enabled");
 800f1bc:	4915      	ldr	r1, [pc, #84]	@ (800f214 <debug_scd4x_PM25+0xb8>)
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f7ff feb0 	bl	800ef24 <cli_printf>
 800f1c4:	e00f      	b.n	800f1e6 <debug_scd4x_PM25+0x8a>
	} else if (strstr(buffer, "n")) {
 800f1c6:	f107 0310 	add.w	r3, r7, #16
 800f1ca:	216e      	movs	r1, #110	@ 0x6e
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f00d ffb5 	bl	801d13c <strchr>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d006      	beq.n	800f1e6 <debug_scd4x_PM25+0x8a>
		debug_scd_pm = 0;
 800f1d8:	4b0d      	ldr	r3, [pc, #52]	@ (800f210 <debug_scd4x_PM25+0xb4>)
 800f1da:	2200      	movs	r2, #0
 800f1dc:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug disabled");
 800f1de:	490e      	ldr	r1, [pc, #56]	@ (800f218 <debug_scd4x_PM25+0xbc>)
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f7ff fe9f 	bl	800ef24 <cli_printf>
	}

	flag_cli = 0;
 800f1e6:	4b08      	ldr	r3, [pc, #32]	@ (800f208 <debug_scd4x_PM25+0xac>)
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f1ec:	4b05      	ldr	r3, [pc, #20]	@ (800f204 <debug_scd4x_PM25+0xa8>)
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	701a      	strb	r2, [r3, #0]
}
 800f1f2:	bf00      	nop
 800f1f4:	3748      	adds	r7, #72	@ 0x48
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	080207dc 	.word	0x080207dc
 800f200:	080207e0 	.word	0x080207e0
 800f204:	20001a7e 	.word	0x20001a7e
 800f208:	20001a7f 	.word	0x20001a7f
 800f20c:	200019c0 	.word	0x200019c0
 800f210:	200014d0 	.word	0x200014d0
 800f214:	08020814 	.word	0x08020814
 800f218:	08020824 	.word	0x08020824

0800f21c <DeviceSignature>:

void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli, "Device ID/Signature: %s.", ver_GetUid());
 800f228:	f7f3 f8a8 	bl	800237c <ver_GetUid>
 800f22c:	4603      	mov	r3, r0
 800f22e:	461a      	mov	r2, r3
 800f230:	4903      	ldr	r1, [pc, #12]	@ (800f240 <DeviceSignature+0x24>)
 800f232:	68f8      	ldr	r0, [r7, #12]
 800f234:	f7ff fe76 	bl	800ef24 <cli_printf>
}
 800f238:	bf00      	nop
 800f23a:	3710      	adds	r7, #16
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	08020834 	.word	0x08020834

0800f244 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f244:	b580      	push	{r7, lr}
 800f246:	b092      	sub	sp, #72	@ 0x48
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f250:	4b2d      	ldr	r3, [pc, #180]	@ (800f308 <SetID+0xc4>)
 800f252:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f254:	492d      	ldr	r1, [pc, #180]	@ (800f30c <SetID+0xc8>)
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f7ff fe64 	bl	800ef24 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f25c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f25e:	f7f1 f81f 	bl	80002a0 <strlen>
 800f262:	4603      	mov	r3, r0
 800f264:	b29a      	uxth	r2, r3
 800f266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f26a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f26c:	4828      	ldr	r0, [pc, #160]	@ (800f310 <SetID+0xcc>)
 800f26e:	f7fc fbbf 	bl	800b9f0 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the ID. Keep ID below 30 characters");
 800f272:	4928      	ldr	r1, [pc, #160]	@ (800f314 <SetID+0xd0>)
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f7ff fe55 	bl	800ef24 <cli_printf>
	cli_other = 1;
 800f27a:	4b27      	ldr	r3, [pc, #156]	@ (800f318 <SetID+0xd4>)
 800f27c:	2201      	movs	r2, #1
 800f27e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f280:	4b26      	ldr	r3, [pc, #152]	@ (800f31c <SetID+0xd8>)
 800f282:	2200      	movs	r2, #0
 800f284:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f286:	f107 0310 	add.w	r3, r7, #16
 800f28a:	2232      	movs	r2, #50	@ 0x32
 800f28c:	4619      	mov	r1, r3
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f7ff fe8a 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f294:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f296:	f7f1 f803 	bl	80002a0 <strlen>
 800f29a:	4603      	mov	r3, r0
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f2a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2a4:	481a      	ldr	r0, [pc, #104]	@ (800f310 <SetID+0xcc>)
 800f2a6:	f7fc fba3 	bl	800b9f0 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f2aa:	f107 0310 	add.w	r3, r7, #16
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7f0 fff6 	bl	80002a0 <strlen>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 30) {
 800f2ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f2be:	2b1d      	cmp	r3, #29
 800f2c0:	d814      	bhi.n	800f2ec <SetID+0xa8>
		if (buffer[0] != '\0') {
 800f2c2:	7c3b      	ldrb	r3, [r7, #16]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d015      	beq.n	800f2f4 <SetID+0xb0>
			if (buffer !=  NULL) {
				strcpy(_Flash_Packet.id, buffer);
 800f2c8:	f107 0310 	add.w	r3, r7, #16
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	4814      	ldr	r0, [pc, #80]	@ (800f320 <SetID+0xdc>)
 800f2d0:	f00e f83b 	bl	801d34a <strcpy>
				set_param_flags();
 800f2d4:	4b13      	ldr	r3, [pc, #76]	@ (800f324 <SetID+0xe0>)
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	701a      	strb	r2, [r3, #0]
 800f2da:	4b13      	ldr	r3, [pc, #76]	@ (800f328 <SetID+0xe4>)
 800f2dc:	2201      	movs	r2, #1
 800f2de:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "ID is set to: %s", _Flash_Packet.id);
 800f2e0:	4a0f      	ldr	r2, [pc, #60]	@ (800f320 <SetID+0xdc>)
 800f2e2:	4912      	ldr	r1, [pc, #72]	@ (800f32c <SetID+0xe8>)
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f7ff fe1d 	bl	800ef24 <cli_printf>
 800f2ea:	e003      	b.n	800f2f4 <SetID+0xb0>
			}
		}
	} else {
		cli_printf(cli, "ID is too long");
 800f2ec:	4910      	ldr	r1, [pc, #64]	@ (800f330 <SetID+0xec>)
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f7ff fe18 	bl	800ef24 <cli_printf>
	}

	flag_cli = 0;
 800f2f4:	4b09      	ldr	r3, [pc, #36]	@ (800f31c <SetID+0xd8>)
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f2fa:	4b07      	ldr	r3, [pc, #28]	@ (800f318 <SetID+0xd4>)
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	701a      	strb	r2, [r3, #0]

}
 800f300:	bf00      	nop
 800f302:	3748      	adds	r7, #72	@ 0x48
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	080207dc 	.word	0x080207dc
 800f30c:	08020850 	.word	0x08020850
 800f310:	200019c0 	.word	0x200019c0
 800f314:	08020888 	.word	0x08020888
 800f318:	20001a7e 	.word	0x20001a7e
 800f31c:	20001a7f 	.word	0x20001a7f
 800f320:	200013c1 	.word	0x200013c1
 800f324:	200014d1 	.word	0x200014d1
 800f328:	200014d2 	.word	0x200014d2
 800f32c:	080208b0 	.word	0x080208b0
 800f330:	080208c4 	.word	0x080208c4

0800f334 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f334:	b580      	push	{r7, lr}
 800f336:	b092      	sub	sp, #72	@ 0x48
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f340:	4b2d      	ldr	r3, [pc, #180]	@ (800f3f8 <SetLocation+0xc4>)
 800f342:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f344:	492d      	ldr	r1, [pc, #180]	@ (800f3fc <SetLocation+0xc8>)
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f7ff fdec 	bl	800ef24 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f34c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f34e:	f7f0 ffa7 	bl	80002a0 <strlen>
 800f352:	4603      	mov	r3, r0
 800f354:	b29a      	uxth	r2, r3
 800f356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f35a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f35c:	4828      	ldr	r0, [pc, #160]	@ (800f400 <SetLocation+0xcc>)
 800f35e:	f7fc fb47 	bl	800b9f0 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the Location. Keep Location below 15 characters");
 800f362:	4928      	ldr	r1, [pc, #160]	@ (800f404 <SetLocation+0xd0>)
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f7ff fddd 	bl	800ef24 <cli_printf>
	cli_other = 1;
 800f36a:	4b27      	ldr	r3, [pc, #156]	@ (800f408 <SetLocation+0xd4>)
 800f36c:	2201      	movs	r2, #1
 800f36e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f370:	4b26      	ldr	r3, [pc, #152]	@ (800f40c <SetLocation+0xd8>)
 800f372:	2200      	movs	r2, #0
 800f374:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f376:	f107 0310 	add.w	r3, r7, #16
 800f37a:	2232      	movs	r2, #50	@ 0x32
 800f37c:	4619      	mov	r1, r3
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f7ff fe12 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f384:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f386:	f7f0 ff8b 	bl	80002a0 <strlen>
 800f38a:	4603      	mov	r3, r0
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f392:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f394:	481a      	ldr	r0, [pc, #104]	@ (800f400 <SetLocation+0xcc>)
 800f396:	f7fc fb2b 	bl	800b9f0 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f39a:	f107 0310 	add.w	r3, r7, #16
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7f0 ff7e 	bl	80002a0 <strlen>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f3aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f3ae:	2b0e      	cmp	r3, #14
 800f3b0:	d814      	bhi.n	800f3dc <SetLocation+0xa8>
		if (buffer[0] != '\0') {
 800f3b2:	7c3b      	ldrb	r3, [r7, #16]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d015      	beq.n	800f3e4 <SetLocation+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.location, buffer);
 800f3b8:	f107 0310 	add.w	r3, r7, #16
 800f3bc:	4619      	mov	r1, r3
 800f3be:	4814      	ldr	r0, [pc, #80]	@ (800f410 <SetLocation+0xdc>)
 800f3c0:	f00d ffc3 	bl	801d34a <strcpy>
				set_param_flags();
 800f3c4:	4b13      	ldr	r3, [pc, #76]	@ (800f414 <SetLocation+0xe0>)
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	701a      	strb	r2, [r3, #0]
 800f3ca:	4b13      	ldr	r3, [pc, #76]	@ (800f418 <SetLocation+0xe4>)
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "Location is set to: %s",
 800f3d0:	4a0f      	ldr	r2, [pc, #60]	@ (800f410 <SetLocation+0xdc>)
 800f3d2:	4912      	ldr	r1, [pc, #72]	@ (800f41c <SetLocation+0xe8>)
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f7ff fda5 	bl	800ef24 <cli_printf>
 800f3da:	e003      	b.n	800f3e4 <SetLocation+0xb0>
						_Flash_Packet.location);
			}
		}
	} else {
		cli_printf(cli, "Location is too long");
 800f3dc:	4910      	ldr	r1, [pc, #64]	@ (800f420 <SetLocation+0xec>)
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f7ff fda0 	bl	800ef24 <cli_printf>
	}

	flag_cli = 0;
 800f3e4:	4b09      	ldr	r3, [pc, #36]	@ (800f40c <SetLocation+0xd8>)
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f3ea:	4b07      	ldr	r3, [pc, #28]	@ (800f408 <SetLocation+0xd4>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	701a      	strb	r2, [r3, #0]

}
 800f3f0:	bf00      	nop
 800f3f2:	3748      	adds	r7, #72	@ 0x48
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	080207dc 	.word	0x080207dc
 800f3fc:	08020850 	.word	0x08020850
 800f400:	200019c0 	.word	0x200019c0
 800f404:	080208d4 	.word	0x080208d4
 800f408:	20001a7e 	.word	0x20001a7e
 800f40c:	20001a7f 	.word	0x20001a7f
 800f410:	200013f3 	.word	0x200013f3
 800f414:	200014d1 	.word	0x200014d1
 800f418:	200014d2 	.word	0x200014d2
 800f41c:	08020908 	.word	0x08020908
 800f420:	08020920 	.word	0x08020920

0800f424 <Setgroup>:
	flag_cli = 0;
	cli_other = 0;

}

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800f424:	b580      	push	{r7, lr}
 800f426:	b092      	sub	sp, #72	@ 0x48
 800f428:	af00      	add	r7, sp, #0
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	60b9      	str	r1, [r7, #8]
 800f42e:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f430:	4b2d      	ldr	r3, [pc, #180]	@ (800f4e8 <Setgroup+0xc4>)
 800f432:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f434:	492d      	ldr	r1, [pc, #180]	@ (800f4ec <Setgroup+0xc8>)
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f7ff fd74 	bl	800ef24 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f43c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f43e:	f7f0 ff2f 	bl	80002a0 <strlen>
 800f442:	4603      	mov	r3, r0
 800f444:	b29a      	uxth	r2, r3
 800f446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f44a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f44c:	4828      	ldr	r0, [pc, #160]	@ (800f4f0 <Setgroup+0xcc>)
 800f44e:	f7fc facf 	bl	800b9f0 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the group. Keep name below 15 characters");
 800f452:	4928      	ldr	r1, [pc, #160]	@ (800f4f4 <Setgroup+0xd0>)
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f7ff fd65 	bl	800ef24 <cli_printf>
	cli_other = 1;
 800f45a:	4b27      	ldr	r3, [pc, #156]	@ (800f4f8 <Setgroup+0xd4>)
 800f45c:	2201      	movs	r2, #1
 800f45e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f460:	4b26      	ldr	r3, [pc, #152]	@ (800f4fc <Setgroup+0xd8>)
 800f462:	2200      	movs	r2, #0
 800f464:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f466:	f107 0310 	add.w	r3, r7, #16
 800f46a:	2232      	movs	r2, #50	@ 0x32
 800f46c:	4619      	mov	r1, r3
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f7ff fd9a 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f474:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f476:	f7f0 ff13 	bl	80002a0 <strlen>
 800f47a:	4603      	mov	r3, r0
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f482:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f484:	481a      	ldr	r0, [pc, #104]	@ (800f4f0 <Setgroup+0xcc>)
 800f486:	f7fc fab3 	bl	800b9f0 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f48a:	f107 0310 	add.w	r3, r7, #16
 800f48e:	4618      	mov	r0, r3
 800f490:	f7f0 ff06 	bl	80002a0 <strlen>
 800f494:	4603      	mov	r3, r0
 800f496:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f49a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f49e:	2b0e      	cmp	r3, #14
 800f4a0:	d814      	bhi.n	800f4cc <Setgroup+0xa8>
		if (buffer[0] != '\0') {
 800f4a2:	7c3b      	ldrb	r3, [r7, #16]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d015      	beq.n	800f4d4 <Setgroup+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.group, buffer);
 800f4a8:	f107 0310 	add.w	r3, r7, #16
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	4814      	ldr	r0, [pc, #80]	@ (800f500 <Setgroup+0xdc>)
 800f4b0:	f00d ff4b 	bl	801d34a <strcpy>
				set_param_flags();
 800f4b4:	4b13      	ldr	r3, [pc, #76]	@ (800f504 <Setgroup+0xe0>)
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	701a      	strb	r2, [r3, #0]
 800f4ba:	4b13      	ldr	r3, [pc, #76]	@ (800f508 <Setgroup+0xe4>)
 800f4bc:	2201      	movs	r2, #1
 800f4be:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "group is set to: %s", _Flash_Packet.group);
 800f4c0:	4a0f      	ldr	r2, [pc, #60]	@ (800f500 <Setgroup+0xdc>)
 800f4c2:	4912      	ldr	r1, [pc, #72]	@ (800f50c <Setgroup+0xe8>)
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f7ff fd2d 	bl	800ef24 <cli_printf>
 800f4ca:	e003      	b.n	800f4d4 <Setgroup+0xb0>
			}
		}
	} else {
		cli_printf(cli, "group is too long");
 800f4cc:	4910      	ldr	r1, [pc, #64]	@ (800f510 <Setgroup+0xec>)
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f7ff fd28 	bl	800ef24 <cli_printf>
	}

	flag_cli = 0;
 800f4d4:	4b09      	ldr	r3, [pc, #36]	@ (800f4fc <Setgroup+0xd8>)
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f4da:	4b07      	ldr	r3, [pc, #28]	@ (800f4f8 <Setgroup+0xd4>)
 800f4dc:	2200      	movs	r2, #0
 800f4de:	701a      	strb	r2, [r3, #0]

}
 800f4e0:	bf00      	nop
 800f4e2:	3748      	adds	r7, #72	@ 0x48
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	080207dc 	.word	0x080207dc
 800f4ec:	08020850 	.word	0x08020850
 800f4f0:	200019c0 	.word	0x200019c0
 800f4f4:	0802098c 	.word	0x0802098c
 800f4f8:	20001a7e 	.word	0x20001a7e
 800f4fc:	20001a7f 	.word	0x20001a7f
 800f500:	20001457 	.word	0x20001457
 800f504:	200014d1 	.word	0x200014d1
 800f508:	200014d2 	.word	0x200014d2
 800f50c:	080209bc 	.word	0x080209bc
 800f510:	080209d0 	.word	0x080209d0

0800f514 <GetID>:

void GetID(EmbeddedCli *cli, char *args, void *context) {
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "ID: %s", _Flash_Packet.id);
 800f520:	4a04      	ldr	r2, [pc, #16]	@ (800f534 <GetID+0x20>)
 800f522:	4905      	ldr	r1, [pc, #20]	@ (800f538 <GetID+0x24>)
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f7ff fcfd 	bl	800ef24 <cli_printf>
}
 800f52a:	bf00      	nop
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	200013c1 	.word	0x200013c1
 800f538:	080209e4 	.word	0x080209e4

0800f53c <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Location: %s", _Flash_Packet.location);
 800f548:	4a04      	ldr	r2, [pc, #16]	@ (800f55c <GetLocation+0x20>)
 800f54a:	4905      	ldr	r1, [pc, #20]	@ (800f560 <GetLocation+0x24>)
 800f54c:	68f8      	ldr	r0, [r7, #12]
 800f54e:	f7ff fce9 	bl	800ef24 <cli_printf>

}
 800f552:	bf00      	nop
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	200013f3 	.word	0x200013f3
 800f560:	080209ec 	.word	0x080209ec

0800f564 <Getgroup>:
void Getname(EmbeddedCli *cli, char *args, void *context) {
	cli_printf(cli, "Name: %s", _Flash_Packet.name);

}

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Group: %s", _Flash_Packet.group);
 800f570:	4a04      	ldr	r2, [pc, #16]	@ (800f584 <Getgroup+0x20>)
 800f572:	4905      	ldr	r1, [pc, #20]	@ (800f588 <Getgroup+0x24>)
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	f7ff fcd5 	bl	800ef24 <cli_printf>

}
 800f57a:	bf00      	nop
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	20001457 	.word	0x20001457
 800f588:	08020a08 	.word	0x08020a08

0800f58c <SetDate>:

void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b09a      	sub	sp, #104	@ 0x68
 800f590:	af02      	add	r7, sp, #8
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f598:	4b26      	ldr	r3, [pc, #152]	@ (800f634 <SetDate+0xa8>)
 800f59a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800f59c:	4926      	ldr	r1, [pc, #152]	@ (800f638 <SetDate+0xac>)
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	f7ff fcc0 	bl	800ef24 <cli_printf>
			"Set date in following format: day:month:year eg:(15:1:23).");
	cli_other = 1;
 800f5a4:	4b25      	ldr	r3, [pc, #148]	@ (800f63c <SetDate+0xb0>)
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f5aa:	4b25      	ldr	r3, [pc, #148]	@ (800f640 <SetDate+0xb4>)
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f5b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f5b4:	2232      	movs	r2, #50	@ 0x32
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	68f8      	ldr	r0, [r7, #12]
 800f5ba:	f7ff fcf5 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f5be:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800f5c0:	f7f0 fe6e 	bl	80002a0 <strlen>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f5cc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f5ce:	481d      	ldr	r0, [pc, #116]	@ (800f644 <SetDate+0xb8>)
 800f5d0:	f7fc fa0e 	bl	800b9f0 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800f5d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d004      	beq.n	800f5e6 <SetDate+0x5a>
		Set_Date(buffer);
 800f5dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f003 f8bf 	bl	8012764 <Set_Date>
	}
	flag_cli = 0;
 800f5e6:	4b16      	ldr	r3, [pc, #88]	@ (800f640 <SetDate+0xb4>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f5ec:	4b13      	ldr	r3, [pc, #76]	@ (800f63c <SetDate+0xb0>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f5f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	4813      	ldr	r0, [pc, #76]	@ (800f648 <SetDate+0xbc>)
 800f5fc:	f7f9 feb4 	bl	8009368 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f600:	f107 0310 	add.w	r3, r7, #16
 800f604:	2200      	movs	r2, #0
 800f606:	4619      	mov	r1, r3
 800f608:	480f      	ldr	r0, [pc, #60]	@ (800f648 <SetDate+0xbc>)
 800f60a:	f7f9 fdcb 	bl	80091a4 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800f60e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f612:	461a      	mov	r2, r3
 800f614:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f618:	4619      	mov	r1, r3
			gDate.Year);
 800f61a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800f61e:	9300      	str	r3, [sp, #0]
 800f620:	460b      	mov	r3, r1
 800f622:	490a      	ldr	r1, [pc, #40]	@ (800f64c <SetDate+0xc0>)
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f7ff fc7d 	bl	800ef24 <cli_printf>

}
 800f62a:	bf00      	nop
 800f62c:	3760      	adds	r7, #96	@ 0x60
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	080207dc 	.word	0x080207dc
 800f638:	08020a14 	.word	0x08020a14
 800f63c:	20001a7e 	.word	0x20001a7e
 800f640:	20001a7f 	.word	0x20001a7f
 800f644:	200019c0 	.word	0x200019c0
 800f648:	200017e4 	.word	0x200017e4
 800f64c:	08020a50 	.word	0x08020a50

0800f650 <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800f650:	b580      	push	{r7, lr}
 800f652:	b09a      	sub	sp, #104	@ 0x68
 800f654:	af02      	add	r7, sp, #8
 800f656:	60f8      	str	r0, [r7, #12]
 800f658:	60b9      	str	r1, [r7, #8]
 800f65a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f65c:	4b26      	ldr	r3, [pc, #152]	@ (800f6f8 <SetTime+0xa8>)
 800f65e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800f660:	4926      	ldr	r1, [pc, #152]	@ (800f6fc <SetTime+0xac>)
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f7ff fc5e 	bl	800ef24 <cli_printf>
			"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
	cli_other = 1;
 800f668:	4b25      	ldr	r3, [pc, #148]	@ (800f700 <SetTime+0xb0>)
 800f66a:	2201      	movs	r2, #1
 800f66c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f66e:	4b25      	ldr	r3, [pc, #148]	@ (800f704 <SetTime+0xb4>)
 800f670:	2200      	movs	r2, #0
 800f672:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f674:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f678:	2232      	movs	r2, #50	@ 0x32
 800f67a:	4619      	mov	r1, r3
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f7ff fc93 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f682:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800f684:	f7f0 fe0c 	bl	80002a0 <strlen>
 800f688:	4603      	mov	r3, r0
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f690:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f692:	481d      	ldr	r0, [pc, #116]	@ (800f708 <SetTime+0xb8>)
 800f694:	f7fc f9ac 	bl	800b9f0 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800f698:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d004      	beq.n	800f6aa <SetTime+0x5a>
		Set_Time(buffer);
 800f6a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f003 f917 	bl	80128d8 <Set_Time>
	}
	flag_cli = 0;
 800f6aa:	4b16      	ldr	r3, [pc, #88]	@ (800f704 <SetTime+0xb4>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f6b0:	4b13      	ldr	r3, [pc, #76]	@ (800f700 <SetTime+0xb0>)
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800f6b6:	4b15      	ldr	r3, [pc, #84]	@ (800f70c <SetTime+0xbc>)
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f6bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	4812      	ldr	r0, [pc, #72]	@ (800f710 <SetTime+0xc0>)
 800f6c6:	f7f9 fe4f 	bl	8009368 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f6ca:	f107 0310 	add.w	r3, r7, #16
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	480f      	ldr	r0, [pc, #60]	@ (800f710 <SetTime+0xc0>)
 800f6d4:	f7f9 fd66 	bl	80091a4 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f6d8:	7c3b      	ldrb	r3, [r7, #16]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	7c7b      	ldrb	r3, [r7, #17]
 800f6de:	4619      	mov	r1, r3
			gTime.Seconds);
 800f6e0:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f6e2:	9300      	str	r3, [sp, #0]
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	490b      	ldr	r1, [pc, #44]	@ (800f714 <SetTime+0xc4>)
 800f6e8:	68f8      	ldr	r0, [r7, #12]
 800f6ea:	f7ff fc1b 	bl	800ef24 <cli_printf>

}
 800f6ee:	bf00      	nop
 800f6f0:	3760      	adds	r7, #96	@ 0x60
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	080207dc 	.word	0x080207dc
 800f6fc:	08020a6c 	.word	0x08020a6c
 800f700:	20001a7e 	.word	0x20001a7e
 800f704:	20001a7f 	.word	0x20001a7f
 800f708:	200019c0 	.word	0x200019c0
 800f70c:	2000002d 	.word	0x2000002d
 800f710:	200017e4 	.word	0x200017e4
 800f714:	08020ab0 	.word	0x08020ab0

0800f718 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800f718:	b580      	push	{r7, lr}
 800f71a:	b08c      	sub	sp, #48	@ 0x30
 800f71c:	af02      	add	r7, sp, #8
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f728:	2200      	movs	r2, #0
 800f72a:	4619      	mov	r1, r3
 800f72c:	480f      	ldr	r0, [pc, #60]	@ (800f76c <GetDate+0x54>)
 800f72e:	f7f9 fe1b 	bl	8009368 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f732:	f107 0310 	add.w	r3, r7, #16
 800f736:	2200      	movs	r2, #0
 800f738:	4619      	mov	r1, r3
 800f73a:	480c      	ldr	r0, [pc, #48]	@ (800f76c <GetDate+0x54>)
 800f73c:	f7f9 fd32 	bl	80091a4 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d.%02d.%02d", gDate.Date, gDate.Month, gDate.Year);
 800f740:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f744:	461a      	mov	r2, r3
 800f746:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f74a:	4619      	mov	r1, r3
 800f74c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	460b      	mov	r3, r1
 800f754:	4906      	ldr	r1, [pc, #24]	@ (800f770 <GetDate+0x58>)
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f7ff fbe4 	bl	800ef24 <cli_printf>
	HAL_Delay(100);
 800f75c:	2064      	movs	r0, #100	@ 0x64
 800f75e:	f7f4 fa9b 	bl	8003c98 <HAL_Delay>
}
 800f762:	bf00      	nop
 800f764:	3728      	adds	r7, #40	@ 0x28
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	200017e4 	.word	0x200017e4
 800f770:	08020acc 	.word	0x08020acc

0800f774 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800f774:	b580      	push	{r7, lr}
 800f776:	b08c      	sub	sp, #48	@ 0x30
 800f778:	af02      	add	r7, sp, #8
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f784:	2200      	movs	r2, #0
 800f786:	4619      	mov	r1, r3
 800f788:	480d      	ldr	r0, [pc, #52]	@ (800f7c0 <GetTime+0x4c>)
 800f78a:	f7f9 fded 	bl	8009368 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f78e:	f107 0310 	add.w	r3, r7, #16
 800f792:	2200      	movs	r2, #0
 800f794:	4619      	mov	r1, r3
 800f796:	480a      	ldr	r0, [pc, #40]	@ (800f7c0 <GetTime+0x4c>)
 800f798:	f7f9 fd04 	bl	80091a4 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f79c:	7c3b      	ldrb	r3, [r7, #16]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	7c7b      	ldrb	r3, [r7, #17]
 800f7a2:	4619      	mov	r1, r3
			gTime.Seconds);
 800f7a4:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	4906      	ldr	r1, [pc, #24]	@ (800f7c4 <GetTime+0x50>)
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f7ff fbb9 	bl	800ef24 <cli_printf>
	HAL_Delay(100);
 800f7b2:	2064      	movs	r0, #100	@ 0x64
 800f7b4:	f7f4 fa70 	bl	8003c98 <HAL_Delay>
}
 800f7b8:	bf00      	nop
 800f7ba:	3728      	adds	r7, #40	@ 0x28
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	200017e4 	.word	0x200017e4
 800f7c4:	08020adc 	.word	0x08020adc

0800f7c8 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b092      	sub	sp, #72	@ 0x48
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f7d4:	4b54      	ldr	r3, [pc, #336]	@ (800f928 <SetInterval+0x160>)
 800f7d6:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f7d8:	4954      	ldr	r1, [pc, #336]	@ (800f92c <SetInterval+0x164>)
 800f7da:	68f8      	ldr	r0, [r7, #12]
 800f7dc:	f7ff fba2 	bl	800ef24 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f7e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f7e2:	f7f0 fd5d 	bl	80002a0 <strlen>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	b29a      	uxth	r2, r3
 800f7ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f7ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f7f0:	484f      	ldr	r0, [pc, #316]	@ (800f930 <SetInterval+0x168>)
 800f7f2:	f7fc f8fd 	bl	800b9f0 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter 1 for 5min.");
 800f7f6:	494f      	ldr	r1, [pc, #316]	@ (800f934 <SetInterval+0x16c>)
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f7ff fb93 	bl	800ef24 <cli_printf>
	cli_printf(cli, "Enter 2 for 15min.");
 800f7fe:	494e      	ldr	r1, [pc, #312]	@ (800f938 <SetInterval+0x170>)
 800f800:	68f8      	ldr	r0, [r7, #12]
 800f802:	f7ff fb8f 	bl	800ef24 <cli_printf>
	cli_printf(cli, "Enter 3 for 60min.");
 800f806:	494d      	ldr	r1, [pc, #308]	@ (800f93c <SetInterval+0x174>)
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f7ff fb8b 	bl	800ef24 <cli_printf>
	cli_printf(cli,
 800f80e:	494c      	ldr	r1, [pc, #304]	@ (800f940 <SetInterval+0x178>)
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f7ff fb87 	bl	800ef24 <cli_printf>
			"Disclaimer: The battery life will be reduced if interval is reduced.");
	cli_other = 1;
 800f816:	4b4b      	ldr	r3, [pc, #300]	@ (800f944 <SetInterval+0x17c>)
 800f818:	2201      	movs	r2, #1
 800f81a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f81c:	4b4a      	ldr	r3, [pc, #296]	@ (800f948 <SetInterval+0x180>)
 800f81e:	2200      	movs	r2, #0
 800f820:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f822:	f107 0310 	add.w	r3, r7, #16
 800f826:	2232      	movs	r2, #50	@ 0x32
 800f828:	4619      	mov	r1, r3
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f7ff fbbc 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f830:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f832:	f7f0 fd35 	bl	80002a0 <strlen>
 800f836:	4603      	mov	r3, r0
 800f838:	b29a      	uxth	r2, r3
 800f83a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f83e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f840:	483b      	ldr	r0, [pc, #236]	@ (800f930 <SetInterval+0x168>)
 800f842:	f7fc f8d5 	bl	800b9f0 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800f846:	f107 0310 	add.w	r3, r7, #16
 800f84a:	2131      	movs	r1, #49	@ 0x31
 800f84c:	4618      	mov	r0, r3
 800f84e:	f00d fc75 	bl	801d13c <strchr>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d015      	beq.n	800f884 <SetInterval+0xbc>
		_Flash_Packet.Time_Interval = 5;
 800f858:	4b3c      	ldr	r3, [pc, #240]	@ (800f94c <SetInterval+0x184>)
 800f85a:	2200      	movs	r2, #0
 800f85c:	f042 0205 	orr.w	r2, r2, #5
 800f860:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800f864:	2200      	movs	r2, #0
 800f866:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800f86a:	2200      	movs	r2, #0
 800f86c:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800f870:	2200      	movs	r2, #0
 800f872:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800f876:	4b36      	ldr	r3, [pc, #216]	@ (800f950 <SetInterval+0x188>)
 800f878:	2201      	movs	r2, #1
 800f87a:	701a      	strb	r2, [r3, #0]
 800f87c:	4b35      	ldr	r3, [pc, #212]	@ (800f954 <SetInterval+0x18c>)
 800f87e:	2201      	movs	r2, #1
 800f880:	701a      	strb	r2, [r3, #0]
 800f882:	e03c      	b.n	800f8fe <SetInterval+0x136>
	} else if (strstr(buffer, "2")) {
 800f884:	f107 0310 	add.w	r3, r7, #16
 800f888:	2132      	movs	r1, #50	@ 0x32
 800f88a:	4618      	mov	r0, r3
 800f88c:	f00d fc56 	bl	801d13c <strchr>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d015      	beq.n	800f8c2 <SetInterval+0xfa>
		_Flash_Packet.Time_Interval = 15;
 800f896:	4b2d      	ldr	r3, [pc, #180]	@ (800f94c <SetInterval+0x184>)
 800f898:	2200      	movs	r2, #0
 800f89a:	f042 020f 	orr.w	r2, r2, #15
 800f89e:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800f8b4:	4b26      	ldr	r3, [pc, #152]	@ (800f950 <SetInterval+0x188>)
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	701a      	strb	r2, [r3, #0]
 800f8ba:	4b26      	ldr	r3, [pc, #152]	@ (800f954 <SetInterval+0x18c>)
 800f8bc:	2201      	movs	r2, #1
 800f8be:	701a      	strb	r2, [r3, #0]
 800f8c0:	e01d      	b.n	800f8fe <SetInterval+0x136>
	} else if (strstr(buffer, "3")) {
 800f8c2:	f107 0310 	add.w	r3, r7, #16
 800f8c6:	2133      	movs	r1, #51	@ 0x33
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f00d fc37 	bl	801d13c <strchr>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d014      	beq.n	800f8fe <SetInterval+0x136>
		_Flash_Packet.Time_Interval = 60;
 800f8d4:	4b1d      	ldr	r3, [pc, #116]	@ (800f94c <SetInterval+0x184>)
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f042 023c 	orr.w	r2, r2, #60	@ 0x3c
 800f8dc:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800f8f2:	4b17      	ldr	r3, [pc, #92]	@ (800f950 <SetInterval+0x188>)
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	701a      	strb	r2, [r3, #0]
 800f8f8:	4b16      	ldr	r3, [pc, #88]	@ (800f954 <SetInterval+0x18c>)
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800f8fe:	4b12      	ldr	r3, [pc, #72]	@ (800f948 <SetInterval+0x180>)
 800f900:	2200      	movs	r2, #0
 800f902:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f904:	4b0f      	ldr	r3, [pc, #60]	@ (800f944 <SetInterval+0x17c>)
 800f906:	2200      	movs	r2, #0
 800f908:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "Interval is set to: %ldmin", _Flash_Packet.Time_Interval);
 800f90a:	4b10      	ldr	r3, [pc, #64]	@ (800f94c <SetInterval+0x184>)
 800f90c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f910:	461a      	mov	r2, r3
 800f912:	4911      	ldr	r1, [pc, #68]	@ (800f958 <SetInterval+0x190>)
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f7ff fb05 	bl	800ef24 <cli_printf>
	set_alarm_Time = 1;
 800f91a:	4b10      	ldr	r3, [pc, #64]	@ (800f95c <SetInterval+0x194>)
 800f91c:	2201      	movs	r2, #1
 800f91e:	701a      	strb	r2, [r3, #0]
}
 800f920:	bf00      	nop
 800f922:	3748      	adds	r7, #72	@ 0x48
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	080207dc 	.word	0x080207dc
 800f92c:	08020850 	.word	0x08020850
 800f930:	200019c0 	.word	0x200019c0
 800f934:	08020aec 	.word	0x08020aec
 800f938:	08020b00 	.word	0x08020b00
 800f93c:	08020b14 	.word	0x08020b14
 800f940:	08020b28 	.word	0x08020b28
 800f944:	20001a7e 	.word	0x20001a7e
 800f948:	20001a7f 	.word	0x20001a7f
 800f94c:	200012f4 	.word	0x200012f4
 800f950:	200014d1 	.word	0x200014d1
 800f954:	200014d2 	.word	0x200014d2
 800f958:	08020b70 	.word	0x08020b70
 800f95c:	2000002d 	.word	0x2000002d

0800f960 <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Interval is Set to: %ldmin", _Flash_Packet.Time_Interval);
 800f96c:	4b05      	ldr	r3, [pc, #20]	@ (800f984 <GetInterval+0x24>)
 800f96e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f972:	461a      	mov	r2, r3
 800f974:	4904      	ldr	r1, [pc, #16]	@ (800f988 <GetInterval+0x28>)
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	f7ff fad4 	bl	800ef24 <cli_printf>

}
 800f97c:	bf00      	nop
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}
 800f984:	200012f4 	.word	0x200012f4
 800f988:	08020b8c 	.word	0x08020b8c

0800f98c <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b09a      	sub	sp, #104	@ 0x68
 800f990:	af02      	add	r7, sp, #8
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f998:	4b40      	ldr	r3, [pc, #256]	@ (800fa9c <SetFilename+0x110>)
 800f99a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f99c:	4940      	ldr	r1, [pc, #256]	@ (800faa0 <SetFilename+0x114>)
 800f99e:	68f8      	ldr	r0, [r7, #12]
 800f9a0:	f7ff fac0 	bl	800ef24 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f9a4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800f9a6:	f7f0 fc7b 	bl	80002a0 <strlen>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f9b2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f9b4:	483b      	ldr	r0, [pc, #236]	@ (800faa4 <SetFilename+0x118>)
 800f9b6:	f7fc f81b 	bl	800b9f0 <HAL_UART_Transmit>
			1000);
	cli_printf(cli,
 800f9ba:	493b      	ldr	r1, [pc, #236]	@ (800faa8 <SetFilename+0x11c>)
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f7ff fab1 	bl	800ef24 <cli_printf>
			"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
	cli_printf(cli,
 800f9c2:	493a      	ldr	r1, [pc, #232]	@ (800faac <SetFilename+0x120>)
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f7ff faad 	bl	800ef24 <cli_printf>
			"If any special characters they will be omitted automatically.");

	cli_other = 1;
 800f9ca:	4b39      	ldr	r3, [pc, #228]	@ (800fab0 <SetFilename+0x124>)
 800f9cc:	2201      	movs	r2, #1
 800f9ce:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f9d0:	4b38      	ldr	r3, [pc, #224]	@ (800fab4 <SetFilename+0x128>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f9d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f9da:	2232      	movs	r2, #50	@ 0x32
 800f9dc:	4619      	mov	r1, r3
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f7ff fae2 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f9e4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800f9e6:	f7f0 fc5b 	bl	80002a0 <strlen>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f9f2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f9f4:	482b      	ldr	r0, [pc, #172]	@ (800faa4 <SetFilename+0x118>)
 800f9f6:	f7fb fffb 	bl	800b9f0 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f9fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7f0 fc4e 	bl	80002a0 <strlen>
 800fa04:	4603      	mov	r3, r0
 800fa06:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (len < 20) {
 800fa0a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800fa0e:	2b13      	cmp	r3, #19
 800fa10:	d836      	bhi.n	800fa80 <SetFilename+0xf4>
		if (buffer[0] != '\0') {
 800fa12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d036      	beq.n	800fa88 <SetFilename+0xfc>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.File_Name, buffer);
 800fa1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fa1e:	4619      	mov	r1, r3
 800fa20:	4825      	ldr	r0, [pc, #148]	@ (800fab8 <SetFilename+0x12c>)
 800fa22:	f00d fc92 	bl	801d34a <strcpy>
				set_param_flags();
 800fa26:	4b25      	ldr	r3, [pc, #148]	@ (800fabc <SetFilename+0x130>)
 800fa28:	2201      	movs	r2, #1
 800fa2a:	701a      	strb	r2, [r3, #0]
 800fa2c:	4b24      	ldr	r3, [pc, #144]	@ (800fac0 <SetFilename+0x134>)
 800fa2e:	2201      	movs	r2, #1
 800fa30:	701a      	strb	r2, [r3, #0]
				_RunTime_Packet.filename_changed = 1;
 800fa32:	4b24      	ldr	r3, [pc, #144]	@ (800fac4 <SetFilename+0x138>)
 800fa34:	2201      	movs	r2, #1
 800fa36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				cli_printf(cli, "Filename is set to: %s",
 800fa3a:	4a1f      	ldr	r2, [pc, #124]	@ (800fab8 <SetFilename+0x12c>)
 800fa3c:	4922      	ldr	r1, [pc, #136]	@ (800fac8 <SetFilename+0x13c>)
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f7ff fa70 	bl	800ef24 <cli_printf>
						_Flash_Packet.File_Name);

				RTC_DateTypeDef sDate;
				HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 800fa44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fa48:	2200      	movs	r2, #0
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	481f      	ldr	r0, [pc, #124]	@ (800facc <SetFilename+0x140>)
 800fa4e:	f7f9 fc8b 	bl	8009368 <HAL_RTC_GetDate>
				RTC_TimeTypeDef sTime;
				HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 800fa52:	f107 0310 	add.w	r3, r7, #16
 800fa56:	2200      	movs	r2, #0
 800fa58:	4619      	mov	r1, r3
 800fa5a:	481c      	ldr	r0, [pc, #112]	@ (800facc <SetFilename+0x140>)
 800fa5c:	f7f9 fba2 	bl	80091a4 <HAL_RTC_GetTime>


				sprintf(filename_ver_date, "%s_%02d-%02d-%02d", _Flash_Packet.File_Name, sDate.Year,sDate.Month, sDate.Date);
 800fa60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa64:	4619      	mov	r1, r3
 800fa66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fa6a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fa6e:	9201      	str	r2, [sp, #4]
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	460b      	mov	r3, r1
 800fa74:	4a10      	ldr	r2, [pc, #64]	@ (800fab8 <SetFilename+0x12c>)
 800fa76:	4916      	ldr	r1, [pc, #88]	@ (800fad0 <SetFilename+0x144>)
 800fa78:	4816      	ldr	r0, [pc, #88]	@ (800fad4 <SetFilename+0x148>)
 800fa7a:	f00d fa0d 	bl	801ce98 <siprintf>
 800fa7e:	e003      	b.n	800fa88 <SetFilename+0xfc>
			}
		}
	} else {
		cli_printf(cli, "Filename is too long");
 800fa80:	4915      	ldr	r1, [pc, #84]	@ (800fad8 <SetFilename+0x14c>)
 800fa82:	68f8      	ldr	r0, [r7, #12]
 800fa84:	f7ff fa4e 	bl	800ef24 <cli_printf>
	}

	flag_cli = 0;
 800fa88:	4b0a      	ldr	r3, [pc, #40]	@ (800fab4 <SetFilename+0x128>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fa8e:	4b08      	ldr	r3, [pc, #32]	@ (800fab0 <SetFilename+0x124>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	701a      	strb	r2, [r3, #0]

}
 800fa94:	bf00      	nop
 800fa96:	3760      	adds	r7, #96	@ 0x60
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	080207dc 	.word	0x080207dc
 800faa0:	08020850 	.word	0x08020850
 800faa4:	200019c0 	.word	0x200019c0
 800faa8:	08020ba8 	.word	0x08020ba8
 800faac:	08020c1c 	.word	0x08020c1c
 800fab0:	20001a7e 	.word	0x20001a7e
 800fab4:	20001a7f 	.word	0x20001a7f
 800fab8:	200012f4 	.word	0x200012f4
 800fabc:	200014d1 	.word	0x200014d1
 800fac0:	200014d2 	.word	0x200014d2
 800fac4:	2000148c 	.word	0x2000148c
 800fac8:	08020c5c 	.word	0x08020c5c
 800facc:	200017e4 	.word	0x200017e4
 800fad0:	08020c74 	.word	0x08020c74
 800fad4:	200022cc 	.word	0x200022cc
 800fad8:	08020c88 	.word	0x08020c88

0800fadc <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Filename is set to: %s", filename_ver_date);
 800fae8:	4a04      	ldr	r2, [pc, #16]	@ (800fafc <GetFilename+0x20>)
 800faea:	4905      	ldr	r1, [pc, #20]	@ (800fb00 <GetFilename+0x24>)
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f7ff fa19 	bl	800ef24 <cli_printf>

}
 800faf2:	bf00      	nop
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	200022cc 	.word	0x200022cc
 800fb00:	08020c5c 	.word	0x08020c5c

0800fb04 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b092      	sub	sp, #72	@ 0x48
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 800fb10:	4b41      	ldr	r3, [pc, #260]	@ (800fc18 <SetFileformat+0x114>)
 800fb12:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fb14:	4941      	ldr	r1, [pc, #260]	@ (800fc1c <SetFileformat+0x118>)
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f7ff fa04 	bl	800ef24 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fb1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fb1e:	f7f0 fbbf 	bl	80002a0 <strlen>
 800fb22:	4603      	mov	r3, r0
 800fb24:	b29a      	uxth	r2, r3
 800fb26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fb2c:	483c      	ldr	r0, [pc, #240]	@ (800fc20 <SetFileformat+0x11c>)
 800fb2e:	f7fb ff5f 	bl	800b9f0 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Following file formats are allowed:");
 800fb32:	493c      	ldr	r1, [pc, #240]	@ (800fc24 <SetFileformat+0x120>)
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	f7ff f9f5 	bl	800ef24 <cli_printf>
	cli_printf(cli, "1. (.csv)");
 800fb3a:	493b      	ldr	r1, [pc, #236]	@ (800fc28 <SetFileformat+0x124>)
 800fb3c:	68f8      	ldr	r0, [r7, #12]
 800fb3e:	f7ff f9f1 	bl	800ef24 <cli_printf>
	cli_printf(cli, "2. (.json)");
 800fb42:	493a      	ldr	r1, [pc, #232]	@ (800fc2c <SetFileformat+0x128>)
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f7ff f9ed 	bl	800ef24 <cli_printf>
	cli_printf(cli, "Enter the number to select your desired format");
 800fb4a:	4939      	ldr	r1, [pc, #228]	@ (800fc30 <SetFileformat+0x12c>)
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f7ff f9e9 	bl	800ef24 <cli_printf>

	cli_other = 1;
 800fb52:	4b38      	ldr	r3, [pc, #224]	@ (800fc34 <SetFileformat+0x130>)
 800fb54:	2201      	movs	r2, #1
 800fb56:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fb58:	4b37      	ldr	r3, [pc, #220]	@ (800fc38 <SetFileformat+0x134>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fb5e:	f107 0310 	add.w	r3, r7, #16
 800fb62:	2232      	movs	r2, #50	@ 0x32
 800fb64:	4619      	mov	r1, r3
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f7ff fa1e 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fb6c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fb6e:	f7f0 fb97 	bl	80002a0 <strlen>
 800fb72:	4603      	mov	r3, r0
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fb7c:	4828      	ldr	r0, [pc, #160]	@ (800fc20 <SetFileformat+0x11c>)
 800fb7e:	f7fb ff37 	bl	800b9f0 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800fb82:	f107 0310 	add.w	r3, r7, #16
 800fb86:	2131      	movs	r1, #49	@ 0x31
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f00d fad7 	bl	801d13c <strchr>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d014      	beq.n	800fbbe <SetFileformat+0xba>
		strcpy(_Flash_Packet.File_Format, ".CSV");
 800fb94:	4b29      	ldr	r3, [pc, #164]	@ (800fc3c <SetFileformat+0x138>)
 800fb96:	4a2a      	ldr	r2, [pc, #168]	@ (800fc40 <SetFileformat+0x13c>)
 800fb98:	6810      	ldr	r0, [r2, #0]
 800fb9a:	6018      	str	r0, [r3, #0]
 800fb9c:	7912      	ldrb	r2, [r2, #4]
 800fb9e:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 800fba0:	4b28      	ldr	r3, [pc, #160]	@ (800fc44 <SetFileformat+0x140>)
 800fba2:	2201      	movs	r2, #1
 800fba4:	701a      	strb	r2, [r3, #0]
 800fba6:	4b28      	ldr	r3, [pc, #160]	@ (800fc48 <SetFileformat+0x144>)
 800fba8:	2201      	movs	r2, #1
 800fbaa:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 800fbac:	4b27      	ldr	r3, [pc, #156]	@ (800fc4c <SetFileformat+0x148>)
 800fbae:	2201      	movs	r2, #1
 800fbb0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 1;
 800fbb4:	4b25      	ldr	r3, [pc, #148]	@ (800fc4c <SetFileformat+0x148>)
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 800fbbc:	e01c      	b.n	800fbf8 <SetFileformat+0xf4>
	} else if (strstr(buffer, "2")) {
 800fbbe:	f107 0310 	add.w	r3, r7, #16
 800fbc2:	2132      	movs	r1, #50	@ 0x32
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f00d fab9 	bl	801d13c <strchr>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d013      	beq.n	800fbf8 <SetFileformat+0xf4>
		strcpy(_Flash_Packet.File_Format, ".JSON");
 800fbd0:	4b1a      	ldr	r3, [pc, #104]	@ (800fc3c <SetFileformat+0x138>)
 800fbd2:	4a1f      	ldr	r2, [pc, #124]	@ (800fc50 <SetFileformat+0x14c>)
 800fbd4:	6810      	ldr	r0, [r2, #0]
 800fbd6:	6018      	str	r0, [r3, #0]
 800fbd8:	8892      	ldrh	r2, [r2, #4]
 800fbda:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 800fbdc:	4b19      	ldr	r3, [pc, #100]	@ (800fc44 <SetFileformat+0x140>)
 800fbde:	2201      	movs	r2, #1
 800fbe0:	701a      	strb	r2, [r3, #0]
 800fbe2:	4b19      	ldr	r3, [pc, #100]	@ (800fc48 <SetFileformat+0x144>)
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 800fbe8:	4b18      	ldr	r3, [pc, #96]	@ (800fc4c <SetFileformat+0x148>)
 800fbea:	2201      	movs	r2, #1
 800fbec:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 0;
 800fbf0:	4b16      	ldr	r3, [pc, #88]	@ (800fc4c <SetFileformat+0x148>)
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	}

	flag_cli = 0;
 800fbf8:	4b0f      	ldr	r3, [pc, #60]	@ (800fc38 <SetFileformat+0x134>)
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fbfe:	4b0d      	ldr	r3, [pc, #52]	@ (800fc34 <SetFileformat+0x130>)
 800fc00:	2200      	movs	r2, #0
 800fc02:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 800fc04:	4a0d      	ldr	r2, [pc, #52]	@ (800fc3c <SetFileformat+0x138>)
 800fc06:	4913      	ldr	r1, [pc, #76]	@ (800fc54 <SetFileformat+0x150>)
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7ff f98b 	bl	800ef24 <cli_printf>

}
 800fc0e:	bf00      	nop
 800fc10:	3748      	adds	r7, #72	@ 0x48
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	080207dc 	.word	0x080207dc
 800fc1c:	08020850 	.word	0x08020850
 800fc20:	200019c0 	.word	0x200019c0
 800fc24:	08020ca0 	.word	0x08020ca0
 800fc28:	08020cc4 	.word	0x08020cc4
 800fc2c:	08020cd0 	.word	0x08020cd0
 800fc30:	08020cdc 	.word	0x08020cdc
 800fc34:	20001a7e 	.word	0x20001a7e
 800fc38:	20001a7f 	.word	0x20001a7f
 800fc3c:	20001358 	.word	0x20001358
 800fc40:	08020d0c 	.word	0x08020d0c
 800fc44:	200014d1 	.word	0x200014d1
 800fc48:	200014d2 	.word	0x200014d2
 800fc4c:	2000148c 	.word	0x2000148c
 800fc50:	08020d14 	.word	0x08020d14
 800fc54:	08020d1c 	.word	0x08020d1c

0800fc58 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 800fc64:	4a04      	ldr	r2, [pc, #16]	@ (800fc78 <GetFileformat+0x20>)
 800fc66:	4905      	ldr	r1, [pc, #20]	@ (800fc7c <GetFileformat+0x24>)
 800fc68:	68f8      	ldr	r0, [r7, #12]
 800fc6a:	f7ff f95b 	bl	800ef24 <cli_printf>

}
 800fc6e:	bf00      	nop
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	20001358 	.word	0x20001358
 800fc7c:	08020d1c 	.word	0x08020d1c

0800fc80 <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b096      	sub	sp, #88	@ 0x58
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 800fc8c:	4b48      	ldr	r3, [pc, #288]	@ (800fdb0 <fanclean+0x130>)
 800fc8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int counter = 0;
 800fc90:	2300      	movs	r3, #0
 800fc92:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 800fc94:	4b47      	ldr	r3, [pc, #284]	@ (800fdb4 <fanclean+0x134>)
 800fc96:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_printf(cli,
 800fc9e:	4946      	ldr	r1, [pc, #280]	@ (800fdb8 <fanclean+0x138>)
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f7ff f93f 	bl	800ef24 <cli_printf>
			"Do you want to initiate particle sensor fan-cleaning? y/n?");

	cli_other = 1;
 800fca6:	4b45      	ldr	r3, [pc, #276]	@ (800fdbc <fanclean+0x13c>)
 800fca8:	2201      	movs	r2, #1
 800fcaa:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fcac:	4b44      	ldr	r3, [pc, #272]	@ (800fdc0 <fanclean+0x140>)
 800fcae:	2200      	movs	r2, #0
 800fcb0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fcb2:	f107 0314 	add.w	r3, r7, #20
 800fcb6:	2232      	movs	r2, #50	@ 0x32
 800fcb8:	4619      	mov	r1, r3
 800fcba:	68f8      	ldr	r0, [r7, #12]
 800fcbc:	f7ff f974 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fcc0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800fcc2:	f7f0 faed 	bl	80002a0 <strlen>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fcce:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fcd0:	483c      	ldr	r0, [pc, #240]	@ (800fdc4 <fanclean+0x144>)
 800fcd2:	f7fb fe8d 	bl	800b9f0 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "n")) {
 800fcd6:	f107 0314 	add.w	r3, r7, #20
 800fcda:	216e      	movs	r1, #110	@ 0x6e
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f00d fa2d 	bl	801d13c <strchr>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00f      	beq.n	800fd08 <fanclean+0x88>
		_Flash_Packet.Calibration_Status = 0;
 800fce8:	4b37      	ldr	r3, [pc, #220]	@ (800fdc8 <fanclean+0x148>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
		_RunTime_Packet.PM_calibration = 1;
 800fcf0:	4b36      	ldr	r3, [pc, #216]	@ (800fdcc <fanclean+0x14c>)
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		cli_printf(cli, "Particle sensor fan-cleaning aborted.");
 800fcf8:	4935      	ldr	r1, [pc, #212]	@ (800fdd0 <fanclean+0x150>)
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	f7ff f912 	bl	800ef24 <cli_printf>
		//set_param_flags();
		do_Calibration = 0;
 800fd00:	2300      	movs	r3, #0
 800fd02:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800fd06:	e00f      	b.n	800fd28 <fanclean+0xa8>
	} else if (strstr(buffer, "y")) {
 800fd08:	f107 0314 	add.w	r3, r7, #20
 800fd0c:	2179      	movs	r1, #121	@ 0x79
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f00d fa14 	bl	801d13c <strchr>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d006      	beq.n	800fd28 <fanclean+0xa8>
		_RunTime_Packet.PM_calibration = 0;
 800fd1a:	4b2c      	ldr	r3, [pc, #176]	@ (800fdcc <fanclean+0x14c>)
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		do_Calibration = 1;
 800fd22:	2301      	movs	r3, #1
 800fd24:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 800fd28:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d135      	bne.n	800fd9c <fanclean+0x11c>

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fd30:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800fd32:	f7f0 fab5 	bl	80002a0 <strlen>
 800fd36:	4603      	mov	r3, r0
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd3e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fd40:	4820      	ldr	r0, [pc, #128]	@ (800fdc4 <fanclean+0x144>)
 800fd42:	f7fb fe55 	bl	800b9f0 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Particle sensor fan-cleaning initiated, please wait.");
 800fd46:	4923      	ldr	r1, [pc, #140]	@ (800fdd4 <fanclean+0x154>)
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f7ff f8eb 	bl	800ef24 <cli_printf>
		while (counter < 8) {
 800fd4e:	e013      	b.n	800fd78 <fanclean+0xf8>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 800fd50:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800fd52:	f7f0 faa5 	bl	80002a0 <strlen>
 800fd56:	4603      	mov	r3, r0
 800fd58:	b29a      	uxth	r2, r3
 800fd5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800fd60:	4818      	ldr	r0, [pc, #96]	@ (800fdc4 <fanclean+0x144>)
 800fd62:	f7fb fe45 	bl	800b9f0 <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 800fd66:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800fd6a:	f7f3 ff95 	bl	8003c98 <HAL_Delay>
			toggle_blue_led();
 800fd6e:	f7f1 f9a5 	bl	80010bc <toggle_blue_led>
			counter++;
 800fd72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd74:	3301      	adds	r3, #1
 800fd76:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 800fd78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd7a:	2b07      	cmp	r3, #7
 800fd7c:	dde8      	ble.n	800fd50 <fanclean+0xd0>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fd7e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800fd80:	f7f0 fa8e 	bl	80002a0 <strlen>
 800fd84:	4603      	mov	r3, r0
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd8c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fd8e:	480d      	ldr	r0, [pc, #52]	@ (800fdc4 <fanclean+0x144>)
 800fd90:	f7fb fe2e 	bl	800b9f0 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "fan-cleaning done.");
 800fd94:	4910      	ldr	r1, [pc, #64]	@ (800fdd8 <fanclean+0x158>)
 800fd96:	68f8      	ldr	r0, [r7, #12]
 800fd98:	f7ff f8c4 	bl	800ef24 <cli_printf>

	}

	flag_cli = 0;
 800fd9c:	4b08      	ldr	r3, [pc, #32]	@ (800fdc0 <fanclean+0x140>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fda2:	4b06      	ldr	r3, [pc, #24]	@ (800fdbc <fanclean+0x13c>)
 800fda4:	2200      	movs	r2, #0
 800fda6:	701a      	strb	r2, [r3, #0]
}
 800fda8:	bf00      	nop
 800fdaa:	3758      	adds	r7, #88	@ 0x58
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	080207dc 	.word	0x080207dc
 800fdb4:	08020d38 	.word	0x08020d38
 800fdb8:	08020d44 	.word	0x08020d44
 800fdbc:	20001a7e 	.word	0x20001a7e
 800fdc0:	20001a7f 	.word	0x20001a7f
 800fdc4:	200019c0 	.word	0x200019c0
 800fdc8:	200012f4 	.word	0x200012f4
 800fdcc:	2000148c 	.word	0x2000148c
 800fdd0:	08020d80 	.word	0x08020d80
 800fdd4:	08020da8 	.word	0x08020da8
 800fdd8:	08020de0 	.word	0x08020de0

0800fddc <co2calibrate>:

void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b096      	sub	sp, #88	@ 0x58
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fde8:	4b55      	ldr	r3, [pc, #340]	@ (800ff40 <co2calibrate+0x164>)
 800fdea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 800fdec:	2300      	movs	r3, #0
 800fdee:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 800fdf0:	4b54      	ldr	r3, [pc, #336]	@ (800ff44 <co2calibrate+0x168>)
 800fdf2:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	cli_other = 1;
 800fdfa:	4b53      	ldr	r3, [pc, #332]	@ (800ff48 <co2calibrate+0x16c>)
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fe00:	4b52      	ldr	r3, [pc, #328]	@ (800ff4c <co2calibrate+0x170>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 800fe06:	f107 0310 	add.w	r3, r7, #16
 800fe0a:	2232      	movs	r2, #50	@ 0x32
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f00d f98c 	bl	801d12c <memset>
	cli_printf(cli,
 800fe14:	494e      	ldr	r1, [pc, #312]	@ (800ff50 <co2calibrate+0x174>)
 800fe16:	68f8      	ldr	r0, [r7, #12]
 800fe18:	f7ff f884 	bl	800ef24 <cli_printf>
			"To calibrate Co2 sensor, please provide Co2 concentration value.");
	cli_printf(cli,
 800fe1c:	494d      	ldr	r1, [pc, #308]	@ (800ff54 <co2calibrate+0x178>)
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f7ff f880 	bl	800ef24 <cli_printf>
			"If Co2 concentration is unknown then just press enter to cancel the calibration.");

	receiveString(cli, buffer, sizeof(buffer));
 800fe24:	f107 0310 	add.w	r3, r7, #16
 800fe28:	2232      	movs	r2, #50	@ 0x32
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f7ff f8bb 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fe32:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800fe34:	f7f0 fa34 	bl	80002a0 <strlen>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	b29a      	uxth	r2, r3
 800fe3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe40:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fe42:	4845      	ldr	r0, [pc, #276]	@ (800ff58 <co2calibrate+0x17c>)
 800fe44:	f7fb fdd4 	bl	800b9f0 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 800fe48:	7c3b      	ldrb	r3, [r7, #16]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d01e      	beq.n	800fe8c <co2calibrate+0xb0>
		_RunTime_Packet.CO2_calibration = 1;
 800fe4e:	4b43      	ldr	r3, [pc, #268]	@ (800ff5c <co2calibrate+0x180>)
 800fe50:	2201      	movs	r2, #1
 800fe52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

		val = atoi(buffer);
 800fe56:	f107 0310 	add.w	r3, r7, #16
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f00b fee4 	bl	801bc28 <atoi>
 800fe60:	4603      	mov	r3, r0
 800fe62:	647b      	str	r3, [r7, #68]	@ 0x44

		if (val < 65535) {
 800fe64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe66:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d803      	bhi.n	800fe76 <co2calibrate+0x9a>
			_RunTime_Packet._target_co2_concentration = val;
 800fe6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	4b3a      	ldr	r3, [pc, #232]	@ (800ff5c <co2calibrate+0x180>)
 800fe74:	875a      	strh	r2, [r3, #58]	@ 0x3a
		}

		cli_printf(cli,
				"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
				_RunTime_Packet._target_co2_concentration);
 800fe76:	4b39      	ldr	r3, [pc, #228]	@ (800ff5c <co2calibrate+0x180>)
 800fe78:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
		cli_printf(cli,
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	4938      	ldr	r1, [pc, #224]	@ (800ff60 <co2calibrate+0x184>)
 800fe7e:	68f8      	ldr	r0, [r7, #12]
 800fe80:	f7ff f850 	bl	800ef24 <cli_printf>
		do_Calibration = 1;
 800fe84:	2301      	movs	r3, #1
 800fe86:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800fe8a:	e00a      	b.n	800fea2 <co2calibrate+0xc6>
	} else {
		cli_printf(cli, "Co2 sensor Calibration aborted.");
 800fe8c:	4935      	ldr	r1, [pc, #212]	@ (800ff64 <co2calibrate+0x188>)
 800fe8e:	68f8      	ldr	r0, [r7, #12]
 800fe90:	f7ff f848 	bl	800ef24 <cli_printf>
		_RunTime_Packet.CO2_calibration = 0;
 800fe94:	4b31      	ldr	r3, [pc, #196]	@ (800ff5c <co2calibrate+0x180>)
 800fe96:	2200      	movs	r2, #0
 800fe98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		do_Calibration = 0;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 800fea2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d13f      	bne.n	800ff2a <co2calibrate+0x14e>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800feaa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800feac:	f7f0 f9f8 	bl	80002a0 <strlen>
 800feb0:	4603      	mov	r3, r0
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800feb8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800feba:	4827      	ldr	r0, [pc, #156]	@ (800ff58 <co2calibrate+0x17c>)
 800febc:	f7fb fd98 	bl	800b9f0 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Co2 is calibrating, please wait.");
 800fec0:	4929      	ldr	r1, [pc, #164]	@ (800ff68 <co2calibrate+0x18c>)
 800fec2:	68f8      	ldr	r0, [r7, #12]
 800fec4:	f7ff f82e 	bl	800ef24 <cli_printf>
		if (!_RunTime_Packet.scd4x_i2c_error) {
 800fec8:	4b24      	ldr	r3, [pc, #144]	@ (800ff5c <co2calibrate+0x180>)
 800feca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d119      	bne.n	800ff06 <co2calibrate+0x12a>
#ifdef use_scd40x
			scd4x_perform_forced_recalibration(
					_RunTime_Packet._target_co2_concentration,
					&_RunTime_Packet._frc_correction);
#elif use_scd30
		scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 800fed2:	4b22      	ldr	r3, [pc, #136]	@ (800ff5c <co2calibrate+0x180>)
 800fed4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800fed6:	4618      	mov	r0, r3
 800fed8:	f003 f8ac 	bl	8013034 <scd30_force_recalibration>
#endif
		}
		while (counter < 8) {
 800fedc:	e013      	b.n	800ff06 <co2calibrate+0x12a>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 800fede:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800fee0:	f7f0 f9de 	bl	80002a0 <strlen>
 800fee4:	4603      	mov	r3, r0
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800feec:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800feee:	481a      	ldr	r0, [pc, #104]	@ (800ff58 <co2calibrate+0x17c>)
 800fef0:	f7fb fd7e 	bl	800b9f0 <HAL_UART_Transmit>
					1000);
			HAL_Delay(1000);
 800fef4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fef8:	f7f3 fece 	bl	8003c98 <HAL_Delay>
			toggle_blue_led();
 800fefc:	f7f1 f8de 	bl	80010bc <toggle_blue_led>
			counter++;
 800ff00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff02:	3301      	adds	r3, #1
 800ff04:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 800ff06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff08:	2b07      	cmp	r3, #7
 800ff0a:	dde8      	ble.n	800fede <co2calibrate+0x102>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ff0c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ff0e:	f7f0 f9c7 	bl	80002a0 <strlen>
 800ff12:	4603      	mov	r3, r0
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff1a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ff1c:	480e      	ldr	r0, [pc, #56]	@ (800ff58 <co2calibrate+0x17c>)
 800ff1e:	f7fb fd67 	bl	800b9f0 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Sensor calibration done.");
 800ff22:	4912      	ldr	r1, [pc, #72]	@ (800ff6c <co2calibrate+0x190>)
 800ff24:	68f8      	ldr	r0, [r7, #12]
 800ff26:	f7fe fffd 	bl	800ef24 <cli_printf>
	}

	flag_cli = 0;
 800ff2a:	4b08      	ldr	r3, [pc, #32]	@ (800ff4c <co2calibrate+0x170>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ff30:	4b05      	ldr	r3, [pc, #20]	@ (800ff48 <co2calibrate+0x16c>)
 800ff32:	2200      	movs	r2, #0
 800ff34:	701a      	strb	r2, [r3, #0]
}
 800ff36:	bf00      	nop
 800ff38:	3758      	adds	r7, #88	@ 0x58
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	080207dc 	.word	0x080207dc
 800ff44:	08020d38 	.word	0x08020d38
 800ff48:	20001a7e 	.word	0x20001a7e
 800ff4c:	20001a7f 	.word	0x20001a7f
 800ff50:	08020df4 	.word	0x08020df4
 800ff54:	08020e38 	.word	0x08020e38
 800ff58:	200019c0 	.word	0x200019c0
 800ff5c:	2000148c 	.word	0x2000148c
 800ff60:	08020e8c 	.word	0x08020e8c
 800ff64:	08020edc 	.word	0x08020edc
 800ff68:	08020efc 	.word	0x08020efc
 800ff6c:	08020f20 	.word	0x08020f20

0800ff70 <SystemRestart>:

void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b092      	sub	sp, #72	@ 0x48
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800ff7c:	4b22      	ldr	r3, [pc, #136]	@ (8010008 <SystemRestart+0x98>)
 800ff7e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to restart the device y/n?");
 800ff80:	4922      	ldr	r1, [pc, #136]	@ (801000c <SystemRestart+0x9c>)
 800ff82:	68f8      	ldr	r0, [r7, #12]
 800ff84:	f7fe ffce 	bl	800ef24 <cli_printf>

	cli_other = 1;
 800ff88:	4b21      	ldr	r3, [pc, #132]	@ (8010010 <SystemRestart+0xa0>)
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ff8e:	4b21      	ldr	r3, [pc, #132]	@ (8010014 <SystemRestart+0xa4>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800ff94:	f107 0310 	add.w	r3, r7, #16
 800ff98:	2232      	movs	r2, #50	@ 0x32
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f7ff f803 	bl	800efa8 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ffa2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ffa4:	f7f0 f97c 	bl	80002a0 <strlen>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	b29a      	uxth	r2, r3
 800ffac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ffb2:	4819      	ldr	r0, [pc, #100]	@ (8010018 <SystemRestart+0xa8>)
 800ffb4:	f7fb fd1c 	bl	800b9f0 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800ffb8:	f107 0310 	add.w	r3, r7, #16
 800ffbc:	2179      	movs	r1, #121	@ 0x79
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f00d f8bc 	bl	801d13c <strchr>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d006      	beq.n	800ffd8 <SystemRestart+0x68>
		cli_printf(cli, "Device is going to restart.");
 800ffca:	4914      	ldr	r1, [pc, #80]	@ (801001c <SystemRestart+0xac>)
 800ffcc:	68f8      	ldr	r0, [r7, #12]
 800ffce:	f7fe ffa9 	bl	800ef24 <cli_printf>
		HAL_NVIC_SystemReset();
 800ffd2:	f7f4 fc70 	bl	80048b6 <HAL_NVIC_SystemReset>
 800ffd6:	e00c      	b.n	800fff2 <SystemRestart+0x82>
	} else if (strstr(buffer, "n")) {
 800ffd8:	f107 0310 	add.w	r3, r7, #16
 800ffdc:	216e      	movs	r1, #110	@ 0x6e
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f00d f8ac 	bl	801d13c <strchr>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d003      	beq.n	800fff2 <SystemRestart+0x82>
		cli_printf(cli, "Device restart aborted.");
 800ffea:	490d      	ldr	r1, [pc, #52]	@ (8010020 <SystemRestart+0xb0>)
 800ffec:	68f8      	ldr	r0, [r7, #12]
 800ffee:	f7fe ff99 	bl	800ef24 <cli_printf>
	}

	flag_cli = 0;
 800fff2:	4b08      	ldr	r3, [pc, #32]	@ (8010014 <SystemRestart+0xa4>)
 800fff4:	2200      	movs	r2, #0
 800fff6:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fff8:	4b05      	ldr	r3, [pc, #20]	@ (8010010 <SystemRestart+0xa0>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	701a      	strb	r2, [r3, #0]
}
 800fffe:	bf00      	nop
 8010000:	3748      	adds	r7, #72	@ 0x48
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	080207dc 	.word	0x080207dc
 801000c:	08020f3c 	.word	0x08020f3c
 8010010:	20001a7e 	.word	0x20001a7e
 8010014:	20001a7f 	.word	0x20001a7f
 8010018:	200019c0 	.word	0x200019c0
 801001c:	08020f64 	.word	0x08020f64
 8010020:	08020f80 	.word	0x08020f80

08010024 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	60b9      	str	r1, [r7, #8]
 801002e:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8010030:	4b0a      	ldr	r3, [pc, #40]	@ (801005c <Co2Level+0x38>)
 8010032:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010036:	2b00      	cmp	r3, #0
 8010038:	d101      	bne.n	801003e <Co2Level+0x1a>


#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 801003a:	f7f1 fb05 	bl	8001648 <get_scd30_measurement>
#endif
	}
#ifdef use_scd40x
	cli_printf(cli, "Co2 Value: %d", _RunTime_Packet.co2);
#elif use_scd30
	cli_printf(cli, "Co2 Value: %.2f", _RunTime_Packet.co2);
 801003e:	4b07      	ldr	r3, [pc, #28]	@ (801005c <Co2Level+0x38>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4618      	mov	r0, r3
 8010044:	f7f0 fa98 	bl	8000578 <__aeabi_f2d>
 8010048:	4602      	mov	r2, r0
 801004a:	460b      	mov	r3, r1
 801004c:	4904      	ldr	r1, [pc, #16]	@ (8010060 <Co2Level+0x3c>)
 801004e:	68f8      	ldr	r0, [r7, #12]
 8010050:	f7fe ff68 	bl	800ef24 <cli_printf>
#endif
}
 8010054:	bf00      	nop
 8010056:	3710      	adds	r7, #16
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}
 801005c:	2000148c 	.word	0x2000148c
 8010060:	08020f98 	.word	0x08020f98

08010064 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8010070:	4b0a      	ldr	r3, [pc, #40]	@ (801009c <TempLevel+0x38>)
 8010072:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010076:	2b00      	cmp	r3, #0
 8010078:	d101      	bne.n	801007e <TempLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 801007a:	f7f1 fae5 	bl	8001648 <get_scd30_measurement>


#ifdef use_scd40x
	cli_printf(cli, "Temperature Value: %dC ", _RunTime_Packet.temperature);
#elif use_scd30
	cli_printf(cli, "Temperature Value: %.2fC ", _RunTime_Packet.temperature);
 801007e:	4b07      	ldr	r3, [pc, #28]	@ (801009c <TempLevel+0x38>)
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	4618      	mov	r0, r3
 8010084:	f7f0 fa78 	bl	8000578 <__aeabi_f2d>
 8010088:	4602      	mov	r2, r0
 801008a:	460b      	mov	r3, r1
 801008c:	4904      	ldr	r1, [pc, #16]	@ (80100a0 <TempLevel+0x3c>)
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f7fe ff48 	bl	800ef24 <cli_printf>
#endif
}
 8010094:	bf00      	nop
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	2000148c 	.word	0x2000148c
 80100a0:	08020fa8 	.word	0x08020fa8

080100a4 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b084      	sub	sp, #16
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 80100b0:	4b0a      	ldr	r3, [pc, #40]	@ (80100dc <HumidLevel+0x38>)
 80100b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d101      	bne.n	80100be <HumidLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 80100ba:	f7f1 fac5 	bl	8001648 <get_scd30_measurement>


#ifdef use_scd40x
	cli_printf(cli, "Humidity Value: %d ", _RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, "Humidity Value: %.2f ", _RunTime_Packet.humidity);
 80100be:	4b07      	ldr	r3, [pc, #28]	@ (80100dc <HumidLevel+0x38>)
 80100c0:	689b      	ldr	r3, [r3, #8]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7f0 fa58 	bl	8000578 <__aeabi_f2d>
 80100c8:	4602      	mov	r2, r0
 80100ca:	460b      	mov	r3, r1
 80100cc:	4904      	ldr	r1, [pc, #16]	@ (80100e0 <HumidLevel+0x3c>)
 80100ce:	68f8      	ldr	r0, [r7, #12]
 80100d0:	f7fe ff28 	bl	800ef24 <cli_printf>
#endif
}
 80100d4:	bf00      	nop
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	2000148c 	.word	0x2000148c
 80100e0:	08020fc4 	.word	0x08020fc4

080100e4 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	60b9      	str	r1, [r7, #8]
 80100ee:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "For 10seconds system will poll here to detect motion.");
 80100f0:	491f      	ldr	r1, [pc, #124]	@ (8010170 <MotionDetection+0x8c>)
 80100f2:	68f8      	ldr	r0, [r7, #12]
 80100f4:	f7fe ff16 	bl	800ef24 <cli_printf>
	HAL_Delay(2000);
 80100f8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80100fc:	f7f3 fdcc 	bl	8003c98 <HAL_Delay>
	prev_max_wait_time_motion = HAL_GetTick();
 8010100:	f7f3 fdbe 	bl	8003c80 <HAL_GetTick>
 8010104:	4603      	mov	r3, r0
 8010106:	4a1b      	ldr	r2, [pc, #108]	@ (8010174 <MotionDetection+0x90>)
 8010108:	6013      	str	r3, [r2, #0]
	prev_motion = 0;
 801010a:	4b1b      	ldr	r3, [pc, #108]	@ (8010178 <MotionDetection+0x94>)
 801010c:	2200      	movs	r2, #0
 801010e:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 8010110:	e01c      	b.n	801014c <MotionDetection+0x68>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8010112:	2101      	movs	r1, #1
 8010114:	4819      	ldr	r0, [pc, #100]	@ (801017c <MotionDetection+0x98>)
 8010116:	f7f5 fd7f 	bl	8005c18 <HAL_GPIO_ReadPin>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d003      	beq.n	8010128 <MotionDetection+0x44>
			_RunTime_Packet.motion_detection = 1;
 8010120:	4b17      	ldr	r3, [pc, #92]	@ (8010180 <MotionDetection+0x9c>)
 8010122:	2201      	movs	r2, #1
 8010124:	731a      	strb	r2, [r3, #12]
 8010126:	e002      	b.n	801012e <MotionDetection+0x4a>
			//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
		} else {
			_RunTime_Packet.motion_detection = 0;
 8010128:	4b15      	ldr	r3, [pc, #84]	@ (8010180 <MotionDetection+0x9c>)
 801012a:	2200      	movs	r2, #0
 801012c:	731a      	strb	r2, [r3, #12]

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
		cli_printf(cli, "PIR Motion: %s\r\n",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801012e:	4b14      	ldr	r3, [pc, #80]	@ (8010180 <MotionDetection+0x9c>)
 8010130:	7b1b      	ldrb	r3, [r3, #12]
		cli_printf(cli, "PIR Motion: %s\r\n",
 8010132:	2b01      	cmp	r3, #1
 8010134:	d101      	bne.n	801013a <MotionDetection+0x56>
 8010136:	4b13      	ldr	r3, [pc, #76]	@ (8010184 <MotionDetection+0xa0>)
 8010138:	e000      	b.n	801013c <MotionDetection+0x58>
 801013a:	4b13      	ldr	r3, [pc, #76]	@ (8010188 <MotionDetection+0xa4>)
 801013c:	461a      	mov	r2, r3
 801013e:	4913      	ldr	r1, [pc, #76]	@ (801018c <MotionDetection+0xa8>)
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f7fe feef 	bl	800ef24 <cli_printf>
//	         	}
		HAL_Delay(100);
 8010146:	2064      	movs	r0, #100	@ 0x64
 8010148:	f7f3 fda6 	bl	8003c98 <HAL_Delay>
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 801014c:	f7f3 fd98 	bl	8003c80 <HAL_GetTick>
 8010150:	4602      	mov	r2, r0
 8010152:	4b08      	ldr	r3, [pc, #32]	@ (8010174 <MotionDetection+0x90>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	1ad2      	subs	r2, r2, r3
 8010158:	4b0d      	ldr	r3, [pc, #52]	@ (8010190 <MotionDetection+0xac>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	429a      	cmp	r2, r3
 801015e:	d3d8      	bcc.n	8010112 <MotionDetection+0x2e>
//}
//

	}

	cli_printf(cli, "Session ended");
 8010160:	490c      	ldr	r1, [pc, #48]	@ (8010194 <MotionDetection+0xb0>)
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f7fe fede 	bl	800ef24 <cli_printf>

}
 8010168:	bf00      	nop
 801016a:	3710      	adds	r7, #16
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	08020fdc 	.word	0x08020fdc
 8010174:	20001a78 	.word	0x20001a78
 8010178:	20001a80 	.word	0x20001a80
 801017c:	40020000 	.word	0x40020000
 8010180:	2000148c 	.word	0x2000148c
 8010184:	08021014 	.word	0x08021014
 8010188:	0802101c 	.word	0x0802101c
 801018c:	08021024 	.word	0x08021024
 8010190:	20000024 	.word	0x20000024
 8010194:	08021038 	.word	0x08021038

08010198 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 8010198:	b580      	push	{r7, lr}
 801019a:	b084      	sub	sp, #16
 801019c:	af00      	add	r7, sp, #0
 801019e:	60f8      	str	r0, [r7, #12]
 80101a0:	60b9      	str	r1, [r7, #8]
 80101a2:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "AirQuality Measured Values:");
 80101a4:	4922      	ldr	r1, [pc, #136]	@ (8010230 <AirQuality+0x98>)
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f7fe febc 	bl	800ef24 <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 80101ac:	4b21      	ldr	r3, [pc, #132]	@ (8010234 <AirQuality+0x9c>)
 80101ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d104      	bne.n	80101c0 <AirQuality+0x28>
 80101b6:	4b1f      	ldr	r3, [pc, #124]	@ (8010234 <AirQuality+0x9c>)
 80101b8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d004      	beq.n	80101ca <AirQuality+0x32>
		cli_printf(cli, "Calculating, try again later");
 80101c0:	491d      	ldr	r1, [pc, #116]	@ (8010238 <AirQuality+0xa0>)
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f7fe feae 	bl	800ef24 <cli_printf>
 80101c8:	e02e      	b.n	8010228 <AirQuality+0x90>
	} else {

		get_sps30_measurement();
 80101ca:	f7f1 faf7 	bl	80017bc <get_sps30_measurement>
		cli_printf(cli, "%0.2f pm1.0", _RunTime_Packet.pm1_0);
 80101ce:	4b19      	ldr	r3, [pc, #100]	@ (8010234 <AirQuality+0x9c>)
 80101d0:	691b      	ldr	r3, [r3, #16]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7f0 f9d0 	bl	8000578 <__aeabi_f2d>
 80101d8:	4602      	mov	r2, r0
 80101da:	460b      	mov	r3, r1
 80101dc:	4917      	ldr	r1, [pc, #92]	@ (801023c <AirQuality+0xa4>)
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	f7fe fea0 	bl	800ef24 <cli_printf>
		cli_printf(cli, "%0.2f pm2.5 ", _RunTime_Packet.pm2_5);
 80101e4:	4b13      	ldr	r3, [pc, #76]	@ (8010234 <AirQuality+0x9c>)
 80101e6:	695b      	ldr	r3, [r3, #20]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7f0 f9c5 	bl	8000578 <__aeabi_f2d>
 80101ee:	4602      	mov	r2, r0
 80101f0:	460b      	mov	r3, r1
 80101f2:	4913      	ldr	r1, [pc, #76]	@ (8010240 <AirQuality+0xa8>)
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f7fe fe95 	bl	800ef24 <cli_printf>
		cli_printf(cli, "%0.2f pm4.0 ", _RunTime_Packet.pm4_0);
 80101fa:	4b0e      	ldr	r3, [pc, #56]	@ (8010234 <AirQuality+0x9c>)
 80101fc:	699b      	ldr	r3, [r3, #24]
 80101fe:	4618      	mov	r0, r3
 8010200:	f7f0 f9ba 	bl	8000578 <__aeabi_f2d>
 8010204:	4602      	mov	r2, r0
 8010206:	460b      	mov	r3, r1
 8010208:	490e      	ldr	r1, [pc, #56]	@ (8010244 <AirQuality+0xac>)
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f7fe fe8a 	bl	800ef24 <cli_printf>
		cli_printf(cli, "%0.2f pm10.0", _RunTime_Packet.pm10_0);
 8010210:	4b08      	ldr	r3, [pc, #32]	@ (8010234 <AirQuality+0x9c>)
 8010212:	69db      	ldr	r3, [r3, #28]
 8010214:	4618      	mov	r0, r3
 8010216:	f7f0 f9af 	bl	8000578 <__aeabi_f2d>
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	490a      	ldr	r1, [pc, #40]	@ (8010248 <AirQuality+0xb0>)
 8010220:	68f8      	ldr	r0, [r7, #12]
 8010222:	f7fe fe7f 	bl	800ef24 <cli_printf>
	}

}
 8010226:	bf00      	nop
 8010228:	bf00      	nop
 801022a:	3710      	adds	r7, #16
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	08021048 	.word	0x08021048
 8010234:	2000148c 	.word	0x2000148c
 8010238:	08021064 	.word	0x08021064
 801023c:	08021084 	.word	0x08021084
 8010240:	08021090 	.word	0x08021090
 8010244:	080210a0 	.word	0x080210a0
 8010248:	080210b0 	.word	0x080210b0

0801024c <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8010258:	4808      	ldr	r0, [pc, #32]	@ (801027c <BattVolt+0x30>)
 801025a:	f002 fccd 	bl	8012bf8 <adc_Measure>
	cli_printf(cli, "Battery voltage: %0.2f", _RunTime_Packet.battery_voltage);
 801025e:	4b08      	ldr	r3, [pc, #32]	@ (8010280 <BattVolt+0x34>)
 8010260:	6a1b      	ldr	r3, [r3, #32]
 8010262:	4618      	mov	r0, r3
 8010264:	f7f0 f988 	bl	8000578 <__aeabi_f2d>
 8010268:	4602      	mov	r2, r0
 801026a:	460b      	mov	r3, r1
 801026c:	4905      	ldr	r1, [pc, #20]	@ (8010284 <BattVolt+0x38>)
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f7fe fe58 	bl	800ef24 <cli_printf>

}
 8010274:	bf00      	nop
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}
 801027c:	200014ac 	.word	0x200014ac
 8010280:	2000148c 	.word	0x2000148c
 8010284:	080210c0 	.word	0x080210c0

08010288 <port>:

void port(EmbeddedCli *cli, char *args, void *context) {
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Auxiliary port value measured(inactive)");
 8010294:	4903      	ldr	r1, [pc, #12]	@ (80102a4 <port+0x1c>)
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	f7fe fe44 	bl	800ef24 <cli_printf>
}
 801029c:	bf00      	nop
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}
 80102a4:	080210d8 	.word	0x080210d8

080102a8 <showall>:

void showall(EmbeddedCli *cli, char *args, void *context) {
 80102a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102aa:	b0a3      	sub	sp, #140	@ 0x8c
 80102ac:	af06      	add	r7, sp, #24
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
	char buff_pm[20];
	char buff_filewritten[50];

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 80102b4:	4b95      	ldr	r3, [pc, #596]	@ (801050c <showall+0x264>)
 80102b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d104      	bne.n	80102c8 <showall+0x20>
 80102be:	4b93      	ldr	r3, [pc, #588]	@ (801050c <showall+0x264>)
 80102c0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d006      	beq.n	80102d6 <showall+0x2e>
		sprintf(buff_pm, "Calculating");
 80102c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80102cc:	4990      	ldr	r1, [pc, #576]	@ (8010510 <showall+0x268>)
 80102ce:	4618      	mov	r0, r3
 80102d0:	f00c fde2 	bl	801ce98 <siprintf>
 80102d4:	e00d      	b.n	80102f2 <showall+0x4a>
	} else {

		get_sps30_measurement();
 80102d6:	f7f1 fa71 	bl	80017bc <get_sps30_measurement>
		sprintf(buff_pm, "%0.2f", _RunTime_Packet.pm2_5);
 80102da:	4b8c      	ldr	r3, [pc, #560]	@ (801050c <showall+0x264>)
 80102dc:	695b      	ldr	r3, [r3, #20]
 80102de:	4618      	mov	r0, r3
 80102e0:	f7f0 f94a 	bl	8000578 <__aeabi_f2d>
 80102e4:	4602      	mov	r2, r0
 80102e6:	460b      	mov	r3, r1
 80102e8:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80102ec:	4989      	ldr	r1, [pc, #548]	@ (8010514 <showall+0x26c>)
 80102ee:	f00c fdd3 	bl	801ce98 <siprintf>

	}
	adc_Measure(&_RunTime_Packet.battery_voltage);
 80102f2:	4889      	ldr	r0, [pc, #548]	@ (8010518 <showall+0x270>)
 80102f4:	f002 fc80 	bl	8012bf8 <adc_Measure>
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80102f8:	2101      	movs	r1, #1
 80102fa:	4888      	ldr	r0, [pc, #544]	@ (801051c <showall+0x274>)
 80102fc:	f7f5 fc8c 	bl	8005c18 <HAL_GPIO_ReadPin>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d003      	beq.n	801030e <showall+0x66>
		_RunTime_Packet.motion_detection = 1;
 8010306:	4b81      	ldr	r3, [pc, #516]	@ (801050c <showall+0x264>)
 8010308:	2201      	movs	r2, #1
 801030a:	731a      	strb	r2, [r3, #12]
 801030c:	e002      	b.n	8010314 <showall+0x6c>
	} else {
		_RunTime_Packet.motion_detection = 0;
 801030e:	4b7f      	ldr	r3, [pc, #508]	@ (801050c <showall+0x264>)
 8010310:	2200      	movs	r2, #0
 8010312:	731a      	strb	r2, [r3, #12]
	}

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8010314:	4b7d      	ldr	r3, [pc, #500]	@ (801050c <showall+0x264>)
 8010316:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801031a:	2b00      	cmp	r3, #0
 801031c:	d101      	bne.n	8010322 <showall+0x7a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 801031e:	f7f1 f993 	bl	8001648 <get_scd30_measurement>
#endif
	}

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 8010322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010326:	2200      	movs	r2, #0
 8010328:	4619      	mov	r1, r3
 801032a:	487d      	ldr	r0, [pc, #500]	@ (8010520 <showall+0x278>)
 801032c:	f7f9 f81c 	bl	8009368 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8010330:	f107 0310 	add.w	r3, r7, #16
 8010334:	2200      	movs	r2, #0
 8010336:	4619      	mov	r1, r3
 8010338:	4879      	ldr	r0, [pc, #484]	@ (8010520 <showall+0x278>)
 801033a:	f7f8 ff33 	bl	80091a4 <HAL_RTC_GetTime>

	if (datawritten == 0) {
 801033e:	4b79      	ldr	r3, [pc, #484]	@ (8010524 <showall+0x27c>)
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d106      	bne.n	8010354 <showall+0xac>

		sprintf(buff_filewritten, "Data not written yet");
 8010346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801034a:	4977      	ldr	r1, [pc, #476]	@ (8010528 <showall+0x280>)
 801034c:	4618      	mov	r0, r3
 801034e:	f00c fda3 	bl	801ce98 <siprintf>
 8010352:	e014      	b.n	801037e <showall+0xd6>

	} else if (datawritten == 1) {
 8010354:	4b73      	ldr	r3, [pc, #460]	@ (8010524 <showall+0x27c>)
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	2b01      	cmp	r3, #1
 801035a:	d106      	bne.n	801036a <showall+0xc2>
		sprintf(buff_filewritten, " **SUCCESSFUL** ");
 801035c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010360:	4972      	ldr	r1, [pc, #456]	@ (801052c <showall+0x284>)
 8010362:	4618      	mov	r0, r3
 8010364:	f00c fd98 	bl	801ce98 <siprintf>
 8010368:	e009      	b.n	801037e <showall+0xd6>
	} else if (datawritten == 2) {
 801036a:	4b6e      	ldr	r3, [pc, #440]	@ (8010524 <showall+0x27c>)
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	2b02      	cmp	r3, #2
 8010370:	d105      	bne.n	801037e <showall+0xd6>

		sprintf(buff_filewritten, " **FAILED** ");
 8010372:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010376:	496e      	ldr	r1, [pc, #440]	@ (8010530 <showall+0x288>)
 8010378:	4618      	mov	r0, r3
 801037a:	f00c fd8d 	bl	801ce98 <siprintf>
	}

	cli_printf(cli, "");
 801037e:	496d      	ldr	r1, [pc, #436]	@ (8010534 <showall+0x28c>)
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f7fe fdcf 	bl	800ef24 <cli_printf>
	cli_printf(cli, "");
 8010386:	496b      	ldr	r1, [pc, #428]	@ (8010534 <showall+0x28c>)
 8010388:	68f8      	ldr	r0, [r7, #12]
 801038a:	f7fe fdcb 	bl	800ef24 <cli_printf>
	cli_printf(cli, "");
 801038e:	4969      	ldr	r1, [pc, #420]	@ (8010534 <showall+0x28c>)
 8010390:	68f8      	ldr	r0, [r7, #12]
 8010392:	f7fe fdc7 	bl	800ef24 <cli_printf>

	cli_printf(cli, " *devEUI           | %s                       ",
 8010396:	f7f1 fff1 	bl	800237c <ver_GetUid>
 801039a:	4603      	mov	r3, r0
 801039c:	461a      	mov	r2, r3
 801039e:	4966      	ldr	r1, [pc, #408]	@ (8010538 <showall+0x290>)
 80103a0:	68f8      	ldr	r0, [r7, #12]
 80103a2:	f7fe fdbf 	bl	800ef24 <cli_printf>
			ver_GetUid());
	cli_printf(cli, " *Id               | %s                       ",
 80103a6:	4a65      	ldr	r2, [pc, #404]	@ (801053c <showall+0x294>)
 80103a8:	4965      	ldr	r1, [pc, #404]	@ (8010540 <showall+0x298>)
 80103aa:	68f8      	ldr	r0, [r7, #12]
 80103ac:	f7fe fdba 	bl	800ef24 <cli_printf>
			_Flash_Packet.id);
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80103b0:	7c3b      	ldrb	r3, [r7, #16]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80103b2:	461a      	mov	r2, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80103b4:	7c7b      	ldrb	r3, [r7, #17]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80103b6:	4619      	mov	r1, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80103b8:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80103ba:	9300      	str	r3, [sp, #0]
 80103bc:	460b      	mov	r3, r1
 80103be:	4961      	ldr	r1, [pc, #388]	@ (8010544 <showall+0x29c>)
 80103c0:	68f8      	ldr	r0, [r7, #12]
 80103c2:	f7fe fdaf 	bl	800ef24 <cli_printf>
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
			gDate.Date, gDate.Month, gDate.Year);
 80103c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80103ca:	461a      	mov	r2, r3
			gDate.Date, gDate.Month, gDate.Year);
 80103cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80103d0:	4619      	mov	r1, r3
			gDate.Date, gDate.Month, gDate.Year);
 80103d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80103d6:	9300      	str	r3, [sp, #0]
 80103d8:	460b      	mov	r3, r1
 80103da:	495b      	ldr	r1, [pc, #364]	@ (8010548 <showall+0x2a0>)
 80103dc:	68f8      	ldr	r0, [r7, #12]
 80103de:	f7fe fda1 	bl	800ef24 <cli_printf>
	cli_printf(cli, " *Location         | %s                       ",
 80103e2:	4a5a      	ldr	r2, [pc, #360]	@ (801054c <showall+0x2a4>)
 80103e4:	495a      	ldr	r1, [pc, #360]	@ (8010550 <showall+0x2a8>)
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f7fe fd9c 	bl	800ef24 <cli_printf>
			_Flash_Packet.location);
	cli_printf(cli, " *Filename         | %s                       ",
 80103ec:	4a59      	ldr	r2, [pc, #356]	@ (8010554 <showall+0x2ac>)
 80103ee:	495a      	ldr	r1, [pc, #360]	@ (8010558 <showall+0x2b0>)
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	f7fe fd97 	bl	800ef24 <cli_printf>
			filename_ver_date);
	cli_printf(cli, " *Fileformat       | %s                       ",
 80103f6:	4a59      	ldr	r2, [pc, #356]	@ (801055c <showall+0x2b4>)
 80103f8:	4959      	ldr	r1, [pc, #356]	@ (8010560 <showall+0x2b8>)
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f7fe fd92 	bl	800ef24 <cli_printf>
			_Flash_Packet.File_Format);
	cli_printf(cli, " *Group            | %s                       ",
 8010400:	4a58      	ldr	r2, [pc, #352]	@ (8010564 <showall+0x2bc>)
 8010402:	4959      	ldr	r1, [pc, #356]	@ (8010568 <showall+0x2c0>)
 8010404:	68f8      	ldr	r0, [r7, #12]
 8010406:	f7fe fd8d 	bl	800ef24 <cli_printf>
			_Flash_Packet.group);
	cli_printf(cli, " *Interval         | %dmin                       ",
 801040a:	4b58      	ldr	r3, [pc, #352]	@ (801056c <showall+0x2c4>)
 801040c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010410:	461a      	mov	r2, r3
 8010412:	4957      	ldr	r1, [pc, #348]	@ (8010570 <showall+0x2c8>)
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	f7fe fd85 	bl	800ef24 <cli_printf>
			_RunTime_Packet.temperature);
	cli_printf(cli, " *Humidity         | %d%%                     ",
			_RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, " *Co2              | %.2f                       ",
			_RunTime_Packet.co2);
 801041a:	4b3c      	ldr	r3, [pc, #240]	@ (801050c <showall+0x264>)
 801041c:	681b      	ldr	r3, [r3, #0]
	cli_printf(cli, " *Co2              | %.2f                       ",
 801041e:	4618      	mov	r0, r3
 8010420:	f7f0 f8aa 	bl	8000578 <__aeabi_f2d>
 8010424:	4602      	mov	r2, r0
 8010426:	460b      	mov	r3, r1
 8010428:	4952      	ldr	r1, [pc, #328]	@ (8010574 <showall+0x2cc>)
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f7fe fd7a 	bl	800ef24 <cli_printf>
	cli_printf(cli, " *Temperature      | %.2fC                      ",
			_RunTime_Packet.temperature);
 8010430:	4b36      	ldr	r3, [pc, #216]	@ (801050c <showall+0x264>)
 8010432:	685b      	ldr	r3, [r3, #4]
	cli_printf(cli, " *Temperature      | %.2fC                      ",
 8010434:	4618      	mov	r0, r3
 8010436:	f7f0 f89f 	bl	8000578 <__aeabi_f2d>
 801043a:	4602      	mov	r2, r0
 801043c:	460b      	mov	r3, r1
 801043e:	494e      	ldr	r1, [pc, #312]	@ (8010578 <showall+0x2d0>)
 8010440:	68f8      	ldr	r0, [r7, #12]
 8010442:	f7fe fd6f 	bl	800ef24 <cli_printf>
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
			_RunTime_Packet.humidity);
 8010446:	4b31      	ldr	r3, [pc, #196]	@ (801050c <showall+0x264>)
 8010448:	689b      	ldr	r3, [r3, #8]
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
 801044a:	4618      	mov	r0, r3
 801044c:	f7f0 f894 	bl	8000578 <__aeabi_f2d>
 8010450:	4602      	mov	r2, r0
 8010452:	460b      	mov	r3, r1
 8010454:	4949      	ldr	r1, [pc, #292]	@ (801057c <showall+0x2d4>)
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	f7fe fd64 	bl	800ef24 <cli_printf>
#endif

	cli_printf(cli, " *PIR              | %s                       ",
			_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801045c:	4b2b      	ldr	r3, [pc, #172]	@ (801050c <showall+0x264>)
 801045e:	7b1b      	ldrb	r3, [r3, #12]
	cli_printf(cli, " *PIR              | %s                       ",
 8010460:	2b01      	cmp	r3, #1
 8010462:	d101      	bne.n	8010468 <showall+0x1c0>
 8010464:	4b46      	ldr	r3, [pc, #280]	@ (8010580 <showall+0x2d8>)
 8010466:	e000      	b.n	801046a <showall+0x1c2>
 8010468:	4b46      	ldr	r3, [pc, #280]	@ (8010584 <showall+0x2dc>)
 801046a:	461a      	mov	r2, r3
 801046c:	4946      	ldr	r1, [pc, #280]	@ (8010588 <showall+0x2e0>)
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f7fe fd58 	bl	800ef24 <cli_printf>
	cli_printf(cli, " *Pm2.5            | %s                       ", buff_pm);
 8010474:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8010478:	461a      	mov	r2, r3
 801047a:	4944      	ldr	r1, [pc, #272]	@ (801058c <showall+0x2e4>)
 801047c:	68f8      	ldr	r0, [r7, #12]
 801047e:	f7fe fd51 	bl	800ef24 <cli_printf>
	cli_printf(cli, " *Port             | Inactive                 ");
 8010482:	4943      	ldr	r1, [pc, #268]	@ (8010590 <showall+0x2e8>)
 8010484:	68f8      	ldr	r0, [r7, #12]
 8010486:	f7fe fd4d 	bl	800ef24 <cli_printf>
	cli_printf(cli, " *Battery          | %0.2f                    ",
			_RunTime_Packet.battery_voltage);
 801048a:	4b20      	ldr	r3, [pc, #128]	@ (801050c <showall+0x264>)
 801048c:	6a1b      	ldr	r3, [r3, #32]
	cli_printf(cli, " *Battery          | %0.2f                    ",
 801048e:	4618      	mov	r0, r3
 8010490:	f7f0 f872 	bl	8000578 <__aeabi_f2d>
 8010494:	4602      	mov	r2, r0
 8010496:	460b      	mov	r3, r1
 8010498:	493e      	ldr	r1, [pc, #248]	@ (8010594 <showall+0x2ec>)
 801049a:	68f8      	ldr	r0, [r7, #12]
 801049c:	f7fe fd42 	bl	800ef24 <cli_printf>
	cli_printf(cli, " *Last_Packet      | [Date:%02d.%02d.%02d] [Time: %02d:%02d:%02d] [Filename: %s] [Packet Status: %s]",
 80104a0:	4b3d      	ldr	r3, [pc, #244]	@ (8010598 <showall+0x2f0>)
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	461d      	mov	r5, r3
 80104a6:	4b3d      	ldr	r3, [pc, #244]	@ (801059c <showall+0x2f4>)
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	461e      	mov	r6, r3
 80104ac:	4b3c      	ldr	r3, [pc, #240]	@ (80105a0 <showall+0x2f8>)
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	461a      	mov	r2, r3
 80104b2:	4b3c      	ldr	r3, [pc, #240]	@ (80105a4 <showall+0x2fc>)
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	4619      	mov	r1, r3
 80104b8:	4b3b      	ldr	r3, [pc, #236]	@ (80105a8 <showall+0x300>)
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	4618      	mov	r0, r3
 80104be:	4b3b      	ldr	r3, [pc, #236]	@ (80105ac <showall+0x304>)
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	461c      	mov	r4, r3
 80104c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80104c8:	9305      	str	r3, [sp, #20]
 80104ca:	4b22      	ldr	r3, [pc, #136]	@ (8010554 <showall+0x2ac>)
 80104cc:	9304      	str	r3, [sp, #16]
 80104ce:	9403      	str	r4, [sp, #12]
 80104d0:	9002      	str	r0, [sp, #8]
 80104d2:	9101      	str	r1, [sp, #4]
 80104d4:	9200      	str	r2, [sp, #0]
 80104d6:	4633      	mov	r3, r6
 80104d8:	462a      	mov	r2, r5
 80104da:	4935      	ldr	r1, [pc, #212]	@ (80105b0 <showall+0x308>)
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	f7fe fd21 	bl	800ef24 <cli_printf>
			fileWrite_day, fileWrite_month, fileWrite_year, fileWrite_hour,
			fileWrite_min, fileWrite_sec, filename_ver_date,
			buff_filewritten);
	cli_printf(cli, " *Scheduled_Packet | [Time: %s]               ",
 80104e2:	4a34      	ldr	r2, [pc, #208]	@ (80105b4 <showall+0x30c>)
 80104e4:	4934      	ldr	r1, [pc, #208]	@ (80105b8 <showall+0x310>)
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f7fe fd1c 	bl	800ef24 <cli_printf>
			scheduled_packet);

	cli_printf(cli, "");
 80104ec:	4911      	ldr	r1, [pc, #68]	@ (8010534 <showall+0x28c>)
 80104ee:	68f8      	ldr	r0, [r7, #12]
 80104f0:	f7fe fd18 	bl	800ef24 <cli_printf>
	cli_printf(cli, "");
 80104f4:	490f      	ldr	r1, [pc, #60]	@ (8010534 <showall+0x28c>)
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f7fe fd14 	bl	800ef24 <cli_printf>
	cli_printf(cli, "");
 80104fc:	490d      	ldr	r1, [pc, #52]	@ (8010534 <showall+0x28c>)
 80104fe:	68f8      	ldr	r0, [r7, #12]
 8010500:	f7fe fd10 	bl	800ef24 <cli_printf>
}
 8010504:	bf00      	nop
 8010506:	3774      	adds	r7, #116	@ 0x74
 8010508:	46bd      	mov	sp, r7
 801050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801050c:	2000148c 	.word	0x2000148c
 8010510:	08021100 	.word	0x08021100
 8010514:	0802110c 	.word	0x0802110c
 8010518:	200014ac 	.word	0x200014ac
 801051c:	40020000 	.word	0x40020000
 8010520:	200017e4 	.word	0x200017e4
 8010524:	20002369 	.word	0x20002369
 8010528:	08021114 	.word	0x08021114
 801052c:	0802112c 	.word	0x0802112c
 8010530:	08021140 	.word	0x08021140
 8010534:	08021150 	.word	0x08021150
 8010538:	08021154 	.word	0x08021154
 801053c:	200013c1 	.word	0x200013c1
 8010540:	08021184 	.word	0x08021184
 8010544:	080211b4 	.word	0x080211b4
 8010548:	080211e4 	.word	0x080211e4
 801054c:	200013f3 	.word	0x200013f3
 8010550:	08021214 	.word	0x08021214
 8010554:	200022cc 	.word	0x200022cc
 8010558:	08021244 	.word	0x08021244
 801055c:	20001358 	.word	0x20001358
 8010560:	08021274 	.word	0x08021274
 8010564:	20001457 	.word	0x20001457
 8010568:	080212a4 	.word	0x080212a4
 801056c:	200012f4 	.word	0x200012f4
 8010570:	080212d4 	.word	0x080212d4
 8010574:	08021308 	.word	0x08021308
 8010578:	0802133c 	.word	0x0802133c
 801057c:	08021370 	.word	0x08021370
 8010580:	08021014 	.word	0x08021014
 8010584:	0802101c 	.word	0x0802101c
 8010588:	080213a4 	.word	0x080213a4
 801058c:	080213d4 	.word	0x080213d4
 8010590:	08021404 	.word	0x08021404
 8010594:	08021434 	.word	0x08021434
 8010598:	20002363 	.word	0x20002363
 801059c:	20002364 	.word	0x20002364
 80105a0:	20002365 	.word	0x20002365
 80105a4:	20002366 	.word	0x20002366
 80105a8:	20002367 	.word	0x20002367
 80105ac:	20002368 	.word	0x20002368
 80105b0:	08021464 	.word	0x08021464
 80105b4:	20000030 	.word	0x20000030
 80105b8:	080214cc 	.word	0x080214cc

080105bc <systemversion>:

void systemversion(EmbeddedCli *cli, char *args, void *context) {
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]


	cli_printf(cli, "");
 80105c8:	4911      	ldr	r1, [pc, #68]	@ (8010610 <systemversion+0x54>)
 80105ca:	68f8      	ldr	r0, [r7, #12]
 80105cc:	f7fe fcaa 	bl	800ef24 <cli_printf>
		cli_printf(cli, "");
 80105d0:	490f      	ldr	r1, [pc, #60]	@ (8010610 <systemversion+0x54>)
 80105d2:	68f8      	ldr	r0, [r7, #12]
 80105d4:	f7fe fca6 	bl	800ef24 <cli_printf>
		cli_printf(cli, "");
 80105d8:	490d      	ldr	r1, [pc, #52]	@ (8010610 <systemversion+0x54>)
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f7fe fca2 	bl	800ef24 <cli_printf>

		cli_printf(cli, " *Hardware | TF410 Version 1.3                       ");
 80105e0:	490c      	ldr	r1, [pc, #48]	@ (8010614 <systemversion+0x58>)
 80105e2:	68f8      	ldr	r0, [r7, #12]
 80105e4:	f7fe fc9e 	bl	800ef24 <cli_printf>
		cli_printf(cli, " *Software | TF410 Version 1.5                       ");
 80105e8:	490b      	ldr	r1, [pc, #44]	@ (8010618 <systemversion+0x5c>)
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	f7fe fc9a 	bl	800ef24 <cli_printf>

		cli_printf(cli, "");
 80105f0:	4907      	ldr	r1, [pc, #28]	@ (8010610 <systemversion+0x54>)
 80105f2:	68f8      	ldr	r0, [r7, #12]
 80105f4:	f7fe fc96 	bl	800ef24 <cli_printf>
			cli_printf(cli, "");
 80105f8:	4905      	ldr	r1, [pc, #20]	@ (8010610 <systemversion+0x54>)
 80105fa:	68f8      	ldr	r0, [r7, #12]
 80105fc:	f7fe fc92 	bl	800ef24 <cli_printf>
			cli_printf(cli, "");
 8010600:	4903      	ldr	r1, [pc, #12]	@ (8010610 <systemversion+0x54>)
 8010602:	68f8      	ldr	r0, [r7, #12]
 8010604:	f7fe fc8e 	bl	800ef24 <cli_printf>

}
 8010608:	bf00      	nop
 801060a:	3710      	adds	r7, #16
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	08021150 	.word	0x08021150
 8010614:	080214fc 	.word	0x080214fc
 8010618:	08021534 	.word	0x08021534

0801061c <aboutDev>:

void aboutDev(EmbeddedCli *cli, char *args, void *context)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	607a      	str	r2, [r7, #4]
	  cli_printf(cli, "");
 8010628:	4917      	ldr	r1, [pc, #92]	@ (8010688 <aboutDev+0x6c>)
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f7fe fc7a 	bl	800ef24 <cli_printf>
	cli_printf(cli, "");
 8010630:	4915      	ldr	r1, [pc, #84]	@ (8010688 <aboutDev+0x6c>)
 8010632:	68f8      	ldr	r0, [r7, #12]
 8010634:	f7fe fc76 	bl	800ef24 <cli_printf>
	cli_printf(cli, "This product is powered by BuildUp! "); //TM 0x99
 8010638:	4914      	ldr	r1, [pc, #80]	@ (801068c <aboutDev+0x70>)
 801063a:	68f8      	ldr	r0, [r7, #12]
 801063c:	f7fe fc72 	bl	800ef24 <cli_printf>
	cli_printf(cli, "");
 8010640:	4911      	ldr	r1, [pc, #68]	@ (8010688 <aboutDev+0x6c>)
 8010642:	68f8      	ldr	r0, [r7, #12]
 8010644:	f7fe fc6e 	bl	800ef24 <cli_printf>
	cli_printf(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8010648:	4911      	ldr	r1, [pc, #68]	@ (8010690 <aboutDev+0x74>)
 801064a:	68f8      	ldr	r0, [r7, #12]
 801064c:	f7fe fc6a 	bl	800ef24 <cli_printf>
	cli_printf(cli, "");
 8010650:	490d      	ldr	r1, [pc, #52]	@ (8010688 <aboutDev+0x6c>)
 8010652:	68f8      	ldr	r0, [r7, #12]
 8010654:	f7fe fc66 	bl	800ef24 <cli_printf>
	cli_printf(cli, "Montreal, Canada");
 8010658:	490e      	ldr	r1, [pc, #56]	@ (8010694 <aboutDev+0x78>)
 801065a:	68f8      	ldr	r0, [r7, #12]
 801065c:	f7fe fc62 	bl	800ef24 <cli_printf>
	cli_printf(cli, "");
 8010660:	4909      	ldr	r1, [pc, #36]	@ (8010688 <aboutDev+0x6c>)
 8010662:	68f8      	ldr	r0, [r7, #12]
 8010664:	f7fe fc5e 	bl	800ef24 <cli_printf>
	cli_printf(cli, "https://thingsfactory.com");
 8010668:	490b      	ldr	r1, [pc, #44]	@ (8010698 <aboutDev+0x7c>)
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f7fe fc5a 	bl	800ef24 <cli_printf>
	cli_printf(cli, "");
 8010670:	4905      	ldr	r1, [pc, #20]	@ (8010688 <aboutDev+0x6c>)
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f7fe fc56 	bl	800ef24 <cli_printf>
	cli_printf(cli, "");
 8010678:	4903      	ldr	r1, [pc, #12]	@ (8010688 <aboutDev+0x6c>)
 801067a:	68f8      	ldr	r0, [r7, #12]
 801067c:	f7fe fc52 	bl	800ef24 <cli_printf>
}
 8010680:	bf00      	nop
 8010682:	3710      	adds	r7, #16
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}
 8010688:	08021150 	.word	0x08021150
 801068c:	0802156c 	.word	0x0802156c
 8010690:	08021594 	.word	0x08021594
 8010694:	080215bc 	.word	0x080215bc
 8010698:	080215d0 	.word	0x080215d0

0801069c <initializeEmbeddedCli>:
/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 801069c:	b5b0      	push	{r4, r5, r7, lr}
 801069e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80106a2:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 80106a4:	f000 fd0f 	bl	80110c6 <embeddedCliNewDefault>
 80106a8:	4603      	mov	r3, r0
 80106aa:	4aaa      	ldr	r2, [pc, #680]	@ (8010954 <initializeEmbeddedCli+0x2b8>)
 80106ac:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 80106ae:	4baa      	ldr	r3, [pc, #680]	@ (8010958 <initializeEmbeddedCli+0x2bc>)
 80106b0:	f507 741b 	add.w	r4, r7, #620	@ 0x26c
 80106b4:	461d      	mov	r5, r3
 80106b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106ba:	682b      	ldr	r3, [r5, #0]
 80106bc:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 80106be:	4ba7      	ldr	r3, [pc, #668]	@ (801095c <initializeEmbeddedCli+0x2c0>)
 80106c0:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 80106c4:	461d      	mov	r5, r3
 80106c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106ca:	682b      	ldr	r3, [r5, #0]
 80106cc:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor",
			.tokenizeArgs = true, .context = NULL, .binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature",
 80106ce:	4ba4      	ldr	r3, [pc, #656]	@ (8010960 <initializeEmbeddedCli+0x2c4>)
 80106d0:	f507 7411 	add.w	r4, r7, #580	@ 0x244
 80106d4:	461d      	mov	r5, r3
 80106d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106da:	682b      	ldr	r3, [r5, #0]
 80106dc:	6023      	str	r3, [r4, #0]
			.help = "Unique device identifier(from STM32 electronic signature)",
			.tokenizeArgs = true, .context = NULL, .binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 80106de:	4ba1      	ldr	r3, [pc, #644]	@ (8010964 <initializeEmbeddedCli+0x2c8>)
 80106e0:	f507 740c 	add.w	r4, r7, #560	@ 0x230
 80106e4:	461d      	mov	r5, r3
 80106e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106ea:	682b      	ldr	r3, [r5, #0]
 80106ec:	6023      	str	r3, [r4, #0]
			"Asset number assigned to the device", .tokenizeArgs = true,
			.context = NULL, .binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 80106ee:	4b9e      	ldr	r3, [pc, #632]	@ (8010968 <initializeEmbeddedCli+0x2cc>)
 80106f0:	f507 7407 	add.w	r4, r7, #540	@ 0x21c
 80106f4:	461d      	mov	r5, r3
 80106f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106fa:	682b      	ldr	r3, [r5, #0]
 80106fc:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Set_name = { .name = "set-name", .help =
//				"Optional field to assign name to the device", .tokenizeArgs = true, .context = NULL,
//				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 80106fe:	4b9b      	ldr	r3, [pc, #620]	@ (801096c <initializeEmbeddedCli+0x2d0>)
 8010700:	f507 7402 	add.w	r4, r7, #520	@ 0x208
 8010704:	461d      	mov	r5, r3
 8010706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801070a:	682b      	ldr	r3, [r5, #0]
 801070c:	6023      	str	r3, [r4, #0]
			"Optional field to assign group to the device",
			.tokenizeArgs = true, .context = NULL, .binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help = "gets ID",
 801070e:	4b98      	ldr	r3, [pc, #608]	@ (8010970 <initializeEmbeddedCli+0x2d4>)
 8010710:	f507 74fa 	add.w	r4, r7, #500	@ 0x1f4
 8010714:	461d      	mov	r5, r3
 8010716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801071a:	682b      	ldr	r3, [r5, #0]
 801071c:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 801071e:	4b95      	ldr	r3, [pc, #596]	@ (8010974 <initializeEmbeddedCli+0x2d8>)
 8010720:	f507 74f0 	add.w	r4, r7, #480	@ 0x1e0
 8010724:	461d      	mov	r5, r3
 8010726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801072a:	682b      	ldr	r3, [r5, #0]
 801072c:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Get_name = { .name = "get-name", .help =
//				"gets name", .tokenizeArgs = true, .context = NULL,
//				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help = "gets group",
 801072e:	4b92      	ldr	r3, [pc, #584]	@ (8010978 <initializeEmbeddedCli+0x2dc>)
 8010730:	f507 74e6 	add.w	r4, r7, #460	@ 0x1cc
 8010734:	461d      	mov	r5, r3
 8010736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801073a:	682b      	ldr	r3, [r5, #0]
 801073c:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 801073e:	4b8f      	ldr	r3, [pc, #572]	@ (801097c <initializeEmbeddedCli+0x2e0>)
 8010740:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 8010744:	461d      	mov	r5, r3
 8010746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801074a:	682b      	ldr	r3, [r5, #0]
 801074c:	6023      	str	r3, [r4, #0]
			"In day:month:year", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help = "In hh:mm:ss",
 801074e:	4b8c      	ldr	r3, [pc, #560]	@ (8010980 <initializeEmbeddedCli+0x2e4>)
 8010750:	f507 74d2 	add.w	r4, r7, #420	@ 0x1a4
 8010754:	461d      	mov	r5, r3
 8010756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801075a:	682b      	ldr	r3, [r5, #0]
 801075c:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 801075e:	4b89      	ldr	r3, [pc, #548]	@ (8010984 <initializeEmbeddedCli+0x2e8>)
 8010760:	f507 74c8 	add.w	r4, r7, #400	@ 0x190
 8010764:	461d      	mov	r5, r3
 8010766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801076a:	682b      	ldr	r3, [r5, #0]
 801076c:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 801076e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010776:	4a84      	ldr	r2, [pc, #528]	@ (8010988 <initializeEmbeddedCli+0x2ec>)
 8010778:	461c      	mov	r4, r3
 801077a:	4615      	mov	r5, r2
 801077c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801077e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010780:	682b      	ldr	r3, [r5, #0]
 8010782:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 8010784:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010788:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801078c:	4a7f      	ldr	r2, [pc, #508]	@ (801098c <initializeEmbeddedCli+0x2f0>)
 801078e:	461c      	mov	r4, r3
 8010790:	4615      	mov	r5, r2
 8010792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010796:	682b      	ldr	r3, [r5, #0]
 8010798:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true,
			.context = NULL, .binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 801079a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 801079e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80107a2:	4a7b      	ldr	r2, [pc, #492]	@ (8010990 <initializeEmbeddedCli+0x2f4>)
 80107a4:	461c      	mov	r4, r3
 80107a6:	4615      	mov	r5, r2
 80107a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107ac:	682b      	ldr	r3, [r5, #0]
 80107ae:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };

	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 80107b0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80107b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80107b8:	4a76      	ldr	r2, [pc, #472]	@ (8010994 <initializeEmbeddedCli+0x2f8>)
 80107ba:	461c      	mov	r4, r3
 80107bc:	4615      	mov	r5, r2
 80107be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107c2:	682b      	ldr	r3, [r5, #0]
 80107c4:	6023      	str	r3, [r4, #0]
			"Filename prefix as in \"value+date\" in file naming convention",
			.tokenizeArgs = true, .context = NULL, .binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 80107c6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80107ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80107ce:	4a72      	ldr	r2, [pc, #456]	@ (8010998 <initializeEmbeddedCli+0x2fc>)
 80107d0:	461c      	mov	r4, r3
 80107d2:	4615      	mov	r5, r2
 80107d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107d8:	682b      	ldr	r3, [r5, #0]
 80107da:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL, .binding =
			GetFilename };

	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 80107dc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80107e0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80107e4:	4a6d      	ldr	r2, [pc, #436]	@ (801099c <initializeEmbeddedCli+0x300>)
 80107e6:	461c      	mov	r4, r3
 80107e8:	4615      	mov	r5, r2
 80107ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107ee:	682b      	ldr	r3, [r5, #0]
 80107f0:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 80107f2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80107f6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80107fa:	4a69      	ldr	r2, [pc, #420]	@ (80109a0 <initializeEmbeddedCli+0x304>)
 80107fc:	461c      	mov	r4, r3
 80107fe:	4615      	mov	r5, r2
 8010800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010804:	682b      	ldr	r3, [r5, #0]
 8010806:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL, .binding =
			GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 8010808:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 801080c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010810:	4a64      	ldr	r2, [pc, #400]	@ (80109a4 <initializeEmbeddedCli+0x308>)
 8010812:	461c      	mov	r4, r3
 8010814:	4615      	mov	r5, r2
 8010816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801081a:	682b      	ldr	r3, [r5, #0]
 801081c:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context =
			NULL, .binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-calibration", .help =
 801081e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010822:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8010826:	4a60      	ldr	r2, [pc, #384]	@ (80109a8 <initializeEmbeddedCli+0x30c>)
 8010828:	461c      	mov	r4, r3
 801082a:	4615      	mov	r5, r2
 801082c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801082e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010830:	682b      	ldr	r3, [r5, #0]
 8010832:	6023      	str	r3, [r4, #0]
			"Calibrate the co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 8010834:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010838:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801083c:	4a5b      	ldr	r2, [pc, #364]	@ (80109ac <initializeEmbeddedCli+0x310>)
 801083e:	461c      	mov	r4, r3
 8010840:	4615      	mov	r5, r2
 8010842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010846:	682b      	ldr	r3, [r5, #0]
 8010848:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 801084a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 801084e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8010852:	4a57      	ldr	r2, [pc, #348]	@ (80109b0 <initializeEmbeddedCli+0x314>)
 8010854:	461c      	mov	r4, r3
 8010856:	4615      	mov	r5, r2
 8010858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801085c:	682b      	ldr	r3, [r5, #0]
 801085e:	6023      	str	r3, [r4, #0]
			"Co2 measured in ppm", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8010860:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010864:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010868:	4a52      	ldr	r2, [pc, #328]	@ (80109b4 <initializeEmbeddedCli+0x318>)
 801086a:	461c      	mov	r4, r3
 801086c:	4615      	mov	r5, r2
 801086e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010872:	682b      	ldr	r3, [r5, #0]
 8010874:	6023      	str	r3, [r4, #0]
			"Temperature measured in Celsius", .tokenizeArgs = true, .context =
			NULL, .binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 8010876:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 801087a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 801087e:	4a4e      	ldr	r2, [pc, #312]	@ (80109b8 <initializeEmbeddedCli+0x31c>)
 8010880:	461c      	mov	r4, r3
 8010882:	4615      	mov	r5, r2
 8010884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010888:	682b      	ldr	r3, [r5, #0]
 801088a:	6023      	str	r3, [r4, #0]
			"Humidity measured in % of relative", .tokenizeArgs = true,
			.context = NULL, .binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 801088c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010890:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8010894:	4a49      	ldr	r2, [pc, #292]	@ (80109bc <initializeEmbeddedCli+0x320>)
 8010896:	461c      	mov	r4, r3
 8010898:	4615      	mov	r5, r2
 801089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801089e:	682b      	ldr	r3, [r5, #0]
 80108a0:	6023      	str	r3, [r4, #0]
			"Movement detected - yes or no", .tokenizeArgs = true, .context =
			NULL, .binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 80108a2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80108a6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80108aa:	4a45      	ldr	r2, [pc, #276]	@ (80109c0 <initializeEmbeddedCli+0x324>)
 80108ac:	461c      	mov	r4, r3
 80108ae:	4615      	mov	r5, r2
 80108b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108b4:	682b      	ldr	r3, [r5, #0]
 80108b6:	6023      	str	r3, [r4, #0]
			"Check air quality level", .tokenizeArgs = true, .context = NULL,
			.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 80108b8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80108bc:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80108c0:	4a40      	ldr	r2, [pc, #256]	@ (80109c4 <initializeEmbeddedCli+0x328>)
 80108c2:	461c      	mov	r4, r3
 80108c4:	4615      	mov	r5, r2
 80108c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108ca:	682b      	ldr	r3, [r5, #0]
 80108cc:	6023      	str	r3, [r4, #0]
			"Measure voltage from 4.17v(Full Charge) to 3.0v(Battery Low)",
			.tokenizeArgs = true, .context = NULL, .binding = BattVolt };

	CliCommandBinding _port = { .name = "port", .help = "Inactive field",
 80108ce:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80108d2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80108d6:	4a3c      	ldr	r2, [pc, #240]	@ (80109c8 <initializeEmbeddedCli+0x32c>)
 80108d8:	461c      	mov	r4, r3
 80108da:	4615      	mov	r5, r2
 80108dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108e0:	682b      	ldr	r3, [r5, #0]
 80108e2:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = port };

	CliCommandBinding _showall = { .name = "show-all", .help =
 80108e4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80108e8:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80108ec:	4a37      	ldr	r2, [pc, #220]	@ (80109cc <initializeEmbeddedCli+0x330>)
 80108ee:	461c      	mov	r4, r3
 80108f0:	4615      	mov	r5, r2
 80108f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108f6:	682b      	ldr	r3, [r5, #0]
 80108f8:	6023      	str	r3, [r4, #0]
			"Shows all parameters", .tokenizeArgs = true, .context = NULL,
			.binding = showall };

	CliCommandBinding getversion = { .name = "get-version", .help =
 80108fa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80108fe:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8010902:	4a33      	ldr	r2, [pc, #204]	@ (80109d0 <initializeEmbeddedCli+0x334>)
 8010904:	461c      	mov	r4, r3
 8010906:	4615      	mov	r5, r2
 8010908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801090a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801090c:	682b      	ldr	r3, [r5, #0]
 801090e:	6023      	str	r3, [r4, #0]
				"Shows hardware and software version", .tokenizeArgs = true, .context = NULL,
				.binding = systemversion };

	CliCommandBinding aboutdev = { .name = "about", .help =
 8010910:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010914:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8010918:	4a2e      	ldr	r2, [pc, #184]	@ (80109d4 <initializeEmbeddedCli+0x338>)
 801091a:	461c      	mov	r4, r3
 801091c:	4615      	mov	r5, r2
 801091e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010922:	682b      	ldr	r3, [r5, #0]
 8010924:	6023      	str	r3, [r4, #0]
				"Information about device", .tokenizeArgs = true, .context = NULL,
				.binding = aboutDev };

	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8010926:	4b0b      	ldr	r3, [pc, #44]	@ (8010954 <initializeEmbeddedCli+0x2b8>)
 8010928:	681c      	ldr	r4, [r3, #0]
 801092a:	466a      	mov	r2, sp
 801092c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8010930:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010934:	e882 0003 	stmia.w	r2, {r0, r1}
 8010938:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 801093c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801093e:	4620      	mov	r0, r4
 8010940:	f000 fc7f 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8010944:	4b03      	ldr	r3, [pc, #12]	@ (8010954 <initializeEmbeddedCli+0x2b8>)
 8010946:	681c      	ldr	r4, [r3, #0]
 8010948:	466a      	mov	r2, sp
 801094a:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 801094e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010952:	e041      	b.n	80109d8 <initializeEmbeddedCli+0x33c>
 8010954:	20001a70 	.word	0x20001a70
 8010958:	08021608 	.word	0x08021608
 801095c:	0802165c 	.word	0x0802165c
 8010960:	080216c4 	.word	0x080216c4
 8010964:	08021704 	.word	0x08021704
 8010968:	08021764 	.word	0x08021764
 801096c:	080217b4 	.word	0x080217b4
 8010970:	080217d8 	.word	0x080217d8
 8010974:	0802180c 	.word	0x0802180c
 8010978:	08021838 	.word	0x08021838
 801097c:	0802186c 	.word	0x0802186c
 8010980:	08021898 	.word	0x08021898
 8010984:	080218cc 	.word	0x080218cc
 8010988:	08021900 	.word	0x08021900
 801098c:	0802194c 	.word	0x0802194c
 8010990:	08021984 	.word	0x08021984
 8010994:	080219e8 	.word	0x080219e8
 8010998:	08021a1c 	.word	0x08021a1c
 801099c:	08021a58 	.word	0x08021a58
 80109a0:	08021a8c 	.word	0x08021a8c
 80109a4:	08021acc 	.word	0x08021acc
 80109a8:	08021b0c 	.word	0x08021b0c
 80109ac:	08021b44 	.word	0x08021b44
 80109b0:	08021b78 	.word	0x08021b78
 80109b4:	08021bc0 	.word	0x08021bc0
 80109b8:	08021c08 	.word	0x08021c08
 80109bc:	08021c50 	.word	0x08021c50
 80109c0:	08021c88 	.word	0x08021c88
 80109c4:	08021cec 	.word	0x08021cec
 80109c8:	08021d18 	.word	0x08021d18
 80109cc:	08021d50 	.word	0x08021d50
 80109d0:	08021d94 	.word	0x08021d94
 80109d4:	08021dcc 	.word	0x08021dcc
 80109d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80109dc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80109e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109e2:	4620      	mov	r0, r4
 80109e4:	f000 fc2d 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 80109e8:	4bd6      	ldr	r3, [pc, #856]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 80109ea:	681c      	ldr	r4, [r3, #0]
 80109ec:	466a      	mov	r2, sp
 80109ee:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80109f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80109fa:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80109fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a00:	4620      	mov	r0, r4
 8010a02:	f000 fc1e 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8010a06:	4bcf      	ldr	r3, [pc, #828]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010a08:	681c      	ldr	r4, [r3, #0]
 8010a0a:	466a      	mov	r2, sp
 8010a0c:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8010a10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010a14:	e882 0003 	stmia.w	r2, {r0, r1}
 8010a18:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8010a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a1e:	4620      	mov	r0, r4
 8010a20:	f000 fc0f 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 8010a24:	4bc7      	ldr	r3, [pc, #796]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010a26:	681c      	ldr	r4, [r3, #0]
 8010a28:	466a      	mov	r2, sp
 8010a2a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8010a2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010a32:	e882 0003 	stmia.w	r2, {r0, r1}
 8010a36:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8010a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	f000 fc00 	bl	8011242 <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Set_name);
	embeddedCliAddBinding(cli, Set_group);
 8010a42:	4bc0      	ldr	r3, [pc, #768]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010a44:	681c      	ldr	r4, [r3, #0]
 8010a46:	466a      	mov	r2, sp
 8010a48:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8010a4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010a50:	e882 0003 	stmia.w	r2, {r0, r1}
 8010a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8010a58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	f000 fbf1 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 8010a60:	4bb8      	ldr	r3, [pc, #736]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010a62:	681c      	ldr	r4, [r3, #0]
 8010a64:	466a      	mov	r2, sp
 8010a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8010a6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010a6e:	e882 0003 	stmia.w	r2, {r0, r1}
 8010a72:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 8010a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a78:	4620      	mov	r0, r4
 8010a7a:	f000 fbe2 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8010a7e:	4bb1      	ldr	r3, [pc, #708]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010a80:	681c      	ldr	r4, [r3, #0]
 8010a82:	466a      	mov	r2, sp
 8010a84:	f507 73f6 	add.w	r3, r7, #492	@ 0x1ec
 8010a88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010a8c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010a90:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010a94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a96:	4620      	mov	r0, r4
 8010a98:	f000 fbd3 	bl	8011242 <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Get_name);
	embeddedCliAddBinding(cli, Get_group);
 8010a9c:	4ba9      	ldr	r3, [pc, #676]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010a9e:	681c      	ldr	r4, [r3, #0]
 8010aa0:	466a      	mov	r2, sp
 8010aa2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010aa6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010aaa:	e882 0003 	stmia.w	r2, {r0, r1}
 8010aae:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8010ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f000 fbc4 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 8010aba:	4ba2      	ldr	r3, [pc, #648]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010abc:	681c      	ldr	r4, [r3, #0]
 8010abe:	466a      	mov	r2, sp
 8010ac0:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 8010ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010ac8:	e882 0003 	stmia.w	r2, {r0, r1}
 8010acc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8010ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f000 fbb5 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 8010ad8:	4b9a      	ldr	r3, [pc, #616]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010ada:	681c      	ldr	r4, [r3, #0]
 8010adc:	466a      	mov	r2, sp
 8010ade:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8010ae2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010ae6:	e882 0003 	stmia.w	r2, {r0, r1}
 8010aea:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8010aee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010af0:	4620      	mov	r0, r4
 8010af2:	f000 fba6 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 8010af6:	4b93      	ldr	r3, [pc, #588]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010af8:	681c      	ldr	r4, [r3, #0]
 8010afa:	466a      	mov	r2, sp
 8010afc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8010b00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b04:	e882 0003 	stmia.w	r2, {r0, r1}
 8010b08:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f000 fb97 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8010b14:	4b8b      	ldr	r3, [pc, #556]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010b16:	681c      	ldr	r4, [r3, #0]
 8010b18:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010b1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010b20:	466d      	mov	r5, sp
 8010b22:	f103 020c 	add.w	r2, r3, #12
 8010b26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b30:	4620      	mov	r0, r4
 8010b32:	f000 fb86 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8010b36:	4b83      	ldr	r3, [pc, #524]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010b38:	681c      	ldr	r4, [r3, #0]
 8010b3a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010b3e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010b42:	466d      	mov	r5, sp
 8010b44:	f103 020c 	add.w	r2, r3, #12
 8010b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b52:	4620      	mov	r0, r4
 8010b54:	f000 fb75 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8010b58:	4b7a      	ldr	r3, [pc, #488]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010b5a:	681c      	ldr	r4, [r3, #0]
 8010b5c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010b60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010b64:	466d      	mov	r5, sp
 8010b66:	f103 020c 	add.w	r2, r3, #12
 8010b6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b74:	4620      	mov	r0, r4
 8010b76:	f000 fb64 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8010b7a:	4b72      	ldr	r3, [pc, #456]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010b7c:	681c      	ldr	r4, [r3, #0]
 8010b7e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010b82:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8010b86:	466d      	mov	r5, sp
 8010b88:	f103 020c 	add.w	r2, r3, #12
 8010b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b90:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b96:	4620      	mov	r0, r4
 8010b98:	f000 fb53 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8010b9c:	4b69      	ldr	r3, [pc, #420]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010b9e:	681c      	ldr	r4, [r3, #0]
 8010ba0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010ba4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8010ba8:	466d      	mov	r5, sp
 8010baa:	f103 020c 	add.w	r2, r3, #12
 8010bae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8010bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f000 fb42 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8010bbe:	4b61      	ldr	r3, [pc, #388]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010bc0:	681c      	ldr	r4, [r3, #0]
 8010bc2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010bc6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8010bca:	466d      	mov	r5, sp
 8010bcc:	f103 020c 	add.w	r2, r3, #12
 8010bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8010bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010bda:	4620      	mov	r0, r4
 8010bdc:	f000 fb31 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8010be0:	4b58      	ldr	r3, [pc, #352]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010be2:	681c      	ldr	r4, [r3, #0]
 8010be4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010be8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8010bec:	466d      	mov	r5, sp
 8010bee:	f103 020c 	add.w	r2, r3, #12
 8010bf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8010bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	f000 fb20 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 8010c02:	4b50      	ldr	r3, [pc, #320]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010c04:	681c      	ldr	r4, [r3, #0]
 8010c06:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010c0a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010c0e:	466d      	mov	r5, sp
 8010c10:	f103 020c 	add.w	r2, r3, #12
 8010c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c18:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f000 fb0f 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8010c24:	4b47      	ldr	r3, [pc, #284]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010c26:	681c      	ldr	r4, [r3, #0]
 8010c28:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010c2c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8010c30:	466d      	mov	r5, sp
 8010c32:	f103 020c 	add.w	r2, r3, #12
 8010c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c40:	4620      	mov	r0, r4
 8010c42:	f000 fafe 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 8010c46:	4b3f      	ldr	r3, [pc, #252]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010c48:	681c      	ldr	r4, [r3, #0]
 8010c4a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010c4e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8010c52:	466d      	mov	r5, sp
 8010c54:	f103 020c 	add.w	r2, r3, #12
 8010c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c62:	4620      	mov	r0, r4
 8010c64:	f000 faed 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 8010c68:	4b36      	ldr	r3, [pc, #216]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010c6a:	681c      	ldr	r4, [r3, #0]
 8010c6c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010c70:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8010c74:	466d      	mov	r5, sp
 8010c76:	f103 020c 	add.w	r2, r3, #12
 8010c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c84:	4620      	mov	r0, r4
 8010c86:	f000 fadc 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 8010c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010c8c:	681c      	ldr	r4, [r3, #0]
 8010c8e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010c92:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010c96:	466d      	mov	r5, sp
 8010c98:	f103 020c 	add.w	r2, r3, #12
 8010c9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ca0:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	f000 facb 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8010cac:	4b25      	ldr	r3, [pc, #148]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010cae:	681c      	ldr	r4, [r3, #0]
 8010cb0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010cb4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8010cb8:	466d      	mov	r5, sp
 8010cba:	f103 020c 	add.w	r2, r3, #12
 8010cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8010cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f000 faba 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 8010cce:	4b1d      	ldr	r3, [pc, #116]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010cd0:	681c      	ldr	r4, [r3, #0]
 8010cd2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010cd6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8010cda:	466d      	mov	r5, sp
 8010cdc:	f103 020c 	add.w	r2, r3, #12
 8010ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ce4:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010cea:	4620      	mov	r0, r4
 8010cec:	f000 faa9 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 8010cf0:	4b14      	ldr	r3, [pc, #80]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010cf2:	681c      	ldr	r4, [r3, #0]
 8010cf4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010cf8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8010cfc:	466d      	mov	r5, sp
 8010cfe:	f103 020c 	add.w	r2, r3, #12
 8010d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d06:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f000 fa98 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 8010d12:	4b0c      	ldr	r3, [pc, #48]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010d14:	681c      	ldr	r4, [r3, #0]
 8010d16:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d1a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8010d1e:	466d      	mov	r5, sp
 8010d20:	f103 020c 	add.w	r2, r3, #12
 8010d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d28:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d2e:	4620      	mov	r0, r4
 8010d30:	f000 fa87 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _port);
 8010d34:	4b03      	ldr	r3, [pc, #12]	@ (8010d44 <initializeEmbeddedCli+0x6a8>)
 8010d36:	681c      	ldr	r4, [r3, #0]
 8010d38:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d3c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8010d40:	e002      	b.n	8010d48 <initializeEmbeddedCli+0x6ac>
 8010d42:	bf00      	nop
 8010d44:	20001a70 	.word	0x20001a70
 8010d48:	466d      	mov	r5, sp
 8010d4a:	f103 020c 	add.w	r2, r3, #12
 8010d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d52:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d58:	4620      	mov	r0, r4
 8010d5a:	f000 fa72 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _showall);
 8010d5e:	4b21      	ldr	r3, [pc, #132]	@ (8010de4 <initializeEmbeddedCli+0x748>)
 8010d60:	681c      	ldr	r4, [r3, #0]
 8010d62:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d66:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8010d6a:	466d      	mov	r5, sp
 8010d6c:	f103 020c 	add.w	r2, r3, #12
 8010d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	f000 fa61 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getversion);
 8010d80:	4b18      	ldr	r3, [pc, #96]	@ (8010de4 <initializeEmbeddedCli+0x748>)
 8010d82:	681c      	ldr	r4, [r3, #0]
 8010d84:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d88:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8010d8c:	466d      	mov	r5, sp
 8010d8e:	f103 020c 	add.w	r2, r3, #12
 8010d92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d96:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f000 fa50 	bl	8011242 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, aboutdev);
 8010da2:	4b10      	ldr	r3, [pc, #64]	@ (8010de4 <initializeEmbeddedCli+0x748>)
 8010da4:	681c      	ldr	r4, [r3, #0]
 8010da6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010daa:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8010dae:	466d      	mov	r5, sp
 8010db0:	f103 020c 	add.w	r2, r3, #12
 8010db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010db8:	e885 0003 	stmia.w	r5, {r0, r1}
 8010dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	f000 fa3f 	bl	8011242 <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 8010dc4:	4b07      	ldr	r3, [pc, #28]	@ (8010de4 <initializeEmbeddedCli+0x748>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4a07      	ldr	r2, [pc, #28]	@ (8010de8 <initializeEmbeddedCli+0x74c>)
 8010dca:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 8010dcc:	4b07      	ldr	r3, [pc, #28]	@ (8010dec <initializeEmbeddedCli+0x750>)
 8010dce:	2201      	movs	r2, #1
 8010dd0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010dd2:	4b07      	ldr	r3, [pc, #28]	@ (8010df0 <initializeEmbeddedCli+0x754>)
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	701a      	strb	r2, [r3, #0]
}
 8010dd8:	bf00      	nop
 8010dda:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bdb0      	pop	{r4, r5, r7, pc}
 8010de2:	bf00      	nop
 8010de4:	20001a70 	.word	0x20001a70
 8010de8:	0800eef9 	.word	0x0800eef9
 8010dec:	20001a7d 	.word	0x20001a7d
 8010df0:	20001a7e 	.word	0x20001a7e

08010df4 <console_process>:

void console_process(void) {
 8010df4:	b580      	push	{r7, lr}
 8010df6:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 8010df8:	4b03      	ldr	r3, [pc, #12]	@ (8010e08 <console_process+0x14>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f000 f990 	bl	8011122 <embeddedCliProcess>
}
 8010e02:	bf00      	nop
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	20001a70 	.word	0x20001a70

08010e0c <console_uart_deinit>:

void console_uart_deinit() {
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010e10:	4803      	ldr	r0, [pc, #12]	@ (8010e20 <console_uart_deinit+0x14>)
 8010e12:	f7fa fdbe 	bl	800b992 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 8010e16:	4802      	ldr	r0, [pc, #8]	@ (8010e20 <console_uart_deinit+0x14>)
 8010e18:	f7f2 fd10 	bl	800383c <HAL_UART_MspDeInit>
}
 8010e1c:	bf00      	nop
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	200019c0 	.word	0x200019c0

08010e24 <console_uart_init>:
void console_uart_init() {
 8010e24:	b580      	push	{r7, lr}
 8010e26:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010e28:	4815      	ldr	r0, [pc, #84]	@ (8010e80 <console_uart_init+0x5c>)
 8010e2a:	f7fa fdb2 	bl	800b992 <HAL_UART_DeInit>
	huart1.Instance = USART1;
 8010e2e:	4b14      	ldr	r3, [pc, #80]	@ (8010e80 <console_uart_init+0x5c>)
 8010e30:	4a14      	ldr	r2, [pc, #80]	@ (8010e84 <console_uart_init+0x60>)
 8010e32:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8010e34:	4b12      	ldr	r3, [pc, #72]	@ (8010e80 <console_uart_init+0x5c>)
 8010e36:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8010e3a:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010e3c:	4b10      	ldr	r3, [pc, #64]	@ (8010e80 <console_uart_init+0x5c>)
 8010e3e:	2200      	movs	r2, #0
 8010e40:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8010e42:	4b0f      	ldr	r3, [pc, #60]	@ (8010e80 <console_uart_init+0x5c>)
 8010e44:	2200      	movs	r2, #0
 8010e46:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8010e48:	4b0d      	ldr	r3, [pc, #52]	@ (8010e80 <console_uart_init+0x5c>)
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8010e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8010e80 <console_uart_init+0x5c>)
 8010e50:	220c      	movs	r2, #12
 8010e52:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010e54:	4b0a      	ldr	r3, [pc, #40]	@ (8010e80 <console_uart_init+0x5c>)
 8010e56:	2200      	movs	r2, #0
 8010e58:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010e5a:	4b09      	ldr	r3, [pc, #36]	@ (8010e80 <console_uart_init+0x5c>)
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8010e60:	4807      	ldr	r0, [pc, #28]	@ (8010e80 <console_uart_init+0x5c>)
 8010e62:	f7fa fd49 	bl	800b8f8 <HAL_UART_Init>
 8010e66:	4603      	mov	r3, r0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d001      	beq.n	8010e70 <console_uart_init+0x4c>
		Error_Handler();
 8010e6c:	f7f2 f9c4 	bl	80031f8 <Error_Handler>
	}
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8010e70:	2201      	movs	r2, #1
 8010e72:	4905      	ldr	r1, [pc, #20]	@ (8010e88 <console_uart_init+0x64>)
 8010e74:	4802      	ldr	r0, [pc, #8]	@ (8010e80 <console_uart_init+0x5c>)
 8010e76:	f7fa fe4d 	bl	800bb14 <HAL_UART_Receive_IT>
}
 8010e7a:	bf00      	nop
 8010e7c:	bd80      	pop	{r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	200019c0 	.word	0x200019c0
 8010e84:	40011000 	.word	0x40011000
 8010e88:	20001a7c 	.word	0x20001a7c

08010e8c <console_init>:

void console_init(void) {
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	af00      	add	r7, sp, #0
	console_uart_init();
 8010e90:	f7ff ffc8 	bl	8010e24 <console_uart_init>
	initializeEmbeddedCli();
 8010e94:	f7ff fc02 	bl	801069c <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8010e98:	2201      	movs	r2, #1
 8010e9a:	4903      	ldr	r1, [pc, #12]	@ (8010ea8 <console_init+0x1c>)
 8010e9c:	4803      	ldr	r0, [pc, #12]	@ (8010eac <console_init+0x20>)
 8010e9e:	f7fa fe39 	bl	800bb14 <HAL_UART_Receive_IT>
}
 8010ea2:	bf00      	nop
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	20001a7c 	.word	0x20001a7c
 8010eac:	200019c0 	.word	0x200019c0

08010eb0 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8010eb0:	b480      	push	{r7}
 8010eb2:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8010eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8010ef0 <embeddedCliDefaultConfig+0x40>)
 8010eb6:	2240      	movs	r2, #64	@ 0x40
 8010eb8:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8010eba:	4b0d      	ldr	r3, [pc, #52]	@ (8010ef0 <embeddedCliDefaultConfig+0x40>)
 8010ebc:	2240      	movs	r2, #64	@ 0x40
 8010ebe:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8010ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8010ef0 <embeddedCliDefaultConfig+0x40>)
 8010ec2:	2280      	movs	r2, #128	@ 0x80
 8010ec4:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8010ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8010ef0 <embeddedCliDefaultConfig+0x40>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8010ecc:	4b08      	ldr	r3, [pc, #32]	@ (8010ef0 <embeddedCliDefaultConfig+0x40>)
 8010ece:	2200      	movs	r2, #0
 8010ed0:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 50;
 8010ed2:	4b07      	ldr	r3, [pc, #28]	@ (8010ef0 <embeddedCliDefaultConfig+0x40>)
 8010ed4:	2232      	movs	r2, #50	@ 0x32
 8010ed6:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8010ed8:	4b05      	ldr	r3, [pc, #20]	@ (8010ef0 <embeddedCliDefaultConfig+0x40>)
 8010eda:	2201      	movs	r2, #1
 8010edc:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8010ede:	4b04      	ldr	r3, [pc, #16]	@ (8010ef0 <embeddedCliDefaultConfig+0x40>)
 8010ee0:	4a04      	ldr	r2, [pc, #16]	@ (8010ef4 <embeddedCliDefaultConfig+0x44>)
 8010ee2:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8010ee4:	4b02      	ldr	r3, [pc, #8]	@ (8010ef0 <embeddedCliDefaultConfig+0x40>)
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr
 8010ef0:	20001a84 	.word	0x20001a84
 8010ef4:	08021de4 	.word	0x08021de4

08010ef8 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8010ef8:	b480      	push	{r7}
 8010efa:	b085      	sub	sp, #20
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	895b      	ldrh	r3, [r3, #10]
 8010f04:	2201      	movs	r2, #1
 8010f06:	4413      	add	r3, r2
 8010f08:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	889b      	ldrh	r3, [r3, #4]
 8010f0e:	3303      	adds	r3, #3
 8010f10:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	88db      	ldrh	r3, [r3, #6]
 8010f16:	3303      	adds	r3, #3
 8010f18:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8010f1a:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	891b      	ldrh	r3, [r3, #8]
 8010f20:	3303      	adds	r3, #3
 8010f22:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8010f24:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8010f26:	89fa      	ldrh	r2, [r7, #14]
 8010f28:	4613      	mov	r3, r2
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	4413      	add	r3, r2
 8010f2e:	009b      	lsls	r3, r3, #2
 8010f30:	3303      	adds	r3, #3
 8010f32:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8010f34:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 8010f36:	89fb      	ldrh	r3, [r7, #14]
 8010f38:	3303      	adds	r3, #3
 8010f3a:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8010f3c:	4413      	add	r3, r2
 8010f3e:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	b29b      	uxth	r3, r3
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3714      	adds	r7, #20
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr

08010f52 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b088      	sub	sp, #32
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	895b      	ldrh	r3, [r3, #10]
 8010f62:	2201      	movs	r2, #1
 8010f64:	4413      	add	r3, r2
 8010f66:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7ff ffc5 	bl	8010ef8 <embeddedCliRequiredSize>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 8010f72:	2300      	movs	r3, #0
 8010f74:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d10f      	bne.n	8010f9e <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 8010f7e:	6938      	ldr	r0, [r7, #16]
 8010f80:	f00a fe56 	bl	801bc30 <malloc>
 8010f84:	4603      	mov	r3, r0
 8010f86:	461a      	mov	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d101      	bne.n	8010f98 <embeddedCliNew+0x46>
            return NULL;
 8010f94:	2300      	movs	r3, #0
 8010f96:	e092      	b.n	80110be <embeddedCliNew+0x16c>
        allocated = true;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	77fb      	strb	r3, [r7, #31]
 8010f9c:	e007      	b.n	8010fae <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	8a1b      	ldrh	r3, [r3, #16]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d901      	bls.n	8010fae <embeddedCliNew+0x5c>
        return NULL;
 8010faa:	2300      	movs	r3, #0
 8010fac:	e087      	b.n	80110be <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8010fb4:	693a      	ldr	r2, [r7, #16]
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f00c f8b7 	bl	801d12c <memset>

    cli = (EmbeddedCli *) buf;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	3310      	adds	r3, #16
 8010fc6:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8010fc8:	69bb      	ldr	r3, [r7, #24]
 8010fca:	68fa      	ldr	r2, [r7, #12]
 8010fcc:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	3334      	adds	r3, #52	@ 0x34
 8010fd2:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	68db      	ldr	r3, [r3, #12]
 8010fd8:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	889b      	ldrh	r3, [r3, #4]
 8010fe4:	3303      	adds	r3, #3
 8010fe6:	f023 0303 	bic.w	r3, r3, #3
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	4413      	add	r3, r2
 8010fee:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	68fa      	ldr	r2, [r7, #12]
 8010ff4:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	88db      	ldrh	r3, [r3, #6]
 8010ffa:	3303      	adds	r3, #3
 8010ffc:	f023 0303 	bic.w	r3, r3, #3
 8011000:	68fa      	ldr	r2, [r7, #12]
 8011002:	4413      	add	r3, r2
 8011004:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	68fa      	ldr	r2, [r7, #12]
 801100a:	625a      	str	r2, [r3, #36]	@ 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 801100c:	8afa      	ldrh	r2, [r7, #22]
 801100e:	4613      	mov	r3, r2
 8011010:	009b      	lsls	r3, r3, #2
 8011012:	4413      	add	r3, r2
 8011014:	009b      	lsls	r3, r3, #2
 8011016:	3303      	adds	r3, #3
 8011018:	f023 0303 	bic.w	r3, r3, #3
 801101c:	68fa      	ldr	r2, [r7, #12]
 801101e:	4413      	add	r3, r2
 8011020:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	68fa      	ldr	r2, [r7, #12]
 8011026:	629a      	str	r2, [r3, #40]	@ 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 8011028:	8afb      	ldrh	r3, [r7, #22]
 801102a:	3303      	adds	r3, #3
 801102c:	f023 0303 	bic.w	r3, r3, #3
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	4413      	add	r3, r2
 8011034:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	68fa      	ldr	r2, [r7, #12]
 801103a:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	891a      	ldrh	r2, [r3, #8]
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8011044:	7ffb      	ldrb	r3, [r7, #31]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d008      	beq.n	801105c <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011050:	f043 0304 	orr.w	r3, r3, #4
 8011054:	b2da      	uxtb	r2, r3
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	7c9b      	ldrb	r3, [r3, #18]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d008      	beq.n	8011076 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801106a:	f043 0320 	orr.w	r3, r3, #32
 801106e:	b2da      	uxtb	r2, r3
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	889a      	ldrh	r2, [r3, #4]
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	2200      	movs	r2, #0
 8011082:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	2200      	movs	r2, #0
 8011088:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	88da      	ldrh	r2, [r3, #6]
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->bindingsCount = 0;
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	2200      	movs	r2, #0
 8011096:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	895b      	ldrh	r3, [r3, #10]
 801109c:	2201      	movs	r2, #1
 801109e:	4413      	add	r3, r2
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    impl->lastChar = '\0';
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	2200      	movs	r2, #0
 80110aa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681a      	ldr	r2, [r3, #0]
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 80110b6:	69b8      	ldr	r0, [r7, #24]
 80110b8:	f000 fc5e 	bl	8011978 <initInternalBindings>

    return cli;
 80110bc:	69bb      	ldr	r3, [r7, #24]
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3720      	adds	r7, #32
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}

080110c6 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 80110c6:	b580      	push	{r7, lr}
 80110c8:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 80110ca:	f7ff fef1 	bl	8010eb0 <embeddedCliDefaultConfig>
 80110ce:	4603      	mov	r3, r0
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7ff ff3e 	bl	8010f52 <embeddedCliNew>
 80110d6:	4603      	mov	r3, r0
}
 80110d8:	4618      	mov	r0, r3
 80110da:	bd80      	pop	{r7, pc}

080110dc <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	460b      	mov	r3, r1
 80110e6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	3310      	adds	r3, #16
 80110f2:	78fa      	ldrb	r2, [r7, #3]
 80110f4:	4611      	mov	r1, r2
 80110f6:	4618      	mov	r0, r3
 80110f8:	f001 f865 	bl	80121c6 <fifoBufPush>
 80110fc:	4603      	mov	r3, r0
 80110fe:	f083 0301 	eor.w	r3, r3, #1
 8011102:	b2db      	uxtb	r3, r3
 8011104:	2b00      	cmp	r3, #0
 8011106:	d008      	beq.n	801111a <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801110e:	f043 0301 	orr.w	r3, r3, #1
 8011112:	b2da      	uxtb	r2, r3
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 801111a:	bf00      	nop
 801111c:	3710      	adds	r7, #16
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8011122:	b580      	push	{r7, lr}
 8011124:	b084      	sub	sp, #16
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	f000 8083 	beq.w	801123a <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011140:	f003 0302 	and.w	r3, r3, #2
 8011144:	2b00      	cmp	r3, #0
 8011146:	d155      	bne.n	80111f4 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801114e:	f043 0302 	orr.w	r3, r3, #2
 8011152:	b2da      	uxtb	r2, r3
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4619      	mov	r1, r3
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f000 ff8f 	bl	8012084 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8011166:	e045      	b.n	80111f4 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	3310      	adds	r3, #16
 801116c:	4618      	mov	r0, r3
 801116e:	f001 f802 	bl	8012176 <fifoBufPop>
 8011172:	4603      	mov	r3, r0
 8011174:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801117c:	f003 0308 	and.w	r3, r3, #8
 8011180:	2b00      	cmp	r3, #0
 8011182:	d005      	beq.n	8011190 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8011184:	7afb      	ldrb	r3, [r7, #11]
 8011186:	4619      	mov	r1, r3
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f000 fa17 	bl	80115bc <onEscapedInput>
 801118e:	e02a      	b.n	80111e6 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8011196:	2b1b      	cmp	r3, #27
 8011198:	d10c      	bne.n	80111b4 <embeddedCliProcess+0x92>
 801119a:	7afb      	ldrb	r3, [r7, #11]
 801119c:	2b5b      	cmp	r3, #91	@ 0x5b
 801119e:	d109      	bne.n	80111b4 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80111a6:	f043 0308 	orr.w	r3, r3, #8
 80111aa:	b2da      	uxtb	r2, r3
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80111b2:	e018      	b.n	80111e6 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 80111b4:	7afb      	ldrb	r3, [r7, #11]
 80111b6:	4618      	mov	r0, r3
 80111b8:	f000 ff85 	bl	80120c6 <isControlChar>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d005      	beq.n	80111ce <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 80111c2:	7afb      	ldrb	r3, [r7, #11]
 80111c4:	4619      	mov	r1, r3
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f000 fa54 	bl	8011674 <onControlInput>
 80111cc:	e00b      	b.n	80111e6 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 80111ce:	7afb      	ldrb	r3, [r7, #11]
 80111d0:	4618      	mov	r0, r3
 80111d2:	f000 ff98 	bl	8012106 <isDisplayableChar>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d004      	beq.n	80111e6 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 80111dc:	7afb      	ldrb	r3, [r7, #11]
 80111de:	4619      	mov	r1, r3
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f000 fa17 	bl	8011614 <onCharInput>
        }

        printLiveAutocompletion(cli);
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 fe35 	bl	8011e56 <printLiveAutocompletion>

        impl->lastChar = c;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	7afa      	ldrb	r2, [r7, #11]
 80111f0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	3310      	adds	r3, #16
 80111f8:	4618      	mov	r0, r3
 80111fa:	f000 ff9b 	bl	8012134 <fifoBufAvailable>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d1b1      	bne.n	8011168 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801120a:	f003 0301 	and.w	r3, r3, #1
 801120e:	2b00      	cmp	r3, #0
 8011210:	d014      	beq.n	801123c <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2200      	movs	r2, #0
 8011216:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	69db      	ldr	r3, [r3, #28]
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	8c12      	ldrh	r2, [r2, #32]
 8011220:	4413      	add	r3, r2
 8011222:	2200      	movs	r2, #0
 8011224:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801122c:	f023 0301 	bic.w	r3, r3, #1
 8011230:	b2da      	uxtb	r2, r3
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8011238:	e000      	b.n	801123c <embeddedCliProcess+0x11a>
        return;
 801123a:	bf00      	nop
    }
}
 801123c:	3710      	adds	r7, #16
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 8011242:	b084      	sub	sp, #16
 8011244:	b4b0      	push	{r4, r5, r7}
 8011246:	b085      	sub	sp, #20
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011250:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011262:	429a      	cmp	r2, r3
 8011264:	d101      	bne.n	801126a <embeddedCliAddBinding+0x28>
        return false;
 8011266:	2300      	movs	r3, #0
 8011268:	e017      	b.n	801129a <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011272:	4619      	mov	r1, r3
 8011274:	460b      	mov	r3, r1
 8011276:	009b      	lsls	r3, r3, #2
 8011278:	440b      	add	r3, r1
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	4413      	add	r3, r2
 801127e:	461d      	mov	r5, r3
 8011280:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8011284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011288:	6823      	ldr	r3, [r4, #0]
 801128a:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011290:	3301      	adds	r3, #1
 8011292:	b29a      	uxth	r2, r3
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	859a      	strh	r2, [r3, #44]	@ 0x2c
    return true;
 8011298:	2301      	movs	r3, #1
}
 801129a:	4618      	mov	r0, r3
 801129c:	3714      	adds	r7, #20
 801129e:	46bd      	mov	sp, r7
 80112a0:	bcb0      	pop	{r4, r5, r7}
 80112a2:	b004      	add	sp, #16
 80112a4:	4770      	bx	lr
	...

080112a8 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d031      	beq.n	801131e <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80112c6:	f003 0310 	and.w	r3, r3, #16
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d102      	bne.n	80112d4 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f000 fea6 	bl	8012020 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 80112d4:	6839      	ldr	r1, [r7, #0]
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f000 fed4 	bl	8012084 <writeToOutput>
    writeToOutput(cli, lineBreak);
 80112dc:	4b12      	ldr	r3, [pc, #72]	@ (8011328 <embeddedCliPrint+0x80>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	4619      	mov	r1, r3
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f000 fece 	bl	8012084 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80112ee:	f003 0310 	and.w	r3, r3, #16
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d114      	bne.n	8011320 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	4619      	mov	r1, r3
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f000 fec1 	bl	8012084 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	69db      	ldr	r3, [r3, #28]
 8011306:	4619      	mov	r1, r3
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f000 febb 	bl	8012084 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	8c1a      	ldrh	r2, [r3, #32]
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	861a      	strh	r2, [r3, #48]	@ 0x30

        printLiveAutocompletion(cli);
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 fd9d 	bl	8011e56 <printLiveAutocompletion>
 801131c:	e000      	b.n	8011320 <embeddedCliPrint+0x78>
        return;
 801131e:	bf00      	nop
    }
}
 8011320:	3710      	adds	r7, #16
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	20000028 	.word	0x20000028

0801132c <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 801132c:	b580      	push	{r7, lr}
 801132e:	b088      	sub	sp, #32
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d066      	beq.n	8011408 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 801133a:	4b35      	ldr	r3, [pc, #212]	@ (8011410 <embeddedCliTokenizeArgs+0xe4>)
 801133c:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 801133e:	2300      	movs	r3, #0
 8011340:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8011342:	2300      	movs	r3, #0
 8011344:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8011346:	2300      	movs	r3, #0
 8011348:	61bb      	str	r3, [r7, #24]

    int i = 0;
 801134a:	2300      	movs	r3, #0
 801134c:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 801134e:	e047      	b.n	80113e0 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	3301      	adds	r3, #1
 8011354:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8011356:	7fbb      	ldrb	r3, [r7, #30]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d002      	beq.n	8011362 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 801135c:	2300      	movs	r3, #0
 801135e:	77bb      	strb	r3, [r7, #30]
 8011360:	e029      	b.n	80113b6 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8011362:	7cfb      	ldrb	r3, [r7, #19]
 8011364:	2b5c      	cmp	r3, #92	@ 0x5c
 8011366:	d102      	bne.n	801136e <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8011368:	2301      	movs	r3, #1
 801136a:	77bb      	strb	r3, [r7, #30]
            continue;
 801136c:	e038      	b.n	80113e0 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 801136e:	7cfb      	ldrb	r3, [r7, #19]
 8011370:	2b22      	cmp	r3, #34	@ 0x22
 8011372:	d110      	bne.n	8011396 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8011374:	7ffb      	ldrb	r3, [r7, #31]
 8011376:	2b00      	cmp	r3, #0
 8011378:	bf14      	ite	ne
 801137a:	2301      	movne	r3, #1
 801137c:	2300      	moveq	r3, #0
 801137e:	b2db      	uxtb	r3, r3
 8011380:	f083 0301 	eor.w	r3, r3, #1
 8011384:	b2db      	uxtb	r3, r3
 8011386:	77fb      	strb	r3, [r7, #31]
 8011388:	7ffb      	ldrb	r3, [r7, #31]
 801138a:	f003 0301 	and.w	r3, r3, #1
 801138e:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8011390:	2300      	movs	r3, #0
 8011392:	74fb      	strb	r3, [r7, #19]
 8011394:	e00f      	b.n	80113b6 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8011396:	7ffb      	ldrb	r3, [r7, #31]
 8011398:	f083 0301 	eor.w	r3, r3, #1
 801139c:	b2db      	uxtb	r3, r3
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d009      	beq.n	80113b6 <embeddedCliTokenizeArgs+0x8a>
 80113a2:	7cfb      	ldrb	r3, [r7, #19]
 80113a4:	4619      	mov	r1, r3
 80113a6:	68f8      	ldr	r0, [r7, #12]
 80113a8:	f00b fec8 	bl	801d13c <strchr>
 80113ac:	4603      	mov	r3, r0
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d001      	beq.n	80113b6 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 80113b2:	2300      	movs	r3, #0
 80113b4:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 80113b6:	7cfb      	ldrb	r3, [r7, #19]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d109      	bne.n	80113d0 <embeddedCliTokenizeArgs+0xa4>
 80113bc:	69bb      	ldr	r3, [r7, #24]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	dd0e      	ble.n	80113e0 <embeddedCliTokenizeArgs+0xb4>
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	3b01      	subs	r3, #1
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	4413      	add	r3, r2
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d007      	beq.n	80113e0 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 80113d0:	69bb      	ldr	r3, [r7, #24]
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	4413      	add	r3, r2
 80113d6:	7cfa      	ldrb	r2, [r7, #19]
 80113d8:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 80113da:	69bb      	ldr	r3, [r7, #24]
 80113dc:	3301      	adds	r3, #1
 80113de:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	687a      	ldr	r2, [r7, #4]
 80113e4:	4413      	add	r3, r2
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	74fb      	strb	r3, [r7, #19]
 80113ea:	7cfb      	ldrb	r3, [r7, #19]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d1af      	bne.n	8011350 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	4413      	add	r3, r2
 80113f6:	2200      	movs	r2, #0
 80113f8:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 80113fa:	69bb      	ldr	r3, [r7, #24]
 80113fc:	3301      	adds	r3, #1
 80113fe:	687a      	ldr	r2, [r7, #4]
 8011400:	4413      	add	r3, r2
 8011402:	2200      	movs	r2, #0
 8011404:	701a      	strb	r2, [r3, #0]
 8011406:	e000      	b.n	801140a <embeddedCliTokenizeArgs+0xde>
        return;
 8011408:	bf00      	nop
}
 801140a:	3720      	adds	r7, #32
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	08021de8 	.word	0x08021de8

08011414 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	460b      	mov	r3, r1
 801141e:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8011420:	887b      	ldrh	r3, [r7, #2]
 8011422:	4619      	mov	r1, r3
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f000 ffd5 	bl	80123d4 <getTokenPosition>
 801142a:	4603      	mov	r3, r0
 801142c:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 801142e:	89fb      	ldrh	r3, [r7, #14]
 8011430:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011434:	4293      	cmp	r3, r2
 8011436:	d003      	beq.n	8011440 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8011438:	89fb      	ldrh	r3, [r7, #14]
 801143a:	687a      	ldr	r2, [r7, #4]
 801143c:	4413      	add	r3, r2
 801143e:	e000      	b.n	8011442 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8011440:	2300      	movs	r3, #0
}
 8011442:	4618      	mov	r0, r3
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 801144a:	b580      	push	{r7, lr}
 801144c:	b084      	sub	sp, #16
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
 8011452:	460b      	mov	r3, r1
 8011454:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8011456:	887b      	ldrh	r3, [r7, #2]
 8011458:	4619      	mov	r1, r3
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 ffba 	bl	80123d4 <getTokenPosition>
 8011460:	4603      	mov	r3, r0
 8011462:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8011464:	89fb      	ldrh	r3, [r7, #14]
 8011466:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801146a:	4293      	cmp	r3, r2
 801146c:	d003      	beq.n	8011476 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 801146e:	89fb      	ldrh	r3, [r7, #14]
 8011470:	687a      	ldr	r2, [r7, #4]
 8011472:	4413      	add	r3, r2
 8011474:	e000      	b.n	8011478 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8011476:	2300      	movs	r3, #0
}
 8011478:	4618      	mov	r0, r3
 801147a:	3710      	adds	r7, #16
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8011480:	b480      	push	{r7}
 8011482:	b085      	sub	sp, #20
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d003      	beq.n	8011496 <embeddedCliGetTokenCount+0x16>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d101      	bne.n	801149a <embeddedCliGetTokenCount+0x1a>
        return 0;
 8011496:	2300      	movs	r3, #0
 8011498:	e019      	b.n	80114ce <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 801149e:	2301      	movs	r3, #1
 80114a0:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	4413      	add	r3, r2
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d109      	bne.n	80114c2 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	3301      	adds	r3, #1
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	4413      	add	r3, r2
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d006      	beq.n	80114ca <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 80114bc:	897b      	ldrh	r3, [r7, #10]
 80114be:	3301      	adds	r3, #1
 80114c0:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	3301      	adds	r3, #1
 80114c6:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 80114c8:	e7eb      	b.n	80114a2 <embeddedCliGetTokenCount+0x22>
                break;
 80114ca:	bf00      	nop
    }

    return tokenCount;
 80114cc:	897b      	ldrh	r3, [r7, #10]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3714      	adds	r7, #20
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr
	...

080114dc <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 80114dc:	b580      	push	{r7, lr}
 80114de:	b086      	sub	sp, #24
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	460b      	mov	r3, r1
 80114e6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	68db      	ldr	r3, [r3, #12]
 80114ec:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	899b      	ldrh	r3, [r3, #12]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d05c      	beq.n	80115b0 <navigateHistory+0xd4>
 80114f6:	78fb      	ldrb	r3, [r7, #3]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d005      	beq.n	8011508 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	895a      	ldrh	r2, [r3, #10]
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	899b      	ldrh	r3, [r3, #12]
 8011504:	429a      	cmp	r2, r3
 8011506:	d053      	beq.n	80115b0 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 8011508:	78fb      	ldrb	r3, [r7, #3]
 801150a:	f083 0301 	eor.w	r3, r3, #1
 801150e:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8011510:	2b00      	cmp	r3, #0
 8011512:	d003      	beq.n	801151c <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	895b      	ldrh	r3, [r3, #10]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d049      	beq.n	80115b0 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f000 fd7f 	bl	8012020 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	4619      	mov	r1, r3
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f000 fdab 	bl	8012084 <writeToOutput>

    if (navigateUp)
 801152e:	78fb      	ldrb	r3, [r7, #3]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d006      	beq.n	8011542 <navigateHistory+0x66>
        ++impl->history.current;
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	895b      	ldrh	r3, [r3, #10]
 8011538:	3301      	adds	r3, #1
 801153a:	b29a      	uxth	r2, r3
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	815a      	strh	r2, [r3, #10]
 8011540:	e005      	b.n	801154e <navigateHistory+0x72>
    else
        --impl->history.current;
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	895b      	ldrh	r3, [r3, #10]
 8011546:	3b01      	subs	r3, #1
 8011548:	b29a      	uxth	r2, r3
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	1d1a      	adds	r2, r3, #4
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	895b      	ldrh	r3, [r3, #10]
 8011556:	4619      	mov	r1, r3
 8011558:	4610      	mov	r0, r2
 801155a:	f000 fec2 	bl	80122e2 <historyGet>
 801155e:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d101      	bne.n	801156a <navigateHistory+0x8e>
        item = "";
 8011566:	4b14      	ldr	r3, [pc, #80]	@ (80115b8 <navigateHistory+0xdc>)
 8011568:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 801156a:	6978      	ldr	r0, [r7, #20]
 801156c:	f7ee fe98 	bl	80002a0 <strlen>
 8011570:	4603      	mov	r3, r0
 8011572:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	69db      	ldr	r3, [r3, #28]
 8011578:	89fa      	ldrh	r2, [r7, #14]
 801157a:	6979      	ldr	r1, [r7, #20]
 801157c:	4618      	mov	r0, r3
 801157e:	f00b feec 	bl	801d35a <memcpy>
    impl->cmdBuffer[len] = '\0';
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	69da      	ldr	r2, [r3, #28]
 8011586:	89fb      	ldrh	r3, [r7, #14]
 8011588:	4413      	add	r3, r2
 801158a:	2200      	movs	r2, #0
 801158c:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	89fa      	ldrh	r2, [r7, #14]
 8011592:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	69db      	ldr	r3, [r3, #28]
 8011598:	4619      	mov	r1, r3
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f000 fd72 	bl	8012084 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	8c1a      	ldrh	r2, [r3, #32]
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	861a      	strh	r2, [r3, #48]	@ 0x30

    printLiveAutocompletion(cli);
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f000 fc54 	bl	8011e56 <printLiveAutocompletion>
 80115ae:	e000      	b.n	80115b2 <navigateHistory+0xd6>
        return;
 80115b0:	bf00      	nop
}
 80115b2:	3718      	adds	r7, #24
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	08021dec 	.word	0x08021dec

080115bc <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	460b      	mov	r3, r1
 80115c6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 80115ce:	78fb      	ldrb	r3, [r7, #3]
 80115d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80115d2:	d91b      	bls.n	801160c <onEscapedInput+0x50>
 80115d4:	78fb      	ldrb	r3, [r7, #3]
 80115d6:	2b7e      	cmp	r3, #126	@ 0x7e
 80115d8:	d818      	bhi.n	801160c <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80115e0:	f023 0308 	bic.w	r3, r3, #8
 80115e4:	b2da      	uxtb	r2, r3
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 80115ec:	78fb      	ldrb	r3, [r7, #3]
 80115ee:	2b41      	cmp	r3, #65	@ 0x41
 80115f0:	d002      	beq.n	80115f8 <onEscapedInput+0x3c>
 80115f2:	78fb      	ldrb	r3, [r7, #3]
 80115f4:	2b42      	cmp	r3, #66	@ 0x42
 80115f6:	d109      	bne.n	801160c <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 80115f8:	78fb      	ldrb	r3, [r7, #3]
 80115fa:	2b41      	cmp	r3, #65	@ 0x41
 80115fc:	bf0c      	ite	eq
 80115fe:	2301      	moveq	r3, #1
 8011600:	2300      	movne	r3, #0
 8011602:	b2db      	uxtb	r3, r3
 8011604:	4619      	mov	r1, r3
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7ff ff68 	bl	80114dc <navigateHistory>
        }
    }
}
 801160c:	bf00      	nop
 801160e:	3710      	adds	r7, #16
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}

08011614 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	460b      	mov	r3, r1
 801161e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	8c1b      	ldrh	r3, [r3, #32]
 801162a:	3302      	adds	r3, #2
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8011630:	4293      	cmp	r3, r2
 8011632:	da1a      	bge.n	801166a <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	69db      	ldr	r3, [r3, #28]
 8011638:	68fa      	ldr	r2, [r7, #12]
 801163a:	8c12      	ldrh	r2, [r2, #32]
 801163c:	4413      	add	r3, r2
 801163e:	78fa      	ldrb	r2, [r7, #3]
 8011640:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	8c1b      	ldrh	r3, [r3, #32]
 8011646:	3301      	adds	r3, #1
 8011648:	b29a      	uxth	r2, r3
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	69db      	ldr	r3, [r3, #28]
 8011652:	68fa      	ldr	r2, [r7, #12]
 8011654:	8c12      	ldrh	r2, [r2, #32]
 8011656:	4413      	add	r3, r2
 8011658:	2200      	movs	r2, #0
 801165a:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	78fa      	ldrb	r2, [r7, #3]
 8011662:	4611      	mov	r1, r2
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	4798      	blx	r3
 8011668:	e000      	b.n	801166c <onCharInput+0x58>
        return;
 801166a:	bf00      	nop
}
 801166c:	3710      	adds	r7, #16
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
	...

08011674 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8011674:	b580      	push	{r7, lr}
 8011676:	b084      	sub	sp, #16
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	460b      	mov	r3, r1
 801167e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801168c:	2b0d      	cmp	r3, #13
 801168e:	d102      	bne.n	8011696 <onControlInput+0x22>
 8011690:	78fb      	ldrb	r3, [r7, #3]
 8011692:	2b0a      	cmp	r3, #10
 8011694:	d062      	beq.n	801175c <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 801169c:	2b0a      	cmp	r3, #10
 801169e:	d102      	bne.n	80116a6 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 80116a0:	78fb      	ldrb	r3, [r7, #3]
 80116a2:	2b0d      	cmp	r3, #13
 80116a4:	d05a      	beq.n	801175c <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 80116a6:	78fb      	ldrb	r3, [r7, #3]
 80116a8:	2b0d      	cmp	r3, #13
 80116aa:	d002      	beq.n	80116b2 <onControlInput+0x3e>
 80116ac:	78fb      	ldrb	r3, [r7, #3]
 80116ae:	2b0a      	cmp	r3, #10
 80116b0:	d126      	bne.n	8011700 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	f000 fc2a 	bl	8011f0c <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 80116b8:	4b2a      	ldr	r3, [pc, #168]	@ (8011764 <onControlInput+0xf0>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4619      	mov	r1, r3
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f000 fce0 	bl	8012084 <writeToOutput>

        if (impl->cmdSize > 0)
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	8c1b      	ldrh	r3, [r3, #32]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d002      	beq.n	80116d2 <onControlInput+0x5e>
            parseCommand(cli);
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 f84b 	bl	8011768 <parseCommand>
        impl->cmdSize = 0;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2200      	movs	r2, #0
 80116d6:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	69db      	ldr	r3, [r3, #28]
 80116dc:	68fa      	ldr	r2, [r7, #12]
 80116de:	8c12      	ldrh	r2, [r2, #32]
 80116e0:	4413      	add	r3, r2
 80116e2:	2200      	movs	r2, #0
 80116e4:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2200      	movs	r2, #0
 80116ea:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2200      	movs	r2, #0
 80116f0:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	4619      	mov	r1, r3
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f000 fcc3 	bl	8012084 <writeToOutput>
 80116fe:	e02e      	b.n	801175e <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8011700:	78fb      	ldrb	r3, [r7, #3]
 8011702:	2b08      	cmp	r3, #8
 8011704:	d002      	beq.n	801170c <onControlInput+0x98>
 8011706:	78fb      	ldrb	r3, [r7, #3]
 8011708:	2b7f      	cmp	r3, #127	@ 0x7f
 801170a:	d120      	bne.n	801174e <onControlInput+0xda>
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	8c1b      	ldrh	r3, [r3, #32]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d01c      	beq.n	801174e <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2108      	movs	r1, #8
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2120      	movs	r1, #32
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	2108      	movs	r1, #8
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	8c1b      	ldrh	r3, [r3, #32]
 8011736:	3b01      	subs	r3, #1
 8011738:	b29a      	uxth	r2, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	69db      	ldr	r3, [r3, #28]
 8011742:	68fa      	ldr	r2, [r7, #12]
 8011744:	8c12      	ldrh	r2, [r2, #32]
 8011746:	4413      	add	r3, r2
 8011748:	2200      	movs	r2, #0
 801174a:	701a      	strb	r2, [r3, #0]
 801174c:	e007      	b.n	801175e <onControlInput+0xea>
    } else if (c == '\t') {
 801174e:	78fb      	ldrb	r3, [r7, #3]
 8011750:	2b09      	cmp	r3, #9
 8011752:	d104      	bne.n	801175e <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 fbd9 	bl	8011f0c <onAutocompleteRequest>
 801175a:	e000      	b.n	801175e <onControlInput+0xea>
        return;
 801175c:	bf00      	nop
    }

}
 801175e:	3710      	adds	r7, #16
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}
 8011764:	20000028 	.word	0x20000028

08011768 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8011768:	b590      	push	{r4, r7, lr}
 801176a:	b08f      	sub	sp, #60	@ 0x3c
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8011776:	2301      	movs	r3, #1
 8011778:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 801177c:	2300      	movs	r3, #0
 801177e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011780:	e00d      	b.n	801179e <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	69da      	ldr	r2, [r3, #28]
 8011786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011788:	4413      	add	r3, r2
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	2b20      	cmp	r3, #32
 801178e:	d003      	beq.n	8011798 <parseCommand+0x30>
            isEmpty = false;
 8011790:	2300      	movs	r3, #0
 8011792:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8011796:	e008      	b.n	80117aa <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8011798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801179a:	3301      	adds	r3, #1
 801179c:	633b      	str	r3, [r7, #48]	@ 0x30
 801179e:	69bb      	ldr	r3, [r7, #24]
 80117a0:	8c1b      	ldrh	r3, [r3, #32]
 80117a2:	461a      	mov	r2, r3
 80117a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117a6:	4293      	cmp	r3, r2
 80117a8:	dbeb      	blt.n	8011782 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 80117aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	f040 80dc 	bne.w	801196c <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 80117b4:	69bb      	ldr	r3, [r7, #24]
 80117b6:	1d1a      	adds	r2, r3, #4
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	69db      	ldr	r3, [r3, #28]
 80117bc:	4619      	mov	r1, r3
 80117be:	4610      	mov	r0, r2
 80117c0:	f000 fd2b 	bl	801221a <historyPut>

    char *cmdName = NULL;
 80117c4:	2300      	movs	r3, #0
 80117c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 80117c8:	2300      	movs	r3, #0
 80117ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 80117cc:	2300      	movs	r3, #0
 80117ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 80117d2:	2300      	movs	r3, #0
 80117d4:	623b      	str	r3, [r7, #32]
 80117d6:	e030      	b.n	801183a <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 80117d8:	69bb      	ldr	r3, [r7, #24]
 80117da:	69da      	ldr	r2, [r3, #28]
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	4413      	add	r3, r2
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 80117e4:	7dfb      	ldrb	r3, [r7, #23]
 80117e6:	2b20      	cmp	r3, #32
 80117e8:	d10f      	bne.n	801180a <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 80117ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d105      	bne.n	80117fc <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 80117f0:	69bb      	ldr	r3, [r7, #24]
 80117f2:	69da      	ldr	r2, [r3, #28]
 80117f4:	6a3b      	ldr	r3, [r7, #32]
 80117f6:	4413      	add	r3, r2
 80117f8:	2200      	movs	r2, #0
 80117fa:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 80117fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d018      	beq.n	8011834 <parseCommand+0xcc>
                nameFinished = true;
 8011802:	2301      	movs	r3, #1
 8011804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011808:	e014      	b.n	8011834 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 801180a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801180c:	2b00      	cmp	r3, #0
 801180e:	d105      	bne.n	801181c <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8011810:	69bb      	ldr	r3, [r7, #24]
 8011812:	69da      	ldr	r2, [r3, #28]
 8011814:	6a3b      	ldr	r3, [r7, #32]
 8011816:	4413      	add	r3, r2
 8011818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801181a:	e00b      	b.n	8011834 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 801181c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801181e:	2b00      	cmp	r3, #0
 8011820:	d108      	bne.n	8011834 <parseCommand+0xcc>
 8011822:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011826:	2b00      	cmp	r3, #0
 8011828:	d004      	beq.n	8011834 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	69da      	ldr	r2, [r3, #28]
 801182e:	6a3b      	ldr	r3, [r7, #32]
 8011830:	4413      	add	r3, r2
 8011832:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8011834:	6a3b      	ldr	r3, [r7, #32]
 8011836:	3301      	adds	r3, #1
 8011838:	623b      	str	r3, [r7, #32]
 801183a:	69bb      	ldr	r3, [r7, #24]
 801183c:	8c1b      	ldrh	r3, [r3, #32]
 801183e:	461a      	mov	r2, r3
 8011840:	6a3b      	ldr	r3, [r7, #32]
 8011842:	4293      	cmp	r3, r2
 8011844:	dbc8      	blt.n	80117d8 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	69da      	ldr	r2, [r3, #28]
 801184a:	69bb      	ldr	r3, [r7, #24]
 801184c:	8c1b      	ldrh	r3, [r3, #32]
 801184e:	3301      	adds	r3, #1
 8011850:	4413      	add	r3, r2
 8011852:	2200      	movs	r2, #0
 8011854:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8011856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011858:	2b00      	cmp	r3, #0
 801185a:	f000 8089 	beq.w	8011970 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801185e:	2300      	movs	r3, #0
 8011860:	61fb      	str	r3, [r7, #28]
 8011862:	e054      	b.n	801190e <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8011864:	69bb      	ldr	r3, [r7, #24]
 8011866:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011868:	69fa      	ldr	r2, [r7, #28]
 801186a:	4613      	mov	r3, r2
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	4413      	add	r3, r2
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	440b      	add	r3, r1
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	4619      	mov	r1, r3
 8011878:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801187a:	f7ee fcb1 	bl	80001e0 <strcmp>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d141      	bne.n	8011908 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8011884:	69bb      	ldr	r3, [r7, #24]
 8011886:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011888:	69fa      	ldr	r2, [r7, #28]
 801188a:	4613      	mov	r3, r2
 801188c:	009b      	lsls	r3, r3, #2
 801188e:	4413      	add	r3, r2
 8011890:	009b      	lsls	r3, r3, #2
 8011892:	440b      	add	r3, r1
 8011894:	691b      	ldr	r3, [r3, #16]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d040      	beq.n	801191c <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801189e:	69fa      	ldr	r2, [r7, #28]
 80118a0:	4613      	mov	r3, r2
 80118a2:	009b      	lsls	r3, r3, #2
 80118a4:	4413      	add	r3, r2
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	440b      	add	r3, r1
 80118aa:	7a1b      	ldrb	r3, [r3, #8]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d002      	beq.n	80118b6 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 80118b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80118b2:	f7ff fd3b 	bl	801132c <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80118bc:	f043 0310 	orr.w	r3, r3, #16
 80118c0:	b2da      	uxtb	r2, r3
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80118cc:	69fa      	ldr	r2, [r7, #28]
 80118ce:	4613      	mov	r3, r2
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	4413      	add	r3, r2
 80118d4:	009b      	lsls	r3, r3, #2
 80118d6:	440b      	add	r3, r1
 80118d8:	691c      	ldr	r4, [r3, #16]
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80118de:	69fa      	ldr	r2, [r7, #28]
 80118e0:	4613      	mov	r3, r2
 80118e2:	009b      	lsls	r3, r3, #2
 80118e4:	4413      	add	r3, r2
 80118e6:	009b      	lsls	r3, r3, #2
 80118e8:	440b      	add	r3, r1
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	461a      	mov	r2, r3
 80118ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80118fa:	f023 0310 	bic.w	r3, r3, #16
 80118fe:	b2da      	uxtb	r2, r3
 8011900:	69bb      	ldr	r3, [r7, #24]
 8011902:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8011906:	e034      	b.n	8011972 <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	3301      	adds	r3, #1
 801190c:	61fb      	str	r3, [r7, #28]
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011912:	461a      	mov	r2, r3
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	4293      	cmp	r3, r2
 8011918:	dba4      	blt.n	8011864 <parseCommand+0xfc>
 801191a:	e000      	b.n	801191e <parseCommand+0x1b6>
                break;
 801191c:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d01d      	beq.n	8011962 <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8011926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011928:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 801192a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801192c:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 801192e:	69bb      	ldr	r3, [r7, #24]
 8011930:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011934:	f043 0310 	orr.w	r3, r3, #16
 8011938:	b2da      	uxtb	r2, r3
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	685b      	ldr	r3, [r3, #4]
 8011944:	f107 020c 	add.w	r2, r7, #12
 8011948:	4611      	mov	r1, r2
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 801194e:	69bb      	ldr	r3, [r7, #24]
 8011950:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011954:	f023 0310 	bic.w	r3, r3, #16
 8011958:	b2da      	uxtb	r2, r3
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8011960:	e007      	b.n	8011972 <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8011962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f000 f997 	bl	8011c98 <onUnknownCommand>
 801196a:	e002      	b.n	8011972 <parseCommand+0x20a>
        return;
 801196c:	bf00      	nop
 801196e:	e000      	b.n	8011972 <parseCommand+0x20a>
        return;
 8011970:	bf00      	nop
    }
}
 8011972:	373c      	adds	r7, #60	@ 0x3c
 8011974:	46bd      	mov	sp, r7
 8011976:	bd90      	pop	{r4, r7, pc}

08011978 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8011978:	b5b0      	push	{r4, r5, r7, lr}
 801197a:	b08a      	sub	sp, #40	@ 0x28
 801197c:	af02      	add	r7, sp, #8
 801197e:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8011980:	4b0c      	ldr	r3, [pc, #48]	@ (80119b4 <initInternalBindings+0x3c>)
 8011982:	f107 040c 	add.w	r4, r7, #12
 8011986:	461d      	mov	r5, r3
 8011988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801198a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801198c:	682b      	ldr	r3, [r5, #0]
 801198e:	6023      	str	r3, [r4, #0]
//            "Print list of commands",
//            true,
//            NULL,
//            onHelp
//    };
    embeddedCliAddBinding(cli, b);
 8011990:	466a      	mov	r2, sp
 8011992:	f107 0318 	add.w	r3, r7, #24
 8011996:	e893 0003 	ldmia.w	r3, {r0, r1}
 801199a:	e882 0003 	stmia.w	r2, {r0, r1}
 801199e:	f107 030c 	add.w	r3, r7, #12
 80119a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f7ff fc4c 	bl	8011242 <embeddedCliAddBinding>
//    embeddedCliAddBinding(cli, _b);
}
 80119aa:	bf00      	nop
 80119ac:	3720      	adds	r7, #32
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bdb0      	pop	{r4, r5, r7, pc}
 80119b2:	bf00      	nop
 80119b4:	08021e10 	.word	0x08021e10

080119b8 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b08c      	sub	sp, #48	@ 0x30
 80119bc:	af00      	add	r7, sp, #0
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	60b9      	str	r1, [r7, #8]
 80119c2:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d10a      	bne.n	80119e8 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 80119d2:	49a5      	ldr	r1, [pc, #660]	@ (8011c68 <onHelp+0x2b0>)
 80119d4:	68f8      	ldr	r0, [r7, #12]
 80119d6:	f000 fb55 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80119da:	4ba4      	ldr	r3, [pc, #656]	@ (8011c6c <onHelp+0x2b4>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	4619      	mov	r1, r3
 80119e0:	68f8      	ldr	r0, [r7, #12]
 80119e2:	f000 fb4f 	bl	8012084 <writeToOutput>
        return;
 80119e6:	e13b      	b.n	8011c60 <onHelp+0x2a8>
    }

    if(_RunTime_Packet.showPrompt )
 80119e8:	4ba1      	ldr	r3, [pc, #644]	@ (8011c70 <onHelp+0x2b8>)
 80119ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d03d      	beq.n	8011a6e <onHelp+0xb6>
    {
    	_RunTime_Packet.showPrompt  = 0;
 80119f2:	4b9f      	ldr	r3, [pc, #636]	@ (8011c70 <onHelp+0x2b8>)
 80119f4:	2200      	movs	r2, #0
 80119f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        writeToOutput(cli, lineBreak);
 80119fa:	4b9c      	ldr	r3, [pc, #624]	@ (8011c6c <onHelp+0x2b4>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	4619      	mov	r1, r3
 8011a00:	68f8      	ldr	r0, [r7, #12]
 8011a02:	f000 fb3f 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011a06:	4b99      	ldr	r3, [pc, #612]	@ (8011c6c <onHelp+0x2b4>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	68f8      	ldr	r0, [r7, #12]
 8011a0e:	f000 fb39 	bl	8012084 <writeToOutput>
		writeToOutput(cli, "This product is powered by BuildUp! "); //TM 0x99
 8011a12:	4998      	ldr	r1, [pc, #608]	@ (8011c74 <onHelp+0x2bc>)
 8011a14:	68f8      	ldr	r0, [r7, #12]
 8011a16:	f000 fb35 	bl	8012084 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8011a1a:	4b94      	ldr	r3, [pc, #592]	@ (8011c6c <onHelp+0x2b4>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4619      	mov	r1, r3
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f000 fb2f 	bl	8012084 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8011a26:	4994      	ldr	r1, [pc, #592]	@ (8011c78 <onHelp+0x2c0>)
 8011a28:	68f8      	ldr	r0, [r7, #12]
 8011a2a:	f000 fb2b 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8011c6c <onHelp+0x2b4>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	4619      	mov	r1, r3
 8011a34:	68f8      	ldr	r0, [r7, #12]
 8011a36:	f000 fb25 	bl	8012084 <writeToOutput>
        writeToOutput(cli, "Montreal, Canada");
 8011a3a:	4990      	ldr	r1, [pc, #576]	@ (8011c7c <onHelp+0x2c4>)
 8011a3c:	68f8      	ldr	r0, [r7, #12]
 8011a3e:	f000 fb21 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011a42:	4b8a      	ldr	r3, [pc, #552]	@ (8011c6c <onHelp+0x2b4>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4619      	mov	r1, r3
 8011a48:	68f8      	ldr	r0, [r7, #12]
 8011a4a:	f000 fb1b 	bl	8012084 <writeToOutput>
        writeToOutput(cli, "https://thingsfactory.com");
 8011a4e:	498c      	ldr	r1, [pc, #560]	@ (8011c80 <onHelp+0x2c8>)
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	f000 fb17 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011a56:	4b85      	ldr	r3, [pc, #532]	@ (8011c6c <onHelp+0x2b4>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	68f8      	ldr	r0, [r7, #12]
 8011a5e:	f000 fb11 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011a62:	4b82      	ldr	r3, [pc, #520]	@ (8011c6c <onHelp+0x2b4>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	4619      	mov	r1, r3
 8011a68:	68f8      	ldr	r0, [r7, #12]
 8011a6a:	f000 fb0b 	bl	8012084 <writeToOutput>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8011a6e:	68b8      	ldr	r0, [r7, #8]
 8011a70:	f7ff fd06 	bl	8011480 <embeddedCliGetTokenCount>
 8011a74:	4603      	mov	r3, r0
 8011a76:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8011a78:	8b7b      	ldrh	r3, [r7, #26]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d176      	bne.n	8011b6c <onHelp+0x1b4>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011a7e:	2300      	movs	r3, #0
 8011a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011a82:	e03c      	b.n	8011afe <onHelp+0x146>
            writeToOutput(cli, " * ");
 8011a84:	497f      	ldr	r1, [pc, #508]	@ (8011c84 <onHelp+0x2cc>)
 8011a86:	68f8      	ldr	r0, [r7, #12]
 8011a88:	f000 fafc 	bl	8012084 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a92:	4613      	mov	r3, r2
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	4413      	add	r3, r2
 8011a98:	009b      	lsls	r3, r3, #2
 8011a9a:	440b      	add	r3, r1
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	68f8      	ldr	r0, [r7, #12]
 8011aa2:	f000 faef 	bl	8012084 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011aa6:	4b71      	ldr	r3, [pc, #452]	@ (8011c6c <onHelp+0x2b4>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	4619      	mov	r1, r3
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	f000 fae9 	bl	8012084 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ab8:	4613      	mov	r3, r2
 8011aba:	009b      	lsls	r3, r3, #2
 8011abc:	4413      	add	r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	440b      	add	r3, r1
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d017      	beq.n	8011af8 <onHelp+0x140>
                cli->writeChar(cli, '\t');
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2109      	movs	r1, #9
 8011ace:	68f8      	ldr	r0, [r7, #12]
 8011ad0:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ad8:	4613      	mov	r3, r2
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	4413      	add	r3, r2
 8011ade:	009b      	lsls	r3, r3, #2
 8011ae0:	440b      	add	r3, r1
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f000 facc 	bl	8012084 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8011aec:	4b5f      	ldr	r3, [pc, #380]	@ (8011c6c <onHelp+0x2b4>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	4619      	mov	r1, r3
 8011af2:	68f8      	ldr	r0, [r7, #12]
 8011af4:	f000 fac6 	bl	8012084 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011afa:	3301      	adds	r3, #1
 8011afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011afe:	69fb      	ldr	r3, [r7, #28]
 8011b00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011b02:	461a      	mov	r2, r3
 8011b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b06:	4293      	cmp	r3, r2
 8011b08:	dbbc      	blt.n	8011a84 <onHelp+0xcc>
            }
        }

        writeToOutput(cli, lineBreak);
 8011b0a:	4b58      	ldr	r3, [pc, #352]	@ (8011c6c <onHelp+0x2b4>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	4619      	mov	r1, r3
 8011b10:	68f8      	ldr	r0, [r7, #12]
 8011b12:	f000 fab7 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011b16:	4b55      	ldr	r3, [pc, #340]	@ (8011c6c <onHelp+0x2b4>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	68f8      	ldr	r0, [r7, #12]
 8011b1e:	f000 fab1 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011b22:	4b52      	ldr	r3, [pc, #328]	@ (8011c6c <onHelp+0x2b4>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	4619      	mov	r1, r3
 8011b28:	68f8      	ldr	r0, [r7, #12]
 8011b2a:	f000 faab 	bl	8012084 <writeToOutput>
		writeToOutput(cli, "BuildUp! Edge C02 Data Logger "); //TM 0x99
 8011b2e:	4956      	ldr	r1, [pc, #344]	@ (8011c88 <onHelp+0x2d0>)
 8011b30:	68f8      	ldr	r0, [r7, #12]
 8011b32:	f000 faa7 	bl	8012084 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8011b36:	4b4d      	ldr	r3, [pc, #308]	@ (8011c6c <onHelp+0x2b4>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f000 faa1 	bl	8012084 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Co. Montreal Canada "); //copyright 0xA9
 8011b42:	4952      	ldr	r1, [pc, #328]	@ (8011c8c <onHelp+0x2d4>)
 8011b44:	68f8      	ldr	r0, [r7, #12]
 8011b46:	f000 fa9d 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011b4a:	4b48      	ldr	r3, [pc, #288]	@ (8011c6c <onHelp+0x2b4>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	4619      	mov	r1, r3
 8011b50:	68f8      	ldr	r0, [r7, #12]
 8011b52:	f000 fa97 	bl	8012084 <writeToOutput>
        writeToOutput(cli, "thingsfactory.com");
 8011b56:	494e      	ldr	r1, [pc, #312]	@ (8011c90 <onHelp+0x2d8>)
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	f000 fa93 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011b5e:	4b43      	ldr	r3, [pc, #268]	@ (8011c6c <onHelp+0x2b4>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	4619      	mov	r1, r3
 8011b64:	68f8      	ldr	r0, [r7, #12]
 8011b66:	f000 fa8d 	bl	8012084 <writeToOutput>
 8011b6a:	e079      	b.n	8011c60 <onHelp+0x2a8>



    } else if (tokenCount == 1) {
 8011b6c:	8b7b      	ldrh	r3, [r7, #26]
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	d16c      	bne.n	8011c4c <onHelp+0x294>
        // try find command
        const char *helpStr = NULL;
 8011b72:	2300      	movs	r3, #0
 8011b74:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8011b76:	2101      	movs	r1, #1
 8011b78:	68b8      	ldr	r0, [r7, #8]
 8011b7a:	f7ff fc4b 	bl	8011414 <embeddedCliGetToken>
 8011b7e:	6178      	str	r0, [r7, #20]
        bool found = false;
 8011b80:	2300      	movs	r3, #0
 8011b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011b86:	2300      	movs	r3, #0
 8011b88:	623b      	str	r3, [r7, #32]
 8011b8a:	e020      	b.n	8011bce <onHelp+0x216>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8011b8c:	69fb      	ldr	r3, [r7, #28]
 8011b8e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011b90:	6a3a      	ldr	r2, [r7, #32]
 8011b92:	4613      	mov	r3, r2
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	4413      	add	r3, r2
 8011b98:	009b      	lsls	r3, r3, #2
 8011b9a:	440b      	add	r3, r1
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	6979      	ldr	r1, [r7, #20]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7ee fb1d 	bl	80001e0 <strcmp>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d10d      	bne.n	8011bc8 <onHelp+0x210>
                helpStr = impl->bindings[i].help;
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011bb0:	6a3a      	ldr	r2, [r7, #32]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4413      	add	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	440b      	add	r3, r1
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
                found = true;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8011bc6:	e008      	b.n	8011bda <onHelp+0x222>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011bc8:	6a3b      	ldr	r3, [r7, #32]
 8011bca:	3301      	adds	r3, #1
 8011bcc:	623b      	str	r3, [r7, #32]
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011bd2:	461a      	mov	r2, r3
 8011bd4:	6a3b      	ldr	r3, [r7, #32]
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	dbd8      	blt.n	8011b8c <onHelp+0x1d4>
            }
        }
        if (found && helpStr != NULL) {
 8011bda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d020      	beq.n	8011c24 <onHelp+0x26c>
 8011be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d01d      	beq.n	8011c24 <onHelp+0x26c>
            writeToOutput(cli, " * ");
 8011be8:	4926      	ldr	r1, [pc, #152]	@ (8011c84 <onHelp+0x2cc>)
 8011bea:	68f8      	ldr	r0, [r7, #12]
 8011bec:	f000 fa4a 	bl	8012084 <writeToOutput>
            writeToOutput(cli, cmdName);
 8011bf0:	6979      	ldr	r1, [r7, #20]
 8011bf2:	68f8      	ldr	r0, [r7, #12]
 8011bf4:	f000 fa46 	bl	8012084 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8011c6c <onHelp+0x2b4>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	68f8      	ldr	r0, [r7, #12]
 8011c00:	f000 fa40 	bl	8012084 <writeToOutput>
            cli->writeChar(cli, '\t');
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	2109      	movs	r1, #9
 8011c0a:	68f8      	ldr	r0, [r7, #12]
 8011c0c:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8011c0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c10:	68f8      	ldr	r0, [r7, #12]
 8011c12:	f000 fa37 	bl	8012084 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011c16:	4b15      	ldr	r3, [pc, #84]	@ (8011c6c <onHelp+0x2b4>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	68f8      	ldr	r0, [r7, #12]
 8011c1e:	f000 fa31 	bl	8012084 <writeToOutput>
 8011c22:	e01d      	b.n	8011c60 <onHelp+0x2a8>
        } else if (found) {
 8011c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d00a      	beq.n	8011c42 <onHelp+0x28a>
            writeToOutput(cli, "Help is not available");
 8011c2c:	490e      	ldr	r1, [pc, #56]	@ (8011c68 <onHelp+0x2b0>)
 8011c2e:	68f8      	ldr	r0, [r7, #12]
 8011c30:	f000 fa28 	bl	8012084 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011c34:	4b0d      	ldr	r3, [pc, #52]	@ (8011c6c <onHelp+0x2b4>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	4619      	mov	r1, r3
 8011c3a:	68f8      	ldr	r0, [r7, #12]
 8011c3c:	f000 fa22 	bl	8012084 <writeToOutput>
 8011c40:	e00e      	b.n	8011c60 <onHelp+0x2a8>
        } else {
            onUnknownCommand(cli, cmdName);
 8011c42:	6979      	ldr	r1, [r7, #20]
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f000 f827 	bl	8011c98 <onUnknownCommand>
 8011c4a:	e009      	b.n	8011c60 <onHelp+0x2a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8011c4c:	4911      	ldr	r1, [pc, #68]	@ (8011c94 <onHelp+0x2dc>)
 8011c4e:	68f8      	ldr	r0, [r7, #12]
 8011c50:	f000 fa18 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011c54:	4b05      	ldr	r3, [pc, #20]	@ (8011c6c <onHelp+0x2b4>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	4619      	mov	r1, r3
 8011c5a:	68f8      	ldr	r0, [r7, #12]
 8011c5c:	f000 fa12 	bl	8012084 <writeToOutput>
    }
}
 8011c60:	3730      	adds	r7, #48	@ 0x30
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	08021e24 	.word	0x08021e24
 8011c6c:	20000028 	.word	0x20000028
 8011c70:	2000148c 	.word	0x2000148c
 8011c74:	08021e3c 	.word	0x08021e3c
 8011c78:	08021e64 	.word	0x08021e64
 8011c7c:	08021e8c 	.word	0x08021e8c
 8011c80:	08021ea0 	.word	0x08021ea0
 8011c84:	08021ebc 	.word	0x08021ebc
 8011c88:	08021ec0 	.word	0x08021ec0
 8011c8c:	08021ee0 	.word	0x08021ee0
 8011c90:	08021f04 	.word	0x08021f04
 8011c94:	08021f18 	.word	0x08021f18

08011c98 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8011ca2:	490b      	ldr	r1, [pc, #44]	@ (8011cd0 <onUnknownCommand+0x38>)
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f000 f9ed 	bl	8012084 <writeToOutput>
    writeToOutput(cli, name);
 8011caa:	6839      	ldr	r1, [r7, #0]
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f000 f9e9 	bl	8012084 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8011cb2:	4908      	ldr	r1, [pc, #32]	@ (8011cd4 <onUnknownCommand+0x3c>)
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f000 f9e5 	bl	8012084 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8011cba:	4b07      	ldr	r3, [pc, #28]	@ (8011cd8 <onUnknownCommand+0x40>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 f9df 	bl	8012084 <writeToOutput>
}
 8011cc6:	bf00      	nop
 8011cc8:	3708      	adds	r7, #8
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	08021f48 	.word	0x08021f48
 8011cd4:	08021f5c 	.word	0x08021f5c
 8011cd8:	20000028 	.word	0x20000028

08011cdc <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b08e      	sub	sp, #56	@ 0x38
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8011ce8:	2300      	movs	r3, #0
 8011cea:	613b      	str	r3, [r7, #16]
 8011cec:	2300      	movs	r3, #0
 8011cee:	82bb      	strh	r3, [r7, #20]
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ee fad3 	bl	80002a0 <strlen>
 8011cfa:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	68db      	ldr	r3, [r3, #12]
 8011d00:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8011d02:	6a3b      	ldr	r3, [r7, #32]
 8011d04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d002      	beq.n	8011d10 <getAutocompletedCommand+0x34>
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d108      	bne.n	8011d22 <getAutocompletedCommand+0x46>
        return cmd;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	461a      	mov	r2, r3
 8011d14:	f107 0310 	add.w	r3, r7, #16
 8011d18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d1c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d20:	e095      	b.n	8011e4e <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011d22:	2300      	movs	r3, #0
 8011d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d26:	e083      	b.n	8011e30 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8011d28:	6a3b      	ldr	r3, [r7, #32]
 8011d2a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011d2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d2e:	4613      	mov	r3, r2
 8011d30:	009b      	lsls	r3, r3, #2
 8011d32:	4413      	add	r3, r2
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	440b      	add	r3, r1
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8011d3c:	69f8      	ldr	r0, [r7, #28]
 8011d3e:	f7ee faaf 	bl	80002a0 <strlen>
 8011d42:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8011d44:	6a3b      	ldr	r3, [r7, #32]
 8011d46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d4a:	4413      	add	r3, r2
 8011d4c:	781a      	ldrb	r2, [r3, #0]
 8011d4e:	6a3b      	ldr	r3, [r7, #32]
 8011d50:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8011d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d54:	440b      	add	r3, r1
 8011d56:	f022 0201 	bic.w	r2, r2, #1
 8011d5a:	b2d2      	uxtb	r2, r2
 8011d5c:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8011d5e:	69ba      	ldr	r2, [r7, #24]
 8011d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d35e      	bcc.n	8011e24 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8011d66:	2301      	movs	r3, #1
 8011d68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011d70:	e010      	b.n	8011d94 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d76:	4413      	add	r3, r2
 8011d78:	781a      	ldrb	r2, [r3, #0]
 8011d7a:	69f9      	ldr	r1, [r7, #28]
 8011d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d7e:	440b      	add	r3, r1
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d003      	beq.n	8011d8e <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8011d86:	2300      	movs	r3, #0
 8011d88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8011d8c:	e006      	b.n	8011d9c <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8011d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d90:	3301      	adds	r3, #1
 8011d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011d94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d3ea      	bcc.n	8011d72 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8011d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011da0:	f083 0301 	eor.w	r3, r3, #1
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d13e      	bne.n	8011e28 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8011daa:	6a3b      	ldr	r3, [r7, #32]
 8011dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011db0:	4413      	add	r3, r2
 8011db2:	781a      	ldrb	r2, [r3, #0]
 8011db4:	6a3b      	ldr	r3, [r7, #32]
 8011db6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8011db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011dba:	440b      	add	r3, r1
 8011dbc:	f042 0201 	orr.w	r2, r2, #1
 8011dc0:	b2d2      	uxtb	r2, r2
 8011dc2:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8011dc4:	8afb      	ldrh	r3, [r7, #22]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d004      	beq.n	8011dd4 <getAutocompletedCommand+0xf8>
 8011dca:	8abb      	ldrh	r3, [r7, #20]
 8011dcc:	461a      	mov	r2, r3
 8011dce:	69bb      	ldr	r3, [r7, #24]
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	d202      	bcs.n	8011dda <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8011dd4:	69bb      	ldr	r3, [r7, #24]
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8011dda:	8afb      	ldrh	r3, [r7, #22]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8011de2:	8afb      	ldrh	r3, [r7, #22]
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d102      	bne.n	8011dee <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8011de8:	69fb      	ldr	r3, [r7, #28]
 8011dea:	613b      	str	r3, [r7, #16]
            continue;
 8011dec:	e01d      	b.n	8011e2a <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011dee:	6a3b      	ldr	r3, [r7, #32]
 8011df0:	8c1b      	ldrh	r3, [r3, #32]
 8011df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011df4:	e010      	b.n	8011e18 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8011df6:	693a      	ldr	r2, [r7, #16]
 8011df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dfa:	4413      	add	r3, r2
 8011dfc:	781a      	ldrb	r2, [r3, #0]
 8011dfe:	69f9      	ldr	r1, [r7, #28]
 8011e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e02:	440b      	add	r3, r1
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d003      	beq.n	8011e12 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8011e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e0c:	b29b      	uxth	r3, r3
 8011e0e:	82bb      	strh	r3, [r7, #20]
                break;
 8011e10:	e00b      	b.n	8011e2a <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e14:	3301      	adds	r3, #1
 8011e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e18:	8abb      	ldrh	r3, [r7, #20]
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d3e9      	bcc.n	8011df6 <getAutocompletedCommand+0x11a>
 8011e22:	e002      	b.n	8011e2a <getAutocompletedCommand+0x14e>
            continue;
 8011e24:	bf00      	nop
 8011e26:	e000      	b.n	8011e2a <getAutocompletedCommand+0x14e>
            continue;
 8011e28:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e30:	6a3b      	ldr	r3, [r7, #32]
 8011e32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011e34:	461a      	mov	r2, r3
 8011e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e38:	4293      	cmp	r3, r2
 8011e3a:	f6ff af75 	blt.w	8011d28 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	461a      	mov	r2, r3
 8011e42:	f107 0310 	add.w	r3, r7, #16
 8011e46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e4a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	3738      	adds	r7, #56	@ 0x38
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}

08011e56 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8011e56:	b580      	push	{r7, lr}
 8011e58:	b088      	sub	sp, #32
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	68db      	ldr	r3, [r3, #12]
 8011e62:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011e6a:	f003 0320 	and.w	r3, r3, #32
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d048      	beq.n	8011f04 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	69da      	ldr	r2, [r3, #28]
 8011e76:	f107 030c 	add.w	r3, r7, #12
 8011e7a:	6879      	ldr	r1, [r7, #4]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7ff ff2d 	bl	8011cdc <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8011e82:	8a7b      	ldrh	r3, [r7, #18]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d102      	bne.n	8011e8e <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	8c1b      	ldrh	r3, [r3, #32]
 8011e8c:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	8c1b      	ldrh	r3, [r3, #32]
 8011e92:	61fb      	str	r3, [r7, #28]
 8011e94:	e00b      	b.n	8011eae <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	68f9      	ldr	r1, [r7, #12]
 8011e9c:	69fa      	ldr	r2, [r7, #28]
 8011e9e:	440a      	add	r2, r1
 8011ea0:	7812      	ldrb	r2, [r2, #0]
 8011ea2:	4611      	mov	r1, r2
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	3301      	adds	r3, #1
 8011eac:	61fb      	str	r3, [r7, #28]
 8011eae:	8a3b      	ldrh	r3, [r7, #16]
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d3ee      	bcc.n	8011e96 <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8011eb8:	8a3b      	ldrh	r3, [r7, #16]
 8011eba:	61bb      	str	r3, [r7, #24]
 8011ebc:	e007      	b.n	8011ece <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2120      	movs	r1, #32
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8011ec8:	69bb      	ldr	r3, [r7, #24]
 8011eca:	3301      	adds	r3, #1
 8011ecc:	61bb      	str	r3, [r7, #24]
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8011ed2:	461a      	mov	r2, r3
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	d3f1      	bcc.n	8011ebe <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8011eda:	8a3a      	ldrh	r2, [r7, #16]
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	861a      	strh	r2, [r3, #48]	@ 0x30
    cli->writeChar(cli, '\r');
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	210d      	movs	r1, #13
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	4619      	mov	r1, r3
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 f8c7 	bl	8012084 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8011ef6:	697b      	ldr	r3, [r7, #20]
 8011ef8:	69db      	ldr	r3, [r3, #28]
 8011efa:	4619      	mov	r1, r3
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f000 f8c1 	bl	8012084 <writeToOutput>
 8011f02:	e000      	b.n	8011f06 <printLiveAutocompletion+0xb0>
        return;
 8011f04:	bf00      	nop
}
 8011f06:	3720      	adds	r7, #32
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}

08011f0c <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b088      	sub	sp, #32
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8011f1a:	69bb      	ldr	r3, [r7, #24]
 8011f1c:	69da      	ldr	r2, [r3, #28]
 8011f1e:	f107 030c 	add.w	r3, r7, #12
 8011f22:	6879      	ldr	r1, [r7, #4]
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7ff fed9 	bl	8011cdc <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8011f2a:	8a7b      	ldrh	r3, [r7, #18]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d071      	beq.n	8012014 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8011f30:	8a7b      	ldrh	r3, [r7, #18]
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	d004      	beq.n	8011f40 <onAutocompleteRequest+0x34>
 8011f36:	8a3a      	ldrh	r2, [r7, #16]
 8011f38:	69bb      	ldr	r3, [r7, #24]
 8011f3a:	8c1b      	ldrh	r3, [r3, #32]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d92a      	bls.n	8011f96 <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8011f40:	69bb      	ldr	r3, [r7, #24]
 8011f42:	69db      	ldr	r3, [r3, #28]
 8011f44:	68f9      	ldr	r1, [r7, #12]
 8011f46:	8a3a      	ldrh	r2, [r7, #16]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f00b fa06 	bl	801d35a <memcpy>
        if (cmd.candidateCount == 1) {
 8011f4e:	8a7b      	ldrh	r3, [r7, #18]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d109      	bne.n	8011f68 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8011f54:	69bb      	ldr	r3, [r7, #24]
 8011f56:	69db      	ldr	r3, [r3, #28]
 8011f58:	8a3a      	ldrh	r2, [r7, #16]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	2220      	movs	r2, #32
 8011f5e:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8011f60:	8a3b      	ldrh	r3, [r7, #16]
 8011f62:	3301      	adds	r3, #1
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8011f68:	69bb      	ldr	r3, [r7, #24]
 8011f6a:	69db      	ldr	r3, [r3, #28]
 8011f6c:	8a3a      	ldrh	r2, [r7, #16]
 8011f6e:	4413      	add	r3, r2
 8011f70:	2200      	movs	r2, #0
 8011f72:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	69db      	ldr	r3, [r3, #28]
 8011f78:	69ba      	ldr	r2, [r7, #24]
 8011f7a:	8c12      	ldrh	r2, [r2, #32]
 8011f7c:	4413      	add	r3, r2
 8011f7e:	4619      	mov	r1, r3
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f000 f87f 	bl	8012084 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8011f86:	8a3a      	ldrh	r2, [r7, #16]
 8011f88:	69bb      	ldr	r3, [r7, #24]
 8011f8a:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8011f8c:	69bb      	ldr	r3, [r7, #24]
 8011f8e:	8c1a      	ldrh	r2, [r3, #32]
 8011f90:	69bb      	ldr	r3, [r7, #24]
 8011f92:	861a      	strh	r2, [r3, #48]	@ 0x30
        return;
 8011f94:	e03f      	b.n	8012016 <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 f842 	bl	8012020 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	61fb      	str	r3, [r7, #28]
 8011fa0:	e021      	b.n	8011fe6 <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8011fa2:	69bb      	ldr	r3, [r7, #24]
 8011fa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011fa6:	69fb      	ldr	r3, [r7, #28]
 8011fa8:	4413      	add	r3, r2
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	f003 0301 	and.w	r3, r3, #1
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d014      	beq.n	8011fde <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011fb8:	69fa      	ldr	r2, [r7, #28]
 8011fba:	4613      	mov	r3, r2
 8011fbc:	009b      	lsls	r3, r3, #2
 8011fbe:	4413      	add	r3, r2
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	440b      	add	r3, r1
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 8011fc8:	6979      	ldr	r1, [r7, #20]
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 f85a 	bl	8012084 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011fd0:	4b12      	ldr	r3, [pc, #72]	@ (801201c <onAutocompleteRequest+0x110>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f000 f854 	bl	8012084 <writeToOutput>
 8011fdc:	e000      	b.n	8011fe0 <onAutocompleteRequest+0xd4>
            continue;
 8011fde:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011fe0:	69fb      	ldr	r3, [r7, #28]
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	61fb      	str	r3, [r7, #28]
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011fea:	461a      	mov	r2, r3
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	dbd7      	blt.n	8011fa2 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f000 f843 	bl	8012084 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8011ffe:	69bb      	ldr	r3, [r7, #24]
 8012000:	69db      	ldr	r3, [r3, #28]
 8012002:	4619      	mov	r1, r3
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f000 f83d 	bl	8012084 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 801200a:	69bb      	ldr	r3, [r7, #24]
 801200c:	8c1a      	ldrh	r2, [r3, #32]
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012012:	e000      	b.n	8012016 <onAutocompleteRequest+0x10a>
        return;
 8012014:	bf00      	nop
}
 8012016:	3720      	adds	r7, #32
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	20000028 	.word	0x20000028

08012020 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8012020:	b590      	push	{r4, r7, lr}
 8012022:	b087      	sub	sp, #28
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	68db      	ldr	r3, [r3, #12]
 801202c:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8012032:	461c      	mov	r4, r3
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	4618      	mov	r0, r3
 801203a:	f7ee f931 	bl	80002a0 <strlen>
 801203e:	4603      	mov	r3, r0
 8012040:	4423      	add	r3, r4
 8012042:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	210d      	movs	r1, #13
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 801204e:	2300      	movs	r3, #0
 8012050:	617b      	str	r3, [r7, #20]
 8012052:	e007      	b.n	8012064 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2120      	movs	r1, #32
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	3301      	adds	r3, #1
 8012062:	617b      	str	r3, [r7, #20]
 8012064:	697a      	ldr	r2, [r7, #20]
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	429a      	cmp	r2, r3
 801206a:	d3f3      	bcc.n	8012054 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	210d      	movs	r1, #13
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	4798      	blx	r3
    impl->inputLineLength = 0;
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	2200      	movs	r2, #0
 801207a:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 801207c:	bf00      	nop
 801207e:	371c      	adds	r7, #28
 8012080:	46bd      	mov	sp, r7
 8012082:	bd90      	pop	{r4, r7, pc}

08012084 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8012084:	b580      	push	{r7, lr}
 8012086:	b084      	sub	sp, #16
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 801208e:	6838      	ldr	r0, [r7, #0]
 8012090:	f7ee f906 	bl	80002a0 <strlen>
 8012094:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8012096:	2300      	movs	r3, #0
 8012098:	60fb      	str	r3, [r7, #12]
 801209a:	e00b      	b.n	80120b4 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	6839      	ldr	r1, [r7, #0]
 80120a2:	68fa      	ldr	r2, [r7, #12]
 80120a4:	440a      	add	r2, r1
 80120a6:	7812      	ldrb	r2, [r2, #0]
 80120a8:	4611      	mov	r1, r2
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	3301      	adds	r3, #1
 80120b2:	60fb      	str	r3, [r7, #12]
 80120b4:	68fa      	ldr	r2, [r7, #12]
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d3ef      	bcc.n	801209c <writeToOutput+0x18>
    }
}
 80120bc:	bf00      	nop
 80120be:	bf00      	nop
 80120c0:	3710      	adds	r7, #16
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}

080120c6 <isControlChar>:

static bool isControlChar(char c) {
 80120c6:	b480      	push	{r7}
 80120c8:	b083      	sub	sp, #12
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	4603      	mov	r3, r0
 80120ce:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 80120d0:	79fb      	ldrb	r3, [r7, #7]
 80120d2:	2b0d      	cmp	r3, #13
 80120d4:	d00b      	beq.n	80120ee <isControlChar+0x28>
 80120d6:	79fb      	ldrb	r3, [r7, #7]
 80120d8:	2b0a      	cmp	r3, #10
 80120da:	d008      	beq.n	80120ee <isControlChar+0x28>
 80120dc:	79fb      	ldrb	r3, [r7, #7]
 80120de:	2b08      	cmp	r3, #8
 80120e0:	d005      	beq.n	80120ee <isControlChar+0x28>
 80120e2:	79fb      	ldrb	r3, [r7, #7]
 80120e4:	2b09      	cmp	r3, #9
 80120e6:	d002      	beq.n	80120ee <isControlChar+0x28>
 80120e8:	79fb      	ldrb	r3, [r7, #7]
 80120ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80120ec:	d101      	bne.n	80120f2 <isControlChar+0x2c>
 80120ee:	2301      	movs	r3, #1
 80120f0:	e000      	b.n	80120f4 <isControlChar+0x2e>
 80120f2:	2300      	movs	r3, #0
 80120f4:	f003 0301 	and.w	r3, r3, #1
 80120f8:	b2db      	uxtb	r3, r3
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	370c      	adds	r7, #12
 80120fe:	46bd      	mov	sp, r7
 8012100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012104:	4770      	bx	lr

08012106 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8012106:	b480      	push	{r7}
 8012108:	b083      	sub	sp, #12
 801210a:	af00      	add	r7, sp, #0
 801210c:	4603      	mov	r3, r0
 801210e:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8012110:	79fb      	ldrb	r3, [r7, #7]
 8012112:	2b1f      	cmp	r3, #31
 8012114:	d904      	bls.n	8012120 <isDisplayableChar+0x1a>
 8012116:	79fb      	ldrb	r3, [r7, #7]
 8012118:	2b7e      	cmp	r3, #126	@ 0x7e
 801211a:	d801      	bhi.n	8012120 <isDisplayableChar+0x1a>
 801211c:	2301      	movs	r3, #1
 801211e:	e000      	b.n	8012122 <isDisplayableChar+0x1c>
 8012120:	2300      	movs	r3, #0
 8012122:	f003 0301 	and.w	r3, r3, #1
 8012126:	b2db      	uxtb	r3, r3
}
 8012128:	4618      	mov	r0, r3
 801212a:	370c      	adds	r7, #12
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr

08012134 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8012134:	b480      	push	{r7}
 8012136:	b083      	sub	sp, #12
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	88da      	ldrh	r2, [r3, #6]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	889b      	ldrh	r3, [r3, #4]
 8012144:	429a      	cmp	r2, r3
 8012146:	d306      	bcc.n	8012156 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	88da      	ldrh	r2, [r3, #6]
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	889b      	ldrh	r3, [r3, #4]
 8012150:	1ad3      	subs	r3, r2, r3
 8012152:	b29b      	uxth	r3, r3
 8012154:	e009      	b.n	801216a <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	891a      	ldrh	r2, [r3, #8]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	889b      	ldrh	r3, [r3, #4]
 801215e:	1ad3      	subs	r3, r2, r3
 8012160:	b29a      	uxth	r2, r3
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	88db      	ldrh	r3, [r3, #6]
 8012166:	4413      	add	r3, r2
 8012168:	b29b      	uxth	r3, r3
}
 801216a:	4618      	mov	r0, r3
 801216c:	370c      	adds	r7, #12
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr

08012176 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 8012176:	b480      	push	{r7}
 8012178:	b085      	sub	sp, #20
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
    char a = '\0';
 801217e:	2300      	movs	r3, #0
 8012180:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	889a      	ldrh	r2, [r3, #4]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	88db      	ldrh	r3, [r3, #6]
 801218a:	429a      	cmp	r2, r3
 801218c:	d014      	beq.n	80121b8 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	687a      	ldr	r2, [r7, #4]
 8012194:	8892      	ldrh	r2, [r2, #4]
 8012196:	4413      	add	r3, r2
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	889b      	ldrh	r3, [r3, #4]
 80121a0:	3301      	adds	r3, #1
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	687a      	ldr	r2, [r7, #4]
 80121a6:	8912      	ldrh	r2, [r2, #8]
 80121a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80121ac:	fb01 f202 	mul.w	r2, r1, r2
 80121b0:	1a9b      	subs	r3, r3, r2
 80121b2:	b29a      	uxth	r2, r3
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	809a      	strh	r2, [r3, #4]
    }
    return a;
 80121b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3714      	adds	r7, #20
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr

080121c6 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 80121c6:	b480      	push	{r7}
 80121c8:	b085      	sub	sp, #20
 80121ca:	af00      	add	r7, sp, #0
 80121cc:	6078      	str	r0, [r7, #4]
 80121ce:	460b      	mov	r3, r1
 80121d0:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	88db      	ldrh	r3, [r3, #6]
 80121d6:	3301      	adds	r3, #1
 80121d8:	b29b      	uxth	r3, r3
 80121da:	687a      	ldr	r2, [r7, #4]
 80121dc:	8912      	ldrh	r2, [r2, #8]
 80121de:	fbb3 f1f2 	udiv	r1, r3, r2
 80121e2:	fb01 f202 	mul.w	r2, r1, r2
 80121e6:	1a9b      	subs	r3, r3, r2
 80121e8:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	889b      	ldrh	r3, [r3, #4]
 80121ee:	89fa      	ldrh	r2, [r7, #14]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d00b      	beq.n	801220c <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	687a      	ldr	r2, [r7, #4]
 80121fa:	88d2      	ldrh	r2, [r2, #6]
 80121fc:	4413      	add	r3, r2
 80121fe:	78fa      	ldrb	r2, [r7, #3]
 8012200:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	89fa      	ldrh	r2, [r7, #14]
 8012206:	80da      	strh	r2, [r3, #6]
        return true;
 8012208:	2301      	movs	r3, #1
 801220a:	e000      	b.n	801220e <fifoBufPush+0x48>
    }
    return false;
 801220c:	2300      	movs	r3, #0
}
 801220e:	4618      	mov	r0, r3
 8012210:	3714      	adds	r7, #20
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr

0801221a <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 801221a:	b580      	push	{r7, lr}
 801221c:	b088      	sub	sp, #32
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
 8012222:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8012224:	6838      	ldr	r0, [r7, #0]
 8012226:	f7ee f83b 	bl	80002a0 <strlen>
 801222a:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	889b      	ldrh	r3, [r3, #4]
 8012230:	461a      	mov	r2, r3
 8012232:	69bb      	ldr	r3, [r7, #24]
 8012234:	3301      	adds	r3, #1
 8012236:	429a      	cmp	r2, r3
 8012238:	d201      	bcs.n	801223e <historyPut+0x24>
        return false;
 801223a:	2300      	movs	r3, #0
 801223c:	e04d      	b.n	80122da <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 801223e:	6839      	ldr	r1, [r7, #0]
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f000 f86a 	bl	801231a <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8012246:	e024      	b.n	8012292 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	891b      	ldrh	r3, [r3, #8]
 801224c:	4619      	mov	r1, r3
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 f847 	bl	80122e2 <historyGet>
 8012254:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8012256:	6978      	ldr	r0, [r7, #20]
 8012258:	f7ee f822 	bl	80002a0 <strlen>
 801225c:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	697a      	ldr	r2, [r7, #20]
 8012264:	1ad3      	subs	r3, r2, r3
 8012266:	461a      	mov	r2, r3
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	4413      	add	r3, r2
 801226c:	3301      	adds	r3, #1
 801226e:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	889b      	ldrh	r3, [r3, #4]
 8012274:	461a      	mov	r2, r3
 8012276:	69fb      	ldr	r3, [r7, #28]
 8012278:	1ad3      	subs	r3, r2, r3
 801227a:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	3301      	adds	r3, #1
 8012280:	68fa      	ldr	r2, [r7, #12]
 8012282:	429a      	cmp	r2, r3
 8012284:	d20a      	bcs.n	801229c <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	891b      	ldrh	r3, [r3, #8]
 801228a:	3b01      	subs	r3, #1
 801228c:	b29a      	uxth	r2, r3
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	891b      	ldrh	r3, [r3, #8]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d1d6      	bne.n	8012248 <historyPut+0x2e>
 801229a:	e000      	b.n	801229e <historyPut+0x84>
            break;
 801229c:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	891b      	ldrh	r3, [r3, #8]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d00a      	beq.n	80122bc <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681a      	ldr	r2, [r3, #0]
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	3301      	adds	r3, #1
 80122ae:	18d0      	adds	r0, r2, r3
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	69fa      	ldr	r2, [r7, #28]
 80122b6:	4619      	mov	r1, r3
 80122b8:	f00a ff1e 	bl	801d0f8 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6818      	ldr	r0, [r3, #0]
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	3301      	adds	r3, #1
 80122c4:	461a      	mov	r2, r3
 80122c6:	6839      	ldr	r1, [r7, #0]
 80122c8:	f00b f847 	bl	801d35a <memcpy>
    ++history->itemsCount;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	891b      	ldrh	r3, [r3, #8]
 80122d0:	3301      	adds	r3, #1
 80122d2:	b29a      	uxth	r2, r3
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	811a      	strh	r2, [r3, #8]

    return true;
 80122d8:	2301      	movs	r3, #1
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3720      	adds	r7, #32
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}

080122e2 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b082      	sub	sp, #8
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
 80122ea:	460b      	mov	r3, r1
 80122ec:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 80122ee:	887b      	ldrh	r3, [r7, #2]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d004      	beq.n	80122fe <historyGet+0x1c>
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	891b      	ldrh	r3, [r3, #8]
 80122f8:	887a      	ldrh	r2, [r7, #2]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d901      	bls.n	8012302 <historyGet+0x20>
        return NULL;
 80122fe:	2300      	movs	r3, #0
 8012300:	e007      	b.n	8012312 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	887a      	ldrh	r2, [r7, #2]
 8012308:	4611      	mov	r1, r2
 801230a:	4618      	mov	r0, r3
 801230c:	f7ff f882 	bl	8011414 <embeddedCliGetToken>
 8012310:	4603      	mov	r3, r0
}
 8012312:	4618      	mov	r0, r3
 8012314:	3708      	adds	r7, #8
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 801231a:	b580      	push	{r7, lr}
 801231c:	b086      	sub	sp, #24
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
 8012322:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d04c      	beq.n	80123c4 <historyRemove+0xaa>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	891b      	ldrh	r3, [r3, #8]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d048      	beq.n	80123c4 <historyRemove+0xaa>
        return;
    char *item = NULL;
 8012332:	2300      	movs	r3, #0
 8012334:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8012336:	2301      	movs	r3, #1
 8012338:	827b      	strh	r3, [r7, #18]
 801233a:	e013      	b.n	8012364 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	8a7a      	ldrh	r2, [r7, #18]
 8012342:	4611      	mov	r1, r2
 8012344:	4618      	mov	r0, r3
 8012346:	f7ff f880 	bl	801144a <embeddedCliGetTokenVariable>
 801234a:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 801234c:	6839      	ldr	r1, [r7, #0]
 801234e:	6978      	ldr	r0, [r7, #20]
 8012350:	f7ed ff46 	bl	80001e0 <strcmp>
 8012354:	4603      	mov	r3, r0
 8012356:	2b00      	cmp	r3, #0
 8012358:	d00a      	beq.n	8012370 <historyRemove+0x56>
            break;
        }
        item = NULL;
 801235a:	2300      	movs	r3, #0
 801235c:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 801235e:	8a7b      	ldrh	r3, [r7, #18]
 8012360:	3301      	adds	r3, #1
 8012362:	827b      	strh	r3, [r7, #18]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	891b      	ldrh	r3, [r3, #8]
 8012368:	8a7a      	ldrh	r2, [r7, #18]
 801236a:	429a      	cmp	r2, r3
 801236c:	d9e6      	bls.n	801233c <historyRemove+0x22>
 801236e:	e000      	b.n	8012372 <historyRemove+0x58>
            break;
 8012370:	bf00      	nop
    }
    if (item == NULL)
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d027      	beq.n	80123c8 <historyRemove+0xae>
        return;

    --history->itemsCount;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	891b      	ldrh	r3, [r3, #8]
 801237c:	3b01      	subs	r3, #1
 801237e:	b29a      	uxth	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8012384:	8a7a      	ldrh	r2, [r7, #18]
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	891b      	ldrh	r3, [r3, #8]
 801238a:	3301      	adds	r3, #1
 801238c:	429a      	cmp	r2, r3
 801238e:	d01d      	beq.n	80123cc <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8012390:	6978      	ldr	r0, [r7, #20]
 8012392:	f7ed ff85 	bl	80002a0 <strlen>
 8012396:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	889b      	ldrh	r3, [r3, #4]
 801239c:	4619      	mov	r1, r3
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	3301      	adds	r3, #1
 80123a2:	697a      	ldr	r2, [r7, #20]
 80123a4:	441a      	add	r2, r3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	1ad3      	subs	r3, r2, r3
 80123ac:	1acb      	subs	r3, r1, r3
 80123ae:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	3301      	adds	r3, #1
 80123b4:	697a      	ldr	r2, [r7, #20]
 80123b6:	4413      	add	r3, r2
 80123b8:	68ba      	ldr	r2, [r7, #8]
 80123ba:	4619      	mov	r1, r3
 80123bc:	6978      	ldr	r0, [r7, #20]
 80123be:	f00a fe9b 	bl	801d0f8 <memmove>
 80123c2:	e004      	b.n	80123ce <historyRemove+0xb4>
        return;
 80123c4:	bf00      	nop
 80123c6:	e002      	b.n	80123ce <historyRemove+0xb4>
        return;
 80123c8:	bf00      	nop
 80123ca:	e000      	b.n	80123ce <historyRemove+0xb4>
        return;
 80123cc:	bf00      	nop
}
 80123ce:	3718      	adds	r7, #24
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 80123d4:	b480      	push	{r7}
 80123d6:	b085      	sub	sp, #20
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	460b      	mov	r3, r1
 80123de:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d002      	beq.n	80123ec <getTokenPosition+0x18>
 80123e6:	887b      	ldrh	r3, [r7, #2]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d102      	bne.n	80123f2 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 80123ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80123f0:	e028      	b.n	8012444 <getTokenPosition+0x70>
    uint16_t i = 0;
 80123f2:	2300      	movs	r3, #0
 80123f4:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 80123f6:	2301      	movs	r3, #1
 80123f8:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 80123fa:	89ba      	ldrh	r2, [r7, #12]
 80123fc:	887b      	ldrh	r3, [r7, #2]
 80123fe:	429a      	cmp	r2, r3
 8012400:	d013      	beq.n	801242a <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8012402:	89fb      	ldrh	r3, [r7, #14]
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	4413      	add	r3, r2
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d109      	bne.n	8012422 <getTokenPosition+0x4e>
            ++tokenCount;
 801240e:	89bb      	ldrh	r3, [r7, #12]
 8012410:	3301      	adds	r3, #1
 8012412:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8012414:	89fb      	ldrh	r3, [r7, #14]
 8012416:	3301      	adds	r3, #1
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	4413      	add	r3, r2
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d005      	beq.n	801242e <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8012422:	89fb      	ldrh	r3, [r7, #14]
 8012424:	3301      	adds	r3, #1
 8012426:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8012428:	e7e7      	b.n	80123fa <getTokenPosition+0x26>
            break;
 801242a:	bf00      	nop
 801242c:	e000      	b.n	8012430 <getTokenPosition+0x5c>
                break;
 801242e:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8012430:	89fb      	ldrh	r3, [r7, #14]
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	4413      	add	r3, r2
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d001      	beq.n	8012440 <getTokenPosition+0x6c>
        return i;
 801243c:	89fb      	ldrh	r3, [r7, #14]
 801243e:	e001      	b.n	8012444 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8012440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8012444:	4618      	mov	r0, r3
 8012446:	3714      	adds	r7, #20
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr

08012450 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012454:	4904      	ldr	r1, [pc, #16]	@ (8012468 <MX_FATFS_Init+0x18>)
 8012456:	4805      	ldr	r0, [pc, #20]	@ (801246c <MX_FATFS_Init+0x1c>)
 8012458:	f007 ff20 	bl	801a29c <FATFS_LinkDriver>
 801245c:	4603      	mov	r3, r0
 801245e:	461a      	mov	r2, r3
 8012460:	4b03      	ldr	r3, [pc, #12]	@ (8012470 <MX_FATFS_Init+0x20>)
 8012462:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012464:	bf00      	nop
 8012466:	bd80      	pop	{r7, pc}
 8012468:	20001a9c 	.word	0x20001a9c
 801246c:	080227e4 	.word	0x080227e4
 8012470:	20001a98 	.word	0x20001a98

08012474 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012474:	b480      	push	{r7}
 8012476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012478:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801247a:	4618      	mov	r0, r3
 801247c:	46bd      	mov	sp, r7
 801247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012482:	4770      	bx	lr

08012484 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801248a:	2300      	movs	r3, #0
 801248c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801248e:	f000 f86b 	bl	8012568 <BSP_SD_IsDetected>
 8012492:	4603      	mov	r3, r0
 8012494:	2b01      	cmp	r3, #1
 8012496:	d001      	beq.n	801249c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8012498:	2301      	movs	r3, #1
 801249a:	e005      	b.n	80124a8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801249c:	4804      	ldr	r0, [pc, #16]	@ (80124b0 <BSP_SD_Init+0x2c>)
 801249e:	f7f7 fa02 	bl	80098a6 <HAL_SD_Init>
 80124a2:	4603      	mov	r3, r0
 80124a4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80124a6:	79fb      	ldrb	r3, [r7, #7]
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	3708      	adds	r7, #8
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	20001804 	.word	0x20001804

080124b4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b088      	sub	sp, #32
 80124b8:	af02      	add	r7, sp, #8
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
 80124c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80124c2:	2300      	movs	r3, #0
 80124c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	9300      	str	r3, [sp, #0]
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	68ba      	ldr	r2, [r7, #8]
 80124ce:	68f9      	ldr	r1, [r7, #12]
 80124d0:	4806      	ldr	r0, [pc, #24]	@ (80124ec <BSP_SD_ReadBlocks+0x38>)
 80124d2:	f7f7 fa99 	bl	8009a08 <HAL_SD_ReadBlocks>
 80124d6:	4603      	mov	r3, r0
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d001      	beq.n	80124e0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80124dc:	2301      	movs	r3, #1
 80124de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80124e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3718      	adds	r7, #24
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	20001804 	.word	0x20001804

080124f0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b088      	sub	sp, #32
 80124f4:	af02      	add	r7, sp, #8
 80124f6:	60f8      	str	r0, [r7, #12]
 80124f8:	60b9      	str	r1, [r7, #8]
 80124fa:	607a      	str	r2, [r7, #4]
 80124fc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80124fe:	2300      	movs	r3, #0
 8012500:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	9300      	str	r3, [sp, #0]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	68ba      	ldr	r2, [r7, #8]
 801250a:	68f9      	ldr	r1, [r7, #12]
 801250c:	4806      	ldr	r0, [pc, #24]	@ (8012528 <BSP_SD_WriteBlocks+0x38>)
 801250e:	f7f7 fc59 	bl	8009dc4 <HAL_SD_WriteBlocks>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d001      	beq.n	801251c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012518:	2301      	movs	r3, #1
 801251a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801251c:	7dfb      	ldrb	r3, [r7, #23]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3718      	adds	r7, #24
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	20001804 	.word	0x20001804

0801252c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012530:	4805      	ldr	r0, [pc, #20]	@ (8012548 <BSP_SD_GetCardState+0x1c>)
 8012532:	f7f7 ff9d 	bl	800a470 <HAL_SD_GetCardState>
 8012536:	4603      	mov	r3, r0
 8012538:	2b04      	cmp	r3, #4
 801253a:	bf14      	ite	ne
 801253c:	2301      	movne	r3, #1
 801253e:	2300      	moveq	r3, #0
 8012540:	b2db      	uxtb	r3, r3
}
 8012542:	4618      	mov	r0, r3
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	20001804 	.word	0x20001804

0801254c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012554:	6879      	ldr	r1, [r7, #4]
 8012556:	4803      	ldr	r0, [pc, #12]	@ (8012564 <BSP_SD_GetCardInfo+0x18>)
 8012558:	f7f7 ff5e 	bl	800a418 <HAL_SD_GetCardInfo>
}
 801255c:	bf00      	nop
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	20001804 	.word	0x20001804

08012568 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012568:	b480      	push	{r7}
 801256a:	b083      	sub	sp, #12
 801256c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801256e:	2301      	movs	r3, #1
 8012570:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8012572:	79fb      	ldrb	r3, [r7, #7]
 8012574:	b2db      	uxtb	r3, r3
}
 8012576:	4618      	mov	r0, r3
 8012578:	370c      	adds	r7, #12
 801257a:	46bd      	mov	sp, r7
 801257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012580:	4770      	bx	lr
	...

08012584 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	af00      	add	r7, sp, #0
 801258a:	4603      	mov	r3, r0
 801258c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801258e:	4b0b      	ldr	r3, [pc, #44]	@ (80125bc <SD_CheckStatus+0x38>)
 8012590:	2201      	movs	r2, #1
 8012592:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012594:	f7ff ffca 	bl	801252c <BSP_SD_GetCardState>
 8012598:	4603      	mov	r3, r0
 801259a:	2b00      	cmp	r3, #0
 801259c:	d107      	bne.n	80125ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801259e:	4b07      	ldr	r3, [pc, #28]	@ (80125bc <SD_CheckStatus+0x38>)
 80125a0:	781b      	ldrb	r3, [r3, #0]
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	f023 0301 	bic.w	r3, r3, #1
 80125a8:	b2da      	uxtb	r2, r3
 80125aa:	4b04      	ldr	r3, [pc, #16]	@ (80125bc <SD_CheckStatus+0x38>)
 80125ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80125ae:	4b03      	ldr	r3, [pc, #12]	@ (80125bc <SD_CheckStatus+0x38>)
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	b2db      	uxtb	r3, r3
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3708      	adds	r7, #8
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	2000002c 	.word	0x2000002c

080125c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	4603      	mov	r3, r0
 80125c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80125ca:	4b0b      	ldr	r3, [pc, #44]	@ (80125f8 <SD_initialize+0x38>)
 80125cc:	2201      	movs	r2, #1
 80125ce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80125d0:	f7ff ff58 	bl	8012484 <BSP_SD_Init>
 80125d4:	4603      	mov	r3, r0
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d107      	bne.n	80125ea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80125da:	79fb      	ldrb	r3, [r7, #7]
 80125dc:	4618      	mov	r0, r3
 80125de:	f7ff ffd1 	bl	8012584 <SD_CheckStatus>
 80125e2:	4603      	mov	r3, r0
 80125e4:	461a      	mov	r2, r3
 80125e6:	4b04      	ldr	r3, [pc, #16]	@ (80125f8 <SD_initialize+0x38>)
 80125e8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80125ea:	4b03      	ldr	r3, [pc, #12]	@ (80125f8 <SD_initialize+0x38>)
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	b2db      	uxtb	r3, r3
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	3708      	adds	r7, #8
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}
 80125f8:	2000002c 	.word	0x2000002c

080125fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	4603      	mov	r3, r0
 8012604:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012606:	79fb      	ldrb	r3, [r7, #7]
 8012608:	4618      	mov	r0, r3
 801260a:	f7ff ffbb 	bl	8012584 <SD_CheckStatus>
 801260e:	4603      	mov	r3, r0
}
 8012610:	4618      	mov	r0, r3
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b086      	sub	sp, #24
 801261c:	af00      	add	r7, sp, #0
 801261e:	60b9      	str	r1, [r7, #8]
 8012620:	607a      	str	r2, [r7, #4]
 8012622:	603b      	str	r3, [r7, #0]
 8012624:	4603      	mov	r3, r0
 8012626:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012628:	2301      	movs	r3, #1
 801262a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 801262c:	f04f 33ff 	mov.w	r3, #4294967295
 8012630:	683a      	ldr	r2, [r7, #0]
 8012632:	6879      	ldr	r1, [r7, #4]
 8012634:	68b8      	ldr	r0, [r7, #8]
 8012636:	f7ff ff3d 	bl	80124b4 <BSP_SD_ReadBlocks>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	d107      	bne.n	8012650 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012640:	bf00      	nop
 8012642:	f7ff ff73 	bl	801252c <BSP_SD_GetCardState>
 8012646:	4603      	mov	r3, r0
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1fa      	bne.n	8012642 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 801264c:	2300      	movs	r3, #0
 801264e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8012650:	7dfb      	ldrb	r3, [r7, #23]
}
 8012652:	4618      	mov	r0, r3
 8012654:	3718      	adds	r7, #24
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}

0801265a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801265a:	b580      	push	{r7, lr}
 801265c:	b086      	sub	sp, #24
 801265e:	af00      	add	r7, sp, #0
 8012660:	60b9      	str	r1, [r7, #8]
 8012662:	607a      	str	r2, [r7, #4]
 8012664:	603b      	str	r3, [r7, #0]
 8012666:	4603      	mov	r3, r0
 8012668:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801266a:	2301      	movs	r3, #1
 801266c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801266e:	f04f 33ff 	mov.w	r3, #4294967295
 8012672:	683a      	ldr	r2, [r7, #0]
 8012674:	6879      	ldr	r1, [r7, #4]
 8012676:	68b8      	ldr	r0, [r7, #8]
 8012678:	f7ff ff3a 	bl	80124f0 <BSP_SD_WriteBlocks>
 801267c:	4603      	mov	r3, r0
 801267e:	2b00      	cmp	r3, #0
 8012680:	d107      	bne.n	8012692 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8012682:	bf00      	nop
 8012684:	f7ff ff52 	bl	801252c <BSP_SD_GetCardState>
 8012688:	4603      	mov	r3, r0
 801268a:	2b00      	cmp	r3, #0
 801268c:	d1fa      	bne.n	8012684 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801268e:	2300      	movs	r3, #0
 8012690:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8012692:	7dfb      	ldrb	r3, [r7, #23]
}
 8012694:	4618      	mov	r0, r3
 8012696:	3718      	adds	r7, #24
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b08c      	sub	sp, #48	@ 0x30
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	4603      	mov	r3, r0
 80126a4:	603a      	str	r2, [r7, #0]
 80126a6:	71fb      	strb	r3, [r7, #7]
 80126a8:	460b      	mov	r3, r1
 80126aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80126ac:	2301      	movs	r3, #1
 80126ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80126b2:	4b25      	ldr	r3, [pc, #148]	@ (8012748 <SD_ioctl+0xac>)
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	f003 0301 	and.w	r3, r3, #1
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d001      	beq.n	80126c4 <SD_ioctl+0x28>
 80126c0:	2303      	movs	r3, #3
 80126c2:	e03c      	b.n	801273e <SD_ioctl+0xa2>

  switch (cmd)
 80126c4:	79bb      	ldrb	r3, [r7, #6]
 80126c6:	2b03      	cmp	r3, #3
 80126c8:	d834      	bhi.n	8012734 <SD_ioctl+0x98>
 80126ca:	a201      	add	r2, pc, #4	@ (adr r2, 80126d0 <SD_ioctl+0x34>)
 80126cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126d0:	080126e1 	.word	0x080126e1
 80126d4:	080126e9 	.word	0x080126e9
 80126d8:	08012701 	.word	0x08012701
 80126dc:	0801271b 	.word	0x0801271b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80126e0:	2300      	movs	r3, #0
 80126e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80126e6:	e028      	b.n	801273a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80126e8:	f107 030c 	add.w	r3, r7, #12
 80126ec:	4618      	mov	r0, r3
 80126ee:	f7ff ff2d 	bl	801254c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80126f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80126f8:	2300      	movs	r3, #0
 80126fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80126fe:	e01c      	b.n	801273a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012700:	f107 030c 	add.w	r3, r7, #12
 8012704:	4618      	mov	r0, r3
 8012706:	f7ff ff21 	bl	801254c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801270a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801270c:	b29a      	uxth	r2, r3
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012712:	2300      	movs	r3, #0
 8012714:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012718:	e00f      	b.n	801273a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801271a:	f107 030c 	add.w	r3, r7, #12
 801271e:	4618      	mov	r0, r3
 8012720:	f7ff ff14 	bl	801254c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012726:	0a5a      	lsrs	r2, r3, #9
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801272c:	2300      	movs	r3, #0
 801272e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012732:	e002      	b.n	801273a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012734:	2304      	movs	r3, #4
 8012736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801273a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801273e:	4618      	mov	r0, r3
 8012740:	3730      	adds	r7, #48	@ 0x30
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	bf00      	nop
 8012748:	2000002c 	.word	0x2000002c

0801274c <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;
char scheduled_packet[30] = "NULL";
void RtcInt()
{
 801274c:	b480      	push	{r7}
 801274e:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8012750:	4b03      	ldr	r3, [pc, #12]	@ (8012760 <RtcInt+0x14>)
 8012752:	2201      	movs	r2, #1
 8012754:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8012756:	bf00      	nop
 8012758:	46bd      	mov	sp, r7
 801275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275e:	4770      	bx	lr
 8012760:	2000002d 	.word	0x2000002d

08012764 <Set_Date>:

void Set_Date(char *Datebuffer) {
 8012764:	b580      	push	{r7, lr}
 8012766:	b088      	sub	sp, #32
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 801276c:	f107 030c 	add.w	r3, r7, #12
 8012770:	4619      	mov	r1, r3
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 f8e0 	bl	8012938 <Parse_Date>
 8012778:	4603      	mov	r3, r0
 801277a:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 801277c:	7ffb      	ldrb	r3, [r7, #31]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d10c      	bne.n	801279c <Set_Date+0x38>
		sDate.Date = date[0];
 8012782:	7b3b      	ldrb	r3, [r7, #12]
 8012784:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8012786:	7b7b      	ldrb	r3, [r7, #13]
 8012788:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 801278a:	7bbb      	ldrb	r3, [r7, #14]
 801278c:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801278e:	f107 0318 	add.w	r3, r7, #24
 8012792:	2200      	movs	r2, #0
 8012794:	4619      	mov	r1, r3
 8012796:	4805      	ldr	r0, [pc, #20]	@ (80127ac <Set_Date+0x48>)
 8012798:	f7f6 fd62 	bl	8009260 <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 801279c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80127a0:	f7f1 fa7a 	bl	8003c98 <HAL_Delay>
}
 80127a4:	bf00      	nop
 80127a6:	3720      	adds	r7, #32
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}
 80127ac:	200017e4 	.word	0x200017e4

080127b0 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b094      	sub	sp, #80	@ 0x50
 80127b4:	af02      	add	r7, sp, #8
uint16_t minute;



if(set_alarm_Time)
 80127b6:	4b42      	ldr	r3, [pc, #264]	@ (80128c0 <Rtc_set_alarm+0x110>)
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d07b      	beq.n	80128b6 <Rtc_set_alarm+0x106>
{
	uint8_t hour = 0;
 80127be:	2300      	movs	r3, #0
 80127c0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80127c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80127c8:	2200      	movs	r2, #0
 80127ca:	4619      	mov	r1, r3
 80127cc:	483d      	ldr	r0, [pc, #244]	@ (80128c4 <Rtc_set_alarm+0x114>)
 80127ce:	f7f6 fce9 	bl	80091a4 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80127d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80127d6:	2200      	movs	r2, #0
 80127d8:	4619      	mov	r1, r3
 80127da:	483a      	ldr	r0, [pc, #232]	@ (80128c4 <Rtc_set_alarm+0x114>)
 80127dc:	f7f6 fdc4 	bl	8009368 <HAL_RTC_GetDate>


    minute = gTime.Seconds + 10;//gTime.Minutes + _Flash_Packet.Time_Interval;
 80127e0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80127e4:	330a      	adds	r3, #10
 80127e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    hour = gTime.Hours;
 80127ea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80127ee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    if(minute > 59)
 80127f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80127f6:	2b3b      	cmp	r3, #59	@ 0x3b
 80127f8:	d918      	bls.n	801282c <Rtc_set_alarm+0x7c>
    {
    	minute = minute%10;//minute%_Flash_Packet.Time_Interval;
 80127fa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80127fe:	4b32      	ldr	r3, [pc, #200]	@ (80128c8 <Rtc_set_alarm+0x118>)
 8012800:	fba3 1302 	umull	r1, r3, r3, r2
 8012804:	08d9      	lsrs	r1, r3, #3
 8012806:	460b      	mov	r3, r1
 8012808:	009b      	lsls	r3, r3, #2
 801280a:	440b      	add	r3, r1
 801280c:	005b      	lsls	r3, r3, #1
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
//    	if(minute == 0)
//    	{
//    		minute = 1;
//    	}

    	hour = hour + 1; //we go to next hour as our time is schedualed for next hour
 8012814:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8012818:	3301      	adds	r3, #1
 801281a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    	if(hour > 23)
 801281e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8012822:	2b17      	cmp	r3, #23
 8012824:	d902      	bls.n	801282c <Rtc_set_alarm+0x7c>
    	{
          hour = 0;
 8012826:	2300      	movs	r3, #0
 8012828:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    	}


    }

    sprintf(scheduled_packet,"%02d:%02d:%02d",hour,minute,gTime.Seconds);
 801282c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8012830:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012834:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 8012838:	9100      	str	r1, [sp, #0]
 801283a:	4924      	ldr	r1, [pc, #144]	@ (80128cc <Rtc_set_alarm+0x11c>)
 801283c:	4824      	ldr	r0, [pc, #144]	@ (80128d0 <Rtc_set_alarm+0x120>)
 801283e:	f00a fb2b 	bl	801ce98 <siprintf>

      RTC_AlarmTypeDef sAlarm = {0};
 8012842:	1d3b      	adds	r3, r7, #4
 8012844:	2228      	movs	r2, #40	@ 0x28
 8012846:	2100      	movs	r1, #0
 8012848:	4618      	mov	r0, r3
 801284a:	f00a fc6f 	bl	801d12c <memset>
	  sAlarm.AlarmTime.Hours = 0;
 801284e:	2300      	movs	r3, #0
 8012850:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = 0;//minute;
 8012852:	2300      	movs	r3, #0
 8012854:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = minute;//0;
 8012856:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801285a:	b2db      	uxtb	r3, r3
 801285c:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 801285e:	2300      	movs	r3, #0
 8012860:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012862:	2300      	movs	r3, #0
 8012864:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012866:	2300      	movs	r3, #0
 8012868:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;//RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 801286a:	4b1a      	ldr	r3, [pc, #104]	@ (80128d4 <Rtc_set_alarm+0x124>)
 801286c:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801286e:	2300      	movs	r3, #0
 8012870:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8012872:	2300      	movs	r3, #0
 8012874:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8012876:	2301      	movs	r3, #1
 8012878:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 801287c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012880:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8012882:	1d3b      	adds	r3, r7, #4
 8012884:	2200      	movs	r2, #0
 8012886:	4619      	mov	r1, r3
 8012888:	480e      	ldr	r0, [pc, #56]	@ (80128c4 <Rtc_set_alarm+0x114>)
 801288a:	f7f6 fdbd 	bl	8009408 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 801288e:	4b0d      	ldr	r3, [pc, #52]	@ (80128c4 <Rtc_set_alarm+0x114>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	689a      	ldr	r2, [r3, #8]
 8012894:	4b0b      	ldr	r3, [pc, #44]	@ (80128c4 <Rtc_set_alarm+0x114>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801289c:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 801289e:	4b09      	ldr	r3, [pc, #36]	@ (80128c4 <Rtc_set_alarm+0x114>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	b2da      	uxtb	r2, r3
 80128a6:	4b07      	ldr	r3, [pc, #28]	@ (80128c4 <Rtc_set_alarm+0x114>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80128ae:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 80128b0:	4b03      	ldr	r3, [pc, #12]	@ (80128c0 <Rtc_set_alarm+0x110>)
 80128b2:	2200      	movs	r2, #0
 80128b4:	701a      	strb	r2, [r3, #0]

		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 80128b6:	bf00      	nop
 80128b8:	3748      	adds	r7, #72	@ 0x48
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	2000002d 	.word	0x2000002d
 80128c4:	200017e4 	.word	0x200017e4
 80128c8:	cccccccd 	.word	0xcccccccd
 80128cc:	08021f90 	.word	0x08021f90
 80128d0:	20000030 	.word	0x20000030
 80128d4:	80808000 	.word	0x80808000

080128d8 <Set_Time>:
void Set_Time(char *Timebuffer) {
 80128d8:	b580      	push	{r7, lr}
 80128da:	b08c      	sub	sp, #48	@ 0x30
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 80128e0:	f107 030c 	add.w	r3, r7, #12
 80128e4:	4619      	mov	r1, r3
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 f890 	bl	8012a0c <Parse_Time>
 80128ec:	4603      	mov	r3, r0
 80128ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 80128f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d113      	bne.n	8012922 <Set_Time+0x4a>
		sTime.Hours = time[0];
 80128fa:	7b3b      	ldrb	r3, [r7, #12]
 80128fc:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 80128fe:	7b7b      	ldrb	r3, [r7, #13]
 8012900:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8012902:	7bbb      	ldrb	r3, [r7, #14]
 8012904:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012906:	2300      	movs	r3, #0
 8012908:	627b      	str	r3, [r7, #36]	@ 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801290a:	2300      	movs	r3, #0
 801290c:	62bb      	str	r3, [r7, #40]	@ 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801290e:	f107 0318 	add.w	r3, r7, #24
 8012912:	2200      	movs	r2, #0
 8012914:	4619      	mov	r1, r3
 8012916:	4807      	ldr	r0, [pc, #28]	@ (8012934 <Set_Time+0x5c>)
 8012918:	f7f6 fbaa 	bl	8009070 <HAL_RTC_SetTime>
 801291c:	4603      	mov	r3, r0
 801291e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}

	HAL_Delay(500);
 8012922:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8012926:	f7f1 f9b7 	bl	8003c98 <HAL_Delay>

}
 801292a:	bf00      	nop
 801292c:	3730      	adds	r7, #48	@ 0x30
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	200017e4 	.word	0x200017e4

08012938 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8012942:	2300      	movs	r3, #0
 8012944:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8012946:	2300      	movs	r3, #0
 8012948:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 801294a:	492e      	ldr	r1, [pc, #184]	@ (8012a04 <Parse_Date+0xcc>)
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f00a fc03 	bl	801d158 <strtok>
 8012952:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d14b      	bne.n	80129f2 <Parse_Date+0xba>
		{
			return 1;
 801295a:	2301      	movs	r3, #1
 801295c:	e04d      	b.n	80129fa <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 801295e:	68b8      	ldr	r0, [r7, #8]
 8012960:	f009 f962 	bl	801bc28 <atoi>
 8012964:	4603      	mov	r3, r0
 8012966:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8012968:	89fb      	ldrh	r3, [r7, #14]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d10a      	bne.n	8012984 <Parse_Date+0x4c>
 801296e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012972:	2b1f      	cmp	r3, #31
 8012974:	dc03      	bgt.n	801297e <Parse_Date+0x46>
 8012976:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801297a:	2b00      	cmp	r3, #0
 801297c:	dc02      	bgt.n	8012984 <Parse_Date+0x4c>
			{
				val= 1;
 801297e:	2301      	movs	r3, #1
 8012980:	81bb      	strh	r3, [r7, #12]
 8012982:	e028      	b.n	80129d6 <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8012984:	89fb      	ldrh	r3, [r7, #14]
 8012986:	2b01      	cmp	r3, #1
 8012988:	d10a      	bne.n	80129a0 <Parse_Date+0x68>
 801298a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801298e:	2b0c      	cmp	r3, #12
 8012990:	dc03      	bgt.n	801299a <Parse_Date+0x62>
 8012992:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012996:	2b00      	cmp	r3, #0
 8012998:	dc02      	bgt.n	80129a0 <Parse_Date+0x68>
			{
				val= 1;
 801299a:	2301      	movs	r3, #1
 801299c:	81bb      	strh	r3, [r7, #12]
 801299e:	e01a      	b.n	80129d6 <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 80129a0:	89fb      	ldrh	r3, [r7, #14]
 80129a2:	2b02      	cmp	r3, #2
 80129a4:	d112      	bne.n	80129cc <Parse_Date+0x94>
 80129a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80129aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80129ae:	dd0d      	ble.n	80129cc <Parse_Date+0x94>
			{
				val=val%100;
 80129b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80129b4:	4a14      	ldr	r2, [pc, #80]	@ (8012a08 <Parse_Date+0xd0>)
 80129b6:	fb82 1203 	smull	r1, r2, r2, r3
 80129ba:	1151      	asrs	r1, r2, #5
 80129bc:	17da      	asrs	r2, r3, #31
 80129be:	1a8a      	subs	r2, r1, r2
 80129c0:	2164      	movs	r1, #100	@ 0x64
 80129c2:	fb01 f202 	mul.w	r2, r1, r2
 80129c6:	1a9b      	subs	r3, r3, r2
 80129c8:	81bb      	strh	r3, [r7, #12]
 80129ca:	e004      	b.n	80129d6 <Parse_Date+0x9e>
			}
			else if(i > 2)
 80129cc:	89fb      	ldrh	r3, [r7, #14]
 80129ce:	2b02      	cmp	r3, #2
 80129d0:	d901      	bls.n	80129d6 <Parse_Date+0x9e>
			{
				return 1;
 80129d2:	2301      	movs	r3, #1
 80129d4:	e011      	b.n	80129fa <Parse_Date+0xc2>
			}


		   date[i] =val;
 80129d6:	89fb      	ldrh	r3, [r7, #14]
 80129d8:	683a      	ldr	r2, [r7, #0]
 80129da:	4413      	add	r3, r2
 80129dc:	89ba      	ldrh	r2, [r7, #12]
 80129de:	b2d2      	uxtb	r2, r2
 80129e0:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 80129e2:	4908      	ldr	r1, [pc, #32]	@ (8012a04 <Parse_Date+0xcc>)
 80129e4:	2000      	movs	r0, #0
 80129e6:	f00a fbb7 	bl	801d158 <strtok>
 80129ea:	60b8      	str	r0, [r7, #8]
		i++;
 80129ec:	89fb      	ldrh	r3, [r7, #14]
 80129ee:	3301      	adds	r3, #1
 80129f0:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d1b2      	bne.n	801295e <Parse_Date+0x26>
	}

	}

	return 0;
 80129f8:	2300      	movs	r3, #0

}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3710      	adds	r7, #16
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	08021fa0 	.word	0x08021fa0
 8012a08:	51eb851f 	.word	0x51eb851f

08012a0c <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8012a16:	2300      	movs	r3, #0
 8012a18:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8012a1e:	492a      	ldr	r1, [pc, #168]	@ (8012ac8 <Parse_Time+0xbc>)
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f00a fb99 	bl	801d158 <strtok>
 8012a26:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d143      	bne.n	8012ab6 <Parse_Time+0xaa>
			{
				return 1;
 8012a2e:	2301      	movs	r3, #1
 8012a30:	e045      	b.n	8012abe <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8012a32:	68b8      	ldr	r0, [r7, #8]
 8012a34:	f009 f8f8 	bl	801bc28 <atoi>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8012a3c:	89fb      	ldrh	r3, [r7, #14]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d10a      	bne.n	8012a58 <Parse_Time+0x4c>
 8012a42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012a46:	2b18      	cmp	r3, #24
 8012a48:	dc03      	bgt.n	8012a52 <Parse_Time+0x46>
 8012a4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	da02      	bge.n	8012a58 <Parse_Time+0x4c>
				{
					val= 24;
 8012a52:	2318      	movs	r3, #24
 8012a54:	81bb      	strh	r3, [r7, #12]
 8012a56:	e020      	b.n	8012a9a <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8012a58:	89fb      	ldrh	r3, [r7, #14]
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d10a      	bne.n	8012a74 <Parse_Time+0x68>
 8012a5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012a62:	2b3b      	cmp	r3, #59	@ 0x3b
 8012a64:	dc03      	bgt.n	8012a6e <Parse_Time+0x62>
 8012a66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	da02      	bge.n	8012a74 <Parse_Time+0x68>
				{
					val= 59;
 8012a6e:	233b      	movs	r3, #59	@ 0x3b
 8012a70:	81bb      	strh	r3, [r7, #12]
 8012a72:	e012      	b.n	8012a9a <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8012a74:	89fb      	ldrh	r3, [r7, #14]
 8012a76:	2b02      	cmp	r3, #2
 8012a78:	d10a      	bne.n	8012a90 <Parse_Time+0x84>
 8012a7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012a7e:	2b3b      	cmp	r3, #59	@ 0x3b
 8012a80:	dc03      	bgt.n	8012a8a <Parse_Time+0x7e>
 8012a82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	da02      	bge.n	8012a90 <Parse_Time+0x84>
				{
					val=59;
 8012a8a:	233b      	movs	r3, #59	@ 0x3b
 8012a8c:	81bb      	strh	r3, [r7, #12]
 8012a8e:	e004      	b.n	8012a9a <Parse_Time+0x8e>
				}
				else if(i > 2)
 8012a90:	89fb      	ldrh	r3, [r7, #14]
 8012a92:	2b02      	cmp	r3, #2
 8012a94:	d901      	bls.n	8012a9a <Parse_Time+0x8e>
				{
					return 1;
 8012a96:	2301      	movs	r3, #1
 8012a98:	e011      	b.n	8012abe <Parse_Time+0xb2>
				}


				time[i] =val;
 8012a9a:	89fb      	ldrh	r3, [r7, #14]
 8012a9c:	683a      	ldr	r2, [r7, #0]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	89ba      	ldrh	r2, [r7, #12]
 8012aa2:	b2d2      	uxtb	r2, r2
 8012aa4:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 8012aa6:	4908      	ldr	r1, [pc, #32]	@ (8012ac8 <Parse_Time+0xbc>)
 8012aa8:	2000      	movs	r0, #0
 8012aaa:	f00a fb55 	bl	801d158 <strtok>
 8012aae:	60b8      	str	r0, [r7, #8]
			i++;
 8012ab0:	89fb      	ldrh	r3, [r7, #14]
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d1ba      	bne.n	8012a32 <Parse_Time+0x26>
		}

		}

		return 0;
 8012abc:	2300      	movs	r3, #0
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	08021fa0 	.word	0x08021fa0

08012acc <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8012ad8:	78fb      	ldrb	r3, [r7, #3]
 8012ada:	091b      	lsrs	r3, r3, #4
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	4619      	mov	r1, r3
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	1c5a      	adds	r2, r3, #1
 8012ae4:	607a      	str	r2, [r7, #4]
 8012ae6:	4a08      	ldr	r2, [pc, #32]	@ (8012b08 <CharToHexasc+0x3c>)
 8012ae8:	5c52      	ldrb	r2, [r2, r1]
 8012aea:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 8012aec:	78fb      	ldrb	r3, [r7, #3]
 8012aee:	f003 030f 	and.w	r3, r3, #15
 8012af2:	4a05      	ldr	r2, [pc, #20]	@ (8012b08 <CharToHexasc+0x3c>)
 8012af4:	5cd2      	ldrb	r2, [r2, r3]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	701a      	strb	r2, [r3, #0]
}
 8012afa:	bf00      	nop
 8012afc:	370c      	adds	r7, #12
 8012afe:	46bd      	mov	sp, r7
 8012b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b04:	4770      	bx	lr
 8012b06:	bf00      	nop
 8012b08:	080227f8 	.word	0x080227f8

08012b0c <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b088      	sub	sp, #32
 8012b10:	af00      	add	r7, sp, #0
	adc_Disable();
 8012b12:	4830      	ldr	r0, [pc, #192]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b14:	f7f1 f96b 	bl	8003dee <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8012b18:	f107 0314 	add.w	r3, r7, #20
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	601a      	str	r2, [r3, #0]
 8012b20:	605a      	str	r2, [r3, #4]
 8012b22:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 8012b24:	4b2b      	ldr	r3, [pc, #172]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b26:	4a2c      	ldr	r2, [pc, #176]	@ (8012bd8 <adc_InitOneShotMode+0xcc>)
 8012b28:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b2c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8012b30:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8012b32:	4b28      	ldr	r3, [pc, #160]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b34:	2200      	movs	r2, #0
 8012b36:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8012b38:	4b26      	ldr	r3, [pc, #152]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8012b3e:	4b25      	ldr	r3, [pc, #148]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b40:	2200      	movs	r2, #0
 8012b42:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8012b44:	4b23      	ldr	r3, [pc, #140]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b46:	2200      	movs	r2, #0
 8012b48:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012b4c:	4b21      	ldr	r3, [pc, #132]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b4e:	2200      	movs	r2, #0
 8012b50:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8012b52:	4b20      	ldr	r3, [pc, #128]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b54:	4a21      	ldr	r2, [pc, #132]	@ (8012bdc <adc_InitOneShotMode+0xd0>)
 8012b56:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012b58:	4b1e      	ldr	r3, [pc, #120]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8012b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b60:	2201      	movs	r2, #1
 8012b62:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8012b64:	4b1b      	ldr	r3, [pc, #108]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b66:	2200      	movs	r2, #0
 8012b68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012b6c:	4b19      	ldr	r3, [pc, #100]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b6e:	2201      	movs	r2, #1
 8012b70:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8012b72:	4818      	ldr	r0, [pc, #96]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b74:	f7f1 f8f8 	bl	8003d68 <HAL_ADC_Init>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d001      	beq.n	8012b82 <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 8012b7e:	f7f0 fb3b 	bl	80031f8 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8012b82:	2300      	movs	r3, #0
 8012b84:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8012b86:	f107 0314 	add.w	r3, r7, #20
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	4811      	ldr	r0, [pc, #68]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012b8e:	f7f1 fcff 	bl	8004590 <HAL_ADCEx_MultiModeConfigChannel>
 8012b92:	4603      	mov	r3, r0
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d001      	beq.n	8012b9c <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 8012b98:	f7f0 fb2e 	bl	80031f8 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8012b9c:	1d3b      	adds	r3, r7, #4
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	601a      	str	r2, [r3, #0]
 8012ba2:	605a      	str	r2, [r3, #4]
 8012ba4:	609a      	str	r2, [r3, #8]
 8012ba6:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 8012ba8:	230a      	movs	r3, #10
 8012baa:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8012bac:	2301      	movs	r3, #1
 8012bae:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8012bb0:	2302      	movs	r3, #2
 8012bb2:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012bb8:	1d3b      	adds	r3, r7, #4
 8012bba:	4619      	mov	r1, r3
 8012bbc:	4805      	ldr	r0, [pc, #20]	@ (8012bd4 <adc_InitOneShotMode+0xc8>)
 8012bbe:	f7f1 fac9 	bl	8004154 <HAL_ADC_ConfigChannel>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d001      	beq.n	8012bcc <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8012bc8:	f7f0 fb16 	bl	80031f8 <Error_Handler>
		  }



}
 8012bcc:	bf00      	nop
 8012bce:	3720      	adds	r7, #32
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}
 8012bd4:	20001748 	.word	0x20001748
 8012bd8:	40012000 	.word	0x40012000
 8012bdc:	0f000001 	.word	0x0f000001

08012be0 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 8012be4:	4802      	ldr	r0, [pc, #8]	@ (8012bf0 <adc_Getval+0x10>)
 8012be6:	f7f1 faa7 	bl	8004138 <HAL_ADC_GetValue>
 8012bea:	4603      	mov	r3, r0

}
 8012bec:	4618      	mov	r0, r3
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	20001748 	.word	0x20001748
 8012bf4:	00000000 	.word	0x00000000

08012bf8 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b084      	sub	sp, #16
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8012c00:	f7ff ff84 	bl	8012b0c <adc_InitOneShotMode>
	HAL_Delay(1);
 8012c04:	2001      	movs	r0, #1
 8012c06:	f7f1 f847 	bl	8003c98 <HAL_Delay>
	adc_Start();
 8012c0a:	4847      	ldr	r0, [pc, #284]	@ (8012d28 <adc_Measure+0x130>)
 8012c0c:	f7f1 f922 	bl	8003e54 <HAL_ADC_Start>
	HAL_Delay(1);
 8012c10:	2001      	movs	r0, #1
 8012c12:	f7f1 f841 	bl	8003c98 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012c16:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012c1a:	4843      	ldr	r0, [pc, #268]	@ (8012d28 <adc_Measure+0x130>)
 8012c1c:	f7f1 fa01 	bl	8004022 <HAL_ADC_PollForConversion>
 8012c20:	4603      	mov	r3, r0
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d01d      	beq.n	8012c62 <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 8012c26:	2001      	movs	r0, #1
 8012c28:	f7f1 f836 	bl	8003c98 <HAL_Delay>
		   adc_Start();
 8012c2c:	483e      	ldr	r0, [pc, #248]	@ (8012d28 <adc_Measure+0x130>)
 8012c2e:	f7f1 f911 	bl	8003e54 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012c32:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012c36:	483c      	ldr	r0, [pc, #240]	@ (8012d28 <adc_Measure+0x130>)
 8012c38:	f7f1 f9f3 	bl	8004022 <HAL_ADC_PollForConversion>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d00f      	beq.n	8012c62 <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 8012c42:	2001      	movs	r0, #1
 8012c44:	f7f1 f828 	bl	8003c98 <HAL_Delay>
				adc_Start();
 8012c48:	4837      	ldr	r0, [pc, #220]	@ (8012d28 <adc_Measure+0x130>)
 8012c4a:	f7f1 f903 	bl	8003e54 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012c4e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012c52:	4835      	ldr	r0, [pc, #212]	@ (8012d28 <adc_Measure+0x130>)
 8012c54:	f7f1 f9e5 	bl	8004022 <HAL_ADC_PollForConversion>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d001      	beq.n	8012c62 <adc_Measure+0x6a>
				{
					return 0;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	e05a      	b.n	8012d18 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012c62:	4831      	ldr	r0, [pc, #196]	@ (8012d28 <adc_Measure+0x130>)
 8012c64:	f7f1 f9aa 	bl	8003fbc <HAL_ADC_Stop>

	val = adc_Getval();
 8012c68:	f7ff ffba 	bl	8012be0 <adc_Getval>
 8012c6c:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 8012c6e:	2001      	movs	r0, #1
 8012c70:	f7f1 f812 	bl	8003c98 <HAL_Delay>
	adc_Start();
 8012c74:	482c      	ldr	r0, [pc, #176]	@ (8012d28 <adc_Measure+0x130>)
 8012c76:	f7f1 f8ed 	bl	8003e54 <HAL_ADC_Start>
	HAL_Delay(1);
 8012c7a:	2001      	movs	r0, #1
 8012c7c:	f7f1 f80c 	bl	8003c98 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012c80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012c84:	4828      	ldr	r0, [pc, #160]	@ (8012d28 <adc_Measure+0x130>)
 8012c86:	f7f1 f9cc 	bl	8004022 <HAL_ADC_PollForConversion>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d01d      	beq.n	8012ccc <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8012c90:	2001      	movs	r0, #1
 8012c92:	f7f1 f801 	bl	8003c98 <HAL_Delay>
		   adc_Start();
 8012c96:	4824      	ldr	r0, [pc, #144]	@ (8012d28 <adc_Measure+0x130>)
 8012c98:	f7f1 f8dc 	bl	8003e54 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012c9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012ca0:	4821      	ldr	r0, [pc, #132]	@ (8012d28 <adc_Measure+0x130>)
 8012ca2:	f7f1 f9be 	bl	8004022 <HAL_ADC_PollForConversion>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d00f      	beq.n	8012ccc <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 8012cac:	2001      	movs	r0, #1
 8012cae:	f7f0 fff3 	bl	8003c98 <HAL_Delay>
				adc_Start();
 8012cb2:	481d      	ldr	r0, [pc, #116]	@ (8012d28 <adc_Measure+0x130>)
 8012cb4:	f7f1 f8ce 	bl	8003e54 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012cb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012cbc:	481a      	ldr	r0, [pc, #104]	@ (8012d28 <adc_Measure+0x130>)
 8012cbe:	f7f1 f9b0 	bl	8004022 <HAL_ADC_PollForConversion>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d001      	beq.n	8012ccc <adc_Measure+0xd4>
				{
					return 0;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	e025      	b.n	8012d18 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012ccc:	4816      	ldr	r0, [pc, #88]	@ (8012d28 <adc_Measure+0x130>)
 8012cce:	f7f1 f975 	bl	8003fbc <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 8012cd2:	f7ff ff85 	bl	8012be0 <adc_Getval>
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	4413      	add	r3, r2
 8012cdc:	085b      	lsrs	r3, r3, #1
 8012cde:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	ee07 3a90 	vmov	s15, r3
 8012ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cea:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8012d2c <adc_Measure+0x134>
 8012cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012cf2:	ee17 0a90 	vmov	r0, s15
 8012cf6:	f7ed fc3f 	bl	8000578 <__aeabi_f2d>
 8012cfa:	a309      	add	r3, pc, #36	@ (adr r3, 8012d20 <adc_Measure+0x128>)
 8012cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d00:	f7ed fc92 	bl	8000628 <__aeabi_dmul>
 8012d04:	4602      	mov	r2, r0
 8012d06:	460b      	mov	r3, r1
 8012d08:	4610      	mov	r0, r2
 8012d0a:	4619      	mov	r1, r3
 8012d0c:	f7ed ff84 	bl	8000c18 <__aeabi_d2f>
 8012d10:	4602      	mov	r2, r0
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	601a      	str	r2, [r3, #0]


	return 1;
 8012d16:	2301      	movs	r3, #1


}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3710      	adds	r7, #16
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}
 8012d20:	851eb852 	.word	0x851eb852
 8012d24:	3ff451eb 	.word	0x3ff451eb
 8012d28:	20001748 	.word	0x20001748
 8012d2c:	3a533333 	.word	0x3a533333

08012d30 <init_driver>:

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

static uint8_t _i2c_address;

void init_driver(uint8_t i2c_address) {
 8012d30:	b480      	push	{r7}
 8012d32:	b083      	sub	sp, #12
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	4603      	mov	r3, r0
 8012d38:	71fb      	strb	r3, [r7, #7]
    _i2c_address = i2c_address;
 8012d3a:	4a04      	ldr	r2, [pc, #16]	@ (8012d4c <init_driver+0x1c>)
 8012d3c:	79fb      	ldrb	r3, [r7, #7]
 8012d3e:	7013      	strb	r3, [r2, #0]
}
 8012d40:	bf00      	nop
 8012d42:	370c      	adds	r7, #12
 8012d44:	46bd      	mov	sp, r7
 8012d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4a:	4770      	bx	lr
 8012d4c:	20001aa0 	.word	0x20001aa0

08012d50 <scd30_await_data_ready>:

int16_t scd30_await_data_ready() {
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
    uint16_t data_ready = 0;
 8012d56:	2300      	movs	r3, #0
 8012d58:	80bb      	strh	r3, [r7, #4]
    int16_t local_error = 0;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	80fb      	strh	r3, [r7, #6]
    local_error = scd30_get_data_ready(&data_ready);
 8012d5e:	1d3b      	adds	r3, r7, #4
 8012d60:	4618      	mov	r0, r3
 8012d62:	f000 f8ab 	bl	8012ebc <scd30_get_data_ready>
 8012d66:	4603      	mov	r3, r0
 8012d68:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8012d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d012      	beq.n	8012d98 <scd30_await_data_ready+0x48>
        return local_error;
 8012d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d76:	e014      	b.n	8012da2 <scd30_await_data_ready+0x52>
    }
    while (data_ready == 0) {
        sensirion_hal_sleep_us(100000);
 8012d78:	480c      	ldr	r0, [pc, #48]	@ (8012dac <scd30_await_data_ready+0x5c>)
 8012d7a:	f000 fbb9 	bl	80134f0 <sensirion_i2c_hal_sleep_usec>
        local_error = scd30_get_data_ready(&data_ready);
 8012d7e:	1d3b      	adds	r3, r7, #4
 8012d80:	4618      	mov	r0, r3
 8012d82:	f000 f89b 	bl	8012ebc <scd30_get_data_ready>
 8012d86:	4603      	mov	r3, r0
 8012d88:	80fb      	strh	r3, [r7, #6]
        if (local_error != NO_ERROR) {
 8012d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d002      	beq.n	8012d98 <scd30_await_data_ready+0x48>
            return local_error;
 8012d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d96:	e004      	b.n	8012da2 <scd30_await_data_ready+0x52>
    while (data_ready == 0) {
 8012d98:	88bb      	ldrh	r3, [r7, #4]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d0ec      	beq.n	8012d78 <scd30_await_data_ready+0x28>
        }
    }
    return local_error;
 8012d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3708      	adds	r7, #8
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	000186a0 	.word	0x000186a0

08012db0 <scd30_blocking_read_measurement_data>:

int16_t scd30_blocking_read_measurement_data(float* co2_concentration,
                                             float* temperature,
                                             float* humidity) {
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b086      	sub	sp, #24
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
    int16_t local_error = 0;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	82fb      	strh	r3, [r7, #22]
    local_error = scd30_await_data_ready();
 8012dc0:	f7ff ffc6 	bl	8012d50 <scd30_await_data_ready>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8012dc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d002      	beq.n	8012dd6 <scd30_blocking_read_measurement_data+0x26>
        return local_error;
 8012dd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012dd4:	e008      	b.n	8012de8 <scd30_blocking_read_measurement_data+0x38>
    }
    local_error =
        scd30_read_measurement_data(co2_concentration, temperature, humidity);
 8012dd6:	687a      	ldr	r2, [r7, #4]
 8012dd8:	68b9      	ldr	r1, [r7, #8]
 8012dda:	68f8      	ldr	r0, [r7, #12]
 8012ddc:	f000 f8be 	bl	8012f5c <scd30_read_measurement_data>
 8012de0:	4603      	mov	r3, r0
 8012de2:	82fb      	strh	r3, [r7, #22]
    return local_error;
 8012de4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3718      	adds	r7, #24
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}

08012df0 <scd30_start_periodic_measurement>:

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure) {
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b086      	sub	sp, #24
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	4603      	mov	r3, r0
 8012df8:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8012dfe:	2300      	movs	r3, #0
 8012e00:	60fb      	str	r3, [r7, #12]
 8012e02:	2300      	movs	r3, #0
 8012e04:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x10);
 8012e0a:	8ab9      	ldrh	r1, [r7, #20]
 8012e0c:	f107 030c 	add.w	r3, r7, #12
 8012e10:	2210      	movs	r2, #16
 8012e12:	4618      	mov	r0, r3
 8012e14:	f000 fa2c 	bl	8013270 <sensirion_i2c_add_command_to_buffer>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 8012e1c:	88fa      	ldrh	r2, [r7, #6]
 8012e1e:	8ab9      	ldrh	r1, [r7, #20]
 8012e20:	f107 030c 	add.w	r3, r7, #12
 8012e24:	4618      	mov	r0, r3
 8012e26:	f000 fa46 	bl	80132b6 <sensirion_i2c_add_uint16_t_to_buffer>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, ambient_pressure);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8012e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8012e5c <scd30_start_periodic_measurement+0x6c>)
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	8aba      	ldrh	r2, [r7, #20]
 8012e34:	f107 010c 	add.w	r1, r7, #12
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f000 fa6c 	bl	8013316 <sensirion_i2c_write_data>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8012e42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d002      	beq.n	8012e50 <scd30_start_periodic_measurement+0x60>
        return local_error;
 8012e4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012e4e:	e001      	b.n	8012e54 <scd30_start_periodic_measurement+0x64>
    }
    return local_error;
 8012e50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	3718      	adds	r7, #24
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}
 8012e5c:	20001aa0 	.word	0x20001aa0

08012e60 <scd30_stop_periodic_measurement>:

int16_t scd30_stop_periodic_measurement() {
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8012e66:	2300      	movs	r3, #0
 8012e68:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x104);
 8012e72:	88b9      	ldrh	r1, [r7, #4]
 8012e74:	463b      	mov	r3, r7
 8012e76:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f000 f9f8 	bl	8013270 <sensirion_i2c_add_command_to_buffer>
 8012e80:	4603      	mov	r3, r0
 8012e82:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8012e84:	4b0c      	ldr	r3, [pc, #48]	@ (8012eb8 <scd30_stop_periodic_measurement+0x58>)
 8012e86:	781b      	ldrb	r3, [r3, #0]
 8012e88:	88ba      	ldrh	r2, [r7, #4]
 8012e8a:	4639      	mov	r1, r7
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f000 fa42 	bl	8013316 <sensirion_i2c_write_data>
 8012e92:	4603      	mov	r3, r0
 8012e94:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8012e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d002      	beq.n	8012ea4 <scd30_stop_periodic_measurement+0x44>
        return local_error;
 8012e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ea2:	e005      	b.n	8012eb0 <scd30_stop_periodic_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8012ea4:	f242 7010 	movw	r0, #10000	@ 0x2710
 8012ea8:	f000 fb22 	bl	80134f0 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8012eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3708      	adds	r7, #8
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	20001aa0 	.word	0x20001aa0

08012ebc <scd30_get_data_ready>:
    }
    *interval = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_get_data_ready(uint16_t* data_ready_flag) {
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8012ec8:	4b22      	ldr	r3, [pc, #136]	@ (8012f54 <scd30_get_data_ready+0x98>)
 8012eca:	881b      	ldrh	r3, [r3, #0]
 8012ecc:	813b      	strh	r3, [r7, #8]
 8012ece:	2300      	movs	r3, #0
 8012ed0:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x202);
 8012ed6:	89b9      	ldrh	r1, [r7, #12]
 8012ed8:	f107 0308 	add.w	r3, r7, #8
 8012edc:	f240 2202 	movw	r2, #514	@ 0x202
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f000 f9c5 	bl	8013270 <sensirion_i2c_add_command_to_buffer>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8012eea:	4b1b      	ldr	r3, [pc, #108]	@ (8012f58 <scd30_get_data_ready+0x9c>)
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	89ba      	ldrh	r2, [r7, #12]
 8012ef0:	f107 0108 	add.w	r1, r7, #8
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f000 fa0e 	bl	8013316 <sensirion_i2c_write_data>
 8012efa:	4603      	mov	r3, r0
 8012efc:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8012efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d002      	beq.n	8012f0c <scd30_get_data_ready+0x50>
        return local_error;
 8012f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f0a:	e01f      	b.n	8012f4c <scd30_get_data_ready+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8012f0c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8012f10:	f000 faee 	bl	80134f0 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8012f14:	4b10      	ldr	r3, [pc, #64]	@ (8012f58 <scd30_get_data_ready+0x9c>)
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	f107 0108 	add.w	r1, r7, #8
 8012f1c:	2202      	movs	r2, #2
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f000 fa0c 	bl	801333c <sensirion_i2c_read_data_inplace>
 8012f24:	4603      	mov	r3, r0
 8012f26:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8012f28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d002      	beq.n	8012f36 <scd30_get_data_ready+0x7a>
        return local_error;
 8012f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f34:	e00a      	b.n	8012f4c <scd30_get_data_ready+0x90>
    }
    *data_ready_flag = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8012f36:	f107 0308 	add.w	r3, r7, #8
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f000 f906 	bl	801314c <sensirion_common_bytes_to_uint16_t>
 8012f40:	4603      	mov	r3, r0
 8012f42:	461a      	mov	r2, r3
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	801a      	strh	r2, [r3, #0]
    return local_error;
 8012f48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3710      	adds	r7, #16
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	08021fa4 	.word	0x08021fa4
 8012f58:	20001aa0 	.word	0x20001aa0

08012f5c <scd30_read_measurement_data>:

int16_t scd30_read_measurement_data(float* co2_concentration,
                                    float* temperature, float* humidity) {
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b08a      	sub	sp, #40	@ 0x28
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
    int16_t local_error = NO_ERROR;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t local_buffer[18] = {0};
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	613b      	str	r3, [r7, #16]
 8012f70:	f107 0314 	add.w	r3, r7, #20
 8012f74:	2200      	movs	r2, #0
 8012f76:	601a      	str	r2, [r3, #0]
 8012f78:	605a      	str	r2, [r3, #4]
 8012f7a:	609a      	str	r2, [r3, #8]
 8012f7c:	819a      	strh	r2, [r3, #12]
    uint16_t local_offset = 0;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x300);
 8012f82:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8012f84:	f107 0310 	add.w	r3, r7, #16
 8012f88:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f000 f96f 	bl	8013270 <sensirion_i2c_add_command_to_buffer>
 8012f92:	4603      	mov	r3, r0
 8012f94:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8012f96:	4b26      	ldr	r3, [pc, #152]	@ (8013030 <scd30_read_measurement_data+0xd4>)
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012f9c:	f107 0110 	add.w	r1, r7, #16
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f000 f9b8 	bl	8013316 <sensirion_i2c_write_data>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 8012faa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d002      	beq.n	8012fb8 <scd30_read_measurement_data+0x5c>
        return local_error;
 8012fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012fb6:	e036      	b.n	8013026 <scd30_read_measurement_data+0xca>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8012fb8:	f242 7010 	movw	r0, #10000	@ 0x2710
 8012fbc:	f000 fa98 	bl	80134f0 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 12);
 8012fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8013030 <scd30_read_measurement_data+0xd4>)
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	f107 0110 	add.w	r1, r7, #16
 8012fc8:	220c      	movs	r2, #12
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f000 f9b6 	bl	801333c <sensirion_i2c_read_data_inplace>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 8012fd4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d002      	beq.n	8012fe2 <scd30_read_measurement_data+0x86>
        return local_error;
 8012fdc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012fe0:	e021      	b.n	8013026 <scd30_read_measurement_data+0xca>
    }
    *co2_concentration = sensirion_common_bytes_to_float(&local_buffer[0]);
 8012fe2:	f107 0310 	add.w	r3, r7, #16
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f000 f8e0 	bl	80131ac <sensirion_common_bytes_to_float>
 8012fec:	eef0 7a40 	vmov.f32	s15, s0
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_common_bytes_to_float(&local_buffer[4]);
 8012ff6:	f107 0310 	add.w	r3, r7, #16
 8012ffa:	3304      	adds	r3, #4
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f000 f8d5 	bl	80131ac <sensirion_common_bytes_to_float>
 8013002:	eef0 7a40 	vmov.f32	s15, s0
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_common_bytes_to_float(&local_buffer[8]);
 801300c:	f107 0310 	add.w	r3, r7, #16
 8013010:	3308      	adds	r3, #8
 8013012:	4618      	mov	r0, r3
 8013014:	f000 f8ca 	bl	80131ac <sensirion_common_bytes_to_float>
 8013018:	eef0 7a40 	vmov.f32	s15, s0
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	edc3 7a00 	vstr	s15, [r3]
    return local_error;
 8013022:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8013026:	4618      	mov	r0, r3
 8013028:	3728      	adds	r7, #40	@ 0x28
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	20001aa0 	.word	0x20001aa0

08013034 <scd30_force_recalibration>:
    }
    *is_active = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_force_recalibration(uint16_t co2_ref_concentration) {
 8013034:	b580      	push	{r7, lr}
 8013036:	b086      	sub	sp, #24
 8013038:	af00      	add	r7, sp, #0
 801303a:	4603      	mov	r3, r0
 801303c:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801303e:	2300      	movs	r3, #0
 8013040:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8013042:	2300      	movs	r3, #0
 8013044:	60fb      	str	r3, [r7, #12]
 8013046:	2300      	movs	r3, #0
 8013048:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 801304a:	2300      	movs	r3, #0
 801304c:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 801304e:	8ab9      	ldrh	r1, [r7, #20]
 8013050:	f107 030c 	add.w	r3, r7, #12
 8013054:	f245 2204 	movw	r2, #20996	@ 0x5204
 8013058:	4618      	mov	r0, r3
 801305a:	f000 f909 	bl	8013270 <sensirion_i2c_add_command_to_buffer>
 801305e:	4603      	mov	r3, r0
 8013060:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 8013062:	88fa      	ldrh	r2, [r7, #6]
 8013064:	8ab9      	ldrh	r1, [r7, #20]
 8013066:	f107 030c 	add.w	r3, r7, #12
 801306a:	4618      	mov	r0, r3
 801306c:	f000 f923 	bl	80132b6 <sensirion_i2c_add_uint16_t_to_buffer>
 8013070:	4603      	mov	r3, r0
 8013072:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, co2_ref_concentration);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8013074:	4b0d      	ldr	r3, [pc, #52]	@ (80130ac <scd30_force_recalibration+0x78>)
 8013076:	781b      	ldrb	r3, [r3, #0]
 8013078:	8aba      	ldrh	r2, [r7, #20]
 801307a:	f107 010c 	add.w	r1, r7, #12
 801307e:	4618      	mov	r0, r3
 8013080:	f000 f949 	bl	8013316 <sensirion_i2c_write_data>
 8013084:	4603      	mov	r3, r0
 8013086:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8013088:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d002      	beq.n	8013096 <scd30_force_recalibration+0x62>
        return local_error;
 8013090:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013094:	e005      	b.n	80130a2 <scd30_force_recalibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8013096:	f242 7010 	movw	r0, #10000	@ 0x2710
 801309a:	f000 fa29 	bl	80134f0 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801309e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3718      	adds	r7, #24
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	bf00      	nop
 80130ac:	20001aa0 	.word	0x20001aa0

080130b0 <scd30_read_firmware_version>:
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
    return local_error;
}

int16_t scd30_read_firmware_version(uint8_t* major, uint8_t* minor) {
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 80130ba:	2300      	movs	r3, #0
 80130bc:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80130be:	4b21      	ldr	r3, [pc, #132]	@ (8013144 <scd30_read_firmware_version+0x94>)
 80130c0:	881b      	ldrh	r3, [r3, #0]
 80130c2:	813b      	strh	r3, [r7, #8]
 80130c4:	2300      	movs	r3, #0
 80130c6:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80130c8:	2300      	movs	r3, #0
 80130ca:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd100);
 80130cc:	89b9      	ldrh	r1, [r7, #12]
 80130ce:	f107 0308 	add.w	r3, r7, #8
 80130d2:	f44f 4251 	mov.w	r2, #53504	@ 0xd100
 80130d6:	4618      	mov	r0, r3
 80130d8:	f000 f8ca 	bl	8013270 <sensirion_i2c_add_command_to_buffer>
 80130dc:	4603      	mov	r3, r0
 80130de:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80130e0:	4b19      	ldr	r3, [pc, #100]	@ (8013148 <scd30_read_firmware_version+0x98>)
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	89ba      	ldrh	r2, [r7, #12]
 80130e6:	f107 0108 	add.w	r1, r7, #8
 80130ea:	4618      	mov	r0, r3
 80130ec:	f000 f913 	bl	8013316 <sensirion_i2c_write_data>
 80130f0:	4603      	mov	r3, r0
 80130f2:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80130f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d002      	beq.n	8013102 <scd30_read_firmware_version+0x52>
        return local_error;
 80130fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013100:	e01c      	b.n	801313c <scd30_read_firmware_version+0x8c>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8013102:	f242 7010 	movw	r0, #10000	@ 0x2710
 8013106:	f000 f9f3 	bl	80134f0 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 801310a:	4b0f      	ldr	r3, [pc, #60]	@ (8013148 <scd30_read_firmware_version+0x98>)
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	f107 0108 	add.w	r1, r7, #8
 8013112:	2202      	movs	r2, #2
 8013114:	4618      	mov	r0, r3
 8013116:	f000 f911 	bl	801333c <sensirion_i2c_read_data_inplace>
 801311a:	4603      	mov	r3, r0
 801311c:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801311e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <scd30_read_firmware_version+0x7c>
        return local_error;
 8013126:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801312a:	e007      	b.n	801313c <scd30_read_firmware_version+0x8c>
    }
    *major = (uint8_t)local_buffer[0];
 801312c:	7a3a      	ldrb	r2, [r7, #8]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	701a      	strb	r2, [r3, #0]
    *minor = (uint8_t)local_buffer[1];
 8013132:	7a7a      	ldrb	r2, [r7, #9]
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	701a      	strb	r2, [r3, #0]
    return local_error;
 8013138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801313c:	4618      	mov	r0, r3
 801313e:	3710      	adds	r7, #16
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	08021fa4 	.word	0x08021fa4
 8013148:	20001aa0 	.word	0x20001aa0

0801314c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	021b      	lsls	r3, r3, #8
 801315a:	b21a      	sxth	r2, r3
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	3301      	adds	r3, #1
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	b21b      	sxth	r3, r3
 8013164:	4313      	orrs	r3, r2
 8013166:	b21b      	sxth	r3, r3
 8013168:	b29b      	uxth	r3, r3
}
 801316a:	4618      	mov	r0, r3
 801316c:	370c      	adds	r7, #12
 801316e:	46bd      	mov	sp, r7
 8013170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013174:	4770      	bx	lr

08013176 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8013176:	b480      	push	{r7}
 8013178:	b083      	sub	sp, #12
 801317a:	af00      	add	r7, sp, #0
 801317c:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	061a      	lsls	r2, r3, #24
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	3301      	adds	r3, #1
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	041b      	lsls	r3, r3, #16
 801318c:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	3302      	adds	r3, #2
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8013196:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	3203      	adds	r2, #3
 801319c:	7812      	ldrb	r2, [r2, #0]
 801319e:	4313      	orrs	r3, r2
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	370c      	adds	r7, #12
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr

080131ac <sensirion_common_bytes_to_float>:

int32_t sensirion_common_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_common_bytes_to_uint32_t(bytes);
}

float sensirion_common_bytes_to_float(const uint8_t* bytes) {
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b084      	sub	sp, #16
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_common_bytes_to_uint32_t(bytes);
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f7ff ffde 	bl	8013176 <sensirion_common_bytes_to_uint32_t>
 80131ba:	4603      	mov	r3, r0
 80131bc:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	ee07 3a90 	vmov	s15, r3
}
 80131c4:	eeb0 0a67 	vmov.f32	s0, s15
 80131c8:	3710      	adds	r7, #16
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80131ce:	b480      	push	{r7}
 80131d0:	b085      	sub	sp, #20
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
 80131d6:	460b      	mov	r3, r1
 80131d8:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80131da:	23ff      	movs	r3, #255	@ 0xff
 80131dc:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80131de:	2300      	movs	r3, #0
 80131e0:	81fb      	strh	r3, [r7, #14]
 80131e2:	e021      	b.n	8013228 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 80131e4:	89fb      	ldrh	r3, [r7, #14]
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	4413      	add	r3, r2
 80131ea:	781a      	ldrb	r2, [r3, #0]
 80131ec:	7b7b      	ldrb	r3, [r7, #13]
 80131ee:	4053      	eors	r3, r2
 80131f0:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80131f2:	2308      	movs	r3, #8
 80131f4:	733b      	strb	r3, [r7, #12]
 80131f6:	e011      	b.n	801321c <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 80131f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	da07      	bge.n	8013210 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8013200:	7b7b      	ldrb	r3, [r7, #13]
 8013202:	005b      	lsls	r3, r3, #1
 8013204:	b25b      	sxtb	r3, r3
 8013206:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 801320a:	b25b      	sxtb	r3, r3
 801320c:	737b      	strb	r3, [r7, #13]
 801320e:	e002      	b.n	8013216 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8013210:	7b7b      	ldrb	r3, [r7, #13]
 8013212:	005b      	lsls	r3, r3, #1
 8013214:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8013216:	7b3b      	ldrb	r3, [r7, #12]
 8013218:	3b01      	subs	r3, #1
 801321a:	733b      	strb	r3, [r7, #12]
 801321c:	7b3b      	ldrb	r3, [r7, #12]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d1ea      	bne.n	80131f8 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8013222:	89fb      	ldrh	r3, [r7, #14]
 8013224:	3301      	adds	r3, #1
 8013226:	81fb      	strh	r3, [r7, #14]
 8013228:	89fa      	ldrh	r2, [r7, #14]
 801322a:	887b      	ldrh	r3, [r7, #2]
 801322c:	429a      	cmp	r2, r3
 801322e:	d3d9      	bcc.n	80131e4 <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8013230:	7b7b      	ldrb	r3, [r7, #13]
}
 8013232:	4618      	mov	r0, r3
 8013234:	3714      	adds	r7, #20
 8013236:	46bd      	mov	sp, r7
 8013238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323c:	4770      	bx	lr

0801323e <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 801323e:	b580      	push	{r7, lr}
 8013240:	b082      	sub	sp, #8
 8013242:	af00      	add	r7, sp, #0
 8013244:	6078      	str	r0, [r7, #4]
 8013246:	460b      	mov	r3, r1
 8013248:	807b      	strh	r3, [r7, #2]
 801324a:	4613      	mov	r3, r2
 801324c:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 801324e:	887b      	ldrh	r3, [r7, #2]
 8013250:	4619      	mov	r1, r3
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f7ff ffbb 	bl	80131ce <sensirion_i2c_generate_crc>
 8013258:	4603      	mov	r3, r0
 801325a:	461a      	mov	r2, r3
 801325c:	787b      	ldrb	r3, [r7, #1]
 801325e:	4293      	cmp	r3, r2
 8013260:	d001      	beq.n	8013266 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8013262:	2301      	movs	r3, #1
 8013264:	e000      	b.n	8013268 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8013266:	2300      	movs	r3, #0
}
 8013268:	4618      	mov	r0, r3
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8013270:	b480      	push	{r7}
 8013272:	b083      	sub	sp, #12
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	460b      	mov	r3, r1
 801327a:	807b      	strh	r3, [r7, #2]
 801327c:	4613      	mov	r3, r2
 801327e:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8013280:	883b      	ldrh	r3, [r7, #0]
 8013282:	0a1b      	lsrs	r3, r3, #8
 8013284:	b29a      	uxth	r2, r3
 8013286:	887b      	ldrh	r3, [r7, #2]
 8013288:	1c59      	adds	r1, r3, #1
 801328a:	8079      	strh	r1, [r7, #2]
 801328c:	4619      	mov	r1, r3
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	440b      	add	r3, r1
 8013292:	b2d2      	uxtb	r2, r2
 8013294:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8013296:	887b      	ldrh	r3, [r7, #2]
 8013298:	1c5a      	adds	r2, r3, #1
 801329a:	807a      	strh	r2, [r7, #2]
 801329c:	461a      	mov	r2, r3
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	4413      	add	r3, r2
 80132a2:	883a      	ldrh	r2, [r7, #0]
 80132a4:	b2d2      	uxtb	r2, r2
 80132a6:	701a      	strb	r2, [r3, #0]
    return offset;
 80132a8:	887b      	ldrh	r3, [r7, #2]
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	370c      	adds	r7, #12
 80132ae:	46bd      	mov	sp, r7
 80132b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b4:	4770      	bx	lr

080132b6 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 80132b6:	b590      	push	{r4, r7, lr}
 80132b8:	b083      	sub	sp, #12
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
 80132be:	460b      	mov	r3, r1
 80132c0:	807b      	strh	r3, [r7, #2]
 80132c2:	4613      	mov	r3, r2
 80132c4:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 80132c6:	883b      	ldrh	r3, [r7, #0]
 80132c8:	0a1b      	lsrs	r3, r3, #8
 80132ca:	b29a      	uxth	r2, r3
 80132cc:	887b      	ldrh	r3, [r7, #2]
 80132ce:	1c59      	adds	r1, r3, #1
 80132d0:	8079      	strh	r1, [r7, #2]
 80132d2:	4619      	mov	r1, r3
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	440b      	add	r3, r1
 80132d8:	b2d2      	uxtb	r2, r2
 80132da:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 80132dc:	887b      	ldrh	r3, [r7, #2]
 80132de:	1c5a      	adds	r2, r3, #1
 80132e0:	807a      	strh	r2, [r7, #2]
 80132e2:	461a      	mov	r2, r3
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	4413      	add	r3, r2
 80132e8:	883a      	ldrh	r2, [r7, #0]
 80132ea:	b2d2      	uxtb	r2, r2
 80132ec:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 80132ee:	887b      	ldrh	r3, [r7, #2]
 80132f0:	3b02      	subs	r3, #2
 80132f2:	687a      	ldr	r2, [r7, #4]
 80132f4:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 80132f6:	887b      	ldrh	r3, [r7, #2]
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	18d4      	adds	r4, r2, r3
 80132fc:	2102      	movs	r1, #2
 80132fe:	f7ff ff66 	bl	80131ce <sensirion_i2c_generate_crc>
 8013302:	4603      	mov	r3, r0
 8013304:	7023      	strb	r3, [r4, #0]
    offset++;
 8013306:	887b      	ldrh	r3, [r7, #2]
 8013308:	3301      	adds	r3, #1
 801330a:	807b      	strh	r3, [r7, #2]

    return offset;
 801330c:	887b      	ldrh	r3, [r7, #2]
}
 801330e:	4618      	mov	r0, r3
 8013310:	370c      	adds	r7, #12
 8013312:	46bd      	mov	sp, r7
 8013314:	bd90      	pop	{r4, r7, pc}

08013316 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8013316:	b580      	push	{r7, lr}
 8013318:	b082      	sub	sp, #8
 801331a:	af00      	add	r7, sp, #0
 801331c:	4603      	mov	r3, r0
 801331e:	6039      	str	r1, [r7, #0]
 8013320:	71fb      	strb	r3, [r7, #7]
 8013322:	4613      	mov	r3, r2
 8013324:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8013326:	88ba      	ldrh	r2, [r7, #4]
 8013328:	79fb      	ldrb	r3, [r7, #7]
 801332a:	6839      	ldr	r1, [r7, #0]
 801332c:	4618      	mov	r0, r3
 801332e:	f000 f8c3 	bl	80134b8 <sensirion_i2c_hal_write>
 8013332:	4603      	mov	r3, r0
}
 8013334:	4618      	mov	r0, r3
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	4603      	mov	r3, r0
 8013344:	6039      	str	r1, [r7, #0]
 8013346:	71fb      	strb	r3, [r7, #7]
 8013348:	4613      	mov	r3, r2
 801334a:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 801334c:	88bb      	ldrh	r3, [r7, #4]
 801334e:	085b      	lsrs	r3, r3, #1
 8013350:	b29b      	uxth	r3, r3
 8013352:	461a      	mov	r2, r3
 8013354:	0052      	lsls	r2, r2, #1
 8013356:	4413      	add	r3, r2
 8013358:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 801335a:	88bb      	ldrh	r3, [r7, #4]
 801335c:	f003 0301 	and.w	r3, r3, #1
 8013360:	b29b      	uxth	r3, r3
 8013362:	2b00      	cmp	r3, #0
 8013364:	d001      	beq.n	801336a <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8013366:	2304      	movs	r3, #4
 8013368:	e047      	b.n	80133fa <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 801336a:	897a      	ldrh	r2, [r7, #10]
 801336c:	79fb      	ldrb	r3, [r7, #7]
 801336e:	6839      	ldr	r1, [r7, #0]
 8013370:	4618      	mov	r0, r3
 8013372:	f000 f885 	bl	8013480 <sensirion_i2c_hal_read>
 8013376:	4603      	mov	r3, r0
 8013378:	813b      	strh	r3, [r7, #8]
    if (error) {
 801337a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d002      	beq.n	8013388 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8013382:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013386:	e038      	b.n	80133fa <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8013388:	2300      	movs	r3, #0
 801338a:	81fb      	strh	r3, [r7, #14]
 801338c:	2300      	movs	r3, #0
 801338e:	81bb      	strh	r3, [r7, #12]
 8013390:	e02e      	b.n	80133f0 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8013392:	89fb      	ldrh	r3, [r7, #14]
 8013394:	683a      	ldr	r2, [r7, #0]
 8013396:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8013398:	89fb      	ldrh	r3, [r7, #14]
 801339a:	3302      	adds	r3, #2
 801339c:	683a      	ldr	r2, [r7, #0]
 801339e:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80133a0:	781b      	ldrb	r3, [r3, #0]
 80133a2:	461a      	mov	r2, r3
 80133a4:	2102      	movs	r1, #2
 80133a6:	f7ff ff4a 	bl	801323e <sensirion_i2c_check_crc>
 80133aa:	4603      	mov	r3, r0
 80133ac:	813b      	strh	r3, [r7, #8]
        if (error) {
 80133ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d002      	beq.n	80133bc <sensirion_i2c_read_data_inplace+0x80>
            return error;
 80133b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80133ba:	e01e      	b.n	80133fa <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 80133bc:	89fb      	ldrh	r3, [r7, #14]
 80133be:	683a      	ldr	r2, [r7, #0]
 80133c0:	441a      	add	r2, r3
 80133c2:	89bb      	ldrh	r3, [r7, #12]
 80133c4:	1c59      	adds	r1, r3, #1
 80133c6:	81b9      	strh	r1, [r7, #12]
 80133c8:	4619      	mov	r1, r3
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	440b      	add	r3, r1
 80133ce:	7812      	ldrb	r2, [r2, #0]
 80133d0:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80133d2:	89fb      	ldrh	r3, [r7, #14]
 80133d4:	3301      	adds	r3, #1
 80133d6:	683a      	ldr	r2, [r7, #0]
 80133d8:	441a      	add	r2, r3
 80133da:	89bb      	ldrh	r3, [r7, #12]
 80133dc:	1c59      	adds	r1, r3, #1
 80133de:	81b9      	strh	r1, [r7, #12]
 80133e0:	4619      	mov	r1, r3
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	440b      	add	r3, r1
 80133e6:	7812      	ldrb	r2, [r2, #0]
 80133e8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80133ea:	89fb      	ldrh	r3, [r7, #14]
 80133ec:	3303      	adds	r3, #3
 80133ee:	81fb      	strh	r3, [r7, #14]
 80133f0:	89fa      	ldrh	r2, [r7, #14]
 80133f2:	897b      	ldrh	r3, [r7, #10]
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d3cc      	bcc.n	8013392 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 80133f8:	2300      	movs	r3, #0
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	3710      	adds	r7, #16
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}
	...

08013404 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8013404:	b580      	push	{r7, lr}
 8013406:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8013408:	4814      	ldr	r0, [pc, #80]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 801340a:	f7f2 fd93 	bl	8005f34 <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 801340e:	4b13      	ldr	r3, [pc, #76]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 8013410:	4a13      	ldr	r2, [pc, #76]	@ (8013460 <sensirion_i2c_hal_init+0x5c>)
 8013412:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 8013414:	4b11      	ldr	r3, [pc, #68]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 8013416:	4a13      	ldr	r2, [pc, #76]	@ (8013464 <sensirion_i2c_hal_init+0x60>)
 8013418:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801341a:	4b10      	ldr	r3, [pc, #64]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 801341c:	2200      	movs	r2, #0
 801341e:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8013420:	4b0e      	ldr	r3, [pc, #56]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 8013422:	2200      	movs	r2, #0
 8013424:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013426:	4b0d      	ldr	r3, [pc, #52]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 8013428:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801342c:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801342e:	4b0b      	ldr	r3, [pc, #44]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 8013430:	2200      	movs	r2, #0
 8013432:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8013434:	4b09      	ldr	r3, [pc, #36]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 8013436:	2200      	movs	r2, #0
 8013438:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801343a:	4b08      	ldr	r3, [pc, #32]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 801343c:	2200      	movs	r2, #0
 801343e:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013440:	4b06      	ldr	r3, [pc, #24]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 8013442:	2200      	movs	r2, #0
 8013444:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013446:	4805      	ldr	r0, [pc, #20]	@ (801345c <sensirion_i2c_hal_init+0x58>)
 8013448:	f7f2 fc30 	bl	8005cac <HAL_I2C_Init>
 801344c:	4603      	mov	r3, r0
 801344e:	2b00      	cmp	r3, #0
 8013450:	d001      	beq.n	8013456 <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8013452:	f7ef fed1 	bl	80031f8 <Error_Handler>
	  }
}
 8013456:	bf00      	nop
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	20001790 	.word	0x20001790
 8013460:	40005400 	.word	0x40005400
 8013464:	000186a0 	.word	0x000186a0

08013468 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8013468:	b580      	push	{r7, lr}
 801346a:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 801346c:	4803      	ldr	r0, [pc, #12]	@ (801347c <sensirion_i2c_hal_free+0x14>)
 801346e:	f7f2 fd61 	bl	8005f34 <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8013472:	4802      	ldr	r0, [pc, #8]	@ (801347c <sensirion_i2c_hal_free+0x14>)
 8013474:	f7ef ff9a 	bl	80033ac <HAL_I2C_MspDeInit>
}
 8013478:	bf00      	nop
 801347a:	bd80      	pop	{r7, pc}
 801347c:	20001790 	.word	0x20001790

08013480 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af02      	add	r7, sp, #8
 8013486:	4603      	mov	r3, r0
 8013488:	6039      	str	r1, [r7, #0]
 801348a:	71fb      	strb	r3, [r7, #7]
 801348c:	4613      	mov	r3, r2
 801348e:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8013490:	79fb      	ldrb	r3, [r7, #7]
 8013492:	b29b      	uxth	r3, r3
 8013494:	005b      	lsls	r3, r3, #1
 8013496:	b299      	uxth	r1, r3
 8013498:	88bb      	ldrh	r3, [r7, #4]
 801349a:	f04f 32ff 	mov.w	r2, #4294967295
 801349e:	9200      	str	r2, [sp, #0]
 80134a0:	683a      	ldr	r2, [r7, #0]
 80134a2:	4804      	ldr	r0, [pc, #16]	@ (80134b4 <sensirion_i2c_hal_read+0x34>)
 80134a4:	f7f2 fe74 	bl	8006190 <HAL_I2C_Master_Receive>
 80134a8:	4603      	mov	r3, r0
 80134aa:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3708      	adds	r7, #8
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}
 80134b4:	20001790 	.word	0x20001790

080134b8 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af02      	add	r7, sp, #8
 80134be:	4603      	mov	r3, r0
 80134c0:	6039      	str	r1, [r7, #0]
 80134c2:	71fb      	strb	r3, [r7, #7]
 80134c4:	4613      	mov	r3, r2
 80134c6:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),(uint8_t *)data,count,HAL_MAX_DELAY);
 80134c8:	79fb      	ldrb	r3, [r7, #7]
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	005b      	lsls	r3, r3, #1
 80134ce:	b299      	uxth	r1, r3
 80134d0:	88bb      	ldrh	r3, [r7, #4]
 80134d2:	f04f 32ff 	mov.w	r2, #4294967295
 80134d6:	9200      	str	r2, [sp, #0]
 80134d8:	683a      	ldr	r2, [r7, #0]
 80134da:	4804      	ldr	r0, [pc, #16]	@ (80134ec <sensirion_i2c_hal_write+0x34>)
 80134dc:	f7f2 fd5a 	bl	8005f94 <HAL_I2C_Master_Transmit>
 80134e0:	4603      	mov	r3, r0
 80134e2:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3708      	adds	r7, #8
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}
 80134ec:	20001790 	.word	0x20001790

080134f0 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b084      	sub	sp, #16
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */
	   uint32_t msec = useconds / 1000;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	4a0d      	ldr	r2, [pc, #52]	@ (8013530 <sensirion_i2c_hal_sleep_usec+0x40>)
 80134fc:	fba2 2303 	umull	r2, r3, r2, r3
 8013500:	099b      	lsrs	r3, r3, #6
 8013502:	60fb      	str	r3, [r7, #12]
	    if (useconds % 1000 > 0) {
 8013504:	687a      	ldr	r2, [r7, #4]
 8013506:	4b0a      	ldr	r3, [pc, #40]	@ (8013530 <sensirion_i2c_hal_sleep_usec+0x40>)
 8013508:	fba3 1302 	umull	r1, r3, r3, r2
 801350c:	099b      	lsrs	r3, r3, #6
 801350e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013512:	fb01 f303 	mul.w	r3, r1, r3
 8013516:	1ad3      	subs	r3, r2, r3
 8013518:	2b00      	cmp	r3, #0
 801351a:	d002      	beq.n	8013522 <sensirion_i2c_hal_sleep_usec+0x32>
	        msec++;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	3301      	adds	r3, #1
 8013520:	60fb      	str	r3, [r7, #12]
	    }
	    HAL_Delay(msec);
 8013522:	68f8      	ldr	r0, [r7, #12]
 8013524:	f7f0 fbb8 	bl	8003c98 <HAL_Delay>
}
 8013528:	bf00      	nop
 801352a:	3710      	adds	r7, #16
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	10624dd3 	.word	0x10624dd3

08013534 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	061a      	lsls	r2, r3, #24
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	3301      	adds	r3, #1
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	041b      	lsls	r3, r3, #16
 801354a:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	3302      	adds	r3, #2
 8013550:	781b      	ldrb	r3, [r3, #0]
 8013552:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8013554:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	3203      	adds	r2, #3
 801355a:	7812      	ldrb	r2, [r2, #0]
 801355c:	4313      	orrs	r3, r2
}
 801355e:	4618      	mov	r0, r3
 8013560:	370c      	adds	r7, #12
 8013562:	46bd      	mov	sp, r7
 8013564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013568:	4770      	bx	lr

0801356a <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 801356a:	b580      	push	{r7, lr}
 801356c:	b084      	sub	sp, #16
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f7ff ffde 	bl	8013534 <sensirion_bytes_to_uint32_t>
 8013578:	4603      	mov	r3, r0
 801357a:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	ee07 3a90 	vmov	s15, r3
}
 8013582:	eeb0 0a67 	vmov.f32	s0, s15
 8013586:	3710      	adds	r7, #16
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 801358c:	b480      	push	{r7}
 801358e:	b083      	sub	sp, #12
 8013590:	af00      	add	r7, sp, #0
 8013592:	4603      	mov	r3, r0
 8013594:	603a      	str	r2, [r7, #0]
 8013596:	71fb      	strb	r3, [r7, #7]
 8013598:	460b      	mov	r3, r1
 801359a:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 801359c:	79fa      	ldrb	r2, [r7, #7]
 801359e:	79bb      	ldrb	r3, [r7, #6]
 80135a0:	4413      	add	r3, r2
 80135a2:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 80135a4:	e006      	b.n	80135b4 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	1c5a      	adds	r2, r3, #1
 80135aa:	603a      	str	r2, [r7, #0]
 80135ac:	781a      	ldrb	r2, [r3, #0]
 80135ae:	79fb      	ldrb	r3, [r7, #7]
 80135b0:	4413      	add	r3, r2
 80135b2:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 80135b4:	79bb      	ldrb	r3, [r7, #6]
 80135b6:	1e5a      	subs	r2, r3, #1
 80135b8:	71ba      	strb	r2, [r7, #6]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d1f3      	bne.n	80135a6 <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 80135be:	79fb      	ldrb	r3, [r7, #7]
 80135c0:	43db      	mvns	r3, r3
 80135c2:	b2db      	uxtb	r3, r3
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	370c      	adds	r7, #12
 80135c8:	46bd      	mov	sp, r7
 80135ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ce:	4770      	bx	lr

080135d0 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 80135d0:	b480      	push	{r7}
 80135d2:	b087      	sub	sp, #28
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	4603      	mov	r3, r0
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	607a      	str	r2, [r7, #4]
 80135dc:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 80135de:	2300      	movs	r3, #0
 80135e0:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 80135e2:	e026      	b.n	8013632 <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	1c5a      	adds	r2, r3, #1
 80135e8:	60ba      	str	r2, [r7, #8]
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	757b      	strb	r3, [r7, #21]
        switch (c) {
 80135ee:	7d7b      	ldrb	r3, [r7, #21]
 80135f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80135f2:	dc16      	bgt.n	8013622 <sensirion_shdlc_stuff_data+0x52>
 80135f4:	2b7d      	cmp	r3, #125	@ 0x7d
 80135f6:	da03      	bge.n	8013600 <sensirion_shdlc_stuff_data+0x30>
 80135f8:	2b11      	cmp	r3, #17
 80135fa:	d001      	beq.n	8013600 <sensirion_shdlc_stuff_data+0x30>
 80135fc:	2b13      	cmp	r3, #19
 80135fe:	d110      	bne.n	8013622 <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	1c5a      	adds	r2, r3, #1
 8013604:	607a      	str	r2, [r7, #4]
 8013606:	227d      	movs	r2, #125	@ 0x7d
 8013608:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	1c5a      	adds	r2, r3, #1
 801360e:	607a      	str	r2, [r7, #4]
 8013610:	7d7a      	ldrb	r2, [r7, #21]
 8013612:	f082 0220 	eor.w	r2, r2, #32
 8013616:	b2d2      	uxtb	r2, r2
 8013618:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 801361a:	8afb      	ldrh	r3, [r7, #22]
 801361c:	3302      	adds	r3, #2
 801361e:	82fb      	strh	r3, [r7, #22]
                break;
 8013620:	e007      	b.n	8013632 <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	1c5a      	adds	r2, r3, #1
 8013626:	607a      	str	r2, [r7, #4]
 8013628:	7d7a      	ldrb	r2, [r7, #21]
 801362a:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 801362c:	8afb      	ldrh	r3, [r7, #22]
 801362e:	3301      	adds	r3, #1
 8013630:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 8013632:	7bfb      	ldrb	r3, [r7, #15]
 8013634:	1e5a      	subs	r2, r3, #1
 8013636:	73fa      	strb	r2, [r7, #15]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d1d3      	bne.n	80135e4 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 801363c:	8afb      	ldrh	r3, [r7, #22]
}
 801363e:	4618      	mov	r0, r3
 8013640:	371c      	adds	r7, #28
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr

0801364a <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 801364a:	b480      	push	{r7}
 801364c:	b083      	sub	sp, #12
 801364e:	af00      	add	r7, sp, #0
 8013650:	4603      	mov	r3, r0
 8013652:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 8013654:	79fb      	ldrb	r3, [r7, #7]
 8013656:	2b7d      	cmp	r3, #125	@ 0x7d
 8013658:	bf0c      	ite	eq
 801365a:	2301      	moveq	r3, #1
 801365c:	2300      	movne	r3, #0
 801365e:	b2db      	uxtb	r3, r3
}
 8013660:	4618      	mov	r0, r3
 8013662:	370c      	adds	r7, #12
 8013664:	46bd      	mov	sp, r7
 8013666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366a:	4770      	bx	lr

0801366c <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 801366c:	b480      	push	{r7}
 801366e:	b083      	sub	sp, #12
 8013670:	af00      	add	r7, sp, #0
 8013672:	4603      	mov	r3, r0
 8013674:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 8013676:	79fb      	ldrb	r3, [r7, #7]
 8013678:	2b5e      	cmp	r3, #94	@ 0x5e
 801367a:	d010      	beq.n	801369e <sensirion_shdlc_unstuff_byte+0x32>
 801367c:	2b5e      	cmp	r3, #94	@ 0x5e
 801367e:	dc10      	bgt.n	80136a2 <sensirion_shdlc_unstuff_byte+0x36>
 8013680:	2b5d      	cmp	r3, #93	@ 0x5d
 8013682:	d00a      	beq.n	801369a <sensirion_shdlc_unstuff_byte+0x2e>
 8013684:	2b5d      	cmp	r3, #93	@ 0x5d
 8013686:	dc0c      	bgt.n	80136a2 <sensirion_shdlc_unstuff_byte+0x36>
 8013688:	2b31      	cmp	r3, #49	@ 0x31
 801368a:	d002      	beq.n	8013692 <sensirion_shdlc_unstuff_byte+0x26>
 801368c:	2b33      	cmp	r3, #51	@ 0x33
 801368e:	d002      	beq.n	8013696 <sensirion_shdlc_unstuff_byte+0x2a>
 8013690:	e007      	b.n	80136a2 <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 8013692:	2311      	movs	r3, #17
 8013694:	e006      	b.n	80136a4 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 8013696:	2313      	movs	r3, #19
 8013698:	e004      	b.n	80136a4 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 801369a:	237d      	movs	r3, #125	@ 0x7d
 801369c:	e002      	b.n	80136a4 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 801369e:	237e      	movs	r3, #126	@ 0x7e
 80136a0:	e000      	b.n	80136a4 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 80136a2:	79fb      	ldrb	r3, [r7, #7]
    }
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	370c      	adds	r7, #12
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr

080136b0 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	603b      	str	r3, [r7, #0]
 80136b8:	4603      	mov	r3, r0
 80136ba:	71fb      	strb	r3, [r7, #7]
 80136bc:	460b      	mov	r3, r1
 80136be:	71bb      	strb	r3, [r7, #6]
 80136c0:	4613      	mov	r3, r2
 80136c2:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 80136c4:	797a      	ldrb	r2, [r7, #5]
 80136c6:	79b9      	ldrb	r1, [r7, #6]
 80136c8:	79f8      	ldrb	r0, [r7, #7]
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	f000 f818 	bl	8013700 <sensirion_shdlc_tx>
 80136d0:	4603      	mov	r3, r0
 80136d2:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 80136d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d002      	beq.n	80136e2 <sensirion_shdlc_xcv+0x32>
        return ret;
 80136dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80136e0:	e00a      	b.n	80136f8 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 80136e2:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80136e6:	f000 fb07 	bl	8013cf8 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 80136ea:	7e3b      	ldrb	r3, [r7, #24]
 80136ec:	6a3a      	ldr	r2, [r7, #32]
 80136ee:	69f9      	ldr	r1, [r7, #28]
 80136f0:	4618      	mov	r0, r3
 80136f2:	f000 f8d7 	bl	80138a4 <sensirion_shdlc_rx>
 80136f6:	4603      	mov	r3, r0
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3710      	adds	r7, #16
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 8013700:	b590      	push	{r4, r7, lr}
 8013702:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8013706:	af00      	add	r7, sp, #0
 8013708:	4604      	mov	r4, r0
 801370a:	4608      	mov	r0, r1
 801370c:	4611      	mov	r1, r2
 801370e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8013712:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8013716:	6013      	str	r3, [r2, #0]
 8013718:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801371c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8013720:	4622      	mov	r2, r4
 8013722:	701a      	strb	r2, [r3, #0]
 8013724:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013728:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 801372c:	4602      	mov	r2, r0
 801372e:	701a      	strb	r2, [r3, #0]
 8013730:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013734:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8013738:	460a      	mov	r2, r1
 801373a:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 801373c:	2300      	movs	r3, #0
 801373e:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 8013742:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013746:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 801374a:	781a      	ldrb	r2, [r3, #0]
 801374c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013750:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	4413      	add	r3, r2
 8013758:	b2d8      	uxtb	r0, r3
 801375a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801375e:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8013762:	7819      	ldrb	r1, [r3, #0]
 8013764:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013768:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	f7ff ff0d 	bl	801358c <sensirion_shdlc_crc>
 8013772:	4603      	mov	r3, r0
 8013774:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    tx_frame_buf[len++] = SHDLC_START;
 8013778:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801377c:	1c5a      	adds	r2, r3, #1
 801377e:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8013782:	461a      	mov	r2, r3
 8013784:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013788:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801378c:	217e      	movs	r1, #126	@ 0x7e
 801378e:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 8013790:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013794:	f107 0208 	add.w	r2, r7, #8
 8013798:	441a      	add	r2, r3
 801379a:	1dfb      	adds	r3, r7, #7
 801379c:	4619      	mov	r1, r3
 801379e:	2001      	movs	r0, #1
 80137a0:	f7ff ff16 	bl	80135d0 <sensirion_shdlc_stuff_data>
 80137a4:	4603      	mov	r3, r0
 80137a6:	461a      	mov	r2, r3
 80137a8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80137ac:	4413      	add	r3, r2
 80137ae:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 80137b2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80137b6:	f107 0208 	add.w	r2, r7, #8
 80137ba:	441a      	add	r2, r3
 80137bc:	1dbb      	adds	r3, r7, #6
 80137be:	4619      	mov	r1, r3
 80137c0:	2001      	movs	r0, #1
 80137c2:	f7ff ff05 	bl	80135d0 <sensirion_shdlc_stuff_data>
 80137c6:	4603      	mov	r3, r0
 80137c8:	461a      	mov	r2, r3
 80137ca:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80137ce:	4413      	add	r3, r2
 80137d0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 80137d4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80137d8:	f107 0208 	add.w	r2, r7, #8
 80137dc:	441a      	add	r2, r3
 80137de:	1d7b      	adds	r3, r7, #5
 80137e0:	4619      	mov	r1, r3
 80137e2:	2001      	movs	r0, #1
 80137e4:	f7ff fef4 	bl	80135d0 <sensirion_shdlc_stuff_data>
 80137e8:	4603      	mov	r3, r0
 80137ea:	461a      	mov	r2, r3
 80137ec:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80137f0:	4413      	add	r3, r2
 80137f2:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 80137f6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80137fa:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 80137fe:	7818      	ldrb	r0, [r3, #0]
 8013800:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013804:	f107 0208 	add.w	r2, r7, #8
 8013808:	441a      	add	r2, r3
 801380a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801380e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8013812:	6819      	ldr	r1, [r3, #0]
 8013814:	f7ff fedc 	bl	80135d0 <sensirion_shdlc_stuff_data>
 8013818:	4603      	mov	r3, r0
 801381a:	461a      	mov	r2, r3
 801381c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013820:	4413      	add	r3, r2
 8013822:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 8013826:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801382a:	f107 0208 	add.w	r2, r7, #8
 801382e:	441a      	add	r2, r3
 8013830:	f207 2313 	addw	r3, r7, #531	@ 0x213
 8013834:	4619      	mov	r1, r3
 8013836:	2001      	movs	r0, #1
 8013838:	f7ff feca 	bl	80135d0 <sensirion_shdlc_stuff_data>
 801383c:	4603      	mov	r3, r0
 801383e:	461a      	mov	r2, r3
 8013840:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013844:	4413      	add	r3, r2
 8013846:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 801384a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801384e:	1c5a      	adds	r2, r3, #1
 8013850:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8013854:	461a      	mov	r2, r3
 8013856:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801385a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801385e:	217e      	movs	r1, #126	@ 0x7e
 8013860:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 8013862:	f107 0208 	add.w	r2, r7, #8
 8013866:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801386a:	4611      	mov	r1, r2
 801386c:	4618      	mov	r0, r3
 801386e:	f000 f9db 	bl	8013c28 <sensirion_uart_tx>
 8013872:	4603      	mov	r3, r0
 8013874:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (ret < 0)
 8013878:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 801387c:	2b00      	cmp	r3, #0
 801387e:	da02      	bge.n	8013886 <sensirion_shdlc_tx+0x186>
        return ret;
 8013880:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8013884:	e009      	b.n	801389a <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 8013886:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	@ 0x214
 801388a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801388e:	429a      	cmp	r2, r3
 8013890:	d002      	beq.n	8013898 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 8013892:	f06f 0305 	mvn.w	r3, #5
 8013896:	e000      	b.n	801389a <sensirion_shdlc_tx+0x19a>
    return 0;
 8013898:	2300      	movs	r3, #0
}
 801389a:	4618      	mov	r0, r3
 801389c:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd90      	pop	{r4, r7, pc}

080138a4 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 80138a4:	b590      	push	{r4, r7, lr}
 80138a6:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80138b0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80138b4:	6019      	str	r1, [r3, #0]
 80138b6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80138ba:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80138be:	601a      	str	r2, [r3, #0]
 80138c0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80138c4:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80138c8:	4602      	mov	r2, r0
 80138ca:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 80138cc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80138d0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 80138da:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80138de:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	3306      	adds	r3, #6
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	005b      	lsls	r3, r3, #1
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	f107 0210 	add.w	r2, r7, #16
 80138f0:	4611      	mov	r1, r2
 80138f2:	4618      	mov	r0, r3
 80138f4:	f000 f9d2 	bl	8013c9c <sensirion_uart_rx>
 80138f8:	4603      	mov	r3, r0
 80138fa:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 80138fe:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013902:	2b00      	cmp	r3, #0
 8013904:	dd03      	ble.n	801390e <sensirion_shdlc_rx+0x6a>
 8013906:	4ba0      	ldr	r3, [pc, #640]	@ (8013b88 <sensirion_shdlc_rx+0x2e4>)
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	2b7e      	cmp	r3, #126	@ 0x7e
 801390c:	d002      	beq.n	8013914 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 801390e:	f06f 0301 	mvn.w	r3, #1
 8013912:	e133      	b.n	8013b7c <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8013914:	2300      	movs	r3, #0
 8013916:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 801391a:	2301      	movs	r3, #1
 801391c:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8013920:	2300      	movs	r3, #0
 8013922:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 8013926:	e03a      	b.n	801399e <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 8013928:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 801392c:	2b00      	cmp	r3, #0
 801392e:	d015      	beq.n	801395c <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8013930:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013934:	4a94      	ldr	r2, [pc, #592]	@ (8013b88 <sensirion_shdlc_rx+0x2e4>)
 8013936:	5cd2      	ldrb	r2, [r2, r3]
 8013938:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801393c:	1c59      	adds	r1, r3, #1
 801393e:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013942:	4619      	mov	r1, r3
 8013944:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8013948:	185c      	adds	r4, r3, r1
 801394a:	4610      	mov	r0, r2
 801394c:	f7ff fe8e 	bl	801366c <sensirion_shdlc_unstuff_byte>
 8013950:	4603      	mov	r3, r0
 8013952:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8013954:	2300      	movs	r3, #0
 8013956:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 801395a:	e01b      	b.n	8013994 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 801395c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013960:	4a89      	ldr	r2, [pc, #548]	@ (8013b88 <sensirion_shdlc_rx+0x2e4>)
 8013962:	5cd3      	ldrb	r3, [r2, r3]
 8013964:	4618      	mov	r0, r3
 8013966:	f7ff fe70 	bl	801364a <sensirion_shdlc_check_unstuff>
 801396a:	4603      	mov	r3, r0
 801396c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 8013970:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013974:	2b00      	cmp	r3, #0
 8013976:	d10d      	bne.n	8013994 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 8013978:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 801397c:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013980:	1c59      	adds	r1, r3, #1
 8013982:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013986:	4619      	mov	r1, r3
 8013988:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801398c:	440b      	add	r3, r1
 801398e:	497e      	ldr	r1, [pc, #504]	@ (8013b88 <sensirion_shdlc_rx+0x2e4>)
 8013990:	5c8a      	ldrb	r2, [r1, r2]
 8013992:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8013994:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013998:	3301      	adds	r3, #1
 801399a:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 801399e:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80139a2:	2b03      	cmp	r3, #3
 80139a4:	d806      	bhi.n	80139b4 <sensirion_shdlc_rx+0x110>
 80139a6:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80139aa:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 80139ae:	3b02      	subs	r3, #2
 80139b0:	429a      	cmp	r2, r3
 80139b2:	dbb9      	blt.n	8013928 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 80139b4:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80139b8:	2b04      	cmp	r3, #4
 80139ba:	d103      	bne.n	80139c4 <sensirion_shdlc_rx+0x120>
 80139bc:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d002      	beq.n	80139ca <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 80139c4:	f06f 0304 	mvn.w	r3, #4
 80139c8:	e0d8      	b.n	8013b7c <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 80139ca:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80139ce:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	78db      	ldrb	r3, [r3, #3]
 80139d6:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 80139da:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 80139de:	7812      	ldrb	r2, [r2, #0]
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d202      	bcs.n	80139ea <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 80139e4:	f06f 0306 	mvn.w	r3, #6
 80139e8:	e0c8      	b.n	8013b7c <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 80139ea:	2300      	movs	r3, #0
 80139ec:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80139f0:	2300      	movs	r3, #0
 80139f2:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 80139f6:	e040      	b.n	8013a7a <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 80139f8:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d018      	beq.n	8013a32 <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8013a00:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013a04:	4a60      	ldr	r2, [pc, #384]	@ (8013b88 <sensirion_shdlc_rx+0x2e4>)
 8013a06:	5cd2      	ldrb	r2, [r2, r3]
 8013a08:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013a0c:	1c59      	adds	r1, r3, #1
 8013a0e:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013a12:	4619      	mov	r1, r3
 8013a14:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013a18:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	185c      	adds	r4, r3, r1
 8013a20:	4610      	mov	r0, r2
 8013a22:	f7ff fe23 	bl	801366c <sensirion_shdlc_unstuff_byte>
 8013a26:	4603      	mov	r3, r0
 8013a28:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8013a30:	e01e      	b.n	8013a70 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8013a32:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013a36:	4a54      	ldr	r2, [pc, #336]	@ (8013b88 <sensirion_shdlc_rx+0x2e4>)
 8013a38:	5cd3      	ldrb	r3, [r2, r3]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7ff fe05 	bl	801364a <sensirion_shdlc_check_unstuff>
 8013a40:	4603      	mov	r3, r0
 8013a42:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 8013a46:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d110      	bne.n	8013a70 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 8013a4e:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013a52:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013a56:	1c59      	adds	r1, r3, #1
 8013a58:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013a62:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	440b      	add	r3, r1
 8013a6a:	4947      	ldr	r1, [pc, #284]	@ (8013b88 <sensirion_shdlc_rx+0x2e4>)
 8013a6c:	5c8a      	ldrb	r2, [r1, r2]
 8013a6e:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8013a70:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013a74:	3301      	adds	r3, #1
 8013a76:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8013a7a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013a7e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	78db      	ldrb	r3, [r3, #3]
 8013a86:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d206      	bcs.n	8013a9c <sensirion_shdlc_rx+0x1f8>
 8013a8e:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013a92:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013a96:	3b02      	subs	r3, #2
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	dbad      	blt.n	80139f8 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8013a9c:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d002      	beq.n	8013aaa <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013aa4:	f06f 0304 	mvn.w	r3, #4
 8013aa8:	e068      	b.n	8013b7c <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 8013aaa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013aae:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	78db      	ldrb	r3, [r3, #3]
 8013ab6:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d202      	bcs.n	8013ac4 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013abe:	f06f 0304 	mvn.w	r3, #4
 8013ac2:	e05b      	b.n	8013b7c <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8013ac4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013ac8:	1c5a      	adds	r2, r3, #1
 8013aca:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 8013ace:	461a      	mov	r2, r3
 8013ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8013b88 <sensirion_shdlc_rx+0x2e4>)
 8013ad2:	5c9b      	ldrb	r3, [r3, r2]
 8013ad4:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 8013ad8:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7ff fdb4 	bl	801364a <sensirion_shdlc_check_unstuff>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d00d      	beq.n	8013b04 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 8013ae8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013aec:	1c5a      	adds	r2, r3, #1
 8013aee:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 8013af2:	461a      	mov	r2, r3
 8013af4:	4b24      	ldr	r3, [pc, #144]	@ (8013b88 <sensirion_shdlc_rx+0x2e4>)
 8013af6:	5c9b      	ldrb	r3, [r3, r2]
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7ff fdb7 	bl	801366c <sensirion_shdlc_unstuff_byte>
 8013afe:	4603      	mov	r3, r0
 8013b00:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 8013b04:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013b08:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	781a      	ldrb	r2, [r3, #0]
 8013b10:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013b14:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	785b      	ldrb	r3, [r3, #1]
 8013b1c:	4413      	add	r3, r2
 8013b1e:	b2da      	uxtb	r2, r3
 8013b20:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013b24:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	789b      	ldrb	r3, [r3, #2]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	b2d8      	uxtb	r0, r3
 8013b30:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013b34:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	78d9      	ldrb	r1, [r3, #3]
 8013b3c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013b40:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	f7ff fd21 	bl	801358c <sensirion_shdlc_crc>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d002      	beq.n	8013b5c <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 8013b56:	f06f 0303 	mvn.w	r3, #3
 8013b5a:	e00f      	b.n	8013b7c <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8013b5c:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013b60:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013b64:	429a      	cmp	r2, r3
 8013b66:	da05      	bge.n	8013b74 <sensirion_shdlc_rx+0x2d0>
 8013b68:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013b6c:	4a06      	ldr	r2, [pc, #24]	@ (8013b88 <sensirion_shdlc_rx+0x2e4>)
 8013b6e:	5cd3      	ldrb	r3, [r2, r3]
 8013b70:	2b7e      	cmp	r3, #126	@ 0x7e
 8013b72:	d002      	beq.n	8013b7a <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8013b74:	f06f 0302 	mvn.w	r3, #2
 8013b78:	e000      	b.n	8013b7c <sensirion_shdlc_rx+0x2d8>

    return 0;
 8013b7a:	2300      	movs	r3, #0
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd90      	pop	{r4, r7, pc}
 8013b86:	bf00      	nop
 8013b88:	200014e4 	.word	0x200014e4

08013b8c <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8013b90:	4819      	ldr	r0, [pc, #100]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013b92:	f7f7 fefe 	bl	800b992 <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 8013b96:	4b18      	ldr	r3, [pc, #96]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013b98:	4a18      	ldr	r2, [pc, #96]	@ (8013bfc <sensirion_uart_open+0x70>)
 8013b9a:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8013b9c:	4b16      	ldr	r3, [pc, #88]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013b9e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8013ba2:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8013ba4:	4b14      	ldr	r3, [pc, #80]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8013baa:	4b13      	ldr	r3, [pc, #76]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013bac:	2200      	movs	r2, #0
 8013bae:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8013bb0:	4b11      	ldr	r3, [pc, #68]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8013bb6:	4b10      	ldr	r3, [pc, #64]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013bb8:	220c      	movs	r2, #12
 8013bba:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8013bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8013bc8:	480b      	ldr	r0, [pc, #44]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013bca:	f7f7 fe95 	bl	800b8f8 <HAL_UART_Init>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d001      	beq.n	8013bd8 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 8013bd4:	f7ef fb10 	bl	80031f8 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 8013bd8:	f240 220a 	movw	r2, #522	@ 0x20a
 8013bdc:	4908      	ldr	r1, [pc, #32]	@ (8013c00 <sensirion_uart_open+0x74>)
 8013bde:	4806      	ldr	r0, [pc, #24]	@ (8013bf8 <sensirion_uart_open+0x6c>)
 8013be0:	f7f7 ffc8 	bl	800bb74 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 8013be4:	4b07      	ldr	r3, [pc, #28]	@ (8013c04 <sensirion_uart_open+0x78>)
 8013be6:	2200      	movs	r2, #0
 8013be8:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 8013bea:	4b07      	ldr	r3, [pc, #28]	@ (8013c08 <sensirion_uart_open+0x7c>)
 8013bec:	2200      	movs	r2, #0
 8013bee:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 8013bf0:	2300      	movs	r3, #0
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	bd80      	pop	{r7, pc}
 8013bf6:	bf00      	nop
 8013bf8:	20001a04 	.word	0x20001a04
 8013bfc:	40004400 	.word	0x40004400
 8013c00:	200014e4 	.word	0x200014e4
 8013c04:	20001aa2 	.word	0x20001aa2
 8013c08:	20001aa4 	.word	0x20001aa4

08013c0c <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 8013c10:	4804      	ldr	r0, [pc, #16]	@ (8013c24 <sensirion_uart_close+0x18>)
 8013c12:	f7f7 febe 	bl	800b992 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8013c16:	4803      	ldr	r0, [pc, #12]	@ (8013c24 <sensirion_uart_close+0x18>)
 8013c18:	f7ef fe10 	bl	800383c <HAL_UART_MspDeInit>
    return 0;
 8013c1c:	2300      	movs	r3, #0
}
 8013c1e:	4618      	mov	r0, r3
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	bf00      	nop
 8013c24:	20001a04 	.word	0x20001a04

08013c28 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	4603      	mov	r3, r0
 8013c30:	6039      	str	r1, [r7, #0]
 8013c32:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8013c34:	88fa      	ldrh	r2, [r7, #6]
 8013c36:	f04f 33ff 	mov.w	r3, #4294967295
 8013c3a:	6839      	ldr	r1, [r7, #0]
 8013c3c:	4807      	ldr	r0, [pc, #28]	@ (8013c5c <sensirion_uart_tx+0x34>)
 8013c3e:	f7f7 fed7 	bl	800b9f0 <HAL_UART_Transmit>
 8013c42:	4603      	mov	r3, r0
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d102      	bne.n	8013c4e <sensirion_uart_tx+0x26>
		{
			return data_len;
 8013c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013c4c:	e001      	b.n	8013c52 <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 8013c4e:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3708      	adds	r7, #8
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	20001a04 	.word	0x20001a04

08013c60 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	460b      	mov	r3, r1
 8013c6a:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8013c6c:	4a07      	ldr	r2, [pc, #28]	@ (8013c8c <HAL_UARTEx_RxEventCallback+0x2c>)
 8013c6e:	887b      	ldrh	r3, [r7, #2]
 8013c70:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 8013c72:	4b07      	ldr	r3, [pc, #28]	@ (8013c90 <HAL_UARTEx_RxEventCallback+0x30>)
 8013c74:	2201      	movs	r2, #1
 8013c76:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 8013c78:	f240 220a 	movw	r2, #522	@ 0x20a
 8013c7c:	4905      	ldr	r1, [pc, #20]	@ (8013c94 <HAL_UARTEx_RxEventCallback+0x34>)
 8013c7e:	4806      	ldr	r0, [pc, #24]	@ (8013c98 <HAL_UARTEx_RxEventCallback+0x38>)
 8013c80:	f7f7 ff78 	bl	800bb74 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8013c84:	bf00      	nop
 8013c86:	3708      	adds	r7, #8
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	20001aa2 	.word	0x20001aa2
 8013c90:	20001aa6 	.word	0x20001aa6
 8013c94:	200014e4 	.word	0x200014e4
 8013c98:	20001a04 	.word	0x20001a04

08013c9c <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b084      	sub	sp, #16
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	6039      	str	r1, [r7, #0]
 8013ca6:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8013cac:	e005      	b.n	8013cba <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	3301      	adds	r3, #1
 8013cb2:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8013cb4:	200a      	movs	r0, #10
 8013cb6:	f7ef ffef 	bl	8003c98 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 8013cba:	4b0b      	ldr	r3, [pc, #44]	@ (8013ce8 <sensirion_uart_rx+0x4c>)
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d102      	bne.n	8013cc8 <sensirion_uart_rx+0x2c>
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	2b02      	cmp	r3, #2
 8013cc6:	d9f2      	bls.n	8013cae <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8013cc8:	4b07      	ldr	r3, [pc, #28]	@ (8013ce8 <sensirion_uart_rx+0x4c>)
 8013cca:	2200      	movs	r2, #0
 8013ccc:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 8013cce:	4b07      	ldr	r3, [pc, #28]	@ (8013cec <sensirion_uart_rx+0x50>)
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8013cd4:	4b06      	ldr	r3, [pc, #24]	@ (8013cf0 <sensirion_uart_rx+0x54>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 8013cda:	4b06      	ldr	r3, [pc, #24]	@ (8013cf4 <sensirion_uart_rx+0x58>)
 8013cdc:	881b      	ldrh	r3, [r3, #0]
 8013cde:	b21b      	sxth	r3, r3
	//return i;
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3710      	adds	r7, #16
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	20001aa6 	.word	0x20001aa6
 8013cec:	20001aa8 	.word	0x20001aa8
 8013cf0:	20001aa4 	.word	0x20001aa4
 8013cf4:	20001aa2 	.word	0x20001aa2

08013cf8 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	4a06      	ldr	r2, [pc, #24]	@ (8013d1c <sensirion_sleep_usec+0x24>)
 8013d04:	fba2 2303 	umull	r2, r3, r2, r3
 8013d08:	099b      	lsrs	r3, r3, #6
 8013d0a:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f7ef ffc3 	bl	8003c98 <HAL_Delay>
}
 8013d12:	bf00      	nop
 8013d14:	3708      	adds	r7, #8
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	10624dd3 	.word	0x10624dd3

08013d20 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b08a      	sub	sp, #40	@ 0x28
 8013d24:	af04      	add	r7, sp, #16
 8013d26:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 8013d28:	2303      	movs	r3, #3
 8013d2a:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 8013d2c:	f107 020c 	add.w	r2, r7, #12
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	9302      	str	r3, [sp, #8]
 8013d34:	f107 0310 	add.w	r3, r7, #16
 8013d38:	9301      	str	r3, [sp, #4]
 8013d3a:	2320      	movs	r3, #32
 8013d3c:	9300      	str	r3, [sp, #0]
 8013d3e:	4613      	mov	r3, r2
 8013d40:	2201      	movs	r2, #1
 8013d42:	21d0      	movs	r1, #208	@ 0xd0
 8013d44:	2000      	movs	r0, #0
 8013d46:	f7ff fcb3 	bl	80136b0 <sensirion_shdlc_xcv>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 8013d4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	da02      	bge.n	8013d5c <sps30_get_serial+0x3c>
        return ret;
 8013d56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013d5a:	e009      	b.n	8013d70 <sps30_get_serial+0x50>

    if (header.state)
 8013d5c:	7cbb      	ldrb	r3, [r7, #18]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d005      	beq.n	8013d6e <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 8013d62:	7cbb      	ldrb	r3, [r7, #18]
 8013d64:	b21b      	sxth	r3, r3
 8013d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013d6a:	b21b      	sxth	r3, r3
 8013d6c:	e000      	b.n	8013d70 <sps30_get_serial+0x50>

    return 0;
 8013d6e:	2300      	movs	r3, #0
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3718      	adds	r7, #24
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b086      	sub	sp, #24
 8013d7c:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 8013d7e:	f240 3301 	movw	r3, #769	@ 0x301
 8013d82:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 8013d84:	463a      	mov	r2, r7
 8013d86:	2300      	movs	r3, #0
 8013d88:	9302      	str	r3, [sp, #8]
 8013d8a:	1d3b      	adds	r3, r7, #4
 8013d8c:	9301      	str	r3, [sp, #4]
 8013d8e:	2300      	movs	r3, #0
 8013d90:	9300      	str	r3, [sp, #0]
 8013d92:	4613      	mov	r3, r2
 8013d94:	2202      	movs	r2, #2
 8013d96:	2100      	movs	r1, #0
 8013d98:	2000      	movs	r0, #0
 8013d9a:	f7ff fc89 	bl	80136b0 <sensirion_shdlc_xcv>
 8013d9e:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b086      	sub	sp, #24
 8013dac:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 8013dae:	2300      	movs	r3, #0
 8013db0:	9302      	str	r3, [sp, #8]
 8013db2:	1d3b      	adds	r3, r7, #4
 8013db4:	9301      	str	r3, [sp, #4]
 8013db6:	2300      	movs	r3, #0
 8013db8:	9300      	str	r3, [sp, #0]
 8013dba:	2300      	movs	r3, #0
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	2101      	movs	r1, #1
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	f7ff fc75 	bl	80136b0 <sensirion_shdlc_xcv>
 8013dc6:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3708      	adds	r7, #8
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}

08013dd0 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b092      	sub	sp, #72	@ 0x48
 8013dd4:	af04      	add	r7, sp, #16
 8013dd6:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 8013dd8:	f107 0308 	add.w	r3, r7, #8
 8013ddc:	9302      	str	r3, [sp, #8]
 8013dde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013de2:	9301      	str	r3, [sp, #4]
 8013de4:	2328      	movs	r3, #40	@ 0x28
 8013de6:	9300      	str	r3, [sp, #0]
 8013de8:	2300      	movs	r3, #0
 8013dea:	2200      	movs	r2, #0
 8013dec:	2103      	movs	r1, #3
 8013dee:	2000      	movs	r0, #0
 8013df0:	f7ff fc5e 	bl	80136b0 <sensirion_shdlc_xcv>
 8013df4:	4603      	mov	r3, r0
 8013df6:	86fb      	strh	r3, [r7, #54]	@ 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 8013df8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d002      	beq.n	8013e06 <sps30_read_measurement+0x36>
        return error;
 8013e00:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8013e04:	e07f      	b.n	8013f06 <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 8013e06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013e0a:	2b28      	cmp	r3, #40	@ 0x28
 8013e0c:	d002      	beq.n	8013e14 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8013e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e12:	e078      	b.n	8013f06 <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 8013e14:	f107 0308 	add.w	r3, r7, #8
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f7ff fba6 	bl	801356a <sensirion_bytes_to_float>
 8013e1e:	eef0 7a40 	vmov.f32	s15, s0
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 8013e28:	f107 0308 	add.w	r3, r7, #8
 8013e2c:	3304      	adds	r3, #4
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7ff fb9b 	bl	801356a <sensirion_bytes_to_float>
 8013e34:	eef0 7a40 	vmov.f32	s15, s0
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 8013e3e:	f107 0308 	add.w	r3, r7, #8
 8013e42:	3308      	adds	r3, #8
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7ff fb90 	bl	801356a <sensirion_bytes_to_float>
 8013e4a:	eef0 7a40 	vmov.f32	s15, s0
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 8013e54:	f107 0308 	add.w	r3, r7, #8
 8013e58:	330c      	adds	r3, #12
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7ff fb85 	bl	801356a <sensirion_bytes_to_float>
 8013e60:	eef0 7a40 	vmov.f32	s15, s0
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 8013e6a:	f107 0308 	add.w	r3, r7, #8
 8013e6e:	3310      	adds	r3, #16
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7ff fb7a 	bl	801356a <sensirion_bytes_to_float>
 8013e76:	eef0 7a40 	vmov.f32	s15, s0
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 8013e80:	f107 0308 	add.w	r3, r7, #8
 8013e84:	3314      	adds	r3, #20
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7ff fb6f 	bl	801356a <sensirion_bytes_to_float>
 8013e8c:	eef0 7a40 	vmov.f32	s15, s0
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 8013e96:	f107 0308 	add.w	r3, r7, #8
 8013e9a:	3318      	adds	r3, #24
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7ff fb64 	bl	801356a <sensirion_bytes_to_float>
 8013ea2:	eef0 7a40 	vmov.f32	s15, s0
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8013eac:	f107 0308 	add.w	r3, r7, #8
 8013eb0:	331c      	adds	r3, #28
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7ff fb59 	bl	801356a <sensirion_bytes_to_float>
 8013eb8:	eef0 7a40 	vmov.f32	s15, s0
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 8013ec2:	f107 0308 	add.w	r3, r7, #8
 8013ec6:	3320      	adds	r3, #32
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7ff fb4e 	bl	801356a <sensirion_bytes_to_float>
 8013ece:	eef0 7a40 	vmov.f32	s15, s0
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 8013ed8:	f107 0308 	add.w	r3, r7, #8
 8013edc:	3324      	adds	r3, #36	@ 0x24
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7ff fb43 	bl	801356a <sensirion_bytes_to_float>
 8013ee4:	eef0 7a40 	vmov.f32	s15, s0
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    if (header.state) {
 8013eee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d006      	beq.n	8013f04 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 8013ef6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8013efa:	b21b      	sxth	r3, r3
 8013efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013f00:	b21b      	sxth	r3, r3
 8013f02:	e000      	b.n	8013f06 <sps30_read_measurement+0x136>
    }

    return 0;
 8013f04:	2300      	movs	r3, #0
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3738      	adds	r7, #56	@ 0x38
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}

08013f0e <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 8013f0e:	b580      	push	{r7, lr}
 8013f10:	b086      	sub	sp, #24
 8013f12:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 8013f14:	2300      	movs	r3, #0
 8013f16:	9302      	str	r3, [sp, #8]
 8013f18:	1d3b      	adds	r3, r7, #4
 8013f1a:	9301      	str	r3, [sp, #4]
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	9300      	str	r3, [sp, #0]
 8013f20:	2300      	movs	r3, #0
 8013f22:	2200      	movs	r2, #0
 8013f24:	2156      	movs	r1, #86	@ 0x56
 8013f26:	2000      	movs	r0, #0
 8013f28:	f7ff fbc2 	bl	80136b0 <sensirion_shdlc_xcv>
 8013f2c:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3708      	adds	r7, #8
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}

08013f36 <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8013f36:	b580      	push	{r7, lr}
 8013f38:	b08a      	sub	sp, #40	@ 0x28
 8013f3a:	af04      	add	r7, sp, #16
 8013f3c:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8013f3e:	f107 0308 	add.w	r3, r7, #8
 8013f42:	9302      	str	r3, [sp, #8]
 8013f44:	f107 0310 	add.w	r3, r7, #16
 8013f48:	9301      	str	r3, [sp, #4]
 8013f4a:	2307      	movs	r3, #7
 8013f4c:	9300      	str	r3, [sp, #0]
 8013f4e:	2300      	movs	r3, #0
 8013f50:	2200      	movs	r2, #0
 8013f52:	21d1      	movs	r1, #209	@ 0xd1
 8013f54:	2000      	movs	r0, #0
 8013f56:	f7ff fbab 	bl	80136b0 <sensirion_shdlc_xcv>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8013f5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d002      	beq.n	8013f6c <sps30_read_version+0x36>
        return error;
 8013f66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013f6a:	e01f      	b.n	8013fac <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8013f6c:	7cfb      	ldrb	r3, [r7, #19]
 8013f6e:	2b07      	cmp	r3, #7
 8013f70:	d002      	beq.n	8013f78 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8013f72:	f04f 33ff 	mov.w	r3, #4294967295
 8013f76:	e019      	b.n	8013fac <sps30_read_version+0x76>
    }

    if (header.state) {
 8013f78:	7cbb      	ldrb	r3, [r7, #18]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d005      	beq.n	8013f8a <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8013f7e:	7cbb      	ldrb	r3, [r7, #18]
 8013f80:	b21b      	sxth	r3, r3
 8013f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013f86:	b21b      	sxth	r3, r3
 8013f88:	e010      	b.n	8013fac <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8013f8a:	7a3a      	ldrb	r2, [r7, #8]
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8013f90:	7a7a      	ldrb	r2, [r7, #9]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8013f96:	7afa      	ldrb	r2, [r7, #11]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8013f9c:	7b7a      	ldrb	r2, [r7, #13]
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8013fa2:	7bba      	ldrb	r2, [r7, #14]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	711a      	strb	r2, [r3, #4]

    return error;
 8013fa8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3718      	adds	r7, #24
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	460b      	mov	r3, r1
 8013fbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013fc0:	f640 0074 	movw	r0, #2164	@ 0x874
 8013fc4:	f007 fdec 	bl	801bba0 <USBD_static_malloc>
 8013fc8:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d109      	bne.n	8013fe4 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	32b0      	adds	r2, #176	@ 0xb0
 8013fda:	2100      	movs	r1, #0
 8013fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013fe0:	2302      	movs	r3, #2
 8013fe2:	e06e      	b.n	80140c2 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	32b0      	adds	r2, #176	@ 0xb0
 8013fee:	68f9      	ldr	r1, [r7, #12]
 8013ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	32b0      	adds	r2, #176	@ 0xb0
 8013ffe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	7c1b      	ldrb	r3, [r3, #16]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d12b      	bne.n	8014068 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8014010:	4b2e      	ldr	r3, [pc, #184]	@ (80140cc <USBD_MSC_Init+0x118>)
 8014012:	7819      	ldrb	r1, [r3, #0]
 8014014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014018:	2202      	movs	r2, #2
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f007 fc7d 	bl	801b91a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8014020:	4b2a      	ldr	r3, [pc, #168]	@ (80140cc <USBD_MSC_Init+0x118>)
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	f003 020f 	and.w	r2, r3, #15
 8014028:	6879      	ldr	r1, [r7, #4]
 801402a:	4613      	mov	r3, r2
 801402c:	009b      	lsls	r3, r3, #2
 801402e:	4413      	add	r3, r2
 8014030:	009b      	lsls	r3, r3, #2
 8014032:	440b      	add	r3, r1
 8014034:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014038:	2201      	movs	r2, #1
 801403a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801403c:	4b24      	ldr	r3, [pc, #144]	@ (80140d0 <USBD_MSC_Init+0x11c>)
 801403e:	7819      	ldrb	r1, [r3, #0]
 8014040:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014044:	2202      	movs	r2, #2
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f007 fc67 	bl	801b91a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 801404c:	4b20      	ldr	r3, [pc, #128]	@ (80140d0 <USBD_MSC_Init+0x11c>)
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	f003 020f 	and.w	r2, r3, #15
 8014054:	6879      	ldr	r1, [r7, #4]
 8014056:	4613      	mov	r3, r2
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	4413      	add	r3, r2
 801405c:	009b      	lsls	r3, r3, #2
 801405e:	440b      	add	r3, r1
 8014060:	3324      	adds	r3, #36	@ 0x24
 8014062:	2201      	movs	r2, #1
 8014064:	801a      	strh	r2, [r3, #0]
 8014066:	e028      	b.n	80140ba <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8014068:	4b18      	ldr	r3, [pc, #96]	@ (80140cc <USBD_MSC_Init+0x118>)
 801406a:	7819      	ldrb	r1, [r3, #0]
 801406c:	2340      	movs	r3, #64	@ 0x40
 801406e:	2202      	movs	r2, #2
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f007 fc52 	bl	801b91a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8014076:	4b15      	ldr	r3, [pc, #84]	@ (80140cc <USBD_MSC_Init+0x118>)
 8014078:	781b      	ldrb	r3, [r3, #0]
 801407a:	f003 020f 	and.w	r2, r3, #15
 801407e:	6879      	ldr	r1, [r7, #4]
 8014080:	4613      	mov	r3, r2
 8014082:	009b      	lsls	r3, r3, #2
 8014084:	4413      	add	r3, r2
 8014086:	009b      	lsls	r3, r3, #2
 8014088:	440b      	add	r3, r1
 801408a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801408e:	2201      	movs	r2, #1
 8014090:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8014092:	4b0f      	ldr	r3, [pc, #60]	@ (80140d0 <USBD_MSC_Init+0x11c>)
 8014094:	7819      	ldrb	r1, [r3, #0]
 8014096:	2340      	movs	r3, #64	@ 0x40
 8014098:	2202      	movs	r2, #2
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f007 fc3d 	bl	801b91a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80140a0:	4b0b      	ldr	r3, [pc, #44]	@ (80140d0 <USBD_MSC_Init+0x11c>)
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	f003 020f 	and.w	r2, r3, #15
 80140a8:	6879      	ldr	r1, [r7, #4]
 80140aa:	4613      	mov	r3, r2
 80140ac:	009b      	lsls	r3, r3, #2
 80140ae:	4413      	add	r3, r2
 80140b0:	009b      	lsls	r3, r3, #2
 80140b2:	440b      	add	r3, r1
 80140b4:	3324      	adds	r3, #36	@ 0x24
 80140b6:	2201      	movs	r2, #1
 80140b8:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f000 fa2c 	bl	8014518 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80140c0:	2300      	movs	r3, #0
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3710      	adds	r7, #16
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	200000b3 	.word	0x200000b3
 80140d0:	200000b2 	.word	0x200000b2

080140d4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	460b      	mov	r3, r1
 80140de:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80140e0:	4b26      	ldr	r3, [pc, #152]	@ (801417c <USBD_MSC_DeInit+0xa8>)
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	4619      	mov	r1, r3
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f007 fc3d 	bl	801b966 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80140ec:	4b23      	ldr	r3, [pc, #140]	@ (801417c <USBD_MSC_DeInit+0xa8>)
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	f003 020f 	and.w	r2, r3, #15
 80140f4:	6879      	ldr	r1, [r7, #4]
 80140f6:	4613      	mov	r3, r2
 80140f8:	009b      	lsls	r3, r3, #2
 80140fa:	4413      	add	r3, r2
 80140fc:	009b      	lsls	r3, r3, #2
 80140fe:	440b      	add	r3, r1
 8014100:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014104:	2200      	movs	r2, #0
 8014106:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8014108:	4b1d      	ldr	r3, [pc, #116]	@ (8014180 <USBD_MSC_DeInit+0xac>)
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	4619      	mov	r1, r3
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f007 fc29 	bl	801b966 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8014114:	4b1a      	ldr	r3, [pc, #104]	@ (8014180 <USBD_MSC_DeInit+0xac>)
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	f003 020f 	and.w	r2, r3, #15
 801411c:	6879      	ldr	r1, [r7, #4]
 801411e:	4613      	mov	r3, r2
 8014120:	009b      	lsls	r3, r3, #2
 8014122:	4413      	add	r3, r2
 8014124:	009b      	lsls	r3, r3, #2
 8014126:	440b      	add	r3, r1
 8014128:	3324      	adds	r3, #36	@ 0x24
 801412a:	2200      	movs	r2, #0
 801412c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	32b0      	adds	r2, #176	@ 0xb0
 8014138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d018      	beq.n	8014172 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f000 fa67 	bl	8014614 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	32b0      	adds	r2, #176	@ 0xb0
 8014150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014154:	4618      	mov	r0, r3
 8014156:	f007 fd31 	bl	801bbbc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	32b0      	adds	r2, #176	@ 0xb0
 8014164:	2100      	movs	r1, #0
 8014166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2200      	movs	r2, #0
 801416e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014172:	2300      	movs	r3, #0
}
 8014174:	4618      	mov	r0, r3
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	200000b3 	.word	0x200000b3
 8014180:	200000b2 	.word	0x200000b2

08014184 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b086      	sub	sp, #24
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
 801418c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	32b0      	adds	r2, #176	@ 0xb0
 8014198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801419c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801419e:	2300      	movs	r3, #0
 80141a0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80141a2:	2300      	movs	r3, #0
 80141a4:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80141a6:	693b      	ldr	r3, [r7, #16]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d101      	bne.n	80141b0 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80141ac:	2303      	movs	r3, #3
 80141ae:	e0e1      	b.n	8014374 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	781b      	ldrb	r3, [r3, #0]
 80141b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d053      	beq.n	8014264 <USBD_MSC_Setup+0xe0>
 80141bc:	2b20      	cmp	r3, #32
 80141be:	f040 80d1 	bne.w	8014364 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	785b      	ldrb	r3, [r3, #1]
 80141c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80141c8:	d002      	beq.n	80141d0 <USBD_MSC_Setup+0x4c>
 80141ca:	2bff      	cmp	r3, #255	@ 0xff
 80141cc:	d02a      	beq.n	8014224 <USBD_MSC_Setup+0xa0>
 80141ce:	e041      	b.n	8014254 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	885b      	ldrh	r3, [r3, #2]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d11e      	bne.n	8014216 <USBD_MSC_Setup+0x92>
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	88db      	ldrh	r3, [r3, #6]
 80141dc:	2b01      	cmp	r3, #1
 80141de:	d11a      	bne.n	8014216 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	781b      	ldrb	r3, [r3, #0]
 80141e4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	da15      	bge.n	8014216 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80141f0:	687a      	ldr	r2, [r7, #4]
 80141f2:	33b0      	adds	r3, #176	@ 0xb0
 80141f4:	009b      	lsls	r3, r3, #2
 80141f6:	4413      	add	r3, r2
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	699b      	ldr	r3, [r3, #24]
 80141fc:	4798      	blx	r3
 80141fe:	4603      	mov	r3, r0
 8014200:	461a      	mov	r2, r3
 8014202:	693b      	ldr	r3, [r7, #16]
 8014204:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	2201      	movs	r2, #1
 801420a:	4619      	mov	r1, r3
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f003 f945 	bl	801749c <USBD_CtlSendData>
 8014212:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014214:	e025      	b.n	8014262 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8014216:	6839      	ldr	r1, [r7, #0]
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	f003 f8ce 	bl	80173ba <USBD_CtlError>
            ret = USBD_FAIL;
 801421e:	2303      	movs	r3, #3
 8014220:	75fb      	strb	r3, [r7, #23]
          break;
 8014222:	e01e      	b.n	8014262 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	885b      	ldrh	r3, [r3, #2]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d10c      	bne.n	8014246 <USBD_MSC_Setup+0xc2>
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	88db      	ldrh	r3, [r3, #6]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d108      	bne.n	8014246 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8014234:	683b      	ldr	r3, [r7, #0]
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801423a:	2b00      	cmp	r3, #0
 801423c:	db03      	blt.n	8014246 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f000 f9b4 	bl	80145ac <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014244:	e00d      	b.n	8014262 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8014246:	6839      	ldr	r1, [r7, #0]
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f003 f8b6 	bl	80173ba <USBD_CtlError>
            ret = USBD_FAIL;
 801424e:	2303      	movs	r3, #3
 8014250:	75fb      	strb	r3, [r7, #23]
          break;
 8014252:	e006      	b.n	8014262 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8014254:	6839      	ldr	r1, [r7, #0]
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f003 f8af 	bl	80173ba <USBD_CtlError>
          ret = USBD_FAIL;
 801425c:	2303      	movs	r3, #3
 801425e:	75fb      	strb	r3, [r7, #23]
          break;
 8014260:	bf00      	nop
      }
      break;
 8014262:	e086      	b.n	8014372 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	785b      	ldrb	r3, [r3, #1]
 8014268:	2b0b      	cmp	r3, #11
 801426a:	d872      	bhi.n	8014352 <USBD_MSC_Setup+0x1ce>
 801426c:	a201      	add	r2, pc, #4	@ (adr r2, 8014274 <USBD_MSC_Setup+0xf0>)
 801426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014272:	bf00      	nop
 8014274:	080142a5 	.word	0x080142a5
 8014278:	08014321 	.word	0x08014321
 801427c:	08014353 	.word	0x08014353
 8014280:	08014353 	.word	0x08014353
 8014284:	08014353 	.word	0x08014353
 8014288:	08014353 	.word	0x08014353
 801428c:	08014353 	.word	0x08014353
 8014290:	08014353 	.word	0x08014353
 8014294:	08014353 	.word	0x08014353
 8014298:	08014353 	.word	0x08014353
 801429c:	080142cf 	.word	0x080142cf
 80142a0:	080142f9 	.word	0x080142f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142aa:	b2db      	uxtb	r3, r3
 80142ac:	2b03      	cmp	r3, #3
 80142ae:	d107      	bne.n	80142c0 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80142b0:	f107 030e 	add.w	r3, r7, #14
 80142b4:	2202      	movs	r2, #2
 80142b6:	4619      	mov	r1, r3
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f003 f8ef 	bl	801749c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80142be:	e050      	b.n	8014362 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80142c0:	6839      	ldr	r1, [r7, #0]
 80142c2:	6878      	ldr	r0, [r7, #4]
 80142c4:	f003 f879 	bl	80173ba <USBD_CtlError>
            ret = USBD_FAIL;
 80142c8:	2303      	movs	r3, #3
 80142ca:	75fb      	strb	r3, [r7, #23]
          break;
 80142cc:	e049      	b.n	8014362 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142d4:	b2db      	uxtb	r3, r3
 80142d6:	2b03      	cmp	r3, #3
 80142d8:	d107      	bne.n	80142ea <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	3304      	adds	r3, #4
 80142de:	2201      	movs	r2, #1
 80142e0:	4619      	mov	r1, r3
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f003 f8da 	bl	801749c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80142e8:	e03b      	b.n	8014362 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80142ea:	6839      	ldr	r1, [r7, #0]
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f003 f864 	bl	80173ba <USBD_CtlError>
            ret = USBD_FAIL;
 80142f2:	2303      	movs	r3, #3
 80142f4:	75fb      	strb	r3, [r7, #23]
          break;
 80142f6:	e034      	b.n	8014362 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142fe:	b2db      	uxtb	r3, r3
 8014300:	2b03      	cmp	r3, #3
 8014302:	d106      	bne.n	8014312 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	885b      	ldrh	r3, [r3, #2]
 8014308:	b2db      	uxtb	r3, r3
 801430a:	461a      	mov	r2, r3
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014310:	e027      	b.n	8014362 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8014312:	6839      	ldr	r1, [r7, #0]
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f003 f850 	bl	80173ba <USBD_CtlError>
            ret = USBD_FAIL;
 801431a:	2303      	movs	r3, #3
 801431c:	75fb      	strb	r3, [r7, #23]
          break;
 801431e:	e020      	b.n	8014362 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014326:	b2db      	uxtb	r3, r3
 8014328:	2b03      	cmp	r3, #3
 801432a:	d119      	bne.n	8014360 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	885b      	ldrh	r3, [r3, #2]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d115      	bne.n	8014360 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	889b      	ldrh	r3, [r3, #4]
 8014338:	b2db      	uxtb	r3, r3
 801433a:	4619      	mov	r1, r3
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f007 fb31 	bl	801b9a4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	889b      	ldrh	r3, [r3, #4]
 8014346:	b2db      	uxtb	r3, r3
 8014348:	4619      	mov	r1, r3
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f000 fb2e 	bl	80149ac <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8014350:	e006      	b.n	8014360 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8014352:	6839      	ldr	r1, [r7, #0]
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f003 f830 	bl	80173ba <USBD_CtlError>
          ret = USBD_FAIL;
 801435a:	2303      	movs	r3, #3
 801435c:	75fb      	strb	r3, [r7, #23]
          break;
 801435e:	e000      	b.n	8014362 <USBD_MSC_Setup+0x1de>
          break;
 8014360:	bf00      	nop
      }
      break;
 8014362:	e006      	b.n	8014372 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8014364:	6839      	ldr	r1, [r7, #0]
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f003 f827 	bl	80173ba <USBD_CtlError>
      ret = USBD_FAIL;
 801436c:	2303      	movs	r3, #3
 801436e:	75fb      	strb	r3, [r7, #23]
      break;
 8014370:	bf00      	nop
  }

  return (uint8_t)ret;
 8014372:	7dfb      	ldrb	r3, [r7, #23]
}
 8014374:	4618      	mov	r0, r3
 8014376:	3718      	adds	r7, #24
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	460b      	mov	r3, r1
 8014386:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8014388:	78fb      	ldrb	r3, [r7, #3]
 801438a:	4619      	mov	r1, r3
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f000 f959 	bl	8014644 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8014392:	2300      	movs	r3, #0
}
 8014394:	4618      	mov	r0, r3
 8014396:	3708      	adds	r7, #8
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b082      	sub	sp, #8
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
 80143a4:	460b      	mov	r3, r1
 80143a6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80143a8:	78fb      	ldrb	r3, [r7, #3]
 80143aa:	4619      	mov	r1, r3
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f000 f983 	bl	80146b8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80143b2:	2300      	movs	r3, #0
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	3708      	adds	r7, #8
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}

080143bc <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b084      	sub	sp, #16
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80143c4:	2181      	movs	r1, #129	@ 0x81
 80143c6:	4812      	ldr	r0, [pc, #72]	@ (8014410 <USBD_MSC_GetHSCfgDesc+0x54>)
 80143c8:	f002 f9c1 	bl	801674e <USBD_GetEpDesc>
 80143cc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80143ce:	2101      	movs	r1, #1
 80143d0:	480f      	ldr	r0, [pc, #60]	@ (8014410 <USBD_MSC_GetHSCfgDesc+0x54>)
 80143d2:	f002 f9bc 	bl	801674e <USBD_GetEpDesc>
 80143d6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d006      	beq.n	80143ec <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	2200      	movs	r2, #0
 80143e2:	711a      	strb	r2, [r3, #4]
 80143e4:	2200      	movs	r2, #0
 80143e6:	f042 0202 	orr.w	r2, r2, #2
 80143ea:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d006      	beq.n	8014400 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	2200      	movs	r2, #0
 80143f6:	711a      	strb	r2, [r3, #4]
 80143f8:	2200      	movs	r2, #0
 80143fa:	f042 0202 	orr.w	r2, r2, #2
 80143fe:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2220      	movs	r2, #32
 8014404:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8014406:	4b02      	ldr	r3, [pc, #8]	@ (8014410 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8014408:	4618      	mov	r0, r3
 801440a:	3710      	adds	r7, #16
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}
 8014410:	20000088 	.word	0x20000088

08014414 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801441c:	2181      	movs	r1, #129	@ 0x81
 801441e:	4812      	ldr	r0, [pc, #72]	@ (8014468 <USBD_MSC_GetFSCfgDesc+0x54>)
 8014420:	f002 f995 	bl	801674e <USBD_GetEpDesc>
 8014424:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8014426:	2101      	movs	r1, #1
 8014428:	480f      	ldr	r0, [pc, #60]	@ (8014468 <USBD_MSC_GetFSCfgDesc+0x54>)
 801442a:	f002 f990 	bl	801674e <USBD_GetEpDesc>
 801442e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d006      	beq.n	8014444 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	2200      	movs	r2, #0
 801443a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801443e:	711a      	strb	r2, [r3, #4]
 8014440:	2200      	movs	r2, #0
 8014442:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d006      	beq.n	8014458 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	2200      	movs	r2, #0
 801444e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014452:	711a      	strb	r2, [r3, #4]
 8014454:	2200      	movs	r2, #0
 8014456:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2220      	movs	r2, #32
 801445c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801445e:	4b02      	ldr	r3, [pc, #8]	@ (8014468 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8014460:	4618      	mov	r0, r3
 8014462:	3710      	adds	r7, #16
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}
 8014468:	20000088 	.word	0x20000088

0801446c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b084      	sub	sp, #16
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8014474:	2181      	movs	r1, #129	@ 0x81
 8014476:	4812      	ldr	r0, [pc, #72]	@ (80144c0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8014478:	f002 f969 	bl	801674e <USBD_GetEpDesc>
 801447c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801447e:	2101      	movs	r1, #1
 8014480:	480f      	ldr	r0, [pc, #60]	@ (80144c0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8014482:	f002 f964 	bl	801674e <USBD_GetEpDesc>
 8014486:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d006      	beq.n	801449c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	2200      	movs	r2, #0
 8014492:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014496:	711a      	strb	r2, [r3, #4]
 8014498:	2200      	movs	r2, #0
 801449a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d006      	beq.n	80144b0 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	2200      	movs	r2, #0
 80144a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80144aa:	711a      	strb	r2, [r3, #4]
 80144ac:	2200      	movs	r2, #0
 80144ae:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2220      	movs	r2, #32
 80144b4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80144b6:	4b02      	ldr	r3, [pc, #8]	@ (80144c0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	3710      	adds	r7, #16
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}
 80144c0:	20000088 	.word	0x20000088

080144c4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80144c4:	b480      	push	{r7}
 80144c6:	b083      	sub	sp, #12
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	220a      	movs	r2, #10
 80144d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80144d2:	4b03      	ldr	r3, [pc, #12]	@ (80144e0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	370c      	adds	r7, #12
 80144d8:	46bd      	mov	sp, r7
 80144da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144de:	4770      	bx	lr
 80144e0:	200000a8 	.word	0x200000a8

080144e4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d101      	bne.n	80144f8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80144f4:	2303      	movs	r3, #3
 80144f6:	e009      	b.n	801450c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	33b0      	adds	r3, #176	@ 0xb0
 8014502:	009b      	lsls	r3, r3, #2
 8014504:	4413      	add	r3, r2
 8014506:	683a      	ldr	r2, [r7, #0]
 8014508:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801450a:	2300      	movs	r3, #0
}
 801450c:	4618      	mov	r0, r3
 801450e:	370c      	adds	r7, #12
 8014510:	46bd      	mov	sp, r7
 8014512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014516:	4770      	bx	lr

08014518 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	32b0      	adds	r2, #176	@ 0xb0
 801452a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801452e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d032      	beq.n	801459c <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	2200      	movs	r2, #0
 801453a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2200      	movs	r2, #0
 8014540:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2200      	movs	r2, #0
 8014546:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
  hmsc->scsi_sense_head = 0U;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	2200      	movs	r2, #0
 801454e:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	2200      	movs	r2, #0
 8014556:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	33b0      	adds	r3, #176	@ 0xb0
 8014564:	009b      	lsls	r3, r3, #2
 8014566:	4413      	add	r3, r2
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2000      	movs	r0, #0
 801456e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8014570:	4b0c      	ldr	r3, [pc, #48]	@ (80145a4 <MSC_BOT_Init+0x8c>)
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	4619      	mov	r1, r3
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f007 fa14 	bl	801b9a4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 801457c:	4b0a      	ldr	r3, [pc, #40]	@ (80145a8 <MSC_BOT_Init+0x90>)
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	4619      	mov	r1, r3
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f007 fa0e 	bl	801b9a4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8014588:	4b06      	ldr	r3, [pc, #24]	@ (80145a4 <MSC_BOT_Init+0x8c>)
 801458a:	7819      	ldrb	r1, [r3, #0]
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8014592:	231f      	movs	r3, #31
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f007 face 	bl	801bb36 <USBD_LL_PrepareReceive>
 801459a:	e000      	b.n	801459e <MSC_BOT_Init+0x86>
    return;
 801459c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801459e:	3710      	adds	r7, #16
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	200000b3 	.word	0x200000b3
 80145a8:	200000b2 	.word	0x200000b2

080145ac <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	32b0      	adds	r2, #176	@ 0xb0
 80145be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d01b      	beq.n	8014602 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	2200      	movs	r2, #0
 80145ce:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	2201      	movs	r2, #1
 80145d4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80145d6:	4b0d      	ldr	r3, [pc, #52]	@ (801460c <MSC_BOT_Reset+0x60>)
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	4619      	mov	r1, r3
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f007 fa1f 	bl	801ba20 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80145e2:	4b0b      	ldr	r3, [pc, #44]	@ (8014610 <MSC_BOT_Reset+0x64>)
 80145e4:	781b      	ldrb	r3, [r3, #0]
 80145e6:	4619      	mov	r1, r3
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f007 fa19 	bl	801ba20 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80145ee:	4b08      	ldr	r3, [pc, #32]	@ (8014610 <MSC_BOT_Reset+0x64>)
 80145f0:	7819      	ldrb	r1, [r3, #0]
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 80145f8:	231f      	movs	r3, #31
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f007 fa9b 	bl	801bb36 <USBD_LL_PrepareReceive>
 8014600:	e000      	b.n	8014604 <MSC_BOT_Reset+0x58>
    return;
 8014602:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8014604:	3710      	adds	r7, #16
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
 801460a:	bf00      	nop
 801460c:	200000b2 	.word	0x200000b2
 8014610:	200000b3 	.word	0x200000b3

08014614 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8014614:	b480      	push	{r7}
 8014616:	b085      	sub	sp, #20
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	32b0      	adds	r2, #176	@ 0xb0
 8014626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801462a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d002      	beq.n	8014638 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2200      	movs	r2, #0
 8014636:	721a      	strb	r2, [r3, #8]
  }
}
 8014638:	bf00      	nop
 801463a:	3714      	adds	r7, #20
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr

08014644 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b084      	sub	sp, #16
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	460b      	mov	r3, r1
 801464e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	32b0      	adds	r2, #176	@ 0xb0
 801465a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801465e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d020      	beq.n	80146a8 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	7a1b      	ldrb	r3, [r3, #8]
 801466a:	2b02      	cmp	r3, #2
 801466c:	d005      	beq.n	801467a <MSC_BOT_DataIn+0x36>
 801466e:	2b02      	cmp	r3, #2
 8014670:	db1c      	blt.n	80146ac <MSC_BOT_DataIn+0x68>
 8014672:	3b03      	subs	r3, #3
 8014674:	2b01      	cmp	r3, #1
 8014676:	d819      	bhi.n	80146ac <MSC_BOT_DataIn+0x68>
 8014678:	e011      	b.n	801469e <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 8014686:	461a      	mov	r2, r3
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f000 f9c9 	bl	8014a20 <SCSI_ProcessCmd>
 801468e:	4603      	mov	r3, r0
 8014690:	2b00      	cmp	r3, #0
 8014692:	da0d      	bge.n	80146b0 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014694:	2101      	movs	r1, #1
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f000 f90c 	bl	80148b4 <MSC_BOT_SendCSW>
      }
      break;
 801469c:	e008      	b.n	80146b0 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801469e:	2100      	movs	r1, #0
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f000 f907 	bl	80148b4 <MSC_BOT_SendCSW>
      break;
 80146a6:	e004      	b.n	80146b2 <MSC_BOT_DataIn+0x6e>
    return;
 80146a8:	bf00      	nop
 80146aa:	e002      	b.n	80146b2 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80146ac:	bf00      	nop
 80146ae:	e000      	b.n	80146b2 <MSC_BOT_DataIn+0x6e>
      break;
 80146b0:	bf00      	nop
  }
}
 80146b2:	3710      	adds	r7, #16
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	460b      	mov	r3, r1
 80146c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	32b0      	adds	r2, #176	@ 0xb0
 80146ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146d2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d01c      	beq.n	8014714 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	7a1b      	ldrb	r3, [r3, #8]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d002      	beq.n	80146e8 <MSC_BOT_DataOut+0x30>
 80146e2:	2b01      	cmp	r3, #1
 80146e4:	d004      	beq.n	80146f0 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80146e6:	e018      	b.n	801471a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 f819 	bl	8014720 <MSC_BOT_CBW_Decode>
      break;
 80146ee:	e014      	b.n	801471a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 80146fc:	461a      	mov	r2, r3
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	f000 f98e 	bl	8014a20 <SCSI_ProcessCmd>
 8014704:	4603      	mov	r3, r0
 8014706:	2b00      	cmp	r3, #0
 8014708:	da06      	bge.n	8014718 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801470a:	2101      	movs	r1, #1
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f000 f8d1 	bl	80148b4 <MSC_BOT_SendCSW>
      break;
 8014712:	e001      	b.n	8014718 <MSC_BOT_DataOut+0x60>
    return;
 8014714:	bf00      	nop
 8014716:	e000      	b.n	801471a <MSC_BOT_DataOut+0x62>
      break;
 8014718:	bf00      	nop
  }
}
 801471a:	3710      	adds	r7, #16
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	32b0      	adds	r2, #176	@ 0xb0
 8014732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014736:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d079      	beq.n	8014832 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8014756:	4b3a      	ldr	r3, [pc, #232]	@ (8014840 <MSC_BOT_CBW_Decode+0x120>)
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	4619      	mov	r1, r3
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f007 fa0b 	bl	801bb78 <USBD_LL_GetRxDataSize>
 8014762:	4603      	mov	r3, r0
 8014764:	2b1f      	cmp	r3, #31
 8014766:	d114      	bne.n	8014792 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801476e:	4a35      	ldr	r2, [pc, #212]	@ (8014844 <MSC_BOT_CBW_Decode+0x124>)
 8014770:	4293      	cmp	r3, r2
 8014772:	d10e      	bne.n	8014792 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801477a:	2b01      	cmp	r3, #1
 801477c:	d809      	bhi.n	8014792 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
 8014784:	2b00      	cmp	r3, #0
 8014786:	d004      	beq.n	8014792 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801478e:	2b10      	cmp	r3, #16
 8014790:	d90e      	bls.n	80147b0 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014798:	2320      	movs	r3, #32
 801479a:	2205      	movs	r2, #5
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f000 fe29 	bl	80153f4 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	2202      	movs	r2, #2
 80147a6:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f000 f8bd 	bl	8014928 <MSC_BOT_Abort>
 80147ae:	e043      	b.n	8014838 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 80147bc:	461a      	mov	r2, r3
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f000 f92e 	bl	8014a20 <SCSI_ProcessCmd>
 80147c4:	4603      	mov	r3, r0
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	da0c      	bge.n	80147e4 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	7a1b      	ldrb	r3, [r3, #8]
 80147ce:	2b05      	cmp	r3, #5
 80147d0:	d104      	bne.n	80147dc <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80147d2:	2101      	movs	r1, #1
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f000 f86d 	bl	80148b4 <MSC_BOT_SendCSW>
 80147da:	e02d      	b.n	8014838 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f000 f8a3 	bl	8014928 <MSC_BOT_Abort>
 80147e2:	e029      	b.n	8014838 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	7a1b      	ldrb	r3, [r3, #8]
 80147e8:	2b02      	cmp	r3, #2
 80147ea:	d024      	beq.n	8014836 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80147f0:	2b01      	cmp	r3, #1
 80147f2:	d020      	beq.n	8014836 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80147f8:	2b03      	cmp	r3, #3
 80147fa:	d01c      	beq.n	8014836 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	68db      	ldr	r3, [r3, #12]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d009      	beq.n	8014818 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	f103 0110 	add.w	r1, r3, #16
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	68db      	ldr	r3, [r3, #12]
 801480e:	461a      	mov	r2, r3
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f000 f819 	bl	8014848 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8014816:	e00f      	b.n	8014838 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d104      	bne.n	801482a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014820:	2100      	movs	r1, #0
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f000 f846 	bl	80148b4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8014828:	e006      	b.n	8014838 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f000 f87c 	bl	8014928 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8014830:	e002      	b.n	8014838 <MSC_BOT_CBW_Decode+0x118>
    return;
 8014832:	bf00      	nop
 8014834:	e000      	b.n	8014838 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8014836:	bf00      	nop
    }
  }
}
 8014838:	3710      	adds	r7, #16
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	200000b3 	.word	0x200000b3
 8014844:	43425355 	.word	0x43425355

08014848 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b086      	sub	sp, #24
 801484c:	af00      	add	r7, sp, #0
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	32b0      	adds	r2, #176	@ 0xb0
 801485e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014862:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014864:	697b      	ldr	r3, [r7, #20]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d01e      	beq.n	80148a8 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8014870:	687a      	ldr	r2, [r7, #4]
 8014872:	4293      	cmp	r3, r2
 8014874:	bf28      	it	cs
 8014876:	4613      	movcs	r3, r2
 8014878:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 801487a:	697b      	ldr	r3, [r7, #20]
 801487c:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	1ad2      	subs	r2, r2, r3
 8014884:	697b      	ldr	r3, [r7, #20]
 8014886:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801488a:	697b      	ldr	r3, [r7, #20]
 801488c:	2200      	movs	r2, #0
 801488e:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	2204      	movs	r2, #4
 8014896:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8014898:	4b05      	ldr	r3, [pc, #20]	@ (80148b0 <MSC_BOT_SendData+0x68>)
 801489a:	7819      	ldrb	r1, [r3, #0]
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	68ba      	ldr	r2, [r7, #8]
 80148a0:	68f8      	ldr	r0, [r7, #12]
 80148a2:	f007 f927 	bl	801baf4 <USBD_LL_Transmit>
 80148a6:	e000      	b.n	80148aa <MSC_BOT_SendData+0x62>
    return;
 80148a8:	bf00      	nop
}
 80148aa:	3718      	adds	r7, #24
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	200000b2 	.word	0x200000b2

080148b4 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b084      	sub	sp, #16
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	460b      	mov	r3, r1
 80148be:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	32b0      	adds	r2, #176	@ 0xb0
 80148ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ce:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d01d      	beq.n	8014912 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	4a10      	ldr	r2, [pc, #64]	@ (801491c <MSC_BOT_SendCSW+0x68>)
 80148da:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  hmsc->csw.bStatus = CSW_Status;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	78fa      	ldrb	r2, [r7, #3]
 80148e2:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2200      	movs	r2, #0
 80148ea:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80148ec:	4b0c      	ldr	r3, [pc, #48]	@ (8014920 <MSC_BOT_SendCSW+0x6c>)
 80148ee:	7819      	ldrb	r1, [r3, #0]
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	f503 6203 	add.w	r2, r3, #2096	@ 0x830
 80148f6:	230d      	movs	r3, #13
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f007 f8fb 	bl	801baf4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80148fe:	4b09      	ldr	r3, [pc, #36]	@ (8014924 <MSC_BOT_SendCSW+0x70>)
 8014900:	7819      	ldrb	r1, [r3, #0]
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8014908:	231f      	movs	r3, #31
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f007 f913 	bl	801bb36 <USBD_LL_PrepareReceive>
 8014910:	e000      	b.n	8014914 <MSC_BOT_SendCSW+0x60>
    return;
 8014912:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8014914:	3710      	adds	r7, #16
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}
 801491a:	bf00      	nop
 801491c:	53425355 	.word	0x53425355
 8014920:	200000b2 	.word	0x200000b2
 8014924:	200000b3 	.word	0x200000b3

08014928 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b084      	sub	sp, #16
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	32b0      	adds	r2, #176	@ 0xb0
 801493a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801493e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d02a      	beq.n	801499c <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 801494c:	2b00      	cmp	r3, #0
 801494e:	d10e      	bne.n	801496e <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 8014956:	2b00      	cmp	r3, #0
 8014958:	d009      	beq.n	801496e <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801495e:	2b00      	cmp	r3, #0
 8014960:	d105      	bne.n	801496e <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014962:	4b10      	ldr	r3, [pc, #64]	@ (80149a4 <MSC_BOT_Abort+0x7c>)
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	4619      	mov	r1, r3
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f007 f83a 	bl	801b9e2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801496e:	4b0e      	ldr	r3, [pc, #56]	@ (80149a8 <MSC_BOT_Abort+0x80>)
 8014970:	781b      	ldrb	r3, [r3, #0]
 8014972:	4619      	mov	r1, r3
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f007 f834 	bl	801b9e2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	7a5b      	ldrb	r3, [r3, #9]
 801497e:	2b02      	cmp	r3, #2
 8014980:	d10d      	bne.n	801499e <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014982:	4b09      	ldr	r3, [pc, #36]	@ (80149a8 <MSC_BOT_Abort+0x80>)
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	4619      	mov	r1, r3
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	f007 f82a 	bl	801b9e2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801498e:	4b05      	ldr	r3, [pc, #20]	@ (80149a4 <MSC_BOT_Abort+0x7c>)
 8014990:	781b      	ldrb	r3, [r3, #0]
 8014992:	4619      	mov	r1, r3
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f007 f824 	bl	801b9e2 <USBD_LL_StallEP>
 801499a:	e000      	b.n	801499e <MSC_BOT_Abort+0x76>
    return;
 801499c:	bf00      	nop
  }
}
 801499e:	3710      	adds	r7, #16
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	200000b3 	.word	0x200000b3
 80149a8:	200000b2 	.word	0x200000b2

080149ac <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	460b      	mov	r3, r1
 80149b6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	32b0      	adds	r2, #176	@ 0xb0
 80149c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149c6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d01d      	beq.n	8014a0a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	7a5b      	ldrb	r3, [r3, #9]
 80149d2:	2b02      	cmp	r3, #2
 80149d4:	d10c      	bne.n	80149f0 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80149d6:	4b10      	ldr	r3, [pc, #64]	@ (8014a18 <MSC_BOT_CplClrFeature+0x6c>)
 80149d8:	781b      	ldrb	r3, [r3, #0]
 80149da:	4619      	mov	r1, r3
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f007 f800 	bl	801b9e2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80149e2:	4b0e      	ldr	r3, [pc, #56]	@ (8014a1c <MSC_BOT_CplClrFeature+0x70>)
 80149e4:	781b      	ldrb	r3, [r3, #0]
 80149e6:	4619      	mov	r1, r3
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f006 fffa 	bl	801b9e2 <USBD_LL_StallEP>
 80149ee:	e00f      	b.n	8014a10 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80149f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	da0a      	bge.n	8014a0e <MSC_BOT_CplClrFeature+0x62>
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	7a5b      	ldrb	r3, [r3, #9]
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d006      	beq.n	8014a0e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014a00:	2101      	movs	r1, #1
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f7ff ff56 	bl	80148b4 <MSC_BOT_SendCSW>
 8014a08:	e002      	b.n	8014a10 <MSC_BOT_CplClrFeature+0x64>
    return;
 8014a0a:	bf00      	nop
 8014a0c:	e000      	b.n	8014a10 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8014a0e:	bf00      	nop
  }
}
 8014a10:	3710      	adds	r7, #16
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}
 8014a16:	bf00      	nop
 8014a18:	200000b2 	.word	0x200000b2
 8014a1c:	200000b3 	.word	0x200000b3

08014a20 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b086      	sub	sp, #24
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	460b      	mov	r3, r1
 8014a2a:	607a      	str	r2, [r7, #4]
 8014a2c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	32b0      	adds	r2, #176	@ 0xb0
 8014a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a3c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8014a3e:	693b      	ldr	r3, [r7, #16]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d102      	bne.n	8014a4a <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8014a44:	f04f 33ff 	mov.w	r3, #4294967295
 8014a48:	e168      	b.n	8014d1c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	2baa      	cmp	r3, #170	@ 0xaa
 8014a50:	f000 8144 	beq.w	8014cdc <SCSI_ProcessCmd+0x2bc>
 8014a54:	2baa      	cmp	r3, #170	@ 0xaa
 8014a56:	f300 8153 	bgt.w	8014d00 <SCSI_ProcessCmd+0x2e0>
 8014a5a:	2ba8      	cmp	r3, #168	@ 0xa8
 8014a5c:	f000 812c 	beq.w	8014cb8 <SCSI_ProcessCmd+0x298>
 8014a60:	2ba8      	cmp	r3, #168	@ 0xa8
 8014a62:	f300 814d 	bgt.w	8014d00 <SCSI_ProcessCmd+0x2e0>
 8014a66:	2b5a      	cmp	r3, #90	@ 0x5a
 8014a68:	f300 80c0 	bgt.w	8014bec <SCSI_ProcessCmd+0x1cc>
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	f2c0 8147 	blt.w	8014d00 <SCSI_ProcessCmd+0x2e0>
 8014a72:	2b5a      	cmp	r3, #90	@ 0x5a
 8014a74:	f200 8144 	bhi.w	8014d00 <SCSI_ProcessCmd+0x2e0>
 8014a78:	a201      	add	r2, pc, #4	@ (adr r2, 8014a80 <SCSI_ProcessCmd+0x60>)
 8014a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a7e:	bf00      	nop
 8014a80:	08014bf3 	.word	0x08014bf3
 8014a84:	08014d01 	.word	0x08014d01
 8014a88:	08014d01 	.word	0x08014d01
 8014a8c:	08014c05 	.word	0x08014c05
 8014a90:	08014d01 	.word	0x08014d01
 8014a94:	08014d01 	.word	0x08014d01
 8014a98:	08014d01 	.word	0x08014d01
 8014a9c:	08014d01 	.word	0x08014d01
 8014aa0:	08014d01 	.word	0x08014d01
 8014aa4:	08014d01 	.word	0x08014d01
 8014aa8:	08014d01 	.word	0x08014d01
 8014aac:	08014d01 	.word	0x08014d01
 8014ab0:	08014d01 	.word	0x08014d01
 8014ab4:	08014d01 	.word	0x08014d01
 8014ab8:	08014d01 	.word	0x08014d01
 8014abc:	08014d01 	.word	0x08014d01
 8014ac0:	08014d01 	.word	0x08014d01
 8014ac4:	08014d01 	.word	0x08014d01
 8014ac8:	08014c17 	.word	0x08014c17
 8014acc:	08014d01 	.word	0x08014d01
 8014ad0:	08014d01 	.word	0x08014d01
 8014ad4:	08014d01 	.word	0x08014d01
 8014ad8:	08014d01 	.word	0x08014d01
 8014adc:	08014d01 	.word	0x08014d01
 8014ae0:	08014d01 	.word	0x08014d01
 8014ae4:	08014d01 	.word	0x08014d01
 8014ae8:	08014c4d 	.word	0x08014c4d
 8014aec:	08014c29 	.word	0x08014c29
 8014af0:	08014d01 	.word	0x08014d01
 8014af4:	08014d01 	.word	0x08014d01
 8014af8:	08014c3b 	.word	0x08014c3b
 8014afc:	08014d01 	.word	0x08014d01
 8014b00:	08014d01 	.word	0x08014d01
 8014b04:	08014d01 	.word	0x08014d01
 8014b08:	08014d01 	.word	0x08014d01
 8014b0c:	08014c71 	.word	0x08014c71
 8014b10:	08014d01 	.word	0x08014d01
 8014b14:	08014c83 	.word	0x08014c83
 8014b18:	08014d01 	.word	0x08014d01
 8014b1c:	08014d01 	.word	0x08014d01
 8014b20:	08014ca7 	.word	0x08014ca7
 8014b24:	08014d01 	.word	0x08014d01
 8014b28:	08014ccb 	.word	0x08014ccb
 8014b2c:	08014d01 	.word	0x08014d01
 8014b30:	08014d01 	.word	0x08014d01
 8014b34:	08014d01 	.word	0x08014d01
 8014b38:	08014d01 	.word	0x08014d01
 8014b3c:	08014cef 	.word	0x08014cef
 8014b40:	08014d01 	.word	0x08014d01
 8014b44:	08014d01 	.word	0x08014d01
 8014b48:	08014d01 	.word	0x08014d01
 8014b4c:	08014d01 	.word	0x08014d01
 8014b50:	08014d01 	.word	0x08014d01
 8014b54:	08014d01 	.word	0x08014d01
 8014b58:	08014d01 	.word	0x08014d01
 8014b5c:	08014d01 	.word	0x08014d01
 8014b60:	08014d01 	.word	0x08014d01
 8014b64:	08014d01 	.word	0x08014d01
 8014b68:	08014d01 	.word	0x08014d01
 8014b6c:	08014d01 	.word	0x08014d01
 8014b70:	08014d01 	.word	0x08014d01
 8014b74:	08014d01 	.word	0x08014d01
 8014b78:	08014d01 	.word	0x08014d01
 8014b7c:	08014d01 	.word	0x08014d01
 8014b80:	08014d01 	.word	0x08014d01
 8014b84:	08014d01 	.word	0x08014d01
 8014b88:	08014d01 	.word	0x08014d01
 8014b8c:	08014d01 	.word	0x08014d01
 8014b90:	08014d01 	.word	0x08014d01
 8014b94:	08014d01 	.word	0x08014d01
 8014b98:	08014d01 	.word	0x08014d01
 8014b9c:	08014d01 	.word	0x08014d01
 8014ba0:	08014d01 	.word	0x08014d01
 8014ba4:	08014d01 	.word	0x08014d01
 8014ba8:	08014d01 	.word	0x08014d01
 8014bac:	08014d01 	.word	0x08014d01
 8014bb0:	08014d01 	.word	0x08014d01
 8014bb4:	08014d01 	.word	0x08014d01
 8014bb8:	08014d01 	.word	0x08014d01
 8014bbc:	08014d01 	.word	0x08014d01
 8014bc0:	08014d01 	.word	0x08014d01
 8014bc4:	08014d01 	.word	0x08014d01
 8014bc8:	08014d01 	.word	0x08014d01
 8014bcc:	08014d01 	.word	0x08014d01
 8014bd0:	08014d01 	.word	0x08014d01
 8014bd4:	08014d01 	.word	0x08014d01
 8014bd8:	08014d01 	.word	0x08014d01
 8014bdc:	08014d01 	.word	0x08014d01
 8014be0:	08014d01 	.word	0x08014d01
 8014be4:	08014d01 	.word	0x08014d01
 8014be8:	08014c5f 	.word	0x08014c5f
 8014bec:	2b9e      	cmp	r3, #158	@ 0x9e
 8014bee:	d051      	beq.n	8014c94 <SCSI_ProcessCmd+0x274>
 8014bf0:	e086      	b.n	8014d00 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8014bf2:	7afb      	ldrb	r3, [r7, #11]
 8014bf4:	687a      	ldr	r2, [r7, #4]
 8014bf6:	4619      	mov	r1, r3
 8014bf8:	68f8      	ldr	r0, [r7, #12]
 8014bfa:	f000 f893 	bl	8014d24 <SCSI_TestUnitReady>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	75fb      	strb	r3, [r7, #23]
      break;
 8014c02:	e089      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8014c04:	7afb      	ldrb	r3, [r7, #11]
 8014c06:	687a      	ldr	r2, [r7, #4]
 8014c08:	4619      	mov	r1, r3
 8014c0a:	68f8      	ldr	r0, [r7, #12]
 8014c0c:	f000 fb6c 	bl	80152e8 <SCSI_RequestSense>
 8014c10:	4603      	mov	r3, r0
 8014c12:	75fb      	strb	r3, [r7, #23]
      break;
 8014c14:	e080      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8014c16:	7afb      	ldrb	r3, [r7, #11]
 8014c18:	687a      	ldr	r2, [r7, #4]
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	68f8      	ldr	r0, [r7, #12]
 8014c1e:	f000 f8db 	bl	8014dd8 <SCSI_Inquiry>
 8014c22:	4603      	mov	r3, r0
 8014c24:	75fb      	strb	r3, [r7, #23]
      break;
 8014c26:	e077      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8014c28:	7afb      	ldrb	r3, [r7, #11]
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	68f8      	ldr	r0, [r7, #12]
 8014c30:	f000 fc2e 	bl	8015490 <SCSI_StartStopUnit>
 8014c34:	4603      	mov	r3, r0
 8014c36:	75fb      	strb	r3, [r7, #23]
      break;
 8014c38:	e06e      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014c3a:	7afb      	ldrb	r3, [r7, #11]
 8014c3c:	687a      	ldr	r2, [r7, #4]
 8014c3e:	4619      	mov	r1, r3
 8014c40:	68f8      	ldr	r0, [r7, #12]
 8014c42:	f000 fc7a 	bl	801553a <SCSI_AllowPreventRemovable>
 8014c46:	4603      	mov	r3, r0
 8014c48:	75fb      	strb	r3, [r7, #23]
      break;
 8014c4a:	e065      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014c4c:	7afb      	ldrb	r3, [r7, #11]
 8014c4e:	687a      	ldr	r2, [r7, #4]
 8014c50:	4619      	mov	r1, r3
 8014c52:	68f8      	ldr	r0, [r7, #12]
 8014c54:	f000 fae8 	bl	8015228 <SCSI_ModeSense6>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8014c5c:	e05c      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014c5e:	7afb      	ldrb	r3, [r7, #11]
 8014c60:	687a      	ldr	r2, [r7, #4]
 8014c62:	4619      	mov	r1, r3
 8014c64:	68f8      	ldr	r0, [r7, #12]
 8014c66:	f000 fb0f 	bl	8015288 <SCSI_ModeSense10>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8014c6e:	e053      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8014c70:	7afb      	ldrb	r3, [r7, #11]
 8014c72:	687a      	ldr	r2, [r7, #4]
 8014c74:	4619      	mov	r1, r3
 8014c76:	68f8      	ldr	r0, [r7, #12]
 8014c78:	f000 fa5b 	bl	8015132 <SCSI_ReadFormatCapacity>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8014c80:	e04a      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8014c82:	7afb      	ldrb	r3, [r7, #11]
 8014c84:	687a      	ldr	r2, [r7, #4]
 8014c86:	4619      	mov	r1, r3
 8014c88:	68f8      	ldr	r0, [r7, #12]
 8014c8a:	f000 f921 	bl	8014ed0 <SCSI_ReadCapacity10>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	75fb      	strb	r3, [r7, #23]
      break;
 8014c92:	e041      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8014c94:	7afb      	ldrb	r3, [r7, #11]
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	4619      	mov	r1, r3
 8014c9a:	68f8      	ldr	r0, [r7, #12]
 8014c9c:	f000 f996 	bl	8014fcc <SCSI_ReadCapacity16>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8014ca4:	e038      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8014ca6:	7afb      	ldrb	r3, [r7, #11]
 8014ca8:	687a      	ldr	r2, [r7, #4]
 8014caa:	4619      	mov	r1, r3
 8014cac:	68f8      	ldr	r0, [r7, #12]
 8014cae:	f000 fc71 	bl	8015594 <SCSI_Read10>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8014cb6:	e02f      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8014cb8:	7afb      	ldrb	r3, [r7, #11]
 8014cba:	687a      	ldr	r2, [r7, #4]
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	68f8      	ldr	r0, [r7, #12]
 8014cc0:	f000 fd12 	bl	80156e8 <SCSI_Read12>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8014cc8:	e026      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8014cca:	7afb      	ldrb	r3, [r7, #11]
 8014ccc:	687a      	ldr	r2, [r7, #4]
 8014cce:	4619      	mov	r1, r3
 8014cd0:	68f8      	ldr	r0, [r7, #12]
 8014cd2:	f000 fdbd 	bl	8015850 <SCSI_Write10>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8014cda:	e01d      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8014cdc:	7afb      	ldrb	r3, [r7, #11]
 8014cde:	687a      	ldr	r2, [r7, #4]
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	68f8      	ldr	r0, [r7, #12]
 8014ce4:	f000 fe8a 	bl	80159fc <SCSI_Write12>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	75fb      	strb	r3, [r7, #23]
      break;
 8014cec:	e014      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8014cee:	7afb      	ldrb	r3, [r7, #11]
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	4619      	mov	r1, r3
 8014cf4:	68f8      	ldr	r0, [r7, #12]
 8014cf6:	f000 ff67 	bl	8015bc8 <SCSI_Verify10>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8014cfe:	e00b      	b.n	8014d18 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014d00:	7af9      	ldrb	r1, [r7, #11]
 8014d02:	2320      	movs	r3, #32
 8014d04:	2205      	movs	r2, #5
 8014d06:	68f8      	ldr	r0, [r7, #12]
 8014d08:	f000 fb74 	bl	80153f4 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014d0c:	693b      	ldr	r3, [r7, #16]
 8014d0e:	2202      	movs	r2, #2
 8014d10:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8014d12:	23ff      	movs	r3, #255	@ 0xff
 8014d14:	75fb      	strb	r3, [r7, #23]
      break;
 8014d16:	bf00      	nop
  }

  return ret;
 8014d18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	3718      	adds	r7, #24
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}

08014d24 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b086      	sub	sp, #24
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	60f8      	str	r0, [r7, #12]
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	607a      	str	r2, [r7, #4]
 8014d30:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	32b0      	adds	r2, #176	@ 0xb0
 8014d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d40:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d102      	bne.n	8014d4e <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8014d48:	f04f 33ff 	mov.w	r3, #4294967295
 8014d4c:	e03f      	b.n	8014dce <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d00a      	beq.n	8014d6e <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014d5e:	2320      	movs	r3, #32
 8014d60:	2205      	movs	r2, #5
 8014d62:	68f8      	ldr	r0, [r7, #12]
 8014d64:	f000 fb46 	bl	80153f4 <SCSI_SenseCode>

    return -1;
 8014d68:	f04f 33ff 	mov.w	r3, #4294967295
 8014d6c:	e02f      	b.n	8014dce <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8014d74:	2b02      	cmp	r3, #2
 8014d76:	d10b      	bne.n	8014d90 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014d78:	7af9      	ldrb	r1, [r7, #11]
 8014d7a:	233a      	movs	r3, #58	@ 0x3a
 8014d7c:	2202      	movs	r2, #2
 8014d7e:	68f8      	ldr	r0, [r7, #12]
 8014d80:	f000 fb38 	bl	80153f4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	2205      	movs	r2, #5
 8014d88:	721a      	strb	r2, [r3, #8]
    return -1;
 8014d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d8e:	e01e      	b.n	8014dce <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014d96:	68fa      	ldr	r2, [r7, #12]
 8014d98:	33b0      	adds	r3, #176	@ 0xb0
 8014d9a:	009b      	lsls	r3, r3, #2
 8014d9c:	4413      	add	r3, r2
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	689b      	ldr	r3, [r3, #8]
 8014da2:	7afa      	ldrb	r2, [r7, #11]
 8014da4:	4610      	mov	r0, r2
 8014da6:	4798      	blx	r3
 8014da8:	4603      	mov	r3, r0
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d00b      	beq.n	8014dc6 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014dae:	7af9      	ldrb	r1, [r7, #11]
 8014db0:	233a      	movs	r3, #58	@ 0x3a
 8014db2:	2202      	movs	r2, #2
 8014db4:	68f8      	ldr	r0, [r7, #12]
 8014db6:	f000 fb1d 	bl	80153f4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	2205      	movs	r2, #5
 8014dbe:	721a      	strb	r2, [r3, #8]

    return -1;
 8014dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8014dc4:	e003      	b.n	8014dce <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	60da      	str	r2, [r3, #12]

  return 0;
 8014dcc:	2300      	movs	r3, #0
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3718      	adds	r7, #24
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
	...

08014dd8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b088      	sub	sp, #32
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	60f8      	str	r0, [r7, #12]
 8014de0:	460b      	mov	r3, r1
 8014de2:	607a      	str	r2, [r7, #4]
 8014de4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	32b0      	adds	r2, #176	@ 0xb0
 8014df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014df4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014df6:	69bb      	ldr	r3, [r7, #24]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d102      	bne.n	8014e02 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8014dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8014e00:	e05e      	b.n	8014ec0 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8014e02:	69bb      	ldr	r3, [r7, #24]
 8014e04:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d10a      	bne.n	8014e22 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e0c:	69bb      	ldr	r3, [r7, #24]
 8014e0e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014e12:	2320      	movs	r3, #32
 8014e14:	2205      	movs	r2, #5
 8014e16:	68f8      	ldr	r0, [r7, #12]
 8014e18:	f000 faec 	bl	80153f4 <SCSI_SenseCode>
    return -1;
 8014e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e20:	e04e      	b.n	8014ec0 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	3301      	adds	r3, #1
 8014e26:	781b      	ldrb	r3, [r3, #0]
 8014e28:	f003 0301 	and.w	r3, r3, #1
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d020      	beq.n	8014e72 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	3302      	adds	r3, #2
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d105      	bne.n	8014e46 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8014e3a:	2206      	movs	r2, #6
 8014e3c:	4922      	ldr	r1, [pc, #136]	@ (8014ec8 <SCSI_Inquiry+0xf0>)
 8014e3e:	69b8      	ldr	r0, [r7, #24]
 8014e40:	f001 f848 	bl	8015ed4 <SCSI_UpdateBotData>
 8014e44:	e03b      	b.n	8014ebe <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	3302      	adds	r3, #2
 8014e4a:	781b      	ldrb	r3, [r3, #0]
 8014e4c:	2b80      	cmp	r3, #128	@ 0x80
 8014e4e:	d105      	bne.n	8014e5c <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014e50:	2208      	movs	r2, #8
 8014e52:	491e      	ldr	r1, [pc, #120]	@ (8014ecc <SCSI_Inquiry+0xf4>)
 8014e54:	69b8      	ldr	r0, [r7, #24]
 8014e56:	f001 f83d 	bl	8015ed4 <SCSI_UpdateBotData>
 8014e5a:	e030      	b.n	8014ebe <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014e5c:	69bb      	ldr	r3, [r7, #24]
 8014e5e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014e62:	2324      	movs	r3, #36	@ 0x24
 8014e64:	2205      	movs	r2, #5
 8014e66:	68f8      	ldr	r0, [r7, #12]
 8014e68:	f000 fac4 	bl	80153f4 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e70:	e026      	b.n	8014ec0 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014e78:	68fa      	ldr	r2, [r7, #12]
 8014e7a:	33b0      	adds	r3, #176	@ 0xb0
 8014e7c:	009b      	lsls	r3, r3, #2
 8014e7e:	4413      	add	r3, r2
 8014e80:	685b      	ldr	r3, [r3, #4]
 8014e82:	69d9      	ldr	r1, [r3, #28]
 8014e84:	7afa      	ldrb	r2, [r7, #11]
 8014e86:	4613      	mov	r3, r2
 8014e88:	00db      	lsls	r3, r3, #3
 8014e8a:	4413      	add	r3, r2
 8014e8c:	009b      	lsls	r3, r3, #2
 8014e8e:	440b      	add	r3, r1
 8014e90:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8014e92:	697b      	ldr	r3, [r7, #20]
 8014e94:	3304      	adds	r3, #4
 8014e96:	781b      	ldrb	r3, [r3, #0]
 8014e98:	3305      	adds	r3, #5
 8014e9a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	3304      	adds	r3, #4
 8014ea0:	781b      	ldrb	r3, [r3, #0]
 8014ea2:	461a      	mov	r2, r3
 8014ea4:	8bfb      	ldrh	r3, [r7, #30]
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	d303      	bcc.n	8014eb2 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	3304      	adds	r3, #4
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8014eb2:	8bfb      	ldrh	r3, [r7, #30]
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	6979      	ldr	r1, [r7, #20]
 8014eb8:	69b8      	ldr	r0, [r7, #24]
 8014eba:	f001 f80b 	bl	8015ed4 <SCSI_UpdateBotData>
  }

  return 0;
 8014ebe:	2300      	movs	r3, #0
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	3720      	adds	r7, #32
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	200000b4 	.word	0x200000b4
 8014ecc:	200000bc 	.word	0x200000bc

08014ed0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b086      	sub	sp, #24
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	60f8      	str	r0, [r7, #12]
 8014ed8:	460b      	mov	r3, r1
 8014eda:	607a      	str	r2, [r7, #4]
 8014edc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	32b0      	adds	r2, #176	@ 0xb0
 8014ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d102      	bne.n	8014efa <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8014ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ef8:	e064      	b.n	8014fc4 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014f00:	68fa      	ldr	r2, [r7, #12]
 8014f02:	33b0      	adds	r3, #176	@ 0xb0
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	4413      	add	r3, r2
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	697a      	ldr	r2, [r7, #20]
 8014f0e:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8014f12:	697a      	ldr	r2, [r7, #20]
 8014f14:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8014f18:	7af8      	ldrb	r0, [r7, #11]
 8014f1a:	4798      	blx	r3
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014f20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d104      	bne.n	8014f32 <SCSI_ReadCapacity10+0x62>
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8014f2e:	2b02      	cmp	r3, #2
 8014f30:	d108      	bne.n	8014f44 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014f32:	7af9      	ldrb	r1, [r7, #11]
 8014f34:	233a      	movs	r3, #58	@ 0x3a
 8014f36:	2202      	movs	r2, #2
 8014f38:	68f8      	ldr	r0, [r7, #12]
 8014f3a:	f000 fa5b 	bl	80153f4 <SCSI_SenseCode>
    return -1;
 8014f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f42:	e03f      	b.n	8014fc4 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8014f4a:	3b01      	subs	r3, #1
 8014f4c:	0e1b      	lsrs	r3, r3, #24
 8014f4e:	b2da      	uxtb	r2, r3
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8014f5a:	3b01      	subs	r3, #1
 8014f5c:	0c1b      	lsrs	r3, r3, #16
 8014f5e:	b2da      	uxtb	r2, r3
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014f64:	697b      	ldr	r3, [r7, #20]
 8014f66:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8014f6a:	3b01      	subs	r3, #1
 8014f6c:	0a1b      	lsrs	r3, r3, #8
 8014f6e:	b2da      	uxtb	r2, r3
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8014f7a:	b2db      	uxtb	r3, r3
 8014f7c:	3b01      	subs	r3, #1
 8014f7e:	b2da      	uxtb	r2, r3
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014f84:	697b      	ldr	r3, [r7, #20]
 8014f86:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8014f8a:	161b      	asrs	r3, r3, #24
 8014f8c:	b2da      	uxtb	r2, r3
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014f92:	697b      	ldr	r3, [r7, #20]
 8014f94:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8014f98:	141b      	asrs	r3, r3, #16
 8014f9a:	b2da      	uxtb	r2, r3
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8014fa6:	0a1b      	lsrs	r3, r3, #8
 8014fa8:	b29b      	uxth	r3, r3
 8014faa:	b2da      	uxtb	r2, r3
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8014fb6:	b2da      	uxtb	r2, r3
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	2208      	movs	r2, #8
 8014fc0:	60da      	str	r2, [r3, #12]

  return 0;
 8014fc2:	2300      	movs	r3, #0

}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	3718      	adds	r7, #24
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}

08014fcc <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b088      	sub	sp, #32
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	60f8      	str	r0, [r7, #12]
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	607a      	str	r2, [r7, #4]
 8014fd8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	32b0      	adds	r2, #176	@ 0xb0
 8014fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fe8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d102      	bne.n	8014ff6 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8014ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ff4:	e099      	b.n	801512a <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014ffc:	68fa      	ldr	r2, [r7, #12]
 8014ffe:	33b0      	adds	r3, #176	@ 0xb0
 8015000:	009b      	lsls	r3, r3, #2
 8015002:	4413      	add	r3, r2
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	685b      	ldr	r3, [r3, #4]
 8015008:	69ba      	ldr	r2, [r7, #24]
 801500a:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 801500e:	69ba      	ldr	r2, [r7, #24]
 8015010:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8015014:	7af8      	ldrb	r0, [r7, #11]
 8015016:	4798      	blx	r3
 8015018:	4603      	mov	r3, r0
 801501a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801501c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d104      	bne.n	801502e <SCSI_ReadCapacity16+0x62>
 8015024:	69bb      	ldr	r3, [r7, #24]
 8015026:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 801502a:	2b02      	cmp	r3, #2
 801502c:	d108      	bne.n	8015040 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801502e:	7af9      	ldrb	r1, [r7, #11]
 8015030:	233a      	movs	r3, #58	@ 0x3a
 8015032:	2202      	movs	r2, #2
 8015034:	68f8      	ldr	r0, [r7, #12]
 8015036:	f000 f9dd 	bl	80153f4 <SCSI_SenseCode>
    return -1;
 801503a:	f04f 33ff 	mov.w	r3, #4294967295
 801503e:	e074      	b.n	801512a <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	330a      	adds	r3, #10
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	330b      	adds	r3, #11
 801504c:	781b      	ldrb	r3, [r3, #0]
 801504e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015050:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	330c      	adds	r3, #12
 8015056:	781b      	ldrb	r3, [r3, #0]
 8015058:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801505a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801505c:	687a      	ldr	r2, [r7, #4]
 801505e:	320d      	adds	r2, #13
 8015060:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8015062:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015064:	69bb      	ldr	r3, [r7, #24]
 8015066:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8015068:	2300      	movs	r3, #0
 801506a:	77fb      	strb	r3, [r7, #31]
 801506c:	e007      	b.n	801507e <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 801506e:	7ffb      	ldrb	r3, [r7, #31]
 8015070:	69ba      	ldr	r2, [r7, #24]
 8015072:	4413      	add	r3, r2
 8015074:	2200      	movs	r2, #0
 8015076:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8015078:	7ffb      	ldrb	r3, [r7, #31]
 801507a:	3301      	adds	r3, #1
 801507c:	77fb      	strb	r3, [r7, #31]
 801507e:	7ffa      	ldrb	r2, [r7, #31]
 8015080:	69bb      	ldr	r3, [r7, #24]
 8015082:	68db      	ldr	r3, [r3, #12]
 8015084:	429a      	cmp	r2, r3
 8015086:	d3f2      	bcc.n	801506e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8015088:	69bb      	ldr	r3, [r7, #24]
 801508a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 801508e:	3b01      	subs	r3, #1
 8015090:	0e1b      	lsrs	r3, r3, #24
 8015092:	b2da      	uxtb	r2, r3
 8015094:	69bb      	ldr	r3, [r7, #24]
 8015096:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8015098:	69bb      	ldr	r3, [r7, #24]
 801509a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 801509e:	3b01      	subs	r3, #1
 80150a0:	0c1b      	lsrs	r3, r3, #16
 80150a2:	b2da      	uxtb	r2, r3
 80150a4:	69bb      	ldr	r3, [r7, #24]
 80150a6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80150a8:	69bb      	ldr	r3, [r7, #24]
 80150aa:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 80150ae:	3b01      	subs	r3, #1
 80150b0:	0a1b      	lsrs	r3, r3, #8
 80150b2:	b2da      	uxtb	r2, r3
 80150b4:	69bb      	ldr	r3, [r7, #24]
 80150b6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80150b8:	69bb      	ldr	r3, [r7, #24]
 80150ba:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 80150be:	b2db      	uxtb	r3, r3
 80150c0:	3b01      	subs	r3, #1
 80150c2:	b2da      	uxtb	r2, r3
 80150c4:	69bb      	ldr	r3, [r7, #24]
 80150c6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80150c8:	69bb      	ldr	r3, [r7, #24]
 80150ca:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80150ce:	161b      	asrs	r3, r3, #24
 80150d0:	b2da      	uxtb	r2, r3
 80150d2:	69bb      	ldr	r3, [r7, #24]
 80150d4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80150d6:	69bb      	ldr	r3, [r7, #24]
 80150d8:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80150dc:	141b      	asrs	r3, r3, #16
 80150de:	b2da      	uxtb	r2, r3
 80150e0:	69bb      	ldr	r3, [r7, #24]
 80150e2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80150e4:	69bb      	ldr	r3, [r7, #24]
 80150e6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80150ea:	0a1b      	lsrs	r3, r3, #8
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	b2da      	uxtb	r2, r3
 80150f0:	69bb      	ldr	r3, [r7, #24]
 80150f2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80150f4:	69bb      	ldr	r3, [r7, #24]
 80150f6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80150fa:	b2da      	uxtb	r2, r3
 80150fc:	69bb      	ldr	r3, [r7, #24]
 80150fe:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	330a      	adds	r3, #10
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	330b      	adds	r3, #11
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015110:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	330c      	adds	r3, #12
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801511a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	320d      	adds	r2, #13
 8015120:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8015122:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015124:	69bb      	ldr	r3, [r7, #24]
 8015126:	60da      	str	r2, [r3, #12]

  return 0;
 8015128:	2300      	movs	r3, #0
}
 801512a:	4618      	mov	r0, r3
 801512c:	3720      	adds	r7, #32
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}

08015132 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015132:	b580      	push	{r7, lr}
 8015134:	b088      	sub	sp, #32
 8015136:	af00      	add	r7, sp, #0
 8015138:	60f8      	str	r0, [r7, #12]
 801513a:	460b      	mov	r3, r1
 801513c:	607a      	str	r2, [r7, #4]
 801513e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	32b0      	adds	r2, #176	@ 0xb0
 801514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801514e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8015150:	69bb      	ldr	r3, [r7, #24]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d102      	bne.n	801515c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8015156:	f04f 33ff 	mov.w	r3, #4294967295
 801515a:	e061      	b.n	8015220 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015162:	68fa      	ldr	r2, [r7, #12]
 8015164:	33b0      	adds	r3, #176	@ 0xb0
 8015166:	009b      	lsls	r3, r3, #2
 8015168:	4413      	add	r3, r2
 801516a:	685b      	ldr	r3, [r3, #4]
 801516c:	685b      	ldr	r3, [r3, #4]
 801516e:	f107 0214 	add.w	r2, r7, #20
 8015172:	f107 0110 	add.w	r1, r7, #16
 8015176:	7af8      	ldrb	r0, [r7, #11]
 8015178:	4798      	blx	r3
 801517a:	4603      	mov	r3, r0
 801517c:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801517e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d104      	bne.n	8015190 <SCSI_ReadFormatCapacity+0x5e>
 8015186:	69bb      	ldr	r3, [r7, #24]
 8015188:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 801518c:	2b02      	cmp	r3, #2
 801518e:	d108      	bne.n	80151a2 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015190:	7af9      	ldrb	r1, [r7, #11]
 8015192:	233a      	movs	r3, #58	@ 0x3a
 8015194:	2202      	movs	r2, #2
 8015196:	68f8      	ldr	r0, [r7, #12]
 8015198:	f000 f92c 	bl	80153f4 <SCSI_SenseCode>
    return -1;
 801519c:	f04f 33ff 	mov.w	r3, #4294967295
 80151a0:	e03e      	b.n	8015220 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80151a2:	2300      	movs	r3, #0
 80151a4:	83fb      	strh	r3, [r7, #30]
 80151a6:	e007      	b.n	80151b8 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80151a8:	8bfb      	ldrh	r3, [r7, #30]
 80151aa:	69ba      	ldr	r2, [r7, #24]
 80151ac:	4413      	add	r3, r2
 80151ae:	2200      	movs	r2, #0
 80151b0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80151b2:	8bfb      	ldrh	r3, [r7, #30]
 80151b4:	3301      	adds	r3, #1
 80151b6:	83fb      	strh	r3, [r7, #30]
 80151b8:	8bfb      	ldrh	r3, [r7, #30]
 80151ba:	2b0b      	cmp	r3, #11
 80151bc:	d9f4      	bls.n	80151a8 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	2208      	movs	r2, #8
 80151c2:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	3b01      	subs	r3, #1
 80151c8:	0e1b      	lsrs	r3, r3, #24
 80151ca:	b2da      	uxtb	r2, r3
 80151cc:	69bb      	ldr	r3, [r7, #24]
 80151ce:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	3b01      	subs	r3, #1
 80151d4:	0c1b      	lsrs	r3, r3, #16
 80151d6:	b2da      	uxtb	r2, r3
 80151d8:	69bb      	ldr	r3, [r7, #24]
 80151da:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	3b01      	subs	r3, #1
 80151e0:	0a1b      	lsrs	r3, r3, #8
 80151e2:	b2da      	uxtb	r2, r3
 80151e4:	69bb      	ldr	r3, [r7, #24]
 80151e6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	3b01      	subs	r3, #1
 80151ee:	b2da      	uxtb	r2, r3
 80151f0:	69bb      	ldr	r3, [r7, #24]
 80151f2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80151f4:	69bb      	ldr	r3, [r7, #24]
 80151f6:	2202      	movs	r2, #2
 80151f8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80151fa:	8abb      	ldrh	r3, [r7, #20]
 80151fc:	141b      	asrs	r3, r3, #16
 80151fe:	b2da      	uxtb	r2, r3
 8015200:	69bb      	ldr	r3, [r7, #24]
 8015202:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8015204:	8abb      	ldrh	r3, [r7, #20]
 8015206:	0a1b      	lsrs	r3, r3, #8
 8015208:	b29b      	uxth	r3, r3
 801520a:	b2da      	uxtb	r2, r3
 801520c:	69bb      	ldr	r3, [r7, #24]
 801520e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8015210:	8abb      	ldrh	r3, [r7, #20]
 8015212:	b2da      	uxtb	r2, r3
 8015214:	69bb      	ldr	r3, [r7, #24]
 8015216:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8015218:	69bb      	ldr	r3, [r7, #24]
 801521a:	220c      	movs	r2, #12
 801521c:	60da      	str	r2, [r3, #12]

  return 0;
 801521e:	2300      	movs	r3, #0
}
 8015220:	4618      	mov	r0, r3
 8015222:	3720      	adds	r7, #32
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b086      	sub	sp, #24
 801522c:	af00      	add	r7, sp, #0
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	460b      	mov	r3, r1
 8015232:	607a      	str	r2, [r7, #4]
 8015234:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	32b0      	adds	r2, #176	@ 0xb0
 8015240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015244:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8015246:	2317      	movs	r3, #23
 8015248:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801524a:	693b      	ldr	r3, [r7, #16]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d102      	bne.n	8015256 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8015250:	f04f 33ff 	mov.w	r3, #4294967295
 8015254:	e011      	b.n	801527a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	3304      	adds	r3, #4
 801525a:	781b      	ldrb	r3, [r3, #0]
 801525c:	461a      	mov	r2, r3
 801525e:	8afb      	ldrh	r3, [r7, #22]
 8015260:	4293      	cmp	r3, r2
 8015262:	d303      	bcc.n	801526c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	3304      	adds	r3, #4
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801526c:	8afb      	ldrh	r3, [r7, #22]
 801526e:	461a      	mov	r2, r3
 8015270:	4904      	ldr	r1, [pc, #16]	@ (8015284 <SCSI_ModeSense6+0x5c>)
 8015272:	6938      	ldr	r0, [r7, #16]
 8015274:	f000 fe2e 	bl	8015ed4 <SCSI_UpdateBotData>

  return 0;
 8015278:	2300      	movs	r3, #0
}
 801527a:	4618      	mov	r0, r3
 801527c:	3718      	adds	r7, #24
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	200000c4 	.word	0x200000c4

08015288 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b086      	sub	sp, #24
 801528c:	af00      	add	r7, sp, #0
 801528e:	60f8      	str	r0, [r7, #12]
 8015290:	460b      	mov	r3, r1
 8015292:	607a      	str	r2, [r7, #4]
 8015294:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	32b0      	adds	r2, #176	@ 0xb0
 80152a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152a4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80152a6:	231b      	movs	r3, #27
 80152a8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d102      	bne.n	80152b6 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80152b0:	f04f 33ff 	mov.w	r3, #4294967295
 80152b4:	e011      	b.n	80152da <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	3308      	adds	r3, #8
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	461a      	mov	r2, r3
 80152be:	8afb      	ldrh	r3, [r7, #22]
 80152c0:	4293      	cmp	r3, r2
 80152c2:	d303      	bcc.n	80152cc <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	3308      	adds	r3, #8
 80152c8:	781b      	ldrb	r3, [r3, #0]
 80152ca:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80152cc:	8afb      	ldrh	r3, [r7, #22]
 80152ce:	461a      	mov	r2, r3
 80152d0:	4904      	ldr	r1, [pc, #16]	@ (80152e4 <SCSI_ModeSense10+0x5c>)
 80152d2:	6938      	ldr	r0, [r7, #16]
 80152d4:	f000 fdfe 	bl	8015ed4 <SCSI_UpdateBotData>

  return 0;
 80152d8:	2300      	movs	r3, #0
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3718      	adds	r7, #24
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}
 80152e2:	bf00      	nop
 80152e4:	200000dc 	.word	0x200000dc

080152e8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b086      	sub	sp, #24
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	60f8      	str	r0, [r7, #12]
 80152f0:	460b      	mov	r3, r1
 80152f2:	607a      	str	r2, [r7, #4]
 80152f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	32b0      	adds	r2, #176	@ 0xb0
 8015300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015304:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d102      	bne.n	8015312 <SCSI_RequestSense+0x2a>
  {
    return -1;
 801530c:	f04f 33ff 	mov.w	r3, #4294967295
 8015310:	e06c      	b.n	80153ec <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8015312:	693b      	ldr	r3, [r7, #16]
 8015314:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015318:	2b00      	cmp	r3, #0
 801531a:	d10a      	bne.n	8015332 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015322:	2320      	movs	r3, #32
 8015324:	2205      	movs	r2, #5
 8015326:	68f8      	ldr	r0, [r7, #12]
 8015328:	f000 f864 	bl	80153f4 <SCSI_SenseCode>
    return -1;
 801532c:	f04f 33ff 	mov.w	r3, #4294967295
 8015330:	e05c      	b.n	80153ec <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8015332:	2300      	movs	r3, #0
 8015334:	75fb      	strb	r3, [r7, #23]
 8015336:	e007      	b.n	8015348 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8015338:	7dfb      	ldrb	r3, [r7, #23]
 801533a:	693a      	ldr	r2, [r7, #16]
 801533c:	4413      	add	r3, r2
 801533e:	2200      	movs	r2, #0
 8015340:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8015342:	7dfb      	ldrb	r3, [r7, #23]
 8015344:	3301      	adds	r3, #1
 8015346:	75fb      	strb	r3, [r7, #23]
 8015348:	7dfb      	ldrb	r3, [r7, #23]
 801534a:	2b11      	cmp	r3, #17
 801534c:	d9f4      	bls.n	8015338 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	2270      	movs	r2, #112	@ 0x70
 8015352:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	220c      	movs	r2, #12
 8015358:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801535a:	693b      	ldr	r3, [r7, #16]
 801535c:	f893 2860 	ldrb.w	r2, [r3, #2144]	@ 0x860
 8015360:	693b      	ldr	r3, [r7, #16]
 8015362:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8015366:	429a      	cmp	r2, r3
 8015368:	d031      	beq.n	80153ce <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801536a:	693b      	ldr	r3, [r7, #16]
 801536c:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8015370:	461a      	mov	r2, r3
 8015372:	693b      	ldr	r3, [r7, #16]
 8015374:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8015378:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8015386:	693a      	ldr	r2, [r7, #16]
 8015388:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 801538c:	00db      	lsls	r3, r3, #3
 801538e:	4413      	add	r3, r2
 8015390:	791a      	ldrb	r2, [r3, #4]
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8015396:	693b      	ldr	r3, [r7, #16]
 8015398:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 801539c:	693a      	ldr	r2, [r7, #16]
 801539e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80153a2:	00db      	lsls	r3, r3, #3
 80153a4:	4413      	add	r3, r2
 80153a6:	795a      	ldrb	r2, [r3, #5]
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 80153b2:	3301      	adds	r3, #1
 80153b4:	b2da      	uxtb	r2, r3
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 80153c2:	2b04      	cmp	r3, #4
 80153c4:	d103      	bne.n	80153ce <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	2200      	movs	r2, #0
 80153ca:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	2212      	movs	r2, #18
 80153d2:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	3304      	adds	r3, #4
 80153d8:	781b      	ldrb	r3, [r3, #0]
 80153da:	2b12      	cmp	r3, #18
 80153dc:	d805      	bhi.n	80153ea <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	3304      	adds	r3, #4
 80153e2:	781b      	ldrb	r3, [r3, #0]
 80153e4:	461a      	mov	r2, r3
 80153e6:	693b      	ldr	r3, [r7, #16]
 80153e8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80153ea:	2300      	movs	r3, #0
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3718      	adds	r7, #24
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}

080153f4 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80153f4:	b480      	push	{r7}
 80153f6:	b085      	sub	sp, #20
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
 80153fc:	4608      	mov	r0, r1
 80153fe:	4611      	mov	r1, r2
 8015400:	461a      	mov	r2, r3
 8015402:	4603      	mov	r3, r0
 8015404:	70fb      	strb	r3, [r7, #3]
 8015406:	460b      	mov	r3, r1
 8015408:	70bb      	strb	r3, [r7, #2]
 801540a:	4613      	mov	r3, r2
 801540c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	32b0      	adds	r2, #176	@ 0xb0
 8015418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801541c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d02f      	beq.n	8015484 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801542a:	461a      	mov	r2, r3
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8015432:	78b9      	ldrb	r1, [r7, #2]
 8015434:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801543e:	68fa      	ldr	r2, [r7, #12]
 8015440:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8015444:	00db      	lsls	r3, r3, #3
 8015446:	4413      	add	r3, r2
 8015448:	787a      	ldrb	r2, [r7, #1]
 801544a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8015452:	68fa      	ldr	r2, [r7, #12]
 8015454:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8015458:	00db      	lsls	r3, r3, #3
 801545a:	4413      	add	r3, r2
 801545c:	2200      	movs	r2, #0
 801545e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8015466:	3301      	adds	r3, #1
 8015468:	b2da      	uxtb	r2, r3
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8015476:	2b04      	cmp	r3, #4
 8015478:	d105      	bne.n	8015486 <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	2200      	movs	r2, #0
 801547e:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
 8015482:	e000      	b.n	8015486 <SCSI_SenseCode+0x92>
    return;
 8015484:	bf00      	nop
  }
}
 8015486:	3714      	adds	r7, #20
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr

08015490 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b086      	sub	sp, #24
 8015494:	af00      	add	r7, sp, #0
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	460b      	mov	r3, r1
 801549a:	607a      	str	r2, [r7, #4]
 801549c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	32b0      	adds	r2, #176	@ 0xb0
 80154a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80154ae:	697b      	ldr	r3, [r7, #20]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d102      	bne.n	80154ba <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80154b4:	f04f 33ff 	mov.w	r3, #4294967295
 80154b8:	e03b      	b.n	8015532 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	d10f      	bne.n	80154e4 <SCSI_StartStopUnit+0x54>
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	3304      	adds	r3, #4
 80154c8:	781b      	ldrb	r3, [r3, #0]
 80154ca:	f003 0303 	and.w	r3, r3, #3
 80154ce:	2b02      	cmp	r3, #2
 80154d0:	d108      	bne.n	80154e4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80154d2:	7af9      	ldrb	r1, [r7, #11]
 80154d4:	2324      	movs	r3, #36	@ 0x24
 80154d6:	2205      	movs	r2, #5
 80154d8:	68f8      	ldr	r0, [r7, #12]
 80154da:	f7ff ff8b 	bl	80153f4 <SCSI_SenseCode>

    return -1;
 80154de:	f04f 33ff 	mov.w	r3, #4294967295
 80154e2:	e026      	b.n	8015532 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	3304      	adds	r3, #4
 80154e8:	781b      	ldrb	r3, [r3, #0]
 80154ea:	f003 0303 	and.w	r3, r3, #3
 80154ee:	2b01      	cmp	r3, #1
 80154f0:	d104      	bne.n	80154fc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	2200      	movs	r2, #0
 80154f6:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 80154fa:	e016      	b.n	801552a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	3304      	adds	r3, #4
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	f003 0303 	and.w	r3, r3, #3
 8015506:	2b02      	cmp	r3, #2
 8015508:	d104      	bne.n	8015514 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	2202      	movs	r2, #2
 801550e:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 8015512:	e00a      	b.n	801552a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	3304      	adds	r3, #4
 8015518:	781b      	ldrb	r3, [r3, #0]
 801551a:	f003 0303 	and.w	r3, r3, #3
 801551e:	2b03      	cmp	r3, #3
 8015520:	d103      	bne.n	801552a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	2200      	movs	r2, #0
 8015526:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801552a:	697b      	ldr	r3, [r7, #20]
 801552c:	2200      	movs	r2, #0
 801552e:	60da      	str	r2, [r3, #12]

  return 0;
 8015530:	2300      	movs	r3, #0
}
 8015532:	4618      	mov	r0, r3
 8015534:	3718      	adds	r7, #24
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}

0801553a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801553a:	b480      	push	{r7}
 801553c:	b087      	sub	sp, #28
 801553e:	af00      	add	r7, sp, #0
 8015540:	60f8      	str	r0, [r7, #12]
 8015542:	460b      	mov	r3, r1
 8015544:	607a      	str	r2, [r7, #4]
 8015546:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	32b0      	adds	r2, #176	@ 0xb0
 8015552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015556:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d102      	bne.n	8015564 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801555e:	f04f 33ff 	mov.w	r3, #4294967295
 8015562:	e011      	b.n	8015588 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	3304      	adds	r3, #4
 8015568:	781b      	ldrb	r3, [r3, #0]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d104      	bne.n	8015578 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	2200      	movs	r2, #0
 8015572:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 8015576:	e003      	b.n	8015580 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	2201      	movs	r2, #1
 801557c:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }

  hmsc->bot_data_length = 0U;
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	2200      	movs	r2, #0
 8015584:	60da      	str	r2, [r3, #12]

  return 0;
 8015586:	2300      	movs	r3, #0
}
 8015588:	4618      	mov	r0, r3
 801558a:	371c      	adds	r7, #28
 801558c:	46bd      	mov	sp, r7
 801558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015592:	4770      	bx	lr

08015594 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b086      	sub	sp, #24
 8015598:	af00      	add	r7, sp, #0
 801559a:	60f8      	str	r0, [r7, #12]
 801559c:	460b      	mov	r3, r1
 801559e:	607a      	str	r2, [r7, #4]
 80155a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	32b0      	adds	r2, #176	@ 0xb0
 80155ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d102      	bne.n	80155be <SCSI_Read10+0x2a>
  {
    return -1;
 80155b8:	f04f 33ff 	mov.w	r3, #4294967295
 80155bc:	e090      	b.n	80156e0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	7a1b      	ldrb	r3, [r3, #8]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	f040 8082 	bne.w	80156cc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80155ce:	b25b      	sxtb	r3, r3
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	db0a      	blt.n	80155ea <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80155da:	2320      	movs	r3, #32
 80155dc:	2205      	movs	r2, #5
 80155de:	68f8      	ldr	r0, [r7, #12]
 80155e0:	f7ff ff08 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 80155e4:	f04f 33ff 	mov.w	r3, #4294967295
 80155e8:	e07a      	b.n	80156e0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80155ea:	697b      	ldr	r3, [r7, #20]
 80155ec:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80155f0:	2b02      	cmp	r3, #2
 80155f2:	d108      	bne.n	8015606 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80155f4:	7af9      	ldrb	r1, [r7, #11]
 80155f6:	233a      	movs	r3, #58	@ 0x3a
 80155f8:	2202      	movs	r2, #2
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	f7ff fefa 	bl	80153f4 <SCSI_SenseCode>

      return -1;
 8015600:	f04f 33ff 	mov.w	r3, #4294967295
 8015604:	e06c      	b.n	80156e0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801560c:	68fa      	ldr	r2, [r7, #12]
 801560e:	33b0      	adds	r3, #176	@ 0xb0
 8015610:	009b      	lsls	r3, r3, #2
 8015612:	4413      	add	r3, r2
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	689b      	ldr	r3, [r3, #8]
 8015618:	7afa      	ldrb	r2, [r7, #11]
 801561a:	4610      	mov	r0, r2
 801561c:	4798      	blx	r3
 801561e:	4603      	mov	r3, r0
 8015620:	2b00      	cmp	r3, #0
 8015622:	d008      	beq.n	8015636 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015624:	7af9      	ldrb	r1, [r7, #11]
 8015626:	233a      	movs	r3, #58	@ 0x3a
 8015628:	2202      	movs	r2, #2
 801562a:	68f8      	ldr	r0, [r7, #12]
 801562c:	f7ff fee2 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 8015630:	f04f 33ff 	mov.w	r3, #4294967295
 8015634:	e054      	b.n	80156e0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	3302      	adds	r3, #2
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	3303      	adds	r3, #3
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015646:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	3304      	adds	r3, #4
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015650:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015652:	687a      	ldr	r2, [r7, #4]
 8015654:	3205      	adds	r2, #5
 8015656:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015658:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	3307      	adds	r3, #7
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	021b      	lsls	r3, r3, #8
 8015668:	687a      	ldr	r2, [r7, #4]
 801566a:	3208      	adds	r2, #8
 801566c:	7812      	ldrb	r2, [r2, #0]
 801566e:	431a      	orrs	r2, r3
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015682:	7af9      	ldrb	r1, [r7, #11]
 8015684:	68f8      	ldr	r0, [r7, #12]
 8015686:	f000 fadc 	bl	8015c42 <SCSI_CheckAddressRange>
 801568a:	4603      	mov	r3, r0
 801568c:	2b00      	cmp	r3, #0
 801568e:	da02      	bge.n	8015696 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015690:	f04f 33ff 	mov.w	r3, #4294967295
 8015694:	e024      	b.n	80156e0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8015696:	697b      	ldr	r3, [r7, #20]
 8015698:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80156a2:	6979      	ldr	r1, [r7, #20]
 80156a4:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 80156a8:	fb01 f303 	mul.w	r3, r1, r3
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d00a      	beq.n	80156c6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80156b0:	697b      	ldr	r3, [r7, #20]
 80156b2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80156b6:	2320      	movs	r3, #32
 80156b8:	2205      	movs	r2, #5
 80156ba:	68f8      	ldr	r0, [r7, #12]
 80156bc:	f7ff fe9a 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 80156c0:	f04f 33ff 	mov.w	r3, #4294967295
 80156c4:	e00c      	b.n	80156e0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	2202      	movs	r2, #2
 80156ca:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80156d2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80156d4:	7afb      	ldrb	r3, [r7, #11]
 80156d6:	4619      	mov	r1, r3
 80156d8:	68f8      	ldr	r0, [r7, #12]
 80156da:	f000 fadf 	bl	8015c9c <SCSI_ProcessRead>
 80156de:	4603      	mov	r3, r0
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	3718      	adds	r7, #24
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}

080156e8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b086      	sub	sp, #24
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	60f8      	str	r0, [r7, #12]
 80156f0:	460b      	mov	r3, r1
 80156f2:	607a      	str	r2, [r7, #4]
 80156f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	32b0      	adds	r2, #176	@ 0xb0
 8015700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015704:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d102      	bne.n	8015712 <SCSI_Read12+0x2a>
  {
    return -1;
 801570c:	f04f 33ff 	mov.w	r3, #4294967295
 8015710:	e09a      	b.n	8015848 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	7a1b      	ldrb	r3, [r3, #8]
 8015716:	2b00      	cmp	r3, #0
 8015718:	f040 808c 	bne.w	8015834 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801571c:	697b      	ldr	r3, [r7, #20]
 801571e:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8015722:	b25b      	sxtb	r3, r3
 8015724:	2b00      	cmp	r3, #0
 8015726:	db0a      	blt.n	801573e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801572e:	2320      	movs	r3, #32
 8015730:	2205      	movs	r2, #5
 8015732:	68f8      	ldr	r0, [r7, #12]
 8015734:	f7ff fe5e 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 8015738:	f04f 33ff 	mov.w	r3, #4294967295
 801573c:	e084      	b.n	8015848 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8015744:	2b02      	cmp	r3, #2
 8015746:	d108      	bne.n	801575a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015748:	7af9      	ldrb	r1, [r7, #11]
 801574a:	233a      	movs	r3, #58	@ 0x3a
 801574c:	2202      	movs	r2, #2
 801574e:	68f8      	ldr	r0, [r7, #12]
 8015750:	f7ff fe50 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 8015754:	f04f 33ff 	mov.w	r3, #4294967295
 8015758:	e076      	b.n	8015848 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015760:	68fa      	ldr	r2, [r7, #12]
 8015762:	33b0      	adds	r3, #176	@ 0xb0
 8015764:	009b      	lsls	r3, r3, #2
 8015766:	4413      	add	r3, r2
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	689b      	ldr	r3, [r3, #8]
 801576c:	7afa      	ldrb	r2, [r7, #11]
 801576e:	4610      	mov	r0, r2
 8015770:	4798      	blx	r3
 8015772:	4603      	mov	r3, r0
 8015774:	2b00      	cmp	r3, #0
 8015776:	d008      	beq.n	801578a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015778:	7af9      	ldrb	r1, [r7, #11]
 801577a:	233a      	movs	r3, #58	@ 0x3a
 801577c:	2202      	movs	r2, #2
 801577e:	68f8      	ldr	r0, [r7, #12]
 8015780:	f7ff fe38 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 8015784:	f04f 33ff 	mov.w	r3, #4294967295
 8015788:	e05e      	b.n	8015848 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	3302      	adds	r3, #2
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	3303      	adds	r3, #3
 8015796:	781b      	ldrb	r3, [r3, #0]
 8015798:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801579a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	3304      	adds	r3, #4
 80157a0:	781b      	ldrb	r3, [r3, #0]
 80157a2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80157a4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80157a6:	687a      	ldr	r2, [r7, #4]
 80157a8:	3205      	adds	r2, #5
 80157aa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80157ac:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	3306      	adds	r3, #6
 80157b8:	781b      	ldrb	r3, [r3, #0]
 80157ba:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	3307      	adds	r3, #7
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80157c4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	3308      	adds	r3, #8
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80157ce:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80157d0:	687a      	ldr	r2, [r7, #4]
 80157d2:	3209      	adds	r2, #9
 80157d4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80157d6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80157ea:	7af9      	ldrb	r1, [r7, #11]
 80157ec:	68f8      	ldr	r0, [r7, #12]
 80157ee:	f000 fa28 	bl	8015c42 <SCSI_CheckAddressRange>
 80157f2:	4603      	mov	r3, r0
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	da02      	bge.n	80157fe <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80157f8:	f04f 33ff 	mov.w	r3, #4294967295
 80157fc:	e024      	b.n	8015848 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80157fe:	697b      	ldr	r3, [r7, #20]
 8015800:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801580a:	6979      	ldr	r1, [r7, #20]
 801580c:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 8015810:	fb01 f303 	mul.w	r3, r1, r3
 8015814:	429a      	cmp	r2, r3
 8015816:	d00a      	beq.n	801582e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801581e:	2320      	movs	r3, #32
 8015820:	2205      	movs	r2, #5
 8015822:	68f8      	ldr	r0, [r7, #12]
 8015824:	f7ff fde6 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 8015828:	f04f 33ff 	mov.w	r3, #4294967295
 801582c:	e00c      	b.n	8015848 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	2202      	movs	r2, #2
 8015832:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8015834:	697b      	ldr	r3, [r7, #20]
 8015836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801583a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801583c:	7afb      	ldrb	r3, [r7, #11]
 801583e:	4619      	mov	r1, r3
 8015840:	68f8      	ldr	r0, [r7, #12]
 8015842:	f000 fa2b 	bl	8015c9c <SCSI_ProcessRead>
 8015846:	4603      	mov	r3, r0
}
 8015848:	4618      	mov	r0, r3
 801584a:	3718      	adds	r7, #24
 801584c:	46bd      	mov	sp, r7
 801584e:	bd80      	pop	{r7, pc}

08015850 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b086      	sub	sp, #24
 8015854:	af00      	add	r7, sp, #0
 8015856:	60f8      	str	r0, [r7, #12]
 8015858:	460b      	mov	r3, r1
 801585a:	607a      	str	r2, [r7, #4]
 801585c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	32b0      	adds	r2, #176	@ 0xb0
 8015868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801586c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801586e:	697b      	ldr	r3, [r7, #20]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d102      	bne.n	801587a <SCSI_Write10+0x2a>
  {
    return -1;
 8015874:	f04f 33ff 	mov.w	r3, #4294967295
 8015878:	e0ba      	b.n	80159f0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801587a:	697b      	ldr	r3, [r7, #20]
 801587c:	7a1b      	ldrb	r3, [r3, #8]
 801587e:	2b00      	cmp	r3, #0
 8015880:	f040 80b0 	bne.w	80159e4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801588a:	2b00      	cmp	r3, #0
 801588c:	d10a      	bne.n	80158a4 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801588e:	697b      	ldr	r3, [r7, #20]
 8015890:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015894:	2320      	movs	r3, #32
 8015896:	2205      	movs	r2, #5
 8015898:	68f8      	ldr	r0, [r7, #12]
 801589a:	f7ff fdab 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 801589e:	f04f 33ff 	mov.w	r3, #4294967295
 80158a2:	e0a5      	b.n	80159f0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80158a4:	697b      	ldr	r3, [r7, #20]
 80158a6:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80158aa:	b25b      	sxtb	r3, r3
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	da0a      	bge.n	80158c6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80158b6:	2320      	movs	r3, #32
 80158b8:	2205      	movs	r2, #5
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	f7ff fd9a 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 80158c0:	f04f 33ff 	mov.w	r3, #4294967295
 80158c4:	e094      	b.n	80159f0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80158cc:	68fa      	ldr	r2, [r7, #12]
 80158ce:	33b0      	adds	r3, #176	@ 0xb0
 80158d0:	009b      	lsls	r3, r3, #2
 80158d2:	4413      	add	r3, r2
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	689b      	ldr	r3, [r3, #8]
 80158d8:	7afa      	ldrb	r2, [r7, #11]
 80158da:	4610      	mov	r0, r2
 80158dc:	4798      	blx	r3
 80158de:	4603      	mov	r3, r0
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d008      	beq.n	80158f6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80158e4:	7af9      	ldrb	r1, [r7, #11]
 80158e6:	233a      	movs	r3, #58	@ 0x3a
 80158e8:	2202      	movs	r2, #2
 80158ea:	68f8      	ldr	r0, [r7, #12]
 80158ec:	f7ff fd82 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 80158f0:	f04f 33ff 	mov.w	r3, #4294967295
 80158f4:	e07c      	b.n	80159f0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80158fc:	68fa      	ldr	r2, [r7, #12]
 80158fe:	33b0      	adds	r3, #176	@ 0xb0
 8015900:	009b      	lsls	r3, r3, #2
 8015902:	4413      	add	r3, r2
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	68db      	ldr	r3, [r3, #12]
 8015908:	7afa      	ldrb	r2, [r7, #11]
 801590a:	4610      	mov	r0, r2
 801590c:	4798      	blx	r3
 801590e:	4603      	mov	r3, r0
 8015910:	2b00      	cmp	r3, #0
 8015912:	d008      	beq.n	8015926 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015914:	7af9      	ldrb	r1, [r7, #11]
 8015916:	2327      	movs	r3, #39	@ 0x27
 8015918:	2202      	movs	r2, #2
 801591a:	68f8      	ldr	r0, [r7, #12]
 801591c:	f7ff fd6a 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 8015920:	f04f 33ff 	mov.w	r3, #4294967295
 8015924:	e064      	b.n	80159f0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	3302      	adds	r3, #2
 801592a:	781b      	ldrb	r3, [r3, #0]
 801592c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	3303      	adds	r3, #3
 8015932:	781b      	ldrb	r3, [r3, #0]
 8015934:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015936:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	3304      	adds	r3, #4
 801593c:	781b      	ldrb	r3, [r3, #0]
 801593e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015940:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015942:	687a      	ldr	r2, [r7, #4]
 8015944:	3205      	adds	r2, #5
 8015946:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015948:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	3307      	adds	r3, #7
 8015954:	781b      	ldrb	r3, [r3, #0]
 8015956:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	3208      	adds	r2, #8
 801595c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801595e:	431a      	orrs	r2, r3
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 801596c:	697b      	ldr	r3, [r7, #20]
 801596e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015972:	7af9      	ldrb	r1, [r7, #11]
 8015974:	68f8      	ldr	r0, [r7, #12]
 8015976:	f000 f964 	bl	8015c42 <SCSI_CheckAddressRange>
 801597a:	4603      	mov	r3, r0
 801597c:	2b00      	cmp	r3, #0
 801597e:	da02      	bge.n	8015986 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015980:	f04f 33ff 	mov.w	r3, #4294967295
 8015984:	e034      	b.n	80159f0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801598c:	697a      	ldr	r2, [r7, #20]
 801598e:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015992:	fb02 f303 	mul.w	r3, r2, r3
 8015996:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801599e:	693a      	ldr	r2, [r7, #16]
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d00a      	beq.n	80159ba <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80159aa:	2320      	movs	r3, #32
 80159ac:	2205      	movs	r2, #5
 80159ae:	68f8      	ldr	r0, [r7, #12]
 80159b0:	f7ff fd20 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 80159b4:	f04f 33ff 	mov.w	r3, #4294967295
 80159b8:	e01a      	b.n	80159f0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80159ba:	693b      	ldr	r3, [r7, #16]
 80159bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80159c0:	bf28      	it	cs
 80159c2:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80159c6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	2201      	movs	r2, #1
 80159cc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80159ce:	4b0a      	ldr	r3, [pc, #40]	@ (80159f8 <SCSI_Write10+0x1a8>)
 80159d0:	7819      	ldrb	r1, [r3, #0]
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	f103 0210 	add.w	r2, r3, #16
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	68f8      	ldr	r0, [r7, #12]
 80159dc:	f006 f8ab 	bl	801bb36 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80159e0:	2300      	movs	r3, #0
 80159e2:	e005      	b.n	80159f0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80159e4:	7afb      	ldrb	r3, [r7, #11]
 80159e6:	4619      	mov	r1, r3
 80159e8:	68f8      	ldr	r0, [r7, #12]
 80159ea:	f000 f9dd 	bl	8015da8 <SCSI_ProcessWrite>
 80159ee:	4603      	mov	r3, r0
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3718      	adds	r7, #24
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}
 80159f8:	200000b3 	.word	0x200000b3

080159fc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b086      	sub	sp, #24
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	60f8      	str	r0, [r7, #12]
 8015a04:	460b      	mov	r3, r1
 8015a06:	607a      	str	r2, [r7, #4]
 8015a08:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	32b0      	adds	r2, #176	@ 0xb0
 8015a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a18:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8015a1a:	697b      	ldr	r3, [r7, #20]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d102      	bne.n	8015a26 <SCSI_Write12+0x2a>
  {
    return -1;
 8015a20:	f04f 33ff 	mov.w	r3, #4294967295
 8015a24:	e0ca      	b.n	8015bbc <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015a26:	697b      	ldr	r3, [r7, #20]
 8015a28:	7a1b      	ldrb	r3, [r3, #8]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	f040 80c0 	bne.w	8015bb0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015a30:	697b      	ldr	r3, [r7, #20]
 8015a32:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d10a      	bne.n	8015a50 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015a40:	2320      	movs	r3, #32
 8015a42:	2205      	movs	r2, #5
 8015a44:	68f8      	ldr	r0, [r7, #12]
 8015a46:	f7ff fcd5 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 8015a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a4e:	e0b5      	b.n	8015bbc <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8015a56:	b25b      	sxtb	r3, r3
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	da0a      	bge.n	8015a72 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015a5c:	697b      	ldr	r3, [r7, #20]
 8015a5e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015a62:	2320      	movs	r3, #32
 8015a64:	2205      	movs	r2, #5
 8015a66:	68f8      	ldr	r0, [r7, #12]
 8015a68:	f7ff fcc4 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 8015a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8015a70:	e0a4      	b.n	8015bbc <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a78:	68fa      	ldr	r2, [r7, #12]
 8015a7a:	33b0      	adds	r3, #176	@ 0xb0
 8015a7c:	009b      	lsls	r3, r3, #2
 8015a7e:	4413      	add	r3, r2
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	689b      	ldr	r3, [r3, #8]
 8015a84:	7afa      	ldrb	r2, [r7, #11]
 8015a86:	4610      	mov	r0, r2
 8015a88:	4798      	blx	r3
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d00b      	beq.n	8015aa8 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015a90:	7af9      	ldrb	r1, [r7, #11]
 8015a92:	233a      	movs	r3, #58	@ 0x3a
 8015a94:	2202      	movs	r2, #2
 8015a96:	68f8      	ldr	r0, [r7, #12]
 8015a98:	f7ff fcac 	bl	80153f4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8015a9c:	697b      	ldr	r3, [r7, #20]
 8015a9e:	2205      	movs	r2, #5
 8015aa0:	721a      	strb	r2, [r3, #8]
      return -1;
 8015aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8015aa6:	e089      	b.n	8015bbc <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015aae:	68fa      	ldr	r2, [r7, #12]
 8015ab0:	33b0      	adds	r3, #176	@ 0xb0
 8015ab2:	009b      	lsls	r3, r3, #2
 8015ab4:	4413      	add	r3, r2
 8015ab6:	685b      	ldr	r3, [r3, #4]
 8015ab8:	68db      	ldr	r3, [r3, #12]
 8015aba:	7afa      	ldrb	r2, [r7, #11]
 8015abc:	4610      	mov	r0, r2
 8015abe:	4798      	blx	r3
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d00b      	beq.n	8015ade <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015ac6:	7af9      	ldrb	r1, [r7, #11]
 8015ac8:	2327      	movs	r3, #39	@ 0x27
 8015aca:	2202      	movs	r2, #2
 8015acc:	68f8      	ldr	r0, [r7, #12]
 8015ace:	f7ff fc91 	bl	80153f4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	2205      	movs	r2, #5
 8015ad6:	721a      	strb	r2, [r3, #8]
      return -1;
 8015ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8015adc:	e06e      	b.n	8015bbc <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	3302      	adds	r3, #2
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	3303      	adds	r3, #3
 8015aea:	781b      	ldrb	r3, [r3, #0]
 8015aec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015aee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	3304      	adds	r3, #4
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015af8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015afa:	687a      	ldr	r2, [r7, #4]
 8015afc:	3205      	adds	r2, #5
 8015afe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015b00:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015b02:	697b      	ldr	r3, [r7, #20]
 8015b04:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	3306      	adds	r3, #6
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	3307      	adds	r3, #7
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015b18:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	3308      	adds	r3, #8
 8015b1e:	781b      	ldrb	r3, [r3, #0]
 8015b20:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8015b22:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015b24:	687a      	ldr	r2, [r7, #4]
 8015b26:	3209      	adds	r2, #9
 8015b28:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8015b2a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015b3e:	7af9      	ldrb	r1, [r7, #11]
 8015b40:	68f8      	ldr	r0, [r7, #12]
 8015b42:	f000 f87e 	bl	8015c42 <SCSI_CheckAddressRange>
 8015b46:	4603      	mov	r3, r0
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	da02      	bge.n	8015b52 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8015b50:	e034      	b.n	8015bbc <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015b52:	697b      	ldr	r3, [r7, #20]
 8015b54:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015b58:	697a      	ldr	r2, [r7, #20]
 8015b5a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015b5e:	fb02 f303 	mul.w	r3, r2, r3
 8015b62:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015b6a:	693a      	ldr	r2, [r7, #16]
 8015b6c:	429a      	cmp	r2, r3
 8015b6e:	d00a      	beq.n	8015b86 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015b76:	2320      	movs	r3, #32
 8015b78:	2205      	movs	r2, #5
 8015b7a:	68f8      	ldr	r0, [r7, #12]
 8015b7c:	f7ff fc3a 	bl	80153f4 <SCSI_SenseCode>
      return -1;
 8015b80:	f04f 33ff 	mov.w	r3, #4294967295
 8015b84:	e01a      	b.n	8015bbc <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015b8c:	bf28      	it	cs
 8015b8e:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015b92:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	2201      	movs	r2, #1
 8015b98:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8015bc4 <SCSI_Write12+0x1c8>)
 8015b9c:	7819      	ldrb	r1, [r3, #0]
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	f103 0210 	add.w	r2, r3, #16
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	68f8      	ldr	r0, [r7, #12]
 8015ba8:	f005 ffc5 	bl	801bb36 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8015bac:	2300      	movs	r3, #0
 8015bae:	e005      	b.n	8015bbc <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8015bb0:	7afb      	ldrb	r3, [r7, #11]
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	68f8      	ldr	r0, [r7, #12]
 8015bb6:	f000 f8f7 	bl	8015da8 <SCSI_ProcessWrite>
 8015bba:	4603      	mov	r3, r0
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3718      	adds	r7, #24
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}
 8015bc4:	200000b3 	.word	0x200000b3

08015bc8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b086      	sub	sp, #24
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	60f8      	str	r0, [r7, #12]
 8015bd0:	460b      	mov	r3, r1
 8015bd2:	607a      	str	r2, [r7, #4]
 8015bd4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	32b0      	adds	r2, #176	@ 0xb0
 8015be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015be4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015be6:	697b      	ldr	r3, [r7, #20]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d102      	bne.n	8015bf2 <SCSI_Verify10+0x2a>
  {
    return -1;
 8015bec:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf0:	e023      	b.n	8015c3a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	f003 0302 	and.w	r3, r3, #2
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d008      	beq.n	8015c12 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8015c00:	7af9      	ldrb	r1, [r7, #11]
 8015c02:	2324      	movs	r3, #36	@ 0x24
 8015c04:	2205      	movs	r2, #5
 8015c06:	68f8      	ldr	r0, [r7, #12]
 8015c08:	f7ff fbf4 	bl	80153f4 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8015c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c10:	e013      	b.n	8015c3a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015c18:	697b      	ldr	r3, [r7, #20]
 8015c1a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015c1e:	7af9      	ldrb	r1, [r7, #11]
 8015c20:	68f8      	ldr	r0, [r7, #12]
 8015c22:	f000 f80e 	bl	8015c42 <SCSI_CheckAddressRange>
 8015c26:	4603      	mov	r3, r0
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	da02      	bge.n	8015c32 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8015c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c30:	e003      	b.n	8015c3a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	2200      	movs	r2, #0
 8015c36:	60da      	str	r2, [r3, #12]

  return 0;
 8015c38:	2300      	movs	r3, #0
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3718      	adds	r7, #24
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}

08015c42 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8015c42:	b580      	push	{r7, lr}
 8015c44:	b086      	sub	sp, #24
 8015c46:	af00      	add	r7, sp, #0
 8015c48:	60f8      	str	r0, [r7, #12]
 8015c4a:	607a      	str	r2, [r7, #4]
 8015c4c:	603b      	str	r3, [r7, #0]
 8015c4e:	460b      	mov	r3, r1
 8015c50:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	32b0      	adds	r2, #176	@ 0xb0
 8015c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c60:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d102      	bne.n	8015c6e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8015c68:	f04f 33ff 	mov.w	r3, #4294967295
 8015c6c:	e011      	b.n	8015c92 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8015c6e:	687a      	ldr	r2, [r7, #4]
 8015c70:	683b      	ldr	r3, [r7, #0]
 8015c72:	441a      	add	r2, r3
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d908      	bls.n	8015c90 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8015c7e:	7af9      	ldrb	r1, [r7, #11]
 8015c80:	2321      	movs	r3, #33	@ 0x21
 8015c82:	2205      	movs	r2, #5
 8015c84:	68f8      	ldr	r0, [r7, #12]
 8015c86:	f7ff fbb5 	bl	80153f4 <SCSI_SenseCode>
    return -1;
 8015c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8015c8e:	e000      	b.n	8015c92 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8015c90:	2300      	movs	r3, #0
}
 8015c92:	4618      	mov	r0, r3
 8015c94:	3718      	adds	r7, #24
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}
	...

08015c9c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015c9c:	b590      	push	{r4, r7, lr}
 8015c9e:	b085      	sub	sp, #20
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
 8015ca4:	460b      	mov	r3, r1
 8015ca6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	32b0      	adds	r2, #176	@ 0xb0
 8015cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d102      	bne.n	8015cc4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8015cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8015cc2:	e06a      	b.n	8015d9a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015cca:	68fa      	ldr	r2, [r7, #12]
 8015ccc:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015cd0:	fb02 f303 	mul.w	r3, r2, r3
 8015cd4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015cdc:	bf28      	it	cs
 8015cde:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015ce2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	33b0      	adds	r3, #176	@ 0xb0
 8015cee:	009b      	lsls	r3, r3, #2
 8015cf0:	4413      	add	r3, r2
 8015cf2:	685b      	ldr	r3, [r3, #4]
 8015cf4:	691c      	ldr	r4, [r3, #16]
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	f103 0110 	add.w	r1, r3, #16
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015d08:	4618      	mov	r0, r3
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	78f8      	ldrb	r0, [r7, #3]
 8015d14:	47a0      	blx	r4
 8015d16:	4603      	mov	r3, r0
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	da08      	bge.n	8015d2e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8015d1c:	78f9      	ldrb	r1, [r7, #3]
 8015d1e:	2311      	movs	r3, #17
 8015d20:	2204      	movs	r2, #4
 8015d22:	6878      	ldr	r0, [r7, #4]
 8015d24:	f7ff fb66 	bl	80153f4 <SCSI_SenseCode>
    return -1;
 8015d28:	f04f 33ff 	mov.w	r3, #4294967295
 8015d2c:	e035      	b.n	8015d9a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8015d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8015da4 <SCSI_ProcessRead+0x108>)
 8015d30:	7819      	ldrb	r1, [r3, #0]
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	f103 0210 	add.w	r2, r3, #16
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f005 feda 	bl	801baf4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015d4c:	4619      	mov	r1, r3
 8015d4e:	68bb      	ldr	r3, [r7, #8]
 8015d50:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d54:	441a      	add	r2, r3
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015d68:	4619      	mov	r1, r3
 8015d6a:	68bb      	ldr	r3, [r7, #8]
 8015d6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d70:	1ad2      	subs	r2, r2, r3
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8015d7e:	68bb      	ldr	r3, [r7, #8]
 8015d80:	1ad2      	subs	r2, r2, r3
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d102      	bne.n	8015d98 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	2203      	movs	r2, #3
 8015d96:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8015d98:	2300      	movs	r3, #0
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3714      	adds	r7, #20
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd90      	pop	{r4, r7, pc}
 8015da2:	bf00      	nop
 8015da4:	200000b2 	.word	0x200000b2

08015da8 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015da8:	b590      	push	{r4, r7, lr}
 8015daa:	b085      	sub	sp, #20
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
 8015db0:	460b      	mov	r3, r1
 8015db2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	32b0      	adds	r2, #176	@ 0xb0
 8015dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dc2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d102      	bne.n	8015dd0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8015dca:	f04f 33ff 	mov.w	r3, #4294967295
 8015dce:	e07a      	b.n	8015ec6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015dd6:	68fa      	ldr	r2, [r7, #12]
 8015dd8:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015ddc:	fb02 f303 	mul.w	r3, r2, r3
 8015de0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015de8:	bf28      	it	cs
 8015dea:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015dee:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015df6:	687a      	ldr	r2, [r7, #4]
 8015df8:	33b0      	adds	r3, #176	@ 0xb0
 8015dfa:	009b      	lsls	r3, r3, #2
 8015dfc:	4413      	add	r3, r2
 8015dfe:	685b      	ldr	r3, [r3, #4]
 8015e00:	695c      	ldr	r4, [r3, #20]
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	f103 0110 	add.w	r1, r3, #16
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015e14:	4618      	mov	r0, r3
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8015e1c:	b29b      	uxth	r3, r3
 8015e1e:	78f8      	ldrb	r0, [r7, #3]
 8015e20:	47a0      	blx	r4
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	da08      	bge.n	8015e3a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015e28:	78f9      	ldrb	r1, [r7, #3]
 8015e2a:	2303      	movs	r3, #3
 8015e2c:	2204      	movs	r2, #4
 8015e2e:	6878      	ldr	r0, [r7, #4]
 8015e30:	f7ff fae0 	bl	80153f4 <SCSI_SenseCode>
    return -1;
 8015e34:	f04f 33ff 	mov.w	r3, #4294967295
 8015e38:	e045      	b.n	8015ec6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015e46:	4619      	mov	r1, r3
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e4e:	441a      	add	r2, r3
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015e62:	4619      	mov	r1, r3
 8015e64:	68bb      	ldr	r3, [r7, #8]
 8015e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e6a:	1ad2      	subs	r2, r2, r3
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	1ad2      	subs	r2, r2, r3
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d104      	bne.n	8015e96 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8015e8c:	2100      	movs	r1, #0
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f7fe fd10 	bl	80148b4 <MSC_BOT_SendCSW>
 8015e94:	e016      	b.n	8015ec4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015e9c:	68fa      	ldr	r2, [r7, #12]
 8015e9e:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015ea2:	fb02 f303 	mul.w	r3, r2, r3
 8015ea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015eaa:	bf28      	it	cs
 8015eac:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015eb0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015eb2:	4b07      	ldr	r3, [pc, #28]	@ (8015ed0 <SCSI_ProcessWrite+0x128>)
 8015eb4:	7819      	ldrb	r1, [r3, #0]
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	f103 0210 	add.w	r2, r3, #16
 8015ebc:	68bb      	ldr	r3, [r7, #8]
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	f005 fe39 	bl	801bb36 <USBD_LL_PrepareReceive>
  }

  return 0;
 8015ec4:	2300      	movs	r3, #0
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3714      	adds	r7, #20
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd90      	pop	{r4, r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	200000b3 	.word	0x200000b3

08015ed4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	b087      	sub	sp, #28
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	60f8      	str	r0, [r7, #12]
 8015edc:	60b9      	str	r1, [r7, #8]
 8015ede:	4613      	mov	r3, r2
 8015ee0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8015ee2:	88fb      	ldrh	r3, [r7, #6]
 8015ee4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d102      	bne.n	8015ef2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8015eec:	f04f 33ff 	mov.w	r3, #4294967295
 8015ef0:	e013      	b.n	8015f1a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8015ef2:	8afa      	ldrh	r2, [r7, #22]
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015ef8:	e00b      	b.n	8015f12 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8015efa:	8afb      	ldrh	r3, [r7, #22]
 8015efc:	3b01      	subs	r3, #1
 8015efe:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015f00:	8afb      	ldrh	r3, [r7, #22]
 8015f02:	68ba      	ldr	r2, [r7, #8]
 8015f04:	441a      	add	r2, r3
 8015f06:	8afb      	ldrh	r3, [r7, #22]
 8015f08:	7811      	ldrb	r1, [r2, #0]
 8015f0a:	68fa      	ldr	r2, [r7, #12]
 8015f0c:	4413      	add	r3, r2
 8015f0e:	460a      	mov	r2, r1
 8015f10:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8015f12:	8afb      	ldrh	r3, [r7, #22]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d1f0      	bne.n	8015efa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8015f18:	2300      	movs	r3, #0
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	371c      	adds	r7, #28
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f24:	4770      	bx	lr

08015f26 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015f26:	b580      	push	{r7, lr}
 8015f28:	b086      	sub	sp, #24
 8015f2a:	af00      	add	r7, sp, #0
 8015f2c:	60f8      	str	r0, [r7, #12]
 8015f2e:	60b9      	str	r1, [r7, #8]
 8015f30:	4613      	mov	r3, r2
 8015f32:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d101      	bne.n	8015f3e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015f3a:	2303      	movs	r3, #3
 8015f3c:	e01f      	b.n	8015f7e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	2200      	movs	r2, #0
 8015f42:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2200      	movs	r2, #0
 8015f4a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	2200      	movs	r2, #0
 8015f52:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d003      	beq.n	8015f64 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	68ba      	ldr	r2, [r7, #8]
 8015f60:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	2201      	movs	r2, #1
 8015f68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	79fa      	ldrb	r2, [r7, #7]
 8015f70:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015f72:	68f8      	ldr	r0, [r7, #12]
 8015f74:	f005 fc34 	bl	801b7e0 <USBD_LL_Init>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3718      	adds	r7, #24
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}

08015f86 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b084      	sub	sp, #16
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f005 fca8 	bl	801b8e4 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	2201      	movs	r2, #1
 8015f98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d009      	beq.n	8015fba <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015fac:	685b      	ldr	r3, [r3, #4]
 8015fae:	687a      	ldr	r2, [r7, #4]
 8015fb0:	6852      	ldr	r2, [r2, #4]
 8015fb2:	b2d2      	uxtb	r2, r2
 8015fb4:	4611      	mov	r1, r2
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	2200      	movs	r2, #0
 8015fce:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f005 fc50 	bl	801b878 <USBD_LL_DeInit>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	73fb      	strb	r3, [r7, #15]

  return ret;
 8015fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	3710      	adds	r7, #16
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}

08015fe6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015fe6:	b580      	push	{r7, lr}
 8015fe8:	b084      	sub	sp, #16
 8015fea:	af00      	add	r7, sp, #0
 8015fec:	6078      	str	r0, [r7, #4]
 8015fee:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015ff4:	683b      	ldr	r3, [r7, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d101      	bne.n	8015ffe <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015ffa:	2303      	movs	r3, #3
 8015ffc:	e025      	b.n	801604a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	683a      	ldr	r2, [r7, #0]
 8016002:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	32ae      	adds	r2, #174	@ 0xae
 8016010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016016:	2b00      	cmp	r3, #0
 8016018:	d00f      	beq.n	801603a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	32ae      	adds	r2, #174	@ 0xae
 8016024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801602a:	f107 020e 	add.w	r2, r7, #14
 801602e:	4610      	mov	r0, r2
 8016030:	4798      	blx	r3
 8016032:	4602      	mov	r2, r0
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016040:	1c5a      	adds	r2, r3, #1
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016048:	2300      	movs	r3, #0
}
 801604a:	4618      	mov	r0, r3
 801604c:	3710      	adds	r7, #16
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}

08016052 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016052:	b580      	push	{r7, lr}
 8016054:	b082      	sub	sp, #8
 8016056:	af00      	add	r7, sp, #0
 8016058:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f005 fc27 	bl	801b8ae <USBD_LL_Start>
 8016060:	4603      	mov	r3, r0
}
 8016062:	4618      	mov	r0, r3
 8016064:	3708      	adds	r7, #8
 8016066:	46bd      	mov	sp, r7
 8016068:	bd80      	pop	{r7, pc}

0801606a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 801606a:	b580      	push	{r7, lr}
 801606c:	b082      	sub	sp, #8
 801606e:	af00      	add	r7, sp, #0
 8016070:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8016072:	6878      	ldr	r0, [r7, #4]
 8016074:	f005 fc36 	bl	801b8e4 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801607e:	2b00      	cmp	r3, #0
 8016080:	d009      	beq.n	8016096 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	687a      	ldr	r2, [r7, #4]
 801608c:	6852      	ldr	r2, [r2, #4]
 801608e:	b2d2      	uxtb	r2, r2
 8016090:	4611      	mov	r1, r2
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8016096:	2300      	movs	r3, #0
}
 8016098:	4618      	mov	r0, r3
 801609a:	3708      	adds	r7, #8
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}

080160a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80160a0:	b480      	push	{r7}
 80160a2:	b083      	sub	sp, #12
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80160a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	370c      	adds	r7, #12
 80160ae:	46bd      	mov	sp, r7
 80160b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b4:	4770      	bx	lr

080160b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80160b6:	b580      	push	{r7, lr}
 80160b8:	b084      	sub	sp, #16
 80160ba:	af00      	add	r7, sp, #0
 80160bc:	6078      	str	r0, [r7, #4]
 80160be:	460b      	mov	r3, r1
 80160c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80160c2:	2300      	movs	r3, #0
 80160c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d009      	beq.n	80160e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	78fa      	ldrb	r2, [r7, #3]
 80160da:	4611      	mov	r1, r2
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	4798      	blx	r3
 80160e0:	4603      	mov	r3, r0
 80160e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80160e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	3710      	adds	r7, #16
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}

080160ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80160ee:	b580      	push	{r7, lr}
 80160f0:	b084      	sub	sp, #16
 80160f2:	af00      	add	r7, sp, #0
 80160f4:	6078      	str	r0, [r7, #4]
 80160f6:	460b      	mov	r3, r1
 80160f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80160fa:	2300      	movs	r3, #0
 80160fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016104:	685b      	ldr	r3, [r3, #4]
 8016106:	78fa      	ldrb	r2, [r7, #3]
 8016108:	4611      	mov	r1, r2
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	4798      	blx	r3
 801610e:	4603      	mov	r3, r0
 8016110:	2b00      	cmp	r3, #0
 8016112:	d001      	beq.n	8016118 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016114:	2303      	movs	r3, #3
 8016116:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016118:	7bfb      	ldrb	r3, [r7, #15]
}
 801611a:	4618      	mov	r0, r3
 801611c:	3710      	adds	r7, #16
 801611e:	46bd      	mov	sp, r7
 8016120:	bd80      	pop	{r7, pc}

08016122 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016122:	b580      	push	{r7, lr}
 8016124:	b084      	sub	sp, #16
 8016126:	af00      	add	r7, sp, #0
 8016128:	6078      	str	r0, [r7, #4]
 801612a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016132:	6839      	ldr	r1, [r7, #0]
 8016134:	4618      	mov	r0, r3
 8016136:	f001 f906 	bl	8017346 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	2201      	movs	r2, #1
 801613e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016148:	461a      	mov	r2, r3
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016156:	f003 031f 	and.w	r3, r3, #31
 801615a:	2b02      	cmp	r3, #2
 801615c:	d01a      	beq.n	8016194 <USBD_LL_SetupStage+0x72>
 801615e:	2b02      	cmp	r3, #2
 8016160:	d822      	bhi.n	80161a8 <USBD_LL_SetupStage+0x86>
 8016162:	2b00      	cmp	r3, #0
 8016164:	d002      	beq.n	801616c <USBD_LL_SetupStage+0x4a>
 8016166:	2b01      	cmp	r3, #1
 8016168:	d00a      	beq.n	8016180 <USBD_LL_SetupStage+0x5e>
 801616a:	e01d      	b.n	80161a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016172:	4619      	mov	r1, r3
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f000 fb5d 	bl	8016834 <USBD_StdDevReq>
 801617a:	4603      	mov	r3, r0
 801617c:	73fb      	strb	r3, [r7, #15]
      break;
 801617e:	e020      	b.n	80161c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016186:	4619      	mov	r1, r3
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f000 fbc5 	bl	8016918 <USBD_StdItfReq>
 801618e:	4603      	mov	r3, r0
 8016190:	73fb      	strb	r3, [r7, #15]
      break;
 8016192:	e016      	b.n	80161c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801619a:	4619      	mov	r1, r3
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f000 fc27 	bl	80169f0 <USBD_StdEPReq>
 80161a2:	4603      	mov	r3, r0
 80161a4:	73fb      	strb	r3, [r7, #15]
      break;
 80161a6:	e00c      	b.n	80161c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80161ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80161b2:	b2db      	uxtb	r3, r3
 80161b4:	4619      	mov	r1, r3
 80161b6:	6878      	ldr	r0, [r7, #4]
 80161b8:	f005 fc13 	bl	801b9e2 <USBD_LL_StallEP>
 80161bc:	4603      	mov	r3, r0
 80161be:	73fb      	strb	r3, [r7, #15]
      break;
 80161c0:	bf00      	nop
  }

  return ret;
 80161c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	3710      	adds	r7, #16
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}

080161cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b086      	sub	sp, #24
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	60f8      	str	r0, [r7, #12]
 80161d4:	460b      	mov	r3, r1
 80161d6:	607a      	str	r2, [r7, #4]
 80161d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80161da:	2300      	movs	r3, #0
 80161dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80161de:	7afb      	ldrb	r3, [r7, #11]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d16e      	bne.n	80162c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80161ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80161f2:	2b03      	cmp	r3, #3
 80161f4:	f040 8098 	bne.w	8016328 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80161f8:	693b      	ldr	r3, [r7, #16]
 80161fa:	689a      	ldr	r2, [r3, #8]
 80161fc:	693b      	ldr	r3, [r7, #16]
 80161fe:	68db      	ldr	r3, [r3, #12]
 8016200:	429a      	cmp	r2, r3
 8016202:	d913      	bls.n	801622c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016204:	693b      	ldr	r3, [r7, #16]
 8016206:	689a      	ldr	r2, [r3, #8]
 8016208:	693b      	ldr	r3, [r7, #16]
 801620a:	68db      	ldr	r3, [r3, #12]
 801620c:	1ad2      	subs	r2, r2, r3
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016212:	693b      	ldr	r3, [r7, #16]
 8016214:	68da      	ldr	r2, [r3, #12]
 8016216:	693b      	ldr	r3, [r7, #16]
 8016218:	689b      	ldr	r3, [r3, #8]
 801621a:	4293      	cmp	r3, r2
 801621c:	bf28      	it	cs
 801621e:	4613      	movcs	r3, r2
 8016220:	461a      	mov	r2, r3
 8016222:	6879      	ldr	r1, [r7, #4]
 8016224:	68f8      	ldr	r0, [r7, #12]
 8016226:	f001 f965 	bl	80174f4 <USBD_CtlContinueRx>
 801622a:	e07d      	b.n	8016328 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016232:	f003 031f 	and.w	r3, r3, #31
 8016236:	2b02      	cmp	r3, #2
 8016238:	d014      	beq.n	8016264 <USBD_LL_DataOutStage+0x98>
 801623a:	2b02      	cmp	r3, #2
 801623c:	d81d      	bhi.n	801627a <USBD_LL_DataOutStage+0xae>
 801623e:	2b00      	cmp	r3, #0
 8016240:	d002      	beq.n	8016248 <USBD_LL_DataOutStage+0x7c>
 8016242:	2b01      	cmp	r3, #1
 8016244:	d003      	beq.n	801624e <USBD_LL_DataOutStage+0x82>
 8016246:	e018      	b.n	801627a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016248:	2300      	movs	r3, #0
 801624a:	75bb      	strb	r3, [r7, #22]
            break;
 801624c:	e018      	b.n	8016280 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016254:	b2db      	uxtb	r3, r3
 8016256:	4619      	mov	r1, r3
 8016258:	68f8      	ldr	r0, [r7, #12]
 801625a:	f000 fa5e 	bl	801671a <USBD_CoreFindIF>
 801625e:	4603      	mov	r3, r0
 8016260:	75bb      	strb	r3, [r7, #22]
            break;
 8016262:	e00d      	b.n	8016280 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801626a:	b2db      	uxtb	r3, r3
 801626c:	4619      	mov	r1, r3
 801626e:	68f8      	ldr	r0, [r7, #12]
 8016270:	f000 fa60 	bl	8016734 <USBD_CoreFindEP>
 8016274:	4603      	mov	r3, r0
 8016276:	75bb      	strb	r3, [r7, #22]
            break;
 8016278:	e002      	b.n	8016280 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801627a:	2300      	movs	r3, #0
 801627c:	75bb      	strb	r3, [r7, #22]
            break;
 801627e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016280:	7dbb      	ldrb	r3, [r7, #22]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d119      	bne.n	80162ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801628c:	b2db      	uxtb	r3, r3
 801628e:	2b03      	cmp	r3, #3
 8016290:	d113      	bne.n	80162ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016292:	7dba      	ldrb	r2, [r7, #22]
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	32ae      	adds	r2, #174	@ 0xae
 8016298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801629c:	691b      	ldr	r3, [r3, #16]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d00b      	beq.n	80162ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80162a2:	7dba      	ldrb	r2, [r7, #22]
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80162aa:	7dba      	ldrb	r2, [r7, #22]
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	32ae      	adds	r2, #174	@ 0xae
 80162b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162b4:	691b      	ldr	r3, [r3, #16]
 80162b6:	68f8      	ldr	r0, [r7, #12]
 80162b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80162ba:	68f8      	ldr	r0, [r7, #12]
 80162bc:	f001 f92b 	bl	8017516 <USBD_CtlSendStatus>
 80162c0:	e032      	b.n	8016328 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80162c2:	7afb      	ldrb	r3, [r7, #11]
 80162c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80162c8:	b2db      	uxtb	r3, r3
 80162ca:	4619      	mov	r1, r3
 80162cc:	68f8      	ldr	r0, [r7, #12]
 80162ce:	f000 fa31 	bl	8016734 <USBD_CoreFindEP>
 80162d2:	4603      	mov	r3, r0
 80162d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80162d6:	7dbb      	ldrb	r3, [r7, #22]
 80162d8:	2bff      	cmp	r3, #255	@ 0xff
 80162da:	d025      	beq.n	8016328 <USBD_LL_DataOutStage+0x15c>
 80162dc:	7dbb      	ldrb	r3, [r7, #22]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d122      	bne.n	8016328 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80162e8:	b2db      	uxtb	r3, r3
 80162ea:	2b03      	cmp	r3, #3
 80162ec:	d117      	bne.n	801631e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80162ee:	7dba      	ldrb	r2, [r7, #22]
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	32ae      	adds	r2, #174	@ 0xae
 80162f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162f8:	699b      	ldr	r3, [r3, #24]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d00f      	beq.n	801631e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80162fe:	7dba      	ldrb	r2, [r7, #22]
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016306:	7dba      	ldrb	r2, [r7, #22]
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	32ae      	adds	r2, #174	@ 0xae
 801630c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016310:	699b      	ldr	r3, [r3, #24]
 8016312:	7afa      	ldrb	r2, [r7, #11]
 8016314:	4611      	mov	r1, r2
 8016316:	68f8      	ldr	r0, [r7, #12]
 8016318:	4798      	blx	r3
 801631a:	4603      	mov	r3, r0
 801631c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801631e:	7dfb      	ldrb	r3, [r7, #23]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d001      	beq.n	8016328 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016324:	7dfb      	ldrb	r3, [r7, #23]
 8016326:	e000      	b.n	801632a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016328:	2300      	movs	r3, #0
}
 801632a:	4618      	mov	r0, r3
 801632c:	3718      	adds	r7, #24
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}

08016332 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016332:	b580      	push	{r7, lr}
 8016334:	b086      	sub	sp, #24
 8016336:	af00      	add	r7, sp, #0
 8016338:	60f8      	str	r0, [r7, #12]
 801633a:	460b      	mov	r3, r1
 801633c:	607a      	str	r2, [r7, #4]
 801633e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016340:	7afb      	ldrb	r3, [r7, #11]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d16f      	bne.n	8016426 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	3314      	adds	r3, #20
 801634a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016352:	2b02      	cmp	r3, #2
 8016354:	d15a      	bne.n	801640c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016356:	693b      	ldr	r3, [r7, #16]
 8016358:	689a      	ldr	r2, [r3, #8]
 801635a:	693b      	ldr	r3, [r7, #16]
 801635c:	68db      	ldr	r3, [r3, #12]
 801635e:	429a      	cmp	r2, r3
 8016360:	d914      	bls.n	801638c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016362:	693b      	ldr	r3, [r7, #16]
 8016364:	689a      	ldr	r2, [r3, #8]
 8016366:	693b      	ldr	r3, [r7, #16]
 8016368:	68db      	ldr	r3, [r3, #12]
 801636a:	1ad2      	subs	r2, r2, r3
 801636c:	693b      	ldr	r3, [r7, #16]
 801636e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016370:	693b      	ldr	r3, [r7, #16]
 8016372:	689b      	ldr	r3, [r3, #8]
 8016374:	461a      	mov	r2, r3
 8016376:	6879      	ldr	r1, [r7, #4]
 8016378:	68f8      	ldr	r0, [r7, #12]
 801637a:	f001 f8aa 	bl	80174d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801637e:	2300      	movs	r3, #0
 8016380:	2200      	movs	r2, #0
 8016382:	2100      	movs	r1, #0
 8016384:	68f8      	ldr	r0, [r7, #12]
 8016386:	f005 fbd6 	bl	801bb36 <USBD_LL_PrepareReceive>
 801638a:	e03f      	b.n	801640c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	68da      	ldr	r2, [r3, #12]
 8016390:	693b      	ldr	r3, [r7, #16]
 8016392:	689b      	ldr	r3, [r3, #8]
 8016394:	429a      	cmp	r2, r3
 8016396:	d11c      	bne.n	80163d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016398:	693b      	ldr	r3, [r7, #16]
 801639a:	685a      	ldr	r2, [r3, #4]
 801639c:	693b      	ldr	r3, [r7, #16]
 801639e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80163a0:	429a      	cmp	r2, r3
 80163a2:	d316      	bcc.n	80163d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80163a4:	693b      	ldr	r3, [r7, #16]
 80163a6:	685a      	ldr	r2, [r3, #4]
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d20f      	bcs.n	80163d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80163b2:	2200      	movs	r2, #0
 80163b4:	2100      	movs	r1, #0
 80163b6:	68f8      	ldr	r0, [r7, #12]
 80163b8:	f001 f88b 	bl	80174d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	2200      	movs	r2, #0
 80163c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80163c4:	2300      	movs	r3, #0
 80163c6:	2200      	movs	r2, #0
 80163c8:	2100      	movs	r1, #0
 80163ca:	68f8      	ldr	r0, [r7, #12]
 80163cc:	f005 fbb3 	bl	801bb36 <USBD_LL_PrepareReceive>
 80163d0:	e01c      	b.n	801640c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	2b03      	cmp	r3, #3
 80163dc:	d10f      	bne.n	80163fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163e4:	68db      	ldr	r3, [r3, #12]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d009      	beq.n	80163fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	2200      	movs	r2, #0
 80163ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163f8:	68db      	ldr	r3, [r3, #12]
 80163fa:	68f8      	ldr	r0, [r7, #12]
 80163fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80163fe:	2180      	movs	r1, #128	@ 0x80
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f005 faee 	bl	801b9e2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016406:	68f8      	ldr	r0, [r7, #12]
 8016408:	f001 f898 	bl	801753c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8016412:	2b00      	cmp	r3, #0
 8016414:	d03a      	beq.n	801648c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016416:	68f8      	ldr	r0, [r7, #12]
 8016418:	f7ff fe42 	bl	80160a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	2200      	movs	r2, #0
 8016420:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8016424:	e032      	b.n	801648c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016426:	7afb      	ldrb	r3, [r7, #11]
 8016428:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801642c:	b2db      	uxtb	r3, r3
 801642e:	4619      	mov	r1, r3
 8016430:	68f8      	ldr	r0, [r7, #12]
 8016432:	f000 f97f 	bl	8016734 <USBD_CoreFindEP>
 8016436:	4603      	mov	r3, r0
 8016438:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801643a:	7dfb      	ldrb	r3, [r7, #23]
 801643c:	2bff      	cmp	r3, #255	@ 0xff
 801643e:	d025      	beq.n	801648c <USBD_LL_DataInStage+0x15a>
 8016440:	7dfb      	ldrb	r3, [r7, #23]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d122      	bne.n	801648c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801644c:	b2db      	uxtb	r3, r3
 801644e:	2b03      	cmp	r3, #3
 8016450:	d11c      	bne.n	801648c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016452:	7dfa      	ldrb	r2, [r7, #23]
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	32ae      	adds	r2, #174	@ 0xae
 8016458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801645c:	695b      	ldr	r3, [r3, #20]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d014      	beq.n	801648c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016462:	7dfa      	ldrb	r2, [r7, #23]
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801646a:	7dfa      	ldrb	r2, [r7, #23]
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	32ae      	adds	r2, #174	@ 0xae
 8016470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016474:	695b      	ldr	r3, [r3, #20]
 8016476:	7afa      	ldrb	r2, [r7, #11]
 8016478:	4611      	mov	r1, r2
 801647a:	68f8      	ldr	r0, [r7, #12]
 801647c:	4798      	blx	r3
 801647e:	4603      	mov	r3, r0
 8016480:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016482:	7dbb      	ldrb	r3, [r7, #22]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d001      	beq.n	801648c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016488:	7dbb      	ldrb	r3, [r7, #22]
 801648a:	e000      	b.n	801648e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801648c:	2300      	movs	r3, #0
}
 801648e:	4618      	mov	r0, r3
 8016490:	3718      	adds	r7, #24
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}

08016496 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016496:	b580      	push	{r7, lr}
 8016498:	b084      	sub	sp, #16
 801649a:	af00      	add	r7, sp, #0
 801649c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801649e:	2300      	movs	r3, #0
 80164a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	2201      	movs	r2, #1
 80164a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	2200      	movs	r2, #0
 80164ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	2200      	movs	r2, #0
 80164b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2200      	movs	r2, #0
 80164bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	2200      	movs	r2, #0
 80164c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d014      	beq.n	80164fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d00e      	beq.n	80164fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	687a      	ldr	r2, [r7, #4]
 80164e8:	6852      	ldr	r2, [r2, #4]
 80164ea:	b2d2      	uxtb	r2, r2
 80164ec:	4611      	mov	r1, r2
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	4798      	blx	r3
 80164f2:	4603      	mov	r3, r0
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d001      	beq.n	80164fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80164f8:	2303      	movs	r3, #3
 80164fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80164fc:	2340      	movs	r3, #64	@ 0x40
 80164fe:	2200      	movs	r2, #0
 8016500:	2100      	movs	r1, #0
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f005 fa09 	bl	801b91a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2201      	movs	r2, #1
 801650c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	2240      	movs	r2, #64	@ 0x40
 8016514:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016518:	2340      	movs	r3, #64	@ 0x40
 801651a:	2200      	movs	r2, #0
 801651c:	2180      	movs	r1, #128	@ 0x80
 801651e:	6878      	ldr	r0, [r7, #4]
 8016520:	f005 f9fb 	bl	801b91a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2201      	movs	r2, #1
 8016528:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	2240      	movs	r2, #64	@ 0x40
 801652e:	621a      	str	r2, [r3, #32]

  return ret;
 8016530:	7bfb      	ldrb	r3, [r7, #15]
}
 8016532:	4618      	mov	r0, r3
 8016534:	3710      	adds	r7, #16
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}

0801653a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801653a:	b480      	push	{r7}
 801653c:	b083      	sub	sp, #12
 801653e:	af00      	add	r7, sp, #0
 8016540:	6078      	str	r0, [r7, #4]
 8016542:	460b      	mov	r3, r1
 8016544:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	78fa      	ldrb	r2, [r7, #3]
 801654a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801654c:	2300      	movs	r3, #0
}
 801654e:	4618      	mov	r0, r3
 8016550:	370c      	adds	r7, #12
 8016552:	46bd      	mov	sp, r7
 8016554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016558:	4770      	bx	lr

0801655a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801655a:	b480      	push	{r7}
 801655c:	b083      	sub	sp, #12
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016568:	b2da      	uxtb	r2, r3
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2204      	movs	r2, #4
 8016574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016578:	2300      	movs	r3, #0
}
 801657a:	4618      	mov	r0, r3
 801657c:	370c      	adds	r7, #12
 801657e:	46bd      	mov	sp, r7
 8016580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016584:	4770      	bx	lr

08016586 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016586:	b480      	push	{r7}
 8016588:	b083      	sub	sp, #12
 801658a:	af00      	add	r7, sp, #0
 801658c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016594:	b2db      	uxtb	r3, r3
 8016596:	2b04      	cmp	r3, #4
 8016598:	d106      	bne.n	80165a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80165a0:	b2da      	uxtb	r2, r3
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80165a8:	2300      	movs	r3, #0
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	370c      	adds	r7, #12
 80165ae:	46bd      	mov	sp, r7
 80165b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b4:	4770      	bx	lr

080165b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80165b6:	b580      	push	{r7, lr}
 80165b8:	b082      	sub	sp, #8
 80165ba:	af00      	add	r7, sp, #0
 80165bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80165c4:	b2db      	uxtb	r3, r3
 80165c6:	2b03      	cmp	r3, #3
 80165c8:	d110      	bne.n	80165ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d00b      	beq.n	80165ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165da:	69db      	ldr	r3, [r3, #28]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d005      	beq.n	80165ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165e6:	69db      	ldr	r3, [r3, #28]
 80165e8:	6878      	ldr	r0, [r7, #4]
 80165ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80165ec:	2300      	movs	r3, #0
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3708      	adds	r7, #8
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}

080165f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80165f6:	b580      	push	{r7, lr}
 80165f8:	b082      	sub	sp, #8
 80165fa:	af00      	add	r7, sp, #0
 80165fc:	6078      	str	r0, [r7, #4]
 80165fe:	460b      	mov	r3, r1
 8016600:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	32ae      	adds	r2, #174	@ 0xae
 801660c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d101      	bne.n	8016618 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016614:	2303      	movs	r3, #3
 8016616:	e01c      	b.n	8016652 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801661e:	b2db      	uxtb	r3, r3
 8016620:	2b03      	cmp	r3, #3
 8016622:	d115      	bne.n	8016650 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	32ae      	adds	r2, #174	@ 0xae
 801662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016632:	6a1b      	ldr	r3, [r3, #32]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d00b      	beq.n	8016650 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	32ae      	adds	r2, #174	@ 0xae
 8016642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016646:	6a1b      	ldr	r3, [r3, #32]
 8016648:	78fa      	ldrb	r2, [r7, #3]
 801664a:	4611      	mov	r1, r2
 801664c:	6878      	ldr	r0, [r7, #4]
 801664e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016650:	2300      	movs	r3, #0
}
 8016652:	4618      	mov	r0, r3
 8016654:	3708      	adds	r7, #8
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}

0801665a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801665a:	b580      	push	{r7, lr}
 801665c:	b082      	sub	sp, #8
 801665e:	af00      	add	r7, sp, #0
 8016660:	6078      	str	r0, [r7, #4]
 8016662:	460b      	mov	r3, r1
 8016664:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	32ae      	adds	r2, #174	@ 0xae
 8016670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d101      	bne.n	801667c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016678:	2303      	movs	r3, #3
 801667a:	e01c      	b.n	80166b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016682:	b2db      	uxtb	r3, r3
 8016684:	2b03      	cmp	r3, #3
 8016686:	d115      	bne.n	80166b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	32ae      	adds	r2, #174	@ 0xae
 8016692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016698:	2b00      	cmp	r3, #0
 801669a:	d00b      	beq.n	80166b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	32ae      	adds	r2, #174	@ 0xae
 80166a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166ac:	78fa      	ldrb	r2, [r7, #3]
 80166ae:	4611      	mov	r1, r2
 80166b0:	6878      	ldr	r0, [r7, #4]
 80166b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80166b4:	2300      	movs	r3, #0
}
 80166b6:	4618      	mov	r0, r3
 80166b8:	3708      	adds	r7, #8
 80166ba:	46bd      	mov	sp, r7
 80166bc:	bd80      	pop	{r7, pc}

080166be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80166be:	b480      	push	{r7}
 80166c0:	b083      	sub	sp, #12
 80166c2:	af00      	add	r7, sp, #0
 80166c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80166c6:	2300      	movs	r3, #0
}
 80166c8:	4618      	mov	r0, r3
 80166ca:	370c      	adds	r7, #12
 80166cc:	46bd      	mov	sp, r7
 80166ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d2:	4770      	bx	lr

080166d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b084      	sub	sp, #16
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80166dc:	2300      	movs	r3, #0
 80166de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	2201      	movs	r2, #1
 80166e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d00e      	beq.n	8016710 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166f8:	685b      	ldr	r3, [r3, #4]
 80166fa:	687a      	ldr	r2, [r7, #4]
 80166fc:	6852      	ldr	r2, [r2, #4]
 80166fe:	b2d2      	uxtb	r2, r2
 8016700:	4611      	mov	r1, r2
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	4798      	blx	r3
 8016706:	4603      	mov	r3, r0
 8016708:	2b00      	cmp	r3, #0
 801670a:	d001      	beq.n	8016710 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801670c:	2303      	movs	r3, #3
 801670e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016710:	7bfb      	ldrb	r3, [r7, #15]
}
 8016712:	4618      	mov	r0, r3
 8016714:	3710      	adds	r7, #16
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}

0801671a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801671a:	b480      	push	{r7}
 801671c:	b083      	sub	sp, #12
 801671e:	af00      	add	r7, sp, #0
 8016720:	6078      	str	r0, [r7, #4]
 8016722:	460b      	mov	r3, r1
 8016724:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016726:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016728:	4618      	mov	r0, r3
 801672a:	370c      	adds	r7, #12
 801672c:	46bd      	mov	sp, r7
 801672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016732:	4770      	bx	lr

08016734 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016734:	b480      	push	{r7}
 8016736:	b083      	sub	sp, #12
 8016738:	af00      	add	r7, sp, #0
 801673a:	6078      	str	r0, [r7, #4]
 801673c:	460b      	mov	r3, r1
 801673e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016740:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016742:	4618      	mov	r0, r3
 8016744:	370c      	adds	r7, #12
 8016746:	46bd      	mov	sp, r7
 8016748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674c:	4770      	bx	lr

0801674e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801674e:	b580      	push	{r7, lr}
 8016750:	b086      	sub	sp, #24
 8016752:	af00      	add	r7, sp, #0
 8016754:	6078      	str	r0, [r7, #4]
 8016756:	460b      	mov	r3, r1
 8016758:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016762:	2300      	movs	r3, #0
 8016764:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	885b      	ldrh	r3, [r3, #2]
 801676a:	b29b      	uxth	r3, r3
 801676c:	68fa      	ldr	r2, [r7, #12]
 801676e:	7812      	ldrb	r2, [r2, #0]
 8016770:	4293      	cmp	r3, r2
 8016772:	d91f      	bls.n	80167b4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801677a:	e013      	b.n	80167a4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801677c:	f107 030a 	add.w	r3, r7, #10
 8016780:	4619      	mov	r1, r3
 8016782:	6978      	ldr	r0, [r7, #20]
 8016784:	f000 f81b 	bl	80167be <USBD_GetNextDesc>
 8016788:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801678a:	697b      	ldr	r3, [r7, #20]
 801678c:	785b      	ldrb	r3, [r3, #1]
 801678e:	2b05      	cmp	r3, #5
 8016790:	d108      	bne.n	80167a4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	789b      	ldrb	r3, [r3, #2]
 801679a:	78fa      	ldrb	r2, [r7, #3]
 801679c:	429a      	cmp	r2, r3
 801679e:	d008      	beq.n	80167b2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80167a0:	2300      	movs	r3, #0
 80167a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	885b      	ldrh	r3, [r3, #2]
 80167a8:	b29a      	uxth	r2, r3
 80167aa:	897b      	ldrh	r3, [r7, #10]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d8e5      	bhi.n	801677c <USBD_GetEpDesc+0x2e>
 80167b0:	e000      	b.n	80167b4 <USBD_GetEpDesc+0x66>
          break;
 80167b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80167b4:	693b      	ldr	r3, [r7, #16]
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	3718      	adds	r7, #24
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}

080167be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80167be:	b480      	push	{r7}
 80167c0:	b085      	sub	sp, #20
 80167c2:	af00      	add	r7, sp, #0
 80167c4:	6078      	str	r0, [r7, #4]
 80167c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80167cc:	683b      	ldr	r3, [r7, #0]
 80167ce:	881b      	ldrh	r3, [r3, #0]
 80167d0:	68fa      	ldr	r2, [r7, #12]
 80167d2:	7812      	ldrb	r2, [r2, #0]
 80167d4:	4413      	add	r3, r2
 80167d6:	b29a      	uxth	r2, r3
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	781b      	ldrb	r3, [r3, #0]
 80167e0:	461a      	mov	r2, r3
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	4413      	add	r3, r2
 80167e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80167e8:	68fb      	ldr	r3, [r7, #12]
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	3714      	adds	r7, #20
 80167ee:	46bd      	mov	sp, r7
 80167f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f4:	4770      	bx	lr

080167f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80167f6:	b480      	push	{r7}
 80167f8:	b087      	sub	sp, #28
 80167fa:	af00      	add	r7, sp, #0
 80167fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016802:	697b      	ldr	r3, [r7, #20]
 8016804:	781b      	ldrb	r3, [r3, #0]
 8016806:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016808:	697b      	ldr	r3, [r7, #20]
 801680a:	3301      	adds	r3, #1
 801680c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016814:	8a3b      	ldrh	r3, [r7, #16]
 8016816:	021b      	lsls	r3, r3, #8
 8016818:	b21a      	sxth	r2, r3
 801681a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801681e:	4313      	orrs	r3, r2
 8016820:	b21b      	sxth	r3, r3
 8016822:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016824:	89fb      	ldrh	r3, [r7, #14]
}
 8016826:	4618      	mov	r0, r3
 8016828:	371c      	adds	r7, #28
 801682a:	46bd      	mov	sp, r7
 801682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016830:	4770      	bx	lr
	...

08016834 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b084      	sub	sp, #16
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
 801683c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801683e:	2300      	movs	r3, #0
 8016840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	781b      	ldrb	r3, [r3, #0]
 8016846:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801684a:	2b40      	cmp	r3, #64	@ 0x40
 801684c:	d005      	beq.n	801685a <USBD_StdDevReq+0x26>
 801684e:	2b40      	cmp	r3, #64	@ 0x40
 8016850:	d857      	bhi.n	8016902 <USBD_StdDevReq+0xce>
 8016852:	2b00      	cmp	r3, #0
 8016854:	d00f      	beq.n	8016876 <USBD_StdDevReq+0x42>
 8016856:	2b20      	cmp	r3, #32
 8016858:	d153      	bne.n	8016902 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	32ae      	adds	r2, #174	@ 0xae
 8016864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016868:	689b      	ldr	r3, [r3, #8]
 801686a:	6839      	ldr	r1, [r7, #0]
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	4798      	blx	r3
 8016870:	4603      	mov	r3, r0
 8016872:	73fb      	strb	r3, [r7, #15]
      break;
 8016874:	e04a      	b.n	801690c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	785b      	ldrb	r3, [r3, #1]
 801687a:	2b09      	cmp	r3, #9
 801687c:	d83b      	bhi.n	80168f6 <USBD_StdDevReq+0xc2>
 801687e:	a201      	add	r2, pc, #4	@ (adr r2, 8016884 <USBD_StdDevReq+0x50>)
 8016880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016884:	080168d9 	.word	0x080168d9
 8016888:	080168ed 	.word	0x080168ed
 801688c:	080168f7 	.word	0x080168f7
 8016890:	080168e3 	.word	0x080168e3
 8016894:	080168f7 	.word	0x080168f7
 8016898:	080168b7 	.word	0x080168b7
 801689c:	080168ad 	.word	0x080168ad
 80168a0:	080168f7 	.word	0x080168f7
 80168a4:	080168cf 	.word	0x080168cf
 80168a8:	080168c1 	.word	0x080168c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80168ac:	6839      	ldr	r1, [r7, #0]
 80168ae:	6878      	ldr	r0, [r7, #4]
 80168b0:	f000 fa3c 	bl	8016d2c <USBD_GetDescriptor>
          break;
 80168b4:	e024      	b.n	8016900 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80168b6:	6839      	ldr	r1, [r7, #0]
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f000 fba1 	bl	8017000 <USBD_SetAddress>
          break;
 80168be:	e01f      	b.n	8016900 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80168c0:	6839      	ldr	r1, [r7, #0]
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f000 fbe0 	bl	8017088 <USBD_SetConfig>
 80168c8:	4603      	mov	r3, r0
 80168ca:	73fb      	strb	r3, [r7, #15]
          break;
 80168cc:	e018      	b.n	8016900 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80168ce:	6839      	ldr	r1, [r7, #0]
 80168d0:	6878      	ldr	r0, [r7, #4]
 80168d2:	f000 fc83 	bl	80171dc <USBD_GetConfig>
          break;
 80168d6:	e013      	b.n	8016900 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80168d8:	6839      	ldr	r1, [r7, #0]
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f000 fcb4 	bl	8017248 <USBD_GetStatus>
          break;
 80168e0:	e00e      	b.n	8016900 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80168e2:	6839      	ldr	r1, [r7, #0]
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f000 fce3 	bl	80172b0 <USBD_SetFeature>
          break;
 80168ea:	e009      	b.n	8016900 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80168ec:	6839      	ldr	r1, [r7, #0]
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f000 fd07 	bl	8017302 <USBD_ClrFeature>
          break;
 80168f4:	e004      	b.n	8016900 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80168f6:	6839      	ldr	r1, [r7, #0]
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f000 fd5e 	bl	80173ba <USBD_CtlError>
          break;
 80168fe:	bf00      	nop
      }
      break;
 8016900:	e004      	b.n	801690c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016902:	6839      	ldr	r1, [r7, #0]
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f000 fd58 	bl	80173ba <USBD_CtlError>
      break;
 801690a:	bf00      	nop
  }

  return ret;
 801690c:	7bfb      	ldrb	r3, [r7, #15]
}
 801690e:	4618      	mov	r0, r3
 8016910:	3710      	adds	r7, #16
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop

08016918 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b084      	sub	sp, #16
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016922:	2300      	movs	r3, #0
 8016924:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	781b      	ldrb	r3, [r3, #0]
 801692a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801692e:	2b40      	cmp	r3, #64	@ 0x40
 8016930:	d005      	beq.n	801693e <USBD_StdItfReq+0x26>
 8016932:	2b40      	cmp	r3, #64	@ 0x40
 8016934:	d852      	bhi.n	80169dc <USBD_StdItfReq+0xc4>
 8016936:	2b00      	cmp	r3, #0
 8016938:	d001      	beq.n	801693e <USBD_StdItfReq+0x26>
 801693a:	2b20      	cmp	r3, #32
 801693c:	d14e      	bne.n	80169dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016944:	b2db      	uxtb	r3, r3
 8016946:	3b01      	subs	r3, #1
 8016948:	2b02      	cmp	r3, #2
 801694a:	d840      	bhi.n	80169ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	889b      	ldrh	r3, [r3, #4]
 8016950:	b2db      	uxtb	r3, r3
 8016952:	2b01      	cmp	r3, #1
 8016954:	d836      	bhi.n	80169c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016956:	683b      	ldr	r3, [r7, #0]
 8016958:	889b      	ldrh	r3, [r3, #4]
 801695a:	b2db      	uxtb	r3, r3
 801695c:	4619      	mov	r1, r3
 801695e:	6878      	ldr	r0, [r7, #4]
 8016960:	f7ff fedb 	bl	801671a <USBD_CoreFindIF>
 8016964:	4603      	mov	r3, r0
 8016966:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016968:	7bbb      	ldrb	r3, [r7, #14]
 801696a:	2bff      	cmp	r3, #255	@ 0xff
 801696c:	d01d      	beq.n	80169aa <USBD_StdItfReq+0x92>
 801696e:	7bbb      	ldrb	r3, [r7, #14]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d11a      	bne.n	80169aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016974:	7bba      	ldrb	r2, [r7, #14]
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	32ae      	adds	r2, #174	@ 0xae
 801697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801697e:	689b      	ldr	r3, [r3, #8]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d00f      	beq.n	80169a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016984:	7bba      	ldrb	r2, [r7, #14]
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801698c:	7bba      	ldrb	r2, [r7, #14]
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	32ae      	adds	r2, #174	@ 0xae
 8016992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016996:	689b      	ldr	r3, [r3, #8]
 8016998:	6839      	ldr	r1, [r7, #0]
 801699a:	6878      	ldr	r0, [r7, #4]
 801699c:	4798      	blx	r3
 801699e:	4603      	mov	r3, r0
 80169a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80169a2:	e004      	b.n	80169ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80169a4:	2303      	movs	r3, #3
 80169a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80169a8:	e001      	b.n	80169ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80169aa:	2303      	movs	r3, #3
 80169ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80169ae:	683b      	ldr	r3, [r7, #0]
 80169b0:	88db      	ldrh	r3, [r3, #6]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d110      	bne.n	80169d8 <USBD_StdItfReq+0xc0>
 80169b6:	7bfb      	ldrb	r3, [r7, #15]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d10d      	bne.n	80169d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f000 fdaa 	bl	8017516 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80169c2:	e009      	b.n	80169d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80169c4:	6839      	ldr	r1, [r7, #0]
 80169c6:	6878      	ldr	r0, [r7, #4]
 80169c8:	f000 fcf7 	bl	80173ba <USBD_CtlError>
          break;
 80169cc:	e004      	b.n	80169d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80169ce:	6839      	ldr	r1, [r7, #0]
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f000 fcf2 	bl	80173ba <USBD_CtlError>
          break;
 80169d6:	e000      	b.n	80169da <USBD_StdItfReq+0xc2>
          break;
 80169d8:	bf00      	nop
      }
      break;
 80169da:	e004      	b.n	80169e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80169dc:	6839      	ldr	r1, [r7, #0]
 80169de:	6878      	ldr	r0, [r7, #4]
 80169e0:	f000 fceb 	bl	80173ba <USBD_CtlError>
      break;
 80169e4:	bf00      	nop
  }

  return ret;
 80169e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	3710      	adds	r7, #16
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}

080169f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b084      	sub	sp, #16
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
 80169f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80169fa:	2300      	movs	r3, #0
 80169fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	889b      	ldrh	r3, [r3, #4]
 8016a02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	781b      	ldrb	r3, [r3, #0]
 8016a08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016a0c:	2b40      	cmp	r3, #64	@ 0x40
 8016a0e:	d007      	beq.n	8016a20 <USBD_StdEPReq+0x30>
 8016a10:	2b40      	cmp	r3, #64	@ 0x40
 8016a12:	f200 817f 	bhi.w	8016d14 <USBD_StdEPReq+0x324>
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d02a      	beq.n	8016a70 <USBD_StdEPReq+0x80>
 8016a1a:	2b20      	cmp	r3, #32
 8016a1c:	f040 817a 	bne.w	8016d14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016a20:	7bbb      	ldrb	r3, [r7, #14]
 8016a22:	4619      	mov	r1, r3
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f7ff fe85 	bl	8016734 <USBD_CoreFindEP>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016a2e:	7b7b      	ldrb	r3, [r7, #13]
 8016a30:	2bff      	cmp	r3, #255	@ 0xff
 8016a32:	f000 8174 	beq.w	8016d1e <USBD_StdEPReq+0x32e>
 8016a36:	7b7b      	ldrb	r3, [r7, #13]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	f040 8170 	bne.w	8016d1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016a3e:	7b7a      	ldrb	r2, [r7, #13]
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016a46:	7b7a      	ldrb	r2, [r7, #13]
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	32ae      	adds	r2, #174	@ 0xae
 8016a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a50:	689b      	ldr	r3, [r3, #8]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	f000 8163 	beq.w	8016d1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016a58:	7b7a      	ldrb	r2, [r7, #13]
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	32ae      	adds	r2, #174	@ 0xae
 8016a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a62:	689b      	ldr	r3, [r3, #8]
 8016a64:	6839      	ldr	r1, [r7, #0]
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	4798      	blx	r3
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016a6e:	e156      	b.n	8016d1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	785b      	ldrb	r3, [r3, #1]
 8016a74:	2b03      	cmp	r3, #3
 8016a76:	d008      	beq.n	8016a8a <USBD_StdEPReq+0x9a>
 8016a78:	2b03      	cmp	r3, #3
 8016a7a:	f300 8145 	bgt.w	8016d08 <USBD_StdEPReq+0x318>
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	f000 809b 	beq.w	8016bba <USBD_StdEPReq+0x1ca>
 8016a84:	2b01      	cmp	r3, #1
 8016a86:	d03c      	beq.n	8016b02 <USBD_StdEPReq+0x112>
 8016a88:	e13e      	b.n	8016d08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	2b02      	cmp	r3, #2
 8016a94:	d002      	beq.n	8016a9c <USBD_StdEPReq+0xac>
 8016a96:	2b03      	cmp	r3, #3
 8016a98:	d016      	beq.n	8016ac8 <USBD_StdEPReq+0xd8>
 8016a9a:	e02c      	b.n	8016af6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016a9c:	7bbb      	ldrb	r3, [r7, #14]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d00d      	beq.n	8016abe <USBD_StdEPReq+0xce>
 8016aa2:	7bbb      	ldrb	r3, [r7, #14]
 8016aa4:	2b80      	cmp	r3, #128	@ 0x80
 8016aa6:	d00a      	beq.n	8016abe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016aa8:	7bbb      	ldrb	r3, [r7, #14]
 8016aaa:	4619      	mov	r1, r3
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f004 ff98 	bl	801b9e2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016ab2:	2180      	movs	r1, #128	@ 0x80
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	f004 ff94 	bl	801b9e2 <USBD_LL_StallEP>
 8016aba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016abc:	e020      	b.n	8016b00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016abe:	6839      	ldr	r1, [r7, #0]
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f000 fc7a 	bl	80173ba <USBD_CtlError>
              break;
 8016ac6:	e01b      	b.n	8016b00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	885b      	ldrh	r3, [r3, #2]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d10e      	bne.n	8016aee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016ad0:	7bbb      	ldrb	r3, [r7, #14]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d00b      	beq.n	8016aee <USBD_StdEPReq+0xfe>
 8016ad6:	7bbb      	ldrb	r3, [r7, #14]
 8016ad8:	2b80      	cmp	r3, #128	@ 0x80
 8016ada:	d008      	beq.n	8016aee <USBD_StdEPReq+0xfe>
 8016adc:	683b      	ldr	r3, [r7, #0]
 8016ade:	88db      	ldrh	r3, [r3, #6]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d104      	bne.n	8016aee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ae4:	7bbb      	ldrb	r3, [r7, #14]
 8016ae6:	4619      	mov	r1, r3
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f004 ff7a 	bl	801b9e2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f000 fd11 	bl	8017516 <USBD_CtlSendStatus>

              break;
 8016af4:	e004      	b.n	8016b00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016af6:	6839      	ldr	r1, [r7, #0]
 8016af8:	6878      	ldr	r0, [r7, #4]
 8016afa:	f000 fc5e 	bl	80173ba <USBD_CtlError>
              break;
 8016afe:	bf00      	nop
          }
          break;
 8016b00:	e107      	b.n	8016d12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b08:	b2db      	uxtb	r3, r3
 8016b0a:	2b02      	cmp	r3, #2
 8016b0c:	d002      	beq.n	8016b14 <USBD_StdEPReq+0x124>
 8016b0e:	2b03      	cmp	r3, #3
 8016b10:	d016      	beq.n	8016b40 <USBD_StdEPReq+0x150>
 8016b12:	e04b      	b.n	8016bac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016b14:	7bbb      	ldrb	r3, [r7, #14]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d00d      	beq.n	8016b36 <USBD_StdEPReq+0x146>
 8016b1a:	7bbb      	ldrb	r3, [r7, #14]
 8016b1c:	2b80      	cmp	r3, #128	@ 0x80
 8016b1e:	d00a      	beq.n	8016b36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016b20:	7bbb      	ldrb	r3, [r7, #14]
 8016b22:	4619      	mov	r1, r3
 8016b24:	6878      	ldr	r0, [r7, #4]
 8016b26:	f004 ff5c 	bl	801b9e2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b2a:	2180      	movs	r1, #128	@ 0x80
 8016b2c:	6878      	ldr	r0, [r7, #4]
 8016b2e:	f004 ff58 	bl	801b9e2 <USBD_LL_StallEP>
 8016b32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016b34:	e040      	b.n	8016bb8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016b36:	6839      	ldr	r1, [r7, #0]
 8016b38:	6878      	ldr	r0, [r7, #4]
 8016b3a:	f000 fc3e 	bl	80173ba <USBD_CtlError>
              break;
 8016b3e:	e03b      	b.n	8016bb8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	885b      	ldrh	r3, [r3, #2]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d136      	bne.n	8016bb6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016b48:	7bbb      	ldrb	r3, [r7, #14]
 8016b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d004      	beq.n	8016b5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016b52:	7bbb      	ldrb	r3, [r7, #14]
 8016b54:	4619      	mov	r1, r3
 8016b56:	6878      	ldr	r0, [r7, #4]
 8016b58:	f004 ff62 	bl	801ba20 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016b5c:	6878      	ldr	r0, [r7, #4]
 8016b5e:	f000 fcda 	bl	8017516 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016b62:	7bbb      	ldrb	r3, [r7, #14]
 8016b64:	4619      	mov	r1, r3
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f7ff fde4 	bl	8016734 <USBD_CoreFindEP>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016b70:	7b7b      	ldrb	r3, [r7, #13]
 8016b72:	2bff      	cmp	r3, #255	@ 0xff
 8016b74:	d01f      	beq.n	8016bb6 <USBD_StdEPReq+0x1c6>
 8016b76:	7b7b      	ldrb	r3, [r7, #13]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d11c      	bne.n	8016bb6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016b7c:	7b7a      	ldrb	r2, [r7, #13]
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016b84:	7b7a      	ldrb	r2, [r7, #13]
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	32ae      	adds	r2, #174	@ 0xae
 8016b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b8e:	689b      	ldr	r3, [r3, #8]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d010      	beq.n	8016bb6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016b94:	7b7a      	ldrb	r2, [r7, #13]
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	32ae      	adds	r2, #174	@ 0xae
 8016b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b9e:	689b      	ldr	r3, [r3, #8]
 8016ba0:	6839      	ldr	r1, [r7, #0]
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	4798      	blx	r3
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016baa:	e004      	b.n	8016bb6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016bac:	6839      	ldr	r1, [r7, #0]
 8016bae:	6878      	ldr	r0, [r7, #4]
 8016bb0:	f000 fc03 	bl	80173ba <USBD_CtlError>
              break;
 8016bb4:	e000      	b.n	8016bb8 <USBD_StdEPReq+0x1c8>
              break;
 8016bb6:	bf00      	nop
          }
          break;
 8016bb8:	e0ab      	b.n	8016d12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	2b02      	cmp	r3, #2
 8016bc4:	d002      	beq.n	8016bcc <USBD_StdEPReq+0x1dc>
 8016bc6:	2b03      	cmp	r3, #3
 8016bc8:	d032      	beq.n	8016c30 <USBD_StdEPReq+0x240>
 8016bca:	e097      	b.n	8016cfc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016bcc:	7bbb      	ldrb	r3, [r7, #14]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d007      	beq.n	8016be2 <USBD_StdEPReq+0x1f2>
 8016bd2:	7bbb      	ldrb	r3, [r7, #14]
 8016bd4:	2b80      	cmp	r3, #128	@ 0x80
 8016bd6:	d004      	beq.n	8016be2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016bd8:	6839      	ldr	r1, [r7, #0]
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	f000 fbed 	bl	80173ba <USBD_CtlError>
                break;
 8016be0:	e091      	b.n	8016d06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016be2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	da0b      	bge.n	8016c02 <USBD_StdEPReq+0x212>
 8016bea:	7bbb      	ldrb	r3, [r7, #14]
 8016bec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016bf0:	4613      	mov	r3, r2
 8016bf2:	009b      	lsls	r3, r3, #2
 8016bf4:	4413      	add	r3, r2
 8016bf6:	009b      	lsls	r3, r3, #2
 8016bf8:	3310      	adds	r3, #16
 8016bfa:	687a      	ldr	r2, [r7, #4]
 8016bfc:	4413      	add	r3, r2
 8016bfe:	3304      	adds	r3, #4
 8016c00:	e00b      	b.n	8016c1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016c02:	7bbb      	ldrb	r3, [r7, #14]
 8016c04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016c08:	4613      	mov	r3, r2
 8016c0a:	009b      	lsls	r3, r3, #2
 8016c0c:	4413      	add	r3, r2
 8016c0e:	009b      	lsls	r3, r3, #2
 8016c10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016c14:	687a      	ldr	r2, [r7, #4]
 8016c16:	4413      	add	r3, r2
 8016c18:	3304      	adds	r3, #4
 8016c1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016c1c:	68bb      	ldr	r3, [r7, #8]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	2202      	movs	r2, #2
 8016c26:	4619      	mov	r1, r3
 8016c28:	6878      	ldr	r0, [r7, #4]
 8016c2a:	f000 fc37 	bl	801749c <USBD_CtlSendData>
              break;
 8016c2e:	e06a      	b.n	8016d06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	da11      	bge.n	8016c5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016c38:	7bbb      	ldrb	r3, [r7, #14]
 8016c3a:	f003 020f 	and.w	r2, r3, #15
 8016c3e:	6879      	ldr	r1, [r7, #4]
 8016c40:	4613      	mov	r3, r2
 8016c42:	009b      	lsls	r3, r3, #2
 8016c44:	4413      	add	r3, r2
 8016c46:	009b      	lsls	r3, r3, #2
 8016c48:	440b      	add	r3, r1
 8016c4a:	3324      	adds	r3, #36	@ 0x24
 8016c4c:	881b      	ldrh	r3, [r3, #0]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d117      	bne.n	8016c82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016c52:	6839      	ldr	r1, [r7, #0]
 8016c54:	6878      	ldr	r0, [r7, #4]
 8016c56:	f000 fbb0 	bl	80173ba <USBD_CtlError>
                  break;
 8016c5a:	e054      	b.n	8016d06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016c5c:	7bbb      	ldrb	r3, [r7, #14]
 8016c5e:	f003 020f 	and.w	r2, r3, #15
 8016c62:	6879      	ldr	r1, [r7, #4]
 8016c64:	4613      	mov	r3, r2
 8016c66:	009b      	lsls	r3, r3, #2
 8016c68:	4413      	add	r3, r2
 8016c6a:	009b      	lsls	r3, r3, #2
 8016c6c:	440b      	add	r3, r1
 8016c6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016c72:	881b      	ldrh	r3, [r3, #0]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d104      	bne.n	8016c82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016c78:	6839      	ldr	r1, [r7, #0]
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f000 fb9d 	bl	80173ba <USBD_CtlError>
                  break;
 8016c80:	e041      	b.n	8016d06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	da0b      	bge.n	8016ca2 <USBD_StdEPReq+0x2b2>
 8016c8a:	7bbb      	ldrb	r3, [r7, #14]
 8016c8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016c90:	4613      	mov	r3, r2
 8016c92:	009b      	lsls	r3, r3, #2
 8016c94:	4413      	add	r3, r2
 8016c96:	009b      	lsls	r3, r3, #2
 8016c98:	3310      	adds	r3, #16
 8016c9a:	687a      	ldr	r2, [r7, #4]
 8016c9c:	4413      	add	r3, r2
 8016c9e:	3304      	adds	r3, #4
 8016ca0:	e00b      	b.n	8016cba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016ca2:	7bbb      	ldrb	r3, [r7, #14]
 8016ca4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016ca8:	4613      	mov	r3, r2
 8016caa:	009b      	lsls	r3, r3, #2
 8016cac:	4413      	add	r3, r2
 8016cae:	009b      	lsls	r3, r3, #2
 8016cb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016cb4:	687a      	ldr	r2, [r7, #4]
 8016cb6:	4413      	add	r3, r2
 8016cb8:	3304      	adds	r3, #4
 8016cba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016cbc:	7bbb      	ldrb	r3, [r7, #14]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d002      	beq.n	8016cc8 <USBD_StdEPReq+0x2d8>
 8016cc2:	7bbb      	ldrb	r3, [r7, #14]
 8016cc4:	2b80      	cmp	r3, #128	@ 0x80
 8016cc6:	d103      	bne.n	8016cd0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016cc8:	68bb      	ldr	r3, [r7, #8]
 8016cca:	2200      	movs	r2, #0
 8016ccc:	601a      	str	r2, [r3, #0]
 8016cce:	e00e      	b.n	8016cee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016cd0:	7bbb      	ldrb	r3, [r7, #14]
 8016cd2:	4619      	mov	r1, r3
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f004 fec2 	bl	801ba5e <USBD_LL_IsStallEP>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d003      	beq.n	8016ce8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016ce0:	68bb      	ldr	r3, [r7, #8]
 8016ce2:	2201      	movs	r2, #1
 8016ce4:	601a      	str	r2, [r3, #0]
 8016ce6:	e002      	b.n	8016cee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	2200      	movs	r2, #0
 8016cec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016cee:	68bb      	ldr	r3, [r7, #8]
 8016cf0:	2202      	movs	r2, #2
 8016cf2:	4619      	mov	r1, r3
 8016cf4:	6878      	ldr	r0, [r7, #4]
 8016cf6:	f000 fbd1 	bl	801749c <USBD_CtlSendData>
              break;
 8016cfa:	e004      	b.n	8016d06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016cfc:	6839      	ldr	r1, [r7, #0]
 8016cfe:	6878      	ldr	r0, [r7, #4]
 8016d00:	f000 fb5b 	bl	80173ba <USBD_CtlError>
              break;
 8016d04:	bf00      	nop
          }
          break;
 8016d06:	e004      	b.n	8016d12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016d08:	6839      	ldr	r1, [r7, #0]
 8016d0a:	6878      	ldr	r0, [r7, #4]
 8016d0c:	f000 fb55 	bl	80173ba <USBD_CtlError>
          break;
 8016d10:	bf00      	nop
      }
      break;
 8016d12:	e005      	b.n	8016d20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016d14:	6839      	ldr	r1, [r7, #0]
 8016d16:	6878      	ldr	r0, [r7, #4]
 8016d18:	f000 fb4f 	bl	80173ba <USBD_CtlError>
      break;
 8016d1c:	e000      	b.n	8016d20 <USBD_StdEPReq+0x330>
      break;
 8016d1e:	bf00      	nop
  }

  return ret;
 8016d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d22:	4618      	mov	r0, r3
 8016d24:	3710      	adds	r7, #16
 8016d26:	46bd      	mov	sp, r7
 8016d28:	bd80      	pop	{r7, pc}
	...

08016d2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b084      	sub	sp, #16
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016d36:	2300      	movs	r3, #0
 8016d38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016d42:	683b      	ldr	r3, [r7, #0]
 8016d44:	885b      	ldrh	r3, [r3, #2]
 8016d46:	0a1b      	lsrs	r3, r3, #8
 8016d48:	b29b      	uxth	r3, r3
 8016d4a:	3b01      	subs	r3, #1
 8016d4c:	2b06      	cmp	r3, #6
 8016d4e:	f200 8128 	bhi.w	8016fa2 <USBD_GetDescriptor+0x276>
 8016d52:	a201      	add	r2, pc, #4	@ (adr r2, 8016d58 <USBD_GetDescriptor+0x2c>)
 8016d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d58:	08016d75 	.word	0x08016d75
 8016d5c:	08016d8d 	.word	0x08016d8d
 8016d60:	08016dcd 	.word	0x08016dcd
 8016d64:	08016fa3 	.word	0x08016fa3
 8016d68:	08016fa3 	.word	0x08016fa3
 8016d6c:	08016f43 	.word	0x08016f43
 8016d70:	08016f6f 	.word	0x08016f6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	687a      	ldr	r2, [r7, #4]
 8016d7e:	7c12      	ldrb	r2, [r2, #16]
 8016d80:	f107 0108 	add.w	r1, r7, #8
 8016d84:	4610      	mov	r0, r2
 8016d86:	4798      	blx	r3
 8016d88:	60f8      	str	r0, [r7, #12]
      break;
 8016d8a:	e112      	b.n	8016fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	7c1b      	ldrb	r3, [r3, #16]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d10d      	bne.n	8016db0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d9c:	f107 0208 	add.w	r2, r7, #8
 8016da0:	4610      	mov	r0, r2
 8016da2:	4798      	blx	r3
 8016da4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	3301      	adds	r3, #1
 8016daa:	2202      	movs	r2, #2
 8016dac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016dae:	e100      	b.n	8016fb2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016db8:	f107 0208 	add.w	r2, r7, #8
 8016dbc:	4610      	mov	r0, r2
 8016dbe:	4798      	blx	r3
 8016dc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	2202      	movs	r2, #2
 8016dc8:	701a      	strb	r2, [r3, #0]
      break;
 8016dca:	e0f2      	b.n	8016fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016dcc:	683b      	ldr	r3, [r7, #0]
 8016dce:	885b      	ldrh	r3, [r3, #2]
 8016dd0:	b2db      	uxtb	r3, r3
 8016dd2:	2b05      	cmp	r3, #5
 8016dd4:	f200 80ac 	bhi.w	8016f30 <USBD_GetDescriptor+0x204>
 8016dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8016de0 <USBD_GetDescriptor+0xb4>)
 8016dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dde:	bf00      	nop
 8016de0:	08016df9 	.word	0x08016df9
 8016de4:	08016e2d 	.word	0x08016e2d
 8016de8:	08016e61 	.word	0x08016e61
 8016dec:	08016e95 	.word	0x08016e95
 8016df0:	08016ec9 	.word	0x08016ec9
 8016df4:	08016efd 	.word	0x08016efd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016dfe:	685b      	ldr	r3, [r3, #4]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d00b      	beq.n	8016e1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e0a:	685b      	ldr	r3, [r3, #4]
 8016e0c:	687a      	ldr	r2, [r7, #4]
 8016e0e:	7c12      	ldrb	r2, [r2, #16]
 8016e10:	f107 0108 	add.w	r1, r7, #8
 8016e14:	4610      	mov	r0, r2
 8016e16:	4798      	blx	r3
 8016e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e1a:	e091      	b.n	8016f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e1c:	6839      	ldr	r1, [r7, #0]
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f000 facb 	bl	80173ba <USBD_CtlError>
            err++;
 8016e24:	7afb      	ldrb	r3, [r7, #11]
 8016e26:	3301      	adds	r3, #1
 8016e28:	72fb      	strb	r3, [r7, #11]
          break;
 8016e2a:	e089      	b.n	8016f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e32:	689b      	ldr	r3, [r3, #8]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d00b      	beq.n	8016e50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e3e:	689b      	ldr	r3, [r3, #8]
 8016e40:	687a      	ldr	r2, [r7, #4]
 8016e42:	7c12      	ldrb	r2, [r2, #16]
 8016e44:	f107 0108 	add.w	r1, r7, #8
 8016e48:	4610      	mov	r0, r2
 8016e4a:	4798      	blx	r3
 8016e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e4e:	e077      	b.n	8016f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e50:	6839      	ldr	r1, [r7, #0]
 8016e52:	6878      	ldr	r0, [r7, #4]
 8016e54:	f000 fab1 	bl	80173ba <USBD_CtlError>
            err++;
 8016e58:	7afb      	ldrb	r3, [r7, #11]
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8016e5e:	e06f      	b.n	8016f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e66:	68db      	ldr	r3, [r3, #12]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d00b      	beq.n	8016e84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e72:	68db      	ldr	r3, [r3, #12]
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	7c12      	ldrb	r2, [r2, #16]
 8016e78:	f107 0108 	add.w	r1, r7, #8
 8016e7c:	4610      	mov	r0, r2
 8016e7e:	4798      	blx	r3
 8016e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e82:	e05d      	b.n	8016f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e84:	6839      	ldr	r1, [r7, #0]
 8016e86:	6878      	ldr	r0, [r7, #4]
 8016e88:	f000 fa97 	bl	80173ba <USBD_CtlError>
            err++;
 8016e8c:	7afb      	ldrb	r3, [r7, #11]
 8016e8e:	3301      	adds	r3, #1
 8016e90:	72fb      	strb	r3, [r7, #11]
          break;
 8016e92:	e055      	b.n	8016f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e9a:	691b      	ldr	r3, [r3, #16]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d00b      	beq.n	8016eb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016ea6:	691b      	ldr	r3, [r3, #16]
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	7c12      	ldrb	r2, [r2, #16]
 8016eac:	f107 0108 	add.w	r1, r7, #8
 8016eb0:	4610      	mov	r0, r2
 8016eb2:	4798      	blx	r3
 8016eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016eb6:	e043      	b.n	8016f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016eb8:	6839      	ldr	r1, [r7, #0]
 8016eba:	6878      	ldr	r0, [r7, #4]
 8016ebc:	f000 fa7d 	bl	80173ba <USBD_CtlError>
            err++;
 8016ec0:	7afb      	ldrb	r3, [r7, #11]
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ec6:	e03b      	b.n	8016f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016ece:	695b      	ldr	r3, [r3, #20]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d00b      	beq.n	8016eec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016eda:	695b      	ldr	r3, [r3, #20]
 8016edc:	687a      	ldr	r2, [r7, #4]
 8016ede:	7c12      	ldrb	r2, [r2, #16]
 8016ee0:	f107 0108 	add.w	r1, r7, #8
 8016ee4:	4610      	mov	r0, r2
 8016ee6:	4798      	blx	r3
 8016ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016eea:	e029      	b.n	8016f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016eec:	6839      	ldr	r1, [r7, #0]
 8016eee:	6878      	ldr	r0, [r7, #4]
 8016ef0:	f000 fa63 	bl	80173ba <USBD_CtlError>
            err++;
 8016ef4:	7afb      	ldrb	r3, [r7, #11]
 8016ef6:	3301      	adds	r3, #1
 8016ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8016efa:	e021      	b.n	8016f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f02:	699b      	ldr	r3, [r3, #24]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d00b      	beq.n	8016f20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f0e:	699b      	ldr	r3, [r3, #24]
 8016f10:	687a      	ldr	r2, [r7, #4]
 8016f12:	7c12      	ldrb	r2, [r2, #16]
 8016f14:	f107 0108 	add.w	r1, r7, #8
 8016f18:	4610      	mov	r0, r2
 8016f1a:	4798      	blx	r3
 8016f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f1e:	e00f      	b.n	8016f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f20:	6839      	ldr	r1, [r7, #0]
 8016f22:	6878      	ldr	r0, [r7, #4]
 8016f24:	f000 fa49 	bl	80173ba <USBD_CtlError>
            err++;
 8016f28:	7afb      	ldrb	r3, [r7, #11]
 8016f2a:	3301      	adds	r3, #1
 8016f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8016f2e:	e007      	b.n	8016f40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016f30:	6839      	ldr	r1, [r7, #0]
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	f000 fa41 	bl	80173ba <USBD_CtlError>
          err++;
 8016f38:	7afb      	ldrb	r3, [r7, #11]
 8016f3a:	3301      	adds	r3, #1
 8016f3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016f3e:	bf00      	nop
      }
      break;
 8016f40:	e037      	b.n	8016fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	7c1b      	ldrb	r3, [r3, #16]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d109      	bne.n	8016f5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016f52:	f107 0208 	add.w	r2, r7, #8
 8016f56:	4610      	mov	r0, r2
 8016f58:	4798      	blx	r3
 8016f5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016f5c:	e029      	b.n	8016fb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016f5e:	6839      	ldr	r1, [r7, #0]
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f000 fa2a 	bl	80173ba <USBD_CtlError>
        err++;
 8016f66:	7afb      	ldrb	r3, [r7, #11]
 8016f68:	3301      	adds	r3, #1
 8016f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8016f6c:	e021      	b.n	8016fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	7c1b      	ldrb	r3, [r3, #16]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d10d      	bne.n	8016f92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f7e:	f107 0208 	add.w	r2, r7, #8
 8016f82:	4610      	mov	r0, r2
 8016f84:	4798      	blx	r3
 8016f86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	3301      	adds	r3, #1
 8016f8c:	2207      	movs	r2, #7
 8016f8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016f90:	e00f      	b.n	8016fb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016f92:	6839      	ldr	r1, [r7, #0]
 8016f94:	6878      	ldr	r0, [r7, #4]
 8016f96:	f000 fa10 	bl	80173ba <USBD_CtlError>
        err++;
 8016f9a:	7afb      	ldrb	r3, [r7, #11]
 8016f9c:	3301      	adds	r3, #1
 8016f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8016fa0:	e007      	b.n	8016fb2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016fa2:	6839      	ldr	r1, [r7, #0]
 8016fa4:	6878      	ldr	r0, [r7, #4]
 8016fa6:	f000 fa08 	bl	80173ba <USBD_CtlError>
      err++;
 8016faa:	7afb      	ldrb	r3, [r7, #11]
 8016fac:	3301      	adds	r3, #1
 8016fae:	72fb      	strb	r3, [r7, #11]
      break;
 8016fb0:	bf00      	nop
  }

  if (err != 0U)
 8016fb2:	7afb      	ldrb	r3, [r7, #11]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d11e      	bne.n	8016ff6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	88db      	ldrh	r3, [r3, #6]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d016      	beq.n	8016fee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016fc0:	893b      	ldrh	r3, [r7, #8]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d00e      	beq.n	8016fe4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	88da      	ldrh	r2, [r3, #6]
 8016fca:	893b      	ldrh	r3, [r7, #8]
 8016fcc:	4293      	cmp	r3, r2
 8016fce:	bf28      	it	cs
 8016fd0:	4613      	movcs	r3, r2
 8016fd2:	b29b      	uxth	r3, r3
 8016fd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016fd6:	893b      	ldrh	r3, [r7, #8]
 8016fd8:	461a      	mov	r2, r3
 8016fda:	68f9      	ldr	r1, [r7, #12]
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f000 fa5d 	bl	801749c <USBD_CtlSendData>
 8016fe2:	e009      	b.n	8016ff8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016fe4:	6839      	ldr	r1, [r7, #0]
 8016fe6:	6878      	ldr	r0, [r7, #4]
 8016fe8:	f000 f9e7 	bl	80173ba <USBD_CtlError>
 8016fec:	e004      	b.n	8016ff8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f000 fa91 	bl	8017516 <USBD_CtlSendStatus>
 8016ff4:	e000      	b.n	8016ff8 <USBD_GetDescriptor+0x2cc>
    return;
 8016ff6:	bf00      	nop
  }
}
 8016ff8:	3710      	adds	r7, #16
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}
 8016ffe:	bf00      	nop

08017000 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b084      	sub	sp, #16
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
 8017008:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	889b      	ldrh	r3, [r3, #4]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d131      	bne.n	8017076 <USBD_SetAddress+0x76>
 8017012:	683b      	ldr	r3, [r7, #0]
 8017014:	88db      	ldrh	r3, [r3, #6]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d12d      	bne.n	8017076 <USBD_SetAddress+0x76>
 801701a:	683b      	ldr	r3, [r7, #0]
 801701c:	885b      	ldrh	r3, [r3, #2]
 801701e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017020:	d829      	bhi.n	8017076 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	885b      	ldrh	r3, [r3, #2]
 8017026:	b2db      	uxtb	r3, r3
 8017028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801702c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017034:	b2db      	uxtb	r3, r3
 8017036:	2b03      	cmp	r3, #3
 8017038:	d104      	bne.n	8017044 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801703a:	6839      	ldr	r1, [r7, #0]
 801703c:	6878      	ldr	r0, [r7, #4]
 801703e:	f000 f9bc 	bl	80173ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017042:	e01d      	b.n	8017080 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	7bfa      	ldrb	r2, [r7, #15]
 8017048:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801704c:	7bfb      	ldrb	r3, [r7, #15]
 801704e:	4619      	mov	r1, r3
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	f004 fd30 	bl	801bab6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f000 fa5d 	bl	8017516 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801705c:	7bfb      	ldrb	r3, [r7, #15]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d004      	beq.n	801706c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	2202      	movs	r2, #2
 8017066:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801706a:	e009      	b.n	8017080 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2201      	movs	r2, #1
 8017070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017074:	e004      	b.n	8017080 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017076:	6839      	ldr	r1, [r7, #0]
 8017078:	6878      	ldr	r0, [r7, #4]
 801707a:	f000 f99e 	bl	80173ba <USBD_CtlError>
  }
}
 801707e:	bf00      	nop
 8017080:	bf00      	nop
 8017082:	3710      	adds	r7, #16
 8017084:	46bd      	mov	sp, r7
 8017086:	bd80      	pop	{r7, pc}

08017088 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b084      	sub	sp, #16
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
 8017090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017092:	2300      	movs	r3, #0
 8017094:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	885b      	ldrh	r3, [r3, #2]
 801709a:	b2da      	uxtb	r2, r3
 801709c:	4b4e      	ldr	r3, [pc, #312]	@ (80171d8 <USBD_SetConfig+0x150>)
 801709e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80170a0:	4b4d      	ldr	r3, [pc, #308]	@ (80171d8 <USBD_SetConfig+0x150>)
 80170a2:	781b      	ldrb	r3, [r3, #0]
 80170a4:	2b01      	cmp	r3, #1
 80170a6:	d905      	bls.n	80170b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80170a8:	6839      	ldr	r1, [r7, #0]
 80170aa:	6878      	ldr	r0, [r7, #4]
 80170ac:	f000 f985 	bl	80173ba <USBD_CtlError>
    return USBD_FAIL;
 80170b0:	2303      	movs	r3, #3
 80170b2:	e08c      	b.n	80171ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80170ba:	b2db      	uxtb	r3, r3
 80170bc:	2b02      	cmp	r3, #2
 80170be:	d002      	beq.n	80170c6 <USBD_SetConfig+0x3e>
 80170c0:	2b03      	cmp	r3, #3
 80170c2:	d029      	beq.n	8017118 <USBD_SetConfig+0x90>
 80170c4:	e075      	b.n	80171b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80170c6:	4b44      	ldr	r3, [pc, #272]	@ (80171d8 <USBD_SetConfig+0x150>)
 80170c8:	781b      	ldrb	r3, [r3, #0]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d020      	beq.n	8017110 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80170ce:	4b42      	ldr	r3, [pc, #264]	@ (80171d8 <USBD_SetConfig+0x150>)
 80170d0:	781b      	ldrb	r3, [r3, #0]
 80170d2:	461a      	mov	r2, r3
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80170d8:	4b3f      	ldr	r3, [pc, #252]	@ (80171d8 <USBD_SetConfig+0x150>)
 80170da:	781b      	ldrb	r3, [r3, #0]
 80170dc:	4619      	mov	r1, r3
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f7fe ffe9 	bl	80160b6 <USBD_SetClassConfig>
 80170e4:	4603      	mov	r3, r0
 80170e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80170e8:	7bfb      	ldrb	r3, [r7, #15]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d008      	beq.n	8017100 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80170ee:	6839      	ldr	r1, [r7, #0]
 80170f0:	6878      	ldr	r0, [r7, #4]
 80170f2:	f000 f962 	bl	80173ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	2202      	movs	r2, #2
 80170fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80170fe:	e065      	b.n	80171cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017100:	6878      	ldr	r0, [r7, #4]
 8017102:	f000 fa08 	bl	8017516 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	2203      	movs	r2, #3
 801710a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801710e:	e05d      	b.n	80171cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f000 fa00 	bl	8017516 <USBD_CtlSendStatus>
      break;
 8017116:	e059      	b.n	80171cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017118:	4b2f      	ldr	r3, [pc, #188]	@ (80171d8 <USBD_SetConfig+0x150>)
 801711a:	781b      	ldrb	r3, [r3, #0]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d112      	bne.n	8017146 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	2202      	movs	r2, #2
 8017124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017128:	4b2b      	ldr	r3, [pc, #172]	@ (80171d8 <USBD_SetConfig+0x150>)
 801712a:	781b      	ldrb	r3, [r3, #0]
 801712c:	461a      	mov	r2, r3
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017132:	4b29      	ldr	r3, [pc, #164]	@ (80171d8 <USBD_SetConfig+0x150>)
 8017134:	781b      	ldrb	r3, [r3, #0]
 8017136:	4619      	mov	r1, r3
 8017138:	6878      	ldr	r0, [r7, #4]
 801713a:	f7fe ffd8 	bl	80160ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f000 f9e9 	bl	8017516 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017144:	e042      	b.n	80171cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017146:	4b24      	ldr	r3, [pc, #144]	@ (80171d8 <USBD_SetConfig+0x150>)
 8017148:	781b      	ldrb	r3, [r3, #0]
 801714a:	461a      	mov	r2, r3
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	685b      	ldr	r3, [r3, #4]
 8017150:	429a      	cmp	r2, r3
 8017152:	d02a      	beq.n	80171aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	b2db      	uxtb	r3, r3
 801715a:	4619      	mov	r1, r3
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	f7fe ffc6 	bl	80160ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017162:	4b1d      	ldr	r3, [pc, #116]	@ (80171d8 <USBD_SetConfig+0x150>)
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	461a      	mov	r2, r3
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801716c:	4b1a      	ldr	r3, [pc, #104]	@ (80171d8 <USBD_SetConfig+0x150>)
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	4619      	mov	r1, r3
 8017172:	6878      	ldr	r0, [r7, #4]
 8017174:	f7fe ff9f 	bl	80160b6 <USBD_SetClassConfig>
 8017178:	4603      	mov	r3, r0
 801717a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801717c:	7bfb      	ldrb	r3, [r7, #15]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d00f      	beq.n	80171a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017182:	6839      	ldr	r1, [r7, #0]
 8017184:	6878      	ldr	r0, [r7, #4]
 8017186:	f000 f918 	bl	80173ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	685b      	ldr	r3, [r3, #4]
 801718e:	b2db      	uxtb	r3, r3
 8017190:	4619      	mov	r1, r3
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f7fe ffab 	bl	80160ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	2202      	movs	r2, #2
 801719c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80171a0:	e014      	b.n	80171cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f000 f9b7 	bl	8017516 <USBD_CtlSendStatus>
      break;
 80171a8:	e010      	b.n	80171cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80171aa:	6878      	ldr	r0, [r7, #4]
 80171ac:	f000 f9b3 	bl	8017516 <USBD_CtlSendStatus>
      break;
 80171b0:	e00c      	b.n	80171cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80171b2:	6839      	ldr	r1, [r7, #0]
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 f900 	bl	80173ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80171ba:	4b07      	ldr	r3, [pc, #28]	@ (80171d8 <USBD_SetConfig+0x150>)
 80171bc:	781b      	ldrb	r3, [r3, #0]
 80171be:	4619      	mov	r1, r3
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f7fe ff94 	bl	80160ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80171c6:	2303      	movs	r3, #3
 80171c8:	73fb      	strb	r3, [r7, #15]
      break;
 80171ca:	bf00      	nop
  }

  return ret;
 80171cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80171ce:	4618      	mov	r0, r3
 80171d0:	3710      	adds	r7, #16
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}
 80171d6:	bf00      	nop
 80171d8:	20001aaa 	.word	0x20001aaa

080171dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b082      	sub	sp, #8
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
 80171e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80171e6:	683b      	ldr	r3, [r7, #0]
 80171e8:	88db      	ldrh	r3, [r3, #6]
 80171ea:	2b01      	cmp	r3, #1
 80171ec:	d004      	beq.n	80171f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80171ee:	6839      	ldr	r1, [r7, #0]
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f000 f8e2 	bl	80173ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80171f6:	e023      	b.n	8017240 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80171fe:	b2db      	uxtb	r3, r3
 8017200:	2b02      	cmp	r3, #2
 8017202:	dc02      	bgt.n	801720a <USBD_GetConfig+0x2e>
 8017204:	2b00      	cmp	r3, #0
 8017206:	dc03      	bgt.n	8017210 <USBD_GetConfig+0x34>
 8017208:	e015      	b.n	8017236 <USBD_GetConfig+0x5a>
 801720a:	2b03      	cmp	r3, #3
 801720c:	d00b      	beq.n	8017226 <USBD_GetConfig+0x4a>
 801720e:	e012      	b.n	8017236 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	2200      	movs	r2, #0
 8017214:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	3308      	adds	r3, #8
 801721a:	2201      	movs	r2, #1
 801721c:	4619      	mov	r1, r3
 801721e:	6878      	ldr	r0, [r7, #4]
 8017220:	f000 f93c 	bl	801749c <USBD_CtlSendData>
        break;
 8017224:	e00c      	b.n	8017240 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	3304      	adds	r3, #4
 801722a:	2201      	movs	r2, #1
 801722c:	4619      	mov	r1, r3
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f000 f934 	bl	801749c <USBD_CtlSendData>
        break;
 8017234:	e004      	b.n	8017240 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017236:	6839      	ldr	r1, [r7, #0]
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f000 f8be 	bl	80173ba <USBD_CtlError>
        break;
 801723e:	bf00      	nop
}
 8017240:	bf00      	nop
 8017242:	3708      	adds	r7, #8
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}

08017248 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b082      	sub	sp, #8
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
 8017250:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017258:	b2db      	uxtb	r3, r3
 801725a:	3b01      	subs	r3, #1
 801725c:	2b02      	cmp	r3, #2
 801725e:	d81e      	bhi.n	801729e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	88db      	ldrh	r3, [r3, #6]
 8017264:	2b02      	cmp	r3, #2
 8017266:	d004      	beq.n	8017272 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017268:	6839      	ldr	r1, [r7, #0]
 801726a:	6878      	ldr	r0, [r7, #4]
 801726c:	f000 f8a5 	bl	80173ba <USBD_CtlError>
        break;
 8017270:	e01a      	b.n	80172a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	2201      	movs	r2, #1
 8017276:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801727e:	2b00      	cmp	r3, #0
 8017280:	d005      	beq.n	801728e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	68db      	ldr	r3, [r3, #12]
 8017286:	f043 0202 	orr.w	r2, r3, #2
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	330c      	adds	r3, #12
 8017292:	2202      	movs	r2, #2
 8017294:	4619      	mov	r1, r3
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f000 f900 	bl	801749c <USBD_CtlSendData>
      break;
 801729c:	e004      	b.n	80172a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801729e:	6839      	ldr	r1, [r7, #0]
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f000 f88a 	bl	80173ba <USBD_CtlError>
      break;
 80172a6:	bf00      	nop
  }
}
 80172a8:	bf00      	nop
 80172aa:	3708      	adds	r7, #8
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}

080172b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b082      	sub	sp, #8
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
 80172b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	885b      	ldrh	r3, [r3, #2]
 80172be:	2b01      	cmp	r3, #1
 80172c0:	d107      	bne.n	80172d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	2201      	movs	r2, #1
 80172c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80172ca:	6878      	ldr	r0, [r7, #4]
 80172cc:	f000 f923 	bl	8017516 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80172d0:	e013      	b.n	80172fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	885b      	ldrh	r3, [r3, #2]
 80172d6:	2b02      	cmp	r3, #2
 80172d8:	d10b      	bne.n	80172f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80172da:	683b      	ldr	r3, [r7, #0]
 80172dc:	889b      	ldrh	r3, [r3, #4]
 80172de:	0a1b      	lsrs	r3, r3, #8
 80172e0:	b29b      	uxth	r3, r3
 80172e2:	b2da      	uxtb	r2, r3
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80172ea:	6878      	ldr	r0, [r7, #4]
 80172ec:	f000 f913 	bl	8017516 <USBD_CtlSendStatus>
}
 80172f0:	e003      	b.n	80172fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80172f2:	6839      	ldr	r1, [r7, #0]
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f000 f860 	bl	80173ba <USBD_CtlError>
}
 80172fa:	bf00      	nop
 80172fc:	3708      	adds	r7, #8
 80172fe:	46bd      	mov	sp, r7
 8017300:	bd80      	pop	{r7, pc}

08017302 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017302:	b580      	push	{r7, lr}
 8017304:	b082      	sub	sp, #8
 8017306:	af00      	add	r7, sp, #0
 8017308:	6078      	str	r0, [r7, #4]
 801730a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017312:	b2db      	uxtb	r3, r3
 8017314:	3b01      	subs	r3, #1
 8017316:	2b02      	cmp	r3, #2
 8017318:	d80b      	bhi.n	8017332 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801731a:	683b      	ldr	r3, [r7, #0]
 801731c:	885b      	ldrh	r3, [r3, #2]
 801731e:	2b01      	cmp	r3, #1
 8017320:	d10c      	bne.n	801733c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	2200      	movs	r2, #0
 8017326:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801732a:	6878      	ldr	r0, [r7, #4]
 801732c:	f000 f8f3 	bl	8017516 <USBD_CtlSendStatus>
      }
      break;
 8017330:	e004      	b.n	801733c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017332:	6839      	ldr	r1, [r7, #0]
 8017334:	6878      	ldr	r0, [r7, #4]
 8017336:	f000 f840 	bl	80173ba <USBD_CtlError>
      break;
 801733a:	e000      	b.n	801733e <USBD_ClrFeature+0x3c>
      break;
 801733c:	bf00      	nop
  }
}
 801733e:	bf00      	nop
 8017340:	3708      	adds	r7, #8
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}

08017346 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017346:	b580      	push	{r7, lr}
 8017348:	b084      	sub	sp, #16
 801734a:	af00      	add	r7, sp, #0
 801734c:	6078      	str	r0, [r7, #4]
 801734e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	781a      	ldrb	r2, [r3, #0]
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	3301      	adds	r3, #1
 8017360:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	781a      	ldrb	r2, [r3, #0]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	3301      	adds	r3, #1
 801736e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017370:	68f8      	ldr	r0, [r7, #12]
 8017372:	f7ff fa40 	bl	80167f6 <SWAPBYTE>
 8017376:	4603      	mov	r3, r0
 8017378:	461a      	mov	r2, r3
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	3301      	adds	r3, #1
 8017382:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	3301      	adds	r3, #1
 8017388:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801738a:	68f8      	ldr	r0, [r7, #12]
 801738c:	f7ff fa33 	bl	80167f6 <SWAPBYTE>
 8017390:	4603      	mov	r3, r0
 8017392:	461a      	mov	r2, r3
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	3301      	adds	r3, #1
 801739c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	3301      	adds	r3, #1
 80173a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80173a4:	68f8      	ldr	r0, [r7, #12]
 80173a6:	f7ff fa26 	bl	80167f6 <SWAPBYTE>
 80173aa:	4603      	mov	r3, r0
 80173ac:	461a      	mov	r2, r3
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	80da      	strh	r2, [r3, #6]
}
 80173b2:	bf00      	nop
 80173b4:	3710      	adds	r7, #16
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}

080173ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173ba:	b580      	push	{r7, lr}
 80173bc:	b082      	sub	sp, #8
 80173be:	af00      	add	r7, sp, #0
 80173c0:	6078      	str	r0, [r7, #4]
 80173c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80173c4:	2180      	movs	r1, #128	@ 0x80
 80173c6:	6878      	ldr	r0, [r7, #4]
 80173c8:	f004 fb0b 	bl	801b9e2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80173cc:	2100      	movs	r1, #0
 80173ce:	6878      	ldr	r0, [r7, #4]
 80173d0:	f004 fb07 	bl	801b9e2 <USBD_LL_StallEP>
}
 80173d4:	bf00      	nop
 80173d6:	3708      	adds	r7, #8
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}

080173dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b086      	sub	sp, #24
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	60f8      	str	r0, [r7, #12]
 80173e4:	60b9      	str	r1, [r7, #8]
 80173e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80173e8:	2300      	movs	r3, #0
 80173ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d036      	beq.n	8017460 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80173f6:	6938      	ldr	r0, [r7, #16]
 80173f8:	f000 f836 	bl	8017468 <USBD_GetLen>
 80173fc:	4603      	mov	r3, r0
 80173fe:	3301      	adds	r3, #1
 8017400:	b29b      	uxth	r3, r3
 8017402:	005b      	lsls	r3, r3, #1
 8017404:	b29a      	uxth	r2, r3
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801740a:	7dfb      	ldrb	r3, [r7, #23]
 801740c:	68ba      	ldr	r2, [r7, #8]
 801740e:	4413      	add	r3, r2
 8017410:	687a      	ldr	r2, [r7, #4]
 8017412:	7812      	ldrb	r2, [r2, #0]
 8017414:	701a      	strb	r2, [r3, #0]
  idx++;
 8017416:	7dfb      	ldrb	r3, [r7, #23]
 8017418:	3301      	adds	r3, #1
 801741a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801741c:	7dfb      	ldrb	r3, [r7, #23]
 801741e:	68ba      	ldr	r2, [r7, #8]
 8017420:	4413      	add	r3, r2
 8017422:	2203      	movs	r2, #3
 8017424:	701a      	strb	r2, [r3, #0]
  idx++;
 8017426:	7dfb      	ldrb	r3, [r7, #23]
 8017428:	3301      	adds	r3, #1
 801742a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801742c:	e013      	b.n	8017456 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801742e:	7dfb      	ldrb	r3, [r7, #23]
 8017430:	68ba      	ldr	r2, [r7, #8]
 8017432:	4413      	add	r3, r2
 8017434:	693a      	ldr	r2, [r7, #16]
 8017436:	7812      	ldrb	r2, [r2, #0]
 8017438:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801743a:	693b      	ldr	r3, [r7, #16]
 801743c:	3301      	adds	r3, #1
 801743e:	613b      	str	r3, [r7, #16]
    idx++;
 8017440:	7dfb      	ldrb	r3, [r7, #23]
 8017442:	3301      	adds	r3, #1
 8017444:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017446:	7dfb      	ldrb	r3, [r7, #23]
 8017448:	68ba      	ldr	r2, [r7, #8]
 801744a:	4413      	add	r3, r2
 801744c:	2200      	movs	r2, #0
 801744e:	701a      	strb	r2, [r3, #0]
    idx++;
 8017450:	7dfb      	ldrb	r3, [r7, #23]
 8017452:	3301      	adds	r3, #1
 8017454:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	781b      	ldrb	r3, [r3, #0]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d1e7      	bne.n	801742e <USBD_GetString+0x52>
 801745e:	e000      	b.n	8017462 <USBD_GetString+0x86>
    return;
 8017460:	bf00      	nop
  }
}
 8017462:	3718      	adds	r7, #24
 8017464:	46bd      	mov	sp, r7
 8017466:	bd80      	pop	{r7, pc}

08017468 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017468:	b480      	push	{r7}
 801746a:	b085      	sub	sp, #20
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017470:	2300      	movs	r3, #0
 8017472:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017478:	e005      	b.n	8017486 <USBD_GetLen+0x1e>
  {
    len++;
 801747a:	7bfb      	ldrb	r3, [r7, #15]
 801747c:	3301      	adds	r3, #1
 801747e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017480:	68bb      	ldr	r3, [r7, #8]
 8017482:	3301      	adds	r3, #1
 8017484:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017486:	68bb      	ldr	r3, [r7, #8]
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d1f5      	bne.n	801747a <USBD_GetLen+0x12>
  }

  return len;
 801748e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017490:	4618      	mov	r0, r3
 8017492:	3714      	adds	r7, #20
 8017494:	46bd      	mov	sp, r7
 8017496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749a:	4770      	bx	lr

0801749c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b084      	sub	sp, #16
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	60f8      	str	r0, [r7, #12]
 80174a4:	60b9      	str	r1, [r7, #8]
 80174a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	2202      	movs	r2, #2
 80174ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	687a      	ldr	r2, [r7, #4]
 80174b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	687a      	ldr	r2, [r7, #4]
 80174ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	68ba      	ldr	r2, [r7, #8]
 80174c0:	2100      	movs	r1, #0
 80174c2:	68f8      	ldr	r0, [r7, #12]
 80174c4:	f004 fb16 	bl	801baf4 <USBD_LL_Transmit>

  return USBD_OK;
 80174c8:	2300      	movs	r3, #0
}
 80174ca:	4618      	mov	r0, r3
 80174cc:	3710      	adds	r7, #16
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}

080174d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80174d2:	b580      	push	{r7, lr}
 80174d4:	b084      	sub	sp, #16
 80174d6:	af00      	add	r7, sp, #0
 80174d8:	60f8      	str	r0, [r7, #12]
 80174da:	60b9      	str	r1, [r7, #8]
 80174dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	68ba      	ldr	r2, [r7, #8]
 80174e2:	2100      	movs	r1, #0
 80174e4:	68f8      	ldr	r0, [r7, #12]
 80174e6:	f004 fb05 	bl	801baf4 <USBD_LL_Transmit>

  return USBD_OK;
 80174ea:	2300      	movs	r3, #0
}
 80174ec:	4618      	mov	r0, r3
 80174ee:	3710      	adds	r7, #16
 80174f0:	46bd      	mov	sp, r7
 80174f2:	bd80      	pop	{r7, pc}

080174f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b084      	sub	sp, #16
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	60f8      	str	r0, [r7, #12]
 80174fc:	60b9      	str	r1, [r7, #8]
 80174fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	68ba      	ldr	r2, [r7, #8]
 8017504:	2100      	movs	r1, #0
 8017506:	68f8      	ldr	r0, [r7, #12]
 8017508:	f004 fb15 	bl	801bb36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801750c:	2300      	movs	r3, #0
}
 801750e:	4618      	mov	r0, r3
 8017510:	3710      	adds	r7, #16
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}

08017516 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017516:	b580      	push	{r7, lr}
 8017518:	b082      	sub	sp, #8
 801751a:	af00      	add	r7, sp, #0
 801751c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	2204      	movs	r2, #4
 8017522:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017526:	2300      	movs	r3, #0
 8017528:	2200      	movs	r2, #0
 801752a:	2100      	movs	r1, #0
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	f004 fae1 	bl	801baf4 <USBD_LL_Transmit>

  return USBD_OK;
 8017532:	2300      	movs	r3, #0
}
 8017534:	4618      	mov	r0, r3
 8017536:	3708      	adds	r7, #8
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}

0801753c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b082      	sub	sp, #8
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2205      	movs	r2, #5
 8017548:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801754c:	2300      	movs	r3, #0
 801754e:	2200      	movs	r2, #0
 8017550:	2100      	movs	r1, #0
 8017552:	6878      	ldr	r0, [r7, #4]
 8017554:	f004 faef 	bl	801bb36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017558:	2300      	movs	r3, #0
}
 801755a:	4618      	mov	r0, r3
 801755c:	3708      	adds	r7, #8
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}
	...

08017564 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b084      	sub	sp, #16
 8017568:	af00      	add	r7, sp, #0
 801756a:	4603      	mov	r3, r0
 801756c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801756e:	79fb      	ldrb	r3, [r7, #7]
 8017570:	4a08      	ldr	r2, [pc, #32]	@ (8017594 <disk_status+0x30>)
 8017572:	009b      	lsls	r3, r3, #2
 8017574:	4413      	add	r3, r2
 8017576:	685b      	ldr	r3, [r3, #4]
 8017578:	685b      	ldr	r3, [r3, #4]
 801757a:	79fa      	ldrb	r2, [r7, #7]
 801757c:	4905      	ldr	r1, [pc, #20]	@ (8017594 <disk_status+0x30>)
 801757e:	440a      	add	r2, r1
 8017580:	7a12      	ldrb	r2, [r2, #8]
 8017582:	4610      	mov	r0, r2
 8017584:	4798      	blx	r3
 8017586:	4603      	mov	r3, r0
 8017588:	73fb      	strb	r3, [r7, #15]
  return stat;
 801758a:	7bfb      	ldrb	r3, [r7, #15]
}
 801758c:	4618      	mov	r0, r3
 801758e:	3710      	adds	r7, #16
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	20001cd4 	.word	0x20001cd4

08017598 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b084      	sub	sp, #16
 801759c:	af00      	add	r7, sp, #0
 801759e:	4603      	mov	r3, r0
 80175a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80175a2:	2300      	movs	r3, #0
 80175a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80175a6:	79fb      	ldrb	r3, [r7, #7]
 80175a8:	4a0d      	ldr	r2, [pc, #52]	@ (80175e0 <disk_initialize+0x48>)
 80175aa:	5cd3      	ldrb	r3, [r2, r3]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d111      	bne.n	80175d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80175b0:	79fb      	ldrb	r3, [r7, #7]
 80175b2:	4a0b      	ldr	r2, [pc, #44]	@ (80175e0 <disk_initialize+0x48>)
 80175b4:	2101      	movs	r1, #1
 80175b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80175b8:	79fb      	ldrb	r3, [r7, #7]
 80175ba:	4a09      	ldr	r2, [pc, #36]	@ (80175e0 <disk_initialize+0x48>)
 80175bc:	009b      	lsls	r3, r3, #2
 80175be:	4413      	add	r3, r2
 80175c0:	685b      	ldr	r3, [r3, #4]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	79fa      	ldrb	r2, [r7, #7]
 80175c6:	4906      	ldr	r1, [pc, #24]	@ (80175e0 <disk_initialize+0x48>)
 80175c8:	440a      	add	r2, r1
 80175ca:	7a12      	ldrb	r2, [r2, #8]
 80175cc:	4610      	mov	r0, r2
 80175ce:	4798      	blx	r3
 80175d0:	4603      	mov	r3, r0
 80175d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80175d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80175d6:	4618      	mov	r0, r3
 80175d8:	3710      	adds	r7, #16
 80175da:	46bd      	mov	sp, r7
 80175dc:	bd80      	pop	{r7, pc}
 80175de:	bf00      	nop
 80175e0:	20001cd4 	.word	0x20001cd4

080175e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80175e4:	b590      	push	{r4, r7, lr}
 80175e6:	b087      	sub	sp, #28
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	60b9      	str	r1, [r7, #8]
 80175ec:	607a      	str	r2, [r7, #4]
 80175ee:	603b      	str	r3, [r7, #0]
 80175f0:	4603      	mov	r3, r0
 80175f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80175f4:	7bfb      	ldrb	r3, [r7, #15]
 80175f6:	4a0a      	ldr	r2, [pc, #40]	@ (8017620 <disk_read+0x3c>)
 80175f8:	009b      	lsls	r3, r3, #2
 80175fa:	4413      	add	r3, r2
 80175fc:	685b      	ldr	r3, [r3, #4]
 80175fe:	689c      	ldr	r4, [r3, #8]
 8017600:	7bfb      	ldrb	r3, [r7, #15]
 8017602:	4a07      	ldr	r2, [pc, #28]	@ (8017620 <disk_read+0x3c>)
 8017604:	4413      	add	r3, r2
 8017606:	7a18      	ldrb	r0, [r3, #8]
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	687a      	ldr	r2, [r7, #4]
 801760c:	68b9      	ldr	r1, [r7, #8]
 801760e:	47a0      	blx	r4
 8017610:	4603      	mov	r3, r0
 8017612:	75fb      	strb	r3, [r7, #23]
  return res;
 8017614:	7dfb      	ldrb	r3, [r7, #23]
}
 8017616:	4618      	mov	r0, r3
 8017618:	371c      	adds	r7, #28
 801761a:	46bd      	mov	sp, r7
 801761c:	bd90      	pop	{r4, r7, pc}
 801761e:	bf00      	nop
 8017620:	20001cd4 	.word	0x20001cd4

08017624 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017624:	b590      	push	{r4, r7, lr}
 8017626:	b087      	sub	sp, #28
 8017628:	af00      	add	r7, sp, #0
 801762a:	60b9      	str	r1, [r7, #8]
 801762c:	607a      	str	r2, [r7, #4]
 801762e:	603b      	str	r3, [r7, #0]
 8017630:	4603      	mov	r3, r0
 8017632:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017634:	7bfb      	ldrb	r3, [r7, #15]
 8017636:	4a0a      	ldr	r2, [pc, #40]	@ (8017660 <disk_write+0x3c>)
 8017638:	009b      	lsls	r3, r3, #2
 801763a:	4413      	add	r3, r2
 801763c:	685b      	ldr	r3, [r3, #4]
 801763e:	68dc      	ldr	r4, [r3, #12]
 8017640:	7bfb      	ldrb	r3, [r7, #15]
 8017642:	4a07      	ldr	r2, [pc, #28]	@ (8017660 <disk_write+0x3c>)
 8017644:	4413      	add	r3, r2
 8017646:	7a18      	ldrb	r0, [r3, #8]
 8017648:	683b      	ldr	r3, [r7, #0]
 801764a:	687a      	ldr	r2, [r7, #4]
 801764c:	68b9      	ldr	r1, [r7, #8]
 801764e:	47a0      	blx	r4
 8017650:	4603      	mov	r3, r0
 8017652:	75fb      	strb	r3, [r7, #23]
  return res;
 8017654:	7dfb      	ldrb	r3, [r7, #23]
}
 8017656:	4618      	mov	r0, r3
 8017658:	371c      	adds	r7, #28
 801765a:	46bd      	mov	sp, r7
 801765c:	bd90      	pop	{r4, r7, pc}
 801765e:	bf00      	nop
 8017660:	20001cd4 	.word	0x20001cd4

08017664 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b084      	sub	sp, #16
 8017668:	af00      	add	r7, sp, #0
 801766a:	4603      	mov	r3, r0
 801766c:	603a      	str	r2, [r7, #0]
 801766e:	71fb      	strb	r3, [r7, #7]
 8017670:	460b      	mov	r3, r1
 8017672:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8017674:	79fb      	ldrb	r3, [r7, #7]
 8017676:	4a09      	ldr	r2, [pc, #36]	@ (801769c <disk_ioctl+0x38>)
 8017678:	009b      	lsls	r3, r3, #2
 801767a:	4413      	add	r3, r2
 801767c:	685b      	ldr	r3, [r3, #4]
 801767e:	691b      	ldr	r3, [r3, #16]
 8017680:	79fa      	ldrb	r2, [r7, #7]
 8017682:	4906      	ldr	r1, [pc, #24]	@ (801769c <disk_ioctl+0x38>)
 8017684:	440a      	add	r2, r1
 8017686:	7a10      	ldrb	r0, [r2, #8]
 8017688:	79b9      	ldrb	r1, [r7, #6]
 801768a:	683a      	ldr	r2, [r7, #0]
 801768c:	4798      	blx	r3
 801768e:	4603      	mov	r3, r0
 8017690:	73fb      	strb	r3, [r7, #15]
  return res;
 8017692:	7bfb      	ldrb	r3, [r7, #15]
}
 8017694:	4618      	mov	r0, r3
 8017696:	3710      	adds	r7, #16
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}
 801769c:	20001cd4 	.word	0x20001cd4

080176a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80176a0:	b480      	push	{r7}
 80176a2:	b085      	sub	sp, #20
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	3301      	adds	r3, #1
 80176ac:	781b      	ldrb	r3, [r3, #0]
 80176ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80176b0:	89fb      	ldrh	r3, [r7, #14]
 80176b2:	021b      	lsls	r3, r3, #8
 80176b4:	b21a      	sxth	r2, r3
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	781b      	ldrb	r3, [r3, #0]
 80176ba:	b21b      	sxth	r3, r3
 80176bc:	4313      	orrs	r3, r2
 80176be:	b21b      	sxth	r3, r3
 80176c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80176c2:	89fb      	ldrh	r3, [r7, #14]
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	3714      	adds	r7, #20
 80176c8:	46bd      	mov	sp, r7
 80176ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ce:	4770      	bx	lr

080176d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80176d0:	b480      	push	{r7}
 80176d2:	b085      	sub	sp, #20
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	3303      	adds	r3, #3
 80176dc:	781b      	ldrb	r3, [r3, #0]
 80176de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	021b      	lsls	r3, r3, #8
 80176e4:	687a      	ldr	r2, [r7, #4]
 80176e6:	3202      	adds	r2, #2
 80176e8:	7812      	ldrb	r2, [r2, #0]
 80176ea:	4313      	orrs	r3, r2
 80176ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	021b      	lsls	r3, r3, #8
 80176f2:	687a      	ldr	r2, [r7, #4]
 80176f4:	3201      	adds	r2, #1
 80176f6:	7812      	ldrb	r2, [r2, #0]
 80176f8:	4313      	orrs	r3, r2
 80176fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	021b      	lsls	r3, r3, #8
 8017700:	687a      	ldr	r2, [r7, #4]
 8017702:	7812      	ldrb	r2, [r2, #0]
 8017704:	4313      	orrs	r3, r2
 8017706:	60fb      	str	r3, [r7, #12]
	return rv;
 8017708:	68fb      	ldr	r3, [r7, #12]
}
 801770a:	4618      	mov	r0, r3
 801770c:	3714      	adds	r7, #20
 801770e:	46bd      	mov	sp, r7
 8017710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017714:	4770      	bx	lr

08017716 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017716:	b480      	push	{r7}
 8017718:	b083      	sub	sp, #12
 801771a:	af00      	add	r7, sp, #0
 801771c:	6078      	str	r0, [r7, #4]
 801771e:	460b      	mov	r3, r1
 8017720:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	1c5a      	adds	r2, r3, #1
 8017726:	607a      	str	r2, [r7, #4]
 8017728:	887a      	ldrh	r2, [r7, #2]
 801772a:	b2d2      	uxtb	r2, r2
 801772c:	701a      	strb	r2, [r3, #0]
 801772e:	887b      	ldrh	r3, [r7, #2]
 8017730:	0a1b      	lsrs	r3, r3, #8
 8017732:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	1c5a      	adds	r2, r3, #1
 8017738:	607a      	str	r2, [r7, #4]
 801773a:	887a      	ldrh	r2, [r7, #2]
 801773c:	b2d2      	uxtb	r2, r2
 801773e:	701a      	strb	r2, [r3, #0]
}
 8017740:	bf00      	nop
 8017742:	370c      	adds	r7, #12
 8017744:	46bd      	mov	sp, r7
 8017746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774a:	4770      	bx	lr

0801774c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801774c:	b480      	push	{r7}
 801774e:	b083      	sub	sp, #12
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	1c5a      	adds	r2, r3, #1
 801775a:	607a      	str	r2, [r7, #4]
 801775c:	683a      	ldr	r2, [r7, #0]
 801775e:	b2d2      	uxtb	r2, r2
 8017760:	701a      	strb	r2, [r3, #0]
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	0a1b      	lsrs	r3, r3, #8
 8017766:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	1c5a      	adds	r2, r3, #1
 801776c:	607a      	str	r2, [r7, #4]
 801776e:	683a      	ldr	r2, [r7, #0]
 8017770:	b2d2      	uxtb	r2, r2
 8017772:	701a      	strb	r2, [r3, #0]
 8017774:	683b      	ldr	r3, [r7, #0]
 8017776:	0a1b      	lsrs	r3, r3, #8
 8017778:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	1c5a      	adds	r2, r3, #1
 801777e:	607a      	str	r2, [r7, #4]
 8017780:	683a      	ldr	r2, [r7, #0]
 8017782:	b2d2      	uxtb	r2, r2
 8017784:	701a      	strb	r2, [r3, #0]
 8017786:	683b      	ldr	r3, [r7, #0]
 8017788:	0a1b      	lsrs	r3, r3, #8
 801778a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	1c5a      	adds	r2, r3, #1
 8017790:	607a      	str	r2, [r7, #4]
 8017792:	683a      	ldr	r2, [r7, #0]
 8017794:	b2d2      	uxtb	r2, r2
 8017796:	701a      	strb	r2, [r3, #0]
}
 8017798:	bf00      	nop
 801779a:	370c      	adds	r7, #12
 801779c:	46bd      	mov	sp, r7
 801779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a2:	4770      	bx	lr

080177a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80177a4:	b480      	push	{r7}
 80177a6:	b087      	sub	sp, #28
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d00d      	beq.n	80177da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80177be:	693a      	ldr	r2, [r7, #16]
 80177c0:	1c53      	adds	r3, r2, #1
 80177c2:	613b      	str	r3, [r7, #16]
 80177c4:	697b      	ldr	r3, [r7, #20]
 80177c6:	1c59      	adds	r1, r3, #1
 80177c8:	6179      	str	r1, [r7, #20]
 80177ca:	7812      	ldrb	r2, [r2, #0]
 80177cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	3b01      	subs	r3, #1
 80177d2:	607b      	str	r3, [r7, #4]
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d1f1      	bne.n	80177be <mem_cpy+0x1a>
	}
}
 80177da:	bf00      	nop
 80177dc:	371c      	adds	r7, #28
 80177de:	46bd      	mov	sp, r7
 80177e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e4:	4770      	bx	lr

080177e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80177e6:	b480      	push	{r7}
 80177e8:	b087      	sub	sp, #28
 80177ea:	af00      	add	r7, sp, #0
 80177ec:	60f8      	str	r0, [r7, #12]
 80177ee:	60b9      	str	r1, [r7, #8]
 80177f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80177f6:	697b      	ldr	r3, [r7, #20]
 80177f8:	1c5a      	adds	r2, r3, #1
 80177fa:	617a      	str	r2, [r7, #20]
 80177fc:	68ba      	ldr	r2, [r7, #8]
 80177fe:	b2d2      	uxtb	r2, r2
 8017800:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	3b01      	subs	r3, #1
 8017806:	607b      	str	r3, [r7, #4]
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d1f3      	bne.n	80177f6 <mem_set+0x10>
}
 801780e:	bf00      	nop
 8017810:	bf00      	nop
 8017812:	371c      	adds	r7, #28
 8017814:	46bd      	mov	sp, r7
 8017816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781a:	4770      	bx	lr

0801781c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801781c:	b480      	push	{r7}
 801781e:	b089      	sub	sp, #36	@ 0x24
 8017820:	af00      	add	r7, sp, #0
 8017822:	60f8      	str	r0, [r7, #12]
 8017824:	60b9      	str	r1, [r7, #8]
 8017826:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	61fb      	str	r3, [r7, #28]
 801782c:	68bb      	ldr	r3, [r7, #8]
 801782e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017830:	2300      	movs	r3, #0
 8017832:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017834:	69fb      	ldr	r3, [r7, #28]
 8017836:	1c5a      	adds	r2, r3, #1
 8017838:	61fa      	str	r2, [r7, #28]
 801783a:	781b      	ldrb	r3, [r3, #0]
 801783c:	4619      	mov	r1, r3
 801783e:	69bb      	ldr	r3, [r7, #24]
 8017840:	1c5a      	adds	r2, r3, #1
 8017842:	61ba      	str	r2, [r7, #24]
 8017844:	781b      	ldrb	r3, [r3, #0]
 8017846:	1acb      	subs	r3, r1, r3
 8017848:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	3b01      	subs	r3, #1
 801784e:	607b      	str	r3, [r7, #4]
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d002      	beq.n	801785c <mem_cmp+0x40>
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d0eb      	beq.n	8017834 <mem_cmp+0x18>

	return r;
 801785c:	697b      	ldr	r3, [r7, #20]
}
 801785e:	4618      	mov	r0, r3
 8017860:	3724      	adds	r7, #36	@ 0x24
 8017862:	46bd      	mov	sp, r7
 8017864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017868:	4770      	bx	lr

0801786a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801786a:	b480      	push	{r7}
 801786c:	b083      	sub	sp, #12
 801786e:	af00      	add	r7, sp, #0
 8017870:	6078      	str	r0, [r7, #4]
 8017872:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017874:	e002      	b.n	801787c <chk_chr+0x12>
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	3301      	adds	r3, #1
 801787a:	607b      	str	r3, [r7, #4]
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	781b      	ldrb	r3, [r3, #0]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d005      	beq.n	8017890 <chk_chr+0x26>
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	461a      	mov	r2, r3
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	4293      	cmp	r3, r2
 801788e:	d1f2      	bne.n	8017876 <chk_chr+0xc>
	return *str;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	781b      	ldrb	r3, [r3, #0]
}
 8017894:	4618      	mov	r0, r3
 8017896:	370c      	adds	r7, #12
 8017898:	46bd      	mov	sp, r7
 801789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789e:	4770      	bx	lr

080178a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80178a0:	b480      	push	{r7}
 80178a2:	b085      	sub	sp, #20
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80178aa:	2300      	movs	r3, #0
 80178ac:	60bb      	str	r3, [r7, #8]
 80178ae:	68bb      	ldr	r3, [r7, #8]
 80178b0:	60fb      	str	r3, [r7, #12]
 80178b2:	e029      	b.n	8017908 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80178b4:	4a27      	ldr	r2, [pc, #156]	@ (8017954 <chk_lock+0xb4>)
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	011b      	lsls	r3, r3, #4
 80178ba:	4413      	add	r3, r2
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d01d      	beq.n	80178fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80178c2:	4a24      	ldr	r2, [pc, #144]	@ (8017954 <chk_lock+0xb4>)
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	011b      	lsls	r3, r3, #4
 80178c8:	4413      	add	r3, r2
 80178ca:	681a      	ldr	r2, [r3, #0]
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	429a      	cmp	r2, r3
 80178d2:	d116      	bne.n	8017902 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80178d4:	4a1f      	ldr	r2, [pc, #124]	@ (8017954 <chk_lock+0xb4>)
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	011b      	lsls	r3, r3, #4
 80178da:	4413      	add	r3, r2
 80178dc:	3304      	adds	r3, #4
 80178de:	681a      	ldr	r2, [r3, #0]
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80178e4:	429a      	cmp	r2, r3
 80178e6:	d10c      	bne.n	8017902 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80178e8:	4a1a      	ldr	r2, [pc, #104]	@ (8017954 <chk_lock+0xb4>)
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	011b      	lsls	r3, r3, #4
 80178ee:	4413      	add	r3, r2
 80178f0:	3308      	adds	r3, #8
 80178f2:	681a      	ldr	r2, [r3, #0]
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80178f8:	429a      	cmp	r2, r3
 80178fa:	d102      	bne.n	8017902 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80178fc:	e007      	b.n	801790e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80178fe:	2301      	movs	r3, #1
 8017900:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	3301      	adds	r3, #1
 8017906:	60fb      	str	r3, [r7, #12]
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	2b01      	cmp	r3, #1
 801790c:	d9d2      	bls.n	80178b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	2b02      	cmp	r3, #2
 8017912:	d109      	bne.n	8017928 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017914:	68bb      	ldr	r3, [r7, #8]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d102      	bne.n	8017920 <chk_lock+0x80>
 801791a:	683b      	ldr	r3, [r7, #0]
 801791c:	2b02      	cmp	r3, #2
 801791e:	d101      	bne.n	8017924 <chk_lock+0x84>
 8017920:	2300      	movs	r3, #0
 8017922:	e010      	b.n	8017946 <chk_lock+0xa6>
 8017924:	2312      	movs	r3, #18
 8017926:	e00e      	b.n	8017946 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d108      	bne.n	8017940 <chk_lock+0xa0>
 801792e:	4a09      	ldr	r2, [pc, #36]	@ (8017954 <chk_lock+0xb4>)
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	011b      	lsls	r3, r3, #4
 8017934:	4413      	add	r3, r2
 8017936:	330c      	adds	r3, #12
 8017938:	881b      	ldrh	r3, [r3, #0]
 801793a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801793e:	d101      	bne.n	8017944 <chk_lock+0xa4>
 8017940:	2310      	movs	r3, #16
 8017942:	e000      	b.n	8017946 <chk_lock+0xa6>
 8017944:	2300      	movs	r3, #0
}
 8017946:	4618      	mov	r0, r3
 8017948:	3714      	adds	r7, #20
 801794a:	46bd      	mov	sp, r7
 801794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017950:	4770      	bx	lr
 8017952:	bf00      	nop
 8017954:	20001ab4 	.word	0x20001ab4

08017958 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017958:	b480      	push	{r7}
 801795a:	b083      	sub	sp, #12
 801795c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801795e:	2300      	movs	r3, #0
 8017960:	607b      	str	r3, [r7, #4]
 8017962:	e002      	b.n	801796a <enq_lock+0x12>
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	3301      	adds	r3, #1
 8017968:	607b      	str	r3, [r7, #4]
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	2b01      	cmp	r3, #1
 801796e:	d806      	bhi.n	801797e <enq_lock+0x26>
 8017970:	4a09      	ldr	r2, [pc, #36]	@ (8017998 <enq_lock+0x40>)
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	011b      	lsls	r3, r3, #4
 8017976:	4413      	add	r3, r2
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d1f2      	bne.n	8017964 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	2b02      	cmp	r3, #2
 8017982:	bf14      	ite	ne
 8017984:	2301      	movne	r3, #1
 8017986:	2300      	moveq	r3, #0
 8017988:	b2db      	uxtb	r3, r3
}
 801798a:	4618      	mov	r0, r3
 801798c:	370c      	adds	r7, #12
 801798e:	46bd      	mov	sp, r7
 8017990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017994:	4770      	bx	lr
 8017996:	bf00      	nop
 8017998:	20001ab4 	.word	0x20001ab4

0801799c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801799c:	b480      	push	{r7}
 801799e:	b085      	sub	sp, #20
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
 80179a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80179a6:	2300      	movs	r3, #0
 80179a8:	60fb      	str	r3, [r7, #12]
 80179aa:	e01f      	b.n	80179ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80179ac:	4a41      	ldr	r2, [pc, #260]	@ (8017ab4 <inc_lock+0x118>)
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	011b      	lsls	r3, r3, #4
 80179b2:	4413      	add	r3, r2
 80179b4:	681a      	ldr	r2, [r3, #0]
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d113      	bne.n	80179e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80179be:	4a3d      	ldr	r2, [pc, #244]	@ (8017ab4 <inc_lock+0x118>)
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	011b      	lsls	r3, r3, #4
 80179c4:	4413      	add	r3, r2
 80179c6:	3304      	adds	r3, #4
 80179c8:	681a      	ldr	r2, [r3, #0]
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d109      	bne.n	80179e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80179d2:	4a38      	ldr	r2, [pc, #224]	@ (8017ab4 <inc_lock+0x118>)
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	011b      	lsls	r3, r3, #4
 80179d8:	4413      	add	r3, r2
 80179da:	3308      	adds	r3, #8
 80179dc:	681a      	ldr	r2, [r3, #0]
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80179e2:	429a      	cmp	r2, r3
 80179e4:	d006      	beq.n	80179f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	3301      	adds	r3, #1
 80179ea:	60fb      	str	r3, [r7, #12]
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	2b01      	cmp	r3, #1
 80179f0:	d9dc      	bls.n	80179ac <inc_lock+0x10>
 80179f2:	e000      	b.n	80179f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80179f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	2b02      	cmp	r3, #2
 80179fa:	d132      	bne.n	8017a62 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80179fc:	2300      	movs	r3, #0
 80179fe:	60fb      	str	r3, [r7, #12]
 8017a00:	e002      	b.n	8017a08 <inc_lock+0x6c>
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	3301      	adds	r3, #1
 8017a06:	60fb      	str	r3, [r7, #12]
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	2b01      	cmp	r3, #1
 8017a0c:	d806      	bhi.n	8017a1c <inc_lock+0x80>
 8017a0e:	4a29      	ldr	r2, [pc, #164]	@ (8017ab4 <inc_lock+0x118>)
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	011b      	lsls	r3, r3, #4
 8017a14:	4413      	add	r3, r2
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d1f2      	bne.n	8017a02 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	2b02      	cmp	r3, #2
 8017a20:	d101      	bne.n	8017a26 <inc_lock+0x8a>
 8017a22:	2300      	movs	r3, #0
 8017a24:	e040      	b.n	8017aa8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681a      	ldr	r2, [r3, #0]
 8017a2a:	4922      	ldr	r1, [pc, #136]	@ (8017ab4 <inc_lock+0x118>)
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	011b      	lsls	r3, r3, #4
 8017a30:	440b      	add	r3, r1
 8017a32:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	689a      	ldr	r2, [r3, #8]
 8017a38:	491e      	ldr	r1, [pc, #120]	@ (8017ab4 <inc_lock+0x118>)
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	011b      	lsls	r3, r3, #4
 8017a3e:	440b      	add	r3, r1
 8017a40:	3304      	adds	r3, #4
 8017a42:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	695a      	ldr	r2, [r3, #20]
 8017a48:	491a      	ldr	r1, [pc, #104]	@ (8017ab4 <inc_lock+0x118>)
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	011b      	lsls	r3, r3, #4
 8017a4e:	440b      	add	r3, r1
 8017a50:	3308      	adds	r3, #8
 8017a52:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017a54:	4a17      	ldr	r2, [pc, #92]	@ (8017ab4 <inc_lock+0x118>)
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	011b      	lsls	r3, r3, #4
 8017a5a:	4413      	add	r3, r2
 8017a5c:	330c      	adds	r3, #12
 8017a5e:	2200      	movs	r2, #0
 8017a60:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017a62:	683b      	ldr	r3, [r7, #0]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d009      	beq.n	8017a7c <inc_lock+0xe0>
 8017a68:	4a12      	ldr	r2, [pc, #72]	@ (8017ab4 <inc_lock+0x118>)
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	011b      	lsls	r3, r3, #4
 8017a6e:	4413      	add	r3, r2
 8017a70:	330c      	adds	r3, #12
 8017a72:	881b      	ldrh	r3, [r3, #0]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d001      	beq.n	8017a7c <inc_lock+0xe0>
 8017a78:	2300      	movs	r3, #0
 8017a7a:	e015      	b.n	8017aa8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017a7c:	683b      	ldr	r3, [r7, #0]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d108      	bne.n	8017a94 <inc_lock+0xf8>
 8017a82:	4a0c      	ldr	r2, [pc, #48]	@ (8017ab4 <inc_lock+0x118>)
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	011b      	lsls	r3, r3, #4
 8017a88:	4413      	add	r3, r2
 8017a8a:	330c      	adds	r3, #12
 8017a8c:	881b      	ldrh	r3, [r3, #0]
 8017a8e:	3301      	adds	r3, #1
 8017a90:	b29a      	uxth	r2, r3
 8017a92:	e001      	b.n	8017a98 <inc_lock+0xfc>
 8017a94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017a98:	4906      	ldr	r1, [pc, #24]	@ (8017ab4 <inc_lock+0x118>)
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	011b      	lsls	r3, r3, #4
 8017a9e:	440b      	add	r3, r1
 8017aa0:	330c      	adds	r3, #12
 8017aa2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	3301      	adds	r3, #1
}
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	3714      	adds	r7, #20
 8017aac:	46bd      	mov	sp, r7
 8017aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab2:	4770      	bx	lr
 8017ab4:	20001ab4 	.word	0x20001ab4

08017ab8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017ab8:	b480      	push	{r7}
 8017aba:	b085      	sub	sp, #20
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	3b01      	subs	r3, #1
 8017ac4:	607b      	str	r3, [r7, #4]
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	2b01      	cmp	r3, #1
 8017aca:	d825      	bhi.n	8017b18 <dec_lock+0x60>
		n = Files[i].ctr;
 8017acc:	4a17      	ldr	r2, [pc, #92]	@ (8017b2c <dec_lock+0x74>)
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	011b      	lsls	r3, r3, #4
 8017ad2:	4413      	add	r3, r2
 8017ad4:	330c      	adds	r3, #12
 8017ad6:	881b      	ldrh	r3, [r3, #0]
 8017ad8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017ada:	89fb      	ldrh	r3, [r7, #14]
 8017adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017ae0:	d101      	bne.n	8017ae6 <dec_lock+0x2e>
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017ae6:	89fb      	ldrh	r3, [r7, #14]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d002      	beq.n	8017af2 <dec_lock+0x3a>
 8017aec:	89fb      	ldrh	r3, [r7, #14]
 8017aee:	3b01      	subs	r3, #1
 8017af0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017af2:	4a0e      	ldr	r2, [pc, #56]	@ (8017b2c <dec_lock+0x74>)
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	011b      	lsls	r3, r3, #4
 8017af8:	4413      	add	r3, r2
 8017afa:	330c      	adds	r3, #12
 8017afc:	89fa      	ldrh	r2, [r7, #14]
 8017afe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017b00:	89fb      	ldrh	r3, [r7, #14]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d105      	bne.n	8017b12 <dec_lock+0x5a>
 8017b06:	4a09      	ldr	r2, [pc, #36]	@ (8017b2c <dec_lock+0x74>)
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	011b      	lsls	r3, r3, #4
 8017b0c:	4413      	add	r3, r2
 8017b0e:	2200      	movs	r2, #0
 8017b10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017b12:	2300      	movs	r3, #0
 8017b14:	737b      	strb	r3, [r7, #13]
 8017b16:	e001      	b.n	8017b1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017b18:	2302      	movs	r3, #2
 8017b1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017b1c:	7b7b      	ldrb	r3, [r7, #13]
}
 8017b1e:	4618      	mov	r0, r3
 8017b20:	3714      	adds	r7, #20
 8017b22:	46bd      	mov	sp, r7
 8017b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b28:	4770      	bx	lr
 8017b2a:	bf00      	nop
 8017b2c:	20001ab4 	.word	0x20001ab4

08017b30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017b30:	b480      	push	{r7}
 8017b32:	b085      	sub	sp, #20
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017b38:	2300      	movs	r3, #0
 8017b3a:	60fb      	str	r3, [r7, #12]
 8017b3c:	e010      	b.n	8017b60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8017b74 <clear_lock+0x44>)
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	011b      	lsls	r3, r3, #4
 8017b44:	4413      	add	r3, r2
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	687a      	ldr	r2, [r7, #4]
 8017b4a:	429a      	cmp	r2, r3
 8017b4c:	d105      	bne.n	8017b5a <clear_lock+0x2a>
 8017b4e:	4a09      	ldr	r2, [pc, #36]	@ (8017b74 <clear_lock+0x44>)
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	011b      	lsls	r3, r3, #4
 8017b54:	4413      	add	r3, r2
 8017b56:	2200      	movs	r2, #0
 8017b58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	3301      	adds	r3, #1
 8017b5e:	60fb      	str	r3, [r7, #12]
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	2b01      	cmp	r3, #1
 8017b64:	d9eb      	bls.n	8017b3e <clear_lock+0xe>
	}
}
 8017b66:	bf00      	nop
 8017b68:	bf00      	nop
 8017b6a:	3714      	adds	r7, #20
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b72:	4770      	bx	lr
 8017b74:	20001ab4 	.word	0x20001ab4

08017b78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b086      	sub	sp, #24
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017b80:	2300      	movs	r3, #0
 8017b82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	78db      	ldrb	r3, [r3, #3]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d034      	beq.n	8017bf6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	7858      	ldrb	r0, [r3, #1]
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	697a      	ldr	r2, [r7, #20]
 8017ba0:	f7ff fd40 	bl	8017624 <disk_write>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d002      	beq.n	8017bb0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017baa:	2301      	movs	r3, #1
 8017bac:	73fb      	strb	r3, [r7, #15]
 8017bae:	e022      	b.n	8017bf6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bba:	697a      	ldr	r2, [r7, #20]
 8017bbc:	1ad2      	subs	r2, r2, r3
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	69db      	ldr	r3, [r3, #28]
 8017bc2:	429a      	cmp	r2, r3
 8017bc4:	d217      	bcs.n	8017bf6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	789b      	ldrb	r3, [r3, #2]
 8017bca:	613b      	str	r3, [r7, #16]
 8017bcc:	e010      	b.n	8017bf0 <sync_window+0x78>
					wsect += fs->fsize;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	69db      	ldr	r3, [r3, #28]
 8017bd2:	697a      	ldr	r2, [r7, #20]
 8017bd4:	4413      	add	r3, r2
 8017bd6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	7858      	ldrb	r0, [r3, #1]
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017be2:	2301      	movs	r3, #1
 8017be4:	697a      	ldr	r2, [r7, #20]
 8017be6:	f7ff fd1d 	bl	8017624 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017bea:	693b      	ldr	r3, [r7, #16]
 8017bec:	3b01      	subs	r3, #1
 8017bee:	613b      	str	r3, [r7, #16]
 8017bf0:	693b      	ldr	r3, [r7, #16]
 8017bf2:	2b01      	cmp	r3, #1
 8017bf4:	d8eb      	bhi.n	8017bce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	3718      	adds	r7, #24
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}

08017c00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b084      	sub	sp, #16
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
 8017c08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017c12:	683a      	ldr	r2, [r7, #0]
 8017c14:	429a      	cmp	r2, r3
 8017c16:	d01b      	beq.n	8017c50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017c18:	6878      	ldr	r0, [r7, #4]
 8017c1a:	f7ff ffad 	bl	8017b78 <sync_window>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017c22:	7bfb      	ldrb	r3, [r7, #15]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d113      	bne.n	8017c50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	7858      	ldrb	r0, [r3, #1]
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017c32:	2301      	movs	r3, #1
 8017c34:	683a      	ldr	r2, [r7, #0]
 8017c36:	f7ff fcd5 	bl	80175e4 <disk_read>
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d004      	beq.n	8017c4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017c40:	f04f 33ff 	mov.w	r3, #4294967295
 8017c44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017c46:	2301      	movs	r3, #1
 8017c48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	683a      	ldr	r2, [r7, #0]
 8017c4e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8017c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c52:	4618      	mov	r0, r3
 8017c54:	3710      	adds	r7, #16
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd80      	pop	{r7, pc}
	...

08017c5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b084      	sub	sp, #16
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017c64:	6878      	ldr	r0, [r7, #4]
 8017c66:	f7ff ff87 	bl	8017b78 <sync_window>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017c6e:	7bfb      	ldrb	r3, [r7, #15]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d158      	bne.n	8017d26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	781b      	ldrb	r3, [r3, #0]
 8017c78:	2b03      	cmp	r3, #3
 8017c7a:	d148      	bne.n	8017d0e <sync_fs+0xb2>
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	791b      	ldrb	r3, [r3, #4]
 8017c80:	2b01      	cmp	r3, #1
 8017c82:	d144      	bne.n	8017d0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	3334      	adds	r3, #52	@ 0x34
 8017c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c8c:	2100      	movs	r1, #0
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7ff fda9 	bl	80177e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	3334      	adds	r3, #52	@ 0x34
 8017c98:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8017c9c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	f7ff fd38 	bl	8017716 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	3334      	adds	r3, #52	@ 0x34
 8017caa:	4921      	ldr	r1, [pc, #132]	@ (8017d30 <sync_fs+0xd4>)
 8017cac:	4618      	mov	r0, r3
 8017cae:	f7ff fd4d 	bl	801774c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	3334      	adds	r3, #52	@ 0x34
 8017cb6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8017cba:	491e      	ldr	r1, [pc, #120]	@ (8017d34 <sync_fs+0xd8>)
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7ff fd45 	bl	801774c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	3334      	adds	r3, #52	@ 0x34
 8017cc6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	695b      	ldr	r3, [r3, #20]
 8017cce:	4619      	mov	r1, r3
 8017cd0:	4610      	mov	r0, r2
 8017cd2:	f7ff fd3b 	bl	801774c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	3334      	adds	r3, #52	@ 0x34
 8017cda:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	691b      	ldr	r3, [r3, #16]
 8017ce2:	4619      	mov	r1, r3
 8017ce4:	4610      	mov	r0, r2
 8017ce6:	f7ff fd31 	bl	801774c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	6a1b      	ldr	r3, [r3, #32]
 8017cee:	1c5a      	adds	r2, r3, #1
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	7858      	ldrb	r0, [r3, #1]
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017d02:	2301      	movs	r3, #1
 8017d04:	f7ff fc8e 	bl	8017624 <disk_write>
			fs->fsi_flag = 0;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	785b      	ldrb	r3, [r3, #1]
 8017d12:	2200      	movs	r2, #0
 8017d14:	2100      	movs	r1, #0
 8017d16:	4618      	mov	r0, r3
 8017d18:	f7ff fca4 	bl	8017664 <disk_ioctl>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d001      	beq.n	8017d26 <sync_fs+0xca>
 8017d22:	2301      	movs	r3, #1
 8017d24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d28:	4618      	mov	r0, r3
 8017d2a:	3710      	adds	r7, #16
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}
 8017d30:	41615252 	.word	0x41615252
 8017d34:	61417272 	.word	0x61417272

08017d38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017d38:	b480      	push	{r7}
 8017d3a:	b083      	sub	sp, #12
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
 8017d40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017d42:	683b      	ldr	r3, [r7, #0]
 8017d44:	3b02      	subs	r3, #2
 8017d46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	699b      	ldr	r3, [r3, #24]
 8017d4c:	3b02      	subs	r3, #2
 8017d4e:	683a      	ldr	r2, [r7, #0]
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d301      	bcc.n	8017d58 <clust2sect+0x20>
 8017d54:	2300      	movs	r3, #0
 8017d56:	e008      	b.n	8017d6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	895b      	ldrh	r3, [r3, #10]
 8017d5c:	461a      	mov	r2, r3
 8017d5e:	683b      	ldr	r3, [r7, #0]
 8017d60:	fb03 f202 	mul.w	r2, r3, r2
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d68:	4413      	add	r3, r2
}
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	370c      	adds	r7, #12
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d74:	4770      	bx	lr

08017d76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017d76:	b580      	push	{r7, lr}
 8017d78:	b086      	sub	sp, #24
 8017d7a:	af00      	add	r7, sp, #0
 8017d7c:	6078      	str	r0, [r7, #4]
 8017d7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017d86:	683b      	ldr	r3, [r7, #0]
 8017d88:	2b01      	cmp	r3, #1
 8017d8a:	d904      	bls.n	8017d96 <get_fat+0x20>
 8017d8c:	693b      	ldr	r3, [r7, #16]
 8017d8e:	699b      	ldr	r3, [r3, #24]
 8017d90:	683a      	ldr	r2, [r7, #0]
 8017d92:	429a      	cmp	r2, r3
 8017d94:	d302      	bcc.n	8017d9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8017d96:	2301      	movs	r3, #1
 8017d98:	617b      	str	r3, [r7, #20]
 8017d9a:	e08e      	b.n	8017eba <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8017da0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017da2:	693b      	ldr	r3, [r7, #16]
 8017da4:	781b      	ldrb	r3, [r3, #0]
 8017da6:	2b03      	cmp	r3, #3
 8017da8:	d061      	beq.n	8017e6e <get_fat+0xf8>
 8017daa:	2b03      	cmp	r3, #3
 8017dac:	dc7b      	bgt.n	8017ea6 <get_fat+0x130>
 8017dae:	2b01      	cmp	r3, #1
 8017db0:	d002      	beq.n	8017db8 <get_fat+0x42>
 8017db2:	2b02      	cmp	r3, #2
 8017db4:	d041      	beq.n	8017e3a <get_fat+0xc4>
 8017db6:	e076      	b.n	8017ea6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017db8:	683b      	ldr	r3, [r7, #0]
 8017dba:	60fb      	str	r3, [r7, #12]
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	085b      	lsrs	r3, r3, #1
 8017dc0:	68fa      	ldr	r2, [r7, #12]
 8017dc2:	4413      	add	r3, r2
 8017dc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017dc6:	693b      	ldr	r3, [r7, #16]
 8017dc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	0a5b      	lsrs	r3, r3, #9
 8017dce:	4413      	add	r3, r2
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	6938      	ldr	r0, [r7, #16]
 8017dd4:	f7ff ff14 	bl	8017c00 <move_window>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d166      	bne.n	8017eac <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	1c5a      	adds	r2, r3, #1
 8017de2:	60fa      	str	r2, [r7, #12]
 8017de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017de8:	693a      	ldr	r2, [r7, #16]
 8017dea:	4413      	add	r3, r2
 8017dec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017df0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017df2:	693b      	ldr	r3, [r7, #16]
 8017df4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	0a5b      	lsrs	r3, r3, #9
 8017dfa:	4413      	add	r3, r2
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	6938      	ldr	r0, [r7, #16]
 8017e00:	f7ff fefe 	bl	8017c00 <move_window>
 8017e04:	4603      	mov	r3, r0
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d152      	bne.n	8017eb0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017e10:	693a      	ldr	r2, [r7, #16]
 8017e12:	4413      	add	r3, r2
 8017e14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017e18:	021b      	lsls	r3, r3, #8
 8017e1a:	68ba      	ldr	r2, [r7, #8]
 8017e1c:	4313      	orrs	r3, r2
 8017e1e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017e20:	683b      	ldr	r3, [r7, #0]
 8017e22:	f003 0301 	and.w	r3, r3, #1
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d002      	beq.n	8017e30 <get_fat+0xba>
 8017e2a:	68bb      	ldr	r3, [r7, #8]
 8017e2c:	091b      	lsrs	r3, r3, #4
 8017e2e:	e002      	b.n	8017e36 <get_fat+0xc0>
 8017e30:	68bb      	ldr	r3, [r7, #8]
 8017e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017e36:	617b      	str	r3, [r7, #20]
			break;
 8017e38:	e03f      	b.n	8017eba <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017e3e:	683b      	ldr	r3, [r7, #0]
 8017e40:	0a1b      	lsrs	r3, r3, #8
 8017e42:	4413      	add	r3, r2
 8017e44:	4619      	mov	r1, r3
 8017e46:	6938      	ldr	r0, [r7, #16]
 8017e48:	f7ff feda 	bl	8017c00 <move_window>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d130      	bne.n	8017eb4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017e52:	693b      	ldr	r3, [r7, #16]
 8017e54:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8017e58:	683b      	ldr	r3, [r7, #0]
 8017e5a:	005b      	lsls	r3, r3, #1
 8017e5c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8017e60:	4413      	add	r3, r2
 8017e62:	4618      	mov	r0, r3
 8017e64:	f7ff fc1c 	bl	80176a0 <ld_word>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	617b      	str	r3, [r7, #20]
			break;
 8017e6c:	e025      	b.n	8017eba <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017e6e:	693b      	ldr	r3, [r7, #16]
 8017e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017e72:	683b      	ldr	r3, [r7, #0]
 8017e74:	09db      	lsrs	r3, r3, #7
 8017e76:	4413      	add	r3, r2
 8017e78:	4619      	mov	r1, r3
 8017e7a:	6938      	ldr	r0, [r7, #16]
 8017e7c:	f7ff fec0 	bl	8017c00 <move_window>
 8017e80:	4603      	mov	r3, r0
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d118      	bne.n	8017eb8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017e86:	693b      	ldr	r3, [r7, #16]
 8017e88:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	009b      	lsls	r3, r3, #2
 8017e90:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8017e94:	4413      	add	r3, r2
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7ff fc1a 	bl	80176d0 <ld_dword>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8017ea2:	617b      	str	r3, [r7, #20]
			break;
 8017ea4:	e009      	b.n	8017eba <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017ea6:	2301      	movs	r3, #1
 8017ea8:	617b      	str	r3, [r7, #20]
 8017eaa:	e006      	b.n	8017eba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017eac:	bf00      	nop
 8017eae:	e004      	b.n	8017eba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017eb0:	bf00      	nop
 8017eb2:	e002      	b.n	8017eba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017eb4:	bf00      	nop
 8017eb6:	e000      	b.n	8017eba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017eb8:	bf00      	nop
		}
	}

	return val;
 8017eba:	697b      	ldr	r3, [r7, #20]
}
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	3718      	adds	r7, #24
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	bd80      	pop	{r7, pc}

08017ec4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017ec4:	b590      	push	{r4, r7, lr}
 8017ec6:	b089      	sub	sp, #36	@ 0x24
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	60f8      	str	r0, [r7, #12]
 8017ecc:	60b9      	str	r1, [r7, #8]
 8017ece:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017ed0:	2302      	movs	r3, #2
 8017ed2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017ed4:	68bb      	ldr	r3, [r7, #8]
 8017ed6:	2b01      	cmp	r3, #1
 8017ed8:	f240 80d9 	bls.w	801808e <put_fat+0x1ca>
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	699b      	ldr	r3, [r3, #24]
 8017ee0:	68ba      	ldr	r2, [r7, #8]
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	f080 80d3 	bcs.w	801808e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	781b      	ldrb	r3, [r3, #0]
 8017eec:	2b03      	cmp	r3, #3
 8017eee:	f000 8096 	beq.w	801801e <put_fat+0x15a>
 8017ef2:	2b03      	cmp	r3, #3
 8017ef4:	f300 80cb 	bgt.w	801808e <put_fat+0x1ca>
 8017ef8:	2b01      	cmp	r3, #1
 8017efa:	d002      	beq.n	8017f02 <put_fat+0x3e>
 8017efc:	2b02      	cmp	r3, #2
 8017efe:	d06e      	beq.n	8017fde <put_fat+0x11a>
 8017f00:	e0c5      	b.n	801808e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017f02:	68bb      	ldr	r3, [r7, #8]
 8017f04:	61bb      	str	r3, [r7, #24]
 8017f06:	69bb      	ldr	r3, [r7, #24]
 8017f08:	085b      	lsrs	r3, r3, #1
 8017f0a:	69ba      	ldr	r2, [r7, #24]
 8017f0c:	4413      	add	r3, r2
 8017f0e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017f14:	69bb      	ldr	r3, [r7, #24]
 8017f16:	0a5b      	lsrs	r3, r3, #9
 8017f18:	4413      	add	r3, r2
 8017f1a:	4619      	mov	r1, r3
 8017f1c:	68f8      	ldr	r0, [r7, #12]
 8017f1e:	f7ff fe6f 	bl	8017c00 <move_window>
 8017f22:	4603      	mov	r3, r0
 8017f24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017f26:	7ffb      	ldrb	r3, [r7, #31]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	f040 80a9 	bne.w	8018080 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8017f34:	69bb      	ldr	r3, [r7, #24]
 8017f36:	1c59      	adds	r1, r3, #1
 8017f38:	61b9      	str	r1, [r7, #24]
 8017f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f3e:	4413      	add	r3, r2
 8017f40:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017f42:	68bb      	ldr	r3, [r7, #8]
 8017f44:	f003 0301 	and.w	r3, r3, #1
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d00d      	beq.n	8017f68 <put_fat+0xa4>
 8017f4c:	697b      	ldr	r3, [r7, #20]
 8017f4e:	781b      	ldrb	r3, [r3, #0]
 8017f50:	b25b      	sxtb	r3, r3
 8017f52:	f003 030f 	and.w	r3, r3, #15
 8017f56:	b25a      	sxtb	r2, r3
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	b2db      	uxtb	r3, r3
 8017f5c:	011b      	lsls	r3, r3, #4
 8017f5e:	b25b      	sxtb	r3, r3
 8017f60:	4313      	orrs	r3, r2
 8017f62:	b25b      	sxtb	r3, r3
 8017f64:	b2db      	uxtb	r3, r3
 8017f66:	e001      	b.n	8017f6c <put_fat+0xa8>
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	b2db      	uxtb	r3, r3
 8017f6c:	697a      	ldr	r2, [r7, #20]
 8017f6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	2201      	movs	r2, #1
 8017f74:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017f7a:	69bb      	ldr	r3, [r7, #24]
 8017f7c:	0a5b      	lsrs	r3, r3, #9
 8017f7e:	4413      	add	r3, r2
 8017f80:	4619      	mov	r1, r3
 8017f82:	68f8      	ldr	r0, [r7, #12]
 8017f84:	f7ff fe3c 	bl	8017c00 <move_window>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017f8c:	7ffb      	ldrb	r3, [r7, #31]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d178      	bne.n	8018084 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8017f98:	69bb      	ldr	r3, [r7, #24]
 8017f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f9e:	4413      	add	r3, r2
 8017fa0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017fa2:	68bb      	ldr	r3, [r7, #8]
 8017fa4:	f003 0301 	and.w	r3, r3, #1
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d003      	beq.n	8017fb4 <put_fat+0xf0>
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	091b      	lsrs	r3, r3, #4
 8017fb0:	b2db      	uxtb	r3, r3
 8017fb2:	e00e      	b.n	8017fd2 <put_fat+0x10e>
 8017fb4:	697b      	ldr	r3, [r7, #20]
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	b25b      	sxtb	r3, r3
 8017fba:	f023 030f 	bic.w	r3, r3, #15
 8017fbe:	b25a      	sxtb	r2, r3
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	0a1b      	lsrs	r3, r3, #8
 8017fc4:	b25b      	sxtb	r3, r3
 8017fc6:	f003 030f 	and.w	r3, r3, #15
 8017fca:	b25b      	sxtb	r3, r3
 8017fcc:	4313      	orrs	r3, r2
 8017fce:	b25b      	sxtb	r3, r3
 8017fd0:	b2db      	uxtb	r3, r3
 8017fd2:	697a      	ldr	r2, [r7, #20]
 8017fd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	2201      	movs	r2, #1
 8017fda:	70da      	strb	r2, [r3, #3]
			break;
 8017fdc:	e057      	b.n	801808e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017fe2:	68bb      	ldr	r3, [r7, #8]
 8017fe4:	0a1b      	lsrs	r3, r3, #8
 8017fe6:	4413      	add	r3, r2
 8017fe8:	4619      	mov	r1, r3
 8017fea:	68f8      	ldr	r0, [r7, #12]
 8017fec:	f7ff fe08 	bl	8017c00 <move_window>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017ff4:	7ffb      	ldrb	r3, [r7, #31]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d146      	bne.n	8018088 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018000:	68bb      	ldr	r3, [r7, #8]
 8018002:	005b      	lsls	r3, r3, #1
 8018004:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8018008:	4413      	add	r3, r2
 801800a:	687a      	ldr	r2, [r7, #4]
 801800c:	b292      	uxth	r2, r2
 801800e:	4611      	mov	r1, r2
 8018010:	4618      	mov	r0, r3
 8018012:	f7ff fb80 	bl	8017716 <st_word>
			fs->wflag = 1;
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	2201      	movs	r2, #1
 801801a:	70da      	strb	r2, [r3, #3]
			break;
 801801c:	e037      	b.n	801808e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018022:	68bb      	ldr	r3, [r7, #8]
 8018024:	09db      	lsrs	r3, r3, #7
 8018026:	4413      	add	r3, r2
 8018028:	4619      	mov	r1, r3
 801802a:	68f8      	ldr	r0, [r7, #12]
 801802c:	f7ff fde8 	bl	8017c00 <move_window>
 8018030:	4603      	mov	r3, r0
 8018032:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018034:	7ffb      	ldrb	r3, [r7, #31]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d128      	bne.n	801808c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018046:	68bb      	ldr	r3, [r7, #8]
 8018048:	009b      	lsls	r3, r3, #2
 801804a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801804e:	4413      	add	r3, r2
 8018050:	4618      	mov	r0, r3
 8018052:	f7ff fb3d 	bl	80176d0 <ld_dword>
 8018056:	4603      	mov	r3, r0
 8018058:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801805c:	4323      	orrs	r3, r4
 801805e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018066:	68bb      	ldr	r3, [r7, #8]
 8018068:	009b      	lsls	r3, r3, #2
 801806a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801806e:	4413      	add	r3, r2
 8018070:	6879      	ldr	r1, [r7, #4]
 8018072:	4618      	mov	r0, r3
 8018074:	f7ff fb6a 	bl	801774c <st_dword>
			fs->wflag = 1;
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	2201      	movs	r2, #1
 801807c:	70da      	strb	r2, [r3, #3]
			break;
 801807e:	e006      	b.n	801808e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018080:	bf00      	nop
 8018082:	e004      	b.n	801808e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018084:	bf00      	nop
 8018086:	e002      	b.n	801808e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018088:	bf00      	nop
 801808a:	e000      	b.n	801808e <put_fat+0x1ca>
			if (res != FR_OK) break;
 801808c:	bf00      	nop
		}
	}
	return res;
 801808e:	7ffb      	ldrb	r3, [r7, #31]
}
 8018090:	4618      	mov	r0, r3
 8018092:	3724      	adds	r7, #36	@ 0x24
 8018094:	46bd      	mov	sp, r7
 8018096:	bd90      	pop	{r4, r7, pc}

08018098 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b088      	sub	sp, #32
 801809c:	af00      	add	r7, sp, #0
 801809e:	60f8      	str	r0, [r7, #12]
 80180a0:	60b9      	str	r1, [r7, #8]
 80180a2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80180a4:	2300      	movs	r3, #0
 80180a6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80180ae:	68bb      	ldr	r3, [r7, #8]
 80180b0:	2b01      	cmp	r3, #1
 80180b2:	d904      	bls.n	80180be <remove_chain+0x26>
 80180b4:	69bb      	ldr	r3, [r7, #24]
 80180b6:	699b      	ldr	r3, [r3, #24]
 80180b8:	68ba      	ldr	r2, [r7, #8]
 80180ba:	429a      	cmp	r2, r3
 80180bc:	d301      	bcc.n	80180c2 <remove_chain+0x2a>
 80180be:	2302      	movs	r3, #2
 80180c0:	e04b      	b.n	801815a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d00c      	beq.n	80180e2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80180c8:	f04f 32ff 	mov.w	r2, #4294967295
 80180cc:	6879      	ldr	r1, [r7, #4]
 80180ce:	69b8      	ldr	r0, [r7, #24]
 80180d0:	f7ff fef8 	bl	8017ec4 <put_fat>
 80180d4:	4603      	mov	r3, r0
 80180d6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80180d8:	7ffb      	ldrb	r3, [r7, #31]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d001      	beq.n	80180e2 <remove_chain+0x4a>
 80180de:	7ffb      	ldrb	r3, [r7, #31]
 80180e0:	e03b      	b.n	801815a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80180e2:	68b9      	ldr	r1, [r7, #8]
 80180e4:	68f8      	ldr	r0, [r7, #12]
 80180e6:	f7ff fe46 	bl	8017d76 <get_fat>
 80180ea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80180ec:	697b      	ldr	r3, [r7, #20]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d031      	beq.n	8018156 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80180f2:	697b      	ldr	r3, [r7, #20]
 80180f4:	2b01      	cmp	r3, #1
 80180f6:	d101      	bne.n	80180fc <remove_chain+0x64>
 80180f8:	2302      	movs	r3, #2
 80180fa:	e02e      	b.n	801815a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018102:	d101      	bne.n	8018108 <remove_chain+0x70>
 8018104:	2301      	movs	r3, #1
 8018106:	e028      	b.n	801815a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8018108:	2200      	movs	r2, #0
 801810a:	68b9      	ldr	r1, [r7, #8]
 801810c:	69b8      	ldr	r0, [r7, #24]
 801810e:	f7ff fed9 	bl	8017ec4 <put_fat>
 8018112:	4603      	mov	r3, r0
 8018114:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8018116:	7ffb      	ldrb	r3, [r7, #31]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d001      	beq.n	8018120 <remove_chain+0x88>
 801811c:	7ffb      	ldrb	r3, [r7, #31]
 801811e:	e01c      	b.n	801815a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8018120:	69bb      	ldr	r3, [r7, #24]
 8018122:	695a      	ldr	r2, [r3, #20]
 8018124:	69bb      	ldr	r3, [r7, #24]
 8018126:	699b      	ldr	r3, [r3, #24]
 8018128:	3b02      	subs	r3, #2
 801812a:	429a      	cmp	r2, r3
 801812c:	d20b      	bcs.n	8018146 <remove_chain+0xae>
			fs->free_clst++;
 801812e:	69bb      	ldr	r3, [r7, #24]
 8018130:	695b      	ldr	r3, [r3, #20]
 8018132:	1c5a      	adds	r2, r3, #1
 8018134:	69bb      	ldr	r3, [r7, #24]
 8018136:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8018138:	69bb      	ldr	r3, [r7, #24]
 801813a:	791b      	ldrb	r3, [r3, #4]
 801813c:	f043 0301 	orr.w	r3, r3, #1
 8018140:	b2da      	uxtb	r2, r3
 8018142:	69bb      	ldr	r3, [r7, #24]
 8018144:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8018146:	697b      	ldr	r3, [r7, #20]
 8018148:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801814a:	69bb      	ldr	r3, [r7, #24]
 801814c:	699b      	ldr	r3, [r3, #24]
 801814e:	68ba      	ldr	r2, [r7, #8]
 8018150:	429a      	cmp	r2, r3
 8018152:	d3c6      	bcc.n	80180e2 <remove_chain+0x4a>
 8018154:	e000      	b.n	8018158 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8018156:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8018158:	2300      	movs	r3, #0
}
 801815a:	4618      	mov	r0, r3
 801815c:	3720      	adds	r7, #32
 801815e:	46bd      	mov	sp, r7
 8018160:	bd80      	pop	{r7, pc}

08018162 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8018162:	b580      	push	{r7, lr}
 8018164:	b088      	sub	sp, #32
 8018166:	af00      	add	r7, sp, #0
 8018168:	6078      	str	r0, [r7, #4]
 801816a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8018172:	683b      	ldr	r3, [r7, #0]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d10d      	bne.n	8018194 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018178:	693b      	ldr	r3, [r7, #16]
 801817a:	691b      	ldr	r3, [r3, #16]
 801817c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801817e:	69bb      	ldr	r3, [r7, #24]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d004      	beq.n	801818e <create_chain+0x2c>
 8018184:	693b      	ldr	r3, [r7, #16]
 8018186:	699b      	ldr	r3, [r3, #24]
 8018188:	69ba      	ldr	r2, [r7, #24]
 801818a:	429a      	cmp	r2, r3
 801818c:	d31b      	bcc.n	80181c6 <create_chain+0x64>
 801818e:	2301      	movs	r3, #1
 8018190:	61bb      	str	r3, [r7, #24]
 8018192:	e018      	b.n	80181c6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8018194:	6839      	ldr	r1, [r7, #0]
 8018196:	6878      	ldr	r0, [r7, #4]
 8018198:	f7ff fded 	bl	8017d76 <get_fat>
 801819c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d801      	bhi.n	80181a8 <create_chain+0x46>
 80181a4:	2301      	movs	r3, #1
 80181a6:	e070      	b.n	801828a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181ae:	d101      	bne.n	80181b4 <create_chain+0x52>
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	e06a      	b.n	801828a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80181b4:	693b      	ldr	r3, [r7, #16]
 80181b6:	699b      	ldr	r3, [r3, #24]
 80181b8:	68fa      	ldr	r2, [r7, #12]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d201      	bcs.n	80181c2 <create_chain+0x60>
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	e063      	b.n	801828a <create_chain+0x128>
		scl = clst;
 80181c2:	683b      	ldr	r3, [r7, #0]
 80181c4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80181c6:	69bb      	ldr	r3, [r7, #24]
 80181c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80181ca:	69fb      	ldr	r3, [r7, #28]
 80181cc:	3301      	adds	r3, #1
 80181ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80181d0:	693b      	ldr	r3, [r7, #16]
 80181d2:	699b      	ldr	r3, [r3, #24]
 80181d4:	69fa      	ldr	r2, [r7, #28]
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d307      	bcc.n	80181ea <create_chain+0x88>
				ncl = 2;
 80181da:	2302      	movs	r3, #2
 80181dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80181de:	69fa      	ldr	r2, [r7, #28]
 80181e0:	69bb      	ldr	r3, [r7, #24]
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d901      	bls.n	80181ea <create_chain+0x88>
 80181e6:	2300      	movs	r3, #0
 80181e8:	e04f      	b.n	801828a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80181ea:	69f9      	ldr	r1, [r7, #28]
 80181ec:	6878      	ldr	r0, [r7, #4]
 80181ee:	f7ff fdc2 	bl	8017d76 <get_fat>
 80181f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d00e      	beq.n	8018218 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	2b01      	cmp	r3, #1
 80181fe:	d003      	beq.n	8018208 <create_chain+0xa6>
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018206:	d101      	bne.n	801820c <create_chain+0xaa>
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	e03e      	b.n	801828a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801820c:	69fa      	ldr	r2, [r7, #28]
 801820e:	69bb      	ldr	r3, [r7, #24]
 8018210:	429a      	cmp	r2, r3
 8018212:	d1da      	bne.n	80181ca <create_chain+0x68>
 8018214:	2300      	movs	r3, #0
 8018216:	e038      	b.n	801828a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018218:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801821a:	f04f 32ff 	mov.w	r2, #4294967295
 801821e:	69f9      	ldr	r1, [r7, #28]
 8018220:	6938      	ldr	r0, [r7, #16]
 8018222:	f7ff fe4f 	bl	8017ec4 <put_fat>
 8018226:	4603      	mov	r3, r0
 8018228:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801822a:	7dfb      	ldrb	r3, [r7, #23]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d109      	bne.n	8018244 <create_chain+0xe2>
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d006      	beq.n	8018244 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018236:	69fa      	ldr	r2, [r7, #28]
 8018238:	6839      	ldr	r1, [r7, #0]
 801823a:	6938      	ldr	r0, [r7, #16]
 801823c:	f7ff fe42 	bl	8017ec4 <put_fat>
 8018240:	4603      	mov	r3, r0
 8018242:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8018244:	7dfb      	ldrb	r3, [r7, #23]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d116      	bne.n	8018278 <create_chain+0x116>
		fs->last_clst = ncl;
 801824a:	693b      	ldr	r3, [r7, #16]
 801824c:	69fa      	ldr	r2, [r7, #28]
 801824e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8018250:	693b      	ldr	r3, [r7, #16]
 8018252:	695a      	ldr	r2, [r3, #20]
 8018254:	693b      	ldr	r3, [r7, #16]
 8018256:	699b      	ldr	r3, [r3, #24]
 8018258:	3b02      	subs	r3, #2
 801825a:	429a      	cmp	r2, r3
 801825c:	d804      	bhi.n	8018268 <create_chain+0x106>
 801825e:	693b      	ldr	r3, [r7, #16]
 8018260:	695b      	ldr	r3, [r3, #20]
 8018262:	1e5a      	subs	r2, r3, #1
 8018264:	693b      	ldr	r3, [r7, #16]
 8018266:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8018268:	693b      	ldr	r3, [r7, #16]
 801826a:	791b      	ldrb	r3, [r3, #4]
 801826c:	f043 0301 	orr.w	r3, r3, #1
 8018270:	b2da      	uxtb	r2, r3
 8018272:	693b      	ldr	r3, [r7, #16]
 8018274:	711a      	strb	r2, [r3, #4]
 8018276:	e007      	b.n	8018288 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018278:	7dfb      	ldrb	r3, [r7, #23]
 801827a:	2b01      	cmp	r3, #1
 801827c:	d102      	bne.n	8018284 <create_chain+0x122>
 801827e:	f04f 33ff 	mov.w	r3, #4294967295
 8018282:	e000      	b.n	8018286 <create_chain+0x124>
 8018284:	2301      	movs	r3, #1
 8018286:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8018288:	69fb      	ldr	r3, [r7, #28]
}
 801828a:	4618      	mov	r0, r3
 801828c:	3720      	adds	r7, #32
 801828e:	46bd      	mov	sp, r7
 8018290:	bd80      	pop	{r7, pc}

08018292 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8018292:	b480      	push	{r7}
 8018294:	b087      	sub	sp, #28
 8018296:	af00      	add	r7, sp, #0
 8018298:	6078      	str	r0, [r7, #4]
 801829a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182a6:	3304      	adds	r3, #4
 80182a8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80182aa:	683b      	ldr	r3, [r7, #0]
 80182ac:	0a5b      	lsrs	r3, r3, #9
 80182ae:	68fa      	ldr	r2, [r7, #12]
 80182b0:	8952      	ldrh	r2, [r2, #10]
 80182b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80182b6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80182b8:	693b      	ldr	r3, [r7, #16]
 80182ba:	1d1a      	adds	r2, r3, #4
 80182bc:	613a      	str	r2, [r7, #16]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80182c2:	68bb      	ldr	r3, [r7, #8]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d101      	bne.n	80182cc <clmt_clust+0x3a>
 80182c8:	2300      	movs	r3, #0
 80182ca:	e010      	b.n	80182ee <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80182cc:	697a      	ldr	r2, [r7, #20]
 80182ce:	68bb      	ldr	r3, [r7, #8]
 80182d0:	429a      	cmp	r2, r3
 80182d2:	d307      	bcc.n	80182e4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80182d4:	697a      	ldr	r2, [r7, #20]
 80182d6:	68bb      	ldr	r3, [r7, #8]
 80182d8:	1ad3      	subs	r3, r2, r3
 80182da:	617b      	str	r3, [r7, #20]
 80182dc:	693b      	ldr	r3, [r7, #16]
 80182de:	3304      	adds	r3, #4
 80182e0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80182e2:	e7e9      	b.n	80182b8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80182e4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80182e6:	693b      	ldr	r3, [r7, #16]
 80182e8:	681a      	ldr	r2, [r3, #0]
 80182ea:	697b      	ldr	r3, [r7, #20]
 80182ec:	4413      	add	r3, r2
}
 80182ee:	4618      	mov	r0, r3
 80182f0:	371c      	adds	r7, #28
 80182f2:	46bd      	mov	sp, r7
 80182f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f8:	4770      	bx	lr

080182fa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80182fa:	b580      	push	{r7, lr}
 80182fc:	b086      	sub	sp, #24
 80182fe:	af00      	add	r7, sp, #0
 8018300:	6078      	str	r0, [r7, #4]
 8018302:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801830a:	683b      	ldr	r3, [r7, #0]
 801830c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018310:	d204      	bcs.n	801831c <dir_sdi+0x22>
 8018312:	683b      	ldr	r3, [r7, #0]
 8018314:	f003 031f 	and.w	r3, r3, #31
 8018318:	2b00      	cmp	r3, #0
 801831a:	d001      	beq.n	8018320 <dir_sdi+0x26>
		return FR_INT_ERR;
 801831c:	2302      	movs	r3, #2
 801831e:	e063      	b.n	80183e8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	683a      	ldr	r2, [r7, #0]
 8018324:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	689b      	ldr	r3, [r3, #8]
 801832a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801832c:	697b      	ldr	r3, [r7, #20]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d106      	bne.n	8018340 <dir_sdi+0x46>
 8018332:	693b      	ldr	r3, [r7, #16]
 8018334:	781b      	ldrb	r3, [r3, #0]
 8018336:	2b02      	cmp	r3, #2
 8018338:	d902      	bls.n	8018340 <dir_sdi+0x46>
		clst = fs->dirbase;
 801833a:	693b      	ldr	r3, [r7, #16]
 801833c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801833e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018340:	697b      	ldr	r3, [r7, #20]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d10c      	bne.n	8018360 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8018346:	683b      	ldr	r3, [r7, #0]
 8018348:	095b      	lsrs	r3, r3, #5
 801834a:	693a      	ldr	r2, [r7, #16]
 801834c:	8912      	ldrh	r2, [r2, #8]
 801834e:	4293      	cmp	r3, r2
 8018350:	d301      	bcc.n	8018356 <dir_sdi+0x5c>
 8018352:	2302      	movs	r3, #2
 8018354:	e048      	b.n	80183e8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8018356:	693b      	ldr	r3, [r7, #16]
 8018358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	61da      	str	r2, [r3, #28]
 801835e:	e029      	b.n	80183b4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018360:	693b      	ldr	r3, [r7, #16]
 8018362:	895b      	ldrh	r3, [r3, #10]
 8018364:	025b      	lsls	r3, r3, #9
 8018366:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018368:	e019      	b.n	801839e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	6979      	ldr	r1, [r7, #20]
 801836e:	4618      	mov	r0, r3
 8018370:	f7ff fd01 	bl	8017d76 <get_fat>
 8018374:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018376:	697b      	ldr	r3, [r7, #20]
 8018378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801837c:	d101      	bne.n	8018382 <dir_sdi+0x88>
 801837e:	2301      	movs	r3, #1
 8018380:	e032      	b.n	80183e8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8018382:	697b      	ldr	r3, [r7, #20]
 8018384:	2b01      	cmp	r3, #1
 8018386:	d904      	bls.n	8018392 <dir_sdi+0x98>
 8018388:	693b      	ldr	r3, [r7, #16]
 801838a:	699b      	ldr	r3, [r3, #24]
 801838c:	697a      	ldr	r2, [r7, #20]
 801838e:	429a      	cmp	r2, r3
 8018390:	d301      	bcc.n	8018396 <dir_sdi+0x9c>
 8018392:	2302      	movs	r3, #2
 8018394:	e028      	b.n	80183e8 <dir_sdi+0xee>
			ofs -= csz;
 8018396:	683a      	ldr	r2, [r7, #0]
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	1ad3      	subs	r3, r2, r3
 801839c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801839e:	683a      	ldr	r2, [r7, #0]
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	429a      	cmp	r2, r3
 80183a4:	d2e1      	bcs.n	801836a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80183a6:	6979      	ldr	r1, [r7, #20]
 80183a8:	6938      	ldr	r0, [r7, #16]
 80183aa:	f7ff fcc5 	bl	8017d38 <clust2sect>
 80183ae:	4602      	mov	r2, r0
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	697a      	ldr	r2, [r7, #20]
 80183b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	69db      	ldr	r3, [r3, #28]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d101      	bne.n	80183c6 <dir_sdi+0xcc>
 80183c2:	2302      	movs	r3, #2
 80183c4:	e010      	b.n	80183e8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	69da      	ldr	r2, [r3, #28]
 80183ca:	683b      	ldr	r3, [r7, #0]
 80183cc:	0a5b      	lsrs	r3, r3, #9
 80183ce:	441a      	add	r2, r3
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80183d4:	693b      	ldr	r3, [r7, #16]
 80183d6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80183e0:	441a      	add	r2, r3
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80183e6:	2300      	movs	r3, #0
}
 80183e8:	4618      	mov	r0, r3
 80183ea:	3718      	adds	r7, #24
 80183ec:	46bd      	mov	sp, r7
 80183ee:	bd80      	pop	{r7, pc}

080183f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b086      	sub	sp, #24
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
 80183f8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	695b      	ldr	r3, [r3, #20]
 8018404:	3320      	adds	r3, #32
 8018406:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	69db      	ldr	r3, [r3, #28]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d003      	beq.n	8018418 <dir_next+0x28>
 8018410:	68bb      	ldr	r3, [r7, #8]
 8018412:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018416:	d301      	bcc.n	801841c <dir_next+0x2c>
 8018418:	2304      	movs	r3, #4
 801841a:	e0aa      	b.n	8018572 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018422:	2b00      	cmp	r3, #0
 8018424:	f040 8098 	bne.w	8018558 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	69db      	ldr	r3, [r3, #28]
 801842c:	1c5a      	adds	r2, r3, #1
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	699b      	ldr	r3, [r3, #24]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d10b      	bne.n	8018452 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801843a:	68bb      	ldr	r3, [r7, #8]
 801843c:	095b      	lsrs	r3, r3, #5
 801843e:	68fa      	ldr	r2, [r7, #12]
 8018440:	8912      	ldrh	r2, [r2, #8]
 8018442:	4293      	cmp	r3, r2
 8018444:	f0c0 8088 	bcc.w	8018558 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2200      	movs	r2, #0
 801844c:	61da      	str	r2, [r3, #28]
 801844e:	2304      	movs	r3, #4
 8018450:	e08f      	b.n	8018572 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8018452:	68bb      	ldr	r3, [r7, #8]
 8018454:	0a5b      	lsrs	r3, r3, #9
 8018456:	68fa      	ldr	r2, [r7, #12]
 8018458:	8952      	ldrh	r2, [r2, #10]
 801845a:	3a01      	subs	r2, #1
 801845c:	4013      	ands	r3, r2
 801845e:	2b00      	cmp	r3, #0
 8018460:	d17a      	bne.n	8018558 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018462:	687a      	ldr	r2, [r7, #4]
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	699b      	ldr	r3, [r3, #24]
 8018468:	4619      	mov	r1, r3
 801846a:	4610      	mov	r0, r2
 801846c:	f7ff fc83 	bl	8017d76 <get_fat>
 8018470:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018472:	697b      	ldr	r3, [r7, #20]
 8018474:	2b01      	cmp	r3, #1
 8018476:	d801      	bhi.n	801847c <dir_next+0x8c>
 8018478:	2302      	movs	r3, #2
 801847a:	e07a      	b.n	8018572 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801847c:	697b      	ldr	r3, [r7, #20]
 801847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018482:	d101      	bne.n	8018488 <dir_next+0x98>
 8018484:	2301      	movs	r3, #1
 8018486:	e074      	b.n	8018572 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	699b      	ldr	r3, [r3, #24]
 801848c:	697a      	ldr	r2, [r7, #20]
 801848e:	429a      	cmp	r2, r3
 8018490:	d358      	bcc.n	8018544 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8018492:	683b      	ldr	r3, [r7, #0]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d104      	bne.n	80184a2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2200      	movs	r2, #0
 801849c:	61da      	str	r2, [r3, #28]
 801849e:	2304      	movs	r3, #4
 80184a0:	e067      	b.n	8018572 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80184a2:	687a      	ldr	r2, [r7, #4]
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	699b      	ldr	r3, [r3, #24]
 80184a8:	4619      	mov	r1, r3
 80184aa:	4610      	mov	r0, r2
 80184ac:	f7ff fe59 	bl	8018162 <create_chain>
 80184b0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80184b2:	697b      	ldr	r3, [r7, #20]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d101      	bne.n	80184bc <dir_next+0xcc>
 80184b8:	2307      	movs	r3, #7
 80184ba:	e05a      	b.n	8018572 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80184bc:	697b      	ldr	r3, [r7, #20]
 80184be:	2b01      	cmp	r3, #1
 80184c0:	d101      	bne.n	80184c6 <dir_next+0xd6>
 80184c2:	2302      	movs	r3, #2
 80184c4:	e055      	b.n	8018572 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80184c6:	697b      	ldr	r3, [r7, #20]
 80184c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184cc:	d101      	bne.n	80184d2 <dir_next+0xe2>
 80184ce:	2301      	movs	r3, #1
 80184d0:	e04f      	b.n	8018572 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80184d2:	68f8      	ldr	r0, [r7, #12]
 80184d4:	f7ff fb50 	bl	8017b78 <sync_window>
 80184d8:	4603      	mov	r3, r0
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d001      	beq.n	80184e2 <dir_next+0xf2>
 80184de:	2301      	movs	r3, #1
 80184e0:	e047      	b.n	8018572 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	3334      	adds	r3, #52	@ 0x34
 80184e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80184ea:	2100      	movs	r1, #0
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7ff f97a 	bl	80177e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80184f2:	2300      	movs	r3, #0
 80184f4:	613b      	str	r3, [r7, #16]
 80184f6:	6979      	ldr	r1, [r7, #20]
 80184f8:	68f8      	ldr	r0, [r7, #12]
 80184fa:	f7ff fc1d 	bl	8017d38 <clust2sect>
 80184fe:	4602      	mov	r2, r0
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	631a      	str	r2, [r3, #48]	@ 0x30
 8018504:	e012      	b.n	801852c <dir_next+0x13c>
						fs->wflag = 1;
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	2201      	movs	r2, #1
 801850a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801850c:	68f8      	ldr	r0, [r7, #12]
 801850e:	f7ff fb33 	bl	8017b78 <sync_window>
 8018512:	4603      	mov	r3, r0
 8018514:	2b00      	cmp	r3, #0
 8018516:	d001      	beq.n	801851c <dir_next+0x12c>
 8018518:	2301      	movs	r3, #1
 801851a:	e02a      	b.n	8018572 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801851c:	693b      	ldr	r3, [r7, #16]
 801851e:	3301      	adds	r3, #1
 8018520:	613b      	str	r3, [r7, #16]
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018526:	1c5a      	adds	r2, r3, #1
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	631a      	str	r2, [r3, #48]	@ 0x30
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	895b      	ldrh	r3, [r3, #10]
 8018530:	461a      	mov	r2, r3
 8018532:	693b      	ldr	r3, [r7, #16]
 8018534:	4293      	cmp	r3, r2
 8018536:	d3e6      	bcc.n	8018506 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801853c:	693b      	ldr	r3, [r7, #16]
 801853e:	1ad2      	subs	r2, r2, r3
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	697a      	ldr	r2, [r7, #20]
 8018548:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801854a:	6979      	ldr	r1, [r7, #20]
 801854c:	68f8      	ldr	r0, [r7, #12]
 801854e:	f7ff fbf3 	bl	8017d38 <clust2sect>
 8018552:	4602      	mov	r2, r0
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	68ba      	ldr	r2, [r7, #8]
 801855c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801856a:	441a      	add	r2, r3
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018570:	2300      	movs	r3, #0
}
 8018572:	4618      	mov	r0, r3
 8018574:	3718      	adds	r7, #24
 8018576:	46bd      	mov	sp, r7
 8018578:	bd80      	pop	{r7, pc}

0801857a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801857a:	b580      	push	{r7, lr}
 801857c:	b086      	sub	sp, #24
 801857e:	af00      	add	r7, sp, #0
 8018580:	6078      	str	r0, [r7, #4]
 8018582:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801858a:	2100      	movs	r1, #0
 801858c:	6878      	ldr	r0, [r7, #4]
 801858e:	f7ff feb4 	bl	80182fa <dir_sdi>
 8018592:	4603      	mov	r3, r0
 8018594:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018596:	7dfb      	ldrb	r3, [r7, #23]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d12b      	bne.n	80185f4 <dir_alloc+0x7a>
		n = 0;
 801859c:	2300      	movs	r3, #0
 801859e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	69db      	ldr	r3, [r3, #28]
 80185a4:	4619      	mov	r1, r3
 80185a6:	68f8      	ldr	r0, [r7, #12]
 80185a8:	f7ff fb2a 	bl	8017c00 <move_window>
 80185ac:	4603      	mov	r3, r0
 80185ae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80185b0:	7dfb      	ldrb	r3, [r7, #23]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d11d      	bne.n	80185f2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	6a1b      	ldr	r3, [r3, #32]
 80185ba:	781b      	ldrb	r3, [r3, #0]
 80185bc:	2be5      	cmp	r3, #229	@ 0xe5
 80185be:	d004      	beq.n	80185ca <dir_alloc+0x50>
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	6a1b      	ldr	r3, [r3, #32]
 80185c4:	781b      	ldrb	r3, [r3, #0]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d107      	bne.n	80185da <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80185ca:	693b      	ldr	r3, [r7, #16]
 80185cc:	3301      	adds	r3, #1
 80185ce:	613b      	str	r3, [r7, #16]
 80185d0:	693a      	ldr	r2, [r7, #16]
 80185d2:	683b      	ldr	r3, [r7, #0]
 80185d4:	429a      	cmp	r2, r3
 80185d6:	d102      	bne.n	80185de <dir_alloc+0x64>
 80185d8:	e00c      	b.n	80185f4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80185da:	2300      	movs	r3, #0
 80185dc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80185de:	2101      	movs	r1, #1
 80185e0:	6878      	ldr	r0, [r7, #4]
 80185e2:	f7ff ff05 	bl	80183f0 <dir_next>
 80185e6:	4603      	mov	r3, r0
 80185e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80185ea:	7dfb      	ldrb	r3, [r7, #23]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d0d7      	beq.n	80185a0 <dir_alloc+0x26>
 80185f0:	e000      	b.n	80185f4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80185f2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80185f4:	7dfb      	ldrb	r3, [r7, #23]
 80185f6:	2b04      	cmp	r3, #4
 80185f8:	d101      	bne.n	80185fe <dir_alloc+0x84>
 80185fa:	2307      	movs	r3, #7
 80185fc:	75fb      	strb	r3, [r7, #23]
	return res;
 80185fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8018600:	4618      	mov	r0, r3
 8018602:	3718      	adds	r7, #24
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}

08018608 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b084      	sub	sp, #16
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
 8018610:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018612:	683b      	ldr	r3, [r7, #0]
 8018614:	331a      	adds	r3, #26
 8018616:	4618      	mov	r0, r3
 8018618:	f7ff f842 	bl	80176a0 <ld_word>
 801861c:	4603      	mov	r3, r0
 801861e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	781b      	ldrb	r3, [r3, #0]
 8018624:	2b03      	cmp	r3, #3
 8018626:	d109      	bne.n	801863c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	3314      	adds	r3, #20
 801862c:	4618      	mov	r0, r3
 801862e:	f7ff f837 	bl	80176a0 <ld_word>
 8018632:	4603      	mov	r3, r0
 8018634:	041b      	lsls	r3, r3, #16
 8018636:	68fa      	ldr	r2, [r7, #12]
 8018638:	4313      	orrs	r3, r2
 801863a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801863c:	68fb      	ldr	r3, [r7, #12]
}
 801863e:	4618      	mov	r0, r3
 8018640:	3710      	adds	r7, #16
 8018642:	46bd      	mov	sp, r7
 8018644:	bd80      	pop	{r7, pc}

08018646 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018646:	b580      	push	{r7, lr}
 8018648:	b084      	sub	sp, #16
 801864a:	af00      	add	r7, sp, #0
 801864c:	60f8      	str	r0, [r7, #12]
 801864e:	60b9      	str	r1, [r7, #8]
 8018650:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8018652:	68bb      	ldr	r3, [r7, #8]
 8018654:	331a      	adds	r3, #26
 8018656:	687a      	ldr	r2, [r7, #4]
 8018658:	b292      	uxth	r2, r2
 801865a:	4611      	mov	r1, r2
 801865c:	4618      	mov	r0, r3
 801865e:	f7ff f85a 	bl	8017716 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	781b      	ldrb	r3, [r3, #0]
 8018666:	2b03      	cmp	r3, #3
 8018668:	d109      	bne.n	801867e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801866a:	68bb      	ldr	r3, [r7, #8]
 801866c:	f103 0214 	add.w	r2, r3, #20
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	0c1b      	lsrs	r3, r3, #16
 8018674:	b29b      	uxth	r3, r3
 8018676:	4619      	mov	r1, r3
 8018678:	4610      	mov	r0, r2
 801867a:	f7ff f84c 	bl	8017716 <st_word>
	}
}
 801867e:	bf00      	nop
 8018680:	3710      	adds	r7, #16
 8018682:	46bd      	mov	sp, r7
 8018684:	bd80      	pop	{r7, pc}
	...

08018688 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8018688:	b590      	push	{r4, r7, lr}
 801868a:	b087      	sub	sp, #28
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
 8018690:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018692:	683b      	ldr	r3, [r7, #0]
 8018694:	331a      	adds	r3, #26
 8018696:	4618      	mov	r0, r3
 8018698:	f7ff f802 	bl	80176a0 <ld_word>
 801869c:	4603      	mov	r3, r0
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d001      	beq.n	80186a6 <cmp_lfn+0x1e>
 80186a2:	2300      	movs	r3, #0
 80186a4:	e059      	b.n	801875a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80186a6:	683b      	ldr	r3, [r7, #0]
 80186a8:	781b      	ldrb	r3, [r3, #0]
 80186aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80186ae:	1e5a      	subs	r2, r3, #1
 80186b0:	4613      	mov	r3, r2
 80186b2:	005b      	lsls	r3, r3, #1
 80186b4:	4413      	add	r3, r2
 80186b6:	009b      	lsls	r3, r3, #2
 80186b8:	4413      	add	r3, r2
 80186ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80186bc:	2301      	movs	r3, #1
 80186be:	81fb      	strh	r3, [r7, #14]
 80186c0:	2300      	movs	r3, #0
 80186c2:	613b      	str	r3, [r7, #16]
 80186c4:	e033      	b.n	801872e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80186c6:	4a27      	ldr	r2, [pc, #156]	@ (8018764 <cmp_lfn+0xdc>)
 80186c8:	693b      	ldr	r3, [r7, #16]
 80186ca:	4413      	add	r3, r2
 80186cc:	781b      	ldrb	r3, [r3, #0]
 80186ce:	461a      	mov	r2, r3
 80186d0:	683b      	ldr	r3, [r7, #0]
 80186d2:	4413      	add	r3, r2
 80186d4:	4618      	mov	r0, r3
 80186d6:	f7fe ffe3 	bl	80176a0 <ld_word>
 80186da:	4603      	mov	r3, r0
 80186dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80186de:	89fb      	ldrh	r3, [r7, #14]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d01a      	beq.n	801871a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80186e4:	697b      	ldr	r3, [r7, #20]
 80186e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80186e8:	d812      	bhi.n	8018710 <cmp_lfn+0x88>
 80186ea:	89bb      	ldrh	r3, [r7, #12]
 80186ec:	4618      	mov	r0, r3
 80186ee:	f001 fe21 	bl	801a334 <ff_wtoupper>
 80186f2:	4603      	mov	r3, r0
 80186f4:	461c      	mov	r4, r3
 80186f6:	697b      	ldr	r3, [r7, #20]
 80186f8:	1c5a      	adds	r2, r3, #1
 80186fa:	617a      	str	r2, [r7, #20]
 80186fc:	005b      	lsls	r3, r3, #1
 80186fe:	687a      	ldr	r2, [r7, #4]
 8018700:	4413      	add	r3, r2
 8018702:	881b      	ldrh	r3, [r3, #0]
 8018704:	4618      	mov	r0, r3
 8018706:	f001 fe15 	bl	801a334 <ff_wtoupper>
 801870a:	4603      	mov	r3, r0
 801870c:	429c      	cmp	r4, r3
 801870e:	d001      	beq.n	8018714 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018710:	2300      	movs	r3, #0
 8018712:	e022      	b.n	801875a <cmp_lfn+0xd2>
			}
			wc = uc;
 8018714:	89bb      	ldrh	r3, [r7, #12]
 8018716:	81fb      	strh	r3, [r7, #14]
 8018718:	e006      	b.n	8018728 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801871a:	89bb      	ldrh	r3, [r7, #12]
 801871c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018720:	4293      	cmp	r3, r2
 8018722:	d001      	beq.n	8018728 <cmp_lfn+0xa0>
 8018724:	2300      	movs	r3, #0
 8018726:	e018      	b.n	801875a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	3301      	adds	r3, #1
 801872c:	613b      	str	r3, [r7, #16]
 801872e:	693b      	ldr	r3, [r7, #16]
 8018730:	2b0c      	cmp	r3, #12
 8018732:	d9c8      	bls.n	80186c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018734:	683b      	ldr	r3, [r7, #0]
 8018736:	781b      	ldrb	r3, [r3, #0]
 8018738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801873c:	2b00      	cmp	r3, #0
 801873e:	d00b      	beq.n	8018758 <cmp_lfn+0xd0>
 8018740:	89fb      	ldrh	r3, [r7, #14]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d008      	beq.n	8018758 <cmp_lfn+0xd0>
 8018746:	697b      	ldr	r3, [r7, #20]
 8018748:	005b      	lsls	r3, r3, #1
 801874a:	687a      	ldr	r2, [r7, #4]
 801874c:	4413      	add	r3, r2
 801874e:	881b      	ldrh	r3, [r3, #0]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d001      	beq.n	8018758 <cmp_lfn+0xd0>
 8018754:	2300      	movs	r3, #0
 8018756:	e000      	b.n	801875a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018758:	2301      	movs	r3, #1
}
 801875a:	4618      	mov	r0, r3
 801875c:	371c      	adds	r7, #28
 801875e:	46bd      	mov	sp, r7
 8018760:	bd90      	pop	{r4, r7, pc}
 8018762:	bf00      	nop
 8018764:	08022888 	.word	0x08022888

08018768 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b088      	sub	sp, #32
 801876c:	af00      	add	r7, sp, #0
 801876e:	60f8      	str	r0, [r7, #12]
 8018770:	60b9      	str	r1, [r7, #8]
 8018772:	4611      	mov	r1, r2
 8018774:	461a      	mov	r2, r3
 8018776:	460b      	mov	r3, r1
 8018778:	71fb      	strb	r3, [r7, #7]
 801877a:	4613      	mov	r3, r2
 801877c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801877e:	68bb      	ldr	r3, [r7, #8]
 8018780:	330d      	adds	r3, #13
 8018782:	79ba      	ldrb	r2, [r7, #6]
 8018784:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8018786:	68bb      	ldr	r3, [r7, #8]
 8018788:	330b      	adds	r3, #11
 801878a:	220f      	movs	r2, #15
 801878c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801878e:	68bb      	ldr	r3, [r7, #8]
 8018790:	330c      	adds	r3, #12
 8018792:	2200      	movs	r2, #0
 8018794:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8018796:	68bb      	ldr	r3, [r7, #8]
 8018798:	331a      	adds	r3, #26
 801879a:	2100      	movs	r1, #0
 801879c:	4618      	mov	r0, r3
 801879e:	f7fe ffba 	bl	8017716 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80187a2:	79fb      	ldrb	r3, [r7, #7]
 80187a4:	1e5a      	subs	r2, r3, #1
 80187a6:	4613      	mov	r3, r2
 80187a8:	005b      	lsls	r3, r3, #1
 80187aa:	4413      	add	r3, r2
 80187ac:	009b      	lsls	r3, r3, #2
 80187ae:	4413      	add	r3, r2
 80187b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80187b2:	2300      	movs	r3, #0
 80187b4:	82fb      	strh	r3, [r7, #22]
 80187b6:	2300      	movs	r3, #0
 80187b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80187ba:	8afb      	ldrh	r3, [r7, #22]
 80187bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80187c0:	4293      	cmp	r3, r2
 80187c2:	d007      	beq.n	80187d4 <put_lfn+0x6c>
 80187c4:	69fb      	ldr	r3, [r7, #28]
 80187c6:	1c5a      	adds	r2, r3, #1
 80187c8:	61fa      	str	r2, [r7, #28]
 80187ca:	005b      	lsls	r3, r3, #1
 80187cc:	68fa      	ldr	r2, [r7, #12]
 80187ce:	4413      	add	r3, r2
 80187d0:	881b      	ldrh	r3, [r3, #0]
 80187d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80187d4:	4a17      	ldr	r2, [pc, #92]	@ (8018834 <put_lfn+0xcc>)
 80187d6:	69bb      	ldr	r3, [r7, #24]
 80187d8:	4413      	add	r3, r2
 80187da:	781b      	ldrb	r3, [r3, #0]
 80187dc:	461a      	mov	r2, r3
 80187de:	68bb      	ldr	r3, [r7, #8]
 80187e0:	4413      	add	r3, r2
 80187e2:	8afa      	ldrh	r2, [r7, #22]
 80187e4:	4611      	mov	r1, r2
 80187e6:	4618      	mov	r0, r3
 80187e8:	f7fe ff95 	bl	8017716 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80187ec:	8afb      	ldrh	r3, [r7, #22]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d102      	bne.n	80187f8 <put_lfn+0x90>
 80187f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80187f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80187f8:	69bb      	ldr	r3, [r7, #24]
 80187fa:	3301      	adds	r3, #1
 80187fc:	61bb      	str	r3, [r7, #24]
 80187fe:	69bb      	ldr	r3, [r7, #24]
 8018800:	2b0c      	cmp	r3, #12
 8018802:	d9da      	bls.n	80187ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018804:	8afb      	ldrh	r3, [r7, #22]
 8018806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801880a:	4293      	cmp	r3, r2
 801880c:	d006      	beq.n	801881c <put_lfn+0xb4>
 801880e:	69fb      	ldr	r3, [r7, #28]
 8018810:	005b      	lsls	r3, r3, #1
 8018812:	68fa      	ldr	r2, [r7, #12]
 8018814:	4413      	add	r3, r2
 8018816:	881b      	ldrh	r3, [r3, #0]
 8018818:	2b00      	cmp	r3, #0
 801881a:	d103      	bne.n	8018824 <put_lfn+0xbc>
 801881c:	79fb      	ldrb	r3, [r7, #7]
 801881e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018822:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018824:	68bb      	ldr	r3, [r7, #8]
 8018826:	79fa      	ldrb	r2, [r7, #7]
 8018828:	701a      	strb	r2, [r3, #0]
}
 801882a:	bf00      	nop
 801882c:	3720      	adds	r7, #32
 801882e:	46bd      	mov	sp, r7
 8018830:	bd80      	pop	{r7, pc}
 8018832:	bf00      	nop
 8018834:	08022888 	.word	0x08022888

08018838 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b08c      	sub	sp, #48	@ 0x30
 801883c:	af00      	add	r7, sp, #0
 801883e:	60f8      	str	r0, [r7, #12]
 8018840:	60b9      	str	r1, [r7, #8]
 8018842:	607a      	str	r2, [r7, #4]
 8018844:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018846:	220b      	movs	r2, #11
 8018848:	68b9      	ldr	r1, [r7, #8]
 801884a:	68f8      	ldr	r0, [r7, #12]
 801884c:	f7fe ffaa 	bl	80177a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018850:	683b      	ldr	r3, [r7, #0]
 8018852:	2b05      	cmp	r3, #5
 8018854:	d92b      	bls.n	80188ae <gen_numname+0x76>
		sr = seq;
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801885a:	e022      	b.n	80188a2 <gen_numname+0x6a>
			wc = *lfn++;
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	1c9a      	adds	r2, r3, #2
 8018860:	607a      	str	r2, [r7, #4]
 8018862:	881b      	ldrh	r3, [r3, #0]
 8018864:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8018866:	2300      	movs	r3, #0
 8018868:	62bb      	str	r3, [r7, #40]	@ 0x28
 801886a:	e017      	b.n	801889c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801886c:	69fb      	ldr	r3, [r7, #28]
 801886e:	005a      	lsls	r2, r3, #1
 8018870:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018872:	f003 0301 	and.w	r3, r3, #1
 8018876:	4413      	add	r3, r2
 8018878:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801887a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801887c:	085b      	lsrs	r3, r3, #1
 801887e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018880:	69fb      	ldr	r3, [r7, #28]
 8018882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018886:	2b00      	cmp	r3, #0
 8018888:	d005      	beq.n	8018896 <gen_numname+0x5e>
 801888a:	69fb      	ldr	r3, [r7, #28]
 801888c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8018890:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8018894:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018898:	3301      	adds	r3, #1
 801889a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801889c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801889e:	2b0f      	cmp	r3, #15
 80188a0:	d9e4      	bls.n	801886c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	881b      	ldrh	r3, [r3, #0]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d1d8      	bne.n	801885c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80188aa:	69fb      	ldr	r3, [r7, #28]
 80188ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80188ae:	2307      	movs	r3, #7
 80188b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	b2db      	uxtb	r3, r3
 80188b6:	f003 030f 	and.w	r3, r3, #15
 80188ba:	b2db      	uxtb	r3, r3
 80188bc:	3330      	adds	r3, #48	@ 0x30
 80188be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80188c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80188c6:	2b39      	cmp	r3, #57	@ 0x39
 80188c8:	d904      	bls.n	80188d4 <gen_numname+0x9c>
 80188ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80188ce:	3307      	adds	r3, #7
 80188d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80188d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188d6:	1e5a      	subs	r2, r3, #1
 80188d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80188da:	3330      	adds	r3, #48	@ 0x30
 80188dc:	443b      	add	r3, r7
 80188de:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80188e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80188e6:	683b      	ldr	r3, [r7, #0]
 80188e8:	091b      	lsrs	r3, r3, #4
 80188ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 80188ec:	683b      	ldr	r3, [r7, #0]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d1df      	bne.n	80188b2 <gen_numname+0x7a>
	ns[i] = '~';
 80188f2:	f107 0214 	add.w	r2, r7, #20
 80188f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188f8:	4413      	add	r3, r2
 80188fa:	227e      	movs	r2, #126	@ 0x7e
 80188fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80188fe:	2300      	movs	r3, #0
 8018900:	627b      	str	r3, [r7, #36]	@ 0x24
 8018902:	e002      	b.n	801890a <gen_numname+0xd2>
 8018904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018906:	3301      	adds	r3, #1
 8018908:	627b      	str	r3, [r7, #36]	@ 0x24
 801890a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801890c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801890e:	429a      	cmp	r2, r3
 8018910:	d205      	bcs.n	801891e <gen_numname+0xe6>
 8018912:	68fa      	ldr	r2, [r7, #12]
 8018914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018916:	4413      	add	r3, r2
 8018918:	781b      	ldrb	r3, [r3, #0]
 801891a:	2b20      	cmp	r3, #32
 801891c:	d1f2      	bne.n	8018904 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801891e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018920:	2b07      	cmp	r3, #7
 8018922:	d807      	bhi.n	8018934 <gen_numname+0xfc>
 8018924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018926:	1c5a      	adds	r2, r3, #1
 8018928:	62ba      	str	r2, [r7, #40]	@ 0x28
 801892a:	3330      	adds	r3, #48	@ 0x30
 801892c:	443b      	add	r3, r7
 801892e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8018932:	e000      	b.n	8018936 <gen_numname+0xfe>
 8018934:	2120      	movs	r1, #32
 8018936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018938:	1c5a      	adds	r2, r3, #1
 801893a:	627a      	str	r2, [r7, #36]	@ 0x24
 801893c:	68fa      	ldr	r2, [r7, #12]
 801893e:	4413      	add	r3, r2
 8018940:	460a      	mov	r2, r1
 8018942:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018946:	2b07      	cmp	r3, #7
 8018948:	d9e9      	bls.n	801891e <gen_numname+0xe6>
}
 801894a:	bf00      	nop
 801894c:	bf00      	nop
 801894e:	3730      	adds	r7, #48	@ 0x30
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}

08018954 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018954:	b480      	push	{r7}
 8018956:	b085      	sub	sp, #20
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801895c:	2300      	movs	r3, #0
 801895e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018960:	230b      	movs	r3, #11
 8018962:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018964:	7bfb      	ldrb	r3, [r7, #15]
 8018966:	b2da      	uxtb	r2, r3
 8018968:	0852      	lsrs	r2, r2, #1
 801896a:	01db      	lsls	r3, r3, #7
 801896c:	4313      	orrs	r3, r2
 801896e:	b2da      	uxtb	r2, r3
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	1c59      	adds	r1, r3, #1
 8018974:	6079      	str	r1, [r7, #4]
 8018976:	781b      	ldrb	r3, [r3, #0]
 8018978:	4413      	add	r3, r2
 801897a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801897c:	68bb      	ldr	r3, [r7, #8]
 801897e:	3b01      	subs	r3, #1
 8018980:	60bb      	str	r3, [r7, #8]
 8018982:	68bb      	ldr	r3, [r7, #8]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d1ed      	bne.n	8018964 <sum_sfn+0x10>
	return sum;
 8018988:	7bfb      	ldrb	r3, [r7, #15]
}
 801898a:	4618      	mov	r0, r3
 801898c:	3714      	adds	r7, #20
 801898e:	46bd      	mov	sp, r7
 8018990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018994:	4770      	bx	lr

08018996 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8018996:	b580      	push	{r7, lr}
 8018998:	b086      	sub	sp, #24
 801899a:	af00      	add	r7, sp, #0
 801899c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80189a4:	2100      	movs	r1, #0
 80189a6:	6878      	ldr	r0, [r7, #4]
 80189a8:	f7ff fca7 	bl	80182fa <dir_sdi>
 80189ac:	4603      	mov	r3, r0
 80189ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80189b0:	7dfb      	ldrb	r3, [r7, #23]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d001      	beq.n	80189ba <dir_find+0x24>
 80189b6:	7dfb      	ldrb	r3, [r7, #23]
 80189b8:	e0a9      	b.n	8018b0e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80189ba:	23ff      	movs	r3, #255	@ 0xff
 80189bc:	753b      	strb	r3, [r7, #20]
 80189be:	7d3b      	ldrb	r3, [r7, #20]
 80189c0:	757b      	strb	r3, [r7, #21]
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	f04f 32ff 	mov.w	r2, #4294967295
 80189c8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	69db      	ldr	r3, [r3, #28]
 80189ce:	4619      	mov	r1, r3
 80189d0:	6938      	ldr	r0, [r7, #16]
 80189d2:	f7ff f915 	bl	8017c00 <move_window>
 80189d6:	4603      	mov	r3, r0
 80189d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80189da:	7dfb      	ldrb	r3, [r7, #23]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	f040 8090 	bne.w	8018b02 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	6a1b      	ldr	r3, [r3, #32]
 80189e6:	781b      	ldrb	r3, [r3, #0]
 80189e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80189ea:	7dbb      	ldrb	r3, [r7, #22]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d102      	bne.n	80189f6 <dir_find+0x60>
 80189f0:	2304      	movs	r3, #4
 80189f2:	75fb      	strb	r3, [r7, #23]
 80189f4:	e08a      	b.n	8018b0c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	6a1b      	ldr	r3, [r3, #32]
 80189fa:	330b      	adds	r3, #11
 80189fc:	781b      	ldrb	r3, [r3, #0]
 80189fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018a02:	73fb      	strb	r3, [r7, #15]
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	7bfa      	ldrb	r2, [r7, #15]
 8018a08:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018a0a:	7dbb      	ldrb	r3, [r7, #22]
 8018a0c:	2be5      	cmp	r3, #229	@ 0xe5
 8018a0e:	d007      	beq.n	8018a20 <dir_find+0x8a>
 8018a10:	7bfb      	ldrb	r3, [r7, #15]
 8018a12:	f003 0308 	and.w	r3, r3, #8
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d009      	beq.n	8018a2e <dir_find+0x98>
 8018a1a:	7bfb      	ldrb	r3, [r7, #15]
 8018a1c:	2b0f      	cmp	r3, #15
 8018a1e:	d006      	beq.n	8018a2e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018a20:	23ff      	movs	r3, #255	@ 0xff
 8018a22:	757b      	strb	r3, [r7, #21]
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	f04f 32ff 	mov.w	r2, #4294967295
 8018a2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8018a2c:	e05e      	b.n	8018aec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018a2e:	7bfb      	ldrb	r3, [r7, #15]
 8018a30:	2b0f      	cmp	r3, #15
 8018a32:	d136      	bne.n	8018aa2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d154      	bne.n	8018aec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018a42:	7dbb      	ldrb	r3, [r7, #22]
 8018a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d00d      	beq.n	8018a68 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	6a1b      	ldr	r3, [r3, #32]
 8018a50:	7b5b      	ldrb	r3, [r3, #13]
 8018a52:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018a54:	7dbb      	ldrb	r3, [r7, #22]
 8018a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018a5a:	75bb      	strb	r3, [r7, #22]
 8018a5c:	7dbb      	ldrb	r3, [r7, #22]
 8018a5e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	695a      	ldr	r2, [r3, #20]
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018a68:	7dba      	ldrb	r2, [r7, #22]
 8018a6a:	7d7b      	ldrb	r3, [r7, #21]
 8018a6c:	429a      	cmp	r2, r3
 8018a6e:	d115      	bne.n	8018a9c <dir_find+0x106>
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	6a1b      	ldr	r3, [r3, #32]
 8018a74:	330d      	adds	r3, #13
 8018a76:	781b      	ldrb	r3, [r3, #0]
 8018a78:	7d3a      	ldrb	r2, [r7, #20]
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	d10e      	bne.n	8018a9c <dir_find+0x106>
 8018a7e:	693b      	ldr	r3, [r7, #16]
 8018a80:	68da      	ldr	r2, [r3, #12]
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	6a1b      	ldr	r3, [r3, #32]
 8018a86:	4619      	mov	r1, r3
 8018a88:	4610      	mov	r0, r2
 8018a8a:	f7ff fdfd 	bl	8018688 <cmp_lfn>
 8018a8e:	4603      	mov	r3, r0
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d003      	beq.n	8018a9c <dir_find+0x106>
 8018a94:	7d7b      	ldrb	r3, [r7, #21]
 8018a96:	3b01      	subs	r3, #1
 8018a98:	b2db      	uxtb	r3, r3
 8018a9a:	e000      	b.n	8018a9e <dir_find+0x108>
 8018a9c:	23ff      	movs	r3, #255	@ 0xff
 8018a9e:	757b      	strb	r3, [r7, #21]
 8018aa0:	e024      	b.n	8018aec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018aa2:	7d7b      	ldrb	r3, [r7, #21]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d109      	bne.n	8018abc <dir_find+0x126>
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	6a1b      	ldr	r3, [r3, #32]
 8018aac:	4618      	mov	r0, r3
 8018aae:	f7ff ff51 	bl	8018954 <sum_sfn>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	461a      	mov	r2, r3
 8018ab6:	7d3b      	ldrb	r3, [r7, #20]
 8018ab8:	4293      	cmp	r3, r2
 8018aba:	d024      	beq.n	8018b06 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018ac2:	f003 0301 	and.w	r3, r3, #1
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d10a      	bne.n	8018ae0 <dir_find+0x14a>
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	6a18      	ldr	r0, [r3, #32]
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	3324      	adds	r3, #36	@ 0x24
 8018ad2:	220b      	movs	r2, #11
 8018ad4:	4619      	mov	r1, r3
 8018ad6:	f7fe fea1 	bl	801781c <mem_cmp>
 8018ada:	4603      	mov	r3, r0
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d014      	beq.n	8018b0a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018ae0:	23ff      	movs	r3, #255	@ 0xff
 8018ae2:	757b      	strb	r3, [r7, #21]
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8018aea:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018aec:	2100      	movs	r1, #0
 8018aee:	6878      	ldr	r0, [r7, #4]
 8018af0:	f7ff fc7e 	bl	80183f0 <dir_next>
 8018af4:	4603      	mov	r3, r0
 8018af6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018af8:	7dfb      	ldrb	r3, [r7, #23]
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	f43f af65 	beq.w	80189ca <dir_find+0x34>
 8018b00:	e004      	b.n	8018b0c <dir_find+0x176>
		if (res != FR_OK) break;
 8018b02:	bf00      	nop
 8018b04:	e002      	b.n	8018b0c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018b06:	bf00      	nop
 8018b08:	e000      	b.n	8018b0c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018b0a:	bf00      	nop

	return res;
 8018b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018b0e:	4618      	mov	r0, r3
 8018b10:	3718      	adds	r7, #24
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd80      	pop	{r7, pc}
	...

08018b18 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b08c      	sub	sp, #48	@ 0x30
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018b2c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d001      	beq.n	8018b38 <dir_register+0x20>
 8018b34:	2306      	movs	r3, #6
 8018b36:	e0e0      	b.n	8018cfa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018b38:	2300      	movs	r3, #0
 8018b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018b3c:	e002      	b.n	8018b44 <dir_register+0x2c>
 8018b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b40:	3301      	adds	r3, #1
 8018b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8018b44:	69fb      	ldr	r3, [r7, #28]
 8018b46:	68da      	ldr	r2, [r3, #12]
 8018b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b4a:	005b      	lsls	r3, r3, #1
 8018b4c:	4413      	add	r3, r2
 8018b4e:	881b      	ldrh	r3, [r3, #0]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d1f4      	bne.n	8018b3e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8018b5a:	f107 030c 	add.w	r3, r7, #12
 8018b5e:	220c      	movs	r2, #12
 8018b60:	4618      	mov	r0, r3
 8018b62:	f7fe fe1f 	bl	80177a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018b66:	7dfb      	ldrb	r3, [r7, #23]
 8018b68:	f003 0301 	and.w	r3, r3, #1
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d032      	beq.n	8018bd6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	2240      	movs	r2, #64	@ 0x40
 8018b74:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8018b78:	2301      	movs	r3, #1
 8018b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018b7c:	e016      	b.n	8018bac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8018b84:	69fb      	ldr	r3, [r7, #28]
 8018b86:	68da      	ldr	r2, [r3, #12]
 8018b88:	f107 010c 	add.w	r1, r7, #12
 8018b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b8e:	f7ff fe53 	bl	8018838 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018b92:	6878      	ldr	r0, [r7, #4]
 8018b94:	f7ff feff 	bl	8018996 <dir_find>
 8018b98:	4603      	mov	r3, r0
 8018b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8018b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d106      	bne.n	8018bb4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ba8:	3301      	adds	r3, #1
 8018baa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bae:	2b63      	cmp	r3, #99	@ 0x63
 8018bb0:	d9e5      	bls.n	8018b7e <dir_register+0x66>
 8018bb2:	e000      	b.n	8018bb6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8018bb4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bb8:	2b64      	cmp	r3, #100	@ 0x64
 8018bba:	d101      	bne.n	8018bc0 <dir_register+0xa8>
 8018bbc:	2307      	movs	r3, #7
 8018bbe:	e09c      	b.n	8018cfa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018bc4:	2b04      	cmp	r3, #4
 8018bc6:	d002      	beq.n	8018bce <dir_register+0xb6>
 8018bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018bcc:	e095      	b.n	8018cfa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018bce:	7dfa      	ldrb	r2, [r7, #23]
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018bd6:	7dfb      	ldrb	r3, [r7, #23]
 8018bd8:	f003 0302 	and.w	r3, r3, #2
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d007      	beq.n	8018bf0 <dir_register+0xd8>
 8018be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018be2:	330c      	adds	r3, #12
 8018be4:	4a47      	ldr	r2, [pc, #284]	@ (8018d04 <dir_register+0x1ec>)
 8018be6:	fba2 2303 	umull	r2, r3, r2, r3
 8018bea:	089b      	lsrs	r3, r3, #2
 8018bec:	3301      	adds	r3, #1
 8018bee:	e000      	b.n	8018bf2 <dir_register+0xda>
 8018bf0:	2301      	movs	r3, #1
 8018bf2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018bf4:	6a39      	ldr	r1, [r7, #32]
 8018bf6:	6878      	ldr	r0, [r7, #4]
 8018bf8:	f7ff fcbf 	bl	801857a <dir_alloc>
 8018bfc:	4603      	mov	r3, r0
 8018bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d148      	bne.n	8018c9c <dir_register+0x184>
 8018c0a:	6a3b      	ldr	r3, [r7, #32]
 8018c0c:	3b01      	subs	r3, #1
 8018c0e:	623b      	str	r3, [r7, #32]
 8018c10:	6a3b      	ldr	r3, [r7, #32]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d042      	beq.n	8018c9c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	695a      	ldr	r2, [r3, #20]
 8018c1a:	6a3b      	ldr	r3, [r7, #32]
 8018c1c:	015b      	lsls	r3, r3, #5
 8018c1e:	1ad3      	subs	r3, r2, r3
 8018c20:	4619      	mov	r1, r3
 8018c22:	6878      	ldr	r0, [r7, #4]
 8018c24:	f7ff fb69 	bl	80182fa <dir_sdi>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8018c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d132      	bne.n	8018c9c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	3324      	adds	r3, #36	@ 0x24
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	f7ff fe8a 	bl	8018954 <sum_sfn>
 8018c40:	4603      	mov	r3, r0
 8018c42:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	69db      	ldr	r3, [r3, #28]
 8018c48:	4619      	mov	r1, r3
 8018c4a:	69f8      	ldr	r0, [r7, #28]
 8018c4c:	f7fe ffd8 	bl	8017c00 <move_window>
 8018c50:	4603      	mov	r3, r0
 8018c52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8018c56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d11d      	bne.n	8018c9a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018c5e:	69fb      	ldr	r3, [r7, #28]
 8018c60:	68d8      	ldr	r0, [r3, #12]
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	6a19      	ldr	r1, [r3, #32]
 8018c66:	6a3b      	ldr	r3, [r7, #32]
 8018c68:	b2da      	uxtb	r2, r3
 8018c6a:	7efb      	ldrb	r3, [r7, #27]
 8018c6c:	f7ff fd7c 	bl	8018768 <put_lfn>
				fs->wflag = 1;
 8018c70:	69fb      	ldr	r3, [r7, #28]
 8018c72:	2201      	movs	r2, #1
 8018c74:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018c76:	2100      	movs	r1, #0
 8018c78:	6878      	ldr	r0, [r7, #4]
 8018c7a:	f7ff fbb9 	bl	80183f0 <dir_next>
 8018c7e:	4603      	mov	r3, r0
 8018c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8018c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d107      	bne.n	8018c9c <dir_register+0x184>
 8018c8c:	6a3b      	ldr	r3, [r7, #32]
 8018c8e:	3b01      	subs	r3, #1
 8018c90:	623b      	str	r3, [r7, #32]
 8018c92:	6a3b      	ldr	r3, [r7, #32]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d1d5      	bne.n	8018c44 <dir_register+0x12c>
 8018c98:	e000      	b.n	8018c9c <dir_register+0x184>
				if (res != FR_OK) break;
 8018c9a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d128      	bne.n	8018cf6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	69db      	ldr	r3, [r3, #28]
 8018ca8:	4619      	mov	r1, r3
 8018caa:	69f8      	ldr	r0, [r7, #28]
 8018cac:	f7fe ffa8 	bl	8017c00 <move_window>
 8018cb0:	4603      	mov	r3, r0
 8018cb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8018cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d11b      	bne.n	8018cf6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	6a1b      	ldr	r3, [r3, #32]
 8018cc2:	2220      	movs	r2, #32
 8018cc4:	2100      	movs	r1, #0
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f7fe fd8d 	bl	80177e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	6a18      	ldr	r0, [r3, #32]
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	3324      	adds	r3, #36	@ 0x24
 8018cd4:	220b      	movs	r2, #11
 8018cd6:	4619      	mov	r1, r3
 8018cd8:	f7fe fd64 	bl	80177a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	6a1b      	ldr	r3, [r3, #32]
 8018ce6:	330c      	adds	r3, #12
 8018ce8:	f002 0218 	and.w	r2, r2, #24
 8018cec:	b2d2      	uxtb	r2, r2
 8018cee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018cf0:	69fb      	ldr	r3, [r7, #28]
 8018cf2:	2201      	movs	r2, #1
 8018cf4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3730      	adds	r7, #48	@ 0x30
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bd80      	pop	{r7, pc}
 8018d02:	bf00      	nop
 8018d04:	4ec4ec4f 	.word	0x4ec4ec4f

08018d08 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b088      	sub	sp, #32
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
 8018d10:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8018d18:	683b      	ldr	r3, [r7, #0]
 8018d1a:	2200      	movs	r2, #0
 8018d1c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	69db      	ldr	r3, [r3, #28]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	f000 80ca 	beq.w	8018ebc <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d30:	d032      	beq.n	8018d98 <get_fileinfo+0x90>
			i = j = 0;
 8018d32:	2300      	movs	r3, #0
 8018d34:	61bb      	str	r3, [r7, #24]
 8018d36:	69bb      	ldr	r3, [r7, #24]
 8018d38:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018d3a:	e01b      	b.n	8018d74 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8018d3c:	89fb      	ldrh	r3, [r7, #14]
 8018d3e:	2100      	movs	r1, #0
 8018d40:	4618      	mov	r0, r3
 8018d42:	f001 fabb 	bl	801a2bc <ff_convert>
 8018d46:	4603      	mov	r3, r0
 8018d48:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8018d4a:	89fb      	ldrh	r3, [r7, #14]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d102      	bne.n	8018d56 <get_fileinfo+0x4e>
 8018d50:	2300      	movs	r3, #0
 8018d52:	61fb      	str	r3, [r7, #28]
 8018d54:	e01a      	b.n	8018d8c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8018d56:	69fb      	ldr	r3, [r7, #28]
 8018d58:	2bfe      	cmp	r3, #254	@ 0xfe
 8018d5a:	d902      	bls.n	8018d62 <get_fileinfo+0x5a>
 8018d5c:	2300      	movs	r3, #0
 8018d5e:	61fb      	str	r3, [r7, #28]
 8018d60:	e014      	b.n	8018d8c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8018d62:	69fb      	ldr	r3, [r7, #28]
 8018d64:	1c5a      	adds	r2, r3, #1
 8018d66:	61fa      	str	r2, [r7, #28]
 8018d68:	89fa      	ldrh	r2, [r7, #14]
 8018d6a:	b2d1      	uxtb	r1, r2
 8018d6c:	683a      	ldr	r2, [r7, #0]
 8018d6e:	4413      	add	r3, r2
 8018d70:	460a      	mov	r2, r1
 8018d72:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018d74:	693b      	ldr	r3, [r7, #16]
 8018d76:	68da      	ldr	r2, [r3, #12]
 8018d78:	69bb      	ldr	r3, [r7, #24]
 8018d7a:	1c59      	adds	r1, r3, #1
 8018d7c:	61b9      	str	r1, [r7, #24]
 8018d7e:	005b      	lsls	r3, r3, #1
 8018d80:	4413      	add	r3, r2
 8018d82:	881b      	ldrh	r3, [r3, #0]
 8018d84:	81fb      	strh	r3, [r7, #14]
 8018d86:	89fb      	ldrh	r3, [r7, #14]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d1d7      	bne.n	8018d3c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8018d8c:	683a      	ldr	r2, [r7, #0]
 8018d8e:	69fb      	ldr	r3, [r7, #28]
 8018d90:	4413      	add	r3, r2
 8018d92:	3316      	adds	r3, #22
 8018d94:	2200      	movs	r2, #0
 8018d96:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8018d98:	2300      	movs	r3, #0
 8018d9a:	61bb      	str	r3, [r7, #24]
 8018d9c:	69bb      	ldr	r3, [r7, #24]
 8018d9e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8018da0:	683a      	ldr	r2, [r7, #0]
 8018da2:	69fb      	ldr	r3, [r7, #28]
 8018da4:	4413      	add	r3, r2
 8018da6:	3316      	adds	r3, #22
 8018da8:	781b      	ldrb	r3, [r3, #0]
 8018daa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8018dac:	e04d      	b.n	8018e4a <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	6a1a      	ldr	r2, [r3, #32]
 8018db2:	69fb      	ldr	r3, [r7, #28]
 8018db4:	1c59      	adds	r1, r3, #1
 8018db6:	61f9      	str	r1, [r7, #28]
 8018db8:	4413      	add	r3, r2
 8018dba:	781b      	ldrb	r3, [r3, #0]
 8018dbc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8018dbe:	7dfb      	ldrb	r3, [r7, #23]
 8018dc0:	2b20      	cmp	r3, #32
 8018dc2:	d041      	beq.n	8018e48 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8018dc4:	7dfb      	ldrb	r3, [r7, #23]
 8018dc6:	2b05      	cmp	r3, #5
 8018dc8:	d101      	bne.n	8018dce <get_fileinfo+0xc6>
 8018dca:	23e5      	movs	r3, #229	@ 0xe5
 8018dcc:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8018dce:	69fb      	ldr	r3, [r7, #28]
 8018dd0:	2b09      	cmp	r3, #9
 8018dd2:	d10f      	bne.n	8018df4 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8018dd4:	89bb      	ldrh	r3, [r7, #12]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d105      	bne.n	8018de6 <get_fileinfo+0xde>
 8018dda:	683a      	ldr	r2, [r7, #0]
 8018ddc:	69bb      	ldr	r3, [r7, #24]
 8018dde:	4413      	add	r3, r2
 8018de0:	3316      	adds	r3, #22
 8018de2:	222e      	movs	r2, #46	@ 0x2e
 8018de4:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8018de6:	69bb      	ldr	r3, [r7, #24]
 8018de8:	1c5a      	adds	r2, r3, #1
 8018dea:	61ba      	str	r2, [r7, #24]
 8018dec:	683a      	ldr	r2, [r7, #0]
 8018dee:	4413      	add	r3, r2
 8018df0:	222e      	movs	r2, #46	@ 0x2e
 8018df2:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8018df4:	683a      	ldr	r2, [r7, #0]
 8018df6:	69bb      	ldr	r3, [r7, #24]
 8018df8:	4413      	add	r3, r2
 8018dfa:	3309      	adds	r3, #9
 8018dfc:	7dfa      	ldrb	r2, [r7, #23]
 8018dfe:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8018e00:	89bb      	ldrh	r3, [r7, #12]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d11c      	bne.n	8018e40 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8018e06:	7dfb      	ldrb	r3, [r7, #23]
 8018e08:	2b40      	cmp	r3, #64	@ 0x40
 8018e0a:	d913      	bls.n	8018e34 <get_fileinfo+0x12c>
 8018e0c:	7dfb      	ldrb	r3, [r7, #23]
 8018e0e:	2b5a      	cmp	r3, #90	@ 0x5a
 8018e10:	d810      	bhi.n	8018e34 <get_fileinfo+0x12c>
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	6a1b      	ldr	r3, [r3, #32]
 8018e16:	330c      	adds	r3, #12
 8018e18:	781b      	ldrb	r3, [r3, #0]
 8018e1a:	461a      	mov	r2, r3
 8018e1c:	69fb      	ldr	r3, [r7, #28]
 8018e1e:	2b08      	cmp	r3, #8
 8018e20:	d901      	bls.n	8018e26 <get_fileinfo+0x11e>
 8018e22:	2310      	movs	r3, #16
 8018e24:	e000      	b.n	8018e28 <get_fileinfo+0x120>
 8018e26:	2308      	movs	r3, #8
 8018e28:	4013      	ands	r3, r2
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d002      	beq.n	8018e34 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8018e2e:	7dfb      	ldrb	r3, [r7, #23]
 8018e30:	3320      	adds	r3, #32
 8018e32:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8018e34:	683a      	ldr	r2, [r7, #0]
 8018e36:	69bb      	ldr	r3, [r7, #24]
 8018e38:	4413      	add	r3, r2
 8018e3a:	3316      	adds	r3, #22
 8018e3c:	7dfa      	ldrb	r2, [r7, #23]
 8018e3e:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8018e40:	69bb      	ldr	r3, [r7, #24]
 8018e42:	3301      	adds	r3, #1
 8018e44:	61bb      	str	r3, [r7, #24]
 8018e46:	e000      	b.n	8018e4a <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8018e48:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8018e4a:	69fb      	ldr	r3, [r7, #28]
 8018e4c:	2b0a      	cmp	r3, #10
 8018e4e:	d9ae      	bls.n	8018dae <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8018e50:	89bb      	ldrh	r3, [r7, #12]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d10d      	bne.n	8018e72 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8018e56:	683a      	ldr	r2, [r7, #0]
 8018e58:	69bb      	ldr	r3, [r7, #24]
 8018e5a:	4413      	add	r3, r2
 8018e5c:	3316      	adds	r3, #22
 8018e5e:	2200      	movs	r2, #0
 8018e60:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	6a1b      	ldr	r3, [r3, #32]
 8018e66:	330c      	adds	r3, #12
 8018e68:	781b      	ldrb	r3, [r3, #0]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d101      	bne.n	8018e72 <get_fileinfo+0x16a>
 8018e6e:	2300      	movs	r3, #0
 8018e70:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8018e72:	683a      	ldr	r2, [r7, #0]
 8018e74:	69bb      	ldr	r3, [r7, #24]
 8018e76:	4413      	add	r3, r2
 8018e78:	3309      	adds	r3, #9
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	6a1b      	ldr	r3, [r3, #32]
 8018e82:	7ada      	ldrb	r2, [r3, #11]
 8018e84:	683b      	ldr	r3, [r7, #0]
 8018e86:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	6a1b      	ldr	r3, [r3, #32]
 8018e8c:	331c      	adds	r3, #28
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7fe fc1e 	bl	80176d0 <ld_dword>
 8018e94:	4602      	mov	r2, r0
 8018e96:	683b      	ldr	r3, [r7, #0]
 8018e98:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	6a1b      	ldr	r3, [r3, #32]
 8018e9e:	3316      	adds	r3, #22
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f7fe fc15 	bl	80176d0 <ld_dword>
 8018ea6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	b29a      	uxth	r2, r3
 8018eac:	683b      	ldr	r3, [r7, #0]
 8018eae:	80da      	strh	r2, [r3, #6]
 8018eb0:	68bb      	ldr	r3, [r7, #8]
 8018eb2:	0c1b      	lsrs	r3, r3, #16
 8018eb4:	b29a      	uxth	r2, r3
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	809a      	strh	r2, [r3, #4]
 8018eba:	e000      	b.n	8018ebe <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018ebc:	bf00      	nop
}
 8018ebe:	3720      	adds	r7, #32
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	bd80      	pop	{r7, pc}

08018ec4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	b08a      	sub	sp, #40	@ 0x28
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	6078      	str	r0, [r7, #4]
 8018ecc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018ece:	683b      	ldr	r3, [r7, #0]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	613b      	str	r3, [r7, #16]
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	68db      	ldr	r3, [r3, #12]
 8018eda:	60fb      	str	r3, [r7, #12]
 8018edc:	2300      	movs	r3, #0
 8018ede:	617b      	str	r3, [r7, #20]
 8018ee0:	697b      	ldr	r3, [r7, #20]
 8018ee2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018ee4:	69bb      	ldr	r3, [r7, #24]
 8018ee6:	1c5a      	adds	r2, r3, #1
 8018ee8:	61ba      	str	r2, [r7, #24]
 8018eea:	693a      	ldr	r2, [r7, #16]
 8018eec:	4413      	add	r3, r2
 8018eee:	781b      	ldrb	r3, [r3, #0]
 8018ef0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018ef2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018ef4:	2b1f      	cmp	r3, #31
 8018ef6:	d940      	bls.n	8018f7a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018ef8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018efa:	2b2f      	cmp	r3, #47	@ 0x2f
 8018efc:	d006      	beq.n	8018f0c <create_name+0x48>
 8018efe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f00:	2b5c      	cmp	r3, #92	@ 0x5c
 8018f02:	d110      	bne.n	8018f26 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018f04:	e002      	b.n	8018f0c <create_name+0x48>
 8018f06:	69bb      	ldr	r3, [r7, #24]
 8018f08:	3301      	adds	r3, #1
 8018f0a:	61bb      	str	r3, [r7, #24]
 8018f0c:	693a      	ldr	r2, [r7, #16]
 8018f0e:	69bb      	ldr	r3, [r7, #24]
 8018f10:	4413      	add	r3, r2
 8018f12:	781b      	ldrb	r3, [r3, #0]
 8018f14:	2b2f      	cmp	r3, #47	@ 0x2f
 8018f16:	d0f6      	beq.n	8018f06 <create_name+0x42>
 8018f18:	693a      	ldr	r2, [r7, #16]
 8018f1a:	69bb      	ldr	r3, [r7, #24]
 8018f1c:	4413      	add	r3, r2
 8018f1e:	781b      	ldrb	r3, [r3, #0]
 8018f20:	2b5c      	cmp	r3, #92	@ 0x5c
 8018f22:	d0f0      	beq.n	8018f06 <create_name+0x42>
			break;
 8018f24:	e02a      	b.n	8018f7c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018f26:	697b      	ldr	r3, [r7, #20]
 8018f28:	2bfe      	cmp	r3, #254	@ 0xfe
 8018f2a:	d901      	bls.n	8018f30 <create_name+0x6c>
 8018f2c:	2306      	movs	r3, #6
 8018f2e:	e17d      	b.n	801922c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018f30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f32:	b2db      	uxtb	r3, r3
 8018f34:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018f36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f38:	2101      	movs	r1, #1
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	f001 f9be 	bl	801a2bc <ff_convert>
 8018f40:	4603      	mov	r3, r0
 8018f42:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018f44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d101      	bne.n	8018f4e <create_name+0x8a>
 8018f4a:	2306      	movs	r3, #6
 8018f4c:	e16e      	b.n	801922c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018f4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f50:	2b7f      	cmp	r3, #127	@ 0x7f
 8018f52:	d809      	bhi.n	8018f68 <create_name+0xa4>
 8018f54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f56:	4619      	mov	r1, r3
 8018f58:	488d      	ldr	r0, [pc, #564]	@ (8019190 <create_name+0x2cc>)
 8018f5a:	f7fe fc86 	bl	801786a <chk_chr>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d001      	beq.n	8018f68 <create_name+0xa4>
 8018f64:	2306      	movs	r3, #6
 8018f66:	e161      	b.n	801922c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018f68:	697b      	ldr	r3, [r7, #20]
 8018f6a:	1c5a      	adds	r2, r3, #1
 8018f6c:	617a      	str	r2, [r7, #20]
 8018f6e:	005b      	lsls	r3, r3, #1
 8018f70:	68fa      	ldr	r2, [r7, #12]
 8018f72:	4413      	add	r3, r2
 8018f74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018f76:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018f78:	e7b4      	b.n	8018ee4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018f7a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018f7c:	693a      	ldr	r2, [r7, #16]
 8018f7e:	69bb      	ldr	r3, [r7, #24]
 8018f80:	441a      	add	r2, r3
 8018f82:	683b      	ldr	r3, [r7, #0]
 8018f84:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018f86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f88:	2b1f      	cmp	r3, #31
 8018f8a:	d801      	bhi.n	8018f90 <create_name+0xcc>
 8018f8c:	2304      	movs	r3, #4
 8018f8e:	e000      	b.n	8018f92 <create_name+0xce>
 8018f90:	2300      	movs	r3, #0
 8018f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018f96:	e011      	b.n	8018fbc <create_name+0xf8>
		w = lfn[di - 1];
 8018f98:	697b      	ldr	r3, [r7, #20]
 8018f9a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8018f9e:	3b01      	subs	r3, #1
 8018fa0:	005b      	lsls	r3, r3, #1
 8018fa2:	68fa      	ldr	r2, [r7, #12]
 8018fa4:	4413      	add	r3, r2
 8018fa6:	881b      	ldrh	r3, [r3, #0]
 8018fa8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8018faa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018fac:	2b20      	cmp	r3, #32
 8018fae:	d002      	beq.n	8018fb6 <create_name+0xf2>
 8018fb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018fb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8018fb4:	d106      	bne.n	8018fc4 <create_name+0x100>
		di--;
 8018fb6:	697b      	ldr	r3, [r7, #20]
 8018fb8:	3b01      	subs	r3, #1
 8018fba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d1ea      	bne.n	8018f98 <create_name+0xd4>
 8018fc2:	e000      	b.n	8018fc6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018fc4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018fc6:	697b      	ldr	r3, [r7, #20]
 8018fc8:	005b      	lsls	r3, r3, #1
 8018fca:	68fa      	ldr	r2, [r7, #12]
 8018fcc:	4413      	add	r3, r2
 8018fce:	2200      	movs	r2, #0
 8018fd0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018fd2:	697b      	ldr	r3, [r7, #20]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d101      	bne.n	8018fdc <create_name+0x118>
 8018fd8:	2306      	movs	r3, #6
 8018fda:	e127      	b.n	801922c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	3324      	adds	r3, #36	@ 0x24
 8018fe0:	220b      	movs	r2, #11
 8018fe2:	2120      	movs	r1, #32
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f7fe fbfe 	bl	80177e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018fea:	2300      	movs	r3, #0
 8018fec:	61bb      	str	r3, [r7, #24]
 8018fee:	e002      	b.n	8018ff6 <create_name+0x132>
 8018ff0:	69bb      	ldr	r3, [r7, #24]
 8018ff2:	3301      	adds	r3, #1
 8018ff4:	61bb      	str	r3, [r7, #24]
 8018ff6:	69bb      	ldr	r3, [r7, #24]
 8018ff8:	005b      	lsls	r3, r3, #1
 8018ffa:	68fa      	ldr	r2, [r7, #12]
 8018ffc:	4413      	add	r3, r2
 8018ffe:	881b      	ldrh	r3, [r3, #0]
 8019000:	2b20      	cmp	r3, #32
 8019002:	d0f5      	beq.n	8018ff0 <create_name+0x12c>
 8019004:	69bb      	ldr	r3, [r7, #24]
 8019006:	005b      	lsls	r3, r3, #1
 8019008:	68fa      	ldr	r2, [r7, #12]
 801900a:	4413      	add	r3, r2
 801900c:	881b      	ldrh	r3, [r3, #0]
 801900e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019010:	d0ee      	beq.n	8018ff0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8019012:	69bb      	ldr	r3, [r7, #24]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d009      	beq.n	801902c <create_name+0x168>
 8019018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801901c:	f043 0303 	orr.w	r3, r3, #3
 8019020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8019024:	e002      	b.n	801902c <create_name+0x168>
 8019026:	697b      	ldr	r3, [r7, #20]
 8019028:	3b01      	subs	r3, #1
 801902a:	617b      	str	r3, [r7, #20]
 801902c:	697b      	ldr	r3, [r7, #20]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d009      	beq.n	8019046 <create_name+0x182>
 8019032:	697b      	ldr	r3, [r7, #20]
 8019034:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8019038:	3b01      	subs	r3, #1
 801903a:	005b      	lsls	r3, r3, #1
 801903c:	68fa      	ldr	r2, [r7, #12]
 801903e:	4413      	add	r3, r2
 8019040:	881b      	ldrh	r3, [r3, #0]
 8019042:	2b2e      	cmp	r3, #46	@ 0x2e
 8019044:	d1ef      	bne.n	8019026 <create_name+0x162>

	i = b = 0; ni = 8;
 8019046:	2300      	movs	r3, #0
 8019048:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801904c:	2300      	movs	r3, #0
 801904e:	623b      	str	r3, [r7, #32]
 8019050:	2308      	movs	r3, #8
 8019052:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8019054:	69bb      	ldr	r3, [r7, #24]
 8019056:	1c5a      	adds	r2, r3, #1
 8019058:	61ba      	str	r2, [r7, #24]
 801905a:	005b      	lsls	r3, r3, #1
 801905c:	68fa      	ldr	r2, [r7, #12]
 801905e:	4413      	add	r3, r2
 8019060:	881b      	ldrh	r3, [r3, #0]
 8019062:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8019064:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019066:	2b00      	cmp	r3, #0
 8019068:	f000 8090 	beq.w	801918c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801906c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801906e:	2b20      	cmp	r3, #32
 8019070:	d006      	beq.n	8019080 <create_name+0x1bc>
 8019072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019074:	2b2e      	cmp	r3, #46	@ 0x2e
 8019076:	d10a      	bne.n	801908e <create_name+0x1ca>
 8019078:	69ba      	ldr	r2, [r7, #24]
 801907a:	697b      	ldr	r3, [r7, #20]
 801907c:	429a      	cmp	r2, r3
 801907e:	d006      	beq.n	801908e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8019080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019084:	f043 0303 	orr.w	r3, r3, #3
 8019088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801908c:	e07d      	b.n	801918a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801908e:	6a3a      	ldr	r2, [r7, #32]
 8019090:	69fb      	ldr	r3, [r7, #28]
 8019092:	429a      	cmp	r2, r3
 8019094:	d203      	bcs.n	801909e <create_name+0x1da>
 8019096:	69ba      	ldr	r2, [r7, #24]
 8019098:	697b      	ldr	r3, [r7, #20]
 801909a:	429a      	cmp	r2, r3
 801909c:	d123      	bne.n	80190e6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801909e:	69fb      	ldr	r3, [r7, #28]
 80190a0:	2b0b      	cmp	r3, #11
 80190a2:	d106      	bne.n	80190b2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80190a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80190a8:	f043 0303 	orr.w	r3, r3, #3
 80190ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80190b0:	e075      	b.n	801919e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80190b2:	69ba      	ldr	r2, [r7, #24]
 80190b4:	697b      	ldr	r3, [r7, #20]
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d005      	beq.n	80190c6 <create_name+0x202>
 80190ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80190be:	f043 0303 	orr.w	r3, r3, #3
 80190c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80190c6:	69ba      	ldr	r2, [r7, #24]
 80190c8:	697b      	ldr	r3, [r7, #20]
 80190ca:	429a      	cmp	r2, r3
 80190cc:	d866      	bhi.n	801919c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80190ce:	697b      	ldr	r3, [r7, #20]
 80190d0:	61bb      	str	r3, [r7, #24]
 80190d2:	2308      	movs	r3, #8
 80190d4:	623b      	str	r3, [r7, #32]
 80190d6:	230b      	movs	r3, #11
 80190d8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80190da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80190de:	009b      	lsls	r3, r3, #2
 80190e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80190e4:	e051      	b.n	801918a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80190e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80190e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80190ea:	d914      	bls.n	8019116 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80190ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80190ee:	2100      	movs	r1, #0
 80190f0:	4618      	mov	r0, r3
 80190f2:	f001 f8e3 	bl	801a2bc <ff_convert>
 80190f6:	4603      	mov	r3, r0
 80190f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80190fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d004      	beq.n	801910a <create_name+0x246>
 8019100:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019102:	3b80      	subs	r3, #128	@ 0x80
 8019104:	4a23      	ldr	r2, [pc, #140]	@ (8019194 <create_name+0x2d0>)
 8019106:	5cd3      	ldrb	r3, [r2, r3]
 8019108:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801910a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801910e:	f043 0302 	orr.w	r3, r3, #2
 8019112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8019116:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019118:	2b00      	cmp	r3, #0
 801911a:	d007      	beq.n	801912c <create_name+0x268>
 801911c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801911e:	4619      	mov	r1, r3
 8019120:	481d      	ldr	r0, [pc, #116]	@ (8019198 <create_name+0x2d4>)
 8019122:	f7fe fba2 	bl	801786a <chk_chr>
 8019126:	4603      	mov	r3, r0
 8019128:	2b00      	cmp	r3, #0
 801912a:	d008      	beq.n	801913e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801912c:	235f      	movs	r3, #95	@ 0x5f
 801912e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8019130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019134:	f043 0303 	orr.w	r3, r3, #3
 8019138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801913c:	e01b      	b.n	8019176 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801913e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019140:	2b40      	cmp	r3, #64	@ 0x40
 8019142:	d909      	bls.n	8019158 <create_name+0x294>
 8019144:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019146:	2b5a      	cmp	r3, #90	@ 0x5a
 8019148:	d806      	bhi.n	8019158 <create_name+0x294>
					b |= 2;
 801914a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801914e:	f043 0302 	orr.w	r3, r3, #2
 8019152:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019156:	e00e      	b.n	8019176 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8019158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801915a:	2b60      	cmp	r3, #96	@ 0x60
 801915c:	d90b      	bls.n	8019176 <create_name+0x2b2>
 801915e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019160:	2b7a      	cmp	r3, #122	@ 0x7a
 8019162:	d808      	bhi.n	8019176 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8019164:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019168:	f043 0301 	orr.w	r3, r3, #1
 801916c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019172:	3b20      	subs	r3, #32
 8019174:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8019176:	6a3b      	ldr	r3, [r7, #32]
 8019178:	1c5a      	adds	r2, r3, #1
 801917a:	623a      	str	r2, [r7, #32]
 801917c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801917e:	b2d1      	uxtb	r1, r2
 8019180:	687a      	ldr	r2, [r7, #4]
 8019182:	4413      	add	r3, r2
 8019184:	460a      	mov	r2, r1
 8019186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801918a:	e763      	b.n	8019054 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801918c:	bf00      	nop
 801918e:	e006      	b.n	801919e <create_name+0x2da>
 8019190:	08021fa8 	.word	0x08021fa8
 8019194:	08022808 	.word	0x08022808
 8019198:	08021fb4 	.word	0x08021fb4
			if (si > di) break;			/* No extension */
 801919c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80191a4:	2be5      	cmp	r3, #229	@ 0xe5
 80191a6:	d103      	bne.n	80191b0 <create_name+0x2ec>
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	2205      	movs	r2, #5
 80191ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80191b0:	69fb      	ldr	r3, [r7, #28]
 80191b2:	2b08      	cmp	r3, #8
 80191b4:	d104      	bne.n	80191c0 <create_name+0x2fc>
 80191b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80191ba:	009b      	lsls	r3, r3, #2
 80191bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80191c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80191c4:	f003 030c 	and.w	r3, r3, #12
 80191c8:	2b0c      	cmp	r3, #12
 80191ca:	d005      	beq.n	80191d8 <create_name+0x314>
 80191cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80191d0:	f003 0303 	and.w	r3, r3, #3
 80191d4:	2b03      	cmp	r3, #3
 80191d6:	d105      	bne.n	80191e4 <create_name+0x320>
 80191d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80191dc:	f043 0302 	orr.w	r3, r3, #2
 80191e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80191e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80191e8:	f003 0302 	and.w	r3, r3, #2
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d117      	bne.n	8019220 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80191f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80191f4:	f003 0303 	and.w	r3, r3, #3
 80191f8:	2b01      	cmp	r3, #1
 80191fa:	d105      	bne.n	8019208 <create_name+0x344>
 80191fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019200:	f043 0310 	orr.w	r3, r3, #16
 8019204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8019208:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801920c:	f003 030c 	and.w	r3, r3, #12
 8019210:	2b04      	cmp	r3, #4
 8019212:	d105      	bne.n	8019220 <create_name+0x35c>
 8019214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019218:	f043 0308 	orr.w	r3, r3, #8
 801921c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019226:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801922a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801922c:	4618      	mov	r0, r3
 801922e:	3728      	adds	r7, #40	@ 0x28
 8019230:	46bd      	mov	sp, r7
 8019232:	bd80      	pop	{r7, pc}

08019234 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8019234:	b580      	push	{r7, lr}
 8019236:	b086      	sub	sp, #24
 8019238:	af00      	add	r7, sp, #0
 801923a:	6078      	str	r0, [r7, #4]
 801923c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8019242:	693b      	ldr	r3, [r7, #16]
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019248:	e002      	b.n	8019250 <follow_path+0x1c>
 801924a:	683b      	ldr	r3, [r7, #0]
 801924c:	3301      	adds	r3, #1
 801924e:	603b      	str	r3, [r7, #0]
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	781b      	ldrb	r3, [r3, #0]
 8019254:	2b2f      	cmp	r3, #47	@ 0x2f
 8019256:	d0f8      	beq.n	801924a <follow_path+0x16>
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	2b5c      	cmp	r3, #92	@ 0x5c
 801925e:	d0f4      	beq.n	801924a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8019260:	693b      	ldr	r3, [r7, #16]
 8019262:	2200      	movs	r2, #0
 8019264:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8019266:	683b      	ldr	r3, [r7, #0]
 8019268:	781b      	ldrb	r3, [r3, #0]
 801926a:	2b1f      	cmp	r3, #31
 801926c:	d80a      	bhi.n	8019284 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	2280      	movs	r2, #128	@ 0x80
 8019272:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8019276:	2100      	movs	r1, #0
 8019278:	6878      	ldr	r0, [r7, #4]
 801927a:	f7ff f83e 	bl	80182fa <dir_sdi>
 801927e:	4603      	mov	r3, r0
 8019280:	75fb      	strb	r3, [r7, #23]
 8019282:	e043      	b.n	801930c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019284:	463b      	mov	r3, r7
 8019286:	4619      	mov	r1, r3
 8019288:	6878      	ldr	r0, [r7, #4]
 801928a:	f7ff fe1b 	bl	8018ec4 <create_name>
 801928e:	4603      	mov	r3, r0
 8019290:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019292:	7dfb      	ldrb	r3, [r7, #23]
 8019294:	2b00      	cmp	r3, #0
 8019296:	d134      	bne.n	8019302 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	f7ff fb7c 	bl	8018996 <dir_find>
 801929e:	4603      	mov	r3, r0
 80192a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80192a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80192aa:	7dfb      	ldrb	r3, [r7, #23]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d00a      	beq.n	80192c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80192b0:	7dfb      	ldrb	r3, [r7, #23]
 80192b2:	2b04      	cmp	r3, #4
 80192b4:	d127      	bne.n	8019306 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80192b6:	7afb      	ldrb	r3, [r7, #11]
 80192b8:	f003 0304 	and.w	r3, r3, #4
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d122      	bne.n	8019306 <follow_path+0xd2>
 80192c0:	2305      	movs	r3, #5
 80192c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80192c4:	e01f      	b.n	8019306 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80192c6:	7afb      	ldrb	r3, [r7, #11]
 80192c8:	f003 0304 	and.w	r3, r3, #4
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d11c      	bne.n	801930a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80192d0:	693b      	ldr	r3, [r7, #16]
 80192d2:	799b      	ldrb	r3, [r3, #6]
 80192d4:	f003 0310 	and.w	r3, r3, #16
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d102      	bne.n	80192e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80192dc:	2305      	movs	r3, #5
 80192de:	75fb      	strb	r3, [r7, #23]
 80192e0:	e014      	b.n	801930c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	695b      	ldr	r3, [r3, #20]
 80192ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80192f0:	4413      	add	r3, r2
 80192f2:	4619      	mov	r1, r3
 80192f4:	68f8      	ldr	r0, [r7, #12]
 80192f6:	f7ff f987 	bl	8018608 <ld_clust>
 80192fa:	4602      	mov	r2, r0
 80192fc:	693b      	ldr	r3, [r7, #16]
 80192fe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019300:	e7c0      	b.n	8019284 <follow_path+0x50>
			if (res != FR_OK) break;
 8019302:	bf00      	nop
 8019304:	e002      	b.n	801930c <follow_path+0xd8>
				break;
 8019306:	bf00      	nop
 8019308:	e000      	b.n	801930c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801930a:	bf00      	nop
			}
		}
	}

	return res;
 801930c:	7dfb      	ldrb	r3, [r7, #23]
}
 801930e:	4618      	mov	r0, r3
 8019310:	3718      	adds	r7, #24
 8019312:	46bd      	mov	sp, r7
 8019314:	bd80      	pop	{r7, pc}

08019316 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8019316:	b480      	push	{r7}
 8019318:	b087      	sub	sp, #28
 801931a:	af00      	add	r7, sp, #0
 801931c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801931e:	f04f 33ff 	mov.w	r3, #4294967295
 8019322:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d031      	beq.n	8019390 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	617b      	str	r3, [r7, #20]
 8019332:	e002      	b.n	801933a <get_ldnumber+0x24>
 8019334:	697b      	ldr	r3, [r7, #20]
 8019336:	3301      	adds	r3, #1
 8019338:	617b      	str	r3, [r7, #20]
 801933a:	697b      	ldr	r3, [r7, #20]
 801933c:	781b      	ldrb	r3, [r3, #0]
 801933e:	2b1f      	cmp	r3, #31
 8019340:	d903      	bls.n	801934a <get_ldnumber+0x34>
 8019342:	697b      	ldr	r3, [r7, #20]
 8019344:	781b      	ldrb	r3, [r3, #0]
 8019346:	2b3a      	cmp	r3, #58	@ 0x3a
 8019348:	d1f4      	bne.n	8019334 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801934a:	697b      	ldr	r3, [r7, #20]
 801934c:	781b      	ldrb	r3, [r3, #0]
 801934e:	2b3a      	cmp	r3, #58	@ 0x3a
 8019350:	d11c      	bne.n	801938c <get_ldnumber+0x76>
			tp = *path;
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	1c5a      	adds	r2, r3, #1
 801935c:	60fa      	str	r2, [r7, #12]
 801935e:	781b      	ldrb	r3, [r3, #0]
 8019360:	3b30      	subs	r3, #48	@ 0x30
 8019362:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019364:	68bb      	ldr	r3, [r7, #8]
 8019366:	2b09      	cmp	r3, #9
 8019368:	d80e      	bhi.n	8019388 <get_ldnumber+0x72>
 801936a:	68fa      	ldr	r2, [r7, #12]
 801936c:	697b      	ldr	r3, [r7, #20]
 801936e:	429a      	cmp	r2, r3
 8019370:	d10a      	bne.n	8019388 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019372:	68bb      	ldr	r3, [r7, #8]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d107      	bne.n	8019388 <get_ldnumber+0x72>
					vol = (int)i;
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801937c:	697b      	ldr	r3, [r7, #20]
 801937e:	3301      	adds	r3, #1
 8019380:	617b      	str	r3, [r7, #20]
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	697a      	ldr	r2, [r7, #20]
 8019386:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019388:	693b      	ldr	r3, [r7, #16]
 801938a:	e002      	b.n	8019392 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801938c:	2300      	movs	r3, #0
 801938e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8019390:	693b      	ldr	r3, [r7, #16]
}
 8019392:	4618      	mov	r0, r3
 8019394:	371c      	adds	r7, #28
 8019396:	46bd      	mov	sp, r7
 8019398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939c:	4770      	bx	lr
	...

080193a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b082      	sub	sp, #8
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
 80193a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	2200      	movs	r2, #0
 80193ae:	70da      	strb	r2, [r3, #3]
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	f04f 32ff 	mov.w	r2, #4294967295
 80193b6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80193b8:	6839      	ldr	r1, [r7, #0]
 80193ba:	6878      	ldr	r0, [r7, #4]
 80193bc:	f7fe fc20 	bl	8017c00 <move_window>
 80193c0:	4603      	mov	r3, r0
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d001      	beq.n	80193ca <check_fs+0x2a>
 80193c6:	2304      	movs	r3, #4
 80193c8:	e038      	b.n	801943c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	3334      	adds	r3, #52	@ 0x34
 80193ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80193d2:	4618      	mov	r0, r3
 80193d4:	f7fe f964 	bl	80176a0 <ld_word>
 80193d8:	4603      	mov	r3, r0
 80193da:	461a      	mov	r2, r3
 80193dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80193e0:	429a      	cmp	r2, r3
 80193e2:	d001      	beq.n	80193e8 <check_fs+0x48>
 80193e4:	2303      	movs	r3, #3
 80193e6:	e029      	b.n	801943c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80193ee:	2be9      	cmp	r3, #233	@ 0xe9
 80193f0:	d009      	beq.n	8019406 <check_fs+0x66>
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80193f8:	2beb      	cmp	r3, #235	@ 0xeb
 80193fa:	d11e      	bne.n	801943a <check_fs+0x9a>
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8019402:	2b90      	cmp	r3, #144	@ 0x90
 8019404:	d119      	bne.n	801943a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	3334      	adds	r3, #52	@ 0x34
 801940a:	3336      	adds	r3, #54	@ 0x36
 801940c:	4618      	mov	r0, r3
 801940e:	f7fe f95f 	bl	80176d0 <ld_dword>
 8019412:	4603      	mov	r3, r0
 8019414:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8019418:	4a0a      	ldr	r2, [pc, #40]	@ (8019444 <check_fs+0xa4>)
 801941a:	4293      	cmp	r3, r2
 801941c:	d101      	bne.n	8019422 <check_fs+0x82>
 801941e:	2300      	movs	r3, #0
 8019420:	e00c      	b.n	801943c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	3334      	adds	r3, #52	@ 0x34
 8019426:	3352      	adds	r3, #82	@ 0x52
 8019428:	4618      	mov	r0, r3
 801942a:	f7fe f951 	bl	80176d0 <ld_dword>
 801942e:	4603      	mov	r3, r0
 8019430:	4a05      	ldr	r2, [pc, #20]	@ (8019448 <check_fs+0xa8>)
 8019432:	4293      	cmp	r3, r2
 8019434:	d101      	bne.n	801943a <check_fs+0x9a>
 8019436:	2300      	movs	r3, #0
 8019438:	e000      	b.n	801943c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801943a:	2302      	movs	r3, #2
}
 801943c:	4618      	mov	r0, r3
 801943e:	3708      	adds	r7, #8
 8019440:	46bd      	mov	sp, r7
 8019442:	bd80      	pop	{r7, pc}
 8019444:	00544146 	.word	0x00544146
 8019448:	33544146 	.word	0x33544146

0801944c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b096      	sub	sp, #88	@ 0x58
 8019450:	af00      	add	r7, sp, #0
 8019452:	60f8      	str	r0, [r7, #12]
 8019454:	60b9      	str	r1, [r7, #8]
 8019456:	4613      	mov	r3, r2
 8019458:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801945a:	68bb      	ldr	r3, [r7, #8]
 801945c:	2200      	movs	r2, #0
 801945e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8019460:	68f8      	ldr	r0, [r7, #12]
 8019462:	f7ff ff58 	bl	8019316 <get_ldnumber>
 8019466:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801946a:	2b00      	cmp	r3, #0
 801946c:	da01      	bge.n	8019472 <find_volume+0x26>
 801946e:	230b      	movs	r3, #11
 8019470:	e230      	b.n	80198d4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8019472:	4aa1      	ldr	r2, [pc, #644]	@ (80196f8 <find_volume+0x2ac>)
 8019474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801947a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801947c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801947e:	2b00      	cmp	r3, #0
 8019480:	d101      	bne.n	8019486 <find_volume+0x3a>
 8019482:	230c      	movs	r3, #12
 8019484:	e226      	b.n	80198d4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019486:	68bb      	ldr	r3, [r7, #8]
 8019488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801948a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801948c:	79fb      	ldrb	r3, [r7, #7]
 801948e:	f023 0301 	bic.w	r3, r3, #1
 8019492:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019496:	781b      	ldrb	r3, [r3, #0]
 8019498:	2b00      	cmp	r3, #0
 801949a:	d01a      	beq.n	80194d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801949c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801949e:	785b      	ldrb	r3, [r3, #1]
 80194a0:	4618      	mov	r0, r3
 80194a2:	f7fe f85f 	bl	8017564 <disk_status>
 80194a6:	4603      	mov	r3, r0
 80194a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80194ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80194b0:	f003 0301 	and.w	r3, r3, #1
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d10c      	bne.n	80194d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80194b8:	79fb      	ldrb	r3, [r7, #7]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d007      	beq.n	80194ce <find_volume+0x82>
 80194be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80194c2:	f003 0304 	and.w	r3, r3, #4
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d001      	beq.n	80194ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80194ca:	230a      	movs	r3, #10
 80194cc:	e202      	b.n	80198d4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80194ce:	2300      	movs	r3, #0
 80194d0:	e200      	b.n	80198d4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80194d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80194d4:	2200      	movs	r2, #0
 80194d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80194d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194da:	b2da      	uxtb	r2, r3
 80194dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80194de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80194e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80194e2:	785b      	ldrb	r3, [r3, #1]
 80194e4:	4618      	mov	r0, r3
 80194e6:	f7fe f857 	bl	8017598 <disk_initialize>
 80194ea:	4603      	mov	r3, r0
 80194ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80194f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80194f4:	f003 0301 	and.w	r3, r3, #1
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d001      	beq.n	8019500 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80194fc:	2303      	movs	r3, #3
 80194fe:	e1e9      	b.n	80198d4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8019500:	79fb      	ldrb	r3, [r7, #7]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d007      	beq.n	8019516 <find_volume+0xca>
 8019506:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801950a:	f003 0304 	and.w	r3, r3, #4
 801950e:	2b00      	cmp	r3, #0
 8019510:	d001      	beq.n	8019516 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8019512:	230a      	movs	r3, #10
 8019514:	e1de      	b.n	80198d4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8019516:	2300      	movs	r3, #0
 8019518:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801951a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801951c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801951e:	f7ff ff3f 	bl	80193a0 <check_fs>
 8019522:	4603      	mov	r3, r0
 8019524:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019528:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801952c:	2b02      	cmp	r3, #2
 801952e:	d149      	bne.n	80195c4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019530:	2300      	movs	r3, #0
 8019532:	643b      	str	r3, [r7, #64]	@ 0x40
 8019534:	e01e      	b.n	8019574 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8019536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019538:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801953c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801953e:	011b      	lsls	r3, r3, #4
 8019540:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8019544:	4413      	add	r3, r2
 8019546:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801954a:	3304      	adds	r3, #4
 801954c:	781b      	ldrb	r3, [r3, #0]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d006      	beq.n	8019560 <find_volume+0x114>
 8019552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019554:	3308      	adds	r3, #8
 8019556:	4618      	mov	r0, r3
 8019558:	f7fe f8ba 	bl	80176d0 <ld_dword>
 801955c:	4602      	mov	r2, r0
 801955e:	e000      	b.n	8019562 <find_volume+0x116>
 8019560:	2200      	movs	r2, #0
 8019562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019564:	009b      	lsls	r3, r3, #2
 8019566:	3358      	adds	r3, #88	@ 0x58
 8019568:	443b      	add	r3, r7
 801956a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801956e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019570:	3301      	adds	r3, #1
 8019572:	643b      	str	r3, [r7, #64]	@ 0x40
 8019574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019576:	2b03      	cmp	r3, #3
 8019578:	d9dd      	bls.n	8019536 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801957a:	2300      	movs	r3, #0
 801957c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801957e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019580:	2b00      	cmp	r3, #0
 8019582:	d002      	beq.n	801958a <find_volume+0x13e>
 8019584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019586:	3b01      	subs	r3, #1
 8019588:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801958a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801958c:	009b      	lsls	r3, r3, #2
 801958e:	3358      	adds	r3, #88	@ 0x58
 8019590:	443b      	add	r3, r7
 8019592:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8019596:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801959a:	2b00      	cmp	r3, #0
 801959c:	d005      	beq.n	80195aa <find_volume+0x15e>
 801959e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80195a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80195a2:	f7ff fefd 	bl	80193a0 <check_fs>
 80195a6:	4603      	mov	r3, r0
 80195a8:	e000      	b.n	80195ac <find_volume+0x160>
 80195aa:	2303      	movs	r3, #3
 80195ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80195b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80195b4:	2b01      	cmp	r3, #1
 80195b6:	d905      	bls.n	80195c4 <find_volume+0x178>
 80195b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80195ba:	3301      	adds	r3, #1
 80195bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80195be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80195c0:	2b03      	cmp	r3, #3
 80195c2:	d9e2      	bls.n	801958a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80195c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80195c8:	2b04      	cmp	r3, #4
 80195ca:	d101      	bne.n	80195d0 <find_volume+0x184>
 80195cc:	2301      	movs	r3, #1
 80195ce:	e181      	b.n	80198d4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80195d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80195d4:	2b01      	cmp	r3, #1
 80195d6:	d901      	bls.n	80195dc <find_volume+0x190>
 80195d8:	230d      	movs	r3, #13
 80195da:	e17b      	b.n	80198d4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80195dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195de:	3334      	adds	r3, #52	@ 0x34
 80195e0:	330b      	adds	r3, #11
 80195e2:	4618      	mov	r0, r3
 80195e4:	f7fe f85c 	bl	80176a0 <ld_word>
 80195e8:	4603      	mov	r3, r0
 80195ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80195ee:	d001      	beq.n	80195f4 <find_volume+0x1a8>
 80195f0:	230d      	movs	r3, #13
 80195f2:	e16f      	b.n	80198d4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80195f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195f6:	3334      	adds	r3, #52	@ 0x34
 80195f8:	3316      	adds	r3, #22
 80195fa:	4618      	mov	r0, r3
 80195fc:	f7fe f850 	bl	80176a0 <ld_word>
 8019600:	4603      	mov	r3, r0
 8019602:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8019604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019606:	2b00      	cmp	r3, #0
 8019608:	d106      	bne.n	8019618 <find_volume+0x1cc>
 801960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801960c:	3334      	adds	r3, #52	@ 0x34
 801960e:	3324      	adds	r3, #36	@ 0x24
 8019610:	4618      	mov	r0, r3
 8019612:	f7fe f85d 	bl	80176d0 <ld_dword>
 8019616:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8019618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801961a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801961c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801961e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019620:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8019624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019626:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801962a:	789b      	ldrb	r3, [r3, #2]
 801962c:	2b01      	cmp	r3, #1
 801962e:	d005      	beq.n	801963c <find_volume+0x1f0>
 8019630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019632:	789b      	ldrb	r3, [r3, #2]
 8019634:	2b02      	cmp	r3, #2
 8019636:	d001      	beq.n	801963c <find_volume+0x1f0>
 8019638:	230d      	movs	r3, #13
 801963a:	e14b      	b.n	80198d4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801963c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801963e:	789b      	ldrb	r3, [r3, #2]
 8019640:	461a      	mov	r2, r3
 8019642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019644:	fb02 f303 	mul.w	r3, r2, r3
 8019648:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801964c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8019650:	461a      	mov	r2, r3
 8019652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019654:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8019656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019658:	895b      	ldrh	r3, [r3, #10]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d008      	beq.n	8019670 <find_volume+0x224>
 801965e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019660:	895b      	ldrh	r3, [r3, #10]
 8019662:	461a      	mov	r2, r3
 8019664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019666:	895b      	ldrh	r3, [r3, #10]
 8019668:	3b01      	subs	r3, #1
 801966a:	4013      	ands	r3, r2
 801966c:	2b00      	cmp	r3, #0
 801966e:	d001      	beq.n	8019674 <find_volume+0x228>
 8019670:	230d      	movs	r3, #13
 8019672:	e12f      	b.n	80198d4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019676:	3334      	adds	r3, #52	@ 0x34
 8019678:	3311      	adds	r3, #17
 801967a:	4618      	mov	r0, r3
 801967c:	f7fe f810 	bl	80176a0 <ld_word>
 8019680:	4603      	mov	r3, r0
 8019682:	461a      	mov	r2, r3
 8019684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019686:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801968a:	891b      	ldrh	r3, [r3, #8]
 801968c:	f003 030f 	and.w	r3, r3, #15
 8019690:	b29b      	uxth	r3, r3
 8019692:	2b00      	cmp	r3, #0
 8019694:	d001      	beq.n	801969a <find_volume+0x24e>
 8019696:	230d      	movs	r3, #13
 8019698:	e11c      	b.n	80198d4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801969c:	3334      	adds	r3, #52	@ 0x34
 801969e:	3313      	adds	r3, #19
 80196a0:	4618      	mov	r0, r3
 80196a2:	f7fd fffd 	bl	80176a0 <ld_word>
 80196a6:	4603      	mov	r3, r0
 80196a8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80196aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d106      	bne.n	80196be <find_volume+0x272>
 80196b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196b2:	3334      	adds	r3, #52	@ 0x34
 80196b4:	3320      	adds	r3, #32
 80196b6:	4618      	mov	r0, r3
 80196b8:	f7fe f80a 	bl	80176d0 <ld_dword>
 80196bc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80196be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196c0:	3334      	adds	r3, #52	@ 0x34
 80196c2:	330e      	adds	r3, #14
 80196c4:	4618      	mov	r0, r3
 80196c6:	f7fd ffeb 	bl	80176a0 <ld_word>
 80196ca:	4603      	mov	r3, r0
 80196cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80196ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d101      	bne.n	80196d8 <find_volume+0x28c>
 80196d4:	230d      	movs	r3, #13
 80196d6:	e0fd      	b.n	80198d4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80196d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80196da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80196dc:	4413      	add	r3, r2
 80196de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80196e0:	8912      	ldrh	r2, [r2, #8]
 80196e2:	0912      	lsrs	r2, r2, #4
 80196e4:	b292      	uxth	r2, r2
 80196e6:	4413      	add	r3, r2
 80196e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80196ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80196ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196ee:	429a      	cmp	r2, r3
 80196f0:	d204      	bcs.n	80196fc <find_volume+0x2b0>
 80196f2:	230d      	movs	r3, #13
 80196f4:	e0ee      	b.n	80198d4 <find_volume+0x488>
 80196f6:	bf00      	nop
 80196f8:	20001aac 	.word	0x20001aac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80196fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80196fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019700:	1ad3      	subs	r3, r2, r3
 8019702:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019704:	8952      	ldrh	r2, [r2, #10]
 8019706:	fbb3 f3f2 	udiv	r3, r3, r2
 801970a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801970e:	2b00      	cmp	r3, #0
 8019710:	d101      	bne.n	8019716 <find_volume+0x2ca>
 8019712:	230d      	movs	r3, #13
 8019714:	e0de      	b.n	80198d4 <find_volume+0x488>
		fmt = FS_FAT32;
 8019716:	2303      	movs	r3, #3
 8019718:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801971c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801971e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8019722:	4293      	cmp	r3, r2
 8019724:	d802      	bhi.n	801972c <find_volume+0x2e0>
 8019726:	2302      	movs	r3, #2
 8019728:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801972c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801972e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8019732:	4293      	cmp	r3, r2
 8019734:	d802      	bhi.n	801973c <find_volume+0x2f0>
 8019736:	2301      	movs	r3, #1
 8019738:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801973c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801973e:	1c9a      	adds	r2, r3, #2
 8019740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019742:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8019744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019746:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019748:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801974a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801974c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801974e:	441a      	add	r2, r3
 8019750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019752:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8019754:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019758:	441a      	add	r2, r3
 801975a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801975c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801975e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019762:	2b03      	cmp	r3, #3
 8019764:	d11e      	bne.n	80197a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019768:	3334      	adds	r3, #52	@ 0x34
 801976a:	332a      	adds	r3, #42	@ 0x2a
 801976c:	4618      	mov	r0, r3
 801976e:	f7fd ff97 	bl	80176a0 <ld_word>
 8019772:	4603      	mov	r3, r0
 8019774:	2b00      	cmp	r3, #0
 8019776:	d001      	beq.n	801977c <find_volume+0x330>
 8019778:	230d      	movs	r3, #13
 801977a:	e0ab      	b.n	80198d4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801977c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801977e:	891b      	ldrh	r3, [r3, #8]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d001      	beq.n	8019788 <find_volume+0x33c>
 8019784:	230d      	movs	r3, #13
 8019786:	e0a5      	b.n	80198d4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801978a:	3334      	adds	r3, #52	@ 0x34
 801978c:	332c      	adds	r3, #44	@ 0x2c
 801978e:	4618      	mov	r0, r3
 8019790:	f7fd ff9e 	bl	80176d0 <ld_dword>
 8019794:	4602      	mov	r2, r0
 8019796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019798:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801979a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801979c:	699b      	ldr	r3, [r3, #24]
 801979e:	009b      	lsls	r3, r3, #2
 80197a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80197a2:	e01f      	b.n	80197e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80197a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197a6:	891b      	ldrh	r3, [r3, #8]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d101      	bne.n	80197b0 <find_volume+0x364>
 80197ac:	230d      	movs	r3, #13
 80197ae:	e091      	b.n	80198d4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80197b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80197b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80197b6:	441a      	add	r2, r3
 80197b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197ba:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80197bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80197c0:	2b02      	cmp	r3, #2
 80197c2:	d103      	bne.n	80197cc <find_volume+0x380>
 80197c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197c6:	699b      	ldr	r3, [r3, #24]
 80197c8:	005b      	lsls	r3, r3, #1
 80197ca:	e00a      	b.n	80197e2 <find_volume+0x396>
 80197cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197ce:	699a      	ldr	r2, [r3, #24]
 80197d0:	4613      	mov	r3, r2
 80197d2:	005b      	lsls	r3, r3, #1
 80197d4:	4413      	add	r3, r2
 80197d6:	085a      	lsrs	r2, r3, #1
 80197d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197da:	699b      	ldr	r3, [r3, #24]
 80197dc:	f003 0301 	and.w	r3, r3, #1
 80197e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80197e2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80197e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197e6:	69da      	ldr	r2, [r3, #28]
 80197e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80197ea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80197ee:	0a5b      	lsrs	r3, r3, #9
 80197f0:	429a      	cmp	r2, r3
 80197f2:	d201      	bcs.n	80197f8 <find_volume+0x3ac>
 80197f4:	230d      	movs	r3, #13
 80197f6:	e06d      	b.n	80198d4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80197f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197fa:	f04f 32ff 	mov.w	r2, #4294967295
 80197fe:	615a      	str	r2, [r3, #20]
 8019800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019802:	695a      	ldr	r2, [r3, #20]
 8019804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019806:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8019808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801980a:	2280      	movs	r2, #128	@ 0x80
 801980c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801980e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019812:	2b03      	cmp	r3, #3
 8019814:	d149      	bne.n	80198aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019818:	3334      	adds	r3, #52	@ 0x34
 801981a:	3330      	adds	r3, #48	@ 0x30
 801981c:	4618      	mov	r0, r3
 801981e:	f7fd ff3f 	bl	80176a0 <ld_word>
 8019822:	4603      	mov	r3, r0
 8019824:	2b01      	cmp	r3, #1
 8019826:	d140      	bne.n	80198aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801982a:	3301      	adds	r3, #1
 801982c:	4619      	mov	r1, r3
 801982e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019830:	f7fe f9e6 	bl	8017c00 <move_window>
 8019834:	4603      	mov	r3, r0
 8019836:	2b00      	cmp	r3, #0
 8019838:	d137      	bne.n	80198aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801983c:	2200      	movs	r2, #0
 801983e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019842:	3334      	adds	r3, #52	@ 0x34
 8019844:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019848:	4618      	mov	r0, r3
 801984a:	f7fd ff29 	bl	80176a0 <ld_word>
 801984e:	4603      	mov	r3, r0
 8019850:	461a      	mov	r2, r3
 8019852:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8019856:	429a      	cmp	r2, r3
 8019858:	d127      	bne.n	80198aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801985a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801985c:	3334      	adds	r3, #52	@ 0x34
 801985e:	4618      	mov	r0, r3
 8019860:	f7fd ff36 	bl	80176d0 <ld_dword>
 8019864:	4603      	mov	r3, r0
 8019866:	4a1d      	ldr	r2, [pc, #116]	@ (80198dc <find_volume+0x490>)
 8019868:	4293      	cmp	r3, r2
 801986a:	d11e      	bne.n	80198aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801986c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801986e:	3334      	adds	r3, #52	@ 0x34
 8019870:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8019874:	4618      	mov	r0, r3
 8019876:	f7fd ff2b 	bl	80176d0 <ld_dword>
 801987a:	4603      	mov	r3, r0
 801987c:	4a18      	ldr	r2, [pc, #96]	@ (80198e0 <find_volume+0x494>)
 801987e:	4293      	cmp	r3, r2
 8019880:	d113      	bne.n	80198aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019884:	3334      	adds	r3, #52	@ 0x34
 8019886:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801988a:	4618      	mov	r0, r3
 801988c:	f7fd ff20 	bl	80176d0 <ld_dword>
 8019890:	4602      	mov	r2, r0
 8019892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019894:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019898:	3334      	adds	r3, #52	@ 0x34
 801989a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801989e:	4618      	mov	r0, r3
 80198a0:	f7fd ff16 	bl	80176d0 <ld_dword>
 80198a4:	4602      	mov	r2, r0
 80198a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198a8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80198aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198ac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80198b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80198b2:	4b0c      	ldr	r3, [pc, #48]	@ (80198e4 <find_volume+0x498>)
 80198b4:	881b      	ldrh	r3, [r3, #0]
 80198b6:	3301      	adds	r3, #1
 80198b8:	b29a      	uxth	r2, r3
 80198ba:	4b0a      	ldr	r3, [pc, #40]	@ (80198e4 <find_volume+0x498>)
 80198bc:	801a      	strh	r2, [r3, #0]
 80198be:	4b09      	ldr	r3, [pc, #36]	@ (80198e4 <find_volume+0x498>)
 80198c0:	881a      	ldrh	r2, [r3, #0]
 80198c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198c4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80198c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198c8:	4a07      	ldr	r2, [pc, #28]	@ (80198e8 <find_volume+0x49c>)
 80198ca:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80198cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80198ce:	f7fe f92f 	bl	8017b30 <clear_lock>
#endif
	return FR_OK;
 80198d2:	2300      	movs	r3, #0
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	3758      	adds	r7, #88	@ 0x58
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd80      	pop	{r7, pc}
 80198dc:	41615252 	.word	0x41615252
 80198e0:	61417272 	.word	0x61417272
 80198e4:	20001ab0 	.word	0x20001ab0
 80198e8:	20001ad4 	.word	0x20001ad4

080198ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b084      	sub	sp, #16
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
 80198f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80198f6:	2309      	movs	r3, #9
 80198f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d01c      	beq.n	801993a <validate+0x4e>
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	2b00      	cmp	r3, #0
 8019906:	d018      	beq.n	801993a <validate+0x4e>
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	781b      	ldrb	r3, [r3, #0]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d013      	beq.n	801993a <validate+0x4e>
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	889a      	ldrh	r2, [r3, #4]
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	88db      	ldrh	r3, [r3, #6]
 801991c:	429a      	cmp	r2, r3
 801991e:	d10c      	bne.n	801993a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	785b      	ldrb	r3, [r3, #1]
 8019926:	4618      	mov	r0, r3
 8019928:	f7fd fe1c 	bl	8017564 <disk_status>
 801992c:	4603      	mov	r3, r0
 801992e:	f003 0301 	and.w	r3, r3, #1
 8019932:	2b00      	cmp	r3, #0
 8019934:	d101      	bne.n	801993a <validate+0x4e>
			res = FR_OK;
 8019936:	2300      	movs	r3, #0
 8019938:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801993a:	7bfb      	ldrb	r3, [r7, #15]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d102      	bne.n	8019946 <validate+0x5a>
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	e000      	b.n	8019948 <validate+0x5c>
 8019946:	2300      	movs	r3, #0
 8019948:	683a      	ldr	r2, [r7, #0]
 801994a:	6013      	str	r3, [r2, #0]
	return res;
 801994c:	7bfb      	ldrb	r3, [r7, #15]
}
 801994e:	4618      	mov	r0, r3
 8019950:	3710      	adds	r7, #16
 8019952:	46bd      	mov	sp, r7
 8019954:	bd80      	pop	{r7, pc}
	...

08019958 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b088      	sub	sp, #32
 801995c:	af00      	add	r7, sp, #0
 801995e:	60f8      	str	r0, [r7, #12]
 8019960:	60b9      	str	r1, [r7, #8]
 8019962:	4613      	mov	r3, r2
 8019964:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801996a:	f107 0310 	add.w	r3, r7, #16
 801996e:	4618      	mov	r0, r3
 8019970:	f7ff fcd1 	bl	8019316 <get_ldnumber>
 8019974:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8019976:	69fb      	ldr	r3, [r7, #28]
 8019978:	2b00      	cmp	r3, #0
 801997a:	da01      	bge.n	8019980 <f_mount+0x28>
 801997c:	230b      	movs	r3, #11
 801997e:	e02b      	b.n	80199d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019980:	4a17      	ldr	r2, [pc, #92]	@ (80199e0 <f_mount+0x88>)
 8019982:	69fb      	ldr	r3, [r7, #28]
 8019984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019988:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801998a:	69bb      	ldr	r3, [r7, #24]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d005      	beq.n	801999c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019990:	69b8      	ldr	r0, [r7, #24]
 8019992:	f7fe f8cd 	bl	8017b30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8019996:	69bb      	ldr	r3, [r7, #24]
 8019998:	2200      	movs	r2, #0
 801999a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d002      	beq.n	80199a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	2200      	movs	r2, #0
 80199a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80199a8:	68fa      	ldr	r2, [r7, #12]
 80199aa:	490d      	ldr	r1, [pc, #52]	@ (80199e0 <f_mount+0x88>)
 80199ac:	69fb      	ldr	r3, [r7, #28]
 80199ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d002      	beq.n	80199be <f_mount+0x66>
 80199b8:	79fb      	ldrb	r3, [r7, #7]
 80199ba:	2b01      	cmp	r3, #1
 80199bc:	d001      	beq.n	80199c2 <f_mount+0x6a>
 80199be:	2300      	movs	r3, #0
 80199c0:	e00a      	b.n	80199d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80199c2:	f107 010c 	add.w	r1, r7, #12
 80199c6:	f107 0308 	add.w	r3, r7, #8
 80199ca:	2200      	movs	r2, #0
 80199cc:	4618      	mov	r0, r3
 80199ce:	f7ff fd3d 	bl	801944c <find_volume>
 80199d2:	4603      	mov	r3, r0
 80199d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80199d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80199d8:	4618      	mov	r0, r3
 80199da:	3720      	adds	r7, #32
 80199dc:	46bd      	mov	sp, r7
 80199de:	bd80      	pop	{r7, pc}
 80199e0:	20001aac 	.word	0x20001aac

080199e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b09a      	sub	sp, #104	@ 0x68
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	60f8      	str	r0, [r7, #12]
 80199ec:	60b9      	str	r1, [r7, #8]
 80199ee:	4613      	mov	r3, r2
 80199f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d101      	bne.n	80199fc <f_open+0x18>
 80199f8:	2309      	movs	r3, #9
 80199fa:	e1a9      	b.n	8019d50 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80199fc:	79fb      	ldrb	r3, [r7, #7]
 80199fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019a02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8019a04:	79fa      	ldrb	r2, [r7, #7]
 8019a06:	f107 0114 	add.w	r1, r7, #20
 8019a0a:	f107 0308 	add.w	r3, r7, #8
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f7ff fd1c 	bl	801944c <find_volume>
 8019a14:	4603      	mov	r3, r0
 8019a16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8019a1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	f040 818d 	bne.w	8019d3e <f_open+0x35a>
		dj.obj.fs = fs;
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019a28:	68ba      	ldr	r2, [r7, #8]
 8019a2a:	f107 0318 	add.w	r3, r7, #24
 8019a2e:	4611      	mov	r1, r2
 8019a30:	4618      	mov	r0, r3
 8019a32:	f7ff fbff 	bl	8019234 <follow_path>
 8019a36:	4603      	mov	r3, r0
 8019a38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019a3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d118      	bne.n	8019a76 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019a44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019a48:	b25b      	sxtb	r3, r3
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	da03      	bge.n	8019a56 <f_open+0x72>
				res = FR_INVALID_NAME;
 8019a4e:	2306      	movs	r3, #6
 8019a50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019a54:	e00f      	b.n	8019a76 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019a56:	79fb      	ldrb	r3, [r7, #7]
 8019a58:	2b01      	cmp	r3, #1
 8019a5a:	bf8c      	ite	hi
 8019a5c:	2301      	movhi	r3, #1
 8019a5e:	2300      	movls	r3, #0
 8019a60:	b2db      	uxtb	r3, r3
 8019a62:	461a      	mov	r2, r3
 8019a64:	f107 0318 	add.w	r3, r7, #24
 8019a68:	4611      	mov	r1, r2
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f7fd ff18 	bl	80178a0 <chk_lock>
 8019a70:	4603      	mov	r3, r0
 8019a72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019a76:	79fb      	ldrb	r3, [r7, #7]
 8019a78:	f003 031c 	and.w	r3, r3, #28
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d07f      	beq.n	8019b80 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8019a80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d017      	beq.n	8019ab8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019a88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019a8c:	2b04      	cmp	r3, #4
 8019a8e:	d10e      	bne.n	8019aae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019a90:	f7fd ff62 	bl	8017958 <enq_lock>
 8019a94:	4603      	mov	r3, r0
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d006      	beq.n	8019aa8 <f_open+0xc4>
 8019a9a:	f107 0318 	add.w	r3, r7, #24
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	f7ff f83a 	bl	8018b18 <dir_register>
 8019aa4:	4603      	mov	r3, r0
 8019aa6:	e000      	b.n	8019aaa <f_open+0xc6>
 8019aa8:	2312      	movs	r3, #18
 8019aaa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8019aae:	79fb      	ldrb	r3, [r7, #7]
 8019ab0:	f043 0308 	orr.w	r3, r3, #8
 8019ab4:	71fb      	strb	r3, [r7, #7]
 8019ab6:	e010      	b.n	8019ada <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019ab8:	7fbb      	ldrb	r3, [r7, #30]
 8019aba:	f003 0311 	and.w	r3, r3, #17
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d003      	beq.n	8019aca <f_open+0xe6>
					res = FR_DENIED;
 8019ac2:	2307      	movs	r3, #7
 8019ac4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019ac8:	e007      	b.n	8019ada <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019aca:	79fb      	ldrb	r3, [r7, #7]
 8019acc:	f003 0304 	and.w	r3, r3, #4
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d002      	beq.n	8019ada <f_open+0xf6>
 8019ad4:	2308      	movs	r3, #8
 8019ad6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019ada:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d168      	bne.n	8019bb4 <f_open+0x1d0>
 8019ae2:	79fb      	ldrb	r3, [r7, #7]
 8019ae4:	f003 0308 	and.w	r3, r3, #8
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d063      	beq.n	8019bb4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8019aec:	f7f8 fcc2 	bl	8012474 <get_fattime>
 8019af0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8019af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019af4:	330e      	adds	r3, #14
 8019af6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019af8:	4618      	mov	r0, r3
 8019afa:	f7fd fe27 	bl	801774c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8019afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b00:	3316      	adds	r3, #22
 8019b02:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019b04:	4618      	mov	r0, r3
 8019b06:	f7fd fe21 	bl	801774c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b0c:	330b      	adds	r3, #11
 8019b0e:	2220      	movs	r2, #32
 8019b10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8019b12:	697b      	ldr	r3, [r7, #20]
 8019b14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019b16:	4611      	mov	r1, r2
 8019b18:	4618      	mov	r0, r3
 8019b1a:	f7fe fd75 	bl	8018608 <ld_clust>
 8019b1e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019b20:	697b      	ldr	r3, [r7, #20]
 8019b22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019b24:	2200      	movs	r2, #0
 8019b26:	4618      	mov	r0, r3
 8019b28:	f7fe fd8d 	bl	8018646 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b2e:	331c      	adds	r3, #28
 8019b30:	2100      	movs	r1, #0
 8019b32:	4618      	mov	r0, r3
 8019b34:	f7fd fe0a 	bl	801774c <st_dword>
					fs->wflag = 1;
 8019b38:	697b      	ldr	r3, [r7, #20]
 8019b3a:	2201      	movs	r2, #1
 8019b3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d037      	beq.n	8019bb4 <f_open+0x1d0>
						dw = fs->winsect;
 8019b44:	697b      	ldr	r3, [r7, #20]
 8019b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b48:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019b4a:	f107 0318 	add.w	r3, r7, #24
 8019b4e:	2200      	movs	r2, #0
 8019b50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019b52:	4618      	mov	r0, r3
 8019b54:	f7fe faa0 	bl	8018098 <remove_chain>
 8019b58:	4603      	mov	r3, r0
 8019b5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8019b5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d126      	bne.n	8019bb4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8019b66:	697b      	ldr	r3, [r7, #20]
 8019b68:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019b6a:	4618      	mov	r0, r3
 8019b6c:	f7fe f848 	bl	8017c00 <move_window>
 8019b70:	4603      	mov	r3, r0
 8019b72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019b76:	697b      	ldr	r3, [r7, #20]
 8019b78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019b7a:	3a01      	subs	r2, #1
 8019b7c:	611a      	str	r2, [r3, #16]
 8019b7e:	e019      	b.n	8019bb4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019b80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d115      	bne.n	8019bb4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019b88:	7fbb      	ldrb	r3, [r7, #30]
 8019b8a:	f003 0310 	and.w	r3, r3, #16
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d003      	beq.n	8019b9a <f_open+0x1b6>
					res = FR_NO_FILE;
 8019b92:	2304      	movs	r3, #4
 8019b94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019b98:	e00c      	b.n	8019bb4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019b9a:	79fb      	ldrb	r3, [r7, #7]
 8019b9c:	f003 0302 	and.w	r3, r3, #2
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d007      	beq.n	8019bb4 <f_open+0x1d0>
 8019ba4:	7fbb      	ldrb	r3, [r7, #30]
 8019ba6:	f003 0301 	and.w	r3, r3, #1
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d002      	beq.n	8019bb4 <f_open+0x1d0>
						res = FR_DENIED;
 8019bae:	2307      	movs	r3, #7
 8019bb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019bb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d126      	bne.n	8019c0a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019bbc:	79fb      	ldrb	r3, [r7, #7]
 8019bbe:	f003 0308 	and.w	r3, r3, #8
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d003      	beq.n	8019bce <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8019bc6:	79fb      	ldrb	r3, [r7, #7]
 8019bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019bcc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8019bce:	697b      	ldr	r3, [r7, #20]
 8019bd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8019bd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019bdc:	79fb      	ldrb	r3, [r7, #7]
 8019bde:	2b01      	cmp	r3, #1
 8019be0:	bf8c      	ite	hi
 8019be2:	2301      	movhi	r3, #1
 8019be4:	2300      	movls	r3, #0
 8019be6:	b2db      	uxtb	r3, r3
 8019be8:	461a      	mov	r2, r3
 8019bea:	f107 0318 	add.w	r3, r7, #24
 8019bee:	4611      	mov	r1, r2
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	f7fd fed3 	bl	801799c <inc_lock>
 8019bf6:	4602      	mov	r2, r0
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	691b      	ldr	r3, [r3, #16]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d102      	bne.n	8019c0a <f_open+0x226>
 8019c04:	2302      	movs	r3, #2
 8019c06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019c0a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	f040 8095 	bne.w	8019d3e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019c14:	697b      	ldr	r3, [r7, #20]
 8019c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019c18:	4611      	mov	r1, r2
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	f7fe fcf4 	bl	8018608 <ld_clust>
 8019c20:	4602      	mov	r2, r0
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c28:	331c      	adds	r3, #28
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f7fd fd50 	bl	80176d0 <ld_dword>
 8019c30:	4602      	mov	r2, r0
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	2200      	movs	r2, #0
 8019c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019c3c:	697a      	ldr	r2, [r7, #20]
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019c42:	697b      	ldr	r3, [r7, #20]
 8019c44:	88da      	ldrh	r2, [r3, #6]
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	79fa      	ldrb	r2, [r7, #7]
 8019c4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	2200      	movs	r2, #0
 8019c54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	2200      	movs	r2, #0
 8019c5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	2200      	movs	r2, #0
 8019c60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	3330      	adds	r3, #48	@ 0x30
 8019c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019c6a:	2100      	movs	r1, #0
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	f7fd fdba 	bl	80177e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019c72:	79fb      	ldrb	r3, [r7, #7]
 8019c74:	f003 0320 	and.w	r3, r3, #32
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d060      	beq.n	8019d3e <f_open+0x35a>
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	68db      	ldr	r3, [r3, #12]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d05c      	beq.n	8019d3e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	68da      	ldr	r2, [r3, #12]
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019c8c:	697b      	ldr	r3, [r7, #20]
 8019c8e:	895b      	ldrh	r3, [r3, #10]
 8019c90:	025b      	lsls	r3, r3, #9
 8019c92:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	689b      	ldr	r3, [r3, #8]
 8019c98:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	68db      	ldr	r3, [r3, #12]
 8019c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019ca0:	e016      	b.n	8019cd0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	f7fe f865 	bl	8017d76 <get_fat>
 8019cac:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019cb0:	2b01      	cmp	r3, #1
 8019cb2:	d802      	bhi.n	8019cba <f_open+0x2d6>
 8019cb4:	2302      	movs	r3, #2
 8019cb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019cba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cc0:	d102      	bne.n	8019cc8 <f_open+0x2e4>
 8019cc2:	2301      	movs	r3, #1
 8019cc4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019cc8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ccc:	1ad3      	subs	r3, r2, r3
 8019cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019cd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d103      	bne.n	8019ce0 <f_open+0x2fc>
 8019cd8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019cdc:	429a      	cmp	r2, r3
 8019cde:	d8e0      	bhi.n	8019ca2 <f_open+0x2be>
				}
				fp->clust = clst;
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019ce4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019ce6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d127      	bne.n	8019d3e <f_open+0x35a>
 8019cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d022      	beq.n	8019d3e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019cf8:	697b      	ldr	r3, [r7, #20]
 8019cfa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	f7fe f81b 	bl	8017d38 <clust2sect>
 8019d02:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8019d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d103      	bne.n	8019d12 <f_open+0x32e>
						res = FR_INT_ERR;
 8019d0a:	2302      	movs	r3, #2
 8019d0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019d10:	e015      	b.n	8019d3e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019d14:	0a5a      	lsrs	r2, r3, #9
 8019d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d18:	441a      	add	r2, r3
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019d1e:	697b      	ldr	r3, [r7, #20]
 8019d20:	7858      	ldrb	r0, [r3, #1]
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	6a1a      	ldr	r2, [r3, #32]
 8019d2c:	2301      	movs	r3, #1
 8019d2e:	f7fd fc59 	bl	80175e4 <disk_read>
 8019d32:	4603      	mov	r3, r0
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d002      	beq.n	8019d3e <f_open+0x35a>
 8019d38:	2301      	movs	r3, #1
 8019d3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019d3e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d002      	beq.n	8019d4c <f_open+0x368>
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	2200      	movs	r2, #0
 8019d4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019d4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8019d50:	4618      	mov	r0, r3
 8019d52:	3768      	adds	r7, #104	@ 0x68
 8019d54:	46bd      	mov	sp, r7
 8019d56:	bd80      	pop	{r7, pc}

08019d58 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b08c      	sub	sp, #48	@ 0x30
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	60f8      	str	r0, [r7, #12]
 8019d60:	60b9      	str	r1, [r7, #8]
 8019d62:	607a      	str	r2, [r7, #4]
 8019d64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019d66:	68bb      	ldr	r3, [r7, #8]
 8019d68:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019d6a:	683b      	ldr	r3, [r7, #0]
 8019d6c:	2200      	movs	r2, #0
 8019d6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	f107 0210 	add.w	r2, r7, #16
 8019d76:	4611      	mov	r1, r2
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f7ff fdb7 	bl	80198ec <validate>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019d84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d107      	bne.n	8019d9c <f_write+0x44>
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	7d5b      	ldrb	r3, [r3, #21]
 8019d90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8019d94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d002      	beq.n	8019da2 <f_write+0x4a>
 8019d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019da0:	e14b      	b.n	801a03a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	7d1b      	ldrb	r3, [r3, #20]
 8019da6:	f003 0302 	and.w	r3, r3, #2
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d101      	bne.n	8019db2 <f_write+0x5a>
 8019dae:	2307      	movs	r3, #7
 8019db0:	e143      	b.n	801a03a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	699a      	ldr	r2, [r3, #24]
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	441a      	add	r2, r3
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	699b      	ldr	r3, [r3, #24]
 8019dbe:	429a      	cmp	r2, r3
 8019dc0:	f080 812d 	bcs.w	801a01e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	699b      	ldr	r3, [r3, #24]
 8019dc8:	43db      	mvns	r3, r3
 8019dca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019dcc:	e127      	b.n	801a01e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	699b      	ldr	r3, [r3, #24]
 8019dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	f040 80e3 	bne.w	8019fa2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	699b      	ldr	r3, [r3, #24]
 8019de0:	0a5b      	lsrs	r3, r3, #9
 8019de2:	693a      	ldr	r2, [r7, #16]
 8019de4:	8952      	ldrh	r2, [r2, #10]
 8019de6:	3a01      	subs	r2, #1
 8019de8:	4013      	ands	r3, r2
 8019dea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019dec:	69bb      	ldr	r3, [r7, #24]
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d143      	bne.n	8019e7a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	699b      	ldr	r3, [r3, #24]
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d10c      	bne.n	8019e14 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	689b      	ldr	r3, [r3, #8]
 8019dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d11a      	bne.n	8019e3c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	2100      	movs	r1, #0
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	f7fe f9a9 	bl	8018162 <create_chain>
 8019e10:	62b8      	str	r0, [r7, #40]	@ 0x28
 8019e12:	e013      	b.n	8019e3c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d007      	beq.n	8019e2c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	699b      	ldr	r3, [r3, #24]
 8019e20:	4619      	mov	r1, r3
 8019e22:	68f8      	ldr	r0, [r7, #12]
 8019e24:	f7fe fa35 	bl	8018292 <clmt_clust>
 8019e28:	62b8      	str	r0, [r7, #40]	@ 0x28
 8019e2a:	e007      	b.n	8019e3c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019e2c:	68fa      	ldr	r2, [r7, #12]
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	69db      	ldr	r3, [r3, #28]
 8019e32:	4619      	mov	r1, r3
 8019e34:	4610      	mov	r0, r2
 8019e36:	f7fe f994 	bl	8018162 <create_chain>
 8019e3a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	f000 80f2 	beq.w	801a028 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e46:	2b01      	cmp	r3, #1
 8019e48:	d104      	bne.n	8019e54 <f_write+0xfc>
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	2202      	movs	r2, #2
 8019e4e:	755a      	strb	r2, [r3, #21]
 8019e50:	2302      	movs	r3, #2
 8019e52:	e0f2      	b.n	801a03a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e5a:	d104      	bne.n	8019e66 <f_write+0x10e>
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	2201      	movs	r2, #1
 8019e60:	755a      	strb	r2, [r3, #21]
 8019e62:	2301      	movs	r3, #1
 8019e64:	e0e9      	b.n	801a03a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019e6a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	689b      	ldr	r3, [r3, #8]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d102      	bne.n	8019e7a <f_write+0x122>
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019e78:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	7d1b      	ldrb	r3, [r3, #20]
 8019e7e:	b25b      	sxtb	r3, r3
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	da18      	bge.n	8019eb6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019e84:	693b      	ldr	r3, [r7, #16]
 8019e86:	7858      	ldrb	r0, [r3, #1]
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	6a1a      	ldr	r2, [r3, #32]
 8019e92:	2301      	movs	r3, #1
 8019e94:	f7fd fbc6 	bl	8017624 <disk_write>
 8019e98:	4603      	mov	r3, r0
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d004      	beq.n	8019ea8 <f_write+0x150>
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	2201      	movs	r2, #1
 8019ea2:	755a      	strb	r2, [r3, #21]
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	e0c8      	b.n	801a03a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	7d1b      	ldrb	r3, [r3, #20]
 8019eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019eb0:	b2da      	uxtb	r2, r3
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019eb6:	693a      	ldr	r2, [r7, #16]
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	69db      	ldr	r3, [r3, #28]
 8019ebc:	4619      	mov	r1, r3
 8019ebe:	4610      	mov	r0, r2
 8019ec0:	f7fd ff3a 	bl	8017d38 <clust2sect>
 8019ec4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019ec6:	697b      	ldr	r3, [r7, #20]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d104      	bne.n	8019ed6 <f_write+0x17e>
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	2202      	movs	r2, #2
 8019ed0:	755a      	strb	r2, [r3, #21]
 8019ed2:	2302      	movs	r3, #2
 8019ed4:	e0b1      	b.n	801a03a <f_write+0x2e2>
			sect += csect;
 8019ed6:	697a      	ldr	r2, [r7, #20]
 8019ed8:	69bb      	ldr	r3, [r7, #24]
 8019eda:	4413      	add	r3, r2
 8019edc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	0a5b      	lsrs	r3, r3, #9
 8019ee2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019ee4:	6a3b      	ldr	r3, [r7, #32]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d03c      	beq.n	8019f64 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019eea:	69ba      	ldr	r2, [r7, #24]
 8019eec:	6a3b      	ldr	r3, [r7, #32]
 8019eee:	4413      	add	r3, r2
 8019ef0:	693a      	ldr	r2, [r7, #16]
 8019ef2:	8952      	ldrh	r2, [r2, #10]
 8019ef4:	4293      	cmp	r3, r2
 8019ef6:	d905      	bls.n	8019f04 <f_write+0x1ac>
					cc = fs->csize - csect;
 8019ef8:	693b      	ldr	r3, [r7, #16]
 8019efa:	895b      	ldrh	r3, [r3, #10]
 8019efc:	461a      	mov	r2, r3
 8019efe:	69bb      	ldr	r3, [r7, #24]
 8019f00:	1ad3      	subs	r3, r2, r3
 8019f02:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019f04:	693b      	ldr	r3, [r7, #16]
 8019f06:	7858      	ldrb	r0, [r3, #1]
 8019f08:	6a3b      	ldr	r3, [r7, #32]
 8019f0a:	697a      	ldr	r2, [r7, #20]
 8019f0c:	69f9      	ldr	r1, [r7, #28]
 8019f0e:	f7fd fb89 	bl	8017624 <disk_write>
 8019f12:	4603      	mov	r3, r0
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d004      	beq.n	8019f22 <f_write+0x1ca>
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	2201      	movs	r2, #1
 8019f1c:	755a      	strb	r2, [r3, #21]
 8019f1e:	2301      	movs	r3, #1
 8019f20:	e08b      	b.n	801a03a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	6a1a      	ldr	r2, [r3, #32]
 8019f26:	697b      	ldr	r3, [r7, #20]
 8019f28:	1ad3      	subs	r3, r2, r3
 8019f2a:	6a3a      	ldr	r2, [r7, #32]
 8019f2c:	429a      	cmp	r2, r3
 8019f2e:	d915      	bls.n	8019f5c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	6a1a      	ldr	r2, [r3, #32]
 8019f3a:	697b      	ldr	r3, [r7, #20]
 8019f3c:	1ad3      	subs	r3, r2, r3
 8019f3e:	025b      	lsls	r3, r3, #9
 8019f40:	69fa      	ldr	r2, [r7, #28]
 8019f42:	4413      	add	r3, r2
 8019f44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019f48:	4619      	mov	r1, r3
 8019f4a:	f7fd fc2b 	bl	80177a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	7d1b      	ldrb	r3, [r3, #20]
 8019f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019f56:	b2da      	uxtb	r2, r3
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019f5c:	6a3b      	ldr	r3, [r7, #32]
 8019f5e:	025b      	lsls	r3, r3, #9
 8019f60:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8019f62:	e03f      	b.n	8019fe4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	6a1b      	ldr	r3, [r3, #32]
 8019f68:	697a      	ldr	r2, [r7, #20]
 8019f6a:	429a      	cmp	r2, r3
 8019f6c:	d016      	beq.n	8019f9c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	699a      	ldr	r2, [r3, #24]
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019f76:	429a      	cmp	r2, r3
 8019f78:	d210      	bcs.n	8019f9c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019f7a:	693b      	ldr	r3, [r7, #16]
 8019f7c:	7858      	ldrb	r0, [r3, #1]
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8019f84:	2301      	movs	r3, #1
 8019f86:	697a      	ldr	r2, [r7, #20]
 8019f88:	f7fd fb2c 	bl	80175e4 <disk_read>
 8019f8c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d004      	beq.n	8019f9c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	2201      	movs	r2, #1
 8019f96:	755a      	strb	r2, [r3, #21]
 8019f98:	2301      	movs	r3, #1
 8019f9a:	e04e      	b.n	801a03a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	697a      	ldr	r2, [r7, #20]
 8019fa0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	699b      	ldr	r3, [r3, #24]
 8019fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019faa:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8019fae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	429a      	cmp	r2, r3
 8019fb6:	d901      	bls.n	8019fbc <f_write+0x264>
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	699b      	ldr	r3, [r3, #24]
 8019fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019fca:	4413      	add	r3, r2
 8019fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019fce:	69f9      	ldr	r1, [r7, #28]
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f7fd fbe7 	bl	80177a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019fd6:	68fb      	ldr	r3, [r7, #12]
 8019fd8:	7d1b      	ldrb	r3, [r3, #20]
 8019fda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019fde:	b2da      	uxtb	r2, r3
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019fe4:	69fa      	ldr	r2, [r7, #28]
 8019fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fe8:	4413      	add	r3, r2
 8019fea:	61fb      	str	r3, [r7, #28]
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	699a      	ldr	r2, [r3, #24]
 8019ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ff2:	441a      	add	r2, r3
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	619a      	str	r2, [r3, #24]
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	68da      	ldr	r2, [r3, #12]
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	699b      	ldr	r3, [r3, #24]
 801a000:	429a      	cmp	r2, r3
 801a002:	bf38      	it	cc
 801a004:	461a      	movcc	r2, r3
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	60da      	str	r2, [r3, #12]
 801a00a:	683b      	ldr	r3, [r7, #0]
 801a00c:	681a      	ldr	r2, [r3, #0]
 801a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a010:	441a      	add	r2, r3
 801a012:	683b      	ldr	r3, [r7, #0]
 801a014:	601a      	str	r2, [r3, #0]
 801a016:	687a      	ldr	r2, [r7, #4]
 801a018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a01a:	1ad3      	subs	r3, r2, r3
 801a01c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	2b00      	cmp	r3, #0
 801a022:	f47f aed4 	bne.w	8019dce <f_write+0x76>
 801a026:	e000      	b.n	801a02a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a028:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	7d1b      	ldrb	r3, [r3, #20]
 801a02e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a032:	b2da      	uxtb	r2, r3
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801a038:	2300      	movs	r3, #0
}
 801a03a:	4618      	mov	r0, r3
 801a03c:	3730      	adds	r7, #48	@ 0x30
 801a03e:	46bd      	mov	sp, r7
 801a040:	bd80      	pop	{r7, pc}

0801a042 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a042:	b580      	push	{r7, lr}
 801a044:	b086      	sub	sp, #24
 801a046:	af00      	add	r7, sp, #0
 801a048:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	f107 0208 	add.w	r2, r7, #8
 801a050:	4611      	mov	r1, r2
 801a052:	4618      	mov	r0, r3
 801a054:	f7ff fc4a 	bl	80198ec <validate>
 801a058:	4603      	mov	r3, r0
 801a05a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a05c:	7dfb      	ldrb	r3, [r7, #23]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d168      	bne.n	801a134 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	7d1b      	ldrb	r3, [r3, #20]
 801a066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d062      	beq.n	801a134 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	7d1b      	ldrb	r3, [r3, #20]
 801a072:	b25b      	sxtb	r3, r3
 801a074:	2b00      	cmp	r3, #0
 801a076:	da15      	bge.n	801a0a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a078:	68bb      	ldr	r3, [r7, #8]
 801a07a:	7858      	ldrb	r0, [r3, #1]
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	6a1a      	ldr	r2, [r3, #32]
 801a086:	2301      	movs	r3, #1
 801a088:	f7fd facc 	bl	8017624 <disk_write>
 801a08c:	4603      	mov	r3, r0
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d001      	beq.n	801a096 <f_sync+0x54>
 801a092:	2301      	movs	r3, #1
 801a094:	e04f      	b.n	801a136 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	7d1b      	ldrb	r3, [r3, #20]
 801a09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a09e:	b2da      	uxtb	r2, r3
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a0a4:	f7f8 f9e6 	bl	8012474 <get_fattime>
 801a0a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a0aa:	68ba      	ldr	r2, [r7, #8]
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0b0:	4619      	mov	r1, r3
 801a0b2:	4610      	mov	r0, r2
 801a0b4:	f7fd fda4 	bl	8017c00 <move_window>
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a0bc:	7dfb      	ldrb	r3, [r7, #23]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d138      	bne.n	801a134 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a0c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	330b      	adds	r3, #11
 801a0cc:	781a      	ldrb	r2, [r3, #0]
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	330b      	adds	r3, #11
 801a0d2:	f042 0220 	orr.w	r2, r2, #32
 801a0d6:	b2d2      	uxtb	r2, r2
 801a0d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	6818      	ldr	r0, [r3, #0]
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	689b      	ldr	r3, [r3, #8]
 801a0e2:	461a      	mov	r2, r3
 801a0e4:	68f9      	ldr	r1, [r7, #12]
 801a0e6:	f7fe faae 	bl	8018646 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	f103 021c 	add.w	r2, r3, #28
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	68db      	ldr	r3, [r3, #12]
 801a0f4:	4619      	mov	r1, r3
 801a0f6:	4610      	mov	r0, r2
 801a0f8:	f7fd fb28 	bl	801774c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	3316      	adds	r3, #22
 801a100:	6939      	ldr	r1, [r7, #16]
 801a102:	4618      	mov	r0, r3
 801a104:	f7fd fb22 	bl	801774c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	3312      	adds	r3, #18
 801a10c:	2100      	movs	r1, #0
 801a10e:	4618      	mov	r0, r3
 801a110:	f7fd fb01 	bl	8017716 <st_word>
					fs->wflag = 1;
 801a114:	68bb      	ldr	r3, [r7, #8]
 801a116:	2201      	movs	r2, #1
 801a118:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a11a:	68bb      	ldr	r3, [r7, #8]
 801a11c:	4618      	mov	r0, r3
 801a11e:	f7fd fd9d 	bl	8017c5c <sync_fs>
 801a122:	4603      	mov	r3, r0
 801a124:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	7d1b      	ldrb	r3, [r3, #20]
 801a12a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a12e:	b2da      	uxtb	r2, r3
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a134:	7dfb      	ldrb	r3, [r7, #23]
}
 801a136:	4618      	mov	r0, r3
 801a138:	3718      	adds	r7, #24
 801a13a:	46bd      	mov	sp, r7
 801a13c:	bd80      	pop	{r7, pc}

0801a13e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a13e:	b580      	push	{r7, lr}
 801a140:	b084      	sub	sp, #16
 801a142:	af00      	add	r7, sp, #0
 801a144:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a146:	6878      	ldr	r0, [r7, #4]
 801a148:	f7ff ff7b 	bl	801a042 <f_sync>
 801a14c:	4603      	mov	r3, r0
 801a14e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a150:	7bfb      	ldrb	r3, [r7, #15]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d118      	bne.n	801a188 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	f107 0208 	add.w	r2, r7, #8
 801a15c:	4611      	mov	r1, r2
 801a15e:	4618      	mov	r0, r3
 801a160:	f7ff fbc4 	bl	80198ec <validate>
 801a164:	4603      	mov	r3, r0
 801a166:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a168:	7bfb      	ldrb	r3, [r7, #15]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d10c      	bne.n	801a188 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	691b      	ldr	r3, [r3, #16]
 801a172:	4618      	mov	r0, r3
 801a174:	f7fd fca0 	bl	8017ab8 <dec_lock>
 801a178:	4603      	mov	r3, r0
 801a17a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a17c:	7bfb      	ldrb	r3, [r7, #15]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d102      	bne.n	801a188 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	2200      	movs	r2, #0
 801a186:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a188:	7bfb      	ldrb	r3, [r7, #15]
}
 801a18a:	4618      	mov	r0, r3
 801a18c:	3710      	adds	r7, #16
 801a18e:	46bd      	mov	sp, r7
 801a190:	bd80      	pop	{r7, pc}

0801a192 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801a192:	b580      	push	{r7, lr}
 801a194:	b090      	sub	sp, #64	@ 0x40
 801a196:	af00      	add	r7, sp, #0
 801a198:	6078      	str	r0, [r7, #4]
 801a19a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801a19c:	f107 0108 	add.w	r1, r7, #8
 801a1a0:	1d3b      	adds	r3, r7, #4
 801a1a2:	2200      	movs	r2, #0
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	f7ff f951 	bl	801944c <find_volume>
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801a1b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d11f      	bne.n	801a1f8 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801a1b8:	687a      	ldr	r2, [r7, #4]
 801a1ba:	f107 0308 	add.w	r3, r7, #8
 801a1be:	4611      	mov	r1, r2
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	f7ff f837 	bl	8019234 <follow_path>
 801a1c6:	4603      	mov	r3, r0
 801a1c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801a1cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d111      	bne.n	801a1f8 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801a1d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a1d8:	b25b      	sxtb	r3, r3
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	da03      	bge.n	801a1e6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801a1de:	2306      	movs	r3, #6
 801a1e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801a1e4:	e008      	b.n	801a1f8 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801a1e6:	683b      	ldr	r3, [r7, #0]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d005      	beq.n	801a1f8 <f_stat+0x66>
 801a1ec:	f107 0308 	add.w	r3, r7, #8
 801a1f0:	6839      	ldr	r1, [r7, #0]
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f7fe fd88 	bl	8018d08 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801a1f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	3740      	adds	r7, #64	@ 0x40
 801a200:	46bd      	mov	sp, r7
 801a202:	bd80      	pop	{r7, pc}

0801a204 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a204:	b480      	push	{r7}
 801a206:	b087      	sub	sp, #28
 801a208:	af00      	add	r7, sp, #0
 801a20a:	60f8      	str	r0, [r7, #12]
 801a20c:	60b9      	str	r1, [r7, #8]
 801a20e:	4613      	mov	r3, r2
 801a210:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a212:	2301      	movs	r3, #1
 801a214:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a216:	2300      	movs	r3, #0
 801a218:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a21a:	4b1f      	ldr	r3, [pc, #124]	@ (801a298 <FATFS_LinkDriverEx+0x94>)
 801a21c:	7a5b      	ldrb	r3, [r3, #9]
 801a21e:	b2db      	uxtb	r3, r3
 801a220:	2b00      	cmp	r3, #0
 801a222:	d131      	bne.n	801a288 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a224:	4b1c      	ldr	r3, [pc, #112]	@ (801a298 <FATFS_LinkDriverEx+0x94>)
 801a226:	7a5b      	ldrb	r3, [r3, #9]
 801a228:	b2db      	uxtb	r3, r3
 801a22a:	461a      	mov	r2, r3
 801a22c:	4b1a      	ldr	r3, [pc, #104]	@ (801a298 <FATFS_LinkDriverEx+0x94>)
 801a22e:	2100      	movs	r1, #0
 801a230:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a232:	4b19      	ldr	r3, [pc, #100]	@ (801a298 <FATFS_LinkDriverEx+0x94>)
 801a234:	7a5b      	ldrb	r3, [r3, #9]
 801a236:	b2db      	uxtb	r3, r3
 801a238:	4a17      	ldr	r2, [pc, #92]	@ (801a298 <FATFS_LinkDriverEx+0x94>)
 801a23a:	009b      	lsls	r3, r3, #2
 801a23c:	4413      	add	r3, r2
 801a23e:	68fa      	ldr	r2, [r7, #12]
 801a240:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a242:	4b15      	ldr	r3, [pc, #84]	@ (801a298 <FATFS_LinkDriverEx+0x94>)
 801a244:	7a5b      	ldrb	r3, [r3, #9]
 801a246:	b2db      	uxtb	r3, r3
 801a248:	461a      	mov	r2, r3
 801a24a:	4b13      	ldr	r3, [pc, #76]	@ (801a298 <FATFS_LinkDriverEx+0x94>)
 801a24c:	4413      	add	r3, r2
 801a24e:	79fa      	ldrb	r2, [r7, #7]
 801a250:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a252:	4b11      	ldr	r3, [pc, #68]	@ (801a298 <FATFS_LinkDriverEx+0x94>)
 801a254:	7a5b      	ldrb	r3, [r3, #9]
 801a256:	b2db      	uxtb	r3, r3
 801a258:	1c5a      	adds	r2, r3, #1
 801a25a:	b2d1      	uxtb	r1, r2
 801a25c:	4a0e      	ldr	r2, [pc, #56]	@ (801a298 <FATFS_LinkDriverEx+0x94>)
 801a25e:	7251      	strb	r1, [r2, #9]
 801a260:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a262:	7dbb      	ldrb	r3, [r7, #22]
 801a264:	3330      	adds	r3, #48	@ 0x30
 801a266:	b2da      	uxtb	r2, r3
 801a268:	68bb      	ldr	r3, [r7, #8]
 801a26a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a26c:	68bb      	ldr	r3, [r7, #8]
 801a26e:	3301      	adds	r3, #1
 801a270:	223a      	movs	r2, #58	@ 0x3a
 801a272:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a274:	68bb      	ldr	r3, [r7, #8]
 801a276:	3302      	adds	r3, #2
 801a278:	222f      	movs	r2, #47	@ 0x2f
 801a27a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a27c:	68bb      	ldr	r3, [r7, #8]
 801a27e:	3303      	adds	r3, #3
 801a280:	2200      	movs	r2, #0
 801a282:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a284:	2300      	movs	r3, #0
 801a286:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a288:	7dfb      	ldrb	r3, [r7, #23]
}
 801a28a:	4618      	mov	r0, r3
 801a28c:	371c      	adds	r7, #28
 801a28e:	46bd      	mov	sp, r7
 801a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a294:	4770      	bx	lr
 801a296:	bf00      	nop
 801a298:	20001cd4 	.word	0x20001cd4

0801a29c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b082      	sub	sp, #8
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
 801a2a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	6839      	ldr	r1, [r7, #0]
 801a2aa:	6878      	ldr	r0, [r7, #4]
 801a2ac:	f7ff ffaa 	bl	801a204 <FATFS_LinkDriverEx>
 801a2b0:	4603      	mov	r3, r0
}
 801a2b2:	4618      	mov	r0, r3
 801a2b4:	3708      	adds	r7, #8
 801a2b6:	46bd      	mov	sp, r7
 801a2b8:	bd80      	pop	{r7, pc}
	...

0801a2bc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a2bc:	b480      	push	{r7}
 801a2be:	b085      	sub	sp, #20
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	6039      	str	r1, [r7, #0]
 801a2c6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a2c8:	88fb      	ldrh	r3, [r7, #6]
 801a2ca:	2b7f      	cmp	r3, #127	@ 0x7f
 801a2cc:	d802      	bhi.n	801a2d4 <ff_convert+0x18>
		c = chr;
 801a2ce:	88fb      	ldrh	r3, [r7, #6]
 801a2d0:	81fb      	strh	r3, [r7, #14]
 801a2d2:	e025      	b.n	801a320 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a2d4:	683b      	ldr	r3, [r7, #0]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d00b      	beq.n	801a2f2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a2da:	88fb      	ldrh	r3, [r7, #6]
 801a2dc:	2bff      	cmp	r3, #255	@ 0xff
 801a2de:	d805      	bhi.n	801a2ec <ff_convert+0x30>
 801a2e0:	88fb      	ldrh	r3, [r7, #6]
 801a2e2:	3b80      	subs	r3, #128	@ 0x80
 801a2e4:	4a12      	ldr	r2, [pc, #72]	@ (801a330 <ff_convert+0x74>)
 801a2e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a2ea:	e000      	b.n	801a2ee <ff_convert+0x32>
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	81fb      	strh	r3, [r7, #14]
 801a2f0:	e016      	b.n	801a320 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	81fb      	strh	r3, [r7, #14]
 801a2f6:	e009      	b.n	801a30c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a2f8:	89fb      	ldrh	r3, [r7, #14]
 801a2fa:	4a0d      	ldr	r2, [pc, #52]	@ (801a330 <ff_convert+0x74>)
 801a2fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a300:	88fa      	ldrh	r2, [r7, #6]
 801a302:	429a      	cmp	r2, r3
 801a304:	d006      	beq.n	801a314 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a306:	89fb      	ldrh	r3, [r7, #14]
 801a308:	3301      	adds	r3, #1
 801a30a:	81fb      	strh	r3, [r7, #14]
 801a30c:	89fb      	ldrh	r3, [r7, #14]
 801a30e:	2b7f      	cmp	r3, #127	@ 0x7f
 801a310:	d9f2      	bls.n	801a2f8 <ff_convert+0x3c>
 801a312:	e000      	b.n	801a316 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a314:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a316:	89fb      	ldrh	r3, [r7, #14]
 801a318:	3380      	adds	r3, #128	@ 0x80
 801a31a:	b29b      	uxth	r3, r3
 801a31c:	b2db      	uxtb	r3, r3
 801a31e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a320:	89fb      	ldrh	r3, [r7, #14]
}
 801a322:	4618      	mov	r0, r3
 801a324:	3714      	adds	r7, #20
 801a326:	46bd      	mov	sp, r7
 801a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a32c:	4770      	bx	lr
 801a32e:	bf00      	nop
 801a330:	08022898 	.word	0x08022898

0801a334 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a334:	b480      	push	{r7}
 801a336:	b087      	sub	sp, #28
 801a338:	af00      	add	r7, sp, #0
 801a33a:	4603      	mov	r3, r0
 801a33c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a33e:	88fb      	ldrh	r3, [r7, #6]
 801a340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a344:	d201      	bcs.n	801a34a <ff_wtoupper+0x16>
 801a346:	4b3e      	ldr	r3, [pc, #248]	@ (801a440 <ff_wtoupper+0x10c>)
 801a348:	e000      	b.n	801a34c <ff_wtoupper+0x18>
 801a34a:	4b3e      	ldr	r3, [pc, #248]	@ (801a444 <ff_wtoupper+0x110>)
 801a34c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a34e:	697b      	ldr	r3, [r7, #20]
 801a350:	1c9a      	adds	r2, r3, #2
 801a352:	617a      	str	r2, [r7, #20]
 801a354:	881b      	ldrh	r3, [r3, #0]
 801a356:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a358:	8a7b      	ldrh	r3, [r7, #18]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d068      	beq.n	801a430 <ff_wtoupper+0xfc>
 801a35e:	88fa      	ldrh	r2, [r7, #6]
 801a360:	8a7b      	ldrh	r3, [r7, #18]
 801a362:	429a      	cmp	r2, r3
 801a364:	d364      	bcc.n	801a430 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a366:	697b      	ldr	r3, [r7, #20]
 801a368:	1c9a      	adds	r2, r3, #2
 801a36a:	617a      	str	r2, [r7, #20]
 801a36c:	881b      	ldrh	r3, [r3, #0]
 801a36e:	823b      	strh	r3, [r7, #16]
 801a370:	8a3b      	ldrh	r3, [r7, #16]
 801a372:	0a1b      	lsrs	r3, r3, #8
 801a374:	81fb      	strh	r3, [r7, #14]
 801a376:	8a3b      	ldrh	r3, [r7, #16]
 801a378:	b2db      	uxtb	r3, r3
 801a37a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a37c:	88fa      	ldrh	r2, [r7, #6]
 801a37e:	8a79      	ldrh	r1, [r7, #18]
 801a380:	8a3b      	ldrh	r3, [r7, #16]
 801a382:	440b      	add	r3, r1
 801a384:	429a      	cmp	r2, r3
 801a386:	da49      	bge.n	801a41c <ff_wtoupper+0xe8>
			switch (cmd) {
 801a388:	89fb      	ldrh	r3, [r7, #14]
 801a38a:	2b08      	cmp	r3, #8
 801a38c:	d84f      	bhi.n	801a42e <ff_wtoupper+0xfa>
 801a38e:	a201      	add	r2, pc, #4	@ (adr r2, 801a394 <ff_wtoupper+0x60>)
 801a390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a394:	0801a3b9 	.word	0x0801a3b9
 801a398:	0801a3cb 	.word	0x0801a3cb
 801a39c:	0801a3e1 	.word	0x0801a3e1
 801a3a0:	0801a3e9 	.word	0x0801a3e9
 801a3a4:	0801a3f1 	.word	0x0801a3f1
 801a3a8:	0801a3f9 	.word	0x0801a3f9
 801a3ac:	0801a401 	.word	0x0801a401
 801a3b0:	0801a409 	.word	0x0801a409
 801a3b4:	0801a411 	.word	0x0801a411
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a3b8:	88fa      	ldrh	r2, [r7, #6]
 801a3ba:	8a7b      	ldrh	r3, [r7, #18]
 801a3bc:	1ad3      	subs	r3, r2, r3
 801a3be:	005b      	lsls	r3, r3, #1
 801a3c0:	697a      	ldr	r2, [r7, #20]
 801a3c2:	4413      	add	r3, r2
 801a3c4:	881b      	ldrh	r3, [r3, #0]
 801a3c6:	80fb      	strh	r3, [r7, #6]
 801a3c8:	e027      	b.n	801a41a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a3ca:	88fa      	ldrh	r2, [r7, #6]
 801a3cc:	8a7b      	ldrh	r3, [r7, #18]
 801a3ce:	1ad3      	subs	r3, r2, r3
 801a3d0:	b29b      	uxth	r3, r3
 801a3d2:	f003 0301 	and.w	r3, r3, #1
 801a3d6:	b29b      	uxth	r3, r3
 801a3d8:	88fa      	ldrh	r2, [r7, #6]
 801a3da:	1ad3      	subs	r3, r2, r3
 801a3dc:	80fb      	strh	r3, [r7, #6]
 801a3de:	e01c      	b.n	801a41a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a3e0:	88fb      	ldrh	r3, [r7, #6]
 801a3e2:	3b10      	subs	r3, #16
 801a3e4:	80fb      	strh	r3, [r7, #6]
 801a3e6:	e018      	b.n	801a41a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a3e8:	88fb      	ldrh	r3, [r7, #6]
 801a3ea:	3b20      	subs	r3, #32
 801a3ec:	80fb      	strh	r3, [r7, #6]
 801a3ee:	e014      	b.n	801a41a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a3f0:	88fb      	ldrh	r3, [r7, #6]
 801a3f2:	3b30      	subs	r3, #48	@ 0x30
 801a3f4:	80fb      	strh	r3, [r7, #6]
 801a3f6:	e010      	b.n	801a41a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a3f8:	88fb      	ldrh	r3, [r7, #6]
 801a3fa:	3b1a      	subs	r3, #26
 801a3fc:	80fb      	strh	r3, [r7, #6]
 801a3fe:	e00c      	b.n	801a41a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a400:	88fb      	ldrh	r3, [r7, #6]
 801a402:	3308      	adds	r3, #8
 801a404:	80fb      	strh	r3, [r7, #6]
 801a406:	e008      	b.n	801a41a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a408:	88fb      	ldrh	r3, [r7, #6]
 801a40a:	3b50      	subs	r3, #80	@ 0x50
 801a40c:	80fb      	strh	r3, [r7, #6]
 801a40e:	e004      	b.n	801a41a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a410:	88fb      	ldrh	r3, [r7, #6]
 801a412:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801a416:	80fb      	strh	r3, [r7, #6]
 801a418:	bf00      	nop
			}
			break;
 801a41a:	e008      	b.n	801a42e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a41c:	89fb      	ldrh	r3, [r7, #14]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d195      	bne.n	801a34e <ff_wtoupper+0x1a>
 801a422:	8a3b      	ldrh	r3, [r7, #16]
 801a424:	005b      	lsls	r3, r3, #1
 801a426:	697a      	ldr	r2, [r7, #20]
 801a428:	4413      	add	r3, r2
 801a42a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a42c:	e78f      	b.n	801a34e <ff_wtoupper+0x1a>
			break;
 801a42e:	bf00      	nop
	}

	return chr;
 801a430:	88fb      	ldrh	r3, [r7, #6]
}
 801a432:	4618      	mov	r0, r3
 801a434:	371c      	adds	r7, #28
 801a436:	46bd      	mov	sp, r7
 801a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a43c:	4770      	bx	lr
 801a43e:	bf00      	nop
 801a440:	08022998 	.word	0x08022998
 801a444:	08022b8c 	.word	0x08022b8c

0801a448 <Mount_SD>:
//			printf("Successfully saved to SD Card\n");
//			}
//	}
//}

FRESULT Mount_SD(const TCHAR *path) {
 801a448:	b580      	push	{r7, lr}
 801a44a:	b082      	sub	sp, #8
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 801a450:	2201      	movs	r2, #1
 801a452:	6879      	ldr	r1, [r7, #4]
 801a454:	480e      	ldr	r0, [pc, #56]	@ (801a490 <Mount_SD+0x48>)
 801a456:	f7ff fa7f 	bl	8019958 <f_mount>
 801a45a:	4603      	mov	r3, r0
 801a45c:	461a      	mov	r2, r3
 801a45e:	4b0d      	ldr	r3, [pc, #52]	@ (801a494 <Mount_SD+0x4c>)
 801a460:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801a462:	4b0c      	ldr	r3, [pc, #48]	@ (801a494 <Mount_SD+0x4c>)
 801a464:	781b      	ldrb	r3, [r3, #0]
 801a466:	2b00      	cmp	r3, #0
 801a468:	d006      	beq.n	801a478 <Mount_SD+0x30>
		if (sdioPrints)
 801a46a:	2300      	movs	r3, #0
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d009      	beq.n	801a484 <Mount_SD+0x3c>
			printf("ERROR!!! in mounting SD CARD...\n");
 801a470:	4809      	ldr	r0, [pc, #36]	@ (801a498 <Mount_SD+0x50>)
 801a472:	f002 fd09 	bl	801ce88 <puts>
 801a476:	e005      	b.n	801a484 <Mount_SD+0x3c>
	} else if (sdioPrints)
 801a478:	2300      	movs	r3, #0
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d002      	beq.n	801a484 <Mount_SD+0x3c>
		printf("SD CARD mounted successfully...\n");
 801a47e:	4807      	ldr	r0, [pc, #28]	@ (801a49c <Mount_SD+0x54>)
 801a480:	f002 fd02 	bl	801ce88 <puts>

	return fresult;
 801a484:	4b03      	ldr	r3, [pc, #12]	@ (801a494 <Mount_SD+0x4c>)
 801a486:	781b      	ldrb	r3, [r3, #0]
}
 801a488:	4618      	mov	r0, r3
 801a48a:	3708      	adds	r7, #8
 801a48c:	46bd      	mov	sp, r7
 801a48e:	bd80      	pop	{r7, pc}
 801a490:	20001ce0 	.word	0x20001ce0
 801a494:	2000225c 	.word	0x2000225c
 801a498:	08021ff0 	.word	0x08021ff0
 801a49c:	08022010 	.word	0x08022010

0801a4a0 <Unmount_SD>:

void Unmount_SD(const TCHAR *path) {
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b082      	sub	sp, #8
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 801a4a8:	2201      	movs	r2, #1
 801a4aa:	6879      	ldr	r1, [r7, #4]
 801a4ac:	2000      	movs	r0, #0
 801a4ae:	f7ff fa53 	bl	8019958 <f_mount>
 801a4b2:	4603      	mov	r3, r0
 801a4b4:	461a      	mov	r2, r3
 801a4b6:	4b0b      	ldr	r3, [pc, #44]	@ (801a4e4 <Unmount_SD+0x44>)
 801a4b8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801a4ba:	4b0a      	ldr	r3, [pc, #40]	@ (801a4e4 <Unmount_SD+0x44>)
 801a4bc:	781b      	ldrb	r3, [r3, #0]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d106      	bne.n	801a4d0 <Unmount_SD+0x30>
		if (sdioPrints)
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d009      	beq.n	801a4dc <Unmount_SD+0x3c>
			printf("SD CARD UNMOUNTED successfully...\n\n");
 801a4c8:	4807      	ldr	r0, [pc, #28]	@ (801a4e8 <Unmount_SD+0x48>)
 801a4ca:	f002 fcdd 	bl	801ce88 <puts>
	} else if (sdioPrints)
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 801a4ce:	e005      	b.n	801a4dc <Unmount_SD+0x3c>
	} else if (sdioPrints)
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d002      	beq.n	801a4dc <Unmount_SD+0x3c>
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 801a4d6:	4805      	ldr	r0, [pc, #20]	@ (801a4ec <Unmount_SD+0x4c>)
 801a4d8:	f002 fcd6 	bl	801ce88 <puts>
}
 801a4dc:	bf00      	nop
 801a4de:	3708      	adds	r7, #8
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	bd80      	pop	{r7, pc}
 801a4e4:	2000225c 	.word	0x2000225c
 801a4e8:	08022030 	.word	0x08022030
 801a4ec:	08022054 	.word	0x08022054

0801a4f0 <Create_File>:
		}
		return fresult;
	}
}

FRESULT Create_File(char *name) {
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b0a8      	sub	sp, #160	@ 0xa0
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat(name, &fno);
 801a4f8:	4941      	ldr	r1, [pc, #260]	@ (801a600 <Create_File+0x110>)
 801a4fa:	6878      	ldr	r0, [r7, #4]
 801a4fc:	f7ff fe49 	bl	801a192 <f_stat>
 801a500:	4603      	mov	r3, r0
 801a502:	461a      	mov	r2, r3
 801a504:	4b3f      	ldr	r3, [pc, #252]	@ (801a604 <Create_File+0x114>)
 801a506:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801a508:	4b3e      	ldr	r3, [pc, #248]	@ (801a604 <Create_File+0x114>)
 801a50a:	781b      	ldrb	r3, [r3, #0]
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d114      	bne.n	801a53a <Create_File+0x4a>
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801a510:	4b3d      	ldr	r3, [pc, #244]	@ (801a608 <Create_File+0x118>)
 801a512:	2201      	movs	r2, #1
 801a514:	701a      	strb	r2, [r3, #0]

		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",
 801a516:	f107 0308 	add.w	r3, r7, #8
 801a51a:	687a      	ldr	r2, [r7, #4]
 801a51c:	493b      	ldr	r1, [pc, #236]	@ (801a60c <Create_File+0x11c>)
 801a51e:	4618      	mov	r0, r3
 801a520:	f002 fcba 	bl	801ce98 <siprintf>
				name);
		if (sdioPrints)
 801a524:	2300      	movs	r3, #0
 801a526:	2b00      	cmp	r3, #0
 801a528:	d004      	beq.n	801a534 <Create_File+0x44>
			printf(buf);
 801a52a:	f107 0308 	add.w	r3, r7, #8
 801a52e:	4618      	mov	r0, r3
 801a530:	f002 fc42 	bl	801cdb8 <iprintf>

		return fresult;
 801a534:	4b33      	ldr	r3, [pc, #204]	@ (801a604 <Create_File+0x114>)
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	e05d      	b.n	801a5f6 <Create_File+0x106>
	} else {
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 801a53a:	220b      	movs	r2, #11
 801a53c:	6879      	ldr	r1, [r7, #4]
 801a53e:	4834      	ldr	r0, [pc, #208]	@ (801a610 <Create_File+0x120>)
 801a540:	f7ff fa50 	bl	80199e4 <f_open>
 801a544:	4603      	mov	r3, r0
 801a546:	461a      	mov	r2, r3
 801a548:	4b2e      	ldr	r3, [pc, #184]	@ (801a604 <Create_File+0x114>)
 801a54a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a54c:	4b2d      	ldr	r3, [pc, #180]	@ (801a604 <Create_File+0x114>)
 801a54e:	781b      	ldrb	r3, [r3, #0]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d013      	beq.n	801a57c <Create_File+0x8c>

			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n", fresult,
 801a554:	4b2b      	ldr	r3, [pc, #172]	@ (801a604 <Create_File+0x114>)
 801a556:	781b      	ldrb	r3, [r3, #0]
 801a558:	461a      	mov	r2, r3
 801a55a:	f107 0008 	add.w	r0, r7, #8
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	492c      	ldr	r1, [pc, #176]	@ (801a614 <Create_File+0x124>)
 801a562:	f002 fc99 	bl	801ce98 <siprintf>
					name);
			if (sdioPrints)
 801a566:	2300      	movs	r3, #0
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d004      	beq.n	801a576 <Create_File+0x86>
				printf(buf);
 801a56c:	f107 0308 	add.w	r3, r7, #8
 801a570:	4618      	mov	r0, r3
 801a572:	f002 fc21 	bl	801cdb8 <iprintf>

			return fresult;
 801a576:	4b23      	ldr	r3, [pc, #140]	@ (801a604 <Create_File+0x114>)
 801a578:	781b      	ldrb	r3, [r3, #0]
 801a57a:	e03c      	b.n	801a5f6 <Create_File+0x106>
		} else {

			sprintf(buf,
 801a57c:	f107 0308 	add.w	r3, r7, #8
 801a580:	687a      	ldr	r2, [r7, #4]
 801a582:	4925      	ldr	r1, [pc, #148]	@ (801a618 <Create_File+0x128>)
 801a584:	4618      	mov	r0, r3
 801a586:	f002 fc87 	bl	801ce98 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			if (sdioPrints)
 801a58a:	2300      	movs	r3, #0
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d004      	beq.n	801a59a <Create_File+0xaa>
				printf(buf);
 801a590:	f107 0308 	add.w	r3, r7, #8
 801a594:	4618      	mov	r0, r3
 801a596:	f002 fc0f 	bl	801cdb8 <iprintf>

		}

		fresult = f_close(&fil);
 801a59a:	481d      	ldr	r0, [pc, #116]	@ (801a610 <Create_File+0x120>)
 801a59c:	f7ff fdcf 	bl	801a13e <f_close>
 801a5a0:	4603      	mov	r3, r0
 801a5a2:	461a      	mov	r2, r3
 801a5a4:	4b17      	ldr	r3, [pc, #92]	@ (801a604 <Create_File+0x114>)
 801a5a6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a5a8:	4b16      	ldr	r3, [pc, #88]	@ (801a604 <Create_File+0x114>)
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d011      	beq.n	801a5d4 <Create_File+0xe4>

			sprintf(buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801a5b0:	4b14      	ldr	r3, [pc, #80]	@ (801a604 <Create_File+0x114>)
 801a5b2:	781b      	ldrb	r3, [r3, #0]
 801a5b4:	461a      	mov	r2, r3
 801a5b6:	f107 0008 	add.w	r0, r7, #8
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	4917      	ldr	r1, [pc, #92]	@ (801a61c <Create_File+0x12c>)
 801a5be:	f002 fc6b 	bl	801ce98 <siprintf>
			if (sdioPrints)
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d014      	beq.n	801a5f2 <Create_File+0x102>
				printf(buf);
 801a5c8:	f107 0308 	add.w	r3, r7, #8
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	f002 fbf3 	bl	801cdb8 <iprintf>
 801a5d2:	e00e      	b.n	801a5f2 <Create_File+0x102>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801a5d4:	f107 0308 	add.w	r3, r7, #8
 801a5d8:	687a      	ldr	r2, [r7, #4]
 801a5da:	4911      	ldr	r1, [pc, #68]	@ (801a620 <Create_File+0x130>)
 801a5dc:	4618      	mov	r0, r3
 801a5de:	f002 fc5b 	bl	801ce98 <siprintf>
			if (sdioPrints)
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d004      	beq.n	801a5f2 <Create_File+0x102>
				printf(buf);
 801a5e8:	f107 0308 	add.w	r3, r7, #8
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	f002 fbe3 	bl	801cdb8 <iprintf>

		}
	}
	return fresult;
 801a5f2:	4b04      	ldr	r3, [pc, #16]	@ (801a604 <Create_File+0x114>)
 801a5f4:	781b      	ldrb	r3, [r3, #0]
}
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	37a0      	adds	r7, #160	@ 0xa0
 801a5fa:	46bd      	mov	sp, r7
 801a5fc:	bd80      	pop	{r7, pc}
 801a5fe:	bf00      	nop
 801a600:	20002144 	.word	0x20002144
 801a604:	2000225c 	.word	0x2000225c
 801a608:	20002362 	.word	0x20002362
 801a60c:	08022218 	.word	0x08022218
 801a610:	20001f14 	.word	0x20001f14
 801a614:	0802224c 	.word	0x0802224c
 801a618:	08022274 	.word	0x08022274
 801a61c:	080222b4 	.word	0x080222b4
 801a620:	080221f8 	.word	0x080221f8

0801a624 <Update_File>:

FRESULT Update_File(char *name, char *data) {
 801a624:	b580      	push	{r7, lr}
 801a626:	b0a8      	sub	sp, #160	@ 0xa0
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
 801a62c:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 801a62e:	4951      	ldr	r1, [pc, #324]	@ (801a774 <Update_File+0x150>)
 801a630:	6878      	ldr	r0, [r7, #4]
 801a632:	f7ff fdae 	bl	801a192 <f_stat>
 801a636:	4603      	mov	r3, r0
 801a638:	461a      	mov	r2, r3
 801a63a:	4b4f      	ldr	r3, [pc, #316]	@ (801a778 <Update_File+0x154>)
 801a63c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801a63e:	4b4e      	ldr	r3, [pc, #312]	@ (801a778 <Update_File+0x154>)
 801a640:	781b      	ldrb	r3, [r3, #0]
 801a642:	2b00      	cmp	r3, #0
 801a644:	d011      	beq.n	801a66a <Update_File+0x46>

		sprintf(buf, "ERROR!!! *%s* does not exists\n", name);
 801a646:	f107 0308 	add.w	r3, r7, #8
 801a64a:	687a      	ldr	r2, [r7, #4]
 801a64c:	494b      	ldr	r1, [pc, #300]	@ (801a77c <Update_File+0x158>)
 801a64e:	4618      	mov	r0, r3
 801a650:	f002 fc22 	bl	801ce98 <siprintf>
		if (sdioPrints)
 801a654:	2300      	movs	r3, #0
 801a656:	2b00      	cmp	r3, #0
 801a658:	d004      	beq.n	801a664 <Update_File+0x40>
			printf(buf);
 801a65a:	f107 0308 	add.w	r3, r7, #8
 801a65e:	4618      	mov	r0, r3
 801a660:	f002 fbaa 	bl	801cdb8 <iprintf>

		return fresult;
 801a664:	4b44      	ldr	r3, [pc, #272]	@ (801a778 <Update_File+0x154>)
 801a666:	781b      	ldrb	r3, [r3, #0]
 801a668:	e080      	b.n	801a76c <Update_File+0x148>
	}

	else {
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801a66a:	2232      	movs	r2, #50	@ 0x32
 801a66c:	6879      	ldr	r1, [r7, #4]
 801a66e:	4844      	ldr	r0, [pc, #272]	@ (801a780 <Update_File+0x15c>)
 801a670:	f7ff f9b8 	bl	80199e4 <f_open>
 801a674:	4603      	mov	r3, r0
 801a676:	461a      	mov	r2, r3
 801a678:	4b3f      	ldr	r3, [pc, #252]	@ (801a778 <Update_File+0x154>)
 801a67a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a67c:	4b3e      	ldr	r3, [pc, #248]	@ (801a778 <Update_File+0x154>)
 801a67e:	781b      	ldrb	r3, [r3, #0]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d013      	beq.n	801a6ac <Update_File+0x88>

			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n", fresult,
 801a684:	4b3c      	ldr	r3, [pc, #240]	@ (801a778 <Update_File+0x154>)
 801a686:	781b      	ldrb	r3, [r3, #0]
 801a688:	461a      	mov	r2, r3
 801a68a:	f107 0008 	add.w	r0, r7, #8
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	493c      	ldr	r1, [pc, #240]	@ (801a784 <Update_File+0x160>)
 801a692:	f002 fc01 	bl	801ce98 <siprintf>
					name);
			if (sdioPrints)
 801a696:	2300      	movs	r3, #0
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d004      	beq.n	801a6a6 <Update_File+0x82>
				printf(buf);
 801a69c:	f107 0308 	add.w	r3, r7, #8
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	f002 fb89 	bl	801cdb8 <iprintf>

			return fresult;
 801a6a6:	4b34      	ldr	r3, [pc, #208]	@ (801a778 <Update_File+0x154>)
 801a6a8:	781b      	ldrb	r3, [r3, #0]
 801a6aa:	e05f      	b.n	801a76c <Update_File+0x148>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 801a6ac:	6838      	ldr	r0, [r7, #0]
 801a6ae:	f7e5 fdf7 	bl	80002a0 <strlen>
 801a6b2:	4602      	mov	r2, r0
 801a6b4:	4b34      	ldr	r3, [pc, #208]	@ (801a788 <Update_File+0x164>)
 801a6b6:	6839      	ldr	r1, [r7, #0]
 801a6b8:	4831      	ldr	r0, [pc, #196]	@ (801a780 <Update_File+0x15c>)
 801a6ba:	f7ff fb4d 	bl	8019d58 <f_write>
 801a6be:	4603      	mov	r3, r0
 801a6c0:	461a      	mov	r2, r3
 801a6c2:	4b2d      	ldr	r3, [pc, #180]	@ (801a778 <Update_File+0x154>)
 801a6c4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a6c6:	4b2c      	ldr	r3, [pc, #176]	@ (801a778 <Update_File+0x154>)
 801a6c8:	781b      	ldrb	r3, [r3, #0]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d011      	beq.n	801a6f2 <Update_File+0xce>

			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n", fresult,
 801a6ce:	4b2a      	ldr	r3, [pc, #168]	@ (801a778 <Update_File+0x154>)
 801a6d0:	781b      	ldrb	r3, [r3, #0]
 801a6d2:	461a      	mov	r2, r3
 801a6d4:	f107 0008 	add.w	r0, r7, #8
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	492c      	ldr	r1, [pc, #176]	@ (801a78c <Update_File+0x168>)
 801a6dc:	f002 fbdc 	bl	801ce98 <siprintf>
					name);
			if (sdioPrints)
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d014      	beq.n	801a710 <Update_File+0xec>
				printf(buf);
 801a6e6:	f107 0308 	add.w	r3, r7, #8
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	f002 fb64 	bl	801cdb8 <iprintf>
 801a6f0:	e00e      	b.n	801a710 <Update_File+0xec>

		}

		else {

			sprintf(buf, "*%s* UPDATED successfully\n", name);
 801a6f2:	f107 0308 	add.w	r3, r7, #8
 801a6f6:	687a      	ldr	r2, [r7, #4]
 801a6f8:	4925      	ldr	r1, [pc, #148]	@ (801a790 <Update_File+0x16c>)
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	f002 fbcc 	bl	801ce98 <siprintf>
			if (sdioPrints)
 801a700:	2300      	movs	r3, #0
 801a702:	2b00      	cmp	r3, #0
 801a704:	d004      	beq.n	801a710 <Update_File+0xec>
				printf(buf);
 801a706:	f107 0308 	add.w	r3, r7, #8
 801a70a:	4618      	mov	r0, r3
 801a70c:	f002 fb54 	bl	801cdb8 <iprintf>

		}

		/* Close file */
		fresult = f_close(&fil);
 801a710:	481b      	ldr	r0, [pc, #108]	@ (801a780 <Update_File+0x15c>)
 801a712:	f7ff fd14 	bl	801a13e <f_close>
 801a716:	4603      	mov	r3, r0
 801a718:	461a      	mov	r2, r3
 801a71a:	4b17      	ldr	r3, [pc, #92]	@ (801a778 <Update_File+0x154>)
 801a71c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a71e:	4b16      	ldr	r3, [pc, #88]	@ (801a778 <Update_File+0x154>)
 801a720:	781b      	ldrb	r3, [r3, #0]
 801a722:	2b00      	cmp	r3, #0
 801a724:	d011      	beq.n	801a74a <Update_File+0x126>

			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n", fresult,
 801a726:	4b14      	ldr	r3, [pc, #80]	@ (801a778 <Update_File+0x154>)
 801a728:	781b      	ldrb	r3, [r3, #0]
 801a72a:	461a      	mov	r2, r3
 801a72c:	f107 0008 	add.w	r0, r7, #8
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	4918      	ldr	r1, [pc, #96]	@ (801a794 <Update_File+0x170>)
 801a734:	f002 fbb0 	bl	801ce98 <siprintf>
					name);
			if (sdioPrints)
 801a738:	2300      	movs	r3, #0
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d014      	beq.n	801a768 <Update_File+0x144>
				printf(buf);
 801a73e:	f107 0308 	add.w	r3, r7, #8
 801a742:	4618      	mov	r0, r3
 801a744:	f002 fb38 	bl	801cdb8 <iprintf>
 801a748:	e00e      	b.n	801a768 <Update_File+0x144>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801a74a:	f107 0308 	add.w	r3, r7, #8
 801a74e:	687a      	ldr	r2, [r7, #4]
 801a750:	4911      	ldr	r1, [pc, #68]	@ (801a798 <Update_File+0x174>)
 801a752:	4618      	mov	r0, r3
 801a754:	f002 fba0 	bl	801ce98 <siprintf>
			if (sdioPrints)
 801a758:	2300      	movs	r3, #0
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d004      	beq.n	801a768 <Update_File+0x144>
				printf(buf);
 801a75e:	f107 0308 	add.w	r3, r7, #8
 801a762:	4618      	mov	r0, r3
 801a764:	f002 fb28 	bl	801cdb8 <iprintf>

		}
	}
	return fresult;
 801a768:	4b03      	ldr	r3, [pc, #12]	@ (801a778 <Update_File+0x154>)
 801a76a:	781b      	ldrb	r3, [r3, #0]
}
 801a76c:	4618      	mov	r0, r3
 801a76e:	37a0      	adds	r7, #160	@ 0xa0
 801a770:	46bd      	mov	sp, r7
 801a772:	bd80      	pop	{r7, pc}
 801a774:	20002144 	.word	0x20002144
 801a778:	2000225c 	.word	0x2000225c
 801a77c:	080220a8 	.word	0x080220a8
 801a780:	20001f14 	.word	0x20001f14
 801a784:	080220c8 	.word	0x080220c8
 801a788:	20002260 	.word	0x20002260
 801a78c:	080222d8 	.word	0x080222d8
 801a790:	08022300 	.word	0x08022300
 801a794:	080221d0 	.word	0x080221d0
 801a798:	080221f8 	.word	0x080221f8

0801a79c <json_update>:
uint8_t fileWrite_sec = 0;

uint8_t datawritten = 0;
char buffer[255];

void json_update() {
 801a79c:	b580      	push	{r7, lr}
 801a79e:	b088      	sub	sp, #32
 801a7a0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a7a2:	f107 0314 	add.w	r3, r7, #20
 801a7a6:	2200      	movs	r2, #0
 801a7a8:	4619      	mov	r1, r3
 801a7aa:	48b4      	ldr	r0, [pc, #720]	@ (801aa7c <json_update+0x2e0>)
 801a7ac:	f7ee fddc 	bl	8009368 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a7b0:	463b      	mov	r3, r7
 801a7b2:	2200      	movs	r2, #0
 801a7b4:	4619      	mov	r1, r3
 801a7b6:	48b1      	ldr	r0, [pc, #708]	@ (801aa7c <json_update+0x2e0>)
 801a7b8:	f7ee fcf4 	bl	80091a4 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801a7bc:	7dba      	ldrb	r2, [r7, #22]
 801a7be:	4bb0      	ldr	r3, [pc, #704]	@ (801aa80 <json_update+0x2e4>)
 801a7c0:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801a7c2:	7d7a      	ldrb	r2, [r7, #21]
 801a7c4:	4baf      	ldr	r3, [pc, #700]	@ (801aa84 <json_update+0x2e8>)
 801a7c6:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801a7c8:	7dfa      	ldrb	r2, [r7, #23]
 801a7ca:	4baf      	ldr	r3, [pc, #700]	@ (801aa88 <json_update+0x2ec>)
 801a7cc:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801a7ce:	783a      	ldrb	r2, [r7, #0]
 801a7d0:	4bae      	ldr	r3, [pc, #696]	@ (801aa8c <json_update+0x2f0>)
 801a7d2:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801a7d4:	787a      	ldrb	r2, [r7, #1]
 801a7d6:	4bae      	ldr	r3, [pc, #696]	@ (801aa90 <json_update+0x2f4>)
 801a7d8:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801a7da:	78ba      	ldrb	r2, [r7, #2]
 801a7dc:	4bad      	ldr	r3, [pc, #692]	@ (801aa94 <json_update+0x2f8>)
 801a7de:	701a      	strb	r2, [r3, #0]

	fresult1 = Mount_SD("/");
 801a7e0:	48ad      	ldr	r0, [pc, #692]	@ (801aa98 <json_update+0x2fc>)
 801a7e2:	f7ff fe31 	bl	801a448 <Mount_SD>
 801a7e6:	4603      	mov	r3, r0
 801a7e8:	461a      	mov	r2, r3
 801a7ea:	4bac      	ldr	r3, [pc, #688]	@ (801aa9c <json_update+0x300>)
 801a7ec:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a7ee:	4bab      	ldr	r3, [pc, #684]	@ (801aa9c <json_update+0x300>)
 801a7f0:	781b      	ldrb	r3, [r3, #0]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	f040 8137 	bne.w	801aa66 <json_update+0x2ca>
		//CAN Bus
		sprintf(buffer, "{\n");
 801a7f8:	49a9      	ldr	r1, [pc, #676]	@ (801aaa0 <json_update+0x304>)
 801a7fa:	48aa      	ldr	r0, [pc, #680]	@ (801aaa4 <json_update+0x308>)
 801a7fc:	f002 fb4c 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a800:	49a8      	ldr	r1, [pc, #672]	@ (801aaa4 <json_update+0x308>)
 801a802:	48a9      	ldr	r0, [pc, #676]	@ (801aaa8 <json_update+0x30c>)
 801a804:	f7ff ff0e 	bl	801a624 <Update_File>
 801a808:	4603      	mov	r3, r0
 801a80a:	461a      	mov	r2, r3
 801a80c:	4ba3      	ldr	r3, [pc, #652]	@ (801aa9c <json_update+0x300>)
 801a80e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a810:	22ff      	movs	r2, #255	@ 0xff
 801a812:	2100      	movs	r1, #0
 801a814:	48a3      	ldr	r0, [pc, #652]	@ (801aaa4 <json_update+0x308>)
 801a816:	f002 fc89 	bl	801d12c <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801a81a:	f7e7 fdaf 	bl	800237c <ver_GetUid>
 801a81e:	4603      	mov	r3, r0
 801a820:	461a      	mov	r2, r3
 801a822:	49a2      	ldr	r1, [pc, #648]	@ (801aaac <json_update+0x310>)
 801a824:	489f      	ldr	r0, [pc, #636]	@ (801aaa4 <json_update+0x308>)
 801a826:	f002 fb37 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a82a:	499e      	ldr	r1, [pc, #632]	@ (801aaa4 <json_update+0x308>)
 801a82c:	489e      	ldr	r0, [pc, #632]	@ (801aaa8 <json_update+0x30c>)
 801a82e:	f7ff fef9 	bl	801a624 <Update_File>
 801a832:	4603      	mov	r3, r0
 801a834:	461a      	mov	r2, r3
 801a836:	4b99      	ldr	r3, [pc, #612]	@ (801aa9c <json_update+0x300>)
 801a838:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a83a:	22ff      	movs	r2, #255	@ 0xff
 801a83c:	2100      	movs	r1, #0
 801a83e:	4899      	ldr	r0, [pc, #612]	@ (801aaa4 <json_update+0x308>)
 801a840:	f002 fc74 	bl	801d12c <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801a844:	4a9a      	ldr	r2, [pc, #616]	@ (801aab0 <json_update+0x314>)
 801a846:	499b      	ldr	r1, [pc, #620]	@ (801aab4 <json_update+0x318>)
 801a848:	4896      	ldr	r0, [pc, #600]	@ (801aaa4 <json_update+0x308>)
 801a84a:	f002 fb25 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a84e:	4995      	ldr	r1, [pc, #596]	@ (801aaa4 <json_update+0x308>)
 801a850:	4895      	ldr	r0, [pc, #596]	@ (801aaa8 <json_update+0x30c>)
 801a852:	f7ff fee7 	bl	801a624 <Update_File>
 801a856:	4603      	mov	r3, r0
 801a858:	461a      	mov	r2, r3
 801a85a:	4b90      	ldr	r3, [pc, #576]	@ (801aa9c <json_update+0x300>)
 801a85c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a85e:	22ff      	movs	r2, #255	@ 0xff
 801a860:	2100      	movs	r1, #0
 801a862:	4890      	ldr	r0, [pc, #576]	@ (801aaa4 <json_update+0x308>)
 801a864:	f002 fc62 	bl	801d12c <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a868:	783b      	ldrb	r3, [r7, #0]
 801a86a:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801a86c:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a86e:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801a870:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a872:	9300      	str	r3, [sp, #0]
 801a874:	460b      	mov	r3, r1
 801a876:	4990      	ldr	r1, [pc, #576]	@ (801aab8 <json_update+0x31c>)
 801a878:	488a      	ldr	r0, [pc, #552]	@ (801aaa4 <json_update+0x308>)
 801a87a:	f002 fb0d 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a87e:	4989      	ldr	r1, [pc, #548]	@ (801aaa4 <json_update+0x308>)
 801a880:	4889      	ldr	r0, [pc, #548]	@ (801aaa8 <json_update+0x30c>)
 801a882:	f7ff fecf 	bl	801a624 <Update_File>
 801a886:	4603      	mov	r3, r0
 801a888:	461a      	mov	r2, r3
 801a88a:	4b84      	ldr	r3, [pc, #528]	@ (801aa9c <json_update+0x300>)
 801a88c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a88e:	22ff      	movs	r2, #255	@ 0xff
 801a890:	2100      	movs	r1, #0
 801a892:	4884      	ldr	r0, [pc, #528]	@ (801aaa4 <json_update+0x308>)
 801a894:	f002 fc4a 	bl	801d12c <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801a898:	4a88      	ldr	r2, [pc, #544]	@ (801aabc <json_update+0x320>)
 801a89a:	4989      	ldr	r1, [pc, #548]	@ (801aac0 <json_update+0x324>)
 801a89c:	4881      	ldr	r0, [pc, #516]	@ (801aaa4 <json_update+0x308>)
 801a89e:	f002 fafb 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a8a2:	4980      	ldr	r1, [pc, #512]	@ (801aaa4 <json_update+0x308>)
 801a8a4:	4880      	ldr	r0, [pc, #512]	@ (801aaa8 <json_update+0x30c>)
 801a8a6:	f7ff febd 	bl	801a624 <Update_File>
 801a8aa:	4603      	mov	r3, r0
 801a8ac:	461a      	mov	r2, r3
 801a8ae:	4b7b      	ldr	r3, [pc, #492]	@ (801aa9c <json_update+0x300>)
 801a8b0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a8b2:	22ff      	movs	r2, #255	@ 0xff
 801a8b4:	2100      	movs	r1, #0
 801a8b6:	487b      	ldr	r0, [pc, #492]	@ (801aaa4 <json_update+0x308>)
 801a8b8:	f002 fc38 	bl	801d12c <memset>
		sprintf(buffer, "\"Filename\":\"%s\",\n", filename_ver_date);
 801a8bc:	4a81      	ldr	r2, [pc, #516]	@ (801aac4 <json_update+0x328>)
 801a8be:	4982      	ldr	r1, [pc, #520]	@ (801aac8 <json_update+0x32c>)
 801a8c0:	4878      	ldr	r0, [pc, #480]	@ (801aaa4 <json_update+0x308>)
 801a8c2:	f002 fae9 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a8c6:	4977      	ldr	r1, [pc, #476]	@ (801aaa4 <json_update+0x308>)
 801a8c8:	4877      	ldr	r0, [pc, #476]	@ (801aaa8 <json_update+0x30c>)
 801a8ca:	f7ff feab 	bl	801a624 <Update_File>
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	461a      	mov	r2, r3
 801a8d2:	4b72      	ldr	r3, [pc, #456]	@ (801aa9c <json_update+0x300>)
 801a8d4:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a8d6:	22ff      	movs	r2, #255	@ 0xff
 801a8d8:	2100      	movs	r1, #0
 801a8da:	4872      	ldr	r0, [pc, #456]	@ (801aaa4 <json_update+0x308>)
 801a8dc:	f002 fc26 	bl	801d12c <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801a8e0:	4a7a      	ldr	r2, [pc, #488]	@ (801aacc <json_update+0x330>)
 801a8e2:	497b      	ldr	r1, [pc, #492]	@ (801aad0 <json_update+0x334>)
 801a8e4:	486f      	ldr	r0, [pc, #444]	@ (801aaa4 <json_update+0x308>)
 801a8e6:	f002 fad7 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a8ea:	496e      	ldr	r1, [pc, #440]	@ (801aaa4 <json_update+0x308>)
 801a8ec:	486e      	ldr	r0, [pc, #440]	@ (801aaa8 <json_update+0x30c>)
 801a8ee:	f7ff fe99 	bl	801a624 <Update_File>
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	461a      	mov	r2, r3
 801a8f6:	4b69      	ldr	r3, [pc, #420]	@ (801aa9c <json_update+0x300>)
 801a8f8:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
		fresult1 = Update_File(filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801a8fa:	22ff      	movs	r2, #255	@ 0xff
 801a8fc:	2100      	movs	r1, #0
 801a8fe:	4869      	ldr	r0, [pc, #420]	@ (801aaa4 <json_update+0x308>)
 801a900:	f002 fc14 	bl	801d12c <memset>
		sprintf(buffer, "\"co2\":\"%.2f\",\n", _RunTime_Packet.co2);
 801a904:	4b73      	ldr	r3, [pc, #460]	@ (801aad4 <json_update+0x338>)
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	4618      	mov	r0, r3
 801a90a:	f7e5 fe35 	bl	8000578 <__aeabi_f2d>
 801a90e:	4602      	mov	r2, r0
 801a910:	460b      	mov	r3, r1
 801a912:	4971      	ldr	r1, [pc, #452]	@ (801aad8 <json_update+0x33c>)
 801a914:	4863      	ldr	r0, [pc, #396]	@ (801aaa4 <json_update+0x308>)
 801a916:	f002 fabf 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a91a:	4962      	ldr	r1, [pc, #392]	@ (801aaa4 <json_update+0x308>)
 801a91c:	4862      	ldr	r0, [pc, #392]	@ (801aaa8 <json_update+0x30c>)
 801a91e:	f7ff fe81 	bl	801a624 <Update_File>
 801a922:	4603      	mov	r3, r0
 801a924:	461a      	mov	r2, r3
 801a926:	4b5d      	ldr	r3, [pc, #372]	@ (801aa9c <json_update+0x300>)
 801a928:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a92a:	22ff      	movs	r2, #255	@ 0xff
 801a92c:	2100      	movs	r1, #0
 801a92e:	485d      	ldr	r0, [pc, #372]	@ (801aaa4 <json_update+0x308>)
 801a930:	f002 fbfc 	bl	801d12c <memset>
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
				_RunTime_Packet.temperature);
 801a934:	4b67      	ldr	r3, [pc, #412]	@ (801aad4 <json_update+0x338>)
 801a936:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
 801a938:	4618      	mov	r0, r3
 801a93a:	f7e5 fe1d 	bl	8000578 <__aeabi_f2d>
 801a93e:	4602      	mov	r2, r0
 801a940:	460b      	mov	r3, r1
 801a942:	4966      	ldr	r1, [pc, #408]	@ (801aadc <json_update+0x340>)
 801a944:	4857      	ldr	r0, [pc, #348]	@ (801aaa4 <json_update+0x308>)
 801a946:	f002 faa7 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a94a:	4956      	ldr	r1, [pc, #344]	@ (801aaa4 <json_update+0x308>)
 801a94c:	4856      	ldr	r0, [pc, #344]	@ (801aaa8 <json_update+0x30c>)
 801a94e:	f7ff fe69 	bl	801a624 <Update_File>
 801a952:	4603      	mov	r3, r0
 801a954:	461a      	mov	r2, r3
 801a956:	4b51      	ldr	r3, [pc, #324]	@ (801aa9c <json_update+0x300>)
 801a958:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a95a:	22ff      	movs	r2, #255	@ 0xff
 801a95c:	2100      	movs	r1, #0
 801a95e:	4851      	ldr	r0, [pc, #324]	@ (801aaa4 <json_update+0x308>)
 801a960:	f002 fbe4 	bl	801d12c <memset>
		sprintf(buffer, "\"humidity\":\"%.2f\",\n", _RunTime_Packet.humidity);
 801a964:	4b5b      	ldr	r3, [pc, #364]	@ (801aad4 <json_update+0x338>)
 801a966:	689b      	ldr	r3, [r3, #8]
 801a968:	4618      	mov	r0, r3
 801a96a:	f7e5 fe05 	bl	8000578 <__aeabi_f2d>
 801a96e:	4602      	mov	r2, r0
 801a970:	460b      	mov	r3, r1
 801a972:	495b      	ldr	r1, [pc, #364]	@ (801aae0 <json_update+0x344>)
 801a974:	484b      	ldr	r0, [pc, #300]	@ (801aaa4 <json_update+0x308>)
 801a976:	f002 fa8f 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a97a:	494a      	ldr	r1, [pc, #296]	@ (801aaa4 <json_update+0x308>)
 801a97c:	484a      	ldr	r0, [pc, #296]	@ (801aaa8 <json_update+0x30c>)
 801a97e:	f7ff fe51 	bl	801a624 <Update_File>
 801a982:	4603      	mov	r3, r0
 801a984:	461a      	mov	r2, r3
 801a986:	4b45      	ldr	r3, [pc, #276]	@ (801aa9c <json_update+0x300>)
 801a988:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801a98a:	22ff      	movs	r2, #255	@ 0xff
 801a98c:	2100      	movs	r1, #0
 801a98e:	4845      	ldr	r0, [pc, #276]	@ (801aaa4 <json_update+0x308>)
 801a990:	f002 fbcc 	bl	801d12c <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801a994:	4b4f      	ldr	r3, [pc, #316]	@ (801aad4 <json_update+0x338>)
 801a996:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d001      	beq.n	801a9a0 <json_update+0x204>
 801a99c:	4b51      	ldr	r3, [pc, #324]	@ (801aae4 <json_update+0x348>)
 801a99e:	e000      	b.n	801a9a2 <json_update+0x206>
 801a9a0:	4b51      	ldr	r3, [pc, #324]	@ (801aae8 <json_update+0x34c>)
 801a9a2:	461a      	mov	r2, r3
 801a9a4:	4951      	ldr	r1, [pc, #324]	@ (801aaec <json_update+0x350>)
 801a9a6:	483f      	ldr	r0, [pc, #252]	@ (801aaa4 <json_update+0x308>)
 801a9a8:	f002 fa76 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a9ac:	493d      	ldr	r1, [pc, #244]	@ (801aaa4 <json_update+0x308>)
 801a9ae:	483e      	ldr	r0, [pc, #248]	@ (801aaa8 <json_update+0x30c>)
 801a9b0:	f7ff fe38 	bl	801a624 <Update_File>
 801a9b4:	4603      	mov	r3, r0
 801a9b6:	461a      	mov	r2, r3
 801a9b8:	4b38      	ldr	r3, [pc, #224]	@ (801aa9c <json_update+0x300>)
 801a9ba:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a9bc:	22ff      	movs	r2, #255	@ 0xff
 801a9be:	2100      	movs	r1, #0
 801a9c0:	4838      	ldr	r0, [pc, #224]	@ (801aaa4 <json_update+0x308>)
 801a9c2:	f002 fbb3 	bl	801d12c <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801a9c6:	4b43      	ldr	r3, [pc, #268]	@ (801aad4 <json_update+0x338>)
 801a9c8:	695b      	ldr	r3, [r3, #20]
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	f7e5 fdd4 	bl	8000578 <__aeabi_f2d>
 801a9d0:	4602      	mov	r2, r0
 801a9d2:	460b      	mov	r3, r1
 801a9d4:	4946      	ldr	r1, [pc, #280]	@ (801aaf0 <json_update+0x354>)
 801a9d6:	4833      	ldr	r0, [pc, #204]	@ (801aaa4 <json_update+0x308>)
 801a9d8:	f002 fa5e 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a9dc:	4931      	ldr	r1, [pc, #196]	@ (801aaa4 <json_update+0x308>)
 801a9de:	4832      	ldr	r0, [pc, #200]	@ (801aaa8 <json_update+0x30c>)
 801a9e0:	f7ff fe20 	bl	801a624 <Update_File>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	461a      	mov	r2, r3
 801a9e8:	4b2c      	ldr	r3, [pc, #176]	@ (801aa9c <json_update+0x300>)
 801a9ea:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a9ec:	22ff      	movs	r2, #255	@ 0xff
 801a9ee:	2100      	movs	r1, #0
 801a9f0:	482c      	ldr	r0, [pc, #176]	@ (801aaa4 <json_update+0x308>)
 801a9f2:	f002 fb9b 	bl	801d12c <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801a9f6:	493f      	ldr	r1, [pc, #252]	@ (801aaf4 <json_update+0x358>)
 801a9f8:	482a      	ldr	r0, [pc, #168]	@ (801aaa4 <json_update+0x308>)
 801a9fa:	f002 fa4d 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a9fe:	4929      	ldr	r1, [pc, #164]	@ (801aaa4 <json_update+0x308>)
 801aa00:	4829      	ldr	r0, [pc, #164]	@ (801aaa8 <json_update+0x30c>)
 801aa02:	f7ff fe0f 	bl	801a624 <Update_File>
 801aa06:	4603      	mov	r3, r0
 801aa08:	461a      	mov	r2, r3
 801aa0a:	4b24      	ldr	r3, [pc, #144]	@ (801aa9c <json_update+0x300>)
 801aa0c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aa0e:	22ff      	movs	r2, #255	@ 0xff
 801aa10:	2100      	movs	r1, #0
 801aa12:	4824      	ldr	r0, [pc, #144]	@ (801aaa4 <json_update+0x308>)
 801aa14:	f002 fb8a 	bl	801d12c <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801aa18:	4b2e      	ldr	r3, [pc, #184]	@ (801aad4 <json_update+0x338>)
 801aa1a:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	f7e5 fdab 	bl	8000578 <__aeabi_f2d>
 801aa22:	4602      	mov	r2, r0
 801aa24:	460b      	mov	r3, r1
 801aa26:	4934      	ldr	r1, [pc, #208]	@ (801aaf8 <json_update+0x35c>)
 801aa28:	481e      	ldr	r0, [pc, #120]	@ (801aaa4 <json_update+0x308>)
 801aa2a:	f002 fa35 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aa2e:	491d      	ldr	r1, [pc, #116]	@ (801aaa4 <json_update+0x308>)
 801aa30:	481d      	ldr	r0, [pc, #116]	@ (801aaa8 <json_update+0x30c>)
 801aa32:	f7ff fdf7 	bl	801a624 <Update_File>
 801aa36:	4603      	mov	r3, r0
 801aa38:	461a      	mov	r2, r3
 801aa3a:	4b18      	ldr	r3, [pc, #96]	@ (801aa9c <json_update+0x300>)
 801aa3c:	701a      	strb	r2, [r3, #0]

		//we end it
		memset(buffer, 0, sizeof(buffer));
 801aa3e:	22ff      	movs	r2, #255	@ 0xff
 801aa40:	2100      	movs	r1, #0
 801aa42:	4818      	ldr	r0, [pc, #96]	@ (801aaa4 <json_update+0x308>)
 801aa44:	f002 fb72 	bl	801d12c <memset>
		sprintf(buffer, "}\n\n");
 801aa48:	492c      	ldr	r1, [pc, #176]	@ (801aafc <json_update+0x360>)
 801aa4a:	4816      	ldr	r0, [pc, #88]	@ (801aaa4 <json_update+0x308>)
 801aa4c:	f002 fa24 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aa50:	4914      	ldr	r1, [pc, #80]	@ (801aaa4 <json_update+0x308>)
 801aa52:	4815      	ldr	r0, [pc, #84]	@ (801aaa8 <json_update+0x30c>)
 801aa54:	f7ff fde6 	bl	801a624 <Update_File>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	461a      	mov	r2, r3
 801aa5c:	4b0f      	ldr	r3, [pc, #60]	@ (801aa9c <json_update+0x300>)
 801aa5e:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801aa60:	480d      	ldr	r0, [pc, #52]	@ (801aa98 <json_update+0x2fc>)
 801aa62:	f7ff fd1d 	bl	801a4a0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801aa66:	4b0d      	ldr	r3, [pc, #52]	@ (801aa9c <json_update+0x300>)
 801aa68:	781b      	ldrb	r3, [r3, #0]
 801aa6a:	b25a      	sxtb	r2, r3
 801aa6c:	4b19      	ldr	r3, [pc, #100]	@ (801aad4 <json_update+0x338>)
 801aa6e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801aa72:	bf00      	nop
 801aa74:	3718      	adds	r7, #24
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd80      	pop	{r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	200017e4 	.word	0x200017e4
 801aa80:	20002363 	.word	0x20002363
 801aa84:	20002364 	.word	0x20002364
 801aa88:	20002365 	.word	0x20002365
 801aa8c:	20002366 	.word	0x20002366
 801aa90:	20002367 	.word	0x20002367
 801aa94:	20002368 	.word	0x20002368
 801aa98:	080223ec 	.word	0x080223ec
 801aa9c:	20002264 	.word	0x20002264
 801aaa0:	080223f0 	.word	0x080223f0
 801aaa4:	2000236c 	.word	0x2000236c
 801aaa8:	20002268 	.word	0x20002268
 801aaac:	080223f4 	.word	0x080223f4
 801aab0:	200013c1 	.word	0x200013c1
 801aab4:	08022404 	.word	0x08022404
 801aab8:	08022410 	.word	0x08022410
 801aabc:	200013f3 	.word	0x200013f3
 801aac0:	08022430 	.word	0x08022430
 801aac4:	200022cc 	.word	0x200022cc
 801aac8:	08022444 	.word	0x08022444
 801aacc:	20001457 	.word	0x20001457
 801aad0:	08022458 	.word	0x08022458
 801aad4:	2000148c 	.word	0x2000148c
 801aad8:	08022468 	.word	0x08022468
 801aadc:	08022478 	.word	0x08022478
 801aae0:	08022490 	.word	0x08022490
 801aae4:	080224a4 	.word	0x080224a4
 801aae8:	080224ac 	.word	0x080224ac
 801aaec:	080224b4 	.word	0x080224b4
 801aaf0:	080224c4 	.word	0x080224c4
 801aaf4:	080224d8 	.word	0x080224d8
 801aaf8:	080224e8 	.word	0x080224e8
 801aafc:	080224fc 	.word	0x080224fc

0801ab00 <csv_update>:
void csv_update() {
 801ab00:	b580      	push	{r7, lr}
 801ab02:	b088      	sub	sp, #32
 801ab04:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801ab06:	f107 0314 	add.w	r3, r7, #20
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	4619      	mov	r1, r3
 801ab0e:	48ab      	ldr	r0, [pc, #684]	@ (801adbc <csv_update+0x2bc>)
 801ab10:	f7ee fc2a 	bl	8009368 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801ab14:	463b      	mov	r3, r7
 801ab16:	2200      	movs	r2, #0
 801ab18:	4619      	mov	r1, r3
 801ab1a:	48a8      	ldr	r0, [pc, #672]	@ (801adbc <csv_update+0x2bc>)
 801ab1c:	f7ee fb42 	bl	80091a4 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801ab20:	7dba      	ldrb	r2, [r7, #22]
 801ab22:	4ba7      	ldr	r3, [pc, #668]	@ (801adc0 <csv_update+0x2c0>)
 801ab24:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801ab26:	7d7a      	ldrb	r2, [r7, #21]
 801ab28:	4ba6      	ldr	r3, [pc, #664]	@ (801adc4 <csv_update+0x2c4>)
 801ab2a:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801ab2c:	7dfa      	ldrb	r2, [r7, #23]
 801ab2e:	4ba6      	ldr	r3, [pc, #664]	@ (801adc8 <csv_update+0x2c8>)
 801ab30:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801ab32:	783a      	ldrb	r2, [r7, #0]
 801ab34:	4ba5      	ldr	r3, [pc, #660]	@ (801adcc <csv_update+0x2cc>)
 801ab36:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801ab38:	787a      	ldrb	r2, [r7, #1]
 801ab3a:	4ba5      	ldr	r3, [pc, #660]	@ (801add0 <csv_update+0x2d0>)
 801ab3c:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801ab3e:	78ba      	ldrb	r2, [r7, #2]
 801ab40:	4ba4      	ldr	r3, [pc, #656]	@ (801add4 <csv_update+0x2d4>)
 801ab42:	701a      	strb	r2, [r3, #0]
	fresult1 = Mount_SD("/");
 801ab44:	48a4      	ldr	r0, [pc, #656]	@ (801add8 <csv_update+0x2d8>)
 801ab46:	f7ff fc7f 	bl	801a448 <Mount_SD>
 801ab4a:	4603      	mov	r3, r0
 801ab4c:	461a      	mov	r2, r3
 801ab4e:	4ba3      	ldr	r3, [pc, #652]	@ (801addc <csv_update+0x2dc>)
 801ab50:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801ab52:	4ba2      	ldr	r3, [pc, #648]	@ (801addc <csv_update+0x2dc>)
 801ab54:	781b      	ldrb	r3, [r3, #0]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	f040 8126 	bne.w	801ada8 <csv_update+0x2a8>
//				_RunTime_Packet.pm2_5, _RunTime_Packet.battery_voltage);
//		Update_File(filename_with_format, buffer);
//		sprintf(buffer, "\n");
//		Update_File(filename_with_format, buffer);

		sprintf(buffer, "%s ,", ver_GetUid());
 801ab5c:	f7e7 fc0e 	bl	800237c <ver_GetUid>
 801ab60:	4603      	mov	r3, r0
 801ab62:	461a      	mov	r2, r3
 801ab64:	499e      	ldr	r1, [pc, #632]	@ (801ade0 <csv_update+0x2e0>)
 801ab66:	489f      	ldr	r0, [pc, #636]	@ (801ade4 <csv_update+0x2e4>)
 801ab68:	f002 f996 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ab6c:	499d      	ldr	r1, [pc, #628]	@ (801ade4 <csv_update+0x2e4>)
 801ab6e:	489e      	ldr	r0, [pc, #632]	@ (801ade8 <csv_update+0x2e8>)
 801ab70:	f7ff fd58 	bl	801a624 <Update_File>
 801ab74:	4603      	mov	r3, r0
 801ab76:	461a      	mov	r2, r3
 801ab78:	4b98      	ldr	r3, [pc, #608]	@ (801addc <csv_update+0x2dc>)
 801ab7a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ab7c:	22ff      	movs	r2, #255	@ 0xff
 801ab7e:	2100      	movs	r1, #0
 801ab80:	4898      	ldr	r0, [pc, #608]	@ (801ade4 <csv_update+0x2e4>)
 801ab82:	f002 fad3 	bl	801d12c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801ab86:	4a99      	ldr	r2, [pc, #612]	@ (801adec <csv_update+0x2ec>)
 801ab88:	4995      	ldr	r1, [pc, #596]	@ (801ade0 <csv_update+0x2e0>)
 801ab8a:	4896      	ldr	r0, [pc, #600]	@ (801ade4 <csv_update+0x2e4>)
 801ab8c:	f002 f984 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ab90:	4994      	ldr	r1, [pc, #592]	@ (801ade4 <csv_update+0x2e4>)
 801ab92:	4895      	ldr	r0, [pc, #596]	@ (801ade8 <csv_update+0x2e8>)
 801ab94:	f7ff fd46 	bl	801a624 <Update_File>
 801ab98:	4603      	mov	r3, r0
 801ab9a:	461a      	mov	r2, r3
 801ab9c:	4b8f      	ldr	r3, [pc, #572]	@ (801addc <csv_update+0x2dc>)
 801ab9e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aba0:	22ff      	movs	r2, #255	@ 0xff
 801aba2:	2100      	movs	r1, #0
 801aba4:	488f      	ldr	r0, [pc, #572]	@ (801ade4 <csv_update+0x2e4>)
 801aba6:	f002 fac1 	bl	801d12c <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801abaa:	783b      	ldrb	r3, [r7, #0]
 801abac:	461a      	mov	r2, r3
 801abae:	787b      	ldrb	r3, [r7, #1]
 801abb0:	4619      	mov	r1, r3
				sTime.Seconds);
 801abb2:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801abb4:	9300      	str	r3, [sp, #0]
 801abb6:	460b      	mov	r3, r1
 801abb8:	498d      	ldr	r1, [pc, #564]	@ (801adf0 <csv_update+0x2f0>)
 801abba:	488a      	ldr	r0, [pc, #552]	@ (801ade4 <csv_update+0x2e4>)
 801abbc:	f002 f96c 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801abc0:	4988      	ldr	r1, [pc, #544]	@ (801ade4 <csv_update+0x2e4>)
 801abc2:	4889      	ldr	r0, [pc, #548]	@ (801ade8 <csv_update+0x2e8>)
 801abc4:	f7ff fd2e 	bl	801a624 <Update_File>
 801abc8:	4603      	mov	r3, r0
 801abca:	461a      	mov	r2, r3
 801abcc:	4b83      	ldr	r3, [pc, #524]	@ (801addc <csv_update+0x2dc>)
 801abce:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801abd0:	22ff      	movs	r2, #255	@ 0xff
 801abd2:	2100      	movs	r1, #0
 801abd4:	4883      	ldr	r0, [pc, #524]	@ (801ade4 <csv_update+0x2e4>)
 801abd6:	f002 faa9 	bl	801d12c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801abda:	4a86      	ldr	r2, [pc, #536]	@ (801adf4 <csv_update+0x2f4>)
 801abdc:	4980      	ldr	r1, [pc, #512]	@ (801ade0 <csv_update+0x2e0>)
 801abde:	4881      	ldr	r0, [pc, #516]	@ (801ade4 <csv_update+0x2e4>)
 801abe0:	f002 f95a 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801abe4:	497f      	ldr	r1, [pc, #508]	@ (801ade4 <csv_update+0x2e4>)
 801abe6:	4880      	ldr	r0, [pc, #512]	@ (801ade8 <csv_update+0x2e8>)
 801abe8:	f7ff fd1c 	bl	801a624 <Update_File>
 801abec:	4603      	mov	r3, r0
 801abee:	461a      	mov	r2, r3
 801abf0:	4b7a      	ldr	r3, [pc, #488]	@ (801addc <csv_update+0x2dc>)
 801abf2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801abf4:	22ff      	movs	r2, #255	@ 0xff
 801abf6:	2100      	movs	r1, #0
 801abf8:	487a      	ldr	r0, [pc, #488]	@ (801ade4 <csv_update+0x2e4>)
 801abfa:	f002 fa97 	bl	801d12c <memset>
		sprintf(buffer, "%s ,", filename_ver_date);
 801abfe:	4a7e      	ldr	r2, [pc, #504]	@ (801adf8 <csv_update+0x2f8>)
 801ac00:	4977      	ldr	r1, [pc, #476]	@ (801ade0 <csv_update+0x2e0>)
 801ac02:	4878      	ldr	r0, [pc, #480]	@ (801ade4 <csv_update+0x2e4>)
 801ac04:	f002 f948 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ac08:	4976      	ldr	r1, [pc, #472]	@ (801ade4 <csv_update+0x2e4>)
 801ac0a:	4877      	ldr	r0, [pc, #476]	@ (801ade8 <csv_update+0x2e8>)
 801ac0c:	f7ff fd0a 	bl	801a624 <Update_File>
 801ac10:	4603      	mov	r3, r0
 801ac12:	461a      	mov	r2, r3
 801ac14:	4b71      	ldr	r3, [pc, #452]	@ (801addc <csv_update+0x2dc>)
 801ac16:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ac18:	22ff      	movs	r2, #255	@ 0xff
 801ac1a:	2100      	movs	r1, #0
 801ac1c:	4871      	ldr	r0, [pc, #452]	@ (801ade4 <csv_update+0x2e4>)
 801ac1e:	f002 fa85 	bl	801d12c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801ac22:	4a76      	ldr	r2, [pc, #472]	@ (801adfc <csv_update+0x2fc>)
 801ac24:	496e      	ldr	r1, [pc, #440]	@ (801ade0 <csv_update+0x2e0>)
 801ac26:	486f      	ldr	r0, [pc, #444]	@ (801ade4 <csv_update+0x2e4>)
 801ac28:	f002 f936 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ac2c:	496d      	ldr	r1, [pc, #436]	@ (801ade4 <csv_update+0x2e4>)
 801ac2e:	486e      	ldr	r0, [pc, #440]	@ (801ade8 <csv_update+0x2e8>)
 801ac30:	f7ff fcf8 	bl	801a624 <Update_File>
 801ac34:	4603      	mov	r3, r0
 801ac36:	461a      	mov	r2, r3
 801ac38:	4b68      	ldr	r3, [pc, #416]	@ (801addc <csv_update+0x2dc>)
 801ac3a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "%ld ,", _RunTime_Packet.humidity);
		fresult1 = Update_File(filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801ac3c:	22ff      	movs	r2, #255	@ 0xff
 801ac3e:	2100      	movs	r1, #0
 801ac40:	4868      	ldr	r0, [pc, #416]	@ (801ade4 <csv_update+0x2e4>)
 801ac42:	f002 fa73 	bl	801d12c <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.co2);
 801ac46:	4b6e      	ldr	r3, [pc, #440]	@ (801ae00 <csv_update+0x300>)
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4618      	mov	r0, r3
 801ac4c:	f7e5 fc94 	bl	8000578 <__aeabi_f2d>
 801ac50:	4602      	mov	r2, r0
 801ac52:	460b      	mov	r3, r1
 801ac54:	496b      	ldr	r1, [pc, #428]	@ (801ae04 <csv_update+0x304>)
 801ac56:	4863      	ldr	r0, [pc, #396]	@ (801ade4 <csv_update+0x2e4>)
 801ac58:	f002 f91e 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ac5c:	4961      	ldr	r1, [pc, #388]	@ (801ade4 <csv_update+0x2e4>)
 801ac5e:	4862      	ldr	r0, [pc, #392]	@ (801ade8 <csv_update+0x2e8>)
 801ac60:	f7ff fce0 	bl	801a624 <Update_File>
 801ac64:	4603      	mov	r3, r0
 801ac66:	461a      	mov	r2, r3
 801ac68:	4b5c      	ldr	r3, [pc, #368]	@ (801addc <csv_update+0x2dc>)
 801ac6a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ac6c:	22ff      	movs	r2, #255	@ 0xff
 801ac6e:	2100      	movs	r1, #0
 801ac70:	485c      	ldr	r0, [pc, #368]	@ (801ade4 <csv_update+0x2e4>)
 801ac72:	f002 fa5b 	bl	801d12c <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.temperature);
 801ac76:	4b62      	ldr	r3, [pc, #392]	@ (801ae00 <csv_update+0x300>)
 801ac78:	685b      	ldr	r3, [r3, #4]
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f7e5 fc7c 	bl	8000578 <__aeabi_f2d>
 801ac80:	4602      	mov	r2, r0
 801ac82:	460b      	mov	r3, r1
 801ac84:	495f      	ldr	r1, [pc, #380]	@ (801ae04 <csv_update+0x304>)
 801ac86:	4857      	ldr	r0, [pc, #348]	@ (801ade4 <csv_update+0x2e4>)
 801ac88:	f002 f906 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ac8c:	4955      	ldr	r1, [pc, #340]	@ (801ade4 <csv_update+0x2e4>)
 801ac8e:	4856      	ldr	r0, [pc, #344]	@ (801ade8 <csv_update+0x2e8>)
 801ac90:	f7ff fcc8 	bl	801a624 <Update_File>
 801ac94:	4603      	mov	r3, r0
 801ac96:	461a      	mov	r2, r3
 801ac98:	4b50      	ldr	r3, [pc, #320]	@ (801addc <csv_update+0x2dc>)
 801ac9a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ac9c:	22ff      	movs	r2, #255	@ 0xff
 801ac9e:	2100      	movs	r1, #0
 801aca0:	4850      	ldr	r0, [pc, #320]	@ (801ade4 <csv_update+0x2e4>)
 801aca2:	f002 fa43 	bl	801d12c <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.humidity);
 801aca6:	4b56      	ldr	r3, [pc, #344]	@ (801ae00 <csv_update+0x300>)
 801aca8:	689b      	ldr	r3, [r3, #8]
 801acaa:	4618      	mov	r0, r3
 801acac:	f7e5 fc64 	bl	8000578 <__aeabi_f2d>
 801acb0:	4602      	mov	r2, r0
 801acb2:	460b      	mov	r3, r1
 801acb4:	4953      	ldr	r1, [pc, #332]	@ (801ae04 <csv_update+0x304>)
 801acb6:	484b      	ldr	r0, [pc, #300]	@ (801ade4 <csv_update+0x2e4>)
 801acb8:	f002 f8ee 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801acbc:	4949      	ldr	r1, [pc, #292]	@ (801ade4 <csv_update+0x2e4>)
 801acbe:	484a      	ldr	r0, [pc, #296]	@ (801ade8 <csv_update+0x2e8>)
 801acc0:	f7ff fcb0 	bl	801a624 <Update_File>
 801acc4:	4603      	mov	r3, r0
 801acc6:	461a      	mov	r2, r3
 801acc8:	4b44      	ldr	r3, [pc, #272]	@ (801addc <csv_update+0x2dc>)
 801acca:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801accc:	22ff      	movs	r2, #255	@ 0xff
 801acce:	2100      	movs	r1, #0
 801acd0:	4844      	ldr	r0, [pc, #272]	@ (801ade4 <csv_update+0x2e4>)
 801acd2:	f002 fa2b 	bl	801d12c <memset>
		sprintf(buffer, "%s ,",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801acd6:	4b4a      	ldr	r3, [pc, #296]	@ (801ae00 <csv_update+0x300>)
 801acd8:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "%s ,",
 801acda:	2b01      	cmp	r3, #1
 801acdc:	d101      	bne.n	801ace2 <csv_update+0x1e2>
 801acde:	4b4a      	ldr	r3, [pc, #296]	@ (801ae08 <csv_update+0x308>)
 801ace0:	e000      	b.n	801ace4 <csv_update+0x1e4>
 801ace2:	4b4a      	ldr	r3, [pc, #296]	@ (801ae0c <csv_update+0x30c>)
 801ace4:	461a      	mov	r2, r3
 801ace6:	493e      	ldr	r1, [pc, #248]	@ (801ade0 <csv_update+0x2e0>)
 801ace8:	483e      	ldr	r0, [pc, #248]	@ (801ade4 <csv_update+0x2e4>)
 801acea:	f002 f8d5 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801acee:	493d      	ldr	r1, [pc, #244]	@ (801ade4 <csv_update+0x2e4>)
 801acf0:	483d      	ldr	r0, [pc, #244]	@ (801ade8 <csv_update+0x2e8>)
 801acf2:	f7ff fc97 	bl	801a624 <Update_File>
 801acf6:	4603      	mov	r3, r0
 801acf8:	461a      	mov	r2, r3
 801acfa:	4b38      	ldr	r3, [pc, #224]	@ (801addc <csv_update+0x2dc>)
 801acfc:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801acfe:	22ff      	movs	r2, #255	@ 0xff
 801ad00:	2100      	movs	r1, #0
 801ad02:	4838      	ldr	r0, [pc, #224]	@ (801ade4 <csv_update+0x2e4>)
 801ad04:	f002 fa12 	bl	801d12c <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801ad08:	4b3d      	ldr	r3, [pc, #244]	@ (801ae00 <csv_update+0x300>)
 801ad0a:	695b      	ldr	r3, [r3, #20]
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	f7e5 fc33 	bl	8000578 <__aeabi_f2d>
 801ad12:	4602      	mov	r2, r0
 801ad14:	460b      	mov	r3, r1
 801ad16:	493e      	ldr	r1, [pc, #248]	@ (801ae10 <csv_update+0x310>)
 801ad18:	4832      	ldr	r0, [pc, #200]	@ (801ade4 <csv_update+0x2e4>)
 801ad1a:	f002 f8bd 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ad1e:	4931      	ldr	r1, [pc, #196]	@ (801ade4 <csv_update+0x2e4>)
 801ad20:	4831      	ldr	r0, [pc, #196]	@ (801ade8 <csv_update+0x2e8>)
 801ad22:	f7ff fc7f 	bl	801a624 <Update_File>
 801ad26:	4603      	mov	r3, r0
 801ad28:	461a      	mov	r2, r3
 801ad2a:	4b2c      	ldr	r3, [pc, #176]	@ (801addc <csv_update+0x2dc>)
 801ad2c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ad2e:	22ff      	movs	r2, #255	@ 0xff
 801ad30:	2100      	movs	r1, #0
 801ad32:	482c      	ldr	r0, [pc, #176]	@ (801ade4 <csv_update+0x2e4>)
 801ad34:	f002 f9fa 	bl	801d12c <memset>
		sprintf(buffer, "NONE ,");
 801ad38:	4936      	ldr	r1, [pc, #216]	@ (801ae14 <csv_update+0x314>)
 801ad3a:	482a      	ldr	r0, [pc, #168]	@ (801ade4 <csv_update+0x2e4>)
 801ad3c:	f002 f8ac 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ad40:	4928      	ldr	r1, [pc, #160]	@ (801ade4 <csv_update+0x2e4>)
 801ad42:	4829      	ldr	r0, [pc, #164]	@ (801ade8 <csv_update+0x2e8>)
 801ad44:	f7ff fc6e 	bl	801a624 <Update_File>
 801ad48:	4603      	mov	r3, r0
 801ad4a:	461a      	mov	r2, r3
 801ad4c:	4b23      	ldr	r3, [pc, #140]	@ (801addc <csv_update+0x2dc>)
 801ad4e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ad50:	22ff      	movs	r2, #255	@ 0xff
 801ad52:	2100      	movs	r1, #0
 801ad54:	4823      	ldr	r0, [pc, #140]	@ (801ade4 <csv_update+0x2e4>)
 801ad56:	f002 f9e9 	bl	801d12c <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801ad5a:	4b29      	ldr	r3, [pc, #164]	@ (801ae00 <csv_update+0x300>)
 801ad5c:	6a1b      	ldr	r3, [r3, #32]
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f7e5 fc0a 	bl	8000578 <__aeabi_f2d>
 801ad64:	4602      	mov	r2, r0
 801ad66:	460b      	mov	r3, r1
 801ad68:	4929      	ldr	r1, [pc, #164]	@ (801ae10 <csv_update+0x310>)
 801ad6a:	481e      	ldr	r0, [pc, #120]	@ (801ade4 <csv_update+0x2e4>)
 801ad6c:	f002 f894 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ad70:	491c      	ldr	r1, [pc, #112]	@ (801ade4 <csv_update+0x2e4>)
 801ad72:	481d      	ldr	r0, [pc, #116]	@ (801ade8 <csv_update+0x2e8>)
 801ad74:	f7ff fc56 	bl	801a624 <Update_File>
 801ad78:	4603      	mov	r3, r0
 801ad7a:	461a      	mov	r2, r3
 801ad7c:	4b17      	ldr	r3, [pc, #92]	@ (801addc <csv_update+0x2dc>)
 801ad7e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ad80:	22ff      	movs	r2, #255	@ 0xff
 801ad82:	2100      	movs	r1, #0
 801ad84:	4817      	ldr	r0, [pc, #92]	@ (801ade4 <csv_update+0x2e4>)
 801ad86:	f002 f9d1 	bl	801d12c <memset>
		sprintf(buffer, "\n");
 801ad8a:	4923      	ldr	r1, [pc, #140]	@ (801ae18 <csv_update+0x318>)
 801ad8c:	4815      	ldr	r0, [pc, #84]	@ (801ade4 <csv_update+0x2e4>)
 801ad8e:	f002 f883 	bl	801ce98 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ad92:	4914      	ldr	r1, [pc, #80]	@ (801ade4 <csv_update+0x2e4>)
 801ad94:	4814      	ldr	r0, [pc, #80]	@ (801ade8 <csv_update+0x2e8>)
 801ad96:	f7ff fc45 	bl	801a624 <Update_File>
 801ad9a:	4603      	mov	r3, r0
 801ad9c:	461a      	mov	r2, r3
 801ad9e:	4b0f      	ldr	r3, [pc, #60]	@ (801addc <csv_update+0x2dc>)
 801ada0:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801ada2:	480d      	ldr	r0, [pc, #52]	@ (801add8 <csv_update+0x2d8>)
 801ada4:	f7ff fb7c 	bl	801a4a0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801ada8:	4b0c      	ldr	r3, [pc, #48]	@ (801addc <csv_update+0x2dc>)
 801adaa:	781b      	ldrb	r3, [r3, #0]
 801adac:	b25a      	sxtb	r2, r3
 801adae:	4b14      	ldr	r3, [pc, #80]	@ (801ae00 <csv_update+0x300>)
 801adb0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801adb4:	bf00      	nop
 801adb6:	3718      	adds	r7, #24
 801adb8:	46bd      	mov	sp, r7
 801adba:	bd80      	pop	{r7, pc}
 801adbc:	200017e4 	.word	0x200017e4
 801adc0:	20002363 	.word	0x20002363
 801adc4:	20002364 	.word	0x20002364
 801adc8:	20002365 	.word	0x20002365
 801adcc:	20002366 	.word	0x20002366
 801add0:	20002367 	.word	0x20002367
 801add4:	20002368 	.word	0x20002368
 801add8:	080223ec 	.word	0x080223ec
 801addc:	20002264 	.word	0x20002264
 801ade0:	08022500 	.word	0x08022500
 801ade4:	2000236c 	.word	0x2000236c
 801ade8:	20002268 	.word	0x20002268
 801adec:	200013c1 	.word	0x200013c1
 801adf0:	08022508 	.word	0x08022508
 801adf4:	200013f3 	.word	0x200013f3
 801adf8:	200022cc 	.word	0x200022cc
 801adfc:	20001457 	.word	0x20001457
 801ae00:	2000148c 	.word	0x2000148c
 801ae04:	0802251c 	.word	0x0802251c
 801ae08:	080224a4 	.word	0x080224a4
 801ae0c:	080224ac 	.word	0x080224ac
 801ae10:	08022524 	.word	0x08022524
 801ae14:	0802252c 	.word	0x0802252c
 801ae18:	08022534 	.word	0x08022534

0801ae1c <csv_header>:
void csv_header() {
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801ae20:	485d      	ldr	r0, [pc, #372]	@ (801af98 <csv_header+0x17c>)
 801ae22:	f7ff fb11 	bl	801a448 <Mount_SD>
 801ae26:	4603      	mov	r3, r0
 801ae28:	461a      	mov	r2, r3
 801ae2a:	4b5c      	ldr	r3, [pc, #368]	@ (801af9c <csv_header+0x180>)
 801ae2c:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801ae2e:	4b5b      	ldr	r3, [pc, #364]	@ (801af9c <csv_header+0x180>)
 801ae30:	781b      	ldrb	r3, [r3, #0]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	f040 80a7 	bne.w	801af86 <csv_header+0x16a>
//		sprintf(buffer, " co2 , temperature , humidity ,");
//		Update_File(filename_with_format, buffer);
//		sprintf(buffer, " pir , pm2.5 , port ,battery\n\n");
//		Update_File(filename_with_format, buffer);

		sprintf(buffer, "devEUI ,");
 801ae38:	4959      	ldr	r1, [pc, #356]	@ (801afa0 <csv_header+0x184>)
 801ae3a:	485a      	ldr	r0, [pc, #360]	@ (801afa4 <csv_header+0x188>)
 801ae3c:	f002 f82c 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801ae40:	4958      	ldr	r1, [pc, #352]	@ (801afa4 <csv_header+0x188>)
 801ae42:	4859      	ldr	r0, [pc, #356]	@ (801afa8 <csv_header+0x18c>)
 801ae44:	f7ff fbee 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ae48:	22ff      	movs	r2, #255	@ 0xff
 801ae4a:	2100      	movs	r1, #0
 801ae4c:	4855      	ldr	r0, [pc, #340]	@ (801afa4 <csv_header+0x188>)
 801ae4e:	f002 f96d 	bl	801d12c <memset>
		sprintf(buffer, "id ,");
 801ae52:	4956      	ldr	r1, [pc, #344]	@ (801afac <csv_header+0x190>)
 801ae54:	4853      	ldr	r0, [pc, #332]	@ (801afa4 <csv_header+0x188>)
 801ae56:	f002 f81f 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801ae5a:	4952      	ldr	r1, [pc, #328]	@ (801afa4 <csv_header+0x188>)
 801ae5c:	4852      	ldr	r0, [pc, #328]	@ (801afa8 <csv_header+0x18c>)
 801ae5e:	f7ff fbe1 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ae62:	22ff      	movs	r2, #255	@ 0xff
 801ae64:	2100      	movs	r1, #0
 801ae66:	484f      	ldr	r0, [pc, #316]	@ (801afa4 <csv_header+0x188>)
 801ae68:	f002 f960 	bl	801d12c <memset>
		sprintf(buffer, "timestamp ,");
 801ae6c:	4950      	ldr	r1, [pc, #320]	@ (801afb0 <csv_header+0x194>)
 801ae6e:	484d      	ldr	r0, [pc, #308]	@ (801afa4 <csv_header+0x188>)
 801ae70:	f002 f812 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801ae74:	494b      	ldr	r1, [pc, #300]	@ (801afa4 <csv_header+0x188>)
 801ae76:	484c      	ldr	r0, [pc, #304]	@ (801afa8 <csv_header+0x18c>)
 801ae78:	f7ff fbd4 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ae7c:	22ff      	movs	r2, #255	@ 0xff
 801ae7e:	2100      	movs	r1, #0
 801ae80:	4848      	ldr	r0, [pc, #288]	@ (801afa4 <csv_header+0x188>)
 801ae82:	f002 f953 	bl	801d12c <memset>
		sprintf(buffer, "location ,");
 801ae86:	494b      	ldr	r1, [pc, #300]	@ (801afb4 <csv_header+0x198>)
 801ae88:	4846      	ldr	r0, [pc, #280]	@ (801afa4 <csv_header+0x188>)
 801ae8a:	f002 f805 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801ae8e:	4945      	ldr	r1, [pc, #276]	@ (801afa4 <csv_header+0x188>)
 801ae90:	4845      	ldr	r0, [pc, #276]	@ (801afa8 <csv_header+0x18c>)
 801ae92:	f7ff fbc7 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ae96:	22ff      	movs	r2, #255	@ 0xff
 801ae98:	2100      	movs	r1, #0
 801ae9a:	4842      	ldr	r0, [pc, #264]	@ (801afa4 <csv_header+0x188>)
 801ae9c:	f002 f946 	bl	801d12c <memset>
		sprintf(buffer, "Filename ,");
 801aea0:	4945      	ldr	r1, [pc, #276]	@ (801afb8 <csv_header+0x19c>)
 801aea2:	4840      	ldr	r0, [pc, #256]	@ (801afa4 <csv_header+0x188>)
 801aea4:	f001 fff8 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801aea8:	493e      	ldr	r1, [pc, #248]	@ (801afa4 <csv_header+0x188>)
 801aeaa:	483f      	ldr	r0, [pc, #252]	@ (801afa8 <csv_header+0x18c>)
 801aeac:	f7ff fbba 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801aeb0:	22ff      	movs	r2, #255	@ 0xff
 801aeb2:	2100      	movs	r1, #0
 801aeb4:	483b      	ldr	r0, [pc, #236]	@ (801afa4 <csv_header+0x188>)
 801aeb6:	f002 f939 	bl	801d12c <memset>
		sprintf(buffer, "group ,");
 801aeba:	4940      	ldr	r1, [pc, #256]	@ (801afbc <csv_header+0x1a0>)
 801aebc:	4839      	ldr	r0, [pc, #228]	@ (801afa4 <csv_header+0x188>)
 801aebe:	f001 ffeb 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801aec2:	4938      	ldr	r1, [pc, #224]	@ (801afa4 <csv_header+0x188>)
 801aec4:	4838      	ldr	r0, [pc, #224]	@ (801afa8 <csv_header+0x18c>)
 801aec6:	f7ff fbad 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801aeca:	22ff      	movs	r2, #255	@ 0xff
 801aecc:	2100      	movs	r1, #0
 801aece:	4835      	ldr	r0, [pc, #212]	@ (801afa4 <csv_header+0x188>)
 801aed0:	f002 f92c 	bl	801d12c <memset>
		sprintf(buffer, "co2 ,");
 801aed4:	493a      	ldr	r1, [pc, #232]	@ (801afc0 <csv_header+0x1a4>)
 801aed6:	4833      	ldr	r0, [pc, #204]	@ (801afa4 <csv_header+0x188>)
 801aed8:	f001 ffde 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801aedc:	4931      	ldr	r1, [pc, #196]	@ (801afa4 <csv_header+0x188>)
 801aede:	4832      	ldr	r0, [pc, #200]	@ (801afa8 <csv_header+0x18c>)
 801aee0:	f7ff fba0 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801aee4:	22ff      	movs	r2, #255	@ 0xff
 801aee6:	2100      	movs	r1, #0
 801aee8:	482e      	ldr	r0, [pc, #184]	@ (801afa4 <csv_header+0x188>)
 801aeea:	f002 f91f 	bl	801d12c <memset>
		sprintf(buffer, "temperature ,");
 801aeee:	4935      	ldr	r1, [pc, #212]	@ (801afc4 <csv_header+0x1a8>)
 801aef0:	482c      	ldr	r0, [pc, #176]	@ (801afa4 <csv_header+0x188>)
 801aef2:	f001 ffd1 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801aef6:	492b      	ldr	r1, [pc, #172]	@ (801afa4 <csv_header+0x188>)
 801aef8:	482b      	ldr	r0, [pc, #172]	@ (801afa8 <csv_header+0x18c>)
 801aefa:	f7ff fb93 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801aefe:	22ff      	movs	r2, #255	@ 0xff
 801af00:	2100      	movs	r1, #0
 801af02:	4828      	ldr	r0, [pc, #160]	@ (801afa4 <csv_header+0x188>)
 801af04:	f002 f912 	bl	801d12c <memset>
		sprintf(buffer, "humidity ,");
 801af08:	492f      	ldr	r1, [pc, #188]	@ (801afc8 <csv_header+0x1ac>)
 801af0a:	4826      	ldr	r0, [pc, #152]	@ (801afa4 <csv_header+0x188>)
 801af0c:	f001 ffc4 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801af10:	4924      	ldr	r1, [pc, #144]	@ (801afa4 <csv_header+0x188>)
 801af12:	4825      	ldr	r0, [pc, #148]	@ (801afa8 <csv_header+0x18c>)
 801af14:	f7ff fb86 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801af18:	22ff      	movs	r2, #255	@ 0xff
 801af1a:	2100      	movs	r1, #0
 801af1c:	4821      	ldr	r0, [pc, #132]	@ (801afa4 <csv_header+0x188>)
 801af1e:	f002 f905 	bl	801d12c <memset>
		sprintf(buffer, "pir ,");
 801af22:	492a      	ldr	r1, [pc, #168]	@ (801afcc <csv_header+0x1b0>)
 801af24:	481f      	ldr	r0, [pc, #124]	@ (801afa4 <csv_header+0x188>)
 801af26:	f001 ffb7 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801af2a:	491e      	ldr	r1, [pc, #120]	@ (801afa4 <csv_header+0x188>)
 801af2c:	481e      	ldr	r0, [pc, #120]	@ (801afa8 <csv_header+0x18c>)
 801af2e:	f7ff fb79 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801af32:	22ff      	movs	r2, #255	@ 0xff
 801af34:	2100      	movs	r1, #0
 801af36:	481b      	ldr	r0, [pc, #108]	@ (801afa4 <csv_header+0x188>)
 801af38:	f002 f8f8 	bl	801d12c <memset>
		sprintf(buffer, "pm2.5 ,");
 801af3c:	4924      	ldr	r1, [pc, #144]	@ (801afd0 <csv_header+0x1b4>)
 801af3e:	4819      	ldr	r0, [pc, #100]	@ (801afa4 <csv_header+0x188>)
 801af40:	f001 ffaa 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801af44:	4917      	ldr	r1, [pc, #92]	@ (801afa4 <csv_header+0x188>)
 801af46:	4818      	ldr	r0, [pc, #96]	@ (801afa8 <csv_header+0x18c>)
 801af48:	f7ff fb6c 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801af4c:	22ff      	movs	r2, #255	@ 0xff
 801af4e:	2100      	movs	r1, #0
 801af50:	4814      	ldr	r0, [pc, #80]	@ (801afa4 <csv_header+0x188>)
 801af52:	f002 f8eb 	bl	801d12c <memset>
		sprintf(buffer, "port ,");
 801af56:	491f      	ldr	r1, [pc, #124]	@ (801afd4 <csv_header+0x1b8>)
 801af58:	4812      	ldr	r0, [pc, #72]	@ (801afa4 <csv_header+0x188>)
 801af5a:	f001 ff9d 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801af5e:	4911      	ldr	r1, [pc, #68]	@ (801afa4 <csv_header+0x188>)
 801af60:	4811      	ldr	r0, [pc, #68]	@ (801afa8 <csv_header+0x18c>)
 801af62:	f7ff fb5f 	bl	801a624 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801af66:	22ff      	movs	r2, #255	@ 0xff
 801af68:	2100      	movs	r1, #0
 801af6a:	480e      	ldr	r0, [pc, #56]	@ (801afa4 <csv_header+0x188>)
 801af6c:	f002 f8de 	bl	801d12c <memset>
		sprintf(buffer, "battery \n\n");
 801af70:	4919      	ldr	r1, [pc, #100]	@ (801afd8 <csv_header+0x1bc>)
 801af72:	480c      	ldr	r0, [pc, #48]	@ (801afa4 <csv_header+0x188>)
 801af74:	f001 ff90 	bl	801ce98 <siprintf>
		Update_File(filename_with_format, buffer);
 801af78:	490a      	ldr	r1, [pc, #40]	@ (801afa4 <csv_header+0x188>)
 801af7a:	480b      	ldr	r0, [pc, #44]	@ (801afa8 <csv_header+0x18c>)
 801af7c:	f7ff fb52 	bl	801a624 <Update_File>

		Unmount_SD("/");
 801af80:	4805      	ldr	r0, [pc, #20]	@ (801af98 <csv_header+0x17c>)
 801af82:	f7ff fa8d 	bl	801a4a0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801af86:	4b05      	ldr	r3, [pc, #20]	@ (801af9c <csv_header+0x180>)
 801af88:	781b      	ldrb	r3, [r3, #0]
 801af8a:	b25a      	sxtb	r2, r3
 801af8c:	4b13      	ldr	r3, [pc, #76]	@ (801afdc <csv_header+0x1c0>)
 801af8e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

}
 801af92:	bf00      	nop
 801af94:	bd80      	pop	{r7, pc}
 801af96:	bf00      	nop
 801af98:	080223ec 	.word	0x080223ec
 801af9c:	20002264 	.word	0x20002264
 801afa0:	08022538 	.word	0x08022538
 801afa4:	2000236c 	.word	0x2000236c
 801afa8:	20002268 	.word	0x20002268
 801afac:	08022544 	.word	0x08022544
 801afb0:	0802254c 	.word	0x0802254c
 801afb4:	08022558 	.word	0x08022558
 801afb8:	08022564 	.word	0x08022564
 801afbc:	08022570 	.word	0x08022570
 801afc0:	08022578 	.word	0x08022578
 801afc4:	08022580 	.word	0x08022580
 801afc8:	08022590 	.word	0x08022590
 801afcc:	0802259c 	.word	0x0802259c
 801afd0:	080225a4 	.word	0x080225a4
 801afd4:	080225ac 	.word	0x080225ac
 801afd8:	080225b4 	.word	0x080225b4
 801afdc:	2000148c 	.word	0x2000148c

0801afe0 <filesaving_process>:
uint8_t filesaving_process() {
 801afe0:	b580      	push	{r7, lr}
 801afe2:	af00      	add	r7, sp, #0
//	__disable_irq();

	memset(buffer, 0, sizeof(buffer));
 801afe4:	22ff      	movs	r2, #255	@ 0xff
 801afe6:	2100      	movs	r1, #0
 801afe8:	480f      	ldr	r0, [pc, #60]	@ (801b028 <filesaving_process+0x48>)
 801afea:	f002 f89f 	bl	801d12c <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801afee:	4b0f      	ldr	r3, [pc, #60]	@ (801b02c <filesaving_process+0x4c>)
 801aff0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d002      	beq.n	801affe <filesaving_process+0x1e>
		csv_update();
 801aff8:	f7ff fd82 	bl	801ab00 <csv_update>
 801affc:	e001      	b.n	801b002 <filesaving_process+0x22>
	} else {
		json_update();
 801affe:	f7ff fbcd 	bl	801a79c <json_update>
	}

	if (_RunTime_Packet.sd_card_disk_write_error != 0) //means there is error
 801b002:	4b0a      	ldr	r3, [pc, #40]	@ (801b02c <filesaving_process+0x4c>)
 801b004:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d006      	beq.n	801b01a <filesaving_process+0x3a>
			{
		//blink red so user can know
		blink_red();
 801b00c:	f7e6 ffb8 	bl	8001f80 <blink_red>
		datawritten = 2;
 801b010:	4b07      	ldr	r3, [pc, #28]	@ (801b030 <filesaving_process+0x50>)
 801b012:	2202      	movs	r2, #2
 801b014:	701a      	strb	r2, [r3, #0]
		return 1; //not working
 801b016:	2301      	movs	r3, #1
 801b018:	e003      	b.n	801b022 <filesaving_process+0x42>
	} else //packet written succesfully
	{
		datawritten = 1;
 801b01a:	4b05      	ldr	r3, [pc, #20]	@ (801b030 <filesaving_process+0x50>)
 801b01c:	2201      	movs	r2, #1
 801b01e:	701a      	strb	r2, [r3, #0]
	}

	return 0; //all good
 801b020:	2300      	movs	r3, #0
//	__enable_irq();
}
 801b022:	4618      	mov	r0, r3
 801b024:	bd80      	pop	{r7, pc}
 801b026:	bf00      	nop
 801b028:	2000236c 	.word	0x2000236c
 801b02c:	2000148c 	.word	0x2000148c
 801b030:	20002369 	.word	0x20002369

0801b034 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801b034:	b580      	push	{r7, lr}
 801b036:	b08c      	sub	sp, #48	@ 0x30
 801b038:	af04      	add	r7, sp, #16
 801b03a:	6078      	str	r0, [r7, #4]
 801b03c:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801b03e:	f107 031c 	add.w	r3, r7, #28
 801b042:	2200      	movs	r2, #0
 801b044:	4619      	mov	r1, r3
 801b046:	482f      	ldr	r0, [pc, #188]	@ (801b104 <createfile+0xd0>)
 801b048:	f7ee f98e 	bl	8009368 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801b04c:	f107 0308 	add.w	r3, r7, #8
 801b050:	2200      	movs	r2, #0
 801b052:	4619      	mov	r1, r3
 801b054:	482b      	ldr	r0, [pc, #172]	@ (801b104 <createfile+0xd0>)
 801b056:	f7ee f8a5 	bl	80091a4 <HAL_RTC_GetTime>

	sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
			sDate.Year, sDate.Month, sDate.Date, fileformat);
 801b05a:	7ffb      	ldrb	r3, [r7, #31]
	sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801b05c:	4618      	mov	r0, r3
			sDate.Year, sDate.Month, sDate.Date, fileformat);
 801b05e:	7f7b      	ldrb	r3, [r7, #29]
	sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801b060:	461a      	mov	r2, r3
			sDate.Year, sDate.Month, sDate.Date, fileformat);
 801b062:	7fbb      	ldrb	r3, [r7, #30]
	sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801b064:	4619      	mov	r1, r3
 801b066:	683b      	ldr	r3, [r7, #0]
 801b068:	9302      	str	r3, [sp, #8]
 801b06a:	9101      	str	r1, [sp, #4]
 801b06c:	9200      	str	r2, [sp, #0]
 801b06e:	4603      	mov	r3, r0
 801b070:	687a      	ldr	r2, [r7, #4]
 801b072:	4925      	ldr	r1, [pc, #148]	@ (801b108 <createfile+0xd4>)
 801b074:	4825      	ldr	r0, [pc, #148]	@ (801b10c <createfile+0xd8>)
 801b076:	f001 ff0f 	bl	801ce98 <siprintf>

	sprintf(filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,
 801b07a:	7ffb      	ldrb	r3, [r7, #31]
 801b07c:	4619      	mov	r1, r3
				sDate.Month, sDate.Date);
 801b07e:	7f7b      	ldrb	r3, [r7, #29]
 801b080:	7fba      	ldrb	r2, [r7, #30]
	sprintf(filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,
 801b082:	9201      	str	r2, [sp, #4]
 801b084:	9300      	str	r3, [sp, #0]
 801b086:	460b      	mov	r3, r1
 801b088:	687a      	ldr	r2, [r7, #4]
 801b08a:	4921      	ldr	r1, [pc, #132]	@ (801b110 <createfile+0xdc>)
 801b08c:	4821      	ldr	r0, [pc, #132]	@ (801b114 <createfile+0xe0>)
 801b08e:	f001 ff03 	bl	801ce98 <siprintf>


	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801b092:	4821      	ldr	r0, [pc, #132]	@ (801b118 <createfile+0xe4>)
 801b094:	f7ff f9d8 	bl	801a448 <Mount_SD>
 801b098:	4603      	mov	r3, r0
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d002      	beq.n	801b0a4 <createfile+0x70>
	} else {
		//	__enable_irq();
		return -1;
 801b09e:	f04f 33ff 	mov.w	r3, #4294967295
 801b0a2:	e02b      	b.n	801b0fc <createfile+0xc8>
	}
	Unmount_SD("/");
 801b0a4:	481c      	ldr	r0, [pc, #112]	@ (801b118 <createfile+0xe4>)
 801b0a6:	f7ff f9fb 	bl	801a4a0 <Unmount_SD>



	fresult1 = Mount_SD("/");
 801b0aa:	481b      	ldr	r0, [pc, #108]	@ (801b118 <createfile+0xe4>)
 801b0ac:	f7ff f9cc 	bl	801a448 <Mount_SD>
 801b0b0:	4603      	mov	r3, r0
 801b0b2:	461a      	mov	r2, r3
 801b0b4:	4b19      	ldr	r3, [pc, #100]	@ (801b11c <createfile+0xe8>)
 801b0b6:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801b0b8:	4b18      	ldr	r3, [pc, #96]	@ (801b11c <createfile+0xe8>)
 801b0ba:	781b      	ldrb	r3, [r3, #0]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d119      	bne.n	801b0f4 <createfile+0xc0>





		fresult1 = Create_File(filename_with_format);
 801b0c0:	4812      	ldr	r0, [pc, #72]	@ (801b10c <createfile+0xd8>)
 801b0c2:	f7ff fa15 	bl	801a4f0 <Create_File>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	461a      	mov	r2, r3
 801b0ca:	4b14      	ldr	r3, [pc, #80]	@ (801b11c <createfile+0xe8>)
 801b0cc:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801b0ce:	4812      	ldr	r0, [pc, #72]	@ (801b118 <createfile+0xe4>)
 801b0d0:	f7ff f9e6 	bl	801a4a0 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801b0d4:	4b12      	ldr	r3, [pc, #72]	@ (801b120 <createfile+0xec>)
 801b0d6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d00d      	beq.n	801b0fa <createfile+0xc6>
			if (file_already_exist) {
 801b0de:	4b11      	ldr	r3, [pc, #68]	@ (801b124 <createfile+0xf0>)
 801b0e0:	781b      	ldrb	r3, [r3, #0]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d003      	beq.n	801b0ee <createfile+0xba>
				file_already_exist = 0;
 801b0e6:	4b0f      	ldr	r3, [pc, #60]	@ (801b124 <createfile+0xf0>)
 801b0e8:	2200      	movs	r2, #0
 801b0ea:	701a      	strb	r2, [r3, #0]
 801b0ec:	e005      	b.n	801b0fa <createfile+0xc6>
			} else {
				csv_header();  //json does not require an header only csv
 801b0ee:	f7ff fe95 	bl	801ae1c <csv_header>
 801b0f2:	e002      	b.n	801b0fa <createfile+0xc6>
			}
		}

	} else {
		//	__enable_irq();
		return -1;
 801b0f4:	f04f 33ff 	mov.w	r3, #4294967295
 801b0f8:	e000      	b.n	801b0fc <createfile+0xc8>
	}
//	__enable_irq();
	return 0;
 801b0fa:	2300      	movs	r3, #0
}
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	3720      	adds	r7, #32
 801b100:	46bd      	mov	sp, r7
 801b102:	bd80      	pop	{r7, pc}
 801b104:	200017e4 	.word	0x200017e4
 801b108:	080225c0 	.word	0x080225c0
 801b10c:	20002268 	.word	0x20002268
 801b110:	080225d4 	.word	0x080225d4
 801b114:	200022cc 	.word	0x200022cc
 801b118:	080223ec 	.word	0x080223ec
 801b11c:	20002264 	.word	0x20002264
 801b120:	2000148c 	.word	0x2000148c
 801b124:	20002362 	.word	0x20002362

0801b128 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801b128:	b580      	push	{r7, lr}
 801b12a:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801b12c:	4905      	ldr	r1, [pc, #20]	@ (801b144 <MX_USB_DEVICE_DeInit+0x1c>)
 801b12e:	4806      	ldr	r0, [pc, #24]	@ (801b148 <MX_USB_DEVICE_DeInit+0x20>)
 801b130:	f7f8 ffd0 	bl	80140d4 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801b134:	4804      	ldr	r0, [pc, #16]	@ (801b148 <MX_USB_DEVICE_DeInit+0x20>)
 801b136:	f7fa ff98 	bl	801606a <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801b13a:	4803      	ldr	r0, [pc, #12]	@ (801b148 <MX_USB_DEVICE_DeInit+0x20>)
 801b13c:	f7fa ff23 	bl	8015f86 <USBD_DeInit>

}
 801b140:	bf00      	nop
 801b142:	bd80      	pop	{r7, pc}
 801b144:	20000148 	.word	0x20000148
 801b148:	2000246c 	.word	0x2000246c

0801b14c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b14c:	b580      	push	{r7, lr}
 801b14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b150:	2200      	movs	r2, #0
 801b152:	4912      	ldr	r1, [pc, #72]	@ (801b19c <MX_USB_DEVICE_Init+0x50>)
 801b154:	4812      	ldr	r0, [pc, #72]	@ (801b1a0 <MX_USB_DEVICE_Init+0x54>)
 801b156:	f7fa fee6 	bl	8015f26 <USBD_Init>
 801b15a:	4603      	mov	r3, r0
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d001      	beq.n	801b164 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b160:	f7e8 f84a 	bl	80031f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801b164:	490f      	ldr	r1, [pc, #60]	@ (801b1a4 <MX_USB_DEVICE_Init+0x58>)
 801b166:	480e      	ldr	r0, [pc, #56]	@ (801b1a0 <MX_USB_DEVICE_Init+0x54>)
 801b168:	f7fa ff3d 	bl	8015fe6 <USBD_RegisterClass>
 801b16c:	4603      	mov	r3, r0
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d001      	beq.n	801b176 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b172:	f7e8 f841 	bl	80031f8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801b176:	490c      	ldr	r1, [pc, #48]	@ (801b1a8 <MX_USB_DEVICE_Init+0x5c>)
 801b178:	4809      	ldr	r0, [pc, #36]	@ (801b1a0 <MX_USB_DEVICE_Init+0x54>)
 801b17a:	f7f9 f9b3 	bl	80144e4 <USBD_MSC_RegisterStorage>
 801b17e:	4603      	mov	r3, r0
 801b180:	2b00      	cmp	r3, #0
 801b182:	d001      	beq.n	801b188 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b184:	f7e8 f838 	bl	80031f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b188:	4805      	ldr	r0, [pc, #20]	@ (801b1a0 <MX_USB_DEVICE_Init+0x54>)
 801b18a:	f7fa ff62 	bl	8016052 <USBD_Start>
 801b18e:	4603      	mov	r3, r0
 801b190:	2b00      	cmp	r3, #0
 801b192:	d001      	beq.n	801b198 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b194:	f7e8 f830 	bl	80031f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b198:	bf00      	nop
 801b19a:	bd80      	pop	{r7, pc}
 801b19c:	200000f8 	.word	0x200000f8
 801b1a0:	2000246c 	.word	0x2000246c
 801b1a4:	20000050 	.word	0x20000050
 801b1a8:	20000148 	.word	0x20000148

0801b1ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1ac:	b480      	push	{r7}
 801b1ae:	b083      	sub	sp, #12
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	4603      	mov	r3, r0
 801b1b4:	6039      	str	r1, [r7, #0]
 801b1b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b1b8:	683b      	ldr	r3, [r7, #0]
 801b1ba:	2212      	movs	r2, #18
 801b1bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b1be:	4b03      	ldr	r3, [pc, #12]	@ (801b1cc <USBD_FS_DeviceDescriptor+0x20>)
}
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	370c      	adds	r7, #12
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ca:	4770      	bx	lr
 801b1cc:	20000114 	.word	0x20000114

0801b1d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1d0:	b480      	push	{r7}
 801b1d2:	b083      	sub	sp, #12
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	6039      	str	r1, [r7, #0]
 801b1da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b1dc:	683b      	ldr	r3, [r7, #0]
 801b1de:	2204      	movs	r2, #4
 801b1e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b1e2:	4b03      	ldr	r3, [pc, #12]	@ (801b1f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	370c      	adds	r7, #12
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ee:	4770      	bx	lr
 801b1f0:	20000128 	.word	0x20000128

0801b1f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b082      	sub	sp, #8
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	6039      	str	r1, [r7, #0]
 801b1fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b200:	79fb      	ldrb	r3, [r7, #7]
 801b202:	2b00      	cmp	r3, #0
 801b204:	d105      	bne.n	801b212 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b206:	683a      	ldr	r2, [r7, #0]
 801b208:	4907      	ldr	r1, [pc, #28]	@ (801b228 <USBD_FS_ProductStrDescriptor+0x34>)
 801b20a:	4808      	ldr	r0, [pc, #32]	@ (801b22c <USBD_FS_ProductStrDescriptor+0x38>)
 801b20c:	f7fc f8e6 	bl	80173dc <USBD_GetString>
 801b210:	e004      	b.n	801b21c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b212:	683a      	ldr	r2, [r7, #0]
 801b214:	4904      	ldr	r1, [pc, #16]	@ (801b228 <USBD_FS_ProductStrDescriptor+0x34>)
 801b216:	4805      	ldr	r0, [pc, #20]	@ (801b22c <USBD_FS_ProductStrDescriptor+0x38>)
 801b218:	f7fc f8e0 	bl	80173dc <USBD_GetString>
  }
  return USBD_StrDesc;
 801b21c:	4b02      	ldr	r3, [pc, #8]	@ (801b228 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b21e:	4618      	mov	r0, r3
 801b220:	3708      	adds	r7, #8
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}
 801b226:	bf00      	nop
 801b228:	20002748 	.word	0x20002748
 801b22c:	080225e8 	.word	0x080225e8

0801b230 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b230:	b580      	push	{r7, lr}
 801b232:	b082      	sub	sp, #8
 801b234:	af00      	add	r7, sp, #0
 801b236:	4603      	mov	r3, r0
 801b238:	6039      	str	r1, [r7, #0]
 801b23a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b23c:	683a      	ldr	r2, [r7, #0]
 801b23e:	4904      	ldr	r1, [pc, #16]	@ (801b250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b240:	4804      	ldr	r0, [pc, #16]	@ (801b254 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b242:	f7fc f8cb 	bl	80173dc <USBD_GetString>
  return USBD_StrDesc;
 801b246:	4b02      	ldr	r3, [pc, #8]	@ (801b250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b248:	4618      	mov	r0, r3
 801b24a:	3708      	adds	r7, #8
 801b24c:	46bd      	mov	sp, r7
 801b24e:	bd80      	pop	{r7, pc}
 801b250:	20002748 	.word	0x20002748
 801b254:	080225fc 	.word	0x080225fc

0801b258 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b258:	b580      	push	{r7, lr}
 801b25a:	b082      	sub	sp, #8
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	4603      	mov	r3, r0
 801b260:	6039      	str	r1, [r7, #0]
 801b262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b264:	683b      	ldr	r3, [r7, #0]
 801b266:	221a      	movs	r2, #26
 801b268:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b26a:	f000 f843 	bl	801b2f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b26e:	4b02      	ldr	r3, [pc, #8]	@ (801b278 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b270:	4618      	mov	r0, r3
 801b272:	3708      	adds	r7, #8
 801b274:	46bd      	mov	sp, r7
 801b276:	bd80      	pop	{r7, pc}
 801b278:	2000012c 	.word	0x2000012c

0801b27c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b082      	sub	sp, #8
 801b280:	af00      	add	r7, sp, #0
 801b282:	4603      	mov	r3, r0
 801b284:	6039      	str	r1, [r7, #0]
 801b286:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b288:	79fb      	ldrb	r3, [r7, #7]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d105      	bne.n	801b29a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b28e:	683a      	ldr	r2, [r7, #0]
 801b290:	4907      	ldr	r1, [pc, #28]	@ (801b2b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b292:	4808      	ldr	r0, [pc, #32]	@ (801b2b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b294:	f7fc f8a2 	bl	80173dc <USBD_GetString>
 801b298:	e004      	b.n	801b2a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b29a:	683a      	ldr	r2, [r7, #0]
 801b29c:	4904      	ldr	r1, [pc, #16]	@ (801b2b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b29e:	4805      	ldr	r0, [pc, #20]	@ (801b2b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b2a0:	f7fc f89c 	bl	80173dc <USBD_GetString>
  }
  return USBD_StrDesc;
 801b2a4:	4b02      	ldr	r3, [pc, #8]	@ (801b2b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b2a6:	4618      	mov	r0, r3
 801b2a8:	3708      	adds	r7, #8
 801b2aa:	46bd      	mov	sp, r7
 801b2ac:	bd80      	pop	{r7, pc}
 801b2ae:	bf00      	nop
 801b2b0:	20002748 	.word	0x20002748
 801b2b4:	08022610 	.word	0x08022610

0801b2b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	b082      	sub	sp, #8
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	4603      	mov	r3, r0
 801b2c0:	6039      	str	r1, [r7, #0]
 801b2c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b2c4:	79fb      	ldrb	r3, [r7, #7]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d105      	bne.n	801b2d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b2ca:	683a      	ldr	r2, [r7, #0]
 801b2cc:	4907      	ldr	r1, [pc, #28]	@ (801b2ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b2ce:	4808      	ldr	r0, [pc, #32]	@ (801b2f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b2d0:	f7fc f884 	bl	80173dc <USBD_GetString>
 801b2d4:	e004      	b.n	801b2e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b2d6:	683a      	ldr	r2, [r7, #0]
 801b2d8:	4904      	ldr	r1, [pc, #16]	@ (801b2ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b2da:	4805      	ldr	r0, [pc, #20]	@ (801b2f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b2dc:	f7fc f87e 	bl	80173dc <USBD_GetString>
  }
  return USBD_StrDesc;
 801b2e0:	4b02      	ldr	r3, [pc, #8]	@ (801b2ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	3708      	adds	r7, #8
 801b2e6:	46bd      	mov	sp, r7
 801b2e8:	bd80      	pop	{r7, pc}
 801b2ea:	bf00      	nop
 801b2ec:	20002748 	.word	0x20002748
 801b2f0:	0802261c 	.word	0x0802261c

0801b2f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b084      	sub	sp, #16
 801b2f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b2fa:	4b0f      	ldr	r3, [pc, #60]	@ (801b338 <Get_SerialNum+0x44>)
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b300:	4b0e      	ldr	r3, [pc, #56]	@ (801b33c <Get_SerialNum+0x48>)
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b306:	4b0e      	ldr	r3, [pc, #56]	@ (801b340 <Get_SerialNum+0x4c>)
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b30c:	68fa      	ldr	r2, [r7, #12]
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	4413      	add	r3, r2
 801b312:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d009      	beq.n	801b32e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b31a:	2208      	movs	r2, #8
 801b31c:	4909      	ldr	r1, [pc, #36]	@ (801b344 <Get_SerialNum+0x50>)
 801b31e:	68f8      	ldr	r0, [r7, #12]
 801b320:	f000 f814 	bl	801b34c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b324:	2204      	movs	r2, #4
 801b326:	4908      	ldr	r1, [pc, #32]	@ (801b348 <Get_SerialNum+0x54>)
 801b328:	68b8      	ldr	r0, [r7, #8]
 801b32a:	f000 f80f 	bl	801b34c <IntToUnicode>
  }
}
 801b32e:	bf00      	nop
 801b330:	3710      	adds	r7, #16
 801b332:	46bd      	mov	sp, r7
 801b334:	bd80      	pop	{r7, pc}
 801b336:	bf00      	nop
 801b338:	1fff7a10 	.word	0x1fff7a10
 801b33c:	1fff7a14 	.word	0x1fff7a14
 801b340:	1fff7a18 	.word	0x1fff7a18
 801b344:	2000012e 	.word	0x2000012e
 801b348:	2000013e 	.word	0x2000013e

0801b34c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b34c:	b480      	push	{r7}
 801b34e:	b087      	sub	sp, #28
 801b350:	af00      	add	r7, sp, #0
 801b352:	60f8      	str	r0, [r7, #12]
 801b354:	60b9      	str	r1, [r7, #8]
 801b356:	4613      	mov	r3, r2
 801b358:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b35a:	2300      	movs	r3, #0
 801b35c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b35e:	2300      	movs	r3, #0
 801b360:	75fb      	strb	r3, [r7, #23]
 801b362:	e027      	b.n	801b3b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	0f1b      	lsrs	r3, r3, #28
 801b368:	2b09      	cmp	r3, #9
 801b36a:	d80b      	bhi.n	801b384 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	0f1b      	lsrs	r3, r3, #28
 801b370:	b2da      	uxtb	r2, r3
 801b372:	7dfb      	ldrb	r3, [r7, #23]
 801b374:	005b      	lsls	r3, r3, #1
 801b376:	4619      	mov	r1, r3
 801b378:	68bb      	ldr	r3, [r7, #8]
 801b37a:	440b      	add	r3, r1
 801b37c:	3230      	adds	r2, #48	@ 0x30
 801b37e:	b2d2      	uxtb	r2, r2
 801b380:	701a      	strb	r2, [r3, #0]
 801b382:	e00a      	b.n	801b39a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b384:	68fb      	ldr	r3, [r7, #12]
 801b386:	0f1b      	lsrs	r3, r3, #28
 801b388:	b2da      	uxtb	r2, r3
 801b38a:	7dfb      	ldrb	r3, [r7, #23]
 801b38c:	005b      	lsls	r3, r3, #1
 801b38e:	4619      	mov	r1, r3
 801b390:	68bb      	ldr	r3, [r7, #8]
 801b392:	440b      	add	r3, r1
 801b394:	3237      	adds	r2, #55	@ 0x37
 801b396:	b2d2      	uxtb	r2, r2
 801b398:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	011b      	lsls	r3, r3, #4
 801b39e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b3a0:	7dfb      	ldrb	r3, [r7, #23]
 801b3a2:	005b      	lsls	r3, r3, #1
 801b3a4:	3301      	adds	r3, #1
 801b3a6:	68ba      	ldr	r2, [r7, #8]
 801b3a8:	4413      	add	r3, r2
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b3ae:	7dfb      	ldrb	r3, [r7, #23]
 801b3b0:	3301      	adds	r3, #1
 801b3b2:	75fb      	strb	r3, [r7, #23]
 801b3b4:	7dfa      	ldrb	r2, [r7, #23]
 801b3b6:	79fb      	ldrb	r3, [r7, #7]
 801b3b8:	429a      	cmp	r2, r3
 801b3ba:	d3d3      	bcc.n	801b364 <IntToUnicode+0x18>
  }
}
 801b3bc:	bf00      	nop
 801b3be:	bf00      	nop
 801b3c0:	371c      	adds	r7, #28
 801b3c2:	46bd      	mov	sp, r7
 801b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3c8:	4770      	bx	lr

0801b3ca <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801b3ca:	b480      	push	{r7}
 801b3cc:	b083      	sub	sp, #12
 801b3ce:	af00      	add	r7, sp, #0
 801b3d0:	4603      	mov	r3, r0
 801b3d2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801b3d4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801b3d6:	4618      	mov	r0, r3
 801b3d8:	370c      	adds	r7, #12
 801b3da:	46bd      	mov	sp, r7
 801b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e0:	4770      	bx	lr
	...

0801b3e4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801b3e4:	b580      	push	{r7, lr}
 801b3e6:	b08e      	sub	sp, #56	@ 0x38
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	4603      	mov	r3, r0
 801b3ec:	60b9      	str	r1, [r7, #8]
 801b3ee:	607a      	str	r2, [r7, #4]
 801b3f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801b3f2:	23ff      	movs	r3, #255	@ 0xff
 801b3f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801b3f8:	f107 0314 	add.w	r3, r7, #20
 801b3fc:	4619      	mov	r1, r3
 801b3fe:	480a      	ldr	r0, [pc, #40]	@ (801b428 <STORAGE_GetCapacity_FS+0x44>)
 801b400:	f7ef f80a 	bl	800a418 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801b404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b406:	1e5a      	subs	r2, r3, #1
 801b408:	68bb      	ldr	r3, [r7, #8]
 801b40a:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801b40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b40e:	b29a      	uxth	r2, r3
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801b414:	2300      	movs	r3, #0
 801b416:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  return ret;
 801b41a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 801b41e:	4618      	mov	r0, r3
 801b420:	3738      	adds	r7, #56	@ 0x38
 801b422:	46bd      	mov	sp, r7
 801b424:	bd80      	pop	{r7, pc}
 801b426:	bf00      	nop
 801b428:	20001804 	.word	0x20001804

0801b42c <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801b42c:	b480      	push	{r7}
 801b42e:	b083      	sub	sp, #12
 801b430:	af00      	add	r7, sp, #0
 801b432:	4603      	mov	r3, r0
 801b434:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801b436:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b438:	4618      	mov	r0, r3
 801b43a:	370c      	adds	r7, #12
 801b43c:	46bd      	mov	sp, r7
 801b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b442:	4770      	bx	lr

0801b444 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801b444:	b480      	push	{r7}
 801b446:	b083      	sub	sp, #12
 801b448:	af00      	add	r7, sp, #0
 801b44a:	4603      	mov	r3, r0
 801b44c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801b44e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b450:	4618      	mov	r0, r3
 801b452:	370c      	adds	r7, #12
 801b454:	46bd      	mov	sp, r7
 801b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b45a:	4770      	bx	lr

0801b45c <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b088      	sub	sp, #32
 801b460:	af02      	add	r7, sp, #8
 801b462:	60b9      	str	r1, [r7, #8]
 801b464:	607a      	str	r2, [r7, #4]
 801b466:	461a      	mov	r2, r3
 801b468:	4603      	mov	r3, r0
 801b46a:	73fb      	strb	r3, [r7, #15]
 801b46c:	4613      	mov	r3, r2
 801b46e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801b470:	23ff      	movs	r3, #255	@ 0xff
 801b472:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801b474:	f7e8 fc04 	bl	8003c80 <HAL_GetTick>
 801b478:	4603      	mov	r3, r0
 801b47a:	4a0d      	ldr	r2, [pc, #52]	@ (801b4b0 <STORAGE_Read_FS+0x54>)
 801b47c:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801b47e:	89bb      	ldrh	r3, [r7, #12]
 801b480:	f04f 32ff 	mov.w	r2, #4294967295
 801b484:	9200      	str	r2, [sp, #0]
 801b486:	687a      	ldr	r2, [r7, #4]
 801b488:	68b9      	ldr	r1, [r7, #8]
 801b48a:	480a      	ldr	r0, [pc, #40]	@ (801b4b4 <STORAGE_Read_FS+0x58>)
 801b48c:	f7ee fabc 	bl	8009a08 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801b490:	bf00      	nop
 801b492:	4808      	ldr	r0, [pc, #32]	@ (801b4b4 <STORAGE_Read_FS+0x58>)
 801b494:	f7ee ffec 	bl	800a470 <HAL_SD_GetCardState>
 801b498:	4603      	mov	r3, r0
 801b49a:	2b04      	cmp	r3, #4
 801b49c:	d1f9      	bne.n	801b492 <STORAGE_Read_FS+0x36>
	  ret = 0;
 801b49e:	2300      	movs	r3, #0
 801b4a0:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801b4a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	3718      	adds	r7, #24
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	bd80      	pop	{r7, pc}
 801b4ae:	bf00      	nop
 801b4b0:	20001718 	.word	0x20001718
 801b4b4:	20001804 	.word	0x20001804

0801b4b8 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	b088      	sub	sp, #32
 801b4bc:	af02      	add	r7, sp, #8
 801b4be:	60b9      	str	r1, [r7, #8]
 801b4c0:	607a      	str	r2, [r7, #4]
 801b4c2:	461a      	mov	r2, r3
 801b4c4:	4603      	mov	r3, r0
 801b4c6:	73fb      	strb	r3, [r7, #15]
 801b4c8:	4613      	mov	r3, r2
 801b4ca:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801b4cc:	23ff      	movs	r3, #255	@ 0xff
 801b4ce:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801b4d0:	89bb      	ldrh	r3, [r7, #12]
 801b4d2:	f04f 32ff 	mov.w	r2, #4294967295
 801b4d6:	9200      	str	r2, [sp, #0]
 801b4d8:	687a      	ldr	r2, [r7, #4]
 801b4da:	68b9      	ldr	r1, [r7, #8]
 801b4dc:	4808      	ldr	r0, [pc, #32]	@ (801b500 <STORAGE_Write_FS+0x48>)
 801b4de:	f7ee fc71 	bl	8009dc4 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801b4e2:	bf00      	nop
 801b4e4:	4806      	ldr	r0, [pc, #24]	@ (801b500 <STORAGE_Write_FS+0x48>)
 801b4e6:	f7ee ffc3 	bl	800a470 <HAL_SD_GetCardState>
 801b4ea:	4603      	mov	r3, r0
 801b4ec:	2b04      	cmp	r3, #4
 801b4ee:	d1f9      	bne.n	801b4e4 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801b4f0:	2300      	movs	r3, #0
 801b4f2:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801b4f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801b4f8:	4618      	mov	r0, r3
 801b4fa:	3718      	adds	r7, #24
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	bd80      	pop	{r7, pc}
 801b500:	20001804 	.word	0x20001804

0801b504 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801b504:	b480      	push	{r7}
 801b506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801b508:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801b50a:	4618      	mov	r0, r3
 801b50c:	46bd      	mov	sp, r7
 801b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b512:	4770      	bx	lr

0801b514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b514:	b580      	push	{r7, lr}
 801b516:	b08a      	sub	sp, #40	@ 0x28
 801b518:	af00      	add	r7, sp, #0
 801b51a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b51c:	f107 0314 	add.w	r3, r7, #20
 801b520:	2200      	movs	r2, #0
 801b522:	601a      	str	r2, [r3, #0]
 801b524:	605a      	str	r2, [r3, #4]
 801b526:	609a      	str	r2, [r3, #8]
 801b528:	60da      	str	r2, [r3, #12]
 801b52a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b534:	d13a      	bne.n	801b5ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b536:	2300      	movs	r3, #0
 801b538:	613b      	str	r3, [r7, #16]
 801b53a:	4b1e      	ldr	r3, [pc, #120]	@ (801b5b4 <HAL_PCD_MspInit+0xa0>)
 801b53c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b53e:	4a1d      	ldr	r2, [pc, #116]	@ (801b5b4 <HAL_PCD_MspInit+0xa0>)
 801b540:	f043 0301 	orr.w	r3, r3, #1
 801b544:	6313      	str	r3, [r2, #48]	@ 0x30
 801b546:	4b1b      	ldr	r3, [pc, #108]	@ (801b5b4 <HAL_PCD_MspInit+0xa0>)
 801b548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b54a:	f003 0301 	and.w	r3, r3, #1
 801b54e:	613b      	str	r3, [r7, #16]
 801b550:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801b552:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801b556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b558:	2302      	movs	r3, #2
 801b55a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b55c:	2300      	movs	r3, #0
 801b55e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b560:	2303      	movs	r3, #3
 801b562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801b564:	230a      	movs	r3, #10
 801b566:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b568:	f107 0314 	add.w	r3, r7, #20
 801b56c:	4619      	mov	r1, r3
 801b56e:	4812      	ldr	r0, [pc, #72]	@ (801b5b8 <HAL_PCD_MspInit+0xa4>)
 801b570:	f7ea f8ea 	bl	8005748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801b574:	4b0f      	ldr	r3, [pc, #60]	@ (801b5b4 <HAL_PCD_MspInit+0xa0>)
 801b576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b578:	4a0e      	ldr	r2, [pc, #56]	@ (801b5b4 <HAL_PCD_MspInit+0xa0>)
 801b57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b57e:	6353      	str	r3, [r2, #52]	@ 0x34
 801b580:	2300      	movs	r3, #0
 801b582:	60fb      	str	r3, [r7, #12]
 801b584:	4b0b      	ldr	r3, [pc, #44]	@ (801b5b4 <HAL_PCD_MspInit+0xa0>)
 801b586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b588:	4a0a      	ldr	r2, [pc, #40]	@ (801b5b4 <HAL_PCD_MspInit+0xa0>)
 801b58a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801b58e:	6453      	str	r3, [r2, #68]	@ 0x44
 801b590:	4b08      	ldr	r3, [pc, #32]	@ (801b5b4 <HAL_PCD_MspInit+0xa0>)
 801b592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801b598:	60fb      	str	r3, [r7, #12]
 801b59a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801b59c:	2200      	movs	r2, #0
 801b59e:	2100      	movs	r1, #0
 801b5a0:	2043      	movs	r0, #67	@ 0x43
 801b5a2:	f7e9 f950 	bl	8004846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801b5a6:	2043      	movs	r0, #67	@ 0x43
 801b5a8:	f7e9 f969 	bl	800487e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801b5ac:	bf00      	nop
 801b5ae:	3728      	adds	r7, #40	@ 0x28
 801b5b0:	46bd      	mov	sp, r7
 801b5b2:	bd80      	pop	{r7, pc}
 801b5b4:	40023800 	.word	0x40023800
 801b5b8:	40020000 	.word	0x40020000

0801b5bc <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801b5bc:	b580      	push	{r7, lr}
 801b5be:	b082      	sub	sp, #8
 801b5c0:	af00      	add	r7, sp, #0
 801b5c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b5cc:	d10d      	bne.n	801b5ea <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801b5ce:	4b09      	ldr	r3, [pc, #36]	@ (801b5f4 <HAL_PCD_MspDeInit+0x38>)
 801b5d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b5d2:	4a08      	ldr	r2, [pc, #32]	@ (801b5f4 <HAL_PCD_MspDeInit+0x38>)
 801b5d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801b5d8:	6353      	str	r3, [r2, #52]	@ 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801b5da:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801b5de:	4806      	ldr	r0, [pc, #24]	@ (801b5f8 <HAL_PCD_MspDeInit+0x3c>)
 801b5e0:	f7ea fa36 	bl	8005a50 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801b5e4:	2043      	movs	r0, #67	@ 0x43
 801b5e6:	f7e9 f958 	bl	800489a <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801b5ea:	bf00      	nop
 801b5ec:	3708      	adds	r7, #8
 801b5ee:	46bd      	mov	sp, r7
 801b5f0:	bd80      	pop	{r7, pc}
 801b5f2:	bf00      	nop
 801b5f4:	40023800 	.word	0x40023800
 801b5f8:	40020000 	.word	0x40020000

0801b5fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b5fc:	b580      	push	{r7, lr}
 801b5fe:	b082      	sub	sp, #8
 801b600:	af00      	add	r7, sp, #0
 801b602:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801b610:	4619      	mov	r1, r3
 801b612:	4610      	mov	r0, r2
 801b614:	f7fa fd85 	bl	8016122 <USBD_LL_SetupStage>
}
 801b618:	bf00      	nop
 801b61a:	3708      	adds	r7, #8
 801b61c:	46bd      	mov	sp, r7
 801b61e:	bd80      	pop	{r7, pc}

0801b620 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b620:	b580      	push	{r7, lr}
 801b622:	b082      	sub	sp, #8
 801b624:	af00      	add	r7, sp, #0
 801b626:	6078      	str	r0, [r7, #4]
 801b628:	460b      	mov	r3, r1
 801b62a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801b632:	78fa      	ldrb	r2, [r7, #3]
 801b634:	6879      	ldr	r1, [r7, #4]
 801b636:	4613      	mov	r3, r2
 801b638:	00db      	lsls	r3, r3, #3
 801b63a:	4413      	add	r3, r2
 801b63c:	009b      	lsls	r3, r3, #2
 801b63e:	440b      	add	r3, r1
 801b640:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 801b644:	681a      	ldr	r2, [r3, #0]
 801b646:	78fb      	ldrb	r3, [r7, #3]
 801b648:	4619      	mov	r1, r3
 801b64a:	f7fa fdbf 	bl	80161cc <USBD_LL_DataOutStage>
}
 801b64e:	bf00      	nop
 801b650:	3708      	adds	r7, #8
 801b652:	46bd      	mov	sp, r7
 801b654:	bd80      	pop	{r7, pc}

0801b656 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b656:	b580      	push	{r7, lr}
 801b658:	b082      	sub	sp, #8
 801b65a:	af00      	add	r7, sp, #0
 801b65c:	6078      	str	r0, [r7, #4]
 801b65e:	460b      	mov	r3, r1
 801b660:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801b668:	78fa      	ldrb	r2, [r7, #3]
 801b66a:	6879      	ldr	r1, [r7, #4]
 801b66c:	4613      	mov	r3, r2
 801b66e:	00db      	lsls	r3, r3, #3
 801b670:	4413      	add	r3, r2
 801b672:	009b      	lsls	r3, r3, #2
 801b674:	440b      	add	r3, r1
 801b676:	334c      	adds	r3, #76	@ 0x4c
 801b678:	681a      	ldr	r2, [r3, #0]
 801b67a:	78fb      	ldrb	r3, [r7, #3]
 801b67c:	4619      	mov	r1, r3
 801b67e:	f7fa fe58 	bl	8016332 <USBD_LL_DataInStage>
}
 801b682:	bf00      	nop
 801b684:	3708      	adds	r7, #8
 801b686:	46bd      	mov	sp, r7
 801b688:	bd80      	pop	{r7, pc}

0801b68a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b68a:	b580      	push	{r7, lr}
 801b68c:	b082      	sub	sp, #8
 801b68e:	af00      	add	r7, sp, #0
 801b690:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b698:	4618      	mov	r0, r3
 801b69a:	f7fa ff8c 	bl	80165b6 <USBD_LL_SOF>
}
 801b69e:	bf00      	nop
 801b6a0:	3708      	adds	r7, #8
 801b6a2:	46bd      	mov	sp, r7
 801b6a4:	bd80      	pop	{r7, pc}

0801b6a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b6a6:	b580      	push	{r7, lr}
 801b6a8:	b084      	sub	sp, #16
 801b6aa:	af00      	add	r7, sp, #0
 801b6ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b6ae:	2301      	movs	r3, #1
 801b6b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	68db      	ldr	r3, [r3, #12]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d102      	bne.n	801b6c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	73fb      	strb	r3, [r7, #15]
 801b6be:	e008      	b.n	801b6d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	68db      	ldr	r3, [r3, #12]
 801b6c4:	2b02      	cmp	r3, #2
 801b6c6:	d102      	bne.n	801b6ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801b6c8:	2301      	movs	r3, #1
 801b6ca:	73fb      	strb	r3, [r7, #15]
 801b6cc:	e001      	b.n	801b6d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801b6ce:	f7e7 fd93 	bl	80031f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b6d8:	7bfa      	ldrb	r2, [r7, #15]
 801b6da:	4611      	mov	r1, r2
 801b6dc:	4618      	mov	r0, r3
 801b6de:	f7fa ff2c 	bl	801653a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	f7fa fed4 	bl	8016496 <USBD_LL_Reset>
}
 801b6ee:	bf00      	nop
 801b6f0:	3710      	adds	r7, #16
 801b6f2:	46bd      	mov	sp, r7
 801b6f4:	bd80      	pop	{r7, pc}
	...

0801b6f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b6f8:	b580      	push	{r7, lr}
 801b6fa:	b082      	sub	sp, #8
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b706:	4618      	mov	r0, r3
 801b708:	f7fa ff27 	bl	801655a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	687a      	ldr	r2, [r7, #4]
 801b718:	6812      	ldr	r2, [r2, #0]
 801b71a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801b71e:	f043 0301 	orr.w	r3, r3, #1
 801b722:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	6a1b      	ldr	r3, [r3, #32]
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d005      	beq.n	801b738 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b72c:	4b04      	ldr	r3, [pc, #16]	@ (801b740 <HAL_PCD_SuspendCallback+0x48>)
 801b72e:	691b      	ldr	r3, [r3, #16]
 801b730:	4a03      	ldr	r2, [pc, #12]	@ (801b740 <HAL_PCD_SuspendCallback+0x48>)
 801b732:	f043 0306 	orr.w	r3, r3, #6
 801b736:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801b738:	bf00      	nop
 801b73a:	3708      	adds	r7, #8
 801b73c:	46bd      	mov	sp, r7
 801b73e:	bd80      	pop	{r7, pc}
 801b740:	e000ed00 	.word	0xe000ed00

0801b744 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b744:	b580      	push	{r7, lr}
 801b746:	b082      	sub	sp, #8
 801b748:	af00      	add	r7, sp, #0
 801b74a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b752:	4618      	mov	r0, r3
 801b754:	f7fa ff17 	bl	8016586 <USBD_LL_Resume>
}
 801b758:	bf00      	nop
 801b75a:	3708      	adds	r7, #8
 801b75c:	46bd      	mov	sp, r7
 801b75e:	bd80      	pop	{r7, pc}

0801b760 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b082      	sub	sp, #8
 801b764:	af00      	add	r7, sp, #0
 801b766:	6078      	str	r0, [r7, #4]
 801b768:	460b      	mov	r3, r1
 801b76a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b772:	78fa      	ldrb	r2, [r7, #3]
 801b774:	4611      	mov	r1, r2
 801b776:	4618      	mov	r0, r3
 801b778:	f7fa ff6f 	bl	801665a <USBD_LL_IsoOUTIncomplete>
}
 801b77c:	bf00      	nop
 801b77e:	3708      	adds	r7, #8
 801b780:	46bd      	mov	sp, r7
 801b782:	bd80      	pop	{r7, pc}

0801b784 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b784:	b580      	push	{r7, lr}
 801b786:	b082      	sub	sp, #8
 801b788:	af00      	add	r7, sp, #0
 801b78a:	6078      	str	r0, [r7, #4]
 801b78c:	460b      	mov	r3, r1
 801b78e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b796:	78fa      	ldrb	r2, [r7, #3]
 801b798:	4611      	mov	r1, r2
 801b79a:	4618      	mov	r0, r3
 801b79c:	f7fa ff2b 	bl	80165f6 <USBD_LL_IsoINIncomplete>
}
 801b7a0:	bf00      	nop
 801b7a2:	3708      	adds	r7, #8
 801b7a4:	46bd      	mov	sp, r7
 801b7a6:	bd80      	pop	{r7, pc}

0801b7a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b082      	sub	sp, #8
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	f7fa ff81 	bl	80166be <USBD_LL_DevConnected>
}
 801b7bc:	bf00      	nop
 801b7be:	3708      	adds	r7, #8
 801b7c0:	46bd      	mov	sp, r7
 801b7c2:	bd80      	pop	{r7, pc}

0801b7c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b082      	sub	sp, #8
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b7d2:	4618      	mov	r0, r3
 801b7d4:	f7fa ff7e 	bl	80166d4 <USBD_LL_DevDisconnected>
}
 801b7d8:	bf00      	nop
 801b7da:	3708      	adds	r7, #8
 801b7dc:	46bd      	mov	sp, r7
 801b7de:	bd80      	pop	{r7, pc}

0801b7e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b7e0:	b580      	push	{r7, lr}
 801b7e2:	b082      	sub	sp, #8
 801b7e4:	af00      	add	r7, sp, #0
 801b7e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	781b      	ldrb	r3, [r3, #0]
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d13c      	bne.n	801b86a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801b7f0:	4a20      	ldr	r2, [pc, #128]	@ (801b874 <USBD_LL_Init+0x94>)
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	4a1e      	ldr	r2, [pc, #120]	@ (801b874 <USBD_LL_Init+0x94>)
 801b7fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801b800:	4b1c      	ldr	r3, [pc, #112]	@ (801b874 <USBD_LL_Init+0x94>)
 801b802:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801b806:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801b808:	4b1a      	ldr	r3, [pc, #104]	@ (801b874 <USBD_LL_Init+0x94>)
 801b80a:	2204      	movs	r2, #4
 801b80c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801b80e:	4b19      	ldr	r3, [pc, #100]	@ (801b874 <USBD_LL_Init+0x94>)
 801b810:	2202      	movs	r2, #2
 801b812:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801b814:	4b17      	ldr	r3, [pc, #92]	@ (801b874 <USBD_LL_Init+0x94>)
 801b816:	2200      	movs	r2, #0
 801b818:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b81a:	4b16      	ldr	r3, [pc, #88]	@ (801b874 <USBD_LL_Init+0x94>)
 801b81c:	2202      	movs	r2, #2
 801b81e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801b820:	4b14      	ldr	r3, [pc, #80]	@ (801b874 <USBD_LL_Init+0x94>)
 801b822:	2200      	movs	r2, #0
 801b824:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801b826:	4b13      	ldr	r3, [pc, #76]	@ (801b874 <USBD_LL_Init+0x94>)
 801b828:	2200      	movs	r2, #0
 801b82a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801b82c:	4b11      	ldr	r3, [pc, #68]	@ (801b874 <USBD_LL_Init+0x94>)
 801b82e:	2200      	movs	r2, #0
 801b830:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801b832:	4b10      	ldr	r3, [pc, #64]	@ (801b874 <USBD_LL_Init+0x94>)
 801b834:	2200      	movs	r2, #0
 801b836:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801b838:	4b0e      	ldr	r3, [pc, #56]	@ (801b874 <USBD_LL_Init+0x94>)
 801b83a:	2200      	movs	r2, #0
 801b83c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801b83e:	480d      	ldr	r0, [pc, #52]	@ (801b874 <USBD_LL_Init+0x94>)
 801b840:	f7eb fb27 	bl	8006e92 <HAL_PCD_Init>
 801b844:	4603      	mov	r3, r0
 801b846:	2b00      	cmp	r3, #0
 801b848:	d001      	beq.n	801b84e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801b84a:	f7e7 fcd5 	bl	80031f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801b84e:	2180      	movs	r1, #128	@ 0x80
 801b850:	4808      	ldr	r0, [pc, #32]	@ (801b874 <USBD_LL_Init+0x94>)
 801b852:	f7ec fe08 	bl	8008466 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801b856:	2240      	movs	r2, #64	@ 0x40
 801b858:	2100      	movs	r1, #0
 801b85a:	4806      	ldr	r0, [pc, #24]	@ (801b874 <USBD_LL_Init+0x94>)
 801b85c:	f7ec fdbc 	bl	80083d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801b860:	2280      	movs	r2, #128	@ 0x80
 801b862:	2101      	movs	r1, #1
 801b864:	4803      	ldr	r0, [pc, #12]	@ (801b874 <USBD_LL_Init+0x94>)
 801b866:	f7ec fdb7 	bl	80083d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801b86a:	2300      	movs	r3, #0
}
 801b86c:	4618      	mov	r0, r3
 801b86e:	3708      	adds	r7, #8
 801b870:	46bd      	mov	sp, r7
 801b872:	bd80      	pop	{r7, pc}
 801b874:	20002948 	.word	0x20002948

0801b878 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801b878:	b580      	push	{r7, lr}
 801b87a:	b084      	sub	sp, #16
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b880:	2300      	movs	r3, #0
 801b882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b884:	2300      	movs	r3, #0
 801b886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b88e:	4618      	mov	r0, r3
 801b890:	f7eb fc1c 	bl	80070cc <HAL_PCD_DeInit>
 801b894:	4603      	mov	r3, r0
 801b896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b898:	7bfb      	ldrb	r3, [r7, #15]
 801b89a:	4618      	mov	r0, r3
 801b89c:	f000 f998 	bl	801bbd0 <USBD_Get_USB_Status>
 801b8a0:	4603      	mov	r3, r0
 801b8a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b8a4:	7bbb      	ldrb	r3, [r7, #14]
}
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	3710      	adds	r7, #16
 801b8aa:	46bd      	mov	sp, r7
 801b8ac:	bd80      	pop	{r7, pc}

0801b8ae <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b8ae:	b580      	push	{r7, lr}
 801b8b0:	b084      	sub	sp, #16
 801b8b2:	af00      	add	r7, sp, #0
 801b8b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b8c4:	4618      	mov	r0, r3
 801b8c6:	f7eb fc24 	bl	8007112 <HAL_PCD_Start>
 801b8ca:	4603      	mov	r3, r0
 801b8cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b8ce:	7bfb      	ldrb	r3, [r7, #15]
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f000 f97d 	bl	801bbd0 <USBD_Get_USB_Status>
 801b8d6:	4603      	mov	r3, r0
 801b8d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b8da:	7bbb      	ldrb	r3, [r7, #14]
}
 801b8dc:	4618      	mov	r0, r3
 801b8de:	3710      	adds	r7, #16
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	bd80      	pop	{r7, pc}

0801b8e4 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b084      	sub	sp, #16
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b8f0:	2300      	movs	r3, #0
 801b8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	f7eb fc3c 	bl	8007178 <HAL_PCD_Stop>
 801b900:	4603      	mov	r3, r0
 801b902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b904:	7bfb      	ldrb	r3, [r7, #15]
 801b906:	4618      	mov	r0, r3
 801b908:	f000 f962 	bl	801bbd0 <USBD_Get_USB_Status>
 801b90c:	4603      	mov	r3, r0
 801b90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b910:	7bbb      	ldrb	r3, [r7, #14]
}
 801b912:	4618      	mov	r0, r3
 801b914:	3710      	adds	r7, #16
 801b916:	46bd      	mov	sp, r7
 801b918:	bd80      	pop	{r7, pc}

0801b91a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b91a:	b580      	push	{r7, lr}
 801b91c:	b084      	sub	sp, #16
 801b91e:	af00      	add	r7, sp, #0
 801b920:	6078      	str	r0, [r7, #4]
 801b922:	4608      	mov	r0, r1
 801b924:	4611      	mov	r1, r2
 801b926:	461a      	mov	r2, r3
 801b928:	4603      	mov	r3, r0
 801b92a:	70fb      	strb	r3, [r7, #3]
 801b92c:	460b      	mov	r3, r1
 801b92e:	70bb      	strb	r3, [r7, #2]
 801b930:	4613      	mov	r3, r2
 801b932:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b934:	2300      	movs	r3, #0
 801b936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b938:	2300      	movs	r3, #0
 801b93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801b942:	78bb      	ldrb	r3, [r7, #2]
 801b944:	883a      	ldrh	r2, [r7, #0]
 801b946:	78f9      	ldrb	r1, [r7, #3]
 801b948:	f7ec f913 	bl	8007b72 <HAL_PCD_EP_Open>
 801b94c:	4603      	mov	r3, r0
 801b94e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b950:	7bfb      	ldrb	r3, [r7, #15]
 801b952:	4618      	mov	r0, r3
 801b954:	f000 f93c 	bl	801bbd0 <USBD_Get_USB_Status>
 801b958:	4603      	mov	r3, r0
 801b95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b95c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b95e:	4618      	mov	r0, r3
 801b960:	3710      	adds	r7, #16
 801b962:	46bd      	mov	sp, r7
 801b964:	bd80      	pop	{r7, pc}

0801b966 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b966:	b580      	push	{r7, lr}
 801b968:	b084      	sub	sp, #16
 801b96a:	af00      	add	r7, sp, #0
 801b96c:	6078      	str	r0, [r7, #4]
 801b96e:	460b      	mov	r3, r1
 801b970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b972:	2300      	movs	r3, #0
 801b974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b976:	2300      	movs	r3, #0
 801b978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b980:	78fa      	ldrb	r2, [r7, #3]
 801b982:	4611      	mov	r1, r2
 801b984:	4618      	mov	r0, r3
 801b986:	f7ec f95c 	bl	8007c42 <HAL_PCD_EP_Close>
 801b98a:	4603      	mov	r3, r0
 801b98c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b98e:	7bfb      	ldrb	r3, [r7, #15]
 801b990:	4618      	mov	r0, r3
 801b992:	f000 f91d 	bl	801bbd0 <USBD_Get_USB_Status>
 801b996:	4603      	mov	r3, r0
 801b998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b99a:	7bbb      	ldrb	r3, [r7, #14]
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	3710      	adds	r7, #16
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	bd80      	pop	{r7, pc}

0801b9a4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b9a4:	b580      	push	{r7, lr}
 801b9a6:	b084      	sub	sp, #16
 801b9a8:	af00      	add	r7, sp, #0
 801b9aa:	6078      	str	r0, [r7, #4]
 801b9ac:	460b      	mov	r3, r1
 801b9ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b9b4:	2300      	movs	r3, #0
 801b9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b9be:	78fa      	ldrb	r2, [r7, #3]
 801b9c0:	4611      	mov	r1, r2
 801b9c2:	4618      	mov	r0, r3
 801b9c4:	f7ec fb1f 	bl	8008006 <HAL_PCD_EP_Flush>
 801b9c8:	4603      	mov	r3, r0
 801b9ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b9cc:	7bfb      	ldrb	r3, [r7, #15]
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	f000 f8fe 	bl	801bbd0 <USBD_Get_USB_Status>
 801b9d4:	4603      	mov	r3, r0
 801b9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 801b9da:	4618      	mov	r0, r3
 801b9dc:	3710      	adds	r7, #16
 801b9de:	46bd      	mov	sp, r7
 801b9e0:	bd80      	pop	{r7, pc}

0801b9e2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b9e2:	b580      	push	{r7, lr}
 801b9e4:	b084      	sub	sp, #16
 801b9e6:	af00      	add	r7, sp, #0
 801b9e8:	6078      	str	r0, [r7, #4]
 801b9ea:	460b      	mov	r3, r1
 801b9ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b9f2:	2300      	movs	r3, #0
 801b9f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b9fc:	78fa      	ldrb	r2, [r7, #3]
 801b9fe:	4611      	mov	r1, r2
 801ba00:	4618      	mov	r0, r3
 801ba02:	f7ec fa15 	bl	8007e30 <HAL_PCD_EP_SetStall>
 801ba06:	4603      	mov	r3, r0
 801ba08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ba0a:	7bfb      	ldrb	r3, [r7, #15]
 801ba0c:	4618      	mov	r0, r3
 801ba0e:	f000 f8df 	bl	801bbd0 <USBD_Get_USB_Status>
 801ba12:	4603      	mov	r3, r0
 801ba14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ba16:	7bbb      	ldrb	r3, [r7, #14]
}
 801ba18:	4618      	mov	r0, r3
 801ba1a:	3710      	adds	r7, #16
 801ba1c:	46bd      	mov	sp, r7
 801ba1e:	bd80      	pop	{r7, pc}

0801ba20 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ba20:	b580      	push	{r7, lr}
 801ba22:	b084      	sub	sp, #16
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	6078      	str	r0, [r7, #4]
 801ba28:	460b      	mov	r3, r1
 801ba2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ba2c:	2300      	movs	r3, #0
 801ba2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ba30:	2300      	movs	r3, #0
 801ba32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ba3a:	78fa      	ldrb	r2, [r7, #3]
 801ba3c:	4611      	mov	r1, r2
 801ba3e:	4618      	mov	r0, r3
 801ba40:	f7ec fa5a 	bl	8007ef8 <HAL_PCD_EP_ClrStall>
 801ba44:	4603      	mov	r3, r0
 801ba46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ba48:	7bfb      	ldrb	r3, [r7, #15]
 801ba4a:	4618      	mov	r0, r3
 801ba4c:	f000 f8c0 	bl	801bbd0 <USBD_Get_USB_Status>
 801ba50:	4603      	mov	r3, r0
 801ba52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ba54:	7bbb      	ldrb	r3, [r7, #14]
}
 801ba56:	4618      	mov	r0, r3
 801ba58:	3710      	adds	r7, #16
 801ba5a:	46bd      	mov	sp, r7
 801ba5c:	bd80      	pop	{r7, pc}

0801ba5e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ba5e:	b480      	push	{r7}
 801ba60:	b085      	sub	sp, #20
 801ba62:	af00      	add	r7, sp, #0
 801ba64:	6078      	str	r0, [r7, #4]
 801ba66:	460b      	mov	r3, r1
 801ba68:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ba70:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ba72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	da0b      	bge.n	801ba92 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ba7a:	78fb      	ldrb	r3, [r7, #3]
 801ba7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801ba80:	68f9      	ldr	r1, [r7, #12]
 801ba82:	4613      	mov	r3, r2
 801ba84:	00db      	lsls	r3, r3, #3
 801ba86:	4413      	add	r3, r2
 801ba88:	009b      	lsls	r3, r3, #2
 801ba8a:	440b      	add	r3, r1
 801ba8c:	333e      	adds	r3, #62	@ 0x3e
 801ba8e:	781b      	ldrb	r3, [r3, #0]
 801ba90:	e00b      	b.n	801baaa <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ba92:	78fb      	ldrb	r3, [r7, #3]
 801ba94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801ba98:	68f9      	ldr	r1, [r7, #12]
 801ba9a:	4613      	mov	r3, r2
 801ba9c:	00db      	lsls	r3, r3, #3
 801ba9e:	4413      	add	r3, r2
 801baa0:	009b      	lsls	r3, r3, #2
 801baa2:	440b      	add	r3, r1
 801baa4:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 801baa8:	781b      	ldrb	r3, [r3, #0]
  }
}
 801baaa:	4618      	mov	r0, r3
 801baac:	3714      	adds	r7, #20
 801baae:	46bd      	mov	sp, r7
 801bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bab4:	4770      	bx	lr

0801bab6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801bab6:	b580      	push	{r7, lr}
 801bab8:	b084      	sub	sp, #16
 801baba:	af00      	add	r7, sp, #0
 801babc:	6078      	str	r0, [r7, #4]
 801babe:	460b      	mov	r3, r1
 801bac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bac2:	2300      	movs	r3, #0
 801bac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bac6:	2300      	movs	r3, #0
 801bac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bad0:	78fa      	ldrb	r2, [r7, #3]
 801bad2:	4611      	mov	r1, r2
 801bad4:	4618      	mov	r0, r3
 801bad6:	f7ec f827 	bl	8007b28 <HAL_PCD_SetAddress>
 801bada:	4603      	mov	r3, r0
 801badc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bade:	7bfb      	ldrb	r3, [r7, #15]
 801bae0:	4618      	mov	r0, r3
 801bae2:	f000 f875 	bl	801bbd0 <USBD_Get_USB_Status>
 801bae6:	4603      	mov	r3, r0
 801bae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801baea:	7bbb      	ldrb	r3, [r7, #14]
}
 801baec:	4618      	mov	r0, r3
 801baee:	3710      	adds	r7, #16
 801baf0:	46bd      	mov	sp, r7
 801baf2:	bd80      	pop	{r7, pc}

0801baf4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801baf4:	b580      	push	{r7, lr}
 801baf6:	b086      	sub	sp, #24
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	60f8      	str	r0, [r7, #12]
 801bafc:	607a      	str	r2, [r7, #4]
 801bafe:	603b      	str	r3, [r7, #0]
 801bb00:	460b      	mov	r3, r1
 801bb02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb04:	2300      	movs	r3, #0
 801bb06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb08:	2300      	movs	r3, #0
 801bb0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801bb12:	7af9      	ldrb	r1, [r7, #11]
 801bb14:	683b      	ldr	r3, [r7, #0]
 801bb16:	687a      	ldr	r2, [r7, #4]
 801bb18:	f7ec f940 	bl	8007d9c <HAL_PCD_EP_Transmit>
 801bb1c:	4603      	mov	r3, r0
 801bb1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb20:	7dfb      	ldrb	r3, [r7, #23]
 801bb22:	4618      	mov	r0, r3
 801bb24:	f000 f854 	bl	801bbd0 <USBD_Get_USB_Status>
 801bb28:	4603      	mov	r3, r0
 801bb2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801bb2c:	7dbb      	ldrb	r3, [r7, #22]
}
 801bb2e:	4618      	mov	r0, r3
 801bb30:	3718      	adds	r7, #24
 801bb32:	46bd      	mov	sp, r7
 801bb34:	bd80      	pop	{r7, pc}

0801bb36 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801bb36:	b580      	push	{r7, lr}
 801bb38:	b086      	sub	sp, #24
 801bb3a:	af00      	add	r7, sp, #0
 801bb3c:	60f8      	str	r0, [r7, #12]
 801bb3e:	607a      	str	r2, [r7, #4]
 801bb40:	603b      	str	r3, [r7, #0]
 801bb42:	460b      	mov	r3, r1
 801bb44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb46:	2300      	movs	r3, #0
 801bb48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801bb54:	7af9      	ldrb	r1, [r7, #11]
 801bb56:	683b      	ldr	r3, [r7, #0]
 801bb58:	687a      	ldr	r2, [r7, #4]
 801bb5a:	f7ec f8bc 	bl	8007cd6 <HAL_PCD_EP_Receive>
 801bb5e:	4603      	mov	r3, r0
 801bb60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb62:	7dfb      	ldrb	r3, [r7, #23]
 801bb64:	4618      	mov	r0, r3
 801bb66:	f000 f833 	bl	801bbd0 <USBD_Get_USB_Status>
 801bb6a:	4603      	mov	r3, r0
 801bb6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801bb6e:	7dbb      	ldrb	r3, [r7, #22]
}
 801bb70:	4618      	mov	r0, r3
 801bb72:	3718      	adds	r7, #24
 801bb74:	46bd      	mov	sp, r7
 801bb76:	bd80      	pop	{r7, pc}

0801bb78 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bb78:	b580      	push	{r7, lr}
 801bb7a:	b082      	sub	sp, #8
 801bb7c:	af00      	add	r7, sp, #0
 801bb7e:	6078      	str	r0, [r7, #4]
 801bb80:	460b      	mov	r3, r1
 801bb82:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bb8a:	78fa      	ldrb	r2, [r7, #3]
 801bb8c:	4611      	mov	r1, r2
 801bb8e:	4618      	mov	r0, r3
 801bb90:	f7ec f8ec 	bl	8007d6c <HAL_PCD_EP_GetRxCount>
 801bb94:	4603      	mov	r3, r0
}
 801bb96:	4618      	mov	r0, r3
 801bb98:	3708      	adds	r7, #8
 801bb9a:	46bd      	mov	sp, r7
 801bb9c:	bd80      	pop	{r7, pc}
	...

0801bba0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801bba0:	b480      	push	{r7}
 801bba2:	b083      	sub	sp, #12
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801bba8:	4b03      	ldr	r3, [pc, #12]	@ (801bbb8 <USBD_static_malloc+0x18>)
}
 801bbaa:	4618      	mov	r0, r3
 801bbac:	370c      	adds	r7, #12
 801bbae:	46bd      	mov	sp, r7
 801bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbb4:	4770      	bx	lr
 801bbb6:	bf00      	nop
 801bbb8:	20002e54 	.word	0x20002e54

0801bbbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801bbbc:	b480      	push	{r7}
 801bbbe:	b083      	sub	sp, #12
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	6078      	str	r0, [r7, #4]

}
 801bbc4:	bf00      	nop
 801bbc6:	370c      	adds	r7, #12
 801bbc8:	46bd      	mov	sp, r7
 801bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbce:	4770      	bx	lr

0801bbd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801bbd0:	b480      	push	{r7}
 801bbd2:	b085      	sub	sp, #20
 801bbd4:	af00      	add	r7, sp, #0
 801bbd6:	4603      	mov	r3, r0
 801bbd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bbda:	2300      	movs	r3, #0
 801bbdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801bbde:	79fb      	ldrb	r3, [r7, #7]
 801bbe0:	2b03      	cmp	r3, #3
 801bbe2:	d817      	bhi.n	801bc14 <USBD_Get_USB_Status+0x44>
 801bbe4:	a201      	add	r2, pc, #4	@ (adr r2, 801bbec <USBD_Get_USB_Status+0x1c>)
 801bbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bbea:	bf00      	nop
 801bbec:	0801bbfd 	.word	0x0801bbfd
 801bbf0:	0801bc03 	.word	0x0801bc03
 801bbf4:	0801bc09 	.word	0x0801bc09
 801bbf8:	0801bc0f 	.word	0x0801bc0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801bbfc:	2300      	movs	r3, #0
 801bbfe:	73fb      	strb	r3, [r7, #15]
    break;
 801bc00:	e00b      	b.n	801bc1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801bc02:	2303      	movs	r3, #3
 801bc04:	73fb      	strb	r3, [r7, #15]
    break;
 801bc06:	e008      	b.n	801bc1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801bc08:	2301      	movs	r3, #1
 801bc0a:	73fb      	strb	r3, [r7, #15]
    break;
 801bc0c:	e005      	b.n	801bc1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801bc0e:	2303      	movs	r3, #3
 801bc10:	73fb      	strb	r3, [r7, #15]
    break;
 801bc12:	e002      	b.n	801bc1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801bc14:	2303      	movs	r3, #3
 801bc16:	73fb      	strb	r3, [r7, #15]
    break;
 801bc18:	bf00      	nop
  }
  return usb_status;
 801bc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	3714      	adds	r7, #20
 801bc20:	46bd      	mov	sp, r7
 801bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc26:	4770      	bx	lr

0801bc28 <atoi>:
 801bc28:	220a      	movs	r2, #10
 801bc2a:	2100      	movs	r1, #0
 801bc2c:	f000 b932 	b.w	801be94 <strtol>

0801bc30 <malloc>:
 801bc30:	4b02      	ldr	r3, [pc, #8]	@ (801bc3c <malloc+0xc>)
 801bc32:	4601      	mov	r1, r0
 801bc34:	6818      	ldr	r0, [r3, #0]
 801bc36:	f000 b825 	b.w	801bc84 <_malloc_r>
 801bc3a:	bf00      	nop
 801bc3c:	20000174 	.word	0x20000174

0801bc40 <sbrk_aligned>:
 801bc40:	b570      	push	{r4, r5, r6, lr}
 801bc42:	4e0f      	ldr	r6, [pc, #60]	@ (801bc80 <sbrk_aligned+0x40>)
 801bc44:	460c      	mov	r4, r1
 801bc46:	6831      	ldr	r1, [r6, #0]
 801bc48:	4605      	mov	r5, r0
 801bc4a:	b911      	cbnz	r1, 801bc52 <sbrk_aligned+0x12>
 801bc4c:	f001 fb2e 	bl	801d2ac <_sbrk_r>
 801bc50:	6030      	str	r0, [r6, #0]
 801bc52:	4621      	mov	r1, r4
 801bc54:	4628      	mov	r0, r5
 801bc56:	f001 fb29 	bl	801d2ac <_sbrk_r>
 801bc5a:	1c43      	adds	r3, r0, #1
 801bc5c:	d103      	bne.n	801bc66 <sbrk_aligned+0x26>
 801bc5e:	f04f 34ff 	mov.w	r4, #4294967295
 801bc62:	4620      	mov	r0, r4
 801bc64:	bd70      	pop	{r4, r5, r6, pc}
 801bc66:	1cc4      	adds	r4, r0, #3
 801bc68:	f024 0403 	bic.w	r4, r4, #3
 801bc6c:	42a0      	cmp	r0, r4
 801bc6e:	d0f8      	beq.n	801bc62 <sbrk_aligned+0x22>
 801bc70:	1a21      	subs	r1, r4, r0
 801bc72:	4628      	mov	r0, r5
 801bc74:	f001 fb1a 	bl	801d2ac <_sbrk_r>
 801bc78:	3001      	adds	r0, #1
 801bc7a:	d1f2      	bne.n	801bc62 <sbrk_aligned+0x22>
 801bc7c:	e7ef      	b.n	801bc5e <sbrk_aligned+0x1e>
 801bc7e:	bf00      	nop
 801bc80:	200036cc 	.word	0x200036cc

0801bc84 <_malloc_r>:
 801bc84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc88:	1ccd      	adds	r5, r1, #3
 801bc8a:	f025 0503 	bic.w	r5, r5, #3
 801bc8e:	3508      	adds	r5, #8
 801bc90:	2d0c      	cmp	r5, #12
 801bc92:	bf38      	it	cc
 801bc94:	250c      	movcc	r5, #12
 801bc96:	2d00      	cmp	r5, #0
 801bc98:	4606      	mov	r6, r0
 801bc9a:	db01      	blt.n	801bca0 <_malloc_r+0x1c>
 801bc9c:	42a9      	cmp	r1, r5
 801bc9e:	d904      	bls.n	801bcaa <_malloc_r+0x26>
 801bca0:	230c      	movs	r3, #12
 801bca2:	6033      	str	r3, [r6, #0]
 801bca4:	2000      	movs	r0, #0
 801bca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bcaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bd80 <_malloc_r+0xfc>
 801bcae:	f000 f869 	bl	801bd84 <__malloc_lock>
 801bcb2:	f8d8 3000 	ldr.w	r3, [r8]
 801bcb6:	461c      	mov	r4, r3
 801bcb8:	bb44      	cbnz	r4, 801bd0c <_malloc_r+0x88>
 801bcba:	4629      	mov	r1, r5
 801bcbc:	4630      	mov	r0, r6
 801bcbe:	f7ff ffbf 	bl	801bc40 <sbrk_aligned>
 801bcc2:	1c43      	adds	r3, r0, #1
 801bcc4:	4604      	mov	r4, r0
 801bcc6:	d158      	bne.n	801bd7a <_malloc_r+0xf6>
 801bcc8:	f8d8 4000 	ldr.w	r4, [r8]
 801bccc:	4627      	mov	r7, r4
 801bcce:	2f00      	cmp	r7, #0
 801bcd0:	d143      	bne.n	801bd5a <_malloc_r+0xd6>
 801bcd2:	2c00      	cmp	r4, #0
 801bcd4:	d04b      	beq.n	801bd6e <_malloc_r+0xea>
 801bcd6:	6823      	ldr	r3, [r4, #0]
 801bcd8:	4639      	mov	r1, r7
 801bcda:	4630      	mov	r0, r6
 801bcdc:	eb04 0903 	add.w	r9, r4, r3
 801bce0:	f001 fae4 	bl	801d2ac <_sbrk_r>
 801bce4:	4581      	cmp	r9, r0
 801bce6:	d142      	bne.n	801bd6e <_malloc_r+0xea>
 801bce8:	6821      	ldr	r1, [r4, #0]
 801bcea:	1a6d      	subs	r5, r5, r1
 801bcec:	4629      	mov	r1, r5
 801bcee:	4630      	mov	r0, r6
 801bcf0:	f7ff ffa6 	bl	801bc40 <sbrk_aligned>
 801bcf4:	3001      	adds	r0, #1
 801bcf6:	d03a      	beq.n	801bd6e <_malloc_r+0xea>
 801bcf8:	6823      	ldr	r3, [r4, #0]
 801bcfa:	442b      	add	r3, r5
 801bcfc:	6023      	str	r3, [r4, #0]
 801bcfe:	f8d8 3000 	ldr.w	r3, [r8]
 801bd02:	685a      	ldr	r2, [r3, #4]
 801bd04:	bb62      	cbnz	r2, 801bd60 <_malloc_r+0xdc>
 801bd06:	f8c8 7000 	str.w	r7, [r8]
 801bd0a:	e00f      	b.n	801bd2c <_malloc_r+0xa8>
 801bd0c:	6822      	ldr	r2, [r4, #0]
 801bd0e:	1b52      	subs	r2, r2, r5
 801bd10:	d420      	bmi.n	801bd54 <_malloc_r+0xd0>
 801bd12:	2a0b      	cmp	r2, #11
 801bd14:	d917      	bls.n	801bd46 <_malloc_r+0xc2>
 801bd16:	1961      	adds	r1, r4, r5
 801bd18:	42a3      	cmp	r3, r4
 801bd1a:	6025      	str	r5, [r4, #0]
 801bd1c:	bf18      	it	ne
 801bd1e:	6059      	strne	r1, [r3, #4]
 801bd20:	6863      	ldr	r3, [r4, #4]
 801bd22:	bf08      	it	eq
 801bd24:	f8c8 1000 	streq.w	r1, [r8]
 801bd28:	5162      	str	r2, [r4, r5]
 801bd2a:	604b      	str	r3, [r1, #4]
 801bd2c:	4630      	mov	r0, r6
 801bd2e:	f000 f82f 	bl	801bd90 <__malloc_unlock>
 801bd32:	f104 000b 	add.w	r0, r4, #11
 801bd36:	1d23      	adds	r3, r4, #4
 801bd38:	f020 0007 	bic.w	r0, r0, #7
 801bd3c:	1ac2      	subs	r2, r0, r3
 801bd3e:	bf1c      	itt	ne
 801bd40:	1a1b      	subne	r3, r3, r0
 801bd42:	50a3      	strne	r3, [r4, r2]
 801bd44:	e7af      	b.n	801bca6 <_malloc_r+0x22>
 801bd46:	6862      	ldr	r2, [r4, #4]
 801bd48:	42a3      	cmp	r3, r4
 801bd4a:	bf0c      	ite	eq
 801bd4c:	f8c8 2000 	streq.w	r2, [r8]
 801bd50:	605a      	strne	r2, [r3, #4]
 801bd52:	e7eb      	b.n	801bd2c <_malloc_r+0xa8>
 801bd54:	4623      	mov	r3, r4
 801bd56:	6864      	ldr	r4, [r4, #4]
 801bd58:	e7ae      	b.n	801bcb8 <_malloc_r+0x34>
 801bd5a:	463c      	mov	r4, r7
 801bd5c:	687f      	ldr	r7, [r7, #4]
 801bd5e:	e7b6      	b.n	801bcce <_malloc_r+0x4a>
 801bd60:	461a      	mov	r2, r3
 801bd62:	685b      	ldr	r3, [r3, #4]
 801bd64:	42a3      	cmp	r3, r4
 801bd66:	d1fb      	bne.n	801bd60 <_malloc_r+0xdc>
 801bd68:	2300      	movs	r3, #0
 801bd6a:	6053      	str	r3, [r2, #4]
 801bd6c:	e7de      	b.n	801bd2c <_malloc_r+0xa8>
 801bd6e:	230c      	movs	r3, #12
 801bd70:	6033      	str	r3, [r6, #0]
 801bd72:	4630      	mov	r0, r6
 801bd74:	f000 f80c 	bl	801bd90 <__malloc_unlock>
 801bd78:	e794      	b.n	801bca4 <_malloc_r+0x20>
 801bd7a:	6005      	str	r5, [r0, #0]
 801bd7c:	e7d6      	b.n	801bd2c <_malloc_r+0xa8>
 801bd7e:	bf00      	nop
 801bd80:	200036d0 	.word	0x200036d0

0801bd84 <__malloc_lock>:
 801bd84:	4801      	ldr	r0, [pc, #4]	@ (801bd8c <__malloc_lock+0x8>)
 801bd86:	f001 bade 	b.w	801d346 <__retarget_lock_acquire_recursive>
 801bd8a:	bf00      	nop
 801bd8c:	20003814 	.word	0x20003814

0801bd90 <__malloc_unlock>:
 801bd90:	4801      	ldr	r0, [pc, #4]	@ (801bd98 <__malloc_unlock+0x8>)
 801bd92:	f001 bad9 	b.w	801d348 <__retarget_lock_release_recursive>
 801bd96:	bf00      	nop
 801bd98:	20003814 	.word	0x20003814

0801bd9c <_strtol_l.constprop.0>:
 801bd9c:	2b24      	cmp	r3, #36	@ 0x24
 801bd9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bda2:	4686      	mov	lr, r0
 801bda4:	4690      	mov	r8, r2
 801bda6:	d801      	bhi.n	801bdac <_strtol_l.constprop.0+0x10>
 801bda8:	2b01      	cmp	r3, #1
 801bdaa:	d106      	bne.n	801bdba <_strtol_l.constprop.0+0x1e>
 801bdac:	f001 faa0 	bl	801d2f0 <__errno>
 801bdb0:	2316      	movs	r3, #22
 801bdb2:	6003      	str	r3, [r0, #0]
 801bdb4:	2000      	movs	r0, #0
 801bdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdba:	4834      	ldr	r0, [pc, #208]	@ (801be8c <_strtol_l.constprop.0+0xf0>)
 801bdbc:	460d      	mov	r5, r1
 801bdbe:	462a      	mov	r2, r5
 801bdc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bdc4:	5d06      	ldrb	r6, [r0, r4]
 801bdc6:	f016 0608 	ands.w	r6, r6, #8
 801bdca:	d1f8      	bne.n	801bdbe <_strtol_l.constprop.0+0x22>
 801bdcc:	2c2d      	cmp	r4, #45	@ 0x2d
 801bdce:	d12d      	bne.n	801be2c <_strtol_l.constprop.0+0x90>
 801bdd0:	782c      	ldrb	r4, [r5, #0]
 801bdd2:	2601      	movs	r6, #1
 801bdd4:	1c95      	adds	r5, r2, #2
 801bdd6:	f033 0210 	bics.w	r2, r3, #16
 801bdda:	d109      	bne.n	801bdf0 <_strtol_l.constprop.0+0x54>
 801bddc:	2c30      	cmp	r4, #48	@ 0x30
 801bdde:	d12a      	bne.n	801be36 <_strtol_l.constprop.0+0x9a>
 801bde0:	782a      	ldrb	r2, [r5, #0]
 801bde2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801bde6:	2a58      	cmp	r2, #88	@ 0x58
 801bde8:	d125      	bne.n	801be36 <_strtol_l.constprop.0+0x9a>
 801bdea:	786c      	ldrb	r4, [r5, #1]
 801bdec:	2310      	movs	r3, #16
 801bdee:	3502      	adds	r5, #2
 801bdf0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801bdf4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bdf8:	2200      	movs	r2, #0
 801bdfa:	fbbc f9f3 	udiv	r9, ip, r3
 801bdfe:	4610      	mov	r0, r2
 801be00:	fb03 ca19 	mls	sl, r3, r9, ip
 801be04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801be08:	2f09      	cmp	r7, #9
 801be0a:	d81b      	bhi.n	801be44 <_strtol_l.constprop.0+0xa8>
 801be0c:	463c      	mov	r4, r7
 801be0e:	42a3      	cmp	r3, r4
 801be10:	dd27      	ble.n	801be62 <_strtol_l.constprop.0+0xc6>
 801be12:	1c57      	adds	r7, r2, #1
 801be14:	d007      	beq.n	801be26 <_strtol_l.constprop.0+0x8a>
 801be16:	4581      	cmp	r9, r0
 801be18:	d320      	bcc.n	801be5c <_strtol_l.constprop.0+0xc0>
 801be1a:	d101      	bne.n	801be20 <_strtol_l.constprop.0+0x84>
 801be1c:	45a2      	cmp	sl, r4
 801be1e:	db1d      	blt.n	801be5c <_strtol_l.constprop.0+0xc0>
 801be20:	fb00 4003 	mla	r0, r0, r3, r4
 801be24:	2201      	movs	r2, #1
 801be26:	f815 4b01 	ldrb.w	r4, [r5], #1
 801be2a:	e7eb      	b.n	801be04 <_strtol_l.constprop.0+0x68>
 801be2c:	2c2b      	cmp	r4, #43	@ 0x2b
 801be2e:	bf04      	itt	eq
 801be30:	782c      	ldrbeq	r4, [r5, #0]
 801be32:	1c95      	addeq	r5, r2, #2
 801be34:	e7cf      	b.n	801bdd6 <_strtol_l.constprop.0+0x3a>
 801be36:	2b00      	cmp	r3, #0
 801be38:	d1da      	bne.n	801bdf0 <_strtol_l.constprop.0+0x54>
 801be3a:	2c30      	cmp	r4, #48	@ 0x30
 801be3c:	bf0c      	ite	eq
 801be3e:	2308      	moveq	r3, #8
 801be40:	230a      	movne	r3, #10
 801be42:	e7d5      	b.n	801bdf0 <_strtol_l.constprop.0+0x54>
 801be44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801be48:	2f19      	cmp	r7, #25
 801be4a:	d801      	bhi.n	801be50 <_strtol_l.constprop.0+0xb4>
 801be4c:	3c37      	subs	r4, #55	@ 0x37
 801be4e:	e7de      	b.n	801be0e <_strtol_l.constprop.0+0x72>
 801be50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801be54:	2f19      	cmp	r7, #25
 801be56:	d804      	bhi.n	801be62 <_strtol_l.constprop.0+0xc6>
 801be58:	3c57      	subs	r4, #87	@ 0x57
 801be5a:	e7d8      	b.n	801be0e <_strtol_l.constprop.0+0x72>
 801be5c:	f04f 32ff 	mov.w	r2, #4294967295
 801be60:	e7e1      	b.n	801be26 <_strtol_l.constprop.0+0x8a>
 801be62:	1c53      	adds	r3, r2, #1
 801be64:	d108      	bne.n	801be78 <_strtol_l.constprop.0+0xdc>
 801be66:	2322      	movs	r3, #34	@ 0x22
 801be68:	f8ce 3000 	str.w	r3, [lr]
 801be6c:	4660      	mov	r0, ip
 801be6e:	f1b8 0f00 	cmp.w	r8, #0
 801be72:	d0a0      	beq.n	801bdb6 <_strtol_l.constprop.0+0x1a>
 801be74:	1e69      	subs	r1, r5, #1
 801be76:	e006      	b.n	801be86 <_strtol_l.constprop.0+0xea>
 801be78:	b106      	cbz	r6, 801be7c <_strtol_l.constprop.0+0xe0>
 801be7a:	4240      	negs	r0, r0
 801be7c:	f1b8 0f00 	cmp.w	r8, #0
 801be80:	d099      	beq.n	801bdb6 <_strtol_l.constprop.0+0x1a>
 801be82:	2a00      	cmp	r2, #0
 801be84:	d1f6      	bne.n	801be74 <_strtol_l.constprop.0+0xd8>
 801be86:	f8c8 1000 	str.w	r1, [r8]
 801be8a:	e794      	b.n	801bdb6 <_strtol_l.constprop.0+0x1a>
 801be8c:	08022c6d 	.word	0x08022c6d

0801be90 <_strtol_r>:
 801be90:	f7ff bf84 	b.w	801bd9c <_strtol_l.constprop.0>

0801be94 <strtol>:
 801be94:	4613      	mov	r3, r2
 801be96:	460a      	mov	r2, r1
 801be98:	4601      	mov	r1, r0
 801be9a:	4802      	ldr	r0, [pc, #8]	@ (801bea4 <strtol+0x10>)
 801be9c:	6800      	ldr	r0, [r0, #0]
 801be9e:	f7ff bf7d 	b.w	801bd9c <_strtol_l.constprop.0>
 801bea2:	bf00      	nop
 801bea4:	20000174 	.word	0x20000174

0801bea8 <__cvt>:
 801bea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801beac:	ec57 6b10 	vmov	r6, r7, d0
 801beb0:	2f00      	cmp	r7, #0
 801beb2:	460c      	mov	r4, r1
 801beb4:	4619      	mov	r1, r3
 801beb6:	463b      	mov	r3, r7
 801beb8:	bfbb      	ittet	lt
 801beba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801bebe:	461f      	movlt	r7, r3
 801bec0:	2300      	movge	r3, #0
 801bec2:	232d      	movlt	r3, #45	@ 0x2d
 801bec4:	700b      	strb	r3, [r1, #0]
 801bec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bec8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801becc:	4691      	mov	r9, r2
 801bece:	f023 0820 	bic.w	r8, r3, #32
 801bed2:	bfbc      	itt	lt
 801bed4:	4632      	movlt	r2, r6
 801bed6:	4616      	movlt	r6, r2
 801bed8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bedc:	d005      	beq.n	801beea <__cvt+0x42>
 801bede:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801bee2:	d100      	bne.n	801bee6 <__cvt+0x3e>
 801bee4:	3401      	adds	r4, #1
 801bee6:	2102      	movs	r1, #2
 801bee8:	e000      	b.n	801beec <__cvt+0x44>
 801beea:	2103      	movs	r1, #3
 801beec:	ab03      	add	r3, sp, #12
 801beee:	9301      	str	r3, [sp, #4]
 801bef0:	ab02      	add	r3, sp, #8
 801bef2:	9300      	str	r3, [sp, #0]
 801bef4:	ec47 6b10 	vmov	d0, r6, r7
 801bef8:	4653      	mov	r3, sl
 801befa:	4622      	mov	r2, r4
 801befc:	f001 fae8 	bl	801d4d0 <_dtoa_r>
 801bf00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801bf04:	4605      	mov	r5, r0
 801bf06:	d119      	bne.n	801bf3c <__cvt+0x94>
 801bf08:	f019 0f01 	tst.w	r9, #1
 801bf0c:	d00e      	beq.n	801bf2c <__cvt+0x84>
 801bf0e:	eb00 0904 	add.w	r9, r0, r4
 801bf12:	2200      	movs	r2, #0
 801bf14:	2300      	movs	r3, #0
 801bf16:	4630      	mov	r0, r6
 801bf18:	4639      	mov	r1, r7
 801bf1a:	f7e4 fded 	bl	8000af8 <__aeabi_dcmpeq>
 801bf1e:	b108      	cbz	r0, 801bf24 <__cvt+0x7c>
 801bf20:	f8cd 900c 	str.w	r9, [sp, #12]
 801bf24:	2230      	movs	r2, #48	@ 0x30
 801bf26:	9b03      	ldr	r3, [sp, #12]
 801bf28:	454b      	cmp	r3, r9
 801bf2a:	d31e      	bcc.n	801bf6a <__cvt+0xc2>
 801bf2c:	9b03      	ldr	r3, [sp, #12]
 801bf2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bf30:	1b5b      	subs	r3, r3, r5
 801bf32:	4628      	mov	r0, r5
 801bf34:	6013      	str	r3, [r2, #0]
 801bf36:	b004      	add	sp, #16
 801bf38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bf40:	eb00 0904 	add.w	r9, r0, r4
 801bf44:	d1e5      	bne.n	801bf12 <__cvt+0x6a>
 801bf46:	7803      	ldrb	r3, [r0, #0]
 801bf48:	2b30      	cmp	r3, #48	@ 0x30
 801bf4a:	d10a      	bne.n	801bf62 <__cvt+0xba>
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	2300      	movs	r3, #0
 801bf50:	4630      	mov	r0, r6
 801bf52:	4639      	mov	r1, r7
 801bf54:	f7e4 fdd0 	bl	8000af8 <__aeabi_dcmpeq>
 801bf58:	b918      	cbnz	r0, 801bf62 <__cvt+0xba>
 801bf5a:	f1c4 0401 	rsb	r4, r4, #1
 801bf5e:	f8ca 4000 	str.w	r4, [sl]
 801bf62:	f8da 3000 	ldr.w	r3, [sl]
 801bf66:	4499      	add	r9, r3
 801bf68:	e7d3      	b.n	801bf12 <__cvt+0x6a>
 801bf6a:	1c59      	adds	r1, r3, #1
 801bf6c:	9103      	str	r1, [sp, #12]
 801bf6e:	701a      	strb	r2, [r3, #0]
 801bf70:	e7d9      	b.n	801bf26 <__cvt+0x7e>

0801bf72 <__exponent>:
 801bf72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bf74:	2900      	cmp	r1, #0
 801bf76:	bfba      	itte	lt
 801bf78:	4249      	neglt	r1, r1
 801bf7a:	232d      	movlt	r3, #45	@ 0x2d
 801bf7c:	232b      	movge	r3, #43	@ 0x2b
 801bf7e:	2909      	cmp	r1, #9
 801bf80:	7002      	strb	r2, [r0, #0]
 801bf82:	7043      	strb	r3, [r0, #1]
 801bf84:	dd29      	ble.n	801bfda <__exponent+0x68>
 801bf86:	f10d 0307 	add.w	r3, sp, #7
 801bf8a:	461d      	mov	r5, r3
 801bf8c:	270a      	movs	r7, #10
 801bf8e:	461a      	mov	r2, r3
 801bf90:	fbb1 f6f7 	udiv	r6, r1, r7
 801bf94:	fb07 1416 	mls	r4, r7, r6, r1
 801bf98:	3430      	adds	r4, #48	@ 0x30
 801bf9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801bf9e:	460c      	mov	r4, r1
 801bfa0:	2c63      	cmp	r4, #99	@ 0x63
 801bfa2:	f103 33ff 	add.w	r3, r3, #4294967295
 801bfa6:	4631      	mov	r1, r6
 801bfa8:	dcf1      	bgt.n	801bf8e <__exponent+0x1c>
 801bfaa:	3130      	adds	r1, #48	@ 0x30
 801bfac:	1e94      	subs	r4, r2, #2
 801bfae:	f803 1c01 	strb.w	r1, [r3, #-1]
 801bfb2:	1c41      	adds	r1, r0, #1
 801bfb4:	4623      	mov	r3, r4
 801bfb6:	42ab      	cmp	r3, r5
 801bfb8:	d30a      	bcc.n	801bfd0 <__exponent+0x5e>
 801bfba:	f10d 0309 	add.w	r3, sp, #9
 801bfbe:	1a9b      	subs	r3, r3, r2
 801bfc0:	42ac      	cmp	r4, r5
 801bfc2:	bf88      	it	hi
 801bfc4:	2300      	movhi	r3, #0
 801bfc6:	3302      	adds	r3, #2
 801bfc8:	4403      	add	r3, r0
 801bfca:	1a18      	subs	r0, r3, r0
 801bfcc:	b003      	add	sp, #12
 801bfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfd0:	f813 6b01 	ldrb.w	r6, [r3], #1
 801bfd4:	f801 6f01 	strb.w	r6, [r1, #1]!
 801bfd8:	e7ed      	b.n	801bfb6 <__exponent+0x44>
 801bfda:	2330      	movs	r3, #48	@ 0x30
 801bfdc:	3130      	adds	r1, #48	@ 0x30
 801bfde:	7083      	strb	r3, [r0, #2]
 801bfe0:	70c1      	strb	r1, [r0, #3]
 801bfe2:	1d03      	adds	r3, r0, #4
 801bfe4:	e7f1      	b.n	801bfca <__exponent+0x58>
	...

0801bfe8 <_printf_float>:
 801bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfec:	b08d      	sub	sp, #52	@ 0x34
 801bfee:	460c      	mov	r4, r1
 801bff0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801bff4:	4616      	mov	r6, r2
 801bff6:	461f      	mov	r7, r3
 801bff8:	4605      	mov	r5, r0
 801bffa:	f001 f91f 	bl	801d23c <_localeconv_r>
 801bffe:	6803      	ldr	r3, [r0, #0]
 801c000:	9304      	str	r3, [sp, #16]
 801c002:	4618      	mov	r0, r3
 801c004:	f7e4 f94c 	bl	80002a0 <strlen>
 801c008:	2300      	movs	r3, #0
 801c00a:	930a      	str	r3, [sp, #40]	@ 0x28
 801c00c:	f8d8 3000 	ldr.w	r3, [r8]
 801c010:	9005      	str	r0, [sp, #20]
 801c012:	3307      	adds	r3, #7
 801c014:	f023 0307 	bic.w	r3, r3, #7
 801c018:	f103 0208 	add.w	r2, r3, #8
 801c01c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c020:	f8d4 b000 	ldr.w	fp, [r4]
 801c024:	f8c8 2000 	str.w	r2, [r8]
 801c028:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c02c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c030:	9307      	str	r3, [sp, #28]
 801c032:	f8cd 8018 	str.w	r8, [sp, #24]
 801c036:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c03a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c03e:	4b9c      	ldr	r3, [pc, #624]	@ (801c2b0 <_printf_float+0x2c8>)
 801c040:	f04f 32ff 	mov.w	r2, #4294967295
 801c044:	f7e4 fd8a 	bl	8000b5c <__aeabi_dcmpun>
 801c048:	bb70      	cbnz	r0, 801c0a8 <_printf_float+0xc0>
 801c04a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c04e:	4b98      	ldr	r3, [pc, #608]	@ (801c2b0 <_printf_float+0x2c8>)
 801c050:	f04f 32ff 	mov.w	r2, #4294967295
 801c054:	f7e4 fd64 	bl	8000b20 <__aeabi_dcmple>
 801c058:	bb30      	cbnz	r0, 801c0a8 <_printf_float+0xc0>
 801c05a:	2200      	movs	r2, #0
 801c05c:	2300      	movs	r3, #0
 801c05e:	4640      	mov	r0, r8
 801c060:	4649      	mov	r1, r9
 801c062:	f7e4 fd53 	bl	8000b0c <__aeabi_dcmplt>
 801c066:	b110      	cbz	r0, 801c06e <_printf_float+0x86>
 801c068:	232d      	movs	r3, #45	@ 0x2d
 801c06a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c06e:	4a91      	ldr	r2, [pc, #580]	@ (801c2b4 <_printf_float+0x2cc>)
 801c070:	4b91      	ldr	r3, [pc, #580]	@ (801c2b8 <_printf_float+0x2d0>)
 801c072:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c076:	bf94      	ite	ls
 801c078:	4690      	movls	r8, r2
 801c07a:	4698      	movhi	r8, r3
 801c07c:	2303      	movs	r3, #3
 801c07e:	6123      	str	r3, [r4, #16]
 801c080:	f02b 0304 	bic.w	r3, fp, #4
 801c084:	6023      	str	r3, [r4, #0]
 801c086:	f04f 0900 	mov.w	r9, #0
 801c08a:	9700      	str	r7, [sp, #0]
 801c08c:	4633      	mov	r3, r6
 801c08e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801c090:	4621      	mov	r1, r4
 801c092:	4628      	mov	r0, r5
 801c094:	f000 f9d2 	bl	801c43c <_printf_common>
 801c098:	3001      	adds	r0, #1
 801c09a:	f040 808d 	bne.w	801c1b8 <_printf_float+0x1d0>
 801c09e:	f04f 30ff 	mov.w	r0, #4294967295
 801c0a2:	b00d      	add	sp, #52	@ 0x34
 801c0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0a8:	4642      	mov	r2, r8
 801c0aa:	464b      	mov	r3, r9
 801c0ac:	4640      	mov	r0, r8
 801c0ae:	4649      	mov	r1, r9
 801c0b0:	f7e4 fd54 	bl	8000b5c <__aeabi_dcmpun>
 801c0b4:	b140      	cbz	r0, 801c0c8 <_printf_float+0xe0>
 801c0b6:	464b      	mov	r3, r9
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	bfbc      	itt	lt
 801c0bc:	232d      	movlt	r3, #45	@ 0x2d
 801c0be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c0c2:	4a7e      	ldr	r2, [pc, #504]	@ (801c2bc <_printf_float+0x2d4>)
 801c0c4:	4b7e      	ldr	r3, [pc, #504]	@ (801c2c0 <_printf_float+0x2d8>)
 801c0c6:	e7d4      	b.n	801c072 <_printf_float+0x8a>
 801c0c8:	6863      	ldr	r3, [r4, #4]
 801c0ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801c0ce:	9206      	str	r2, [sp, #24]
 801c0d0:	1c5a      	adds	r2, r3, #1
 801c0d2:	d13b      	bne.n	801c14c <_printf_float+0x164>
 801c0d4:	2306      	movs	r3, #6
 801c0d6:	6063      	str	r3, [r4, #4]
 801c0d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801c0dc:	2300      	movs	r3, #0
 801c0de:	6022      	str	r2, [r4, #0]
 801c0e0:	9303      	str	r3, [sp, #12]
 801c0e2:	ab0a      	add	r3, sp, #40	@ 0x28
 801c0e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c0e8:	ab09      	add	r3, sp, #36	@ 0x24
 801c0ea:	9300      	str	r3, [sp, #0]
 801c0ec:	6861      	ldr	r1, [r4, #4]
 801c0ee:	ec49 8b10 	vmov	d0, r8, r9
 801c0f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801c0f6:	4628      	mov	r0, r5
 801c0f8:	f7ff fed6 	bl	801bea8 <__cvt>
 801c0fc:	9b06      	ldr	r3, [sp, #24]
 801c0fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c100:	2b47      	cmp	r3, #71	@ 0x47
 801c102:	4680      	mov	r8, r0
 801c104:	d129      	bne.n	801c15a <_printf_float+0x172>
 801c106:	1cc8      	adds	r0, r1, #3
 801c108:	db02      	blt.n	801c110 <_printf_float+0x128>
 801c10a:	6863      	ldr	r3, [r4, #4]
 801c10c:	4299      	cmp	r1, r3
 801c10e:	dd41      	ble.n	801c194 <_printf_float+0x1ac>
 801c110:	f1aa 0a02 	sub.w	sl, sl, #2
 801c114:	fa5f fa8a 	uxtb.w	sl, sl
 801c118:	3901      	subs	r1, #1
 801c11a:	4652      	mov	r2, sl
 801c11c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c120:	9109      	str	r1, [sp, #36]	@ 0x24
 801c122:	f7ff ff26 	bl	801bf72 <__exponent>
 801c126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c128:	1813      	adds	r3, r2, r0
 801c12a:	2a01      	cmp	r2, #1
 801c12c:	4681      	mov	r9, r0
 801c12e:	6123      	str	r3, [r4, #16]
 801c130:	dc02      	bgt.n	801c138 <_printf_float+0x150>
 801c132:	6822      	ldr	r2, [r4, #0]
 801c134:	07d2      	lsls	r2, r2, #31
 801c136:	d501      	bpl.n	801c13c <_printf_float+0x154>
 801c138:	3301      	adds	r3, #1
 801c13a:	6123      	str	r3, [r4, #16]
 801c13c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801c140:	2b00      	cmp	r3, #0
 801c142:	d0a2      	beq.n	801c08a <_printf_float+0xa2>
 801c144:	232d      	movs	r3, #45	@ 0x2d
 801c146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c14a:	e79e      	b.n	801c08a <_printf_float+0xa2>
 801c14c:	9a06      	ldr	r2, [sp, #24]
 801c14e:	2a47      	cmp	r2, #71	@ 0x47
 801c150:	d1c2      	bne.n	801c0d8 <_printf_float+0xf0>
 801c152:	2b00      	cmp	r3, #0
 801c154:	d1c0      	bne.n	801c0d8 <_printf_float+0xf0>
 801c156:	2301      	movs	r3, #1
 801c158:	e7bd      	b.n	801c0d6 <_printf_float+0xee>
 801c15a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c15e:	d9db      	bls.n	801c118 <_printf_float+0x130>
 801c160:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c164:	d118      	bne.n	801c198 <_printf_float+0x1b0>
 801c166:	2900      	cmp	r1, #0
 801c168:	6863      	ldr	r3, [r4, #4]
 801c16a:	dd0b      	ble.n	801c184 <_printf_float+0x19c>
 801c16c:	6121      	str	r1, [r4, #16]
 801c16e:	b913      	cbnz	r3, 801c176 <_printf_float+0x18e>
 801c170:	6822      	ldr	r2, [r4, #0]
 801c172:	07d0      	lsls	r0, r2, #31
 801c174:	d502      	bpl.n	801c17c <_printf_float+0x194>
 801c176:	3301      	adds	r3, #1
 801c178:	440b      	add	r3, r1
 801c17a:	6123      	str	r3, [r4, #16]
 801c17c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c17e:	f04f 0900 	mov.w	r9, #0
 801c182:	e7db      	b.n	801c13c <_printf_float+0x154>
 801c184:	b913      	cbnz	r3, 801c18c <_printf_float+0x1a4>
 801c186:	6822      	ldr	r2, [r4, #0]
 801c188:	07d2      	lsls	r2, r2, #31
 801c18a:	d501      	bpl.n	801c190 <_printf_float+0x1a8>
 801c18c:	3302      	adds	r3, #2
 801c18e:	e7f4      	b.n	801c17a <_printf_float+0x192>
 801c190:	2301      	movs	r3, #1
 801c192:	e7f2      	b.n	801c17a <_printf_float+0x192>
 801c194:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c19a:	4299      	cmp	r1, r3
 801c19c:	db05      	blt.n	801c1aa <_printf_float+0x1c2>
 801c19e:	6823      	ldr	r3, [r4, #0]
 801c1a0:	6121      	str	r1, [r4, #16]
 801c1a2:	07d8      	lsls	r0, r3, #31
 801c1a4:	d5ea      	bpl.n	801c17c <_printf_float+0x194>
 801c1a6:	1c4b      	adds	r3, r1, #1
 801c1a8:	e7e7      	b.n	801c17a <_printf_float+0x192>
 801c1aa:	2900      	cmp	r1, #0
 801c1ac:	bfd4      	ite	le
 801c1ae:	f1c1 0202 	rsble	r2, r1, #2
 801c1b2:	2201      	movgt	r2, #1
 801c1b4:	4413      	add	r3, r2
 801c1b6:	e7e0      	b.n	801c17a <_printf_float+0x192>
 801c1b8:	6823      	ldr	r3, [r4, #0]
 801c1ba:	055a      	lsls	r2, r3, #21
 801c1bc:	d407      	bmi.n	801c1ce <_printf_float+0x1e6>
 801c1be:	6923      	ldr	r3, [r4, #16]
 801c1c0:	4642      	mov	r2, r8
 801c1c2:	4631      	mov	r1, r6
 801c1c4:	4628      	mov	r0, r5
 801c1c6:	47b8      	blx	r7
 801c1c8:	3001      	adds	r0, #1
 801c1ca:	d12b      	bne.n	801c224 <_printf_float+0x23c>
 801c1cc:	e767      	b.n	801c09e <_printf_float+0xb6>
 801c1ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c1d2:	f240 80dd 	bls.w	801c390 <_printf_float+0x3a8>
 801c1d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c1da:	2200      	movs	r2, #0
 801c1dc:	2300      	movs	r3, #0
 801c1de:	f7e4 fc8b 	bl	8000af8 <__aeabi_dcmpeq>
 801c1e2:	2800      	cmp	r0, #0
 801c1e4:	d033      	beq.n	801c24e <_printf_float+0x266>
 801c1e6:	4a37      	ldr	r2, [pc, #220]	@ (801c2c4 <_printf_float+0x2dc>)
 801c1e8:	2301      	movs	r3, #1
 801c1ea:	4631      	mov	r1, r6
 801c1ec:	4628      	mov	r0, r5
 801c1ee:	47b8      	blx	r7
 801c1f0:	3001      	adds	r0, #1
 801c1f2:	f43f af54 	beq.w	801c09e <_printf_float+0xb6>
 801c1f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c1fa:	4543      	cmp	r3, r8
 801c1fc:	db02      	blt.n	801c204 <_printf_float+0x21c>
 801c1fe:	6823      	ldr	r3, [r4, #0]
 801c200:	07d8      	lsls	r0, r3, #31
 801c202:	d50f      	bpl.n	801c224 <_printf_float+0x23c>
 801c204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c208:	4631      	mov	r1, r6
 801c20a:	4628      	mov	r0, r5
 801c20c:	47b8      	blx	r7
 801c20e:	3001      	adds	r0, #1
 801c210:	f43f af45 	beq.w	801c09e <_printf_float+0xb6>
 801c214:	f04f 0900 	mov.w	r9, #0
 801c218:	f108 38ff 	add.w	r8, r8, #4294967295
 801c21c:	f104 0a1a 	add.w	sl, r4, #26
 801c220:	45c8      	cmp	r8, r9
 801c222:	dc09      	bgt.n	801c238 <_printf_float+0x250>
 801c224:	6823      	ldr	r3, [r4, #0]
 801c226:	079b      	lsls	r3, r3, #30
 801c228:	f100 8103 	bmi.w	801c432 <_printf_float+0x44a>
 801c22c:	68e0      	ldr	r0, [r4, #12]
 801c22e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c230:	4298      	cmp	r0, r3
 801c232:	bfb8      	it	lt
 801c234:	4618      	movlt	r0, r3
 801c236:	e734      	b.n	801c0a2 <_printf_float+0xba>
 801c238:	2301      	movs	r3, #1
 801c23a:	4652      	mov	r2, sl
 801c23c:	4631      	mov	r1, r6
 801c23e:	4628      	mov	r0, r5
 801c240:	47b8      	blx	r7
 801c242:	3001      	adds	r0, #1
 801c244:	f43f af2b 	beq.w	801c09e <_printf_float+0xb6>
 801c248:	f109 0901 	add.w	r9, r9, #1
 801c24c:	e7e8      	b.n	801c220 <_printf_float+0x238>
 801c24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c250:	2b00      	cmp	r3, #0
 801c252:	dc39      	bgt.n	801c2c8 <_printf_float+0x2e0>
 801c254:	4a1b      	ldr	r2, [pc, #108]	@ (801c2c4 <_printf_float+0x2dc>)
 801c256:	2301      	movs	r3, #1
 801c258:	4631      	mov	r1, r6
 801c25a:	4628      	mov	r0, r5
 801c25c:	47b8      	blx	r7
 801c25e:	3001      	adds	r0, #1
 801c260:	f43f af1d 	beq.w	801c09e <_printf_float+0xb6>
 801c264:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801c268:	ea59 0303 	orrs.w	r3, r9, r3
 801c26c:	d102      	bne.n	801c274 <_printf_float+0x28c>
 801c26e:	6823      	ldr	r3, [r4, #0]
 801c270:	07d9      	lsls	r1, r3, #31
 801c272:	d5d7      	bpl.n	801c224 <_printf_float+0x23c>
 801c274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c278:	4631      	mov	r1, r6
 801c27a:	4628      	mov	r0, r5
 801c27c:	47b8      	blx	r7
 801c27e:	3001      	adds	r0, #1
 801c280:	f43f af0d 	beq.w	801c09e <_printf_float+0xb6>
 801c284:	f04f 0a00 	mov.w	sl, #0
 801c288:	f104 0b1a 	add.w	fp, r4, #26
 801c28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c28e:	425b      	negs	r3, r3
 801c290:	4553      	cmp	r3, sl
 801c292:	dc01      	bgt.n	801c298 <_printf_float+0x2b0>
 801c294:	464b      	mov	r3, r9
 801c296:	e793      	b.n	801c1c0 <_printf_float+0x1d8>
 801c298:	2301      	movs	r3, #1
 801c29a:	465a      	mov	r2, fp
 801c29c:	4631      	mov	r1, r6
 801c29e:	4628      	mov	r0, r5
 801c2a0:	47b8      	blx	r7
 801c2a2:	3001      	adds	r0, #1
 801c2a4:	f43f aefb 	beq.w	801c09e <_printf_float+0xb6>
 801c2a8:	f10a 0a01 	add.w	sl, sl, #1
 801c2ac:	e7ee      	b.n	801c28c <_printf_float+0x2a4>
 801c2ae:	bf00      	nop
 801c2b0:	7fefffff 	.word	0x7fefffff
 801c2b4:	08022d6d 	.word	0x08022d6d
 801c2b8:	08022d71 	.word	0x08022d71
 801c2bc:	08022d75 	.word	0x08022d75
 801c2c0:	08022d79 	.word	0x08022d79
 801c2c4:	08022d7d 	.word	0x08022d7d
 801c2c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c2ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c2ce:	4553      	cmp	r3, sl
 801c2d0:	bfa8      	it	ge
 801c2d2:	4653      	movge	r3, sl
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	4699      	mov	r9, r3
 801c2d8:	dc36      	bgt.n	801c348 <_printf_float+0x360>
 801c2da:	f04f 0b00 	mov.w	fp, #0
 801c2de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c2e2:	f104 021a 	add.w	r2, r4, #26
 801c2e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c2e8:	9306      	str	r3, [sp, #24]
 801c2ea:	eba3 0309 	sub.w	r3, r3, r9
 801c2ee:	455b      	cmp	r3, fp
 801c2f0:	dc31      	bgt.n	801c356 <_printf_float+0x36e>
 801c2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2f4:	459a      	cmp	sl, r3
 801c2f6:	dc3a      	bgt.n	801c36e <_printf_float+0x386>
 801c2f8:	6823      	ldr	r3, [r4, #0]
 801c2fa:	07da      	lsls	r2, r3, #31
 801c2fc:	d437      	bmi.n	801c36e <_printf_float+0x386>
 801c2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c300:	ebaa 0903 	sub.w	r9, sl, r3
 801c304:	9b06      	ldr	r3, [sp, #24]
 801c306:	ebaa 0303 	sub.w	r3, sl, r3
 801c30a:	4599      	cmp	r9, r3
 801c30c:	bfa8      	it	ge
 801c30e:	4699      	movge	r9, r3
 801c310:	f1b9 0f00 	cmp.w	r9, #0
 801c314:	dc33      	bgt.n	801c37e <_printf_float+0x396>
 801c316:	f04f 0800 	mov.w	r8, #0
 801c31a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c31e:	f104 0b1a 	add.w	fp, r4, #26
 801c322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c324:	ebaa 0303 	sub.w	r3, sl, r3
 801c328:	eba3 0309 	sub.w	r3, r3, r9
 801c32c:	4543      	cmp	r3, r8
 801c32e:	f77f af79 	ble.w	801c224 <_printf_float+0x23c>
 801c332:	2301      	movs	r3, #1
 801c334:	465a      	mov	r2, fp
 801c336:	4631      	mov	r1, r6
 801c338:	4628      	mov	r0, r5
 801c33a:	47b8      	blx	r7
 801c33c:	3001      	adds	r0, #1
 801c33e:	f43f aeae 	beq.w	801c09e <_printf_float+0xb6>
 801c342:	f108 0801 	add.w	r8, r8, #1
 801c346:	e7ec      	b.n	801c322 <_printf_float+0x33a>
 801c348:	4642      	mov	r2, r8
 801c34a:	4631      	mov	r1, r6
 801c34c:	4628      	mov	r0, r5
 801c34e:	47b8      	blx	r7
 801c350:	3001      	adds	r0, #1
 801c352:	d1c2      	bne.n	801c2da <_printf_float+0x2f2>
 801c354:	e6a3      	b.n	801c09e <_printf_float+0xb6>
 801c356:	2301      	movs	r3, #1
 801c358:	4631      	mov	r1, r6
 801c35a:	4628      	mov	r0, r5
 801c35c:	9206      	str	r2, [sp, #24]
 801c35e:	47b8      	blx	r7
 801c360:	3001      	adds	r0, #1
 801c362:	f43f ae9c 	beq.w	801c09e <_printf_float+0xb6>
 801c366:	9a06      	ldr	r2, [sp, #24]
 801c368:	f10b 0b01 	add.w	fp, fp, #1
 801c36c:	e7bb      	b.n	801c2e6 <_printf_float+0x2fe>
 801c36e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c372:	4631      	mov	r1, r6
 801c374:	4628      	mov	r0, r5
 801c376:	47b8      	blx	r7
 801c378:	3001      	adds	r0, #1
 801c37a:	d1c0      	bne.n	801c2fe <_printf_float+0x316>
 801c37c:	e68f      	b.n	801c09e <_printf_float+0xb6>
 801c37e:	9a06      	ldr	r2, [sp, #24]
 801c380:	464b      	mov	r3, r9
 801c382:	4442      	add	r2, r8
 801c384:	4631      	mov	r1, r6
 801c386:	4628      	mov	r0, r5
 801c388:	47b8      	blx	r7
 801c38a:	3001      	adds	r0, #1
 801c38c:	d1c3      	bne.n	801c316 <_printf_float+0x32e>
 801c38e:	e686      	b.n	801c09e <_printf_float+0xb6>
 801c390:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c394:	f1ba 0f01 	cmp.w	sl, #1
 801c398:	dc01      	bgt.n	801c39e <_printf_float+0x3b6>
 801c39a:	07db      	lsls	r3, r3, #31
 801c39c:	d536      	bpl.n	801c40c <_printf_float+0x424>
 801c39e:	2301      	movs	r3, #1
 801c3a0:	4642      	mov	r2, r8
 801c3a2:	4631      	mov	r1, r6
 801c3a4:	4628      	mov	r0, r5
 801c3a6:	47b8      	blx	r7
 801c3a8:	3001      	adds	r0, #1
 801c3aa:	f43f ae78 	beq.w	801c09e <_printf_float+0xb6>
 801c3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c3b2:	4631      	mov	r1, r6
 801c3b4:	4628      	mov	r0, r5
 801c3b6:	47b8      	blx	r7
 801c3b8:	3001      	adds	r0, #1
 801c3ba:	f43f ae70 	beq.w	801c09e <_printf_float+0xb6>
 801c3be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c3ca:	f7e4 fb95 	bl	8000af8 <__aeabi_dcmpeq>
 801c3ce:	b9c0      	cbnz	r0, 801c402 <_printf_float+0x41a>
 801c3d0:	4653      	mov	r3, sl
 801c3d2:	f108 0201 	add.w	r2, r8, #1
 801c3d6:	4631      	mov	r1, r6
 801c3d8:	4628      	mov	r0, r5
 801c3da:	47b8      	blx	r7
 801c3dc:	3001      	adds	r0, #1
 801c3de:	d10c      	bne.n	801c3fa <_printf_float+0x412>
 801c3e0:	e65d      	b.n	801c09e <_printf_float+0xb6>
 801c3e2:	2301      	movs	r3, #1
 801c3e4:	465a      	mov	r2, fp
 801c3e6:	4631      	mov	r1, r6
 801c3e8:	4628      	mov	r0, r5
 801c3ea:	47b8      	blx	r7
 801c3ec:	3001      	adds	r0, #1
 801c3ee:	f43f ae56 	beq.w	801c09e <_printf_float+0xb6>
 801c3f2:	f108 0801 	add.w	r8, r8, #1
 801c3f6:	45d0      	cmp	r8, sl
 801c3f8:	dbf3      	blt.n	801c3e2 <_printf_float+0x3fa>
 801c3fa:	464b      	mov	r3, r9
 801c3fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c400:	e6df      	b.n	801c1c2 <_printf_float+0x1da>
 801c402:	f04f 0800 	mov.w	r8, #0
 801c406:	f104 0b1a 	add.w	fp, r4, #26
 801c40a:	e7f4      	b.n	801c3f6 <_printf_float+0x40e>
 801c40c:	2301      	movs	r3, #1
 801c40e:	4642      	mov	r2, r8
 801c410:	e7e1      	b.n	801c3d6 <_printf_float+0x3ee>
 801c412:	2301      	movs	r3, #1
 801c414:	464a      	mov	r2, r9
 801c416:	4631      	mov	r1, r6
 801c418:	4628      	mov	r0, r5
 801c41a:	47b8      	blx	r7
 801c41c:	3001      	adds	r0, #1
 801c41e:	f43f ae3e 	beq.w	801c09e <_printf_float+0xb6>
 801c422:	f108 0801 	add.w	r8, r8, #1
 801c426:	68e3      	ldr	r3, [r4, #12]
 801c428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c42a:	1a5b      	subs	r3, r3, r1
 801c42c:	4543      	cmp	r3, r8
 801c42e:	dcf0      	bgt.n	801c412 <_printf_float+0x42a>
 801c430:	e6fc      	b.n	801c22c <_printf_float+0x244>
 801c432:	f04f 0800 	mov.w	r8, #0
 801c436:	f104 0919 	add.w	r9, r4, #25
 801c43a:	e7f4      	b.n	801c426 <_printf_float+0x43e>

0801c43c <_printf_common>:
 801c43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c440:	4616      	mov	r6, r2
 801c442:	4698      	mov	r8, r3
 801c444:	688a      	ldr	r2, [r1, #8]
 801c446:	690b      	ldr	r3, [r1, #16]
 801c448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c44c:	4293      	cmp	r3, r2
 801c44e:	bfb8      	it	lt
 801c450:	4613      	movlt	r3, r2
 801c452:	6033      	str	r3, [r6, #0]
 801c454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c458:	4607      	mov	r7, r0
 801c45a:	460c      	mov	r4, r1
 801c45c:	b10a      	cbz	r2, 801c462 <_printf_common+0x26>
 801c45e:	3301      	adds	r3, #1
 801c460:	6033      	str	r3, [r6, #0]
 801c462:	6823      	ldr	r3, [r4, #0]
 801c464:	0699      	lsls	r1, r3, #26
 801c466:	bf42      	ittt	mi
 801c468:	6833      	ldrmi	r3, [r6, #0]
 801c46a:	3302      	addmi	r3, #2
 801c46c:	6033      	strmi	r3, [r6, #0]
 801c46e:	6825      	ldr	r5, [r4, #0]
 801c470:	f015 0506 	ands.w	r5, r5, #6
 801c474:	d106      	bne.n	801c484 <_printf_common+0x48>
 801c476:	f104 0a19 	add.w	sl, r4, #25
 801c47a:	68e3      	ldr	r3, [r4, #12]
 801c47c:	6832      	ldr	r2, [r6, #0]
 801c47e:	1a9b      	subs	r3, r3, r2
 801c480:	42ab      	cmp	r3, r5
 801c482:	dc26      	bgt.n	801c4d2 <_printf_common+0x96>
 801c484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c488:	6822      	ldr	r2, [r4, #0]
 801c48a:	3b00      	subs	r3, #0
 801c48c:	bf18      	it	ne
 801c48e:	2301      	movne	r3, #1
 801c490:	0692      	lsls	r2, r2, #26
 801c492:	d42b      	bmi.n	801c4ec <_printf_common+0xb0>
 801c494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c498:	4641      	mov	r1, r8
 801c49a:	4638      	mov	r0, r7
 801c49c:	47c8      	blx	r9
 801c49e:	3001      	adds	r0, #1
 801c4a0:	d01e      	beq.n	801c4e0 <_printf_common+0xa4>
 801c4a2:	6823      	ldr	r3, [r4, #0]
 801c4a4:	6922      	ldr	r2, [r4, #16]
 801c4a6:	f003 0306 	and.w	r3, r3, #6
 801c4aa:	2b04      	cmp	r3, #4
 801c4ac:	bf02      	ittt	eq
 801c4ae:	68e5      	ldreq	r5, [r4, #12]
 801c4b0:	6833      	ldreq	r3, [r6, #0]
 801c4b2:	1aed      	subeq	r5, r5, r3
 801c4b4:	68a3      	ldr	r3, [r4, #8]
 801c4b6:	bf0c      	ite	eq
 801c4b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c4bc:	2500      	movne	r5, #0
 801c4be:	4293      	cmp	r3, r2
 801c4c0:	bfc4      	itt	gt
 801c4c2:	1a9b      	subgt	r3, r3, r2
 801c4c4:	18ed      	addgt	r5, r5, r3
 801c4c6:	2600      	movs	r6, #0
 801c4c8:	341a      	adds	r4, #26
 801c4ca:	42b5      	cmp	r5, r6
 801c4cc:	d11a      	bne.n	801c504 <_printf_common+0xc8>
 801c4ce:	2000      	movs	r0, #0
 801c4d0:	e008      	b.n	801c4e4 <_printf_common+0xa8>
 801c4d2:	2301      	movs	r3, #1
 801c4d4:	4652      	mov	r2, sl
 801c4d6:	4641      	mov	r1, r8
 801c4d8:	4638      	mov	r0, r7
 801c4da:	47c8      	blx	r9
 801c4dc:	3001      	adds	r0, #1
 801c4de:	d103      	bne.n	801c4e8 <_printf_common+0xac>
 801c4e0:	f04f 30ff 	mov.w	r0, #4294967295
 801c4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4e8:	3501      	adds	r5, #1
 801c4ea:	e7c6      	b.n	801c47a <_printf_common+0x3e>
 801c4ec:	18e1      	adds	r1, r4, r3
 801c4ee:	1c5a      	adds	r2, r3, #1
 801c4f0:	2030      	movs	r0, #48	@ 0x30
 801c4f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c4f6:	4422      	add	r2, r4
 801c4f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c4fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c500:	3302      	adds	r3, #2
 801c502:	e7c7      	b.n	801c494 <_printf_common+0x58>
 801c504:	2301      	movs	r3, #1
 801c506:	4622      	mov	r2, r4
 801c508:	4641      	mov	r1, r8
 801c50a:	4638      	mov	r0, r7
 801c50c:	47c8      	blx	r9
 801c50e:	3001      	adds	r0, #1
 801c510:	d0e6      	beq.n	801c4e0 <_printf_common+0xa4>
 801c512:	3601      	adds	r6, #1
 801c514:	e7d9      	b.n	801c4ca <_printf_common+0x8e>
	...

0801c518 <_printf_i>:
 801c518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c51c:	7e0f      	ldrb	r7, [r1, #24]
 801c51e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c520:	2f78      	cmp	r7, #120	@ 0x78
 801c522:	4691      	mov	r9, r2
 801c524:	4680      	mov	r8, r0
 801c526:	460c      	mov	r4, r1
 801c528:	469a      	mov	sl, r3
 801c52a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c52e:	d807      	bhi.n	801c540 <_printf_i+0x28>
 801c530:	2f62      	cmp	r7, #98	@ 0x62
 801c532:	d80a      	bhi.n	801c54a <_printf_i+0x32>
 801c534:	2f00      	cmp	r7, #0
 801c536:	f000 80d2 	beq.w	801c6de <_printf_i+0x1c6>
 801c53a:	2f58      	cmp	r7, #88	@ 0x58
 801c53c:	f000 80b9 	beq.w	801c6b2 <_printf_i+0x19a>
 801c540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c548:	e03a      	b.n	801c5c0 <_printf_i+0xa8>
 801c54a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c54e:	2b15      	cmp	r3, #21
 801c550:	d8f6      	bhi.n	801c540 <_printf_i+0x28>
 801c552:	a101      	add	r1, pc, #4	@ (adr r1, 801c558 <_printf_i+0x40>)
 801c554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c558:	0801c5b1 	.word	0x0801c5b1
 801c55c:	0801c5c5 	.word	0x0801c5c5
 801c560:	0801c541 	.word	0x0801c541
 801c564:	0801c541 	.word	0x0801c541
 801c568:	0801c541 	.word	0x0801c541
 801c56c:	0801c541 	.word	0x0801c541
 801c570:	0801c5c5 	.word	0x0801c5c5
 801c574:	0801c541 	.word	0x0801c541
 801c578:	0801c541 	.word	0x0801c541
 801c57c:	0801c541 	.word	0x0801c541
 801c580:	0801c541 	.word	0x0801c541
 801c584:	0801c6c5 	.word	0x0801c6c5
 801c588:	0801c5ef 	.word	0x0801c5ef
 801c58c:	0801c67f 	.word	0x0801c67f
 801c590:	0801c541 	.word	0x0801c541
 801c594:	0801c541 	.word	0x0801c541
 801c598:	0801c6e7 	.word	0x0801c6e7
 801c59c:	0801c541 	.word	0x0801c541
 801c5a0:	0801c5ef 	.word	0x0801c5ef
 801c5a4:	0801c541 	.word	0x0801c541
 801c5a8:	0801c541 	.word	0x0801c541
 801c5ac:	0801c687 	.word	0x0801c687
 801c5b0:	6833      	ldr	r3, [r6, #0]
 801c5b2:	1d1a      	adds	r2, r3, #4
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	6032      	str	r2, [r6, #0]
 801c5b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c5bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c5c0:	2301      	movs	r3, #1
 801c5c2:	e09d      	b.n	801c700 <_printf_i+0x1e8>
 801c5c4:	6833      	ldr	r3, [r6, #0]
 801c5c6:	6820      	ldr	r0, [r4, #0]
 801c5c8:	1d19      	adds	r1, r3, #4
 801c5ca:	6031      	str	r1, [r6, #0]
 801c5cc:	0606      	lsls	r6, r0, #24
 801c5ce:	d501      	bpl.n	801c5d4 <_printf_i+0xbc>
 801c5d0:	681d      	ldr	r5, [r3, #0]
 801c5d2:	e003      	b.n	801c5dc <_printf_i+0xc4>
 801c5d4:	0645      	lsls	r5, r0, #25
 801c5d6:	d5fb      	bpl.n	801c5d0 <_printf_i+0xb8>
 801c5d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c5dc:	2d00      	cmp	r5, #0
 801c5de:	da03      	bge.n	801c5e8 <_printf_i+0xd0>
 801c5e0:	232d      	movs	r3, #45	@ 0x2d
 801c5e2:	426d      	negs	r5, r5
 801c5e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c5e8:	4859      	ldr	r0, [pc, #356]	@ (801c750 <_printf_i+0x238>)
 801c5ea:	230a      	movs	r3, #10
 801c5ec:	e011      	b.n	801c612 <_printf_i+0xfa>
 801c5ee:	6821      	ldr	r1, [r4, #0]
 801c5f0:	6833      	ldr	r3, [r6, #0]
 801c5f2:	0608      	lsls	r0, r1, #24
 801c5f4:	f853 5b04 	ldr.w	r5, [r3], #4
 801c5f8:	d402      	bmi.n	801c600 <_printf_i+0xe8>
 801c5fa:	0649      	lsls	r1, r1, #25
 801c5fc:	bf48      	it	mi
 801c5fe:	b2ad      	uxthmi	r5, r5
 801c600:	2f6f      	cmp	r7, #111	@ 0x6f
 801c602:	4853      	ldr	r0, [pc, #332]	@ (801c750 <_printf_i+0x238>)
 801c604:	6033      	str	r3, [r6, #0]
 801c606:	bf14      	ite	ne
 801c608:	230a      	movne	r3, #10
 801c60a:	2308      	moveq	r3, #8
 801c60c:	2100      	movs	r1, #0
 801c60e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c612:	6866      	ldr	r6, [r4, #4]
 801c614:	60a6      	str	r6, [r4, #8]
 801c616:	2e00      	cmp	r6, #0
 801c618:	bfa2      	ittt	ge
 801c61a:	6821      	ldrge	r1, [r4, #0]
 801c61c:	f021 0104 	bicge.w	r1, r1, #4
 801c620:	6021      	strge	r1, [r4, #0]
 801c622:	b90d      	cbnz	r5, 801c628 <_printf_i+0x110>
 801c624:	2e00      	cmp	r6, #0
 801c626:	d04b      	beq.n	801c6c0 <_printf_i+0x1a8>
 801c628:	4616      	mov	r6, r2
 801c62a:	fbb5 f1f3 	udiv	r1, r5, r3
 801c62e:	fb03 5711 	mls	r7, r3, r1, r5
 801c632:	5dc7      	ldrb	r7, [r0, r7]
 801c634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c638:	462f      	mov	r7, r5
 801c63a:	42bb      	cmp	r3, r7
 801c63c:	460d      	mov	r5, r1
 801c63e:	d9f4      	bls.n	801c62a <_printf_i+0x112>
 801c640:	2b08      	cmp	r3, #8
 801c642:	d10b      	bne.n	801c65c <_printf_i+0x144>
 801c644:	6823      	ldr	r3, [r4, #0]
 801c646:	07df      	lsls	r7, r3, #31
 801c648:	d508      	bpl.n	801c65c <_printf_i+0x144>
 801c64a:	6923      	ldr	r3, [r4, #16]
 801c64c:	6861      	ldr	r1, [r4, #4]
 801c64e:	4299      	cmp	r1, r3
 801c650:	bfde      	ittt	le
 801c652:	2330      	movle	r3, #48	@ 0x30
 801c654:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c658:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c65c:	1b92      	subs	r2, r2, r6
 801c65e:	6122      	str	r2, [r4, #16]
 801c660:	f8cd a000 	str.w	sl, [sp]
 801c664:	464b      	mov	r3, r9
 801c666:	aa03      	add	r2, sp, #12
 801c668:	4621      	mov	r1, r4
 801c66a:	4640      	mov	r0, r8
 801c66c:	f7ff fee6 	bl	801c43c <_printf_common>
 801c670:	3001      	adds	r0, #1
 801c672:	d14a      	bne.n	801c70a <_printf_i+0x1f2>
 801c674:	f04f 30ff 	mov.w	r0, #4294967295
 801c678:	b004      	add	sp, #16
 801c67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c67e:	6823      	ldr	r3, [r4, #0]
 801c680:	f043 0320 	orr.w	r3, r3, #32
 801c684:	6023      	str	r3, [r4, #0]
 801c686:	4833      	ldr	r0, [pc, #204]	@ (801c754 <_printf_i+0x23c>)
 801c688:	2778      	movs	r7, #120	@ 0x78
 801c68a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c68e:	6823      	ldr	r3, [r4, #0]
 801c690:	6831      	ldr	r1, [r6, #0]
 801c692:	061f      	lsls	r7, r3, #24
 801c694:	f851 5b04 	ldr.w	r5, [r1], #4
 801c698:	d402      	bmi.n	801c6a0 <_printf_i+0x188>
 801c69a:	065f      	lsls	r7, r3, #25
 801c69c:	bf48      	it	mi
 801c69e:	b2ad      	uxthmi	r5, r5
 801c6a0:	6031      	str	r1, [r6, #0]
 801c6a2:	07d9      	lsls	r1, r3, #31
 801c6a4:	bf44      	itt	mi
 801c6a6:	f043 0320 	orrmi.w	r3, r3, #32
 801c6aa:	6023      	strmi	r3, [r4, #0]
 801c6ac:	b11d      	cbz	r5, 801c6b6 <_printf_i+0x19e>
 801c6ae:	2310      	movs	r3, #16
 801c6b0:	e7ac      	b.n	801c60c <_printf_i+0xf4>
 801c6b2:	4827      	ldr	r0, [pc, #156]	@ (801c750 <_printf_i+0x238>)
 801c6b4:	e7e9      	b.n	801c68a <_printf_i+0x172>
 801c6b6:	6823      	ldr	r3, [r4, #0]
 801c6b8:	f023 0320 	bic.w	r3, r3, #32
 801c6bc:	6023      	str	r3, [r4, #0]
 801c6be:	e7f6      	b.n	801c6ae <_printf_i+0x196>
 801c6c0:	4616      	mov	r6, r2
 801c6c2:	e7bd      	b.n	801c640 <_printf_i+0x128>
 801c6c4:	6833      	ldr	r3, [r6, #0]
 801c6c6:	6825      	ldr	r5, [r4, #0]
 801c6c8:	6961      	ldr	r1, [r4, #20]
 801c6ca:	1d18      	adds	r0, r3, #4
 801c6cc:	6030      	str	r0, [r6, #0]
 801c6ce:	062e      	lsls	r6, r5, #24
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	d501      	bpl.n	801c6d8 <_printf_i+0x1c0>
 801c6d4:	6019      	str	r1, [r3, #0]
 801c6d6:	e002      	b.n	801c6de <_printf_i+0x1c6>
 801c6d8:	0668      	lsls	r0, r5, #25
 801c6da:	d5fb      	bpl.n	801c6d4 <_printf_i+0x1bc>
 801c6dc:	8019      	strh	r1, [r3, #0]
 801c6de:	2300      	movs	r3, #0
 801c6e0:	6123      	str	r3, [r4, #16]
 801c6e2:	4616      	mov	r6, r2
 801c6e4:	e7bc      	b.n	801c660 <_printf_i+0x148>
 801c6e6:	6833      	ldr	r3, [r6, #0]
 801c6e8:	1d1a      	adds	r2, r3, #4
 801c6ea:	6032      	str	r2, [r6, #0]
 801c6ec:	681e      	ldr	r6, [r3, #0]
 801c6ee:	6862      	ldr	r2, [r4, #4]
 801c6f0:	2100      	movs	r1, #0
 801c6f2:	4630      	mov	r0, r6
 801c6f4:	f7e3 fd84 	bl	8000200 <memchr>
 801c6f8:	b108      	cbz	r0, 801c6fe <_printf_i+0x1e6>
 801c6fa:	1b80      	subs	r0, r0, r6
 801c6fc:	6060      	str	r0, [r4, #4]
 801c6fe:	6863      	ldr	r3, [r4, #4]
 801c700:	6123      	str	r3, [r4, #16]
 801c702:	2300      	movs	r3, #0
 801c704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c708:	e7aa      	b.n	801c660 <_printf_i+0x148>
 801c70a:	6923      	ldr	r3, [r4, #16]
 801c70c:	4632      	mov	r2, r6
 801c70e:	4649      	mov	r1, r9
 801c710:	4640      	mov	r0, r8
 801c712:	47d0      	blx	sl
 801c714:	3001      	adds	r0, #1
 801c716:	d0ad      	beq.n	801c674 <_printf_i+0x15c>
 801c718:	6823      	ldr	r3, [r4, #0]
 801c71a:	079b      	lsls	r3, r3, #30
 801c71c:	d413      	bmi.n	801c746 <_printf_i+0x22e>
 801c71e:	68e0      	ldr	r0, [r4, #12]
 801c720:	9b03      	ldr	r3, [sp, #12]
 801c722:	4298      	cmp	r0, r3
 801c724:	bfb8      	it	lt
 801c726:	4618      	movlt	r0, r3
 801c728:	e7a6      	b.n	801c678 <_printf_i+0x160>
 801c72a:	2301      	movs	r3, #1
 801c72c:	4632      	mov	r2, r6
 801c72e:	4649      	mov	r1, r9
 801c730:	4640      	mov	r0, r8
 801c732:	47d0      	blx	sl
 801c734:	3001      	adds	r0, #1
 801c736:	d09d      	beq.n	801c674 <_printf_i+0x15c>
 801c738:	3501      	adds	r5, #1
 801c73a:	68e3      	ldr	r3, [r4, #12]
 801c73c:	9903      	ldr	r1, [sp, #12]
 801c73e:	1a5b      	subs	r3, r3, r1
 801c740:	42ab      	cmp	r3, r5
 801c742:	dcf2      	bgt.n	801c72a <_printf_i+0x212>
 801c744:	e7eb      	b.n	801c71e <_printf_i+0x206>
 801c746:	2500      	movs	r5, #0
 801c748:	f104 0619 	add.w	r6, r4, #25
 801c74c:	e7f5      	b.n	801c73a <_printf_i+0x222>
 801c74e:	bf00      	nop
 801c750:	08022d7f 	.word	0x08022d7f
 801c754:	08022d90 	.word	0x08022d90

0801c758 <_scanf_float>:
 801c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c75c:	b087      	sub	sp, #28
 801c75e:	4617      	mov	r7, r2
 801c760:	9303      	str	r3, [sp, #12]
 801c762:	688b      	ldr	r3, [r1, #8]
 801c764:	1e5a      	subs	r2, r3, #1
 801c766:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801c76a:	bf81      	itttt	hi
 801c76c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801c770:	eb03 0b05 	addhi.w	fp, r3, r5
 801c774:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801c778:	608b      	strhi	r3, [r1, #8]
 801c77a:	680b      	ldr	r3, [r1, #0]
 801c77c:	460a      	mov	r2, r1
 801c77e:	f04f 0500 	mov.w	r5, #0
 801c782:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801c786:	f842 3b1c 	str.w	r3, [r2], #28
 801c78a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c78e:	4680      	mov	r8, r0
 801c790:	460c      	mov	r4, r1
 801c792:	bf98      	it	ls
 801c794:	f04f 0b00 	movls.w	fp, #0
 801c798:	9201      	str	r2, [sp, #4]
 801c79a:	4616      	mov	r6, r2
 801c79c:	46aa      	mov	sl, r5
 801c79e:	46a9      	mov	r9, r5
 801c7a0:	9502      	str	r5, [sp, #8]
 801c7a2:	68a2      	ldr	r2, [r4, #8]
 801c7a4:	b152      	cbz	r2, 801c7bc <_scanf_float+0x64>
 801c7a6:	683b      	ldr	r3, [r7, #0]
 801c7a8:	781b      	ldrb	r3, [r3, #0]
 801c7aa:	2b4e      	cmp	r3, #78	@ 0x4e
 801c7ac:	d864      	bhi.n	801c878 <_scanf_float+0x120>
 801c7ae:	2b40      	cmp	r3, #64	@ 0x40
 801c7b0:	d83c      	bhi.n	801c82c <_scanf_float+0xd4>
 801c7b2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801c7b6:	b2c8      	uxtb	r0, r1
 801c7b8:	280e      	cmp	r0, #14
 801c7ba:	d93a      	bls.n	801c832 <_scanf_float+0xda>
 801c7bc:	f1b9 0f00 	cmp.w	r9, #0
 801c7c0:	d003      	beq.n	801c7ca <_scanf_float+0x72>
 801c7c2:	6823      	ldr	r3, [r4, #0]
 801c7c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801c7c8:	6023      	str	r3, [r4, #0]
 801c7ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c7ce:	f1ba 0f01 	cmp.w	sl, #1
 801c7d2:	f200 8117 	bhi.w	801ca04 <_scanf_float+0x2ac>
 801c7d6:	9b01      	ldr	r3, [sp, #4]
 801c7d8:	429e      	cmp	r6, r3
 801c7da:	f200 8108 	bhi.w	801c9ee <_scanf_float+0x296>
 801c7de:	2001      	movs	r0, #1
 801c7e0:	b007      	add	sp, #28
 801c7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7e6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801c7ea:	2a0d      	cmp	r2, #13
 801c7ec:	d8e6      	bhi.n	801c7bc <_scanf_float+0x64>
 801c7ee:	a101      	add	r1, pc, #4	@ (adr r1, 801c7f4 <_scanf_float+0x9c>)
 801c7f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c7f4:	0801c93b 	.word	0x0801c93b
 801c7f8:	0801c7bd 	.word	0x0801c7bd
 801c7fc:	0801c7bd 	.word	0x0801c7bd
 801c800:	0801c7bd 	.word	0x0801c7bd
 801c804:	0801c99b 	.word	0x0801c99b
 801c808:	0801c973 	.word	0x0801c973
 801c80c:	0801c7bd 	.word	0x0801c7bd
 801c810:	0801c7bd 	.word	0x0801c7bd
 801c814:	0801c949 	.word	0x0801c949
 801c818:	0801c7bd 	.word	0x0801c7bd
 801c81c:	0801c7bd 	.word	0x0801c7bd
 801c820:	0801c7bd 	.word	0x0801c7bd
 801c824:	0801c7bd 	.word	0x0801c7bd
 801c828:	0801c901 	.word	0x0801c901
 801c82c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801c830:	e7db      	b.n	801c7ea <_scanf_float+0x92>
 801c832:	290e      	cmp	r1, #14
 801c834:	d8c2      	bhi.n	801c7bc <_scanf_float+0x64>
 801c836:	a001      	add	r0, pc, #4	@ (adr r0, 801c83c <_scanf_float+0xe4>)
 801c838:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c83c:	0801c8f1 	.word	0x0801c8f1
 801c840:	0801c7bd 	.word	0x0801c7bd
 801c844:	0801c8f1 	.word	0x0801c8f1
 801c848:	0801c987 	.word	0x0801c987
 801c84c:	0801c7bd 	.word	0x0801c7bd
 801c850:	0801c899 	.word	0x0801c899
 801c854:	0801c8d7 	.word	0x0801c8d7
 801c858:	0801c8d7 	.word	0x0801c8d7
 801c85c:	0801c8d7 	.word	0x0801c8d7
 801c860:	0801c8d7 	.word	0x0801c8d7
 801c864:	0801c8d7 	.word	0x0801c8d7
 801c868:	0801c8d7 	.word	0x0801c8d7
 801c86c:	0801c8d7 	.word	0x0801c8d7
 801c870:	0801c8d7 	.word	0x0801c8d7
 801c874:	0801c8d7 	.word	0x0801c8d7
 801c878:	2b6e      	cmp	r3, #110	@ 0x6e
 801c87a:	d809      	bhi.n	801c890 <_scanf_float+0x138>
 801c87c:	2b60      	cmp	r3, #96	@ 0x60
 801c87e:	d8b2      	bhi.n	801c7e6 <_scanf_float+0x8e>
 801c880:	2b54      	cmp	r3, #84	@ 0x54
 801c882:	d07b      	beq.n	801c97c <_scanf_float+0x224>
 801c884:	2b59      	cmp	r3, #89	@ 0x59
 801c886:	d199      	bne.n	801c7bc <_scanf_float+0x64>
 801c888:	2d07      	cmp	r5, #7
 801c88a:	d197      	bne.n	801c7bc <_scanf_float+0x64>
 801c88c:	2508      	movs	r5, #8
 801c88e:	e02c      	b.n	801c8ea <_scanf_float+0x192>
 801c890:	2b74      	cmp	r3, #116	@ 0x74
 801c892:	d073      	beq.n	801c97c <_scanf_float+0x224>
 801c894:	2b79      	cmp	r3, #121	@ 0x79
 801c896:	e7f6      	b.n	801c886 <_scanf_float+0x12e>
 801c898:	6821      	ldr	r1, [r4, #0]
 801c89a:	05c8      	lsls	r0, r1, #23
 801c89c:	d51b      	bpl.n	801c8d6 <_scanf_float+0x17e>
 801c89e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801c8a2:	6021      	str	r1, [r4, #0]
 801c8a4:	f109 0901 	add.w	r9, r9, #1
 801c8a8:	f1bb 0f00 	cmp.w	fp, #0
 801c8ac:	d003      	beq.n	801c8b6 <_scanf_float+0x15e>
 801c8ae:	3201      	adds	r2, #1
 801c8b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c8b4:	60a2      	str	r2, [r4, #8]
 801c8b6:	68a3      	ldr	r3, [r4, #8]
 801c8b8:	3b01      	subs	r3, #1
 801c8ba:	60a3      	str	r3, [r4, #8]
 801c8bc:	6923      	ldr	r3, [r4, #16]
 801c8be:	3301      	adds	r3, #1
 801c8c0:	6123      	str	r3, [r4, #16]
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	3b01      	subs	r3, #1
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	607b      	str	r3, [r7, #4]
 801c8ca:	f340 8087 	ble.w	801c9dc <_scanf_float+0x284>
 801c8ce:	683b      	ldr	r3, [r7, #0]
 801c8d0:	3301      	adds	r3, #1
 801c8d2:	603b      	str	r3, [r7, #0]
 801c8d4:	e765      	b.n	801c7a2 <_scanf_float+0x4a>
 801c8d6:	eb1a 0105 	adds.w	r1, sl, r5
 801c8da:	f47f af6f 	bne.w	801c7bc <_scanf_float+0x64>
 801c8de:	6822      	ldr	r2, [r4, #0]
 801c8e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801c8e4:	6022      	str	r2, [r4, #0]
 801c8e6:	460d      	mov	r5, r1
 801c8e8:	468a      	mov	sl, r1
 801c8ea:	f806 3b01 	strb.w	r3, [r6], #1
 801c8ee:	e7e2      	b.n	801c8b6 <_scanf_float+0x15e>
 801c8f0:	6822      	ldr	r2, [r4, #0]
 801c8f2:	0610      	lsls	r0, r2, #24
 801c8f4:	f57f af62 	bpl.w	801c7bc <_scanf_float+0x64>
 801c8f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801c8fc:	6022      	str	r2, [r4, #0]
 801c8fe:	e7f4      	b.n	801c8ea <_scanf_float+0x192>
 801c900:	f1ba 0f00 	cmp.w	sl, #0
 801c904:	d10e      	bne.n	801c924 <_scanf_float+0x1cc>
 801c906:	f1b9 0f00 	cmp.w	r9, #0
 801c90a:	d10e      	bne.n	801c92a <_scanf_float+0x1d2>
 801c90c:	6822      	ldr	r2, [r4, #0]
 801c90e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801c912:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801c916:	d108      	bne.n	801c92a <_scanf_float+0x1d2>
 801c918:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801c91c:	6022      	str	r2, [r4, #0]
 801c91e:	f04f 0a01 	mov.w	sl, #1
 801c922:	e7e2      	b.n	801c8ea <_scanf_float+0x192>
 801c924:	f1ba 0f02 	cmp.w	sl, #2
 801c928:	d055      	beq.n	801c9d6 <_scanf_float+0x27e>
 801c92a:	2d01      	cmp	r5, #1
 801c92c:	d002      	beq.n	801c934 <_scanf_float+0x1dc>
 801c92e:	2d04      	cmp	r5, #4
 801c930:	f47f af44 	bne.w	801c7bc <_scanf_float+0x64>
 801c934:	3501      	adds	r5, #1
 801c936:	b2ed      	uxtb	r5, r5
 801c938:	e7d7      	b.n	801c8ea <_scanf_float+0x192>
 801c93a:	f1ba 0f01 	cmp.w	sl, #1
 801c93e:	f47f af3d 	bne.w	801c7bc <_scanf_float+0x64>
 801c942:	f04f 0a02 	mov.w	sl, #2
 801c946:	e7d0      	b.n	801c8ea <_scanf_float+0x192>
 801c948:	b97d      	cbnz	r5, 801c96a <_scanf_float+0x212>
 801c94a:	f1b9 0f00 	cmp.w	r9, #0
 801c94e:	f47f af38 	bne.w	801c7c2 <_scanf_float+0x6a>
 801c952:	6822      	ldr	r2, [r4, #0]
 801c954:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801c958:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801c95c:	f040 8108 	bne.w	801cb70 <_scanf_float+0x418>
 801c960:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801c964:	6022      	str	r2, [r4, #0]
 801c966:	2501      	movs	r5, #1
 801c968:	e7bf      	b.n	801c8ea <_scanf_float+0x192>
 801c96a:	2d03      	cmp	r5, #3
 801c96c:	d0e2      	beq.n	801c934 <_scanf_float+0x1dc>
 801c96e:	2d05      	cmp	r5, #5
 801c970:	e7de      	b.n	801c930 <_scanf_float+0x1d8>
 801c972:	2d02      	cmp	r5, #2
 801c974:	f47f af22 	bne.w	801c7bc <_scanf_float+0x64>
 801c978:	2503      	movs	r5, #3
 801c97a:	e7b6      	b.n	801c8ea <_scanf_float+0x192>
 801c97c:	2d06      	cmp	r5, #6
 801c97e:	f47f af1d 	bne.w	801c7bc <_scanf_float+0x64>
 801c982:	2507      	movs	r5, #7
 801c984:	e7b1      	b.n	801c8ea <_scanf_float+0x192>
 801c986:	6822      	ldr	r2, [r4, #0]
 801c988:	0591      	lsls	r1, r2, #22
 801c98a:	f57f af17 	bpl.w	801c7bc <_scanf_float+0x64>
 801c98e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801c992:	6022      	str	r2, [r4, #0]
 801c994:	f8cd 9008 	str.w	r9, [sp, #8]
 801c998:	e7a7      	b.n	801c8ea <_scanf_float+0x192>
 801c99a:	6822      	ldr	r2, [r4, #0]
 801c99c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801c9a0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801c9a4:	d006      	beq.n	801c9b4 <_scanf_float+0x25c>
 801c9a6:	0550      	lsls	r0, r2, #21
 801c9a8:	f57f af08 	bpl.w	801c7bc <_scanf_float+0x64>
 801c9ac:	f1b9 0f00 	cmp.w	r9, #0
 801c9b0:	f000 80de 	beq.w	801cb70 <_scanf_float+0x418>
 801c9b4:	0591      	lsls	r1, r2, #22
 801c9b6:	bf58      	it	pl
 801c9b8:	9902      	ldrpl	r1, [sp, #8]
 801c9ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801c9be:	bf58      	it	pl
 801c9c0:	eba9 0101 	subpl.w	r1, r9, r1
 801c9c4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801c9c8:	bf58      	it	pl
 801c9ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c9ce:	6022      	str	r2, [r4, #0]
 801c9d0:	f04f 0900 	mov.w	r9, #0
 801c9d4:	e789      	b.n	801c8ea <_scanf_float+0x192>
 801c9d6:	f04f 0a03 	mov.w	sl, #3
 801c9da:	e786      	b.n	801c8ea <_scanf_float+0x192>
 801c9dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801c9e0:	4639      	mov	r1, r7
 801c9e2:	4640      	mov	r0, r8
 801c9e4:	4798      	blx	r3
 801c9e6:	2800      	cmp	r0, #0
 801c9e8:	f43f aedb 	beq.w	801c7a2 <_scanf_float+0x4a>
 801c9ec:	e6e6      	b.n	801c7bc <_scanf_float+0x64>
 801c9ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801c9f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c9f6:	463a      	mov	r2, r7
 801c9f8:	4640      	mov	r0, r8
 801c9fa:	4798      	blx	r3
 801c9fc:	6923      	ldr	r3, [r4, #16]
 801c9fe:	3b01      	subs	r3, #1
 801ca00:	6123      	str	r3, [r4, #16]
 801ca02:	e6e8      	b.n	801c7d6 <_scanf_float+0x7e>
 801ca04:	1e6b      	subs	r3, r5, #1
 801ca06:	2b06      	cmp	r3, #6
 801ca08:	d824      	bhi.n	801ca54 <_scanf_float+0x2fc>
 801ca0a:	2d02      	cmp	r5, #2
 801ca0c:	d836      	bhi.n	801ca7c <_scanf_float+0x324>
 801ca0e:	9b01      	ldr	r3, [sp, #4]
 801ca10:	429e      	cmp	r6, r3
 801ca12:	f67f aee4 	bls.w	801c7de <_scanf_float+0x86>
 801ca16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ca1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ca1e:	463a      	mov	r2, r7
 801ca20:	4640      	mov	r0, r8
 801ca22:	4798      	blx	r3
 801ca24:	6923      	ldr	r3, [r4, #16]
 801ca26:	3b01      	subs	r3, #1
 801ca28:	6123      	str	r3, [r4, #16]
 801ca2a:	e7f0      	b.n	801ca0e <_scanf_float+0x2b6>
 801ca2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ca30:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801ca34:	463a      	mov	r2, r7
 801ca36:	4640      	mov	r0, r8
 801ca38:	4798      	blx	r3
 801ca3a:	6923      	ldr	r3, [r4, #16]
 801ca3c:	3b01      	subs	r3, #1
 801ca3e:	6123      	str	r3, [r4, #16]
 801ca40:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca44:	fa5f fa8a 	uxtb.w	sl, sl
 801ca48:	f1ba 0f02 	cmp.w	sl, #2
 801ca4c:	d1ee      	bne.n	801ca2c <_scanf_float+0x2d4>
 801ca4e:	3d03      	subs	r5, #3
 801ca50:	b2ed      	uxtb	r5, r5
 801ca52:	1b76      	subs	r6, r6, r5
 801ca54:	6823      	ldr	r3, [r4, #0]
 801ca56:	05da      	lsls	r2, r3, #23
 801ca58:	d530      	bpl.n	801cabc <_scanf_float+0x364>
 801ca5a:	055b      	lsls	r3, r3, #21
 801ca5c:	d511      	bpl.n	801ca82 <_scanf_float+0x32a>
 801ca5e:	9b01      	ldr	r3, [sp, #4]
 801ca60:	429e      	cmp	r6, r3
 801ca62:	f67f aebc 	bls.w	801c7de <_scanf_float+0x86>
 801ca66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ca6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ca6e:	463a      	mov	r2, r7
 801ca70:	4640      	mov	r0, r8
 801ca72:	4798      	blx	r3
 801ca74:	6923      	ldr	r3, [r4, #16]
 801ca76:	3b01      	subs	r3, #1
 801ca78:	6123      	str	r3, [r4, #16]
 801ca7a:	e7f0      	b.n	801ca5e <_scanf_float+0x306>
 801ca7c:	46aa      	mov	sl, r5
 801ca7e:	46b3      	mov	fp, r6
 801ca80:	e7de      	b.n	801ca40 <_scanf_float+0x2e8>
 801ca82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ca86:	6923      	ldr	r3, [r4, #16]
 801ca88:	2965      	cmp	r1, #101	@ 0x65
 801ca8a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ca8e:	f106 35ff 	add.w	r5, r6, #4294967295
 801ca92:	6123      	str	r3, [r4, #16]
 801ca94:	d00c      	beq.n	801cab0 <_scanf_float+0x358>
 801ca96:	2945      	cmp	r1, #69	@ 0x45
 801ca98:	d00a      	beq.n	801cab0 <_scanf_float+0x358>
 801ca9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ca9e:	463a      	mov	r2, r7
 801caa0:	4640      	mov	r0, r8
 801caa2:	4798      	blx	r3
 801caa4:	6923      	ldr	r3, [r4, #16]
 801caa6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801caaa:	3b01      	subs	r3, #1
 801caac:	1eb5      	subs	r5, r6, #2
 801caae:	6123      	str	r3, [r4, #16]
 801cab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801cab4:	463a      	mov	r2, r7
 801cab6:	4640      	mov	r0, r8
 801cab8:	4798      	blx	r3
 801caba:	462e      	mov	r6, r5
 801cabc:	6822      	ldr	r2, [r4, #0]
 801cabe:	f012 0210 	ands.w	r2, r2, #16
 801cac2:	d001      	beq.n	801cac8 <_scanf_float+0x370>
 801cac4:	2000      	movs	r0, #0
 801cac6:	e68b      	b.n	801c7e0 <_scanf_float+0x88>
 801cac8:	7032      	strb	r2, [r6, #0]
 801caca:	6823      	ldr	r3, [r4, #0]
 801cacc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801cad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801cad4:	d11c      	bne.n	801cb10 <_scanf_float+0x3b8>
 801cad6:	9b02      	ldr	r3, [sp, #8]
 801cad8:	454b      	cmp	r3, r9
 801cada:	eba3 0209 	sub.w	r2, r3, r9
 801cade:	d123      	bne.n	801cb28 <_scanf_float+0x3d0>
 801cae0:	9901      	ldr	r1, [sp, #4]
 801cae2:	2200      	movs	r2, #0
 801cae4:	4640      	mov	r0, r8
 801cae6:	f002 fdb7 	bl	801f658 <_strtod_r>
 801caea:	9b03      	ldr	r3, [sp, #12]
 801caec:	6821      	ldr	r1, [r4, #0]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	f011 0f02 	tst.w	r1, #2
 801caf4:	ec57 6b10 	vmov	r6, r7, d0
 801caf8:	f103 0204 	add.w	r2, r3, #4
 801cafc:	d01f      	beq.n	801cb3e <_scanf_float+0x3e6>
 801cafe:	9903      	ldr	r1, [sp, #12]
 801cb00:	600a      	str	r2, [r1, #0]
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	e9c3 6700 	strd	r6, r7, [r3]
 801cb08:	68e3      	ldr	r3, [r4, #12]
 801cb0a:	3301      	adds	r3, #1
 801cb0c:	60e3      	str	r3, [r4, #12]
 801cb0e:	e7d9      	b.n	801cac4 <_scanf_float+0x36c>
 801cb10:	9b04      	ldr	r3, [sp, #16]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d0e4      	beq.n	801cae0 <_scanf_float+0x388>
 801cb16:	9905      	ldr	r1, [sp, #20]
 801cb18:	230a      	movs	r3, #10
 801cb1a:	3101      	adds	r1, #1
 801cb1c:	4640      	mov	r0, r8
 801cb1e:	f7ff f9b7 	bl	801be90 <_strtol_r>
 801cb22:	9b04      	ldr	r3, [sp, #16]
 801cb24:	9e05      	ldr	r6, [sp, #20]
 801cb26:	1ac2      	subs	r2, r0, r3
 801cb28:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801cb2c:	429e      	cmp	r6, r3
 801cb2e:	bf28      	it	cs
 801cb30:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801cb34:	4910      	ldr	r1, [pc, #64]	@ (801cb78 <_scanf_float+0x420>)
 801cb36:	4630      	mov	r0, r6
 801cb38:	f000 f9ae 	bl	801ce98 <siprintf>
 801cb3c:	e7d0      	b.n	801cae0 <_scanf_float+0x388>
 801cb3e:	f011 0f04 	tst.w	r1, #4
 801cb42:	9903      	ldr	r1, [sp, #12]
 801cb44:	600a      	str	r2, [r1, #0]
 801cb46:	d1dc      	bne.n	801cb02 <_scanf_float+0x3aa>
 801cb48:	681d      	ldr	r5, [r3, #0]
 801cb4a:	4632      	mov	r2, r6
 801cb4c:	463b      	mov	r3, r7
 801cb4e:	4630      	mov	r0, r6
 801cb50:	4639      	mov	r1, r7
 801cb52:	f7e4 f803 	bl	8000b5c <__aeabi_dcmpun>
 801cb56:	b128      	cbz	r0, 801cb64 <_scanf_float+0x40c>
 801cb58:	4808      	ldr	r0, [pc, #32]	@ (801cb7c <_scanf_float+0x424>)
 801cb5a:	f000 fc0d 	bl	801d378 <nanf>
 801cb5e:	ed85 0a00 	vstr	s0, [r5]
 801cb62:	e7d1      	b.n	801cb08 <_scanf_float+0x3b0>
 801cb64:	4630      	mov	r0, r6
 801cb66:	4639      	mov	r1, r7
 801cb68:	f7e4 f856 	bl	8000c18 <__aeabi_d2f>
 801cb6c:	6028      	str	r0, [r5, #0]
 801cb6e:	e7cb      	b.n	801cb08 <_scanf_float+0x3b0>
 801cb70:	f04f 0900 	mov.w	r9, #0
 801cb74:	e629      	b.n	801c7ca <_scanf_float+0x72>
 801cb76:	bf00      	nop
 801cb78:	08022da1 	.word	0x08022da1
 801cb7c:	08022e52 	.word	0x08022e52

0801cb80 <std>:
 801cb80:	2300      	movs	r3, #0
 801cb82:	b510      	push	{r4, lr}
 801cb84:	4604      	mov	r4, r0
 801cb86:	e9c0 3300 	strd	r3, r3, [r0]
 801cb8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cb8e:	6083      	str	r3, [r0, #8]
 801cb90:	8181      	strh	r1, [r0, #12]
 801cb92:	6643      	str	r3, [r0, #100]	@ 0x64
 801cb94:	81c2      	strh	r2, [r0, #14]
 801cb96:	6183      	str	r3, [r0, #24]
 801cb98:	4619      	mov	r1, r3
 801cb9a:	2208      	movs	r2, #8
 801cb9c:	305c      	adds	r0, #92	@ 0x5c
 801cb9e:	f000 fac5 	bl	801d12c <memset>
 801cba2:	4b0d      	ldr	r3, [pc, #52]	@ (801cbd8 <std+0x58>)
 801cba4:	6263      	str	r3, [r4, #36]	@ 0x24
 801cba6:	4b0d      	ldr	r3, [pc, #52]	@ (801cbdc <std+0x5c>)
 801cba8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801cbaa:	4b0d      	ldr	r3, [pc, #52]	@ (801cbe0 <std+0x60>)
 801cbac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801cbae:	4b0d      	ldr	r3, [pc, #52]	@ (801cbe4 <std+0x64>)
 801cbb0:	6323      	str	r3, [r4, #48]	@ 0x30
 801cbb2:	4b0d      	ldr	r3, [pc, #52]	@ (801cbe8 <std+0x68>)
 801cbb4:	6224      	str	r4, [r4, #32]
 801cbb6:	429c      	cmp	r4, r3
 801cbb8:	d006      	beq.n	801cbc8 <std+0x48>
 801cbba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801cbbe:	4294      	cmp	r4, r2
 801cbc0:	d002      	beq.n	801cbc8 <std+0x48>
 801cbc2:	33d0      	adds	r3, #208	@ 0xd0
 801cbc4:	429c      	cmp	r4, r3
 801cbc6:	d105      	bne.n	801cbd4 <std+0x54>
 801cbc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbd0:	f000 bbb8 	b.w	801d344 <__retarget_lock_init_recursive>
 801cbd4:	bd10      	pop	{r4, pc}
 801cbd6:	bf00      	nop
 801cbd8:	0801ced9 	.word	0x0801ced9
 801cbdc:	0801cefb 	.word	0x0801cefb
 801cbe0:	0801cf33 	.word	0x0801cf33
 801cbe4:	0801cf57 	.word	0x0801cf57
 801cbe8:	200036d4 	.word	0x200036d4

0801cbec <stdio_exit_handler>:
 801cbec:	4a02      	ldr	r2, [pc, #8]	@ (801cbf8 <stdio_exit_handler+0xc>)
 801cbee:	4903      	ldr	r1, [pc, #12]	@ (801cbfc <stdio_exit_handler+0x10>)
 801cbf0:	4803      	ldr	r0, [pc, #12]	@ (801cc00 <stdio_exit_handler+0x14>)
 801cbf2:	f000 b869 	b.w	801ccc8 <_fwalk_sglue>
 801cbf6:	bf00      	nop
 801cbf8:	20000168 	.word	0x20000168
 801cbfc:	0801fca1 	.word	0x0801fca1
 801cc00:	20000178 	.word	0x20000178

0801cc04 <cleanup_stdio>:
 801cc04:	6841      	ldr	r1, [r0, #4]
 801cc06:	4b0c      	ldr	r3, [pc, #48]	@ (801cc38 <cleanup_stdio+0x34>)
 801cc08:	4299      	cmp	r1, r3
 801cc0a:	b510      	push	{r4, lr}
 801cc0c:	4604      	mov	r4, r0
 801cc0e:	d001      	beq.n	801cc14 <cleanup_stdio+0x10>
 801cc10:	f003 f846 	bl	801fca0 <_fflush_r>
 801cc14:	68a1      	ldr	r1, [r4, #8]
 801cc16:	4b09      	ldr	r3, [pc, #36]	@ (801cc3c <cleanup_stdio+0x38>)
 801cc18:	4299      	cmp	r1, r3
 801cc1a:	d002      	beq.n	801cc22 <cleanup_stdio+0x1e>
 801cc1c:	4620      	mov	r0, r4
 801cc1e:	f003 f83f 	bl	801fca0 <_fflush_r>
 801cc22:	68e1      	ldr	r1, [r4, #12]
 801cc24:	4b06      	ldr	r3, [pc, #24]	@ (801cc40 <cleanup_stdio+0x3c>)
 801cc26:	4299      	cmp	r1, r3
 801cc28:	d004      	beq.n	801cc34 <cleanup_stdio+0x30>
 801cc2a:	4620      	mov	r0, r4
 801cc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc30:	f003 b836 	b.w	801fca0 <_fflush_r>
 801cc34:	bd10      	pop	{r4, pc}
 801cc36:	bf00      	nop
 801cc38:	200036d4 	.word	0x200036d4
 801cc3c:	2000373c 	.word	0x2000373c
 801cc40:	200037a4 	.word	0x200037a4

0801cc44 <global_stdio_init.part.0>:
 801cc44:	b510      	push	{r4, lr}
 801cc46:	4b0b      	ldr	r3, [pc, #44]	@ (801cc74 <global_stdio_init.part.0+0x30>)
 801cc48:	4c0b      	ldr	r4, [pc, #44]	@ (801cc78 <global_stdio_init.part.0+0x34>)
 801cc4a:	4a0c      	ldr	r2, [pc, #48]	@ (801cc7c <global_stdio_init.part.0+0x38>)
 801cc4c:	601a      	str	r2, [r3, #0]
 801cc4e:	4620      	mov	r0, r4
 801cc50:	2200      	movs	r2, #0
 801cc52:	2104      	movs	r1, #4
 801cc54:	f7ff ff94 	bl	801cb80 <std>
 801cc58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cc5c:	2201      	movs	r2, #1
 801cc5e:	2109      	movs	r1, #9
 801cc60:	f7ff ff8e 	bl	801cb80 <std>
 801cc64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cc68:	2202      	movs	r2, #2
 801cc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc6e:	2112      	movs	r1, #18
 801cc70:	f7ff bf86 	b.w	801cb80 <std>
 801cc74:	2000380c 	.word	0x2000380c
 801cc78:	200036d4 	.word	0x200036d4
 801cc7c:	0801cbed 	.word	0x0801cbed

0801cc80 <__sfp_lock_acquire>:
 801cc80:	4801      	ldr	r0, [pc, #4]	@ (801cc88 <__sfp_lock_acquire+0x8>)
 801cc82:	f000 bb60 	b.w	801d346 <__retarget_lock_acquire_recursive>
 801cc86:	bf00      	nop
 801cc88:	20003815 	.word	0x20003815

0801cc8c <__sfp_lock_release>:
 801cc8c:	4801      	ldr	r0, [pc, #4]	@ (801cc94 <__sfp_lock_release+0x8>)
 801cc8e:	f000 bb5b 	b.w	801d348 <__retarget_lock_release_recursive>
 801cc92:	bf00      	nop
 801cc94:	20003815 	.word	0x20003815

0801cc98 <__sinit>:
 801cc98:	b510      	push	{r4, lr}
 801cc9a:	4604      	mov	r4, r0
 801cc9c:	f7ff fff0 	bl	801cc80 <__sfp_lock_acquire>
 801cca0:	6a23      	ldr	r3, [r4, #32]
 801cca2:	b11b      	cbz	r3, 801ccac <__sinit+0x14>
 801cca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cca8:	f7ff bff0 	b.w	801cc8c <__sfp_lock_release>
 801ccac:	4b04      	ldr	r3, [pc, #16]	@ (801ccc0 <__sinit+0x28>)
 801ccae:	6223      	str	r3, [r4, #32]
 801ccb0:	4b04      	ldr	r3, [pc, #16]	@ (801ccc4 <__sinit+0x2c>)
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d1f5      	bne.n	801cca4 <__sinit+0xc>
 801ccb8:	f7ff ffc4 	bl	801cc44 <global_stdio_init.part.0>
 801ccbc:	e7f2      	b.n	801cca4 <__sinit+0xc>
 801ccbe:	bf00      	nop
 801ccc0:	0801cc05 	.word	0x0801cc05
 801ccc4:	2000380c 	.word	0x2000380c

0801ccc8 <_fwalk_sglue>:
 801ccc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cccc:	4607      	mov	r7, r0
 801ccce:	4688      	mov	r8, r1
 801ccd0:	4614      	mov	r4, r2
 801ccd2:	2600      	movs	r6, #0
 801ccd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ccd8:	f1b9 0901 	subs.w	r9, r9, #1
 801ccdc:	d505      	bpl.n	801ccea <_fwalk_sglue+0x22>
 801ccde:	6824      	ldr	r4, [r4, #0]
 801cce0:	2c00      	cmp	r4, #0
 801cce2:	d1f7      	bne.n	801ccd4 <_fwalk_sglue+0xc>
 801cce4:	4630      	mov	r0, r6
 801cce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ccea:	89ab      	ldrh	r3, [r5, #12]
 801ccec:	2b01      	cmp	r3, #1
 801ccee:	d907      	bls.n	801cd00 <_fwalk_sglue+0x38>
 801ccf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ccf4:	3301      	adds	r3, #1
 801ccf6:	d003      	beq.n	801cd00 <_fwalk_sglue+0x38>
 801ccf8:	4629      	mov	r1, r5
 801ccfa:	4638      	mov	r0, r7
 801ccfc:	47c0      	blx	r8
 801ccfe:	4306      	orrs	r6, r0
 801cd00:	3568      	adds	r5, #104	@ 0x68
 801cd02:	e7e9      	b.n	801ccd8 <_fwalk_sglue+0x10>

0801cd04 <_fwrite_r>:
 801cd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd08:	9c08      	ldr	r4, [sp, #32]
 801cd0a:	468a      	mov	sl, r1
 801cd0c:	4690      	mov	r8, r2
 801cd0e:	fb02 f903 	mul.w	r9, r2, r3
 801cd12:	4606      	mov	r6, r0
 801cd14:	b118      	cbz	r0, 801cd1e <_fwrite_r+0x1a>
 801cd16:	6a03      	ldr	r3, [r0, #32]
 801cd18:	b90b      	cbnz	r3, 801cd1e <_fwrite_r+0x1a>
 801cd1a:	f7ff ffbd 	bl	801cc98 <__sinit>
 801cd1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cd20:	07dd      	lsls	r5, r3, #31
 801cd22:	d405      	bmi.n	801cd30 <_fwrite_r+0x2c>
 801cd24:	89a3      	ldrh	r3, [r4, #12]
 801cd26:	0598      	lsls	r0, r3, #22
 801cd28:	d402      	bmi.n	801cd30 <_fwrite_r+0x2c>
 801cd2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cd2c:	f000 fb0b 	bl	801d346 <__retarget_lock_acquire_recursive>
 801cd30:	89a3      	ldrh	r3, [r4, #12]
 801cd32:	0719      	lsls	r1, r3, #28
 801cd34:	d516      	bpl.n	801cd64 <_fwrite_r+0x60>
 801cd36:	6923      	ldr	r3, [r4, #16]
 801cd38:	b1a3      	cbz	r3, 801cd64 <_fwrite_r+0x60>
 801cd3a:	2500      	movs	r5, #0
 801cd3c:	454d      	cmp	r5, r9
 801cd3e:	d01f      	beq.n	801cd80 <_fwrite_r+0x7c>
 801cd40:	68a7      	ldr	r7, [r4, #8]
 801cd42:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801cd46:	3f01      	subs	r7, #1
 801cd48:	2f00      	cmp	r7, #0
 801cd4a:	60a7      	str	r7, [r4, #8]
 801cd4c:	da04      	bge.n	801cd58 <_fwrite_r+0x54>
 801cd4e:	69a3      	ldr	r3, [r4, #24]
 801cd50:	429f      	cmp	r7, r3
 801cd52:	db0f      	blt.n	801cd74 <_fwrite_r+0x70>
 801cd54:	290a      	cmp	r1, #10
 801cd56:	d00d      	beq.n	801cd74 <_fwrite_r+0x70>
 801cd58:	6823      	ldr	r3, [r4, #0]
 801cd5a:	1c5a      	adds	r2, r3, #1
 801cd5c:	6022      	str	r2, [r4, #0]
 801cd5e:	7019      	strb	r1, [r3, #0]
 801cd60:	3501      	adds	r5, #1
 801cd62:	e7eb      	b.n	801cd3c <_fwrite_r+0x38>
 801cd64:	4621      	mov	r1, r4
 801cd66:	4630      	mov	r0, r6
 801cd68:	f000 f970 	bl	801d04c <__swsetup_r>
 801cd6c:	2800      	cmp	r0, #0
 801cd6e:	d0e4      	beq.n	801cd3a <_fwrite_r+0x36>
 801cd70:	2500      	movs	r5, #0
 801cd72:	e005      	b.n	801cd80 <_fwrite_r+0x7c>
 801cd74:	4622      	mov	r2, r4
 801cd76:	4630      	mov	r0, r6
 801cd78:	f000 f92a 	bl	801cfd0 <__swbuf_r>
 801cd7c:	3001      	adds	r0, #1
 801cd7e:	d1ef      	bne.n	801cd60 <_fwrite_r+0x5c>
 801cd80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cd82:	07da      	lsls	r2, r3, #31
 801cd84:	d405      	bmi.n	801cd92 <_fwrite_r+0x8e>
 801cd86:	89a3      	ldrh	r3, [r4, #12]
 801cd88:	059b      	lsls	r3, r3, #22
 801cd8a:	d402      	bmi.n	801cd92 <_fwrite_r+0x8e>
 801cd8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cd8e:	f000 fadb 	bl	801d348 <__retarget_lock_release_recursive>
 801cd92:	fbb5 f0f8 	udiv	r0, r5, r8
 801cd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801cd9c <fwrite>:
 801cd9c:	b507      	push	{r0, r1, r2, lr}
 801cd9e:	9300      	str	r3, [sp, #0]
 801cda0:	4613      	mov	r3, r2
 801cda2:	460a      	mov	r2, r1
 801cda4:	4601      	mov	r1, r0
 801cda6:	4803      	ldr	r0, [pc, #12]	@ (801cdb4 <fwrite+0x18>)
 801cda8:	6800      	ldr	r0, [r0, #0]
 801cdaa:	f7ff ffab 	bl	801cd04 <_fwrite_r>
 801cdae:	b003      	add	sp, #12
 801cdb0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cdb4:	20000174 	.word	0x20000174

0801cdb8 <iprintf>:
 801cdb8:	b40f      	push	{r0, r1, r2, r3}
 801cdba:	b507      	push	{r0, r1, r2, lr}
 801cdbc:	4906      	ldr	r1, [pc, #24]	@ (801cdd8 <iprintf+0x20>)
 801cdbe:	ab04      	add	r3, sp, #16
 801cdc0:	6808      	ldr	r0, [r1, #0]
 801cdc2:	f853 2b04 	ldr.w	r2, [r3], #4
 801cdc6:	6881      	ldr	r1, [r0, #8]
 801cdc8:	9301      	str	r3, [sp, #4]
 801cdca:	f002 fdcd 	bl	801f968 <_vfiprintf_r>
 801cdce:	b003      	add	sp, #12
 801cdd0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cdd4:	b004      	add	sp, #16
 801cdd6:	4770      	bx	lr
 801cdd8:	20000174 	.word	0x20000174

0801cddc <_puts_r>:
 801cddc:	6a03      	ldr	r3, [r0, #32]
 801cdde:	b570      	push	{r4, r5, r6, lr}
 801cde0:	6884      	ldr	r4, [r0, #8]
 801cde2:	4605      	mov	r5, r0
 801cde4:	460e      	mov	r6, r1
 801cde6:	b90b      	cbnz	r3, 801cdec <_puts_r+0x10>
 801cde8:	f7ff ff56 	bl	801cc98 <__sinit>
 801cdec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cdee:	07db      	lsls	r3, r3, #31
 801cdf0:	d405      	bmi.n	801cdfe <_puts_r+0x22>
 801cdf2:	89a3      	ldrh	r3, [r4, #12]
 801cdf4:	0598      	lsls	r0, r3, #22
 801cdf6:	d402      	bmi.n	801cdfe <_puts_r+0x22>
 801cdf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cdfa:	f000 faa4 	bl	801d346 <__retarget_lock_acquire_recursive>
 801cdfe:	89a3      	ldrh	r3, [r4, #12]
 801ce00:	0719      	lsls	r1, r3, #28
 801ce02:	d502      	bpl.n	801ce0a <_puts_r+0x2e>
 801ce04:	6923      	ldr	r3, [r4, #16]
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d135      	bne.n	801ce76 <_puts_r+0x9a>
 801ce0a:	4621      	mov	r1, r4
 801ce0c:	4628      	mov	r0, r5
 801ce0e:	f000 f91d 	bl	801d04c <__swsetup_r>
 801ce12:	b380      	cbz	r0, 801ce76 <_puts_r+0x9a>
 801ce14:	f04f 35ff 	mov.w	r5, #4294967295
 801ce18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ce1a:	07da      	lsls	r2, r3, #31
 801ce1c:	d405      	bmi.n	801ce2a <_puts_r+0x4e>
 801ce1e:	89a3      	ldrh	r3, [r4, #12]
 801ce20:	059b      	lsls	r3, r3, #22
 801ce22:	d402      	bmi.n	801ce2a <_puts_r+0x4e>
 801ce24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ce26:	f000 fa8f 	bl	801d348 <__retarget_lock_release_recursive>
 801ce2a:	4628      	mov	r0, r5
 801ce2c:	bd70      	pop	{r4, r5, r6, pc}
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	da04      	bge.n	801ce3c <_puts_r+0x60>
 801ce32:	69a2      	ldr	r2, [r4, #24]
 801ce34:	429a      	cmp	r2, r3
 801ce36:	dc17      	bgt.n	801ce68 <_puts_r+0x8c>
 801ce38:	290a      	cmp	r1, #10
 801ce3a:	d015      	beq.n	801ce68 <_puts_r+0x8c>
 801ce3c:	6823      	ldr	r3, [r4, #0]
 801ce3e:	1c5a      	adds	r2, r3, #1
 801ce40:	6022      	str	r2, [r4, #0]
 801ce42:	7019      	strb	r1, [r3, #0]
 801ce44:	68a3      	ldr	r3, [r4, #8]
 801ce46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ce4a:	3b01      	subs	r3, #1
 801ce4c:	60a3      	str	r3, [r4, #8]
 801ce4e:	2900      	cmp	r1, #0
 801ce50:	d1ed      	bne.n	801ce2e <_puts_r+0x52>
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	da11      	bge.n	801ce7a <_puts_r+0x9e>
 801ce56:	4622      	mov	r2, r4
 801ce58:	210a      	movs	r1, #10
 801ce5a:	4628      	mov	r0, r5
 801ce5c:	f000 f8b8 	bl	801cfd0 <__swbuf_r>
 801ce60:	3001      	adds	r0, #1
 801ce62:	d0d7      	beq.n	801ce14 <_puts_r+0x38>
 801ce64:	250a      	movs	r5, #10
 801ce66:	e7d7      	b.n	801ce18 <_puts_r+0x3c>
 801ce68:	4622      	mov	r2, r4
 801ce6a:	4628      	mov	r0, r5
 801ce6c:	f000 f8b0 	bl	801cfd0 <__swbuf_r>
 801ce70:	3001      	adds	r0, #1
 801ce72:	d1e7      	bne.n	801ce44 <_puts_r+0x68>
 801ce74:	e7ce      	b.n	801ce14 <_puts_r+0x38>
 801ce76:	3e01      	subs	r6, #1
 801ce78:	e7e4      	b.n	801ce44 <_puts_r+0x68>
 801ce7a:	6823      	ldr	r3, [r4, #0]
 801ce7c:	1c5a      	adds	r2, r3, #1
 801ce7e:	6022      	str	r2, [r4, #0]
 801ce80:	220a      	movs	r2, #10
 801ce82:	701a      	strb	r2, [r3, #0]
 801ce84:	e7ee      	b.n	801ce64 <_puts_r+0x88>
	...

0801ce88 <puts>:
 801ce88:	4b02      	ldr	r3, [pc, #8]	@ (801ce94 <puts+0xc>)
 801ce8a:	4601      	mov	r1, r0
 801ce8c:	6818      	ldr	r0, [r3, #0]
 801ce8e:	f7ff bfa5 	b.w	801cddc <_puts_r>
 801ce92:	bf00      	nop
 801ce94:	20000174 	.word	0x20000174

0801ce98 <siprintf>:
 801ce98:	b40e      	push	{r1, r2, r3}
 801ce9a:	b500      	push	{lr}
 801ce9c:	b09c      	sub	sp, #112	@ 0x70
 801ce9e:	ab1d      	add	r3, sp, #116	@ 0x74
 801cea0:	9002      	str	r0, [sp, #8]
 801cea2:	9006      	str	r0, [sp, #24]
 801cea4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801cea8:	4809      	ldr	r0, [pc, #36]	@ (801ced0 <siprintf+0x38>)
 801ceaa:	9107      	str	r1, [sp, #28]
 801ceac:	9104      	str	r1, [sp, #16]
 801ceae:	4909      	ldr	r1, [pc, #36]	@ (801ced4 <siprintf+0x3c>)
 801ceb0:	f853 2b04 	ldr.w	r2, [r3], #4
 801ceb4:	9105      	str	r1, [sp, #20]
 801ceb6:	6800      	ldr	r0, [r0, #0]
 801ceb8:	9301      	str	r3, [sp, #4]
 801ceba:	a902      	add	r1, sp, #8
 801cebc:	f002 fc2e 	bl	801f71c <_svfiprintf_r>
 801cec0:	9b02      	ldr	r3, [sp, #8]
 801cec2:	2200      	movs	r2, #0
 801cec4:	701a      	strb	r2, [r3, #0]
 801cec6:	b01c      	add	sp, #112	@ 0x70
 801cec8:	f85d eb04 	ldr.w	lr, [sp], #4
 801cecc:	b003      	add	sp, #12
 801cece:	4770      	bx	lr
 801ced0:	20000174 	.word	0x20000174
 801ced4:	ffff0208 	.word	0xffff0208

0801ced8 <__sread>:
 801ced8:	b510      	push	{r4, lr}
 801ceda:	460c      	mov	r4, r1
 801cedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cee0:	f000 f9d2 	bl	801d288 <_read_r>
 801cee4:	2800      	cmp	r0, #0
 801cee6:	bfab      	itete	ge
 801cee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ceea:	89a3      	ldrhlt	r3, [r4, #12]
 801ceec:	181b      	addge	r3, r3, r0
 801ceee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801cef2:	bfac      	ite	ge
 801cef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801cef6:	81a3      	strhlt	r3, [r4, #12]
 801cef8:	bd10      	pop	{r4, pc}

0801cefa <__swrite>:
 801cefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cefe:	461f      	mov	r7, r3
 801cf00:	898b      	ldrh	r3, [r1, #12]
 801cf02:	05db      	lsls	r3, r3, #23
 801cf04:	4605      	mov	r5, r0
 801cf06:	460c      	mov	r4, r1
 801cf08:	4616      	mov	r6, r2
 801cf0a:	d505      	bpl.n	801cf18 <__swrite+0x1e>
 801cf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf10:	2302      	movs	r3, #2
 801cf12:	2200      	movs	r2, #0
 801cf14:	f000 f9a6 	bl	801d264 <_lseek_r>
 801cf18:	89a3      	ldrh	r3, [r4, #12]
 801cf1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cf22:	81a3      	strh	r3, [r4, #12]
 801cf24:	4632      	mov	r2, r6
 801cf26:	463b      	mov	r3, r7
 801cf28:	4628      	mov	r0, r5
 801cf2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf2e:	f000 b9cd 	b.w	801d2cc <_write_r>

0801cf32 <__sseek>:
 801cf32:	b510      	push	{r4, lr}
 801cf34:	460c      	mov	r4, r1
 801cf36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf3a:	f000 f993 	bl	801d264 <_lseek_r>
 801cf3e:	1c43      	adds	r3, r0, #1
 801cf40:	89a3      	ldrh	r3, [r4, #12]
 801cf42:	bf15      	itete	ne
 801cf44:	6560      	strne	r0, [r4, #84]	@ 0x54
 801cf46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801cf4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801cf4e:	81a3      	strheq	r3, [r4, #12]
 801cf50:	bf18      	it	ne
 801cf52:	81a3      	strhne	r3, [r4, #12]
 801cf54:	bd10      	pop	{r4, pc}

0801cf56 <__sclose>:
 801cf56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf5a:	f000 b973 	b.w	801d244 <_close_r>

0801cf5e <_vsniprintf_r>:
 801cf5e:	b530      	push	{r4, r5, lr}
 801cf60:	4614      	mov	r4, r2
 801cf62:	2c00      	cmp	r4, #0
 801cf64:	b09b      	sub	sp, #108	@ 0x6c
 801cf66:	4605      	mov	r5, r0
 801cf68:	461a      	mov	r2, r3
 801cf6a:	da05      	bge.n	801cf78 <_vsniprintf_r+0x1a>
 801cf6c:	238b      	movs	r3, #139	@ 0x8b
 801cf6e:	6003      	str	r3, [r0, #0]
 801cf70:	f04f 30ff 	mov.w	r0, #4294967295
 801cf74:	b01b      	add	sp, #108	@ 0x6c
 801cf76:	bd30      	pop	{r4, r5, pc}
 801cf78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cf7c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cf80:	bf14      	ite	ne
 801cf82:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cf86:	4623      	moveq	r3, r4
 801cf88:	9302      	str	r3, [sp, #8]
 801cf8a:	9305      	str	r3, [sp, #20]
 801cf8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cf90:	9100      	str	r1, [sp, #0]
 801cf92:	9104      	str	r1, [sp, #16]
 801cf94:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cf98:	4669      	mov	r1, sp
 801cf9a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cf9c:	f002 fbbe 	bl	801f71c <_svfiprintf_r>
 801cfa0:	1c43      	adds	r3, r0, #1
 801cfa2:	bfbc      	itt	lt
 801cfa4:	238b      	movlt	r3, #139	@ 0x8b
 801cfa6:	602b      	strlt	r3, [r5, #0]
 801cfa8:	2c00      	cmp	r4, #0
 801cfaa:	d0e3      	beq.n	801cf74 <_vsniprintf_r+0x16>
 801cfac:	9b00      	ldr	r3, [sp, #0]
 801cfae:	2200      	movs	r2, #0
 801cfb0:	701a      	strb	r2, [r3, #0]
 801cfb2:	e7df      	b.n	801cf74 <_vsniprintf_r+0x16>

0801cfb4 <vsniprintf>:
 801cfb4:	b507      	push	{r0, r1, r2, lr}
 801cfb6:	9300      	str	r3, [sp, #0]
 801cfb8:	4613      	mov	r3, r2
 801cfba:	460a      	mov	r2, r1
 801cfbc:	4601      	mov	r1, r0
 801cfbe:	4803      	ldr	r0, [pc, #12]	@ (801cfcc <vsniprintf+0x18>)
 801cfc0:	6800      	ldr	r0, [r0, #0]
 801cfc2:	f7ff ffcc 	bl	801cf5e <_vsniprintf_r>
 801cfc6:	b003      	add	sp, #12
 801cfc8:	f85d fb04 	ldr.w	pc, [sp], #4
 801cfcc:	20000174 	.word	0x20000174

0801cfd0 <__swbuf_r>:
 801cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfd2:	460e      	mov	r6, r1
 801cfd4:	4614      	mov	r4, r2
 801cfd6:	4605      	mov	r5, r0
 801cfd8:	b118      	cbz	r0, 801cfe2 <__swbuf_r+0x12>
 801cfda:	6a03      	ldr	r3, [r0, #32]
 801cfdc:	b90b      	cbnz	r3, 801cfe2 <__swbuf_r+0x12>
 801cfde:	f7ff fe5b 	bl	801cc98 <__sinit>
 801cfe2:	69a3      	ldr	r3, [r4, #24]
 801cfe4:	60a3      	str	r3, [r4, #8]
 801cfe6:	89a3      	ldrh	r3, [r4, #12]
 801cfe8:	071a      	lsls	r2, r3, #28
 801cfea:	d501      	bpl.n	801cff0 <__swbuf_r+0x20>
 801cfec:	6923      	ldr	r3, [r4, #16]
 801cfee:	b943      	cbnz	r3, 801d002 <__swbuf_r+0x32>
 801cff0:	4621      	mov	r1, r4
 801cff2:	4628      	mov	r0, r5
 801cff4:	f000 f82a 	bl	801d04c <__swsetup_r>
 801cff8:	b118      	cbz	r0, 801d002 <__swbuf_r+0x32>
 801cffa:	f04f 37ff 	mov.w	r7, #4294967295
 801cffe:	4638      	mov	r0, r7
 801d000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d002:	6823      	ldr	r3, [r4, #0]
 801d004:	6922      	ldr	r2, [r4, #16]
 801d006:	1a98      	subs	r0, r3, r2
 801d008:	6963      	ldr	r3, [r4, #20]
 801d00a:	b2f6      	uxtb	r6, r6
 801d00c:	4283      	cmp	r3, r0
 801d00e:	4637      	mov	r7, r6
 801d010:	dc05      	bgt.n	801d01e <__swbuf_r+0x4e>
 801d012:	4621      	mov	r1, r4
 801d014:	4628      	mov	r0, r5
 801d016:	f002 fe43 	bl	801fca0 <_fflush_r>
 801d01a:	2800      	cmp	r0, #0
 801d01c:	d1ed      	bne.n	801cffa <__swbuf_r+0x2a>
 801d01e:	68a3      	ldr	r3, [r4, #8]
 801d020:	3b01      	subs	r3, #1
 801d022:	60a3      	str	r3, [r4, #8]
 801d024:	6823      	ldr	r3, [r4, #0]
 801d026:	1c5a      	adds	r2, r3, #1
 801d028:	6022      	str	r2, [r4, #0]
 801d02a:	701e      	strb	r6, [r3, #0]
 801d02c:	6962      	ldr	r2, [r4, #20]
 801d02e:	1c43      	adds	r3, r0, #1
 801d030:	429a      	cmp	r2, r3
 801d032:	d004      	beq.n	801d03e <__swbuf_r+0x6e>
 801d034:	89a3      	ldrh	r3, [r4, #12]
 801d036:	07db      	lsls	r3, r3, #31
 801d038:	d5e1      	bpl.n	801cffe <__swbuf_r+0x2e>
 801d03a:	2e0a      	cmp	r6, #10
 801d03c:	d1df      	bne.n	801cffe <__swbuf_r+0x2e>
 801d03e:	4621      	mov	r1, r4
 801d040:	4628      	mov	r0, r5
 801d042:	f002 fe2d 	bl	801fca0 <_fflush_r>
 801d046:	2800      	cmp	r0, #0
 801d048:	d0d9      	beq.n	801cffe <__swbuf_r+0x2e>
 801d04a:	e7d6      	b.n	801cffa <__swbuf_r+0x2a>

0801d04c <__swsetup_r>:
 801d04c:	b538      	push	{r3, r4, r5, lr}
 801d04e:	4b29      	ldr	r3, [pc, #164]	@ (801d0f4 <__swsetup_r+0xa8>)
 801d050:	4605      	mov	r5, r0
 801d052:	6818      	ldr	r0, [r3, #0]
 801d054:	460c      	mov	r4, r1
 801d056:	b118      	cbz	r0, 801d060 <__swsetup_r+0x14>
 801d058:	6a03      	ldr	r3, [r0, #32]
 801d05a:	b90b      	cbnz	r3, 801d060 <__swsetup_r+0x14>
 801d05c:	f7ff fe1c 	bl	801cc98 <__sinit>
 801d060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d064:	0719      	lsls	r1, r3, #28
 801d066:	d422      	bmi.n	801d0ae <__swsetup_r+0x62>
 801d068:	06da      	lsls	r2, r3, #27
 801d06a:	d407      	bmi.n	801d07c <__swsetup_r+0x30>
 801d06c:	2209      	movs	r2, #9
 801d06e:	602a      	str	r2, [r5, #0]
 801d070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d074:	81a3      	strh	r3, [r4, #12]
 801d076:	f04f 30ff 	mov.w	r0, #4294967295
 801d07a:	e033      	b.n	801d0e4 <__swsetup_r+0x98>
 801d07c:	0758      	lsls	r0, r3, #29
 801d07e:	d512      	bpl.n	801d0a6 <__swsetup_r+0x5a>
 801d080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d082:	b141      	cbz	r1, 801d096 <__swsetup_r+0x4a>
 801d084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d088:	4299      	cmp	r1, r3
 801d08a:	d002      	beq.n	801d092 <__swsetup_r+0x46>
 801d08c:	4628      	mov	r0, r5
 801d08e:	f000 ffe3 	bl	801e058 <_free_r>
 801d092:	2300      	movs	r3, #0
 801d094:	6363      	str	r3, [r4, #52]	@ 0x34
 801d096:	89a3      	ldrh	r3, [r4, #12]
 801d098:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d09c:	81a3      	strh	r3, [r4, #12]
 801d09e:	2300      	movs	r3, #0
 801d0a0:	6063      	str	r3, [r4, #4]
 801d0a2:	6923      	ldr	r3, [r4, #16]
 801d0a4:	6023      	str	r3, [r4, #0]
 801d0a6:	89a3      	ldrh	r3, [r4, #12]
 801d0a8:	f043 0308 	orr.w	r3, r3, #8
 801d0ac:	81a3      	strh	r3, [r4, #12]
 801d0ae:	6923      	ldr	r3, [r4, #16]
 801d0b0:	b94b      	cbnz	r3, 801d0c6 <__swsetup_r+0x7a>
 801d0b2:	89a3      	ldrh	r3, [r4, #12]
 801d0b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d0bc:	d003      	beq.n	801d0c6 <__swsetup_r+0x7a>
 801d0be:	4621      	mov	r1, r4
 801d0c0:	4628      	mov	r0, r5
 801d0c2:	f002 fe4d 	bl	801fd60 <__smakebuf_r>
 801d0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d0ca:	f013 0201 	ands.w	r2, r3, #1
 801d0ce:	d00a      	beq.n	801d0e6 <__swsetup_r+0x9a>
 801d0d0:	2200      	movs	r2, #0
 801d0d2:	60a2      	str	r2, [r4, #8]
 801d0d4:	6962      	ldr	r2, [r4, #20]
 801d0d6:	4252      	negs	r2, r2
 801d0d8:	61a2      	str	r2, [r4, #24]
 801d0da:	6922      	ldr	r2, [r4, #16]
 801d0dc:	b942      	cbnz	r2, 801d0f0 <__swsetup_r+0xa4>
 801d0de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d0e2:	d1c5      	bne.n	801d070 <__swsetup_r+0x24>
 801d0e4:	bd38      	pop	{r3, r4, r5, pc}
 801d0e6:	0799      	lsls	r1, r3, #30
 801d0e8:	bf58      	it	pl
 801d0ea:	6962      	ldrpl	r2, [r4, #20]
 801d0ec:	60a2      	str	r2, [r4, #8]
 801d0ee:	e7f4      	b.n	801d0da <__swsetup_r+0x8e>
 801d0f0:	2000      	movs	r0, #0
 801d0f2:	e7f7      	b.n	801d0e4 <__swsetup_r+0x98>
 801d0f4:	20000174 	.word	0x20000174

0801d0f8 <memmove>:
 801d0f8:	4288      	cmp	r0, r1
 801d0fa:	b510      	push	{r4, lr}
 801d0fc:	eb01 0402 	add.w	r4, r1, r2
 801d100:	d902      	bls.n	801d108 <memmove+0x10>
 801d102:	4284      	cmp	r4, r0
 801d104:	4623      	mov	r3, r4
 801d106:	d807      	bhi.n	801d118 <memmove+0x20>
 801d108:	1e43      	subs	r3, r0, #1
 801d10a:	42a1      	cmp	r1, r4
 801d10c:	d008      	beq.n	801d120 <memmove+0x28>
 801d10e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d112:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d116:	e7f8      	b.n	801d10a <memmove+0x12>
 801d118:	4402      	add	r2, r0
 801d11a:	4601      	mov	r1, r0
 801d11c:	428a      	cmp	r2, r1
 801d11e:	d100      	bne.n	801d122 <memmove+0x2a>
 801d120:	bd10      	pop	{r4, pc}
 801d122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d12a:	e7f7      	b.n	801d11c <memmove+0x24>

0801d12c <memset>:
 801d12c:	4402      	add	r2, r0
 801d12e:	4603      	mov	r3, r0
 801d130:	4293      	cmp	r3, r2
 801d132:	d100      	bne.n	801d136 <memset+0xa>
 801d134:	4770      	bx	lr
 801d136:	f803 1b01 	strb.w	r1, [r3], #1
 801d13a:	e7f9      	b.n	801d130 <memset+0x4>

0801d13c <strchr>:
 801d13c:	b2c9      	uxtb	r1, r1
 801d13e:	4603      	mov	r3, r0
 801d140:	4618      	mov	r0, r3
 801d142:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d146:	b112      	cbz	r2, 801d14e <strchr+0x12>
 801d148:	428a      	cmp	r2, r1
 801d14a:	d1f9      	bne.n	801d140 <strchr+0x4>
 801d14c:	4770      	bx	lr
 801d14e:	2900      	cmp	r1, #0
 801d150:	bf18      	it	ne
 801d152:	2000      	movne	r0, #0
 801d154:	4770      	bx	lr
	...

0801d158 <strtok>:
 801d158:	4b16      	ldr	r3, [pc, #88]	@ (801d1b4 <strtok+0x5c>)
 801d15a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d15e:	681f      	ldr	r7, [r3, #0]
 801d160:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801d162:	4605      	mov	r5, r0
 801d164:	460e      	mov	r6, r1
 801d166:	b9ec      	cbnz	r4, 801d1a4 <strtok+0x4c>
 801d168:	2050      	movs	r0, #80	@ 0x50
 801d16a:	f7fe fd61 	bl	801bc30 <malloc>
 801d16e:	4602      	mov	r2, r0
 801d170:	6478      	str	r0, [r7, #68]	@ 0x44
 801d172:	b920      	cbnz	r0, 801d17e <strtok+0x26>
 801d174:	4b10      	ldr	r3, [pc, #64]	@ (801d1b8 <strtok+0x60>)
 801d176:	4811      	ldr	r0, [pc, #68]	@ (801d1bc <strtok+0x64>)
 801d178:	215b      	movs	r1, #91	@ 0x5b
 801d17a:	f000 f903 	bl	801d384 <__assert_func>
 801d17e:	e9c0 4400 	strd	r4, r4, [r0]
 801d182:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801d186:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801d18a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801d18e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801d192:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801d196:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801d19a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801d19e:	6184      	str	r4, [r0, #24]
 801d1a0:	7704      	strb	r4, [r0, #28]
 801d1a2:	6244      	str	r4, [r0, #36]	@ 0x24
 801d1a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d1a6:	4631      	mov	r1, r6
 801d1a8:	4628      	mov	r0, r5
 801d1aa:	2301      	movs	r3, #1
 801d1ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d1b0:	f000 b806 	b.w	801d1c0 <__strtok_r>
 801d1b4:	20000174 	.word	0x20000174
 801d1b8:	08022da6 	.word	0x08022da6
 801d1bc:	08022dbd 	.word	0x08022dbd

0801d1c0 <__strtok_r>:
 801d1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1c2:	4604      	mov	r4, r0
 801d1c4:	b908      	cbnz	r0, 801d1ca <__strtok_r+0xa>
 801d1c6:	6814      	ldr	r4, [r2, #0]
 801d1c8:	b144      	cbz	r4, 801d1dc <__strtok_r+0x1c>
 801d1ca:	4620      	mov	r0, r4
 801d1cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 801d1d0:	460f      	mov	r7, r1
 801d1d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 801d1d6:	b91e      	cbnz	r6, 801d1e0 <__strtok_r+0x20>
 801d1d8:	b965      	cbnz	r5, 801d1f4 <__strtok_r+0x34>
 801d1da:	6015      	str	r5, [r2, #0]
 801d1dc:	2000      	movs	r0, #0
 801d1de:	e005      	b.n	801d1ec <__strtok_r+0x2c>
 801d1e0:	42b5      	cmp	r5, r6
 801d1e2:	d1f6      	bne.n	801d1d2 <__strtok_r+0x12>
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d1f0      	bne.n	801d1ca <__strtok_r+0xa>
 801d1e8:	6014      	str	r4, [r2, #0]
 801d1ea:	7003      	strb	r3, [r0, #0]
 801d1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1ee:	461c      	mov	r4, r3
 801d1f0:	e00c      	b.n	801d20c <__strtok_r+0x4c>
 801d1f2:	b915      	cbnz	r5, 801d1fa <__strtok_r+0x3a>
 801d1f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d1f8:	460e      	mov	r6, r1
 801d1fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 801d1fe:	42ab      	cmp	r3, r5
 801d200:	d1f7      	bne.n	801d1f2 <__strtok_r+0x32>
 801d202:	2b00      	cmp	r3, #0
 801d204:	d0f3      	beq.n	801d1ee <__strtok_r+0x2e>
 801d206:	2300      	movs	r3, #0
 801d208:	f804 3c01 	strb.w	r3, [r4, #-1]
 801d20c:	6014      	str	r4, [r2, #0]
 801d20e:	e7ed      	b.n	801d1ec <__strtok_r+0x2c>

0801d210 <strstr>:
 801d210:	780a      	ldrb	r2, [r1, #0]
 801d212:	b570      	push	{r4, r5, r6, lr}
 801d214:	b96a      	cbnz	r2, 801d232 <strstr+0x22>
 801d216:	bd70      	pop	{r4, r5, r6, pc}
 801d218:	429a      	cmp	r2, r3
 801d21a:	d109      	bne.n	801d230 <strstr+0x20>
 801d21c:	460c      	mov	r4, r1
 801d21e:	4605      	mov	r5, r0
 801d220:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d224:	2b00      	cmp	r3, #0
 801d226:	d0f6      	beq.n	801d216 <strstr+0x6>
 801d228:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d22c:	429e      	cmp	r6, r3
 801d22e:	d0f7      	beq.n	801d220 <strstr+0x10>
 801d230:	3001      	adds	r0, #1
 801d232:	7803      	ldrb	r3, [r0, #0]
 801d234:	2b00      	cmp	r3, #0
 801d236:	d1ef      	bne.n	801d218 <strstr+0x8>
 801d238:	4618      	mov	r0, r3
 801d23a:	e7ec      	b.n	801d216 <strstr+0x6>

0801d23c <_localeconv_r>:
 801d23c:	4800      	ldr	r0, [pc, #0]	@ (801d240 <_localeconv_r+0x4>)
 801d23e:	4770      	bx	lr
 801d240:	200002b4 	.word	0x200002b4

0801d244 <_close_r>:
 801d244:	b538      	push	{r3, r4, r5, lr}
 801d246:	4d06      	ldr	r5, [pc, #24]	@ (801d260 <_close_r+0x1c>)
 801d248:	2300      	movs	r3, #0
 801d24a:	4604      	mov	r4, r0
 801d24c:	4608      	mov	r0, r1
 801d24e:	602b      	str	r3, [r5, #0]
 801d250:	f7e6 fc0a 	bl	8003a68 <_close>
 801d254:	1c43      	adds	r3, r0, #1
 801d256:	d102      	bne.n	801d25e <_close_r+0x1a>
 801d258:	682b      	ldr	r3, [r5, #0]
 801d25a:	b103      	cbz	r3, 801d25e <_close_r+0x1a>
 801d25c:	6023      	str	r3, [r4, #0]
 801d25e:	bd38      	pop	{r3, r4, r5, pc}
 801d260:	20003810 	.word	0x20003810

0801d264 <_lseek_r>:
 801d264:	b538      	push	{r3, r4, r5, lr}
 801d266:	4d07      	ldr	r5, [pc, #28]	@ (801d284 <_lseek_r+0x20>)
 801d268:	4604      	mov	r4, r0
 801d26a:	4608      	mov	r0, r1
 801d26c:	4611      	mov	r1, r2
 801d26e:	2200      	movs	r2, #0
 801d270:	602a      	str	r2, [r5, #0]
 801d272:	461a      	mov	r2, r3
 801d274:	f7e6 fc1f 	bl	8003ab6 <_lseek>
 801d278:	1c43      	adds	r3, r0, #1
 801d27a:	d102      	bne.n	801d282 <_lseek_r+0x1e>
 801d27c:	682b      	ldr	r3, [r5, #0]
 801d27e:	b103      	cbz	r3, 801d282 <_lseek_r+0x1e>
 801d280:	6023      	str	r3, [r4, #0]
 801d282:	bd38      	pop	{r3, r4, r5, pc}
 801d284:	20003810 	.word	0x20003810

0801d288 <_read_r>:
 801d288:	b538      	push	{r3, r4, r5, lr}
 801d28a:	4d07      	ldr	r5, [pc, #28]	@ (801d2a8 <_read_r+0x20>)
 801d28c:	4604      	mov	r4, r0
 801d28e:	4608      	mov	r0, r1
 801d290:	4611      	mov	r1, r2
 801d292:	2200      	movs	r2, #0
 801d294:	602a      	str	r2, [r5, #0]
 801d296:	461a      	mov	r2, r3
 801d298:	f7e6 fbad 	bl	80039f6 <_read>
 801d29c:	1c43      	adds	r3, r0, #1
 801d29e:	d102      	bne.n	801d2a6 <_read_r+0x1e>
 801d2a0:	682b      	ldr	r3, [r5, #0]
 801d2a2:	b103      	cbz	r3, 801d2a6 <_read_r+0x1e>
 801d2a4:	6023      	str	r3, [r4, #0]
 801d2a6:	bd38      	pop	{r3, r4, r5, pc}
 801d2a8:	20003810 	.word	0x20003810

0801d2ac <_sbrk_r>:
 801d2ac:	b538      	push	{r3, r4, r5, lr}
 801d2ae:	4d06      	ldr	r5, [pc, #24]	@ (801d2c8 <_sbrk_r+0x1c>)
 801d2b0:	2300      	movs	r3, #0
 801d2b2:	4604      	mov	r4, r0
 801d2b4:	4608      	mov	r0, r1
 801d2b6:	602b      	str	r3, [r5, #0]
 801d2b8:	f7e6 fc0a 	bl	8003ad0 <_sbrk>
 801d2bc:	1c43      	adds	r3, r0, #1
 801d2be:	d102      	bne.n	801d2c6 <_sbrk_r+0x1a>
 801d2c0:	682b      	ldr	r3, [r5, #0]
 801d2c2:	b103      	cbz	r3, 801d2c6 <_sbrk_r+0x1a>
 801d2c4:	6023      	str	r3, [r4, #0]
 801d2c6:	bd38      	pop	{r3, r4, r5, pc}
 801d2c8:	20003810 	.word	0x20003810

0801d2cc <_write_r>:
 801d2cc:	b538      	push	{r3, r4, r5, lr}
 801d2ce:	4d07      	ldr	r5, [pc, #28]	@ (801d2ec <_write_r+0x20>)
 801d2d0:	4604      	mov	r4, r0
 801d2d2:	4608      	mov	r0, r1
 801d2d4:	4611      	mov	r1, r2
 801d2d6:	2200      	movs	r2, #0
 801d2d8:	602a      	str	r2, [r5, #0]
 801d2da:	461a      	mov	r2, r3
 801d2dc:	f7e6 fba8 	bl	8003a30 <_write>
 801d2e0:	1c43      	adds	r3, r0, #1
 801d2e2:	d102      	bne.n	801d2ea <_write_r+0x1e>
 801d2e4:	682b      	ldr	r3, [r5, #0]
 801d2e6:	b103      	cbz	r3, 801d2ea <_write_r+0x1e>
 801d2e8:	6023      	str	r3, [r4, #0]
 801d2ea:	bd38      	pop	{r3, r4, r5, pc}
 801d2ec:	20003810 	.word	0x20003810

0801d2f0 <__errno>:
 801d2f0:	4b01      	ldr	r3, [pc, #4]	@ (801d2f8 <__errno+0x8>)
 801d2f2:	6818      	ldr	r0, [r3, #0]
 801d2f4:	4770      	bx	lr
 801d2f6:	bf00      	nop
 801d2f8:	20000174 	.word	0x20000174

0801d2fc <__libc_init_array>:
 801d2fc:	b570      	push	{r4, r5, r6, lr}
 801d2fe:	4d0d      	ldr	r5, [pc, #52]	@ (801d334 <__libc_init_array+0x38>)
 801d300:	4c0d      	ldr	r4, [pc, #52]	@ (801d338 <__libc_init_array+0x3c>)
 801d302:	1b64      	subs	r4, r4, r5
 801d304:	10a4      	asrs	r4, r4, #2
 801d306:	2600      	movs	r6, #0
 801d308:	42a6      	cmp	r6, r4
 801d30a:	d109      	bne.n	801d320 <__libc_init_array+0x24>
 801d30c:	4d0b      	ldr	r5, [pc, #44]	@ (801d33c <__libc_init_array+0x40>)
 801d30e:	4c0c      	ldr	r4, [pc, #48]	@ (801d340 <__libc_init_array+0x44>)
 801d310:	f003 f98a 	bl	8020628 <_init>
 801d314:	1b64      	subs	r4, r4, r5
 801d316:	10a4      	asrs	r4, r4, #2
 801d318:	2600      	movs	r6, #0
 801d31a:	42a6      	cmp	r6, r4
 801d31c:	d105      	bne.n	801d32a <__libc_init_array+0x2e>
 801d31e:	bd70      	pop	{r4, r5, r6, pc}
 801d320:	f855 3b04 	ldr.w	r3, [r5], #4
 801d324:	4798      	blx	r3
 801d326:	3601      	adds	r6, #1
 801d328:	e7ee      	b.n	801d308 <__libc_init_array+0xc>
 801d32a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d32e:	4798      	blx	r3
 801d330:	3601      	adds	r6, #1
 801d332:	e7f2      	b.n	801d31a <__libc_init_array+0x1e>
 801d334:	080230fc 	.word	0x080230fc
 801d338:	080230fc 	.word	0x080230fc
 801d33c:	080230fc 	.word	0x080230fc
 801d340:	08023100 	.word	0x08023100

0801d344 <__retarget_lock_init_recursive>:
 801d344:	4770      	bx	lr

0801d346 <__retarget_lock_acquire_recursive>:
 801d346:	4770      	bx	lr

0801d348 <__retarget_lock_release_recursive>:
 801d348:	4770      	bx	lr

0801d34a <strcpy>:
 801d34a:	4603      	mov	r3, r0
 801d34c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d350:	f803 2b01 	strb.w	r2, [r3], #1
 801d354:	2a00      	cmp	r2, #0
 801d356:	d1f9      	bne.n	801d34c <strcpy+0x2>
 801d358:	4770      	bx	lr

0801d35a <memcpy>:
 801d35a:	440a      	add	r2, r1
 801d35c:	4291      	cmp	r1, r2
 801d35e:	f100 33ff 	add.w	r3, r0, #4294967295
 801d362:	d100      	bne.n	801d366 <memcpy+0xc>
 801d364:	4770      	bx	lr
 801d366:	b510      	push	{r4, lr}
 801d368:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d36c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d370:	4291      	cmp	r1, r2
 801d372:	d1f9      	bne.n	801d368 <memcpy+0xe>
 801d374:	bd10      	pop	{r4, pc}
	...

0801d378 <nanf>:
 801d378:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801d380 <nanf+0x8>
 801d37c:	4770      	bx	lr
 801d37e:	bf00      	nop
 801d380:	7fc00000 	.word	0x7fc00000

0801d384 <__assert_func>:
 801d384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d386:	4614      	mov	r4, r2
 801d388:	461a      	mov	r2, r3
 801d38a:	4b09      	ldr	r3, [pc, #36]	@ (801d3b0 <__assert_func+0x2c>)
 801d38c:	681b      	ldr	r3, [r3, #0]
 801d38e:	4605      	mov	r5, r0
 801d390:	68d8      	ldr	r0, [r3, #12]
 801d392:	b954      	cbnz	r4, 801d3aa <__assert_func+0x26>
 801d394:	4b07      	ldr	r3, [pc, #28]	@ (801d3b4 <__assert_func+0x30>)
 801d396:	461c      	mov	r4, r3
 801d398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d39c:	9100      	str	r1, [sp, #0]
 801d39e:	462b      	mov	r3, r5
 801d3a0:	4905      	ldr	r1, [pc, #20]	@ (801d3b8 <__assert_func+0x34>)
 801d3a2:	f002 fca5 	bl	801fcf0 <fiprintf>
 801d3a6:	f002 fd53 	bl	801fe50 <abort>
 801d3aa:	4b04      	ldr	r3, [pc, #16]	@ (801d3bc <__assert_func+0x38>)
 801d3ac:	e7f4      	b.n	801d398 <__assert_func+0x14>
 801d3ae:	bf00      	nop
 801d3b0:	20000174 	.word	0x20000174
 801d3b4:	08022e52 	.word	0x08022e52
 801d3b8:	08022e24 	.word	0x08022e24
 801d3bc:	08022e17 	.word	0x08022e17

0801d3c0 <quorem>:
 801d3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3c4:	6903      	ldr	r3, [r0, #16]
 801d3c6:	690c      	ldr	r4, [r1, #16]
 801d3c8:	42a3      	cmp	r3, r4
 801d3ca:	4607      	mov	r7, r0
 801d3cc:	db7e      	blt.n	801d4cc <quorem+0x10c>
 801d3ce:	3c01      	subs	r4, #1
 801d3d0:	f101 0814 	add.w	r8, r1, #20
 801d3d4:	00a3      	lsls	r3, r4, #2
 801d3d6:	f100 0514 	add.w	r5, r0, #20
 801d3da:	9300      	str	r3, [sp, #0]
 801d3dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d3e0:	9301      	str	r3, [sp, #4]
 801d3e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d3e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d3ea:	3301      	adds	r3, #1
 801d3ec:	429a      	cmp	r2, r3
 801d3ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d3f2:	fbb2 f6f3 	udiv	r6, r2, r3
 801d3f6:	d32e      	bcc.n	801d456 <quorem+0x96>
 801d3f8:	f04f 0a00 	mov.w	sl, #0
 801d3fc:	46c4      	mov	ip, r8
 801d3fe:	46ae      	mov	lr, r5
 801d400:	46d3      	mov	fp, sl
 801d402:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d406:	b298      	uxth	r0, r3
 801d408:	fb06 a000 	mla	r0, r6, r0, sl
 801d40c:	0c02      	lsrs	r2, r0, #16
 801d40e:	0c1b      	lsrs	r3, r3, #16
 801d410:	fb06 2303 	mla	r3, r6, r3, r2
 801d414:	f8de 2000 	ldr.w	r2, [lr]
 801d418:	b280      	uxth	r0, r0
 801d41a:	b292      	uxth	r2, r2
 801d41c:	1a12      	subs	r2, r2, r0
 801d41e:	445a      	add	r2, fp
 801d420:	f8de 0000 	ldr.w	r0, [lr]
 801d424:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d428:	b29b      	uxth	r3, r3
 801d42a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d42e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d432:	b292      	uxth	r2, r2
 801d434:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d438:	45e1      	cmp	r9, ip
 801d43a:	f84e 2b04 	str.w	r2, [lr], #4
 801d43e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d442:	d2de      	bcs.n	801d402 <quorem+0x42>
 801d444:	9b00      	ldr	r3, [sp, #0]
 801d446:	58eb      	ldr	r3, [r5, r3]
 801d448:	b92b      	cbnz	r3, 801d456 <quorem+0x96>
 801d44a:	9b01      	ldr	r3, [sp, #4]
 801d44c:	3b04      	subs	r3, #4
 801d44e:	429d      	cmp	r5, r3
 801d450:	461a      	mov	r2, r3
 801d452:	d32f      	bcc.n	801d4b4 <quorem+0xf4>
 801d454:	613c      	str	r4, [r7, #16]
 801d456:	4638      	mov	r0, r7
 801d458:	f001 f90c 	bl	801e674 <__mcmp>
 801d45c:	2800      	cmp	r0, #0
 801d45e:	db25      	blt.n	801d4ac <quorem+0xec>
 801d460:	4629      	mov	r1, r5
 801d462:	2000      	movs	r0, #0
 801d464:	f858 2b04 	ldr.w	r2, [r8], #4
 801d468:	f8d1 c000 	ldr.w	ip, [r1]
 801d46c:	fa1f fe82 	uxth.w	lr, r2
 801d470:	fa1f f38c 	uxth.w	r3, ip
 801d474:	eba3 030e 	sub.w	r3, r3, lr
 801d478:	4403      	add	r3, r0
 801d47a:	0c12      	lsrs	r2, r2, #16
 801d47c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d480:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d484:	b29b      	uxth	r3, r3
 801d486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d48a:	45c1      	cmp	r9, r8
 801d48c:	f841 3b04 	str.w	r3, [r1], #4
 801d490:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d494:	d2e6      	bcs.n	801d464 <quorem+0xa4>
 801d496:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d49a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d49e:	b922      	cbnz	r2, 801d4aa <quorem+0xea>
 801d4a0:	3b04      	subs	r3, #4
 801d4a2:	429d      	cmp	r5, r3
 801d4a4:	461a      	mov	r2, r3
 801d4a6:	d30b      	bcc.n	801d4c0 <quorem+0x100>
 801d4a8:	613c      	str	r4, [r7, #16]
 801d4aa:	3601      	adds	r6, #1
 801d4ac:	4630      	mov	r0, r6
 801d4ae:	b003      	add	sp, #12
 801d4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4b4:	6812      	ldr	r2, [r2, #0]
 801d4b6:	3b04      	subs	r3, #4
 801d4b8:	2a00      	cmp	r2, #0
 801d4ba:	d1cb      	bne.n	801d454 <quorem+0x94>
 801d4bc:	3c01      	subs	r4, #1
 801d4be:	e7c6      	b.n	801d44e <quorem+0x8e>
 801d4c0:	6812      	ldr	r2, [r2, #0]
 801d4c2:	3b04      	subs	r3, #4
 801d4c4:	2a00      	cmp	r2, #0
 801d4c6:	d1ef      	bne.n	801d4a8 <quorem+0xe8>
 801d4c8:	3c01      	subs	r4, #1
 801d4ca:	e7ea      	b.n	801d4a2 <quorem+0xe2>
 801d4cc:	2000      	movs	r0, #0
 801d4ce:	e7ee      	b.n	801d4ae <quorem+0xee>

0801d4d0 <_dtoa_r>:
 801d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4d4:	69c7      	ldr	r7, [r0, #28]
 801d4d6:	b099      	sub	sp, #100	@ 0x64
 801d4d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d4dc:	ec55 4b10 	vmov	r4, r5, d0
 801d4e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801d4e2:	9109      	str	r1, [sp, #36]	@ 0x24
 801d4e4:	4683      	mov	fp, r0
 801d4e6:	920e      	str	r2, [sp, #56]	@ 0x38
 801d4e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d4ea:	b97f      	cbnz	r7, 801d50c <_dtoa_r+0x3c>
 801d4ec:	2010      	movs	r0, #16
 801d4ee:	f7fe fb9f 	bl	801bc30 <malloc>
 801d4f2:	4602      	mov	r2, r0
 801d4f4:	f8cb 001c 	str.w	r0, [fp, #28]
 801d4f8:	b920      	cbnz	r0, 801d504 <_dtoa_r+0x34>
 801d4fa:	4ba7      	ldr	r3, [pc, #668]	@ (801d798 <_dtoa_r+0x2c8>)
 801d4fc:	21ef      	movs	r1, #239	@ 0xef
 801d4fe:	48a7      	ldr	r0, [pc, #668]	@ (801d79c <_dtoa_r+0x2cc>)
 801d500:	f7ff ff40 	bl	801d384 <__assert_func>
 801d504:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d508:	6007      	str	r7, [r0, #0]
 801d50a:	60c7      	str	r7, [r0, #12]
 801d50c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d510:	6819      	ldr	r1, [r3, #0]
 801d512:	b159      	cbz	r1, 801d52c <_dtoa_r+0x5c>
 801d514:	685a      	ldr	r2, [r3, #4]
 801d516:	604a      	str	r2, [r1, #4]
 801d518:	2301      	movs	r3, #1
 801d51a:	4093      	lsls	r3, r2
 801d51c:	608b      	str	r3, [r1, #8]
 801d51e:	4658      	mov	r0, fp
 801d520:	f000 fe24 	bl	801e16c <_Bfree>
 801d524:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d528:	2200      	movs	r2, #0
 801d52a:	601a      	str	r2, [r3, #0]
 801d52c:	1e2b      	subs	r3, r5, #0
 801d52e:	bfb9      	ittee	lt
 801d530:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d534:	9303      	strlt	r3, [sp, #12]
 801d536:	2300      	movge	r3, #0
 801d538:	6033      	strge	r3, [r6, #0]
 801d53a:	9f03      	ldr	r7, [sp, #12]
 801d53c:	4b98      	ldr	r3, [pc, #608]	@ (801d7a0 <_dtoa_r+0x2d0>)
 801d53e:	bfbc      	itt	lt
 801d540:	2201      	movlt	r2, #1
 801d542:	6032      	strlt	r2, [r6, #0]
 801d544:	43bb      	bics	r3, r7
 801d546:	d112      	bne.n	801d56e <_dtoa_r+0x9e>
 801d548:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d54a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d54e:	6013      	str	r3, [r2, #0]
 801d550:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d554:	4323      	orrs	r3, r4
 801d556:	f000 854d 	beq.w	801dff4 <_dtoa_r+0xb24>
 801d55a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d55c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801d7b4 <_dtoa_r+0x2e4>
 801d560:	2b00      	cmp	r3, #0
 801d562:	f000 854f 	beq.w	801e004 <_dtoa_r+0xb34>
 801d566:	f10a 0303 	add.w	r3, sl, #3
 801d56a:	f000 bd49 	b.w	801e000 <_dtoa_r+0xb30>
 801d56e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d572:	2200      	movs	r2, #0
 801d574:	ec51 0b17 	vmov	r0, r1, d7
 801d578:	2300      	movs	r3, #0
 801d57a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801d57e:	f7e3 fabb 	bl	8000af8 <__aeabi_dcmpeq>
 801d582:	4680      	mov	r8, r0
 801d584:	b158      	cbz	r0, 801d59e <_dtoa_r+0xce>
 801d586:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d588:	2301      	movs	r3, #1
 801d58a:	6013      	str	r3, [r2, #0]
 801d58c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d58e:	b113      	cbz	r3, 801d596 <_dtoa_r+0xc6>
 801d590:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d592:	4b84      	ldr	r3, [pc, #528]	@ (801d7a4 <_dtoa_r+0x2d4>)
 801d594:	6013      	str	r3, [r2, #0]
 801d596:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801d7b8 <_dtoa_r+0x2e8>
 801d59a:	f000 bd33 	b.w	801e004 <_dtoa_r+0xb34>
 801d59e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801d5a2:	aa16      	add	r2, sp, #88	@ 0x58
 801d5a4:	a917      	add	r1, sp, #92	@ 0x5c
 801d5a6:	4658      	mov	r0, fp
 801d5a8:	f001 f984 	bl	801e8b4 <__d2b>
 801d5ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d5b0:	4681      	mov	r9, r0
 801d5b2:	2e00      	cmp	r6, #0
 801d5b4:	d077      	beq.n	801d6a6 <_dtoa_r+0x1d6>
 801d5b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d5b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801d5bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d5c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d5c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d5c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d5cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d5d0:	4619      	mov	r1, r3
 801d5d2:	2200      	movs	r2, #0
 801d5d4:	4b74      	ldr	r3, [pc, #464]	@ (801d7a8 <_dtoa_r+0x2d8>)
 801d5d6:	f7e2 fe6f 	bl	80002b8 <__aeabi_dsub>
 801d5da:	a369      	add	r3, pc, #420	@ (adr r3, 801d780 <_dtoa_r+0x2b0>)
 801d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5e0:	f7e3 f822 	bl	8000628 <__aeabi_dmul>
 801d5e4:	a368      	add	r3, pc, #416	@ (adr r3, 801d788 <_dtoa_r+0x2b8>)
 801d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5ea:	f7e2 fe67 	bl	80002bc <__adddf3>
 801d5ee:	4604      	mov	r4, r0
 801d5f0:	4630      	mov	r0, r6
 801d5f2:	460d      	mov	r5, r1
 801d5f4:	f7e2 ffae 	bl	8000554 <__aeabi_i2d>
 801d5f8:	a365      	add	r3, pc, #404	@ (adr r3, 801d790 <_dtoa_r+0x2c0>)
 801d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5fe:	f7e3 f813 	bl	8000628 <__aeabi_dmul>
 801d602:	4602      	mov	r2, r0
 801d604:	460b      	mov	r3, r1
 801d606:	4620      	mov	r0, r4
 801d608:	4629      	mov	r1, r5
 801d60a:	f7e2 fe57 	bl	80002bc <__adddf3>
 801d60e:	4604      	mov	r4, r0
 801d610:	460d      	mov	r5, r1
 801d612:	f7e3 fab9 	bl	8000b88 <__aeabi_d2iz>
 801d616:	2200      	movs	r2, #0
 801d618:	4607      	mov	r7, r0
 801d61a:	2300      	movs	r3, #0
 801d61c:	4620      	mov	r0, r4
 801d61e:	4629      	mov	r1, r5
 801d620:	f7e3 fa74 	bl	8000b0c <__aeabi_dcmplt>
 801d624:	b140      	cbz	r0, 801d638 <_dtoa_r+0x168>
 801d626:	4638      	mov	r0, r7
 801d628:	f7e2 ff94 	bl	8000554 <__aeabi_i2d>
 801d62c:	4622      	mov	r2, r4
 801d62e:	462b      	mov	r3, r5
 801d630:	f7e3 fa62 	bl	8000af8 <__aeabi_dcmpeq>
 801d634:	b900      	cbnz	r0, 801d638 <_dtoa_r+0x168>
 801d636:	3f01      	subs	r7, #1
 801d638:	2f16      	cmp	r7, #22
 801d63a:	d851      	bhi.n	801d6e0 <_dtoa_r+0x210>
 801d63c:	4b5b      	ldr	r3, [pc, #364]	@ (801d7ac <_dtoa_r+0x2dc>)
 801d63e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d642:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d64a:	f7e3 fa5f 	bl	8000b0c <__aeabi_dcmplt>
 801d64e:	2800      	cmp	r0, #0
 801d650:	d048      	beq.n	801d6e4 <_dtoa_r+0x214>
 801d652:	3f01      	subs	r7, #1
 801d654:	2300      	movs	r3, #0
 801d656:	9312      	str	r3, [sp, #72]	@ 0x48
 801d658:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d65a:	1b9b      	subs	r3, r3, r6
 801d65c:	1e5a      	subs	r2, r3, #1
 801d65e:	bf44      	itt	mi
 801d660:	f1c3 0801 	rsbmi	r8, r3, #1
 801d664:	2300      	movmi	r3, #0
 801d666:	9208      	str	r2, [sp, #32]
 801d668:	bf54      	ite	pl
 801d66a:	f04f 0800 	movpl.w	r8, #0
 801d66e:	9308      	strmi	r3, [sp, #32]
 801d670:	2f00      	cmp	r7, #0
 801d672:	db39      	blt.n	801d6e8 <_dtoa_r+0x218>
 801d674:	9b08      	ldr	r3, [sp, #32]
 801d676:	970f      	str	r7, [sp, #60]	@ 0x3c
 801d678:	443b      	add	r3, r7
 801d67a:	9308      	str	r3, [sp, #32]
 801d67c:	2300      	movs	r3, #0
 801d67e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d682:	2b09      	cmp	r3, #9
 801d684:	d864      	bhi.n	801d750 <_dtoa_r+0x280>
 801d686:	2b05      	cmp	r3, #5
 801d688:	bfc4      	itt	gt
 801d68a:	3b04      	subgt	r3, #4
 801d68c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801d68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d690:	f1a3 0302 	sub.w	r3, r3, #2
 801d694:	bfcc      	ite	gt
 801d696:	2400      	movgt	r4, #0
 801d698:	2401      	movle	r4, #1
 801d69a:	2b03      	cmp	r3, #3
 801d69c:	d863      	bhi.n	801d766 <_dtoa_r+0x296>
 801d69e:	e8df f003 	tbb	[pc, r3]
 801d6a2:	372a      	.short	0x372a
 801d6a4:	5535      	.short	0x5535
 801d6a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801d6aa:	441e      	add	r6, r3
 801d6ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d6b0:	2b20      	cmp	r3, #32
 801d6b2:	bfc1      	itttt	gt
 801d6b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d6b8:	409f      	lslgt	r7, r3
 801d6ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d6be:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d6c2:	bfd6      	itet	le
 801d6c4:	f1c3 0320 	rsble	r3, r3, #32
 801d6c8:	ea47 0003 	orrgt.w	r0, r7, r3
 801d6cc:	fa04 f003 	lslle.w	r0, r4, r3
 801d6d0:	f7e2 ff30 	bl	8000534 <__aeabi_ui2d>
 801d6d4:	2201      	movs	r2, #1
 801d6d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d6da:	3e01      	subs	r6, #1
 801d6dc:	9214      	str	r2, [sp, #80]	@ 0x50
 801d6de:	e777      	b.n	801d5d0 <_dtoa_r+0x100>
 801d6e0:	2301      	movs	r3, #1
 801d6e2:	e7b8      	b.n	801d656 <_dtoa_r+0x186>
 801d6e4:	9012      	str	r0, [sp, #72]	@ 0x48
 801d6e6:	e7b7      	b.n	801d658 <_dtoa_r+0x188>
 801d6e8:	427b      	negs	r3, r7
 801d6ea:	930a      	str	r3, [sp, #40]	@ 0x28
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	eba8 0807 	sub.w	r8, r8, r7
 801d6f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d6f4:	e7c4      	b.n	801d680 <_dtoa_r+0x1b0>
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d6fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	dc35      	bgt.n	801d76c <_dtoa_r+0x29c>
 801d700:	2301      	movs	r3, #1
 801d702:	9300      	str	r3, [sp, #0]
 801d704:	9307      	str	r3, [sp, #28]
 801d706:	461a      	mov	r2, r3
 801d708:	920e      	str	r2, [sp, #56]	@ 0x38
 801d70a:	e00b      	b.n	801d724 <_dtoa_r+0x254>
 801d70c:	2301      	movs	r3, #1
 801d70e:	e7f3      	b.n	801d6f8 <_dtoa_r+0x228>
 801d710:	2300      	movs	r3, #0
 801d712:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d714:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d716:	18fb      	adds	r3, r7, r3
 801d718:	9300      	str	r3, [sp, #0]
 801d71a:	3301      	adds	r3, #1
 801d71c:	2b01      	cmp	r3, #1
 801d71e:	9307      	str	r3, [sp, #28]
 801d720:	bfb8      	it	lt
 801d722:	2301      	movlt	r3, #1
 801d724:	f8db 001c 	ldr.w	r0, [fp, #28]
 801d728:	2100      	movs	r1, #0
 801d72a:	2204      	movs	r2, #4
 801d72c:	f102 0514 	add.w	r5, r2, #20
 801d730:	429d      	cmp	r5, r3
 801d732:	d91f      	bls.n	801d774 <_dtoa_r+0x2a4>
 801d734:	6041      	str	r1, [r0, #4]
 801d736:	4658      	mov	r0, fp
 801d738:	f000 fcd8 	bl	801e0ec <_Balloc>
 801d73c:	4682      	mov	sl, r0
 801d73e:	2800      	cmp	r0, #0
 801d740:	d13c      	bne.n	801d7bc <_dtoa_r+0x2ec>
 801d742:	4b1b      	ldr	r3, [pc, #108]	@ (801d7b0 <_dtoa_r+0x2e0>)
 801d744:	4602      	mov	r2, r0
 801d746:	f240 11af 	movw	r1, #431	@ 0x1af
 801d74a:	e6d8      	b.n	801d4fe <_dtoa_r+0x2e>
 801d74c:	2301      	movs	r3, #1
 801d74e:	e7e0      	b.n	801d712 <_dtoa_r+0x242>
 801d750:	2401      	movs	r4, #1
 801d752:	2300      	movs	r3, #0
 801d754:	9309      	str	r3, [sp, #36]	@ 0x24
 801d756:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d758:	f04f 33ff 	mov.w	r3, #4294967295
 801d75c:	9300      	str	r3, [sp, #0]
 801d75e:	9307      	str	r3, [sp, #28]
 801d760:	2200      	movs	r2, #0
 801d762:	2312      	movs	r3, #18
 801d764:	e7d0      	b.n	801d708 <_dtoa_r+0x238>
 801d766:	2301      	movs	r3, #1
 801d768:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d76a:	e7f5      	b.n	801d758 <_dtoa_r+0x288>
 801d76c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d76e:	9300      	str	r3, [sp, #0]
 801d770:	9307      	str	r3, [sp, #28]
 801d772:	e7d7      	b.n	801d724 <_dtoa_r+0x254>
 801d774:	3101      	adds	r1, #1
 801d776:	0052      	lsls	r2, r2, #1
 801d778:	e7d8      	b.n	801d72c <_dtoa_r+0x25c>
 801d77a:	bf00      	nop
 801d77c:	f3af 8000 	nop.w
 801d780:	636f4361 	.word	0x636f4361
 801d784:	3fd287a7 	.word	0x3fd287a7
 801d788:	8b60c8b3 	.word	0x8b60c8b3
 801d78c:	3fc68a28 	.word	0x3fc68a28
 801d790:	509f79fb 	.word	0x509f79fb
 801d794:	3fd34413 	.word	0x3fd34413
 801d798:	08022da6 	.word	0x08022da6
 801d79c:	08022e60 	.word	0x08022e60
 801d7a0:	7ff00000 	.word	0x7ff00000
 801d7a4:	08022d7e 	.word	0x08022d7e
 801d7a8:	3ff80000 	.word	0x3ff80000
 801d7ac:	08022f58 	.word	0x08022f58
 801d7b0:	08022eb8 	.word	0x08022eb8
 801d7b4:	08022e5c 	.word	0x08022e5c
 801d7b8:	08022d7d 	.word	0x08022d7d
 801d7bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d7c0:	6018      	str	r0, [r3, #0]
 801d7c2:	9b07      	ldr	r3, [sp, #28]
 801d7c4:	2b0e      	cmp	r3, #14
 801d7c6:	f200 80a4 	bhi.w	801d912 <_dtoa_r+0x442>
 801d7ca:	2c00      	cmp	r4, #0
 801d7cc:	f000 80a1 	beq.w	801d912 <_dtoa_r+0x442>
 801d7d0:	2f00      	cmp	r7, #0
 801d7d2:	dd33      	ble.n	801d83c <_dtoa_r+0x36c>
 801d7d4:	4bad      	ldr	r3, [pc, #692]	@ (801da8c <_dtoa_r+0x5bc>)
 801d7d6:	f007 020f 	and.w	r2, r7, #15
 801d7da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d7de:	ed93 7b00 	vldr	d7, [r3]
 801d7e2:	05f8      	lsls	r0, r7, #23
 801d7e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d7e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801d7ec:	d516      	bpl.n	801d81c <_dtoa_r+0x34c>
 801d7ee:	4ba8      	ldr	r3, [pc, #672]	@ (801da90 <_dtoa_r+0x5c0>)
 801d7f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d7f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d7f8:	f7e3 f840 	bl	800087c <__aeabi_ddiv>
 801d7fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d800:	f004 040f 	and.w	r4, r4, #15
 801d804:	2603      	movs	r6, #3
 801d806:	4da2      	ldr	r5, [pc, #648]	@ (801da90 <_dtoa_r+0x5c0>)
 801d808:	b954      	cbnz	r4, 801d820 <_dtoa_r+0x350>
 801d80a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d80e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d812:	f7e3 f833 	bl	800087c <__aeabi_ddiv>
 801d816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d81a:	e028      	b.n	801d86e <_dtoa_r+0x39e>
 801d81c:	2602      	movs	r6, #2
 801d81e:	e7f2      	b.n	801d806 <_dtoa_r+0x336>
 801d820:	07e1      	lsls	r1, r4, #31
 801d822:	d508      	bpl.n	801d836 <_dtoa_r+0x366>
 801d824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d828:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d82c:	f7e2 fefc 	bl	8000628 <__aeabi_dmul>
 801d830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d834:	3601      	adds	r6, #1
 801d836:	1064      	asrs	r4, r4, #1
 801d838:	3508      	adds	r5, #8
 801d83a:	e7e5      	b.n	801d808 <_dtoa_r+0x338>
 801d83c:	f000 80d2 	beq.w	801d9e4 <_dtoa_r+0x514>
 801d840:	427c      	negs	r4, r7
 801d842:	4b92      	ldr	r3, [pc, #584]	@ (801da8c <_dtoa_r+0x5bc>)
 801d844:	4d92      	ldr	r5, [pc, #584]	@ (801da90 <_dtoa_r+0x5c0>)
 801d846:	f004 020f 	and.w	r2, r4, #15
 801d84a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d852:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d856:	f7e2 fee7 	bl	8000628 <__aeabi_dmul>
 801d85a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d85e:	1124      	asrs	r4, r4, #4
 801d860:	2300      	movs	r3, #0
 801d862:	2602      	movs	r6, #2
 801d864:	2c00      	cmp	r4, #0
 801d866:	f040 80b2 	bne.w	801d9ce <_dtoa_r+0x4fe>
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d1d3      	bne.n	801d816 <_dtoa_r+0x346>
 801d86e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d870:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d874:	2b00      	cmp	r3, #0
 801d876:	f000 80b7 	beq.w	801d9e8 <_dtoa_r+0x518>
 801d87a:	4b86      	ldr	r3, [pc, #536]	@ (801da94 <_dtoa_r+0x5c4>)
 801d87c:	2200      	movs	r2, #0
 801d87e:	4620      	mov	r0, r4
 801d880:	4629      	mov	r1, r5
 801d882:	f7e3 f943 	bl	8000b0c <__aeabi_dcmplt>
 801d886:	2800      	cmp	r0, #0
 801d888:	f000 80ae 	beq.w	801d9e8 <_dtoa_r+0x518>
 801d88c:	9b07      	ldr	r3, [sp, #28]
 801d88e:	2b00      	cmp	r3, #0
 801d890:	f000 80aa 	beq.w	801d9e8 <_dtoa_r+0x518>
 801d894:	9b00      	ldr	r3, [sp, #0]
 801d896:	2b00      	cmp	r3, #0
 801d898:	dd37      	ble.n	801d90a <_dtoa_r+0x43a>
 801d89a:	1e7b      	subs	r3, r7, #1
 801d89c:	9304      	str	r3, [sp, #16]
 801d89e:	4620      	mov	r0, r4
 801d8a0:	4b7d      	ldr	r3, [pc, #500]	@ (801da98 <_dtoa_r+0x5c8>)
 801d8a2:	2200      	movs	r2, #0
 801d8a4:	4629      	mov	r1, r5
 801d8a6:	f7e2 febf 	bl	8000628 <__aeabi_dmul>
 801d8aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d8ae:	9c00      	ldr	r4, [sp, #0]
 801d8b0:	3601      	adds	r6, #1
 801d8b2:	4630      	mov	r0, r6
 801d8b4:	f7e2 fe4e 	bl	8000554 <__aeabi_i2d>
 801d8b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d8bc:	f7e2 feb4 	bl	8000628 <__aeabi_dmul>
 801d8c0:	4b76      	ldr	r3, [pc, #472]	@ (801da9c <_dtoa_r+0x5cc>)
 801d8c2:	2200      	movs	r2, #0
 801d8c4:	f7e2 fcfa 	bl	80002bc <__adddf3>
 801d8c8:	4605      	mov	r5, r0
 801d8ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801d8ce:	2c00      	cmp	r4, #0
 801d8d0:	f040 808d 	bne.w	801d9ee <_dtoa_r+0x51e>
 801d8d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d8d8:	4b71      	ldr	r3, [pc, #452]	@ (801daa0 <_dtoa_r+0x5d0>)
 801d8da:	2200      	movs	r2, #0
 801d8dc:	f7e2 fcec 	bl	80002b8 <__aeabi_dsub>
 801d8e0:	4602      	mov	r2, r0
 801d8e2:	460b      	mov	r3, r1
 801d8e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d8e8:	462a      	mov	r2, r5
 801d8ea:	4633      	mov	r3, r6
 801d8ec:	f7e3 f92c 	bl	8000b48 <__aeabi_dcmpgt>
 801d8f0:	2800      	cmp	r0, #0
 801d8f2:	f040 828b 	bne.w	801de0c <_dtoa_r+0x93c>
 801d8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d8fa:	462a      	mov	r2, r5
 801d8fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d900:	f7e3 f904 	bl	8000b0c <__aeabi_dcmplt>
 801d904:	2800      	cmp	r0, #0
 801d906:	f040 8128 	bne.w	801db5a <_dtoa_r+0x68a>
 801d90a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801d90e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d912:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d914:	2b00      	cmp	r3, #0
 801d916:	f2c0 815a 	blt.w	801dbce <_dtoa_r+0x6fe>
 801d91a:	2f0e      	cmp	r7, #14
 801d91c:	f300 8157 	bgt.w	801dbce <_dtoa_r+0x6fe>
 801d920:	4b5a      	ldr	r3, [pc, #360]	@ (801da8c <_dtoa_r+0x5bc>)
 801d922:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d926:	ed93 7b00 	vldr	d7, [r3]
 801d92a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	ed8d 7b00 	vstr	d7, [sp]
 801d932:	da03      	bge.n	801d93c <_dtoa_r+0x46c>
 801d934:	9b07      	ldr	r3, [sp, #28]
 801d936:	2b00      	cmp	r3, #0
 801d938:	f340 8101 	ble.w	801db3e <_dtoa_r+0x66e>
 801d93c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d940:	4656      	mov	r6, sl
 801d942:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d946:	4620      	mov	r0, r4
 801d948:	4629      	mov	r1, r5
 801d94a:	f7e2 ff97 	bl	800087c <__aeabi_ddiv>
 801d94e:	f7e3 f91b 	bl	8000b88 <__aeabi_d2iz>
 801d952:	4680      	mov	r8, r0
 801d954:	f7e2 fdfe 	bl	8000554 <__aeabi_i2d>
 801d958:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d95c:	f7e2 fe64 	bl	8000628 <__aeabi_dmul>
 801d960:	4602      	mov	r2, r0
 801d962:	460b      	mov	r3, r1
 801d964:	4620      	mov	r0, r4
 801d966:	4629      	mov	r1, r5
 801d968:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d96c:	f7e2 fca4 	bl	80002b8 <__aeabi_dsub>
 801d970:	f806 4b01 	strb.w	r4, [r6], #1
 801d974:	9d07      	ldr	r5, [sp, #28]
 801d976:	eba6 040a 	sub.w	r4, r6, sl
 801d97a:	42a5      	cmp	r5, r4
 801d97c:	4602      	mov	r2, r0
 801d97e:	460b      	mov	r3, r1
 801d980:	f040 8117 	bne.w	801dbb2 <_dtoa_r+0x6e2>
 801d984:	f7e2 fc9a 	bl	80002bc <__adddf3>
 801d988:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d98c:	4604      	mov	r4, r0
 801d98e:	460d      	mov	r5, r1
 801d990:	f7e3 f8da 	bl	8000b48 <__aeabi_dcmpgt>
 801d994:	2800      	cmp	r0, #0
 801d996:	f040 80f9 	bne.w	801db8c <_dtoa_r+0x6bc>
 801d99a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d99e:	4620      	mov	r0, r4
 801d9a0:	4629      	mov	r1, r5
 801d9a2:	f7e3 f8a9 	bl	8000af8 <__aeabi_dcmpeq>
 801d9a6:	b118      	cbz	r0, 801d9b0 <_dtoa_r+0x4e0>
 801d9a8:	f018 0f01 	tst.w	r8, #1
 801d9ac:	f040 80ee 	bne.w	801db8c <_dtoa_r+0x6bc>
 801d9b0:	4649      	mov	r1, r9
 801d9b2:	4658      	mov	r0, fp
 801d9b4:	f000 fbda 	bl	801e16c <_Bfree>
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	7033      	strb	r3, [r6, #0]
 801d9bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d9be:	3701      	adds	r7, #1
 801d9c0:	601f      	str	r7, [r3, #0]
 801d9c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	f000 831d 	beq.w	801e004 <_dtoa_r+0xb34>
 801d9ca:	601e      	str	r6, [r3, #0]
 801d9cc:	e31a      	b.n	801e004 <_dtoa_r+0xb34>
 801d9ce:	07e2      	lsls	r2, r4, #31
 801d9d0:	d505      	bpl.n	801d9de <_dtoa_r+0x50e>
 801d9d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d9d6:	f7e2 fe27 	bl	8000628 <__aeabi_dmul>
 801d9da:	3601      	adds	r6, #1
 801d9dc:	2301      	movs	r3, #1
 801d9de:	1064      	asrs	r4, r4, #1
 801d9e0:	3508      	adds	r5, #8
 801d9e2:	e73f      	b.n	801d864 <_dtoa_r+0x394>
 801d9e4:	2602      	movs	r6, #2
 801d9e6:	e742      	b.n	801d86e <_dtoa_r+0x39e>
 801d9e8:	9c07      	ldr	r4, [sp, #28]
 801d9ea:	9704      	str	r7, [sp, #16]
 801d9ec:	e761      	b.n	801d8b2 <_dtoa_r+0x3e2>
 801d9ee:	4b27      	ldr	r3, [pc, #156]	@ (801da8c <_dtoa_r+0x5bc>)
 801d9f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d9f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d9f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d9fa:	4454      	add	r4, sl
 801d9fc:	2900      	cmp	r1, #0
 801d9fe:	d053      	beq.n	801daa8 <_dtoa_r+0x5d8>
 801da00:	4928      	ldr	r1, [pc, #160]	@ (801daa4 <_dtoa_r+0x5d4>)
 801da02:	2000      	movs	r0, #0
 801da04:	f7e2 ff3a 	bl	800087c <__aeabi_ddiv>
 801da08:	4633      	mov	r3, r6
 801da0a:	462a      	mov	r2, r5
 801da0c:	f7e2 fc54 	bl	80002b8 <__aeabi_dsub>
 801da10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801da14:	4656      	mov	r6, sl
 801da16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801da1a:	f7e3 f8b5 	bl	8000b88 <__aeabi_d2iz>
 801da1e:	4605      	mov	r5, r0
 801da20:	f7e2 fd98 	bl	8000554 <__aeabi_i2d>
 801da24:	4602      	mov	r2, r0
 801da26:	460b      	mov	r3, r1
 801da28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801da2c:	f7e2 fc44 	bl	80002b8 <__aeabi_dsub>
 801da30:	3530      	adds	r5, #48	@ 0x30
 801da32:	4602      	mov	r2, r0
 801da34:	460b      	mov	r3, r1
 801da36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801da3a:	f806 5b01 	strb.w	r5, [r6], #1
 801da3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801da42:	f7e3 f863 	bl	8000b0c <__aeabi_dcmplt>
 801da46:	2800      	cmp	r0, #0
 801da48:	d171      	bne.n	801db2e <_dtoa_r+0x65e>
 801da4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801da4e:	4911      	ldr	r1, [pc, #68]	@ (801da94 <_dtoa_r+0x5c4>)
 801da50:	2000      	movs	r0, #0
 801da52:	f7e2 fc31 	bl	80002b8 <__aeabi_dsub>
 801da56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801da5a:	f7e3 f857 	bl	8000b0c <__aeabi_dcmplt>
 801da5e:	2800      	cmp	r0, #0
 801da60:	f040 8095 	bne.w	801db8e <_dtoa_r+0x6be>
 801da64:	42a6      	cmp	r6, r4
 801da66:	f43f af50 	beq.w	801d90a <_dtoa_r+0x43a>
 801da6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801da6e:	4b0a      	ldr	r3, [pc, #40]	@ (801da98 <_dtoa_r+0x5c8>)
 801da70:	2200      	movs	r2, #0
 801da72:	f7e2 fdd9 	bl	8000628 <__aeabi_dmul>
 801da76:	4b08      	ldr	r3, [pc, #32]	@ (801da98 <_dtoa_r+0x5c8>)
 801da78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801da7c:	2200      	movs	r2, #0
 801da7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801da82:	f7e2 fdd1 	bl	8000628 <__aeabi_dmul>
 801da86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801da8a:	e7c4      	b.n	801da16 <_dtoa_r+0x546>
 801da8c:	08022f58 	.word	0x08022f58
 801da90:	08022f30 	.word	0x08022f30
 801da94:	3ff00000 	.word	0x3ff00000
 801da98:	40240000 	.word	0x40240000
 801da9c:	401c0000 	.word	0x401c0000
 801daa0:	40140000 	.word	0x40140000
 801daa4:	3fe00000 	.word	0x3fe00000
 801daa8:	4631      	mov	r1, r6
 801daaa:	4628      	mov	r0, r5
 801daac:	f7e2 fdbc 	bl	8000628 <__aeabi_dmul>
 801dab0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dab4:	9415      	str	r4, [sp, #84]	@ 0x54
 801dab6:	4656      	mov	r6, sl
 801dab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dabc:	f7e3 f864 	bl	8000b88 <__aeabi_d2iz>
 801dac0:	4605      	mov	r5, r0
 801dac2:	f7e2 fd47 	bl	8000554 <__aeabi_i2d>
 801dac6:	4602      	mov	r2, r0
 801dac8:	460b      	mov	r3, r1
 801daca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dace:	f7e2 fbf3 	bl	80002b8 <__aeabi_dsub>
 801dad2:	3530      	adds	r5, #48	@ 0x30
 801dad4:	f806 5b01 	strb.w	r5, [r6], #1
 801dad8:	4602      	mov	r2, r0
 801dada:	460b      	mov	r3, r1
 801dadc:	42a6      	cmp	r6, r4
 801dade:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dae2:	f04f 0200 	mov.w	r2, #0
 801dae6:	d124      	bne.n	801db32 <_dtoa_r+0x662>
 801dae8:	4bac      	ldr	r3, [pc, #688]	@ (801dd9c <_dtoa_r+0x8cc>)
 801daea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801daee:	f7e2 fbe5 	bl	80002bc <__adddf3>
 801daf2:	4602      	mov	r2, r0
 801daf4:	460b      	mov	r3, r1
 801daf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dafa:	f7e3 f825 	bl	8000b48 <__aeabi_dcmpgt>
 801dafe:	2800      	cmp	r0, #0
 801db00:	d145      	bne.n	801db8e <_dtoa_r+0x6be>
 801db02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801db06:	49a5      	ldr	r1, [pc, #660]	@ (801dd9c <_dtoa_r+0x8cc>)
 801db08:	2000      	movs	r0, #0
 801db0a:	f7e2 fbd5 	bl	80002b8 <__aeabi_dsub>
 801db0e:	4602      	mov	r2, r0
 801db10:	460b      	mov	r3, r1
 801db12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801db16:	f7e2 fff9 	bl	8000b0c <__aeabi_dcmplt>
 801db1a:	2800      	cmp	r0, #0
 801db1c:	f43f aef5 	beq.w	801d90a <_dtoa_r+0x43a>
 801db20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801db22:	1e73      	subs	r3, r6, #1
 801db24:	9315      	str	r3, [sp, #84]	@ 0x54
 801db26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801db2a:	2b30      	cmp	r3, #48	@ 0x30
 801db2c:	d0f8      	beq.n	801db20 <_dtoa_r+0x650>
 801db2e:	9f04      	ldr	r7, [sp, #16]
 801db30:	e73e      	b.n	801d9b0 <_dtoa_r+0x4e0>
 801db32:	4b9b      	ldr	r3, [pc, #620]	@ (801dda0 <_dtoa_r+0x8d0>)
 801db34:	f7e2 fd78 	bl	8000628 <__aeabi_dmul>
 801db38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db3c:	e7bc      	b.n	801dab8 <_dtoa_r+0x5e8>
 801db3e:	d10c      	bne.n	801db5a <_dtoa_r+0x68a>
 801db40:	4b98      	ldr	r3, [pc, #608]	@ (801dda4 <_dtoa_r+0x8d4>)
 801db42:	2200      	movs	r2, #0
 801db44:	e9dd 0100 	ldrd	r0, r1, [sp]
 801db48:	f7e2 fd6e 	bl	8000628 <__aeabi_dmul>
 801db4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801db50:	f7e2 fff0 	bl	8000b34 <__aeabi_dcmpge>
 801db54:	2800      	cmp	r0, #0
 801db56:	f000 8157 	beq.w	801de08 <_dtoa_r+0x938>
 801db5a:	2400      	movs	r4, #0
 801db5c:	4625      	mov	r5, r4
 801db5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db60:	43db      	mvns	r3, r3
 801db62:	9304      	str	r3, [sp, #16]
 801db64:	4656      	mov	r6, sl
 801db66:	2700      	movs	r7, #0
 801db68:	4621      	mov	r1, r4
 801db6a:	4658      	mov	r0, fp
 801db6c:	f000 fafe 	bl	801e16c <_Bfree>
 801db70:	2d00      	cmp	r5, #0
 801db72:	d0dc      	beq.n	801db2e <_dtoa_r+0x65e>
 801db74:	b12f      	cbz	r7, 801db82 <_dtoa_r+0x6b2>
 801db76:	42af      	cmp	r7, r5
 801db78:	d003      	beq.n	801db82 <_dtoa_r+0x6b2>
 801db7a:	4639      	mov	r1, r7
 801db7c:	4658      	mov	r0, fp
 801db7e:	f000 faf5 	bl	801e16c <_Bfree>
 801db82:	4629      	mov	r1, r5
 801db84:	4658      	mov	r0, fp
 801db86:	f000 faf1 	bl	801e16c <_Bfree>
 801db8a:	e7d0      	b.n	801db2e <_dtoa_r+0x65e>
 801db8c:	9704      	str	r7, [sp, #16]
 801db8e:	4633      	mov	r3, r6
 801db90:	461e      	mov	r6, r3
 801db92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801db96:	2a39      	cmp	r2, #57	@ 0x39
 801db98:	d107      	bne.n	801dbaa <_dtoa_r+0x6da>
 801db9a:	459a      	cmp	sl, r3
 801db9c:	d1f8      	bne.n	801db90 <_dtoa_r+0x6c0>
 801db9e:	9a04      	ldr	r2, [sp, #16]
 801dba0:	3201      	adds	r2, #1
 801dba2:	9204      	str	r2, [sp, #16]
 801dba4:	2230      	movs	r2, #48	@ 0x30
 801dba6:	f88a 2000 	strb.w	r2, [sl]
 801dbaa:	781a      	ldrb	r2, [r3, #0]
 801dbac:	3201      	adds	r2, #1
 801dbae:	701a      	strb	r2, [r3, #0]
 801dbb0:	e7bd      	b.n	801db2e <_dtoa_r+0x65e>
 801dbb2:	4b7b      	ldr	r3, [pc, #492]	@ (801dda0 <_dtoa_r+0x8d0>)
 801dbb4:	2200      	movs	r2, #0
 801dbb6:	f7e2 fd37 	bl	8000628 <__aeabi_dmul>
 801dbba:	2200      	movs	r2, #0
 801dbbc:	2300      	movs	r3, #0
 801dbbe:	4604      	mov	r4, r0
 801dbc0:	460d      	mov	r5, r1
 801dbc2:	f7e2 ff99 	bl	8000af8 <__aeabi_dcmpeq>
 801dbc6:	2800      	cmp	r0, #0
 801dbc8:	f43f aebb 	beq.w	801d942 <_dtoa_r+0x472>
 801dbcc:	e6f0      	b.n	801d9b0 <_dtoa_r+0x4e0>
 801dbce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dbd0:	2a00      	cmp	r2, #0
 801dbd2:	f000 80db 	beq.w	801dd8c <_dtoa_r+0x8bc>
 801dbd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dbd8:	2a01      	cmp	r2, #1
 801dbda:	f300 80bf 	bgt.w	801dd5c <_dtoa_r+0x88c>
 801dbde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dbe0:	2a00      	cmp	r2, #0
 801dbe2:	f000 80b7 	beq.w	801dd54 <_dtoa_r+0x884>
 801dbe6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801dbea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dbec:	4646      	mov	r6, r8
 801dbee:	9a08      	ldr	r2, [sp, #32]
 801dbf0:	2101      	movs	r1, #1
 801dbf2:	441a      	add	r2, r3
 801dbf4:	4658      	mov	r0, fp
 801dbf6:	4498      	add	r8, r3
 801dbf8:	9208      	str	r2, [sp, #32]
 801dbfa:	f000 fbb5 	bl	801e368 <__i2b>
 801dbfe:	4605      	mov	r5, r0
 801dc00:	b15e      	cbz	r6, 801dc1a <_dtoa_r+0x74a>
 801dc02:	9b08      	ldr	r3, [sp, #32]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	dd08      	ble.n	801dc1a <_dtoa_r+0x74a>
 801dc08:	42b3      	cmp	r3, r6
 801dc0a:	9a08      	ldr	r2, [sp, #32]
 801dc0c:	bfa8      	it	ge
 801dc0e:	4633      	movge	r3, r6
 801dc10:	eba8 0803 	sub.w	r8, r8, r3
 801dc14:	1af6      	subs	r6, r6, r3
 801dc16:	1ad3      	subs	r3, r2, r3
 801dc18:	9308      	str	r3, [sp, #32]
 801dc1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc1c:	b1f3      	cbz	r3, 801dc5c <_dtoa_r+0x78c>
 801dc1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	f000 80b7 	beq.w	801dd94 <_dtoa_r+0x8c4>
 801dc26:	b18c      	cbz	r4, 801dc4c <_dtoa_r+0x77c>
 801dc28:	4629      	mov	r1, r5
 801dc2a:	4622      	mov	r2, r4
 801dc2c:	4658      	mov	r0, fp
 801dc2e:	f000 fc5b 	bl	801e4e8 <__pow5mult>
 801dc32:	464a      	mov	r2, r9
 801dc34:	4601      	mov	r1, r0
 801dc36:	4605      	mov	r5, r0
 801dc38:	4658      	mov	r0, fp
 801dc3a:	f000 fbab 	bl	801e394 <__multiply>
 801dc3e:	4649      	mov	r1, r9
 801dc40:	9004      	str	r0, [sp, #16]
 801dc42:	4658      	mov	r0, fp
 801dc44:	f000 fa92 	bl	801e16c <_Bfree>
 801dc48:	9b04      	ldr	r3, [sp, #16]
 801dc4a:	4699      	mov	r9, r3
 801dc4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc4e:	1b1a      	subs	r2, r3, r4
 801dc50:	d004      	beq.n	801dc5c <_dtoa_r+0x78c>
 801dc52:	4649      	mov	r1, r9
 801dc54:	4658      	mov	r0, fp
 801dc56:	f000 fc47 	bl	801e4e8 <__pow5mult>
 801dc5a:	4681      	mov	r9, r0
 801dc5c:	2101      	movs	r1, #1
 801dc5e:	4658      	mov	r0, fp
 801dc60:	f000 fb82 	bl	801e368 <__i2b>
 801dc64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dc66:	4604      	mov	r4, r0
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	f000 81cf 	beq.w	801e00c <_dtoa_r+0xb3c>
 801dc6e:	461a      	mov	r2, r3
 801dc70:	4601      	mov	r1, r0
 801dc72:	4658      	mov	r0, fp
 801dc74:	f000 fc38 	bl	801e4e8 <__pow5mult>
 801dc78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc7a:	2b01      	cmp	r3, #1
 801dc7c:	4604      	mov	r4, r0
 801dc7e:	f300 8095 	bgt.w	801ddac <_dtoa_r+0x8dc>
 801dc82:	9b02      	ldr	r3, [sp, #8]
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	f040 8087 	bne.w	801dd98 <_dtoa_r+0x8c8>
 801dc8a:	9b03      	ldr	r3, [sp, #12]
 801dc8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	f040 8089 	bne.w	801dda8 <_dtoa_r+0x8d8>
 801dc96:	9b03      	ldr	r3, [sp, #12]
 801dc98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801dc9c:	0d1b      	lsrs	r3, r3, #20
 801dc9e:	051b      	lsls	r3, r3, #20
 801dca0:	b12b      	cbz	r3, 801dcae <_dtoa_r+0x7de>
 801dca2:	9b08      	ldr	r3, [sp, #32]
 801dca4:	3301      	adds	r3, #1
 801dca6:	9308      	str	r3, [sp, #32]
 801dca8:	f108 0801 	add.w	r8, r8, #1
 801dcac:	2301      	movs	r3, #1
 801dcae:	930a      	str	r3, [sp, #40]	@ 0x28
 801dcb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	f000 81b0 	beq.w	801e018 <_dtoa_r+0xb48>
 801dcb8:	6923      	ldr	r3, [r4, #16]
 801dcba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801dcbe:	6918      	ldr	r0, [r3, #16]
 801dcc0:	f000 fb06 	bl	801e2d0 <__hi0bits>
 801dcc4:	f1c0 0020 	rsb	r0, r0, #32
 801dcc8:	9b08      	ldr	r3, [sp, #32]
 801dcca:	4418      	add	r0, r3
 801dccc:	f010 001f 	ands.w	r0, r0, #31
 801dcd0:	d077      	beq.n	801ddc2 <_dtoa_r+0x8f2>
 801dcd2:	f1c0 0320 	rsb	r3, r0, #32
 801dcd6:	2b04      	cmp	r3, #4
 801dcd8:	dd6b      	ble.n	801ddb2 <_dtoa_r+0x8e2>
 801dcda:	9b08      	ldr	r3, [sp, #32]
 801dcdc:	f1c0 001c 	rsb	r0, r0, #28
 801dce0:	4403      	add	r3, r0
 801dce2:	4480      	add	r8, r0
 801dce4:	4406      	add	r6, r0
 801dce6:	9308      	str	r3, [sp, #32]
 801dce8:	f1b8 0f00 	cmp.w	r8, #0
 801dcec:	dd05      	ble.n	801dcfa <_dtoa_r+0x82a>
 801dcee:	4649      	mov	r1, r9
 801dcf0:	4642      	mov	r2, r8
 801dcf2:	4658      	mov	r0, fp
 801dcf4:	f000 fc52 	bl	801e59c <__lshift>
 801dcf8:	4681      	mov	r9, r0
 801dcfa:	9b08      	ldr	r3, [sp, #32]
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	dd05      	ble.n	801dd0c <_dtoa_r+0x83c>
 801dd00:	4621      	mov	r1, r4
 801dd02:	461a      	mov	r2, r3
 801dd04:	4658      	mov	r0, fp
 801dd06:	f000 fc49 	bl	801e59c <__lshift>
 801dd0a:	4604      	mov	r4, r0
 801dd0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d059      	beq.n	801ddc6 <_dtoa_r+0x8f6>
 801dd12:	4621      	mov	r1, r4
 801dd14:	4648      	mov	r0, r9
 801dd16:	f000 fcad 	bl	801e674 <__mcmp>
 801dd1a:	2800      	cmp	r0, #0
 801dd1c:	da53      	bge.n	801ddc6 <_dtoa_r+0x8f6>
 801dd1e:	1e7b      	subs	r3, r7, #1
 801dd20:	9304      	str	r3, [sp, #16]
 801dd22:	4649      	mov	r1, r9
 801dd24:	2300      	movs	r3, #0
 801dd26:	220a      	movs	r2, #10
 801dd28:	4658      	mov	r0, fp
 801dd2a:	f000 fa41 	bl	801e1b0 <__multadd>
 801dd2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dd30:	4681      	mov	r9, r0
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	f000 8172 	beq.w	801e01c <_dtoa_r+0xb4c>
 801dd38:	2300      	movs	r3, #0
 801dd3a:	4629      	mov	r1, r5
 801dd3c:	220a      	movs	r2, #10
 801dd3e:	4658      	mov	r0, fp
 801dd40:	f000 fa36 	bl	801e1b0 <__multadd>
 801dd44:	9b00      	ldr	r3, [sp, #0]
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	4605      	mov	r5, r0
 801dd4a:	dc67      	bgt.n	801de1c <_dtoa_r+0x94c>
 801dd4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd4e:	2b02      	cmp	r3, #2
 801dd50:	dc41      	bgt.n	801ddd6 <_dtoa_r+0x906>
 801dd52:	e063      	b.n	801de1c <_dtoa_r+0x94c>
 801dd54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dd56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801dd5a:	e746      	b.n	801dbea <_dtoa_r+0x71a>
 801dd5c:	9b07      	ldr	r3, [sp, #28]
 801dd5e:	1e5c      	subs	r4, r3, #1
 801dd60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd62:	42a3      	cmp	r3, r4
 801dd64:	bfbf      	itttt	lt
 801dd66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801dd68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801dd6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801dd6c:	1ae3      	sublt	r3, r4, r3
 801dd6e:	bfb4      	ite	lt
 801dd70:	18d2      	addlt	r2, r2, r3
 801dd72:	1b1c      	subge	r4, r3, r4
 801dd74:	9b07      	ldr	r3, [sp, #28]
 801dd76:	bfbc      	itt	lt
 801dd78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801dd7a:	2400      	movlt	r4, #0
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	bfb5      	itete	lt
 801dd80:	eba8 0603 	sublt.w	r6, r8, r3
 801dd84:	9b07      	ldrge	r3, [sp, #28]
 801dd86:	2300      	movlt	r3, #0
 801dd88:	4646      	movge	r6, r8
 801dd8a:	e730      	b.n	801dbee <_dtoa_r+0x71e>
 801dd8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dd8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801dd90:	4646      	mov	r6, r8
 801dd92:	e735      	b.n	801dc00 <_dtoa_r+0x730>
 801dd94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dd96:	e75c      	b.n	801dc52 <_dtoa_r+0x782>
 801dd98:	2300      	movs	r3, #0
 801dd9a:	e788      	b.n	801dcae <_dtoa_r+0x7de>
 801dd9c:	3fe00000 	.word	0x3fe00000
 801dda0:	40240000 	.word	0x40240000
 801dda4:	40140000 	.word	0x40140000
 801dda8:	9b02      	ldr	r3, [sp, #8]
 801ddaa:	e780      	b.n	801dcae <_dtoa_r+0x7de>
 801ddac:	2300      	movs	r3, #0
 801ddae:	930a      	str	r3, [sp, #40]	@ 0x28
 801ddb0:	e782      	b.n	801dcb8 <_dtoa_r+0x7e8>
 801ddb2:	d099      	beq.n	801dce8 <_dtoa_r+0x818>
 801ddb4:	9a08      	ldr	r2, [sp, #32]
 801ddb6:	331c      	adds	r3, #28
 801ddb8:	441a      	add	r2, r3
 801ddba:	4498      	add	r8, r3
 801ddbc:	441e      	add	r6, r3
 801ddbe:	9208      	str	r2, [sp, #32]
 801ddc0:	e792      	b.n	801dce8 <_dtoa_r+0x818>
 801ddc2:	4603      	mov	r3, r0
 801ddc4:	e7f6      	b.n	801ddb4 <_dtoa_r+0x8e4>
 801ddc6:	9b07      	ldr	r3, [sp, #28]
 801ddc8:	9704      	str	r7, [sp, #16]
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	dc20      	bgt.n	801de10 <_dtoa_r+0x940>
 801ddce:	9300      	str	r3, [sp, #0]
 801ddd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddd2:	2b02      	cmp	r3, #2
 801ddd4:	dd1e      	ble.n	801de14 <_dtoa_r+0x944>
 801ddd6:	9b00      	ldr	r3, [sp, #0]
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	f47f aec0 	bne.w	801db5e <_dtoa_r+0x68e>
 801ddde:	4621      	mov	r1, r4
 801dde0:	2205      	movs	r2, #5
 801dde2:	4658      	mov	r0, fp
 801dde4:	f000 f9e4 	bl	801e1b0 <__multadd>
 801dde8:	4601      	mov	r1, r0
 801ddea:	4604      	mov	r4, r0
 801ddec:	4648      	mov	r0, r9
 801ddee:	f000 fc41 	bl	801e674 <__mcmp>
 801ddf2:	2800      	cmp	r0, #0
 801ddf4:	f77f aeb3 	ble.w	801db5e <_dtoa_r+0x68e>
 801ddf8:	4656      	mov	r6, sl
 801ddfa:	2331      	movs	r3, #49	@ 0x31
 801ddfc:	f806 3b01 	strb.w	r3, [r6], #1
 801de00:	9b04      	ldr	r3, [sp, #16]
 801de02:	3301      	adds	r3, #1
 801de04:	9304      	str	r3, [sp, #16]
 801de06:	e6ae      	b.n	801db66 <_dtoa_r+0x696>
 801de08:	9c07      	ldr	r4, [sp, #28]
 801de0a:	9704      	str	r7, [sp, #16]
 801de0c:	4625      	mov	r5, r4
 801de0e:	e7f3      	b.n	801ddf8 <_dtoa_r+0x928>
 801de10:	9b07      	ldr	r3, [sp, #28]
 801de12:	9300      	str	r3, [sp, #0]
 801de14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801de16:	2b00      	cmp	r3, #0
 801de18:	f000 8104 	beq.w	801e024 <_dtoa_r+0xb54>
 801de1c:	2e00      	cmp	r6, #0
 801de1e:	dd05      	ble.n	801de2c <_dtoa_r+0x95c>
 801de20:	4629      	mov	r1, r5
 801de22:	4632      	mov	r2, r6
 801de24:	4658      	mov	r0, fp
 801de26:	f000 fbb9 	bl	801e59c <__lshift>
 801de2a:	4605      	mov	r5, r0
 801de2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d05a      	beq.n	801dee8 <_dtoa_r+0xa18>
 801de32:	6869      	ldr	r1, [r5, #4]
 801de34:	4658      	mov	r0, fp
 801de36:	f000 f959 	bl	801e0ec <_Balloc>
 801de3a:	4606      	mov	r6, r0
 801de3c:	b928      	cbnz	r0, 801de4a <_dtoa_r+0x97a>
 801de3e:	4b84      	ldr	r3, [pc, #528]	@ (801e050 <_dtoa_r+0xb80>)
 801de40:	4602      	mov	r2, r0
 801de42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801de46:	f7ff bb5a 	b.w	801d4fe <_dtoa_r+0x2e>
 801de4a:	692a      	ldr	r2, [r5, #16]
 801de4c:	3202      	adds	r2, #2
 801de4e:	0092      	lsls	r2, r2, #2
 801de50:	f105 010c 	add.w	r1, r5, #12
 801de54:	300c      	adds	r0, #12
 801de56:	f7ff fa80 	bl	801d35a <memcpy>
 801de5a:	2201      	movs	r2, #1
 801de5c:	4631      	mov	r1, r6
 801de5e:	4658      	mov	r0, fp
 801de60:	f000 fb9c 	bl	801e59c <__lshift>
 801de64:	f10a 0301 	add.w	r3, sl, #1
 801de68:	9307      	str	r3, [sp, #28]
 801de6a:	9b00      	ldr	r3, [sp, #0]
 801de6c:	4453      	add	r3, sl
 801de6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801de70:	9b02      	ldr	r3, [sp, #8]
 801de72:	f003 0301 	and.w	r3, r3, #1
 801de76:	462f      	mov	r7, r5
 801de78:	930a      	str	r3, [sp, #40]	@ 0x28
 801de7a:	4605      	mov	r5, r0
 801de7c:	9b07      	ldr	r3, [sp, #28]
 801de7e:	4621      	mov	r1, r4
 801de80:	3b01      	subs	r3, #1
 801de82:	4648      	mov	r0, r9
 801de84:	9300      	str	r3, [sp, #0]
 801de86:	f7ff fa9b 	bl	801d3c0 <quorem>
 801de8a:	4639      	mov	r1, r7
 801de8c:	9002      	str	r0, [sp, #8]
 801de8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801de92:	4648      	mov	r0, r9
 801de94:	f000 fbee 	bl	801e674 <__mcmp>
 801de98:	462a      	mov	r2, r5
 801de9a:	9008      	str	r0, [sp, #32]
 801de9c:	4621      	mov	r1, r4
 801de9e:	4658      	mov	r0, fp
 801dea0:	f000 fc04 	bl	801e6ac <__mdiff>
 801dea4:	68c2      	ldr	r2, [r0, #12]
 801dea6:	4606      	mov	r6, r0
 801dea8:	bb02      	cbnz	r2, 801deec <_dtoa_r+0xa1c>
 801deaa:	4601      	mov	r1, r0
 801deac:	4648      	mov	r0, r9
 801deae:	f000 fbe1 	bl	801e674 <__mcmp>
 801deb2:	4602      	mov	r2, r0
 801deb4:	4631      	mov	r1, r6
 801deb6:	4658      	mov	r0, fp
 801deb8:	920e      	str	r2, [sp, #56]	@ 0x38
 801deba:	f000 f957 	bl	801e16c <_Bfree>
 801debe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dec0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dec2:	9e07      	ldr	r6, [sp, #28]
 801dec4:	ea43 0102 	orr.w	r1, r3, r2
 801dec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801deca:	4319      	orrs	r1, r3
 801decc:	d110      	bne.n	801def0 <_dtoa_r+0xa20>
 801dece:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ded2:	d029      	beq.n	801df28 <_dtoa_r+0xa58>
 801ded4:	9b08      	ldr	r3, [sp, #32]
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	dd02      	ble.n	801dee0 <_dtoa_r+0xa10>
 801deda:	9b02      	ldr	r3, [sp, #8]
 801dedc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801dee0:	9b00      	ldr	r3, [sp, #0]
 801dee2:	f883 8000 	strb.w	r8, [r3]
 801dee6:	e63f      	b.n	801db68 <_dtoa_r+0x698>
 801dee8:	4628      	mov	r0, r5
 801deea:	e7bb      	b.n	801de64 <_dtoa_r+0x994>
 801deec:	2201      	movs	r2, #1
 801deee:	e7e1      	b.n	801deb4 <_dtoa_r+0x9e4>
 801def0:	9b08      	ldr	r3, [sp, #32]
 801def2:	2b00      	cmp	r3, #0
 801def4:	db04      	blt.n	801df00 <_dtoa_r+0xa30>
 801def6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801def8:	430b      	orrs	r3, r1
 801defa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801defc:	430b      	orrs	r3, r1
 801defe:	d120      	bne.n	801df42 <_dtoa_r+0xa72>
 801df00:	2a00      	cmp	r2, #0
 801df02:	dded      	ble.n	801dee0 <_dtoa_r+0xa10>
 801df04:	4649      	mov	r1, r9
 801df06:	2201      	movs	r2, #1
 801df08:	4658      	mov	r0, fp
 801df0a:	f000 fb47 	bl	801e59c <__lshift>
 801df0e:	4621      	mov	r1, r4
 801df10:	4681      	mov	r9, r0
 801df12:	f000 fbaf 	bl	801e674 <__mcmp>
 801df16:	2800      	cmp	r0, #0
 801df18:	dc03      	bgt.n	801df22 <_dtoa_r+0xa52>
 801df1a:	d1e1      	bne.n	801dee0 <_dtoa_r+0xa10>
 801df1c:	f018 0f01 	tst.w	r8, #1
 801df20:	d0de      	beq.n	801dee0 <_dtoa_r+0xa10>
 801df22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801df26:	d1d8      	bne.n	801deda <_dtoa_r+0xa0a>
 801df28:	9a00      	ldr	r2, [sp, #0]
 801df2a:	2339      	movs	r3, #57	@ 0x39
 801df2c:	7013      	strb	r3, [r2, #0]
 801df2e:	4633      	mov	r3, r6
 801df30:	461e      	mov	r6, r3
 801df32:	3b01      	subs	r3, #1
 801df34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801df38:	2a39      	cmp	r2, #57	@ 0x39
 801df3a:	d052      	beq.n	801dfe2 <_dtoa_r+0xb12>
 801df3c:	3201      	adds	r2, #1
 801df3e:	701a      	strb	r2, [r3, #0]
 801df40:	e612      	b.n	801db68 <_dtoa_r+0x698>
 801df42:	2a00      	cmp	r2, #0
 801df44:	dd07      	ble.n	801df56 <_dtoa_r+0xa86>
 801df46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801df4a:	d0ed      	beq.n	801df28 <_dtoa_r+0xa58>
 801df4c:	9a00      	ldr	r2, [sp, #0]
 801df4e:	f108 0301 	add.w	r3, r8, #1
 801df52:	7013      	strb	r3, [r2, #0]
 801df54:	e608      	b.n	801db68 <_dtoa_r+0x698>
 801df56:	9b07      	ldr	r3, [sp, #28]
 801df58:	9a07      	ldr	r2, [sp, #28]
 801df5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801df5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801df60:	4293      	cmp	r3, r2
 801df62:	d028      	beq.n	801dfb6 <_dtoa_r+0xae6>
 801df64:	4649      	mov	r1, r9
 801df66:	2300      	movs	r3, #0
 801df68:	220a      	movs	r2, #10
 801df6a:	4658      	mov	r0, fp
 801df6c:	f000 f920 	bl	801e1b0 <__multadd>
 801df70:	42af      	cmp	r7, r5
 801df72:	4681      	mov	r9, r0
 801df74:	f04f 0300 	mov.w	r3, #0
 801df78:	f04f 020a 	mov.w	r2, #10
 801df7c:	4639      	mov	r1, r7
 801df7e:	4658      	mov	r0, fp
 801df80:	d107      	bne.n	801df92 <_dtoa_r+0xac2>
 801df82:	f000 f915 	bl	801e1b0 <__multadd>
 801df86:	4607      	mov	r7, r0
 801df88:	4605      	mov	r5, r0
 801df8a:	9b07      	ldr	r3, [sp, #28]
 801df8c:	3301      	adds	r3, #1
 801df8e:	9307      	str	r3, [sp, #28]
 801df90:	e774      	b.n	801de7c <_dtoa_r+0x9ac>
 801df92:	f000 f90d 	bl	801e1b0 <__multadd>
 801df96:	4629      	mov	r1, r5
 801df98:	4607      	mov	r7, r0
 801df9a:	2300      	movs	r3, #0
 801df9c:	220a      	movs	r2, #10
 801df9e:	4658      	mov	r0, fp
 801dfa0:	f000 f906 	bl	801e1b0 <__multadd>
 801dfa4:	4605      	mov	r5, r0
 801dfa6:	e7f0      	b.n	801df8a <_dtoa_r+0xaba>
 801dfa8:	9b00      	ldr	r3, [sp, #0]
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	bfcc      	ite	gt
 801dfae:	461e      	movgt	r6, r3
 801dfb0:	2601      	movle	r6, #1
 801dfb2:	4456      	add	r6, sl
 801dfb4:	2700      	movs	r7, #0
 801dfb6:	4649      	mov	r1, r9
 801dfb8:	2201      	movs	r2, #1
 801dfba:	4658      	mov	r0, fp
 801dfbc:	f000 faee 	bl	801e59c <__lshift>
 801dfc0:	4621      	mov	r1, r4
 801dfc2:	4681      	mov	r9, r0
 801dfc4:	f000 fb56 	bl	801e674 <__mcmp>
 801dfc8:	2800      	cmp	r0, #0
 801dfca:	dcb0      	bgt.n	801df2e <_dtoa_r+0xa5e>
 801dfcc:	d102      	bne.n	801dfd4 <_dtoa_r+0xb04>
 801dfce:	f018 0f01 	tst.w	r8, #1
 801dfd2:	d1ac      	bne.n	801df2e <_dtoa_r+0xa5e>
 801dfd4:	4633      	mov	r3, r6
 801dfd6:	461e      	mov	r6, r3
 801dfd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dfdc:	2a30      	cmp	r2, #48	@ 0x30
 801dfde:	d0fa      	beq.n	801dfd6 <_dtoa_r+0xb06>
 801dfe0:	e5c2      	b.n	801db68 <_dtoa_r+0x698>
 801dfe2:	459a      	cmp	sl, r3
 801dfe4:	d1a4      	bne.n	801df30 <_dtoa_r+0xa60>
 801dfe6:	9b04      	ldr	r3, [sp, #16]
 801dfe8:	3301      	adds	r3, #1
 801dfea:	9304      	str	r3, [sp, #16]
 801dfec:	2331      	movs	r3, #49	@ 0x31
 801dfee:	f88a 3000 	strb.w	r3, [sl]
 801dff2:	e5b9      	b.n	801db68 <_dtoa_r+0x698>
 801dff4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dff6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801e054 <_dtoa_r+0xb84>
 801dffa:	b11b      	cbz	r3, 801e004 <_dtoa_r+0xb34>
 801dffc:	f10a 0308 	add.w	r3, sl, #8
 801e000:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e002:	6013      	str	r3, [r2, #0]
 801e004:	4650      	mov	r0, sl
 801e006:	b019      	add	sp, #100	@ 0x64
 801e008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e00c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e00e:	2b01      	cmp	r3, #1
 801e010:	f77f ae37 	ble.w	801dc82 <_dtoa_r+0x7b2>
 801e014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e016:	930a      	str	r3, [sp, #40]	@ 0x28
 801e018:	2001      	movs	r0, #1
 801e01a:	e655      	b.n	801dcc8 <_dtoa_r+0x7f8>
 801e01c:	9b00      	ldr	r3, [sp, #0]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	f77f aed6 	ble.w	801ddd0 <_dtoa_r+0x900>
 801e024:	4656      	mov	r6, sl
 801e026:	4621      	mov	r1, r4
 801e028:	4648      	mov	r0, r9
 801e02a:	f7ff f9c9 	bl	801d3c0 <quorem>
 801e02e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e032:	f806 8b01 	strb.w	r8, [r6], #1
 801e036:	9b00      	ldr	r3, [sp, #0]
 801e038:	eba6 020a 	sub.w	r2, r6, sl
 801e03c:	4293      	cmp	r3, r2
 801e03e:	ddb3      	ble.n	801dfa8 <_dtoa_r+0xad8>
 801e040:	4649      	mov	r1, r9
 801e042:	2300      	movs	r3, #0
 801e044:	220a      	movs	r2, #10
 801e046:	4658      	mov	r0, fp
 801e048:	f000 f8b2 	bl	801e1b0 <__multadd>
 801e04c:	4681      	mov	r9, r0
 801e04e:	e7ea      	b.n	801e026 <_dtoa_r+0xb56>
 801e050:	08022eb8 	.word	0x08022eb8
 801e054:	08022e53 	.word	0x08022e53

0801e058 <_free_r>:
 801e058:	b538      	push	{r3, r4, r5, lr}
 801e05a:	4605      	mov	r5, r0
 801e05c:	2900      	cmp	r1, #0
 801e05e:	d041      	beq.n	801e0e4 <_free_r+0x8c>
 801e060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e064:	1f0c      	subs	r4, r1, #4
 801e066:	2b00      	cmp	r3, #0
 801e068:	bfb8      	it	lt
 801e06a:	18e4      	addlt	r4, r4, r3
 801e06c:	f7fd fe8a 	bl	801bd84 <__malloc_lock>
 801e070:	4a1d      	ldr	r2, [pc, #116]	@ (801e0e8 <_free_r+0x90>)
 801e072:	6813      	ldr	r3, [r2, #0]
 801e074:	b933      	cbnz	r3, 801e084 <_free_r+0x2c>
 801e076:	6063      	str	r3, [r4, #4]
 801e078:	6014      	str	r4, [r2, #0]
 801e07a:	4628      	mov	r0, r5
 801e07c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e080:	f7fd be86 	b.w	801bd90 <__malloc_unlock>
 801e084:	42a3      	cmp	r3, r4
 801e086:	d908      	bls.n	801e09a <_free_r+0x42>
 801e088:	6820      	ldr	r0, [r4, #0]
 801e08a:	1821      	adds	r1, r4, r0
 801e08c:	428b      	cmp	r3, r1
 801e08e:	bf01      	itttt	eq
 801e090:	6819      	ldreq	r1, [r3, #0]
 801e092:	685b      	ldreq	r3, [r3, #4]
 801e094:	1809      	addeq	r1, r1, r0
 801e096:	6021      	streq	r1, [r4, #0]
 801e098:	e7ed      	b.n	801e076 <_free_r+0x1e>
 801e09a:	461a      	mov	r2, r3
 801e09c:	685b      	ldr	r3, [r3, #4]
 801e09e:	b10b      	cbz	r3, 801e0a4 <_free_r+0x4c>
 801e0a0:	42a3      	cmp	r3, r4
 801e0a2:	d9fa      	bls.n	801e09a <_free_r+0x42>
 801e0a4:	6811      	ldr	r1, [r2, #0]
 801e0a6:	1850      	adds	r0, r2, r1
 801e0a8:	42a0      	cmp	r0, r4
 801e0aa:	d10b      	bne.n	801e0c4 <_free_r+0x6c>
 801e0ac:	6820      	ldr	r0, [r4, #0]
 801e0ae:	4401      	add	r1, r0
 801e0b0:	1850      	adds	r0, r2, r1
 801e0b2:	4283      	cmp	r3, r0
 801e0b4:	6011      	str	r1, [r2, #0]
 801e0b6:	d1e0      	bne.n	801e07a <_free_r+0x22>
 801e0b8:	6818      	ldr	r0, [r3, #0]
 801e0ba:	685b      	ldr	r3, [r3, #4]
 801e0bc:	6053      	str	r3, [r2, #4]
 801e0be:	4408      	add	r0, r1
 801e0c0:	6010      	str	r0, [r2, #0]
 801e0c2:	e7da      	b.n	801e07a <_free_r+0x22>
 801e0c4:	d902      	bls.n	801e0cc <_free_r+0x74>
 801e0c6:	230c      	movs	r3, #12
 801e0c8:	602b      	str	r3, [r5, #0]
 801e0ca:	e7d6      	b.n	801e07a <_free_r+0x22>
 801e0cc:	6820      	ldr	r0, [r4, #0]
 801e0ce:	1821      	adds	r1, r4, r0
 801e0d0:	428b      	cmp	r3, r1
 801e0d2:	bf04      	itt	eq
 801e0d4:	6819      	ldreq	r1, [r3, #0]
 801e0d6:	685b      	ldreq	r3, [r3, #4]
 801e0d8:	6063      	str	r3, [r4, #4]
 801e0da:	bf04      	itt	eq
 801e0dc:	1809      	addeq	r1, r1, r0
 801e0de:	6021      	streq	r1, [r4, #0]
 801e0e0:	6054      	str	r4, [r2, #4]
 801e0e2:	e7ca      	b.n	801e07a <_free_r+0x22>
 801e0e4:	bd38      	pop	{r3, r4, r5, pc}
 801e0e6:	bf00      	nop
 801e0e8:	200036d0 	.word	0x200036d0

0801e0ec <_Balloc>:
 801e0ec:	b570      	push	{r4, r5, r6, lr}
 801e0ee:	69c6      	ldr	r6, [r0, #28]
 801e0f0:	4604      	mov	r4, r0
 801e0f2:	460d      	mov	r5, r1
 801e0f4:	b976      	cbnz	r6, 801e114 <_Balloc+0x28>
 801e0f6:	2010      	movs	r0, #16
 801e0f8:	f7fd fd9a 	bl	801bc30 <malloc>
 801e0fc:	4602      	mov	r2, r0
 801e0fe:	61e0      	str	r0, [r4, #28]
 801e100:	b920      	cbnz	r0, 801e10c <_Balloc+0x20>
 801e102:	4b18      	ldr	r3, [pc, #96]	@ (801e164 <_Balloc+0x78>)
 801e104:	4818      	ldr	r0, [pc, #96]	@ (801e168 <_Balloc+0x7c>)
 801e106:	216b      	movs	r1, #107	@ 0x6b
 801e108:	f7ff f93c 	bl	801d384 <__assert_func>
 801e10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e110:	6006      	str	r6, [r0, #0]
 801e112:	60c6      	str	r6, [r0, #12]
 801e114:	69e6      	ldr	r6, [r4, #28]
 801e116:	68f3      	ldr	r3, [r6, #12]
 801e118:	b183      	cbz	r3, 801e13c <_Balloc+0x50>
 801e11a:	69e3      	ldr	r3, [r4, #28]
 801e11c:	68db      	ldr	r3, [r3, #12]
 801e11e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e122:	b9b8      	cbnz	r0, 801e154 <_Balloc+0x68>
 801e124:	2101      	movs	r1, #1
 801e126:	fa01 f605 	lsl.w	r6, r1, r5
 801e12a:	1d72      	adds	r2, r6, #5
 801e12c:	0092      	lsls	r2, r2, #2
 801e12e:	4620      	mov	r0, r4
 801e130:	f001 fe95 	bl	801fe5e <_calloc_r>
 801e134:	b160      	cbz	r0, 801e150 <_Balloc+0x64>
 801e136:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e13a:	e00e      	b.n	801e15a <_Balloc+0x6e>
 801e13c:	2221      	movs	r2, #33	@ 0x21
 801e13e:	2104      	movs	r1, #4
 801e140:	4620      	mov	r0, r4
 801e142:	f001 fe8c 	bl	801fe5e <_calloc_r>
 801e146:	69e3      	ldr	r3, [r4, #28]
 801e148:	60f0      	str	r0, [r6, #12]
 801e14a:	68db      	ldr	r3, [r3, #12]
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	d1e4      	bne.n	801e11a <_Balloc+0x2e>
 801e150:	2000      	movs	r0, #0
 801e152:	bd70      	pop	{r4, r5, r6, pc}
 801e154:	6802      	ldr	r2, [r0, #0]
 801e156:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e15a:	2300      	movs	r3, #0
 801e15c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e160:	e7f7      	b.n	801e152 <_Balloc+0x66>
 801e162:	bf00      	nop
 801e164:	08022da6 	.word	0x08022da6
 801e168:	08022ec9 	.word	0x08022ec9

0801e16c <_Bfree>:
 801e16c:	b570      	push	{r4, r5, r6, lr}
 801e16e:	69c6      	ldr	r6, [r0, #28]
 801e170:	4605      	mov	r5, r0
 801e172:	460c      	mov	r4, r1
 801e174:	b976      	cbnz	r6, 801e194 <_Bfree+0x28>
 801e176:	2010      	movs	r0, #16
 801e178:	f7fd fd5a 	bl	801bc30 <malloc>
 801e17c:	4602      	mov	r2, r0
 801e17e:	61e8      	str	r0, [r5, #28]
 801e180:	b920      	cbnz	r0, 801e18c <_Bfree+0x20>
 801e182:	4b09      	ldr	r3, [pc, #36]	@ (801e1a8 <_Bfree+0x3c>)
 801e184:	4809      	ldr	r0, [pc, #36]	@ (801e1ac <_Bfree+0x40>)
 801e186:	218f      	movs	r1, #143	@ 0x8f
 801e188:	f7ff f8fc 	bl	801d384 <__assert_func>
 801e18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e190:	6006      	str	r6, [r0, #0]
 801e192:	60c6      	str	r6, [r0, #12]
 801e194:	b13c      	cbz	r4, 801e1a6 <_Bfree+0x3a>
 801e196:	69eb      	ldr	r3, [r5, #28]
 801e198:	6862      	ldr	r2, [r4, #4]
 801e19a:	68db      	ldr	r3, [r3, #12]
 801e19c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e1a0:	6021      	str	r1, [r4, #0]
 801e1a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e1a6:	bd70      	pop	{r4, r5, r6, pc}
 801e1a8:	08022da6 	.word	0x08022da6
 801e1ac:	08022ec9 	.word	0x08022ec9

0801e1b0 <__multadd>:
 801e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1b4:	690d      	ldr	r5, [r1, #16]
 801e1b6:	4607      	mov	r7, r0
 801e1b8:	460c      	mov	r4, r1
 801e1ba:	461e      	mov	r6, r3
 801e1bc:	f101 0c14 	add.w	ip, r1, #20
 801e1c0:	2000      	movs	r0, #0
 801e1c2:	f8dc 3000 	ldr.w	r3, [ip]
 801e1c6:	b299      	uxth	r1, r3
 801e1c8:	fb02 6101 	mla	r1, r2, r1, r6
 801e1cc:	0c1e      	lsrs	r6, r3, #16
 801e1ce:	0c0b      	lsrs	r3, r1, #16
 801e1d0:	fb02 3306 	mla	r3, r2, r6, r3
 801e1d4:	b289      	uxth	r1, r1
 801e1d6:	3001      	adds	r0, #1
 801e1d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e1dc:	4285      	cmp	r5, r0
 801e1de:	f84c 1b04 	str.w	r1, [ip], #4
 801e1e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e1e6:	dcec      	bgt.n	801e1c2 <__multadd+0x12>
 801e1e8:	b30e      	cbz	r6, 801e22e <__multadd+0x7e>
 801e1ea:	68a3      	ldr	r3, [r4, #8]
 801e1ec:	42ab      	cmp	r3, r5
 801e1ee:	dc19      	bgt.n	801e224 <__multadd+0x74>
 801e1f0:	6861      	ldr	r1, [r4, #4]
 801e1f2:	4638      	mov	r0, r7
 801e1f4:	3101      	adds	r1, #1
 801e1f6:	f7ff ff79 	bl	801e0ec <_Balloc>
 801e1fa:	4680      	mov	r8, r0
 801e1fc:	b928      	cbnz	r0, 801e20a <__multadd+0x5a>
 801e1fe:	4602      	mov	r2, r0
 801e200:	4b0c      	ldr	r3, [pc, #48]	@ (801e234 <__multadd+0x84>)
 801e202:	480d      	ldr	r0, [pc, #52]	@ (801e238 <__multadd+0x88>)
 801e204:	21ba      	movs	r1, #186	@ 0xba
 801e206:	f7ff f8bd 	bl	801d384 <__assert_func>
 801e20a:	6922      	ldr	r2, [r4, #16]
 801e20c:	3202      	adds	r2, #2
 801e20e:	f104 010c 	add.w	r1, r4, #12
 801e212:	0092      	lsls	r2, r2, #2
 801e214:	300c      	adds	r0, #12
 801e216:	f7ff f8a0 	bl	801d35a <memcpy>
 801e21a:	4621      	mov	r1, r4
 801e21c:	4638      	mov	r0, r7
 801e21e:	f7ff ffa5 	bl	801e16c <_Bfree>
 801e222:	4644      	mov	r4, r8
 801e224:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e228:	3501      	adds	r5, #1
 801e22a:	615e      	str	r6, [r3, #20]
 801e22c:	6125      	str	r5, [r4, #16]
 801e22e:	4620      	mov	r0, r4
 801e230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e234:	08022eb8 	.word	0x08022eb8
 801e238:	08022ec9 	.word	0x08022ec9

0801e23c <__s2b>:
 801e23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e240:	460c      	mov	r4, r1
 801e242:	4615      	mov	r5, r2
 801e244:	461f      	mov	r7, r3
 801e246:	2209      	movs	r2, #9
 801e248:	3308      	adds	r3, #8
 801e24a:	4606      	mov	r6, r0
 801e24c:	fb93 f3f2 	sdiv	r3, r3, r2
 801e250:	2100      	movs	r1, #0
 801e252:	2201      	movs	r2, #1
 801e254:	429a      	cmp	r2, r3
 801e256:	db09      	blt.n	801e26c <__s2b+0x30>
 801e258:	4630      	mov	r0, r6
 801e25a:	f7ff ff47 	bl	801e0ec <_Balloc>
 801e25e:	b940      	cbnz	r0, 801e272 <__s2b+0x36>
 801e260:	4602      	mov	r2, r0
 801e262:	4b19      	ldr	r3, [pc, #100]	@ (801e2c8 <__s2b+0x8c>)
 801e264:	4819      	ldr	r0, [pc, #100]	@ (801e2cc <__s2b+0x90>)
 801e266:	21d3      	movs	r1, #211	@ 0xd3
 801e268:	f7ff f88c 	bl	801d384 <__assert_func>
 801e26c:	0052      	lsls	r2, r2, #1
 801e26e:	3101      	adds	r1, #1
 801e270:	e7f0      	b.n	801e254 <__s2b+0x18>
 801e272:	9b08      	ldr	r3, [sp, #32]
 801e274:	6143      	str	r3, [r0, #20]
 801e276:	2d09      	cmp	r5, #9
 801e278:	f04f 0301 	mov.w	r3, #1
 801e27c:	6103      	str	r3, [r0, #16]
 801e27e:	dd16      	ble.n	801e2ae <__s2b+0x72>
 801e280:	f104 0909 	add.w	r9, r4, #9
 801e284:	46c8      	mov	r8, r9
 801e286:	442c      	add	r4, r5
 801e288:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e28c:	4601      	mov	r1, r0
 801e28e:	3b30      	subs	r3, #48	@ 0x30
 801e290:	220a      	movs	r2, #10
 801e292:	4630      	mov	r0, r6
 801e294:	f7ff ff8c 	bl	801e1b0 <__multadd>
 801e298:	45a0      	cmp	r8, r4
 801e29a:	d1f5      	bne.n	801e288 <__s2b+0x4c>
 801e29c:	f1a5 0408 	sub.w	r4, r5, #8
 801e2a0:	444c      	add	r4, r9
 801e2a2:	1b2d      	subs	r5, r5, r4
 801e2a4:	1963      	adds	r3, r4, r5
 801e2a6:	42bb      	cmp	r3, r7
 801e2a8:	db04      	blt.n	801e2b4 <__s2b+0x78>
 801e2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2ae:	340a      	adds	r4, #10
 801e2b0:	2509      	movs	r5, #9
 801e2b2:	e7f6      	b.n	801e2a2 <__s2b+0x66>
 801e2b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e2b8:	4601      	mov	r1, r0
 801e2ba:	3b30      	subs	r3, #48	@ 0x30
 801e2bc:	220a      	movs	r2, #10
 801e2be:	4630      	mov	r0, r6
 801e2c0:	f7ff ff76 	bl	801e1b0 <__multadd>
 801e2c4:	e7ee      	b.n	801e2a4 <__s2b+0x68>
 801e2c6:	bf00      	nop
 801e2c8:	08022eb8 	.word	0x08022eb8
 801e2cc:	08022ec9 	.word	0x08022ec9

0801e2d0 <__hi0bits>:
 801e2d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e2d4:	4603      	mov	r3, r0
 801e2d6:	bf36      	itet	cc
 801e2d8:	0403      	lslcc	r3, r0, #16
 801e2da:	2000      	movcs	r0, #0
 801e2dc:	2010      	movcc	r0, #16
 801e2de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e2e2:	bf3c      	itt	cc
 801e2e4:	021b      	lslcc	r3, r3, #8
 801e2e6:	3008      	addcc	r0, #8
 801e2e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e2ec:	bf3c      	itt	cc
 801e2ee:	011b      	lslcc	r3, r3, #4
 801e2f0:	3004      	addcc	r0, #4
 801e2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e2f6:	bf3c      	itt	cc
 801e2f8:	009b      	lslcc	r3, r3, #2
 801e2fa:	3002      	addcc	r0, #2
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	db05      	blt.n	801e30c <__hi0bits+0x3c>
 801e300:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e304:	f100 0001 	add.w	r0, r0, #1
 801e308:	bf08      	it	eq
 801e30a:	2020      	moveq	r0, #32
 801e30c:	4770      	bx	lr

0801e30e <__lo0bits>:
 801e30e:	6803      	ldr	r3, [r0, #0]
 801e310:	4602      	mov	r2, r0
 801e312:	f013 0007 	ands.w	r0, r3, #7
 801e316:	d00b      	beq.n	801e330 <__lo0bits+0x22>
 801e318:	07d9      	lsls	r1, r3, #31
 801e31a:	d421      	bmi.n	801e360 <__lo0bits+0x52>
 801e31c:	0798      	lsls	r0, r3, #30
 801e31e:	bf49      	itett	mi
 801e320:	085b      	lsrmi	r3, r3, #1
 801e322:	089b      	lsrpl	r3, r3, #2
 801e324:	2001      	movmi	r0, #1
 801e326:	6013      	strmi	r3, [r2, #0]
 801e328:	bf5c      	itt	pl
 801e32a:	6013      	strpl	r3, [r2, #0]
 801e32c:	2002      	movpl	r0, #2
 801e32e:	4770      	bx	lr
 801e330:	b299      	uxth	r1, r3
 801e332:	b909      	cbnz	r1, 801e338 <__lo0bits+0x2a>
 801e334:	0c1b      	lsrs	r3, r3, #16
 801e336:	2010      	movs	r0, #16
 801e338:	b2d9      	uxtb	r1, r3
 801e33a:	b909      	cbnz	r1, 801e340 <__lo0bits+0x32>
 801e33c:	3008      	adds	r0, #8
 801e33e:	0a1b      	lsrs	r3, r3, #8
 801e340:	0719      	lsls	r1, r3, #28
 801e342:	bf04      	itt	eq
 801e344:	091b      	lsreq	r3, r3, #4
 801e346:	3004      	addeq	r0, #4
 801e348:	0799      	lsls	r1, r3, #30
 801e34a:	bf04      	itt	eq
 801e34c:	089b      	lsreq	r3, r3, #2
 801e34e:	3002      	addeq	r0, #2
 801e350:	07d9      	lsls	r1, r3, #31
 801e352:	d403      	bmi.n	801e35c <__lo0bits+0x4e>
 801e354:	085b      	lsrs	r3, r3, #1
 801e356:	f100 0001 	add.w	r0, r0, #1
 801e35a:	d003      	beq.n	801e364 <__lo0bits+0x56>
 801e35c:	6013      	str	r3, [r2, #0]
 801e35e:	4770      	bx	lr
 801e360:	2000      	movs	r0, #0
 801e362:	4770      	bx	lr
 801e364:	2020      	movs	r0, #32
 801e366:	4770      	bx	lr

0801e368 <__i2b>:
 801e368:	b510      	push	{r4, lr}
 801e36a:	460c      	mov	r4, r1
 801e36c:	2101      	movs	r1, #1
 801e36e:	f7ff febd 	bl	801e0ec <_Balloc>
 801e372:	4602      	mov	r2, r0
 801e374:	b928      	cbnz	r0, 801e382 <__i2b+0x1a>
 801e376:	4b05      	ldr	r3, [pc, #20]	@ (801e38c <__i2b+0x24>)
 801e378:	4805      	ldr	r0, [pc, #20]	@ (801e390 <__i2b+0x28>)
 801e37a:	f240 1145 	movw	r1, #325	@ 0x145
 801e37e:	f7ff f801 	bl	801d384 <__assert_func>
 801e382:	2301      	movs	r3, #1
 801e384:	6144      	str	r4, [r0, #20]
 801e386:	6103      	str	r3, [r0, #16]
 801e388:	bd10      	pop	{r4, pc}
 801e38a:	bf00      	nop
 801e38c:	08022eb8 	.word	0x08022eb8
 801e390:	08022ec9 	.word	0x08022ec9

0801e394 <__multiply>:
 801e394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e398:	4614      	mov	r4, r2
 801e39a:	690a      	ldr	r2, [r1, #16]
 801e39c:	6923      	ldr	r3, [r4, #16]
 801e39e:	429a      	cmp	r2, r3
 801e3a0:	bfa8      	it	ge
 801e3a2:	4623      	movge	r3, r4
 801e3a4:	460f      	mov	r7, r1
 801e3a6:	bfa4      	itt	ge
 801e3a8:	460c      	movge	r4, r1
 801e3aa:	461f      	movge	r7, r3
 801e3ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e3b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e3b4:	68a3      	ldr	r3, [r4, #8]
 801e3b6:	6861      	ldr	r1, [r4, #4]
 801e3b8:	eb0a 0609 	add.w	r6, sl, r9
 801e3bc:	42b3      	cmp	r3, r6
 801e3be:	b085      	sub	sp, #20
 801e3c0:	bfb8      	it	lt
 801e3c2:	3101      	addlt	r1, #1
 801e3c4:	f7ff fe92 	bl	801e0ec <_Balloc>
 801e3c8:	b930      	cbnz	r0, 801e3d8 <__multiply+0x44>
 801e3ca:	4602      	mov	r2, r0
 801e3cc:	4b44      	ldr	r3, [pc, #272]	@ (801e4e0 <__multiply+0x14c>)
 801e3ce:	4845      	ldr	r0, [pc, #276]	@ (801e4e4 <__multiply+0x150>)
 801e3d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e3d4:	f7fe ffd6 	bl	801d384 <__assert_func>
 801e3d8:	f100 0514 	add.w	r5, r0, #20
 801e3dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e3e0:	462b      	mov	r3, r5
 801e3e2:	2200      	movs	r2, #0
 801e3e4:	4543      	cmp	r3, r8
 801e3e6:	d321      	bcc.n	801e42c <__multiply+0x98>
 801e3e8:	f107 0114 	add.w	r1, r7, #20
 801e3ec:	f104 0214 	add.w	r2, r4, #20
 801e3f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e3f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e3f8:	9302      	str	r3, [sp, #8]
 801e3fa:	1b13      	subs	r3, r2, r4
 801e3fc:	3b15      	subs	r3, #21
 801e3fe:	f023 0303 	bic.w	r3, r3, #3
 801e402:	3304      	adds	r3, #4
 801e404:	f104 0715 	add.w	r7, r4, #21
 801e408:	42ba      	cmp	r2, r7
 801e40a:	bf38      	it	cc
 801e40c:	2304      	movcc	r3, #4
 801e40e:	9301      	str	r3, [sp, #4]
 801e410:	9b02      	ldr	r3, [sp, #8]
 801e412:	9103      	str	r1, [sp, #12]
 801e414:	428b      	cmp	r3, r1
 801e416:	d80c      	bhi.n	801e432 <__multiply+0x9e>
 801e418:	2e00      	cmp	r6, #0
 801e41a:	dd03      	ble.n	801e424 <__multiply+0x90>
 801e41c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e420:	2b00      	cmp	r3, #0
 801e422:	d05b      	beq.n	801e4dc <__multiply+0x148>
 801e424:	6106      	str	r6, [r0, #16]
 801e426:	b005      	add	sp, #20
 801e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e42c:	f843 2b04 	str.w	r2, [r3], #4
 801e430:	e7d8      	b.n	801e3e4 <__multiply+0x50>
 801e432:	f8b1 a000 	ldrh.w	sl, [r1]
 801e436:	f1ba 0f00 	cmp.w	sl, #0
 801e43a:	d024      	beq.n	801e486 <__multiply+0xf2>
 801e43c:	f104 0e14 	add.w	lr, r4, #20
 801e440:	46a9      	mov	r9, r5
 801e442:	f04f 0c00 	mov.w	ip, #0
 801e446:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e44a:	f8d9 3000 	ldr.w	r3, [r9]
 801e44e:	fa1f fb87 	uxth.w	fp, r7
 801e452:	b29b      	uxth	r3, r3
 801e454:	fb0a 330b 	mla	r3, sl, fp, r3
 801e458:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801e45c:	f8d9 7000 	ldr.w	r7, [r9]
 801e460:	4463      	add	r3, ip
 801e462:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e466:	fb0a c70b 	mla	r7, sl, fp, ip
 801e46a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e46e:	b29b      	uxth	r3, r3
 801e470:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e474:	4572      	cmp	r2, lr
 801e476:	f849 3b04 	str.w	r3, [r9], #4
 801e47a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e47e:	d8e2      	bhi.n	801e446 <__multiply+0xb2>
 801e480:	9b01      	ldr	r3, [sp, #4]
 801e482:	f845 c003 	str.w	ip, [r5, r3]
 801e486:	9b03      	ldr	r3, [sp, #12]
 801e488:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e48c:	3104      	adds	r1, #4
 801e48e:	f1b9 0f00 	cmp.w	r9, #0
 801e492:	d021      	beq.n	801e4d8 <__multiply+0x144>
 801e494:	682b      	ldr	r3, [r5, #0]
 801e496:	f104 0c14 	add.w	ip, r4, #20
 801e49a:	46ae      	mov	lr, r5
 801e49c:	f04f 0a00 	mov.w	sl, #0
 801e4a0:	f8bc b000 	ldrh.w	fp, [ip]
 801e4a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e4a8:	fb09 770b 	mla	r7, r9, fp, r7
 801e4ac:	4457      	add	r7, sl
 801e4ae:	b29b      	uxth	r3, r3
 801e4b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e4b4:	f84e 3b04 	str.w	r3, [lr], #4
 801e4b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e4bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e4c0:	f8be 3000 	ldrh.w	r3, [lr]
 801e4c4:	fb09 330a 	mla	r3, r9, sl, r3
 801e4c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e4cc:	4562      	cmp	r2, ip
 801e4ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e4d2:	d8e5      	bhi.n	801e4a0 <__multiply+0x10c>
 801e4d4:	9f01      	ldr	r7, [sp, #4]
 801e4d6:	51eb      	str	r3, [r5, r7]
 801e4d8:	3504      	adds	r5, #4
 801e4da:	e799      	b.n	801e410 <__multiply+0x7c>
 801e4dc:	3e01      	subs	r6, #1
 801e4de:	e79b      	b.n	801e418 <__multiply+0x84>
 801e4e0:	08022eb8 	.word	0x08022eb8
 801e4e4:	08022ec9 	.word	0x08022ec9

0801e4e8 <__pow5mult>:
 801e4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4ec:	4615      	mov	r5, r2
 801e4ee:	f012 0203 	ands.w	r2, r2, #3
 801e4f2:	4607      	mov	r7, r0
 801e4f4:	460e      	mov	r6, r1
 801e4f6:	d007      	beq.n	801e508 <__pow5mult+0x20>
 801e4f8:	4c25      	ldr	r4, [pc, #148]	@ (801e590 <__pow5mult+0xa8>)
 801e4fa:	3a01      	subs	r2, #1
 801e4fc:	2300      	movs	r3, #0
 801e4fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e502:	f7ff fe55 	bl	801e1b0 <__multadd>
 801e506:	4606      	mov	r6, r0
 801e508:	10ad      	asrs	r5, r5, #2
 801e50a:	d03d      	beq.n	801e588 <__pow5mult+0xa0>
 801e50c:	69fc      	ldr	r4, [r7, #28]
 801e50e:	b97c      	cbnz	r4, 801e530 <__pow5mult+0x48>
 801e510:	2010      	movs	r0, #16
 801e512:	f7fd fb8d 	bl	801bc30 <malloc>
 801e516:	4602      	mov	r2, r0
 801e518:	61f8      	str	r0, [r7, #28]
 801e51a:	b928      	cbnz	r0, 801e528 <__pow5mult+0x40>
 801e51c:	4b1d      	ldr	r3, [pc, #116]	@ (801e594 <__pow5mult+0xac>)
 801e51e:	481e      	ldr	r0, [pc, #120]	@ (801e598 <__pow5mult+0xb0>)
 801e520:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e524:	f7fe ff2e 	bl	801d384 <__assert_func>
 801e528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e52c:	6004      	str	r4, [r0, #0]
 801e52e:	60c4      	str	r4, [r0, #12]
 801e530:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e538:	b94c      	cbnz	r4, 801e54e <__pow5mult+0x66>
 801e53a:	f240 2171 	movw	r1, #625	@ 0x271
 801e53e:	4638      	mov	r0, r7
 801e540:	f7ff ff12 	bl	801e368 <__i2b>
 801e544:	2300      	movs	r3, #0
 801e546:	f8c8 0008 	str.w	r0, [r8, #8]
 801e54a:	4604      	mov	r4, r0
 801e54c:	6003      	str	r3, [r0, #0]
 801e54e:	f04f 0900 	mov.w	r9, #0
 801e552:	07eb      	lsls	r3, r5, #31
 801e554:	d50a      	bpl.n	801e56c <__pow5mult+0x84>
 801e556:	4631      	mov	r1, r6
 801e558:	4622      	mov	r2, r4
 801e55a:	4638      	mov	r0, r7
 801e55c:	f7ff ff1a 	bl	801e394 <__multiply>
 801e560:	4631      	mov	r1, r6
 801e562:	4680      	mov	r8, r0
 801e564:	4638      	mov	r0, r7
 801e566:	f7ff fe01 	bl	801e16c <_Bfree>
 801e56a:	4646      	mov	r6, r8
 801e56c:	106d      	asrs	r5, r5, #1
 801e56e:	d00b      	beq.n	801e588 <__pow5mult+0xa0>
 801e570:	6820      	ldr	r0, [r4, #0]
 801e572:	b938      	cbnz	r0, 801e584 <__pow5mult+0x9c>
 801e574:	4622      	mov	r2, r4
 801e576:	4621      	mov	r1, r4
 801e578:	4638      	mov	r0, r7
 801e57a:	f7ff ff0b 	bl	801e394 <__multiply>
 801e57e:	6020      	str	r0, [r4, #0]
 801e580:	f8c0 9000 	str.w	r9, [r0]
 801e584:	4604      	mov	r4, r0
 801e586:	e7e4      	b.n	801e552 <__pow5mult+0x6a>
 801e588:	4630      	mov	r0, r6
 801e58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e58e:	bf00      	nop
 801e590:	08022f24 	.word	0x08022f24
 801e594:	08022da6 	.word	0x08022da6
 801e598:	08022ec9 	.word	0x08022ec9

0801e59c <__lshift>:
 801e59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5a0:	460c      	mov	r4, r1
 801e5a2:	6849      	ldr	r1, [r1, #4]
 801e5a4:	6923      	ldr	r3, [r4, #16]
 801e5a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e5aa:	68a3      	ldr	r3, [r4, #8]
 801e5ac:	4607      	mov	r7, r0
 801e5ae:	4691      	mov	r9, r2
 801e5b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e5b4:	f108 0601 	add.w	r6, r8, #1
 801e5b8:	42b3      	cmp	r3, r6
 801e5ba:	db0b      	blt.n	801e5d4 <__lshift+0x38>
 801e5bc:	4638      	mov	r0, r7
 801e5be:	f7ff fd95 	bl	801e0ec <_Balloc>
 801e5c2:	4605      	mov	r5, r0
 801e5c4:	b948      	cbnz	r0, 801e5da <__lshift+0x3e>
 801e5c6:	4602      	mov	r2, r0
 801e5c8:	4b28      	ldr	r3, [pc, #160]	@ (801e66c <__lshift+0xd0>)
 801e5ca:	4829      	ldr	r0, [pc, #164]	@ (801e670 <__lshift+0xd4>)
 801e5cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e5d0:	f7fe fed8 	bl	801d384 <__assert_func>
 801e5d4:	3101      	adds	r1, #1
 801e5d6:	005b      	lsls	r3, r3, #1
 801e5d8:	e7ee      	b.n	801e5b8 <__lshift+0x1c>
 801e5da:	2300      	movs	r3, #0
 801e5dc:	f100 0114 	add.w	r1, r0, #20
 801e5e0:	f100 0210 	add.w	r2, r0, #16
 801e5e4:	4618      	mov	r0, r3
 801e5e6:	4553      	cmp	r3, sl
 801e5e8:	db33      	blt.n	801e652 <__lshift+0xb6>
 801e5ea:	6920      	ldr	r0, [r4, #16]
 801e5ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e5f0:	f104 0314 	add.w	r3, r4, #20
 801e5f4:	f019 091f 	ands.w	r9, r9, #31
 801e5f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e5fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e600:	d02b      	beq.n	801e65a <__lshift+0xbe>
 801e602:	f1c9 0e20 	rsb	lr, r9, #32
 801e606:	468a      	mov	sl, r1
 801e608:	2200      	movs	r2, #0
 801e60a:	6818      	ldr	r0, [r3, #0]
 801e60c:	fa00 f009 	lsl.w	r0, r0, r9
 801e610:	4310      	orrs	r0, r2
 801e612:	f84a 0b04 	str.w	r0, [sl], #4
 801e616:	f853 2b04 	ldr.w	r2, [r3], #4
 801e61a:	459c      	cmp	ip, r3
 801e61c:	fa22 f20e 	lsr.w	r2, r2, lr
 801e620:	d8f3      	bhi.n	801e60a <__lshift+0x6e>
 801e622:	ebac 0304 	sub.w	r3, ip, r4
 801e626:	3b15      	subs	r3, #21
 801e628:	f023 0303 	bic.w	r3, r3, #3
 801e62c:	3304      	adds	r3, #4
 801e62e:	f104 0015 	add.w	r0, r4, #21
 801e632:	4584      	cmp	ip, r0
 801e634:	bf38      	it	cc
 801e636:	2304      	movcc	r3, #4
 801e638:	50ca      	str	r2, [r1, r3]
 801e63a:	b10a      	cbz	r2, 801e640 <__lshift+0xa4>
 801e63c:	f108 0602 	add.w	r6, r8, #2
 801e640:	3e01      	subs	r6, #1
 801e642:	4638      	mov	r0, r7
 801e644:	612e      	str	r6, [r5, #16]
 801e646:	4621      	mov	r1, r4
 801e648:	f7ff fd90 	bl	801e16c <_Bfree>
 801e64c:	4628      	mov	r0, r5
 801e64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e652:	f842 0f04 	str.w	r0, [r2, #4]!
 801e656:	3301      	adds	r3, #1
 801e658:	e7c5      	b.n	801e5e6 <__lshift+0x4a>
 801e65a:	3904      	subs	r1, #4
 801e65c:	f853 2b04 	ldr.w	r2, [r3], #4
 801e660:	f841 2f04 	str.w	r2, [r1, #4]!
 801e664:	459c      	cmp	ip, r3
 801e666:	d8f9      	bhi.n	801e65c <__lshift+0xc0>
 801e668:	e7ea      	b.n	801e640 <__lshift+0xa4>
 801e66a:	bf00      	nop
 801e66c:	08022eb8 	.word	0x08022eb8
 801e670:	08022ec9 	.word	0x08022ec9

0801e674 <__mcmp>:
 801e674:	690a      	ldr	r2, [r1, #16]
 801e676:	4603      	mov	r3, r0
 801e678:	6900      	ldr	r0, [r0, #16]
 801e67a:	1a80      	subs	r0, r0, r2
 801e67c:	b530      	push	{r4, r5, lr}
 801e67e:	d10e      	bne.n	801e69e <__mcmp+0x2a>
 801e680:	3314      	adds	r3, #20
 801e682:	3114      	adds	r1, #20
 801e684:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e688:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e68c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e690:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e694:	4295      	cmp	r5, r2
 801e696:	d003      	beq.n	801e6a0 <__mcmp+0x2c>
 801e698:	d205      	bcs.n	801e6a6 <__mcmp+0x32>
 801e69a:	f04f 30ff 	mov.w	r0, #4294967295
 801e69e:	bd30      	pop	{r4, r5, pc}
 801e6a0:	42a3      	cmp	r3, r4
 801e6a2:	d3f3      	bcc.n	801e68c <__mcmp+0x18>
 801e6a4:	e7fb      	b.n	801e69e <__mcmp+0x2a>
 801e6a6:	2001      	movs	r0, #1
 801e6a8:	e7f9      	b.n	801e69e <__mcmp+0x2a>
	...

0801e6ac <__mdiff>:
 801e6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6b0:	4689      	mov	r9, r1
 801e6b2:	4606      	mov	r6, r0
 801e6b4:	4611      	mov	r1, r2
 801e6b6:	4648      	mov	r0, r9
 801e6b8:	4614      	mov	r4, r2
 801e6ba:	f7ff ffdb 	bl	801e674 <__mcmp>
 801e6be:	1e05      	subs	r5, r0, #0
 801e6c0:	d112      	bne.n	801e6e8 <__mdiff+0x3c>
 801e6c2:	4629      	mov	r1, r5
 801e6c4:	4630      	mov	r0, r6
 801e6c6:	f7ff fd11 	bl	801e0ec <_Balloc>
 801e6ca:	4602      	mov	r2, r0
 801e6cc:	b928      	cbnz	r0, 801e6da <__mdiff+0x2e>
 801e6ce:	4b3f      	ldr	r3, [pc, #252]	@ (801e7cc <__mdiff+0x120>)
 801e6d0:	f240 2137 	movw	r1, #567	@ 0x237
 801e6d4:	483e      	ldr	r0, [pc, #248]	@ (801e7d0 <__mdiff+0x124>)
 801e6d6:	f7fe fe55 	bl	801d384 <__assert_func>
 801e6da:	2301      	movs	r3, #1
 801e6dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e6e0:	4610      	mov	r0, r2
 801e6e2:	b003      	add	sp, #12
 801e6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6e8:	bfbc      	itt	lt
 801e6ea:	464b      	movlt	r3, r9
 801e6ec:	46a1      	movlt	r9, r4
 801e6ee:	4630      	mov	r0, r6
 801e6f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e6f4:	bfba      	itte	lt
 801e6f6:	461c      	movlt	r4, r3
 801e6f8:	2501      	movlt	r5, #1
 801e6fa:	2500      	movge	r5, #0
 801e6fc:	f7ff fcf6 	bl	801e0ec <_Balloc>
 801e700:	4602      	mov	r2, r0
 801e702:	b918      	cbnz	r0, 801e70c <__mdiff+0x60>
 801e704:	4b31      	ldr	r3, [pc, #196]	@ (801e7cc <__mdiff+0x120>)
 801e706:	f240 2145 	movw	r1, #581	@ 0x245
 801e70a:	e7e3      	b.n	801e6d4 <__mdiff+0x28>
 801e70c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e710:	6926      	ldr	r6, [r4, #16]
 801e712:	60c5      	str	r5, [r0, #12]
 801e714:	f109 0310 	add.w	r3, r9, #16
 801e718:	f109 0514 	add.w	r5, r9, #20
 801e71c:	f104 0e14 	add.w	lr, r4, #20
 801e720:	f100 0b14 	add.w	fp, r0, #20
 801e724:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e728:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e72c:	9301      	str	r3, [sp, #4]
 801e72e:	46d9      	mov	r9, fp
 801e730:	f04f 0c00 	mov.w	ip, #0
 801e734:	9b01      	ldr	r3, [sp, #4]
 801e736:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e73a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e73e:	9301      	str	r3, [sp, #4]
 801e740:	fa1f f38a 	uxth.w	r3, sl
 801e744:	4619      	mov	r1, r3
 801e746:	b283      	uxth	r3, r0
 801e748:	1acb      	subs	r3, r1, r3
 801e74a:	0c00      	lsrs	r0, r0, #16
 801e74c:	4463      	add	r3, ip
 801e74e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e752:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e756:	b29b      	uxth	r3, r3
 801e758:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e75c:	4576      	cmp	r6, lr
 801e75e:	f849 3b04 	str.w	r3, [r9], #4
 801e762:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e766:	d8e5      	bhi.n	801e734 <__mdiff+0x88>
 801e768:	1b33      	subs	r3, r6, r4
 801e76a:	3b15      	subs	r3, #21
 801e76c:	f023 0303 	bic.w	r3, r3, #3
 801e770:	3415      	adds	r4, #21
 801e772:	3304      	adds	r3, #4
 801e774:	42a6      	cmp	r6, r4
 801e776:	bf38      	it	cc
 801e778:	2304      	movcc	r3, #4
 801e77a:	441d      	add	r5, r3
 801e77c:	445b      	add	r3, fp
 801e77e:	461e      	mov	r6, r3
 801e780:	462c      	mov	r4, r5
 801e782:	4544      	cmp	r4, r8
 801e784:	d30e      	bcc.n	801e7a4 <__mdiff+0xf8>
 801e786:	f108 0103 	add.w	r1, r8, #3
 801e78a:	1b49      	subs	r1, r1, r5
 801e78c:	f021 0103 	bic.w	r1, r1, #3
 801e790:	3d03      	subs	r5, #3
 801e792:	45a8      	cmp	r8, r5
 801e794:	bf38      	it	cc
 801e796:	2100      	movcc	r1, #0
 801e798:	440b      	add	r3, r1
 801e79a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e79e:	b191      	cbz	r1, 801e7c6 <__mdiff+0x11a>
 801e7a0:	6117      	str	r7, [r2, #16]
 801e7a2:	e79d      	b.n	801e6e0 <__mdiff+0x34>
 801e7a4:	f854 1b04 	ldr.w	r1, [r4], #4
 801e7a8:	46e6      	mov	lr, ip
 801e7aa:	0c08      	lsrs	r0, r1, #16
 801e7ac:	fa1c fc81 	uxtah	ip, ip, r1
 801e7b0:	4471      	add	r1, lr
 801e7b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e7b6:	b289      	uxth	r1, r1
 801e7b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e7bc:	f846 1b04 	str.w	r1, [r6], #4
 801e7c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e7c4:	e7dd      	b.n	801e782 <__mdiff+0xd6>
 801e7c6:	3f01      	subs	r7, #1
 801e7c8:	e7e7      	b.n	801e79a <__mdiff+0xee>
 801e7ca:	bf00      	nop
 801e7cc:	08022eb8 	.word	0x08022eb8
 801e7d0:	08022ec9 	.word	0x08022ec9

0801e7d4 <__ulp>:
 801e7d4:	b082      	sub	sp, #8
 801e7d6:	ed8d 0b00 	vstr	d0, [sp]
 801e7da:	9a01      	ldr	r2, [sp, #4]
 801e7dc:	4b0f      	ldr	r3, [pc, #60]	@ (801e81c <__ulp+0x48>)
 801e7de:	4013      	ands	r3, r2
 801e7e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	dc08      	bgt.n	801e7fa <__ulp+0x26>
 801e7e8:	425b      	negs	r3, r3
 801e7ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801e7ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e7f2:	da04      	bge.n	801e7fe <__ulp+0x2a>
 801e7f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801e7f8:	4113      	asrs	r3, r2
 801e7fa:	2200      	movs	r2, #0
 801e7fc:	e008      	b.n	801e810 <__ulp+0x3c>
 801e7fe:	f1a2 0314 	sub.w	r3, r2, #20
 801e802:	2b1e      	cmp	r3, #30
 801e804:	bfda      	itte	le
 801e806:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801e80a:	40da      	lsrle	r2, r3
 801e80c:	2201      	movgt	r2, #1
 801e80e:	2300      	movs	r3, #0
 801e810:	4619      	mov	r1, r3
 801e812:	4610      	mov	r0, r2
 801e814:	ec41 0b10 	vmov	d0, r0, r1
 801e818:	b002      	add	sp, #8
 801e81a:	4770      	bx	lr
 801e81c:	7ff00000 	.word	0x7ff00000

0801e820 <__b2d>:
 801e820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e824:	6906      	ldr	r6, [r0, #16]
 801e826:	f100 0814 	add.w	r8, r0, #20
 801e82a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801e82e:	1f37      	subs	r7, r6, #4
 801e830:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e834:	4610      	mov	r0, r2
 801e836:	f7ff fd4b 	bl	801e2d0 <__hi0bits>
 801e83a:	f1c0 0320 	rsb	r3, r0, #32
 801e83e:	280a      	cmp	r0, #10
 801e840:	600b      	str	r3, [r1, #0]
 801e842:	491b      	ldr	r1, [pc, #108]	@ (801e8b0 <__b2d+0x90>)
 801e844:	dc15      	bgt.n	801e872 <__b2d+0x52>
 801e846:	f1c0 0c0b 	rsb	ip, r0, #11
 801e84a:	fa22 f30c 	lsr.w	r3, r2, ip
 801e84e:	45b8      	cmp	r8, r7
 801e850:	ea43 0501 	orr.w	r5, r3, r1
 801e854:	bf34      	ite	cc
 801e856:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801e85a:	2300      	movcs	r3, #0
 801e85c:	3015      	adds	r0, #21
 801e85e:	fa02 f000 	lsl.w	r0, r2, r0
 801e862:	fa23 f30c 	lsr.w	r3, r3, ip
 801e866:	4303      	orrs	r3, r0
 801e868:	461c      	mov	r4, r3
 801e86a:	ec45 4b10 	vmov	d0, r4, r5
 801e86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e872:	45b8      	cmp	r8, r7
 801e874:	bf3a      	itte	cc
 801e876:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801e87a:	f1a6 0708 	subcc.w	r7, r6, #8
 801e87e:	2300      	movcs	r3, #0
 801e880:	380b      	subs	r0, #11
 801e882:	d012      	beq.n	801e8aa <__b2d+0x8a>
 801e884:	f1c0 0120 	rsb	r1, r0, #32
 801e888:	fa23 f401 	lsr.w	r4, r3, r1
 801e88c:	4082      	lsls	r2, r0
 801e88e:	4322      	orrs	r2, r4
 801e890:	4547      	cmp	r7, r8
 801e892:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801e896:	bf8c      	ite	hi
 801e898:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801e89c:	2200      	movls	r2, #0
 801e89e:	4083      	lsls	r3, r0
 801e8a0:	40ca      	lsrs	r2, r1
 801e8a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801e8a6:	4313      	orrs	r3, r2
 801e8a8:	e7de      	b.n	801e868 <__b2d+0x48>
 801e8aa:	ea42 0501 	orr.w	r5, r2, r1
 801e8ae:	e7db      	b.n	801e868 <__b2d+0x48>
 801e8b0:	3ff00000 	.word	0x3ff00000

0801e8b4 <__d2b>:
 801e8b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e8b8:	460f      	mov	r7, r1
 801e8ba:	2101      	movs	r1, #1
 801e8bc:	ec59 8b10 	vmov	r8, r9, d0
 801e8c0:	4616      	mov	r6, r2
 801e8c2:	f7ff fc13 	bl	801e0ec <_Balloc>
 801e8c6:	4604      	mov	r4, r0
 801e8c8:	b930      	cbnz	r0, 801e8d8 <__d2b+0x24>
 801e8ca:	4602      	mov	r2, r0
 801e8cc:	4b23      	ldr	r3, [pc, #140]	@ (801e95c <__d2b+0xa8>)
 801e8ce:	4824      	ldr	r0, [pc, #144]	@ (801e960 <__d2b+0xac>)
 801e8d0:	f240 310f 	movw	r1, #783	@ 0x30f
 801e8d4:	f7fe fd56 	bl	801d384 <__assert_func>
 801e8d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e8dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e8e0:	b10d      	cbz	r5, 801e8e6 <__d2b+0x32>
 801e8e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e8e6:	9301      	str	r3, [sp, #4]
 801e8e8:	f1b8 0300 	subs.w	r3, r8, #0
 801e8ec:	d023      	beq.n	801e936 <__d2b+0x82>
 801e8ee:	4668      	mov	r0, sp
 801e8f0:	9300      	str	r3, [sp, #0]
 801e8f2:	f7ff fd0c 	bl	801e30e <__lo0bits>
 801e8f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e8fa:	b1d0      	cbz	r0, 801e932 <__d2b+0x7e>
 801e8fc:	f1c0 0320 	rsb	r3, r0, #32
 801e900:	fa02 f303 	lsl.w	r3, r2, r3
 801e904:	430b      	orrs	r3, r1
 801e906:	40c2      	lsrs	r2, r0
 801e908:	6163      	str	r3, [r4, #20]
 801e90a:	9201      	str	r2, [sp, #4]
 801e90c:	9b01      	ldr	r3, [sp, #4]
 801e90e:	61a3      	str	r3, [r4, #24]
 801e910:	2b00      	cmp	r3, #0
 801e912:	bf0c      	ite	eq
 801e914:	2201      	moveq	r2, #1
 801e916:	2202      	movne	r2, #2
 801e918:	6122      	str	r2, [r4, #16]
 801e91a:	b1a5      	cbz	r5, 801e946 <__d2b+0x92>
 801e91c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e920:	4405      	add	r5, r0
 801e922:	603d      	str	r5, [r7, #0]
 801e924:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e928:	6030      	str	r0, [r6, #0]
 801e92a:	4620      	mov	r0, r4
 801e92c:	b003      	add	sp, #12
 801e92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e932:	6161      	str	r1, [r4, #20]
 801e934:	e7ea      	b.n	801e90c <__d2b+0x58>
 801e936:	a801      	add	r0, sp, #4
 801e938:	f7ff fce9 	bl	801e30e <__lo0bits>
 801e93c:	9b01      	ldr	r3, [sp, #4]
 801e93e:	6163      	str	r3, [r4, #20]
 801e940:	3020      	adds	r0, #32
 801e942:	2201      	movs	r2, #1
 801e944:	e7e8      	b.n	801e918 <__d2b+0x64>
 801e946:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e94a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e94e:	6038      	str	r0, [r7, #0]
 801e950:	6918      	ldr	r0, [r3, #16]
 801e952:	f7ff fcbd 	bl	801e2d0 <__hi0bits>
 801e956:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e95a:	e7e5      	b.n	801e928 <__d2b+0x74>
 801e95c:	08022eb8 	.word	0x08022eb8
 801e960:	08022ec9 	.word	0x08022ec9

0801e964 <__ratio>:
 801e964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e968:	b085      	sub	sp, #20
 801e96a:	e9cd 1000 	strd	r1, r0, [sp]
 801e96e:	a902      	add	r1, sp, #8
 801e970:	f7ff ff56 	bl	801e820 <__b2d>
 801e974:	9800      	ldr	r0, [sp, #0]
 801e976:	a903      	add	r1, sp, #12
 801e978:	ec55 4b10 	vmov	r4, r5, d0
 801e97c:	f7ff ff50 	bl	801e820 <__b2d>
 801e980:	9b01      	ldr	r3, [sp, #4]
 801e982:	6919      	ldr	r1, [r3, #16]
 801e984:	9b00      	ldr	r3, [sp, #0]
 801e986:	691b      	ldr	r3, [r3, #16]
 801e988:	1ac9      	subs	r1, r1, r3
 801e98a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801e98e:	1a9b      	subs	r3, r3, r2
 801e990:	ec5b ab10 	vmov	sl, fp, d0
 801e994:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801e998:	2b00      	cmp	r3, #0
 801e99a:	bfce      	itee	gt
 801e99c:	462a      	movgt	r2, r5
 801e99e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e9a2:	465a      	movle	r2, fp
 801e9a4:	462f      	mov	r7, r5
 801e9a6:	46d9      	mov	r9, fp
 801e9a8:	bfcc      	ite	gt
 801e9aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e9ae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801e9b2:	464b      	mov	r3, r9
 801e9b4:	4652      	mov	r2, sl
 801e9b6:	4620      	mov	r0, r4
 801e9b8:	4639      	mov	r1, r7
 801e9ba:	f7e1 ff5f 	bl	800087c <__aeabi_ddiv>
 801e9be:	ec41 0b10 	vmov	d0, r0, r1
 801e9c2:	b005      	add	sp, #20
 801e9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e9c8 <__copybits>:
 801e9c8:	3901      	subs	r1, #1
 801e9ca:	b570      	push	{r4, r5, r6, lr}
 801e9cc:	1149      	asrs	r1, r1, #5
 801e9ce:	6914      	ldr	r4, [r2, #16]
 801e9d0:	3101      	adds	r1, #1
 801e9d2:	f102 0314 	add.w	r3, r2, #20
 801e9d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e9da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e9de:	1f05      	subs	r5, r0, #4
 801e9e0:	42a3      	cmp	r3, r4
 801e9e2:	d30c      	bcc.n	801e9fe <__copybits+0x36>
 801e9e4:	1aa3      	subs	r3, r4, r2
 801e9e6:	3b11      	subs	r3, #17
 801e9e8:	f023 0303 	bic.w	r3, r3, #3
 801e9ec:	3211      	adds	r2, #17
 801e9ee:	42a2      	cmp	r2, r4
 801e9f0:	bf88      	it	hi
 801e9f2:	2300      	movhi	r3, #0
 801e9f4:	4418      	add	r0, r3
 801e9f6:	2300      	movs	r3, #0
 801e9f8:	4288      	cmp	r0, r1
 801e9fa:	d305      	bcc.n	801ea08 <__copybits+0x40>
 801e9fc:	bd70      	pop	{r4, r5, r6, pc}
 801e9fe:	f853 6b04 	ldr.w	r6, [r3], #4
 801ea02:	f845 6f04 	str.w	r6, [r5, #4]!
 801ea06:	e7eb      	b.n	801e9e0 <__copybits+0x18>
 801ea08:	f840 3b04 	str.w	r3, [r0], #4
 801ea0c:	e7f4      	b.n	801e9f8 <__copybits+0x30>

0801ea0e <__any_on>:
 801ea0e:	f100 0214 	add.w	r2, r0, #20
 801ea12:	6900      	ldr	r0, [r0, #16]
 801ea14:	114b      	asrs	r3, r1, #5
 801ea16:	4298      	cmp	r0, r3
 801ea18:	b510      	push	{r4, lr}
 801ea1a:	db11      	blt.n	801ea40 <__any_on+0x32>
 801ea1c:	dd0a      	ble.n	801ea34 <__any_on+0x26>
 801ea1e:	f011 011f 	ands.w	r1, r1, #31
 801ea22:	d007      	beq.n	801ea34 <__any_on+0x26>
 801ea24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ea28:	fa24 f001 	lsr.w	r0, r4, r1
 801ea2c:	fa00 f101 	lsl.w	r1, r0, r1
 801ea30:	428c      	cmp	r4, r1
 801ea32:	d10b      	bne.n	801ea4c <__any_on+0x3e>
 801ea34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ea38:	4293      	cmp	r3, r2
 801ea3a:	d803      	bhi.n	801ea44 <__any_on+0x36>
 801ea3c:	2000      	movs	r0, #0
 801ea3e:	bd10      	pop	{r4, pc}
 801ea40:	4603      	mov	r3, r0
 801ea42:	e7f7      	b.n	801ea34 <__any_on+0x26>
 801ea44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ea48:	2900      	cmp	r1, #0
 801ea4a:	d0f5      	beq.n	801ea38 <__any_on+0x2a>
 801ea4c:	2001      	movs	r0, #1
 801ea4e:	e7f6      	b.n	801ea3e <__any_on+0x30>

0801ea50 <sulp>:
 801ea50:	b570      	push	{r4, r5, r6, lr}
 801ea52:	4604      	mov	r4, r0
 801ea54:	460d      	mov	r5, r1
 801ea56:	ec45 4b10 	vmov	d0, r4, r5
 801ea5a:	4616      	mov	r6, r2
 801ea5c:	f7ff feba 	bl	801e7d4 <__ulp>
 801ea60:	ec51 0b10 	vmov	r0, r1, d0
 801ea64:	b17e      	cbz	r6, 801ea86 <sulp+0x36>
 801ea66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ea6a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	dd09      	ble.n	801ea86 <sulp+0x36>
 801ea72:	051b      	lsls	r3, r3, #20
 801ea74:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801ea78:	2400      	movs	r4, #0
 801ea7a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801ea7e:	4622      	mov	r2, r4
 801ea80:	462b      	mov	r3, r5
 801ea82:	f7e1 fdd1 	bl	8000628 <__aeabi_dmul>
 801ea86:	ec41 0b10 	vmov	d0, r0, r1
 801ea8a:	bd70      	pop	{r4, r5, r6, pc}
 801ea8c:	0000      	movs	r0, r0
	...

0801ea90 <_strtod_l>:
 801ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea94:	b09f      	sub	sp, #124	@ 0x7c
 801ea96:	460c      	mov	r4, r1
 801ea98:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ea9a:	2200      	movs	r2, #0
 801ea9c:	921a      	str	r2, [sp, #104]	@ 0x68
 801ea9e:	9005      	str	r0, [sp, #20]
 801eaa0:	f04f 0a00 	mov.w	sl, #0
 801eaa4:	f04f 0b00 	mov.w	fp, #0
 801eaa8:	460a      	mov	r2, r1
 801eaaa:	9219      	str	r2, [sp, #100]	@ 0x64
 801eaac:	7811      	ldrb	r1, [r2, #0]
 801eaae:	292b      	cmp	r1, #43	@ 0x2b
 801eab0:	d04a      	beq.n	801eb48 <_strtod_l+0xb8>
 801eab2:	d838      	bhi.n	801eb26 <_strtod_l+0x96>
 801eab4:	290d      	cmp	r1, #13
 801eab6:	d832      	bhi.n	801eb1e <_strtod_l+0x8e>
 801eab8:	2908      	cmp	r1, #8
 801eaba:	d832      	bhi.n	801eb22 <_strtod_l+0x92>
 801eabc:	2900      	cmp	r1, #0
 801eabe:	d03b      	beq.n	801eb38 <_strtod_l+0xa8>
 801eac0:	2200      	movs	r2, #0
 801eac2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801eac4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801eac6:	782a      	ldrb	r2, [r5, #0]
 801eac8:	2a30      	cmp	r2, #48	@ 0x30
 801eaca:	f040 80b3 	bne.w	801ec34 <_strtod_l+0x1a4>
 801eace:	786a      	ldrb	r2, [r5, #1]
 801ead0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ead4:	2a58      	cmp	r2, #88	@ 0x58
 801ead6:	d16e      	bne.n	801ebb6 <_strtod_l+0x126>
 801ead8:	9302      	str	r3, [sp, #8]
 801eada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eadc:	9301      	str	r3, [sp, #4]
 801eade:	ab1a      	add	r3, sp, #104	@ 0x68
 801eae0:	9300      	str	r3, [sp, #0]
 801eae2:	4a8e      	ldr	r2, [pc, #568]	@ (801ed1c <_strtod_l+0x28c>)
 801eae4:	9805      	ldr	r0, [sp, #20]
 801eae6:	ab1b      	add	r3, sp, #108	@ 0x6c
 801eae8:	a919      	add	r1, sp, #100	@ 0x64
 801eaea:	f001 fa33 	bl	801ff54 <__gethex>
 801eaee:	f010 060f 	ands.w	r6, r0, #15
 801eaf2:	4604      	mov	r4, r0
 801eaf4:	d005      	beq.n	801eb02 <_strtod_l+0x72>
 801eaf6:	2e06      	cmp	r6, #6
 801eaf8:	d128      	bne.n	801eb4c <_strtod_l+0xbc>
 801eafa:	3501      	adds	r5, #1
 801eafc:	2300      	movs	r3, #0
 801eafe:	9519      	str	r5, [sp, #100]	@ 0x64
 801eb00:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	f040 858e 	bne.w	801f626 <_strtod_l+0xb96>
 801eb0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eb0c:	b1cb      	cbz	r3, 801eb42 <_strtod_l+0xb2>
 801eb0e:	4652      	mov	r2, sl
 801eb10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801eb14:	ec43 2b10 	vmov	d0, r2, r3
 801eb18:	b01f      	add	sp, #124	@ 0x7c
 801eb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb1e:	2920      	cmp	r1, #32
 801eb20:	d1ce      	bne.n	801eac0 <_strtod_l+0x30>
 801eb22:	3201      	adds	r2, #1
 801eb24:	e7c1      	b.n	801eaaa <_strtod_l+0x1a>
 801eb26:	292d      	cmp	r1, #45	@ 0x2d
 801eb28:	d1ca      	bne.n	801eac0 <_strtod_l+0x30>
 801eb2a:	2101      	movs	r1, #1
 801eb2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801eb2e:	1c51      	adds	r1, r2, #1
 801eb30:	9119      	str	r1, [sp, #100]	@ 0x64
 801eb32:	7852      	ldrb	r2, [r2, #1]
 801eb34:	2a00      	cmp	r2, #0
 801eb36:	d1c5      	bne.n	801eac4 <_strtod_l+0x34>
 801eb38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801eb3a:	9419      	str	r4, [sp, #100]	@ 0x64
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	f040 8570 	bne.w	801f622 <_strtod_l+0xb92>
 801eb42:	4652      	mov	r2, sl
 801eb44:	465b      	mov	r3, fp
 801eb46:	e7e5      	b.n	801eb14 <_strtod_l+0x84>
 801eb48:	2100      	movs	r1, #0
 801eb4a:	e7ef      	b.n	801eb2c <_strtod_l+0x9c>
 801eb4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801eb4e:	b13a      	cbz	r2, 801eb60 <_strtod_l+0xd0>
 801eb50:	2135      	movs	r1, #53	@ 0x35
 801eb52:	a81c      	add	r0, sp, #112	@ 0x70
 801eb54:	f7ff ff38 	bl	801e9c8 <__copybits>
 801eb58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801eb5a:	9805      	ldr	r0, [sp, #20]
 801eb5c:	f7ff fb06 	bl	801e16c <_Bfree>
 801eb60:	3e01      	subs	r6, #1
 801eb62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801eb64:	2e04      	cmp	r6, #4
 801eb66:	d806      	bhi.n	801eb76 <_strtod_l+0xe6>
 801eb68:	e8df f006 	tbb	[pc, r6]
 801eb6c:	201d0314 	.word	0x201d0314
 801eb70:	14          	.byte	0x14
 801eb71:	00          	.byte	0x00
 801eb72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801eb76:	05e1      	lsls	r1, r4, #23
 801eb78:	bf48      	it	mi
 801eb7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801eb7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801eb82:	0d1b      	lsrs	r3, r3, #20
 801eb84:	051b      	lsls	r3, r3, #20
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d1bb      	bne.n	801eb02 <_strtod_l+0x72>
 801eb8a:	f7fe fbb1 	bl	801d2f0 <__errno>
 801eb8e:	2322      	movs	r3, #34	@ 0x22
 801eb90:	6003      	str	r3, [r0, #0]
 801eb92:	e7b6      	b.n	801eb02 <_strtod_l+0x72>
 801eb94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801eb98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801eb9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801eba0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801eba4:	e7e7      	b.n	801eb76 <_strtod_l+0xe6>
 801eba6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801ed24 <_strtod_l+0x294>
 801ebaa:	e7e4      	b.n	801eb76 <_strtod_l+0xe6>
 801ebac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801ebb0:	f04f 3aff 	mov.w	sl, #4294967295
 801ebb4:	e7df      	b.n	801eb76 <_strtod_l+0xe6>
 801ebb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ebb8:	1c5a      	adds	r2, r3, #1
 801ebba:	9219      	str	r2, [sp, #100]	@ 0x64
 801ebbc:	785b      	ldrb	r3, [r3, #1]
 801ebbe:	2b30      	cmp	r3, #48	@ 0x30
 801ebc0:	d0f9      	beq.n	801ebb6 <_strtod_l+0x126>
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d09d      	beq.n	801eb02 <_strtod_l+0x72>
 801ebc6:	2301      	movs	r3, #1
 801ebc8:	9309      	str	r3, [sp, #36]	@ 0x24
 801ebca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ebcc:	930c      	str	r3, [sp, #48]	@ 0x30
 801ebce:	2300      	movs	r3, #0
 801ebd0:	9308      	str	r3, [sp, #32]
 801ebd2:	930a      	str	r3, [sp, #40]	@ 0x28
 801ebd4:	461f      	mov	r7, r3
 801ebd6:	220a      	movs	r2, #10
 801ebd8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ebda:	7805      	ldrb	r5, [r0, #0]
 801ebdc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801ebe0:	b2d9      	uxtb	r1, r3
 801ebe2:	2909      	cmp	r1, #9
 801ebe4:	d928      	bls.n	801ec38 <_strtod_l+0x1a8>
 801ebe6:	494e      	ldr	r1, [pc, #312]	@ (801ed20 <_strtod_l+0x290>)
 801ebe8:	2201      	movs	r2, #1
 801ebea:	f001 f8f5 	bl	801fdd8 <strncmp>
 801ebee:	2800      	cmp	r0, #0
 801ebf0:	d032      	beq.n	801ec58 <_strtod_l+0x1c8>
 801ebf2:	2000      	movs	r0, #0
 801ebf4:	462a      	mov	r2, r5
 801ebf6:	4681      	mov	r9, r0
 801ebf8:	463d      	mov	r5, r7
 801ebfa:	4603      	mov	r3, r0
 801ebfc:	2a65      	cmp	r2, #101	@ 0x65
 801ebfe:	d001      	beq.n	801ec04 <_strtod_l+0x174>
 801ec00:	2a45      	cmp	r2, #69	@ 0x45
 801ec02:	d114      	bne.n	801ec2e <_strtod_l+0x19e>
 801ec04:	b91d      	cbnz	r5, 801ec0e <_strtod_l+0x17e>
 801ec06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ec08:	4302      	orrs	r2, r0
 801ec0a:	d095      	beq.n	801eb38 <_strtod_l+0xa8>
 801ec0c:	2500      	movs	r5, #0
 801ec0e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801ec10:	1c62      	adds	r2, r4, #1
 801ec12:	9219      	str	r2, [sp, #100]	@ 0x64
 801ec14:	7862      	ldrb	r2, [r4, #1]
 801ec16:	2a2b      	cmp	r2, #43	@ 0x2b
 801ec18:	d077      	beq.n	801ed0a <_strtod_l+0x27a>
 801ec1a:	2a2d      	cmp	r2, #45	@ 0x2d
 801ec1c:	d07b      	beq.n	801ed16 <_strtod_l+0x286>
 801ec1e:	f04f 0c00 	mov.w	ip, #0
 801ec22:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801ec26:	2909      	cmp	r1, #9
 801ec28:	f240 8082 	bls.w	801ed30 <_strtod_l+0x2a0>
 801ec2c:	9419      	str	r4, [sp, #100]	@ 0x64
 801ec2e:	f04f 0800 	mov.w	r8, #0
 801ec32:	e0a2      	b.n	801ed7a <_strtod_l+0x2ea>
 801ec34:	2300      	movs	r3, #0
 801ec36:	e7c7      	b.n	801ebc8 <_strtod_l+0x138>
 801ec38:	2f08      	cmp	r7, #8
 801ec3a:	bfd5      	itete	le
 801ec3c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801ec3e:	9908      	ldrgt	r1, [sp, #32]
 801ec40:	fb02 3301 	mlale	r3, r2, r1, r3
 801ec44:	fb02 3301 	mlagt	r3, r2, r1, r3
 801ec48:	f100 0001 	add.w	r0, r0, #1
 801ec4c:	bfd4      	ite	le
 801ec4e:	930a      	strle	r3, [sp, #40]	@ 0x28
 801ec50:	9308      	strgt	r3, [sp, #32]
 801ec52:	3701      	adds	r7, #1
 801ec54:	9019      	str	r0, [sp, #100]	@ 0x64
 801ec56:	e7bf      	b.n	801ebd8 <_strtod_l+0x148>
 801ec58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ec5a:	1c5a      	adds	r2, r3, #1
 801ec5c:	9219      	str	r2, [sp, #100]	@ 0x64
 801ec5e:	785a      	ldrb	r2, [r3, #1]
 801ec60:	b37f      	cbz	r7, 801ecc2 <_strtod_l+0x232>
 801ec62:	4681      	mov	r9, r0
 801ec64:	463d      	mov	r5, r7
 801ec66:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801ec6a:	2b09      	cmp	r3, #9
 801ec6c:	d912      	bls.n	801ec94 <_strtod_l+0x204>
 801ec6e:	2301      	movs	r3, #1
 801ec70:	e7c4      	b.n	801ebfc <_strtod_l+0x16c>
 801ec72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ec74:	1c5a      	adds	r2, r3, #1
 801ec76:	9219      	str	r2, [sp, #100]	@ 0x64
 801ec78:	785a      	ldrb	r2, [r3, #1]
 801ec7a:	3001      	adds	r0, #1
 801ec7c:	2a30      	cmp	r2, #48	@ 0x30
 801ec7e:	d0f8      	beq.n	801ec72 <_strtod_l+0x1e2>
 801ec80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801ec84:	2b08      	cmp	r3, #8
 801ec86:	f200 84d3 	bhi.w	801f630 <_strtod_l+0xba0>
 801ec8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ec8c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec8e:	4681      	mov	r9, r0
 801ec90:	2000      	movs	r0, #0
 801ec92:	4605      	mov	r5, r0
 801ec94:	3a30      	subs	r2, #48	@ 0x30
 801ec96:	f100 0301 	add.w	r3, r0, #1
 801ec9a:	d02a      	beq.n	801ecf2 <_strtod_l+0x262>
 801ec9c:	4499      	add	r9, r3
 801ec9e:	eb00 0c05 	add.w	ip, r0, r5
 801eca2:	462b      	mov	r3, r5
 801eca4:	210a      	movs	r1, #10
 801eca6:	4563      	cmp	r3, ip
 801eca8:	d10d      	bne.n	801ecc6 <_strtod_l+0x236>
 801ecaa:	1c69      	adds	r1, r5, #1
 801ecac:	4401      	add	r1, r0
 801ecae:	4428      	add	r0, r5
 801ecb0:	2808      	cmp	r0, #8
 801ecb2:	dc16      	bgt.n	801ece2 <_strtod_l+0x252>
 801ecb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ecb6:	230a      	movs	r3, #10
 801ecb8:	fb03 2300 	mla	r3, r3, r0, r2
 801ecbc:	930a      	str	r3, [sp, #40]	@ 0x28
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	e018      	b.n	801ecf4 <_strtod_l+0x264>
 801ecc2:	4638      	mov	r0, r7
 801ecc4:	e7da      	b.n	801ec7c <_strtod_l+0x1ec>
 801ecc6:	2b08      	cmp	r3, #8
 801ecc8:	f103 0301 	add.w	r3, r3, #1
 801eccc:	dc03      	bgt.n	801ecd6 <_strtod_l+0x246>
 801ecce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ecd0:	434e      	muls	r6, r1
 801ecd2:	960a      	str	r6, [sp, #40]	@ 0x28
 801ecd4:	e7e7      	b.n	801eca6 <_strtod_l+0x216>
 801ecd6:	2b10      	cmp	r3, #16
 801ecd8:	bfde      	ittt	le
 801ecda:	9e08      	ldrle	r6, [sp, #32]
 801ecdc:	434e      	mulle	r6, r1
 801ecde:	9608      	strle	r6, [sp, #32]
 801ece0:	e7e1      	b.n	801eca6 <_strtod_l+0x216>
 801ece2:	280f      	cmp	r0, #15
 801ece4:	dceb      	bgt.n	801ecbe <_strtod_l+0x22e>
 801ece6:	9808      	ldr	r0, [sp, #32]
 801ece8:	230a      	movs	r3, #10
 801ecea:	fb03 2300 	mla	r3, r3, r0, r2
 801ecee:	9308      	str	r3, [sp, #32]
 801ecf0:	e7e5      	b.n	801ecbe <_strtod_l+0x22e>
 801ecf2:	4629      	mov	r1, r5
 801ecf4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ecf6:	1c50      	adds	r0, r2, #1
 801ecf8:	9019      	str	r0, [sp, #100]	@ 0x64
 801ecfa:	7852      	ldrb	r2, [r2, #1]
 801ecfc:	4618      	mov	r0, r3
 801ecfe:	460d      	mov	r5, r1
 801ed00:	e7b1      	b.n	801ec66 <_strtod_l+0x1d6>
 801ed02:	f04f 0900 	mov.w	r9, #0
 801ed06:	2301      	movs	r3, #1
 801ed08:	e77d      	b.n	801ec06 <_strtod_l+0x176>
 801ed0a:	f04f 0c00 	mov.w	ip, #0
 801ed0e:	1ca2      	adds	r2, r4, #2
 801ed10:	9219      	str	r2, [sp, #100]	@ 0x64
 801ed12:	78a2      	ldrb	r2, [r4, #2]
 801ed14:	e785      	b.n	801ec22 <_strtod_l+0x192>
 801ed16:	f04f 0c01 	mov.w	ip, #1
 801ed1a:	e7f8      	b.n	801ed0e <_strtod_l+0x27e>
 801ed1c:	08023038 	.word	0x08023038
 801ed20:	08023020 	.word	0x08023020
 801ed24:	7ff00000 	.word	0x7ff00000
 801ed28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ed2a:	1c51      	adds	r1, r2, #1
 801ed2c:	9119      	str	r1, [sp, #100]	@ 0x64
 801ed2e:	7852      	ldrb	r2, [r2, #1]
 801ed30:	2a30      	cmp	r2, #48	@ 0x30
 801ed32:	d0f9      	beq.n	801ed28 <_strtod_l+0x298>
 801ed34:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801ed38:	2908      	cmp	r1, #8
 801ed3a:	f63f af78 	bhi.w	801ec2e <_strtod_l+0x19e>
 801ed3e:	3a30      	subs	r2, #48	@ 0x30
 801ed40:	920e      	str	r2, [sp, #56]	@ 0x38
 801ed42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ed44:	920f      	str	r2, [sp, #60]	@ 0x3c
 801ed46:	f04f 080a 	mov.w	r8, #10
 801ed4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ed4c:	1c56      	adds	r6, r2, #1
 801ed4e:	9619      	str	r6, [sp, #100]	@ 0x64
 801ed50:	7852      	ldrb	r2, [r2, #1]
 801ed52:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801ed56:	f1be 0f09 	cmp.w	lr, #9
 801ed5a:	d939      	bls.n	801edd0 <_strtod_l+0x340>
 801ed5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801ed5e:	1a76      	subs	r6, r6, r1
 801ed60:	2e08      	cmp	r6, #8
 801ed62:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801ed66:	dc03      	bgt.n	801ed70 <_strtod_l+0x2e0>
 801ed68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ed6a:	4588      	cmp	r8, r1
 801ed6c:	bfa8      	it	ge
 801ed6e:	4688      	movge	r8, r1
 801ed70:	f1bc 0f00 	cmp.w	ip, #0
 801ed74:	d001      	beq.n	801ed7a <_strtod_l+0x2ea>
 801ed76:	f1c8 0800 	rsb	r8, r8, #0
 801ed7a:	2d00      	cmp	r5, #0
 801ed7c:	d14e      	bne.n	801ee1c <_strtod_l+0x38c>
 801ed7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ed80:	4308      	orrs	r0, r1
 801ed82:	f47f aebe 	bne.w	801eb02 <_strtod_l+0x72>
 801ed86:	2b00      	cmp	r3, #0
 801ed88:	f47f aed6 	bne.w	801eb38 <_strtod_l+0xa8>
 801ed8c:	2a69      	cmp	r2, #105	@ 0x69
 801ed8e:	d028      	beq.n	801ede2 <_strtod_l+0x352>
 801ed90:	dc25      	bgt.n	801edde <_strtod_l+0x34e>
 801ed92:	2a49      	cmp	r2, #73	@ 0x49
 801ed94:	d025      	beq.n	801ede2 <_strtod_l+0x352>
 801ed96:	2a4e      	cmp	r2, #78	@ 0x4e
 801ed98:	f47f aece 	bne.w	801eb38 <_strtod_l+0xa8>
 801ed9c:	499b      	ldr	r1, [pc, #620]	@ (801f00c <_strtod_l+0x57c>)
 801ed9e:	a819      	add	r0, sp, #100	@ 0x64
 801eda0:	f001 fafa 	bl	8020398 <__match>
 801eda4:	2800      	cmp	r0, #0
 801eda6:	f43f aec7 	beq.w	801eb38 <_strtod_l+0xa8>
 801edaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801edac:	781b      	ldrb	r3, [r3, #0]
 801edae:	2b28      	cmp	r3, #40	@ 0x28
 801edb0:	d12e      	bne.n	801ee10 <_strtod_l+0x380>
 801edb2:	4997      	ldr	r1, [pc, #604]	@ (801f010 <_strtod_l+0x580>)
 801edb4:	aa1c      	add	r2, sp, #112	@ 0x70
 801edb6:	a819      	add	r0, sp, #100	@ 0x64
 801edb8:	f001 fb02 	bl	80203c0 <__hexnan>
 801edbc:	2805      	cmp	r0, #5
 801edbe:	d127      	bne.n	801ee10 <_strtod_l+0x380>
 801edc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801edc2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801edc6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801edca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801edce:	e698      	b.n	801eb02 <_strtod_l+0x72>
 801edd0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801edd2:	fb08 2101 	mla	r1, r8, r1, r2
 801edd6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801edda:	920e      	str	r2, [sp, #56]	@ 0x38
 801eddc:	e7b5      	b.n	801ed4a <_strtod_l+0x2ba>
 801edde:	2a6e      	cmp	r2, #110	@ 0x6e
 801ede0:	e7da      	b.n	801ed98 <_strtod_l+0x308>
 801ede2:	498c      	ldr	r1, [pc, #560]	@ (801f014 <_strtod_l+0x584>)
 801ede4:	a819      	add	r0, sp, #100	@ 0x64
 801ede6:	f001 fad7 	bl	8020398 <__match>
 801edea:	2800      	cmp	r0, #0
 801edec:	f43f aea4 	beq.w	801eb38 <_strtod_l+0xa8>
 801edf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801edf2:	4989      	ldr	r1, [pc, #548]	@ (801f018 <_strtod_l+0x588>)
 801edf4:	3b01      	subs	r3, #1
 801edf6:	a819      	add	r0, sp, #100	@ 0x64
 801edf8:	9319      	str	r3, [sp, #100]	@ 0x64
 801edfa:	f001 facd 	bl	8020398 <__match>
 801edfe:	b910      	cbnz	r0, 801ee06 <_strtod_l+0x376>
 801ee00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ee02:	3301      	adds	r3, #1
 801ee04:	9319      	str	r3, [sp, #100]	@ 0x64
 801ee06:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801f028 <_strtod_l+0x598>
 801ee0a:	f04f 0a00 	mov.w	sl, #0
 801ee0e:	e678      	b.n	801eb02 <_strtod_l+0x72>
 801ee10:	4882      	ldr	r0, [pc, #520]	@ (801f01c <_strtod_l+0x58c>)
 801ee12:	f001 f815 	bl	801fe40 <nan>
 801ee16:	ec5b ab10 	vmov	sl, fp, d0
 801ee1a:	e672      	b.n	801eb02 <_strtod_l+0x72>
 801ee1c:	eba8 0309 	sub.w	r3, r8, r9
 801ee20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ee22:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee24:	2f00      	cmp	r7, #0
 801ee26:	bf08      	it	eq
 801ee28:	462f      	moveq	r7, r5
 801ee2a:	2d10      	cmp	r5, #16
 801ee2c:	462c      	mov	r4, r5
 801ee2e:	bfa8      	it	ge
 801ee30:	2410      	movge	r4, #16
 801ee32:	f7e1 fb7f 	bl	8000534 <__aeabi_ui2d>
 801ee36:	2d09      	cmp	r5, #9
 801ee38:	4682      	mov	sl, r0
 801ee3a:	468b      	mov	fp, r1
 801ee3c:	dc13      	bgt.n	801ee66 <_strtod_l+0x3d6>
 801ee3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	f43f ae5e 	beq.w	801eb02 <_strtod_l+0x72>
 801ee46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee48:	dd78      	ble.n	801ef3c <_strtod_l+0x4ac>
 801ee4a:	2b16      	cmp	r3, #22
 801ee4c:	dc5f      	bgt.n	801ef0e <_strtod_l+0x47e>
 801ee4e:	4974      	ldr	r1, [pc, #464]	@ (801f020 <_strtod_l+0x590>)
 801ee50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ee54:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee58:	4652      	mov	r2, sl
 801ee5a:	465b      	mov	r3, fp
 801ee5c:	f7e1 fbe4 	bl	8000628 <__aeabi_dmul>
 801ee60:	4682      	mov	sl, r0
 801ee62:	468b      	mov	fp, r1
 801ee64:	e64d      	b.n	801eb02 <_strtod_l+0x72>
 801ee66:	4b6e      	ldr	r3, [pc, #440]	@ (801f020 <_strtod_l+0x590>)
 801ee68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ee6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801ee70:	f7e1 fbda 	bl	8000628 <__aeabi_dmul>
 801ee74:	4682      	mov	sl, r0
 801ee76:	9808      	ldr	r0, [sp, #32]
 801ee78:	468b      	mov	fp, r1
 801ee7a:	f7e1 fb5b 	bl	8000534 <__aeabi_ui2d>
 801ee7e:	4602      	mov	r2, r0
 801ee80:	460b      	mov	r3, r1
 801ee82:	4650      	mov	r0, sl
 801ee84:	4659      	mov	r1, fp
 801ee86:	f7e1 fa19 	bl	80002bc <__adddf3>
 801ee8a:	2d0f      	cmp	r5, #15
 801ee8c:	4682      	mov	sl, r0
 801ee8e:	468b      	mov	fp, r1
 801ee90:	ddd5      	ble.n	801ee3e <_strtod_l+0x3ae>
 801ee92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee94:	1b2c      	subs	r4, r5, r4
 801ee96:	441c      	add	r4, r3
 801ee98:	2c00      	cmp	r4, #0
 801ee9a:	f340 8096 	ble.w	801efca <_strtod_l+0x53a>
 801ee9e:	f014 030f 	ands.w	r3, r4, #15
 801eea2:	d00a      	beq.n	801eeba <_strtod_l+0x42a>
 801eea4:	495e      	ldr	r1, [pc, #376]	@ (801f020 <_strtod_l+0x590>)
 801eea6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801eeaa:	4652      	mov	r2, sl
 801eeac:	465b      	mov	r3, fp
 801eeae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eeb2:	f7e1 fbb9 	bl	8000628 <__aeabi_dmul>
 801eeb6:	4682      	mov	sl, r0
 801eeb8:	468b      	mov	fp, r1
 801eeba:	f034 040f 	bics.w	r4, r4, #15
 801eebe:	d073      	beq.n	801efa8 <_strtod_l+0x518>
 801eec0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801eec4:	dd48      	ble.n	801ef58 <_strtod_l+0x4c8>
 801eec6:	2400      	movs	r4, #0
 801eec8:	46a0      	mov	r8, r4
 801eeca:	940a      	str	r4, [sp, #40]	@ 0x28
 801eecc:	46a1      	mov	r9, r4
 801eece:	9a05      	ldr	r2, [sp, #20]
 801eed0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801f028 <_strtod_l+0x598>
 801eed4:	2322      	movs	r3, #34	@ 0x22
 801eed6:	6013      	str	r3, [r2, #0]
 801eed8:	f04f 0a00 	mov.w	sl, #0
 801eedc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eede:	2b00      	cmp	r3, #0
 801eee0:	f43f ae0f 	beq.w	801eb02 <_strtod_l+0x72>
 801eee4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801eee6:	9805      	ldr	r0, [sp, #20]
 801eee8:	f7ff f940 	bl	801e16c <_Bfree>
 801eeec:	9805      	ldr	r0, [sp, #20]
 801eeee:	4649      	mov	r1, r9
 801eef0:	f7ff f93c 	bl	801e16c <_Bfree>
 801eef4:	9805      	ldr	r0, [sp, #20]
 801eef6:	4641      	mov	r1, r8
 801eef8:	f7ff f938 	bl	801e16c <_Bfree>
 801eefc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eefe:	9805      	ldr	r0, [sp, #20]
 801ef00:	f7ff f934 	bl	801e16c <_Bfree>
 801ef04:	9805      	ldr	r0, [sp, #20]
 801ef06:	4621      	mov	r1, r4
 801ef08:	f7ff f930 	bl	801e16c <_Bfree>
 801ef0c:	e5f9      	b.n	801eb02 <_strtod_l+0x72>
 801ef0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ef10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801ef14:	4293      	cmp	r3, r2
 801ef16:	dbbc      	blt.n	801ee92 <_strtod_l+0x402>
 801ef18:	4c41      	ldr	r4, [pc, #260]	@ (801f020 <_strtod_l+0x590>)
 801ef1a:	f1c5 050f 	rsb	r5, r5, #15
 801ef1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ef22:	4652      	mov	r2, sl
 801ef24:	465b      	mov	r3, fp
 801ef26:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ef2a:	f7e1 fb7d 	bl	8000628 <__aeabi_dmul>
 801ef2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef30:	1b5d      	subs	r5, r3, r5
 801ef32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ef36:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ef3a:	e78f      	b.n	801ee5c <_strtod_l+0x3cc>
 801ef3c:	3316      	adds	r3, #22
 801ef3e:	dba8      	blt.n	801ee92 <_strtod_l+0x402>
 801ef40:	4b37      	ldr	r3, [pc, #220]	@ (801f020 <_strtod_l+0x590>)
 801ef42:	eba9 0808 	sub.w	r8, r9, r8
 801ef46:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801ef4a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801ef4e:	4650      	mov	r0, sl
 801ef50:	4659      	mov	r1, fp
 801ef52:	f7e1 fc93 	bl	800087c <__aeabi_ddiv>
 801ef56:	e783      	b.n	801ee60 <_strtod_l+0x3d0>
 801ef58:	4b32      	ldr	r3, [pc, #200]	@ (801f024 <_strtod_l+0x594>)
 801ef5a:	9308      	str	r3, [sp, #32]
 801ef5c:	2300      	movs	r3, #0
 801ef5e:	1124      	asrs	r4, r4, #4
 801ef60:	4650      	mov	r0, sl
 801ef62:	4659      	mov	r1, fp
 801ef64:	461e      	mov	r6, r3
 801ef66:	2c01      	cmp	r4, #1
 801ef68:	dc21      	bgt.n	801efae <_strtod_l+0x51e>
 801ef6a:	b10b      	cbz	r3, 801ef70 <_strtod_l+0x4e0>
 801ef6c:	4682      	mov	sl, r0
 801ef6e:	468b      	mov	fp, r1
 801ef70:	492c      	ldr	r1, [pc, #176]	@ (801f024 <_strtod_l+0x594>)
 801ef72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801ef76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801ef7a:	4652      	mov	r2, sl
 801ef7c:	465b      	mov	r3, fp
 801ef7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ef82:	f7e1 fb51 	bl	8000628 <__aeabi_dmul>
 801ef86:	4b28      	ldr	r3, [pc, #160]	@ (801f028 <_strtod_l+0x598>)
 801ef88:	460a      	mov	r2, r1
 801ef8a:	400b      	ands	r3, r1
 801ef8c:	4927      	ldr	r1, [pc, #156]	@ (801f02c <_strtod_l+0x59c>)
 801ef8e:	428b      	cmp	r3, r1
 801ef90:	4682      	mov	sl, r0
 801ef92:	d898      	bhi.n	801eec6 <_strtod_l+0x436>
 801ef94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801ef98:	428b      	cmp	r3, r1
 801ef9a:	bf86      	itte	hi
 801ef9c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801f030 <_strtod_l+0x5a0>
 801efa0:	f04f 3aff 	movhi.w	sl, #4294967295
 801efa4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801efa8:	2300      	movs	r3, #0
 801efaa:	9308      	str	r3, [sp, #32]
 801efac:	e07a      	b.n	801f0a4 <_strtod_l+0x614>
 801efae:	07e2      	lsls	r2, r4, #31
 801efb0:	d505      	bpl.n	801efbe <_strtod_l+0x52e>
 801efb2:	9b08      	ldr	r3, [sp, #32]
 801efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efb8:	f7e1 fb36 	bl	8000628 <__aeabi_dmul>
 801efbc:	2301      	movs	r3, #1
 801efbe:	9a08      	ldr	r2, [sp, #32]
 801efc0:	3208      	adds	r2, #8
 801efc2:	3601      	adds	r6, #1
 801efc4:	1064      	asrs	r4, r4, #1
 801efc6:	9208      	str	r2, [sp, #32]
 801efc8:	e7cd      	b.n	801ef66 <_strtod_l+0x4d6>
 801efca:	d0ed      	beq.n	801efa8 <_strtod_l+0x518>
 801efcc:	4264      	negs	r4, r4
 801efce:	f014 020f 	ands.w	r2, r4, #15
 801efd2:	d00a      	beq.n	801efea <_strtod_l+0x55a>
 801efd4:	4b12      	ldr	r3, [pc, #72]	@ (801f020 <_strtod_l+0x590>)
 801efd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801efda:	4650      	mov	r0, sl
 801efdc:	4659      	mov	r1, fp
 801efde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efe2:	f7e1 fc4b 	bl	800087c <__aeabi_ddiv>
 801efe6:	4682      	mov	sl, r0
 801efe8:	468b      	mov	fp, r1
 801efea:	1124      	asrs	r4, r4, #4
 801efec:	d0dc      	beq.n	801efa8 <_strtod_l+0x518>
 801efee:	2c1f      	cmp	r4, #31
 801eff0:	dd20      	ble.n	801f034 <_strtod_l+0x5a4>
 801eff2:	2400      	movs	r4, #0
 801eff4:	46a0      	mov	r8, r4
 801eff6:	940a      	str	r4, [sp, #40]	@ 0x28
 801eff8:	46a1      	mov	r9, r4
 801effa:	9a05      	ldr	r2, [sp, #20]
 801effc:	2322      	movs	r3, #34	@ 0x22
 801effe:	f04f 0a00 	mov.w	sl, #0
 801f002:	f04f 0b00 	mov.w	fp, #0
 801f006:	6013      	str	r3, [r2, #0]
 801f008:	e768      	b.n	801eedc <_strtod_l+0x44c>
 801f00a:	bf00      	nop
 801f00c:	08022d7a 	.word	0x08022d7a
 801f010:	08023024 	.word	0x08023024
 801f014:	08022d72 	.word	0x08022d72
 801f018:	08022e56 	.word	0x08022e56
 801f01c:	08022e52 	.word	0x08022e52
 801f020:	08022f58 	.word	0x08022f58
 801f024:	08022f30 	.word	0x08022f30
 801f028:	7ff00000 	.word	0x7ff00000
 801f02c:	7ca00000 	.word	0x7ca00000
 801f030:	7fefffff 	.word	0x7fefffff
 801f034:	f014 0310 	ands.w	r3, r4, #16
 801f038:	bf18      	it	ne
 801f03a:	236a      	movne	r3, #106	@ 0x6a
 801f03c:	4ea9      	ldr	r6, [pc, #676]	@ (801f2e4 <_strtod_l+0x854>)
 801f03e:	9308      	str	r3, [sp, #32]
 801f040:	4650      	mov	r0, sl
 801f042:	4659      	mov	r1, fp
 801f044:	2300      	movs	r3, #0
 801f046:	07e2      	lsls	r2, r4, #31
 801f048:	d504      	bpl.n	801f054 <_strtod_l+0x5c4>
 801f04a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f04e:	f7e1 faeb 	bl	8000628 <__aeabi_dmul>
 801f052:	2301      	movs	r3, #1
 801f054:	1064      	asrs	r4, r4, #1
 801f056:	f106 0608 	add.w	r6, r6, #8
 801f05a:	d1f4      	bne.n	801f046 <_strtod_l+0x5b6>
 801f05c:	b10b      	cbz	r3, 801f062 <_strtod_l+0x5d2>
 801f05e:	4682      	mov	sl, r0
 801f060:	468b      	mov	fp, r1
 801f062:	9b08      	ldr	r3, [sp, #32]
 801f064:	b1b3      	cbz	r3, 801f094 <_strtod_l+0x604>
 801f066:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801f06a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801f06e:	2b00      	cmp	r3, #0
 801f070:	4659      	mov	r1, fp
 801f072:	dd0f      	ble.n	801f094 <_strtod_l+0x604>
 801f074:	2b1f      	cmp	r3, #31
 801f076:	dd55      	ble.n	801f124 <_strtod_l+0x694>
 801f078:	2b34      	cmp	r3, #52	@ 0x34
 801f07a:	bfde      	ittt	le
 801f07c:	f04f 33ff 	movle.w	r3, #4294967295
 801f080:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801f084:	4093      	lslle	r3, r2
 801f086:	f04f 0a00 	mov.w	sl, #0
 801f08a:	bfcc      	ite	gt
 801f08c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801f090:	ea03 0b01 	andle.w	fp, r3, r1
 801f094:	2200      	movs	r2, #0
 801f096:	2300      	movs	r3, #0
 801f098:	4650      	mov	r0, sl
 801f09a:	4659      	mov	r1, fp
 801f09c:	f7e1 fd2c 	bl	8000af8 <__aeabi_dcmpeq>
 801f0a0:	2800      	cmp	r0, #0
 801f0a2:	d1a6      	bne.n	801eff2 <_strtod_l+0x562>
 801f0a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f0a6:	9300      	str	r3, [sp, #0]
 801f0a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f0aa:	9805      	ldr	r0, [sp, #20]
 801f0ac:	462b      	mov	r3, r5
 801f0ae:	463a      	mov	r2, r7
 801f0b0:	f7ff f8c4 	bl	801e23c <__s2b>
 801f0b4:	900a      	str	r0, [sp, #40]	@ 0x28
 801f0b6:	2800      	cmp	r0, #0
 801f0b8:	f43f af05 	beq.w	801eec6 <_strtod_l+0x436>
 801f0bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f0be:	2a00      	cmp	r2, #0
 801f0c0:	eba9 0308 	sub.w	r3, r9, r8
 801f0c4:	bfa8      	it	ge
 801f0c6:	2300      	movge	r3, #0
 801f0c8:	9312      	str	r3, [sp, #72]	@ 0x48
 801f0ca:	2400      	movs	r4, #0
 801f0cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801f0d0:	9316      	str	r3, [sp, #88]	@ 0x58
 801f0d2:	46a0      	mov	r8, r4
 801f0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f0d6:	9805      	ldr	r0, [sp, #20]
 801f0d8:	6859      	ldr	r1, [r3, #4]
 801f0da:	f7ff f807 	bl	801e0ec <_Balloc>
 801f0de:	4681      	mov	r9, r0
 801f0e0:	2800      	cmp	r0, #0
 801f0e2:	f43f aef4 	beq.w	801eece <_strtod_l+0x43e>
 801f0e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f0e8:	691a      	ldr	r2, [r3, #16]
 801f0ea:	3202      	adds	r2, #2
 801f0ec:	f103 010c 	add.w	r1, r3, #12
 801f0f0:	0092      	lsls	r2, r2, #2
 801f0f2:	300c      	adds	r0, #12
 801f0f4:	f7fe f931 	bl	801d35a <memcpy>
 801f0f8:	ec4b ab10 	vmov	d0, sl, fp
 801f0fc:	9805      	ldr	r0, [sp, #20]
 801f0fe:	aa1c      	add	r2, sp, #112	@ 0x70
 801f100:	a91b      	add	r1, sp, #108	@ 0x6c
 801f102:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801f106:	f7ff fbd5 	bl	801e8b4 <__d2b>
 801f10a:	901a      	str	r0, [sp, #104]	@ 0x68
 801f10c:	2800      	cmp	r0, #0
 801f10e:	f43f aede 	beq.w	801eece <_strtod_l+0x43e>
 801f112:	9805      	ldr	r0, [sp, #20]
 801f114:	2101      	movs	r1, #1
 801f116:	f7ff f927 	bl	801e368 <__i2b>
 801f11a:	4680      	mov	r8, r0
 801f11c:	b948      	cbnz	r0, 801f132 <_strtod_l+0x6a2>
 801f11e:	f04f 0800 	mov.w	r8, #0
 801f122:	e6d4      	b.n	801eece <_strtod_l+0x43e>
 801f124:	f04f 32ff 	mov.w	r2, #4294967295
 801f128:	fa02 f303 	lsl.w	r3, r2, r3
 801f12c:	ea03 0a0a 	and.w	sl, r3, sl
 801f130:	e7b0      	b.n	801f094 <_strtod_l+0x604>
 801f132:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f134:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801f136:	2d00      	cmp	r5, #0
 801f138:	bfab      	itete	ge
 801f13a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801f13c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801f13e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801f140:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801f142:	bfac      	ite	ge
 801f144:	18ef      	addge	r7, r5, r3
 801f146:	1b5e      	sublt	r6, r3, r5
 801f148:	9b08      	ldr	r3, [sp, #32]
 801f14a:	1aed      	subs	r5, r5, r3
 801f14c:	4415      	add	r5, r2
 801f14e:	4b66      	ldr	r3, [pc, #408]	@ (801f2e8 <_strtod_l+0x858>)
 801f150:	3d01      	subs	r5, #1
 801f152:	429d      	cmp	r5, r3
 801f154:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801f158:	da50      	bge.n	801f1fc <_strtod_l+0x76c>
 801f15a:	1b5b      	subs	r3, r3, r5
 801f15c:	2b1f      	cmp	r3, #31
 801f15e:	eba2 0203 	sub.w	r2, r2, r3
 801f162:	f04f 0101 	mov.w	r1, #1
 801f166:	dc3d      	bgt.n	801f1e4 <_strtod_l+0x754>
 801f168:	fa01 f303 	lsl.w	r3, r1, r3
 801f16c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f16e:	2300      	movs	r3, #0
 801f170:	9310      	str	r3, [sp, #64]	@ 0x40
 801f172:	18bd      	adds	r5, r7, r2
 801f174:	9b08      	ldr	r3, [sp, #32]
 801f176:	42af      	cmp	r7, r5
 801f178:	4416      	add	r6, r2
 801f17a:	441e      	add	r6, r3
 801f17c:	463b      	mov	r3, r7
 801f17e:	bfa8      	it	ge
 801f180:	462b      	movge	r3, r5
 801f182:	42b3      	cmp	r3, r6
 801f184:	bfa8      	it	ge
 801f186:	4633      	movge	r3, r6
 801f188:	2b00      	cmp	r3, #0
 801f18a:	bfc2      	ittt	gt
 801f18c:	1aed      	subgt	r5, r5, r3
 801f18e:	1af6      	subgt	r6, r6, r3
 801f190:	1aff      	subgt	r7, r7, r3
 801f192:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f194:	2b00      	cmp	r3, #0
 801f196:	dd16      	ble.n	801f1c6 <_strtod_l+0x736>
 801f198:	4641      	mov	r1, r8
 801f19a:	9805      	ldr	r0, [sp, #20]
 801f19c:	461a      	mov	r2, r3
 801f19e:	f7ff f9a3 	bl	801e4e8 <__pow5mult>
 801f1a2:	4680      	mov	r8, r0
 801f1a4:	2800      	cmp	r0, #0
 801f1a6:	d0ba      	beq.n	801f11e <_strtod_l+0x68e>
 801f1a8:	4601      	mov	r1, r0
 801f1aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f1ac:	9805      	ldr	r0, [sp, #20]
 801f1ae:	f7ff f8f1 	bl	801e394 <__multiply>
 801f1b2:	900e      	str	r0, [sp, #56]	@ 0x38
 801f1b4:	2800      	cmp	r0, #0
 801f1b6:	f43f ae8a 	beq.w	801eece <_strtod_l+0x43e>
 801f1ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f1bc:	9805      	ldr	r0, [sp, #20]
 801f1be:	f7fe ffd5 	bl	801e16c <_Bfree>
 801f1c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f1c4:	931a      	str	r3, [sp, #104]	@ 0x68
 801f1c6:	2d00      	cmp	r5, #0
 801f1c8:	dc1d      	bgt.n	801f206 <_strtod_l+0x776>
 801f1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	dd23      	ble.n	801f218 <_strtod_l+0x788>
 801f1d0:	4649      	mov	r1, r9
 801f1d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f1d4:	9805      	ldr	r0, [sp, #20]
 801f1d6:	f7ff f987 	bl	801e4e8 <__pow5mult>
 801f1da:	4681      	mov	r9, r0
 801f1dc:	b9e0      	cbnz	r0, 801f218 <_strtod_l+0x788>
 801f1de:	f04f 0900 	mov.w	r9, #0
 801f1e2:	e674      	b.n	801eece <_strtod_l+0x43e>
 801f1e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801f1e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801f1ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801f1f0:	35e2      	adds	r5, #226	@ 0xe2
 801f1f2:	fa01 f305 	lsl.w	r3, r1, r5
 801f1f6:	9310      	str	r3, [sp, #64]	@ 0x40
 801f1f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f1fa:	e7ba      	b.n	801f172 <_strtod_l+0x6e2>
 801f1fc:	2300      	movs	r3, #0
 801f1fe:	9310      	str	r3, [sp, #64]	@ 0x40
 801f200:	2301      	movs	r3, #1
 801f202:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f204:	e7b5      	b.n	801f172 <_strtod_l+0x6e2>
 801f206:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f208:	9805      	ldr	r0, [sp, #20]
 801f20a:	462a      	mov	r2, r5
 801f20c:	f7ff f9c6 	bl	801e59c <__lshift>
 801f210:	901a      	str	r0, [sp, #104]	@ 0x68
 801f212:	2800      	cmp	r0, #0
 801f214:	d1d9      	bne.n	801f1ca <_strtod_l+0x73a>
 801f216:	e65a      	b.n	801eece <_strtod_l+0x43e>
 801f218:	2e00      	cmp	r6, #0
 801f21a:	dd07      	ble.n	801f22c <_strtod_l+0x79c>
 801f21c:	4649      	mov	r1, r9
 801f21e:	9805      	ldr	r0, [sp, #20]
 801f220:	4632      	mov	r2, r6
 801f222:	f7ff f9bb 	bl	801e59c <__lshift>
 801f226:	4681      	mov	r9, r0
 801f228:	2800      	cmp	r0, #0
 801f22a:	d0d8      	beq.n	801f1de <_strtod_l+0x74e>
 801f22c:	2f00      	cmp	r7, #0
 801f22e:	dd08      	ble.n	801f242 <_strtod_l+0x7b2>
 801f230:	4641      	mov	r1, r8
 801f232:	9805      	ldr	r0, [sp, #20]
 801f234:	463a      	mov	r2, r7
 801f236:	f7ff f9b1 	bl	801e59c <__lshift>
 801f23a:	4680      	mov	r8, r0
 801f23c:	2800      	cmp	r0, #0
 801f23e:	f43f ae46 	beq.w	801eece <_strtod_l+0x43e>
 801f242:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f244:	9805      	ldr	r0, [sp, #20]
 801f246:	464a      	mov	r2, r9
 801f248:	f7ff fa30 	bl	801e6ac <__mdiff>
 801f24c:	4604      	mov	r4, r0
 801f24e:	2800      	cmp	r0, #0
 801f250:	f43f ae3d 	beq.w	801eece <_strtod_l+0x43e>
 801f254:	68c3      	ldr	r3, [r0, #12]
 801f256:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f258:	2300      	movs	r3, #0
 801f25a:	60c3      	str	r3, [r0, #12]
 801f25c:	4641      	mov	r1, r8
 801f25e:	f7ff fa09 	bl	801e674 <__mcmp>
 801f262:	2800      	cmp	r0, #0
 801f264:	da46      	bge.n	801f2f4 <_strtod_l+0x864>
 801f266:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f268:	ea53 030a 	orrs.w	r3, r3, sl
 801f26c:	d16c      	bne.n	801f348 <_strtod_l+0x8b8>
 801f26e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f272:	2b00      	cmp	r3, #0
 801f274:	d168      	bne.n	801f348 <_strtod_l+0x8b8>
 801f276:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801f27a:	0d1b      	lsrs	r3, r3, #20
 801f27c:	051b      	lsls	r3, r3, #20
 801f27e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801f282:	d961      	bls.n	801f348 <_strtod_l+0x8b8>
 801f284:	6963      	ldr	r3, [r4, #20]
 801f286:	b913      	cbnz	r3, 801f28e <_strtod_l+0x7fe>
 801f288:	6923      	ldr	r3, [r4, #16]
 801f28a:	2b01      	cmp	r3, #1
 801f28c:	dd5c      	ble.n	801f348 <_strtod_l+0x8b8>
 801f28e:	4621      	mov	r1, r4
 801f290:	2201      	movs	r2, #1
 801f292:	9805      	ldr	r0, [sp, #20]
 801f294:	f7ff f982 	bl	801e59c <__lshift>
 801f298:	4641      	mov	r1, r8
 801f29a:	4604      	mov	r4, r0
 801f29c:	f7ff f9ea 	bl	801e674 <__mcmp>
 801f2a0:	2800      	cmp	r0, #0
 801f2a2:	dd51      	ble.n	801f348 <_strtod_l+0x8b8>
 801f2a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801f2a8:	9a08      	ldr	r2, [sp, #32]
 801f2aa:	0d1b      	lsrs	r3, r3, #20
 801f2ac:	051b      	lsls	r3, r3, #20
 801f2ae:	2a00      	cmp	r2, #0
 801f2b0:	d06b      	beq.n	801f38a <_strtod_l+0x8fa>
 801f2b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801f2b6:	d868      	bhi.n	801f38a <_strtod_l+0x8fa>
 801f2b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801f2bc:	f67f ae9d 	bls.w	801effa <_strtod_l+0x56a>
 801f2c0:	4b0a      	ldr	r3, [pc, #40]	@ (801f2ec <_strtod_l+0x85c>)
 801f2c2:	4650      	mov	r0, sl
 801f2c4:	4659      	mov	r1, fp
 801f2c6:	2200      	movs	r2, #0
 801f2c8:	f7e1 f9ae 	bl	8000628 <__aeabi_dmul>
 801f2cc:	4b08      	ldr	r3, [pc, #32]	@ (801f2f0 <_strtod_l+0x860>)
 801f2ce:	400b      	ands	r3, r1
 801f2d0:	4682      	mov	sl, r0
 801f2d2:	468b      	mov	fp, r1
 801f2d4:	2b00      	cmp	r3, #0
 801f2d6:	f47f ae05 	bne.w	801eee4 <_strtod_l+0x454>
 801f2da:	9a05      	ldr	r2, [sp, #20]
 801f2dc:	2322      	movs	r3, #34	@ 0x22
 801f2de:	6013      	str	r3, [r2, #0]
 801f2e0:	e600      	b.n	801eee4 <_strtod_l+0x454>
 801f2e2:	bf00      	nop
 801f2e4:	08023050 	.word	0x08023050
 801f2e8:	fffffc02 	.word	0xfffffc02
 801f2ec:	39500000 	.word	0x39500000
 801f2f0:	7ff00000 	.word	0x7ff00000
 801f2f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801f2f8:	d165      	bne.n	801f3c6 <_strtod_l+0x936>
 801f2fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f2fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f300:	b35a      	cbz	r2, 801f35a <_strtod_l+0x8ca>
 801f302:	4a9f      	ldr	r2, [pc, #636]	@ (801f580 <_strtod_l+0xaf0>)
 801f304:	4293      	cmp	r3, r2
 801f306:	d12b      	bne.n	801f360 <_strtod_l+0x8d0>
 801f308:	9b08      	ldr	r3, [sp, #32]
 801f30a:	4651      	mov	r1, sl
 801f30c:	b303      	cbz	r3, 801f350 <_strtod_l+0x8c0>
 801f30e:	4b9d      	ldr	r3, [pc, #628]	@ (801f584 <_strtod_l+0xaf4>)
 801f310:	465a      	mov	r2, fp
 801f312:	4013      	ands	r3, r2
 801f314:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801f318:	f04f 32ff 	mov.w	r2, #4294967295
 801f31c:	d81b      	bhi.n	801f356 <_strtod_l+0x8c6>
 801f31e:	0d1b      	lsrs	r3, r3, #20
 801f320:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801f324:	fa02 f303 	lsl.w	r3, r2, r3
 801f328:	4299      	cmp	r1, r3
 801f32a:	d119      	bne.n	801f360 <_strtod_l+0x8d0>
 801f32c:	4b96      	ldr	r3, [pc, #600]	@ (801f588 <_strtod_l+0xaf8>)
 801f32e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f330:	429a      	cmp	r2, r3
 801f332:	d102      	bne.n	801f33a <_strtod_l+0x8aa>
 801f334:	3101      	adds	r1, #1
 801f336:	f43f adca 	beq.w	801eece <_strtod_l+0x43e>
 801f33a:	4b92      	ldr	r3, [pc, #584]	@ (801f584 <_strtod_l+0xaf4>)
 801f33c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f33e:	401a      	ands	r2, r3
 801f340:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801f344:	f04f 0a00 	mov.w	sl, #0
 801f348:	9b08      	ldr	r3, [sp, #32]
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d1b8      	bne.n	801f2c0 <_strtod_l+0x830>
 801f34e:	e5c9      	b.n	801eee4 <_strtod_l+0x454>
 801f350:	f04f 33ff 	mov.w	r3, #4294967295
 801f354:	e7e8      	b.n	801f328 <_strtod_l+0x898>
 801f356:	4613      	mov	r3, r2
 801f358:	e7e6      	b.n	801f328 <_strtod_l+0x898>
 801f35a:	ea53 030a 	orrs.w	r3, r3, sl
 801f35e:	d0a1      	beq.n	801f2a4 <_strtod_l+0x814>
 801f360:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f362:	b1db      	cbz	r3, 801f39c <_strtod_l+0x90c>
 801f364:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f366:	4213      	tst	r3, r2
 801f368:	d0ee      	beq.n	801f348 <_strtod_l+0x8b8>
 801f36a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f36c:	9a08      	ldr	r2, [sp, #32]
 801f36e:	4650      	mov	r0, sl
 801f370:	4659      	mov	r1, fp
 801f372:	b1bb      	cbz	r3, 801f3a4 <_strtod_l+0x914>
 801f374:	f7ff fb6c 	bl	801ea50 <sulp>
 801f378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f37c:	ec53 2b10 	vmov	r2, r3, d0
 801f380:	f7e0 ff9c 	bl	80002bc <__adddf3>
 801f384:	4682      	mov	sl, r0
 801f386:	468b      	mov	fp, r1
 801f388:	e7de      	b.n	801f348 <_strtod_l+0x8b8>
 801f38a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801f38e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801f392:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801f396:	f04f 3aff 	mov.w	sl, #4294967295
 801f39a:	e7d5      	b.n	801f348 <_strtod_l+0x8b8>
 801f39c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f39e:	ea13 0f0a 	tst.w	r3, sl
 801f3a2:	e7e1      	b.n	801f368 <_strtod_l+0x8d8>
 801f3a4:	f7ff fb54 	bl	801ea50 <sulp>
 801f3a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f3ac:	ec53 2b10 	vmov	r2, r3, d0
 801f3b0:	f7e0 ff82 	bl	80002b8 <__aeabi_dsub>
 801f3b4:	2200      	movs	r2, #0
 801f3b6:	2300      	movs	r3, #0
 801f3b8:	4682      	mov	sl, r0
 801f3ba:	468b      	mov	fp, r1
 801f3bc:	f7e1 fb9c 	bl	8000af8 <__aeabi_dcmpeq>
 801f3c0:	2800      	cmp	r0, #0
 801f3c2:	d0c1      	beq.n	801f348 <_strtod_l+0x8b8>
 801f3c4:	e619      	b.n	801effa <_strtod_l+0x56a>
 801f3c6:	4641      	mov	r1, r8
 801f3c8:	4620      	mov	r0, r4
 801f3ca:	f7ff facb 	bl	801e964 <__ratio>
 801f3ce:	ec57 6b10 	vmov	r6, r7, d0
 801f3d2:	2200      	movs	r2, #0
 801f3d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801f3d8:	4630      	mov	r0, r6
 801f3da:	4639      	mov	r1, r7
 801f3dc:	f7e1 fba0 	bl	8000b20 <__aeabi_dcmple>
 801f3e0:	2800      	cmp	r0, #0
 801f3e2:	d06f      	beq.n	801f4c4 <_strtod_l+0xa34>
 801f3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	d17a      	bne.n	801f4e0 <_strtod_l+0xa50>
 801f3ea:	f1ba 0f00 	cmp.w	sl, #0
 801f3ee:	d158      	bne.n	801f4a2 <_strtod_l+0xa12>
 801f3f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	d15a      	bne.n	801f4b0 <_strtod_l+0xa20>
 801f3fa:	4b64      	ldr	r3, [pc, #400]	@ (801f58c <_strtod_l+0xafc>)
 801f3fc:	2200      	movs	r2, #0
 801f3fe:	4630      	mov	r0, r6
 801f400:	4639      	mov	r1, r7
 801f402:	f7e1 fb83 	bl	8000b0c <__aeabi_dcmplt>
 801f406:	2800      	cmp	r0, #0
 801f408:	d159      	bne.n	801f4be <_strtod_l+0xa2e>
 801f40a:	4630      	mov	r0, r6
 801f40c:	4639      	mov	r1, r7
 801f40e:	4b60      	ldr	r3, [pc, #384]	@ (801f590 <_strtod_l+0xb00>)
 801f410:	2200      	movs	r2, #0
 801f412:	f7e1 f909 	bl	8000628 <__aeabi_dmul>
 801f416:	4606      	mov	r6, r0
 801f418:	460f      	mov	r7, r1
 801f41a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801f41e:	9606      	str	r6, [sp, #24]
 801f420:	9307      	str	r3, [sp, #28]
 801f422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f426:	4d57      	ldr	r5, [pc, #348]	@ (801f584 <_strtod_l+0xaf4>)
 801f428:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801f42c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f42e:	401d      	ands	r5, r3
 801f430:	4b58      	ldr	r3, [pc, #352]	@ (801f594 <_strtod_l+0xb04>)
 801f432:	429d      	cmp	r5, r3
 801f434:	f040 80b2 	bne.w	801f59c <_strtod_l+0xb0c>
 801f438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f43a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801f43e:	ec4b ab10 	vmov	d0, sl, fp
 801f442:	f7ff f9c7 	bl	801e7d4 <__ulp>
 801f446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f44a:	ec51 0b10 	vmov	r0, r1, d0
 801f44e:	f7e1 f8eb 	bl	8000628 <__aeabi_dmul>
 801f452:	4652      	mov	r2, sl
 801f454:	465b      	mov	r3, fp
 801f456:	f7e0 ff31 	bl	80002bc <__adddf3>
 801f45a:	460b      	mov	r3, r1
 801f45c:	4949      	ldr	r1, [pc, #292]	@ (801f584 <_strtod_l+0xaf4>)
 801f45e:	4a4e      	ldr	r2, [pc, #312]	@ (801f598 <_strtod_l+0xb08>)
 801f460:	4019      	ands	r1, r3
 801f462:	4291      	cmp	r1, r2
 801f464:	4682      	mov	sl, r0
 801f466:	d942      	bls.n	801f4ee <_strtod_l+0xa5e>
 801f468:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f46a:	4b47      	ldr	r3, [pc, #284]	@ (801f588 <_strtod_l+0xaf8>)
 801f46c:	429a      	cmp	r2, r3
 801f46e:	d103      	bne.n	801f478 <_strtod_l+0x9e8>
 801f470:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f472:	3301      	adds	r3, #1
 801f474:	f43f ad2b 	beq.w	801eece <_strtod_l+0x43e>
 801f478:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801f588 <_strtod_l+0xaf8>
 801f47c:	f04f 3aff 	mov.w	sl, #4294967295
 801f480:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f482:	9805      	ldr	r0, [sp, #20]
 801f484:	f7fe fe72 	bl	801e16c <_Bfree>
 801f488:	9805      	ldr	r0, [sp, #20]
 801f48a:	4649      	mov	r1, r9
 801f48c:	f7fe fe6e 	bl	801e16c <_Bfree>
 801f490:	9805      	ldr	r0, [sp, #20]
 801f492:	4641      	mov	r1, r8
 801f494:	f7fe fe6a 	bl	801e16c <_Bfree>
 801f498:	9805      	ldr	r0, [sp, #20]
 801f49a:	4621      	mov	r1, r4
 801f49c:	f7fe fe66 	bl	801e16c <_Bfree>
 801f4a0:	e618      	b.n	801f0d4 <_strtod_l+0x644>
 801f4a2:	f1ba 0f01 	cmp.w	sl, #1
 801f4a6:	d103      	bne.n	801f4b0 <_strtod_l+0xa20>
 801f4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4aa:	2b00      	cmp	r3, #0
 801f4ac:	f43f ada5 	beq.w	801effa <_strtod_l+0x56a>
 801f4b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801f560 <_strtod_l+0xad0>
 801f4b4:	4f35      	ldr	r7, [pc, #212]	@ (801f58c <_strtod_l+0xafc>)
 801f4b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f4ba:	2600      	movs	r6, #0
 801f4bc:	e7b1      	b.n	801f422 <_strtod_l+0x992>
 801f4be:	4f34      	ldr	r7, [pc, #208]	@ (801f590 <_strtod_l+0xb00>)
 801f4c0:	2600      	movs	r6, #0
 801f4c2:	e7aa      	b.n	801f41a <_strtod_l+0x98a>
 801f4c4:	4b32      	ldr	r3, [pc, #200]	@ (801f590 <_strtod_l+0xb00>)
 801f4c6:	4630      	mov	r0, r6
 801f4c8:	4639      	mov	r1, r7
 801f4ca:	2200      	movs	r2, #0
 801f4cc:	f7e1 f8ac 	bl	8000628 <__aeabi_dmul>
 801f4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f4d2:	4606      	mov	r6, r0
 801f4d4:	460f      	mov	r7, r1
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	d09f      	beq.n	801f41a <_strtod_l+0x98a>
 801f4da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801f4de:	e7a0      	b.n	801f422 <_strtod_l+0x992>
 801f4e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801f568 <_strtod_l+0xad8>
 801f4e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f4e8:	ec57 6b17 	vmov	r6, r7, d7
 801f4ec:	e799      	b.n	801f422 <_strtod_l+0x992>
 801f4ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801f4f2:	9b08      	ldr	r3, [sp, #32]
 801f4f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d1c1      	bne.n	801f480 <_strtod_l+0x9f0>
 801f4fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801f500:	0d1b      	lsrs	r3, r3, #20
 801f502:	051b      	lsls	r3, r3, #20
 801f504:	429d      	cmp	r5, r3
 801f506:	d1bb      	bne.n	801f480 <_strtod_l+0x9f0>
 801f508:	4630      	mov	r0, r6
 801f50a:	4639      	mov	r1, r7
 801f50c:	f7e1 fbec 	bl	8000ce8 <__aeabi_d2lz>
 801f510:	f7e1 f85c 	bl	80005cc <__aeabi_l2d>
 801f514:	4602      	mov	r2, r0
 801f516:	460b      	mov	r3, r1
 801f518:	4630      	mov	r0, r6
 801f51a:	4639      	mov	r1, r7
 801f51c:	f7e0 fecc 	bl	80002b8 <__aeabi_dsub>
 801f520:	460b      	mov	r3, r1
 801f522:	4602      	mov	r2, r0
 801f524:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801f528:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801f52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f52e:	ea46 060a 	orr.w	r6, r6, sl
 801f532:	431e      	orrs	r6, r3
 801f534:	d06f      	beq.n	801f616 <_strtod_l+0xb86>
 801f536:	a30e      	add	r3, pc, #56	@ (adr r3, 801f570 <_strtod_l+0xae0>)
 801f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f53c:	f7e1 fae6 	bl	8000b0c <__aeabi_dcmplt>
 801f540:	2800      	cmp	r0, #0
 801f542:	f47f accf 	bne.w	801eee4 <_strtod_l+0x454>
 801f546:	a30c      	add	r3, pc, #48	@ (adr r3, 801f578 <_strtod_l+0xae8>)
 801f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f54c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f550:	f7e1 fafa 	bl	8000b48 <__aeabi_dcmpgt>
 801f554:	2800      	cmp	r0, #0
 801f556:	d093      	beq.n	801f480 <_strtod_l+0x9f0>
 801f558:	e4c4      	b.n	801eee4 <_strtod_l+0x454>
 801f55a:	bf00      	nop
 801f55c:	f3af 8000 	nop.w
 801f560:	00000000 	.word	0x00000000
 801f564:	bff00000 	.word	0xbff00000
 801f568:	00000000 	.word	0x00000000
 801f56c:	3ff00000 	.word	0x3ff00000
 801f570:	94a03595 	.word	0x94a03595
 801f574:	3fdfffff 	.word	0x3fdfffff
 801f578:	35afe535 	.word	0x35afe535
 801f57c:	3fe00000 	.word	0x3fe00000
 801f580:	000fffff 	.word	0x000fffff
 801f584:	7ff00000 	.word	0x7ff00000
 801f588:	7fefffff 	.word	0x7fefffff
 801f58c:	3ff00000 	.word	0x3ff00000
 801f590:	3fe00000 	.word	0x3fe00000
 801f594:	7fe00000 	.word	0x7fe00000
 801f598:	7c9fffff 	.word	0x7c9fffff
 801f59c:	9b08      	ldr	r3, [sp, #32]
 801f59e:	b323      	cbz	r3, 801f5ea <_strtod_l+0xb5a>
 801f5a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801f5a4:	d821      	bhi.n	801f5ea <_strtod_l+0xb5a>
 801f5a6:	a328      	add	r3, pc, #160	@ (adr r3, 801f648 <_strtod_l+0xbb8>)
 801f5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5ac:	4630      	mov	r0, r6
 801f5ae:	4639      	mov	r1, r7
 801f5b0:	f7e1 fab6 	bl	8000b20 <__aeabi_dcmple>
 801f5b4:	b1a0      	cbz	r0, 801f5e0 <_strtod_l+0xb50>
 801f5b6:	4639      	mov	r1, r7
 801f5b8:	4630      	mov	r0, r6
 801f5ba:	f7e1 fb0d 	bl	8000bd8 <__aeabi_d2uiz>
 801f5be:	2801      	cmp	r0, #1
 801f5c0:	bf38      	it	cc
 801f5c2:	2001      	movcc	r0, #1
 801f5c4:	f7e0 ffb6 	bl	8000534 <__aeabi_ui2d>
 801f5c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f5ca:	4606      	mov	r6, r0
 801f5cc:	460f      	mov	r7, r1
 801f5ce:	b9fb      	cbnz	r3, 801f610 <_strtod_l+0xb80>
 801f5d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f5d4:	9014      	str	r0, [sp, #80]	@ 0x50
 801f5d6:	9315      	str	r3, [sp, #84]	@ 0x54
 801f5d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801f5dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801f5e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f5e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801f5e6:	1b5b      	subs	r3, r3, r5
 801f5e8:	9311      	str	r3, [sp, #68]	@ 0x44
 801f5ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f5ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801f5f2:	f7ff f8ef 	bl	801e7d4 <__ulp>
 801f5f6:	4650      	mov	r0, sl
 801f5f8:	ec53 2b10 	vmov	r2, r3, d0
 801f5fc:	4659      	mov	r1, fp
 801f5fe:	f7e1 f813 	bl	8000628 <__aeabi_dmul>
 801f602:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801f606:	f7e0 fe59 	bl	80002bc <__adddf3>
 801f60a:	4682      	mov	sl, r0
 801f60c:	468b      	mov	fp, r1
 801f60e:	e770      	b.n	801f4f2 <_strtod_l+0xa62>
 801f610:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801f614:	e7e0      	b.n	801f5d8 <_strtod_l+0xb48>
 801f616:	a30e      	add	r3, pc, #56	@ (adr r3, 801f650 <_strtod_l+0xbc0>)
 801f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f61c:	f7e1 fa76 	bl	8000b0c <__aeabi_dcmplt>
 801f620:	e798      	b.n	801f554 <_strtod_l+0xac4>
 801f622:	2300      	movs	r3, #0
 801f624:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f626:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801f628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f62a:	6013      	str	r3, [r2, #0]
 801f62c:	f7ff ba6d 	b.w	801eb0a <_strtod_l+0x7a>
 801f630:	2a65      	cmp	r2, #101	@ 0x65
 801f632:	f43f ab66 	beq.w	801ed02 <_strtod_l+0x272>
 801f636:	2a45      	cmp	r2, #69	@ 0x45
 801f638:	f43f ab63 	beq.w	801ed02 <_strtod_l+0x272>
 801f63c:	2301      	movs	r3, #1
 801f63e:	f7ff bb9e 	b.w	801ed7e <_strtod_l+0x2ee>
 801f642:	bf00      	nop
 801f644:	f3af 8000 	nop.w
 801f648:	ffc00000 	.word	0xffc00000
 801f64c:	41dfffff 	.word	0x41dfffff
 801f650:	94a03595 	.word	0x94a03595
 801f654:	3fcfffff 	.word	0x3fcfffff

0801f658 <_strtod_r>:
 801f658:	4b01      	ldr	r3, [pc, #4]	@ (801f660 <_strtod_r+0x8>)
 801f65a:	f7ff ba19 	b.w	801ea90 <_strtod_l>
 801f65e:	bf00      	nop
 801f660:	200001c4 	.word	0x200001c4

0801f664 <__ssputs_r>:
 801f664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f668:	688e      	ldr	r6, [r1, #8]
 801f66a:	461f      	mov	r7, r3
 801f66c:	42be      	cmp	r6, r7
 801f66e:	680b      	ldr	r3, [r1, #0]
 801f670:	4682      	mov	sl, r0
 801f672:	460c      	mov	r4, r1
 801f674:	4690      	mov	r8, r2
 801f676:	d82d      	bhi.n	801f6d4 <__ssputs_r+0x70>
 801f678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f67c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f680:	d026      	beq.n	801f6d0 <__ssputs_r+0x6c>
 801f682:	6965      	ldr	r5, [r4, #20]
 801f684:	6909      	ldr	r1, [r1, #16]
 801f686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f68a:	eba3 0901 	sub.w	r9, r3, r1
 801f68e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f692:	1c7b      	adds	r3, r7, #1
 801f694:	444b      	add	r3, r9
 801f696:	106d      	asrs	r5, r5, #1
 801f698:	429d      	cmp	r5, r3
 801f69a:	bf38      	it	cc
 801f69c:	461d      	movcc	r5, r3
 801f69e:	0553      	lsls	r3, r2, #21
 801f6a0:	d527      	bpl.n	801f6f2 <__ssputs_r+0x8e>
 801f6a2:	4629      	mov	r1, r5
 801f6a4:	f7fc faee 	bl	801bc84 <_malloc_r>
 801f6a8:	4606      	mov	r6, r0
 801f6aa:	b360      	cbz	r0, 801f706 <__ssputs_r+0xa2>
 801f6ac:	6921      	ldr	r1, [r4, #16]
 801f6ae:	464a      	mov	r2, r9
 801f6b0:	f7fd fe53 	bl	801d35a <memcpy>
 801f6b4:	89a3      	ldrh	r3, [r4, #12]
 801f6b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801f6ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f6be:	81a3      	strh	r3, [r4, #12]
 801f6c0:	6126      	str	r6, [r4, #16]
 801f6c2:	6165      	str	r5, [r4, #20]
 801f6c4:	444e      	add	r6, r9
 801f6c6:	eba5 0509 	sub.w	r5, r5, r9
 801f6ca:	6026      	str	r6, [r4, #0]
 801f6cc:	60a5      	str	r5, [r4, #8]
 801f6ce:	463e      	mov	r6, r7
 801f6d0:	42be      	cmp	r6, r7
 801f6d2:	d900      	bls.n	801f6d6 <__ssputs_r+0x72>
 801f6d4:	463e      	mov	r6, r7
 801f6d6:	6820      	ldr	r0, [r4, #0]
 801f6d8:	4632      	mov	r2, r6
 801f6da:	4641      	mov	r1, r8
 801f6dc:	f7fd fd0c 	bl	801d0f8 <memmove>
 801f6e0:	68a3      	ldr	r3, [r4, #8]
 801f6e2:	1b9b      	subs	r3, r3, r6
 801f6e4:	60a3      	str	r3, [r4, #8]
 801f6e6:	6823      	ldr	r3, [r4, #0]
 801f6e8:	4433      	add	r3, r6
 801f6ea:	6023      	str	r3, [r4, #0]
 801f6ec:	2000      	movs	r0, #0
 801f6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6f2:	462a      	mov	r2, r5
 801f6f4:	f000 ff11 	bl	802051a <_realloc_r>
 801f6f8:	4606      	mov	r6, r0
 801f6fa:	2800      	cmp	r0, #0
 801f6fc:	d1e0      	bne.n	801f6c0 <__ssputs_r+0x5c>
 801f6fe:	6921      	ldr	r1, [r4, #16]
 801f700:	4650      	mov	r0, sl
 801f702:	f7fe fca9 	bl	801e058 <_free_r>
 801f706:	230c      	movs	r3, #12
 801f708:	f8ca 3000 	str.w	r3, [sl]
 801f70c:	89a3      	ldrh	r3, [r4, #12]
 801f70e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f712:	81a3      	strh	r3, [r4, #12]
 801f714:	f04f 30ff 	mov.w	r0, #4294967295
 801f718:	e7e9      	b.n	801f6ee <__ssputs_r+0x8a>
	...

0801f71c <_svfiprintf_r>:
 801f71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f720:	4698      	mov	r8, r3
 801f722:	898b      	ldrh	r3, [r1, #12]
 801f724:	061b      	lsls	r3, r3, #24
 801f726:	b09d      	sub	sp, #116	@ 0x74
 801f728:	4607      	mov	r7, r0
 801f72a:	460d      	mov	r5, r1
 801f72c:	4614      	mov	r4, r2
 801f72e:	d510      	bpl.n	801f752 <_svfiprintf_r+0x36>
 801f730:	690b      	ldr	r3, [r1, #16]
 801f732:	b973      	cbnz	r3, 801f752 <_svfiprintf_r+0x36>
 801f734:	2140      	movs	r1, #64	@ 0x40
 801f736:	f7fc faa5 	bl	801bc84 <_malloc_r>
 801f73a:	6028      	str	r0, [r5, #0]
 801f73c:	6128      	str	r0, [r5, #16]
 801f73e:	b930      	cbnz	r0, 801f74e <_svfiprintf_r+0x32>
 801f740:	230c      	movs	r3, #12
 801f742:	603b      	str	r3, [r7, #0]
 801f744:	f04f 30ff 	mov.w	r0, #4294967295
 801f748:	b01d      	add	sp, #116	@ 0x74
 801f74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f74e:	2340      	movs	r3, #64	@ 0x40
 801f750:	616b      	str	r3, [r5, #20]
 801f752:	2300      	movs	r3, #0
 801f754:	9309      	str	r3, [sp, #36]	@ 0x24
 801f756:	2320      	movs	r3, #32
 801f758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f75c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f760:	2330      	movs	r3, #48	@ 0x30
 801f762:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801f900 <_svfiprintf_r+0x1e4>
 801f766:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f76a:	f04f 0901 	mov.w	r9, #1
 801f76e:	4623      	mov	r3, r4
 801f770:	469a      	mov	sl, r3
 801f772:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f776:	b10a      	cbz	r2, 801f77c <_svfiprintf_r+0x60>
 801f778:	2a25      	cmp	r2, #37	@ 0x25
 801f77a:	d1f9      	bne.n	801f770 <_svfiprintf_r+0x54>
 801f77c:	ebba 0b04 	subs.w	fp, sl, r4
 801f780:	d00b      	beq.n	801f79a <_svfiprintf_r+0x7e>
 801f782:	465b      	mov	r3, fp
 801f784:	4622      	mov	r2, r4
 801f786:	4629      	mov	r1, r5
 801f788:	4638      	mov	r0, r7
 801f78a:	f7ff ff6b 	bl	801f664 <__ssputs_r>
 801f78e:	3001      	adds	r0, #1
 801f790:	f000 80a7 	beq.w	801f8e2 <_svfiprintf_r+0x1c6>
 801f794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f796:	445a      	add	r2, fp
 801f798:	9209      	str	r2, [sp, #36]	@ 0x24
 801f79a:	f89a 3000 	ldrb.w	r3, [sl]
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	f000 809f 	beq.w	801f8e2 <_svfiprintf_r+0x1c6>
 801f7a4:	2300      	movs	r3, #0
 801f7a6:	f04f 32ff 	mov.w	r2, #4294967295
 801f7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f7ae:	f10a 0a01 	add.w	sl, sl, #1
 801f7b2:	9304      	str	r3, [sp, #16]
 801f7b4:	9307      	str	r3, [sp, #28]
 801f7b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f7ba:	931a      	str	r3, [sp, #104]	@ 0x68
 801f7bc:	4654      	mov	r4, sl
 801f7be:	2205      	movs	r2, #5
 801f7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f7c4:	484e      	ldr	r0, [pc, #312]	@ (801f900 <_svfiprintf_r+0x1e4>)
 801f7c6:	f7e0 fd1b 	bl	8000200 <memchr>
 801f7ca:	9a04      	ldr	r2, [sp, #16]
 801f7cc:	b9d8      	cbnz	r0, 801f806 <_svfiprintf_r+0xea>
 801f7ce:	06d0      	lsls	r0, r2, #27
 801f7d0:	bf44      	itt	mi
 801f7d2:	2320      	movmi	r3, #32
 801f7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f7d8:	0711      	lsls	r1, r2, #28
 801f7da:	bf44      	itt	mi
 801f7dc:	232b      	movmi	r3, #43	@ 0x2b
 801f7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f7e2:	f89a 3000 	ldrb.w	r3, [sl]
 801f7e6:	2b2a      	cmp	r3, #42	@ 0x2a
 801f7e8:	d015      	beq.n	801f816 <_svfiprintf_r+0xfa>
 801f7ea:	9a07      	ldr	r2, [sp, #28]
 801f7ec:	4654      	mov	r4, sl
 801f7ee:	2000      	movs	r0, #0
 801f7f0:	f04f 0c0a 	mov.w	ip, #10
 801f7f4:	4621      	mov	r1, r4
 801f7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f7fa:	3b30      	subs	r3, #48	@ 0x30
 801f7fc:	2b09      	cmp	r3, #9
 801f7fe:	d94b      	bls.n	801f898 <_svfiprintf_r+0x17c>
 801f800:	b1b0      	cbz	r0, 801f830 <_svfiprintf_r+0x114>
 801f802:	9207      	str	r2, [sp, #28]
 801f804:	e014      	b.n	801f830 <_svfiprintf_r+0x114>
 801f806:	eba0 0308 	sub.w	r3, r0, r8
 801f80a:	fa09 f303 	lsl.w	r3, r9, r3
 801f80e:	4313      	orrs	r3, r2
 801f810:	9304      	str	r3, [sp, #16]
 801f812:	46a2      	mov	sl, r4
 801f814:	e7d2      	b.n	801f7bc <_svfiprintf_r+0xa0>
 801f816:	9b03      	ldr	r3, [sp, #12]
 801f818:	1d19      	adds	r1, r3, #4
 801f81a:	681b      	ldr	r3, [r3, #0]
 801f81c:	9103      	str	r1, [sp, #12]
 801f81e:	2b00      	cmp	r3, #0
 801f820:	bfbb      	ittet	lt
 801f822:	425b      	neglt	r3, r3
 801f824:	f042 0202 	orrlt.w	r2, r2, #2
 801f828:	9307      	strge	r3, [sp, #28]
 801f82a:	9307      	strlt	r3, [sp, #28]
 801f82c:	bfb8      	it	lt
 801f82e:	9204      	strlt	r2, [sp, #16]
 801f830:	7823      	ldrb	r3, [r4, #0]
 801f832:	2b2e      	cmp	r3, #46	@ 0x2e
 801f834:	d10a      	bne.n	801f84c <_svfiprintf_r+0x130>
 801f836:	7863      	ldrb	r3, [r4, #1]
 801f838:	2b2a      	cmp	r3, #42	@ 0x2a
 801f83a:	d132      	bne.n	801f8a2 <_svfiprintf_r+0x186>
 801f83c:	9b03      	ldr	r3, [sp, #12]
 801f83e:	1d1a      	adds	r2, r3, #4
 801f840:	681b      	ldr	r3, [r3, #0]
 801f842:	9203      	str	r2, [sp, #12]
 801f844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f848:	3402      	adds	r4, #2
 801f84a:	9305      	str	r3, [sp, #20]
 801f84c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801f910 <_svfiprintf_r+0x1f4>
 801f850:	7821      	ldrb	r1, [r4, #0]
 801f852:	2203      	movs	r2, #3
 801f854:	4650      	mov	r0, sl
 801f856:	f7e0 fcd3 	bl	8000200 <memchr>
 801f85a:	b138      	cbz	r0, 801f86c <_svfiprintf_r+0x150>
 801f85c:	9b04      	ldr	r3, [sp, #16]
 801f85e:	eba0 000a 	sub.w	r0, r0, sl
 801f862:	2240      	movs	r2, #64	@ 0x40
 801f864:	4082      	lsls	r2, r0
 801f866:	4313      	orrs	r3, r2
 801f868:	3401      	adds	r4, #1
 801f86a:	9304      	str	r3, [sp, #16]
 801f86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f870:	4824      	ldr	r0, [pc, #144]	@ (801f904 <_svfiprintf_r+0x1e8>)
 801f872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f876:	2206      	movs	r2, #6
 801f878:	f7e0 fcc2 	bl	8000200 <memchr>
 801f87c:	2800      	cmp	r0, #0
 801f87e:	d036      	beq.n	801f8ee <_svfiprintf_r+0x1d2>
 801f880:	4b21      	ldr	r3, [pc, #132]	@ (801f908 <_svfiprintf_r+0x1ec>)
 801f882:	bb1b      	cbnz	r3, 801f8cc <_svfiprintf_r+0x1b0>
 801f884:	9b03      	ldr	r3, [sp, #12]
 801f886:	3307      	adds	r3, #7
 801f888:	f023 0307 	bic.w	r3, r3, #7
 801f88c:	3308      	adds	r3, #8
 801f88e:	9303      	str	r3, [sp, #12]
 801f890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f892:	4433      	add	r3, r6
 801f894:	9309      	str	r3, [sp, #36]	@ 0x24
 801f896:	e76a      	b.n	801f76e <_svfiprintf_r+0x52>
 801f898:	fb0c 3202 	mla	r2, ip, r2, r3
 801f89c:	460c      	mov	r4, r1
 801f89e:	2001      	movs	r0, #1
 801f8a0:	e7a8      	b.n	801f7f4 <_svfiprintf_r+0xd8>
 801f8a2:	2300      	movs	r3, #0
 801f8a4:	3401      	adds	r4, #1
 801f8a6:	9305      	str	r3, [sp, #20]
 801f8a8:	4619      	mov	r1, r3
 801f8aa:	f04f 0c0a 	mov.w	ip, #10
 801f8ae:	4620      	mov	r0, r4
 801f8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f8b4:	3a30      	subs	r2, #48	@ 0x30
 801f8b6:	2a09      	cmp	r2, #9
 801f8b8:	d903      	bls.n	801f8c2 <_svfiprintf_r+0x1a6>
 801f8ba:	2b00      	cmp	r3, #0
 801f8bc:	d0c6      	beq.n	801f84c <_svfiprintf_r+0x130>
 801f8be:	9105      	str	r1, [sp, #20]
 801f8c0:	e7c4      	b.n	801f84c <_svfiprintf_r+0x130>
 801f8c2:	fb0c 2101 	mla	r1, ip, r1, r2
 801f8c6:	4604      	mov	r4, r0
 801f8c8:	2301      	movs	r3, #1
 801f8ca:	e7f0      	b.n	801f8ae <_svfiprintf_r+0x192>
 801f8cc:	ab03      	add	r3, sp, #12
 801f8ce:	9300      	str	r3, [sp, #0]
 801f8d0:	462a      	mov	r2, r5
 801f8d2:	4b0e      	ldr	r3, [pc, #56]	@ (801f90c <_svfiprintf_r+0x1f0>)
 801f8d4:	a904      	add	r1, sp, #16
 801f8d6:	4638      	mov	r0, r7
 801f8d8:	f7fc fb86 	bl	801bfe8 <_printf_float>
 801f8dc:	1c42      	adds	r2, r0, #1
 801f8de:	4606      	mov	r6, r0
 801f8e0:	d1d6      	bne.n	801f890 <_svfiprintf_r+0x174>
 801f8e2:	89ab      	ldrh	r3, [r5, #12]
 801f8e4:	065b      	lsls	r3, r3, #25
 801f8e6:	f53f af2d 	bmi.w	801f744 <_svfiprintf_r+0x28>
 801f8ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8ec:	e72c      	b.n	801f748 <_svfiprintf_r+0x2c>
 801f8ee:	ab03      	add	r3, sp, #12
 801f8f0:	9300      	str	r3, [sp, #0]
 801f8f2:	462a      	mov	r2, r5
 801f8f4:	4b05      	ldr	r3, [pc, #20]	@ (801f90c <_svfiprintf_r+0x1f0>)
 801f8f6:	a904      	add	r1, sp, #16
 801f8f8:	4638      	mov	r0, r7
 801f8fa:	f7fc fe0d 	bl	801c518 <_printf_i>
 801f8fe:	e7ed      	b.n	801f8dc <_svfiprintf_r+0x1c0>
 801f900:	08023078 	.word	0x08023078
 801f904:	08023082 	.word	0x08023082
 801f908:	0801bfe9 	.word	0x0801bfe9
 801f90c:	0801f665 	.word	0x0801f665
 801f910:	0802307e 	.word	0x0802307e

0801f914 <__sfputc_r>:
 801f914:	6893      	ldr	r3, [r2, #8]
 801f916:	3b01      	subs	r3, #1
 801f918:	2b00      	cmp	r3, #0
 801f91a:	b410      	push	{r4}
 801f91c:	6093      	str	r3, [r2, #8]
 801f91e:	da08      	bge.n	801f932 <__sfputc_r+0x1e>
 801f920:	6994      	ldr	r4, [r2, #24]
 801f922:	42a3      	cmp	r3, r4
 801f924:	db01      	blt.n	801f92a <__sfputc_r+0x16>
 801f926:	290a      	cmp	r1, #10
 801f928:	d103      	bne.n	801f932 <__sfputc_r+0x1e>
 801f92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f92e:	f7fd bb4f 	b.w	801cfd0 <__swbuf_r>
 801f932:	6813      	ldr	r3, [r2, #0]
 801f934:	1c58      	adds	r0, r3, #1
 801f936:	6010      	str	r0, [r2, #0]
 801f938:	7019      	strb	r1, [r3, #0]
 801f93a:	4608      	mov	r0, r1
 801f93c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f940:	4770      	bx	lr

0801f942 <__sfputs_r>:
 801f942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f944:	4606      	mov	r6, r0
 801f946:	460f      	mov	r7, r1
 801f948:	4614      	mov	r4, r2
 801f94a:	18d5      	adds	r5, r2, r3
 801f94c:	42ac      	cmp	r4, r5
 801f94e:	d101      	bne.n	801f954 <__sfputs_r+0x12>
 801f950:	2000      	movs	r0, #0
 801f952:	e007      	b.n	801f964 <__sfputs_r+0x22>
 801f954:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f958:	463a      	mov	r2, r7
 801f95a:	4630      	mov	r0, r6
 801f95c:	f7ff ffda 	bl	801f914 <__sfputc_r>
 801f960:	1c43      	adds	r3, r0, #1
 801f962:	d1f3      	bne.n	801f94c <__sfputs_r+0xa>
 801f964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f968 <_vfiprintf_r>:
 801f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f96c:	460d      	mov	r5, r1
 801f96e:	b09d      	sub	sp, #116	@ 0x74
 801f970:	4614      	mov	r4, r2
 801f972:	4698      	mov	r8, r3
 801f974:	4606      	mov	r6, r0
 801f976:	b118      	cbz	r0, 801f980 <_vfiprintf_r+0x18>
 801f978:	6a03      	ldr	r3, [r0, #32]
 801f97a:	b90b      	cbnz	r3, 801f980 <_vfiprintf_r+0x18>
 801f97c:	f7fd f98c 	bl	801cc98 <__sinit>
 801f980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f982:	07d9      	lsls	r1, r3, #31
 801f984:	d405      	bmi.n	801f992 <_vfiprintf_r+0x2a>
 801f986:	89ab      	ldrh	r3, [r5, #12]
 801f988:	059a      	lsls	r2, r3, #22
 801f98a:	d402      	bmi.n	801f992 <_vfiprintf_r+0x2a>
 801f98c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f98e:	f7fd fcda 	bl	801d346 <__retarget_lock_acquire_recursive>
 801f992:	89ab      	ldrh	r3, [r5, #12]
 801f994:	071b      	lsls	r3, r3, #28
 801f996:	d501      	bpl.n	801f99c <_vfiprintf_r+0x34>
 801f998:	692b      	ldr	r3, [r5, #16]
 801f99a:	b99b      	cbnz	r3, 801f9c4 <_vfiprintf_r+0x5c>
 801f99c:	4629      	mov	r1, r5
 801f99e:	4630      	mov	r0, r6
 801f9a0:	f7fd fb54 	bl	801d04c <__swsetup_r>
 801f9a4:	b170      	cbz	r0, 801f9c4 <_vfiprintf_r+0x5c>
 801f9a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f9a8:	07dc      	lsls	r4, r3, #31
 801f9aa:	d504      	bpl.n	801f9b6 <_vfiprintf_r+0x4e>
 801f9ac:	f04f 30ff 	mov.w	r0, #4294967295
 801f9b0:	b01d      	add	sp, #116	@ 0x74
 801f9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9b6:	89ab      	ldrh	r3, [r5, #12]
 801f9b8:	0598      	lsls	r0, r3, #22
 801f9ba:	d4f7      	bmi.n	801f9ac <_vfiprintf_r+0x44>
 801f9bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f9be:	f7fd fcc3 	bl	801d348 <__retarget_lock_release_recursive>
 801f9c2:	e7f3      	b.n	801f9ac <_vfiprintf_r+0x44>
 801f9c4:	2300      	movs	r3, #0
 801f9c6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f9c8:	2320      	movs	r3, #32
 801f9ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f9ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801f9d2:	2330      	movs	r3, #48	@ 0x30
 801f9d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801fb84 <_vfiprintf_r+0x21c>
 801f9d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f9dc:	f04f 0901 	mov.w	r9, #1
 801f9e0:	4623      	mov	r3, r4
 801f9e2:	469a      	mov	sl, r3
 801f9e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f9e8:	b10a      	cbz	r2, 801f9ee <_vfiprintf_r+0x86>
 801f9ea:	2a25      	cmp	r2, #37	@ 0x25
 801f9ec:	d1f9      	bne.n	801f9e2 <_vfiprintf_r+0x7a>
 801f9ee:	ebba 0b04 	subs.w	fp, sl, r4
 801f9f2:	d00b      	beq.n	801fa0c <_vfiprintf_r+0xa4>
 801f9f4:	465b      	mov	r3, fp
 801f9f6:	4622      	mov	r2, r4
 801f9f8:	4629      	mov	r1, r5
 801f9fa:	4630      	mov	r0, r6
 801f9fc:	f7ff ffa1 	bl	801f942 <__sfputs_r>
 801fa00:	3001      	adds	r0, #1
 801fa02:	f000 80a7 	beq.w	801fb54 <_vfiprintf_r+0x1ec>
 801fa06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fa08:	445a      	add	r2, fp
 801fa0a:	9209      	str	r2, [sp, #36]	@ 0x24
 801fa0c:	f89a 3000 	ldrb.w	r3, [sl]
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	f000 809f 	beq.w	801fb54 <_vfiprintf_r+0x1ec>
 801fa16:	2300      	movs	r3, #0
 801fa18:	f04f 32ff 	mov.w	r2, #4294967295
 801fa1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fa20:	f10a 0a01 	add.w	sl, sl, #1
 801fa24:	9304      	str	r3, [sp, #16]
 801fa26:	9307      	str	r3, [sp, #28]
 801fa28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fa2c:	931a      	str	r3, [sp, #104]	@ 0x68
 801fa2e:	4654      	mov	r4, sl
 801fa30:	2205      	movs	r2, #5
 801fa32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa36:	4853      	ldr	r0, [pc, #332]	@ (801fb84 <_vfiprintf_r+0x21c>)
 801fa38:	f7e0 fbe2 	bl	8000200 <memchr>
 801fa3c:	9a04      	ldr	r2, [sp, #16]
 801fa3e:	b9d8      	cbnz	r0, 801fa78 <_vfiprintf_r+0x110>
 801fa40:	06d1      	lsls	r1, r2, #27
 801fa42:	bf44      	itt	mi
 801fa44:	2320      	movmi	r3, #32
 801fa46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fa4a:	0713      	lsls	r3, r2, #28
 801fa4c:	bf44      	itt	mi
 801fa4e:	232b      	movmi	r3, #43	@ 0x2b
 801fa50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fa54:	f89a 3000 	ldrb.w	r3, [sl]
 801fa58:	2b2a      	cmp	r3, #42	@ 0x2a
 801fa5a:	d015      	beq.n	801fa88 <_vfiprintf_r+0x120>
 801fa5c:	9a07      	ldr	r2, [sp, #28]
 801fa5e:	4654      	mov	r4, sl
 801fa60:	2000      	movs	r0, #0
 801fa62:	f04f 0c0a 	mov.w	ip, #10
 801fa66:	4621      	mov	r1, r4
 801fa68:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fa6c:	3b30      	subs	r3, #48	@ 0x30
 801fa6e:	2b09      	cmp	r3, #9
 801fa70:	d94b      	bls.n	801fb0a <_vfiprintf_r+0x1a2>
 801fa72:	b1b0      	cbz	r0, 801faa2 <_vfiprintf_r+0x13a>
 801fa74:	9207      	str	r2, [sp, #28]
 801fa76:	e014      	b.n	801faa2 <_vfiprintf_r+0x13a>
 801fa78:	eba0 0308 	sub.w	r3, r0, r8
 801fa7c:	fa09 f303 	lsl.w	r3, r9, r3
 801fa80:	4313      	orrs	r3, r2
 801fa82:	9304      	str	r3, [sp, #16]
 801fa84:	46a2      	mov	sl, r4
 801fa86:	e7d2      	b.n	801fa2e <_vfiprintf_r+0xc6>
 801fa88:	9b03      	ldr	r3, [sp, #12]
 801fa8a:	1d19      	adds	r1, r3, #4
 801fa8c:	681b      	ldr	r3, [r3, #0]
 801fa8e:	9103      	str	r1, [sp, #12]
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	bfbb      	ittet	lt
 801fa94:	425b      	neglt	r3, r3
 801fa96:	f042 0202 	orrlt.w	r2, r2, #2
 801fa9a:	9307      	strge	r3, [sp, #28]
 801fa9c:	9307      	strlt	r3, [sp, #28]
 801fa9e:	bfb8      	it	lt
 801faa0:	9204      	strlt	r2, [sp, #16]
 801faa2:	7823      	ldrb	r3, [r4, #0]
 801faa4:	2b2e      	cmp	r3, #46	@ 0x2e
 801faa6:	d10a      	bne.n	801fabe <_vfiprintf_r+0x156>
 801faa8:	7863      	ldrb	r3, [r4, #1]
 801faaa:	2b2a      	cmp	r3, #42	@ 0x2a
 801faac:	d132      	bne.n	801fb14 <_vfiprintf_r+0x1ac>
 801faae:	9b03      	ldr	r3, [sp, #12]
 801fab0:	1d1a      	adds	r2, r3, #4
 801fab2:	681b      	ldr	r3, [r3, #0]
 801fab4:	9203      	str	r2, [sp, #12]
 801fab6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801faba:	3402      	adds	r4, #2
 801fabc:	9305      	str	r3, [sp, #20]
 801fabe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801fb94 <_vfiprintf_r+0x22c>
 801fac2:	7821      	ldrb	r1, [r4, #0]
 801fac4:	2203      	movs	r2, #3
 801fac6:	4650      	mov	r0, sl
 801fac8:	f7e0 fb9a 	bl	8000200 <memchr>
 801facc:	b138      	cbz	r0, 801fade <_vfiprintf_r+0x176>
 801face:	9b04      	ldr	r3, [sp, #16]
 801fad0:	eba0 000a 	sub.w	r0, r0, sl
 801fad4:	2240      	movs	r2, #64	@ 0x40
 801fad6:	4082      	lsls	r2, r0
 801fad8:	4313      	orrs	r3, r2
 801fada:	3401      	adds	r4, #1
 801fadc:	9304      	str	r3, [sp, #16]
 801fade:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fae2:	4829      	ldr	r0, [pc, #164]	@ (801fb88 <_vfiprintf_r+0x220>)
 801fae4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fae8:	2206      	movs	r2, #6
 801faea:	f7e0 fb89 	bl	8000200 <memchr>
 801faee:	2800      	cmp	r0, #0
 801faf0:	d03f      	beq.n	801fb72 <_vfiprintf_r+0x20a>
 801faf2:	4b26      	ldr	r3, [pc, #152]	@ (801fb8c <_vfiprintf_r+0x224>)
 801faf4:	bb1b      	cbnz	r3, 801fb3e <_vfiprintf_r+0x1d6>
 801faf6:	9b03      	ldr	r3, [sp, #12]
 801faf8:	3307      	adds	r3, #7
 801fafa:	f023 0307 	bic.w	r3, r3, #7
 801fafe:	3308      	adds	r3, #8
 801fb00:	9303      	str	r3, [sp, #12]
 801fb02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb04:	443b      	add	r3, r7
 801fb06:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb08:	e76a      	b.n	801f9e0 <_vfiprintf_r+0x78>
 801fb0a:	fb0c 3202 	mla	r2, ip, r2, r3
 801fb0e:	460c      	mov	r4, r1
 801fb10:	2001      	movs	r0, #1
 801fb12:	e7a8      	b.n	801fa66 <_vfiprintf_r+0xfe>
 801fb14:	2300      	movs	r3, #0
 801fb16:	3401      	adds	r4, #1
 801fb18:	9305      	str	r3, [sp, #20]
 801fb1a:	4619      	mov	r1, r3
 801fb1c:	f04f 0c0a 	mov.w	ip, #10
 801fb20:	4620      	mov	r0, r4
 801fb22:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fb26:	3a30      	subs	r2, #48	@ 0x30
 801fb28:	2a09      	cmp	r2, #9
 801fb2a:	d903      	bls.n	801fb34 <_vfiprintf_r+0x1cc>
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d0c6      	beq.n	801fabe <_vfiprintf_r+0x156>
 801fb30:	9105      	str	r1, [sp, #20]
 801fb32:	e7c4      	b.n	801fabe <_vfiprintf_r+0x156>
 801fb34:	fb0c 2101 	mla	r1, ip, r1, r2
 801fb38:	4604      	mov	r4, r0
 801fb3a:	2301      	movs	r3, #1
 801fb3c:	e7f0      	b.n	801fb20 <_vfiprintf_r+0x1b8>
 801fb3e:	ab03      	add	r3, sp, #12
 801fb40:	9300      	str	r3, [sp, #0]
 801fb42:	462a      	mov	r2, r5
 801fb44:	4b12      	ldr	r3, [pc, #72]	@ (801fb90 <_vfiprintf_r+0x228>)
 801fb46:	a904      	add	r1, sp, #16
 801fb48:	4630      	mov	r0, r6
 801fb4a:	f7fc fa4d 	bl	801bfe8 <_printf_float>
 801fb4e:	4607      	mov	r7, r0
 801fb50:	1c78      	adds	r0, r7, #1
 801fb52:	d1d6      	bne.n	801fb02 <_vfiprintf_r+0x19a>
 801fb54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fb56:	07d9      	lsls	r1, r3, #31
 801fb58:	d405      	bmi.n	801fb66 <_vfiprintf_r+0x1fe>
 801fb5a:	89ab      	ldrh	r3, [r5, #12]
 801fb5c:	059a      	lsls	r2, r3, #22
 801fb5e:	d402      	bmi.n	801fb66 <_vfiprintf_r+0x1fe>
 801fb60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fb62:	f7fd fbf1 	bl	801d348 <__retarget_lock_release_recursive>
 801fb66:	89ab      	ldrh	r3, [r5, #12]
 801fb68:	065b      	lsls	r3, r3, #25
 801fb6a:	f53f af1f 	bmi.w	801f9ac <_vfiprintf_r+0x44>
 801fb6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb70:	e71e      	b.n	801f9b0 <_vfiprintf_r+0x48>
 801fb72:	ab03      	add	r3, sp, #12
 801fb74:	9300      	str	r3, [sp, #0]
 801fb76:	462a      	mov	r2, r5
 801fb78:	4b05      	ldr	r3, [pc, #20]	@ (801fb90 <_vfiprintf_r+0x228>)
 801fb7a:	a904      	add	r1, sp, #16
 801fb7c:	4630      	mov	r0, r6
 801fb7e:	f7fc fccb 	bl	801c518 <_printf_i>
 801fb82:	e7e4      	b.n	801fb4e <_vfiprintf_r+0x1e6>
 801fb84:	08023078 	.word	0x08023078
 801fb88:	08023082 	.word	0x08023082
 801fb8c:	0801bfe9 	.word	0x0801bfe9
 801fb90:	0801f943 	.word	0x0801f943
 801fb94:	0802307e 	.word	0x0802307e

0801fb98 <__sflush_r>:
 801fb98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801fb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fba0:	0716      	lsls	r6, r2, #28
 801fba2:	4605      	mov	r5, r0
 801fba4:	460c      	mov	r4, r1
 801fba6:	d454      	bmi.n	801fc52 <__sflush_r+0xba>
 801fba8:	684b      	ldr	r3, [r1, #4]
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	dc02      	bgt.n	801fbb4 <__sflush_r+0x1c>
 801fbae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801fbb0:	2b00      	cmp	r3, #0
 801fbb2:	dd48      	ble.n	801fc46 <__sflush_r+0xae>
 801fbb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801fbb6:	2e00      	cmp	r6, #0
 801fbb8:	d045      	beq.n	801fc46 <__sflush_r+0xae>
 801fbba:	2300      	movs	r3, #0
 801fbbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801fbc0:	682f      	ldr	r7, [r5, #0]
 801fbc2:	6a21      	ldr	r1, [r4, #32]
 801fbc4:	602b      	str	r3, [r5, #0]
 801fbc6:	d030      	beq.n	801fc2a <__sflush_r+0x92>
 801fbc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801fbca:	89a3      	ldrh	r3, [r4, #12]
 801fbcc:	0759      	lsls	r1, r3, #29
 801fbce:	d505      	bpl.n	801fbdc <__sflush_r+0x44>
 801fbd0:	6863      	ldr	r3, [r4, #4]
 801fbd2:	1ad2      	subs	r2, r2, r3
 801fbd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801fbd6:	b10b      	cbz	r3, 801fbdc <__sflush_r+0x44>
 801fbd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801fbda:	1ad2      	subs	r2, r2, r3
 801fbdc:	2300      	movs	r3, #0
 801fbde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801fbe0:	6a21      	ldr	r1, [r4, #32]
 801fbe2:	4628      	mov	r0, r5
 801fbe4:	47b0      	blx	r6
 801fbe6:	1c43      	adds	r3, r0, #1
 801fbe8:	89a3      	ldrh	r3, [r4, #12]
 801fbea:	d106      	bne.n	801fbfa <__sflush_r+0x62>
 801fbec:	6829      	ldr	r1, [r5, #0]
 801fbee:	291d      	cmp	r1, #29
 801fbf0:	d82b      	bhi.n	801fc4a <__sflush_r+0xb2>
 801fbf2:	4a2a      	ldr	r2, [pc, #168]	@ (801fc9c <__sflush_r+0x104>)
 801fbf4:	410a      	asrs	r2, r1
 801fbf6:	07d6      	lsls	r6, r2, #31
 801fbf8:	d427      	bmi.n	801fc4a <__sflush_r+0xb2>
 801fbfa:	2200      	movs	r2, #0
 801fbfc:	6062      	str	r2, [r4, #4]
 801fbfe:	04d9      	lsls	r1, r3, #19
 801fc00:	6922      	ldr	r2, [r4, #16]
 801fc02:	6022      	str	r2, [r4, #0]
 801fc04:	d504      	bpl.n	801fc10 <__sflush_r+0x78>
 801fc06:	1c42      	adds	r2, r0, #1
 801fc08:	d101      	bne.n	801fc0e <__sflush_r+0x76>
 801fc0a:	682b      	ldr	r3, [r5, #0]
 801fc0c:	b903      	cbnz	r3, 801fc10 <__sflush_r+0x78>
 801fc0e:	6560      	str	r0, [r4, #84]	@ 0x54
 801fc10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fc12:	602f      	str	r7, [r5, #0]
 801fc14:	b1b9      	cbz	r1, 801fc46 <__sflush_r+0xae>
 801fc16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801fc1a:	4299      	cmp	r1, r3
 801fc1c:	d002      	beq.n	801fc24 <__sflush_r+0x8c>
 801fc1e:	4628      	mov	r0, r5
 801fc20:	f7fe fa1a 	bl	801e058 <_free_r>
 801fc24:	2300      	movs	r3, #0
 801fc26:	6363      	str	r3, [r4, #52]	@ 0x34
 801fc28:	e00d      	b.n	801fc46 <__sflush_r+0xae>
 801fc2a:	2301      	movs	r3, #1
 801fc2c:	4628      	mov	r0, r5
 801fc2e:	47b0      	blx	r6
 801fc30:	4602      	mov	r2, r0
 801fc32:	1c50      	adds	r0, r2, #1
 801fc34:	d1c9      	bne.n	801fbca <__sflush_r+0x32>
 801fc36:	682b      	ldr	r3, [r5, #0]
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d0c6      	beq.n	801fbca <__sflush_r+0x32>
 801fc3c:	2b1d      	cmp	r3, #29
 801fc3e:	d001      	beq.n	801fc44 <__sflush_r+0xac>
 801fc40:	2b16      	cmp	r3, #22
 801fc42:	d11e      	bne.n	801fc82 <__sflush_r+0xea>
 801fc44:	602f      	str	r7, [r5, #0]
 801fc46:	2000      	movs	r0, #0
 801fc48:	e022      	b.n	801fc90 <__sflush_r+0xf8>
 801fc4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fc4e:	b21b      	sxth	r3, r3
 801fc50:	e01b      	b.n	801fc8a <__sflush_r+0xf2>
 801fc52:	690f      	ldr	r7, [r1, #16]
 801fc54:	2f00      	cmp	r7, #0
 801fc56:	d0f6      	beq.n	801fc46 <__sflush_r+0xae>
 801fc58:	0793      	lsls	r3, r2, #30
 801fc5a:	680e      	ldr	r6, [r1, #0]
 801fc5c:	bf08      	it	eq
 801fc5e:	694b      	ldreq	r3, [r1, #20]
 801fc60:	600f      	str	r7, [r1, #0]
 801fc62:	bf18      	it	ne
 801fc64:	2300      	movne	r3, #0
 801fc66:	eba6 0807 	sub.w	r8, r6, r7
 801fc6a:	608b      	str	r3, [r1, #8]
 801fc6c:	f1b8 0f00 	cmp.w	r8, #0
 801fc70:	dde9      	ble.n	801fc46 <__sflush_r+0xae>
 801fc72:	6a21      	ldr	r1, [r4, #32]
 801fc74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801fc76:	4643      	mov	r3, r8
 801fc78:	463a      	mov	r2, r7
 801fc7a:	4628      	mov	r0, r5
 801fc7c:	47b0      	blx	r6
 801fc7e:	2800      	cmp	r0, #0
 801fc80:	dc08      	bgt.n	801fc94 <__sflush_r+0xfc>
 801fc82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fc8a:	81a3      	strh	r3, [r4, #12]
 801fc8c:	f04f 30ff 	mov.w	r0, #4294967295
 801fc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc94:	4407      	add	r7, r0
 801fc96:	eba8 0800 	sub.w	r8, r8, r0
 801fc9a:	e7e7      	b.n	801fc6c <__sflush_r+0xd4>
 801fc9c:	dfbffffe 	.word	0xdfbffffe

0801fca0 <_fflush_r>:
 801fca0:	b538      	push	{r3, r4, r5, lr}
 801fca2:	690b      	ldr	r3, [r1, #16]
 801fca4:	4605      	mov	r5, r0
 801fca6:	460c      	mov	r4, r1
 801fca8:	b913      	cbnz	r3, 801fcb0 <_fflush_r+0x10>
 801fcaa:	2500      	movs	r5, #0
 801fcac:	4628      	mov	r0, r5
 801fcae:	bd38      	pop	{r3, r4, r5, pc}
 801fcb0:	b118      	cbz	r0, 801fcba <_fflush_r+0x1a>
 801fcb2:	6a03      	ldr	r3, [r0, #32]
 801fcb4:	b90b      	cbnz	r3, 801fcba <_fflush_r+0x1a>
 801fcb6:	f7fc ffef 	bl	801cc98 <__sinit>
 801fcba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fcbe:	2b00      	cmp	r3, #0
 801fcc0:	d0f3      	beq.n	801fcaa <_fflush_r+0xa>
 801fcc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801fcc4:	07d0      	lsls	r0, r2, #31
 801fcc6:	d404      	bmi.n	801fcd2 <_fflush_r+0x32>
 801fcc8:	0599      	lsls	r1, r3, #22
 801fcca:	d402      	bmi.n	801fcd2 <_fflush_r+0x32>
 801fccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fcce:	f7fd fb3a 	bl	801d346 <__retarget_lock_acquire_recursive>
 801fcd2:	4628      	mov	r0, r5
 801fcd4:	4621      	mov	r1, r4
 801fcd6:	f7ff ff5f 	bl	801fb98 <__sflush_r>
 801fcda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fcdc:	07da      	lsls	r2, r3, #31
 801fcde:	4605      	mov	r5, r0
 801fce0:	d4e4      	bmi.n	801fcac <_fflush_r+0xc>
 801fce2:	89a3      	ldrh	r3, [r4, #12]
 801fce4:	059b      	lsls	r3, r3, #22
 801fce6:	d4e1      	bmi.n	801fcac <_fflush_r+0xc>
 801fce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fcea:	f7fd fb2d 	bl	801d348 <__retarget_lock_release_recursive>
 801fcee:	e7dd      	b.n	801fcac <_fflush_r+0xc>

0801fcf0 <fiprintf>:
 801fcf0:	b40e      	push	{r1, r2, r3}
 801fcf2:	b503      	push	{r0, r1, lr}
 801fcf4:	4601      	mov	r1, r0
 801fcf6:	ab03      	add	r3, sp, #12
 801fcf8:	4805      	ldr	r0, [pc, #20]	@ (801fd10 <fiprintf+0x20>)
 801fcfa:	f853 2b04 	ldr.w	r2, [r3], #4
 801fcfe:	6800      	ldr	r0, [r0, #0]
 801fd00:	9301      	str	r3, [sp, #4]
 801fd02:	f7ff fe31 	bl	801f968 <_vfiprintf_r>
 801fd06:	b002      	add	sp, #8
 801fd08:	f85d eb04 	ldr.w	lr, [sp], #4
 801fd0c:	b003      	add	sp, #12
 801fd0e:	4770      	bx	lr
 801fd10:	20000174 	.word	0x20000174

0801fd14 <__swhatbuf_r>:
 801fd14:	b570      	push	{r4, r5, r6, lr}
 801fd16:	460c      	mov	r4, r1
 801fd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd1c:	2900      	cmp	r1, #0
 801fd1e:	b096      	sub	sp, #88	@ 0x58
 801fd20:	4615      	mov	r5, r2
 801fd22:	461e      	mov	r6, r3
 801fd24:	da0d      	bge.n	801fd42 <__swhatbuf_r+0x2e>
 801fd26:	89a3      	ldrh	r3, [r4, #12]
 801fd28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801fd2c:	f04f 0100 	mov.w	r1, #0
 801fd30:	bf14      	ite	ne
 801fd32:	2340      	movne	r3, #64	@ 0x40
 801fd34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801fd38:	2000      	movs	r0, #0
 801fd3a:	6031      	str	r1, [r6, #0]
 801fd3c:	602b      	str	r3, [r5, #0]
 801fd3e:	b016      	add	sp, #88	@ 0x58
 801fd40:	bd70      	pop	{r4, r5, r6, pc}
 801fd42:	466a      	mov	r2, sp
 801fd44:	f000 f85a 	bl	801fdfc <_fstat_r>
 801fd48:	2800      	cmp	r0, #0
 801fd4a:	dbec      	blt.n	801fd26 <__swhatbuf_r+0x12>
 801fd4c:	9901      	ldr	r1, [sp, #4]
 801fd4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801fd52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801fd56:	4259      	negs	r1, r3
 801fd58:	4159      	adcs	r1, r3
 801fd5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801fd5e:	e7eb      	b.n	801fd38 <__swhatbuf_r+0x24>

0801fd60 <__smakebuf_r>:
 801fd60:	898b      	ldrh	r3, [r1, #12]
 801fd62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fd64:	079d      	lsls	r5, r3, #30
 801fd66:	4606      	mov	r6, r0
 801fd68:	460c      	mov	r4, r1
 801fd6a:	d507      	bpl.n	801fd7c <__smakebuf_r+0x1c>
 801fd6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801fd70:	6023      	str	r3, [r4, #0]
 801fd72:	6123      	str	r3, [r4, #16]
 801fd74:	2301      	movs	r3, #1
 801fd76:	6163      	str	r3, [r4, #20]
 801fd78:	b003      	add	sp, #12
 801fd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd7c:	ab01      	add	r3, sp, #4
 801fd7e:	466a      	mov	r2, sp
 801fd80:	f7ff ffc8 	bl	801fd14 <__swhatbuf_r>
 801fd84:	9f00      	ldr	r7, [sp, #0]
 801fd86:	4605      	mov	r5, r0
 801fd88:	4639      	mov	r1, r7
 801fd8a:	4630      	mov	r0, r6
 801fd8c:	f7fb ff7a 	bl	801bc84 <_malloc_r>
 801fd90:	b948      	cbnz	r0, 801fda6 <__smakebuf_r+0x46>
 801fd92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fd96:	059a      	lsls	r2, r3, #22
 801fd98:	d4ee      	bmi.n	801fd78 <__smakebuf_r+0x18>
 801fd9a:	f023 0303 	bic.w	r3, r3, #3
 801fd9e:	f043 0302 	orr.w	r3, r3, #2
 801fda2:	81a3      	strh	r3, [r4, #12]
 801fda4:	e7e2      	b.n	801fd6c <__smakebuf_r+0xc>
 801fda6:	89a3      	ldrh	r3, [r4, #12]
 801fda8:	6020      	str	r0, [r4, #0]
 801fdaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fdae:	81a3      	strh	r3, [r4, #12]
 801fdb0:	9b01      	ldr	r3, [sp, #4]
 801fdb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801fdb6:	b15b      	cbz	r3, 801fdd0 <__smakebuf_r+0x70>
 801fdb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fdbc:	4630      	mov	r0, r6
 801fdbe:	f000 f82f 	bl	801fe20 <_isatty_r>
 801fdc2:	b128      	cbz	r0, 801fdd0 <__smakebuf_r+0x70>
 801fdc4:	89a3      	ldrh	r3, [r4, #12]
 801fdc6:	f023 0303 	bic.w	r3, r3, #3
 801fdca:	f043 0301 	orr.w	r3, r3, #1
 801fdce:	81a3      	strh	r3, [r4, #12]
 801fdd0:	89a3      	ldrh	r3, [r4, #12]
 801fdd2:	431d      	orrs	r5, r3
 801fdd4:	81a5      	strh	r5, [r4, #12]
 801fdd6:	e7cf      	b.n	801fd78 <__smakebuf_r+0x18>

0801fdd8 <strncmp>:
 801fdd8:	b510      	push	{r4, lr}
 801fdda:	b16a      	cbz	r2, 801fdf8 <strncmp+0x20>
 801fddc:	3901      	subs	r1, #1
 801fdde:	1884      	adds	r4, r0, r2
 801fde0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fde4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801fde8:	429a      	cmp	r2, r3
 801fdea:	d103      	bne.n	801fdf4 <strncmp+0x1c>
 801fdec:	42a0      	cmp	r0, r4
 801fdee:	d001      	beq.n	801fdf4 <strncmp+0x1c>
 801fdf0:	2a00      	cmp	r2, #0
 801fdf2:	d1f5      	bne.n	801fde0 <strncmp+0x8>
 801fdf4:	1ad0      	subs	r0, r2, r3
 801fdf6:	bd10      	pop	{r4, pc}
 801fdf8:	4610      	mov	r0, r2
 801fdfa:	e7fc      	b.n	801fdf6 <strncmp+0x1e>

0801fdfc <_fstat_r>:
 801fdfc:	b538      	push	{r3, r4, r5, lr}
 801fdfe:	4d07      	ldr	r5, [pc, #28]	@ (801fe1c <_fstat_r+0x20>)
 801fe00:	2300      	movs	r3, #0
 801fe02:	4604      	mov	r4, r0
 801fe04:	4608      	mov	r0, r1
 801fe06:	4611      	mov	r1, r2
 801fe08:	602b      	str	r3, [r5, #0]
 801fe0a:	f7e3 fe39 	bl	8003a80 <_fstat>
 801fe0e:	1c43      	adds	r3, r0, #1
 801fe10:	d102      	bne.n	801fe18 <_fstat_r+0x1c>
 801fe12:	682b      	ldr	r3, [r5, #0]
 801fe14:	b103      	cbz	r3, 801fe18 <_fstat_r+0x1c>
 801fe16:	6023      	str	r3, [r4, #0]
 801fe18:	bd38      	pop	{r3, r4, r5, pc}
 801fe1a:	bf00      	nop
 801fe1c:	20003810 	.word	0x20003810

0801fe20 <_isatty_r>:
 801fe20:	b538      	push	{r3, r4, r5, lr}
 801fe22:	4d06      	ldr	r5, [pc, #24]	@ (801fe3c <_isatty_r+0x1c>)
 801fe24:	2300      	movs	r3, #0
 801fe26:	4604      	mov	r4, r0
 801fe28:	4608      	mov	r0, r1
 801fe2a:	602b      	str	r3, [r5, #0]
 801fe2c:	f7e3 fe38 	bl	8003aa0 <_isatty>
 801fe30:	1c43      	adds	r3, r0, #1
 801fe32:	d102      	bne.n	801fe3a <_isatty_r+0x1a>
 801fe34:	682b      	ldr	r3, [r5, #0]
 801fe36:	b103      	cbz	r3, 801fe3a <_isatty_r+0x1a>
 801fe38:	6023      	str	r3, [r4, #0]
 801fe3a:	bd38      	pop	{r3, r4, r5, pc}
 801fe3c:	20003810 	.word	0x20003810

0801fe40 <nan>:
 801fe40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801fe48 <nan+0x8>
 801fe44:	4770      	bx	lr
 801fe46:	bf00      	nop
 801fe48:	00000000 	.word	0x00000000
 801fe4c:	7ff80000 	.word	0x7ff80000

0801fe50 <abort>:
 801fe50:	b508      	push	{r3, lr}
 801fe52:	2006      	movs	r0, #6
 801fe54:	f000 fbc4 	bl	80205e0 <raise>
 801fe58:	2001      	movs	r0, #1
 801fe5a:	f7e3 fdc1 	bl	80039e0 <_exit>

0801fe5e <_calloc_r>:
 801fe5e:	b570      	push	{r4, r5, r6, lr}
 801fe60:	fba1 5402 	umull	r5, r4, r1, r2
 801fe64:	b93c      	cbnz	r4, 801fe76 <_calloc_r+0x18>
 801fe66:	4629      	mov	r1, r5
 801fe68:	f7fb ff0c 	bl	801bc84 <_malloc_r>
 801fe6c:	4606      	mov	r6, r0
 801fe6e:	b928      	cbnz	r0, 801fe7c <_calloc_r+0x1e>
 801fe70:	2600      	movs	r6, #0
 801fe72:	4630      	mov	r0, r6
 801fe74:	bd70      	pop	{r4, r5, r6, pc}
 801fe76:	220c      	movs	r2, #12
 801fe78:	6002      	str	r2, [r0, #0]
 801fe7a:	e7f9      	b.n	801fe70 <_calloc_r+0x12>
 801fe7c:	462a      	mov	r2, r5
 801fe7e:	4621      	mov	r1, r4
 801fe80:	f7fd f954 	bl	801d12c <memset>
 801fe84:	e7f5      	b.n	801fe72 <_calloc_r+0x14>

0801fe86 <rshift>:
 801fe86:	6903      	ldr	r3, [r0, #16]
 801fe88:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801fe8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fe90:	ea4f 1261 	mov.w	r2, r1, asr #5
 801fe94:	f100 0414 	add.w	r4, r0, #20
 801fe98:	dd45      	ble.n	801ff26 <rshift+0xa0>
 801fe9a:	f011 011f 	ands.w	r1, r1, #31
 801fe9e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801fea2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801fea6:	d10c      	bne.n	801fec2 <rshift+0x3c>
 801fea8:	f100 0710 	add.w	r7, r0, #16
 801feac:	4629      	mov	r1, r5
 801feae:	42b1      	cmp	r1, r6
 801feb0:	d334      	bcc.n	801ff1c <rshift+0x96>
 801feb2:	1a9b      	subs	r3, r3, r2
 801feb4:	009b      	lsls	r3, r3, #2
 801feb6:	1eea      	subs	r2, r5, #3
 801feb8:	4296      	cmp	r6, r2
 801feba:	bf38      	it	cc
 801febc:	2300      	movcc	r3, #0
 801febe:	4423      	add	r3, r4
 801fec0:	e015      	b.n	801feee <rshift+0x68>
 801fec2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801fec6:	f1c1 0820 	rsb	r8, r1, #32
 801feca:	40cf      	lsrs	r7, r1
 801fecc:	f105 0e04 	add.w	lr, r5, #4
 801fed0:	46a1      	mov	r9, r4
 801fed2:	4576      	cmp	r6, lr
 801fed4:	46f4      	mov	ip, lr
 801fed6:	d815      	bhi.n	801ff04 <rshift+0x7e>
 801fed8:	1a9a      	subs	r2, r3, r2
 801feda:	0092      	lsls	r2, r2, #2
 801fedc:	3a04      	subs	r2, #4
 801fede:	3501      	adds	r5, #1
 801fee0:	42ae      	cmp	r6, r5
 801fee2:	bf38      	it	cc
 801fee4:	2200      	movcc	r2, #0
 801fee6:	18a3      	adds	r3, r4, r2
 801fee8:	50a7      	str	r7, [r4, r2]
 801feea:	b107      	cbz	r7, 801feee <rshift+0x68>
 801feec:	3304      	adds	r3, #4
 801feee:	1b1a      	subs	r2, r3, r4
 801fef0:	42a3      	cmp	r3, r4
 801fef2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801fef6:	bf08      	it	eq
 801fef8:	2300      	moveq	r3, #0
 801fefa:	6102      	str	r2, [r0, #16]
 801fefc:	bf08      	it	eq
 801fefe:	6143      	streq	r3, [r0, #20]
 801ff00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ff04:	f8dc c000 	ldr.w	ip, [ip]
 801ff08:	fa0c fc08 	lsl.w	ip, ip, r8
 801ff0c:	ea4c 0707 	orr.w	r7, ip, r7
 801ff10:	f849 7b04 	str.w	r7, [r9], #4
 801ff14:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ff18:	40cf      	lsrs	r7, r1
 801ff1a:	e7da      	b.n	801fed2 <rshift+0x4c>
 801ff1c:	f851 cb04 	ldr.w	ip, [r1], #4
 801ff20:	f847 cf04 	str.w	ip, [r7, #4]!
 801ff24:	e7c3      	b.n	801feae <rshift+0x28>
 801ff26:	4623      	mov	r3, r4
 801ff28:	e7e1      	b.n	801feee <rshift+0x68>

0801ff2a <__hexdig_fun>:
 801ff2a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ff2e:	2b09      	cmp	r3, #9
 801ff30:	d802      	bhi.n	801ff38 <__hexdig_fun+0xe>
 801ff32:	3820      	subs	r0, #32
 801ff34:	b2c0      	uxtb	r0, r0
 801ff36:	4770      	bx	lr
 801ff38:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ff3c:	2b05      	cmp	r3, #5
 801ff3e:	d801      	bhi.n	801ff44 <__hexdig_fun+0x1a>
 801ff40:	3847      	subs	r0, #71	@ 0x47
 801ff42:	e7f7      	b.n	801ff34 <__hexdig_fun+0xa>
 801ff44:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801ff48:	2b05      	cmp	r3, #5
 801ff4a:	d801      	bhi.n	801ff50 <__hexdig_fun+0x26>
 801ff4c:	3827      	subs	r0, #39	@ 0x27
 801ff4e:	e7f1      	b.n	801ff34 <__hexdig_fun+0xa>
 801ff50:	2000      	movs	r0, #0
 801ff52:	4770      	bx	lr

0801ff54 <__gethex>:
 801ff54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff58:	b085      	sub	sp, #20
 801ff5a:	468a      	mov	sl, r1
 801ff5c:	9302      	str	r3, [sp, #8]
 801ff5e:	680b      	ldr	r3, [r1, #0]
 801ff60:	9001      	str	r0, [sp, #4]
 801ff62:	4690      	mov	r8, r2
 801ff64:	1c9c      	adds	r4, r3, #2
 801ff66:	46a1      	mov	r9, r4
 801ff68:	f814 0b01 	ldrb.w	r0, [r4], #1
 801ff6c:	2830      	cmp	r0, #48	@ 0x30
 801ff6e:	d0fa      	beq.n	801ff66 <__gethex+0x12>
 801ff70:	eba9 0303 	sub.w	r3, r9, r3
 801ff74:	f1a3 0b02 	sub.w	fp, r3, #2
 801ff78:	f7ff ffd7 	bl	801ff2a <__hexdig_fun>
 801ff7c:	4605      	mov	r5, r0
 801ff7e:	2800      	cmp	r0, #0
 801ff80:	d168      	bne.n	8020054 <__gethex+0x100>
 801ff82:	49a0      	ldr	r1, [pc, #640]	@ (8020204 <__gethex+0x2b0>)
 801ff84:	2201      	movs	r2, #1
 801ff86:	4648      	mov	r0, r9
 801ff88:	f7ff ff26 	bl	801fdd8 <strncmp>
 801ff8c:	4607      	mov	r7, r0
 801ff8e:	2800      	cmp	r0, #0
 801ff90:	d167      	bne.n	8020062 <__gethex+0x10e>
 801ff92:	f899 0001 	ldrb.w	r0, [r9, #1]
 801ff96:	4626      	mov	r6, r4
 801ff98:	f7ff ffc7 	bl	801ff2a <__hexdig_fun>
 801ff9c:	2800      	cmp	r0, #0
 801ff9e:	d062      	beq.n	8020066 <__gethex+0x112>
 801ffa0:	4623      	mov	r3, r4
 801ffa2:	7818      	ldrb	r0, [r3, #0]
 801ffa4:	2830      	cmp	r0, #48	@ 0x30
 801ffa6:	4699      	mov	r9, r3
 801ffa8:	f103 0301 	add.w	r3, r3, #1
 801ffac:	d0f9      	beq.n	801ffa2 <__gethex+0x4e>
 801ffae:	f7ff ffbc 	bl	801ff2a <__hexdig_fun>
 801ffb2:	fab0 f580 	clz	r5, r0
 801ffb6:	096d      	lsrs	r5, r5, #5
 801ffb8:	f04f 0b01 	mov.w	fp, #1
 801ffbc:	464a      	mov	r2, r9
 801ffbe:	4616      	mov	r6, r2
 801ffc0:	3201      	adds	r2, #1
 801ffc2:	7830      	ldrb	r0, [r6, #0]
 801ffc4:	f7ff ffb1 	bl	801ff2a <__hexdig_fun>
 801ffc8:	2800      	cmp	r0, #0
 801ffca:	d1f8      	bne.n	801ffbe <__gethex+0x6a>
 801ffcc:	498d      	ldr	r1, [pc, #564]	@ (8020204 <__gethex+0x2b0>)
 801ffce:	2201      	movs	r2, #1
 801ffd0:	4630      	mov	r0, r6
 801ffd2:	f7ff ff01 	bl	801fdd8 <strncmp>
 801ffd6:	2800      	cmp	r0, #0
 801ffd8:	d13f      	bne.n	802005a <__gethex+0x106>
 801ffda:	b944      	cbnz	r4, 801ffee <__gethex+0x9a>
 801ffdc:	1c74      	adds	r4, r6, #1
 801ffde:	4622      	mov	r2, r4
 801ffe0:	4616      	mov	r6, r2
 801ffe2:	3201      	adds	r2, #1
 801ffe4:	7830      	ldrb	r0, [r6, #0]
 801ffe6:	f7ff ffa0 	bl	801ff2a <__hexdig_fun>
 801ffea:	2800      	cmp	r0, #0
 801ffec:	d1f8      	bne.n	801ffe0 <__gethex+0x8c>
 801ffee:	1ba4      	subs	r4, r4, r6
 801fff0:	00a7      	lsls	r7, r4, #2
 801fff2:	7833      	ldrb	r3, [r6, #0]
 801fff4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801fff8:	2b50      	cmp	r3, #80	@ 0x50
 801fffa:	d13e      	bne.n	802007a <__gethex+0x126>
 801fffc:	7873      	ldrb	r3, [r6, #1]
 801fffe:	2b2b      	cmp	r3, #43	@ 0x2b
 8020000:	d033      	beq.n	802006a <__gethex+0x116>
 8020002:	2b2d      	cmp	r3, #45	@ 0x2d
 8020004:	d034      	beq.n	8020070 <__gethex+0x11c>
 8020006:	1c71      	adds	r1, r6, #1
 8020008:	2400      	movs	r4, #0
 802000a:	7808      	ldrb	r0, [r1, #0]
 802000c:	f7ff ff8d 	bl	801ff2a <__hexdig_fun>
 8020010:	1e43      	subs	r3, r0, #1
 8020012:	b2db      	uxtb	r3, r3
 8020014:	2b18      	cmp	r3, #24
 8020016:	d830      	bhi.n	802007a <__gethex+0x126>
 8020018:	f1a0 0210 	sub.w	r2, r0, #16
 802001c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020020:	f7ff ff83 	bl	801ff2a <__hexdig_fun>
 8020024:	f100 3cff 	add.w	ip, r0, #4294967295
 8020028:	fa5f fc8c 	uxtb.w	ip, ip
 802002c:	f1bc 0f18 	cmp.w	ip, #24
 8020030:	f04f 030a 	mov.w	r3, #10
 8020034:	d91e      	bls.n	8020074 <__gethex+0x120>
 8020036:	b104      	cbz	r4, 802003a <__gethex+0xe6>
 8020038:	4252      	negs	r2, r2
 802003a:	4417      	add	r7, r2
 802003c:	f8ca 1000 	str.w	r1, [sl]
 8020040:	b1ed      	cbz	r5, 802007e <__gethex+0x12a>
 8020042:	f1bb 0f00 	cmp.w	fp, #0
 8020046:	bf0c      	ite	eq
 8020048:	2506      	moveq	r5, #6
 802004a:	2500      	movne	r5, #0
 802004c:	4628      	mov	r0, r5
 802004e:	b005      	add	sp, #20
 8020050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020054:	2500      	movs	r5, #0
 8020056:	462c      	mov	r4, r5
 8020058:	e7b0      	b.n	801ffbc <__gethex+0x68>
 802005a:	2c00      	cmp	r4, #0
 802005c:	d1c7      	bne.n	801ffee <__gethex+0x9a>
 802005e:	4627      	mov	r7, r4
 8020060:	e7c7      	b.n	801fff2 <__gethex+0x9e>
 8020062:	464e      	mov	r6, r9
 8020064:	462f      	mov	r7, r5
 8020066:	2501      	movs	r5, #1
 8020068:	e7c3      	b.n	801fff2 <__gethex+0x9e>
 802006a:	2400      	movs	r4, #0
 802006c:	1cb1      	adds	r1, r6, #2
 802006e:	e7cc      	b.n	802000a <__gethex+0xb6>
 8020070:	2401      	movs	r4, #1
 8020072:	e7fb      	b.n	802006c <__gethex+0x118>
 8020074:	fb03 0002 	mla	r0, r3, r2, r0
 8020078:	e7ce      	b.n	8020018 <__gethex+0xc4>
 802007a:	4631      	mov	r1, r6
 802007c:	e7de      	b.n	802003c <__gethex+0xe8>
 802007e:	eba6 0309 	sub.w	r3, r6, r9
 8020082:	3b01      	subs	r3, #1
 8020084:	4629      	mov	r1, r5
 8020086:	2b07      	cmp	r3, #7
 8020088:	dc0a      	bgt.n	80200a0 <__gethex+0x14c>
 802008a:	9801      	ldr	r0, [sp, #4]
 802008c:	f7fe f82e 	bl	801e0ec <_Balloc>
 8020090:	4604      	mov	r4, r0
 8020092:	b940      	cbnz	r0, 80200a6 <__gethex+0x152>
 8020094:	4b5c      	ldr	r3, [pc, #368]	@ (8020208 <__gethex+0x2b4>)
 8020096:	4602      	mov	r2, r0
 8020098:	21e4      	movs	r1, #228	@ 0xe4
 802009a:	485c      	ldr	r0, [pc, #368]	@ (802020c <__gethex+0x2b8>)
 802009c:	f7fd f972 	bl	801d384 <__assert_func>
 80200a0:	3101      	adds	r1, #1
 80200a2:	105b      	asrs	r3, r3, #1
 80200a4:	e7ef      	b.n	8020086 <__gethex+0x132>
 80200a6:	f100 0a14 	add.w	sl, r0, #20
 80200aa:	2300      	movs	r3, #0
 80200ac:	4655      	mov	r5, sl
 80200ae:	469b      	mov	fp, r3
 80200b0:	45b1      	cmp	r9, r6
 80200b2:	d337      	bcc.n	8020124 <__gethex+0x1d0>
 80200b4:	f845 bb04 	str.w	fp, [r5], #4
 80200b8:	eba5 050a 	sub.w	r5, r5, sl
 80200bc:	10ad      	asrs	r5, r5, #2
 80200be:	6125      	str	r5, [r4, #16]
 80200c0:	4658      	mov	r0, fp
 80200c2:	f7fe f905 	bl	801e2d0 <__hi0bits>
 80200c6:	016d      	lsls	r5, r5, #5
 80200c8:	f8d8 6000 	ldr.w	r6, [r8]
 80200cc:	1a2d      	subs	r5, r5, r0
 80200ce:	42b5      	cmp	r5, r6
 80200d0:	dd54      	ble.n	802017c <__gethex+0x228>
 80200d2:	1bad      	subs	r5, r5, r6
 80200d4:	4629      	mov	r1, r5
 80200d6:	4620      	mov	r0, r4
 80200d8:	f7fe fc99 	bl	801ea0e <__any_on>
 80200dc:	4681      	mov	r9, r0
 80200de:	b178      	cbz	r0, 8020100 <__gethex+0x1ac>
 80200e0:	1e6b      	subs	r3, r5, #1
 80200e2:	1159      	asrs	r1, r3, #5
 80200e4:	f003 021f 	and.w	r2, r3, #31
 80200e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80200ec:	f04f 0901 	mov.w	r9, #1
 80200f0:	fa09 f202 	lsl.w	r2, r9, r2
 80200f4:	420a      	tst	r2, r1
 80200f6:	d003      	beq.n	8020100 <__gethex+0x1ac>
 80200f8:	454b      	cmp	r3, r9
 80200fa:	dc36      	bgt.n	802016a <__gethex+0x216>
 80200fc:	f04f 0902 	mov.w	r9, #2
 8020100:	4629      	mov	r1, r5
 8020102:	4620      	mov	r0, r4
 8020104:	f7ff febf 	bl	801fe86 <rshift>
 8020108:	442f      	add	r7, r5
 802010a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802010e:	42bb      	cmp	r3, r7
 8020110:	da42      	bge.n	8020198 <__gethex+0x244>
 8020112:	9801      	ldr	r0, [sp, #4]
 8020114:	4621      	mov	r1, r4
 8020116:	f7fe f829 	bl	801e16c <_Bfree>
 802011a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802011c:	2300      	movs	r3, #0
 802011e:	6013      	str	r3, [r2, #0]
 8020120:	25a3      	movs	r5, #163	@ 0xa3
 8020122:	e793      	b.n	802004c <__gethex+0xf8>
 8020124:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8020128:	2a2e      	cmp	r2, #46	@ 0x2e
 802012a:	d012      	beq.n	8020152 <__gethex+0x1fe>
 802012c:	2b20      	cmp	r3, #32
 802012e:	d104      	bne.n	802013a <__gethex+0x1e6>
 8020130:	f845 bb04 	str.w	fp, [r5], #4
 8020134:	f04f 0b00 	mov.w	fp, #0
 8020138:	465b      	mov	r3, fp
 802013a:	7830      	ldrb	r0, [r6, #0]
 802013c:	9303      	str	r3, [sp, #12]
 802013e:	f7ff fef4 	bl	801ff2a <__hexdig_fun>
 8020142:	9b03      	ldr	r3, [sp, #12]
 8020144:	f000 000f 	and.w	r0, r0, #15
 8020148:	4098      	lsls	r0, r3
 802014a:	ea4b 0b00 	orr.w	fp, fp, r0
 802014e:	3304      	adds	r3, #4
 8020150:	e7ae      	b.n	80200b0 <__gethex+0x15c>
 8020152:	45b1      	cmp	r9, r6
 8020154:	d8ea      	bhi.n	802012c <__gethex+0x1d8>
 8020156:	492b      	ldr	r1, [pc, #172]	@ (8020204 <__gethex+0x2b0>)
 8020158:	9303      	str	r3, [sp, #12]
 802015a:	2201      	movs	r2, #1
 802015c:	4630      	mov	r0, r6
 802015e:	f7ff fe3b 	bl	801fdd8 <strncmp>
 8020162:	9b03      	ldr	r3, [sp, #12]
 8020164:	2800      	cmp	r0, #0
 8020166:	d1e1      	bne.n	802012c <__gethex+0x1d8>
 8020168:	e7a2      	b.n	80200b0 <__gethex+0x15c>
 802016a:	1ea9      	subs	r1, r5, #2
 802016c:	4620      	mov	r0, r4
 802016e:	f7fe fc4e 	bl	801ea0e <__any_on>
 8020172:	2800      	cmp	r0, #0
 8020174:	d0c2      	beq.n	80200fc <__gethex+0x1a8>
 8020176:	f04f 0903 	mov.w	r9, #3
 802017a:	e7c1      	b.n	8020100 <__gethex+0x1ac>
 802017c:	da09      	bge.n	8020192 <__gethex+0x23e>
 802017e:	1b75      	subs	r5, r6, r5
 8020180:	4621      	mov	r1, r4
 8020182:	9801      	ldr	r0, [sp, #4]
 8020184:	462a      	mov	r2, r5
 8020186:	f7fe fa09 	bl	801e59c <__lshift>
 802018a:	1b7f      	subs	r7, r7, r5
 802018c:	4604      	mov	r4, r0
 802018e:	f100 0a14 	add.w	sl, r0, #20
 8020192:	f04f 0900 	mov.w	r9, #0
 8020196:	e7b8      	b.n	802010a <__gethex+0x1b6>
 8020198:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802019c:	42bd      	cmp	r5, r7
 802019e:	dd6f      	ble.n	8020280 <__gethex+0x32c>
 80201a0:	1bed      	subs	r5, r5, r7
 80201a2:	42ae      	cmp	r6, r5
 80201a4:	dc34      	bgt.n	8020210 <__gethex+0x2bc>
 80201a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80201aa:	2b02      	cmp	r3, #2
 80201ac:	d022      	beq.n	80201f4 <__gethex+0x2a0>
 80201ae:	2b03      	cmp	r3, #3
 80201b0:	d024      	beq.n	80201fc <__gethex+0x2a8>
 80201b2:	2b01      	cmp	r3, #1
 80201b4:	d115      	bne.n	80201e2 <__gethex+0x28e>
 80201b6:	42ae      	cmp	r6, r5
 80201b8:	d113      	bne.n	80201e2 <__gethex+0x28e>
 80201ba:	2e01      	cmp	r6, #1
 80201bc:	d10b      	bne.n	80201d6 <__gethex+0x282>
 80201be:	9a02      	ldr	r2, [sp, #8]
 80201c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80201c4:	6013      	str	r3, [r2, #0]
 80201c6:	2301      	movs	r3, #1
 80201c8:	6123      	str	r3, [r4, #16]
 80201ca:	f8ca 3000 	str.w	r3, [sl]
 80201ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80201d0:	2562      	movs	r5, #98	@ 0x62
 80201d2:	601c      	str	r4, [r3, #0]
 80201d4:	e73a      	b.n	802004c <__gethex+0xf8>
 80201d6:	1e71      	subs	r1, r6, #1
 80201d8:	4620      	mov	r0, r4
 80201da:	f7fe fc18 	bl	801ea0e <__any_on>
 80201de:	2800      	cmp	r0, #0
 80201e0:	d1ed      	bne.n	80201be <__gethex+0x26a>
 80201e2:	9801      	ldr	r0, [sp, #4]
 80201e4:	4621      	mov	r1, r4
 80201e6:	f7fd ffc1 	bl	801e16c <_Bfree>
 80201ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80201ec:	2300      	movs	r3, #0
 80201ee:	6013      	str	r3, [r2, #0]
 80201f0:	2550      	movs	r5, #80	@ 0x50
 80201f2:	e72b      	b.n	802004c <__gethex+0xf8>
 80201f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	d1f3      	bne.n	80201e2 <__gethex+0x28e>
 80201fa:	e7e0      	b.n	80201be <__gethex+0x26a>
 80201fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80201fe:	2b00      	cmp	r3, #0
 8020200:	d1dd      	bne.n	80201be <__gethex+0x26a>
 8020202:	e7ee      	b.n	80201e2 <__gethex+0x28e>
 8020204:	08023020 	.word	0x08023020
 8020208:	08022eb8 	.word	0x08022eb8
 802020c:	08023091 	.word	0x08023091
 8020210:	1e6f      	subs	r7, r5, #1
 8020212:	f1b9 0f00 	cmp.w	r9, #0
 8020216:	d130      	bne.n	802027a <__gethex+0x326>
 8020218:	b127      	cbz	r7, 8020224 <__gethex+0x2d0>
 802021a:	4639      	mov	r1, r7
 802021c:	4620      	mov	r0, r4
 802021e:	f7fe fbf6 	bl	801ea0e <__any_on>
 8020222:	4681      	mov	r9, r0
 8020224:	117a      	asrs	r2, r7, #5
 8020226:	2301      	movs	r3, #1
 8020228:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802022c:	f007 071f 	and.w	r7, r7, #31
 8020230:	40bb      	lsls	r3, r7
 8020232:	4213      	tst	r3, r2
 8020234:	4629      	mov	r1, r5
 8020236:	4620      	mov	r0, r4
 8020238:	bf18      	it	ne
 802023a:	f049 0902 	orrne.w	r9, r9, #2
 802023e:	f7ff fe22 	bl	801fe86 <rshift>
 8020242:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8020246:	1b76      	subs	r6, r6, r5
 8020248:	2502      	movs	r5, #2
 802024a:	f1b9 0f00 	cmp.w	r9, #0
 802024e:	d047      	beq.n	80202e0 <__gethex+0x38c>
 8020250:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020254:	2b02      	cmp	r3, #2
 8020256:	d015      	beq.n	8020284 <__gethex+0x330>
 8020258:	2b03      	cmp	r3, #3
 802025a:	d017      	beq.n	802028c <__gethex+0x338>
 802025c:	2b01      	cmp	r3, #1
 802025e:	d109      	bne.n	8020274 <__gethex+0x320>
 8020260:	f019 0f02 	tst.w	r9, #2
 8020264:	d006      	beq.n	8020274 <__gethex+0x320>
 8020266:	f8da 3000 	ldr.w	r3, [sl]
 802026a:	ea49 0903 	orr.w	r9, r9, r3
 802026e:	f019 0f01 	tst.w	r9, #1
 8020272:	d10e      	bne.n	8020292 <__gethex+0x33e>
 8020274:	f045 0510 	orr.w	r5, r5, #16
 8020278:	e032      	b.n	80202e0 <__gethex+0x38c>
 802027a:	f04f 0901 	mov.w	r9, #1
 802027e:	e7d1      	b.n	8020224 <__gethex+0x2d0>
 8020280:	2501      	movs	r5, #1
 8020282:	e7e2      	b.n	802024a <__gethex+0x2f6>
 8020284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020286:	f1c3 0301 	rsb	r3, r3, #1
 802028a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802028c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802028e:	2b00      	cmp	r3, #0
 8020290:	d0f0      	beq.n	8020274 <__gethex+0x320>
 8020292:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020296:	f104 0314 	add.w	r3, r4, #20
 802029a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802029e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80202a2:	f04f 0c00 	mov.w	ip, #0
 80202a6:	4618      	mov	r0, r3
 80202a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80202ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80202b0:	d01b      	beq.n	80202ea <__gethex+0x396>
 80202b2:	3201      	adds	r2, #1
 80202b4:	6002      	str	r2, [r0, #0]
 80202b6:	2d02      	cmp	r5, #2
 80202b8:	f104 0314 	add.w	r3, r4, #20
 80202bc:	d13c      	bne.n	8020338 <__gethex+0x3e4>
 80202be:	f8d8 2000 	ldr.w	r2, [r8]
 80202c2:	3a01      	subs	r2, #1
 80202c4:	42b2      	cmp	r2, r6
 80202c6:	d109      	bne.n	80202dc <__gethex+0x388>
 80202c8:	1171      	asrs	r1, r6, #5
 80202ca:	2201      	movs	r2, #1
 80202cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80202d0:	f006 061f 	and.w	r6, r6, #31
 80202d4:	fa02 f606 	lsl.w	r6, r2, r6
 80202d8:	421e      	tst	r6, r3
 80202da:	d13a      	bne.n	8020352 <__gethex+0x3fe>
 80202dc:	f045 0520 	orr.w	r5, r5, #32
 80202e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80202e2:	601c      	str	r4, [r3, #0]
 80202e4:	9b02      	ldr	r3, [sp, #8]
 80202e6:	601f      	str	r7, [r3, #0]
 80202e8:	e6b0      	b.n	802004c <__gethex+0xf8>
 80202ea:	4299      	cmp	r1, r3
 80202ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80202f0:	d8d9      	bhi.n	80202a6 <__gethex+0x352>
 80202f2:	68a3      	ldr	r3, [r4, #8]
 80202f4:	459b      	cmp	fp, r3
 80202f6:	db17      	blt.n	8020328 <__gethex+0x3d4>
 80202f8:	6861      	ldr	r1, [r4, #4]
 80202fa:	9801      	ldr	r0, [sp, #4]
 80202fc:	3101      	adds	r1, #1
 80202fe:	f7fd fef5 	bl	801e0ec <_Balloc>
 8020302:	4681      	mov	r9, r0
 8020304:	b918      	cbnz	r0, 802030e <__gethex+0x3ba>
 8020306:	4b1a      	ldr	r3, [pc, #104]	@ (8020370 <__gethex+0x41c>)
 8020308:	4602      	mov	r2, r0
 802030a:	2184      	movs	r1, #132	@ 0x84
 802030c:	e6c5      	b.n	802009a <__gethex+0x146>
 802030e:	6922      	ldr	r2, [r4, #16]
 8020310:	3202      	adds	r2, #2
 8020312:	f104 010c 	add.w	r1, r4, #12
 8020316:	0092      	lsls	r2, r2, #2
 8020318:	300c      	adds	r0, #12
 802031a:	f7fd f81e 	bl	801d35a <memcpy>
 802031e:	4621      	mov	r1, r4
 8020320:	9801      	ldr	r0, [sp, #4]
 8020322:	f7fd ff23 	bl	801e16c <_Bfree>
 8020326:	464c      	mov	r4, r9
 8020328:	6923      	ldr	r3, [r4, #16]
 802032a:	1c5a      	adds	r2, r3, #1
 802032c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020330:	6122      	str	r2, [r4, #16]
 8020332:	2201      	movs	r2, #1
 8020334:	615a      	str	r2, [r3, #20]
 8020336:	e7be      	b.n	80202b6 <__gethex+0x362>
 8020338:	6922      	ldr	r2, [r4, #16]
 802033a:	455a      	cmp	r2, fp
 802033c:	dd0b      	ble.n	8020356 <__gethex+0x402>
 802033e:	2101      	movs	r1, #1
 8020340:	4620      	mov	r0, r4
 8020342:	f7ff fda0 	bl	801fe86 <rshift>
 8020346:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802034a:	3701      	adds	r7, #1
 802034c:	42bb      	cmp	r3, r7
 802034e:	f6ff aee0 	blt.w	8020112 <__gethex+0x1be>
 8020352:	2501      	movs	r5, #1
 8020354:	e7c2      	b.n	80202dc <__gethex+0x388>
 8020356:	f016 061f 	ands.w	r6, r6, #31
 802035a:	d0fa      	beq.n	8020352 <__gethex+0x3fe>
 802035c:	4453      	add	r3, sl
 802035e:	f1c6 0620 	rsb	r6, r6, #32
 8020362:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8020366:	f7fd ffb3 	bl	801e2d0 <__hi0bits>
 802036a:	42b0      	cmp	r0, r6
 802036c:	dbe7      	blt.n	802033e <__gethex+0x3ea>
 802036e:	e7f0      	b.n	8020352 <__gethex+0x3fe>
 8020370:	08022eb8 	.word	0x08022eb8

08020374 <L_shift>:
 8020374:	f1c2 0208 	rsb	r2, r2, #8
 8020378:	0092      	lsls	r2, r2, #2
 802037a:	b570      	push	{r4, r5, r6, lr}
 802037c:	f1c2 0620 	rsb	r6, r2, #32
 8020380:	6843      	ldr	r3, [r0, #4]
 8020382:	6804      	ldr	r4, [r0, #0]
 8020384:	fa03 f506 	lsl.w	r5, r3, r6
 8020388:	432c      	orrs	r4, r5
 802038a:	40d3      	lsrs	r3, r2
 802038c:	6004      	str	r4, [r0, #0]
 802038e:	f840 3f04 	str.w	r3, [r0, #4]!
 8020392:	4288      	cmp	r0, r1
 8020394:	d3f4      	bcc.n	8020380 <L_shift+0xc>
 8020396:	bd70      	pop	{r4, r5, r6, pc}

08020398 <__match>:
 8020398:	b530      	push	{r4, r5, lr}
 802039a:	6803      	ldr	r3, [r0, #0]
 802039c:	3301      	adds	r3, #1
 802039e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80203a2:	b914      	cbnz	r4, 80203aa <__match+0x12>
 80203a4:	6003      	str	r3, [r0, #0]
 80203a6:	2001      	movs	r0, #1
 80203a8:	bd30      	pop	{r4, r5, pc}
 80203aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80203ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80203b2:	2d19      	cmp	r5, #25
 80203b4:	bf98      	it	ls
 80203b6:	3220      	addls	r2, #32
 80203b8:	42a2      	cmp	r2, r4
 80203ba:	d0f0      	beq.n	802039e <__match+0x6>
 80203bc:	2000      	movs	r0, #0
 80203be:	e7f3      	b.n	80203a8 <__match+0x10>

080203c0 <__hexnan>:
 80203c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203c4:	680b      	ldr	r3, [r1, #0]
 80203c6:	6801      	ldr	r1, [r0, #0]
 80203c8:	115e      	asrs	r6, r3, #5
 80203ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80203ce:	f013 031f 	ands.w	r3, r3, #31
 80203d2:	b087      	sub	sp, #28
 80203d4:	bf18      	it	ne
 80203d6:	3604      	addne	r6, #4
 80203d8:	2500      	movs	r5, #0
 80203da:	1f37      	subs	r7, r6, #4
 80203dc:	4682      	mov	sl, r0
 80203de:	4690      	mov	r8, r2
 80203e0:	9301      	str	r3, [sp, #4]
 80203e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80203e6:	46b9      	mov	r9, r7
 80203e8:	463c      	mov	r4, r7
 80203ea:	9502      	str	r5, [sp, #8]
 80203ec:	46ab      	mov	fp, r5
 80203ee:	784a      	ldrb	r2, [r1, #1]
 80203f0:	1c4b      	adds	r3, r1, #1
 80203f2:	9303      	str	r3, [sp, #12]
 80203f4:	b342      	cbz	r2, 8020448 <__hexnan+0x88>
 80203f6:	4610      	mov	r0, r2
 80203f8:	9105      	str	r1, [sp, #20]
 80203fa:	9204      	str	r2, [sp, #16]
 80203fc:	f7ff fd95 	bl	801ff2a <__hexdig_fun>
 8020400:	2800      	cmp	r0, #0
 8020402:	d151      	bne.n	80204a8 <__hexnan+0xe8>
 8020404:	9a04      	ldr	r2, [sp, #16]
 8020406:	9905      	ldr	r1, [sp, #20]
 8020408:	2a20      	cmp	r2, #32
 802040a:	d818      	bhi.n	802043e <__hexnan+0x7e>
 802040c:	9b02      	ldr	r3, [sp, #8]
 802040e:	459b      	cmp	fp, r3
 8020410:	dd13      	ble.n	802043a <__hexnan+0x7a>
 8020412:	454c      	cmp	r4, r9
 8020414:	d206      	bcs.n	8020424 <__hexnan+0x64>
 8020416:	2d07      	cmp	r5, #7
 8020418:	dc04      	bgt.n	8020424 <__hexnan+0x64>
 802041a:	462a      	mov	r2, r5
 802041c:	4649      	mov	r1, r9
 802041e:	4620      	mov	r0, r4
 8020420:	f7ff ffa8 	bl	8020374 <L_shift>
 8020424:	4544      	cmp	r4, r8
 8020426:	d952      	bls.n	80204ce <__hexnan+0x10e>
 8020428:	2300      	movs	r3, #0
 802042a:	f1a4 0904 	sub.w	r9, r4, #4
 802042e:	f844 3c04 	str.w	r3, [r4, #-4]
 8020432:	f8cd b008 	str.w	fp, [sp, #8]
 8020436:	464c      	mov	r4, r9
 8020438:	461d      	mov	r5, r3
 802043a:	9903      	ldr	r1, [sp, #12]
 802043c:	e7d7      	b.n	80203ee <__hexnan+0x2e>
 802043e:	2a29      	cmp	r2, #41	@ 0x29
 8020440:	d157      	bne.n	80204f2 <__hexnan+0x132>
 8020442:	3102      	adds	r1, #2
 8020444:	f8ca 1000 	str.w	r1, [sl]
 8020448:	f1bb 0f00 	cmp.w	fp, #0
 802044c:	d051      	beq.n	80204f2 <__hexnan+0x132>
 802044e:	454c      	cmp	r4, r9
 8020450:	d206      	bcs.n	8020460 <__hexnan+0xa0>
 8020452:	2d07      	cmp	r5, #7
 8020454:	dc04      	bgt.n	8020460 <__hexnan+0xa0>
 8020456:	462a      	mov	r2, r5
 8020458:	4649      	mov	r1, r9
 802045a:	4620      	mov	r0, r4
 802045c:	f7ff ff8a 	bl	8020374 <L_shift>
 8020460:	4544      	cmp	r4, r8
 8020462:	d936      	bls.n	80204d2 <__hexnan+0x112>
 8020464:	f1a8 0204 	sub.w	r2, r8, #4
 8020468:	4623      	mov	r3, r4
 802046a:	f853 1b04 	ldr.w	r1, [r3], #4
 802046e:	f842 1f04 	str.w	r1, [r2, #4]!
 8020472:	429f      	cmp	r7, r3
 8020474:	d2f9      	bcs.n	802046a <__hexnan+0xaa>
 8020476:	1b3b      	subs	r3, r7, r4
 8020478:	f023 0303 	bic.w	r3, r3, #3
 802047c:	3304      	adds	r3, #4
 802047e:	3401      	adds	r4, #1
 8020480:	3e03      	subs	r6, #3
 8020482:	42b4      	cmp	r4, r6
 8020484:	bf88      	it	hi
 8020486:	2304      	movhi	r3, #4
 8020488:	4443      	add	r3, r8
 802048a:	2200      	movs	r2, #0
 802048c:	f843 2b04 	str.w	r2, [r3], #4
 8020490:	429f      	cmp	r7, r3
 8020492:	d2fb      	bcs.n	802048c <__hexnan+0xcc>
 8020494:	683b      	ldr	r3, [r7, #0]
 8020496:	b91b      	cbnz	r3, 80204a0 <__hexnan+0xe0>
 8020498:	4547      	cmp	r7, r8
 802049a:	d128      	bne.n	80204ee <__hexnan+0x12e>
 802049c:	2301      	movs	r3, #1
 802049e:	603b      	str	r3, [r7, #0]
 80204a0:	2005      	movs	r0, #5
 80204a2:	b007      	add	sp, #28
 80204a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204a8:	3501      	adds	r5, #1
 80204aa:	2d08      	cmp	r5, #8
 80204ac:	f10b 0b01 	add.w	fp, fp, #1
 80204b0:	dd06      	ble.n	80204c0 <__hexnan+0x100>
 80204b2:	4544      	cmp	r4, r8
 80204b4:	d9c1      	bls.n	802043a <__hexnan+0x7a>
 80204b6:	2300      	movs	r3, #0
 80204b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80204bc:	2501      	movs	r5, #1
 80204be:	3c04      	subs	r4, #4
 80204c0:	6822      	ldr	r2, [r4, #0]
 80204c2:	f000 000f 	and.w	r0, r0, #15
 80204c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80204ca:	6020      	str	r0, [r4, #0]
 80204cc:	e7b5      	b.n	802043a <__hexnan+0x7a>
 80204ce:	2508      	movs	r5, #8
 80204d0:	e7b3      	b.n	802043a <__hexnan+0x7a>
 80204d2:	9b01      	ldr	r3, [sp, #4]
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	d0dd      	beq.n	8020494 <__hexnan+0xd4>
 80204d8:	f1c3 0320 	rsb	r3, r3, #32
 80204dc:	f04f 32ff 	mov.w	r2, #4294967295
 80204e0:	40da      	lsrs	r2, r3
 80204e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80204e6:	4013      	ands	r3, r2
 80204e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80204ec:	e7d2      	b.n	8020494 <__hexnan+0xd4>
 80204ee:	3f04      	subs	r7, #4
 80204f0:	e7d0      	b.n	8020494 <__hexnan+0xd4>
 80204f2:	2004      	movs	r0, #4
 80204f4:	e7d5      	b.n	80204a2 <__hexnan+0xe2>

080204f6 <__ascii_mbtowc>:
 80204f6:	b082      	sub	sp, #8
 80204f8:	b901      	cbnz	r1, 80204fc <__ascii_mbtowc+0x6>
 80204fa:	a901      	add	r1, sp, #4
 80204fc:	b142      	cbz	r2, 8020510 <__ascii_mbtowc+0x1a>
 80204fe:	b14b      	cbz	r3, 8020514 <__ascii_mbtowc+0x1e>
 8020500:	7813      	ldrb	r3, [r2, #0]
 8020502:	600b      	str	r3, [r1, #0]
 8020504:	7812      	ldrb	r2, [r2, #0]
 8020506:	1e10      	subs	r0, r2, #0
 8020508:	bf18      	it	ne
 802050a:	2001      	movne	r0, #1
 802050c:	b002      	add	sp, #8
 802050e:	4770      	bx	lr
 8020510:	4610      	mov	r0, r2
 8020512:	e7fb      	b.n	802050c <__ascii_mbtowc+0x16>
 8020514:	f06f 0001 	mvn.w	r0, #1
 8020518:	e7f8      	b.n	802050c <__ascii_mbtowc+0x16>

0802051a <_realloc_r>:
 802051a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802051e:	4680      	mov	r8, r0
 8020520:	4615      	mov	r5, r2
 8020522:	460c      	mov	r4, r1
 8020524:	b921      	cbnz	r1, 8020530 <_realloc_r+0x16>
 8020526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802052a:	4611      	mov	r1, r2
 802052c:	f7fb bbaa 	b.w	801bc84 <_malloc_r>
 8020530:	b92a      	cbnz	r2, 802053e <_realloc_r+0x24>
 8020532:	f7fd fd91 	bl	801e058 <_free_r>
 8020536:	2400      	movs	r4, #0
 8020538:	4620      	mov	r0, r4
 802053a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802053e:	f000 f86b 	bl	8020618 <_malloc_usable_size_r>
 8020542:	4285      	cmp	r5, r0
 8020544:	4606      	mov	r6, r0
 8020546:	d802      	bhi.n	802054e <_realloc_r+0x34>
 8020548:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802054c:	d8f4      	bhi.n	8020538 <_realloc_r+0x1e>
 802054e:	4629      	mov	r1, r5
 8020550:	4640      	mov	r0, r8
 8020552:	f7fb fb97 	bl	801bc84 <_malloc_r>
 8020556:	4607      	mov	r7, r0
 8020558:	2800      	cmp	r0, #0
 802055a:	d0ec      	beq.n	8020536 <_realloc_r+0x1c>
 802055c:	42b5      	cmp	r5, r6
 802055e:	462a      	mov	r2, r5
 8020560:	4621      	mov	r1, r4
 8020562:	bf28      	it	cs
 8020564:	4632      	movcs	r2, r6
 8020566:	f7fc fef8 	bl	801d35a <memcpy>
 802056a:	4621      	mov	r1, r4
 802056c:	4640      	mov	r0, r8
 802056e:	f7fd fd73 	bl	801e058 <_free_r>
 8020572:	463c      	mov	r4, r7
 8020574:	e7e0      	b.n	8020538 <_realloc_r+0x1e>

08020576 <__ascii_wctomb>:
 8020576:	4603      	mov	r3, r0
 8020578:	4608      	mov	r0, r1
 802057a:	b141      	cbz	r1, 802058e <__ascii_wctomb+0x18>
 802057c:	2aff      	cmp	r2, #255	@ 0xff
 802057e:	d904      	bls.n	802058a <__ascii_wctomb+0x14>
 8020580:	228a      	movs	r2, #138	@ 0x8a
 8020582:	601a      	str	r2, [r3, #0]
 8020584:	f04f 30ff 	mov.w	r0, #4294967295
 8020588:	4770      	bx	lr
 802058a:	700a      	strb	r2, [r1, #0]
 802058c:	2001      	movs	r0, #1
 802058e:	4770      	bx	lr

08020590 <_raise_r>:
 8020590:	291f      	cmp	r1, #31
 8020592:	b538      	push	{r3, r4, r5, lr}
 8020594:	4605      	mov	r5, r0
 8020596:	460c      	mov	r4, r1
 8020598:	d904      	bls.n	80205a4 <_raise_r+0x14>
 802059a:	2316      	movs	r3, #22
 802059c:	6003      	str	r3, [r0, #0]
 802059e:	f04f 30ff 	mov.w	r0, #4294967295
 80205a2:	bd38      	pop	{r3, r4, r5, pc}
 80205a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80205a6:	b112      	cbz	r2, 80205ae <_raise_r+0x1e>
 80205a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80205ac:	b94b      	cbnz	r3, 80205c2 <_raise_r+0x32>
 80205ae:	4628      	mov	r0, r5
 80205b0:	f000 f830 	bl	8020614 <_getpid_r>
 80205b4:	4622      	mov	r2, r4
 80205b6:	4601      	mov	r1, r0
 80205b8:	4628      	mov	r0, r5
 80205ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80205be:	f000 b817 	b.w	80205f0 <_kill_r>
 80205c2:	2b01      	cmp	r3, #1
 80205c4:	d00a      	beq.n	80205dc <_raise_r+0x4c>
 80205c6:	1c59      	adds	r1, r3, #1
 80205c8:	d103      	bne.n	80205d2 <_raise_r+0x42>
 80205ca:	2316      	movs	r3, #22
 80205cc:	6003      	str	r3, [r0, #0]
 80205ce:	2001      	movs	r0, #1
 80205d0:	e7e7      	b.n	80205a2 <_raise_r+0x12>
 80205d2:	2100      	movs	r1, #0
 80205d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80205d8:	4620      	mov	r0, r4
 80205da:	4798      	blx	r3
 80205dc:	2000      	movs	r0, #0
 80205de:	e7e0      	b.n	80205a2 <_raise_r+0x12>

080205e0 <raise>:
 80205e0:	4b02      	ldr	r3, [pc, #8]	@ (80205ec <raise+0xc>)
 80205e2:	4601      	mov	r1, r0
 80205e4:	6818      	ldr	r0, [r3, #0]
 80205e6:	f7ff bfd3 	b.w	8020590 <_raise_r>
 80205ea:	bf00      	nop
 80205ec:	20000174 	.word	0x20000174

080205f0 <_kill_r>:
 80205f0:	b538      	push	{r3, r4, r5, lr}
 80205f2:	4d07      	ldr	r5, [pc, #28]	@ (8020610 <_kill_r+0x20>)
 80205f4:	2300      	movs	r3, #0
 80205f6:	4604      	mov	r4, r0
 80205f8:	4608      	mov	r0, r1
 80205fa:	4611      	mov	r1, r2
 80205fc:	602b      	str	r3, [r5, #0]
 80205fe:	f7e3 f9df 	bl	80039c0 <_kill>
 8020602:	1c43      	adds	r3, r0, #1
 8020604:	d102      	bne.n	802060c <_kill_r+0x1c>
 8020606:	682b      	ldr	r3, [r5, #0]
 8020608:	b103      	cbz	r3, 802060c <_kill_r+0x1c>
 802060a:	6023      	str	r3, [r4, #0]
 802060c:	bd38      	pop	{r3, r4, r5, pc}
 802060e:	bf00      	nop
 8020610:	20003810 	.word	0x20003810

08020614 <_getpid_r>:
 8020614:	f7e3 b9cc 	b.w	80039b0 <_getpid>

08020618 <_malloc_usable_size_r>:
 8020618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802061c:	1f18      	subs	r0, r3, #4
 802061e:	2b00      	cmp	r3, #0
 8020620:	bfbc      	itt	lt
 8020622:	580b      	ldrlt	r3, [r1, r0]
 8020624:	18c0      	addlt	r0, r0, r3
 8020626:	4770      	bx	lr

08020628 <_init>:
 8020628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802062a:	bf00      	nop
 802062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802062e:	bc08      	pop	{r3}
 8020630:	469e      	mov	lr, r3
 8020632:	4770      	bx	lr

08020634 <_fini>:
 8020634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020636:	bf00      	nop
 8020638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802063a:	bc08      	pop	{r3}
 802063c:	469e      	mov	lr, r3
 802063e:	4770      	bx	lr
