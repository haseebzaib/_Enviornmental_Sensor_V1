
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000000  20000000  080257d4  00000000  2**0
                  ALLOC
  2 .text         00021fc8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000365c  08022168  08022168  00023168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080257c4  080257c4  00027304  2**0
                  CONTENTS
  5 .ARM          00000008  080257c4  080257c4  000267c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080257cc  080257cc  00027304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080257cc  080257cc  000267cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080257d0  080257d0  000267d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000304  20000000  080257d4  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000034ac  20000304  08025ad8  00027304  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200037b0  08025ad8  000277b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00027304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037617  00000000  00000000  00027334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a54  00000000  00000000  0005e94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003018  00000000  00000000  000673a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002503  00000000  00000000  0006a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026549  00000000  00000000  0006c8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044f87  00000000  00000000  00092e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4f8a  00000000  00000000  000d7d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018cd15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de84  00000000  00000000  0018cd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  0019abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000304 	.word	0x20000304
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08022150 	.word	0x08022150

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000308 	.word	0x20000308
 80001dc:	08022150 	.word	0x08022150

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e03d      	b.n	80010a4 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d21b      	bcs.n	8001068 <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	43db      	mvns	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	4002      	ands	r2, r0
 800104c:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4403      	add	r3, r0
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e01a      	b.n	800109e <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	43db      	mvns	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	440b      	add	r3, r1
 8001080:	4002      	ands	r2, r0
 8001082:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4403      	add	r3, r0
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010aa:	d3bd      	bcc.n	8001028 <setSoftPWM+0x14>
		}
	}

}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (blue_led_pwm_val != 0) {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <toggle_blue_led+0x34>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <toggle_blue_led+0x16>
		blue_led_pwm_val = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <toggle_blue_led+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e003      	b.n	80010da <toggle_blue_led+0x1e>
	} else {
		blue_led_pwm_val = 1000;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <toggle_blue_led+0x34>)
 80010d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d8:	801a      	strh	r2, [r3, #0]
	}
	BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <toggle_blue_led+0x34>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <toggle_blue_led+0x38>)
 80010e2:	4619      	mov	r1, r3
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff ff95 	bl	8001014 <setSoftPWM>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200012ca 	.word	0x200012ca
 80010f4:	20000324 	.word	0x20000324

080010f8 <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <pir_interrupt+0x2c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001102:	2101      	movs	r1, #1
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <pir_interrupt+0x30>)
 8001106:	f004 ffc3 	bl	8006090 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <pir_interrupt+0x34>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 8001116:	e002      	b.n	800111e <pir_interrupt+0x26>
		pir_motion_flag = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <pir_interrupt+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001589 	.word	0x20001589
 8001128:	40020000 	.word	0x40020000
 800112c:	20001588 	.word	0x20001588

08001130 <timer_interrupt>:

void timer_interrupt() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <timer_interrupt+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <timer_interrupt+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <timer_interrupt+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001146:	d302      	bcc.n	800114e <timer_interrupt+0x1e>
		time_keep = 0;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <timer_interrupt+0x2c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 800114e:	f002 ffd3 	bl	80040f8 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a02      	ldr	r2, [pc, #8]	@ (8001160 <timer_interrupt+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000157c 	.word	0x2000157c
 8001160:	200017c0 	.word	0x200017c0

08001164 <power_off_detect>:

void power_off_detect() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 8001168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <power_off_detect+0x2c>)
 800116e:	f004 ff8f 	bl	8006090 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <power_off_detect+0x26>
		_RunTime_Packet.pwr_off_det = 1;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <power_off_detect+0x30>)
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2108      	movs	r1, #8
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <power_off_detect+0x34>)
 8001186:	f004 ff9b 	bl	80060c0 <HAL_GPIO_WritePin>
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	20001530 	.word	0x20001530
 8001198:	40020400 	.word	0x40020400

0800119c <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2044      	movs	r0, #68	@ 0x44
 80011c4:	f003 fd7b 	bl	8004cbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011c8:	2044      	movs	r0, #68	@ 0x44
 80011ca:	f003 fd94 	bl	8004cf6 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <pwr_off_detected>:

static void pwr_off_detected() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <pwr_off_detected+0x3c>)
 80011e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <pwr_off_detected+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		GREEN_LED_PWM(disable_led);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <pwr_off_detected+0x40>)
 80011f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
		RED_LED_PWM(disable_led);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <pwr_off_detected+0x40>)
 80011fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
		BLUE_LED_PWM(0);
 8001202:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <pwr_off_detected+0x44>)
 8001204:	2100      	movs	r1, #0
 8001206:	2008      	movs	r0, #8
 8001208:	f7ff ff04 	bl	8001014 <setSoftPWM>
		HAL_Delay(3500);
 800120c:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001210:	f002 ff7e 	bl	8004110 <HAL_Delay>

	}
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20001530 	.word	0x20001530
 800121c:	40000400 	.word	0x40000400
 8001220:	20000324 	.word	0x20000324

08001224 <clock_speed_high>:
}

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
//	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f01d fd0e 	bl	801ec54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <clock_speed_high+0xd4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <clock_speed_high+0xd4>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <clock_speed_high+0xd4>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <clock_speed_high+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001270:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <clock_speed_high+0xd8>)
 8001272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <clock_speed_high+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001284:	2305      	movs	r3, #5
 8001286:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800129c:	2319      	movs	r3, #25
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80012a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80012aa:	2307      	movs	r3, #7
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fc2c 	bl	8008b10 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <clock_speed_high+0x9e>
		Error_Handler();
 80012be:	f002 f9d1 	bl	8003664 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fe8e 	bl	8009000 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <clock_speed_high+0xca>
		Error_Handler();
 80012ea:	f002 f9bb 	bl	8003664 <Error_Handler>
	}

}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	@ 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <load_param+0xa4>)
 8001308:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8b3 325f 	ldrh.w	r3, [r3, #607]	@ 0x25f
 8001310:	b29b      	uxth	r3, r3
 8001312:	f44f 52c2 	mov.w	r2, #6208	@ 0x1840
 8001316:	4293      	cmp	r3, r2
 8001318:	d118      	bne.n	800134c <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 800131a:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <load_param+0xa8>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f240 2361 	movw	r3, #609	@ 0x261
 8001326:	461a      	mov	r2, r3
 8001328:	f01d fdab 	bl	801ee82 <memcpy>

		if (strstr(_Flash_Packet.File_Name, "devEUI")) {
 800132c:	491f      	ldr	r1, [pc, #124]	@ (80013ac <load_param+0xac>)
 800132e:	481e      	ldr	r0, [pc, #120]	@ (80013a8 <load_param+0xa8>)
 8001330:	f01d fd02 	bl	801ed38 <strstr>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d019      	beq.n	800136e <load_param+0x6e>
			sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800133a:	f001 f895 	bl	8002468 <ver_GetUid>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	491b      	ldr	r1, [pc, #108]	@ (80013b0 <load_param+0xb0>)
 8001344:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <load_param+0xa8>)
 8001346:	f01d fb3b 	bl	801e9c0 <siprintf>
 800134a:	e010      	b.n	800136e <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 800134c:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <load_param+0xa8>)
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <load_param+0xb4>)
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f240 2361 	movw	r3, #609	@ 0x261
 8001358:	461a      	mov	r2, r3
 800135a:	f01d fd92 	bl	801ee82 <memcpy>
		sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800135e:	f001 f883 	bl	8002468 <ver_GetUid>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4912      	ldr	r1, [pc, #72]	@ (80013b0 <load_param+0xb0>)
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <load_param+0xa8>)
 800136a:	f01d fb29 	bl	801e9c0 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 800136e:	4912      	ldr	r1, [pc, #72]	@ (80013b8 <load_param+0xb8>)
 8001370:	4812      	ldr	r0, [pc, #72]	@ (80013bc <load_param+0xbc>)
 8001372:	f01d fce1 	bl	801ed38 <strstr>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <load_param+0xc0>)
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001384:	e00a      	b.n	800139c <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001386:	490f      	ldr	r1, [pc, #60]	@ (80013c4 <load_param+0xc4>)
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <load_param+0xbc>)
 800138a:	f01d fcd5 	bl	801ed38 <strstr>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <load_param+0xc0>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08060000 	.word	0x08060000
 80013a8:	200012cc 	.word	0x200012cc
 80013ac:	08022168 	.word	0x08022168
 80013b0:	08022170 	.word	0x08022170
 80013b4:	08024c30 	.word	0x08024c30
 80013b8:	08022174 	.word	0x08022174
 80013bc:	20001330 	.word	0x20001330
 80013c0:	20001530 	.word	0x20001530
 80013c4:	0802217c 	.word	0x0802217c

080013c8 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ce:	b672      	cpsid	i
}
 80013d0:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <store_param+0xc0>)
 80013d4:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80013d6:	f004 f953 	bl	8005680 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013da:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <store_param+0xc4>)
 80013dc:	2201      	movs	r2, #1
 80013de:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <store_param+0xc4>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <store_param+0xc4>)
 80013e8:	2210      	movs	r2, #16
 80013ea:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <store_param+0xc4>)
 80013ee:	2220      	movs	r2, #32
 80013f0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <store_param+0xc4>)
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <store_param+0xc4>)
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <store_param+0xc4>)
 8001400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001404:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001406:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <store_param+0xc8>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <store_param+0xc8>)
 800140e:	2202      	movs	r2, #2
 8001410:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <store_param+0xc8>)
 8001414:	2207      	movs	r2, #7
 8001416:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <store_param+0xc8>)
 800141a:	2201      	movs	r2, #1
 800141c:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	481b      	ldr	r0, [pc, #108]	@ (8001490 <store_param+0xc8>)
 8001424:	f004 faaa 	bl	800597c <HAL_FLASHEx_Erase>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800142e:	f004 f959 	bl	80056e4 <HAL_FLASH_GetError>
 8001432:	4603      	mov	r3, r0
 8001434:	e024      	b.n	8001480 <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <store_param+0xcc>)
 8001438:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <store_param+0xd0>)
 800143c:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800143e:	e016      	b.n	800146e <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 8001440:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	68f9      	ldr	r1, [r7, #12]
 8001448:	2002      	movs	r0, #2
 800144a:	f004 f8c5 	bl	80055d8 <HAL_FLASH_Program>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <store_param+0x9a>

		{
			WrAdr += 4;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3304      	adds	r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3304      	adds	r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	e005      	b.n	800146e <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 8001462:	f004 f92f 	bl	80056c4 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001466:	f004 f93d 	bl	80056e4 <HAL_FLASH_GetError>
 800146a:	4603      	mov	r3, r0
 800146c:	e008      	b.n	8001480 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3e4      	bcc.n	8001440 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001476:	f004 f925 	bl	80056c4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800147a:	b662      	cpsie	i
}
 800147c:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800147e:	2300      	movs	r3, #0

}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200012cc 	.word	0x200012cc
 800148c:	40023c00 	.word	0x40023c00
 8001490:	200017dc 	.word	0x200017dc
 8001494:	08060261 	.word	0x08060261
 8001498:	08060000 	.word	0x08060000

0800149c <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	if (save_param) {
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <save_data+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <save_data+0x52>
		if (start_timer) {
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <save_data+0x5c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80014b0:	4812      	ldr	r0, [pc, #72]	@ (80014fc <save_data+0x60>)
 80014b2:	f009 ff0b 	bl	800b2cc <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80014b6:	4811      	ldr	r0, [pc, #68]	@ (80014fc <save_data+0x60>)
 80014b8:	f009 fea6 	bl	800b208 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <save_data+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <save_data+0x5c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <save_data+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014d0:	d30d      	bcc.n	80014ee <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80014d2:	480a      	ldr	r0, [pc, #40]	@ (80014fc <save_data+0x60>)
 80014d4:	f009 fefa 	bl	800b2cc <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80014d8:	f7ff ff76 	bl	80013c8 <store_param>
			time_keep = 0;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <save_data+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <save_data+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <save_data+0x5c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20001579 	.word	0x20001579
 80014f8:	2000157a 	.word	0x2000157a
 80014fc:	20001984 	.word	0x20001984
 8001500:	2000157c 	.word	0x2000157c

08001504 <init_scd30_i2c>:
	}
	//error = scd4x_stop_periodic_measurement();
}

#elif use_scd30
static void init_scd30_i2c() {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0



	int16_t error = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	80fb      	strh	r3, [r7, #6]
	sensirion_i2c_hal_init();
 800150e:	f013 fcdd 	bl	8014ecc <sensirion_i2c_hal_init>


	scd4x_wake_up();
 8001512:	f013 fb63 	bl	8014bdc <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 8001516:	f013 faed 	bl	8014af4 <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 800151a:	f013 fb13 	bl	8014b44 <scd4x_reinit>
	scd4x_power_down();
 800151e:	f013 fb37 	bl	8014b90 <scd4x_power_down>


	init_driver(SCD30_I2C_ADDR_61);
 8001522:	2061      	movs	r0, #97	@ 0x61
 8001524:	f012 fe64 	bl	80141f0 <init_driver>
	scd30_stop_periodic_measurement();
 8001528:	f012 ff06 	bl	8014338 <scd30_stop_periodic_measurement>
scd30_set_measurement_interval(2);
 800152c:	2002      	movs	r0, #2
 800152e:	f012 ff31 	bl	8014394 <scd30_set_measurement_interval>
//uint16_t inter;
//scd30_get_measurement_interval(&inter);
	//   scd30_soft_reset();
	uint8_t major = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	717b      	strb	r3, [r7, #5]
	uint8_t minor = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	713b      	strb	r3, [r7, #4]
	error = scd30_read_firmware_version(&major, &minor);
 800153a:	1d3a      	adds	r2, r7, #4
 800153c:	1d7b      	adds	r3, r7, #5
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f013 fa59 	bl	80149f8 <scd30_read_firmware_version>
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <get_scd30_measurement>:

void get_scd30_measurement() {
 8001554:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001558:	b09e      	sub	sp, #120	@ 0x78
 800155a:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 800155c:	2300      	movs	r3, #0
 800155e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 8001562:	2000      	movs	r0, #0
 8001564:	f012 feb0 	bl	80142c8 <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001574:	e081      	b.n	800167a <get_scd30_measurement+0x126>
		run_console_co2 = 1;
 8001576:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <get_scd30_measurement+0x14c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
	  if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))//dont give delay when usb connected as we want to service console aswell
 800157c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001580:	4848      	ldr	r0, [pc, #288]	@ (80016a4 <get_scd30_measurement+0x150>)
 8001582:	f004 fd85 	bl	8006090 <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <get_scd30_measurement+0x3e>
		{
		sensirion_i2c_hal_sleep_usec(1500000);
 800158c:	4846      	ldr	r0, [pc, #280]	@ (80016a8 <get_scd30_measurement+0x154>)
 800158e:	f013 fd13 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
		}
		console_process();
 8001592:	f010 fe1d 	bl	80121d0 <console_process>
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 8001596:	4a45      	ldr	r2, [pc, #276]	@ (80016ac <get_scd30_measurement+0x158>)
 8001598:	4945      	ldr	r1, [pc, #276]	@ (80016b0 <get_scd30_measurement+0x15c>)
 800159a:	4846      	ldr	r0, [pc, #280]	@ (80016b4 <get_scd30_measurement+0x160>)
 800159c:	f012 fe74 	bl	8014288 <scd30_blocking_read_measurement_data>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 80015a6:	4b44      	ldr	r3, [pc, #272]	@ (80016b8 <get_scd30_measurement+0x164>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d05c      	beq.n	8001668 <get_scd30_measurement+0x114>
			char buf[100];
			if (error) {
 80015ae:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d013      	beq.n	80015de <get_scd30_measurement+0x8a>
				sprintf(buf,
 80015b6:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 80015ba:	463b      	mov	r3, r7
 80015bc:	493f      	ldr	r1, [pc, #252]	@ (80016bc <get_scd30_measurement+0x168>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f01d f9fe 	bl	801e9c0 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80015c4:	463b      	mov	r3, r7
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fe6a 	bl	80002a0 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4639      	mov	r1, r7
 80015d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d6:	483a      	ldr	r0, [pc, #232]	@ (80016c0 <get_scd30_measurement+0x16c>)
 80015d8:	f00a fe2e 	bl	800c238 <HAL_UART_Transmit>
 80015dc:	e044      	b.n	8001668 <get_scd30_measurement+0x114>
			} else if (_RunTime_Packet.co2 == 0) {
 80015de:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <get_scd30_measurement+0x160>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d111      	bne.n	8001612 <get_scd30_measurement+0xbe>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 80015ee:	463b      	mov	r3, r7
 80015f0:	4934      	ldr	r1, [pc, #208]	@ (80016c4 <get_scd30_measurement+0x170>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f01d f9e4 	bl	801e9c0 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80015f8:	463b      	mov	r3, r7
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fe50 	bl	80002a0 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	b29a      	uxth	r2, r3
 8001604:	4639      	mov	r1, r7
 8001606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160a:	482d      	ldr	r0, [pc, #180]	@ (80016c0 <get_scd30_measurement+0x16c>)
 800160c:	f00a fe14 	bl	800c238 <HAL_UART_Transmit>
 8001610:	e02a      	b.n	8001668 <get_scd30_measurement+0x114>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001614:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ffae 	bl	8000578 <__aeabi_f2d>
 800161c:	4680      	mov	r8, r0
 800161e:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001622:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ffa7 	bl	8000578 <__aeabi_f2d>
 800162a:	4604      	mov	r4, r0
 800162c:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001630:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffa0 	bl	8000578 <__aeabi_f2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4638      	mov	r0, r7
 800163e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001642:	e9cd 4500 	strd	r4, r5, [sp]
 8001646:	4642      	mov	r2, r8
 8001648:	464b      	mov	r3, r9
 800164a:	491f      	ldr	r1, [pc, #124]	@ (80016c8 <get_scd30_measurement+0x174>)
 800164c:	f01d f9b8 	bl	801e9c0 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001650:	463b      	mov	r3, r7
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fe24 	bl	80002a0 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	4639      	mov	r1, r7
 800165e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <get_scd30_measurement+0x16c>)
 8001664:	f00a fde8 	bl	800c238 <HAL_UART_Transmit>
			}
		}

		led_awake_routine1();
 8001668:	f000 fd34 	bl	80020d4 <led_awake_routine1>
		console_process();
 800166c:	f010 fdb0 	bl	80121d0 <console_process>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 8001670:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001674:	3301      	adds	r3, #1
 8001676:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800167a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <get_scd30_measurement+0x178>)
 8001682:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8001686:	b29b      	uxth	r3, r3
 8001688:	429a      	cmp	r2, r3
 800168a:	f4ff af74 	bcc.w	8001576 <get_scd30_measurement+0x22>
	}
	run_console_co2 = 0;
 800168e:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <get_scd30_measurement+0x14c>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]

}
 8001694:	bf00      	nop
 8001696:	3768      	adds	r7, #104	@ 0x68
 8001698:	46bd      	mov	sp, r7
 800169a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800169e:	bf00      	nop
 80016a0:	20000320 	.word	0x20000320
 80016a4:	40020000 	.word	0x40020000
 80016a8:	0016e360 	.word	0x0016e360
 80016ac:	20001538 	.word	0x20001538
 80016b0:	20001534 	.word	0x20001534
 80016b4:	20001530 	.word	0x20001530
 80016b8:	20001578 	.word	0x20001578
 80016bc:	08022184 	.word	0x08022184
 80016c0:	20001a74 	.word	0x20001a74
 80016c4:	080221bc 	.word	0x080221bc
 80016c8:	080221e0 	.word	0x080221e0
 80016cc:	200012cc 	.word	0x200012cc

080016d0 <get_scd30_measurement_>:

void get_scd30_measurement_()
{
 80016d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016d4:	b09e      	sub	sp, #120	@ 0x78
 80016d6:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 80016de:	2000      	movs	r0, #0
 80016e0:	f012 fdf2 	bl	80142c8 <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80016f0:	e06f      	b.n	80017d2 <get_scd30_measurement_+0x102>
		//sensirion_i2c_hal_sleep_usec(1500000);
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 80016f2:	4a3f      	ldr	r2, [pc, #252]	@ (80017f0 <get_scd30_measurement_+0x120>)
 80016f4:	493f      	ldr	r1, [pc, #252]	@ (80017f4 <get_scd30_measurement_+0x124>)
 80016f6:	4840      	ldr	r0, [pc, #256]	@ (80017f8 <get_scd30_measurement_+0x128>)
 80016f8:	f012 fdc6 	bl	8014288 <scd30_blocking_read_measurement_data>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 8001702:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <get_scd30_measurement_+0x12c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d05c      	beq.n	80017c4 <get_scd30_measurement_+0xf4>
			char buf[100];
			if (error) {
 800170a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800170e:	2b00      	cmp	r3, #0
 8001710:	d013      	beq.n	800173a <get_scd30_measurement_+0x6a>
				sprintf(buf,
 8001712:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 8001716:	463b      	mov	r3, r7
 8001718:	4939      	ldr	r1, [pc, #228]	@ (8001800 <get_scd30_measurement_+0x130>)
 800171a:	4618      	mov	r0, r3
 800171c:	f01d f950 	bl	801e9c0 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001720:	463b      	mov	r3, r7
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fdbc 	bl	80002a0 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	b29a      	uxth	r2, r3
 800172c:	4639      	mov	r1, r7
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	4834      	ldr	r0, [pc, #208]	@ (8001804 <get_scd30_measurement_+0x134>)
 8001734:	f00a fd80 	bl	800c238 <HAL_UART_Transmit>
 8001738:	e044      	b.n	80017c4 <get_scd30_measurement_+0xf4>
			} else if (_RunTime_Packet.co2 == 0) {
 800173a:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d111      	bne.n	800176e <get_scd30_measurement_+0x9e>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 800174a:	463b      	mov	r3, r7
 800174c:	492e      	ldr	r1, [pc, #184]	@ (8001808 <get_scd30_measurement_+0x138>)
 800174e:	4618      	mov	r0, r3
 8001750:	f01d f936 	bl	801e9c0 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001754:	463b      	mov	r3, r7
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fda2 	bl	80002a0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	4639      	mov	r1, r7
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	4827      	ldr	r0, [pc, #156]	@ (8001804 <get_scd30_measurement_+0x134>)
 8001768:	f00a fd66 	bl	800c238 <HAL_UART_Transmit>
 800176c:	e02a      	b.n	80017c4 <get_scd30_measurement_+0xf4>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <get_scd30_measurement_+0x128>)
 8001770:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe ff00 	bl	8000578 <__aeabi_f2d>
 8001778:	4680      	mov	r8, r0
 800177a:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800177e:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fef9 	bl	8000578 <__aeabi_f2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800178c:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fef2 	bl	8000578 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4638      	mov	r0, r7
 800179a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800179e:	e9cd 4500 	strd	r4, r5, [sp]
 80017a2:	4642      	mov	r2, r8
 80017a4:	464b      	mov	r3, r9
 80017a6:	4919      	ldr	r1, [pc, #100]	@ (800180c <get_scd30_measurement_+0x13c>)
 80017a8:	f01d f90a 	bl	801e9c0 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80017ac:	463b      	mov	r3, r7
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fd76 	bl	80002a0 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4639      	mov	r1, r7
 80017ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017be:	4811      	ldr	r0, [pc, #68]	@ (8001804 <get_scd30_measurement_+0x134>)
 80017c0:	f00a fd3a 	bl	800c238 <HAL_UART_Transmit>
			}
		}

		led_awake_routine1();
 80017c4:	f000 fc86 	bl	80020d4 <led_awake_routine1>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80017c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017cc:	3301      	adds	r3, #1
 80017ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <get_scd30_measurement_+0x140>)
 80017da:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80017de:	b29b      	uxth	r3, r3
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d386      	bcc.n	80016f2 <get_scd30_measurement_+0x22>

	}
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3768      	adds	r7, #104	@ 0x68
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f0:	20001538 	.word	0x20001538
 80017f4:	20001534 	.word	0x20001534
 80017f8:	20001530 	.word	0x20001530
 80017fc:	20001578 	.word	0x20001578
 8001800:	08022184 	.word	0x08022184
 8001804:	20001a74 	.word	0x20001a74
 8001808:	080221bc 	.word	0x080221bc
 800180c:	080221e0 	.word	0x080221e0
 8001810:	200012cc 	.word	0x200012cc

08001814 <init_sps30>:

#endif

static void init_sps30() {
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	@ 0x30
 8001818:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 800181a:	480b      	ldr	r0, [pc, #44]	@ (8001848 <init_sps30+0x34>)
 800181c:	f013 ffd0 	bl	80157c0 <sensirion_sleep_usec>

	sensirion_uart_open();
 8001820:	f013 ff18 	bl	8015654 <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f014 f8e9 	bl	80159fe <sps30_read_version>
 800182c:	4603      	mov	r3, r0
 800182e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4618      	mov	r0, r3
 8001836:	f013 ffd7 	bl	80157e8 <sps30_get_serial>
 800183a:	4603      	mov	r3, r0
 800183c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 800183e:	bf00      	nop
 8001840:	3730      	adds	r7, #48	@ 0x30
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	000f4240 	.word	0x000f4240

0800184c <get_sps30_measurement>:
void get_sps30_measurement() {
 800184c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001850:	b0a0      	sub	sp, #128	@ 0x80
 8001852:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 8001854:	f013 fff4 	bl	8015840 <sps30_start_measurement>
 8001858:	4603      	mov	r3, r0
 800185a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 800185e:	483a      	ldr	r0, [pc, #232]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001860:	f014 f81a 	bl	8015898 <sps30_read_measurement>
 8001864:	4603      	mov	r3, r0
 8001866:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 800186a:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <get_sps30_measurement+0xfc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a37      	ldr	r2, [pc, #220]	@ (800194c <get_sps30_measurement+0x100>)
 8001870:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a35      	ldr	r2, [pc, #212]	@ (800194c <get_sps30_measurement+0x100>)
 8001878:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 800187a:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <get_sps30_measurement+0xfc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4a33      	ldr	r2, [pc, #204]	@ (800194c <get_sps30_measurement+0x100>)
 8001880:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 8001882:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4a31      	ldr	r2, [pc, #196]	@ (800194c <get_sps30_measurement+0x100>)
 8001888:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 800188a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800188e:	2b00      	cmp	r3, #0
 8001890:	db54      	blt.n	800193c <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 8001892:	4b2f      	ldr	r3, [pc, #188]	@ (8001950 <get_sps30_measurement+0x104>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d050      	beq.n	800193c <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 800189a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800189e:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d113      	bne.n	80018d4 <get_sps30_measurement+0x88>
				sprintf(buffer,
 80018ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	463b      	mov	r3, r7
 80018b4:	4927      	ldr	r1, [pc, #156]	@ (8001954 <get_sps30_measurement+0x108>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f01d f882 	bl	801e9c0 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80018bc:	463b      	mov	r3, r7
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fcee 	bl	80002a0 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4639      	mov	r1, r7
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	4822      	ldr	r0, [pc, #136]	@ (8001958 <get_sps30_measurement+0x10c>)
 80018d0:	f00a fcb2 	bl	800c238 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe4d 	bl	8000578 <__aeabi_f2d>
 80018de:	4682      	mov	sl, r0
 80018e0:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018e4:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe46 	bl	8000578 <__aeabi_f2d>
 80018ec:	4604      	mov	r4, r0
 80018ee:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe3f 	bl	8000578 <__aeabi_f2d>
 80018fa:	4680      	mov	r8, r0
 80018fc:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001900:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe38 	bl	8000578 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4638      	mov	r0, r7
 800190e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001912:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001916:	e9cd 4500 	strd	r4, r5, [sp]
 800191a:	4652      	mov	r2, sl
 800191c:	465b      	mov	r3, fp
 800191e:	490f      	ldr	r1, [pc, #60]	@ (800195c <get_sps30_measurement+0x110>)
 8001920:	f01d f84e 	bl	801e9c0 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001924:	463b      	mov	r3, r7
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fcba 	bl	80002a0 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	4639      	mov	r1, r7
 8001932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001936:	4808      	ldr	r0, [pc, #32]	@ (8001958 <get_sps30_measurement+0x10c>)
 8001938:	f00a fc7e 	bl	800c238 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 800193c:	bf00      	nop
 800193e:	3768      	adds	r7, #104	@ 0x68
 8001940:	46bd      	mov	sp, r7
 8001942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001946:	bf00      	nop
 8001948:	20001798 	.word	0x20001798
 800194c:	20001530 	.word	0x20001530
 8001950:	20001578 	.word	0x20001578
 8001954:	08022214 	.word	0x08022214
 8001958:	20001a74 	.word	0x20001a74
 800195c:	08022248 	.word	0x08022248

08001960 <check_peripheral_error>:
static void check_peripheral_error() {
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	@ 0x38
 8001964:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <check_peripheral_error+0xa0>)
 8001968:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <check_peripheral_error+0x1c>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 8001970:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <check_peripheral_error+0xa0>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		console_uart_init();
 8001978:	f010 fc42 	bl	8012200 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 800197c:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <check_peripheral_error+0xa0>)
 800197e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001982:	2b00      	cmp	r3, #0
 8001984:	d015      	beq.n	80019b2 <check_peripheral_error+0x52>
		_RunTime_Packet.sps30_uart_error = 0;
 8001986:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <check_peripheral_error+0xa0>)
 8001988:	2200      	movs	r2, #0
 800198a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		disable_5v();
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001994:	481b      	ldr	r0, [pc, #108]	@ (8001a04 <check_peripheral_error+0xa4>)
 8001996:	f004 fb93 	bl	80060c0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800199a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800199e:	f002 fbb7 	bl	8004110 <HAL_Delay>
		enable_5v();
 80019a2:	2201      	movs	r2, #1
 80019a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019a8:	4816      	ldr	r0, [pc, #88]	@ (8001a04 <check_peripheral_error+0xa4>)
 80019aa:	f004 fb89 	bl	80060c0 <HAL_GPIO_WritePin>
		init_sps30();
 80019ae:	f7ff ff31 	bl	8001814 <init_sps30>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
	}
#elif use_scd30
	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	2205      	movs	r2, #5
 80019b8:	21c2      	movs	r1, #194	@ 0xc2
 80019ba:	4813      	ldr	r0, [pc, #76]	@ (8001a08 <check_peripheral_error+0xa8>)
 80019bc:	f005 f856 	bl	8006a6c <HAL_I2C_IsDeviceReady>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d018      	beq.n	80019f8 <check_peripheral_error+0x98>
			!= HAL_OK) {

		if (debug_scd_pm) {
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <check_peripheral_error+0xac>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d010      	beq.n	80019f0 <check_peripheral_error+0x90>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	490f      	ldr	r1, [pc, #60]	@ (8001a10 <check_peripheral_error+0xb0>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f01c fff4 	bl	801e9c0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fc60 	bl	80002a0 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	1d39      	adds	r1, r7, #4
 80019e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ea:	480a      	ldr	r0, [pc, #40]	@ (8001a14 <check_peripheral_error+0xb4>)
 80019ec:	f00a fc24 	bl	800c238 <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 80019f0:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <check_peripheral_error+0xa0>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
#endif

}
 80019f8:	bf00      	nop
 80019fa:	3738      	adds	r7, #56	@ 0x38
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20001530 	.word	0x20001530
 8001a04:	40020400 	.word	0x40020400
 8001a08:	20001838 	.word	0x20001838
 8001a0c:	20001578 	.word	0x20001578
 8001a10:	08022280 	.word	0x08022280
 8001a14:	20001a74 	.word	0x20001a74

08001a18 <sensor_calibration>:
static void sensor_calibration() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <sensor_calibration+0x28>)
 8001a1e:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <sensor_calibration+0x24>
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <sensor_calibration+0x28>)
 8001a28:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <sensor_calibration+0x28>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		sps30_start_manual_fan_cleaning();
 8001a38:	f013 ffcd 	bl	80159d6 <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20001530 	.word	0x20001530

08001a44 <sleep>:
static void sleep() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(disable_led);
 8001a48:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <sleep+0xd0>)
 8001a4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a4e:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 8001a50:	4b30      	ldr	r3, [pc, #192]	@ (8001b14 <sleep+0xd0>)
 8001a52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a56:	639a      	str	r2, [r3, #56]	@ 0x38
	BLUE_LED_PWM(disable_led);
 8001a58:	4a2f      	ldr	r2, [pc, #188]	@ (8001b18 <sleep+0xd4>)
 8001a5a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a5e:	2008      	movs	r0, #8
 8001a60:	f7ff fad8 	bl	8001014 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001a64:	482d      	ldr	r0, [pc, #180]	@ (8001b1c <sleep+0xd8>)
 8001a66:	f002 fbfe 	bl	8004266 <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 8001a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6e:	220b      	movs	r2, #11
 8001a70:	492b      	ldr	r1, [pc, #172]	@ (8001b20 <sleep+0xdc>)
 8001a72:	482c      	ldr	r0, [pc, #176]	@ (8001b24 <sleep+0xe0>)
 8001a74:	f00a fbe0 	bl	800c238 <HAL_UART_Transmit>
	disable_5v();
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a7e:	482a      	ldr	r0, [pc, #168]	@ (8001b28 <sleep+0xe4>)
 8001a80:	f004 fb1e 	bl	80060c0 <HAL_GPIO_WritePin>
	disable_motion();
 8001a84:	2201      	movs	r2, #1
 8001a86:	2102      	movs	r1, #2
 8001a88:	4828      	ldr	r0, [pc, #160]	@ (8001b2c <sleep+0xe8>)
 8001a8a:	f004 fb19 	bl	80060c0 <HAL_GPIO_WritePin>
	scd4x_power_down();
#elif use_scd30
//	scd4x_stop_periodic_measurement();
//	scd4x_power_down();
	//check_peripheral_error() ;
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8001a8e:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <sleep+0xec>)
 8001a90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <sleep+0x62>
	scd30_stop_periodic_measurement();
 8001a98:	f012 fc4e 	bl	8014338 <scd30_stop_periodic_measurement>
	scd30_activate_auto_calibration(0);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f012 fd73 	bl	8014588 <scd30_activate_auto_calibration>
	scd30_soft_reset();
 8001aa2:	f012 fff7 	bl	8014a94 <scd30_soft_reset>
	}
#endif
	console_uart_deinit();
 8001aa6:	f010 fb9f 	bl	80121e8 <console_uart_deinit>
	sensirion_i2c_hal_free();
 8001aaa:	f013 fa41 	bl	8014f30 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001aae:	f013 fe11 	bl	80156d4 <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001ab2:	f01b f8dd 	bl	801cc70 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001ab6:	481f      	ldr	r0, [pc, #124]	@ (8001b34 <sleep+0xf0>)
 8001ab8:	f009 faf7 	bl	800b0aa <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8001abc:	481e      	ldr	r0, [pc, #120]	@ (8001b38 <sleep+0xf4>)
 8001abe:	f009 faf4 	bl	800b0aa <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001ac2:	481e      	ldr	r0, [pc, #120]	@ (8001b3c <sleep+0xf8>)
 8001ac4:	f009 faf1 	bl	800b0aa <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 8001ac8:	481d      	ldr	r0, [pc, #116]	@ (8001b40 <sleep+0xfc>)
 8001aca:	f003 f9ef 	bl	8004eac <HAL_DMA_DeInit>
	HAL_SuspendTick();
 8001ace:	f002 fb43 	bl	8004158 <HAL_SuspendTick>
	gpio_disable();
 8001ad2:	f001 fce5 	bl	80034a0 <gpio_disable>
//	   __HAL_RCC_GPIOD_CLK_DISABLE();
//	   __HAL_RCC_GPIOE_CLK_DISABLE();
//	   __HAL_RCC_GPIOH_CLK_DISABLE();

	   /* FLASH Deep Power Down Mode enabled */
	   HAL_PWREx_EnableFlashPowerDown();
 8001ad6:	f007 f803 	bl	8008ae0 <HAL_PWREx_EnableFlashPowerDown>

	//HAL_RCC_DeInit();
	//clock_speed_slow();


	Rtc_Alarm_watchdog();
 8001ada:	f012 f843 	bl	8013b64 <Rtc_Alarm_watchdog>
	do {
	HAL_IWDG_Refresh(&hiwdg);
 8001ade:	4819      	ldr	r0, [pc, #100]	@ (8001b44 <sleep+0x100>)
 8001ae0:	f005 fcba 	bl	8007458 <HAL_IWDG_Refresh>
	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f006 ffca 	bl	8008a80 <HAL_PWR_EnterSTOPMode>
	//HAL_IWDG_Refresh(&hiwdg);
	Rtc_Alarm_watchdog();
 8001aec:	f012 f83a 	bl	8013b64 <Rtc_Alarm_watchdog>
	}while(set_alarm_Time == 0 && _RunTime_Packet.pwr_off_det == 0 && _RunTime_Packet.usb_detection == 0);
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <sleep+0x104>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <sleep+0xc8>
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <sleep+0xec>)
 8001afa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d104      	bne.n	8001b0c <sleep+0xc8>
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <sleep+0xec>)
 8001b04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0e8      	beq.n	8001ade <sleep+0x9a>

	Rtc_Alarm_watchdog_disable();
 8001b0c:	f012 f818 	bl	8013b40 <Rtc_Alarm_watchdog_disable>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40000400 	.word	0x40000400
 8001b18:	20000324 	.word	0x20000324
 8001b1c:	200017f0 	.word	0x200017f0
 8001b20:	080222a8 	.word	0x080222a8
 8001b24:	20001a74 	.word	0x20001a74
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	20001530 	.word	0x20001530
 8001b34:	2000193c 	.word	0x2000193c
 8001b38:	20001984 	.word	0x20001984
 8001b3c:	200019cc 	.word	0x200019cc
 8001b40:	20001a14 	.word	0x20001a14
 8001b44:	2000188c 	.word	0x2000188c
 8001b48:	20000029 	.word	0x20000029

08001b4c <wakeup>:
static void wakeup() {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_RCC_DeInit();
 8001b50:	f007 fd24 	bl	800959c <HAL_RCC_DeInit>
	clock_speed_high();
 8001b54:	f7ff fb66 	bl	8001224 <clock_speed_high>

	HAL_PWREx_DisableFlashPowerDown();
 8001b58:	f006 ffce 	bl	8008af8 <HAL_PWREx_DisableFlashPowerDown>
	HAL_ResumeTick();
 8001b5c:	f002 fb0c 	bl	8004178 <HAL_ResumeTick>
	gpio_enable();
 8001b60:	f001 fcd4 	bl	800350c <gpio_enable>

	enable_5v();
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b6a:	4838      	ldr	r0, [pc, #224]	@ (8001c4c <wakeup+0x100>)
 8001b6c:	f004 faa8 	bl	80060c0 <HAL_GPIO_WritePin>
	enable_motion();
 8001b70:	2200      	movs	r2, #0
 8001b72:	2102      	movs	r1, #2
 8001b74:	4836      	ldr	r0, [pc, #216]	@ (8001c50 <wakeup+0x104>)
 8001b76:	f004 faa3 	bl	80060c0 <HAL_GPIO_WritePin>
	console_uart_init();
 8001b7a:	f010 fb41 	bl	8012200 <console_uart_init>

	MX_DMA_Init();
 8001b7e:	f7ff fb0d 	bl	800119c <MX_DMA_Init>
	MX_TIM1_Init();
 8001b82:	f001 f8f5 	bl	8002d70 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001b86:	f001 f943 	bl	8002e10 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001b8a:	f001 f98f 	bl	8002eac <MX_TIM3_Init>

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8001b8e:	f7ff fcb9 	bl	8001504 <init_scd30_i2c>
#endif

	if (Mount_SD("/") == FR_OK) {
 8001b92:	4830      	ldr	r0, [pc, #192]	@ (8001c54 <wakeup+0x108>)
 8001b94:	f01a f9f2 	bl	801bf7c <Mount_SD>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <wakeup+0x5e>
		Unmount_SD("/");
 8001b9e:	482d      	ldr	r0, [pc, #180]	@ (8001c54 <wakeup+0x108>)
 8001ba0:	f01a fa18 	bl	801bfd4 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8001ba4:	f01b f876 	bl	801cc94 <MX_USB_DEVICE_Init>
 8001ba8:	e002      	b.n	8001bb0 <wakeup+0x64>
	} else {
		datawritten = 2;
 8001baa:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <wakeup+0x10c>)
 8001bac:	2202      	movs	r2, #2
 8001bae:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001bb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bb4:	4826      	ldr	r0, [pc, #152]	@ (8001c50 <wakeup+0x104>)
 8001bb6:	f004 fa6b 	bl	8006090 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <wakeup+0x7a>
		init_sps30();
 8001bc0:	f7ff fe28 	bl	8001814 <init_sps30>
 8001bc4:	e00f      	b.n	8001be6 <wakeup+0x9a>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001bc6:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <wakeup+0x110>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_start_timer = 1;
 8001bce:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <wakeup+0x110>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8001bd6:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <wakeup+0x114>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001bdc:	f002 fa8c 	bl	80040f8 <HAL_GetTick>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a20      	ldr	r2, [pc, #128]	@ (8001c64 <wakeup+0x118>)
 8001be4:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001be6:	4820      	ldr	r0, [pc, #128]	@ (8001c68 <wakeup+0x11c>)
 8001be8:	f009 fab4 	bl	800b154 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001bec:	491f      	ldr	r1, [pc, #124]	@ (8001c6c <wakeup+0x120>)
 8001bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c70 <wakeup+0x124>)
 8001bf4:	481f      	ldr	r0, [pc, #124]	@ (8001c74 <wakeup+0x128>)
 8001bf6:	f003 f9b7 	bl	8004f68 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <wakeup+0x11c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <wakeup+0x11c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c08:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001c0a:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <wakeup+0x120>)
 8001c0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c10:	2008      	movs	r0, #8
 8001c12:	f7ff f9ff 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001c16:	2100      	movs	r1, #0
 8001c18:	4817      	ldr	r0, [pc, #92]	@ (8001c78 <wakeup+0x12c>)
 8001c1a:	f009 fbdf 	bl	800b3dc <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001c1e:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <wakeup+0x130>)
 8001c20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c24:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001c26:	2104      	movs	r1, #4
 8001c28:	4813      	ldr	r0, [pc, #76]	@ (8001c78 <wakeup+0x12c>)
 8001c2a:	f009 fbd7 	bl	800b3dc <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001c2e:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <wakeup+0x130>)
 8001c30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c34:	639a      	str	r2, [r3, #56]	@ 0x38

	pwr_off_detected();
 8001c36:	f7ff fad1 	bl	80011dc <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3e:	220a      	movs	r2, #10
 8001c40:	490f      	ldr	r1, [pc, #60]	@ (8001c80 <wakeup+0x134>)
 8001c42:	4810      	ldr	r0, [pc, #64]	@ (8001c84 <wakeup+0x138>)
 8001c44:	f00a faf8 	bl	800c238 <HAL_UART_Transmit>
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020000 	.word	0x40020000
 8001c54:	080222b4 	.word	0x080222b4
 8001c58:	20002328 	.word	0x20002328
 8001c5c:	20001530 	.word	0x20001530
 8001c60:	20001584 	.word	0x20001584
 8001c64:	200017c8 	.word	0x200017c8
 8001c68:	2000193c 	.word	0x2000193c
 8001c6c:	20000324 	.word	0x20000324
 8001c70:	40020418 	.word	0x40020418
 8001c74:	20001a14 	.word	0x20001a14
 8001c78:	200019cc 	.word	0x200019cc
 8001c7c:	40000400 	.word	0x40000400
 8001c80:	080222b8 	.word	0x080222b8
 8001c84:	20001a74 	.word	0x20001a74

08001c88 <green_led_blink>:

static void green_led_blink() {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001c8c:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <green_led_blink+0x4c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001c92:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001c96:	f002 fa3b 	bl	8004110 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <green_led_blink+0x4c>)
 8001c9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ca0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001ca2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001ca6:	f002 fa33 	bl	8004110 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <green_led_blink+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cb0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cb4:	f002 fa2c 	bl	8004110 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <green_led_blink+0x4c>)
 8001cba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cbe:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cc0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cc4:	f002 fa24 	bl	8004110 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001cc8:	4b02      	ldr	r3, [pc, #8]	@ (8001cd4 <green_led_blink+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40000400 	.word	0x40000400

08001cd8 <led_awake_routine>:

static void led_awake_routine() {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001cdc:	4ba6      	ldr	r3, [pc, #664]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001cde:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 8195 	bne.w	8002012 <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001ce8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cec:	48a3      	ldr	r0, [pc, #652]	@ (8001f7c <led_awake_routine+0x2a4>)
 8001cee:	f004 f9cf 	bl	8006090 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d025      	beq.n	8001d44 <led_awake_routine+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001cf8:	4b9f      	ldr	r3, [pc, #636]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001cfa:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cfe:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001f80 <led_awake_routine+0x2a8>
 8001d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	db0d      	blt.n	8001d28 <led_awake_routine+0x50>
				GREEN_LED_PWM(0);
 8001d0c:	4b9d      	ldr	r3, [pc, #628]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d12:	4b9c      	ldr	r3, [pc, #624]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001d14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d18:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d1a:	4a9b      	ldr	r2, [pc, #620]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001d1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d20:	2008      	movs	r0, #8
 8001d22:	f7ff f977 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001d26:	e196      	b.n	8002056 <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001d28:	4b96      	ldr	r3, [pc, #600]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001d2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d2e:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d30:	4b94      	ldr	r3, [pc, #592]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d36:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8001d38:	4a93      	ldr	r2, [pc, #588]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2008      	movs	r0, #8
 8001d3e:	f7ff f969 	bl	8001014 <setSoftPWM>
}
 8001d42:	e188      	b.n	8002056 <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001d44:	4a90      	ldr	r2, [pc, #576]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001d46:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d4a:	2008      	movs	r0, #8
 8001d4c:	f7ff f962 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001d50:	4b89      	ldr	r3, [pc, #548]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001d52:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d56:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001f80 <led_awake_routine+0x2a8>
 8001d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	db38      	blt.n	8001dd6 <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001d64:	4b87      	ldr	r3, [pc, #540]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001d66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d6a:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d6c:	4a86      	ldr	r2, [pc, #536]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001d6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d72:	2008      	movs	r0, #8
 8001d74:	f7ff f94e 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001d78:	4b84      	ldr	r3, [pc, #528]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <led_awake_routine+0xbc>
					green_led_pwm_val += 5;
 8001d80:	4b83      	ldr	r3, [pc, #524]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3305      	adds	r3, #5
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	b21a      	sxth	r2, r3
 8001d8e:	4b80      	ldr	r3, [pc, #512]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	e008      	b.n	8001da6 <led_awake_routine+0xce>
					green_led_pwm_val -= 5;
 8001d94:	4b7e      	ldr	r3, [pc, #504]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b05      	subs	r3, #5
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	4b7b      	ldr	r3, [pc, #492]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001da4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001da6:	4b7a      	ldr	r3, [pc, #488]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001db0:	dd03      	ble.n	8001dba <led_awake_routine+0xe2>
					green_led_pwm_flag = 1;
 8001db2:	4b76      	ldr	r3, [pc, #472]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e007      	b.n	8001dca <led_awake_routine+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8001dba:	4b75      	ldr	r3, [pc, #468]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dc02      	bgt.n	8001dca <led_awake_routine+0xf2>
					green_led_pwm_flag = 0;
 8001dc4:	4b71      	ldr	r3, [pc, #452]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001dca:	4b71      	ldr	r3, [pc, #452]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001dcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001dd2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001dd4:	e13f      	b.n	8002056 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8001dd6:	4b68      	ldr	r3, [pc, #416]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001dd8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ddc:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	dd42      	ble.n	8001e70 <led_awake_routine+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001dea:	4b63      	ldr	r3, [pc, #396]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001dec:	edd3 7a08 	vldr	s15, [r3, #32]
 8001df0:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001f80 <led_awake_routine+0x2a8>
 8001df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	d838      	bhi.n	8001e70 <led_awake_routine+0x198>
				RED_LED_PWM(disable_led);
 8001dfe:	4b61      	ldr	r3, [pc, #388]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001e00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e04:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001e06:	4a60      	ldr	r2, [pc, #384]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001e08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e0c:	2008      	movs	r0, #8
 8001e0e:	f7ff f901 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001e12:	4b5e      	ldr	r3, [pc, #376]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <led_awake_routine+0x156>
					green_led_pwm_val += 5;
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3305      	adds	r3, #5
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	4b59      	ldr	r3, [pc, #356]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e2a:	801a      	strh	r2, [r3, #0]
 8001e2c:	e008      	b.n	8001e40 <led_awake_routine+0x168>
					green_led_pwm_val -= 5;
 8001e2e:	4b58      	ldr	r3, [pc, #352]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b05      	subs	r3, #5
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	b21a      	sxth	r2, r3
 8001e3c:	4b54      	ldr	r3, [pc, #336]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e3e:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001e40:	4b53      	ldr	r3, [pc, #332]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e4a:	dd03      	ble.n	8001e54 <led_awake_routine+0x17c>
					green_led_pwm_flag = 1;
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	e007      	b.n	8001e64 <led_awake_routine+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8001e54:	4b4e      	ldr	r3, [pc, #312]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	dc02      	bgt.n	8001e64 <led_awake_routine+0x18c>
					green_led_pwm_flag = 0;
 8001e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001e64:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001e66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e6a:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001e6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e6e:	e0f2      	b.n	8002056 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001e70:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001e72:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e76:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001f94 <led_awake_routine+0x2bc>
 8001e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	f340 808d 	ble.w	8001fa0 <led_awake_routine+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001e86:	4b3c      	ldr	r3, [pc, #240]	@ (8001f78 <led_awake_routine+0x2a0>)
 8001e88:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e8c:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	f200 8082 	bhi.w	8001fa0 <led_awake_routine+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <led_awake_routine+0x2c0>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d003      	beq.n	8001eb0 <led_awake_routine+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8001f98 <led_awake_routine+0x2c0>)
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001eae:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8001eb0:	4a35      	ldr	r2, [pc, #212]	@ (8001f88 <led_awake_routine+0x2b0>)
 8001eb2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001eb6:	2008      	movs	r0, #8
 8001eb8:	f7ff f8ac 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001ebc:	4b33      	ldr	r3, [pc, #204]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <led_awake_routine+0x200>
					green_led_pwm_val += 5;
 8001ec4:	4b32      	ldr	r3, [pc, #200]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3305      	adds	r3, #5
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	e008      	b.n	8001eea <led_awake_routine+0x212>
					green_led_pwm_val -= 5;
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b05      	subs	r3, #5
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	b21a      	sxth	r2, r3
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001ee8:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001eea:	4b29      	ldr	r3, [pc, #164]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ef4:	dd03      	ble.n	8001efe <led_awake_routine+0x226>
					green_led_pwm_flag = 1;
 8001ef6:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e007      	b.n	8001f0e <led_awake_routine+0x236>
				} else if (green_led_pwm_val <= 0) {
 8001efe:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	dc02      	bgt.n	8001f0e <led_awake_routine+0x236>
					green_led_pwm_flag = 0;
 8001f08:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <led_awake_routine+0x2b4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8001f0e:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <led_awake_routine+0x2c0>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <led_awake_routine+0x252>
					red_led_pwm_val += 5;
 8001f16:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3305      	adds	r3, #5
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	e008      	b.n	8001f3c <led_awake_routine+0x264>
					red_led_pwm_val -= 5;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b05      	subs	r3, #5
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f3a:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f46:	dd03      	ble.n	8001f50 <led_awake_routine+0x278>
					red_led_pwm_flag = 1;
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <led_awake_routine+0x2c0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e007      	b.n	8001f60 <led_awake_routine+0x288>
				} else if (red_led_pwm_val <= 0) {
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	dc02      	bgt.n	8001f60 <led_awake_routine+0x288>
					red_led_pwm_flag = 0;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <led_awake_routine+0x2c0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <led_awake_routine+0x2b8>)
 8001f62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f66:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001f68:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <led_awake_routine+0x2c4>)
 8001f6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f70:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <led_awake_routine+0x2ac>)
 8001f72:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f74:	e06f      	b.n	8002056 <led_awake_routine+0x37e>
 8001f76:	bf00      	nop
 8001f78:	20001530 	.word	0x20001530
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40833333 	.word	0x40833333
 8001f84:	40000400 	.word	0x40000400
 8001f88:	20000324 	.word	0x20000324
 8001f8c:	200012c4 	.word	0x200012c4
 8001f90:	200012c6 	.word	0x200012c6
 8001f94:	40533333 	.word	0x40533333
 8001f98:	200012c5 	.word	0x200012c5
 8001f9c:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <led_awake_routine+0x384>)
 8001fa2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fa6:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8002060 <led_awake_routine+0x388>)
 8001faa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fae:	2008      	movs	r0, #8
 8001fb0:	f7ff f830 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002064 <led_awake_routine+0x38c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <led_awake_routine+0x2f8>
					red_led_pwm_val += 5;
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <led_awake_routine+0x390>)
 8001fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3305      	adds	r3, #5
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <led_awake_routine+0x390>)
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	e008      	b.n	8001fe2 <led_awake_routine+0x30a>
					red_led_pwm_val -= 5;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <led_awake_routine+0x390>)
 8001fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b05      	subs	r3, #5
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <led_awake_routine+0x390>)
 8001fe0:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <led_awake_routine+0x390>)
 8001fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fec:	dd03      	ble.n	8001ff6 <led_awake_routine+0x31e>
					red_led_pwm_flag = 1;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <led_awake_routine+0x38c>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e007      	b.n	8002006 <led_awake_routine+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <led_awake_routine+0x390>)
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	dc02      	bgt.n	8002006 <led_awake_routine+0x32e>
					red_led_pwm_flag = 0;
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <led_awake_routine+0x38c>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002006:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <led_awake_routine+0x390>)
 8002008:	f9b3 2000 	ldrsh.w	r2, [r3]
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <led_awake_routine+0x384>)
 800200e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002010:	e021      	b.n	8002056 <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <led_awake_routine+0x384>)
 8002014:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002018:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 800201a:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <led_awake_routine+0x388>)
 800201c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002020:	2008      	movs	r0, #8
 8002022:	f7fe fff7 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <led_awake_routine+0x390>)
 8002028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002030:	d004      	beq.n	800203c <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <led_awake_routine+0x390>)
 8002034:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002038:	801a      	strh	r2, [r3, #0]
 800203a:	e002      	b.n	8002042 <led_awake_routine+0x36a>
			red_led_pwm_val = 0;
 800203c:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <led_awake_routine+0x390>)
 800203e:	2200      	movs	r2, #0
 8002040:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <led_awake_routine+0x390>)
 8002044:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <led_awake_routine+0x384>)
 800204a:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 800204c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002050:	f002 f85e 	bl	8004110 <HAL_Delay>
}
 8002054:	e7ff      	b.n	8002056 <led_awake_routine+0x37e>
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40000400 	.word	0x40000400
 8002060:	20000324 	.word	0x20000324
 8002064:	200012c5 	.word	0x200012c5
 8002068:	200012c8 	.word	0x200012c8

0800206c <blink_red>:

void blink_red() {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 8002070:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <blink_red+0x60>)
 8002072:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002076:	635a      	str	r2, [r3, #52]	@ 0x34
	BLUE_LED_PWM(disable_led);
 8002078:	4a15      	ldr	r2, [pc, #84]	@ (80020d0 <blink_red+0x64>)
 800207a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800207e:	2008      	movs	r0, #8
 8002080:	f7fe ffc8 	bl	8001014 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <blink_red+0x60>)
 8002086:	2200      	movs	r2, #0
 8002088:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 800208a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800208e:	f002 f83f 	bl	8004110 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <blink_red+0x60>)
 8002094:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002098:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 800209a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800209e:	f002 f837 	bl	8004110 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <blink_red+0x60>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020ac:	f002 f830 	bl	8004110 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <blink_red+0x60>)
 80020b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020b6:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020bc:	f002 f828 	bl	8004110 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 80020c0:	4b02      	ldr	r3, [pc, #8]	@ (80020cc <blink_red+0x60>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40000400 	.word	0x40000400
 80020d0:	20000324 	.word	0x20000324

080020d4 <led_awake_routine1>:

static void led_awake_routine1() {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 80020d8:	4ba6      	ldr	r3, [pc, #664]	@ (8002374 <led_awake_routine1+0x2a0>)
 80020da:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 8195 	bne.w	800240e <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 80020e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020e8:	48a3      	ldr	r0, [pc, #652]	@ (8002378 <led_awake_routine1+0x2a4>)
 80020ea:	f003 ffd1 	bl	8006090 <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d025      	beq.n	8002140 <led_awake_routine1+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 80020f4:	4b9f      	ldr	r3, [pc, #636]	@ (8002374 <led_awake_routine1+0x2a0>)
 80020f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80020fa:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800237c <led_awake_routine1+0x2a8>
 80020fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	db0d      	blt.n	8002124 <led_awake_routine1+0x50>
				GREEN_LED_PWM(0);
 8002108:	4b9d      	ldr	r3, [pc, #628]	@ (8002380 <led_awake_routine1+0x2ac>)
 800210a:	2200      	movs	r2, #0
 800210c:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 800210e:	4b9c      	ldr	r3, [pc, #624]	@ (8002380 <led_awake_routine1+0x2ac>)
 8002110:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002116:	4a9b      	ldr	r2, [pc, #620]	@ (8002384 <led_awake_routine1+0x2b0>)
 8002118:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800211c:	2008      	movs	r0, #8
 800211e:	f7fe ff79 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8002122:	e196      	b.n	8002452 <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8002124:	4b96      	ldr	r3, [pc, #600]	@ (8002380 <led_awake_routine1+0x2ac>)
 8002126:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800212a:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 800212c:	4b94      	ldr	r3, [pc, #592]	@ (8002380 <led_awake_routine1+0x2ac>)
 800212e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002132:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8002134:	4a93      	ldr	r2, [pc, #588]	@ (8002384 <led_awake_routine1+0x2b0>)
 8002136:	2100      	movs	r1, #0
 8002138:	2008      	movs	r0, #8
 800213a:	f7fe ff6b 	bl	8001014 <setSoftPWM>
}
 800213e:	e188      	b.n	8002452 <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8002140:	4a90      	ldr	r2, [pc, #576]	@ (8002384 <led_awake_routine1+0x2b0>)
 8002142:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002146:	2008      	movs	r0, #8
 8002148:	f7fe ff64 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 800214c:	4b89      	ldr	r3, [pc, #548]	@ (8002374 <led_awake_routine1+0x2a0>)
 800214e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002152:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800237c <led_awake_routine1+0x2a8>
 8002156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215e:	db38      	blt.n	80021d2 <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 8002160:	4b87      	ldr	r3, [pc, #540]	@ (8002380 <led_awake_routine1+0x2ac>)
 8002162:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002166:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002168:	4a86      	ldr	r2, [pc, #536]	@ (8002384 <led_awake_routine1+0x2b0>)
 800216a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800216e:	2008      	movs	r0, #8
 8002170:	f7fe ff50 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002174:	4b84      	ldr	r3, [pc, #528]	@ (8002388 <led_awake_routine1+0x2b4>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <led_awake_routine1+0xbc>
					green_led_pwm_val += 40;
 800217c:	4b83      	ldr	r3, [pc, #524]	@ (800238c <led_awake_routine1+0x2b8>)
 800217e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002182:	b29b      	uxth	r3, r3
 8002184:	3328      	adds	r3, #40	@ 0x28
 8002186:	b29b      	uxth	r3, r3
 8002188:	b21a      	sxth	r2, r3
 800218a:	4b80      	ldr	r3, [pc, #512]	@ (800238c <led_awake_routine1+0x2b8>)
 800218c:	801a      	strh	r2, [r3, #0]
 800218e:	e008      	b.n	80021a2 <led_awake_routine1+0xce>
					green_led_pwm_val -= 40;
 8002190:	4b7e      	ldr	r3, [pc, #504]	@ (800238c <led_awake_routine1+0x2b8>)
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b28      	subs	r3, #40	@ 0x28
 800219a:	b29b      	uxth	r3, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	4b7b      	ldr	r3, [pc, #492]	@ (800238c <led_awake_routine1+0x2b8>)
 80021a0:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80021a2:	4b7a      	ldr	r3, [pc, #488]	@ (800238c <led_awake_routine1+0x2b8>)
 80021a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021ac:	dd03      	ble.n	80021b6 <led_awake_routine1+0xe2>
					green_led_pwm_flag = 1;
 80021ae:	4b76      	ldr	r3, [pc, #472]	@ (8002388 <led_awake_routine1+0x2b4>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e007      	b.n	80021c6 <led_awake_routine1+0xf2>
				} else if (green_led_pwm_val <= 0) {
 80021b6:	4b75      	ldr	r3, [pc, #468]	@ (800238c <led_awake_routine1+0x2b8>)
 80021b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	dc02      	bgt.n	80021c6 <led_awake_routine1+0xf2>
					green_led_pwm_flag = 0;
 80021c0:	4b71      	ldr	r3, [pc, #452]	@ (8002388 <led_awake_routine1+0x2b4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80021c6:	4b71      	ldr	r3, [pc, #452]	@ (800238c <led_awake_routine1+0x2b8>)
 80021c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002380 <led_awake_routine1+0x2ac>)
 80021ce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021d0:	e13f      	b.n	8002452 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 80021d2:	4b68      	ldr	r3, [pc, #416]	@ (8002374 <led_awake_routine1+0x2a0>)
 80021d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80021d8:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80021dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	dd42      	ble.n	800226c <led_awake_routine1+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 80021e6:	4b63      	ldr	r3, [pc, #396]	@ (8002374 <led_awake_routine1+0x2a0>)
 80021e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80021ec:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800237c <led_awake_routine1+0x2a8>
 80021f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d838      	bhi.n	800226c <led_awake_routine1+0x198>
				RED_LED_PWM(disable_led);
 80021fa:	4b61      	ldr	r3, [pc, #388]	@ (8002380 <led_awake_routine1+0x2ac>)
 80021fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002200:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002202:	4a60      	ldr	r2, [pc, #384]	@ (8002384 <led_awake_routine1+0x2b0>)
 8002204:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002208:	2008      	movs	r0, #8
 800220a:	f7fe ff03 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 800220e:	4b5e      	ldr	r3, [pc, #376]	@ (8002388 <led_awake_routine1+0x2b4>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <led_awake_routine1+0x156>
					green_led_pwm_val += 40;
 8002216:	4b5d      	ldr	r3, [pc, #372]	@ (800238c <led_awake_routine1+0x2b8>)
 8002218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221c:	b29b      	uxth	r3, r3
 800221e:	3328      	adds	r3, #40	@ 0x28
 8002220:	b29b      	uxth	r3, r3
 8002222:	b21a      	sxth	r2, r3
 8002224:	4b59      	ldr	r3, [pc, #356]	@ (800238c <led_awake_routine1+0x2b8>)
 8002226:	801a      	strh	r2, [r3, #0]
 8002228:	e008      	b.n	800223c <led_awake_routine1+0x168>
					green_led_pwm_val -= 40;
 800222a:	4b58      	ldr	r3, [pc, #352]	@ (800238c <led_awake_routine1+0x2b8>)
 800222c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b28      	subs	r3, #40	@ 0x28
 8002234:	b29b      	uxth	r3, r3
 8002236:	b21a      	sxth	r2, r3
 8002238:	4b54      	ldr	r3, [pc, #336]	@ (800238c <led_awake_routine1+0x2b8>)
 800223a:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 800223c:	4b53      	ldr	r3, [pc, #332]	@ (800238c <led_awake_routine1+0x2b8>)
 800223e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002242:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002246:	dd03      	ble.n	8002250 <led_awake_routine1+0x17c>
					green_led_pwm_flag = 1;
 8002248:	4b4f      	ldr	r3, [pc, #316]	@ (8002388 <led_awake_routine1+0x2b4>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e007      	b.n	8002260 <led_awake_routine1+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8002250:	4b4e      	ldr	r3, [pc, #312]	@ (800238c <led_awake_routine1+0x2b8>)
 8002252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002256:	2b00      	cmp	r3, #0
 8002258:	dc02      	bgt.n	8002260 <led_awake_routine1+0x18c>
					green_led_pwm_flag = 0;
 800225a:	4b4b      	ldr	r3, [pc, #300]	@ (8002388 <led_awake_routine1+0x2b4>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002260:	4b4a      	ldr	r3, [pc, #296]	@ (800238c <led_awake_routine1+0x2b8>)
 8002262:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002266:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <led_awake_routine1+0x2ac>)
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34
 800226a:	e0f2      	b.n	8002452 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 800226c:	4b41      	ldr	r3, [pc, #260]	@ (8002374 <led_awake_routine1+0x2a0>)
 800226e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002272:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002390 <led_awake_routine1+0x2bc>
 8002276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	f340 808d 	ble.w	800239c <led_awake_routine1+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8002282:	4b3c      	ldr	r3, [pc, #240]	@ (8002374 <led_awake_routine1+0x2a0>)
 8002284:	edd3 7a08 	vldr	s15, [r3, #32]
 8002288:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 800228c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002294:	f200 8082 	bhi.w	800239c <led_awake_routine1+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8002298:	4b3b      	ldr	r3, [pc, #236]	@ (8002388 <led_awake_routine1+0x2b4>)
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	4b3d      	ldr	r3, [pc, #244]	@ (8002394 <led_awake_routine1+0x2c0>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d003      	beq.n	80022ac <led_awake_routine1+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 80022a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002394 <led_awake_routine1+0x2c0>)
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b37      	ldr	r3, [pc, #220]	@ (8002388 <led_awake_routine1+0x2b4>)
 80022aa:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 80022ac:	4a35      	ldr	r2, [pc, #212]	@ (8002384 <led_awake_routine1+0x2b0>)
 80022ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022b2:	2008      	movs	r0, #8
 80022b4:	f7fe feae 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80022b8:	4b33      	ldr	r3, [pc, #204]	@ (8002388 <led_awake_routine1+0x2b4>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <led_awake_routine1+0x200>
					green_led_pwm_val += 40;
 80022c0:	4b32      	ldr	r3, [pc, #200]	@ (800238c <led_awake_routine1+0x2b8>)
 80022c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3328      	adds	r3, #40	@ 0x28
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	b21a      	sxth	r2, r3
 80022ce:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <led_awake_routine1+0x2b8>)
 80022d0:	801a      	strh	r2, [r3, #0]
 80022d2:	e008      	b.n	80022e6 <led_awake_routine1+0x212>
					green_led_pwm_val -= 40;
 80022d4:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <led_awake_routine1+0x2b8>)
 80022d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b28      	subs	r3, #40	@ 0x28
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b21a      	sxth	r2, r3
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <led_awake_routine1+0x2b8>)
 80022e4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80022e6:	4b29      	ldr	r3, [pc, #164]	@ (800238c <led_awake_routine1+0x2b8>)
 80022e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022f0:	dd03      	ble.n	80022fa <led_awake_routine1+0x226>
					green_led_pwm_flag = 1;
 80022f2:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <led_awake_routine1+0x2b4>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e007      	b.n	800230a <led_awake_routine1+0x236>
				} else if (green_led_pwm_val <= 0) {
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <led_awake_routine1+0x2b8>)
 80022fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002300:	2b00      	cmp	r3, #0
 8002302:	dc02      	bgt.n	800230a <led_awake_routine1+0x236>
					green_led_pwm_flag = 0;
 8002304:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <led_awake_routine1+0x2b4>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 800230a:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <led_awake_routine1+0x2c0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <led_awake_routine1+0x252>
					red_led_pwm_val += 40;
 8002312:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <led_awake_routine1+0x2c4>)
 8002314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002318:	b29b      	uxth	r3, r3
 800231a:	3328      	adds	r3, #40	@ 0x28
 800231c:	b29b      	uxth	r3, r3
 800231e:	b21a      	sxth	r2, r3
 8002320:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <led_awake_routine1+0x2c4>)
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	e008      	b.n	8002338 <led_awake_routine1+0x264>
					red_led_pwm_val -= 40;
 8002326:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <led_awake_routine1+0x2c4>)
 8002328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b28      	subs	r3, #40	@ 0x28
 8002330:	b29b      	uxth	r3, r3
 8002332:	b21a      	sxth	r2, r3
 8002334:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <led_awake_routine1+0x2c4>)
 8002336:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002338:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <led_awake_routine1+0x2c4>)
 800233a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002342:	dd03      	ble.n	800234c <led_awake_routine1+0x278>
					red_led_pwm_flag = 1;
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <led_awake_routine1+0x2c0>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e007      	b.n	800235c <led_awake_routine1+0x288>
				} else if (red_led_pwm_val <= 0) {
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <led_awake_routine1+0x2c4>)
 800234e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002352:	2b00      	cmp	r3, #0
 8002354:	dc02      	bgt.n	800235c <led_awake_routine1+0x288>
					red_led_pwm_flag = 0;
 8002356:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <led_awake_routine1+0x2c0>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <led_awake_routine1+0x2b8>)
 800235e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002362:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <led_awake_routine1+0x2ac>)
 8002364:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002366:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <led_awake_routine1+0x2c4>)
 8002368:	f9b3 2000 	ldrsh.w	r2, [r3]
 800236c:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <led_awake_routine1+0x2ac>)
 800236e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002370:	e06f      	b.n	8002452 <led_awake_routine1+0x37e>
 8002372:	bf00      	nop
 8002374:	20001530 	.word	0x20001530
 8002378:	40020000 	.word	0x40020000
 800237c:	40833333 	.word	0x40833333
 8002380:	40000400 	.word	0x40000400
 8002384:	20000324 	.word	0x20000324
 8002388:	200012c4 	.word	0x200012c4
 800238c:	200012c6 	.word	0x200012c6
 8002390:	40533333 	.word	0x40533333
 8002394:	200012c5 	.word	0x200012c5
 8002398:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 800239c:	4b2e      	ldr	r3, [pc, #184]	@ (8002458 <led_awake_routine1+0x384>)
 800239e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023a2:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 80023a4:	4a2d      	ldr	r2, [pc, #180]	@ (800245c <led_awake_routine1+0x388>)
 80023a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023aa:	2008      	movs	r0, #8
 80023ac:	f7fe fe32 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 80023b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002460 <led_awake_routine1+0x38c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <led_awake_routine1+0x2f8>
					red_led_pwm_val += 40;
 80023b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <led_awake_routine1+0x390>)
 80023ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3328      	adds	r3, #40	@ 0x28
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	b21a      	sxth	r2, r3
 80023c6:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <led_awake_routine1+0x390>)
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	e008      	b.n	80023de <led_awake_routine1+0x30a>
					red_led_pwm_val -= 40;
 80023cc:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <led_awake_routine1+0x390>)
 80023ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b28      	subs	r3, #40	@ 0x28
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b21a      	sxth	r2, r3
 80023da:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <led_awake_routine1+0x390>)
 80023dc:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 80023de:	4b21      	ldr	r3, [pc, #132]	@ (8002464 <led_awake_routine1+0x390>)
 80023e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023e8:	dd03      	ble.n	80023f2 <led_awake_routine1+0x31e>
					red_led_pwm_flag = 1;
 80023ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <led_awake_routine1+0x38c>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e007      	b.n	8002402 <led_awake_routine1+0x32e>
				} else if (red_led_pwm_val <= 0) {
 80023f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002464 <led_awake_routine1+0x390>)
 80023f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	dc02      	bgt.n	8002402 <led_awake_routine1+0x32e>
					red_led_pwm_flag = 0;
 80023fc:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <led_awake_routine1+0x38c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002402:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <led_awake_routine1+0x390>)
 8002404:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <led_awake_routine1+0x384>)
 800240a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800240c:	e021      	b.n	8002452 <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 800240e:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <led_awake_routine1+0x384>)
 8002410:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002414:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 8002416:	4a11      	ldr	r2, [pc, #68]	@ (800245c <led_awake_routine1+0x388>)
 8002418:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800241c:	2008      	movs	r0, #8
 800241e:	f7fe fdf9 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <led_awake_routine1+0x390>)
 8002424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002428:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800242c:	d004      	beq.n	8002438 <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 800242e:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <led_awake_routine1+0x390>)
 8002430:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	e002      	b.n	800243e <led_awake_routine1+0x36a>
			red_led_pwm_val = 0;
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <led_awake_routine1+0x390>)
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <led_awake_routine1+0x390>)
 8002440:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <led_awake_routine1+0x384>)
 8002446:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 8002448:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800244c:	f001 fe60 	bl	8004110 <HAL_Delay>
}
 8002450:	e7ff      	b.n	8002452 <led_awake_routine1+0x37e>
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40000400 	.word	0x40000400
 800245c:	20000324 	.word	0x20000324
 8002460:	200012c5 	.word	0x200012c5
 8002464:	200012c8 	.word	0x200012c8

08002468 <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 800246e:	f001 fe9f 	bl	80041b0 <HAL_GetUIDw1>
 8002472:	4603      	mov	r3, r0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8002478:	f001 fe9a 	bl	80041b0 <HAL_GetUIDw1>
 800247c:	4603      	mov	r3, r0
 800247e:	4a1d      	ldr	r2, [pc, #116]	@ (80024f4 <ver_GetUid+0x8c>)
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8002484:	4c1c      	ldr	r4, [pc, #112]	@ (80024f8 <ver_GetUid+0x90>)
 8002486:	f001 fe9f 	bl	80041c8 <HAL_GetUIDw2>
 800248a:	4603      	mov	r3, r0
 800248c:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b23      	cmp	r3, #35	@ 0x23
 8002492:	d909      	bls.n	80024a8 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b3d      	cmp	r3, #61	@ 0x3d
 8002498:	bf28      	it	cs
 800249a:	233d      	movcs	r3, #61	@ 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	333d      	adds	r3, #61	@ 0x3d
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <ver_GetUid+0x8c>)
 80024a4:	71da      	strb	r2, [r3, #7]
 80024a6:	e00b      	b.n	80024c0 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b09      	cmp	r3, #9
 80024ac:	d901      	bls.n	80024b2 <ver_GetUid+0x4a>
 80024ae:	2241      	movs	r2, #65	@ 0x41
 80024b0:	e000      	b.n	80024b4 <ver_GetUid+0x4c>
 80024b2:	2230      	movs	r2, #48	@ 0x30
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <ver_GetUid+0x8c>)
 80024be:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 80024c0:	f001 fe6a 	bl	8004198 <HAL_GetUIDw0>
 80024c4:	4603      	mov	r3, r0
 80024c6:	0c1b      	lsrs	r3, r3, #16
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	480b      	ldr	r0, [pc, #44]	@ (80024fc <ver_GetUid+0x94>)
 80024ce:	f011 fd5d 	bl	8013f8c <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 80024d2:	f001 fe61 	bl	8004198 <HAL_GetUIDw0>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	4808      	ldr	r0, [pc, #32]	@ (8002500 <ver_GetUid+0x98>)
 80024de:	f011 fd55 	bl	8013f8c <CharToHexasc>
	sUid[12] = 0;
 80024e2:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <ver_GetUid+0x8c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 80024e8:	4b02      	ldr	r3, [pc, #8]	@ (80024f4 <ver_GetUid+0x8c>)
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200017cc 	.word	0x200017cc
 80024f8:	200017cf 	.word	0x200017cf
 80024fc:	200017d4 	.word	0x200017d4
 8002500:	200017d6 	.word	0x200017d6

08002504 <run_console_from_scd30>:

void run_console_from_scd30()
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0


	if(run_console_co2)
 8002508:	4b04      	ldr	r3, [pc, #16]	@ (800251c <run_console_from_scd30+0x18>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <run_console_from_scd30+0x10>
	{
		console_process();
 8002510:	f00f fe5e 	bl	80121d0 <console_process>
	}
	led_awake_routine1();
 8002514:	f7ff fdde 	bl	80020d4 <led_awake_routine1>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000320 	.word	0x20000320

08002520 <app_main>:

void app_main() {
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0

	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 8002526:	2248      	movs	r2, #72	@ 0x48
 8002528:	2100      	movs	r1, #0
 800252a:	489e      	ldr	r0, [pc, #632]	@ (80027a4 <app_main+0x284>)
 800252c:	f01c fb92 	bl	801ec54 <memset>

	load_param();
 8002530:	f7fe fee6 	bl	8001300 <load_param>

	HAL_TIM_Base_Start(&htim1);
 8002534:	489c      	ldr	r0, [pc, #624]	@ (80027a8 <app_main+0x288>)
 8002536:	f008 fe0d 	bl	800b154 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 800253a:	499c      	ldr	r1, [pc, #624]	@ (80027ac <app_main+0x28c>)
 800253c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002540:	4a9b      	ldr	r2, [pc, #620]	@ (80027b0 <app_main+0x290>)
 8002542:	489c      	ldr	r0, [pc, #624]	@ (80027b4 <app_main+0x294>)
 8002544:	f002 fd10 	bl	8004f68 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002548:	4b97      	ldr	r3, [pc, #604]	@ (80027a8 <app_main+0x288>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b96      	ldr	r3, [pc, #600]	@ (80027a8 <app_main+0x288>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002556:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8002558:	4a94      	ldr	r2, [pc, #592]	@ (80027ac <app_main+0x28c>)
 800255a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800255e:	2008      	movs	r0, #8
 8002560:	f7fe fd58 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8002564:	2100      	movs	r1, #0
 8002566:	4894      	ldr	r0, [pc, #592]	@ (80027b8 <app_main+0x298>)
 8002568:	f008 ff38 	bl	800b3dc <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 800256c:	4b93      	ldr	r3, [pc, #588]	@ (80027bc <app_main+0x29c>)
 800256e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8002574:	2104      	movs	r1, #4
 8002576:	4890      	ldr	r0, [pc, #576]	@ (80027b8 <app_main+0x298>)
 8002578:	f008 ff30 	bl	800b3dc <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 800257c:	4b8f      	ldr	r3, [pc, #572]	@ (80027bc <app_main+0x29c>)
 800257e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002582:	639a      	str	r2, [r3, #56]	@ 0x38

	if (Mount_SD("/") == FR_OK) {
 8002584:	488e      	ldr	r0, [pc, #568]	@ (80027c0 <app_main+0x2a0>)
 8002586:	f019 fcf9 	bl	801bf7c <Mount_SD>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <app_main+0x7c>

		Unmount_SD("/");
 8002590:	488b      	ldr	r0, [pc, #556]	@ (80027c0 <app_main+0x2a0>)
 8002592:	f019 fd1f 	bl	801bfd4 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8002596:	f01a fb7d 	bl	801cc94 <MX_USB_DEVICE_Init>
 800259a:	e002      	b.n	80025a2 <app_main+0x82>

	} else {
		datawritten = 2;
 800259c:	4b89      	ldr	r3, [pc, #548]	@ (80027c4 <app_main+0x2a4>)
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
	}
	prev_usb_time_ = HAL_GetTick();
 80025a2:	f001 fda9 	bl	80040f8 <HAL_GetTick>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a87      	ldr	r2, [pc, #540]	@ (80027c8 <app_main+0x2a8>)
 80025aa:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80025ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025b0:	4886      	ldr	r0, [pc, #536]	@ (80027cc <app_main+0x2ac>)
 80025b2:	f003 fd6d 	bl	8006090 <HAL_GPIO_ReadPin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <app_main+0xa2>
		init_sps30();
 80025bc:	f7ff f92a 	bl	8001814 <init_sps30>
 80025c0:	e016      	b.n	80025f0 <app_main+0xd0>
	} else {
		_RunTime_Packet.usb_detection = 0;
 80025c2:	4b78      	ldr	r3, [pc, #480]	@ (80027a4 <app_main+0x284>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_first_start = 1;
 80025ca:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <app_main+0x284>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		_RunTime_Packet.usb_active_disable_pm = 1;
 80025d2:	4b74      	ldr	r3, [pc, #464]	@ (80027a4 <app_main+0x284>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		_RunTime_Packet.usb_start_timer = 1;
 80025da:	4b72      	ldr	r3, [pc, #456]	@ (80027a4 <app_main+0x284>)
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 80025e2:	4b7b      	ldr	r3, [pc, #492]	@ (80027d0 <app_main+0x2b0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
		_RunTime_Packet.showPrompt = 1;
 80025e8:	4b6e      	ldr	r3, [pc, #440]	@ (80027a4 <app_main+0x284>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	//init_sps30();

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 80025f0:	f7fe ff88 	bl	8001504 <init_scd30_i2c>
#endif
	console_init();
 80025f4:	f00f fe38 	bl	8012268 <console_init>
	Rtc_set_alarm();
 80025f8:	f011 fb36 	bl	8013c68 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	2200      	movs	r2, #0
 8002602:	4619      	mov	r1, r3
 8002604:	4873      	ldr	r0, [pc, #460]	@ (80027d4 <app_main+0x2b4>)
 8002606:	f007 fa96 	bl	8009b36 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_year = sDate.Year;
 800260a:	7ffb      	ldrb	r3, [r7, #31]
 800260c:	461a      	mov	r2, r3
 800260e:	4b65      	ldr	r3, [pc, #404]	@ (80027a4 <app_main+0x284>)
 8002610:	855a      	strh	r2, [r3, #42]	@ 0x2a
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

	//if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	 if ((HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) || (strcmp(_Flash_Packet.filename_with_format,"default") == 0)) //we save this value and dont change it untill and untless RTC data is not lost
 8002612:	2101      	movs	r1, #1
 8002614:	486f      	ldr	r0, [pc, #444]	@ (80027d4 <app_main+0x2b4>)
 8002616:	f007 fd3f 	bl	800a098 <HAL_RTCEx_BKUPRead>
 800261a:	4603      	mov	r3, r0
 800261c:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8002620:	4293      	cmp	r3, r2
 8002622:	d106      	bne.n	8002632 <app_main+0x112>
 8002624:	496c      	ldr	r1, [pc, #432]	@ (80027d8 <app_main+0x2b8>)
 8002626:	486d      	ldr	r0, [pc, #436]	@ (80027dc <app_main+0x2bc>)
 8002628:	f7fd fdda 	bl	80001e0 <strcmp>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d112      	bne.n	8002658 <app_main+0x138>
	    {

		   HAL_PWR_EnableBkUpAccess();
 8002632:	f006 f9fd 	bl	8008a30 <HAL_PWR_EnableBkUpAccess>
		   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
 8002636:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 800263a:	2101      	movs	r1, #1
 800263c:	4865      	ldr	r0, [pc, #404]	@ (80027d4 <app_main+0x2b4>)
 800263e:	f007 fd11 	bl	800a064 <HAL_RTCEx_BKUPWrite>
		   HAL_PWR_DisableBkUpAccess();
 8002642:	f006 fa09 	bl	8008a58 <HAL_PWR_DisableBkUpAccess>


		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8002646:	4966      	ldr	r1, [pc, #408]	@ (80027e0 <app_main+0x2c0>)
 8002648:	4866      	ldr	r0, [pc, #408]	@ (80027e4 <app_main+0x2c4>)
 800264a:	f01a fa8d 	bl	801cb68 <createfile>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b54      	ldr	r3, [pc, #336]	@ (80027a4 <app_main+0x284>)
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	// else
	// {
	// 	 _RunTime_Packet.sd_file_creation = -1;
	// }

	green_led_blink();
 8002658:	f7ff fb16 	bl	8001c88 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 800265c:	23c8      	movs	r3, #200	@ 0xc8
 800265e:	2215      	movs	r2, #21
 8002660:	4961      	ldr	r1, [pc, #388]	@ (80027e8 <app_main+0x2c8>)
 8002662:	4862      	ldr	r0, [pc, #392]	@ (80027ec <app_main+0x2cc>)
 8002664:	f009 fde8 	bl	800c238 <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 8002668:	f001 fd46 	bl	80040f8 <HAL_GetTick>
 800266c:	4603      	mov	r3, r0
 800266e:	4a60      	ldr	r2, [pc, #384]	@ (80027f0 <app_main+0x2d0>)
 8002670:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 8002672:	f001 fd41 	bl	80040f8 <HAL_GetTick>
 8002676:	4603      	mov	r3, r0
 8002678:	4a5e      	ldr	r2, [pc, #376]	@ (80027f4 <app_main+0x2d4>)
 800267a:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 800267c:	4b5e      	ldr	r3, [pc, #376]	@ (80027f8 <app_main+0x2d8>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
		pwr_off_detected();
 8002682:	f7fe fdab 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002686:	e177      	b.n	8002978 <app_main+0x458>
		{
			pwr_off_detected();
 8002688:	f7fe fda8 	bl	80011dc <pwr_off_detected>
//
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}
			adc_Measure(&_RunTime_Packet.battery_voltage);
 800268c:	485b      	ldr	r0, [pc, #364]	@ (80027fc <app_main+0x2dc>)
 800268e:	f011 fd13 	bl	80140b8 <adc_Measure>
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 8002692:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002696:	484d      	ldr	r0, [pc, #308]	@ (80027cc <app_main+0x2ac>)
 8002698:	f003 fcfa 	bl	8006090 <HAL_GPIO_ReadPin>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <app_main+0x18c>
					{
				prev_sleep_time = HAL_GetTick();
 80026a2:	f001 fd29 	bl	80040f8 <HAL_GetTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4a51      	ldr	r2, [pc, #324]	@ (80027f0 <app_main+0x2d0>)
 80026aa:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	2200      	movs	r2, #0
 80026b2:	4619      	mov	r1, r3
 80026b4:	4847      	ldr	r0, [pc, #284]	@ (80027d4 <app_main+0x2b4>)
 80026b6:	f007 f95c 	bl	8009972 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	4619      	mov	r1, r3
 80026c0:	4844      	ldr	r0, [pc, #272]	@ (80027d4 <app_main+0x2b4>)
 80026c2:	f007 fa38 	bl	8009b36 <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 80026c6:	79ba      	ldrb	r2, [r7, #6]
 80026c8:	4b36      	ldr	r3, [pc, #216]	@ (80027a4 <app_main+0x284>)
 80026ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			_RunTime_Packet.month = sDate.Month;
 80026ce:	797a      	ldrb	r2, [r7, #5]
 80026d0:	4b34      	ldr	r3, [pc, #208]	@ (80027a4 <app_main+0x284>)
 80026d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			_RunTime_Packet.year = sDate.Year;
 80026d6:	79fa      	ldrb	r2, [r7, #7]
 80026d8:	4b32      	ldr	r3, [pc, #200]	@ (80027a4 <app_main+0x284>)
 80026da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

			if (_RunTime_Packet.prev_year != sDate.Year) {
 80026de:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <app_main+0x284>)
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	79fa      	ldrb	r2, [r7, #7]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <app_main+0x1d8>
				_RunTime_Packet.year_changed = 1; //this for year now
 80026e8:	4b2e      	ldr	r3, [pc, #184]	@ (80027a4 <app_main+0x284>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				_RunTime_Packet.prev_year = sDate.Year;
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <app_main+0x284>)
 80026f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
			}

			check_peripheral_error();
 80026f8:	f7ff f932 	bl	8001960 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 80026fc:	4b29      	ldr	r3, [pc, #164]	@ (80027a4 <app_main+0x284>)
 80026fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <app_main+0x1f0>
					|| _RunTime_Packet.usb_first_start) {
 8002706:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <app_main+0x284>)
 8002708:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800270c:	2b00      	cmp	r3, #0
 800270e:	d045      	beq.n	800279c <app_main+0x27c>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 8002710:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <app_main+0x284>)
 8002712:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <app_main+0x202>
				{

					start_usb_timer = 1;
 800271a:	4b39      	ldr	r3, [pc, #228]	@ (8002800 <app_main+0x2e0>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e003      	b.n	800272a <app_main+0x20a>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8002722:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <app_main+0x284>)
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 800272a:	f001 fce5 	bl	80040f8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	4b25      	ldr	r3, [pc, #148]	@ (80027c8 <app_main+0x2a8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1ad2      	subs	r2, r2, r3
 8002736:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <app_main+0x2e4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d329      	bcc.n	8002792 <app_main+0x272>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 800273e:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <app_main+0x284>)
 8002740:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d10d      	bne.n	8002766 <app_main+0x246>
							&& _RunTime_Packet.usb_first_start) {
 800274a:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <app_main+0x284>)
 800274c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <app_main+0x246>
						_RunTime_Packet.sd_file_creation = createfile(
 8002754:	4922      	ldr	r1, [pc, #136]	@ (80027e0 <app_main+0x2c0>)
 8002756:	4823      	ldr	r0, [pc, #140]	@ (80027e4 <app_main+0x2c4>)
 8002758:	f01a fa06 	bl	801cb68 <createfile>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <app_main+0x284>)
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 8002766:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <app_main+0x284>)
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
					_RunTime_Packet.usb_detection = 0;
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <app_main+0x284>)
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					_RunTime_Packet.usb_active_disable_pm = 0;
 8002776:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <app_main+0x284>)
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
					start_usb_timer = 0;
 800277e:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <app_main+0x2e0>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8002784:	f7ff f846 	bl	8001814 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 8002788:	f001 fcb6 	bl	80040f8 <HAL_GetTick>
 800278c:	4603      	mov	r3, r0
 800278e:	4a19      	ldr	r2, [pc, #100]	@ (80027f4 <app_main+0x2d4>)
 8002790:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 8002792:	f001 fcb1 	bl	80040f8 <HAL_GetTick>
 8002796:	4603      	mov	r3, r0
 8002798:	4a15      	ldr	r2, [pc, #84]	@ (80027f0 <app_main+0x2d0>)
 800279a:	6013      	str	r3, [r2, #0]
			}

			console_process();
 800279c:	f00f fd18 	bl	80121d0 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80027a0:	e044      	b.n	800282c <app_main+0x30c>
 80027a2:	bf00      	nop
 80027a4:	20001530 	.word	0x20001530
 80027a8:	2000193c 	.word	0x2000193c
 80027ac:	20000324 	.word	0x20000324
 80027b0:	40020418 	.word	0x40020418
 80027b4:	20001a14 	.word	0x20001a14
 80027b8:	200019cc 	.word	0x200019cc
 80027bc:	40000400 	.word	0x40000400
 80027c0:	080222b4 	.word	0x080222b4
 80027c4:	20002328 	.word	0x20002328
 80027c8:	200017c8 	.word	0x200017c8
 80027cc:	40020000 	.word	0x40020000
 80027d0:	20001584 	.word	0x20001584
 80027d4:	20001898 	.word	0x20001898
 80027d8:	080222c4 	.word	0x080222c4
 80027dc:	20001461 	.word	0x20001461
 80027e0:	20001330 	.word	0x20001330
 80027e4:	200012cc 	.word	0x200012cc
 80027e8:	080222cc 	.word	0x080222cc
 80027ec:	20001a74 	.word	0x20001a74
 80027f0:	200017c0 	.word	0x200017c0
 80027f4:	200017c4 	.word	0x200017c4
 80027f8:	2000000c 	.word	0x2000000c
 80027fc:	20001550 	.word	0x20001550
 8002800:	20001580 	.word	0x20001580
 8002804:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 8002808:	f00f fce2 	bl	80121d0 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 800280c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a4c <app_main+0x52c>)
 800280e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <app_main+0x2fa>
#ifdef use_scd40x
					get_scd4x_measurement();
#elif use_scd30
					get_scd30_measurement();
 8002816:	f7fe fe9d 	bl	8001554 <get_scd30_measurement>
#endif

				}

				get_sps30_measurement();
 800281a:	f7ff f817 	bl	800184c <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 800281e:	488c      	ldr	r0, [pc, #560]	@ (8002a50 <app_main+0x530>)
 8002820:	f011 fc4a 	bl	80140b8 <adc_Measure>
				led_awake_routine1();
 8002824:	f7ff fc56 	bl	80020d4 <led_awake_routine1>
				pwr_off_detected();
 8002828:	f7fe fcd8 	bl	80011dc <pwr_off_detected>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 800282c:	f001 fc64 	bl	80040f8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	4b88      	ldr	r3, [pc, #544]	@ (8002a54 <app_main+0x534>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1ad2      	subs	r2, r2, r3
 8002838:	4b87      	ldr	r3, [pc, #540]	@ (8002a58 <app_main+0x538>)
 800283a:	681b      	ldr	r3, [r3, #0]
					&& !_RunTime_Packet.usb_first_start)
 800283c:	429a      	cmp	r2, r3
 800283e:	d809      	bhi.n	8002854 <app_main+0x334>
					&& !_RunTime_Packet.usb_detection
 8002840:	4b82      	ldr	r3, [pc, #520]	@ (8002a4c <app_main+0x52c>)
 8002842:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002846:	2b00      	cmp	r3, #0
 8002848:	d104      	bne.n	8002854 <app_main+0x334>
					&& !_RunTime_Packet.usb_first_start)
 800284a:	4b80      	ldr	r3, [pc, #512]	@ (8002a4c <app_main+0x52c>)
 800284c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0d9      	beq.n	8002808 <app_main+0x2e8>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 8002854:	f7ff f8e0 	bl	8001a18 <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 8002858:	4b80      	ldr	r3, [pc, #512]	@ (8002a5c <app_main+0x53c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d016      	beq.n	800288e <app_main+0x36e>
 8002860:	4b7a      	ldr	r3, [pc, #488]	@ (8002a4c <app_main+0x52c>)
 8002862:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002866:	2b00      	cmp	r3, #0
 8002868:	d111      	bne.n	800288e <app_main+0x36e>
					&& !_RunTime_Packet.usb_first_start
 800286a:	4b78      	ldr	r3, [pc, #480]	@ (8002a4c <app_main+0x52c>)
 800286c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10c      	bne.n	800288e <app_main+0x36e>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 8002874:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002878:	4879      	ldr	r0, [pc, #484]	@ (8002a60 <app_main+0x540>)
 800287a:	f003 fc09 	bl	8006090 <HAL_GPIO_ReadPin>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d104      	bne.n	800288e <app_main+0x36e>
				scd4x_stop_periodic_measurement();
#elif use_scd30
				//scd30_stop_periodic_measurement();
#endif

				sps30_stop_measurement();
 8002884:	f012 fff4 	bl	8015870 <sps30_stop_measurement>
				stop_measurement = 0;
 8002888:	4b74      	ldr	r3, [pc, #464]	@ (8002a5c <app_main+0x53c>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 800288e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002892:	4873      	ldr	r0, [pc, #460]	@ (8002a60 <app_main+0x540>)
 8002894:	f003 fbfc 	bl	8006090 <HAL_GPIO_ReadPin>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d050      	beq.n	8002940 <app_main+0x420>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 800289e:	4b71      	ldr	r3, [pc, #452]	@ (8002a64 <app_main+0x544>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d04c      	beq.n	8002940 <app_main+0x420>
 80028a6:	4b69      	ldr	r3, [pc, #420]	@ (8002a4c <app_main+0x52c>)
 80028a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d147      	bne.n	8002940 <app_main+0x420>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.year_changed
 80028b0:	4b66      	ldr	r3, [pc, #408]	@ (8002a4c <app_main+0x52c>)
 80028b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10f      	bne.n	80028da <app_main+0x3ba>
						|| _RunTime_Packet.filename_changed
 80028ba:	4b64      	ldr	r3, [pc, #400]	@ (8002a4c <app_main+0x52c>)
 80028bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <app_main+0x3ba>
						|| _RunTime_Packet.fileformat_changed
 80028c4:	4b61      	ldr	r3, [pc, #388]	@ (8002a4c <app_main+0x52c>)
 80028c6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <app_main+0x3ba>
						|| _RunTime_Packet.sd_file_creation == -1) {
 80028ce:	4b5f      	ldr	r3, [pc, #380]	@ (8002a4c <app_main+0x52c>)
 80028d0:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d114      	bne.n	8002904 <app_main+0x3e4>
					_RunTime_Packet.year_changed = 0;
 80028da:	4b5c      	ldr	r3, [pc, #368]	@ (8002a4c <app_main+0x52c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					_RunTime_Packet.filename_changed = 0;
 80028e2:	4b5a      	ldr	r3, [pc, #360]	@ (8002a4c <app_main+0x52c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
					_RunTime_Packet.fileformat_changed = 0;
 80028ea:	4b58      	ldr	r3, [pc, #352]	@ (8002a4c <app_main+0x52c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
					_RunTime_Packet.sd_file_creation = createfile(
 80028f2:	495d      	ldr	r1, [pc, #372]	@ (8002a68 <app_main+0x548>)
 80028f4:	485d      	ldr	r0, [pc, #372]	@ (8002a6c <app_main+0x54c>)
 80028f6:	f01a f937 	bl	801cb68 <createfile>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b53      	ldr	r3, [pc, #332]	@ (8002a4c <app_main+0x52c>)
 8002900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);
				}
				if (filesaving_process()) {
 8002904:	f01a f906 	bl	801cb14 <filesaving_process>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d013      	beq.n	8002936 <app_main+0x416>
					HAL_Delay(1500);
 800290e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002912:	f001 fbfd 	bl	8004110 <HAL_Delay>
					if (filesaving_process()) {
 8002916:	f01a f8fd 	bl	801cb14 <filesaving_process>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <app_main+0x416>
						HAL_Delay(1500);
 8002920:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002924:	f001 fbf4 	bl	8004110 <HAL_Delay>
						if (filesaving_process()) {
 8002928:	f01a f8f4 	bl	801cb14 <filesaving_process>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <app_main+0x416>
							HAL_NVIC_SystemReset();
 8002932:	f002 f9fc 	bl	8004d2e <HAL_NVIC_SystemReset>
						}
					}
				}

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 8002936:	f001 fbdf 	bl	80040f8 <HAL_GetTick>
 800293a:	4603      	mov	r3, r0
 800293c:	4a45      	ldr	r2, [pc, #276]	@ (8002a54 <app_main+0x534>)
 800293e:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 8002940:	f011 f992 	bl	8013c68 <Rtc_set_alarm>

		//	adc_Measure(&_RunTime_Packet.battery_voltage);
			led_awake_routine();
 8002944:	f7ff f9c8 	bl	8001cd8 <led_awake_routine>
			save_data();
 8002948:	f7fe fda8 	bl	800149c <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 800294c:	2101      	movs	r1, #1
 800294e:	4844      	ldr	r0, [pc, #272]	@ (8002a60 <app_main+0x540>)
 8002950:	f003 fb9e 	bl	8006090 <HAL_GPIO_ReadPin>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <app_main+0x448>
				_RunTime_Packet.motion_detection = 1;
 800295a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a4c <app_main+0x52c>)
 800295c:	2201      	movs	r2, #1
 800295e:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002960:	4b43      	ldr	r3, [pc, #268]	@ (8002a70 <app_main+0x550>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e005      	b.n	8002974 <app_main+0x454>
			} else {
				_RunTime_Packet.motion_detection = 0;
 8002968:	4b38      	ldr	r3, [pc, #224]	@ (8002a4c <app_main+0x52c>)
 800296a:	2200      	movs	r2, #0
 800296c:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 800296e:	4b40      	ldr	r3, [pc, #256]	@ (8002a70 <app_main+0x550>)
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 8002974:	f7fe fc32 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002978:	f001 fbbe 	bl	80040f8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a74 <app_main+0x554>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1ad2      	subs	r2, r2, r3
 8002984:	4b3c      	ldr	r3, [pc, #240]	@ (8002a78 <app_main+0x558>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	f67f ae7d 	bls.w	8002688 <app_main+0x168>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		//_RunTime_Packet.day_changed ||
		if (_RunTime_Packet.year_changed || _RunTime_Packet.filename_changed
 800298e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a4c <app_main+0x52c>)
 8002990:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10f      	bne.n	80029b8 <app_main+0x498>
 8002998:	4b2c      	ldr	r3, [pc, #176]	@ (8002a4c <app_main+0x52c>)
 800299a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <app_main+0x498>
				|| _RunTime_Packet.fileformat_changed
 80029a2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <app_main+0x52c>)
 80029a4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <app_main+0x498>
				|| _RunTime_Packet.sd_file_creation == -1) {
 80029ac:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <app_main+0x52c>)
 80029ae:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d11b      	bne.n	80029f0 <app_main+0x4d0>

			_RunTime_Packet.year_changed = 0;
 80029b8:	4b24      	ldr	r3, [pc, #144]	@ (8002a4c <app_main+0x52c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			_RunTime_Packet.filename_changed = 0;
 80029c0:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <app_main+0x52c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			_RunTime_Packet.fileformat_changed = 0;
 80029c8:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <app_main+0x52c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			_RunTime_Packet.sd_file_creation = createfile(
 80029d0:	4925      	ldr	r1, [pc, #148]	@ (8002a68 <app_main+0x548>)
 80029d2:	4826      	ldr	r0, [pc, #152]	@ (8002a6c <app_main+0x54c>)
 80029d4:	f01a f8c8 	bl	801cb68 <createfile>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <app_main+0x52c>)
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);


			/*be sure to save data before going to sleep*/
			while(save_param)
 80029e2:	e001      	b.n	80029e8 <app_main+0x4c8>
			{
				save_data();
 80029e4:	f7fe fd5a 	bl	800149c <save_data>
			while(save_param)
 80029e8:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <app_main+0x55c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <app_main+0x4c4>
			}
		}
		if (filesaving_process()) {
 80029f0:	f01a f890 	bl	801cb14 <filesaving_process>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d013      	beq.n	8002a22 <app_main+0x502>
			HAL_Delay(1500);
 80029fa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80029fe:	f001 fb87 	bl	8004110 <HAL_Delay>
			if (filesaving_process()) {
 8002a02:	f01a f887 	bl	801cb14 <filesaving_process>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <app_main+0x502>
				HAL_Delay(1500);
 8002a0c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a10:	f001 fb7e 	bl	8004110 <HAL_Delay>
				if (filesaving_process()) {
 8002a14:	f01a f87e 	bl	801cb14 <filesaving_process>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <app_main+0x502>
					HAL_NVIC_SystemReset();
 8002a1e:	f002 f986 	bl	8004d2e <HAL_NVIC_SystemReset>
				}
			}
		}
		prev_sleep_time = HAL_GetTick();
 8002a22:	f001 fb69 	bl	80040f8 <HAL_GetTick>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <app_main+0x554>)
 8002a2a:	6013      	str	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin) ) {
 8002a2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a30:	480b      	ldr	r0, [pc, #44]	@ (8002a60 <app_main+0x540>)
 8002a32:	f003 fb2d 	bl	8006090 <HAL_GPIO_ReadPin>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <app_main+0x524>

			sleep();
 8002a3c:	f7ff f802 	bl	8001a44 <sleep>
			wakeup();
 8002a40:	f7ff f884 	bl	8001b4c <wakeup>

		}
		pwr_off_detected();
 8002a44:	f7fe fbca 	bl	80011dc <pwr_off_detected>
		prev_sleep_time = HAL_GetTick();
 8002a48:	e60e      	b.n	8002668 <app_main+0x148>
 8002a4a:	bf00      	nop
 8002a4c:	20001530 	.word	0x20001530
 8002a50:	20001550 	.word	0x20001550
 8002a54:	200017c4 	.word	0x200017c4
 8002a58:	20000004 	.word	0x20000004
 8002a5c:	2000000c 	.word	0x2000000c
 8002a60:	40020000 	.word	0x40020000
 8002a64:	20000029 	.word	0x20000029
 8002a68:	20001330 	.word	0x20001330
 8002a6c:	200012cc 	.word	0x200012cc
 8002a70:	20001589 	.word	0x20001589
 8002a74:	200017c0 	.word	0x200017c0
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20001579 	.word	0x20001579

08002a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a84:	f001 fad2 	bl	800402c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a88:	f000 f822 	bl	8002ad0 <SystemClock_Config>
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
#endif
  HAL_Delay(1000);
 8002a8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a90:	f001 fb3e 	bl	8004110 <HAL_Delay>
  MX_GPIO_Init();
 8002a94:	f000 fb00 	bl	8003098 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a98:	f000 fade 	bl	8003058 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002a9c:	f000 f948 	bl	8002d30 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002aa0:	f000 fa86 	bl	8002fb0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002aa4:	f000 f91e 	bl	8002ce4 <MX_RTC_Init>
  MX_I2C1_Init();
 8002aa8:	f000 f8d4 	bl	8002c54 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002aac:	f000 f9b0 	bl	8002e10 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002ab0:	f000 faa8 	bl	8003004 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002ab4:	f000 f87c 	bl	8002bb0 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002ab8:	f010 feb8 	bl	801382c <MX_FATFS_Init>
  MX_TIM1_Init();
 8002abc:	f000 f958 	bl	8002d70 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002ac0:	f000 f9f4 	bl	8002eac <MX_TIM3_Init>
  MX_IWDG_Init();
 8002ac4:	f000 f8f4 	bl	8002cb0 <MX_IWDG_Init>

  app_main(); //keep mx_usb_device_init off here
 8002ac8:	f7ff fd2a 	bl	8002520 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <main+0x4c>

08002ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b094      	sub	sp, #80	@ 0x50
 8002ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad6:	f107 0320 	add.w	r3, r7, #32
 8002ada:	2230      	movs	r2, #48	@ 0x30
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f01c f8b8 	bl	801ec54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba8 <SystemClock_Config+0xd8>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba8 <SystemClock_Config+0xd8>)
 8002afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b04:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <SystemClock_Config+0xd8>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b10:	2300      	movs	r3, #0
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	4b25      	ldr	r3, [pc, #148]	@ (8002bac <SystemClock_Config+0xdc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b1c:	4a23      	ldr	r2, [pc, #140]	@ (8002bac <SystemClock_Config+0xdc>)
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b21      	ldr	r3, [pc, #132]	@ (8002bac <SystemClock_Config+0xdc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8002b30:	230d      	movs	r3, #13
 8002b32:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b42:	2302      	movs	r3, #2
 8002b44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b4c:	2319      	movs	r3, #25
 8002b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b50:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b56:	2304      	movs	r3, #4
 8002b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b5e:	f107 0320 	add.w	r3, r7, #32
 8002b62:	4618      	mov	r0, r3
 8002b64:	f005 ffd4 	bl	8008b10 <HAL_RCC_OscConfig>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002b6e:	f000 fd79 	bl	8003664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b72:	230f      	movs	r3, #15
 8002b74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b76:	2302      	movs	r3, #2
 8002b78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f006 fa36 	bl	8009000 <HAL_RCC_ClockConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002b9a:	f000 fd63 	bl	8003664 <Error_Handler>
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	3750      	adds	r7, #80	@ 0x50
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40007000 	.word	0x40007000

08002bb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bb6:	463b      	mov	r3, r7
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bc2:	4b21      	ldr	r3, [pc, #132]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002bc4:	4a21      	ldr	r2, [pc, #132]	@ (8002c4c <MX_ADC1_Init+0x9c>)
 8002bc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002bca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002be2:	4b19      	ldr	r3, [pc, #100]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bea:	4b17      	ldr	r3, [pc, #92]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bf0:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002bf2:	4a17      	ldr	r2, [pc, #92]	@ (8002c50 <MX_ADC1_Init+0xa0>)
 8002bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002bfc:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c02:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c10:	480d      	ldr	r0, [pc, #52]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002c12:	f001 fae5 	bl	80041e0 <HAL_ADC_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c1c:	f000 fd22 	bl	8003664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c20:	230a      	movs	r3, #10
 8002c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c2c:	463b      	mov	r3, r7
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4805      	ldr	r0, [pc, #20]	@ (8002c48 <MX_ADC1_Init+0x98>)
 8002c32:	f001 fccb 	bl	80045cc <HAL_ADC_ConfigChannel>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c3c:	f000 fd12 	bl	8003664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200017f0 	.word	0x200017f0
 8002c4c:	40012000 	.word	0x40012000
 8002c50:	0f000001 	.word	0x0f000001

08002c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <MX_I2C1_Init+0x50>)
 8002c5a:	4a13      	ldr	r2, [pc, #76]	@ (8002ca8 <MX_I2C1_Init+0x54>)
 8002c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <MX_I2C1_Init+0x50>)
 8002c60:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <MX_I2C1_Init+0x58>)
 8002c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <MX_I2C1_Init+0x50>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <MX_I2C1_Init+0x50>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <MX_I2C1_Init+0x50>)
 8002c72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <MX_I2C1_Init+0x50>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <MX_I2C1_Init+0x50>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <MX_I2C1_Init+0x50>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <MX_I2C1_Init+0x50>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c90:	4804      	ldr	r0, [pc, #16]	@ (8002ca4 <MX_I2C1_Init+0x50>)
 8002c92:	f003 fa47 	bl	8006124 <HAL_I2C_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c9c:	f000 fce2 	bl	8003664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20001838 	.word	0x20001838
 8002ca8:	40005400 	.word	0x40005400
 8002cac:	000186a0 	.word	0x000186a0

08002cb0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */
  //32sec watchdog period set
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002cb4:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <MX_IWDG_Init+0x2c>)
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <MX_IWDG_Init+0x30>)
 8002cb8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002cba:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <MX_IWDG_Init+0x2c>)
 8002cbc:	2206      	movs	r2, #6
 8002cbe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <MX_IWDG_Init+0x2c>)
 8002cc2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002cc6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002cc8:	4804      	ldr	r0, [pc, #16]	@ (8002cdc <MX_IWDG_Init+0x2c>)
 8002cca:	f004 fb83 	bl	80073d4 <HAL_IWDG_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002cd4:	f000 fcc6 	bl	8003664 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002cd8:	bf00      	nop
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	2000188c 	.word	0x2000188c
 8002ce0:	40003000 	.word	0x40003000

08002ce4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d28 <MX_RTC_Init+0x44>)
 8002cea:	4a10      	ldr	r2, [pc, #64]	@ (8002d2c <MX_RTC_Init+0x48>)
 8002cec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <MX_RTC_Init+0x44>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <MX_RTC_Init+0x44>)
 8002cf6:	227f      	movs	r2, #127	@ 0x7f
 8002cf8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <MX_RTC_Init+0x44>)
 8002cfc:	22ff      	movs	r2, #255	@ 0xff
 8002cfe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d00:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <MX_RTC_Init+0x44>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d06:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <MX_RTC_Init+0x44>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <MX_RTC_Init+0x44>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d12:	4805      	ldr	r0, [pc, #20]	@ (8002d28 <MX_RTC_Init+0x44>)
 8002d14:	f006 fd10 	bl	8009738 <HAL_RTC_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002d1e:	f000 fca1 	bl	8003664 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20001898 	.word	0x20001898
 8002d2c:	40002800 	.word	0x40002800

08002d30 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <MX_SDIO_SD_Init+0x38>)
 8002d36:	4a0d      	ldr	r2, [pc, #52]	@ (8002d6c <MX_SDIO_SD_Init+0x3c>)
 8002d38:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <MX_SDIO_SD_Init+0x38>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002d40:	4b09      	ldr	r3, [pc, #36]	@ (8002d68 <MX_SDIO_SD_Init+0x38>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d46:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <MX_SDIO_SD_Init+0x38>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <MX_SDIO_SD_Init+0x38>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d52:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <MX_SDIO_SD_Init+0x38>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <MX_SDIO_SD_Init+0x38>)
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	200018b8 	.word	0x200018b8
 8002d6c:	40012c00 	.word	0x40012c00

08002d70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d76:	f107 0308 	add.w	r3, r7, #8
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d84:	463b      	mov	r3, r7
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <MX_TIM1_Init+0x98>)
 8002d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e0c <MX_TIM1_Init+0x9c>)
 8002d90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d92:	4b1d      	ldr	r3, [pc, #116]	@ (8002e08 <MX_TIM1_Init+0x98>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <MX_TIM1_Init+0x98>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <MX_TIM1_Init+0x98>)
 8002da0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002da4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da6:	4b18      	ldr	r3, [pc, #96]	@ (8002e08 <MX_TIM1_Init+0x98>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dac:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <MX_TIM1_Init+0x98>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <MX_TIM1_Init+0x98>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002db8:	4813      	ldr	r0, [pc, #76]	@ (8002e08 <MX_TIM1_Init+0x98>)
 8002dba:	f008 f927 	bl	800b00c <HAL_TIM_Base_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002dc4:	f000 fc4e 	bl	8003664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dce:	f107 0308 	add.w	r3, r7, #8
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	480c      	ldr	r0, [pc, #48]	@ (8002e08 <MX_TIM1_Init+0x98>)
 8002dd6:	f008 fd63 	bl	800b8a0 <HAL_TIM_ConfigClockSource>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002de0:	f000 fc40 	bl	8003664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002de4:	2320      	movs	r3, #32
 8002de6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dec:	463b      	mov	r3, r7
 8002dee:	4619      	mov	r1, r3
 8002df0:	4805      	ldr	r0, [pc, #20]	@ (8002e08 <MX_TIM1_Init+0x98>)
 8002df2:	f009 f91d 	bl	800c030 <HAL_TIMEx_MasterConfigSynchronization>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002dfc:	f000 fc32 	bl	8003664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	2000193c 	.word	0x2000193c
 8002e0c:	40010000 	.word	0x40010000

08002e10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e16:	f107 0308 	add.w	r3, r7, #8
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e24:	463b      	mov	r3, r7
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea8 <MX_TIM2_Init+0x98>)
 8002e2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002e34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea8 <MX_TIM2_Init+0x98>)
 8002e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea8 <MX_TIM2_Init+0x98>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002e42:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <MX_TIM2_Init+0x98>)
 8002e44:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8002e48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4a:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <MX_TIM2_Init+0x98>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e50:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <MX_TIM2_Init+0x98>)
 8002e52:	2280      	movs	r2, #128	@ 0x80
 8002e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e56:	4814      	ldr	r0, [pc, #80]	@ (8002ea8 <MX_TIM2_Init+0x98>)
 8002e58:	f008 f8d8 	bl	800b00c <HAL_TIM_Base_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e62:	f000 fbff 	bl	8003664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	4619      	mov	r1, r3
 8002e72:	480d      	ldr	r0, [pc, #52]	@ (8002ea8 <MX_TIM2_Init+0x98>)
 8002e74:	f008 fd14 	bl	800b8a0 <HAL_TIM_ConfigClockSource>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e7e:	f000 fbf1 	bl	8003664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e8a:	463b      	mov	r3, r7
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4806      	ldr	r0, [pc, #24]	@ (8002ea8 <MX_TIM2_Init+0x98>)
 8002e90:	f009 f8ce 	bl	800c030 <HAL_TIMEx_MasterConfigSynchronization>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e9a:	f000 fbe3 	bl	8003664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20001984 	.word	0x20001984

08002eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	@ 0x38
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec0:	f107 0320 	add.w	r3, r7, #32
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
 8002ed8:	615a      	str	r2, [r3, #20]
 8002eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002edc:	4b32      	ldr	r3, [pc, #200]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002ede:	4a33      	ldr	r2, [pc, #204]	@ (8002fac <MX_TIM3_Init+0x100>)
 8002ee0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ee2:	4b31      	ldr	r3, [pc, #196]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002eee:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002ef0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ef4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002efc:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f02:	4829      	ldr	r0, [pc, #164]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002f04:	f008 f882 	bl	800b00c <HAL_TIM_Base_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002f0e:	f000 fba9 	bl	8003664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4822      	ldr	r0, [pc, #136]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002f20:	f008 fcbe 	bl	800b8a0 <HAL_TIM_ConfigClockSource>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002f2a:	f000 fb9b 	bl	8003664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f2e:	481e      	ldr	r0, [pc, #120]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002f30:	f008 f9fb 	bl	800b32a <HAL_TIM_PWM_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f3a:	f000 fb93 	bl	8003664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f46:	f107 0320 	add.w	r3, r7, #32
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4816      	ldr	r0, [pc, #88]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002f4e:	f009 f86f 	bl	800c030 <HAL_TIMEx_MasterConfigSynchronization>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002f58:	f000 fb84 	bl	8003664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f5c:	2360      	movs	r3, #96	@ 0x60
 8002f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	2200      	movs	r2, #0
 8002f70:	4619      	mov	r1, r3
 8002f72:	480d      	ldr	r0, [pc, #52]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002f74:	f008 fbd2 	bl	800b71c <HAL_TIM_PWM_ConfigChannel>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f7e:	f000 fb71 	bl	8003664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	2204      	movs	r2, #4
 8002f86:	4619      	mov	r1, r3
 8002f88:	4807      	ldr	r0, [pc, #28]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002f8a:	f008 fbc7 	bl	800b71c <HAL_TIM_PWM_ConfigChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002f94:	f000 fb66 	bl	8003664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f98:	4803      	ldr	r0, [pc, #12]	@ (8002fa8 <MX_TIM3_Init+0xfc>)
 8002f9a:	f000 fd83 	bl	8003aa4 <HAL_TIM_MspPostInit>

}
 8002f9e:	bf00      	nop
 8002fa0:	3738      	adds	r7, #56	@ 0x38
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200019cc 	.word	0x200019cc
 8002fac:	40000400 	.word	0x40000400

08002fb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	@ (8003000 <MX_USART1_UART_Init+0x50>)
 8002fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fba:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fce:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fda:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fe6:	4805      	ldr	r0, [pc, #20]	@ (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fe8:	f009 f8a4 	bl	800c134 <HAL_UART_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ff2:	f000 fb37 	bl	8003664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20001a74 	.word	0x20001a74
 8003000:	40011000 	.word	0x40011000

08003004 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <MX_USART2_UART_Init+0x4c>)
 800300a:	4a12      	ldr	r2, [pc, #72]	@ (8003054 <MX_USART2_UART_Init+0x50>)
 800300c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800300e:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <MX_USART2_UART_Init+0x4c>)
 8003010:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003016:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <MX_USART2_UART_Init+0x4c>)
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800301c:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <MX_USART2_UART_Init+0x4c>)
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003022:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <MX_USART2_UART_Init+0x4c>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003028:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <MX_USART2_UART_Init+0x4c>)
 800302a:	220c      	movs	r2, #12
 800302c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302e:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <MX_USART2_UART_Init+0x4c>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003034:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <MX_USART2_UART_Init+0x4c>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800303a:	4805      	ldr	r0, [pc, #20]	@ (8003050 <MX_USART2_UART_Init+0x4c>)
 800303c:	f009 f87a 	bl	800c134 <HAL_UART_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003046:	f000 fb0d 	bl	8003664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20001abc 	.word	0x20001abc
 8003054:	40004400 	.word	0x40004400

08003058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <MX_DMA_Init+0x3c>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	4a0b      	ldr	r2, [pc, #44]	@ (8003094 <MX_DMA_Init+0x3c>)
 8003068:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800306c:	6313      	str	r3, [r2, #48]	@ 0x30
 800306e:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <MX_DMA_Init+0x3c>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	2044      	movs	r0, #68	@ 0x44
 8003080:	f001 fe1d 	bl	8004cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003084:	2044      	movs	r0, #68	@ 0x44
 8003086:	f001 fe36 	bl	8004cf6 <HAL_NVIC_EnableIRQ>

}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	@ 0x28
 800309c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b71      	ldr	r3, [pc, #452]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	4a70      	ldr	r2, [pc, #448]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030be:	4b6e      	ldr	r3, [pc, #440]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	4a69      	ldr	r2, [pc, #420]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 80030d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030da:	4b67      	ldr	r3, [pc, #412]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	4b63      	ldr	r3, [pc, #396]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	4a62      	ldr	r2, [pc, #392]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f6:	4b60      	ldr	r3, [pc, #384]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	4b5c      	ldr	r3, [pc, #368]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	4a5b      	ldr	r2, [pc, #364]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	6313      	str	r3, [r2, #48]	@ 0x30
 8003112:	4b59      	ldr	r3, [pc, #356]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4b55      	ldr	r3, [pc, #340]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	4a54      	ldr	r2, [pc, #336]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 8003128:	f043 0308 	orr.w	r3, r3, #8
 800312c:	6313      	str	r3, [r2, #48]	@ 0x30
 800312e:	4b52      	ldr	r3, [pc, #328]	@ (8003278 <MX_GPIO_Init+0x1e0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	2102      	movs	r1, #2
 800313e:	484f      	ldr	r0, [pc, #316]	@ (800327c <MX_GPIO_Init+0x1e4>)
 8003140:	f002 ffbe 	bl	80060c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8003144:	2201      	movs	r2, #1
 8003146:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800314a:	484d      	ldr	r0, [pc, #308]	@ (8003280 <MX_GPIO_Init+0x1e8>)
 800314c:	f002 ffb8 	bl	80060c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8003150:	2200      	movs	r2, #0
 8003152:	2108      	movs	r1, #8
 8003154:	484a      	ldr	r0, [pc, #296]	@ (8003280 <MX_GPIO_Init+0x1e8>)
 8003156:	f002 ffb3 	bl	80060c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800315a:	f642 63fe 	movw	r3, #12030	@ 0x2efe
 800315e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003160:	2303      	movs	r3, #3
 8003162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4619      	mov	r1, r3
 800316e:	4845      	ldr	r0, [pc, #276]	@ (8003284 <MX_GPIO_Init+0x1ec>)
 8003170:	f002 fd26 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8003174:	2301      	movs	r3, #1
 8003176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4619      	mov	r1, r3
 8003186:	483d      	ldr	r0, [pc, #244]	@ (800327c <MX_GPIO_Init+0x1e4>)
 8003188:	f002 fd1a 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 800318c:	2302      	movs	r3, #2
 800318e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003190:	2301      	movs	r3, #1
 8003192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003198:	2302      	movs	r3, #2
 800319a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4619      	mov	r1, r3
 80031a2:	4836      	ldr	r0, [pc, #216]	@ (800327c <MX_GPIO_Init+0x1e4>)
 80031a4:	f002 fd0c 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80031a8:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 80031ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ae:	2303      	movs	r3, #3
 80031b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	4619      	mov	r1, r3
 80031bc:	482f      	ldr	r0, [pc, #188]	@ (800327c <MX_GPIO_Init+0x1e4>)
 80031be:	f002 fcff 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80031c2:	f247 4307 	movw	r3, #29703	@ 0x7407
 80031c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031c8:	2303      	movs	r3, #3
 80031ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	4619      	mov	r1, r3
 80031d6:	482a      	ldr	r0, [pc, #168]	@ (8003280 <MX_GPIO_Init+0x1e8>)
 80031d8:	f002 fcf2 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 80031dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ea:	2302      	movs	r3, #2
 80031ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 80031ee:	f107 0314 	add.w	r3, r7, #20
 80031f2:	4619      	mov	r1, r3
 80031f4:	4822      	ldr	r0, [pc, #136]	@ (8003280 <MX_GPIO_Init+0x1e8>)
 80031f6:	f002 fce3 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 80031fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003200:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003206:	2302      	movs	r3, #2
 8003208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	481a      	ldr	r0, [pc, #104]	@ (800327c <MX_GPIO_Init+0x1e4>)
 8003212:	f002 fcd5 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8003216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800321a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800321c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003222:	2301      	movs	r3, #1
 8003224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 8003226:	f107 0314 	add.w	r3, r7, #20
 800322a:	4619      	mov	r1, r3
 800322c:	4813      	ldr	r0, [pc, #76]	@ (800327c <MX_GPIO_Init+0x1e4>)
 800322e:	f002 fcc7 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8003232:	2308      	movs	r3, #8
 8003234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003236:	2301      	movs	r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8003242:	f107 0314 	add.w	r3, r7, #20
 8003246:	4619      	mov	r1, r3
 8003248:	480d      	ldr	r0, [pc, #52]	@ (8003280 <MX_GPIO_Init+0x1e8>)
 800324a:	f002 fcb9 	bl	8005bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	2100      	movs	r1, #0
 8003252:	2017      	movs	r0, #23
 8003254:	f001 fd33 	bl	8004cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003258:	2017      	movs	r0, #23
 800325a:	f001 fd4c 	bl	8004cf6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	2100      	movs	r1, #0
 8003262:	2028      	movs	r0, #40	@ 0x28
 8003264:	f001 fd2b 	bl	8004cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003268:	2028      	movs	r0, #40	@ 0x28
 800326a:	f001 fd44 	bl	8004cf6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800326e:	bf00      	nop
 8003270:	3728      	adds	r7, #40	@ 0x28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800

08003288 <gpio_analog>:

/* USER CODE BEGIN 4 */

void gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	@ 0x28
 800328c:	af00      	add	r7, sp, #0
 800328e:	f107 0314 	add.w	r3, r7, #20
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	4b48      	ldr	r3, [pc, #288]	@ (80033c4 <gpio_analog+0x13c>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	4a47      	ldr	r2, [pc, #284]	@ (80033c4 <gpio_analog+0x13c>)
 80032a8:	f043 0304 	orr.w	r3, r3, #4
 80032ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ae:	4b45      	ldr	r3, [pc, #276]	@ (80033c4 <gpio_analog+0x13c>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b41      	ldr	r3, [pc, #260]	@ (80033c4 <gpio_analog+0x13c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	4a40      	ldr	r2, [pc, #256]	@ (80033c4 <gpio_analog+0x13c>)
 80032c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ca:	4b3e      	ldr	r3, [pc, #248]	@ (80033c4 <gpio_analog+0x13c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	4b3a      	ldr	r3, [pc, #232]	@ (80033c4 <gpio_analog+0x13c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	4a39      	ldr	r2, [pc, #228]	@ (80033c4 <gpio_analog+0x13c>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e6:	4b37      	ldr	r3, [pc, #220]	@ (80033c4 <gpio_analog+0x13c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	4b33      	ldr	r3, [pc, #204]	@ (80033c4 <gpio_analog+0x13c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	4a32      	ldr	r2, [pc, #200]	@ (80033c4 <gpio_analog+0x13c>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	6313      	str	r3, [r2, #48]	@ 0x30
 8003302:	4b30      	ldr	r3, [pc, #192]	@ (80033c4 <gpio_analog+0x13c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4b2c      	ldr	r3, [pc, #176]	@ (80033c4 <gpio_analog+0x13c>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	4a2b      	ldr	r2, [pc, #172]	@ (80033c4 <gpio_analog+0x13c>)
 8003318:	f043 0308 	orr.w	r3, r3, #8
 800331c:	6313      	str	r3, [r2, #48]	@ 0x30
 800331e:	4b29      	ldr	r3, [pc, #164]	@ (80033c4 <gpio_analog+0x13c>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800332a:	2308      	movs	r3, #8
 800332c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800332e:	2303      	movs	r3, #3
 8003330:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	4619      	mov	r1, r3
 8003340:	4821      	ldr	r0, [pc, #132]	@ (80033c8 <gpio_analog+0x140>)
 8003342:	f002 fc3d 	bl	8005bc0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = EN_5V_Pin;
 8003346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800334a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800334c:	2303      	movs	r3, #3
 800334e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	4619      	mov	r1, r3
 800335e:	481a      	ldr	r0, [pc, #104]	@ (80033c8 <gpio_analog+0x140>)
 8003360:	f002 fc2e 	bl	8005bc0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : OUT_MOTION_Pin */
	  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8003364:	2301      	movs	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003368:	2303      	movs	r3, #3
 800336a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	4619      	mov	r1, r3
 800337a:	4814      	ldr	r0, [pc, #80]	@ (80033cc <gpio_analog+0x144>)
 800337c:	f002 fc20 	bl	8005bc0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : EN_MOTION_Pin */
	  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8003380:	2302      	movs	r3, #2
 8003382:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003384:	2303      	movs	r3, #3
 8003386:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003390:	f107 0314 	add.w	r3, r7, #20
 8003394:	4619      	mov	r1, r3
 8003396:	480d      	ldr	r0, [pc, #52]	@ (80033cc <gpio_analog+0x144>)
 8003398:	f002 fc12 	bl	8005bc0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800339c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80033a0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a2:	2303      	movs	r3, #3
 80033a4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ae:	f107 0314 	add.w	r3, r7, #20
 80033b2:	4619      	mov	r1, r3
 80033b4:	4805      	ldr	r0, [pc, #20]	@ (80033cc <gpio_analog+0x144>)
 80033b6:	f002 fc03 	bl	8005bc0 <HAL_GPIO_Init>

}
 80033ba:	bf00      	nop
 80033bc:	3728      	adds	r7, #40	@ 0x28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40020000 	.word	0x40020000

080033d0 <i2c1_gpio_analog>:
void i2c1_gpio_analog()
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 80033e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033e8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ea:	2303      	movs	r3, #3
 80033ec:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	4619      	mov	r1, r3
 80033fa:	4803      	ldr	r0, [pc, #12]	@ (8003408 <i2c1_gpio_analog+0x38>)
 80033fc:	f002 fbe0 	bl	8005bc0 <HAL_GPIO_Init>


}
 8003400:	bf00      	nop
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40020400 	.word	0x40020400

0800340c <uart_gpio_analog>:
void uart_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003420:	23c0      	movs	r3, #192	@ 0xc0
 8003422:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003424:	2303      	movs	r3, #3
 8003426:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003430:	1d3b      	adds	r3, r7, #4
 8003432:	4619      	mov	r1, r3
 8003434:	4809      	ldr	r0, [pc, #36]	@ (800345c <uart_gpio_analog+0x50>)
 8003436:	f002 fbc3 	bl	8005bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 800343a:	230c      	movs	r3, #12
 800343c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800343e:	2303      	movs	r3, #3
 8003440:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4804      	ldr	r0, [pc, #16]	@ (8003460 <uart_gpio_analog+0x54>)
 8003450:	f002 fbb6 	bl	8005bc0 <HAL_GPIO_Init>
}
 8003454:	bf00      	nop
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40020400 	.word	0x40020400
 8003460:	40020000 	.word	0x40020000

08003464 <timer_gpio_analog>:
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}
void timer_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003478:	2330      	movs	r3, #48	@ 0x30
 800347a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800347c:	2303      	movs	r3, #3
 800347e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4803      	ldr	r0, [pc, #12]	@ (800349c <timer_gpio_analog+0x38>)
 800348e:	f002 fb97 	bl	8005bc0 <HAL_GPIO_Init>

}
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40020400 	.word	0x40020400

080034a0 <gpio_disable>:



void gpio_disable()
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
	i2c1_gpio_analog();
 80034a6:	f7ff ff93 	bl	80033d0 <i2c1_gpio_analog>
	 uart_gpio_analog();
 80034aa:	f7ff ffaf 	bl	800340c <uart_gpio_analog>
	// usb_gpio_analog();
	 timer_gpio_analog();
 80034ae:	f7ff ffd9 	bl	8003464 <timer_gpio_analog>
	 gpio_analog();
 80034b2:	f7ff fee9 	bl	8003288 <gpio_analog>

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80034c4:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80034c8:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ca:	2303      	movs	r3, #3
 80034cc:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	480a      	ldr	r0, [pc, #40]	@ (8003504 <gpio_disable+0x64>)
 80034dc:	f002 fb70 	bl	8005bc0 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034e0:	2304      	movs	r3, #4
 80034e2:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e4:	2303      	movs	r3, #3
 80034e6:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034f0:	1d3b      	adds	r3, r7, #4
 80034f2:	4619      	mov	r1, r3
 80034f4:	4804      	ldr	r0, [pc, #16]	@ (8003508 <gpio_disable+0x68>)
 80034f6:	f002 fb63 	bl	8005bc0 <HAL_GPIO_Init>

}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40020800 	.word	0x40020800
 8003508:	40020c00 	.word	0x40020c00

0800350c <gpio_enable>:
void gpio_enable()
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8003512:	f7ff fdc1 	bl	8003098 <MX_GPIO_Init>

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003524:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003528:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003532:	2303      	movs	r3, #3
 8003534:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003536:	230c      	movs	r3, #12
 8003538:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	4619      	mov	r1, r3
 800353e:	480b      	ldr	r0, [pc, #44]	@ (800356c <gpio_enable+0x60>)
 8003540:	f002 fb3e 	bl	8005bc0 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003544:	2304      	movs	r3, #4
 8003546:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003554:	230c      	movs	r3, #12
 8003556:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	4619      	mov	r1, r3
 800355c:	4804      	ldr	r0, [pc, #16]	@ (8003570 <gpio_enable+0x64>)
 800355e:	f002 fb2f 	bl	8005bc0 <HAL_GPIO_Init>
}
 8003562:	bf00      	nop
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40020800 	.word	0x40020800
 8003570:	40020c00 	.word	0x40020c00

08003574 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003584:	d101      	bne.n	800358a <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 8003586:	f7fd fdd3 	bl	8001130 <timer_interrupt>
}

}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 80035a4:	f7fd fda8 	bl	80010f8 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ae:	d118      	bne.n	80035e2 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        _RunTime_Packet.showPrompt = 1;
 80035b0:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <HAL_GPIO_EXTI_Callback+0x64>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        _RunTime_Packet.usb_detection = 1;
 80035b8:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <HAL_GPIO_EXTI_Callback+0x64>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        _RunTime_Packet.usb_start_timer = 1;
 80035c0:	4b0d      	ldr	r3, [pc, #52]	@ (80035f8 <HAL_GPIO_EXTI_Callback+0x64>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        usb_time_keep = 0;
 80035c8:	4b0c      	ldr	r3, [pc, #48]	@ (80035fc <HAL_GPIO_EXTI_Callback+0x68>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 80035ce:	f000 fd93 	bl	80040f8 <HAL_GetTick>
 80035d2:	4603      	mov	r3, r0
 80035d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <HAL_GPIO_EXTI_Callback+0x6c>)
 80035d6:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 80035d8:	f000 fd8e 	bl	80040f8 <HAL_GetTick>
 80035dc:	4603      	mov	r3, r0
 80035de:	4a09      	ldr	r2, [pc, #36]	@ (8003604 <HAL_GPIO_EXTI_Callback+0x70>)
 80035e0:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035e8:	d101      	bne.n	80035ee <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	power_off_detect();
 80035ea:	f7fd fdbb 	bl	8001164 <power_off_detect>
    }
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20001530 	.word	0x20001530
 80035fc:	20001584 	.word	0x20001584
 8003600:	200017c8 	.word	0x200017c8
 8003604:	200017c0 	.word	0x200017c0

08003608 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	RtcInt();
 8003610:	f010 fa8a 	bl	8013b28 <RtcInt>
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0d      	ldr	r2, [pc, #52]	@ (800365c <HAL_UART_ErrorCallback+0x40>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d106      	bne.n	800363a <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	43d2      	mvns	r2, r2
 8003636:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8003638:	e009      	b.n	800364e <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a08      	ldr	r2, [pc, #32]	@ (8003660 <HAL_UART_ErrorCallback+0x44>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d105      	bne.n	800364e <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	43d2      	mvns	r2, r2
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20001a74 	.word	0x20001a74
 8003660:	20001abc 	.word	0x20001abc

08003664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003668:	b672      	cpsid	i
}
 800366a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 800366c:	f001 fb5f 	bl	8004d2e <HAL_NVIC_SystemReset>
  while (1)
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <Error_Handler+0xc>

08003674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <HAL_MspInit+0x4c>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	4a0f      	ldr	r2, [pc, #60]	@ (80036c0 <HAL_MspInit+0x4c>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003688:	6453      	str	r3, [r2, #68]	@ 0x44
 800368a:	4b0d      	ldr	r3, [pc, #52]	@ (80036c0 <HAL_MspInit+0x4c>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_MspInit+0x4c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	4a08      	ldr	r2, [pc, #32]	@ (80036c0 <HAL_MspInit+0x4c>)
 80036a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_MspInit+0x4c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800

080036c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	@ 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <HAL_ADC_MspInit+0x7c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d127      	bne.n	8003736 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	4b16      	ldr	r3, [pc, #88]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	4a15      	ldr	r2, [pc, #84]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036f6:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b0f      	ldr	r3, [pc, #60]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	4a0e      	ldr	r2, [pc, #56]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	6313      	str	r3, [r2, #48]	@ 0x30
 8003712:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 800371e:	2301      	movs	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003722:	2303      	movs	r3, #3
 8003724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 800372a:	f107 0314 	add.w	r3, r7, #20
 800372e:	4619      	mov	r1, r3
 8003730:	4805      	ldr	r0, [pc, #20]	@ (8003748 <HAL_ADC_MspInit+0x84>)
 8003732:	f002 fa45 	bl	8005bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003736:	bf00      	nop
 8003738:	3728      	adds	r7, #40	@ 0x28
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40012000 	.word	0x40012000
 8003744:	40023800 	.word	0x40023800
 8003748:	40020800 	.word	0x40020800

0800374c <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a08      	ldr	r2, [pc, #32]	@ (800377c <HAL_ADC_MspDeInit+0x30>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d109      	bne.n	8003772 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800375e:	4b08      	ldr	r3, [pc, #32]	@ (8003780 <HAL_ADC_MspDeInit+0x34>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	4a07      	ldr	r2, [pc, #28]	@ (8003780 <HAL_ADC_MspDeInit+0x34>)
 8003764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003768:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 800376a:	2101      	movs	r1, #1
 800376c:	4805      	ldr	r0, [pc, #20]	@ (8003784 <HAL_ADC_MspDeInit+0x38>)
 800376e:	f002 fbab 	bl	8005ec8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40012000 	.word	0x40012000
 8003780:	40023800 	.word	0x40023800
 8003784:	40020800 	.word	0x40020800

08003788 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	@ 0x28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a19      	ldr	r2, [pc, #100]	@ (800380c <HAL_I2C_MspInit+0x84>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d12c      	bne.n	8003804 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	4b18      	ldr	r3, [pc, #96]	@ (8003810 <HAL_I2C_MspInit+0x88>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	4a17      	ldr	r2, [pc, #92]	@ (8003810 <HAL_I2C_MspInit+0x88>)
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ba:	4b15      	ldr	r3, [pc, #84]	@ (8003810 <HAL_I2C_MspInit+0x88>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 80037c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037cc:	2312      	movs	r3, #18
 80037ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d4:	2303      	movs	r3, #3
 80037d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037d8:	2304      	movs	r3, #4
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	4619      	mov	r1, r3
 80037e2:	480c      	ldr	r0, [pc, #48]	@ (8003814 <HAL_I2C_MspInit+0x8c>)
 80037e4:	f002 f9ec 	bl	8005bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	4b08      	ldr	r3, [pc, #32]	@ (8003810 <HAL_I2C_MspInit+0x88>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	4a07      	ldr	r2, [pc, #28]	@ (8003810 <HAL_I2C_MspInit+0x88>)
 80037f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f8:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <HAL_I2C_MspInit+0x88>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003804:	bf00      	nop
 8003806:	3728      	adds	r7, #40	@ 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40005400 	.word	0x40005400
 8003810:	40023800 	.word	0x40023800
 8003814:	40020400 	.word	0x40020400

08003818 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0b      	ldr	r2, [pc, #44]	@ (8003854 <HAL_I2C_MspDeInit+0x3c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10f      	bne.n	800384a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800382a:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <HAL_I2C_MspDeInit+0x40>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <HAL_I2C_MspDeInit+0x40>)
 8003830:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003834:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 8003836:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800383a:	4808      	ldr	r0, [pc, #32]	@ (800385c <HAL_I2C_MspDeInit+0x44>)
 800383c:	f002 fb44 	bl	8005ec8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8003840:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003844:	4805      	ldr	r0, [pc, #20]	@ (800385c <HAL_I2C_MspDeInit+0x44>)
 8003846:	f002 fb3f 	bl	8005ec8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40005400 	.word	0x40005400
 8003858:	40023800 	.word	0x40023800
 800385c:	40020400 	.word	0x40020400

08003860 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003868:	f107 030c 	add.w	r3, r7, #12
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a10      	ldr	r2, [pc, #64]	@ (80038c0 <HAL_RTC_MspInit+0x60>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d119      	bne.n	80038b6 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003882:	2302      	movs	r3, #2
 8003884:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800388a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	4618      	mov	r0, r3
 8003892:	f005 fd95 	bl	80093c0 <HAL_RCCEx_PeriphCLKConfig>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800389c:	f7ff fee2 	bl	8003664 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038a0:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <HAL_RTC_MspInit+0x64>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2100      	movs	r1, #0
 80038aa:	2029      	movs	r0, #41	@ 0x29
 80038ac:	f001 fa07 	bl	8004cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80038b0:	2029      	movs	r0, #41	@ 0x29
 80038b2:	f001 fa20 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038b6:	bf00      	nop
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40002800 	.word	0x40002800
 80038c4:	42470e3c 	.word	0x42470e3c

080038c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	@ 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a28      	ldr	r2, [pc, #160]	@ (8003988 <HAL_SD_MspInit+0xc0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d14a      	bne.n	8003980 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	4b27      	ldr	r3, [pc, #156]	@ (800398c <HAL_SD_MspInit+0xc4>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f2:	4a26      	ldr	r2, [pc, #152]	@ (800398c <HAL_SD_MspInit+0xc4>)
 80038f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038fa:	4b24      	ldr	r3, [pc, #144]	@ (800398c <HAL_SD_MspInit+0xc4>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	4b20      	ldr	r3, [pc, #128]	@ (800398c <HAL_SD_MspInit+0xc4>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	4a1f      	ldr	r2, [pc, #124]	@ (800398c <HAL_SD_MspInit+0xc4>)
 8003910:	f043 0304 	orr.w	r3, r3, #4
 8003914:	6313      	str	r3, [r2, #48]	@ 0x30
 8003916:	4b1d      	ldr	r3, [pc, #116]	@ (800398c <HAL_SD_MspInit+0xc4>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	4b19      	ldr	r3, [pc, #100]	@ (800398c <HAL_SD_MspInit+0xc4>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	4a18      	ldr	r2, [pc, #96]	@ (800398c <HAL_SD_MspInit+0xc4>)
 800392c:	f043 0308 	orr.w	r3, r3, #8
 8003930:	6313      	str	r3, [r2, #48]	@ 0x30
 8003932:	4b16      	ldr	r3, [pc, #88]	@ (800398c <HAL_SD_MspInit+0xc4>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800393e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394c:	2303      	movs	r3, #3
 800394e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003950:	230c      	movs	r3, #12
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	4619      	mov	r1, r3
 800395a:	480d      	ldr	r0, [pc, #52]	@ (8003990 <HAL_SD_MspInit+0xc8>)
 800395c:	f002 f930 	bl	8005bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003960:	2304      	movs	r3, #4
 8003962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	2302      	movs	r3, #2
 8003966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396c:	2303      	movs	r3, #3
 800396e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003970:	230c      	movs	r3, #12
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	4619      	mov	r1, r3
 800397a:	4806      	ldr	r0, [pc, #24]	@ (8003994 <HAL_SD_MspInit+0xcc>)
 800397c:	f002 f920 	bl	8005bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003980:	bf00      	nop
 8003982:	3728      	adds	r7, #40	@ 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40023800 	.word	0x40023800
 8003990:	40020800 	.word	0x40020800
 8003994:	40020c00 	.word	0x40020c00

08003998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003a90 <HAL_TIM_Base_MspInit+0xf8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d13f      	bne.n	8003a2a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	4b39      	ldr	r3, [pc, #228]	@ (8003a94 <HAL_TIM_Base_MspInit+0xfc>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	4a38      	ldr	r2, [pc, #224]	@ (8003a94 <HAL_TIM_Base_MspInit+0xfc>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ba:	4b36      	ldr	r3, [pc, #216]	@ (8003a94 <HAL_TIM_Base_MspInit+0xfc>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80039c6:	4b34      	ldr	r3, [pc, #208]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 80039c8:	4a34      	ldr	r2, [pc, #208]	@ (8003a9c <HAL_TIM_Base_MspInit+0x104>)
 80039ca:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80039cc:	4b32      	ldr	r3, [pc, #200]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 80039ce:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80039d2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039d4:	4b30      	ldr	r3, [pc, #192]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 80039d6:	2240      	movs	r2, #64	@ 0x40
 80039d8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80039da:	4b2f      	ldr	r3, [pc, #188]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 80039dc:	2200      	movs	r2, #0
 80039de:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80039e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 80039e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039e6:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 80039ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039ee:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80039f0:	4b29      	ldr	r3, [pc, #164]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 80039f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039f6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80039f8:	4b27      	ldr	r3, [pc, #156]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 80039fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039fe:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003a00:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a06:	4b24      	ldr	r3, [pc, #144]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003a0c:	4822      	ldr	r0, [pc, #136]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 8003a0e:	f001 f99f 	bl	8004d50 <HAL_DMA_Init>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003a18:	f7ff fe24 	bl	8003664 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 8003a20:	621a      	str	r2, [r3, #32]
 8003a22:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <HAL_TIM_Base_MspInit+0x100>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a28:	e02e      	b.n	8003a88 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a32:	d116      	bne.n	8003a62 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	4b16      	ldr	r3, [pc, #88]	@ (8003a94 <HAL_TIM_Base_MspInit+0xfc>)
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	4a15      	ldr	r2, [pc, #84]	@ (8003a94 <HAL_TIM_Base_MspInit+0xfc>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a44:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <HAL_TIM_Base_MspInit+0xfc>)
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2100      	movs	r1, #0
 8003a54:	201c      	movs	r0, #28
 8003a56:	f001 f932 	bl	8004cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a5a:	201c      	movs	r0, #28
 8003a5c:	f001 f94b 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
}
 8003a60:	e012      	b.n	8003a88 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a0e      	ldr	r2, [pc, #56]	@ (8003aa0 <HAL_TIM_Base_MspInit+0x108>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d10d      	bne.n	8003a88 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <HAL_TIM_Base_MspInit+0xfc>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	4a07      	ldr	r2, [pc, #28]	@ (8003a94 <HAL_TIM_Base_MspInit+0xfc>)
 8003a76:	f043 0302 	orr.w	r3, r3, #2
 8003a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a7c:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <HAL_TIM_Base_MspInit+0xfc>)
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40023800 	.word	0x40023800
 8003a98:	20001a14 	.word	0x20001a14
 8003a9c:	40026488 	.word	0x40026488
 8003aa0:	40000400 	.word	0x40000400

08003aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a12      	ldr	r2, [pc, #72]	@ (8003b0c <HAL_TIM_MspPostInit+0x68>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d11d      	bne.n	8003b02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <HAL_TIM_MspPostInit+0x6c>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	4a10      	ldr	r2, [pc, #64]	@ (8003b10 <HAL_TIM_MspPostInit+0x6c>)
 8003ad0:	f043 0302 	orr.w	r3, r3, #2
 8003ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b10 <HAL_TIM_MspPostInit+0x6c>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003ae2:	2330      	movs	r3, #48	@ 0x30
 8003ae4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003af2:	2302      	movs	r3, #2
 8003af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af6:	f107 030c 	add.w	r3, r7, #12
 8003afa:	4619      	mov	r1, r3
 8003afc:	4805      	ldr	r0, [pc, #20]	@ (8003b14 <HAL_TIM_MspPostInit+0x70>)
 8003afe:	f002 f85f 	bl	8005bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b02:	bf00      	nop
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40020400 	.word	0x40020400

08003b18 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <HAL_TIM_Base_MspDeInit+0x68>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10b      	bne.n	8003b42 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003b2a:	4b16      	ldr	r3, [pc, #88]	@ (8003b84 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	4a15      	ldr	r2, [pc, #84]	@ (8003b84 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 f9b6 	bl	8004eac <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003b40:	e019      	b.n	8003b76 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4a:	d109      	bne.n	8003b60 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	4a0c      	ldr	r2, [pc, #48]	@ (8003b84 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003b58:	201c      	movs	r0, #28
 8003b5a:	f001 f8da 	bl	8004d12 <HAL_NVIC_DisableIRQ>
}
 8003b5e:	e00a      	b.n	8003b76 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a08      	ldr	r2, [pc, #32]	@ (8003b88 <HAL_TIM_Base_MspDeInit+0x70>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d105      	bne.n	8003b76 <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	4a05      	ldr	r2, [pc, #20]	@ (8003b84 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b70:	f023 0302 	bic.w	r3, r3, #2
 8003b74:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40000400 	.word	0x40000400

08003b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08c      	sub	sp, #48	@ 0x30
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b94:	f107 031c 	add.w	r3, r7, #28
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a3a      	ldr	r2, [pc, #232]	@ (8003c94 <HAL_UART_MspInit+0x108>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d134      	bne.n	8003c18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	4b39      	ldr	r3, [pc, #228]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	4a38      	ldr	r2, [pc, #224]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003bb8:	f043 0310 	orr.w	r3, r3, #16
 8003bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bbe:	4b36      	ldr	r3, [pc, #216]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	4b32      	ldr	r3, [pc, #200]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	4a31      	ldr	r2, [pc, #196]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003bd4:	f043 0302 	orr.w	r3, r3, #2
 8003bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bda:	4b2f      	ldr	r3, [pc, #188]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003be6:	23c0      	movs	r3, #192	@ 0xc0
 8003be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	2302      	movs	r3, #2
 8003bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bf6:	2307      	movs	r3, #7
 8003bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfa:	f107 031c 	add.w	r3, r7, #28
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4826      	ldr	r0, [pc, #152]	@ (8003c9c <HAL_UART_MspInit+0x110>)
 8003c02:	f001 ffdd 	bl	8005bc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c06:	2200      	movs	r2, #0
 8003c08:	2100      	movs	r1, #0
 8003c0a:	2025      	movs	r0, #37	@ 0x25
 8003c0c:	f001 f857 	bl	8004cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c10:	2025      	movs	r0, #37	@ 0x25
 8003c12:	f001 f870 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c16:	e038      	b.n	8003c8a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a20      	ldr	r2, [pc, #128]	@ (8003ca0 <HAL_UART_MspInit+0x114>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d133      	bne.n	8003c8a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	4b1c      	ldr	r3, [pc, #112]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c32:	4b19      	ldr	r3, [pc, #100]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	4b15      	ldr	r3, [pc, #84]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	4a14      	ldr	r2, [pc, #80]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4e:	4b12      	ldr	r3, [pc, #72]	@ (8003c98 <HAL_UART_MspInit+0x10c>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c66:	2303      	movs	r3, #3
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c6a:	2307      	movs	r3, #7
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6e:	f107 031c 	add.w	r3, r7, #28
 8003c72:	4619      	mov	r1, r3
 8003c74:	480b      	ldr	r0, [pc, #44]	@ (8003ca4 <HAL_UART_MspInit+0x118>)
 8003c76:	f001 ffa3 	bl	8005bc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2026      	movs	r0, #38	@ 0x26
 8003c80:	f001 f81d 	bl	8004cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c84:	2026      	movs	r0, #38	@ 0x26
 8003c86:	f001 f836 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
}
 8003c8a:	bf00      	nop
 8003c8c:	3730      	adds	r7, #48	@ 0x30
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40011000 	.word	0x40011000
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40020400 	.word	0x40020400
 8003ca0:	40004400 	.word	0x40004400
 8003ca4:	40020000 	.word	0x40020000

08003ca8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a13      	ldr	r2, [pc, #76]	@ (8003d04 <HAL_UART_MspDeInit+0x5c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10d      	bne.n	8003cd6 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003cba:	4b13      	ldr	r3, [pc, #76]	@ (8003d08 <HAL_UART_MspDeInit+0x60>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	4a12      	ldr	r2, [pc, #72]	@ (8003d08 <HAL_UART_MspDeInit+0x60>)
 8003cc0:	f023 0310 	bic.w	r3, r3, #16
 8003cc4:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 8003cc6:	21c0      	movs	r1, #192	@ 0xc0
 8003cc8:	4810      	ldr	r0, [pc, #64]	@ (8003d0c <HAL_UART_MspDeInit+0x64>)
 8003cca:	f002 f8fd 	bl	8005ec8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003cce:	2025      	movs	r0, #37	@ 0x25
 8003cd0:	f001 f81f 	bl	8004d12 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003cd4:	e011      	b.n	8003cfa <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a0d      	ldr	r2, [pc, #52]	@ (8003d10 <HAL_UART_MspDeInit+0x68>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10c      	bne.n	8003cfa <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003ce0:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <HAL_UART_MspDeInit+0x60>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	4a08      	ldr	r2, [pc, #32]	@ (8003d08 <HAL_UART_MspDeInit+0x60>)
 8003ce6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003cea:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 8003cec:	210c      	movs	r1, #12
 8003cee:	4809      	ldr	r0, [pc, #36]	@ (8003d14 <HAL_UART_MspDeInit+0x6c>)
 8003cf0:	f002 f8ea 	bl	8005ec8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003cf4:	2026      	movs	r0, #38	@ 0x26
 8003cf6:	f001 f80c 	bl	8004d12 <HAL_NVIC_DisableIRQ>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40011000 	.word	0x40011000
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40020400 	.word	0x40020400
 8003d10:	40004400 	.word	0x40004400
 8003d14:	40020000 	.word	0x40020000

08003d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d1c:	f001 f807 	bl	8004d2e <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <NMI_Handler+0x8>

08003d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d28:	f001 f801 	bl	8004d2e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <HardFault_Handler+0x8>

08003d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d34:	f000 fffb 	bl	8004d2e <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <MemManage_Handler+0x8>

08003d3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d40:	f000 fff5 	bl	8004d2e <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d44:	bf00      	nop
 8003d46:	e7fd      	b.n	8003d44 <BusFault_Handler+0x8>

08003d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d4c:	f000 ffef 	bl	8004d2e <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <UsageFault_Handler+0x8>

08003d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d58:	f000 ffe9 	bl	8004d2e <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d64:	f000 ffe3 	bl	8004d2e <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d70:	f000 ffdd 	bl	8004d2e <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IWDG_Refresh(&hiwdg);
 8003d7c:	4803      	ldr	r0, [pc, #12]	@ (8003d8c <SysTick_Handler+0x14>)
 8003d7e:	f003 fb6b 	bl	8007458 <HAL_IWDG_Refresh>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d82:	f000 f9a5 	bl	80040d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000188c 	.word	0x2000188c

08003d90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8003d94:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003d98:	f002 f9ac 	bl	80060f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d9c:	bf00      	nop
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003da4:	4802      	ldr	r0, [pc, #8]	@ (8003db0 <TIM2_IRQHandler+0x10>)
 8003da6:	f007 fbc9 	bl	800b53c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20001984 	.word	0x20001984

08003db4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003db8:	4802      	ldr	r0, [pc, #8]	@ (8003dc4 <USART1_IRQHandler+0x10>)
 8003dba:	f008 fb4b 	bl	800c454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20001a74 	.word	0x20001a74

08003dc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003dcc:	4802      	ldr	r0, [pc, #8]	@ (8003dd8 <USART2_IRQHandler+0x10>)
 8003dce:	f008 fb41 	bl	800c454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20001abc 	.word	0x20001abc

08003ddc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 8003de0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003de4:	f002 f986 	bl	80060f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}

08003dec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003df0:	4802      	ldr	r0, [pc, #8]	@ (8003dfc <RTC_Alarm_IRQHandler+0x10>)
 8003df2:	f006 f833 	bl	8009e5c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20001898 	.word	0x20001898

08003e00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e04:	4802      	ldr	r0, [pc, #8]	@ (8003e10 <OTG_FS_IRQHandler+0x10>)
 8003e06:	f003 fcd9 	bl	80077bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20002908 	.word	0x20002908

08003e14 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003e18:	4802      	ldr	r0, [pc, #8]	@ (8003e24 <DMA2_Stream5_IRQHandler+0x10>)
 8003e1a:	f001 f973 	bl	8005104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20001a14 	.word	0x20001a14

08003e28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return 1;
 8003e2c:	2301      	movs	r3, #1
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <_kill>:

int _kill(int pid, int sig)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e42:	f01a ffe9 	bl	801ee18 <__errno>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2216      	movs	r2, #22
 8003e4a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <_exit>:

void _exit (int status)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e60:	f04f 31ff 	mov.w	r1, #4294967295
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff ffe7 	bl	8003e38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <_exit+0x12>

08003e6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	e00a      	b.n	8003e96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e80:	f3af 8000 	nop.w
 8003e84:	4601      	mov	r1, r0
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	60ba      	str	r2, [r7, #8]
 8003e8c:	b2ca      	uxtb	r2, r1
 8003e8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	3301      	adds	r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	dbf0      	blt.n	8003e80 <_read+0x12>
  }

  return len;
 8003e9e:	687b      	ldr	r3, [r7, #4]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e009      	b.n	8003ece <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	60ba      	str	r2, [r7, #8]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	dbf1      	blt.n	8003eba <_write+0x12>
  }
  return len;
 8003ed6:	687b      	ldr	r3, [r7, #4]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <_close>:

int _close(int file)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f08:	605a      	str	r2, [r3, #4]
  return 0;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <_isatty>:

int _isatty(int file)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f20:	2301      	movs	r3, #1
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f50:	4a14      	ldr	r2, [pc, #80]	@ (8003fa4 <_sbrk+0x5c>)
 8003f52:	4b15      	ldr	r3, [pc, #84]	@ (8003fa8 <_sbrk+0x60>)
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f5c:	4b13      	ldr	r3, [pc, #76]	@ (8003fac <_sbrk+0x64>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f64:	4b11      	ldr	r3, [pc, #68]	@ (8003fac <_sbrk+0x64>)
 8003f66:	4a12      	ldr	r2, [pc, #72]	@ (8003fb0 <_sbrk+0x68>)
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f6a:	4b10      	ldr	r3, [pc, #64]	@ (8003fac <_sbrk+0x64>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d207      	bcs.n	8003f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f78:	f01a ff4e 	bl	801ee18 <__errno>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	220c      	movs	r2, #12
 8003f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295
 8003f86:	e009      	b.n	8003f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f88:	4b08      	ldr	r3, [pc, #32]	@ (8003fac <_sbrk+0x64>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f8e:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <_sbrk+0x64>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <_sbrk+0x64>)
 8003f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20018000 	.word	0x20018000
 8003fa8:	00000400 	.word	0x00000400
 8003fac:	20001b04 	.word	0x20001b04
 8003fb0:	200037b0 	.word	0x200037b0

08003fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fb8:	4b06      	ldr	r3, [pc, #24]	@ (8003fd4 <SystemInit+0x20>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbe:	4a05      	ldr	r2, [pc, #20]	@ (8003fd4 <SystemInit+0x20>)
 8003fc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003fd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004010 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fdc:	480d      	ldr	r0, [pc, #52]	@ (8004014 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fde:	490e      	ldr	r1, [pc, #56]	@ (8004018 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800401c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe4:	e002      	b.n	8003fec <LoopCopyDataInit>

08003fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fea:	3304      	adds	r3, #4

08003fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff0:	d3f9      	bcc.n	8003fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8004020 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ff4:	4c0b      	ldr	r4, [pc, #44]	@ (8004024 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ff8:	e001      	b.n	8003ffe <LoopFillZerobss>

08003ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ffc:	3204      	adds	r2, #4

08003ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004000:	d3fb      	bcc.n	8003ffa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004002:	f7ff ffd7 	bl	8003fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004006:	f01a ff0d 	bl	801ee24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800400a:	f7fe fd39 	bl	8002a80 <main>
  bx  lr    
 800400e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004010:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004018:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 800401c:	080257d4 	.word	0x080257d4
  ldr r2, =_sbss
 8004020:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8004024:	200037b0 	.word	0x200037b0

08004028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004028:	e7fe      	b.n	8004028 <ADC_IRQHandler>
	...

0800402c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004030:	4b0e      	ldr	r3, [pc, #56]	@ (800406c <HAL_Init+0x40>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0d      	ldr	r2, [pc, #52]	@ (800406c <HAL_Init+0x40>)
 8004036:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800403a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_Init+0x40>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0a      	ldr	r2, [pc, #40]	@ (800406c <HAL_Init+0x40>)
 8004042:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004048:	4b08      	ldr	r3, [pc, #32]	@ (800406c <HAL_Init+0x40>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a07      	ldr	r2, [pc, #28]	@ (800406c <HAL_Init+0x40>)
 800404e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004054:	2003      	movs	r0, #3
 8004056:	f000 fe27 	bl	8004ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800405a:	200f      	movs	r0, #15
 800405c:	f000 f808 	bl	8004070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004060:	f7ff fb08 	bl	8003674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023c00 	.word	0x40023c00

08004070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004078:	4b12      	ldr	r3, [pc, #72]	@ (80040c4 <HAL_InitTick+0x54>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <HAL_InitTick+0x58>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	4619      	mov	r1, r3
 8004082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004086:	fbb3 f3f1 	udiv	r3, r3, r1
 800408a:	fbb2 f3f3 	udiv	r3, r2, r3
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fe51 	bl	8004d36 <HAL_SYSTICK_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e00e      	b.n	80040bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b0f      	cmp	r3, #15
 80040a2:	d80a      	bhi.n	80040ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040a4:	2200      	movs	r2, #0
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ac:	f000 fe07 	bl	8004cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040b0:	4a06      	ldr	r2, [pc, #24]	@ (80040cc <HAL_InitTick+0x5c>)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e000      	b.n	80040bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000010 	.word	0x20000010
 80040c8:	20000018 	.word	0x20000018
 80040cc:	20000014 	.word	0x20000014

080040d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040d4:	4b06      	ldr	r3, [pc, #24]	@ (80040f0 <HAL_IncTick+0x20>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_IncTick+0x24>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <HAL_IncTick+0x24>)
 80040e2:	6013      	str	r3, [r2, #0]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000018 	.word	0x20000018
 80040f4:	20001b08 	.word	0x20001b08

080040f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return uwTick;
 80040fc:	4b03      	ldr	r3, [pc, #12]	@ (800410c <HAL_GetTick+0x14>)
 80040fe:	681b      	ldr	r3, [r3, #0]
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20001b08 	.word	0x20001b08

08004110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004118:	f7ff ffee 	bl	80040f8 <HAL_GetTick>
 800411c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d005      	beq.n	8004136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800412a:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <HAL_Delay+0x44>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004136:	bf00      	nop
 8004138:	f7ff ffde 	bl	80040f8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	429a      	cmp	r2, r3
 8004146:	d8f7      	bhi.n	8004138 <HAL_Delay+0x28>
  {
  }
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000018 	.word	0x20000018

08004158 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_SuspendTick+0x1c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <HAL_SuspendTick+0x1c>)
 8004162:	f023 0302 	bic.w	r3, r3, #2
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	e000e010 	.word	0xe000e010

08004178 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800417c:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <HAL_ResumeTick+0x1c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a04      	ldr	r2, [pc, #16]	@ (8004194 <HAL_ResumeTick+0x1c>)
 8004182:	f043 0302 	orr.w	r3, r3, #2
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	e000e010 	.word	0xe000e010

08004198 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800419c:	4b03      	ldr	r3, [pc, #12]	@ (80041ac <HAL_GetUIDw0+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	1fff7a10 	.word	0x1fff7a10

080041b0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80041b4:	4b03      	ldr	r3, [pc, #12]	@ (80041c4 <HAL_GetUIDw1+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	1fff7a14 	.word	0x1fff7a14

080041c8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80041cc:	4b03      	ldr	r3, [pc, #12]	@ (80041dc <HAL_GetUIDw2+0x14>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	1fff7a18 	.word	0x1fff7a18

080041e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e033      	b.n	800425e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fa60 	bl	80036c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b00      	cmp	r3, #0
 800421c:	d118      	bne.n	8004250 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004226:	f023 0302 	bic.w	r3, r3, #2
 800422a:	f043 0202 	orr.w	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 faec 	bl	8004810 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	f043 0201 	orr.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	@ 0x40
 800424e:	e001      	b.n	8004254 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e022      	b.n	80042c2 <HAL_ADC_DeInit+0x5c>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	f043 0202 	orr.w	r2, r3, #2
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <HAL_ADC_DeInit+0x52>

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fa50 	bl	800374c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_Start+0x1a>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e097      	b.n	8004416 <HAL_ADC_Start+0x14a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d018      	beq.n	800432e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800430c:	4b45      	ldr	r3, [pc, #276]	@ (8004424 <HAL_ADC_Start+0x158>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a45      	ldr	r2, [pc, #276]	@ (8004428 <HAL_ADC_Start+0x15c>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	0c9a      	lsrs	r2, r3, #18
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004320:	e002      	b.n	8004328 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3b01      	subs	r3, #1
 8004326:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f9      	bne.n	8004322 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b01      	cmp	r3, #1
 800433a:	d15f      	bne.n	80043fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004366:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437a:	d106      	bne.n	800438a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004380:	f023 0206 	bic.w	r2, r3, #6
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	645a      	str	r2, [r3, #68]	@ 0x44
 8004388:	e002      	b.n	8004390 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004398:	4b24      	ldr	r3, [pc, #144]	@ (800442c <HAL_ADC_Start+0x160>)
 800439a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80043a4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d129      	bne.n	8004414 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	e020      	b.n	8004414 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a16      	ldr	r2, [pc, #88]	@ (8004430 <HAL_ADC_Start+0x164>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d11b      	bne.n	8004414 <HAL_ADC_Start+0x148>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d114      	bne.n	8004414 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	e00b      	b.n	8004414 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	f043 0210 	orr.w	r2, r3, #16
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440c:	f043 0201 	orr.w	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000010 	.word	0x20000010
 8004428:	431bde83 	.word	0x431bde83
 800442c:	40012300 	.word	0x40012300
 8004430:	40012000 	.word	0x40012000

08004434 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_ADC_Stop+0x16>
 8004446:	2302      	movs	r3, #2
 8004448:	e021      	b.n	800448e <HAL_ADC_Stop+0x5a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	f043 0201 	orr.w	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b6:	d113      	bne.n	80044e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c6:	d10b      	bne.n	80044e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e063      	b.n	80045a8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e0:	f7ff fe0a 	bl	80040f8 <HAL_GetTick>
 80044e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80044e6:	e021      	b.n	800452c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d01d      	beq.n	800452c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_ADC_PollForConversion+0x6c>
 80044f6:	f7ff fdff 	bl	80040f8 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d212      	bcs.n	800452c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d00b      	beq.n	800452c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	f043 0204 	orr.w	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e03d      	b.n	80045a8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d1d6      	bne.n	80044e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f06f 0212 	mvn.w	r2, #18
 8004542:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d123      	bne.n	80045a6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11f      	bne.n	80045a6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004570:	2b00      	cmp	r3, #0
 8004572:	d006      	beq.n	8004582 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800457e:	2b00      	cmp	r3, #0
 8004580:	d111      	bne.n	80045a6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d105      	bne.n	80045a6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f043 0201 	orr.w	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x1c>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e105      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x228>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b09      	cmp	r3, #9
 80045f6:	d925      	bls.n	8004644 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68d9      	ldr	r1, [r3, #12]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	4613      	mov	r3, r2
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4413      	add	r3, r2
 800460c:	3b1e      	subs	r3, #30
 800460e:	2207      	movs	r2, #7
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43da      	mvns	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	400a      	ands	r2, r1
 800461c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68d9      	ldr	r1, [r3, #12]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	4618      	mov	r0, r3
 8004630:	4603      	mov	r3, r0
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4403      	add	r3, r0
 8004636:	3b1e      	subs	r3, #30
 8004638:	409a      	lsls	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	e022      	b.n	800468a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6919      	ldr	r1, [r3, #16]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	2207      	movs	r2, #7
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43da      	mvns	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	400a      	ands	r2, r1
 8004666:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6919      	ldr	r1, [r3, #16]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	4618      	mov	r0, r3
 800467a:	4603      	mov	r3, r0
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4403      	add	r3, r0
 8004680:	409a      	lsls	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b06      	cmp	r3, #6
 8004690:	d824      	bhi.n	80046dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	3b05      	subs	r3, #5
 80046a4:	221f      	movs	r2, #31
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43da      	mvns	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	400a      	ands	r2, r1
 80046b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	4618      	mov	r0, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	3b05      	subs	r3, #5
 80046ce:	fa00 f203 	lsl.w	r2, r0, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80046da:	e04c      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b0c      	cmp	r3, #12
 80046e2:	d824      	bhi.n	800472e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	3b23      	subs	r3, #35	@ 0x23
 80046f6:	221f      	movs	r2, #31
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43da      	mvns	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	400a      	ands	r2, r1
 8004704:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	4618      	mov	r0, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	3b23      	subs	r3, #35	@ 0x23
 8004720:	fa00 f203 	lsl.w	r2, r0, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	631a      	str	r2, [r3, #48]	@ 0x30
 800472c:	e023      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	3b41      	subs	r3, #65	@ 0x41
 8004740:	221f      	movs	r2, #31
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	400a      	ands	r2, r1
 800474e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	4618      	mov	r0, r3
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	3b41      	subs	r3, #65	@ 0x41
 800476a:	fa00 f203 	lsl.w	r2, r0, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004776:	4b22      	ldr	r3, [pc, #136]	@ (8004800 <HAL_ADC_ConfigChannel+0x234>)
 8004778:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a21      	ldr	r2, [pc, #132]	@ (8004804 <HAL_ADC_ConfigChannel+0x238>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d109      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x1cc>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b12      	cmp	r3, #18
 800478a:	d105      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a19      	ldr	r2, [pc, #100]	@ (8004804 <HAL_ADC_ConfigChannel+0x238>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d123      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x21e>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d003      	beq.n	80047b2 <HAL_ADC_ConfigChannel+0x1e6>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b11      	cmp	r3, #17
 80047b0:	d11b      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d111      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047c6:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <HAL_ADC_ConfigChannel+0x23c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a10      	ldr	r2, [pc, #64]	@ (800480c <HAL_ADC_ConfigChannel+0x240>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	0c9a      	lsrs	r2, r3, #18
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80047dc:	e002      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f9      	bne.n	80047de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	40012300 	.word	0x40012300
 8004804:	40012000 	.word	0x40012000
 8004808:	20000010 	.word	0x20000010
 800480c:	431bde83 	.word	0x431bde83

08004810 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004818:	4b79      	ldr	r3, [pc, #484]	@ (8004a00 <ADC_Init+0x1f0>)
 800481a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	431a      	orrs	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	021a      	lsls	r2, r3, #8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800488a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6899      	ldr	r1, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	4a58      	ldr	r2, [pc, #352]	@ (8004a04 <ADC_Init+0x1f4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d022      	beq.n	80048ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6899      	ldr	r1, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80048d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6899      	ldr	r1, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	e00f      	b.n	800490e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800490c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0202 	bic.w	r2, r2, #2
 800491c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6899      	ldr	r1, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	7e1b      	ldrb	r3, [r3, #24]
 8004928:	005a      	lsls	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800494a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800495a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	3b01      	subs	r3, #1
 8004968:	035a      	lsls	r2, r3, #13
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	e007      	b.n	8004984 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004982:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	3b01      	subs	r3, #1
 80049a0:	051a      	lsls	r2, r3, #20
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80049b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6899      	ldr	r1, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80049c6:	025a      	lsls	r2, r3, #9
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6899      	ldr	r1, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	029a      	lsls	r2, r3, #10
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40012300 	.word	0x40012300
 8004a04:	0f000001 	.word	0x0f000001

08004a08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e031      	b.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a28:	4b19      	ldr	r3, [pc, #100]	@ (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f023 021f 	bic.w	r2, r3, #31
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40012300 	.word	0x40012300

08004a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004abc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ac6:	4a04      	ldr	r2, [pc, #16]	@ (8004ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	60d3      	str	r3, [r2, #12]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae0:	4b04      	ldr	r3, [pc, #16]	@ (8004af4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	0a1b      	lsrs	r3, r3, #8
 8004ae6:	f003 0307 	and.w	r3, r3, #7
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	db0b      	blt.n	8004b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	f003 021f 	and.w	r2, r3, #31
 8004b10:	4907      	ldr	r1, [pc, #28]	@ (8004b30 <__NVIC_EnableIRQ+0x38>)
 8004b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	2001      	movs	r0, #1
 8004b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	e000e100 	.word	0xe000e100

08004b34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	db12      	blt.n	8004b6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	f003 021f 	and.w	r2, r3, #31
 8004b4c:	490a      	ldr	r1, [pc, #40]	@ (8004b78 <__NVIC_DisableIRQ+0x44>)
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2001      	movs	r0, #1
 8004b56:	fa00 f202 	lsl.w	r2, r0, r2
 8004b5a:	3320      	adds	r3, #32
 8004b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b60:	f3bf 8f4f 	dsb	sy
}
 8004b64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b66:	f3bf 8f6f 	isb	sy
}
 8004b6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000e100 	.word	0xe000e100

08004b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	6039      	str	r1, [r7, #0]
 8004b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	db0a      	blt.n	8004ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	490c      	ldr	r1, [pc, #48]	@ (8004bc8 <__NVIC_SetPriority+0x4c>)
 8004b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9a:	0112      	lsls	r2, r2, #4
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ba4:	e00a      	b.n	8004bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4908      	ldr	r1, [pc, #32]	@ (8004bcc <__NVIC_SetPriority+0x50>)
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	3b04      	subs	r3, #4
 8004bb4:	0112      	lsls	r2, r2, #4
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	440b      	add	r3, r1
 8004bba:	761a      	strb	r2, [r3, #24]
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000e100 	.word	0xe000e100
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	@ 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f1c3 0307 	rsb	r3, r3, #7
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	bf28      	it	cs
 8004bee:	2304      	movcs	r3, #4
 8004bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	2b06      	cmp	r3, #6
 8004bf8:	d902      	bls.n	8004c00 <NVIC_EncodePriority+0x30>
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3b03      	subs	r3, #3
 8004bfe:	e000      	b.n	8004c02 <NVIC_EncodePriority+0x32>
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c04:	f04f 32ff 	mov.w	r2, #4294967295
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43da      	mvns	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	401a      	ands	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c18:	f04f 31ff 	mov.w	r1, #4294967295
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c22:	43d9      	mvns	r1, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c28:	4313      	orrs	r3, r2
         );
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3724      	adds	r7, #36	@ 0x24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004c3c:	f3bf 8f4f 	dsb	sy
}
 8004c40:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c42:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <__NVIC_SystemReset+0x24>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c4a:	4904      	ldr	r1, [pc, #16]	@ (8004c5c <__NVIC_SystemReset+0x24>)
 8004c4c:	4b04      	ldr	r3, [pc, #16]	@ (8004c60 <__NVIC_SystemReset+0x28>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c52:	f3bf 8f4f 	dsb	sy
}
 8004c56:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004c58:	bf00      	nop
 8004c5a:	e7fd      	b.n	8004c58 <__NVIC_SystemReset+0x20>
 8004c5c:	e000ed00 	.word	0xe000ed00
 8004c60:	05fa0004 	.word	0x05fa0004

08004c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c74:	d301      	bcc.n	8004c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c76:	2301      	movs	r3, #1
 8004c78:	e00f      	b.n	8004c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca4 <SysTick_Config+0x40>)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c82:	210f      	movs	r1, #15
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	f7ff ff78 	bl	8004b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <SysTick_Config+0x40>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c92:	4b04      	ldr	r3, [pc, #16]	@ (8004ca4 <SysTick_Config+0x40>)
 8004c94:	2207      	movs	r2, #7
 8004c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	e000e010 	.word	0xe000e010

08004ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff feef 	bl	8004a94 <__NVIC_SetPriorityGrouping>
}
 8004cb6:	bf00      	nop
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b086      	sub	sp, #24
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cd0:	f7ff ff04 	bl	8004adc <__NVIC_GetPriorityGrouping>
 8004cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	6978      	ldr	r0, [r7, #20]
 8004cdc:	f7ff ff78 	bl	8004bd0 <NVIC_EncodePriority>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ff47 	bl	8004b7c <__NVIC_SetPriority>
}
 8004cee:	bf00      	nop
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fef7 	bl	8004af8 <__NVIC_EnableIRQ>
}
 8004d0a:	bf00      	nop
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	4603      	mov	r3, r0
 8004d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff07 	bl	8004b34 <__NVIC_DisableIRQ>
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004d32:	f7ff ff81 	bl	8004c38 <__NVIC_SystemReset>

08004d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff ff90 	bl	8004c64 <SysTick_Config>
 8004d44:	4603      	mov	r3, r0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d5c:	f7ff f9cc 	bl	80040f8 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e099      	b.n	8004ea0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d8c:	e00f      	b.n	8004dae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d8e:	f7ff f9b3 	bl	80040f8 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b05      	cmp	r3, #5
 8004d9a:	d908      	bls.n	8004dae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2203      	movs	r2, #3
 8004da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e078      	b.n	8004ea0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e8      	bne.n	8004d8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4b38      	ldr	r3, [pc, #224]	@ (8004ea8 <HAL_DMA_Init+0x158>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d107      	bne.n	8004e18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	4313      	orrs	r3, r2
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d117      	bne.n	8004e72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00e      	beq.n	8004e72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fb43 	bl	80054e0 <DMA_CheckFifoParam>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2240      	movs	r2, #64	@ 0x40
 8004e64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e016      	b.n	8004ea0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fafa 	bl	8005474 <DMA_CalcBaseAndBitshift>
 8004e80:	4603      	mov	r3, r0
 8004e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e88:	223f      	movs	r2, #63	@ 0x3f
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	f010803f 	.word	0xf010803f

08004eac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e050      	b.n	8004f60 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d101      	bne.n	8004ece <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e048      	b.n	8004f60 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2221      	movs	r2, #33	@ 0x21
 8004f0c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fab0 	bl	8005474 <DMA_CalcBaseAndBitshift>
 8004f14:	4603      	mov	r3, r0
 8004f16:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f40:	223f      	movs	r2, #63	@ 0x3f
 8004f42:	409a      	lsls	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_DMA_Start+0x20>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e026      	b.n	8004fd6 <HAL_DMA_Start+0x6e>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d115      	bne.n	8004fc8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fa31 	bl	8005418 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e005      	b.n	8004fd4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fec:	f7ff f884 	bl	80040f8 <HAL_GetTick>
 8004ff0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d008      	beq.n	8005010 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2280      	movs	r2, #128	@ 0x80
 8005002:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e052      	b.n	80050b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0216 	bic.w	r2, r2, #22
 800501e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800502e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d103      	bne.n	8005040 <HAL_DMA_Abort+0x62>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0208 	bic.w	r2, r2, #8
 800504e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0201 	bic.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005060:	e013      	b.n	800508a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005062:	f7ff f849 	bl	80040f8 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b05      	cmp	r3, #5
 800506e:	d90c      	bls.n	800508a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2203      	movs	r2, #3
 800507a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e015      	b.n	80050b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e4      	bne.n	8005062 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509c:	223f      	movs	r2, #63	@ 0x3f
 800509e:	409a      	lsls	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d004      	beq.n	80050dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2280      	movs	r2, #128	@ 0x80
 80050d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e00c      	b.n	80050f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2205      	movs	r2, #5
 80050e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0201 	bic.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005110:	4b8e      	ldr	r3, [pc, #568]	@ (800534c <HAL_DMA_IRQHandler+0x248>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a8e      	ldr	r2, [pc, #568]	@ (8005350 <HAL_DMA_IRQHandler+0x24c>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	0a9b      	lsrs	r3, r3, #10
 800511c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005122:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512e:	2208      	movs	r2, #8
 8005130:	409a      	lsls	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4013      	ands	r3, r2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01a      	beq.n	8005170 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d013      	beq.n	8005170 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0204 	bic.w	r2, r2, #4
 8005156:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515c:	2208      	movs	r2, #8
 800515e:	409a      	lsls	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005168:	f043 0201 	orr.w	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005174:	2201      	movs	r2, #1
 8005176:	409a      	lsls	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d012      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005192:	2201      	movs	r2, #1
 8005194:	409a      	lsls	r2, r3
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519e:	f043 0202 	orr.w	r2, r3, #2
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051aa:	2204      	movs	r2, #4
 80051ac:	409a      	lsls	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d012      	beq.n	80051dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00b      	beq.n	80051dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c8:	2204      	movs	r2, #4
 80051ca:	409a      	lsls	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d4:	f043 0204 	orr.w	r2, r3, #4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e0:	2210      	movs	r2, #16
 80051e2:	409a      	lsls	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d043      	beq.n	8005274 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d03c      	beq.n	8005274 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fe:	2210      	movs	r2, #16
 8005200:	409a      	lsls	r2, r3
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d018      	beq.n	8005246 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d108      	bne.n	8005234 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d024      	beq.n	8005274 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
 8005232:	e01f      	b.n	8005274 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01b      	beq.n	8005274 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	4798      	blx	r3
 8005244:	e016      	b.n	8005274 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d107      	bne.n	8005264 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0208 	bic.w	r2, r2, #8
 8005262:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005278:	2220      	movs	r2, #32
 800527a:	409a      	lsls	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 808f 	beq.w	80053a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8087 	beq.w	80053a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529a:	2220      	movs	r2, #32
 800529c:	409a      	lsls	r2, r3
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d136      	bne.n	800531c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0216 	bic.w	r2, r2, #22
 80052bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695a      	ldr	r2, [r3, #20]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <HAL_DMA_IRQHandler+0x1da>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0208 	bic.w	r2, r2, #8
 80052ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f2:	223f      	movs	r2, #63	@ 0x3f
 80052f4:	409a      	lsls	r2, r3
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530e:	2b00      	cmp	r3, #0
 8005310:	d07e      	beq.n	8005410 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
        }
        return;
 800531a:	e079      	b.n	8005410 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01d      	beq.n	8005366 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10d      	bne.n	8005354 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533c:	2b00      	cmp	r3, #0
 800533e:	d031      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
 8005348:	e02c      	b.n	80053a4 <HAL_DMA_IRQHandler+0x2a0>
 800534a:	bf00      	nop
 800534c:	20000010 	.word	0x20000010
 8005350:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d023      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	4798      	blx	r3
 8005364:	e01e      	b.n	80053a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10f      	bne.n	8005394 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0210 	bic.w	r2, r2, #16
 8005382:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d032      	beq.n	8005412 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d022      	beq.n	80053fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2205      	movs	r2, #5
 80053bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	3301      	adds	r3, #1
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d307      	bcc.n	80053ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f2      	bne.n	80053d0 <HAL_DMA_IRQHandler+0x2cc>
 80053ea:	e000      	b.n	80053ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
 800540e:	e000      	b.n	8005412 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005410:	bf00      	nop
    }
  }
}
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005434:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b40      	cmp	r3, #64	@ 0x40
 8005444:	d108      	bne.n	8005458 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005456:	e007      	b.n	8005468 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	60da      	str	r2, [r3, #12]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	3b10      	subs	r3, #16
 8005484:	4a14      	ldr	r2, [pc, #80]	@ (80054d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800548e:	4a13      	ldr	r2, [pc, #76]	@ (80054dc <DMA_CalcBaseAndBitshift+0x68>)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d909      	bls.n	80054b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80054b4:	e007      	b.n	80054c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054be:	f023 0303 	bic.w	r3, r3, #3
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	aaaaaaab 	.word	0xaaaaaaab
 80054dc:	08024eac 	.word	0x08024eac

080054e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d11f      	bne.n	800553a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d856      	bhi.n	80055ae <DMA_CheckFifoParam+0xce>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <DMA_CheckFifoParam+0x28>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005519 	.word	0x08005519
 800550c:	0800552b 	.word	0x0800552b
 8005510:	08005519 	.word	0x08005519
 8005514:	080055af 	.word	0x080055af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d046      	beq.n	80055b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005528:	e043      	b.n	80055b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005532:	d140      	bne.n	80055b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005538:	e03d      	b.n	80055b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005542:	d121      	bne.n	8005588 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d837      	bhi.n	80055ba <DMA_CheckFifoParam+0xda>
 800554a:	a201      	add	r2, pc, #4	@ (adr r2, 8005550 <DMA_CheckFifoParam+0x70>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	08005561 	.word	0x08005561
 8005554:	08005567 	.word	0x08005567
 8005558:	08005561 	.word	0x08005561
 800555c:	08005579 	.word	0x08005579
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      break;
 8005564:	e030      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d025      	beq.n	80055be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005576:	e022      	b.n	80055be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005580:	d11f      	bne.n	80055c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005586:	e01c      	b.n	80055c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d903      	bls.n	8005596 <DMA_CheckFifoParam+0xb6>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d003      	beq.n	800559c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005594:	e018      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
      break;
 800559a:	e015      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00e      	beq.n	80055c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]
      break;
 80055ac:	e00b      	b.n	80055c6 <DMA_CheckFifoParam+0xe6>
      break;
 80055ae:	bf00      	nop
 80055b0:	e00a      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;
 80055b2:	bf00      	nop
 80055b4:	e008      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;
 80055b6:	bf00      	nop
 80055b8:	e006      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;
 80055ba:	bf00      	nop
 80055bc:	e004      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;
 80055be:	bf00      	nop
 80055c0:	e002      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <DMA_CheckFifoParam+0xe8>
      break;
 80055c6:	bf00      	nop
    }
  } 
  
  return status; 
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop

080055d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055ea:	4b23      	ldr	r3, [pc, #140]	@ (8005678 <HAL_FLASH_Program+0xa0>)
 80055ec:	7e1b      	ldrb	r3, [r3, #24]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_FLASH_Program+0x1e>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e03b      	b.n	800566e <HAL_FLASH_Program+0x96>
 80055f6:	4b20      	ldr	r3, [pc, #128]	@ (8005678 <HAL_FLASH_Program+0xa0>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005600:	f000 f87c 	bl	80056fc <FLASH_WaitForLastOperation>
 8005604:	4603      	mov	r3, r0
 8005606:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d12b      	bne.n	8005666 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005614:	783b      	ldrb	r3, [r7, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	68b8      	ldr	r0, [r7, #8]
 800561a:	f000 f927 	bl	800586c <FLASH_Program_Byte>
 800561e:	e016      	b.n	800564e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d105      	bne.n	8005632 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005626:	883b      	ldrh	r3, [r7, #0]
 8005628:	4619      	mov	r1, r3
 800562a:	68b8      	ldr	r0, [r7, #8]
 800562c:	f000 f8fa 	bl	8005824 <FLASH_Program_HalfWord>
 8005630:	e00d      	b.n	800564e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b02      	cmp	r3, #2
 8005636:	d105      	bne.n	8005644 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	4619      	mov	r1, r3
 800563c:	68b8      	ldr	r0, [r7, #8]
 800563e:	f000 f8cf 	bl	80057e0 <FLASH_Program_Word>
 8005642:	e004      	b.n	800564e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005648:	68b8      	ldr	r0, [r7, #8]
 800564a:	f000 f897 	bl	800577c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800564e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005652:	f000 f853 	bl	80056fc <FLASH_WaitForLastOperation>
 8005656:	4603      	mov	r3, r0
 8005658:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800565a:	4b08      	ldr	r3, [pc, #32]	@ (800567c <HAL_FLASH_Program+0xa4>)
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	4a07      	ldr	r2, [pc, #28]	@ (800567c <HAL_FLASH_Program+0xa4>)
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005666:	4b04      	ldr	r3, [pc, #16]	@ (8005678 <HAL_FLASH_Program+0xa0>)
 8005668:	2200      	movs	r2, #0
 800566a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20001b0c 	.word	0x20001b0c
 800567c:	40023c00 	.word	0x40023c00

08005680 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800568a:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <HAL_FLASH_Unlock+0x38>)
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	da0b      	bge.n	80056aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005692:	4b09      	ldr	r3, [pc, #36]	@ (80056b8 <HAL_FLASH_Unlock+0x38>)
 8005694:	4a09      	ldr	r2, [pc, #36]	@ (80056bc <HAL_FLASH_Unlock+0x3c>)
 8005696:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005698:	4b07      	ldr	r3, [pc, #28]	@ (80056b8 <HAL_FLASH_Unlock+0x38>)
 800569a:	4a09      	ldr	r2, [pc, #36]	@ (80056c0 <HAL_FLASH_Unlock+0x40>)
 800569c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800569e:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <HAL_FLASH_Unlock+0x38>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da01      	bge.n	80056aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80056aa:	79fb      	ldrb	r3, [r7, #7]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40023c00 	.word	0x40023c00
 80056bc:	45670123 	.word	0x45670123
 80056c0:	cdef89ab 	.word	0xcdef89ab

080056c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80056c8:	4b05      	ldr	r3, [pc, #20]	@ (80056e0 <HAL_FLASH_Lock+0x1c>)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	4a04      	ldr	r2, [pc, #16]	@ (80056e0 <HAL_FLASH_Lock+0x1c>)
 80056ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	40023c00 	.word	0x40023c00

080056e4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80056e8:	4b03      	ldr	r3, [pc, #12]	@ (80056f8 <HAL_FLASH_GetError+0x14>)
 80056ea:	69db      	ldr	r3, [r3, #28]
}  
 80056ec:	4618      	mov	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20001b0c 	.word	0x20001b0c

080056fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005708:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <FLASH_WaitForLastOperation+0x78>)
 800570a:	2200      	movs	r2, #0
 800570c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800570e:	f7fe fcf3 	bl	80040f8 <HAL_GetTick>
 8005712:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005714:	e010      	b.n	8005738 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d00c      	beq.n	8005738 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <FLASH_WaitForLastOperation+0x38>
 8005724:	f7fe fce8 	bl	80040f8 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d201      	bcs.n	8005738 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e019      	b.n	800576c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005738:	4b0f      	ldr	r3, [pc, #60]	@ (8005778 <FLASH_WaitForLastOperation+0x7c>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e8      	bne.n	8005716 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005744:	4b0c      	ldr	r3, [pc, #48]	@ (8005778 <FLASH_WaitForLastOperation+0x7c>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005750:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <FLASH_WaitForLastOperation+0x7c>)
 8005752:	2201      	movs	r2, #1
 8005754:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005756:	4b08      	ldr	r3, [pc, #32]	@ (8005778 <FLASH_WaitForLastOperation+0x7c>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005762:	f000 f8a5 	bl	80058b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
  
}  
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20001b0c 	.word	0x20001b0c
 8005778:	40023c00 	.word	0x40023c00

0800577c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005788:	4b14      	ldr	r3, [pc, #80]	@ (80057dc <FLASH_Program_DoubleWord+0x60>)
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	4a13      	ldr	r2, [pc, #76]	@ (80057dc <FLASH_Program_DoubleWord+0x60>)
 800578e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005792:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005794:	4b11      	ldr	r3, [pc, #68]	@ (80057dc <FLASH_Program_DoubleWord+0x60>)
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	4a10      	ldr	r2, [pc, #64]	@ (80057dc <FLASH_Program_DoubleWord+0x60>)
 800579a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800579e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057a0:	4b0e      	ldr	r3, [pc, #56]	@ (80057dc <FLASH_Program_DoubleWord+0x60>)
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	4a0d      	ldr	r2, [pc, #52]	@ (80057dc <FLASH_Program_DoubleWord+0x60>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80057b2:	f3bf 8f6f 	isb	sy
}
 80057b6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80057b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	000a      	movs	r2, r1
 80057c6:	2300      	movs	r3, #0
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	3104      	adds	r1, #4
 80057cc:	4613      	mov	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40023c00 	.word	0x40023c00

080057e0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005820 <FLASH_Program_Word+0x40>)
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005820 <FLASH_Program_Word+0x40>)
 80057f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80057f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005820 <FLASH_Program_Word+0x40>)
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	4a09      	ldr	r2, [pc, #36]	@ (8005820 <FLASH_Program_Word+0x40>)
 80057fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005800:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005802:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <FLASH_Program_Word+0x40>)
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	4a06      	ldr	r2, [pc, #24]	@ (8005820 <FLASH_Program_Word+0x40>)
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	601a      	str	r2, [r3, #0]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	40023c00 	.word	0x40023c00

08005824 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005830:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <FLASH_Program_HalfWord+0x44>)
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	4a0c      	ldr	r2, [pc, #48]	@ (8005868 <FLASH_Program_HalfWord+0x44>)
 8005836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800583a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <FLASH_Program_HalfWord+0x44>)
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	4a09      	ldr	r2, [pc, #36]	@ (8005868 <FLASH_Program_HalfWord+0x44>)
 8005842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005846:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005848:	4b07      	ldr	r3, [pc, #28]	@ (8005868 <FLASH_Program_HalfWord+0x44>)
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	4a06      	ldr	r2, [pc, #24]	@ (8005868 <FLASH_Program_HalfWord+0x44>)
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	801a      	strh	r2, [r3, #0]
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40023c00 	.word	0x40023c00

0800586c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005878:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <FLASH_Program_Byte+0x40>)
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	4a0b      	ldr	r2, [pc, #44]	@ (80058ac <FLASH_Program_Byte+0x40>)
 800587e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005882:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005884:	4b09      	ldr	r3, [pc, #36]	@ (80058ac <FLASH_Program_Byte+0x40>)
 8005886:	4a09      	ldr	r2, [pc, #36]	@ (80058ac <FLASH_Program_Byte+0x40>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800588c:	4b07      	ldr	r3, [pc, #28]	@ (80058ac <FLASH_Program_Byte+0x40>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	4a06      	ldr	r2, [pc, #24]	@ (80058ac <FLASH_Program_Byte+0x40>)
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	701a      	strb	r2, [r3, #0]
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40023c00 	.word	0x40023c00

080058b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80058b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80058c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f043 0310 	orr.w	r3, r3, #16
 80058c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 80058ca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80058cc:	4b29      	ldr	r3, [pc, #164]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 80058ce:	2210      	movs	r2, #16
 80058d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80058d2:	4b28      	ldr	r3, [pc, #160]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80058de:	4b26      	ldr	r3, [pc, #152]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f043 0308 	orr.w	r3, r3, #8
 80058e6:	4a24      	ldr	r2, [pc, #144]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 80058e8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80058ea:	4b22      	ldr	r3, [pc, #136]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 80058ec:	2220      	movs	r2, #32
 80058ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80058f0:	4b20      	ldr	r3, [pc, #128]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d008      	beq.n	800590e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80058fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f043 0304 	orr.w	r3, r3, #4
 8005904:	4a1c      	ldr	r2, [pc, #112]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 8005906:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005908:	4b1a      	ldr	r3, [pc, #104]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 800590a:	2240      	movs	r2, #64	@ 0x40
 800590c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800590e:	4b19      	ldr	r3, [pc, #100]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800591a:	4b17      	ldr	r3, [pc, #92]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f043 0302 	orr.w	r3, r3, #2
 8005922:	4a15      	ldr	r2, [pc, #84]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 8005924:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005926:	4b13      	ldr	r3, [pc, #76]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 8005928:	2280      	movs	r2, #128	@ 0x80
 800592a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800592c:	4b11      	ldr	r3, [pc, #68]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d009      	beq.n	800594c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005938:	4b0f      	ldr	r3, [pc, #60]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	4a0d      	ldr	r2, [pc, #52]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 8005942:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005944:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 8005946:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800594a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800594c:	4b09      	ldr	r3, [pc, #36]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005958:	4b07      	ldr	r3, [pc, #28]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	f043 0320 	orr.w	r3, r3, #32
 8005960:	4a05      	ldr	r2, [pc, #20]	@ (8005978 <FLASH_SetErrorCode+0xc8>)
 8005962:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005964:	4b03      	ldr	r3, [pc, #12]	@ (8005974 <FLASH_SetErrorCode+0xc4>)
 8005966:	2202      	movs	r2, #2
 8005968:	60da      	str	r2, [r3, #12]
  }
}
 800596a:	bf00      	nop
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	40023c00 	.word	0x40023c00
 8005978:	20001b0c 	.word	0x20001b0c

0800597c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800598e:	4b31      	ldr	r3, [pc, #196]	@ (8005a54 <HAL_FLASHEx_Erase+0xd8>)
 8005990:	7e1b      	ldrb	r3, [r3, #24]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_FLASHEx_Erase+0x1e>
 8005996:	2302      	movs	r3, #2
 8005998:	e058      	b.n	8005a4c <HAL_FLASHEx_Erase+0xd0>
 800599a:	4b2e      	ldr	r3, [pc, #184]	@ (8005a54 <HAL_FLASHEx_Erase+0xd8>)
 800599c:	2201      	movs	r2, #1
 800599e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059a4:	f7ff feaa 	bl	80056fc <FLASH_WaitForLastOperation>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d148      	bne.n	8005a44 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	f04f 32ff 	mov.w	r2, #4294967295
 80059b8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d115      	bne.n	80059ee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f000 f844 	bl	8005a5c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059d8:	f7ff fe90 	bl	80056fc <FLASH_WaitForLastOperation>
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80059e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a58 <HAL_FLASHEx_Erase+0xdc>)
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a58 <HAL_FLASHEx_Erase+0xdc>)
 80059e6:	f023 0304 	bic.w	r3, r3, #4
 80059ea:	6113      	str	r3, [r2, #16]
 80059ec:	e028      	b.n	8005a40 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	e01c      	b.n	8005a30 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	4619      	mov	r1, r3
 80059fe:	68b8      	ldr	r0, [r7, #8]
 8005a00:	f000 f850 	bl	8005aa4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a08:	f7ff fe78 	bl	80056fc <FLASH_WaitForLastOperation>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005a10:	4b11      	ldr	r3, [pc, #68]	@ (8005a58 <HAL_FLASHEx_Erase+0xdc>)
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	4a10      	ldr	r2, [pc, #64]	@ (8005a58 <HAL_FLASHEx_Erase+0xdc>)
 8005a16:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8005a1a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	601a      	str	r2, [r3, #0]
          break;
 8005a28:	e00a      	b.n	8005a40 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4413      	add	r3, r2
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d3da      	bcc.n	80059f6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a40:	f000 f878 	bl	8005b34 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a44:	4b03      	ldr	r3, [pc, #12]	@ (8005a54 <HAL_FLASHEx_Erase+0xd8>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	761a      	strb	r2, [r3, #24]

  return status;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20001b0c 	.word	0x20001b0c
 8005a58:	40023c00 	.word	0x40023c00

08005a5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	6039      	str	r1, [r7, #0]
 8005a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a68:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <FLASH_MassErase+0x44>)
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8005aa0 <FLASH_MassErase+0x44>)
 8005a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005a74:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <FLASH_MassErase+0x44>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	4a09      	ldr	r2, [pc, #36]	@ (8005aa0 <FLASH_MassErase+0x44>)
 8005a7a:	f043 0304 	orr.w	r3, r3, #4
 8005a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005a80:	4b07      	ldr	r3, [pc, #28]	@ (8005aa0 <FLASH_MassErase+0x44>)
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	4a05      	ldr	r2, [pc, #20]	@ (8005aa0 <FLASH_MassErase+0x44>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a90:	6113      	str	r3, [r2, #16]
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40023c00 	.word	0x40023c00

08005aa4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e010      	b.n	8005ae2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d103      	bne.n	8005ace <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005ac6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e009      	b.n	8005ae2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d103      	bne.n	8005adc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e002      	b.n	8005ae2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005adc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ae2:	4b13      	ldr	r3, [pc, #76]	@ (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	4a12      	ldr	r2, [pc, #72]	@ (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005aee:	4b10      	ldr	r3, [pc, #64]	@ (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	490f      	ldr	r1, [pc, #60]	@ (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005afa:	4b0d      	ldr	r3, [pc, #52]	@ (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	4a0c      	ldr	r2, [pc, #48]	@ (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005b00:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005b06:	4b0a      	ldr	r3, [pc, #40]	@ (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	4a07      	ldr	r2, [pc, #28]	@ (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005b12:	f043 0302 	orr.w	r3, r3, #2
 8005b16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005b18:	4b05      	ldr	r3, [pc, #20]	@ (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	4a04      	ldr	r2, [pc, #16]	@ (8005b30 <FLASH_Erase_Sector+0x8c>)
 8005b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b22:	6113      	str	r3, [r2, #16]
}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	40023c00 	.word	0x40023c00

08005b34 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005b38:	4b20      	ldr	r3, [pc, #128]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d017      	beq.n	8005b74 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b44:	4b1d      	ldr	r3, [pc, #116]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b4a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b4e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b50:	4b1a      	ldr	r3, [pc, #104]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a19      	ldr	r2, [pc, #100]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b56:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	4b17      	ldr	r3, [pc, #92]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a16      	ldr	r2, [pc, #88]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b66:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b68:	4b14      	ldr	r3, [pc, #80]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a13      	ldr	r2, [pc, #76]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b72:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005b74:	4b11      	ldr	r3, [pc, #68]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d017      	beq.n	8005bb0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b80:	4b0e      	ldr	r3, [pc, #56]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a0d      	ldr	r2, [pc, #52]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b8a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a0a      	ldr	r2, [pc, #40]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	4b08      	ldr	r3, [pc, #32]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a07      	ldr	r2, [pc, #28]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ba2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a04      	ldr	r2, [pc, #16]	@ (8005bbc <FLASH_FlushCaches+0x88>)
 8005baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bae:	6013      	str	r3, [r2, #0]
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40023c00 	.word	0x40023c00

08005bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b089      	sub	sp, #36	@ 0x24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	e159      	b.n	8005e90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bdc:	2201      	movs	r2, #1
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4013      	ands	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	f040 8148 	bne.w	8005e8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d005      	beq.n	8005c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d130      	bne.n	8005c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c48:	2201      	movs	r2, #1
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4013      	ands	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 0201 	and.w	r2, r3, #1
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d017      	beq.n	8005cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	43db      	mvns	r3, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4013      	ands	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d123      	bne.n	8005d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	08da      	lsrs	r2, r3, #3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3208      	adds	r2, #8
 8005cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	220f      	movs	r2, #15
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	08da      	lsrs	r2, r3, #3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3208      	adds	r2, #8
 8005cfe:	69b9      	ldr	r1, [r7, #24]
 8005d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	2203      	movs	r2, #3
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 0203 	and.w	r2, r3, #3
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80a2 	beq.w	8005e8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b57      	ldr	r3, [pc, #348]	@ (8005ea8 <HAL_GPIO_Init+0x2e8>)
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4e:	4a56      	ldr	r2, [pc, #344]	@ (8005ea8 <HAL_GPIO_Init+0x2e8>)
 8005d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d56:	4b54      	ldr	r3, [pc, #336]	@ (8005ea8 <HAL_GPIO_Init+0x2e8>)
 8005d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d62:	4a52      	ldr	r2, [pc, #328]	@ (8005eac <HAL_GPIO_Init+0x2ec>)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	089b      	lsrs	r3, r3, #2
 8005d68:	3302      	adds	r3, #2
 8005d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	220f      	movs	r2, #15
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a49      	ldr	r2, [pc, #292]	@ (8005eb0 <HAL_GPIO_Init+0x2f0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d019      	beq.n	8005dc2 <HAL_GPIO_Init+0x202>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a48      	ldr	r2, [pc, #288]	@ (8005eb4 <HAL_GPIO_Init+0x2f4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <HAL_GPIO_Init+0x1fe>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a47      	ldr	r2, [pc, #284]	@ (8005eb8 <HAL_GPIO_Init+0x2f8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00d      	beq.n	8005dba <HAL_GPIO_Init+0x1fa>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a46      	ldr	r2, [pc, #280]	@ (8005ebc <HAL_GPIO_Init+0x2fc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d007      	beq.n	8005db6 <HAL_GPIO_Init+0x1f6>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a45      	ldr	r2, [pc, #276]	@ (8005ec0 <HAL_GPIO_Init+0x300>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d101      	bne.n	8005db2 <HAL_GPIO_Init+0x1f2>
 8005dae:	2304      	movs	r3, #4
 8005db0:	e008      	b.n	8005dc4 <HAL_GPIO_Init+0x204>
 8005db2:	2307      	movs	r3, #7
 8005db4:	e006      	b.n	8005dc4 <HAL_GPIO_Init+0x204>
 8005db6:	2303      	movs	r3, #3
 8005db8:	e004      	b.n	8005dc4 <HAL_GPIO_Init+0x204>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e002      	b.n	8005dc4 <HAL_GPIO_Init+0x204>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <HAL_GPIO_Init+0x204>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	f002 0203 	and.w	r2, r2, #3
 8005dca:	0092      	lsls	r2, r2, #2
 8005dcc:	4093      	lsls	r3, r2
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dd4:	4935      	ldr	r1, [pc, #212]	@ (8005eac <HAL_GPIO_Init+0x2ec>)
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	3302      	adds	r3, #2
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005de2:	4b38      	ldr	r3, [pc, #224]	@ (8005ec4 <HAL_GPIO_Init+0x304>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	43db      	mvns	r3, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4013      	ands	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e06:	4a2f      	ldr	r2, [pc, #188]	@ (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e30:	4a24      	ldr	r2, [pc, #144]	@ (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e36:	4b23      	ldr	r3, [pc, #140]	@ (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4013      	ands	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e60:	4b18      	ldr	r3, [pc, #96]	@ (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e84:	4a0f      	ldr	r2, [pc, #60]	@ (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b0f      	cmp	r3, #15
 8005e94:	f67f aea2 	bls.w	8005bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	3724      	adds	r7, #36	@ 0x24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40013800 	.word	0x40013800
 8005eb0:	40020000 	.word	0x40020000
 8005eb4:	40020400 	.word	0x40020400
 8005eb8:	40020800 	.word	0x40020800
 8005ebc:	40020c00 	.word	0x40020c00
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40013c00 	.word	0x40013c00

08005ec8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e0bb      	b.n	800605c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	f040 80ab 	bne.w	8006056 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f00:	4a5c      	ldr	r2, [pc, #368]	@ (8006074 <HAL_GPIO_DeInit+0x1ac>)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	089b      	lsrs	r3, r3, #2
 8005f06:	3302      	adds	r3, #2
 8005f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	220f      	movs	r2, #15
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a54      	ldr	r2, [pc, #336]	@ (8006078 <HAL_GPIO_DeInit+0x1b0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d019      	beq.n	8005f5e <HAL_GPIO_DeInit+0x96>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a53      	ldr	r2, [pc, #332]	@ (800607c <HAL_GPIO_DeInit+0x1b4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d013      	beq.n	8005f5a <HAL_GPIO_DeInit+0x92>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a52      	ldr	r2, [pc, #328]	@ (8006080 <HAL_GPIO_DeInit+0x1b8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00d      	beq.n	8005f56 <HAL_GPIO_DeInit+0x8e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a51      	ldr	r2, [pc, #324]	@ (8006084 <HAL_GPIO_DeInit+0x1bc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d007      	beq.n	8005f52 <HAL_GPIO_DeInit+0x8a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a50      	ldr	r2, [pc, #320]	@ (8006088 <HAL_GPIO_DeInit+0x1c0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d101      	bne.n	8005f4e <HAL_GPIO_DeInit+0x86>
 8005f4a:	2304      	movs	r3, #4
 8005f4c:	e008      	b.n	8005f60 <HAL_GPIO_DeInit+0x98>
 8005f4e:	2307      	movs	r3, #7
 8005f50:	e006      	b.n	8005f60 <HAL_GPIO_DeInit+0x98>
 8005f52:	2303      	movs	r3, #3
 8005f54:	e004      	b.n	8005f60 <HAL_GPIO_DeInit+0x98>
 8005f56:	2302      	movs	r3, #2
 8005f58:	e002      	b.n	8005f60 <HAL_GPIO_DeInit+0x98>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <HAL_GPIO_DeInit+0x98>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	f002 0203 	and.w	r2, r2, #3
 8005f66:	0092      	lsls	r2, r2, #2
 8005f68:	4093      	lsls	r3, r2
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d132      	bne.n	8005fd6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005f70:	4b46      	ldr	r3, [pc, #280]	@ (800608c <HAL_GPIO_DeInit+0x1c4>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	43db      	mvns	r3, r3
 8005f78:	4944      	ldr	r1, [pc, #272]	@ (800608c <HAL_GPIO_DeInit+0x1c4>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005f7e:	4b43      	ldr	r3, [pc, #268]	@ (800608c <HAL_GPIO_DeInit+0x1c4>)
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	4941      	ldr	r1, [pc, #260]	@ (800608c <HAL_GPIO_DeInit+0x1c4>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005f8c:	4b3f      	ldr	r3, [pc, #252]	@ (800608c <HAL_GPIO_DeInit+0x1c4>)
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	43db      	mvns	r3, r3
 8005f94:	493d      	ldr	r1, [pc, #244]	@ (800608c <HAL_GPIO_DeInit+0x1c4>)
 8005f96:	4013      	ands	r3, r2
 8005f98:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800608c <HAL_GPIO_DeInit+0x1c4>)
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	493a      	ldr	r1, [pc, #232]	@ (800608c <HAL_GPIO_DeInit+0x1c4>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	220f      	movs	r2, #15
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8006074 <HAL_GPIO_DeInit+0x1ac>)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	089b      	lsrs	r3, r3, #2
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	43da      	mvns	r2, r3
 8005fc8:	482a      	ldr	r0, [pc, #168]	@ (8006074 <HAL_GPIO_DeInit+0x1ac>)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	089b      	lsrs	r3, r3, #2
 8005fce:	400a      	ands	r2, r1
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	2103      	movs	r1, #3
 8005fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	401a      	ands	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	08da      	lsrs	r2, r3, #3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3208      	adds	r2, #8
 8005ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	220f      	movs	r2, #15
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	43db      	mvns	r3, r3
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	08d2      	lsrs	r2, r2, #3
 800600c:	4019      	ands	r1, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3208      	adds	r2, #8
 8006012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	2103      	movs	r1, #3
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	2101      	movs	r1, #1
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	43db      	mvns	r3, r3
 800603a:	401a      	ands	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	2103      	movs	r1, #3
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	43db      	mvns	r3, r3
 8006050:	401a      	ands	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	3301      	adds	r3, #1
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b0f      	cmp	r3, #15
 8006060:	f67f af40 	bls.w	8005ee4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40013800 	.word	0x40013800
 8006078:	40020000 	.word	0x40020000
 800607c:	40020400 	.word	0x40020400
 8006080:	40020800 	.word	0x40020800
 8006084:	40020c00 	.word	0x40020c00
 8006088:	40021000 	.word	0x40021000
 800608c:	40013c00 	.word	0x40013c00

08006090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	887b      	ldrh	r3, [r7, #2]
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
 80060ac:	e001      	b.n	80060b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	807b      	strh	r3, [r7, #2]
 80060cc:	4613      	mov	r3, r2
 80060ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060d0:	787b      	ldrb	r3, [r7, #1]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060d6:	887a      	ldrh	r2, [r7, #2]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060dc:	e003      	b.n	80060e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060de:	887b      	ldrh	r3, [r7, #2]
 80060e0:	041a      	lsls	r2, r3, #16
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	619a      	str	r2, [r3, #24]
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80060fe:	4b08      	ldr	r3, [pc, #32]	@ (8006120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006100:	695a      	ldr	r2, [r3, #20]
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	4013      	ands	r3, r2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d006      	beq.n	8006118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800610a:	4a05      	ldr	r2, [pc, #20]	@ (8006120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fd fa3e 	bl	8003594 <HAL_GPIO_EXTI_Callback>
  }
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40013c00 	.word	0x40013c00

08006124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e12b      	b.n	800638e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fd fb1c 	bl	8003788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2224      	movs	r2, #36	@ 0x24
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006176:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006186:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006188:	f003 f8f2 	bl	8009370 <HAL_RCC_GetPCLK1Freq>
 800618c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	4a81      	ldr	r2, [pc, #516]	@ (8006398 <HAL_I2C_Init+0x274>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d807      	bhi.n	80061a8 <HAL_I2C_Init+0x84>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a80      	ldr	r2, [pc, #512]	@ (800639c <HAL_I2C_Init+0x278>)
 800619c:	4293      	cmp	r3, r2
 800619e:	bf94      	ite	ls
 80061a0:	2301      	movls	r3, #1
 80061a2:	2300      	movhi	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	e006      	b.n	80061b6 <HAL_I2C_Init+0x92>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a7d      	ldr	r2, [pc, #500]	@ (80063a0 <HAL_I2C_Init+0x27c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	bf94      	ite	ls
 80061b0:	2301      	movls	r3, #1
 80061b2:	2300      	movhi	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e0e7      	b.n	800638e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a78      	ldr	r2, [pc, #480]	@ (80063a4 <HAL_I2C_Init+0x280>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	0c9b      	lsrs	r3, r3, #18
 80061c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4a6a      	ldr	r2, [pc, #424]	@ (8006398 <HAL_I2C_Init+0x274>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d802      	bhi.n	80061f8 <HAL_I2C_Init+0xd4>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	3301      	adds	r3, #1
 80061f6:	e009      	b.n	800620c <HAL_I2C_Init+0xe8>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	4a69      	ldr	r2, [pc, #420]	@ (80063a8 <HAL_I2C_Init+0x284>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	099b      	lsrs	r3, r3, #6
 800620a:	3301      	adds	r3, #1
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	430b      	orrs	r3, r1
 8006212:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800621e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	495c      	ldr	r1, [pc, #368]	@ (8006398 <HAL_I2C_Init+0x274>)
 8006228:	428b      	cmp	r3, r1
 800622a:	d819      	bhi.n	8006260 <HAL_I2C_Init+0x13c>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1e59      	subs	r1, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	fbb1 f3f3 	udiv	r3, r1, r3
 800623a:	1c59      	adds	r1, r3, #1
 800623c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006240:	400b      	ands	r3, r1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <HAL_I2C_Init+0x138>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	1e59      	subs	r1, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	fbb1 f3f3 	udiv	r3, r1, r3
 8006254:	3301      	adds	r3, #1
 8006256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800625a:	e051      	b.n	8006300 <HAL_I2C_Init+0x1dc>
 800625c:	2304      	movs	r3, #4
 800625e:	e04f      	b.n	8006300 <HAL_I2C_Init+0x1dc>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d111      	bne.n	800628c <HAL_I2C_Init+0x168>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	1e58      	subs	r0, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6859      	ldr	r1, [r3, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	440b      	add	r3, r1
 8006276:	fbb0 f3f3 	udiv	r3, r0, r3
 800627a:	3301      	adds	r3, #1
 800627c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e012      	b.n	80062b2 <HAL_I2C_Init+0x18e>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	1e58      	subs	r0, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6859      	ldr	r1, [r3, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	0099      	lsls	r1, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	fbb0 f3f3 	udiv	r3, r0, r3
 80062a2:	3301      	adds	r3, #1
 80062a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bf0c      	ite	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	2300      	movne	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_I2C_Init+0x196>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e022      	b.n	8006300 <HAL_I2C_Init+0x1dc>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10e      	bne.n	80062e0 <HAL_I2C_Init+0x1bc>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1e58      	subs	r0, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6859      	ldr	r1, [r3, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	440b      	add	r3, r1
 80062d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80062d4:	3301      	adds	r3, #1
 80062d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062de:	e00f      	b.n	8006300 <HAL_I2C_Init+0x1dc>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1e58      	subs	r0, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	0099      	lsls	r1, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f6:	3301      	adds	r3, #1
 80062f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	6809      	ldr	r1, [r1, #0]
 8006304:	4313      	orrs	r3, r2
 8006306:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69da      	ldr	r2, [r3, #28]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800632e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6911      	ldr	r1, [r2, #16]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68d2      	ldr	r2, [r2, #12]
 800633a:	4311      	orrs	r1, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	430b      	orrs	r3, r1
 8006342:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695a      	ldr	r2, [r3, #20]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	000186a0 	.word	0x000186a0
 800639c:	001e847f 	.word	0x001e847f
 80063a0:	003d08ff 	.word	0x003d08ff
 80063a4:	431bde83 	.word	0x431bde83
 80063a8:	10624dd3 	.word	0x10624dd3

080063ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e021      	b.n	8006402 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2224      	movs	r2, #36	@ 0x24
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fd fa1e 	bl	8003818 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af02      	add	r7, sp, #8
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	607a      	str	r2, [r7, #4]
 8006416:	461a      	mov	r2, r3
 8006418:	460b      	mov	r3, r1
 800641a:	817b      	strh	r3, [r7, #10]
 800641c:	4613      	mov	r3, r2
 800641e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006420:	f7fd fe6a 	bl	80040f8 <HAL_GetTick>
 8006424:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b20      	cmp	r3, #32
 8006430:	f040 80e0 	bne.w	80065f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	2319      	movs	r3, #25
 800643a:	2201      	movs	r2, #1
 800643c:	4970      	ldr	r1, [pc, #448]	@ (8006600 <HAL_I2C_Master_Transmit+0x1f4>)
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fd92 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800644a:	2302      	movs	r3, #2
 800644c:	e0d3      	b.n	80065f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_I2C_Master_Transmit+0x50>
 8006458:	2302      	movs	r3, #2
 800645a:	e0cc      	b.n	80065f6 <HAL_I2C_Master_Transmit+0x1ea>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b01      	cmp	r3, #1
 8006470:	d007      	beq.n	8006482 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0201 	orr.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006490:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2221      	movs	r2, #33	@ 0x21
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2210      	movs	r2, #16
 800649e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	893a      	ldrh	r2, [r7, #8]
 80064b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a50      	ldr	r2, [pc, #320]	@ (8006604 <HAL_I2C_Master_Transmit+0x1f8>)
 80064c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064c4:	8979      	ldrh	r1, [r7, #10]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	6a3a      	ldr	r2, [r7, #32]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 fbfc 	bl	8006cc8 <I2C_MasterRequestWrite>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e08d      	b.n	80065f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064da:	2300      	movs	r3, #0
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80064f0:	e066      	b.n	80065c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	6a39      	ldr	r1, [r7, #32]
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 fe50 	bl	800719c <I2C_WaitOnTXEFlagUntilTimeout>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00d      	beq.n	800651e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	2b04      	cmp	r3, #4
 8006508:	d107      	bne.n	800651a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e06b      	b.n	80065f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006522:	781a      	ldrb	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b04      	cmp	r3, #4
 800655a:	d11b      	bne.n	8006594 <HAL_I2C_Master_Transmit+0x188>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006560:	2b00      	cmp	r3, #0
 8006562:	d017      	beq.n	8006594 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	6a39      	ldr	r1, [r7, #32]
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fe47 	bl	800722c <I2C_WaitOnBTFFlagUntilTimeout>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00d      	beq.n	80065c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d107      	bne.n	80065bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e01a      	b.n	80065f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d194      	bne.n	80064f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	e000      	b.n	80065f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80065f4:	2302      	movs	r3, #2
  }
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	00100002 	.word	0x00100002
 8006604:	ffff0000 	.word	0xffff0000

08006608 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08c      	sub	sp, #48	@ 0x30
 800660c:	af02      	add	r7, sp, #8
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	461a      	mov	r2, r3
 8006614:	460b      	mov	r3, r1
 8006616:	817b      	strh	r3, [r7, #10]
 8006618:	4613      	mov	r3, r2
 800661a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800661c:	f7fd fd6c 	bl	80040f8 <HAL_GetTick>
 8006620:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b20      	cmp	r3, #32
 800662c:	f040 8217 	bne.w	8006a5e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	2319      	movs	r3, #25
 8006636:	2201      	movs	r2, #1
 8006638:	497c      	ldr	r1, [pc, #496]	@ (800682c <HAL_I2C_Master_Receive+0x224>)
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 fc94 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006646:	2302      	movs	r3, #2
 8006648:	e20a      	b.n	8006a60 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_I2C_Master_Receive+0x50>
 8006654:	2302      	movs	r3, #2
 8006656:	e203      	b.n	8006a60 <HAL_I2C_Master_Receive+0x458>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b01      	cmp	r3, #1
 800666c:	d007      	beq.n	800667e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0201 	orr.w	r2, r2, #1
 800667c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800668c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2222      	movs	r2, #34	@ 0x22
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2210      	movs	r2, #16
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	893a      	ldrh	r2, [r7, #8]
 80066ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4a5c      	ldr	r2, [pc, #368]	@ (8006830 <HAL_I2C_Master_Receive+0x228>)
 80066be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80066c0:	8979      	ldrh	r1, [r7, #10]
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 fb80 	bl	8006dcc <I2C_MasterRequestRead>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e1c4      	b.n	8006a60 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d113      	bne.n	8006706 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066de:	2300      	movs	r3, #0
 80066e0:	623b      	str	r3, [r7, #32]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	623b      	str	r3, [r7, #32]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	623b      	str	r3, [r7, #32]
 80066f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e198      	b.n	8006a38 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800670a:	2b01      	cmp	r3, #1
 800670c:	d11b      	bne.n	8006746 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800671c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	61fb      	str	r3, [r7, #28]
 8006732:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	e178      	b.n	8006a38 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674a:	2b02      	cmp	r3, #2
 800674c:	d11b      	bne.n	8006786 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800675c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800676c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800676e:	2300      	movs	r3, #0
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	e158      	b.n	8006a38 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	617b      	str	r3, [r7, #20]
 80067aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80067ac:	e144      	b.n	8006a38 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	f200 80f1 	bhi.w	800699a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d123      	bne.n	8006808 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fd79 	bl	80072bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e145      	b.n	8006a60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006806:	e117      	b.n	8006a38 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800680c:	2b02      	cmp	r3, #2
 800680e:	d14e      	bne.n	80068ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	2200      	movs	r2, #0
 8006818:	4906      	ldr	r1, [pc, #24]	@ (8006834 <HAL_I2C_Master_Receive+0x22c>)
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 fba4 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d008      	beq.n	8006838 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e11a      	b.n	8006a60 <HAL_I2C_Master_Receive+0x458>
 800682a:	bf00      	nop
 800682c:	00100002 	.word	0x00100002
 8006830:	ffff0000 	.word	0xffff0000
 8006834:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068ac:	e0c4      	b.n	8006a38 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	2200      	movs	r2, #0
 80068b6:	496c      	ldr	r1, [pc, #432]	@ (8006a68 <HAL_I2C_Master_Receive+0x460>)
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 fb55 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0cb      	b.n	8006a60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691a      	ldr	r2, [r3, #16]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	2200      	movs	r2, #0
 8006912:	4955      	ldr	r1, [pc, #340]	@ (8006a68 <HAL_I2C_Master_Receive+0x460>)
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fb27 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e09d      	b.n	8006a60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006998:	e04e      	b.n	8006a38 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800699a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800699c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fc8c 	bl	80072bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e058      	b.n	8006a60 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d124      	bne.n	8006a38 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d107      	bne.n	8006a06 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a04:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f47f aeb6 	bne.w	80067ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e000      	b.n	8006a60 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006a5e:	2302      	movs	r3, #2
  }
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3728      	adds	r7, #40	@ 0x28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	00010004 	.word	0x00010004

08006a6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08a      	sub	sp, #40	@ 0x28
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	607a      	str	r2, [r7, #4]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006a7c:	f7fd fb3c 	bl	80040f8 <HAL_GetTick>
 8006a80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	f040 8111 	bne.w	8006cb6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	2319      	movs	r3, #25
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	4988      	ldr	r1, [pc, #544]	@ (8006cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fa62 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e104      	b.n	8006cb8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_I2C_IsDeviceReady+0x50>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e0fd      	b.n	8006cb8 <HAL_I2C_IsDeviceReady+0x24c>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d007      	beq.n	8006ae2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0201 	orr.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2224      	movs	r2, #36	@ 0x24
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4a70      	ldr	r2, [pc, #448]	@ (8006cc4 <HAL_I2C_IsDeviceReady+0x258>)
 8006b04:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 fa20 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00d      	beq.n	8006b4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b3c:	d103      	bne.n	8006b46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b44:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e0b6      	b.n	8006cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b4a:	897b      	ldrh	r3, [r7, #10]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006b5a:	f7fd facd 	bl	80040f8 <HAL_GetTick>
 8006b5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	bf0c      	ite	eq
 8006b6e:	2301      	moveq	r3, #1
 8006b70:	2300      	movne	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b84:	bf0c      	ite	eq
 8006b86:	2301      	moveq	r3, #1
 8006b88:	2300      	movne	r3, #0
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006b8e:	e025      	b.n	8006bdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b90:	f7fd fab2 	bl	80040f8 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d302      	bcc.n	8006ba6 <HAL_I2C_IsDeviceReady+0x13a>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d103      	bne.n	8006bae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	22a0      	movs	r2, #160	@ 0xa0
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	bf0c      	ite	eq
 8006bbc:	2301      	moveq	r3, #1
 8006bbe:	2300      	movne	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd2:	bf0c      	ite	eq
 8006bd4:	2301      	moveq	r3, #1
 8006bd6:	2300      	movne	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2ba0      	cmp	r3, #160	@ 0xa0
 8006be6:	d005      	beq.n	8006bf4 <HAL_I2C_IsDeviceReady+0x188>
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d102      	bne.n	8006bf4 <HAL_I2C_IsDeviceReady+0x188>
 8006bee:	7dbb      	ldrb	r3, [r7, #22]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0cd      	beq.n	8006b90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d129      	bne.n	8006c5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	2319      	movs	r3, #25
 8006c36:	2201      	movs	r2, #1
 8006c38:	4921      	ldr	r1, [pc, #132]	@ (8006cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 f994 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e036      	b.n	8006cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e02c      	b.n	8006cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2319      	movs	r3, #25
 8006c7e:	2201      	movs	r2, #1
 8006c80:	490f      	ldr	r1, [pc, #60]	@ (8006cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f970 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e012      	b.n	8006cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	3301      	adds	r3, #1
 8006c96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	f4ff af32 	bcc.w	8006b06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006cb6:	2302      	movs	r3, #2
  }
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3720      	adds	r7, #32
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	00100002 	.word	0x00100002
 8006cc4:	ffff0000 	.word	0xffff0000

08006cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	607a      	str	r2, [r7, #4]
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d006      	beq.n	8006cf2 <I2C_MasterRequestWrite+0x2a>
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d003      	beq.n	8006cf2 <I2C_MasterRequestWrite+0x2a>
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006cf0:	d108      	bne.n	8006d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	e00b      	b.n	8006d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d08:	2b12      	cmp	r3, #18
 8006d0a:	d107      	bne.n	8006d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 f91d 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00d      	beq.n	8006d50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d42:	d103      	bne.n	8006d4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e035      	b.n	8006dbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d58:	d108      	bne.n	8006d6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d5a:	897b      	ldrh	r3, [r7, #10]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006d68:	611a      	str	r2, [r3, #16]
 8006d6a:	e01b      	b.n	8006da4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d6c:	897b      	ldrh	r3, [r7, #10]
 8006d6e:	11db      	asrs	r3, r3, #7
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f003 0306 	and.w	r3, r3, #6
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	f063 030f 	orn	r3, r3, #15
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	490e      	ldr	r1, [pc, #56]	@ (8006dc4 <I2C_MasterRequestWrite+0xfc>)
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f966 	bl	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e010      	b.n	8006dbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d9a:	897b      	ldrh	r3, [r7, #10]
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4907      	ldr	r1, [pc, #28]	@ (8006dc8 <I2C_MasterRequestWrite+0x100>)
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f956 	bl	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	00010008 	.word	0x00010008
 8006dc8:	00010002 	.word	0x00010002

08006dcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b088      	sub	sp, #32
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006df0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d006      	beq.n	8006e06 <I2C_MasterRequestRead+0x3a>
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d003      	beq.n	8006e06 <I2C_MasterRequestRead+0x3a>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e04:	d108      	bne.n	8006e18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e00b      	b.n	8006e30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1c:	2b11      	cmp	r3, #17
 8006e1e:	d107      	bne.n	8006e30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f893 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00d      	beq.n	8006e64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e56:	d103      	bne.n	8006e60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e079      	b.n	8006f58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e6c:	d108      	bne.n	8006e80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e6e:	897b      	ldrh	r3, [r7, #10]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	611a      	str	r2, [r3, #16]
 8006e7e:	e05f      	b.n	8006f40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e80:	897b      	ldrh	r3, [r7, #10]
 8006e82:	11db      	asrs	r3, r3, #7
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	f003 0306 	and.w	r3, r3, #6
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f063 030f 	orn	r3, r3, #15
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	4930      	ldr	r1, [pc, #192]	@ (8006f60 <I2C_MasterRequestRead+0x194>)
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 f8dc 	bl	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e054      	b.n	8006f58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006eae:	897b      	ldrh	r3, [r7, #10]
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	4929      	ldr	r1, [pc, #164]	@ (8006f64 <I2C_MasterRequestRead+0x198>)
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f8cc 	bl	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e044      	b.n	8006f58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ef2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 f831 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00d      	beq.n	8006f28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f1a:	d103      	bne.n	8006f24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f22:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e017      	b.n	8006f58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f28:	897b      	ldrh	r3, [r7, #10]
 8006f2a:	11db      	asrs	r3, r3, #7
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f003 0306 	and.w	r3, r3, #6
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	f063 030e 	orn	r3, r3, #14
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4907      	ldr	r1, [pc, #28]	@ (8006f64 <I2C_MasterRequestRead+0x198>)
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 f888 	bl	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	00010008 	.word	0x00010008
 8006f64:	00010002 	.word	0x00010002

08006f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	4613      	mov	r3, r2
 8006f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f78:	e048      	b.n	800700c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f80:	d044      	beq.n	800700c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f82:	f7fd f8b9 	bl	80040f8 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d302      	bcc.n	8006f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d139      	bne.n	800700c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	0c1b      	lsrs	r3, r3, #16
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d10d      	bne.n	8006fbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	43da      	mvns	r2, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4013      	ands	r3, r2
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf0c      	ite	eq
 8006fb4:	2301      	moveq	r3, #1
 8006fb6:	2300      	movne	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	e00c      	b.n	8006fd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	43da      	mvns	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bf0c      	ite	eq
 8006fd0:	2301      	moveq	r3, #1
 8006fd2:	2300      	movne	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d116      	bne.n	800700c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	f043 0220 	orr.w	r2, r3, #32
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e023      	b.n	8007054 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b01      	cmp	r3, #1
 8007014:	d10d      	bne.n	8007032 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	43da      	mvns	r2, r3
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	4013      	ands	r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	bf0c      	ite	eq
 8007028:	2301      	moveq	r3, #1
 800702a:	2300      	movne	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	e00c      	b.n	800704c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	43da      	mvns	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4013      	ands	r3, r2
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	bf0c      	ite	eq
 8007044:	2301      	moveq	r3, #1
 8007046:	2300      	movne	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	429a      	cmp	r2, r3
 8007050:	d093      	beq.n	8006f7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800706a:	e071      	b.n	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800707a:	d123      	bne.n	80070c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800708a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b0:	f043 0204 	orr.w	r2, r3, #4
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e067      	b.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ca:	d041      	beq.n	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070cc:	f7fd f814 	bl	80040f8 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d302      	bcc.n	80070e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d136      	bne.n	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	0c1b      	lsrs	r3, r3, #16
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10c      	bne.n	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	43da      	mvns	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4013      	ands	r3, r2
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bf14      	ite	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	2300      	moveq	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	e00b      	b.n	800711e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	43da      	mvns	r2, r3
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4013      	ands	r3, r2
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	bf14      	ite	ne
 8007118:	2301      	movne	r3, #1
 800711a:	2300      	moveq	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d016      	beq.n	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713c:	f043 0220 	orr.w	r2, r3, #32
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e021      	b.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	0c1b      	lsrs	r3, r3, #16
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	d10c      	bne.n	8007174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	43da      	mvns	r2, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4013      	ands	r3, r2
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	bf14      	ite	ne
 800716c:	2301      	movne	r3, #1
 800716e:	2300      	moveq	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	e00b      	b.n	800718c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	43da      	mvns	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4013      	ands	r3, r2
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	bf14      	ite	ne
 8007186:	2301      	movne	r3, #1
 8007188:	2300      	moveq	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	f47f af6d 	bne.w	800706c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071a8:	e034      	b.n	8007214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f8e3 	bl	8007376 <I2C_IsAcknowledgeFailed>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e034      	b.n	8007224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c0:	d028      	beq.n	8007214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fc ff99 	bl	80040f8 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d11d      	bne.n	8007214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e2:	2b80      	cmp	r3, #128	@ 0x80
 80071e4:	d016      	beq.n	8007214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e007      	b.n	8007224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800721e:	2b80      	cmp	r3, #128	@ 0x80
 8007220:	d1c3      	bne.n	80071aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007238:	e034      	b.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f89b 	bl	8007376 <I2C_IsAcknowledgeFailed>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e034      	b.n	80072b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d028      	beq.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007252:	f7fc ff51 	bl	80040f8 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d11d      	bne.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b04      	cmp	r3, #4
 8007274:	d016      	beq.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007290:	f043 0220 	orr.w	r2, r3, #32
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e007      	b.n	80072b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d1c3      	bne.n	800723a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072c8:	e049      	b.n	800735e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d119      	bne.n	800730c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0210 	mvn.w	r2, #16
 80072e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e030      	b.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730c:	f7fc fef4 	bl	80040f8 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	429a      	cmp	r2, r3
 800731a:	d302      	bcc.n	8007322 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11d      	bne.n	800735e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732c:	2b40      	cmp	r3, #64	@ 0x40
 800732e:	d016      	beq.n	800735e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	f043 0220 	orr.w	r2, r3, #32
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e007      	b.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007368:	2b40      	cmp	r3, #64	@ 0x40
 800736a:	d1ae      	bne.n	80072ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800738c:	d11b      	bne.n	80073c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007396:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f043 0204 	orr.w	r2, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e034      	b.n	8007450 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80073ee:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f245 5255 	movw	r2, #21845	@ 0x5555
 80073f8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6852      	ldr	r2, [r2, #4]
 8007402:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6892      	ldr	r2, [r2, #8]
 800740c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800740e:	f7fc fe73 	bl	80040f8 <HAL_GetTick>
 8007412:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007414:	e00f      	b.n	8007436 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007416:	f7fc fe6f 	bl	80040f8 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b31      	cmp	r3, #49	@ 0x31
 8007422:	d908      	bls.n	8007436 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e00c      	b.n	8007450 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0303 	and.w	r3, r3, #3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e8      	bne.n	8007416 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800744c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007468:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af02      	add	r7, sp, #8
 800747e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e101      	b.n	800768e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d106      	bne.n	80074aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f015 fdc9 	bl	801d03c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2203      	movs	r2, #3
 80074ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074b8:	d102      	bne.n	80074c0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f006 fd4e 	bl	800df66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7c1a      	ldrb	r2, [r3, #16]
 80074d2:	f88d 2000 	strb.w	r2, [sp]
 80074d6:	3304      	adds	r3, #4
 80074d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074da:	f006 fc2d 	bl	800dd38 <USB_CoreInit>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0ce      	b.n	800768e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2100      	movs	r1, #0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f006 fd46 	bl	800df88 <USB_SetCurrentMode>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e0bf      	b.n	800768e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
 8007512:	e04a      	b.n	80075aa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007514:	7bfa      	ldrb	r2, [r7, #15]
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	3315      	adds	r3, #21
 8007524:	2201      	movs	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007528:	7bfa      	ldrb	r2, [r7, #15]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	4613      	mov	r3, r2
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	3314      	adds	r3, #20
 8007538:	7bfa      	ldrb	r2, [r7, #15]
 800753a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800753c:	7bfa      	ldrb	r2, [r7, #15]
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	b298      	uxth	r0, r3
 8007542:	6879      	ldr	r1, [r7, #4]
 8007544:	4613      	mov	r3, r2
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	332e      	adds	r3, #46	@ 0x2e
 8007550:	4602      	mov	r2, r0
 8007552:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007554:	7bfa      	ldrb	r2, [r7, #15]
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	4613      	mov	r3, r2
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	440b      	add	r3, r1
 8007562:	3318      	adds	r3, #24
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007568:	7bfa      	ldrb	r2, [r7, #15]
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	4613      	mov	r3, r2
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	331c      	adds	r3, #28
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800757c:	7bfa      	ldrb	r2, [r7, #15]
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	4613      	mov	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	3320      	adds	r3, #32
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007590:	7bfa      	ldrb	r2, [r7, #15]
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	4613      	mov	r3, r2
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	3324      	adds	r3, #36	@ 0x24
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	3301      	adds	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	791b      	ldrb	r3, [r3, #4]
 80075ae:	7bfa      	ldrb	r2, [r7, #15]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d3af      	bcc.n	8007514 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	73fb      	strb	r3, [r7, #15]
 80075b8:	e044      	b.n	8007644 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80075ba:	7bfa      	ldrb	r2, [r7, #15]
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80075d0:	7bfa      	ldrb	r2, [r7, #15]
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	4613      	mov	r3, r2
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80075e2:	7bfa      	ldrb	r2, [r7, #15]
 80075e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80075e6:	7bfa      	ldrb	r2, [r7, #15]
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80075fc:	7bfa      	ldrb	r2, [r7, #15]
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	4613      	mov	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007612:	7bfa      	ldrb	r2, [r7, #15]
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007628:	7bfa      	ldrb	r2, [r7, #15]
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	4613      	mov	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	3301      	adds	r3, #1
 8007642:	73fb      	strb	r3, [r7, #15]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	791b      	ldrb	r3, [r3, #4]
 8007648:	7bfa      	ldrb	r2, [r7, #15]
 800764a:	429a      	cmp	r2, r3
 800764c:	d3b5      	bcc.n	80075ba <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7c1a      	ldrb	r2, [r3, #16]
 8007656:	f88d 2000 	strb.w	r2, [sp]
 800765a:	3304      	adds	r3, #4
 800765c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800765e:	f006 fcdf 	bl	800e020 <USB_DevInit>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e00c      	b.n	800768e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f007 fd72 	bl	800f170 <USB_DevDisconnect>

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e015      	b.n	80076d4 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2203      	movs	r2, #3
 80076ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f007 fcc5 	bl	800f044 <USB_StopDevice>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e007      	b.n	80076d4 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f015 fd0d 	bl	801d0e4 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_PCD_Start+0x1c>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e022      	b.n	800773e <HAL_PCD_Start+0x62>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007708:	2b00      	cmp	r3, #0
 800770a:	d009      	beq.n	8007720 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007710:	2b01      	cmp	r3, #1
 8007712:	d105      	bne.n	8007720 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007718:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	f006 fc0d 	bl	800df44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f007 fcfd 	bl	800f12e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_PCD_Stop+0x1c>
 800775e:	2302      	movs	r3, #2
 8007760:	e028      	b.n	80077b4 <HAL_PCD_Stop+0x6e>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4618      	mov	r0, r3
 8007770:	f006 fbf9 	bl	800df66 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4618      	mov	r0, r3
 800777a:	f007 fcf9 	bl	800f170 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2110      	movs	r1, #16
 8007784:	4618      	mov	r0, r3
 8007786:	f006 fdaf 	bl	800e2e8 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007792:	2b00      	cmp	r3, #0
 8007794:	d009      	beq.n	80077aa <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800779a:	2b01      	cmp	r3, #1
 800779c:	d105      	bne.n	80077aa <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80077bc:	b590      	push	{r4, r7, lr}
 80077be:	b08d      	sub	sp, #52	@ 0x34
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f007 fd80 	bl	800f2d8 <USB_GetMode>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 848c 	bne.w	80080f8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f007 fce4 	bl	800f1b2 <USB_ReadInterrupts>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8482 	beq.w	80080f6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	0a1b      	lsrs	r3, r3, #8
 80077fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	f007 fcd1 	bl	800f1b2 <USB_ReadInterrupts>
 8007810:	4603      	mov	r3, r0
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b02      	cmp	r3, #2
 8007818:	d107      	bne.n	800782a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695a      	ldr	r2, [r3, #20]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f002 0202 	and.w	r2, r2, #2
 8007828:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4618      	mov	r0, r3
 8007830:	f007 fcbf 	bl	800f1b2 <USB_ReadInterrupts>
 8007834:	4603      	mov	r3, r0
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	2b10      	cmp	r3, #16
 800783c:	d161      	bne.n	8007902 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	699a      	ldr	r2, [r3, #24]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0210 	bic.w	r2, r2, #16
 800784c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	f003 020f 	and.w	r2, r3, #15
 800785a:	4613      	mov	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	4413      	add	r3, r2
 800786a:	3304      	adds	r3, #4
 800786c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	0c5b      	lsrs	r3, r3, #17
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	2b02      	cmp	r3, #2
 8007878:	d124      	bne.n	80078c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007880:	4013      	ands	r3, r2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d035      	beq.n	80078f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	091b      	lsrs	r3, r3, #4
 800788e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007890:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007894:	b29b      	uxth	r3, r3
 8007896:	461a      	mov	r2, r3
 8007898:	6a38      	ldr	r0, [r7, #32]
 800789a:	f007 faa7 	bl	800edec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	091b      	lsrs	r3, r3, #4
 80078a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078aa:	441a      	add	r2, r3
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	695a      	ldr	r2, [r3, #20]
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	091b      	lsrs	r3, r3, #4
 80078b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078bc:	441a      	add	r2, r3
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	615a      	str	r2, [r3, #20]
 80078c2:	e016      	b.n	80078f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	0c5b      	lsrs	r3, r3, #17
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	2b06      	cmp	r3, #6
 80078ce:	d110      	bne.n	80078f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078d6:	2208      	movs	r2, #8
 80078d8:	4619      	mov	r1, r3
 80078da:	6a38      	ldr	r0, [r7, #32]
 80078dc:	f007 fa86 	bl	800edec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	695a      	ldr	r2, [r3, #20]
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	091b      	lsrs	r3, r3, #4
 80078e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ec:	441a      	add	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	699a      	ldr	r2, [r3, #24]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0210 	orr.w	r2, r2, #16
 8007900:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f007 fc53 	bl	800f1b2 <USB_ReadInterrupts>
 800790c:	4603      	mov	r3, r0
 800790e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007912:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007916:	f040 80a7 	bne.w	8007a68 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4618      	mov	r0, r3
 8007924:	f007 fc58 	bl	800f1d8 <USB_ReadDevAllOutEpInterrupt>
 8007928:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800792a:	e099      	b.n	8007a60 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800792c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 808e 	beq.w	8007a54 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f007 fc7c 	bl	800f240 <USB_ReadDevOutEPInterrupt>
 8007948:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00c      	beq.n	800796e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007960:	461a      	mov	r2, r3
 8007962:	2301      	movs	r3, #1
 8007964:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fecf 	bl	800870c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f003 0308 	and.w	r3, r3, #8
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00c      	beq.n	8007992 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007984:	461a      	mov	r2, r3
 8007986:	2308      	movs	r3, #8
 8007988:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800798a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 ffa5 	bl	80088dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f003 0310 	and.w	r3, r3, #16
 8007998:	2b00      	cmp	r3, #0
 800799a:	d008      	beq.n	80079ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a8:	461a      	mov	r2, r3
 80079aa:	2310      	movs	r3, #16
 80079ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d030      	beq.n	8007a1a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079c0:	2b80      	cmp	r3, #128	@ 0x80
 80079c2:	d109      	bne.n	80079d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80079d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079da:	4613      	mov	r3, r2
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4413      	add	r3, r2
 80079ea:	3304      	adds	r3, #4
 80079ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	78db      	ldrb	r3, [r3, #3]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d108      	bne.n	8007a08 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2200      	movs	r2, #0
 80079fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80079fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f015 fc40 	bl	801d288 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a14:	461a      	mov	r2, r3
 8007a16:	2302      	movs	r3, #2
 8007a18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a30:	461a      	mov	r2, r3
 8007a32:	2320      	movs	r3, #32
 8007a34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	3301      	adds	r3, #1
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	085b      	lsrs	r3, r3, #1
 8007a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f47f af62 	bne.w	800792c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f007 fba0 	bl	800f1b2 <USB_ReadInterrupts>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a7c:	f040 80db 	bne.w	8007c36 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f007 fbc1 	bl	800f20c <USB_ReadDevAllInEpInterrupt>
 8007a8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007a90:	e0cd      	b.n	8007c2e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80c2 	beq.w	8007c22 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f007 fbe7 	bl	800f27c <USB_ReadDevInEPInterrupt>
 8007aae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d057      	beq.n	8007b6a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	f003 030f 	and.w	r3, r3, #15
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	43db      	mvns	r3, r3
 8007ad4:	69f9      	ldr	r1, [r7, #28]
 8007ad6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ada:	4013      	ands	r3, r2
 8007adc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aea:	461a      	mov	r2, r3
 8007aec:	2301      	movs	r3, #1
 8007aee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	799b      	ldrb	r3, [r3, #6]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d132      	bne.n	8007b5e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007afc:	4613      	mov	r3, r2
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	440b      	add	r3, r1
 8007b06:	3320      	adds	r3, #32
 8007b08:	6819      	ldr	r1, [r3, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b0e:	4613      	mov	r3, r2
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4403      	add	r3, r0
 8007b18:	331c      	adds	r3, #28
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4419      	add	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b22:	4613      	mov	r3, r2
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4403      	add	r3, r0
 8007b2c:	3320      	adds	r3, #32
 8007b2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d113      	bne.n	8007b5e <HAL_PCD_IRQHandler+0x3a2>
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	3324      	adds	r3, #36	@ 0x24
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d108      	bne.n	8007b5e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b56:	461a      	mov	r2, r3
 8007b58:	2101      	movs	r1, #1
 8007b5a:	f007 fbef 	bl	800f33c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f015 fb0a 	bl	801d17e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d008      	beq.n	8007b86 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b80:	461a      	mov	r2, r3
 8007b82:	2308      	movs	r3, #8
 8007b84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	2310      	movs	r3, #16
 8007ba0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d008      	beq.n	8007bbe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb8:	461a      	mov	r2, r3
 8007bba:	2340      	movs	r3, #64	@ 0x40
 8007bbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d023      	beq.n	8007c10 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007bc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bca:	6a38      	ldr	r0, [r7, #32]
 8007bcc:	f006 fb8c 	bl	800e2e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	00db      	lsls	r3, r3, #3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	3310      	adds	r3, #16
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	4413      	add	r3, r2
 8007be0:	3304      	adds	r3, #4
 8007be2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	78db      	ldrb	r3, [r3, #3]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d108      	bne.n	8007bfe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f015 fb57 	bl	801d2ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007c1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fce8 	bl	80085f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	3301      	adds	r3, #1
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2a:	085b      	lsrs	r3, r3, #1
 8007c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f47f af2e 	bne.w	8007a92 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f007 fab9 	bl	800f1b2 <USB_ReadInterrupts>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c4a:	d122      	bne.n	8007c92 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d108      	bne.n	8007c7c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007c72:	2100      	movs	r1, #0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fecf 	bl	8008a18 <HAL_PCDEx_LPM_Callback>
 8007c7a:	e002      	b.n	8007c82 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f015 faf5 	bl	801d26c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695a      	ldr	r2, [r3, #20]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f007 fa8b 	bl	800f1b2 <USB_ReadInterrupts>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ca6:	d112      	bne.n	8007cce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d102      	bne.n	8007cbe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f015 fab1 	bl	801d220 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	695a      	ldr	r2, [r3, #20]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007ccc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f007 fa6d 	bl	800f1b2 <USB_ReadInterrupts>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce2:	f040 80b7 	bne.w	8007e54 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2110      	movs	r1, #16
 8007d00:	4618      	mov	r0, r3
 8007d02:	f006 faf1 	bl	800e2e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d06:	2300      	movs	r3, #0
 8007d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d0a:	e046      	b.n	8007d9a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d1e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d52:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d64:	0151      	lsls	r1, r2, #5
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	440a      	add	r2, r1
 8007d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d92:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	3301      	adds	r3, #1
 8007d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	791b      	ldrb	r3, [r3, #4]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d3b2      	bcc.n	8007d0c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007db4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007db8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	7bdb      	ldrb	r3, [r3, #15]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d016      	beq.n	8007df0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dcc:	69fa      	ldr	r2, [r7, #28]
 8007dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dd2:	f043 030b 	orr.w	r3, r3, #11
 8007dd6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007de8:	f043 030b 	orr.w	r3, r3, #11
 8007dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8007dee:	e015      	b.n	8007e1c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dfe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007e02:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007e06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	69fa      	ldr	r2, [r7, #28]
 8007e12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e16:	f043 030b 	orr.w	r3, r3, #11
 8007e1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f007 fa7c 	bl	800f33c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	695a      	ldr	r2, [r3, #20]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f007 f9aa 	bl	800f1b2 <USB_ReadInterrupts>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e68:	d123      	bne.n	8007eb2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f007 fa40 	bl	800f2f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f006 faae 	bl	800e3da <USB_GetDevSpeed>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	461a      	mov	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681c      	ldr	r4, [r3, #0]
 8007e8a:	f001 fa65 	bl	8009358 <HAL_RCC_GetHCLKFreq>
 8007e8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007e94:	461a      	mov	r2, r3
 8007e96:	4620      	mov	r0, r4
 8007e98:	f005 ffb2 	bl	800de00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f015 f996 	bl	801d1ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	695a      	ldr	r2, [r3, #20]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f007 f97b 	bl	800f1b2 <USB_ReadInterrupts>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b08      	cmp	r3, #8
 8007ec4:	d10a      	bne.n	8007edc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f015 f973 	bl	801d1b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	695a      	ldr	r2, [r3, #20]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f002 0208 	and.w	r2, r2, #8
 8007eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f007 f966 	bl	800f1b2 <USB_ReadInterrupts>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eec:	2b80      	cmp	r3, #128	@ 0x80
 8007eee:	d123      	bne.n	8007f38 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007efc:	2301      	movs	r3, #1
 8007efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f00:	e014      	b.n	8007f2c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007f02:	6879      	ldr	r1, [r7, #4]
 8007f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f06:	4613      	mov	r3, r2
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	440b      	add	r3, r1
 8007f10:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d105      	bne.n	8007f26 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fb08 	bl	8008536 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	3301      	adds	r3, #1
 8007f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	791b      	ldrb	r3, [r3, #4]
 8007f30:	461a      	mov	r2, r3
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d3e4      	bcc.n	8007f02 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f007 f938 	bl	800f1b2 <USB_ReadInterrupts>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f4c:	d13c      	bne.n	8007fc8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f4e:	2301      	movs	r3, #1
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f52:	e02b      	b.n	8007fac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f68:	4613      	mov	r3, r2
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	3318      	adds	r3, #24
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d115      	bne.n	8007fa6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007f7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da12      	bge.n	8007fa6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f84:	4613      	mov	r3, r2
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	3317      	adds	r3, #23
 8007f90:	2201      	movs	r2, #1
 8007f92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fac8 	bl	8008536 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	3301      	adds	r3, #1
 8007faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	791b      	ldrb	r3, [r3, #4]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d3cd      	bcc.n	8007f54 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	695a      	ldr	r2, [r3, #20]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f007 f8f0 	bl	800f1b2 <USB_ReadInterrupts>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fdc:	d156      	bne.n	800808c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fde:	2301      	movs	r3, #1
 8007fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fe2:	e045      	b.n	8008070 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	440b      	add	r3, r1
 8008002:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d12e      	bne.n	800806a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800800c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800800e:	2b00      	cmp	r3, #0
 8008010:	da2b      	bge.n	800806a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800801e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008022:	429a      	cmp	r2, r3
 8008024:	d121      	bne.n	800806a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800802a:	4613      	mov	r3, r2
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	440b      	add	r3, r1
 8008034:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008038:	2201      	movs	r2, #1
 800803a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	69fa      	ldr	r2, [r7, #28]
 800805e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008062:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008066:	6053      	str	r3, [r2, #4]
            break;
 8008068:	e008      	b.n	800807c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	3301      	adds	r3, #1
 800806e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	791b      	ldrb	r3, [r3, #4]
 8008074:	461a      	mov	r2, r3
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	4293      	cmp	r3, r2
 800807a:	d3b3      	bcc.n	8007fe4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695a      	ldr	r2, [r3, #20]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800808a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4618      	mov	r0, r3
 8008092:	f007 f88e 	bl	800f1b2 <USB_ReadInterrupts>
 8008096:	4603      	mov	r3, r0
 8008098:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a0:	d10a      	bne.n	80080b8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f015 f914 	bl	801d2d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695a      	ldr	r2, [r3, #20]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80080b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f007 f878 	bl	800f1b2 <USB_ReadInterrupts>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d115      	bne.n	80080f8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f015 f904 	bl	801d2ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6859      	ldr	r1, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	605a      	str	r2, [r3, #4]
 80080f4:	e000      	b.n	80080f8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80080f6:	bf00      	nop
    }
  }
}
 80080f8:	3734      	adds	r7, #52	@ 0x34
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd90      	pop	{r4, r7, pc}

080080fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_PCD_SetAddress+0x1a>
 8008114:	2302      	movs	r3, #2
 8008116:	e012      	b.n	800813e <HAL_PCD_SetAddress+0x40>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	78fa      	ldrb	r2, [r7, #3]
 8008124:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	78fa      	ldrb	r2, [r7, #3]
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f006 ffd7 	bl	800f0e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	4608      	mov	r0, r1
 8008150:	4611      	mov	r1, r2
 8008152:	461a      	mov	r2, r3
 8008154:	4603      	mov	r3, r0
 8008156:	70fb      	strb	r3, [r7, #3]
 8008158:	460b      	mov	r3, r1
 800815a:	803b      	strh	r3, [r7, #0]
 800815c:	4613      	mov	r3, r2
 800815e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008168:	2b00      	cmp	r3, #0
 800816a:	da0f      	bge.n	800818c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800816c:	78fb      	ldrb	r3, [r7, #3]
 800816e:	f003 020f 	and.w	r2, r3, #15
 8008172:	4613      	mov	r3, r2
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	4413      	add	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	3310      	adds	r3, #16
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	4413      	add	r3, r2
 8008180:	3304      	adds	r3, #4
 8008182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	705a      	strb	r2, [r3, #1]
 800818a:	e00f      	b.n	80081ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	f003 020f 	and.w	r2, r3, #15
 8008192:	4613      	mov	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	3304      	adds	r3, #4
 80081a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	f003 030f 	and.w	r3, r3, #15
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80081b8:	883a      	ldrh	r2, [r7, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	78ba      	ldrb	r2, [r7, #2]
 80081c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80081d6:	78bb      	ldrb	r3, [r7, #2]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d102      	bne.n	80081e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_PCD_EP_Open+0xaa>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e00e      	b.n	800820e <HAL_PCD_EP_Open+0xc8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68f9      	ldr	r1, [r7, #12]
 80081fe:	4618      	mov	r0, r3
 8008200:	f006 f910 	bl	800e424 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800820c:	7afb      	ldrb	r3, [r7, #11]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008226:	2b00      	cmp	r3, #0
 8008228:	da0f      	bge.n	800824a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	f003 020f 	and.w	r2, r3, #15
 8008230:	4613      	mov	r3, r2
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	3310      	adds	r3, #16
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	3304      	adds	r3, #4
 8008240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	705a      	strb	r2, [r3, #1]
 8008248:	e00f      	b.n	800826a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	f003 020f 	and.w	r2, r3, #15
 8008250:	4613      	mov	r3, r2
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	4413      	add	r3, r2
 8008260:	3304      	adds	r3, #4
 8008262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	f003 030f 	and.w	r3, r3, #15
 8008270:	b2da      	uxtb	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_PCD_EP_Close+0x6e>
 8008280:	2302      	movs	r3, #2
 8008282:	e00e      	b.n	80082a2 <HAL_PCD_EP_Close+0x8c>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68f9      	ldr	r1, [r7, #12]
 8008292:	4618      	mov	r0, r3
 8008294:	f006 f94e 	bl	800e534 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b086      	sub	sp, #24
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
 80082b6:	460b      	mov	r3, r1
 80082b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082ba:	7afb      	ldrb	r3, [r7, #11]
 80082bc:	f003 020f 	and.w	r2, r3, #15
 80082c0:	4613      	mov	r3, r2
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	3304      	adds	r3, #4
 80082d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2200      	movs	r2, #0
 80082e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2200      	movs	r2, #0
 80082ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	799b      	ldrb	r3, [r3, #6]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d102      	bne.n	8008306 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	799b      	ldrb	r3, [r3, #6]
 800830e:	461a      	mov	r2, r3
 8008310:	6979      	ldr	r1, [r7, #20]
 8008312:	f006 f9eb 	bl	800e6ec <USB_EPStartXfer>

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800832c:	78fb      	ldrb	r3, [r7, #3]
 800832e:	f003 020f 	and.w	r2, r3, #15
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	4613      	mov	r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008342:	681b      	ldr	r3, [r3, #0]
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	607a      	str	r2, [r7, #4]
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	460b      	mov	r3, r1
 800835e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008360:	7afb      	ldrb	r3, [r7, #11]
 8008362:	f003 020f 	and.w	r2, r3, #15
 8008366:	4613      	mov	r3, r2
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	3310      	adds	r3, #16
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	3304      	adds	r3, #4
 8008376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2200      	movs	r2, #0
 8008388:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2201      	movs	r2, #1
 800838e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008390:	7afb      	ldrb	r3, [r7, #11]
 8008392:	f003 030f 	and.w	r3, r3, #15
 8008396:	b2da      	uxtb	r2, r3
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	799b      	ldrb	r3, [r3, #6]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d102      	bne.n	80083aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	799b      	ldrb	r3, [r3, #6]
 80083b2:	461a      	mov	r2, r3
 80083b4:	6979      	ldr	r1, [r7, #20]
 80083b6:	f006 f999 	bl	800e6ec <USB_EPStartXfer>

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	f003 030f 	and.w	r3, r3, #15
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	7912      	ldrb	r2, [r2, #4]
 80083da:	4293      	cmp	r3, r2
 80083dc:	d901      	bls.n	80083e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e04f      	b.n	8008482 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80083e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da0f      	bge.n	800840a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	f003 020f 	and.w	r2, r3, #15
 80083f0:	4613      	mov	r3, r2
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	3310      	adds	r3, #16
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	4413      	add	r3, r2
 80083fe:	3304      	adds	r3, #4
 8008400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2201      	movs	r2, #1
 8008406:	705a      	strb	r2, [r3, #1]
 8008408:	e00d      	b.n	8008426 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	4413      	add	r3, r2
 800841c:	3304      	adds	r3, #4
 800841e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	f003 030f 	and.w	r3, r3, #15
 8008432:	b2da      	uxtb	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <HAL_PCD_EP_SetStall+0x82>
 8008442:	2302      	movs	r3, #2
 8008444:	e01d      	b.n	8008482 <HAL_PCD_EP_SetStall+0xbe>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68f9      	ldr	r1, [r7, #12]
 8008454:	4618      	mov	r0, r3
 8008456:	f006 fd21 	bl	800ee9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	2b00      	cmp	r3, #0
 8008462:	d109      	bne.n	8008478 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	7999      	ldrb	r1, [r3, #6]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008472:	461a      	mov	r2, r3
 8008474:	f006 ff62 	bl	800f33c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	f003 030f 	and.w	r3, r3, #15
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	7912      	ldrb	r2, [r2, #4]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d901      	bls.n	80084a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e042      	b.n	800852e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	da0f      	bge.n	80084d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	f003 020f 	and.w	r2, r3, #15
 80084b6:	4613      	mov	r3, r2
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	3310      	adds	r3, #16
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	4413      	add	r3, r2
 80084c4:	3304      	adds	r3, #4
 80084c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	705a      	strb	r2, [r3, #1]
 80084ce:	e00f      	b.n	80084f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	f003 020f 	and.w	r2, r3, #15
 80084d6:	4613      	mov	r3, r2
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	4413      	add	r3, r2
 80084e6:	3304      	adds	r3, #4
 80084e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_PCD_EP_ClrStall+0x86>
 800850c:	2302      	movs	r3, #2
 800850e:	e00e      	b.n	800852e <HAL_PCD_EP_ClrStall+0xa4>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68f9      	ldr	r1, [r7, #12]
 800851e:	4618      	mov	r0, r3
 8008520:	f006 fd2a 	bl	800ef78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	460b      	mov	r3, r1
 8008540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008546:	2b00      	cmp	r3, #0
 8008548:	da0c      	bge.n	8008564 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	f003 020f 	and.w	r2, r3, #15
 8008550:	4613      	mov	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	3310      	adds	r3, #16
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	4413      	add	r3, r2
 800855e:	3304      	adds	r3, #4
 8008560:	60fb      	str	r3, [r7, #12]
 8008562:	e00c      	b.n	800857e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	f003 020f 	and.w	r2, r3, #15
 800856a:	4613      	mov	r3, r2
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	4413      	add	r3, r2
 800857a:	3304      	adds	r3, #4
 800857c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	4618      	mov	r0, r3
 8008586:	f006 fb49 	bl	800ec1c <USB_EPStopXfer>
 800858a:	4603      	mov	r3, r0
 800858c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800858e:	7afb      	ldrb	r3, [r7, #11]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_PCD_EP_Flush+0x1a>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e01b      	b.n	80085ea <HAL_PCD_EP_Flush+0x52>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80085ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	da09      	bge.n	80085d6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	f003 030f 	and.w	r3, r3, #15
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f005 fe8a 	bl	800e2e8 <USB_FlushTxFifo>
 80085d4:	e004      	b.n	80085e0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f005 feb6 	bl	800e34c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b08a      	sub	sp, #40	@ 0x28
 80085f6:	af02      	add	r7, sp, #8
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	4613      	mov	r3, r2
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	4413      	add	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	3310      	adds	r3, #16
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4413      	add	r3, r2
 8008616:	3304      	adds	r3, #4
 8008618:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	695a      	ldr	r2, [r3, #20]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	429a      	cmp	r2, r3
 8008624:	d901      	bls.n	800862a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e06b      	b.n	8008702 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	691a      	ldr	r2, [r3, #16]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	429a      	cmp	r2, r3
 800863e:	d902      	bls.n	8008646 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	3303      	adds	r3, #3
 800864a:	089b      	lsrs	r3, r3, #2
 800864c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800864e:	e02a      	b.n	80086a6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	691a      	ldr	r2, [r3, #16]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	69fa      	ldr	r2, [r7, #28]
 8008662:	429a      	cmp	r2, r3
 8008664:	d902      	bls.n	800866c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	3303      	adds	r3, #3
 8008670:	089b      	lsrs	r3, r3, #2
 8008672:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	68d9      	ldr	r1, [r3, #12]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	b2da      	uxtb	r2, r3
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	4603      	mov	r3, r0
 8008688:	6978      	ldr	r0, [r7, #20]
 800868a:	f006 fb71 	bl	800ed70 <USB_WritePacket>

    ep->xfer_buff  += len;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	441a      	add	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	695a      	ldr	r2, [r3, #20]
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	441a      	add	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d809      	bhi.n	80086d0 <PCD_WriteEmptyTxFifo+0xde>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	695a      	ldr	r2, [r3, #20]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d203      	bcs.n	80086d0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1bf      	bne.n	8008650 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d811      	bhi.n	8008700 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	2201      	movs	r2, #1
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	43db      	mvns	r3, r3
 80086f6:	6939      	ldr	r1, [r7, #16]
 80086f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086fc:	4013      	ands	r3, r2
 80086fe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3720      	adds	r7, #32
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b088      	sub	sp, #32
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	333c      	adds	r3, #60	@ 0x3c
 8008724:	3304      	adds	r3, #4
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	799b      	ldrb	r3, [r3, #6]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d17b      	bne.n	800883a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f003 0308 	and.w	r3, r3, #8
 8008748:	2b00      	cmp	r3, #0
 800874a:	d015      	beq.n	8008778 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	4a61      	ldr	r2, [pc, #388]	@ (80088d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	f240 80b9 	bls.w	80088c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 80b3 	beq.w	80088c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800876e:	461a      	mov	r2, r3
 8008770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008774:	6093      	str	r3, [r2, #8]
 8008776:	e0a7      	b.n	80088c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d009      	beq.n	8008796 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878e:	461a      	mov	r2, r3
 8008790:	2320      	movs	r3, #32
 8008792:	6093      	str	r3, [r2, #8]
 8008794:	e098      	b.n	80088c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800879c:	2b00      	cmp	r3, #0
 800879e:	f040 8093 	bne.w	80088c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	4a4b      	ldr	r2, [pc, #300]	@ (80088d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d90f      	bls.n	80087ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c0:	461a      	mov	r2, r3
 80087c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087c6:	6093      	str	r3, [r2, #8]
 80087c8:	e07e      	b.n	80088c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4613      	mov	r3, r2
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	4413      	add	r3, r2
 80087dc:	3304      	adds	r3, #4
 80087de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a1a      	ldr	r2, [r3, #32]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	0159      	lsls	r1, r3, #5
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	440b      	add	r3, r1
 80087ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087f6:	1ad2      	subs	r2, r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d114      	bne.n	800882c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d109      	bne.n	800881e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6818      	ldr	r0, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008814:	461a      	mov	r2, r3
 8008816:	2101      	movs	r1, #1
 8008818:	f006 fd90 	bl	800f33c <USB_EP0_OutStart>
 800881c:	e006      	b.n	800882c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	441a      	add	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f014 fc88 	bl	801d148 <HAL_PCD_DataOutStageCallback>
 8008838:	e046      	b.n	80088c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	4a26      	ldr	r2, [pc, #152]	@ (80088d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d124      	bne.n	800888c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00a      	beq.n	8008862 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008858:	461a      	mov	r2, r3
 800885a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800885e:	6093      	str	r3, [r2, #8]
 8008860:	e032      	b.n	80088c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	d008      	beq.n	800887e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008878:	461a      	mov	r2, r3
 800887a:	2320      	movs	r3, #32
 800887c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	b2db      	uxtb	r3, r3
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f014 fc5f 	bl	801d148 <HAL_PCD_DataOutStageCallback>
 800888a:	e01d      	b.n	80088c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d114      	bne.n	80088bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	4613      	mov	r3, r2
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	440b      	add	r3, r1
 80088a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d108      	bne.n	80088bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088b4:	461a      	mov	r2, r3
 80088b6:	2100      	movs	r1, #0
 80088b8:	f006 fd40 	bl	800f33c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f014 fc40 	bl	801d148 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3720      	adds	r7, #32
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	4f54300a 	.word	0x4f54300a
 80088d8:	4f54310a 	.word	0x4f54310a

080088dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	333c      	adds	r3, #60	@ 0x3c
 80088f4:	3304      	adds	r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4a15      	ldr	r2, [pc, #84]	@ (8008964 <PCD_EP_OutSetupPacket_int+0x88>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d90e      	bls.n	8008930 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008918:	2b00      	cmp	r3, #0
 800891a:	d009      	beq.n	8008930 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008928:	461a      	mov	r2, r3
 800892a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800892e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f014 fbf7 	bl	801d124 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4a0a      	ldr	r2, [pc, #40]	@ (8008964 <PCD_EP_OutSetupPacket_int+0x88>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d90c      	bls.n	8008958 <PCD_EP_OutSetupPacket_int+0x7c>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	799b      	ldrb	r3, [r3, #6]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d108      	bne.n	8008958 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008950:	461a      	mov	r2, r3
 8008952:	2101      	movs	r1, #1
 8008954:	f006 fcf2 	bl	800f33c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	4f54300a 	.word	0x4f54300a

08008968 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
 8008974:	4613      	mov	r3, r2
 8008976:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008980:	78fb      	ldrb	r3, [r7, #3]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d107      	bne.n	8008996 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008986:	883b      	ldrh	r3, [r7, #0]
 8008988:	0419      	lsls	r1, r3, #16
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	430a      	orrs	r2, r1
 8008992:	629a      	str	r2, [r3, #40]	@ 0x28
 8008994:	e028      	b.n	80089e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899c:	0c1b      	lsrs	r3, r3, #16
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	4413      	add	r3, r2
 80089a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]
 80089a8:	e00d      	b.n	80089c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	3340      	adds	r3, #64	@ 0x40
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	0c1b      	lsrs	r3, r3, #16
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	4413      	add	r3, r2
 80089be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	3301      	adds	r3, #1
 80089c4:	73fb      	strb	r3, [r7, #15]
 80089c6:	7bfa      	ldrb	r2, [r7, #15]
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d3ec      	bcc.n	80089aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80089d0:	883b      	ldrh	r3, [r7, #0]
 80089d2:	0418      	lsls	r0, r3, #16
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6819      	ldr	r1, [r3, #0]
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	3b01      	subs	r3, #1
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	4302      	orrs	r2, r0
 80089e0:	3340      	adds	r3, #64	@ 0x40
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	440b      	add	r3, r1
 80089e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	887a      	ldrh	r2, [r7, #2]
 8008a08:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008a36:	4b06      	ldr	r3, [pc, #24]	@ (8008a50 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008a38:	2201      	movs	r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008a3c:	4b05      	ldr	r3, [pc, #20]	@ (8008a54 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008a42:	687b      	ldr	r3, [r7, #4]
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	420e0020 	.word	0x420e0020
 8008a54:	40007000 	.word	0x40007000

08008a58 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008a5e:	4b06      	ldr	r3, [pc, #24]	@ (8008a78 <HAL_PWR_DisableBkUpAccess+0x20>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008a64:	4b05      	ldr	r3, [pc, #20]	@ (8008a7c <HAL_PWR_DisableBkUpAccess+0x24>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008a6a:	687b      	ldr	r3, [r7, #4]
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	420e0020 	.word	0x420e0020
 8008a7c:	40007000 	.word	0x40007000

08008a80 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8008a8c:	4b12      	ldr	r3, [pc, #72]	@ (8008ad8 <HAL_PWR_EnterSTOPMode+0x58>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f023 0203 	bic.w	r2, r3, #3
 8008a94:	4910      	ldr	r1, [pc, #64]	@ (8008ad8 <HAL_PWR_EnterSTOPMode+0x58>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8008adc <HAL_PWR_EnterSTOPMode+0x5c>)
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8008adc <HAL_PWR_EnterSTOPMode+0x5c>)
 8008aa2:	f043 0304 	orr.w	r3, r3, #4
 8008aa6:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d101      	bne.n	8008ab2 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8008aae:	bf30      	wfi
 8008ab0:	e005      	b.n	8008abe <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d001      	beq.n	8008abc <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8008ab8:	bf40      	sev
      __WFE();
 8008aba:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8008abc:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8008abe:	4b07      	ldr	r3, [pc, #28]	@ (8008adc <HAL_PWR_EnterSTOPMode+0x5c>)
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	4a06      	ldr	r2, [pc, #24]	@ (8008adc <HAL_PWR_EnterSTOPMode+0x5c>)
 8008ac4:	f023 0304 	bic.w	r3, r3, #4
 8008ac8:	6113      	str	r3, [r2, #16]
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	40007000 	.word	0x40007000
 8008adc:	e000ed00 	.word	0xe000ed00

08008ae0 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8008ae4:	4b03      	ldr	r3, [pc, #12]	@ (8008af4 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
}
 8008aea:	bf00      	nop
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	420e0024 	.word	0x420e0024

08008af8 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8008afc:	4b03      	ldr	r3, [pc, #12]	@ (8008b0c <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	601a      	str	r2, [r3, #0]
}
 8008b02:	bf00      	nop
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	420e0024 	.word	0x420e0024

08008b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e267      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d075      	beq.n	8008c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b2e:	4b88      	ldr	r3, [pc, #544]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f003 030c 	and.w	r3, r3, #12
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d00c      	beq.n	8008b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b3a:	4b85      	ldr	r3, [pc, #532]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b42:	2b08      	cmp	r3, #8
 8008b44:	d112      	bne.n	8008b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b46:	4b82      	ldr	r3, [pc, #520]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b52:	d10b      	bne.n	8008b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b54:	4b7e      	ldr	r3, [pc, #504]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d05b      	beq.n	8008c18 <HAL_RCC_OscConfig+0x108>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d157      	bne.n	8008c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e242      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b74:	d106      	bne.n	8008b84 <HAL_RCC_OscConfig+0x74>
 8008b76:	4b76      	ldr	r3, [pc, #472]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a75      	ldr	r2, [pc, #468]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	e01d      	b.n	8008bc0 <HAL_RCC_OscConfig+0xb0>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b8c:	d10c      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x98>
 8008b8e:	4b70      	ldr	r3, [pc, #448]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a6f      	ldr	r2, [pc, #444]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a6c      	ldr	r2, [pc, #432]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	e00b      	b.n	8008bc0 <HAL_RCC_OscConfig+0xb0>
 8008ba8:	4b69      	ldr	r3, [pc, #420]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a68      	ldr	r2, [pc, #416]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	4b66      	ldr	r3, [pc, #408]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a65      	ldr	r2, [pc, #404]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d013      	beq.n	8008bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bc8:	f7fb fa96 	bl	80040f8 <HAL_GetTick>
 8008bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bce:	e008      	b.n	8008be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bd0:	f7fb fa92 	bl	80040f8 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	2b64      	cmp	r3, #100	@ 0x64
 8008bdc:	d901      	bls.n	8008be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e207      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008be2:	4b5b      	ldr	r3, [pc, #364]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0f0      	beq.n	8008bd0 <HAL_RCC_OscConfig+0xc0>
 8008bee:	e014      	b.n	8008c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf0:	f7fb fa82 	bl	80040f8 <HAL_GetTick>
 8008bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bf6:	e008      	b.n	8008c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bf8:	f7fb fa7e 	bl	80040f8 <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b64      	cmp	r3, #100	@ 0x64
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e1f3      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c0a:	4b51      	ldr	r3, [pc, #324]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1f0      	bne.n	8008bf8 <HAL_RCC_OscConfig+0xe8>
 8008c16:	e000      	b.n	8008c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d063      	beq.n	8008cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c26:	4b4a      	ldr	r3, [pc, #296]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 030c 	and.w	r3, r3, #12
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00b      	beq.n	8008c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c32:	4b47      	ldr	r3, [pc, #284]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c3a:	2b08      	cmp	r3, #8
 8008c3c:	d11c      	bne.n	8008c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c3e:	4b44      	ldr	r3, [pc, #272]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d116      	bne.n	8008c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c4a:	4b41      	ldr	r3, [pc, #260]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <HAL_RCC_OscConfig+0x152>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d001      	beq.n	8008c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e1c7      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c62:	4b3b      	ldr	r3, [pc, #236]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	4937      	ldr	r1, [pc, #220]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c76:	e03a      	b.n	8008cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d020      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c80:	4b34      	ldr	r3, [pc, #208]	@ (8008d54 <HAL_RCC_OscConfig+0x244>)
 8008c82:	2201      	movs	r2, #1
 8008c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c86:	f7fb fa37 	bl	80040f8 <HAL_GetTick>
 8008c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c8c:	e008      	b.n	8008ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c8e:	f7fb fa33 	bl	80040f8 <HAL_GetTick>
 8008c92:	4602      	mov	r2, r0
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d901      	bls.n	8008ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e1a8      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0f0      	beq.n	8008c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cac:	4b28      	ldr	r3, [pc, #160]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	4925      	ldr	r1, [pc, #148]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	600b      	str	r3, [r1, #0]
 8008cc0:	e015      	b.n	8008cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cc2:	4b24      	ldr	r3, [pc, #144]	@ (8008d54 <HAL_RCC_OscConfig+0x244>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc8:	f7fb fa16 	bl	80040f8 <HAL_GetTick>
 8008ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cd0:	f7fb fa12 	bl	80040f8 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e187      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0302 	and.w	r3, r3, #2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1f0      	bne.n	8008cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0308 	and.w	r3, r3, #8
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d036      	beq.n	8008d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d016      	beq.n	8008d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d02:	4b15      	ldr	r3, [pc, #84]	@ (8008d58 <HAL_RCC_OscConfig+0x248>)
 8008d04:	2201      	movs	r2, #1
 8008d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d08:	f7fb f9f6 	bl	80040f8 <HAL_GetTick>
 8008d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d10:	f7fb f9f2 	bl	80040f8 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e167      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d22:	4b0b      	ldr	r3, [pc, #44]	@ (8008d50 <HAL_RCC_OscConfig+0x240>)
 8008d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f0      	beq.n	8008d10 <HAL_RCC_OscConfig+0x200>
 8008d2e:	e01b      	b.n	8008d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d30:	4b09      	ldr	r3, [pc, #36]	@ (8008d58 <HAL_RCC_OscConfig+0x248>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d36:	f7fb f9df 	bl	80040f8 <HAL_GetTick>
 8008d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d3c:	e00e      	b.n	8008d5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d3e:	f7fb f9db 	bl	80040f8 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d907      	bls.n	8008d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e150      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
 8008d50:	40023800 	.word	0x40023800
 8008d54:	42470000 	.word	0x42470000
 8008d58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d5c:	4b88      	ldr	r3, [pc, #544]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1ea      	bne.n	8008d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 8097 	beq.w	8008ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d76:	2300      	movs	r3, #0
 8008d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d7a:	4b81      	ldr	r3, [pc, #516]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10f      	bne.n	8008da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d86:	2300      	movs	r3, #0
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	4b7d      	ldr	r3, [pc, #500]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8e:	4a7c      	ldr	r2, [pc, #496]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d96:	4b7a      	ldr	r3, [pc, #488]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d9e:	60bb      	str	r3, [r7, #8]
 8008da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008da2:	2301      	movs	r3, #1
 8008da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008da6:	4b77      	ldr	r3, [pc, #476]	@ (8008f84 <HAL_RCC_OscConfig+0x474>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d118      	bne.n	8008de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008db2:	4b74      	ldr	r3, [pc, #464]	@ (8008f84 <HAL_RCC_OscConfig+0x474>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a73      	ldr	r2, [pc, #460]	@ (8008f84 <HAL_RCC_OscConfig+0x474>)
 8008db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dbe:	f7fb f99b 	bl	80040f8 <HAL_GetTick>
 8008dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dc4:	e008      	b.n	8008dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dc6:	f7fb f997 	bl	80040f8 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d901      	bls.n	8008dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e10c      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8008f84 <HAL_RCC_OscConfig+0x474>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0f0      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d106      	bne.n	8008dfa <HAL_RCC_OscConfig+0x2ea>
 8008dec:	4b64      	ldr	r3, [pc, #400]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008df0:	4a63      	ldr	r2, [pc, #396]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008df2:	f043 0301 	orr.w	r3, r3, #1
 8008df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008df8:	e01c      	b.n	8008e34 <HAL_RCC_OscConfig+0x324>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	2b05      	cmp	r3, #5
 8008e00:	d10c      	bne.n	8008e1c <HAL_RCC_OscConfig+0x30c>
 8008e02:	4b5f      	ldr	r3, [pc, #380]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e06:	4a5e      	ldr	r2, [pc, #376]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e08:	f043 0304 	orr.w	r3, r3, #4
 8008e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e12:	4a5b      	ldr	r2, [pc, #364]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e14:	f043 0301 	orr.w	r3, r3, #1
 8008e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e1a:	e00b      	b.n	8008e34 <HAL_RCC_OscConfig+0x324>
 8008e1c:	4b58      	ldr	r3, [pc, #352]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e20:	4a57      	ldr	r2, [pc, #348]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e22:	f023 0301 	bic.w	r3, r3, #1
 8008e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e28:	4b55      	ldr	r3, [pc, #340]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2c:	4a54      	ldr	r2, [pc, #336]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e2e:	f023 0304 	bic.w	r3, r3, #4
 8008e32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d015      	beq.n	8008e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e3c:	f7fb f95c 	bl	80040f8 <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e42:	e00a      	b.n	8008e5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e44:	f7fb f958 	bl	80040f8 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e0cb      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e5a:	4b49      	ldr	r3, [pc, #292]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0ee      	beq.n	8008e44 <HAL_RCC_OscConfig+0x334>
 8008e66:	e014      	b.n	8008e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e68:	f7fb f946 	bl	80040f8 <HAL_GetTick>
 8008e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e6e:	e00a      	b.n	8008e86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e70:	f7fb f942 	bl	80040f8 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d901      	bls.n	8008e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e0b5      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e86:	4b3e      	ldr	r3, [pc, #248]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1ee      	bne.n	8008e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d105      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e98:	4b39      	ldr	r3, [pc, #228]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9c:	4a38      	ldr	r2, [pc, #224]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ea2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 80a1 	beq.w	8008ff0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008eae:	4b34      	ldr	r3, [pc, #208]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f003 030c 	and.w	r3, r3, #12
 8008eb6:	2b08      	cmp	r3, #8
 8008eb8:	d05c      	beq.n	8008f74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d141      	bne.n	8008f46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ec2:	4b31      	ldr	r3, [pc, #196]	@ (8008f88 <HAL_RCC_OscConfig+0x478>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec8:	f7fb f916 	bl	80040f8 <HAL_GetTick>
 8008ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ece:	e008      	b.n	8008ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ed0:	f7fb f912 	bl	80040f8 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e087      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ee2:	4b27      	ldr	r3, [pc, #156]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1f0      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	69da      	ldr	r2, [r3, #28]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008efc:	019b      	lsls	r3, r3, #6
 8008efe:	431a      	orrs	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f04:	085b      	lsrs	r3, r3, #1
 8008f06:	3b01      	subs	r3, #1
 8008f08:	041b      	lsls	r3, r3, #16
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f10:	061b      	lsls	r3, r3, #24
 8008f12:	491b      	ldr	r1, [pc, #108]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f18:	4b1b      	ldr	r3, [pc, #108]	@ (8008f88 <HAL_RCC_OscConfig+0x478>)
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f1e:	f7fb f8eb 	bl	80040f8 <HAL_GetTick>
 8008f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f24:	e008      	b.n	8008f38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f26:	f7fb f8e7 	bl	80040f8 <HAL_GetTick>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d901      	bls.n	8008f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e05c      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f38:	4b11      	ldr	r3, [pc, #68]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0f0      	beq.n	8008f26 <HAL_RCC_OscConfig+0x416>
 8008f44:	e054      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f46:	4b10      	ldr	r3, [pc, #64]	@ (8008f88 <HAL_RCC_OscConfig+0x478>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f4c:	f7fb f8d4 	bl	80040f8 <HAL_GetTick>
 8008f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f52:	e008      	b.n	8008f66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f54:	f7fb f8d0 	bl	80040f8 <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d901      	bls.n	8008f66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e045      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f66:	4b06      	ldr	r3, [pc, #24]	@ (8008f80 <HAL_RCC_OscConfig+0x470>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1f0      	bne.n	8008f54 <HAL_RCC_OscConfig+0x444>
 8008f72:	e03d      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d107      	bne.n	8008f8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e038      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
 8008f80:	40023800 	.word	0x40023800
 8008f84:	40007000 	.word	0x40007000
 8008f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8008ffc <HAL_RCC_OscConfig+0x4ec>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d028      	beq.n	8008fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d121      	bne.n	8008fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d11a      	bne.n	8008fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d111      	bne.n	8008fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd2:	085b      	lsrs	r3, r3, #1
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d107      	bne.n	8008fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d001      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e000      	b.n	8008ff2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	40023800 	.word	0x40023800

08009000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e0cc      	b.n	80091ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009014:	4b68      	ldr	r3, [pc, #416]	@ (80091b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0307 	and.w	r3, r3, #7
 800901c:	683a      	ldr	r2, [r7, #0]
 800901e:	429a      	cmp	r2, r3
 8009020:	d90c      	bls.n	800903c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009022:	4b65      	ldr	r3, [pc, #404]	@ (80091b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800902a:	4b63      	ldr	r3, [pc, #396]	@ (80091b8 <HAL_RCC_ClockConfig+0x1b8>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d001      	beq.n	800903c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e0b8      	b.n	80091ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d020      	beq.n	800908a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009054:	4b59      	ldr	r3, [pc, #356]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	4a58      	ldr	r2, [pc, #352]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 800905a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800905e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b00      	cmp	r3, #0
 800906a:	d005      	beq.n	8009078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800906c:	4b53      	ldr	r3, [pc, #332]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	4a52      	ldr	r2, [pc, #328]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 8009072:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009078:	4b50      	ldr	r3, [pc, #320]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	494d      	ldr	r1, [pc, #308]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 8009086:	4313      	orrs	r3, r2
 8009088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d044      	beq.n	8009120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d107      	bne.n	80090ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909e:	4b47      	ldr	r3, [pc, #284]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d119      	bne.n	80090de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e07f      	b.n	80091ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d003      	beq.n	80090be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d107      	bne.n	80090ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090be:	4b3f      	ldr	r3, [pc, #252]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d109      	bne.n	80090de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e06f      	b.n	80091ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090ce:	4b3b      	ldr	r3, [pc, #236]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e067      	b.n	80091ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090de:	4b37      	ldr	r3, [pc, #220]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f023 0203 	bic.w	r2, r3, #3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	4934      	ldr	r1, [pc, #208]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 80090ec:	4313      	orrs	r3, r2
 80090ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090f0:	f7fb f802 	bl	80040f8 <HAL_GetTick>
 80090f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090f6:	e00a      	b.n	800910e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090f8:	f7fa fffe 	bl	80040f8 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009106:	4293      	cmp	r3, r2
 8009108:	d901      	bls.n	800910e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e04f      	b.n	80091ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800910e:	4b2b      	ldr	r3, [pc, #172]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 020c 	and.w	r2, r3, #12
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	429a      	cmp	r2, r3
 800911e:	d1eb      	bne.n	80090f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009120:	4b25      	ldr	r3, [pc, #148]	@ (80091b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0307 	and.w	r3, r3, #7
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	429a      	cmp	r2, r3
 800912c:	d20c      	bcs.n	8009148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800912e:	4b22      	ldr	r3, [pc, #136]	@ (80091b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	b2d2      	uxtb	r2, r2
 8009134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009136:	4b20      	ldr	r3, [pc, #128]	@ (80091b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	429a      	cmp	r2, r3
 8009142:	d001      	beq.n	8009148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e032      	b.n	80091ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d008      	beq.n	8009166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009154:	4b19      	ldr	r3, [pc, #100]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	4916      	ldr	r1, [pc, #88]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 8009162:	4313      	orrs	r3, r2
 8009164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0308 	and.w	r3, r3, #8
 800916e:	2b00      	cmp	r3, #0
 8009170:	d009      	beq.n	8009186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009172:	4b12      	ldr	r3, [pc, #72]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	490e      	ldr	r1, [pc, #56]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 8009182:	4313      	orrs	r3, r2
 8009184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009186:	f000 f821 	bl	80091cc <HAL_RCC_GetSysClockFreq>
 800918a:	4602      	mov	r2, r0
 800918c:	4b0b      	ldr	r3, [pc, #44]	@ (80091bc <HAL_RCC_ClockConfig+0x1bc>)
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	091b      	lsrs	r3, r3, #4
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	490a      	ldr	r1, [pc, #40]	@ (80091c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009198:	5ccb      	ldrb	r3, [r1, r3]
 800919a:	fa22 f303 	lsr.w	r3, r2, r3
 800919e:	4a09      	ldr	r2, [pc, #36]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c4>)
 80091a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091a2:	4b09      	ldr	r3, [pc, #36]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fa ff62 	bl	8004070 <HAL_InitTick>

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	40023c00 	.word	0x40023c00
 80091bc:	40023800 	.word	0x40023800
 80091c0:	08024e94 	.word	0x08024e94
 80091c4:	20000010 	.word	0x20000010
 80091c8:	20000014 	.word	0x20000014

080091cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091d0:	b090      	sub	sp, #64	@ 0x40
 80091d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d8:	2300      	movs	r3, #0
 80091da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091dc:	2300      	movs	r3, #0
 80091de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80091e0:	2300      	movs	r3, #0
 80091e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091e4:	4b59      	ldr	r3, [pc, #356]	@ (800934c <HAL_RCC_GetSysClockFreq+0x180>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f003 030c 	and.w	r3, r3, #12
 80091ec:	2b08      	cmp	r3, #8
 80091ee:	d00d      	beq.n	800920c <HAL_RCC_GetSysClockFreq+0x40>
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	f200 80a1 	bhi.w	8009338 <HAL_RCC_GetSysClockFreq+0x16c>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d002      	beq.n	8009200 <HAL_RCC_GetSysClockFreq+0x34>
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d003      	beq.n	8009206 <HAL_RCC_GetSysClockFreq+0x3a>
 80091fe:	e09b      	b.n	8009338 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009200:	4b53      	ldr	r3, [pc, #332]	@ (8009350 <HAL_RCC_GetSysClockFreq+0x184>)
 8009202:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009204:	e09b      	b.n	800933e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009206:	4b53      	ldr	r3, [pc, #332]	@ (8009354 <HAL_RCC_GetSysClockFreq+0x188>)
 8009208:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800920a:	e098      	b.n	800933e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800920c:	4b4f      	ldr	r3, [pc, #316]	@ (800934c <HAL_RCC_GetSysClockFreq+0x180>)
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009214:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009216:	4b4d      	ldr	r3, [pc, #308]	@ (800934c <HAL_RCC_GetSysClockFreq+0x180>)
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d028      	beq.n	8009274 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009222:	4b4a      	ldr	r3, [pc, #296]	@ (800934c <HAL_RCC_GetSysClockFreq+0x180>)
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	099b      	lsrs	r3, r3, #6
 8009228:	2200      	movs	r2, #0
 800922a:	623b      	str	r3, [r7, #32]
 800922c:	627a      	str	r2, [r7, #36]	@ 0x24
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009234:	2100      	movs	r1, #0
 8009236:	4b47      	ldr	r3, [pc, #284]	@ (8009354 <HAL_RCC_GetSysClockFreq+0x188>)
 8009238:	fb03 f201 	mul.w	r2, r3, r1
 800923c:	2300      	movs	r3, #0
 800923e:	fb00 f303 	mul.w	r3, r0, r3
 8009242:	4413      	add	r3, r2
 8009244:	4a43      	ldr	r2, [pc, #268]	@ (8009354 <HAL_RCC_GetSysClockFreq+0x188>)
 8009246:	fba0 1202 	umull	r1, r2, r0, r2
 800924a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800924c:	460a      	mov	r2, r1
 800924e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009252:	4413      	add	r3, r2
 8009254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009258:	2200      	movs	r2, #0
 800925a:	61bb      	str	r3, [r7, #24]
 800925c:	61fa      	str	r2, [r7, #28]
 800925e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009266:	f7f7 fd27 	bl	8000cb8 <__aeabi_uldivmod>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4613      	mov	r3, r2
 8009270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009272:	e053      	b.n	800931c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009274:	4b35      	ldr	r3, [pc, #212]	@ (800934c <HAL_RCC_GetSysClockFreq+0x180>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	099b      	lsrs	r3, r3, #6
 800927a:	2200      	movs	r2, #0
 800927c:	613b      	str	r3, [r7, #16]
 800927e:	617a      	str	r2, [r7, #20]
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009286:	f04f 0b00 	mov.w	fp, #0
 800928a:	4652      	mov	r2, sl
 800928c:	465b      	mov	r3, fp
 800928e:	f04f 0000 	mov.w	r0, #0
 8009292:	f04f 0100 	mov.w	r1, #0
 8009296:	0159      	lsls	r1, r3, #5
 8009298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800929c:	0150      	lsls	r0, r2, #5
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	ebb2 080a 	subs.w	r8, r2, sl
 80092a6:	eb63 090b 	sbc.w	r9, r3, fp
 80092aa:	f04f 0200 	mov.w	r2, #0
 80092ae:	f04f 0300 	mov.w	r3, #0
 80092b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80092b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80092ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80092be:	ebb2 0408 	subs.w	r4, r2, r8
 80092c2:	eb63 0509 	sbc.w	r5, r3, r9
 80092c6:	f04f 0200 	mov.w	r2, #0
 80092ca:	f04f 0300 	mov.w	r3, #0
 80092ce:	00eb      	lsls	r3, r5, #3
 80092d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092d4:	00e2      	lsls	r2, r4, #3
 80092d6:	4614      	mov	r4, r2
 80092d8:	461d      	mov	r5, r3
 80092da:	eb14 030a 	adds.w	r3, r4, sl
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	eb45 030b 	adc.w	r3, r5, fp
 80092e4:	607b      	str	r3, [r7, #4]
 80092e6:	f04f 0200 	mov.w	r2, #0
 80092ea:	f04f 0300 	mov.w	r3, #0
 80092ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80092f2:	4629      	mov	r1, r5
 80092f4:	028b      	lsls	r3, r1, #10
 80092f6:	4621      	mov	r1, r4
 80092f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80092fc:	4621      	mov	r1, r4
 80092fe:	028a      	lsls	r2, r1, #10
 8009300:	4610      	mov	r0, r2
 8009302:	4619      	mov	r1, r3
 8009304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009306:	2200      	movs	r2, #0
 8009308:	60bb      	str	r3, [r7, #8]
 800930a:	60fa      	str	r2, [r7, #12]
 800930c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009310:	f7f7 fcd2 	bl	8000cb8 <__aeabi_uldivmod>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4613      	mov	r3, r2
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800931c:	4b0b      	ldr	r3, [pc, #44]	@ (800934c <HAL_RCC_GetSysClockFreq+0x180>)
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	0c1b      	lsrs	r3, r3, #16
 8009322:	f003 0303 	and.w	r3, r3, #3
 8009326:	3301      	adds	r3, #1
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800932c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	fbb2 f3f3 	udiv	r3, r2, r3
 8009334:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009336:	e002      	b.n	800933e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009338:	4b05      	ldr	r3, [pc, #20]	@ (8009350 <HAL_RCC_GetSysClockFreq+0x184>)
 800933a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800933c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800933e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009340:	4618      	mov	r0, r3
 8009342:	3740      	adds	r7, #64	@ 0x40
 8009344:	46bd      	mov	sp, r7
 8009346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800934a:	bf00      	nop
 800934c:	40023800 	.word	0x40023800
 8009350:	00f42400 	.word	0x00f42400
 8009354:	017d7840 	.word	0x017d7840

08009358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009358:	b480      	push	{r7}
 800935a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800935c:	4b03      	ldr	r3, [pc, #12]	@ (800936c <HAL_RCC_GetHCLKFreq+0x14>)
 800935e:	681b      	ldr	r3, [r3, #0]
}
 8009360:	4618      	mov	r0, r3
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	20000010 	.word	0x20000010

08009370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009374:	f7ff fff0 	bl	8009358 <HAL_RCC_GetHCLKFreq>
 8009378:	4602      	mov	r2, r0
 800937a:	4b05      	ldr	r3, [pc, #20]	@ (8009390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	0a9b      	lsrs	r3, r3, #10
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	4903      	ldr	r1, [pc, #12]	@ (8009394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009386:	5ccb      	ldrb	r3, [r1, r3]
 8009388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800938c:	4618      	mov	r0, r3
 800938e:	bd80      	pop	{r7, pc}
 8009390:	40023800 	.word	0x40023800
 8009394:	08024ea4 	.word	0x08024ea4

08009398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800939c:	f7ff ffdc 	bl	8009358 <HAL_RCC_GetHCLKFreq>
 80093a0:	4602      	mov	r2, r0
 80093a2:	4b05      	ldr	r3, [pc, #20]	@ (80093b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	0b5b      	lsrs	r3, r3, #13
 80093a8:	f003 0307 	and.w	r3, r3, #7
 80093ac:	4903      	ldr	r1, [pc, #12]	@ (80093bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80093ae:	5ccb      	ldrb	r3, [r1, r3]
 80093b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	40023800 	.word	0x40023800
 80093bc:	08024ea4 	.word	0x08024ea4

080093c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d105      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d035      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80093e8:	4b67      	ldr	r3, [pc, #412]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80093ee:	f7fa fe83 	bl	80040f8 <HAL_GetTick>
 80093f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093f4:	e008      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80093f6:	f7fa fe7f 	bl	80040f8 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e0ba      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009408:	4b60      	ldr	r3, [pc, #384]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1f0      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	019a      	lsls	r2, r3, #6
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	071b      	lsls	r3, r3, #28
 8009420:	495a      	ldr	r1, [pc, #360]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009422:	4313      	orrs	r3, r2
 8009424:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009428:	4b57      	ldr	r3, [pc, #348]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800942a:	2201      	movs	r2, #1
 800942c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800942e:	f7fa fe63 	bl	80040f8 <HAL_GetTick>
 8009432:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009434:	e008      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009436:	f7fa fe5f 	bl	80040f8 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	2b02      	cmp	r3, #2
 8009442:	d901      	bls.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e09a      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009448:	4b50      	ldr	r3, [pc, #320]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0f0      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 8083 	beq.w	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	4b49      	ldr	r3, [pc, #292]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946a:	4a48      	ldr	r2, [pc, #288]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800946c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009470:	6413      	str	r3, [r2, #64]	@ 0x40
 8009472:	4b46      	ldr	r3, [pc, #280]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800947e:	4b44      	ldr	r3, [pc, #272]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a43      	ldr	r2, [pc, #268]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009488:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800948a:	f7fa fe35 	bl	80040f8 <HAL_GetTick>
 800948e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009490:	e008      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009492:	f7fa fe31 	bl	80040f8 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	2b02      	cmp	r3, #2
 800949e:	d901      	bls.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e06c      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094a4:	4b3a      	ldr	r3, [pc, #232]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0f0      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80094b0:	4b36      	ldr	r3, [pc, #216]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d02f      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d028      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094ce:	4b2f      	ldr	r3, [pc, #188]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80094d8:	4b2e      	ldr	r3, [pc, #184]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094da:	2201      	movs	r2, #1
 80094dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80094de:	4b2d      	ldr	r3, [pc, #180]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80094e4:	4a29      	ldr	r2, [pc, #164]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80094ea:	4b28      	ldr	r3, [pc, #160]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d114      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80094f6:	f7fa fdff 	bl	80040f8 <HAL_GetTick>
 80094fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094fc:	e00a      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094fe:	f7fa fdfb 	bl	80040f8 <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800950c:	4293      	cmp	r3, r2
 800950e:	d901      	bls.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e034      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009514:	4b1d      	ldr	r3, [pc, #116]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0ee      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009528:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800952c:	d10d      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800952e:	4b17      	ldr	r3, [pc, #92]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800953e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009542:	4912      	ldr	r1, [pc, #72]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009544:	4313      	orrs	r3, r2
 8009546:	608b      	str	r3, [r1, #8]
 8009548:	e005      	b.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800954a:	4b10      	ldr	r3, [pc, #64]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	4a0f      	ldr	r2, [pc, #60]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009550:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009554:	6093      	str	r3, [r2, #8]
 8009556:	4b0d      	ldr	r3, [pc, #52]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009558:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009562:	490a      	ldr	r1, [pc, #40]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009564:	4313      	orrs	r3, r2
 8009566:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0308 	and.w	r3, r3, #8
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	7c1a      	ldrb	r2, [r3, #16]
 8009578:	4b07      	ldr	r3, [pc, #28]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800957a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	42470068 	.word	0x42470068
 800958c:	40023800 	.word	0x40023800
 8009590:	40007000 	.word	0x40007000
 8009594:	42470e40 	.word	0x42470e40
 8009598:	424711e0 	.word	0x424711e0

0800959c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80095a2:	f7fa fda9 	bl	80040f8 <HAL_GetTick>
 80095a6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80095a8:	4b5d      	ldr	r3, [pc, #372]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a5c      	ldr	r2, [pc, #368]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80095ae:	f043 0301 	orr.w	r3, r3, #1
 80095b2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80095b4:	e008      	b.n	80095c8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095b6:	f7fa fd9f 	bl	80040f8 <HAL_GetTick>
 80095ba:	4602      	mov	r2, r0
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d901      	bls.n	80095c8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e0a7      	b.n	8009718 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80095c8:	4b55      	ldr	r3, [pc, #340]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0f0      	beq.n	80095b6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80095d4:	4b52      	ldr	r3, [pc, #328]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a51      	ldr	r2, [pc, #324]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80095da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80095e0:	f7fa fd8a 	bl	80040f8 <HAL_GetTick>
 80095e4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80095e6:	4b4e      	ldr	r3, [pc, #312]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80095ec:	e00a      	b.n	8009604 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095ee:	f7fa fd83 	bl	80040f8 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d901      	bls.n	8009604 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e089      	b.n	8009718 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009604:	4b46      	ldr	r3, [pc, #280]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f003 030c 	and.w	r3, r3, #12
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1ee      	bne.n	80095ee <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009610:	f7fa fd72 	bl	80040f8 <HAL_GetTick>
 8009614:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8009616:	4b42      	ldr	r3, [pc, #264]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a41      	ldr	r2, [pc, #260]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 800961c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8009620:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009622:	e008      	b.n	8009636 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009624:	f7fa fd68 	bl	80040f8 <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	2b64      	cmp	r3, #100	@ 0x64
 8009630:	d901      	bls.n	8009636 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e070      	b.n	8009718 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009636:	4b3a      	ldr	r3, [pc, #232]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1f0      	bne.n	8009624 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009642:	f7fa fd59 	bl	80040f8 <HAL_GetTick>
 8009646:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009648:	4b35      	ldr	r3, [pc, #212]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a34      	ldr	r2, [pc, #208]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 800964e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009652:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009654:	e008      	b.n	8009668 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009656:	f7fa fd4f 	bl	80040f8 <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	2b02      	cmp	r3, #2
 8009662:	d901      	bls.n	8009668 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e057      	b.n	8009718 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009668:	4b2d      	ldr	r3, [pc, #180]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1f0      	bne.n	8009656 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009674:	f7fa fd40 	bl	80040f8 <HAL_GetTick>
 8009678:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800967a:	4b29      	ldr	r3, [pc, #164]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a28      	ldr	r2, [pc, #160]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 8009680:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009684:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8009686:	e008      	b.n	800969a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009688:	f7fa fd36 	bl	80040f8 <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	2b02      	cmp	r3, #2
 8009694:	d901      	bls.n	800969a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e03e      	b.n	8009718 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800969a:	4b21      	ldr	r3, [pc, #132]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1f0      	bne.n	8009688 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80096a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096a8:	4a1e      	ldr	r2, [pc, #120]	@ (8009724 <HAL_RCC_DeInit+0x188>)
 80096aa:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80096ac:	4b1c      	ldr	r3, [pc, #112]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009728 <HAL_RCC_DeInit+0x18c>)
 80096b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80096b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	4a19      	ldr	r2, [pc, #100]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096ba:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80096be:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80096c0:	4b17      	ldr	r3, [pc, #92]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	4a16      	ldr	r2, [pc, #88]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096ca:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80096cc:	4b14      	ldr	r3, [pc, #80]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	4a13      	ldr	r2, [pc, #76]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096d2:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 80096d6:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80096d8:	4b11      	ldr	r3, [pc, #68]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	4a10      	ldr	r2, [pc, #64]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096e2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80096e4:	4b0e      	ldr	r3, [pc, #56]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096e8:	4a0d      	ldr	r2, [pc, #52]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096ea:	f023 0301 	bic.w	r3, r3, #1
 80096ee:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80096f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096f4:	4a0a      	ldr	r2, [pc, #40]	@ (8009720 <HAL_RCC_DeInit+0x184>)
 80096f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80096fa:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80096fc:	4b0b      	ldr	r3, [pc, #44]	@ (800972c <HAL_RCC_DeInit+0x190>)
 80096fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009730 <HAL_RCC_DeInit+0x194>)
 8009700:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8009702:	4b0c      	ldr	r3, [pc, #48]	@ (8009734 <HAL_RCC_DeInit+0x198>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f7fa fcb2 	bl	8004070 <HAL_InitTick>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e000      	b.n	8009718 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8009716:	2300      	movs	r3, #0
  }
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	40023800 	.word	0x40023800
 8009724:	04003010 	.word	0x04003010
 8009728:	20003000 	.word	0x20003000
 800972c:	20000010 	.word	0x20000010
 8009730:	00f42400 	.word	0x00f42400
 8009734:	20000014 	.word	0x20000014

08009738 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e073      	b.n	8009836 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7f5b      	ldrb	r3, [r3, #29]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d105      	bne.n	8009764 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7fa f87e 	bl	8003860 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	2b10      	cmp	r3, #16
 8009776:	d055      	beq.n	8009824 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	22ca      	movs	r2, #202	@ 0xca
 800977e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2253      	movs	r2, #83	@ 0x53
 8009786:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fbd3 	bl	8009f34 <RTC_EnterInitMode>
 800978e:	4603      	mov	r3, r0
 8009790:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d12c      	bne.n	80097f2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	6812      	ldr	r2, [r2, #0]
 80097a2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80097a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097aa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6899      	ldr	r1, [r3, #8]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	431a      	orrs	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	431a      	orrs	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	430a      	orrs	r2, r1
 80097c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	68d2      	ldr	r2, [r2, #12]
 80097d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6919      	ldr	r1, [r3, #16]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	041a      	lsls	r2, r3, #16
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fbda 	bl	8009fa2 <RTC_ExitInitMode>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d110      	bne.n	800981a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009806:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	699a      	ldr	r2, [r3, #24]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	22ff      	movs	r2, #255	@ 0xff
 8009820:	625a      	str	r2, [r3, #36]	@ 0x24
 8009822:	e001      	b.n	8009828 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d102      	bne.n	8009834 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800983e:	b590      	push	{r4, r7, lr}
 8009840:	b087      	sub	sp, #28
 8009842:	af00      	add	r7, sp, #0
 8009844:	60f8      	str	r0, [r7, #12]
 8009846:	60b9      	str	r1, [r7, #8]
 8009848:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	7f1b      	ldrb	r3, [r3, #28]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d101      	bne.n	800985a <HAL_RTC_SetTime+0x1c>
 8009856:	2302      	movs	r3, #2
 8009858:	e087      	b.n	800996a <HAL_RTC_SetTime+0x12c>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2202      	movs	r2, #2
 8009864:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d126      	bne.n	80098ba <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009876:	2b00      	cmp	r3, #0
 8009878:	d102      	bne.n	8009880 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2200      	movs	r2, #0
 800987e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	4618      	mov	r0, r3
 8009886:	f000 fbb1 	bl	8009fec <RTC_ByteToBcd2>
 800988a:	4603      	mov	r3, r0
 800988c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	785b      	ldrb	r3, [r3, #1]
 8009892:	4618      	mov	r0, r3
 8009894:	f000 fbaa 	bl	8009fec <RTC_ByteToBcd2>
 8009898:	4603      	mov	r3, r0
 800989a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800989c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	789b      	ldrb	r3, [r3, #2]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fba2 	bl	8009fec <RTC_ByteToBcd2>
 80098a8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098aa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	78db      	ldrb	r3, [r3, #3]
 80098b2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098b4:	4313      	orrs	r3, r2
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	e018      	b.n	80098ec <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	2200      	movs	r2, #0
 80098cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	785b      	ldrb	r3, [r3, #1]
 80098d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098da:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098e0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	78db      	ldrb	r3, [r3, #3]
 80098e6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098e8:	4313      	orrs	r3, r2
 80098ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	22ca      	movs	r2, #202	@ 0xca
 80098f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2253      	movs	r2, #83	@ 0x53
 80098fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 fb19 	bl	8009f34 <RTC_EnterInitMode>
 8009902:	4603      	mov	r3, r0
 8009904:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009906:	7cfb      	ldrb	r3, [r7, #19]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d120      	bne.n	800994e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009916:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800991a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689a      	ldr	r2, [r3, #8]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800992a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6899      	ldr	r1, [r3, #8]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	68da      	ldr	r2, [r3, #12]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	431a      	orrs	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	430a      	orrs	r2, r1
 8009942:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 fb2c 	bl	8009fa2 <RTC_ExitInitMode>
 800994a:	4603      	mov	r3, r0
 800994c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800994e:	7cfb      	ldrb	r3, [r7, #19]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2201      	movs	r2, #1
 8009958:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	22ff      	movs	r2, #255	@ 0xff
 8009960:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	771a      	strb	r2, [r3, #28]

  return status;
 8009968:	7cfb      	ldrb	r3, [r7, #19]
}
 800996a:	4618      	mov	r0, r3
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	bd90      	pop	{r4, r7, pc}

08009972 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b086      	sub	sp, #24
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80099a4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80099a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	0c1b      	lsrs	r3, r3, #16
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	0a1b      	lsrs	r3, r3, #8
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	0d9b      	lsrs	r3, r3, #22
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d11a      	bne.n	8009a24 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fb18 	bl	800a028 <RTC_Bcd2ToByte>
 80099f8:	4603      	mov	r3, r0
 80099fa:	461a      	mov	r2, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	785b      	ldrb	r3, [r3, #1]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fb0f 	bl	800a028 <RTC_Bcd2ToByte>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	789b      	ldrb	r3, [r3, #2]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 fb06 	bl	800a028 <RTC_Bcd2ToByte>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	461a      	mov	r2, r3
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a2e:	b590      	push	{r4, r7, lr}
 8009a30:	b087      	sub	sp, #28
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	7f1b      	ldrb	r3, [r3, #28]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d101      	bne.n	8009a4a <HAL_RTC_SetDate+0x1c>
 8009a46:	2302      	movs	r3, #2
 8009a48:	e071      	b.n	8009b2e <HAL_RTC_SetDate+0x100>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2202      	movs	r2, #2
 8009a54:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10e      	bne.n	8009a7a <HAL_RTC_SetDate+0x4c>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	785b      	ldrb	r3, [r3, #1]
 8009a60:	f003 0310 	and.w	r3, r3, #16
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d008      	beq.n	8009a7a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	f023 0310 	bic.w	r3, r3, #16
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	330a      	adds	r3, #10
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d11c      	bne.n	8009aba <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	78db      	ldrb	r3, [r3, #3]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 fab1 	bl	8009fec <RTC_ByteToBcd2>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	785b      	ldrb	r3, [r3, #1]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 faaa 	bl	8009fec <RTC_ByteToBcd2>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009a9c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	789b      	ldrb	r3, [r3, #2]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 faa2 	bl	8009fec <RTC_ByteToBcd2>
 8009aa8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009aaa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	e00e      	b.n	8009ad8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	78db      	ldrb	r3, [r3, #3]
 8009abe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	785b      	ldrb	r3, [r3, #1]
 8009ac4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ac6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009acc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	22ca      	movs	r2, #202	@ 0xca
 8009ade:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2253      	movs	r2, #83	@ 0x53
 8009ae6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 fa23 	bl	8009f34 <RTC_EnterInitMode>
 8009aee:	4603      	mov	r3, r0
 8009af0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009af2:	7cfb      	ldrb	r3, [r7, #19]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10c      	bne.n	8009b12 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009b02:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b06:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fa4a 	bl	8009fa2 <RTC_ExitInitMode>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009b12:	7cfb      	ldrb	r3, [r7, #19]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	22ff      	movs	r2, #255	@ 0xff
 8009b24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	771a      	strb	r2, [r3, #28]

  return status;
 8009b2c:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	371c      	adds	r7, #28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd90      	pop	{r4, r7, pc}

08009b36 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b086      	sub	sp, #24
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009b50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	0c1b      	lsrs	r3, r3, #16
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	0a1b      	lsrs	r3, r3, #8
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	f003 031f 	and.w	r3, r3, #31
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	0b5b      	lsrs	r3, r3, #13
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f003 0307 	and.w	r3, r3, #7
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d11a      	bne.n	8009bca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	78db      	ldrb	r3, [r3, #3]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 fa45 	bl	800a028 <RTC_Bcd2ToByte>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	785b      	ldrb	r3, [r3, #1]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 fa3c 	bl	800a028 <RTC_Bcd2ToByte>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	789b      	ldrb	r3, [r3, #2]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 fa33 	bl	800a028 <RTC_Bcd2ToByte>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009bd4:	b590      	push	{r4, r7, lr}
 8009bd6:	b089      	sub	sp, #36	@ 0x24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009be0:	4b9b      	ldr	r3, [pc, #620]	@ (8009e50 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a9b      	ldr	r2, [pc, #620]	@ (8009e54 <HAL_RTC_SetAlarm_IT+0x280>)
 8009be6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bea:	0adb      	lsrs	r3, r3, #11
 8009bec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009bf0:	fb02 f303 	mul.w	r3, r2, r3
 8009bf4:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	7f1b      	ldrb	r3, [r3, #28]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d101      	bne.n	8009c0a <HAL_RTC_SetAlarm_IT+0x36>
 8009c06:	2302      	movs	r3, #2
 8009c08:	e11e      	b.n	8009e48 <HAL_RTC_SetAlarm_IT+0x274>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2202      	movs	r2, #2
 8009c14:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d137      	bne.n	8009c8c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d102      	bne.n	8009c30 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 f9d9 	bl	8009fec <RTC_ByteToBcd2>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	785b      	ldrb	r3, [r3, #1]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 f9d2 	bl	8009fec <RTC_ByteToBcd2>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c4c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	789b      	ldrb	r3, [r3, #2]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 f9ca 	bl	8009fec <RTC_ByteToBcd2>
 8009c58:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c5a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	78db      	ldrb	r3, [r3, #3]
 8009c62:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c64:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 f9bc 	bl	8009fec <RTC_ByteToBcd2>
 8009c74:	4603      	mov	r3, r0
 8009c76:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c78:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009c80:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c86:	4313      	orrs	r3, r2
 8009c88:	61fb      	str	r3, [r7, #28]
 8009c8a:	e023      	b.n	8009cd4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d102      	bne.n	8009ca0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	785b      	ldrb	r3, [r3, #1]
 8009caa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cac:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009cb2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	78db      	ldrb	r3, [r3, #3]
 8009cb8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cc2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cc4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009cca:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	22ca      	movs	r2, #202	@ 0xca
 8009ce6:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2253      	movs	r2, #83	@ 0x53
 8009cee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cf8:	d142      	bne.n	8009d80 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689a      	ldr	r2, [r3, #8]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d08:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009d1a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10b      	bne.n	8009d40 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	22ff      	movs	r2, #255	@ 0xff
 8009d2e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2203      	movs	r2, #3
 8009d34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e083      	b.n	8009e48 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0e6      	beq.n	8009d1c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69fa      	ldr	r2, [r7, #28]
 8009d54:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d6c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d7c:	609a      	str	r2, [r3, #8]
 8009d7e:	e04c      	b.n	8009e1a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689a      	ldr	r2, [r3, #8]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009d8e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009da0:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009da2:	4b2b      	ldr	r3, [pc, #172]	@ (8009e50 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a2b      	ldr	r2, [pc, #172]	@ (8009e54 <HAL_RTC_SetAlarm_IT+0x280>)
 8009da8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dac:	0adb      	lsrs	r3, r3, #11
 8009dae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009db2:	fb02 f303 	mul.w	r3, r2, r3
 8009db6:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10b      	bne.n	8009ddc <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	22ff      	movs	r2, #255	@ 0xff
 8009dca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2203      	movs	r2, #3
 8009dd0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e035      	b.n	8009e48 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	f003 0302 	and.w	r3, r3, #2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0e6      	beq.n	8009db8 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	69fa      	ldr	r2, [r7, #28]
 8009df0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689a      	ldr	r2, [r3, #8]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e08:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	689a      	ldr	r2, [r3, #8]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009e18:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e58 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8009e58 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e24:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009e26:	4b0c      	ldr	r3, [pc, #48]	@ (8009e58 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8009e58 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e30:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	22ff      	movs	r2, #255	@ 0xff
 8009e38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3724      	adds	r7, #36	@ 0x24
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd90      	pop	{r4, r7, pc}
 8009e50:	20000010 	.word	0x20000010
 8009e54:	10624dd3 	.word	0x10624dd3
 8009e58:	40013c00 	.word	0x40013c00

08009e5c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009e64:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8009e66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009e6a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d012      	beq.n	8009ea0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00b      	beq.n	8009ea0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009e98:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7f9 fbb4 	bl	8003608 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d012      	beq.n	8009ed4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009ecc:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f8fa 	bl	800a0c8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	775a      	strb	r2, [r3, #29]
}
 8009eda:	bf00      	nop
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	40013c00 	.word	0x40013c00

08009ee8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8009f30 <HAL_RTC_WaitForSynchro+0x48>)
 8009efa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009efc:	f7fa f8fc 	bl	80040f8 <HAL_GetTick>
 8009f00:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f02:	e009      	b.n	8009f18 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f04:	f7fa f8f8 	bl	80040f8 <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f12:	d901      	bls.n	8009f18 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e007      	b.n	8009f28 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0ee      	beq.n	8009f04 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	00013f5f 	.word	0x00013f5f

08009f34 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d122      	bne.n	8009f98 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68da      	ldr	r2, [r3, #12]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009f60:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f62:	f7fa f8c9 	bl	80040f8 <HAL_GetTick>
 8009f66:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f68:	e00c      	b.n	8009f84 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f6a:	f7fa f8c5 	bl	80040f8 <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f78:	d904      	bls.n	8009f84 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2204      	movs	r2, #4
 8009f7e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d102      	bne.n	8009f98 <RTC_EnterInitMode+0x64>
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d1e8      	bne.n	8009f6a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68da      	ldr	r2, [r3, #12]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fbc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	f003 0320 	and.w	r3, r3, #32
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7ff ff8b 	bl	8009ee8 <HAL_RTC_WaitForSynchro>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d004      	beq.n	8009fe2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2204      	movs	r2, #4
 8009fdc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009ffa:	e005      	b.n	800a008 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3301      	adds	r3, #1
 800a000:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	3b0a      	subs	r3, #10
 800a006:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a008:	79fb      	ldrb	r3, [r7, #7]
 800a00a:	2b09      	cmp	r3, #9
 800a00c:	d8f6      	bhi.n	8009ffc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	b2db      	uxtb	r3, r3
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	b2da      	uxtb	r2, r3
 800a016:	79fb      	ldrb	r3, [r7, #7]
 800a018:	4313      	orrs	r3, r2
 800a01a:	b2db      	uxtb	r3, r3
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	091b      	lsrs	r3, r3, #4
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	461a      	mov	r2, r3
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	005b      	lsls	r3, r3, #1
 800a046:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	f003 030f 	and.w	r3, r3, #15
 800a052:	b2db      	uxtb	r3, r3
 800a054:	4413      	add	r3, r2
 800a056:	b2db      	uxtb	r3, r3
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3350      	adds	r3, #80	@ 0x50
 800a07a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	4413      	add	r3, r2
 800a084:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	601a      	str	r2, [r3, #0]
}
 800a08c:	bf00      	nop
 800a08e:	371c      	adds	r7, #28
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3350      	adds	r3, #80	@ 0x50
 800a0ac:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d101      	bne.n	800a0ee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e022      	b.n	800a134 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d105      	bne.n	800a106 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7f9 fbe1 	bl	80038c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2203      	movs	r2, #3
 800a10a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f814 	bl	800a13c <HAL_SD_InitCard>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e00a      	b.n	800a134 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a13c:	b5b0      	push	{r4, r5, r7, lr}
 800a13e:	b08e      	sub	sp, #56	@ 0x38
 800a140:	af04      	add	r7, sp, #16
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a144:	2300      	movs	r3, #0
 800a146:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a148:	2300      	movs	r3, #0
 800a14a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a14c:	2300      	movs	r3, #0
 800a14e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a154:	2300      	movs	r3, #0
 800a156:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a158:	2376      	movs	r3, #118	@ 0x76
 800a15a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681d      	ldr	r5, [r3, #0]
 800a160:	466c      	mov	r4, sp
 800a162:	f107 0314 	add.w	r3, r7, #20
 800a166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a16a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a16e:	f107 0308 	add.w	r3, r7, #8
 800a172:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a174:	4628      	mov	r0, r5
 800a176:	f003 f8ad 	bl	800d2d4 <SDIO_Init>
 800a17a:	4603      	mov	r3, r0
 800a17c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e04f      	b.n	800a22c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a18c:	4b29      	ldr	r3, [pc, #164]	@ (800a234 <HAL_SD_InitCard+0xf8>)
 800a18e:	2200      	movs	r2, #0
 800a190:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4618      	mov	r0, r3
 800a198:	f003 f8e5 	bl	800d366 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a19c:	4b25      	ldr	r3, [pc, #148]	@ (800a234 <HAL_SD_InitCard+0xf8>)
 800a19e:	2201      	movs	r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a1a2:	2002      	movs	r0, #2
 800a1a4:	f7f9 ffb4 	bl	8004110 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fe79 	bl	800aea0 <SD_PowerON>
 800a1ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00b      	beq.n	800a1ce <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e02e      	b.n	800a22c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fd98 	bl	800ad04 <SD_InitCard>
 800a1d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00b      	beq.n	800a1f4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e01b      	b.n	800a22c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f003 f944 	bl	800d48a <SDMMC_CmdBlockLength>
 800a202:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00f      	beq.n	800a22a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a0a      	ldr	r2, [pc, #40]	@ (800a238 <HAL_SD_InitCard+0xfc>)
 800a210:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3728      	adds	r7, #40	@ 0x28
 800a230:	46bd      	mov	sp, r7
 800a232:	bdb0      	pop	{r4, r5, r7, pc}
 800a234:	422580a0 	.word	0x422580a0
 800a238:	004005ff 	.word	0x004005ff

0800a23c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b092      	sub	sp, #72	@ 0x48
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a24a:	f7f9 ff55 	bl	80040f8 <HAL_GetTick>
 800a24e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d107      	bne.n	800a26e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a262:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e1c5      	b.n	800a5fa <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b01      	cmp	r3, #1
 800a278:	f040 81b8 	bne.w	800a5ec <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	441a      	add	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d907      	bls.n	800a2a0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a294:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e1ac      	b.n	800a5fa <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d002      	beq.n	800a2be <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ba:	025b      	lsls	r3, r3, #9
 800a2bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2be:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	025b      	lsls	r3, r3, #9
 800a2c8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a2ca:	2390      	movs	r3, #144	@ 0x90
 800a2cc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f107 0214 	add.w	r2, r7, #20
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f003 f8a4 	bl	800d432 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d90a      	bls.n	800a306 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f003 f908 	bl	800d512 <SDMMC_CmdReadMultiBlock>
 800a302:	6478      	str	r0, [r7, #68]	@ 0x44
 800a304:	e009      	b.n	800a31a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2201      	movs	r2, #1
 800a30a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a312:	4618      	mov	r0, r3
 800a314:	f003 f8db 	bl	800d4ce <SDMMC_CmdReadSingleBlock>
 800a318:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a31a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d012      	beq.n	800a346 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a7e      	ldr	r2, [pc, #504]	@ (800a520 <HAL_SD_ReadBlocks+0x2e4>)
 800a326:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a32c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a32e:	431a      	orrs	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e159      	b.n	800a5fa <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a34a:	e061      	b.n	800a410 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a352:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d03c      	beq.n	800a3d4 <HAL_SD_ReadBlocks+0x198>
 800a35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d039      	beq.n	800a3d4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a360:	2300      	movs	r3, #0
 800a362:	643b      	str	r3, [r7, #64]	@ 0x40
 800a364:	e033      	b.n	800a3ce <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f002 ffdd 	bl	800d32a <SDIO_ReadFIFO>
 800a370:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a374:	b2da      	uxtb	r2, r3
 800a376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a378:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37c:	3301      	adds	r3, #1
 800a37e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a382:	3b01      	subs	r3, #1
 800a384:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a388:	0a1b      	lsrs	r3, r3, #8
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a38e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a392:	3301      	adds	r3, #1
 800a394:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a398:	3b01      	subs	r3, #1
 800a39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a39e:	0c1b      	lsrs	r3, r3, #16
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b4:	0e1b      	lsrs	r3, r3, #24
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3be:	3301      	adds	r3, #1
 800a3c0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800a3c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3d0:	2b07      	cmp	r3, #7
 800a3d2:	d9c8      	bls.n	800a366 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a3d4:	f7f9 fe90 	bl	80040f8 <HAL_GetTick>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d902      	bls.n	800a3ea <HAL_SD_ReadBlocks+0x1ae>
 800a3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d112      	bne.n	800a410 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a4c      	ldr	r2, [pc, #304]	@ (800a520 <HAL_SD_ReadBlocks+0x2e4>)
 800a3f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3f6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e0f4      	b.n	800a5fa <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a416:	f240 332a 	movw	r3, #810	@ 0x32a
 800a41a:	4013      	ands	r3, r2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d095      	beq.n	800a34c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d022      	beq.n	800a474 <HAL_SD_ReadBlocks+0x238>
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d91f      	bls.n	800a474 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d01b      	beq.n	800a474 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4618      	mov	r0, r3
 800a442:	f003 f8cd 	bl	800d5e0 <SDMMC_CmdStopTransfer>
 800a446:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d012      	beq.n	800a474 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a33      	ldr	r2, [pc, #204]	@ (800a520 <HAL_SD_ReadBlocks+0x2e4>)
 800a454:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a45a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a45c:	431a      	orrs	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e0c2      	b.n	800a5fa <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a47a:	f003 0308 	and.w	r3, r3, #8
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d106      	bne.n	800a490 <HAL_SD_ReadBlocks+0x254>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d012      	beq.n	800a4b6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a22      	ldr	r2, [pc, #136]	@ (800a520 <HAL_SD_ReadBlocks+0x2e4>)
 800a496:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49c:	f043 0208 	orr.w	r2, r3, #8
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e0a1      	b.n	800a5fa <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4bc:	f003 0302 	and.w	r3, r3, #2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d012      	beq.n	800a4ea <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a15      	ldr	r2, [pc, #84]	@ (800a520 <HAL_SD_ReadBlocks+0x2e4>)
 800a4ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d0:	f043 0202 	orr.w	r2, r3, #2
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e087      	b.n	800a5fa <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d064      	beq.n	800a5c2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a08      	ldr	r2, [pc, #32]	@ (800a520 <HAL_SD_ReadBlocks+0x2e4>)
 800a4fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a504:	f043 0220 	orr.w	r2, r3, #32
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e06d      	b.n	800a5fa <HAL_SD_ReadBlocks+0x3be>
 800a51e:	bf00      	nop
 800a520:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4618      	mov	r0, r3
 800a52a:	f002 fefe 	bl	800d32a <SDIO_ReadFIFO>
 800a52e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800a530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a532:	b2da      	uxtb	r2, r3
 800a534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a536:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53a:	3301      	adds	r3, #1
 800a53c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a53e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a540:	3b01      	subs	r3, #1
 800a542:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a546:	0a1b      	lsrs	r3, r3, #8
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a54c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a550:	3301      	adds	r3, #1
 800a552:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a556:	3b01      	subs	r3, #1
 800a558:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55c:	0c1b      	lsrs	r3, r3, #16
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a562:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a566:	3301      	adds	r3, #1
 800a568:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a56c:	3b01      	subs	r3, #1
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a572:	0e1b      	lsrs	r3, r3, #24
 800a574:	b2da      	uxtb	r2, r3
 800a576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a578:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a57c:	3301      	adds	r3, #1
 800a57e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a582:	3b01      	subs	r3, #1
 800a584:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a586:	f7f9 fdb7 	bl	80040f8 <HAL_GetTick>
 800a58a:	4602      	mov	r2, r0
 800a58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a592:	429a      	cmp	r2, r3
 800a594:	d902      	bls.n	800a59c <HAL_SD_ReadBlocks+0x360>
 800a596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d112      	bne.n	800a5c2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a18      	ldr	r2, [pc, #96]	@ (800a604 <HAL_SD_ReadBlocks+0x3c8>)
 800a5a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e01b      	b.n	800a5fa <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <HAL_SD_ReadBlocks+0x39a>
 800a5d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1a6      	bne.n	800a524 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a5de:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	e006      	b.n	800a5fa <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
  }
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3748      	adds	r7, #72	@ 0x48
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	004005ff 	.word	0x004005ff

0800a608 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b092      	sub	sp, #72	@ 0x48
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a616:	f7f9 fd6f 	bl	80040f8 <HAL_GetTick>
 800a61a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d107      	bne.n	800a63a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a62e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e16d      	b.n	800a916 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b01      	cmp	r3, #1
 800a644:	f040 8160 	bne.w	800a908 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a64e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	441a      	add	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a658:	429a      	cmp	r2, r3
 800a65a:	d907      	bls.n	800a66c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a660:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e154      	b.n	800a916 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2203      	movs	r2, #3
 800a670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2200      	movs	r2, #0
 800a67a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a680:	2b01      	cmp	r3, #1
 800a682:	d002      	beq.n	800a68a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a686:	025b      	lsls	r3, r3, #9
 800a688:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a68a:	f04f 33ff 	mov.w	r3, #4294967295
 800a68e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	025b      	lsls	r3, r3, #9
 800a694:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a696:	2390      	movs	r3, #144	@ 0x90
 800a698:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a69a:	2300      	movs	r3, #0
 800a69c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f107 0218 	add.w	r2, r7, #24
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f002 febe 	bl	800d432 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d90a      	bls.n	800a6d2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2220      	movs	r2, #32
 800a6c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f002 ff66 	bl	800d59a <SDMMC_CmdWriteMultiBlock>
 800a6ce:	6478      	str	r0, [r7, #68]	@ 0x44
 800a6d0:	e009      	b.n	800a6e6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2210      	movs	r2, #16
 800a6d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f002 ff39 	bl	800d556 <SDMMC_CmdWriteSingleBlock>
 800a6e4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d012      	beq.n	800a712 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a8b      	ldr	r2, [pc, #556]	@ (800a920 <HAL_SD_WriteBlocks+0x318>)
 800a6f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e101      	b.n	800a916 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a716:	e065      	b.n	800a7e4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a71e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a722:	2b00      	cmp	r3, #0
 800a724:	d040      	beq.n	800a7a8 <HAL_SD_WriteBlocks+0x1a0>
 800a726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d03d      	beq.n	800a7a8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a72c:	2300      	movs	r3, #0
 800a72e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a730:	e037      	b.n	800a7a2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73a:	3301      	adds	r3, #1
 800a73c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a740:	3b01      	subs	r3, #1
 800a742:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	021a      	lsls	r2, r3, #8
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a752:	3301      	adds	r3, #1
 800a754:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a758:	3b01      	subs	r3, #1
 800a75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	041a      	lsls	r2, r3, #16
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	4313      	orrs	r3, r2
 800a766:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a76a:	3301      	adds	r3, #1
 800a76c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a76e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a770:	3b01      	subs	r3, #1
 800a772:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	061a      	lsls	r2, r3, #24
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a782:	3301      	adds	r3, #1
 800a784:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a788:	3b01      	subs	r3, #1
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f107 0214 	add.w	r2, r7, #20
 800a794:	4611      	mov	r1, r2
 800a796:	4618      	mov	r0, r3
 800a798:	f002 fdd4 	bl	800d344 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a79c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a79e:	3301      	adds	r3, #1
 800a7a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7a4:	2b07      	cmp	r3, #7
 800a7a6:	d9c4      	bls.n	800a732 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a7a8:	f7f9 fca6 	bl	80040f8 <HAL_GetTick>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d902      	bls.n	800a7be <HAL_SD_WriteBlocks+0x1b6>
 800a7b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d112      	bne.n	800a7e4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a57      	ldr	r2, [pc, #348]	@ (800a920 <HAL_SD_WriteBlocks+0x318>)
 800a7c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7cc:	431a      	orrs	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e098      	b.n	800a916 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7ea:	f240 331a 	movw	r3, #794	@ 0x31a
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d091      	beq.n	800a718 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d022      	beq.n	800a848 <HAL_SD_WriteBlocks+0x240>
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d91f      	bls.n	800a848 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a80c:	2b03      	cmp	r3, #3
 800a80e:	d01b      	beq.n	800a848 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4618      	mov	r0, r3
 800a816:	f002 fee3 	bl	800d5e0 <SDMMC_CmdStopTransfer>
 800a81a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a81c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d012      	beq.n	800a848 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a3e      	ldr	r2, [pc, #248]	@ (800a920 <HAL_SD_WriteBlocks+0x318>)
 800a828:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a830:	431a      	orrs	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e066      	b.n	800a916 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a84e:	f003 0308 	and.w	r3, r3, #8
 800a852:	2b00      	cmp	r3, #0
 800a854:	d106      	bne.n	800a864 <HAL_SD_WriteBlocks+0x25c>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a860:	2b00      	cmp	r3, #0
 800a862:	d012      	beq.n	800a88a <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a2d      	ldr	r2, [pc, #180]	@ (800a920 <HAL_SD_WriteBlocks+0x318>)
 800a86a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a870:	f043 0208 	orr.w	r2, r3, #8
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e045      	b.n	800a916 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d012      	beq.n	800a8be <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a20      	ldr	r2, [pc, #128]	@ (800a920 <HAL_SD_WriteBlocks+0x318>)
 800a89e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a4:	f043 0202 	orr.w	r2, r3, #2
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e02b      	b.n	800a916 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c4:	f003 0310 	and.w	r3, r3, #16
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d012      	beq.n	800a8f2 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a13      	ldr	r2, [pc, #76]	@ (800a920 <HAL_SD_WriteBlocks+0x318>)
 800a8d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d8:	f043 0210 	orr.w	r2, r3, #16
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e011      	b.n	800a916 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a8fa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	e006      	b.n	800a916 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a90c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
  }
}
 800a916:	4618      	mov	r0, r3
 800a918:	3748      	adds	r7, #72	@ 0x48
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	004005ff 	.word	0x004005ff

0800a924 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a932:	0f9b      	lsrs	r3, r3, #30
 800a934:	b2da      	uxtb	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a93e:	0e9b      	lsrs	r3, r3, #26
 800a940:	b2db      	uxtb	r3, r3
 800a942:	f003 030f 	and.w	r3, r3, #15
 800a946:	b2da      	uxtb	r2, r3
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a950:	0e1b      	lsrs	r3, r3, #24
 800a952:	b2db      	uxtb	r3, r3
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a962:	0c1b      	lsrs	r3, r3, #16
 800a964:	b2da      	uxtb	r2, r3
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a96e:	0a1b      	lsrs	r3, r3, #8
 800a970:	b2da      	uxtb	r2, r3
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a984:	0d1b      	lsrs	r3, r3, #20
 800a986:	b29a      	uxth	r2, r3
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a990:	0c1b      	lsrs	r3, r3, #16
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f003 030f 	and.w	r3, r3, #15
 800a998:	b2da      	uxtb	r2, r3
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9a2:	0bdb      	lsrs	r3, r3, #15
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9b4:	0b9b      	lsrs	r3, r3, #14
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	f003 0301 	and.w	r3, r3, #1
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9c6:	0b5b      	lsrs	r3, r3, #13
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9d8:	0b1b      	lsrs	r3, r3, #12
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d163      	bne.n	800aabc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9f8:	009a      	lsls	r2, r3, #2
 800a9fa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a9fe:	4013      	ands	r3, r2
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800aa04:	0f92      	lsrs	r2, r2, #30
 800aa06:	431a      	orrs	r2, r3
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa10:	0edb      	lsrs	r3, r3, #27
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa22:	0e1b      	lsrs	r3, r3, #24
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	f003 0307 	and.w	r3, r3, #7
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa34:	0d5b      	lsrs	r3, r3, #21
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	f003 0307 	and.w	r3, r3, #7
 800aa3c:	b2da      	uxtb	r2, r3
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa46:	0c9b      	lsrs	r3, r3, #18
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	f003 0307 	and.w	r3, r3, #7
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa58:	0bdb      	lsrs	r3, r3, #15
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	f003 0307 	and.w	r3, r3, #7
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	7e1b      	ldrb	r3, [r3, #24]
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	f003 0307 	and.w	r3, r3, #7
 800aa7a:	3302      	adds	r3, #2
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800aa86:	fb03 f202 	mul.w	r2, r3, r2
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	7a1b      	ldrb	r3, [r3, #8]
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f003 030f 	and.w	r3, r3, #15
 800aa98:	2201      	movs	r2, #1
 800aa9a:	409a      	lsls	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800aaa8:	0a52      	lsrs	r2, r2, #9
 800aaaa:	fb03 f202 	mul.w	r2, r3, r2
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aab8:	661a      	str	r2, [r3, #96]	@ 0x60
 800aaba:	e031      	b.n	800ab20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d11d      	bne.n	800ab00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aac8:	041b      	lsls	r3, r3, #16
 800aaca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aad2:	0c1b      	lsrs	r3, r3, #16
 800aad4:	431a      	orrs	r2, r3
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	3301      	adds	r3, #1
 800aae0:	029a      	lsls	r2, r3, #10
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aaf4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	661a      	str	r2, [r3, #96]	@ 0x60
 800aafe:	e00f      	b.n	800ab20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a58      	ldr	r2, [pc, #352]	@ (800ac68 <HAL_SD_GetCardCSD+0x344>)
 800ab06:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e09d      	b.n	800ac5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab24:	0b9b      	lsrs	r3, r3, #14
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab36:	09db      	lsrs	r3, r3, #7
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab58:	0fdb      	lsrs	r3, r3, #31
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab64:	0f5b      	lsrs	r3, r3, #29
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	f003 0303 	and.w	r3, r3, #3
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab76:	0e9b      	lsrs	r3, r3, #26
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	f003 0307 	and.w	r3, r3, #7
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab88:	0d9b      	lsrs	r3, r3, #22
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	f003 030f 	and.w	r3, r3, #15
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab9a:	0d5b      	lsrs	r3, r3, #21
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abb6:	0c1b      	lsrs	r3, r3, #16
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abca:	0bdb      	lsrs	r3, r3, #15
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abde:	0b9b      	lsrs	r3, r3, #14
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abf2:	0b5b      	lsrs	r3, r3, #13
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac06:	0b1b      	lsrs	r3, r3, #12
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac1a:	0a9b      	lsrs	r3, r3, #10
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac2e:	0a1b      	lsrs	r3, r3, #8
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	f003 0303 	and.w	r3, r3, #3
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac42:	085b      	lsrs	r3, r3, #1
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	004005ff 	.word	0x004005ff

0800ac6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800accc:	2300      	movs	r3, #0
 800acce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800acd0:	f107 030c 	add.w	r3, r7, #12
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f970 	bl	800afbc <SD_SendStatus>
 800acdc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d005      	beq.n	800acf0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	431a      	orrs	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	0a5b      	lsrs	r3, r3, #9
 800acf4:	f003 030f 	and.w	r3, r3, #15
 800acf8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800acfa:	693b      	ldr	r3, [r7, #16]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad04:	b5b0      	push	{r4, r5, r7, lr}
 800ad06:	b094      	sub	sp, #80	@ 0x50
 800ad08:	af04      	add	r7, sp, #16
 800ad0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f002 fb34 	bl	800d382 <SDIO_GetPowerState>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d102      	bne.n	800ad26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad20:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ad24:	e0b8      	b.n	800ae98 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad2a:	2b03      	cmp	r3, #3
 800ad2c:	d02f      	beq.n	800ad8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4618      	mov	r0, r3
 800ad34:	f002 fd1b 	bl	800d76e <SDMMC_CmdSendCID>
 800ad38:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <SD_InitCard+0x40>
    {
      return errorstate;
 800ad40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad42:	e0a9      	b.n	800ae98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2100      	movs	r1, #0
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f002 fb5e 	bl	800d40c <SDIO_GetResponse>
 800ad50:	4602      	mov	r2, r0
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2104      	movs	r1, #4
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f002 fb55 	bl	800d40c <SDIO_GetResponse>
 800ad62:	4602      	mov	r2, r0
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2108      	movs	r1, #8
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f002 fb4c 	bl	800d40c <SDIO_GetResponse>
 800ad74:	4602      	mov	r2, r0
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	210c      	movs	r1, #12
 800ad80:	4618      	mov	r0, r3
 800ad82:	f002 fb43 	bl	800d40c <SDIO_GetResponse>
 800ad86:	4602      	mov	r2, r0
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d00d      	beq.n	800adb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f107 020e 	add.w	r2, r7, #14
 800ad9e:	4611      	mov	r1, r2
 800ada0:	4618      	mov	r0, r3
 800ada2:	f002 fd21 	bl	800d7e8 <SDMMC_CmdSetRelAdd>
 800ada6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ada8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d001      	beq.n	800adb2 <SD_InitCard+0xae>
    {
      return errorstate;
 800adae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb0:	e072      	b.n	800ae98 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d036      	beq.n	800ae28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800adba:	89fb      	ldrh	r3, [r7, #14]
 800adbc:	461a      	mov	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adca:	041b      	lsls	r3, r3, #16
 800adcc:	4619      	mov	r1, r3
 800adce:	4610      	mov	r0, r2
 800add0:	f002 fceb 	bl	800d7aa <SDMMC_CmdSendCSD>
 800add4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800add6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800add8:	2b00      	cmp	r3, #0
 800adda:	d001      	beq.n	800ade0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800addc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adde:	e05b      	b.n	800ae98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2100      	movs	r1, #0
 800ade6:	4618      	mov	r0, r3
 800ade8:	f002 fb10 	bl	800d40c <SDIO_GetResponse>
 800adec:	4602      	mov	r2, r0
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2104      	movs	r1, #4
 800adf8:	4618      	mov	r0, r3
 800adfa:	f002 fb07 	bl	800d40c <SDIO_GetResponse>
 800adfe:	4602      	mov	r2, r0
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2108      	movs	r1, #8
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f002 fafe 	bl	800d40c <SDIO_GetResponse>
 800ae10:	4602      	mov	r2, r0
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	210c      	movs	r1, #12
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f002 faf5 	bl	800d40c <SDIO_GetResponse>
 800ae22:	4602      	mov	r2, r0
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2104      	movs	r1, #4
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f002 faec 	bl	800d40c <SDIO_GetResponse>
 800ae34:	4603      	mov	r3, r0
 800ae36:	0d1a      	lsrs	r2, r3, #20
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae3c:	f107 0310 	add.w	r3, r7, #16
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff fd6e 	bl	800a924 <HAL_SD_GetCardCSD>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae4e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae52:	e021      	b.n	800ae98 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6819      	ldr	r1, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae5c:	041b      	lsls	r3, r3, #16
 800ae5e:	2200      	movs	r2, #0
 800ae60:	461c      	mov	r4, r3
 800ae62:	4615      	mov	r5, r2
 800ae64:	4622      	mov	r2, r4
 800ae66:	462b      	mov	r3, r5
 800ae68:	4608      	mov	r0, r1
 800ae6a:	f002 fbdb 	bl	800d624 <SDMMC_CmdSelDesel>
 800ae6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <SD_InitCard+0x176>
  {
    return errorstate;
 800ae76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae78:	e00e      	b.n	800ae98 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681d      	ldr	r5, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	466c      	mov	r4, sp
 800ae82:	f103 0210 	add.w	r2, r3, #16
 800ae86:	ca07      	ldmia	r2, {r0, r1, r2}
 800ae88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae90:	4628      	mov	r0, r5
 800ae92:	f002 fa1f 	bl	800d2d4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3740      	adds	r7, #64	@ 0x40
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bdb0      	pop	{r4, r5, r7, pc}

0800aea0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	617b      	str	r3, [r7, #20]
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f002 fbd6 	bl	800d66a <SDMMC_CmdGoIdleState>
 800aebe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <SD_PowerON+0x2a>
  {
    return errorstate;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	e072      	b.n	800afb0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4618      	mov	r0, r3
 800aed0:	f002 fbe9 	bl	800d6a6 <SDMMC_CmdOperCond>
 800aed4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00d      	beq.n	800aef8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f002 fbbf 	bl	800d66a <SDMMC_CmdGoIdleState>
 800aeec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d004      	beq.n	800aefe <SD_PowerON+0x5e>
    {
      return errorstate;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	e05b      	b.n	800afb0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af02:	2b01      	cmp	r3, #1
 800af04:	d137      	bne.n	800af76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2100      	movs	r1, #0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f002 fbe9 	bl	800d6e4 <SDMMC_CmdAppCommand>
 800af12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d02d      	beq.n	800af76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af1a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af1e:	e047      	b.n	800afb0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2100      	movs	r1, #0
 800af26:	4618      	mov	r0, r3
 800af28:	f002 fbdc 	bl	800d6e4 <SDMMC_CmdAppCommand>
 800af2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <SD_PowerON+0x98>
    {
      return errorstate;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	e03b      	b.n	800afb0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	491e      	ldr	r1, [pc, #120]	@ (800afb8 <SD_PowerON+0x118>)
 800af3e:	4618      	mov	r0, r3
 800af40:	f002 fbf2 	bl	800d728 <SDMMC_CmdAppOperCommand>
 800af44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af50:	e02e      	b.n	800afb0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2100      	movs	r1, #0
 800af58:	4618      	mov	r0, r3
 800af5a:	f002 fa57 	bl	800d40c <SDIO_GetResponse>
 800af5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	0fdb      	lsrs	r3, r3, #31
 800af64:	2b01      	cmp	r3, #1
 800af66:	d101      	bne.n	800af6c <SD_PowerON+0xcc>
 800af68:	2301      	movs	r3, #1
 800af6a:	e000      	b.n	800af6e <SD_PowerON+0xce>
 800af6c:	2300      	movs	r3, #0
 800af6e:	613b      	str	r3, [r7, #16]

    count++;
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	3301      	adds	r3, #1
 800af74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d802      	bhi.n	800af86 <SD_PowerON+0xe6>
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0cc      	beq.n	800af20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d902      	bls.n	800af96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800af90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800af94:	e00c      	b.n	800afb0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	645a      	str	r2, [r3, #68]	@ 0x44
 800afa6:	e002      	b.n	800afae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	c1100000 	.word	0xc1100000

0800afbc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800afcc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800afd0:	e018      	b.n	800b004 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afda:	041b      	lsls	r3, r3, #16
 800afdc:	4619      	mov	r1, r3
 800afde:	4610      	mov	r0, r2
 800afe0:	f002 fc23 	bl	800d82a <SDMMC_CmdSendStatus>
 800afe4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	e009      	b.n	800b004 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2100      	movs	r1, #0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f002 fa08 	bl	800d40c <SDIO_GetResponse>
 800affc:	4602      	mov	r2, r0
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d101      	bne.n	800b01e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e041      	b.n	800b0a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b00      	cmp	r3, #0
 800b028:	d106      	bne.n	800b038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7f8 fcb0 	bl	8003998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2202      	movs	r2, #2
 800b03c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3304      	adds	r3, #4
 800b048:	4619      	mov	r1, r3
 800b04a:	4610      	mov	r0, r2
 800b04c:	f000 fd18 	bl	800ba80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2202      	movs	r2, #2
 800b0b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6a1a      	ldr	r2, [r3, #32]
 800b0c0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10f      	bne.n	800b0ea <HAL_TIM_Base_DeInit+0x40>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	6a1a      	ldr	r2, [r3, #32]
 800b0d0:	f240 4344 	movw	r3, #1092	@ 0x444
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d107      	bne.n	800b0ea <HAL_TIM_Base_DeInit+0x40>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f022 0201 	bic.w	r2, r2, #1
 800b0e8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7f8 fd14 	bl	8003b18 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
	...

0800b154 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b01      	cmp	r3, #1
 800b166:	d001      	beq.n	800b16c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e03c      	b.n	800b1e6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a1e      	ldr	r2, [pc, #120]	@ (800b1f4 <HAL_TIM_Base_Start+0xa0>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d018      	beq.n	800b1b0 <HAL_TIM_Base_Start+0x5c>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b186:	d013      	beq.n	800b1b0 <HAL_TIM_Base_Start+0x5c>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a1a      	ldr	r2, [pc, #104]	@ (800b1f8 <HAL_TIM_Base_Start+0xa4>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d00e      	beq.n	800b1b0 <HAL_TIM_Base_Start+0x5c>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a19      	ldr	r2, [pc, #100]	@ (800b1fc <HAL_TIM_Base_Start+0xa8>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d009      	beq.n	800b1b0 <HAL_TIM_Base_Start+0x5c>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a17      	ldr	r2, [pc, #92]	@ (800b200 <HAL_TIM_Base_Start+0xac>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d004      	beq.n	800b1b0 <HAL_TIM_Base_Start+0x5c>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a16      	ldr	r2, [pc, #88]	@ (800b204 <HAL_TIM_Base_Start+0xb0>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d111      	bne.n	800b1d4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f003 0307 	and.w	r3, r3, #7
 800b1ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b06      	cmp	r3, #6
 800b1c0:	d010      	beq.n	800b1e4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f042 0201 	orr.w	r2, r2, #1
 800b1d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1d2:	e007      	b.n	800b1e4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f042 0201 	orr.w	r2, r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	40010000 	.word	0x40010000
 800b1f8:	40000400 	.word	0x40000400
 800b1fc:	40000800 	.word	0x40000800
 800b200:	40000c00 	.word	0x40000c00
 800b204:	40014000 	.word	0x40014000

0800b208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b216:	b2db      	uxtb	r3, r3
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d001      	beq.n	800b220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e044      	b.n	800b2aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2202      	movs	r2, #2
 800b224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f042 0201 	orr.w	r2, r2, #1
 800b236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a1e      	ldr	r2, [pc, #120]	@ (800b2b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d018      	beq.n	800b274 <HAL_TIM_Base_Start_IT+0x6c>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b24a:	d013      	beq.n	800b274 <HAL_TIM_Base_Start_IT+0x6c>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1a      	ldr	r2, [pc, #104]	@ (800b2bc <HAL_TIM_Base_Start_IT+0xb4>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d00e      	beq.n	800b274 <HAL_TIM_Base_Start_IT+0x6c>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a19      	ldr	r2, [pc, #100]	@ (800b2c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d009      	beq.n	800b274 <HAL_TIM_Base_Start_IT+0x6c>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a17      	ldr	r2, [pc, #92]	@ (800b2c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d004      	beq.n	800b274 <HAL_TIM_Base_Start_IT+0x6c>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a16      	ldr	r2, [pc, #88]	@ (800b2c8 <HAL_TIM_Base_Start_IT+0xc0>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d111      	bne.n	800b298 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	f003 0307 	and.w	r3, r3, #7
 800b27e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2b06      	cmp	r3, #6
 800b284:	d010      	beq.n	800b2a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f042 0201 	orr.w	r2, r2, #1
 800b294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b296:	e007      	b.n	800b2a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f042 0201 	orr.w	r2, r2, #1
 800b2a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	40010000 	.word	0x40010000
 800b2bc:	40000400 	.word	0x40000400
 800b2c0:	40000800 	.word	0x40000800
 800b2c4:	40000c00 	.word	0x40000c00
 800b2c8:	40014000 	.word	0x40014000

0800b2cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68da      	ldr	r2, [r3, #12]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f022 0201 	bic.w	r2, r2, #1
 800b2e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6a1a      	ldr	r2, [r3, #32]
 800b2ea:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10f      	bne.n	800b314 <HAL_TIM_Base_Stop_IT+0x48>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6a1a      	ldr	r2, [r3, #32]
 800b2fa:	f240 4344 	movw	r3, #1092	@ 0x444
 800b2fe:	4013      	ands	r3, r2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d107      	bne.n	800b314 <HAL_TIM_Base_Stop_IT+0x48>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 0201 	bic.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b082      	sub	sp, #8
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	e041      	b.n	800b3c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b342:	b2db      	uxtb	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	d106      	bne.n	800b356 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f839 	bl	800b3c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2202      	movs	r2, #2
 800b35a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	3304      	adds	r3, #4
 800b366:	4619      	mov	r1, r3
 800b368:	4610      	mov	r0, r2
 800b36a:	f000 fb89 	bl	800ba80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2201      	movs	r2, #1
 800b372:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2201      	movs	r2, #1
 800b38a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d109      	bne.n	800b400 <HAL_TIM_PWM_Start+0x24>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	bf14      	ite	ne
 800b3f8:	2301      	movne	r3, #1
 800b3fa:	2300      	moveq	r3, #0
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	e022      	b.n	800b446 <HAL_TIM_PWM_Start+0x6a>
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2b04      	cmp	r3, #4
 800b404:	d109      	bne.n	800b41a <HAL_TIM_PWM_Start+0x3e>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b01      	cmp	r3, #1
 800b410:	bf14      	ite	ne
 800b412:	2301      	movne	r3, #1
 800b414:	2300      	moveq	r3, #0
 800b416:	b2db      	uxtb	r3, r3
 800b418:	e015      	b.n	800b446 <HAL_TIM_PWM_Start+0x6a>
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	2b08      	cmp	r3, #8
 800b41e:	d109      	bne.n	800b434 <HAL_TIM_PWM_Start+0x58>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b426:	b2db      	uxtb	r3, r3
 800b428:	2b01      	cmp	r3, #1
 800b42a:	bf14      	ite	ne
 800b42c:	2301      	movne	r3, #1
 800b42e:	2300      	moveq	r3, #0
 800b430:	b2db      	uxtb	r3, r3
 800b432:	e008      	b.n	800b446 <HAL_TIM_PWM_Start+0x6a>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	bf14      	ite	ne
 800b440:	2301      	movne	r3, #1
 800b442:	2300      	moveq	r3, #0
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	d001      	beq.n	800b44e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e068      	b.n	800b520 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d104      	bne.n	800b45e <HAL_TIM_PWM_Start+0x82>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2202      	movs	r2, #2
 800b458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b45c:	e013      	b.n	800b486 <HAL_TIM_PWM_Start+0xaa>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b04      	cmp	r3, #4
 800b462:	d104      	bne.n	800b46e <HAL_TIM_PWM_Start+0x92>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b46c:	e00b      	b.n	800b486 <HAL_TIM_PWM_Start+0xaa>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b08      	cmp	r3, #8
 800b472:	d104      	bne.n	800b47e <HAL_TIM_PWM_Start+0xa2>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b47c:	e003      	b.n	800b486 <HAL_TIM_PWM_Start+0xaa>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2202      	movs	r2, #2
 800b482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2201      	movs	r2, #1
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 fda8 	bl	800bfe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a23      	ldr	r2, [pc, #140]	@ (800b528 <HAL_TIM_PWM_Start+0x14c>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d107      	bne.n	800b4ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b4ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a1d      	ldr	r2, [pc, #116]	@ (800b528 <HAL_TIM_PWM_Start+0x14c>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d018      	beq.n	800b4ea <HAL_TIM_PWM_Start+0x10e>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4c0:	d013      	beq.n	800b4ea <HAL_TIM_PWM_Start+0x10e>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a19      	ldr	r2, [pc, #100]	@ (800b52c <HAL_TIM_PWM_Start+0x150>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00e      	beq.n	800b4ea <HAL_TIM_PWM_Start+0x10e>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a17      	ldr	r2, [pc, #92]	@ (800b530 <HAL_TIM_PWM_Start+0x154>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d009      	beq.n	800b4ea <HAL_TIM_PWM_Start+0x10e>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a16      	ldr	r2, [pc, #88]	@ (800b534 <HAL_TIM_PWM_Start+0x158>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d004      	beq.n	800b4ea <HAL_TIM_PWM_Start+0x10e>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a14      	ldr	r2, [pc, #80]	@ (800b538 <HAL_TIM_PWM_Start+0x15c>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d111      	bne.n	800b50e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	f003 0307 	and.w	r3, r3, #7
 800b4f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b06      	cmp	r3, #6
 800b4fa:	d010      	beq.n	800b51e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f042 0201 	orr.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b50c:	e007      	b.n	800b51e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f042 0201 	orr.w	r2, r2, #1
 800b51c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	40010000 	.word	0x40010000
 800b52c:	40000400 	.word	0x40000400
 800b530:	40000800 	.word	0x40000800
 800b534:	40000c00 	.word	0x40000c00
 800b538:	40014000 	.word	0x40014000

0800b53c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f003 0302 	and.w	r3, r3, #2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d020      	beq.n	800b5a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d01b      	beq.n	800b5a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f06f 0202 	mvn.w	r2, #2
 800b570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	f003 0303 	and.w	r3, r3, #3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fa5b 	bl	800ba42 <HAL_TIM_IC_CaptureCallback>
 800b58c:	e005      	b.n	800b59a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fa4d 	bl	800ba2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fa5e 	bl	800ba56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	f003 0304 	and.w	r3, r3, #4
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d020      	beq.n	800b5ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f003 0304 	and.w	r3, r3, #4
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01b      	beq.n	800b5ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f06f 0204 	mvn.w	r2, #4
 800b5bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2202      	movs	r2, #2
 800b5c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d003      	beq.n	800b5da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fa35 	bl	800ba42 <HAL_TIM_IC_CaptureCallback>
 800b5d8:	e005      	b.n	800b5e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fa27 	bl	800ba2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fa38 	bl	800ba56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f003 0308 	and.w	r3, r3, #8
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d020      	beq.n	800b638 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f003 0308 	and.w	r3, r3, #8
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d01b      	beq.n	800b638 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f06f 0208 	mvn.w	r2, #8
 800b608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2204      	movs	r2, #4
 800b60e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	f003 0303 	and.w	r3, r3, #3
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d003      	beq.n	800b626 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fa0f 	bl	800ba42 <HAL_TIM_IC_CaptureCallback>
 800b624:	e005      	b.n	800b632 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fa01 	bl	800ba2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fa12 	bl	800ba56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	f003 0310 	and.w	r3, r3, #16
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d020      	beq.n	800b684 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f003 0310 	and.w	r3, r3, #16
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d01b      	beq.n	800b684 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f06f 0210 	mvn.w	r2, #16
 800b654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2208      	movs	r2, #8
 800b65a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f9e9 	bl	800ba42 <HAL_TIM_IC_CaptureCallback>
 800b670:	e005      	b.n	800b67e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f9db 	bl	800ba2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 f9ec 	bl	800ba56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	f003 0301 	and.w	r3, r3, #1
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00c      	beq.n	800b6a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d007      	beq.n	800b6a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f06f 0201 	mvn.w	r2, #1
 800b6a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7f7 ff66 	bl	8003574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00c      	beq.n	800b6cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d007      	beq.n	800b6cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b6c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fd2a 	bl	800c120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00c      	beq.n	800b6f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d007      	beq.n	800b6f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b6e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f9bd 	bl	800ba6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00c      	beq.n	800b714 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f003 0320 	and.w	r3, r3, #32
 800b700:	2b00      	cmp	r3, #0
 800b702:	d007      	beq.n	800b714 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f06f 0220 	mvn.w	r2, #32
 800b70c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fcfc 	bl	800c10c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b714:	bf00      	nop
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b728:	2300      	movs	r3, #0
 800b72a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b732:	2b01      	cmp	r3, #1
 800b734:	d101      	bne.n	800b73a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b736:	2302      	movs	r3, #2
 800b738:	e0ae      	b.n	800b898 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b0c      	cmp	r3, #12
 800b746:	f200 809f 	bhi.w	800b888 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b74a:	a201      	add	r2, pc, #4	@ (adr r2, 800b750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b750:	0800b785 	.word	0x0800b785
 800b754:	0800b889 	.word	0x0800b889
 800b758:	0800b889 	.word	0x0800b889
 800b75c:	0800b889 	.word	0x0800b889
 800b760:	0800b7c5 	.word	0x0800b7c5
 800b764:	0800b889 	.word	0x0800b889
 800b768:	0800b889 	.word	0x0800b889
 800b76c:	0800b889 	.word	0x0800b889
 800b770:	0800b807 	.word	0x0800b807
 800b774:	0800b889 	.word	0x0800b889
 800b778:	0800b889 	.word	0x0800b889
 800b77c:	0800b889 	.word	0x0800b889
 800b780:	0800b847 	.word	0x0800b847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68b9      	ldr	r1, [r7, #8]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fa04 	bl	800bb98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	699a      	ldr	r2, [r3, #24]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f042 0208 	orr.w	r2, r2, #8
 800b79e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	699a      	ldr	r2, [r3, #24]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 0204 	bic.w	r2, r2, #4
 800b7ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6999      	ldr	r1, [r3, #24]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	691a      	ldr	r2, [r3, #16]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	619a      	str	r2, [r3, #24]
      break;
 800b7c2:	e064      	b.n	800b88e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68b9      	ldr	r1, [r7, #8]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 fa4a 	bl	800bc64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	699a      	ldr	r2, [r3, #24]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	699a      	ldr	r2, [r3, #24]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6999      	ldr	r1, [r3, #24]
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	021a      	lsls	r2, r3, #8
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	430a      	orrs	r2, r1
 800b802:	619a      	str	r2, [r3, #24]
      break;
 800b804:	e043      	b.n	800b88e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	68b9      	ldr	r1, [r7, #8]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f000 fa95 	bl	800bd3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	69da      	ldr	r2, [r3, #28]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f042 0208 	orr.w	r2, r2, #8
 800b820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	69da      	ldr	r2, [r3, #28]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f022 0204 	bic.w	r2, r2, #4
 800b830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	69d9      	ldr	r1, [r3, #28]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	691a      	ldr	r2, [r3, #16]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	430a      	orrs	r2, r1
 800b842:	61da      	str	r2, [r3, #28]
      break;
 800b844:	e023      	b.n	800b88e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68b9      	ldr	r1, [r7, #8]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 fadf 	bl	800be10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	69da      	ldr	r2, [r3, #28]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	69da      	ldr	r2, [r3, #28]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69d9      	ldr	r1, [r3, #28]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	021a      	lsls	r2, r3, #8
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	430a      	orrs	r2, r1
 800b884:	61da      	str	r2, [r3, #28]
      break;
 800b886:	e002      	b.n	800b88e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	75fb      	strb	r3, [r7, #23]
      break;
 800b88c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b896:	7dfb      	ldrb	r3, [r7, #23]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3718      	adds	r7, #24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d101      	bne.n	800b8bc <HAL_TIM_ConfigClockSource+0x1c>
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	e0b4      	b.n	800ba26 <HAL_TIM_ConfigClockSource+0x186>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2202      	movs	r2, #2
 800b8c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b8da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b8e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8f4:	d03e      	beq.n	800b974 <HAL_TIM_ConfigClockSource+0xd4>
 800b8f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8fa:	f200 8087 	bhi.w	800ba0c <HAL_TIM_ConfigClockSource+0x16c>
 800b8fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b902:	f000 8086 	beq.w	800ba12 <HAL_TIM_ConfigClockSource+0x172>
 800b906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b90a:	d87f      	bhi.n	800ba0c <HAL_TIM_ConfigClockSource+0x16c>
 800b90c:	2b70      	cmp	r3, #112	@ 0x70
 800b90e:	d01a      	beq.n	800b946 <HAL_TIM_ConfigClockSource+0xa6>
 800b910:	2b70      	cmp	r3, #112	@ 0x70
 800b912:	d87b      	bhi.n	800ba0c <HAL_TIM_ConfigClockSource+0x16c>
 800b914:	2b60      	cmp	r3, #96	@ 0x60
 800b916:	d050      	beq.n	800b9ba <HAL_TIM_ConfigClockSource+0x11a>
 800b918:	2b60      	cmp	r3, #96	@ 0x60
 800b91a:	d877      	bhi.n	800ba0c <HAL_TIM_ConfigClockSource+0x16c>
 800b91c:	2b50      	cmp	r3, #80	@ 0x50
 800b91e:	d03c      	beq.n	800b99a <HAL_TIM_ConfigClockSource+0xfa>
 800b920:	2b50      	cmp	r3, #80	@ 0x50
 800b922:	d873      	bhi.n	800ba0c <HAL_TIM_ConfigClockSource+0x16c>
 800b924:	2b40      	cmp	r3, #64	@ 0x40
 800b926:	d058      	beq.n	800b9da <HAL_TIM_ConfigClockSource+0x13a>
 800b928:	2b40      	cmp	r3, #64	@ 0x40
 800b92a:	d86f      	bhi.n	800ba0c <HAL_TIM_ConfigClockSource+0x16c>
 800b92c:	2b30      	cmp	r3, #48	@ 0x30
 800b92e:	d064      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x15a>
 800b930:	2b30      	cmp	r3, #48	@ 0x30
 800b932:	d86b      	bhi.n	800ba0c <HAL_TIM_ConfigClockSource+0x16c>
 800b934:	2b20      	cmp	r3, #32
 800b936:	d060      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x15a>
 800b938:	2b20      	cmp	r3, #32
 800b93a:	d867      	bhi.n	800ba0c <HAL_TIM_ConfigClockSource+0x16c>
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d05c      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x15a>
 800b940:	2b10      	cmp	r3, #16
 800b942:	d05a      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x15a>
 800b944:	e062      	b.n	800ba0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b956:	f000 fb25 	bl	800bfa4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b968:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68ba      	ldr	r2, [r7, #8]
 800b970:	609a      	str	r2, [r3, #8]
      break;
 800b972:	e04f      	b.n	800ba14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b984:	f000 fb0e 	bl	800bfa4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	689a      	ldr	r2, [r3, #8]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b996:	609a      	str	r2, [r3, #8]
      break;
 800b998:	e03c      	b.n	800ba14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f000 fa82 	bl	800beb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2150      	movs	r1, #80	@ 0x50
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 fadb 	bl	800bf6e <TIM_ITRx_SetConfig>
      break;
 800b9b8:	e02c      	b.n	800ba14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f000 faa1 	bl	800bf0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2160      	movs	r1, #96	@ 0x60
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 facb 	bl	800bf6e <TIM_ITRx_SetConfig>
      break;
 800b9d8:	e01c      	b.n	800ba14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	f000 fa62 	bl	800beb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2140      	movs	r1, #64	@ 0x40
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 fabb 	bl	800bf6e <TIM_ITRx_SetConfig>
      break;
 800b9f8:	e00c      	b.n	800ba14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4619      	mov	r1, r3
 800ba04:	4610      	mov	r0, r2
 800ba06:	f000 fab2 	bl	800bf6e <TIM_ITRx_SetConfig>
      break;
 800ba0a:	e003      	b.n	800ba14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba10:	e000      	b.n	800ba14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b083      	sub	sp, #12
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba36:	bf00      	nop
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba4a:	bf00      	nop
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b083      	sub	sp, #12
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba72:	bf00      	nop
 800ba74:	370c      	adds	r7, #12
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
	...

0800ba80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a3a      	ldr	r2, [pc, #232]	@ (800bb7c <TIM_Base_SetConfig+0xfc>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00f      	beq.n	800bab8 <TIM_Base_SetConfig+0x38>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba9e:	d00b      	beq.n	800bab8 <TIM_Base_SetConfig+0x38>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a37      	ldr	r2, [pc, #220]	@ (800bb80 <TIM_Base_SetConfig+0x100>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d007      	beq.n	800bab8 <TIM_Base_SetConfig+0x38>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a36      	ldr	r2, [pc, #216]	@ (800bb84 <TIM_Base_SetConfig+0x104>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d003      	beq.n	800bab8 <TIM_Base_SetConfig+0x38>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a35      	ldr	r2, [pc, #212]	@ (800bb88 <TIM_Base_SetConfig+0x108>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d108      	bne.n	800baca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800babe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a2b      	ldr	r2, [pc, #172]	@ (800bb7c <TIM_Base_SetConfig+0xfc>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d01b      	beq.n	800bb0a <TIM_Base_SetConfig+0x8a>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bad8:	d017      	beq.n	800bb0a <TIM_Base_SetConfig+0x8a>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a28      	ldr	r2, [pc, #160]	@ (800bb80 <TIM_Base_SetConfig+0x100>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d013      	beq.n	800bb0a <TIM_Base_SetConfig+0x8a>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a27      	ldr	r2, [pc, #156]	@ (800bb84 <TIM_Base_SetConfig+0x104>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d00f      	beq.n	800bb0a <TIM_Base_SetConfig+0x8a>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a26      	ldr	r2, [pc, #152]	@ (800bb88 <TIM_Base_SetConfig+0x108>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d00b      	beq.n	800bb0a <TIM_Base_SetConfig+0x8a>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a25      	ldr	r2, [pc, #148]	@ (800bb8c <TIM_Base_SetConfig+0x10c>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d007      	beq.n	800bb0a <TIM_Base_SetConfig+0x8a>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a24      	ldr	r2, [pc, #144]	@ (800bb90 <TIM_Base_SetConfig+0x110>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d003      	beq.n	800bb0a <TIM_Base_SetConfig+0x8a>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a23      	ldr	r2, [pc, #140]	@ (800bb94 <TIM_Base_SetConfig+0x114>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d108      	bne.n	800bb1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a0e      	ldr	r2, [pc, #56]	@ (800bb7c <TIM_Base_SetConfig+0xfc>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d103      	bne.n	800bb50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	691a      	ldr	r2, [r3, #16]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d105      	bne.n	800bb6e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	f023 0201 	bic.w	r2, r3, #1
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	611a      	str	r2, [r3, #16]
  }
}
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	40010000 	.word	0x40010000
 800bb80:	40000400 	.word	0x40000400
 800bb84:	40000800 	.word	0x40000800
 800bb88:	40000c00 	.word	0x40000c00
 800bb8c:	40014000 	.word	0x40014000
 800bb90:	40014400 	.word	0x40014400
 800bb94:	40014800 	.word	0x40014800

0800bb98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b087      	sub	sp, #28
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a1b      	ldr	r3, [r3, #32]
 800bba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	f023 0201 	bic.w	r2, r3, #1
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f023 0303 	bic.w	r3, r3, #3
 800bbce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f023 0302 	bic.w	r3, r3, #2
 800bbe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a1c      	ldr	r2, [pc, #112]	@ (800bc60 <TIM_OC1_SetConfig+0xc8>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d10c      	bne.n	800bc0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	f023 0308 	bic.w	r3, r3, #8
 800bbfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f023 0304 	bic.w	r3, r3, #4
 800bc0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a13      	ldr	r2, [pc, #76]	@ (800bc60 <TIM_OC1_SetConfig+0xc8>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d111      	bne.n	800bc3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	685a      	ldr	r2, [r3, #4]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	697a      	ldr	r2, [r7, #20]
 800bc52:	621a      	str	r2, [r3, #32]
}
 800bc54:	bf00      	nop
 800bc56:	371c      	adds	r7, #28
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	40010000 	.word	0x40010000

0800bc64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	f023 0210 	bic.w	r2, r3, #16
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	021b      	lsls	r3, r3, #8
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f023 0320 	bic.w	r3, r3, #32
 800bcae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	011b      	lsls	r3, r3, #4
 800bcb6:	697a      	ldr	r2, [r7, #20]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a1e      	ldr	r2, [pc, #120]	@ (800bd38 <TIM_OC2_SetConfig+0xd4>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d10d      	bne.n	800bce0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	011b      	lsls	r3, r3, #4
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a15      	ldr	r2, [pc, #84]	@ (800bd38 <TIM_OC2_SetConfig+0xd4>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d113      	bne.n	800bd10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bcee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	693a      	ldr	r2, [r7, #16]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	693a      	ldr	r2, [r7, #16]
 800bd14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	685a      	ldr	r2, [r3, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	621a      	str	r2, [r3, #32]
}
 800bd2a:	bf00      	nop
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	40010000 	.word	0x40010000

0800bd3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a1b      	ldr	r3, [r3, #32]
 800bd50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f023 0303 	bic.w	r3, r3, #3
 800bd72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	021b      	lsls	r3, r3, #8
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a1d      	ldr	r2, [pc, #116]	@ (800be0c <TIM_OC3_SetConfig+0xd0>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d10d      	bne.n	800bdb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bda0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	021b      	lsls	r3, r3, #8
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bdb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a14      	ldr	r2, [pc, #80]	@ (800be0c <TIM_OC3_SetConfig+0xd0>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d113      	bne.n	800bde6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bdc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bdcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	695b      	ldr	r3, [r3, #20]
 800bdd2:	011b      	lsls	r3, r3, #4
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	699b      	ldr	r3, [r3, #24]
 800bdde:	011b      	lsls	r3, r3, #4
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	685a      	ldr	r2, [r3, #4]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	697a      	ldr	r2, [r7, #20]
 800bdfe:	621a      	str	r2, [r3, #32]
}
 800be00:	bf00      	nop
 800be02:	371c      	adds	r7, #28
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	40010000 	.word	0x40010000

0800be10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be10:	b480      	push	{r7}
 800be12:	b087      	sub	sp, #28
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	69db      	ldr	r3, [r3, #28]
 800be36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	021b      	lsls	r3, r3, #8
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	4313      	orrs	r3, r2
 800be52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	031b      	lsls	r3, r3, #12
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	4313      	orrs	r3, r2
 800be66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a10      	ldr	r2, [pc, #64]	@ (800beac <TIM_OC4_SetConfig+0x9c>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d109      	bne.n	800be84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	019b      	lsls	r3, r3, #6
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	4313      	orrs	r3, r2
 800be82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	693a      	ldr	r2, [r7, #16]
 800be9c:	621a      	str	r2, [r3, #32]
}
 800be9e:	bf00      	nop
 800bea0:	371c      	adds	r7, #28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	40010000 	.word	0x40010000

0800beb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	f023 0201 	bic.w	r2, r3, #1
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800beda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	011b      	lsls	r3, r3, #4
 800bee0:	693a      	ldr	r2, [r7, #16]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	f023 030a 	bic.w	r3, r3, #10
 800beec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800beee:	697a      	ldr	r2, [r7, #20]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	693a      	ldr	r2, [r7, #16]
 800befa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	621a      	str	r2, [r3, #32]
}
 800bf02:	bf00      	nop
 800bf04:	371c      	adds	r7, #28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf0e:	b480      	push	{r7}
 800bf10:	b087      	sub	sp, #28
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6a1b      	ldr	r3, [r3, #32]
 800bf24:	f023 0210 	bic.w	r2, r3, #16
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	031b      	lsls	r3, r3, #12
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	011b      	lsls	r3, r3, #4
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	693a      	ldr	r2, [r7, #16]
 800bf5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	621a      	str	r2, [r3, #32]
}
 800bf62:	bf00      	nop
 800bf64:	371c      	adds	r7, #28
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr

0800bf6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b085      	sub	sp, #20
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	f043 0307 	orr.w	r3, r3, #7
 800bf90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	609a      	str	r2, [r3, #8]
}
 800bf98:	bf00      	nop
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
 800bfb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	021a      	lsls	r2, r3, #8
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	431a      	orrs	r2, r3
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	609a      	str	r2, [r3, #8]
}
 800bfd8:	bf00      	nop
 800bfda:	371c      	adds	r7, #28
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b087      	sub	sp, #28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	f003 031f 	and.w	r3, r3, #31
 800bff6:	2201      	movs	r2, #1
 800bff8:	fa02 f303 	lsl.w	r3, r2, r3
 800bffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6a1a      	ldr	r2, [r3, #32]
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	43db      	mvns	r3, r3
 800c006:	401a      	ands	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6a1a      	ldr	r2, [r3, #32]
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	f003 031f 	and.w	r3, r3, #31
 800c016:	6879      	ldr	r1, [r7, #4]
 800c018:	fa01 f303 	lsl.w	r3, r1, r3
 800c01c:	431a      	orrs	r2, r3
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	621a      	str	r2, [r3, #32]
}
 800c022:	bf00      	nop
 800c024:	371c      	adds	r7, #28
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
	...

0800c030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c040:	2b01      	cmp	r3, #1
 800c042:	d101      	bne.n	800c048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c044:	2302      	movs	r3, #2
 800c046:	e050      	b.n	800c0ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2202      	movs	r2, #2
 800c054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c06e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	4313      	orrs	r3, r2
 800c078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a1c      	ldr	r2, [pc, #112]	@ (800c0f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d018      	beq.n	800c0be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c094:	d013      	beq.n	800c0be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a18      	ldr	r2, [pc, #96]	@ (800c0fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d00e      	beq.n	800c0be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a16      	ldr	r2, [pc, #88]	@ (800c100 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d009      	beq.n	800c0be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a15      	ldr	r2, [pc, #84]	@ (800c104 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d004      	beq.n	800c0be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a13      	ldr	r2, [pc, #76]	@ (800c108 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d10c      	bne.n	800c0d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop
 800c0f8:	40010000 	.word	0x40010000
 800c0fc:	40000400 	.word	0x40000400
 800c100:	40000800 	.word	0x40000800
 800c104:	40000c00 	.word	0x40000c00
 800c108:	40014000 	.word	0x40014000

0800c10c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d101      	bne.n	800c146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e042      	b.n	800c1cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d106      	bne.n	800c160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7f7 fd16 	bl	8003b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2224      	movs	r2, #36	@ 0x24
 800c164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fe37 	bl	800cdec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	691a      	ldr	r2, [r3, #16]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c18c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	695a      	ldr	r2, [r3, #20]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c19c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68da      	ldr	r2, [r3, #12]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c1ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2220      	movs	r2, #32
 800c1b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2220      	movs	r2, #32
 800c1c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e024      	b.n	800c230 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2224      	movs	r2, #36	@ 0x24
 800c1ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	68da      	ldr	r2, [r3, #12]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c1fc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7f7 fd52 	bl	8003ca8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b08a      	sub	sp, #40	@ 0x28
 800c23c:	af02      	add	r7, sp, #8
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	603b      	str	r3, [r7, #0]
 800c244:	4613      	mov	r3, r2
 800c246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c248:	2300      	movs	r3, #0
 800c24a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c252:	b2db      	uxtb	r3, r3
 800c254:	2b20      	cmp	r3, #32
 800c256:	d175      	bne.n	800c344 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <HAL_UART_Transmit+0x2c>
 800c25e:	88fb      	ldrh	r3, [r7, #6]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d101      	bne.n	800c268 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	e06e      	b.n	800c346 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2221      	movs	r2, #33	@ 0x21
 800c272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c276:	f7f7 ff3f 	bl	80040f8 <HAL_GetTick>
 800c27a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	88fa      	ldrh	r2, [r7, #6]
 800c280:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	88fa      	ldrh	r2, [r7, #6]
 800c286:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c290:	d108      	bne.n	800c2a4 <HAL_UART_Transmit+0x6c>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d104      	bne.n	800c2a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	61bb      	str	r3, [r7, #24]
 800c2a2:	e003      	b.n	800c2ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c2ac:	e02e      	b.n	800c30c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	2180      	movs	r1, #128	@ 0x80
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f000 fb67 	bl	800c98c <UART_WaitOnFlagUntilTimeout>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d005      	beq.n	800c2d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2220      	movs	r2, #32
 800c2c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c2cc:	2303      	movs	r3, #3
 800c2ce:	e03a      	b.n	800c346 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10b      	bne.n	800c2ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	3302      	adds	r3, #2
 800c2ea:	61bb      	str	r3, [r7, #24]
 800c2ec:	e007      	b.n	800c2fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	781a      	ldrb	r2, [r3, #0]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c302:	b29b      	uxth	r3, r3
 800c304:	3b01      	subs	r3, #1
 800c306:	b29a      	uxth	r2, r3
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c310:	b29b      	uxth	r3, r3
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1cb      	bne.n	800c2ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	2200      	movs	r2, #0
 800c31e:	2140      	movs	r1, #64	@ 0x40
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f000 fb33 	bl	800c98c <UART_WaitOnFlagUntilTimeout>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d005      	beq.n	800c338 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2220      	movs	r2, #32
 800c330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c334:	2303      	movs	r3, #3
 800c336:	e006      	b.n	800c346 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2220      	movs	r2, #32
 800c33c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	e000      	b.n	800c346 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c344:	2302      	movs	r3, #2
  }
}
 800c346:	4618      	mov	r0, r3
 800c348:	3720      	adds	r7, #32
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b084      	sub	sp, #16
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	60b9      	str	r1, [r7, #8]
 800c358:	4613      	mov	r3, r2
 800c35a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c362:	b2db      	uxtb	r3, r3
 800c364:	2b20      	cmp	r3, #32
 800c366:	d112      	bne.n	800c38e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d002      	beq.n	800c374 <HAL_UART_Receive_IT+0x26>
 800c36e:	88fb      	ldrh	r3, [r7, #6]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d101      	bne.n	800c378 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	e00b      	b.n	800c390 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c37e:	88fb      	ldrh	r3, [r7, #6]
 800c380:	461a      	mov	r2, r3
 800c382:	68b9      	ldr	r1, [r7, #8]
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f000 fb5a 	bl	800ca3e <UART_Start_Receive_IT>
 800c38a:	4603      	mov	r3, r0
 800c38c:	e000      	b.n	800c390 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c38e:	2302      	movs	r3, #2
  }
}
 800c390:	4618      	mov	r0, r3
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08c      	sub	sp, #48	@ 0x30
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b20      	cmp	r3, #32
 800c3b0:	d14a      	bne.n	800c448 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800c3b8:	88fb      	ldrh	r3, [r7, #6]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d101      	bne.n	800c3c2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e043      	b.n	800c44a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800c3ce:	88fb      	ldrh	r3, [r7, #6]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 fb32 	bl	800ca3e <UART_Start_Receive_IT>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c3e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d12c      	bne.n	800c442 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d125      	bne.n	800c43c <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	613b      	str	r3, [r7, #16]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	613b      	str	r3, [r7, #16]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	613b      	str	r3, [r7, #16]
 800c404:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	330c      	adds	r3, #12
 800c40c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	e853 3f00 	ldrex	r3, [r3]
 800c414:	617b      	str	r3, [r7, #20]
   return(result);
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f043 0310 	orr.w	r3, r3, #16
 800c41c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	330c      	adds	r3, #12
 800c424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c426:	627a      	str	r2, [r7, #36]	@ 0x24
 800c428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42a:	6a39      	ldr	r1, [r7, #32]
 800c42c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c42e:	e841 2300 	strex	r3, r2, [r1]
 800c432:	61fb      	str	r3, [r7, #28]
   return(result);
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1e5      	bne.n	800c406 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800c43a:	e002      	b.n	800c442 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c442:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c446:	e000      	b.n	800c44a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800c448:	2302      	movs	r3, #2
  }
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3730      	adds	r7, #48	@ 0x30
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b0ba      	sub	sp, #232	@ 0xe8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c47a:	2300      	movs	r3, #0
 800c47c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c480:	2300      	movs	r3, #0
 800c482:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c48a:	f003 030f 	and.w	r3, r3, #15
 800c48e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10f      	bne.n	800c4ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c49e:	f003 0320 	and.w	r3, r3, #32
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d009      	beq.n	800c4ba <HAL_UART_IRQHandler+0x66>
 800c4a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4aa:	f003 0320 	and.w	r3, r3, #32
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fbdc 	bl	800cc70 <UART_Receive_IT>
      return;
 800c4b8:	e25b      	b.n	800c972 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c4ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f000 80de 	beq.w	800c680 <HAL_UART_IRQHandler+0x22c>
 800c4c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4c8:	f003 0301 	and.w	r3, r3, #1
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d106      	bne.n	800c4de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f000 80d1 	beq.w	800c680 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c4de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4e2:	f003 0301 	and.w	r3, r3, #1
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00b      	beq.n	800c502 <HAL_UART_IRQHandler+0xae>
 800c4ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d005      	beq.n	800c502 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4fa:	f043 0201 	orr.w	r2, r3, #1
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c506:	f003 0304 	and.w	r3, r3, #4
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00b      	beq.n	800c526 <HAL_UART_IRQHandler+0xd2>
 800c50e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c512:	f003 0301 	and.w	r3, r3, #1
 800c516:	2b00      	cmp	r3, #0
 800c518:	d005      	beq.n	800c526 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c51e:	f043 0202 	orr.w	r2, r3, #2
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00b      	beq.n	800c54a <HAL_UART_IRQHandler+0xf6>
 800c532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c536:	f003 0301 	and.w	r3, r3, #1
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d005      	beq.n	800c54a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c542:	f043 0204 	orr.w	r2, r3, #4
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c54a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c54e:	f003 0308 	and.w	r3, r3, #8
 800c552:	2b00      	cmp	r3, #0
 800c554:	d011      	beq.n	800c57a <HAL_UART_IRQHandler+0x126>
 800c556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c55a:	f003 0320 	and.w	r3, r3, #32
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d105      	bne.n	800c56e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d005      	beq.n	800c57a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c572:	f043 0208 	orr.w	r2, r3, #8
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 81f2 	beq.w	800c968 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c588:	f003 0320 	and.w	r3, r3, #32
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d008      	beq.n	800c5a2 <HAL_UART_IRQHandler+0x14e>
 800c590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c594:	f003 0320 	and.w	r3, r3, #32
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fb67 	bl	800cc70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	695b      	ldr	r3, [r3, #20]
 800c5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ac:	2b40      	cmp	r3, #64	@ 0x40
 800c5ae:	bf0c      	ite	eq
 800c5b0:	2301      	moveq	r3, #1
 800c5b2:	2300      	movne	r3, #0
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5be:	f003 0308 	and.w	r3, r3, #8
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d103      	bne.n	800c5ce <HAL_UART_IRQHandler+0x17a>
 800c5c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d04f      	beq.n	800c66e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fa6f 	bl	800cab2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5de:	2b40      	cmp	r3, #64	@ 0x40
 800c5e0:	d141      	bne.n	800c666 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3314      	adds	r3, #20
 800c5e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5f0:	e853 3f00 	ldrex	r3, [r3]
 800c5f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c5f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3314      	adds	r3, #20
 800c60a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c60e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c612:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c61a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c61e:	e841 2300 	strex	r3, r2, [r1]
 800c622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1d9      	bne.n	800c5e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c632:	2b00      	cmp	r3, #0
 800c634:	d013      	beq.n	800c65e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c63a:	4a7e      	ldr	r2, [pc, #504]	@ (800c834 <HAL_UART_IRQHandler+0x3e0>)
 800c63c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c642:	4618      	mov	r0, r3
 800c644:	f7f8 fd3b 	bl	80050be <HAL_DMA_Abort_IT>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d016      	beq.n	800c67c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c658:	4610      	mov	r0, r2
 800c65a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c65c:	e00e      	b.n	800c67c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7f6 ffdc 	bl	800361c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c664:	e00a      	b.n	800c67c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7f6 ffd8 	bl	800361c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c66c:	e006      	b.n	800c67c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7f6 ffd4 	bl	800361c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c67a:	e175      	b.n	800c968 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c67c:	bf00      	nop
    return;
 800c67e:	e173      	b.n	800c968 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c684:	2b01      	cmp	r3, #1
 800c686:	f040 814f 	bne.w	800c928 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c68a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c68e:	f003 0310 	and.w	r3, r3, #16
 800c692:	2b00      	cmp	r3, #0
 800c694:	f000 8148 	beq.w	800c928 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c69c:	f003 0310 	and.w	r3, r3, #16
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 8141 	beq.w	800c928 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	60bb      	str	r3, [r7, #8]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	60bb      	str	r3, [r7, #8]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	60bb      	str	r3, [r7, #8]
 800c6ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	695b      	ldr	r3, [r3, #20]
 800c6c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c6:	2b40      	cmp	r3, #64	@ 0x40
 800c6c8:	f040 80b6 	bne.w	800c838 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f000 8145 	beq.w	800c96c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c6e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	f080 813e 	bcs.w	800c96c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6fc:	69db      	ldr	r3, [r3, #28]
 800c6fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c702:	f000 8088 	beq.w	800c816 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	330c      	adds	r3, #12
 800c70c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c714:	e853 3f00 	ldrex	r3, [r3]
 800c718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c71c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	330c      	adds	r3, #12
 800c72e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c732:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c736:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c73e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c742:	e841 2300 	strex	r3, r2, [r1]
 800c746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c74a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1d9      	bne.n	800c706 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3314      	adds	r3, #20
 800c758:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c764:	f023 0301 	bic.w	r3, r3, #1
 800c768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	3314      	adds	r3, #20
 800c772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c776:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c77a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c77e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c782:	e841 2300 	strex	r3, r2, [r1]
 800c786:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c788:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1e1      	bne.n	800c752 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3314      	adds	r3, #20
 800c794:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c798:	e853 3f00 	ldrex	r3, [r3]
 800c79c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c79e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3314      	adds	r3, #20
 800c7ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c7b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7ba:	e841 2300 	strex	r3, r2, [r1]
 800c7be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1e3      	bne.n	800c78e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2220      	movs	r2, #32
 800c7ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	330c      	adds	r3, #12
 800c7da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7de:	e853 3f00 	ldrex	r3, [r3]
 800c7e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c7e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7e6:	f023 0310 	bic.w	r3, r3, #16
 800c7ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	330c      	adds	r3, #12
 800c7f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c7f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c7fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c7fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c800:	e841 2300 	strex	r3, r2, [r1]
 800c804:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1e3      	bne.n	800c7d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c810:	4618      	mov	r0, r3
 800c812:	f7f8 fbe4 	bl	8004fde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2202      	movs	r2, #2
 800c81a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c824:	b29b      	uxth	r3, r3
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	b29b      	uxth	r3, r3
 800c82a:	4619      	mov	r1, r3
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f008 ff7b 	bl	8015728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c832:	e09b      	b.n	800c96c <HAL_UART_IRQHandler+0x518>
 800c834:	0800cb79 	.word	0x0800cb79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c840:	b29b      	uxth	r3, r3
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 808e 	beq.w	800c970 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f000 8089 	beq.w	800c970 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	330c      	adds	r3, #12
 800c864:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c868:	e853 3f00 	ldrex	r3, [r3]
 800c86c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c874:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	330c      	adds	r3, #12
 800c87e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c882:	647a      	str	r2, [r7, #68]	@ 0x44
 800c884:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c886:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c888:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c88a:	e841 2300 	strex	r3, r2, [r1]
 800c88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1e3      	bne.n	800c85e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3314      	adds	r3, #20
 800c89c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a0:	e853 3f00 	ldrex	r3, [r3]
 800c8a4:	623b      	str	r3, [r7, #32]
   return(result);
 800c8a6:	6a3b      	ldr	r3, [r7, #32]
 800c8a8:	f023 0301 	bic.w	r3, r3, #1
 800c8ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3314      	adds	r3, #20
 800c8b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c8ba:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8c2:	e841 2300 	strex	r3, r2, [r1]
 800c8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1e3      	bne.n	800c896 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2220      	movs	r2, #32
 800c8d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	330c      	adds	r3, #12
 800c8e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	e853 3f00 	ldrex	r3, [r3]
 800c8ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f023 0310 	bic.w	r3, r3, #16
 800c8f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	330c      	adds	r3, #12
 800c8fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c900:	61fa      	str	r2, [r7, #28]
 800c902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c904:	69b9      	ldr	r1, [r7, #24]
 800c906:	69fa      	ldr	r2, [r7, #28]
 800c908:	e841 2300 	strex	r3, r2, [r1]
 800c90c:	617b      	str	r3, [r7, #20]
   return(result);
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1e3      	bne.n	800c8dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2202      	movs	r2, #2
 800c918:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c91a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f008 ff01 	bl	8015728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c926:	e023      	b.n	800c970 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c92c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c930:	2b00      	cmp	r3, #0
 800c932:	d009      	beq.n	800c948 <HAL_UART_IRQHandler+0x4f4>
 800c934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d003      	beq.n	800c948 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f92d 	bl	800cba0 <UART_Transmit_IT>
    return;
 800c946:	e014      	b.n	800c972 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c94c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00e      	beq.n	800c972 <HAL_UART_IRQHandler+0x51e>
 800c954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d008      	beq.n	800c972 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 f96d 	bl	800cc40 <UART_EndTransmit_IT>
    return;
 800c966:	e004      	b.n	800c972 <HAL_UART_IRQHandler+0x51e>
    return;
 800c968:	bf00      	nop
 800c96a:	e002      	b.n	800c972 <HAL_UART_IRQHandler+0x51e>
      return;
 800c96c:	bf00      	nop
 800c96e:	e000      	b.n	800c972 <HAL_UART_IRQHandler+0x51e>
      return;
 800c970:	bf00      	nop
  }
}
 800c972:	37e8      	adds	r7, #232	@ 0xe8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	603b      	str	r3, [r7, #0]
 800c998:	4613      	mov	r3, r2
 800c99a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c99c:	e03b      	b.n	800ca16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c99e:	6a3b      	ldr	r3, [r7, #32]
 800c9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a4:	d037      	beq.n	800ca16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9a6:	f7f7 fba7 	bl	80040f8 <HAL_GetTick>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	6a3a      	ldr	r2, [r7, #32]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d302      	bcc.n	800c9bc <UART_WaitOnFlagUntilTimeout+0x30>
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d101      	bne.n	800c9c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c9bc:	2303      	movs	r3, #3
 800c9be:	e03a      	b.n	800ca36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	f003 0304 	and.w	r3, r3, #4
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d023      	beq.n	800ca16 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	2b80      	cmp	r3, #128	@ 0x80
 800c9d2:	d020      	beq.n	800ca16 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	2b40      	cmp	r3, #64	@ 0x40
 800c9d8:	d01d      	beq.n	800ca16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f003 0308 	and.w	r3, r3, #8
 800c9e4:	2b08      	cmp	r3, #8
 800c9e6:	d116      	bne.n	800ca16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	617b      	str	r3, [r7, #20]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	617b      	str	r3, [r7, #20]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	617b      	str	r3, [r7, #20]
 800c9fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f000 f857 	bl	800cab2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2208      	movs	r2, #8
 800ca08:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	e00f      	b.n	800ca36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	4013      	ands	r3, r2
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	bf0c      	ite	eq
 800ca26:	2301      	moveq	r3, #1
 800ca28:	2300      	movne	r3, #0
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	79fb      	ldrb	r3, [r7, #7]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d0b4      	beq.n	800c99e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3718      	adds	r7, #24
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b085      	sub	sp, #20
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	60f8      	str	r0, [r7, #12]
 800ca46:	60b9      	str	r1, [r7, #8]
 800ca48:	4613      	mov	r3, r2
 800ca4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	88fa      	ldrh	r2, [r7, #6]
 800ca56:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	88fa      	ldrh	r2, [r7, #6]
 800ca5c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2222      	movs	r2, #34	@ 0x22
 800ca68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d007      	beq.n	800ca84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	68da      	ldr	r2, [r3, #12]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ca82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	695a      	ldr	r2, [r3, #20]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f042 0201 	orr.w	r2, r2, #1
 800ca92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68da      	ldr	r2, [r3, #12]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f042 0220 	orr.w	r2, r2, #32
 800caa2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b095      	sub	sp, #84	@ 0x54
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	330c      	adds	r3, #12
 800cac0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac4:	e853 3f00 	ldrex	r3, [r3]
 800cac8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800caca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cacc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	330c      	adds	r3, #12
 800cad8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cada:	643a      	str	r2, [r7, #64]	@ 0x40
 800cadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cade:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cae0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cae2:	e841 2300 	strex	r3, r2, [r1]
 800cae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1e5      	bne.n	800caba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3314      	adds	r3, #20
 800caf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	e853 3f00 	ldrex	r3, [r3]
 800cafc:	61fb      	str	r3, [r7, #28]
   return(result);
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	f023 0301 	bic.w	r3, r3, #1
 800cb04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	3314      	adds	r3, #20
 800cb0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb16:	e841 2300 	strex	r3, r2, [r1]
 800cb1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1e5      	bne.n	800caee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d119      	bne.n	800cb5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	330c      	adds	r3, #12
 800cb30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	e853 3f00 	ldrex	r3, [r3]
 800cb38:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	f023 0310 	bic.w	r3, r3, #16
 800cb40:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	330c      	adds	r3, #12
 800cb48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb4a:	61ba      	str	r2, [r7, #24]
 800cb4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4e:	6979      	ldr	r1, [r7, #20]
 800cb50:	69ba      	ldr	r2, [r7, #24]
 800cb52:	e841 2300 	strex	r3, r2, [r1]
 800cb56:	613b      	str	r3, [r7, #16]
   return(result);
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1e5      	bne.n	800cb2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2220      	movs	r2, #32
 800cb62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cb6c:	bf00      	nop
 800cb6e:	3754      	adds	r7, #84	@ 0x54
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f7f6 fd42 	bl	800361c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb98:	bf00      	nop
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	2b21      	cmp	r3, #33	@ 0x21
 800cbb2:	d13e      	bne.n	800cc32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbbc:	d114      	bne.n	800cbe8 <UART_Transmit_IT+0x48>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d110      	bne.n	800cbe8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	881b      	ldrh	r3, [r3, #0]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a1b      	ldr	r3, [r3, #32]
 800cbe0:	1c9a      	adds	r2, r3, #2
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	621a      	str	r2, [r3, #32]
 800cbe6:	e008      	b.n	800cbfa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6a1b      	ldr	r3, [r3, #32]
 800cbec:	1c59      	adds	r1, r3, #1
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	6211      	str	r1, [r2, #32]
 800cbf2:	781a      	ldrb	r2, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	3b01      	subs	r3, #1
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	4619      	mov	r1, r3
 800cc08:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d10f      	bne.n	800cc2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68da      	ldr	r2, [r3, #12]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68da      	ldr	r2, [r3, #12]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	e000      	b.n	800cc34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc32:	2302      	movs	r3, #2
  }
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	68da      	ldr	r2, [r3, #12]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cc56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2220      	movs	r2, #32
 800cc5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff fe89 	bl	800c978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08c      	sub	sp, #48	@ 0x30
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	2b22      	cmp	r3, #34	@ 0x22
 800cc82:	f040 80ae 	bne.w	800cde2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc8e:	d117      	bne.n	800ccc0 <UART_Receive_IT+0x50>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	691b      	ldr	r3, [r3, #16]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d113      	bne.n	800ccc0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cca0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccb8:	1c9a      	adds	r2, r3, #2
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	629a      	str	r2, [r3, #40]	@ 0x28
 800ccbe:	e026      	b.n	800cd0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccd2:	d007      	beq.n	800cce4 <UART_Receive_IT+0x74>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10a      	bne.n	800ccf2 <UART_Receive_IT+0x82>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d106      	bne.n	800ccf2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccee:	701a      	strb	r2, [r3, #0]
 800ccf0:	e008      	b.n	800cd04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd08:	1c5a      	adds	r2, r3, #1
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	3b01      	subs	r3, #1
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d15d      	bne.n	800cdde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68da      	ldr	r2, [r3, #12]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f022 0220 	bic.w	r2, r2, #32
 800cd30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68da      	ldr	r2, [r3, #12]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	695a      	ldr	r2, [r3, #20]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f022 0201 	bic.w	r2, r2, #1
 800cd50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2220      	movs	r2, #32
 800cd56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d135      	bne.n	800cdd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	330c      	adds	r3, #12
 800cd74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	e853 3f00 	ldrex	r3, [r3]
 800cd7c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	f023 0310 	bic.w	r3, r3, #16
 800cd84:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	330c      	adds	r3, #12
 800cd8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd8e:	623a      	str	r2, [r7, #32]
 800cd90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd92:	69f9      	ldr	r1, [r7, #28]
 800cd94:	6a3a      	ldr	r2, [r7, #32]
 800cd96:	e841 2300 	strex	r3, r2, [r1]
 800cd9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e5      	bne.n	800cd6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f003 0310 	and.w	r3, r3, #16
 800cdac:	2b10      	cmp	r3, #16
 800cdae:	d10a      	bne.n	800cdc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	60fb      	str	r3, [r7, #12]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	60fb      	str	r3, [r7, #12]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f008 fcab 	bl	8015728 <HAL_UARTEx_RxEventCallback>
 800cdd2:	e002      	b.n	800cdda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f002 fb41 	bl	800f45c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	e002      	b.n	800cde4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	e000      	b.n	800cde4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cde2:	2302      	movs	r3, #2
  }
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3730      	adds	r7, #48	@ 0x30
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdf0:	b0c0      	sub	sp, #256	@ 0x100
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ce04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce08:	68d9      	ldr	r1, [r3, #12]
 800ce0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	ea40 0301 	orr.w	r3, r0, r1
 800ce14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce1a:	689a      	ldr	r2, [r3, #8]
 800ce1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	431a      	orrs	r2, r3
 800ce24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	431a      	orrs	r2, r3
 800ce2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce30:	69db      	ldr	r3, [r3, #28]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ce44:	f021 010c 	bic.w	r1, r1, #12
 800ce48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ce52:	430b      	orrs	r3, r1
 800ce54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ce62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce66:	6999      	ldr	r1, [r3, #24]
 800ce68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	ea40 0301 	orr.w	r3, r0, r1
 800ce72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	4b8f      	ldr	r3, [pc, #572]	@ (800d0b8 <UART_SetConfig+0x2cc>)
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d005      	beq.n	800ce8c <UART_SetConfig+0xa0>
 800ce80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	4b8d      	ldr	r3, [pc, #564]	@ (800d0bc <UART_SetConfig+0x2d0>)
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d104      	bne.n	800ce96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ce8c:	f7fc fa84 	bl	8009398 <HAL_RCC_GetPCLK2Freq>
 800ce90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ce94:	e003      	b.n	800ce9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce96:	f7fc fa6b 	bl	8009370 <HAL_RCC_GetPCLK1Freq>
 800ce9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cea2:	69db      	ldr	r3, [r3, #28]
 800cea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cea8:	f040 810c 	bne.w	800d0c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ceac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ceb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ceba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cebe:	4622      	mov	r2, r4
 800cec0:	462b      	mov	r3, r5
 800cec2:	1891      	adds	r1, r2, r2
 800cec4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cec6:	415b      	adcs	r3, r3
 800cec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ceca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cece:	4621      	mov	r1, r4
 800ced0:	eb12 0801 	adds.w	r8, r2, r1
 800ced4:	4629      	mov	r1, r5
 800ced6:	eb43 0901 	adc.w	r9, r3, r1
 800ceda:	f04f 0200 	mov.w	r2, #0
 800cede:	f04f 0300 	mov.w	r3, #0
 800cee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ceea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ceee:	4690      	mov	r8, r2
 800cef0:	4699      	mov	r9, r3
 800cef2:	4623      	mov	r3, r4
 800cef4:	eb18 0303 	adds.w	r3, r8, r3
 800cef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cefc:	462b      	mov	r3, r5
 800cefe:	eb49 0303 	adc.w	r3, r9, r3
 800cf02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cf16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	18db      	adds	r3, r3, r3
 800cf1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf20:	4613      	mov	r3, r2
 800cf22:	eb42 0303 	adc.w	r3, r2, r3
 800cf26:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cf2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cf30:	f7f3 fec2 	bl	8000cb8 <__aeabi_uldivmod>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4b61      	ldr	r3, [pc, #388]	@ (800d0c0 <UART_SetConfig+0x2d4>)
 800cf3a:	fba3 2302 	umull	r2, r3, r3, r2
 800cf3e:	095b      	lsrs	r3, r3, #5
 800cf40:	011c      	lsls	r4, r3, #4
 800cf42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf46:	2200      	movs	r2, #0
 800cf48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cf50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cf54:	4642      	mov	r2, r8
 800cf56:	464b      	mov	r3, r9
 800cf58:	1891      	adds	r1, r2, r2
 800cf5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cf5c:	415b      	adcs	r3, r3
 800cf5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cf64:	4641      	mov	r1, r8
 800cf66:	eb12 0a01 	adds.w	sl, r2, r1
 800cf6a:	4649      	mov	r1, r9
 800cf6c:	eb43 0b01 	adc.w	fp, r3, r1
 800cf70:	f04f 0200 	mov.w	r2, #0
 800cf74:	f04f 0300 	mov.w	r3, #0
 800cf78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf84:	4692      	mov	sl, r2
 800cf86:	469b      	mov	fp, r3
 800cf88:	4643      	mov	r3, r8
 800cf8a:	eb1a 0303 	adds.w	r3, sl, r3
 800cf8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cf92:	464b      	mov	r3, r9
 800cf94:	eb4b 0303 	adc.w	r3, fp, r3
 800cf98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cf9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cfa8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cfac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	18db      	adds	r3, r3, r3
 800cfb4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	eb42 0303 	adc.w	r3, r2, r3
 800cfbc:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cfc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cfc6:	f7f3 fe77 	bl	8000cb8 <__aeabi_uldivmod>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	460b      	mov	r3, r1
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4b3b      	ldr	r3, [pc, #236]	@ (800d0c0 <UART_SetConfig+0x2d4>)
 800cfd2:	fba3 2301 	umull	r2, r3, r3, r1
 800cfd6:	095b      	lsrs	r3, r3, #5
 800cfd8:	2264      	movs	r2, #100	@ 0x64
 800cfda:	fb02 f303 	mul.w	r3, r2, r3
 800cfde:	1acb      	subs	r3, r1, r3
 800cfe0:	00db      	lsls	r3, r3, #3
 800cfe2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cfe6:	4b36      	ldr	r3, [pc, #216]	@ (800d0c0 <UART_SetConfig+0x2d4>)
 800cfe8:	fba3 2302 	umull	r2, r3, r3, r2
 800cfec:	095b      	lsrs	r3, r3, #5
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cff4:	441c      	add	r4, r3
 800cff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cffa:	2200      	movs	r2, #0
 800cffc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d000:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d004:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d008:	4642      	mov	r2, r8
 800d00a:	464b      	mov	r3, r9
 800d00c:	1891      	adds	r1, r2, r2
 800d00e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d010:	415b      	adcs	r3, r3
 800d012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d014:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d018:	4641      	mov	r1, r8
 800d01a:	1851      	adds	r1, r2, r1
 800d01c:	6339      	str	r1, [r7, #48]	@ 0x30
 800d01e:	4649      	mov	r1, r9
 800d020:	414b      	adcs	r3, r1
 800d022:	637b      	str	r3, [r7, #52]	@ 0x34
 800d024:	f04f 0200 	mov.w	r2, #0
 800d028:	f04f 0300 	mov.w	r3, #0
 800d02c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d030:	4659      	mov	r1, fp
 800d032:	00cb      	lsls	r3, r1, #3
 800d034:	4651      	mov	r1, sl
 800d036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d03a:	4651      	mov	r1, sl
 800d03c:	00ca      	lsls	r2, r1, #3
 800d03e:	4610      	mov	r0, r2
 800d040:	4619      	mov	r1, r3
 800d042:	4603      	mov	r3, r0
 800d044:	4642      	mov	r2, r8
 800d046:	189b      	adds	r3, r3, r2
 800d048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d04c:	464b      	mov	r3, r9
 800d04e:	460a      	mov	r2, r1
 800d050:	eb42 0303 	adc.w	r3, r2, r3
 800d054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d064:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d068:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d06c:	460b      	mov	r3, r1
 800d06e:	18db      	adds	r3, r3, r3
 800d070:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d072:	4613      	mov	r3, r2
 800d074:	eb42 0303 	adc.w	r3, r2, r3
 800d078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d07a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d07e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d082:	f7f3 fe19 	bl	8000cb8 <__aeabi_uldivmod>
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	4b0d      	ldr	r3, [pc, #52]	@ (800d0c0 <UART_SetConfig+0x2d4>)
 800d08c:	fba3 1302 	umull	r1, r3, r3, r2
 800d090:	095b      	lsrs	r3, r3, #5
 800d092:	2164      	movs	r1, #100	@ 0x64
 800d094:	fb01 f303 	mul.w	r3, r1, r3
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	00db      	lsls	r3, r3, #3
 800d09c:	3332      	adds	r3, #50	@ 0x32
 800d09e:	4a08      	ldr	r2, [pc, #32]	@ (800d0c0 <UART_SetConfig+0x2d4>)
 800d0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a4:	095b      	lsrs	r3, r3, #5
 800d0a6:	f003 0207 	and.w	r2, r3, #7
 800d0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4422      	add	r2, r4
 800d0b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0b4:	e106      	b.n	800d2c4 <UART_SetConfig+0x4d8>
 800d0b6:	bf00      	nop
 800d0b8:	40011000 	.word	0x40011000
 800d0bc:	40011400 	.word	0x40011400
 800d0c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d0d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d0d6:	4642      	mov	r2, r8
 800d0d8:	464b      	mov	r3, r9
 800d0da:	1891      	adds	r1, r2, r2
 800d0dc:	6239      	str	r1, [r7, #32]
 800d0de:	415b      	adcs	r3, r3
 800d0e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d0e6:	4641      	mov	r1, r8
 800d0e8:	1854      	adds	r4, r2, r1
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	eb43 0501 	adc.w	r5, r3, r1
 800d0f0:	f04f 0200 	mov.w	r2, #0
 800d0f4:	f04f 0300 	mov.w	r3, #0
 800d0f8:	00eb      	lsls	r3, r5, #3
 800d0fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d0fe:	00e2      	lsls	r2, r4, #3
 800d100:	4614      	mov	r4, r2
 800d102:	461d      	mov	r5, r3
 800d104:	4643      	mov	r3, r8
 800d106:	18e3      	adds	r3, r4, r3
 800d108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d10c:	464b      	mov	r3, r9
 800d10e:	eb45 0303 	adc.w	r3, r5, r3
 800d112:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d122:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d126:	f04f 0200 	mov.w	r2, #0
 800d12a:	f04f 0300 	mov.w	r3, #0
 800d12e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d132:	4629      	mov	r1, r5
 800d134:	008b      	lsls	r3, r1, #2
 800d136:	4621      	mov	r1, r4
 800d138:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d13c:	4621      	mov	r1, r4
 800d13e:	008a      	lsls	r2, r1, #2
 800d140:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d144:	f7f3 fdb8 	bl	8000cb8 <__aeabi_uldivmod>
 800d148:	4602      	mov	r2, r0
 800d14a:	460b      	mov	r3, r1
 800d14c:	4b60      	ldr	r3, [pc, #384]	@ (800d2d0 <UART_SetConfig+0x4e4>)
 800d14e:	fba3 2302 	umull	r2, r3, r3, r2
 800d152:	095b      	lsrs	r3, r3, #5
 800d154:	011c      	lsls	r4, r3, #4
 800d156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d15a:	2200      	movs	r2, #0
 800d15c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d160:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d164:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d168:	4642      	mov	r2, r8
 800d16a:	464b      	mov	r3, r9
 800d16c:	1891      	adds	r1, r2, r2
 800d16e:	61b9      	str	r1, [r7, #24]
 800d170:	415b      	adcs	r3, r3
 800d172:	61fb      	str	r3, [r7, #28]
 800d174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d178:	4641      	mov	r1, r8
 800d17a:	1851      	adds	r1, r2, r1
 800d17c:	6139      	str	r1, [r7, #16]
 800d17e:	4649      	mov	r1, r9
 800d180:	414b      	adcs	r3, r1
 800d182:	617b      	str	r3, [r7, #20]
 800d184:	f04f 0200 	mov.w	r2, #0
 800d188:	f04f 0300 	mov.w	r3, #0
 800d18c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d190:	4659      	mov	r1, fp
 800d192:	00cb      	lsls	r3, r1, #3
 800d194:	4651      	mov	r1, sl
 800d196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d19a:	4651      	mov	r1, sl
 800d19c:	00ca      	lsls	r2, r1, #3
 800d19e:	4610      	mov	r0, r2
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	4642      	mov	r2, r8
 800d1a6:	189b      	adds	r3, r3, r2
 800d1a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d1ac:	464b      	mov	r3, r9
 800d1ae:	460a      	mov	r2, r1
 800d1b0:	eb42 0303 	adc.w	r3, r2, r3
 800d1b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d1b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d1c4:	f04f 0200 	mov.w	r2, #0
 800d1c8:	f04f 0300 	mov.w	r3, #0
 800d1cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d1d0:	4649      	mov	r1, r9
 800d1d2:	008b      	lsls	r3, r1, #2
 800d1d4:	4641      	mov	r1, r8
 800d1d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1da:	4641      	mov	r1, r8
 800d1dc:	008a      	lsls	r2, r1, #2
 800d1de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d1e2:	f7f3 fd69 	bl	8000cb8 <__aeabi_uldivmod>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	4b38      	ldr	r3, [pc, #224]	@ (800d2d0 <UART_SetConfig+0x4e4>)
 800d1ee:	fba3 2301 	umull	r2, r3, r3, r1
 800d1f2:	095b      	lsrs	r3, r3, #5
 800d1f4:	2264      	movs	r2, #100	@ 0x64
 800d1f6:	fb02 f303 	mul.w	r3, r2, r3
 800d1fa:	1acb      	subs	r3, r1, r3
 800d1fc:	011b      	lsls	r3, r3, #4
 800d1fe:	3332      	adds	r3, #50	@ 0x32
 800d200:	4a33      	ldr	r2, [pc, #204]	@ (800d2d0 <UART_SetConfig+0x4e4>)
 800d202:	fba2 2303 	umull	r2, r3, r2, r3
 800d206:	095b      	lsrs	r3, r3, #5
 800d208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d20c:	441c      	add	r4, r3
 800d20e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d212:	2200      	movs	r2, #0
 800d214:	673b      	str	r3, [r7, #112]	@ 0x70
 800d216:	677a      	str	r2, [r7, #116]	@ 0x74
 800d218:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d21c:	4642      	mov	r2, r8
 800d21e:	464b      	mov	r3, r9
 800d220:	1891      	adds	r1, r2, r2
 800d222:	60b9      	str	r1, [r7, #8]
 800d224:	415b      	adcs	r3, r3
 800d226:	60fb      	str	r3, [r7, #12]
 800d228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d22c:	4641      	mov	r1, r8
 800d22e:	1851      	adds	r1, r2, r1
 800d230:	6039      	str	r1, [r7, #0]
 800d232:	4649      	mov	r1, r9
 800d234:	414b      	adcs	r3, r1
 800d236:	607b      	str	r3, [r7, #4]
 800d238:	f04f 0200 	mov.w	r2, #0
 800d23c:	f04f 0300 	mov.w	r3, #0
 800d240:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d244:	4659      	mov	r1, fp
 800d246:	00cb      	lsls	r3, r1, #3
 800d248:	4651      	mov	r1, sl
 800d24a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d24e:	4651      	mov	r1, sl
 800d250:	00ca      	lsls	r2, r1, #3
 800d252:	4610      	mov	r0, r2
 800d254:	4619      	mov	r1, r3
 800d256:	4603      	mov	r3, r0
 800d258:	4642      	mov	r2, r8
 800d25a:	189b      	adds	r3, r3, r2
 800d25c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d25e:	464b      	mov	r3, r9
 800d260:	460a      	mov	r2, r1
 800d262:	eb42 0303 	adc.w	r3, r2, r3
 800d266:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	663b      	str	r3, [r7, #96]	@ 0x60
 800d272:	667a      	str	r2, [r7, #100]	@ 0x64
 800d274:	f04f 0200 	mov.w	r2, #0
 800d278:	f04f 0300 	mov.w	r3, #0
 800d27c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d280:	4649      	mov	r1, r9
 800d282:	008b      	lsls	r3, r1, #2
 800d284:	4641      	mov	r1, r8
 800d286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d28a:	4641      	mov	r1, r8
 800d28c:	008a      	lsls	r2, r1, #2
 800d28e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d292:	f7f3 fd11 	bl	8000cb8 <__aeabi_uldivmod>
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d0 <UART_SetConfig+0x4e4>)
 800d29c:	fba3 1302 	umull	r1, r3, r3, r2
 800d2a0:	095b      	lsrs	r3, r3, #5
 800d2a2:	2164      	movs	r1, #100	@ 0x64
 800d2a4:	fb01 f303 	mul.w	r3, r1, r3
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	011b      	lsls	r3, r3, #4
 800d2ac:	3332      	adds	r3, #50	@ 0x32
 800d2ae:	4a08      	ldr	r2, [pc, #32]	@ (800d2d0 <UART_SetConfig+0x4e4>)
 800d2b0:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b4:	095b      	lsrs	r3, r3, #5
 800d2b6:	f003 020f 	and.w	r2, r3, #15
 800d2ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4422      	add	r2, r4
 800d2c2:	609a      	str	r2, [r3, #8]
}
 800d2c4:	bf00      	nop
 800d2c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2d0:	51eb851f 	.word	0x51eb851f

0800d2d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	b480      	push	{r7}
 800d2d8:	b085      	sub	sp, #20
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	f107 001c 	add.w	r0, r7, #28
 800d2e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d2ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d2ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d2ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d2f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d2f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d2fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d2fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	4313      	orrs	r3, r2
 800d304:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800d30e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	431a      	orrs	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3714      	adds	r7, #20
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	b004      	add	sp, #16
 800d328:	4770      	bx	lr

0800d32a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d32a:	b480      	push	{r7}
 800d32c:	b083      	sub	sp, #12
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d338:	4618      	mov	r0, r3
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d358:	2300      	movs	r3, #0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	370c      	adds	r7, #12
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr

0800d366 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d366:	b480      	push	{r7}
 800d368:	b083      	sub	sp, #12
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2203      	movs	r2, #3
 800d372:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f003 0303 	and.w	r3, r3, #3
}
 800d392:	4618      	mov	r0, r3
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d39e:	b480      	push	{r7}
 800d3a0:	b085      	sub	sp, #20
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3bc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d3c2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d3c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3ca:	68fa      	ldr	r2, [r7, #12]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d3d8:	f023 030f 	bic.w	r3, r3, #15
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	431a      	orrs	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d3f2:	b480      	push	{r7}
 800d3f4:	b083      	sub	sp, #12
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	691b      	ldr	r3, [r3, #16]
 800d3fe:	b2db      	uxtb	r3, r3
}
 800d400:	4618      	mov	r0, r3
 800d402:	370c      	adds	r7, #12
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	3314      	adds	r3, #20
 800d41a:	461a      	mov	r2, r3
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	4413      	add	r3, r2
 800d420:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
}  
 800d426:	4618      	mov	r0, r3
 800d428:	3714      	adds	r7, #20
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d432:	b480      	push	{r7}
 800d434:	b085      	sub	sp, #20
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
 800d43a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d43c:	2300      	movs	r3, #0
 800d43e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d458:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d45e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d464:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	4313      	orrs	r3, r2
 800d46a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d470:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	431a      	orrs	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d47c:	2300      	movs	r3, #0

}
 800d47e:	4618      	mov	r0, r3
 800d480:	3714      	adds	r7, #20
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr

0800d48a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b088      	sub	sp, #32
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
 800d492:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d498:	2310      	movs	r3, #16
 800d49a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d49c:	2340      	movs	r3, #64	@ 0x40
 800d49e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4aa:	f107 0308 	add.w	r3, r7, #8
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff ff74 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d4b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4ba:	2110      	movs	r1, #16
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f9d7 	bl	800d870 <SDMMC_GetCmdResp1>
 800d4c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4c4:	69fb      	ldr	r3, [r7, #28]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3720      	adds	r7, #32
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b088      	sub	sp, #32
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d4dc:	2311      	movs	r3, #17
 800d4de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4e0:	2340      	movs	r3, #64	@ 0x40
 800d4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4ee:	f107 0308 	add.w	r3, r7, #8
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff ff52 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d4fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4fe:	2111      	movs	r1, #17
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 f9b5 	bl	800d870 <SDMMC_GetCmdResp1>
 800d506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d508:	69fb      	ldr	r3, [r7, #28]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3720      	adds	r7, #32
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b088      	sub	sp, #32
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
 800d51a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d520:	2312      	movs	r3, #18
 800d522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d524:	2340      	movs	r3, #64	@ 0x40
 800d526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d528:	2300      	movs	r3, #0
 800d52a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d52c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d530:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d532:	f107 0308 	add.w	r3, r7, #8
 800d536:	4619      	mov	r1, r3
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7ff ff30 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d53e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d542:	2112      	movs	r1, #18
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 f993 	bl	800d870 <SDMMC_GetCmdResp1>
 800d54a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d54c:	69fb      	ldr	r3, [r7, #28]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3720      	adds	r7, #32
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b088      	sub	sp, #32
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d564:	2318      	movs	r3, #24
 800d566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d568:	2340      	movs	r3, #64	@ 0x40
 800d56a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d56c:	2300      	movs	r3, #0
 800d56e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d574:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d576:	f107 0308 	add.w	r3, r7, #8
 800d57a:	4619      	mov	r1, r3
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7ff ff0e 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d582:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d586:	2118      	movs	r1, #24
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f971 	bl	800d870 <SDMMC_GetCmdResp1>
 800d58e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d590:	69fb      	ldr	r3, [r7, #28]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3720      	adds	r7, #32
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b088      	sub	sp, #32
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
 800d5a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d5a8:	2319      	movs	r3, #25
 800d5aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5ac:	2340      	movs	r3, #64	@ 0x40
 800d5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5ba:	f107 0308 	add.w	r3, r7, #8
 800d5be:	4619      	mov	r1, r3
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff feec 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d5c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5ca:	2119      	movs	r1, #25
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f94f 	bl	800d870 <SDMMC_GetCmdResp1>
 800d5d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5d4:	69fb      	ldr	r3, [r7, #28]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3720      	adds	r7, #32
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
	...

0800d5e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b088      	sub	sp, #32
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d5ec:	230c      	movs	r3, #12
 800d5ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5f0:	2340      	movs	r3, #64	@ 0x40
 800d5f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5fe:	f107 0308 	add.w	r3, r7, #8
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff feca 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d60a:	4a05      	ldr	r2, [pc, #20]	@ (800d620 <SDMMC_CmdStopTransfer+0x40>)
 800d60c:	210c      	movs	r1, #12
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 f92e 	bl	800d870 <SDMMC_GetCmdResp1>
 800d614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d616:	69fb      	ldr	r3, [r7, #28]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3720      	adds	r7, #32
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	05f5e100 	.word	0x05f5e100

0800d624 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b08a      	sub	sp, #40	@ 0x28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d634:	2307      	movs	r3, #7
 800d636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d638:	2340      	movs	r3, #64	@ 0x40
 800d63a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d63c:	2300      	movs	r3, #0
 800d63e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d644:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d646:	f107 0310 	add.w	r3, r7, #16
 800d64a:	4619      	mov	r1, r3
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f7ff fea6 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d652:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d656:	2107      	movs	r1, #7
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f000 f909 	bl	800d870 <SDMMC_GetCmdResp1>
 800d65e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d662:	4618      	mov	r0, r3
 800d664:	3728      	adds	r7, #40	@ 0x28
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b088      	sub	sp, #32
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d672:	2300      	movs	r3, #0
 800d674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d676:	2300      	movs	r3, #0
 800d678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d67a:	2300      	movs	r3, #0
 800d67c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d67e:	2300      	movs	r3, #0
 800d680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d686:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d688:	f107 0308 	add.w	r3, r7, #8
 800d68c:	4619      	mov	r1, r3
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7ff fe85 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fb23 	bl	800dce0 <SDMMC_GetCmdError>
 800d69a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d69c:	69fb      	ldr	r3, [r7, #28]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3720      	adds	r7, #32
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b088      	sub	sp, #32
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6ae:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d6b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6b4:	2308      	movs	r3, #8
 800d6b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6b8:	2340      	movs	r3, #64	@ 0x40
 800d6ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6c6:	f107 0308 	add.w	r3, r7, #8
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f7ff fe66 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fab6 	bl	800dc44 <SDMMC_GetCmdResp7>
 800d6d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6da:	69fb      	ldr	r3, [r7, #28]
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3720      	adds	r7, #32
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b088      	sub	sp, #32
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d6f2:	2337      	movs	r3, #55	@ 0x37
 800d6f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6f6:	2340      	movs	r3, #64	@ 0x40
 800d6f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d704:	f107 0308 	add.w	r3, r7, #8
 800d708:	4619      	mov	r1, r3
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7ff fe47 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d710:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d714:	2137      	movs	r1, #55	@ 0x37
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 f8aa 	bl	800d870 <SDMMC_GetCmdResp1>
 800d71c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d71e:	69fb      	ldr	r3, [r7, #28]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3720      	adds	r7, #32
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b088      	sub	sp, #32
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d738:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d73c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d73e:	2329      	movs	r3, #41	@ 0x29
 800d740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d742:	2340      	movs	r3, #64	@ 0x40
 800d744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d746:	2300      	movs	r3, #0
 800d748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d74a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d74e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d750:	f107 0308 	add.w	r3, r7, #8
 800d754:	4619      	mov	r1, r3
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7ff fe21 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 f9bd 	bl	800dadc <SDMMC_GetCmdResp3>
 800d762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d764:	69fb      	ldr	r3, [r7, #28]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3720      	adds	r7, #32
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b088      	sub	sp, #32
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d776:	2300      	movs	r3, #0
 800d778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d77a:	2302      	movs	r3, #2
 800d77c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d77e:	23c0      	movs	r3, #192	@ 0xc0
 800d780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d782:	2300      	movs	r3, #0
 800d784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d78a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d78c:	f107 0308 	add.w	r3, r7, #8
 800d790:	4619      	mov	r1, r3
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7ff fe03 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 f957 	bl	800da4c <SDMMC_GetCmdResp2>
 800d79e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7a0:	69fb      	ldr	r3, [r7, #28]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3720      	adds	r7, #32
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b088      	sub	sp, #32
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d7b8:	2309      	movs	r3, #9
 800d7ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d7bc:	23c0      	movs	r3, #192	@ 0xc0
 800d7be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7ca:	f107 0308 	add.w	r3, r7, #8
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7ff fde4 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f938 	bl	800da4c <SDMMC_GetCmdResp2>
 800d7dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7de:	69fb      	ldr	r3, [r7, #28]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3720      	adds	r7, #32
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b088      	sub	sp, #32
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d7f6:	2303      	movs	r3, #3
 800d7f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7fa:	2340      	movs	r3, #64	@ 0x40
 800d7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7fe:	2300      	movs	r3, #0
 800d800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d806:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d808:	f107 0308 	add.w	r3, r7, #8
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff fdc5 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d814:	683a      	ldr	r2, [r7, #0]
 800d816:	2103      	movs	r1, #3
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f99d 	bl	800db58 <SDMMC_GetCmdResp6>
 800d81e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d820:	69fb      	ldr	r3, [r7, #28]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3720      	adds	r7, #32
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b088      	sub	sp, #32
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d838:	230d      	movs	r3, #13
 800d83a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d83c:	2340      	movs	r3, #64	@ 0x40
 800d83e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d840:	2300      	movs	r3, #0
 800d842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d848:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d84a:	f107 0308 	add.w	r3, r7, #8
 800d84e:	4619      	mov	r1, r3
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff fda4 	bl	800d39e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d85a:	210d      	movs	r1, #13
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f807 	bl	800d870 <SDMMC_GetCmdResp1>
 800d862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d864:	69fb      	ldr	r3, [r7, #28]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3720      	adds	r7, #32
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b088      	sub	sp, #32
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	460b      	mov	r3, r1
 800d87a:	607a      	str	r2, [r7, #4]
 800d87c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d87e:	4b70      	ldr	r3, [pc, #448]	@ (800da40 <SDMMC_GetCmdResp1+0x1d0>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a70      	ldr	r2, [pc, #448]	@ (800da44 <SDMMC_GetCmdResp1+0x1d4>)
 800d884:	fba2 2303 	umull	r2, r3, r2, r3
 800d888:	0a5a      	lsrs	r2, r3, #9
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	fb02 f303 	mul.w	r3, r2, r3
 800d890:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	1e5a      	subs	r2, r3, #1
 800d896:	61fa      	str	r2, [r7, #28]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d102      	bne.n	800d8a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d89c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8a0:	e0c9      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d0ef      	beq.n	800d892 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1ea      	bne.n	800d892 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8c0:	f003 0304 	and.w	r3, r3, #4
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d004      	beq.n	800d8d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2204      	movs	r2, #4
 800d8cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8ce:	2304      	movs	r3, #4
 800d8d0:	e0b1      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8d6:	f003 0301 	and.w	r3, r3, #1
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d004      	beq.n	800d8e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e0a6      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	22c5      	movs	r2, #197	@ 0xc5
 800d8ec:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f7ff fd7f 	bl	800d3f2 <SDIO_GetCommandResponse>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	7afb      	ldrb	r3, [r7, #11]
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d001      	beq.n	800d902 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8fe:	2301      	movs	r3, #1
 800d900:	e099      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d902:	2100      	movs	r1, #0
 800d904:	68f8      	ldr	r0, [r7, #12]
 800d906:	f7ff fd81 	bl	800d40c <SDIO_GetResponse>
 800d90a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d90c:	697a      	ldr	r2, [r7, #20]
 800d90e:	4b4e      	ldr	r3, [pc, #312]	@ (800da48 <SDMMC_GetCmdResp1+0x1d8>)
 800d910:	4013      	ands	r3, r2
 800d912:	2b00      	cmp	r3, #0
 800d914:	d101      	bne.n	800d91a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d916:	2300      	movs	r3, #0
 800d918:	e08d      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	da02      	bge.n	800d926 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d920:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d924:	e087      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d930:	2340      	movs	r3, #64	@ 0x40
 800d932:	e080      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d001      	beq.n	800d942 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d93e:	2380      	movs	r3, #128	@ 0x80
 800d940:	e079      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d002      	beq.n	800d952 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d94c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d950:	e071      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d002      	beq.n	800d962 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d95c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d960:	e069      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d96c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d970:	e061      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d002      	beq.n	800d982 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d97c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d980:	e059      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d002      	beq.n	800d992 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d98c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d990:	e051      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d99c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d9a0:	e049      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d002      	beq.n	800d9b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d9ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d9b0:	e041      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d9bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9c0:	e039      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d002      	beq.n	800d9d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d9cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d9d0:	e031      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d9dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d9e0:	e029      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d9ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d9f0:	e021      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d9fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800da00:	e019      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800da10:	e011      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800da1c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800da20:	e009      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f003 0308 	and.w	r3, r3, #8
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da2c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800da30:	e001      	b.n	800da36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800da36:	4618      	mov	r0, r3
 800da38:	3720      	adds	r7, #32
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	20000010 	.word	0x20000010
 800da44:	10624dd3 	.word	0x10624dd3
 800da48:	fdffe008 	.word	0xfdffe008

0800da4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b085      	sub	sp, #20
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da54:	4b1f      	ldr	r3, [pc, #124]	@ (800dad4 <SDMMC_GetCmdResp2+0x88>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a1f      	ldr	r2, [pc, #124]	@ (800dad8 <SDMMC_GetCmdResp2+0x8c>)
 800da5a:	fba2 2303 	umull	r2, r3, r2, r3
 800da5e:	0a5b      	lsrs	r3, r3, #9
 800da60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da64:	fb02 f303 	mul.w	r3, r2, r3
 800da68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	1e5a      	subs	r2, r3, #1
 800da6e:	60fa      	str	r2, [r7, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da78:	e026      	b.n	800dac8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da86:	2b00      	cmp	r3, #0
 800da88:	d0ef      	beq.n	800da6a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800da90:	2b00      	cmp	r3, #0
 800da92:	d1ea      	bne.n	800da6a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da98:	f003 0304 	and.w	r3, r3, #4
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d004      	beq.n	800daaa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2204      	movs	r2, #4
 800daa4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daa6:	2304      	movs	r3, #4
 800daa8:	e00e      	b.n	800dac8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daae:	f003 0301 	and.w	r3, r3, #1
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d004      	beq.n	800dac0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e003      	b.n	800dac8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	22c5      	movs	r2, #197	@ 0xc5
 800dac4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3714      	adds	r7, #20
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr
 800dad4:	20000010 	.word	0x20000010
 800dad8:	10624dd3 	.word	0x10624dd3

0800dadc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dae4:	4b1a      	ldr	r3, [pc, #104]	@ (800db50 <SDMMC_GetCmdResp3+0x74>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a1a      	ldr	r2, [pc, #104]	@ (800db54 <SDMMC_GetCmdResp3+0x78>)
 800daea:	fba2 2303 	umull	r2, r3, r2, r3
 800daee:	0a5b      	lsrs	r3, r3, #9
 800daf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800daf4:	fb02 f303 	mul.w	r3, r2, r3
 800daf8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	1e5a      	subs	r2, r3, #1
 800dafe:	60fa      	str	r2, [r7, #12]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d102      	bne.n	800db0a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db08:	e01b      	b.n	800db42 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db16:	2b00      	cmp	r3, #0
 800db18:	d0ef      	beq.n	800dafa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db20:	2b00      	cmp	r3, #0
 800db22:	d1ea      	bne.n	800dafa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db28:	f003 0304 	and.w	r3, r3, #4
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d004      	beq.n	800db3a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2204      	movs	r2, #4
 800db34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db36:	2304      	movs	r3, #4
 800db38:	e003      	b.n	800db42 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	22c5      	movs	r2, #197	@ 0xc5
 800db3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800db40:	2300      	movs	r3, #0
}
 800db42:	4618      	mov	r0, r3
 800db44:	3714      	adds	r7, #20
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	20000010 	.word	0x20000010
 800db54:	10624dd3 	.word	0x10624dd3

0800db58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b088      	sub	sp, #32
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	460b      	mov	r3, r1
 800db62:	607a      	str	r2, [r7, #4]
 800db64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db66:	4b35      	ldr	r3, [pc, #212]	@ (800dc3c <SDMMC_GetCmdResp6+0xe4>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a35      	ldr	r2, [pc, #212]	@ (800dc40 <SDMMC_GetCmdResp6+0xe8>)
 800db6c:	fba2 2303 	umull	r2, r3, r2, r3
 800db70:	0a5b      	lsrs	r3, r3, #9
 800db72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db76:	fb02 f303 	mul.w	r3, r2, r3
 800db7a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	1e5a      	subs	r2, r3, #1
 800db80:	61fa      	str	r2, [r7, #28]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d102      	bne.n	800db8c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db86:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db8a:	e052      	b.n	800dc32 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db90:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d0ef      	beq.n	800db7c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1ea      	bne.n	800db7c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbaa:	f003 0304 	and.w	r3, r3, #4
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d004      	beq.n	800dbbc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2204      	movs	r2, #4
 800dbb6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbb8:	2304      	movs	r3, #4
 800dbba:	e03a      	b.n	800dc32 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbc0:	f003 0301 	and.w	r3, r3, #1
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d004      	beq.n	800dbd2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e02f      	b.n	800dc32 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dbd2:	68f8      	ldr	r0, [r7, #12]
 800dbd4:	f7ff fc0d 	bl	800d3f2 <SDIO_GetCommandResponse>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	461a      	mov	r2, r3
 800dbdc:	7afb      	ldrb	r3, [r7, #11]
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d001      	beq.n	800dbe6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e025      	b.n	800dc32 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	22c5      	movs	r2, #197	@ 0xc5
 800dbea:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dbec:	2100      	movs	r1, #0
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f7ff fc0c 	bl	800d40c <SDIO_GetResponse>
 800dbf4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d106      	bne.n	800dc0e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	0c1b      	lsrs	r3, r3, #16
 800dc04:	b29a      	uxth	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	e011      	b.n	800dc32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dc1c:	e009      	b.n	800dc32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d002      	beq.n	800dc2e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc2c:	e001      	b.n	800dc32 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3720      	adds	r7, #32
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	20000010 	.word	0x20000010
 800dc40:	10624dd3 	.word	0x10624dd3

0800dc44 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc4c:	4b22      	ldr	r3, [pc, #136]	@ (800dcd8 <SDMMC_GetCmdResp7+0x94>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a22      	ldr	r2, [pc, #136]	@ (800dcdc <SDMMC_GetCmdResp7+0x98>)
 800dc52:	fba2 2303 	umull	r2, r3, r2, r3
 800dc56:	0a5b      	lsrs	r3, r3, #9
 800dc58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc5c:	fb02 f303 	mul.w	r3, r2, r3
 800dc60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	1e5a      	subs	r2, r3, #1
 800dc66:	60fa      	str	r2, [r7, #12]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d102      	bne.n	800dc72 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc70:	e02c      	b.n	800dccc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d0ef      	beq.n	800dc62 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1ea      	bne.n	800dc62 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc90:	f003 0304 	and.w	r3, r3, #4
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d004      	beq.n	800dca2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2204      	movs	r2, #4
 800dc9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc9e:	2304      	movs	r3, #4
 800dca0:	e014      	b.n	800dccc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dca6:	f003 0301 	and.w	r3, r3, #1
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d004      	beq.n	800dcb8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	e009      	b.n	800dccc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d002      	beq.n	800dcca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2240      	movs	r2, #64	@ 0x40
 800dcc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dcca:	2300      	movs	r3, #0
  
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3714      	adds	r7, #20
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	20000010 	.word	0x20000010
 800dcdc:	10624dd3 	.word	0x10624dd3

0800dce0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dce8:	4b11      	ldr	r3, [pc, #68]	@ (800dd30 <SDMMC_GetCmdError+0x50>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a11      	ldr	r2, [pc, #68]	@ (800dd34 <SDMMC_GetCmdError+0x54>)
 800dcee:	fba2 2303 	umull	r2, r3, r2, r3
 800dcf2:	0a5b      	lsrs	r3, r3, #9
 800dcf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcf8:	fb02 f303 	mul.w	r3, r2, r3
 800dcfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	1e5a      	subs	r2, r3, #1
 800dd02:	60fa      	str	r2, [r7, #12]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d102      	bne.n	800dd0e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd0c:	e009      	b.n	800dd22 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d0f1      	beq.n	800dcfe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	22c5      	movs	r2, #197	@ 0xc5
 800dd1e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3714      	adds	r7, #20
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	20000010 	.word	0x20000010
 800dd34:	10624dd3 	.word	0x10624dd3

0800dd38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd38:	b084      	sub	sp, #16
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b084      	sub	sp, #16
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	f107 001c 	add.w	r0, r7, #28
 800dd46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d123      	bne.n	800dd9a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800dd66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d105      	bne.n	800dd8e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f001 fb32 	bl	800f3f8 <USB_CoreReset>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73fb      	strb	r3, [r7, #15]
 800dd98:	e01b      	b.n	800ddd2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f001 fb26 	bl	800f3f8 <USB_CoreReset>
 800ddac:	4603      	mov	r3, r0
 800ddae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ddb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d106      	bne.n	800ddc6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	639a      	str	r2, [r3, #56]	@ 0x38
 800ddc4:	e005      	b.n	800ddd2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ddd2:	7fbb      	ldrb	r3, [r7, #30]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d10b      	bne.n	800ddf0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	f043 0206 	orr.w	r2, r3, #6
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	f043 0220 	orr.w	r2, r3, #32
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ddf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddfc:	b004      	add	sp, #16
 800ddfe:	4770      	bx	lr

0800de00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800de00:	b480      	push	{r7}
 800de02:	b087      	sub	sp, #28
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	4613      	mov	r3, r2
 800de0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800de0e:	79fb      	ldrb	r3, [r7, #7]
 800de10:	2b02      	cmp	r3, #2
 800de12:	d165      	bne.n	800dee0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	4a41      	ldr	r2, [pc, #260]	@ (800df1c <USB_SetTurnaroundTime+0x11c>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d906      	bls.n	800de2a <USB_SetTurnaroundTime+0x2a>
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	4a40      	ldr	r2, [pc, #256]	@ (800df20 <USB_SetTurnaroundTime+0x120>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d202      	bcs.n	800de2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800de24:	230f      	movs	r3, #15
 800de26:	617b      	str	r3, [r7, #20]
 800de28:	e062      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	4a3c      	ldr	r2, [pc, #240]	@ (800df20 <USB_SetTurnaroundTime+0x120>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d306      	bcc.n	800de40 <USB_SetTurnaroundTime+0x40>
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	4a3b      	ldr	r2, [pc, #236]	@ (800df24 <USB_SetTurnaroundTime+0x124>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d202      	bcs.n	800de40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800de3a:	230e      	movs	r3, #14
 800de3c:	617b      	str	r3, [r7, #20]
 800de3e:	e057      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	4a38      	ldr	r2, [pc, #224]	@ (800df24 <USB_SetTurnaroundTime+0x124>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d306      	bcc.n	800de56 <USB_SetTurnaroundTime+0x56>
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	4a37      	ldr	r2, [pc, #220]	@ (800df28 <USB_SetTurnaroundTime+0x128>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d202      	bcs.n	800de56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800de50:	230d      	movs	r3, #13
 800de52:	617b      	str	r3, [r7, #20]
 800de54:	e04c      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	4a33      	ldr	r2, [pc, #204]	@ (800df28 <USB_SetTurnaroundTime+0x128>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d306      	bcc.n	800de6c <USB_SetTurnaroundTime+0x6c>
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	4a32      	ldr	r2, [pc, #200]	@ (800df2c <USB_SetTurnaroundTime+0x12c>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d802      	bhi.n	800de6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800de66:	230c      	movs	r3, #12
 800de68:	617b      	str	r3, [r7, #20]
 800de6a:	e041      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	4a2f      	ldr	r2, [pc, #188]	@ (800df2c <USB_SetTurnaroundTime+0x12c>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d906      	bls.n	800de82 <USB_SetTurnaroundTime+0x82>
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	4a2e      	ldr	r2, [pc, #184]	@ (800df30 <USB_SetTurnaroundTime+0x130>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d802      	bhi.n	800de82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800de7c:	230b      	movs	r3, #11
 800de7e:	617b      	str	r3, [r7, #20]
 800de80:	e036      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	4a2a      	ldr	r2, [pc, #168]	@ (800df30 <USB_SetTurnaroundTime+0x130>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d906      	bls.n	800de98 <USB_SetTurnaroundTime+0x98>
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	4a29      	ldr	r2, [pc, #164]	@ (800df34 <USB_SetTurnaroundTime+0x134>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d802      	bhi.n	800de98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800de92:	230a      	movs	r3, #10
 800de94:	617b      	str	r3, [r7, #20]
 800de96:	e02b      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	4a26      	ldr	r2, [pc, #152]	@ (800df34 <USB_SetTurnaroundTime+0x134>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d906      	bls.n	800deae <USB_SetTurnaroundTime+0xae>
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	4a25      	ldr	r2, [pc, #148]	@ (800df38 <USB_SetTurnaroundTime+0x138>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d202      	bcs.n	800deae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dea8:	2309      	movs	r3, #9
 800deaa:	617b      	str	r3, [r7, #20]
 800deac:	e020      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	4a21      	ldr	r2, [pc, #132]	@ (800df38 <USB_SetTurnaroundTime+0x138>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d306      	bcc.n	800dec4 <USB_SetTurnaroundTime+0xc4>
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	4a20      	ldr	r2, [pc, #128]	@ (800df3c <USB_SetTurnaroundTime+0x13c>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d802      	bhi.n	800dec4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800debe:	2308      	movs	r3, #8
 800dec0:	617b      	str	r3, [r7, #20]
 800dec2:	e015      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	4a1d      	ldr	r2, [pc, #116]	@ (800df3c <USB_SetTurnaroundTime+0x13c>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d906      	bls.n	800deda <USB_SetTurnaroundTime+0xda>
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	4a1c      	ldr	r2, [pc, #112]	@ (800df40 <USB_SetTurnaroundTime+0x140>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d202      	bcs.n	800deda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ded4:	2307      	movs	r3, #7
 800ded6:	617b      	str	r3, [r7, #20]
 800ded8:	e00a      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800deda:	2306      	movs	r3, #6
 800dedc:	617b      	str	r3, [r7, #20]
 800dede:	e007      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dee0:	79fb      	ldrb	r3, [r7, #7]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d102      	bne.n	800deec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dee6:	2309      	movs	r3, #9
 800dee8:	617b      	str	r3, [r7, #20]
 800deea:	e001      	b.n	800def0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800deec:	2309      	movs	r3, #9
 800deee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	68da      	ldr	r2, [r3, #12]
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	029b      	lsls	r3, r3, #10
 800df04:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800df08:	431a      	orrs	r2, r3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	371c      	adds	r7, #28
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr
 800df1c:	00d8acbf 	.word	0x00d8acbf
 800df20:	00e4e1c0 	.word	0x00e4e1c0
 800df24:	00f42400 	.word	0x00f42400
 800df28:	01067380 	.word	0x01067380
 800df2c:	011a499f 	.word	0x011a499f
 800df30:	01312cff 	.word	0x01312cff
 800df34:	014ca43f 	.word	0x014ca43f
 800df38:	016e3600 	.word	0x016e3600
 800df3c:	01a6ab1f 	.word	0x01a6ab1f
 800df40:	01e84800 	.word	0x01e84800

0800df44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	f043 0201 	orr.w	r2, r3, #1
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	370c      	adds	r7, #12
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df66:	b480      	push	{r7}
 800df68:	b083      	sub	sp, #12
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	f023 0201 	bic.w	r2, r3, #1
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df7a:	2300      	movs	r3, #0
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	460b      	mov	r3, r1
 800df92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800df94:	2300      	movs	r3, #0
 800df96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dfa4:	78fb      	ldrb	r3, [r7, #3]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d115      	bne.n	800dfd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dfb6:	200a      	movs	r0, #10
 800dfb8:	f7f6 f8aa 	bl	8004110 <HAL_Delay>
      ms += 10U;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	330a      	adds	r3, #10
 800dfc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f001 f988 	bl	800f2d8 <USB_GetMode>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d01e      	beq.n	800e00c <USB_SetCurrentMode+0x84>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2bc7      	cmp	r3, #199	@ 0xc7
 800dfd2:	d9f0      	bls.n	800dfb6 <USB_SetCurrentMode+0x2e>
 800dfd4:	e01a      	b.n	800e00c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dfd6:	78fb      	ldrb	r3, [r7, #3]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d115      	bne.n	800e008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dfe8:	200a      	movs	r0, #10
 800dfea:	f7f6 f891 	bl	8004110 <HAL_Delay>
      ms += 10U;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	330a      	adds	r3, #10
 800dff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f001 f96f 	bl	800f2d8 <USB_GetMode>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d005      	beq.n	800e00c <USB_SetCurrentMode+0x84>
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2bc7      	cmp	r3, #199	@ 0xc7
 800e004:	d9f0      	bls.n	800dfe8 <USB_SetCurrentMode+0x60>
 800e006:	e001      	b.n	800e00c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e008:	2301      	movs	r3, #1
 800e00a:	e005      	b.n	800e018 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2bc8      	cmp	r3, #200	@ 0xc8
 800e010:	d101      	bne.n	800e016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	e000      	b.n	800e018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e016:	2300      	movs	r3, #0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3710      	adds	r7, #16
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e020:	b084      	sub	sp, #16
 800e022:	b580      	push	{r7, lr}
 800e024:	b086      	sub	sp, #24
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
 800e02a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e02e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e032:	2300      	movs	r3, #0
 800e034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e03a:	2300      	movs	r3, #0
 800e03c:	613b      	str	r3, [r7, #16]
 800e03e:	e009      	b.n	800e054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	3340      	adds	r3, #64	@ 0x40
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4413      	add	r3, r2
 800e04a:	2200      	movs	r2, #0
 800e04c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	3301      	adds	r3, #1
 800e052:	613b      	str	r3, [r7, #16]
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	2b0e      	cmp	r3, #14
 800e058:	d9f2      	bls.n	800e040 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e05a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d11c      	bne.n	800e09c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e070:	f043 0302 	orr.w	r3, r3, #2
 800e074:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e07a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e086:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e092:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	639a      	str	r2, [r3, #56]	@ 0x38
 800e09a:	e00b      	b.n	800e0b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	2300      	movs	r3, #0
 800e0be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e0c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d10d      	bne.n	800e0e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d104      	bne.n	800e0da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f968 	bl	800e3a8 <USB_SetDevSpeed>
 800e0d8:	e008      	b.n	800e0ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e0da:	2101      	movs	r1, #1
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 f963 	bl	800e3a8 <USB_SetDevSpeed>
 800e0e2:	e003      	b.n	800e0ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e0e4:	2103      	movs	r1, #3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 f95e 	bl	800e3a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e0ec:	2110      	movs	r1, #16
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 f8fa 	bl	800e2e8 <USB_FlushTxFifo>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d001      	beq.n	800e0fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 f924 	bl	800e34c <USB_FlushRxFifo>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d001      	beq.n	800e10e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e114:	461a      	mov	r2, r3
 800e116:	2300      	movs	r3, #0
 800e118:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e120:	461a      	mov	r2, r3
 800e122:	2300      	movs	r3, #0
 800e124:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e12c:	461a      	mov	r2, r3
 800e12e:	2300      	movs	r3, #0
 800e130:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e132:	2300      	movs	r3, #0
 800e134:	613b      	str	r3, [r7, #16]
 800e136:	e043      	b.n	800e1c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	015a      	lsls	r2, r3, #5
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	4413      	add	r3, r2
 800e140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e14a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e14e:	d118      	bne.n	800e182 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10a      	bne.n	800e16c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	015a      	lsls	r2, r3, #5
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	4413      	add	r3, r2
 800e15e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e162:	461a      	mov	r2, r3
 800e164:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e168:	6013      	str	r3, [r2, #0]
 800e16a:	e013      	b.n	800e194 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	015a      	lsls	r2, r3, #5
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	4413      	add	r3, r2
 800e174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e178:	461a      	mov	r2, r3
 800e17a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e17e:	6013      	str	r3, [r2, #0]
 800e180:	e008      	b.n	800e194 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	015a      	lsls	r2, r3, #5
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	4413      	add	r3, r2
 800e18a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e18e:	461a      	mov	r2, r3
 800e190:	2300      	movs	r3, #0
 800e192:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	015a      	lsls	r2, r3, #5
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	4413      	add	r3, r2
 800e19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	015a      	lsls	r2, r3, #5
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e1b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	613b      	str	r3, [r7, #16]
 800e1c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d3b5      	bcc.n	800e138 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	613b      	str	r3, [r7, #16]
 800e1d0:	e043      	b.n	800e25a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	015a      	lsls	r2, r3, #5
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	4413      	add	r3, r2
 800e1da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1e8:	d118      	bne.n	800e21c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10a      	bne.n	800e206 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	015a      	lsls	r2, r3, #5
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e202:	6013      	str	r3, [r2, #0]
 800e204:	e013      	b.n	800e22e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	015a      	lsls	r2, r3, #5
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	4413      	add	r3, r2
 800e20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e212:	461a      	mov	r2, r3
 800e214:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e218:	6013      	str	r3, [r2, #0]
 800e21a:	e008      	b.n	800e22e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	015a      	lsls	r2, r3, #5
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	4413      	add	r3, r2
 800e224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e228:	461a      	mov	r2, r3
 800e22a:	2300      	movs	r3, #0
 800e22c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	015a      	lsls	r2, r3, #5
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	4413      	add	r3, r2
 800e236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e23a:	461a      	mov	r2, r3
 800e23c:	2300      	movs	r3, #0
 800e23e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	015a      	lsls	r2, r3, #5
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	4413      	add	r3, r2
 800e248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e24c:	461a      	mov	r2, r3
 800e24e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e252:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	3301      	adds	r3, #1
 800e258:	613b      	str	r3, [r7, #16]
 800e25a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e25e:	461a      	mov	r2, r3
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	4293      	cmp	r3, r2
 800e264:	d3b5      	bcc.n	800e1d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e26c:	691b      	ldr	r3, [r3, #16]
 800e26e:	68fa      	ldr	r2, [r7, #12]
 800e270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e278:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e286:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e288:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d105      	bne.n	800e29c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	699b      	ldr	r3, [r3, #24]
 800e294:	f043 0210 	orr.w	r2, r3, #16
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	699a      	ldr	r2, [r3, #24]
 800e2a0:	4b10      	ldr	r3, [pc, #64]	@ (800e2e4 <USB_DevInit+0x2c4>)
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e2a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d005      	beq.n	800e2bc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	f043 0208 	orr.w	r2, r3, #8
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e2bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d107      	bne.n	800e2d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	699b      	ldr	r3, [r3, #24]
 800e2c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2cc:	f043 0304 	orr.w	r3, r3, #4
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3718      	adds	r7, #24
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2e0:	b004      	add	sp, #16
 800e2e2:	4770      	bx	lr
 800e2e4:	803c3800 	.word	0x803c3800

0800e2e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e302:	d901      	bls.n	800e308 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e304:	2303      	movs	r3, #3
 800e306:	e01b      	b.n	800e340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	691b      	ldr	r3, [r3, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	daf2      	bge.n	800e2f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e310:	2300      	movs	r3, #0
 800e312:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	019b      	lsls	r3, r3, #6
 800e318:	f043 0220 	orr.w	r2, r3, #32
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	3301      	adds	r3, #1
 800e324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e32c:	d901      	bls.n	800e332 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e32e:	2303      	movs	r3, #3
 800e330:	e006      	b.n	800e340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	f003 0320 	and.w	r3, r3, #32
 800e33a:	2b20      	cmp	r3, #32
 800e33c:	d0f0      	beq.n	800e320 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e33e:	2300      	movs	r3, #0
}
 800e340:	4618      	mov	r0, r3
 800e342:	3714      	adds	r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b085      	sub	sp, #20
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e354:	2300      	movs	r3, #0
 800e356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	3301      	adds	r3, #1
 800e35c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e364:	d901      	bls.n	800e36a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e366:	2303      	movs	r3, #3
 800e368:	e018      	b.n	800e39c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	daf2      	bge.n	800e358 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e372:	2300      	movs	r3, #0
 800e374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2210      	movs	r2, #16
 800e37a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	3301      	adds	r3, #1
 800e380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e388:	d901      	bls.n	800e38e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e38a:	2303      	movs	r3, #3
 800e38c:	e006      	b.n	800e39c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	f003 0310 	and.w	r3, r3, #16
 800e396:	2b10      	cmp	r3, #16
 800e398:	d0f0      	beq.n	800e37c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3714      	adds	r7, #20
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	78fb      	ldrb	r3, [r7, #3]
 800e3c2:	68f9      	ldr	r1, [r7, #12]
 800e3c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e3cc:	2300      	movs	r3, #0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3714      	adds	r7, #20
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr

0800e3da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e3da:	b480      	push	{r7}
 800e3dc:	b087      	sub	sp, #28
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3ec:	689b      	ldr	r3, [r3, #8]
 800e3ee:	f003 0306 	and.w	r3, r3, #6
 800e3f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d102      	bne.n	800e400 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	75fb      	strb	r3, [r7, #23]
 800e3fe:	e00a      	b.n	800e416 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2b02      	cmp	r3, #2
 800e404:	d002      	beq.n	800e40c <USB_GetDevSpeed+0x32>
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2b06      	cmp	r3, #6
 800e40a:	d102      	bne.n	800e412 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e40c:	2302      	movs	r3, #2
 800e40e:	75fb      	strb	r3, [r7, #23]
 800e410:	e001      	b.n	800e416 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e412:	230f      	movs	r3, #15
 800e414:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e416:	7dfb      	ldrb	r3, [r7, #23]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	371c      	adds	r7, #28
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	785b      	ldrb	r3, [r3, #1]
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d13a      	bne.n	800e4b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e446:	69da      	ldr	r2, [r3, #28]
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	f003 030f 	and.w	r3, r3, #15
 800e450:	2101      	movs	r1, #1
 800e452:	fa01 f303 	lsl.w	r3, r1, r3
 800e456:	b29b      	uxth	r3, r3
 800e458:	68f9      	ldr	r1, [r7, #12]
 800e45a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e45e:	4313      	orrs	r3, r2
 800e460:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	015a      	lsls	r2, r3, #5
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	4413      	add	r3, r2
 800e46a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e474:	2b00      	cmp	r3, #0
 800e476:	d155      	bne.n	800e524 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	015a      	lsls	r2, r3, #5
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	4413      	add	r3, r2
 800e480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	791b      	ldrb	r3, [r3, #4]
 800e492:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e494:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	059b      	lsls	r3, r3, #22
 800e49a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e49c:	4313      	orrs	r3, r2
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	0151      	lsls	r1, r2, #5
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	440a      	add	r2, r1
 800e4a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4b2:	6013      	str	r3, [r2, #0]
 800e4b4:	e036      	b.n	800e524 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4bc:	69da      	ldr	r2, [r3, #28]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	f003 030f 	and.w	r3, r3, #15
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e4cc:	041b      	lsls	r3, r3, #16
 800e4ce:	68f9      	ldr	r1, [r7, #12]
 800e4d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	015a      	lsls	r2, r3, #5
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	4413      	add	r3, r2
 800e4e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d11a      	bne.n	800e524 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	015a      	lsls	r2, r3, #5
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	4413      	add	r3, r2
 800e4f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	791b      	ldrb	r3, [r3, #4]
 800e508:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e50a:	430b      	orrs	r3, r1
 800e50c:	4313      	orrs	r3, r2
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	0151      	lsls	r1, r2, #5
 800e512:	68fa      	ldr	r2, [r7, #12]
 800e514:	440a      	add	r2, r1
 800e516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e51a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e51e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e522:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
	...

0800e534 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e534:	b480      	push	{r7}
 800e536:	b085      	sub	sp, #20
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	785b      	ldrb	r3, [r3, #1]
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d161      	bne.n	800e614 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	015a      	lsls	r2, r3, #5
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	4413      	add	r3, r2
 800e558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e566:	d11f      	bne.n	800e5a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	015a      	lsls	r2, r3, #5
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	4413      	add	r3, r2
 800e570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	0151      	lsls	r1, r2, #5
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	440a      	add	r2, r1
 800e57e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e582:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e586:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	015a      	lsls	r2, r3, #5
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	4413      	add	r3, r2
 800e590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	0151      	lsls	r1, r2, #5
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	440a      	add	r2, r1
 800e59e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e5a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	f003 030f 	and.w	r3, r3, #15
 800e5b8:	2101      	movs	r1, #1
 800e5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	43db      	mvns	r3, r3
 800e5c2:	68f9      	ldr	r1, [r7, #12]
 800e5c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5d2:	69da      	ldr	r2, [r3, #28]
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	f003 030f 	and.w	r3, r3, #15
 800e5dc:	2101      	movs	r1, #1
 800e5de:	fa01 f303 	lsl.w	r3, r1, r3
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	43db      	mvns	r3, r3
 800e5e6:	68f9      	ldr	r1, [r7, #12]
 800e5e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5ec:	4013      	ands	r3, r2
 800e5ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	015a      	lsls	r2, r3, #5
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	0159      	lsls	r1, r3, #5
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	440b      	add	r3, r1
 800e606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e60a:	4619      	mov	r1, r3
 800e60c:	4b35      	ldr	r3, [pc, #212]	@ (800e6e4 <USB_DeactivateEndpoint+0x1b0>)
 800e60e:	4013      	ands	r3, r2
 800e610:	600b      	str	r3, [r1, #0]
 800e612:	e060      	b.n	800e6d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	015a      	lsls	r2, r3, #5
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	4413      	add	r3, r2
 800e61c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e62a:	d11f      	bne.n	800e66c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	015a      	lsls	r2, r3, #5
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	4413      	add	r3, r2
 800e634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	68ba      	ldr	r2, [r7, #8]
 800e63c:	0151      	lsls	r1, r2, #5
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	440a      	add	r2, r1
 800e642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e646:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e64a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	015a      	lsls	r2, r3, #5
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	4413      	add	r3, r2
 800e654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	0151      	lsls	r1, r2, #5
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	440a      	add	r2, r1
 800e662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e666:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e66a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	f003 030f 	and.w	r3, r3, #15
 800e67c:	2101      	movs	r1, #1
 800e67e:	fa01 f303 	lsl.w	r3, r1, r3
 800e682:	041b      	lsls	r3, r3, #16
 800e684:	43db      	mvns	r3, r3
 800e686:	68f9      	ldr	r1, [r7, #12]
 800e688:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e68c:	4013      	ands	r3, r2
 800e68e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e696:	69da      	ldr	r2, [r3, #28]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	f003 030f 	and.w	r3, r3, #15
 800e6a0:	2101      	movs	r1, #1
 800e6a2:	fa01 f303 	lsl.w	r3, r1, r3
 800e6a6:	041b      	lsls	r3, r3, #16
 800e6a8:	43db      	mvns	r3, r3
 800e6aa:	68f9      	ldr	r1, [r7, #12]
 800e6ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6b0:	4013      	ands	r3, r2
 800e6b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	015a      	lsls	r2, r3, #5
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	0159      	lsls	r1, r3, #5
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	440b      	add	r3, r1
 800e6ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	4b05      	ldr	r3, [pc, #20]	@ (800e6e8 <USB_DeactivateEndpoint+0x1b4>)
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3714      	adds	r7, #20
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr
 800e6e4:	ec337800 	.word	0xec337800
 800e6e8:	eff37800 	.word	0xeff37800

0800e6ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b08a      	sub	sp, #40	@ 0x28
 800e6f0:	af02      	add	r7, sp, #8
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	785b      	ldrb	r3, [r3, #1]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	f040 817a 	bne.w	800ea02 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	691b      	ldr	r3, [r3, #16]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d132      	bne.n	800e77c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	015a      	lsls	r2, r3, #5
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	4413      	add	r3, r2
 800e71e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	69ba      	ldr	r2, [r7, #24]
 800e726:	0151      	lsls	r1, r2, #5
 800e728:	69fa      	ldr	r2, [r7, #28]
 800e72a:	440a      	add	r2, r1
 800e72c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e730:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e734:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	015a      	lsls	r2, r3, #5
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	4413      	add	r3, r2
 800e742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e746:	691b      	ldr	r3, [r3, #16]
 800e748:	69ba      	ldr	r2, [r7, #24]
 800e74a:	0151      	lsls	r1, r2, #5
 800e74c:	69fa      	ldr	r2, [r7, #28]
 800e74e:	440a      	add	r2, r1
 800e750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e754:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	015a      	lsls	r2, r3, #5
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	4413      	add	r3, r2
 800e762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e766:	691b      	ldr	r3, [r3, #16]
 800e768:	69ba      	ldr	r2, [r7, #24]
 800e76a:	0151      	lsls	r1, r2, #5
 800e76c:	69fa      	ldr	r2, [r7, #28]
 800e76e:	440a      	add	r2, r1
 800e770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e774:	0cdb      	lsrs	r3, r3, #19
 800e776:	04db      	lsls	r3, r3, #19
 800e778:	6113      	str	r3, [r2, #16]
 800e77a:	e092      	b.n	800e8a2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	015a      	lsls	r2, r3, #5
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	4413      	add	r3, r2
 800e784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	69ba      	ldr	r2, [r7, #24]
 800e78c:	0151      	lsls	r1, r2, #5
 800e78e:	69fa      	ldr	r2, [r7, #28]
 800e790:	440a      	add	r2, r1
 800e792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e796:	0cdb      	lsrs	r3, r3, #19
 800e798:	04db      	lsls	r3, r3, #19
 800e79a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	015a      	lsls	r2, r3, #5
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	4413      	add	r3, r2
 800e7a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7a8:	691b      	ldr	r3, [r3, #16]
 800e7aa:	69ba      	ldr	r2, [r7, #24]
 800e7ac:	0151      	lsls	r1, r2, #5
 800e7ae:	69fa      	ldr	r2, [r7, #28]
 800e7b0:	440a      	add	r2, r1
 800e7b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e7ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e7be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d11a      	bne.n	800e7fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	691a      	ldr	r2, [r3, #16]
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	689b      	ldr	r3, [r3, #8]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d903      	bls.n	800e7da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	689a      	ldr	r2, [r3, #8]
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	015a      	lsls	r2, r3, #5
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7e6:	691b      	ldr	r3, [r3, #16]
 800e7e8:	69ba      	ldr	r2, [r7, #24]
 800e7ea:	0151      	lsls	r1, r2, #5
 800e7ec:	69fa      	ldr	r2, [r7, #28]
 800e7ee:	440a      	add	r2, r1
 800e7f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e7f8:	6113      	str	r3, [r2, #16]
 800e7fa:	e01b      	b.n	800e834 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	015a      	lsls	r2, r3, #5
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	4413      	add	r3, r2
 800e804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e808:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	6919      	ldr	r1, [r3, #16]
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	440b      	add	r3, r1
 800e814:	1e59      	subs	r1, r3, #1
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e81e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e820:	4ba2      	ldr	r3, [pc, #648]	@ (800eaac <USB_EPStartXfer+0x3c0>)
 800e822:	400b      	ands	r3, r1
 800e824:	69b9      	ldr	r1, [r7, #24]
 800e826:	0148      	lsls	r0, r1, #5
 800e828:	69f9      	ldr	r1, [r7, #28]
 800e82a:	4401      	add	r1, r0
 800e82c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e830:	4313      	orrs	r3, r2
 800e832:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	015a      	lsls	r2, r3, #5
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	4413      	add	r3, r2
 800e83c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e840:	691a      	ldr	r2, [r3, #16]
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e84a:	69b9      	ldr	r1, [r7, #24]
 800e84c:	0148      	lsls	r0, r1, #5
 800e84e:	69f9      	ldr	r1, [r7, #28]
 800e850:	4401      	add	r1, r0
 800e852:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e856:	4313      	orrs	r3, r2
 800e858:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	791b      	ldrb	r3, [r3, #4]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d11f      	bne.n	800e8a2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	015a      	lsls	r2, r3, #5
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	4413      	add	r3, r2
 800e86a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e86e:	691b      	ldr	r3, [r3, #16]
 800e870:	69ba      	ldr	r2, [r7, #24]
 800e872:	0151      	lsls	r1, r2, #5
 800e874:	69fa      	ldr	r2, [r7, #28]
 800e876:	440a      	add	r2, r1
 800e878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e87c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e880:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	015a      	lsls	r2, r3, #5
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	4413      	add	r3, r2
 800e88a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	69ba      	ldr	r2, [r7, #24]
 800e892:	0151      	lsls	r1, r2, #5
 800e894:	69fa      	ldr	r2, [r7, #28]
 800e896:	440a      	add	r2, r1
 800e898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e89c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e8a2:	79fb      	ldrb	r3, [r7, #7]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d14b      	bne.n	800e940 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	69db      	ldr	r3, [r3, #28]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d009      	beq.n	800e8c4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	015a      	lsls	r2, r3, #5
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8bc:	461a      	mov	r2, r3
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	69db      	ldr	r3, [r3, #28]
 800e8c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	791b      	ldrb	r3, [r3, #4]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d128      	bne.n	800e91e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d110      	bne.n	800e8fe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	015a      	lsls	r2, r3, #5
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	69ba      	ldr	r2, [r7, #24]
 800e8ec:	0151      	lsls	r1, r2, #5
 800e8ee:	69fa      	ldr	r2, [r7, #28]
 800e8f0:	440a      	add	r2, r1
 800e8f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	e00f      	b.n	800e91e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	015a      	lsls	r2, r3, #5
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	4413      	add	r3, r2
 800e906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	69ba      	ldr	r2, [r7, #24]
 800e90e:	0151      	lsls	r1, r2, #5
 800e910:	69fa      	ldr	r2, [r7, #28]
 800e912:	440a      	add	r2, r1
 800e914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e91c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	015a      	lsls	r2, r3, #5
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	4413      	add	r3, r2
 800e926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	69ba      	ldr	r2, [r7, #24]
 800e92e:	0151      	lsls	r1, r2, #5
 800e930:	69fa      	ldr	r2, [r7, #28]
 800e932:	440a      	add	r2, r1
 800e934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e938:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e93c:	6013      	str	r3, [r2, #0]
 800e93e:	e165      	b.n	800ec0c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	015a      	lsls	r2, r3, #5
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	4413      	add	r3, r2
 800e948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	69ba      	ldr	r2, [r7, #24]
 800e950:	0151      	lsls	r1, r2, #5
 800e952:	69fa      	ldr	r2, [r7, #28]
 800e954:	440a      	add	r2, r1
 800e956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e95a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e95e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	791b      	ldrb	r3, [r3, #4]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d015      	beq.n	800e994 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	691b      	ldr	r3, [r3, #16]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f000 814d 	beq.w	800ec0c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	f003 030f 	and.w	r3, r3, #15
 800e982:	2101      	movs	r1, #1
 800e984:	fa01 f303 	lsl.w	r3, r1, r3
 800e988:	69f9      	ldr	r1, [r7, #28]
 800e98a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e98e:	4313      	orrs	r3, r2
 800e990:	634b      	str	r3, [r1, #52]	@ 0x34
 800e992:	e13b      	b.n	800ec0c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d110      	bne.n	800e9c6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	015a      	lsls	r2, r3, #5
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	69ba      	ldr	r2, [r7, #24]
 800e9b4:	0151      	lsls	r1, r2, #5
 800e9b6:	69fa      	ldr	r2, [r7, #28]
 800e9b8:	440a      	add	r2, r1
 800e9ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e9c2:	6013      	str	r3, [r2, #0]
 800e9c4:	e00f      	b.n	800e9e6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	015a      	lsls	r2, r3, #5
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	69ba      	ldr	r2, [r7, #24]
 800e9d6:	0151      	lsls	r1, r2, #5
 800e9d8:	69fa      	ldr	r2, [r7, #28]
 800e9da:	440a      	add	r2, r1
 800e9dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	68d9      	ldr	r1, [r3, #12]
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	781a      	ldrb	r2, [r3, #0]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	691b      	ldr	r3, [r3, #16]
 800e9f2:	b298      	uxth	r0, r3
 800e9f4:	79fb      	ldrb	r3, [r7, #7]
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f000 f9b8 	bl	800ed70 <USB_WritePacket>
 800ea00:	e104      	b.n	800ec0c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	015a      	lsls	r2, r3, #5
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	4413      	add	r3, r2
 800ea0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	69ba      	ldr	r2, [r7, #24]
 800ea12:	0151      	lsls	r1, r2, #5
 800ea14:	69fa      	ldr	r2, [r7, #28]
 800ea16:	440a      	add	r2, r1
 800ea18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea1c:	0cdb      	lsrs	r3, r3, #19
 800ea1e:	04db      	lsls	r3, r3, #19
 800ea20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	015a      	lsls	r2, r3, #5
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	4413      	add	r3, r2
 800ea2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea2e:	691b      	ldr	r3, [r3, #16]
 800ea30:	69ba      	ldr	r2, [r7, #24]
 800ea32:	0151      	lsls	r1, r2, #5
 800ea34:	69fa      	ldr	r2, [r7, #28]
 800ea36:	440a      	add	r2, r1
 800ea38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea3c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ea40:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ea44:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d131      	bne.n	800eab0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	691b      	ldr	r3, [r3, #16]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d003      	beq.n	800ea5c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	689a      	ldr	r2, [r3, #8]
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	689a      	ldr	r2, [r3, #8]
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	015a      	lsls	r2, r3, #5
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea70:	691a      	ldr	r2, [r3, #16]
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	6a1b      	ldr	r3, [r3, #32]
 800ea76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea7a:	69b9      	ldr	r1, [r7, #24]
 800ea7c:	0148      	lsls	r0, r1, #5
 800ea7e:	69f9      	ldr	r1, [r7, #28]
 800ea80:	4401      	add	r1, r0
 800ea82:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea86:	4313      	orrs	r3, r2
 800ea88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	015a      	lsls	r2, r3, #5
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	4413      	add	r3, r2
 800ea92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea96:	691b      	ldr	r3, [r3, #16]
 800ea98:	69ba      	ldr	r2, [r7, #24]
 800ea9a:	0151      	lsls	r1, r2, #5
 800ea9c:	69fa      	ldr	r2, [r7, #28]
 800ea9e:	440a      	add	r2, r1
 800eaa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eaa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eaa8:	6113      	str	r3, [r2, #16]
 800eaaa:	e061      	b.n	800eb70 <USB_EPStartXfer+0x484>
 800eaac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	691b      	ldr	r3, [r3, #16]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d123      	bne.n	800eb00 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	015a      	lsls	r2, r3, #5
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	4413      	add	r3, r2
 800eac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eac4:	691a      	ldr	r2, [r3, #16]
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eace:	69b9      	ldr	r1, [r7, #24]
 800ead0:	0148      	lsls	r0, r1, #5
 800ead2:	69f9      	ldr	r1, [r7, #28]
 800ead4:	4401      	add	r1, r0
 800ead6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eada:	4313      	orrs	r3, r2
 800eadc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eade:	69bb      	ldr	r3, [r7, #24]
 800eae0:	015a      	lsls	r2, r3, #5
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	4413      	add	r3, r2
 800eae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	69ba      	ldr	r2, [r7, #24]
 800eaee:	0151      	lsls	r1, r2, #5
 800eaf0:	69fa      	ldr	r2, [r7, #28]
 800eaf2:	440a      	add	r2, r1
 800eaf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eaf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eafc:	6113      	str	r3, [r2, #16]
 800eafe:	e037      	b.n	800eb70 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	691a      	ldr	r2, [r3, #16]
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	4413      	add	r3, r2
 800eb0a:	1e5a      	subs	r2, r3, #1
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb14:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	8afa      	ldrh	r2, [r7, #22]
 800eb1c:	fb03 f202 	mul.w	r2, r3, r2
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	015a      	lsls	r2, r3, #5
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb30:	691a      	ldr	r2, [r3, #16]
 800eb32:	8afb      	ldrh	r3, [r7, #22]
 800eb34:	04d9      	lsls	r1, r3, #19
 800eb36:	4b38      	ldr	r3, [pc, #224]	@ (800ec18 <USB_EPStartXfer+0x52c>)
 800eb38:	400b      	ands	r3, r1
 800eb3a:	69b9      	ldr	r1, [r7, #24]
 800eb3c:	0148      	lsls	r0, r1, #5
 800eb3e:	69f9      	ldr	r1, [r7, #28]
 800eb40:	4401      	add	r1, r0
 800eb42:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb46:	4313      	orrs	r3, r2
 800eb48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	015a      	lsls	r2, r3, #5
 800eb4e:	69fb      	ldr	r3, [r7, #28]
 800eb50:	4413      	add	r3, r2
 800eb52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb56:	691a      	ldr	r2, [r3, #16]
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	6a1b      	ldr	r3, [r3, #32]
 800eb5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb60:	69b9      	ldr	r1, [r7, #24]
 800eb62:	0148      	lsls	r0, r1, #5
 800eb64:	69f9      	ldr	r1, [r7, #28]
 800eb66:	4401      	add	r1, r0
 800eb68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800eb70:	79fb      	ldrb	r3, [r7, #7]
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d10d      	bne.n	800eb92 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d009      	beq.n	800eb92 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	68d9      	ldr	r1, [r3, #12]
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	015a      	lsls	r2, r3, #5
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	4413      	add	r3, r2
 800eb8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb8e:	460a      	mov	r2, r1
 800eb90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	791b      	ldrb	r3, [r3, #4]
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d128      	bne.n	800ebec <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d110      	bne.n	800ebcc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ebaa:	69bb      	ldr	r3, [r7, #24]
 800ebac:	015a      	lsls	r2, r3, #5
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	69ba      	ldr	r2, [r7, #24]
 800ebba:	0151      	lsls	r1, r2, #5
 800ebbc:	69fa      	ldr	r2, [r7, #28]
 800ebbe:	440a      	add	r2, r1
 800ebc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebc4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ebc8:	6013      	str	r3, [r2, #0]
 800ebca:	e00f      	b.n	800ebec <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	015a      	lsls	r2, r3, #5
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	4413      	add	r3, r2
 800ebd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	69ba      	ldr	r2, [r7, #24]
 800ebdc:	0151      	lsls	r1, r2, #5
 800ebde:	69fa      	ldr	r2, [r7, #28]
 800ebe0:	440a      	add	r2, r1
 800ebe2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ebea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	015a      	lsls	r2, r3, #5
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	69ba      	ldr	r2, [r7, #24]
 800ebfc:	0151      	lsls	r1, r2, #5
 800ebfe:	69fa      	ldr	r2, [r7, #28]
 800ec00:	440a      	add	r2, r1
 800ec02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec06:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ec0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec0c:	2300      	movs	r3, #0
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3720      	adds	r7, #32
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	1ff80000 	.word	0x1ff80000

0800ec1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b087      	sub	sp, #28
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ec26:	2300      	movs	r3, #0
 800ec28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	785b      	ldrb	r3, [r3, #1]
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d14a      	bne.n	800ecd0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	015a      	lsls	r2, r3, #5
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	4413      	add	r3, r2
 800ec44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec52:	f040 8086 	bne.w	800ed62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	015a      	lsls	r2, r3, #5
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	4413      	add	r3, r2
 800ec60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	683a      	ldr	r2, [r7, #0]
 800ec68:	7812      	ldrb	r2, [r2, #0]
 800ec6a:	0151      	lsls	r1, r2, #5
 800ec6c:	693a      	ldr	r2, [r7, #16]
 800ec6e:	440a      	add	r2, r1
 800ec70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	015a      	lsls	r2, r3, #5
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	4413      	add	r3, r2
 800ec84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	683a      	ldr	r2, [r7, #0]
 800ec8c:	7812      	ldrb	r2, [r2, #0]
 800ec8e:	0151      	lsls	r1, r2, #5
 800ec90:	693a      	ldr	r2, [r7, #16]
 800ec92:	440a      	add	r2, r1
 800ec94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	3301      	adds	r3, #1
 800eca2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d902      	bls.n	800ecb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	75fb      	strb	r3, [r7, #23]
          break;
 800ecb2:	e056      	b.n	800ed62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	015a      	lsls	r2, r3, #5
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ecc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eccc:	d0e7      	beq.n	800ec9e <USB_EPStopXfer+0x82>
 800ecce:	e048      	b.n	800ed62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	015a      	lsls	r2, r3, #5
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	4413      	add	r3, r2
 800ecda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ece4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ece8:	d13b      	bne.n	800ed62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	015a      	lsls	r2, r3, #5
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	7812      	ldrb	r2, [r2, #0]
 800ecfe:	0151      	lsls	r1, r2, #5
 800ed00:	693a      	ldr	r2, [r7, #16]
 800ed02:	440a      	add	r2, r1
 800ed04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ed0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	015a      	lsls	r2, r3, #5
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	4413      	add	r3, r2
 800ed18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	7812      	ldrb	r2, [r2, #0]
 800ed22:	0151      	lsls	r1, r2, #5
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	440a      	add	r2, r1
 800ed28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	3301      	adds	r3, #1
 800ed36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d902      	bls.n	800ed48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	75fb      	strb	r3, [r7, #23]
          break;
 800ed46:	e00c      	b.n	800ed62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	015a      	lsls	r2, r3, #5
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	4413      	add	r3, r2
 800ed52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed60:	d0e7      	beq.n	800ed32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ed62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	371c      	adds	r7, #28
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr

0800ed70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b089      	sub	sp, #36	@ 0x24
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	4611      	mov	r1, r2
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	460b      	mov	r3, r1
 800ed80:	71fb      	strb	r3, [r7, #7]
 800ed82:	4613      	mov	r3, r2
 800ed84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ed8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d123      	bne.n	800edde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ed96:	88bb      	ldrh	r3, [r7, #4]
 800ed98:	3303      	adds	r3, #3
 800ed9a:	089b      	lsrs	r3, r3, #2
 800ed9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ed9e:	2300      	movs	r3, #0
 800eda0:	61bb      	str	r3, [r7, #24]
 800eda2:	e018      	b.n	800edd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	031a      	lsls	r2, r3, #12
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	4413      	add	r3, r2
 800edac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800edb0:	461a      	mov	r2, r3
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	3301      	adds	r3, #1
 800edbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	3301      	adds	r3, #1
 800edc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	3301      	adds	r3, #1
 800edc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	3301      	adds	r3, #1
 800edce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	3301      	adds	r3, #1
 800edd4:	61bb      	str	r3, [r7, #24]
 800edd6:	69ba      	ldr	r2, [r7, #24]
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	429a      	cmp	r2, r3
 800eddc:	d3e2      	bcc.n	800eda4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800edde:	2300      	movs	r3, #0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3724      	adds	r7, #36	@ 0x24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800edec:	b480      	push	{r7}
 800edee:	b08b      	sub	sp, #44	@ 0x2c
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	4613      	mov	r3, r2
 800edf8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ee02:	88fb      	ldrh	r3, [r7, #6]
 800ee04:	089b      	lsrs	r3, r3, #2
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ee0a:	88fb      	ldrh	r3, [r7, #6]
 800ee0c:	f003 0303 	and.w	r3, r3, #3
 800ee10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ee12:	2300      	movs	r3, #0
 800ee14:	623b      	str	r3, [r7, #32]
 800ee16:	e014      	b.n	800ee42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee22:	601a      	str	r2, [r3, #0]
    pDest++;
 800ee24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee26:	3301      	adds	r3, #1
 800ee28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee32:	3301      	adds	r3, #1
 800ee34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee38:	3301      	adds	r3, #1
 800ee3a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	623b      	str	r3, [r7, #32]
 800ee42:	6a3a      	ldr	r2, [r7, #32]
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d3e6      	bcc.n	800ee18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ee4a:	8bfb      	ldrh	r3, [r7, #30]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d01e      	beq.n	800ee8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ee50:	2300      	movs	r3, #0
 800ee52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	f107 0310 	add.w	r3, r7, #16
 800ee60:	6812      	ldr	r2, [r2, #0]
 800ee62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ee64:	693a      	ldr	r2, [r7, #16]
 800ee66:	6a3b      	ldr	r3, [r7, #32]
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	00db      	lsls	r3, r3, #3
 800ee6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ee70:	b2da      	uxtb	r2, r3
 800ee72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee74:	701a      	strb	r2, [r3, #0]
      i++;
 800ee76:	6a3b      	ldr	r3, [r7, #32]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ee7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee7e:	3301      	adds	r3, #1
 800ee80:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ee82:	8bfb      	ldrh	r3, [r7, #30]
 800ee84:	3b01      	subs	r3, #1
 800ee86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ee88:	8bfb      	ldrh	r3, [r7, #30]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d1ea      	bne.n	800ee64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ee8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	372c      	adds	r7, #44	@ 0x2c
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b085      	sub	sp, #20
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	785b      	ldrb	r3, [r3, #1]
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d12c      	bne.n	800ef12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	015a      	lsls	r2, r3, #5
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	4413      	add	r3, r2
 800eec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	db12      	blt.n	800eef0 <USB_EPSetStall+0x54>
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00f      	beq.n	800eef0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	015a      	lsls	r2, r3, #5
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	4413      	add	r3, r2
 800eed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	0151      	lsls	r1, r2, #5
 800eee2:	68fa      	ldr	r2, [r7, #12]
 800eee4:	440a      	add	r2, r1
 800eee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eeea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eeee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	015a      	lsls	r2, r3, #5
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	4413      	add	r3, r2
 800eef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	68ba      	ldr	r2, [r7, #8]
 800ef00:	0151      	lsls	r1, r2, #5
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	440a      	add	r2, r1
 800ef06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef0e:	6013      	str	r3, [r2, #0]
 800ef10:	e02b      	b.n	800ef6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	015a      	lsls	r2, r3, #5
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	4413      	add	r3, r2
 800ef1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	db12      	blt.n	800ef4a <USB_EPSetStall+0xae>
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00f      	beq.n	800ef4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	015a      	lsls	r2, r3, #5
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	4413      	add	r3, r2
 800ef32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68ba      	ldr	r2, [r7, #8]
 800ef3a:	0151      	lsls	r1, r2, #5
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	440a      	add	r2, r1
 800ef40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	015a      	lsls	r2, r3, #5
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	4413      	add	r3, r2
 800ef52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	68ba      	ldr	r2, [r7, #8]
 800ef5a:	0151      	lsls	r1, r2, #5
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	440a      	add	r2, r1
 800ef60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef6a:	2300      	movs	r3, #0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3714      	adds	r7, #20
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	785b      	ldrb	r3, [r3, #1]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d128      	bne.n	800efe6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	015a      	lsls	r2, r3, #5
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	68ba      	ldr	r2, [r7, #8]
 800efa4:	0151      	lsls	r1, r2, #5
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	440a      	add	r2, r1
 800efaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800efb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	791b      	ldrb	r3, [r3, #4]
 800efb8:	2b03      	cmp	r3, #3
 800efba:	d003      	beq.n	800efc4 <USB_EPClearStall+0x4c>
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	791b      	ldrb	r3, [r3, #4]
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d138      	bne.n	800f036 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	015a      	lsls	r2, r3, #5
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	4413      	add	r3, r2
 800efcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	0151      	lsls	r1, r2, #5
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	440a      	add	r2, r1
 800efda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efe2:	6013      	str	r3, [r2, #0]
 800efe4:	e027      	b.n	800f036 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	015a      	lsls	r2, r3, #5
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	4413      	add	r3, r2
 800efee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	68ba      	ldr	r2, [r7, #8]
 800eff6:	0151      	lsls	r1, r2, #5
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	440a      	add	r2, r1
 800effc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f000:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f004:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	791b      	ldrb	r3, [r3, #4]
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d003      	beq.n	800f016 <USB_EPClearStall+0x9e>
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	791b      	ldrb	r3, [r3, #4]
 800f012:	2b02      	cmp	r3, #2
 800f014:	d10f      	bne.n	800f036 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	015a      	lsls	r2, r3, #5
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	4413      	add	r3, r2
 800f01e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	68ba      	ldr	r2, [r7, #8]
 800f026:	0151      	lsls	r1, r2, #5
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	440a      	add	r2, r1
 800f02c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f034:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f036:	2300      	movs	r3, #0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3714      	adds	r7, #20
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b086      	sub	sp, #24
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800f050:	2300      	movs	r3, #0
 800f052:	617b      	str	r3, [r7, #20]
 800f054:	e016      	b.n	800f084 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	015a      	lsls	r2, r3, #5
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	4413      	add	r3, r2
 800f05e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f062:	461a      	mov	r2, r3
 800f064:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f068:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	015a      	lsls	r2, r3, #5
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	4413      	add	r3, r2
 800f072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f076:	461a      	mov	r2, r3
 800f078:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f07c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	3301      	adds	r3, #1
 800f082:	617b      	str	r3, [r7, #20]
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	2b0e      	cmp	r3, #14
 800f088:	d9e5      	bls.n	800f056 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f090:	461a      	mov	r2, r3
 800f092:	2300      	movs	r3, #0
 800f094:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f09c:	461a      	mov	r2, r3
 800f09e:	2300      	movs	r3, #0
 800f0a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7ff f94c 	bl	800e34c <USB_FlushRxFifo>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d001      	beq.n	800f0c2 <USB_StopDevice+0x7e>
  {
    return ret;
 800f0be:	7bfb      	ldrb	r3, [r7, #15]
 800f0c0:	e00b      	b.n	800f0da <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800f0c2:	2110      	movs	r1, #16
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f7ff f90f 	bl	800e2e8 <USB_FlushTxFifo>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f0ce:	7bfb      	ldrb	r3, [r7, #15]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d001      	beq.n	800f0d8 <USB_StopDevice+0x94>
  {
    return ret;
 800f0d4:	7bfb      	ldrb	r3, [r7, #15]
 800f0d6:	e000      	b.n	800f0da <USB_StopDevice+0x96>
  }

  return ret;
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3718      	adds	r7, #24
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f0e2:	b480      	push	{r7}
 800f0e4:	b085      	sub	sp, #20
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	68fa      	ldr	r2, [r7, #12]
 800f0fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f100:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f104:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	78fb      	ldrb	r3, [r7, #3]
 800f110:	011b      	lsls	r3, r3, #4
 800f112:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f116:	68f9      	ldr	r1, [r7, #12]
 800f118:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f11c:	4313      	orrs	r3, r2
 800f11e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	3714      	adds	r7, #20
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr

0800f12e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f12e:	b480      	push	{r7}
 800f130:	b085      	sub	sp, #20
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f148:	f023 0303 	bic.w	r3, r3, #3
 800f14c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f15c:	f023 0302 	bic.w	r3, r3, #2
 800f160:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f18a:	f023 0303 	bic.w	r3, r3, #3
 800f18e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f19e:	f043 0302 	orr.w	r3, r3, #2
 800f1a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3714      	adds	r7, #20
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f1b2:	b480      	push	{r7}
 800f1b4:	b085      	sub	sp, #20
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	695b      	ldr	r3, [r3, #20]
 800f1be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	699b      	ldr	r3, [r3, #24]
 800f1c4:	68fa      	ldr	r2, [r7, #12]
 800f1c6:	4013      	ands	r3, r2
 800f1c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3714      	adds	r7, #20
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1ea:	699b      	ldr	r3, [r3, #24]
 800f1ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1f4:	69db      	ldr	r3, [r3, #28]
 800f1f6:	68ba      	ldr	r2, [r7, #8]
 800f1f8:	4013      	ands	r3, r2
 800f1fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	0c1b      	lsrs	r3, r3, #16
}
 800f200:	4618      	mov	r0, r3
 800f202:	3714      	adds	r7, #20
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr

0800f20c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b085      	sub	sp, #20
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f21e:	699b      	ldr	r3, [r3, #24]
 800f220:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f228:	69db      	ldr	r3, [r3, #28]
 800f22a:	68ba      	ldr	r2, [r7, #8]
 800f22c:	4013      	ands	r3, r2
 800f22e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	b29b      	uxth	r3, r3
}
 800f234:	4618      	mov	r0, r3
 800f236:	3714      	adds	r7, #20
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f240:	b480      	push	{r7}
 800f242:	b085      	sub	sp, #20
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	460b      	mov	r3, r1
 800f24a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f250:	78fb      	ldrb	r3, [r7, #3]
 800f252:	015a      	lsls	r2, r3, #5
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	4413      	add	r3, r2
 800f258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f266:	695b      	ldr	r3, [r3, #20]
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	4013      	ands	r3, r2
 800f26c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f26e:	68bb      	ldr	r3, [r7, #8]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3714      	adds	r7, #20
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b087      	sub	sp, #28
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f29c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f29e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2a0:	78fb      	ldrb	r3, [r7, #3]
 800f2a2:	f003 030f 	and.w	r3, r3, #15
 800f2a6:	68fa      	ldr	r2, [r7, #12]
 800f2a8:	fa22 f303 	lsr.w	r3, r2, r3
 800f2ac:	01db      	lsls	r3, r3, #7
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	693a      	ldr	r2, [r7, #16]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2b6:	78fb      	ldrb	r3, [r7, #3]
 800f2b8:	015a      	lsls	r2, r3, #5
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	4413      	add	r3, r2
 800f2be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	693a      	ldr	r2, [r7, #16]
 800f2c6:	4013      	ands	r3, r2
 800f2c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2ca:	68bb      	ldr	r3, [r7, #8]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	371c      	adds	r7, #28
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	695b      	ldr	r3, [r3, #20]
 800f2e4:	f003 0301 	and.w	r3, r3, #1
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	370c      	adds	r7, #12
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	68fa      	ldr	r2, [r7, #12]
 800f30a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f30e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f312:	f023 0307 	bic.w	r3, r3, #7
 800f316:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f32a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f32c:	2300      	movs	r3, #0
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3714      	adds	r7, #20
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
	...

0800f33c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b087      	sub	sp, #28
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	460b      	mov	r3, r1
 800f346:	607a      	str	r2, [r7, #4]
 800f348:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	333c      	adds	r3, #60	@ 0x3c
 800f352:	3304      	adds	r3, #4
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	4a26      	ldr	r2, [pc, #152]	@ (800f3f4 <USB_EP0_OutStart+0xb8>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d90a      	bls.n	800f376 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f36c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f370:	d101      	bne.n	800f376 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f372:	2300      	movs	r3, #0
 800f374:	e037      	b.n	800f3e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f37c:	461a      	mov	r2, r3
 800f37e:	2300      	movs	r3, #0
 800f380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f388:	691b      	ldr	r3, [r3, #16]
 800f38a:	697a      	ldr	r2, [r7, #20]
 800f38c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f390:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f394:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f39c:	691b      	ldr	r3, [r3, #16]
 800f39e:	697a      	ldr	r2, [r7, #20]
 800f3a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3a4:	f043 0318 	orr.w	r3, r3, #24
 800f3a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3b0:	691b      	ldr	r3, [r3, #16]
 800f3b2:	697a      	ldr	r2, [r7, #20]
 800f3b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f3bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f3be:	7afb      	ldrb	r3, [r7, #11]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d10f      	bne.n	800f3e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	697a      	ldr	r2, [r7, #20]
 800f3da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3de:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f3e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f3e4:	2300      	movs	r3, #0
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	371c      	adds	r7, #28
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	4f54300a 	.word	0x4f54300a

0800f3f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f400:	2300      	movs	r3, #0
 800f402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	3301      	adds	r3, #1
 800f408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f410:	d901      	bls.n	800f416 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f412:	2303      	movs	r3, #3
 800f414:	e01b      	b.n	800f44e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	691b      	ldr	r3, [r3, #16]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	daf2      	bge.n	800f404 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f41e:	2300      	movs	r3, #0
 800f420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	691b      	ldr	r3, [r3, #16]
 800f426:	f043 0201 	orr.w	r2, r3, #1
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	3301      	adds	r3, #1
 800f432:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f43a:	d901      	bls.n	800f440 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f43c:	2303      	movs	r3, #3
 800f43e:	e006      	b.n	800f44e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	691b      	ldr	r3, [r3, #16]
 800f444:	f003 0301 	and.w	r3, r3, #1
 800f448:	2b01      	cmp	r3, #1
 800f44a:	d0f0      	beq.n	800f42e <USB_CoreReset+0x36>

  return HAL_OK;
 800f44c:	2300      	movs	r3, #0
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3714      	adds	r7, #20
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
	...

0800f45c <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time = 0;
uint8_t invoke_date = 0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4a13      	ldr	r2, [pc, #76]	@ (800f4b4 <HAL_UART_RxCpltCallback+0x58>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d11f      	bne.n	800f4ac <HAL_UART_RxCpltCallback+0x50>
 800f46c:	4b12      	ldr	r3, [pc, #72]	@ (800f4b8 <HAL_UART_RxCpltCallback+0x5c>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d01b      	beq.n	800f4ac <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800f474:	2201      	movs	r2, #1
 800f476:	4911      	ldr	r1, [pc, #68]	@ (800f4bc <HAL_UART_RxCpltCallback+0x60>)
 800f478:	480e      	ldr	r0, [pc, #56]	@ (800f4b4 <HAL_UART_RxCpltCallback+0x58>)
 800f47a:	f7fc ff68 	bl	800c34e <HAL_UART_Receive_IT>
		UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800f47e:	4b10      	ldr	r3, [pc, #64]	@ (800f4c0 <HAL_UART_RxCpltCallback+0x64>)
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d10a      	bne.n	800f49c <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800f486:	4b0d      	ldr	r3, [pc, #52]	@ (800f4bc <HAL_UART_RxCpltCallback+0x60>)
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800f48c:	4b0d      	ldr	r3, [pc, #52]	@ (800f4c4 <HAL_UART_RxCpltCallback+0x68>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	7bfa      	ldrb	r2, [r7, #15]
 800f492:	4611      	mov	r1, r2
 800f494:	4618      	mov	r0, r3
 800f496:	f003 f80f 	bl	80124b8 <embeddedCliReceiveChar>
 800f49a:	e002      	b.n	800f4a2 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800f49c:	4b0a      	ldr	r3, [pc, #40]	@ (800f4c8 <HAL_UART_RxCpltCallback+0x6c>)
 800f49e:	2201      	movs	r2, #1
 800f4a0:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800f4a2:	f7f4 fe29 	bl	80040f8 <HAL_GetTick>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	4a08      	ldr	r2, [pc, #32]	@ (800f4cc <HAL_UART_RxCpltCallback+0x70>)
 800f4aa:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800f4ac:	bf00      	nop
 800f4ae:	3710      	adds	r7, #16
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	20001a74 	.word	0x20001a74
 800f4b8:	20001b39 	.word	0x20001b39
 800f4bc:	20001b38 	.word	0x20001b38
 800f4c0:	20001b3a 	.word	0x20001b3a
 800f4c4:	20001b2c 	.word	0x20001b2c
 800f4c8:	20001b3b 	.word	0x20001b3b
 800f4cc:	200017c0 	.word	0x200017c0

0800f4d0 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	460b      	mov	r3, r1
 800f4da:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800f4dc:	78fb      	ldrb	r3, [r7, #3]
 800f4de:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800f4e0:	f107 010f 	add.w	r1, r7, #15
 800f4e4:	2364      	movs	r3, #100	@ 0x64
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	4803      	ldr	r0, [pc, #12]	@ (800f4f8 <writeCharToCli+0x28>)
 800f4ea:	f7fc fea5 	bl	800c238 <HAL_UART_Transmit>
}
 800f4ee:	bf00      	nop
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20001a74 	.word	0x20001a74

0800f4fc <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800f4fc:	b40e      	push	{r1, r2, r3}
 800f4fe:	b580      	push	{r7, lr}
 800f500:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800f504:	af00      	add	r7, sp, #0
 800f506:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f50a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f50e:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800f510:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800f514:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f518:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f51c:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800f51e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f522:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f526:	f107 000c 	add.w	r0, r7, #12
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 800f530:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f534:	f00f fad2 	bl	801eadc <vsniprintf>
 800f538:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800f53c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f540:	2b00      	cmp	r3, #0
 800f542:	da08      	bge.n	800f556 <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800f544:	4b0c      	ldr	r3, [pc, #48]	@ (800f578 <cli_printf+0x7c>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	221d      	movs	r2, #29
 800f54c:	2101      	movs	r1, #1
 800f54e:	480b      	ldr	r0, [pc, #44]	@ (800f57c <cli_printf+0x80>)
 800f550:	f00f f9b8 	bl	801e8c4 <fwrite>
 800f554:	e009      	b.n	800f56a <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800f556:	f107 020c 	add.w	r2, r7, #12
 800f55a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f55e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f562:	4611      	mov	r1, r2
 800f564:	6818      	ldr	r0, [r3, #0]
 800f566:	f003 f88d 	bl	8012684 <embeddedCliPrint>
}
 800f56a:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 800f56e:	46bd      	mov	sp, r7
 800f570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f574:	b003      	add	sp, #12
 800f576:	4770      	bx	lr
 800f578:	20000148 	.word	0x20000148
 800f57c:	080222e4 	.word	0x080222e4

0800f580 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800f580:	b580      	push	{r7, lr}
 800f582:	b088      	sub	sp, #32
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800f58c:	2300      	movs	r3, #0
 800f58e:	61fb      	str	r3, [r7, #28]
	int i, j;
	prev_max_wait_time = HAL_GetTick();
 800f590:	f7f4 fdb2 	bl	80040f8 <HAL_GetTick>
 800f594:	4603      	mov	r3, r0
 800f596:	4a5f      	ldr	r2, [pc, #380]	@ (800f714 <receiveString+0x194>)
 800f598:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800f59a:	4b5f      	ldr	r3, [pc, #380]	@ (800f718 <receiveString+0x198>)
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	f000 80a0 	beq.w	800f6e4 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800f5a4:	4b5d      	ldr	r3, [pc, #372]	@ (800f71c <receiveString+0x19c>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	2b0d      	cmp	r3, #13
 800f5aa:	d004      	beq.n	800f5b6 <receiveString+0x36>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	3b01      	subs	r3, #1
 800f5b0:	69fa      	ldr	r2, [r7, #28]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d164      	bne.n	800f680 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	4413      	add	r3, r2
 800f5bc:	2200      	movs	r2, #0
 800f5be:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800f5c0:	4b55      	ldr	r3, [pc, #340]	@ (800f718 <receiveString+0x198>)
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				//Iterating each character and removing non alphabetical characters.
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	61bb      	str	r3, [r7, #24]
 800f5ca:	e052      	b.n	800f672 <receiveString+0xf2>
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
							|| buffer[i] == '_' || buffer[i] == ':'
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
							|| buffer[i] == '\0')) {
						for (j = i; buffer[j] != '\0'; ++j) {
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	617b      	str	r3, [r7, #20]
 800f5d0:	e00b      	b.n	800f5ea <receiveString+0x6a>
							buffer[j] = buffer[j + 1];
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	441a      	add	r2, r3
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	68b9      	ldr	r1, [r7, #8]
 800f5de:	440b      	add	r3, r1
 800f5e0:	7812      	ldrb	r2, [r2, #0]
 800f5e2:	701a      	strb	r2, [r3, #0]
						for (j = i; buffer[j] != '\0'; ++j) {
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	617b      	str	r3, [r7, #20]
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d1ed      	bne.n	800f5d2 <receiveString+0x52>
						}
						buffer[j] = '\0';
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	68ba      	ldr	r2, [r7, #8]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	701a      	strb	r2, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	68ba      	ldr	r2, [r7, #8]
 800f604:	4413      	add	r3, r2
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	2b60      	cmp	r3, #96	@ 0x60
 800f60a:	d905      	bls.n	800f618 <receiveString+0x98>
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	4413      	add	r3, r2
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	2b7a      	cmp	r3, #122	@ 0x7a
 800f616:	d929      	bls.n	800f66c <receiveString+0xec>
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	68ba      	ldr	r2, [r7, #8]
 800f61c:	4413      	add	r3, r2
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	2b40      	cmp	r3, #64	@ 0x40
 800f622:	d905      	bls.n	800f630 <receiveString+0xb0>
 800f624:	69bb      	ldr	r3, [r7, #24]
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	4413      	add	r3, r2
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	2b5a      	cmp	r3, #90	@ 0x5a
 800f62e:	d91d      	bls.n	800f66c <receiveString+0xec>
							|| buffer[i] == '_' || buffer[i] == ':'
 800f630:	69bb      	ldr	r3, [r7, #24]
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	4413      	add	r3, r2
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	2b5f      	cmp	r3, #95	@ 0x5f
 800f63a:	d017      	beq.n	800f66c <receiveString+0xec>
 800f63c:	69bb      	ldr	r3, [r7, #24]
 800f63e:	68ba      	ldr	r2, [r7, #8]
 800f640:	4413      	add	r3, r2
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	2b3a      	cmp	r3, #58	@ 0x3a
 800f646:	d011      	beq.n	800f66c <receiveString+0xec>
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800f648:	69bb      	ldr	r3, [r7, #24]
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	4413      	add	r3, r2
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2b2f      	cmp	r3, #47	@ 0x2f
 800f652:	d905      	bls.n	800f660 <receiveString+0xe0>
 800f654:	69bb      	ldr	r3, [r7, #24]
 800f656:	68ba      	ldr	r2, [r7, #8]
 800f658:	4413      	add	r3, r2
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	2b39      	cmp	r3, #57	@ 0x39
 800f65e:	d905      	bls.n	800f66c <receiveString+0xec>
							|| buffer[i] == '\0')) {
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	68ba      	ldr	r2, [r7, #8]
 800f664:	4413      	add	r3, r2
 800f666:	781b      	ldrb	r3, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1af      	bne.n	800f5cc <receiveString+0x4c>
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	3301      	adds	r3, #1
 800f670:	61bb      	str	r3, [r7, #24]
 800f672:	69bb      	ldr	r3, [r7, #24]
 800f674:	68ba      	ldr	r2, [r7, #8]
 800f676:	4413      	add	r3, r2
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1c0      	bne.n	800f600 <receiveString+0x80>
					}
				}
				break;
 800f67e:	e044      	b.n	800f70a <receiveString+0x18a>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b'
 800f680:	4b26      	ldr	r3, [pc, #152]	@ (800f71c <receiveString+0x19c>)
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	2b08      	cmp	r3, #8
 800f686:	d003      	beq.n	800f690 <receiveString+0x110>
						|| UART_CLI_rxBuffer[0] == 0x7F)) {
 800f688:	4b24      	ldr	r3, [pc, #144]	@ (800f71c <receiveString+0x19c>)
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f68e:	d117      	bne.n	800f6c0 <receiveString+0x140>
					cli->writeChar(cli, '\b');
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2108      	movs	r1, #8
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	4798      	blx	r3
					cli->writeChar(cli, ' ');
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2120      	movs	r1, #32
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	4798      	blx	r3
					cli->writeChar(cli, '\b');
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2108      	movs	r1, #8
 800f6aa:	68f8      	ldr	r0, [r7, #12]
 800f6ac:	4798      	blx	r3
					--index;
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	3b01      	subs	r3, #1
 800f6b2:	61fb      	str	r3, [r7, #28]
					buffer[index] = '\0';
 800f6b4:	68ba      	ldr	r2, [r7, #8]
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	701a      	strb	r2, [r3, #0]
 800f6be:	e00e      	b.n	800f6de <receiveString+0x15e>
				} else {
					buffer[index++] = UART_CLI_rxBuffer[0];
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	1c5a      	adds	r2, r3, #1
 800f6c4:	61fa      	str	r2, [r7, #28]
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	4a14      	ldr	r2, [pc, #80]	@ (800f71c <receiveString+0x19c>)
 800f6cc:	7812      	ldrb	r2, [r2, #0]
 800f6ce:	701a      	strb	r2, [r3, #0]
					cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a11      	ldr	r2, [pc, #68]	@ (800f71c <receiveString+0x19c>)
 800f6d6:	7812      	ldrb	r2, [r2, #0]
 800f6d8:	4611      	mov	r1, r2
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800f6de:	4b0e      	ldr	r3, [pc, #56]	@ (800f718 <receiveString+0x198>)
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	701a      	strb	r2, [r3, #0]
		}

		//incase no usb then also break it
		if ((HAL_GetTick() - prev_max_wait_time > max_wait_time) || !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 800f6e4:	f7f4 fd08 	bl	80040f8 <HAL_GetTick>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	4b0a      	ldr	r3, [pc, #40]	@ (800f714 <receiveString+0x194>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	1ad2      	subs	r2, r2, r3
 800f6f0:	4b0b      	ldr	r3, [pc, #44]	@ (800f720 <receiveString+0x1a0>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d808      	bhi.n	800f70a <receiveString+0x18a>
 800f6f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f6fc:	4809      	ldr	r0, [pc, #36]	@ (800f724 <receiveString+0x1a4>)
 800f6fe:	f7f6 fcc7 	bl	8006090 <HAL_GPIO_ReadPin>
 800f702:	4603      	mov	r3, r0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d000      	beq.n	800f70a <receiveString+0x18a>
		if (flag_cli) {
 800f708:	e747      	b.n	800f59a <receiveString+0x1a>
			//we break the loop if time goes above 5min
			break;
		}

	}
}
 800f70a:	bf00      	nop
 800f70c:	3720      	adds	r7, #32
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	20001b30 	.word	0x20001b30
 800f718:	20001b3b 	.word	0x20001b3b
 800f71c:	20001b38 	.word	0x20001b38
 800f720:	2000001c 	.word	0x2000001c
 800f724:	40020000 	.word	0x40020000

0800f728 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f734:	4903      	ldr	r1, [pc, #12]	@ (800f744 <onClearCLI+0x1c>)
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	f7ff fee0 	bl	800f4fc <cli_printf>
}
 800f73c:	bf00      	nop
 800f73e:	3710      	adds	r7, #16
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}
 800f744:	08022304 	.word	0x08022304

0800f748 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f748:	b580      	push	{r7, lr}
 800f74a:	b092      	sub	sp, #72	@ 0x48
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f754:	4b24      	ldr	r3, [pc, #144]	@ (800f7e8 <debug_scd4x_PM25+0xa0>)
 800f756:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to enable debug for scd4x and PM y/n?");
 800f758:	4924      	ldr	r1, [pc, #144]	@ (800f7ec <debug_scd4x_PM25+0xa4>)
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f7ff fece 	bl	800f4fc <cli_printf>

	cli_other = 1;
 800f760:	4b23      	ldr	r3, [pc, #140]	@ (800f7f0 <debug_scd4x_PM25+0xa8>)
 800f762:	2201      	movs	r2, #1
 800f764:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f766:	4b23      	ldr	r3, [pc, #140]	@ (800f7f4 <debug_scd4x_PM25+0xac>)
 800f768:	2200      	movs	r2, #0
 800f76a:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f76c:	f107 0310 	add.w	r3, r7, #16
 800f770:	2232      	movs	r2, #50	@ 0x32
 800f772:	4619      	mov	r1, r3
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f7ff ff03 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f77a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f77c:	f7f0 fd90 	bl	80002a0 <strlen>
 800f780:	4603      	mov	r3, r0
 800f782:	b29a      	uxth	r2, r3
 800f784:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f788:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f78a:	481b      	ldr	r0, [pc, #108]	@ (800f7f8 <debug_scd4x_PM25+0xb0>)
 800f78c:	f7fc fd54 	bl	800c238 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800f790:	f107 0310 	add.w	r3, r7, #16
 800f794:	2179      	movs	r1, #121	@ 0x79
 800f796:	4618      	mov	r0, r3
 800f798:	f00f fa64 	bl	801ec64 <strchr>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d007      	beq.n	800f7b2 <debug_scd4x_PM25+0x6a>
		debug_scd_pm = 1;
 800f7a2:	4b16      	ldr	r3, [pc, #88]	@ (800f7fc <debug_scd4x_PM25+0xb4>)
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug enabled");
 800f7a8:	4915      	ldr	r1, [pc, #84]	@ (800f800 <debug_scd4x_PM25+0xb8>)
 800f7aa:	68f8      	ldr	r0, [r7, #12]
 800f7ac:	f7ff fea6 	bl	800f4fc <cli_printf>
 800f7b0:	e00f      	b.n	800f7d2 <debug_scd4x_PM25+0x8a>
	} else if (strstr(buffer, "n")) {
 800f7b2:	f107 0310 	add.w	r3, r7, #16
 800f7b6:	216e      	movs	r1, #110	@ 0x6e
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f00f fa53 	bl	801ec64 <strchr>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d006      	beq.n	800f7d2 <debug_scd4x_PM25+0x8a>
		debug_scd_pm = 0;
 800f7c4:	4b0d      	ldr	r3, [pc, #52]	@ (800f7fc <debug_scd4x_PM25+0xb4>)
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug disabled");
 800f7ca:	490e      	ldr	r1, [pc, #56]	@ (800f804 <debug_scd4x_PM25+0xbc>)
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f7ff fe95 	bl	800f4fc <cli_printf>
	}

	flag_cli = 0;
 800f7d2:	4b08      	ldr	r3, [pc, #32]	@ (800f7f4 <debug_scd4x_PM25+0xac>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f7d8:	4b05      	ldr	r3, [pc, #20]	@ (800f7f0 <debug_scd4x_PM25+0xa8>)
 800f7da:	2200      	movs	r2, #0
 800f7dc:	701a      	strb	r2, [r3, #0]
}
 800f7de:	bf00      	nop
 800f7e0:	3748      	adds	r7, #72	@ 0x48
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	0802230c 	.word	0x0802230c
 800f7ec:	08022310 	.word	0x08022310
 800f7f0:	20001b3a 	.word	0x20001b3a
 800f7f4:	20001b3b 	.word	0x20001b3b
 800f7f8:	20001a74 	.word	0x20001a74
 800f7fc:	20001578 	.word	0x20001578
 800f800:	08022344 	.word	0x08022344
 800f804:	08022354 	.word	0x08022354

0800f808 <DeviceSignature>:

void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f808:	b580      	push	{r7, lr}
 800f80a:	b084      	sub	sp, #16
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli, "Device ID/Signature: %s.", ver_GetUid());
 800f814:	f7f2 fe28 	bl	8002468 <ver_GetUid>
 800f818:	4603      	mov	r3, r0
 800f81a:	461a      	mov	r2, r3
 800f81c:	4903      	ldr	r1, [pc, #12]	@ (800f82c <DeviceSignature+0x24>)
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f7ff fe6c 	bl	800f4fc <cli_printf>
}
 800f824:	bf00      	nop
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	08022364 	.word	0x08022364

0800f830 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f830:	b580      	push	{r7, lr}
 800f832:	b092      	sub	sp, #72	@ 0x48
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f83c:	4b2d      	ldr	r3, [pc, #180]	@ (800f8f4 <SetID+0xc4>)
 800f83e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f840:	492d      	ldr	r1, [pc, #180]	@ (800f8f8 <SetID+0xc8>)
 800f842:	68f8      	ldr	r0, [r7, #12]
 800f844:	f7ff fe5a 	bl	800f4fc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f848:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f84a:	f7f0 fd29 	bl	80002a0 <strlen>
 800f84e:	4603      	mov	r3, r0
 800f850:	b29a      	uxth	r2, r3
 800f852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f856:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f858:	4828      	ldr	r0, [pc, #160]	@ (800f8fc <SetID+0xcc>)
 800f85a:	f7fc fced 	bl	800c238 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the ID. Keep ID below 30 characters");
 800f85e:	4928      	ldr	r1, [pc, #160]	@ (800f900 <SetID+0xd0>)
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f7ff fe4b 	bl	800f4fc <cli_printf>
	cli_other = 1;
 800f866:	4b27      	ldr	r3, [pc, #156]	@ (800f904 <SetID+0xd4>)
 800f868:	2201      	movs	r2, #1
 800f86a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f86c:	4b26      	ldr	r3, [pc, #152]	@ (800f908 <SetID+0xd8>)
 800f86e:	2200      	movs	r2, #0
 800f870:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f872:	f107 0310 	add.w	r3, r7, #16
 800f876:	2232      	movs	r2, #50	@ 0x32
 800f878:	4619      	mov	r1, r3
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f7ff fe80 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f880:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f882:	f7f0 fd0d 	bl	80002a0 <strlen>
 800f886:	4603      	mov	r3, r0
 800f888:	b29a      	uxth	r2, r3
 800f88a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f88e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f890:	481a      	ldr	r0, [pc, #104]	@ (800f8fc <SetID+0xcc>)
 800f892:	f7fc fcd1 	bl	800c238 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f896:	f107 0310 	add.w	r3, r7, #16
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7f0 fd00 	bl	80002a0 <strlen>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 30) {
 800f8a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f8aa:	2b1d      	cmp	r3, #29
 800f8ac:	d814      	bhi.n	800f8d8 <SetID+0xa8>
		if (buffer[0] != '\0') {
 800f8ae:	7c3b      	ldrb	r3, [r7, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d015      	beq.n	800f8e0 <SetID+0xb0>
			if (buffer !=  NULL) {
				strcpy(_Flash_Packet.id, buffer);
 800f8b4:	f107 0310 	add.w	r3, r7, #16
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	4814      	ldr	r0, [pc, #80]	@ (800f90c <SetID+0xdc>)
 800f8bc:	f00f fad9 	bl	801ee72 <strcpy>
				set_param_flags();
 800f8c0:	4b13      	ldr	r3, [pc, #76]	@ (800f910 <SetID+0xe0>)
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	701a      	strb	r2, [r3, #0]
 800f8c6:	4b13      	ldr	r3, [pc, #76]	@ (800f914 <SetID+0xe4>)
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "ID is set to: %s", _Flash_Packet.id);
 800f8cc:	4a0f      	ldr	r2, [pc, #60]	@ (800f90c <SetID+0xdc>)
 800f8ce:	4912      	ldr	r1, [pc, #72]	@ (800f918 <SetID+0xe8>)
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f7ff fe13 	bl	800f4fc <cli_printf>
 800f8d6:	e003      	b.n	800f8e0 <SetID+0xb0>
			}
		}
	} else {
		cli_printf(cli, "ID is too long");
 800f8d8:	4910      	ldr	r1, [pc, #64]	@ (800f91c <SetID+0xec>)
 800f8da:	68f8      	ldr	r0, [r7, #12]
 800f8dc:	f7ff fe0e 	bl	800f4fc <cli_printf>
	}

	flag_cli = 0;
 800f8e0:	4b09      	ldr	r3, [pc, #36]	@ (800f908 <SetID+0xd8>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f8e6:	4b07      	ldr	r3, [pc, #28]	@ (800f904 <SetID+0xd4>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	701a      	strb	r2, [r3, #0]

}
 800f8ec:	bf00      	nop
 800f8ee:	3748      	adds	r7, #72	@ 0x48
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	0802230c 	.word	0x0802230c
 800f8f8:	08022380 	.word	0x08022380
 800f8fc:	20001a74 	.word	0x20001a74
 800f900:	080223b8 	.word	0x080223b8
 800f904:	20001b3a 	.word	0x20001b3a
 800f908:	20001b3b 	.word	0x20001b3b
 800f90c:	20001399 	.word	0x20001399
 800f910:	20001579 	.word	0x20001579
 800f914:	2000157a 	.word	0x2000157a
 800f918:	080223e0 	.word	0x080223e0
 800f91c:	080223f4 	.word	0x080223f4

0800f920 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f920:	b580      	push	{r7, lr}
 800f922:	b092      	sub	sp, #72	@ 0x48
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f92c:	4b2d      	ldr	r3, [pc, #180]	@ (800f9e4 <SetLocation+0xc4>)
 800f92e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f930:	492d      	ldr	r1, [pc, #180]	@ (800f9e8 <SetLocation+0xc8>)
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f7ff fde2 	bl	800f4fc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f938:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f93a:	f7f0 fcb1 	bl	80002a0 <strlen>
 800f93e:	4603      	mov	r3, r0
 800f940:	b29a      	uxth	r2, r3
 800f942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f946:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f948:	4828      	ldr	r0, [pc, #160]	@ (800f9ec <SetLocation+0xcc>)
 800f94a:	f7fc fc75 	bl	800c238 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the Location. Keep Location below 15 characters");
 800f94e:	4928      	ldr	r1, [pc, #160]	@ (800f9f0 <SetLocation+0xd0>)
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f7ff fdd3 	bl	800f4fc <cli_printf>
	cli_other = 1;
 800f956:	4b27      	ldr	r3, [pc, #156]	@ (800f9f4 <SetLocation+0xd4>)
 800f958:	2201      	movs	r2, #1
 800f95a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f95c:	4b26      	ldr	r3, [pc, #152]	@ (800f9f8 <SetLocation+0xd8>)
 800f95e:	2200      	movs	r2, #0
 800f960:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f962:	f107 0310 	add.w	r3, r7, #16
 800f966:	2232      	movs	r2, #50	@ 0x32
 800f968:	4619      	mov	r1, r3
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	f7ff fe08 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f970:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f972:	f7f0 fc95 	bl	80002a0 <strlen>
 800f976:	4603      	mov	r3, r0
 800f978:	b29a      	uxth	r2, r3
 800f97a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f97e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f980:	481a      	ldr	r0, [pc, #104]	@ (800f9ec <SetLocation+0xcc>)
 800f982:	f7fc fc59 	bl	800c238 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f986:	f107 0310 	add.w	r3, r7, #16
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7f0 fc88 	bl	80002a0 <strlen>
 800f990:	4603      	mov	r3, r0
 800f992:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f996:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f99a:	2b0e      	cmp	r3, #14
 800f99c:	d814      	bhi.n	800f9c8 <SetLocation+0xa8>
		if (buffer[0] != '\0') {
 800f99e:	7c3b      	ldrb	r3, [r7, #16]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d015      	beq.n	800f9d0 <SetLocation+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.location, buffer);
 800f9a4:	f107 0310 	add.w	r3, r7, #16
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	4814      	ldr	r0, [pc, #80]	@ (800f9fc <SetLocation+0xdc>)
 800f9ac:	f00f fa61 	bl	801ee72 <strcpy>
				set_param_flags();
 800f9b0:	4b13      	ldr	r3, [pc, #76]	@ (800fa00 <SetLocation+0xe0>)
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	701a      	strb	r2, [r3, #0]
 800f9b6:	4b13      	ldr	r3, [pc, #76]	@ (800fa04 <SetLocation+0xe4>)
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "Location is set to: %s",
 800f9bc:	4a0f      	ldr	r2, [pc, #60]	@ (800f9fc <SetLocation+0xdc>)
 800f9be:	4912      	ldr	r1, [pc, #72]	@ (800fa08 <SetLocation+0xe8>)
 800f9c0:	68f8      	ldr	r0, [r7, #12]
 800f9c2:	f7ff fd9b 	bl	800f4fc <cli_printf>
 800f9c6:	e003      	b.n	800f9d0 <SetLocation+0xb0>
						_Flash_Packet.location);
			}
		}
	} else {
		cli_printf(cli, "Location is too long");
 800f9c8:	4910      	ldr	r1, [pc, #64]	@ (800fa0c <SetLocation+0xec>)
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	f7ff fd96 	bl	800f4fc <cli_printf>
	}

	flag_cli = 0;
 800f9d0:	4b09      	ldr	r3, [pc, #36]	@ (800f9f8 <SetLocation+0xd8>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f9d6:	4b07      	ldr	r3, [pc, #28]	@ (800f9f4 <SetLocation+0xd4>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	701a      	strb	r2, [r3, #0]

}
 800f9dc:	bf00      	nop
 800f9de:	3748      	adds	r7, #72	@ 0x48
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}
 800f9e4:	0802230c 	.word	0x0802230c
 800f9e8:	08022380 	.word	0x08022380
 800f9ec:	20001a74 	.word	0x20001a74
 800f9f0:	08022404 	.word	0x08022404
 800f9f4:	20001b3a 	.word	0x20001b3a
 800f9f8:	20001b3b 	.word	0x20001b3b
 800f9fc:	200013cb 	.word	0x200013cb
 800fa00:	20001579 	.word	0x20001579
 800fa04:	2000157a 	.word	0x2000157a
 800fa08:	08022438 	.word	0x08022438
 800fa0c:	08022450 	.word	0x08022450

0800fa10 <Setgroup>:
	flag_cli = 0;
	cli_other = 0;

}

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b092      	sub	sp, #72	@ 0x48
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800fa1c:	4b2d      	ldr	r3, [pc, #180]	@ (800fad4 <Setgroup+0xc4>)
 800fa1e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fa20:	492d      	ldr	r1, [pc, #180]	@ (800fad8 <Setgroup+0xc8>)
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7ff fd6a 	bl	800f4fc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa28:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa2a:	f7f0 fc39 	bl	80002a0 <strlen>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa38:	4828      	ldr	r0, [pc, #160]	@ (800fadc <Setgroup+0xcc>)
 800fa3a:	f7fc fbfd 	bl	800c238 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the group. Keep name below 15 characters");
 800fa3e:	4928      	ldr	r1, [pc, #160]	@ (800fae0 <Setgroup+0xd0>)
 800fa40:	68f8      	ldr	r0, [r7, #12]
 800fa42:	f7ff fd5b 	bl	800f4fc <cli_printf>
	cli_other = 1;
 800fa46:	4b27      	ldr	r3, [pc, #156]	@ (800fae4 <Setgroup+0xd4>)
 800fa48:	2201      	movs	r2, #1
 800fa4a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fa4c:	4b26      	ldr	r3, [pc, #152]	@ (800fae8 <Setgroup+0xd8>)
 800fa4e:	2200      	movs	r2, #0
 800fa50:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fa52:	f107 0310 	add.w	r3, r7, #16
 800fa56:	2232      	movs	r2, #50	@ 0x32
 800fa58:	4619      	mov	r1, r3
 800fa5a:	68f8      	ldr	r0, [r7, #12]
 800fa5c:	f7ff fd90 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa60:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa62:	f7f0 fc1d 	bl	80002a0 <strlen>
 800fa66:	4603      	mov	r3, r0
 800fa68:	b29a      	uxth	r2, r3
 800fa6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa70:	481a      	ldr	r0, [pc, #104]	@ (800fadc <Setgroup+0xcc>)
 800fa72:	f7fc fbe1 	bl	800c238 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800fa76:	f107 0310 	add.w	r3, r7, #16
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7f0 fc10 	bl	80002a0 <strlen>
 800fa80:	4603      	mov	r3, r0
 800fa82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800fa86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fa8a:	2b0e      	cmp	r3, #14
 800fa8c:	d814      	bhi.n	800fab8 <Setgroup+0xa8>
		if (buffer[0] != '\0') {
 800fa8e:	7c3b      	ldrb	r3, [r7, #16]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d015      	beq.n	800fac0 <Setgroup+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.group, buffer);
 800fa94:	f107 0310 	add.w	r3, r7, #16
 800fa98:	4619      	mov	r1, r3
 800fa9a:	4814      	ldr	r0, [pc, #80]	@ (800faec <Setgroup+0xdc>)
 800fa9c:	f00f f9e9 	bl	801ee72 <strcpy>
				set_param_flags();
 800faa0:	4b13      	ldr	r3, [pc, #76]	@ (800faf0 <Setgroup+0xe0>)
 800faa2:	2201      	movs	r2, #1
 800faa4:	701a      	strb	r2, [r3, #0]
 800faa6:	4b13      	ldr	r3, [pc, #76]	@ (800faf4 <Setgroup+0xe4>)
 800faa8:	2201      	movs	r2, #1
 800faaa:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "group is set to: %s", _Flash_Packet.group);
 800faac:	4a0f      	ldr	r2, [pc, #60]	@ (800faec <Setgroup+0xdc>)
 800faae:	4912      	ldr	r1, [pc, #72]	@ (800faf8 <Setgroup+0xe8>)
 800fab0:	68f8      	ldr	r0, [r7, #12]
 800fab2:	f7ff fd23 	bl	800f4fc <cli_printf>
 800fab6:	e003      	b.n	800fac0 <Setgroup+0xb0>
			}
		}
	} else {
		cli_printf(cli, "group is too long");
 800fab8:	4910      	ldr	r1, [pc, #64]	@ (800fafc <Setgroup+0xec>)
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f7ff fd1e 	bl	800f4fc <cli_printf>
	}

	flag_cli = 0;
 800fac0:	4b09      	ldr	r3, [pc, #36]	@ (800fae8 <Setgroup+0xd8>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fac6:	4b07      	ldr	r3, [pc, #28]	@ (800fae4 <Setgroup+0xd4>)
 800fac8:	2200      	movs	r2, #0
 800faca:	701a      	strb	r2, [r3, #0]

}
 800facc:	bf00      	nop
 800face:	3748      	adds	r7, #72	@ 0x48
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	0802230c 	.word	0x0802230c
 800fad8:	08022380 	.word	0x08022380
 800fadc:	20001a74 	.word	0x20001a74
 800fae0:	080224bc 	.word	0x080224bc
 800fae4:	20001b3a 	.word	0x20001b3a
 800fae8:	20001b3b 	.word	0x20001b3b
 800faec:	2000142f 	.word	0x2000142f
 800faf0:	20001579 	.word	0x20001579
 800faf4:	2000157a 	.word	0x2000157a
 800faf8:	080224ec 	.word	0x080224ec
 800fafc:	08022500 	.word	0x08022500

0800fb00 <GetID>:

void GetID(EmbeddedCli *cli, char *args, void *context) {
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "ID: %s", _Flash_Packet.id);
 800fb0c:	4a04      	ldr	r2, [pc, #16]	@ (800fb20 <GetID+0x20>)
 800fb0e:	4905      	ldr	r1, [pc, #20]	@ (800fb24 <GetID+0x24>)
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f7ff fcf3 	bl	800f4fc <cli_printf>
}
 800fb16:	bf00      	nop
 800fb18:	3710      	adds	r7, #16
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	20001399 	.word	0x20001399
 800fb24:	08022514 	.word	0x08022514

0800fb28 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Location: %s", _Flash_Packet.location);
 800fb34:	4a04      	ldr	r2, [pc, #16]	@ (800fb48 <GetLocation+0x20>)
 800fb36:	4905      	ldr	r1, [pc, #20]	@ (800fb4c <GetLocation+0x24>)
 800fb38:	68f8      	ldr	r0, [r7, #12]
 800fb3a:	f7ff fcdf 	bl	800f4fc <cli_printf>

}
 800fb3e:	bf00      	nop
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	200013cb 	.word	0x200013cb
 800fb4c:	0802251c 	.word	0x0802251c

0800fb50 <Getgroup>:
void Getname(EmbeddedCli *cli, char *args, void *context) {
	cli_printf(cli, "Name: %s", _Flash_Packet.name);

}

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Group: %s", _Flash_Packet.group);
 800fb5c:	4a04      	ldr	r2, [pc, #16]	@ (800fb70 <Getgroup+0x20>)
 800fb5e:	4905      	ldr	r1, [pc, #20]	@ (800fb74 <Getgroup+0x24>)
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f7ff fccb 	bl	800f4fc <cli_printf>

}
 800fb66:	bf00      	nop
 800fb68:	3710      	adds	r7, #16
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	2000142f 	.word	0x2000142f
 800fb74:	08022538 	.word	0x08022538

0800fb78 <SetDate>:

void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b09a      	sub	sp, #104	@ 0x68
 800fb7c:	af02      	add	r7, sp, #8
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fb84:	4b26      	ldr	r3, [pc, #152]	@ (800fc20 <SetDate+0xa8>)
 800fb86:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fb88:	4926      	ldr	r1, [pc, #152]	@ (800fc24 <SetDate+0xac>)
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f7ff fcb6 	bl	800f4fc <cli_printf>
			"Set date in following format: day:month:year eg:(15:1:23).");
	cli_other = 1;
 800fb90:	4b25      	ldr	r3, [pc, #148]	@ (800fc28 <SetDate+0xb0>)
 800fb92:	2201      	movs	r2, #1
 800fb94:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fb96:	4b25      	ldr	r3, [pc, #148]	@ (800fc2c <SetDate+0xb4>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fb9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fba0:	2232      	movs	r2, #50	@ 0x32
 800fba2:	4619      	mov	r1, r3
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	f7ff fceb 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fbaa:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fbac:	f7f0 fb78 	bl	80002a0 <strlen>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbb8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fbba:	481d      	ldr	r0, [pc, #116]	@ (800fc30 <SetDate+0xb8>)
 800fbbc:	f7fc fb3c 	bl	800c238 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fbc0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d004      	beq.n	800fbd2 <SetDate+0x5a>
		Set_Date(buffer);
 800fbc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f004 f825 	bl	8013c1c <Set_Date>
	}
	flag_cli = 0;
 800fbd2:	4b16      	ldr	r3, [pc, #88]	@ (800fc2c <SetDate+0xb4>)
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fbd8:	4b13      	ldr	r3, [pc, #76]	@ (800fc28 <SetDate+0xb0>)
 800fbda:	2200      	movs	r2, #0
 800fbdc:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fbde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	4813      	ldr	r0, [pc, #76]	@ (800fc34 <SetDate+0xbc>)
 800fbe8:	f7f9 ffa5 	bl	8009b36 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fbec:	f107 0310 	add.w	r3, r7, #16
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	480f      	ldr	r0, [pc, #60]	@ (800fc34 <SetDate+0xbc>)
 800fbf6:	f7f9 febc 	bl	8009972 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fbfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fbfe:	461a      	mov	r2, r3
 800fc00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fc04:	4619      	mov	r1, r3
			gDate.Year);
 800fc06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fc0a:	9300      	str	r3, [sp, #0]
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	490a      	ldr	r1, [pc, #40]	@ (800fc38 <SetDate+0xc0>)
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	f7ff fc73 	bl	800f4fc <cli_printf>

}
 800fc16:	bf00      	nop
 800fc18:	3760      	adds	r7, #96	@ 0x60
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	0802230c 	.word	0x0802230c
 800fc24:	08022544 	.word	0x08022544
 800fc28:	20001b3a 	.word	0x20001b3a
 800fc2c:	20001b3b 	.word	0x20001b3b
 800fc30:	20001a74 	.word	0x20001a74
 800fc34:	20001898 	.word	0x20001898
 800fc38:	08022580 	.word	0x08022580

0800fc3c <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b09a      	sub	sp, #104	@ 0x68
 800fc40:	af02      	add	r7, sp, #8
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fc48:	4b26      	ldr	r3, [pc, #152]	@ (800fce4 <SetTime+0xa8>)
 800fc4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fc4c:	4926      	ldr	r1, [pc, #152]	@ (800fce8 <SetTime+0xac>)
 800fc4e:	68f8      	ldr	r0, [r7, #12]
 800fc50:	f7ff fc54 	bl	800f4fc <cli_printf>
			"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
	cli_other = 1;
 800fc54:	4b25      	ldr	r3, [pc, #148]	@ (800fcec <SetTime+0xb0>)
 800fc56:	2201      	movs	r2, #1
 800fc58:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fc5a:	4b25      	ldr	r3, [pc, #148]	@ (800fcf0 <SetTime+0xb4>)
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fc60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc64:	2232      	movs	r2, #50	@ 0x32
 800fc66:	4619      	mov	r1, r3
 800fc68:	68f8      	ldr	r0, [r7, #12]
 800fc6a:	f7ff fc89 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fc6e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fc70:	f7f0 fb16 	bl	80002a0 <strlen>
 800fc74:	4603      	mov	r3, r0
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc7c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fc7e:	481d      	ldr	r0, [pc, #116]	@ (800fcf4 <SetTime+0xb8>)
 800fc80:	f7fc fada 	bl	800c238 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fc84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d004      	beq.n	800fc96 <SetTime+0x5a>
		Set_Time(buffer);
 800fc8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc90:	4618      	mov	r0, r3
 800fc92:	f004 f881 	bl	8013d98 <Set_Time>
	}
	flag_cli = 0;
 800fc96:	4b16      	ldr	r3, [pc, #88]	@ (800fcf0 <SetTime+0xb4>)
 800fc98:	2200      	movs	r2, #0
 800fc9a:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fc9c:	4b13      	ldr	r3, [pc, #76]	@ (800fcec <SetTime+0xb0>)
 800fc9e:	2200      	movs	r2, #0
 800fca0:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800fca2:	4b15      	ldr	r3, [pc, #84]	@ (800fcf8 <SetTime+0xbc>)
 800fca4:	2201      	movs	r2, #1
 800fca6:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fcac:	2200      	movs	r2, #0
 800fcae:	4619      	mov	r1, r3
 800fcb0:	4812      	ldr	r0, [pc, #72]	@ (800fcfc <SetTime+0xc0>)
 800fcb2:	f7f9 ff40 	bl	8009b36 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fcb6:	f107 0310 	add.w	r3, r7, #16
 800fcba:	2200      	movs	r2, #0
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	480f      	ldr	r0, [pc, #60]	@ (800fcfc <SetTime+0xc0>)
 800fcc0:	f7f9 fe57 	bl	8009972 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fcc4:	7c3b      	ldrb	r3, [r7, #16]
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	7c7b      	ldrb	r3, [r7, #17]
 800fcca:	4619      	mov	r1, r3
			gTime.Seconds);
 800fccc:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	490b      	ldr	r1, [pc, #44]	@ (800fd00 <SetTime+0xc4>)
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f7ff fc11 	bl	800f4fc <cli_printf>

}
 800fcda:	bf00      	nop
 800fcdc:	3760      	adds	r7, #96	@ 0x60
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	0802230c 	.word	0x0802230c
 800fce8:	0802259c 	.word	0x0802259c
 800fcec:	20001b3a 	.word	0x20001b3a
 800fcf0:	20001b3b 	.word	0x20001b3b
 800fcf4:	20001a74 	.word	0x20001a74
 800fcf8:	20000029 	.word	0x20000029
 800fcfc:	20001898 	.word	0x20001898
 800fd00:	080225e0 	.word	0x080225e0

0800fd04 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b08c      	sub	sp, #48	@ 0x30
 800fd08:	af02      	add	r7, sp, #8
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fd10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd14:	2200      	movs	r2, #0
 800fd16:	4619      	mov	r1, r3
 800fd18:	480f      	ldr	r0, [pc, #60]	@ (800fd58 <GetDate+0x54>)
 800fd1a:	f7f9 ff0c 	bl	8009b36 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd1e:	f107 0310 	add.w	r3, r7, #16
 800fd22:	2200      	movs	r2, #0
 800fd24:	4619      	mov	r1, r3
 800fd26:	480c      	ldr	r0, [pc, #48]	@ (800fd58 <GetDate+0x54>)
 800fd28:	f7f9 fe23 	bl	8009972 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d.%02d.%02d", gDate.Date, gDate.Month, gDate.Year);
 800fd2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fd30:	461a      	mov	r2, r3
 800fd32:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fd36:	4619      	mov	r1, r3
 800fd38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	460b      	mov	r3, r1
 800fd40:	4906      	ldr	r1, [pc, #24]	@ (800fd5c <GetDate+0x58>)
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	f7ff fbda 	bl	800f4fc <cli_printf>
	HAL_Delay(100);
 800fd48:	2064      	movs	r0, #100	@ 0x64
 800fd4a:	f7f4 f9e1 	bl	8004110 <HAL_Delay>
}
 800fd4e:	bf00      	nop
 800fd50:	3728      	adds	r7, #40	@ 0x28
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	20001898 	.word	0x20001898
 800fd5c:	080225fc 	.word	0x080225fc

0800fd60 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08c      	sub	sp, #48	@ 0x30
 800fd64:	af02      	add	r7, sp, #8
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fd6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd70:	2200      	movs	r2, #0
 800fd72:	4619      	mov	r1, r3
 800fd74:	480d      	ldr	r0, [pc, #52]	@ (800fdac <GetTime+0x4c>)
 800fd76:	f7f9 fede 	bl	8009b36 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd7a:	f107 0310 	add.w	r3, r7, #16
 800fd7e:	2200      	movs	r2, #0
 800fd80:	4619      	mov	r1, r3
 800fd82:	480a      	ldr	r0, [pc, #40]	@ (800fdac <GetTime+0x4c>)
 800fd84:	f7f9 fdf5 	bl	8009972 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fd88:	7c3b      	ldrb	r3, [r7, #16]
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	7c7b      	ldrb	r3, [r7, #17]
 800fd8e:	4619      	mov	r1, r3
			gTime.Seconds);
 800fd90:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	460b      	mov	r3, r1
 800fd96:	4906      	ldr	r1, [pc, #24]	@ (800fdb0 <GetTime+0x50>)
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f7ff fbaf 	bl	800f4fc <cli_printf>
	HAL_Delay(100);
 800fd9e:	2064      	movs	r0, #100	@ 0x64
 800fda0:	f7f4 f9b6 	bl	8004110 <HAL_Delay>
}
 800fda4:	bf00      	nop
 800fda6:	3728      	adds	r7, #40	@ 0x28
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	20001898 	.word	0x20001898
 800fdb0:	0802260c 	.word	0x0802260c

0800fdb4 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b092      	sub	sp, #72	@ 0x48
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fdc0:	4b54      	ldr	r3, [pc, #336]	@ (800ff14 <SetInterval+0x160>)
 800fdc2:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fdc4:	4954      	ldr	r1, [pc, #336]	@ (800ff18 <SetInterval+0x164>)
 800fdc6:	68f8      	ldr	r0, [r7, #12]
 800fdc8:	f7ff fb98 	bl	800f4fc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fdcc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fdce:	f7f0 fa67 	bl	80002a0 <strlen>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fdda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fddc:	484f      	ldr	r0, [pc, #316]	@ (800ff1c <SetInterval+0x168>)
 800fdde:	f7fc fa2b 	bl	800c238 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter 1 for 5min.");
 800fde2:	494f      	ldr	r1, [pc, #316]	@ (800ff20 <SetInterval+0x16c>)
 800fde4:	68f8      	ldr	r0, [r7, #12]
 800fde6:	f7ff fb89 	bl	800f4fc <cli_printf>
	cli_printf(cli, "Enter 2 for 15min.");
 800fdea:	494e      	ldr	r1, [pc, #312]	@ (800ff24 <SetInterval+0x170>)
 800fdec:	68f8      	ldr	r0, [r7, #12]
 800fdee:	f7ff fb85 	bl	800f4fc <cli_printf>
	cli_printf(cli, "Enter 3 for 60min.");
 800fdf2:	494d      	ldr	r1, [pc, #308]	@ (800ff28 <SetInterval+0x174>)
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f7ff fb81 	bl	800f4fc <cli_printf>
	cli_printf(cli,
 800fdfa:	494c      	ldr	r1, [pc, #304]	@ (800ff2c <SetInterval+0x178>)
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f7ff fb7d 	bl	800f4fc <cli_printf>
			"Disclaimer: The battery life will be reduced if interval is reduced.");
	cli_other = 1;
 800fe02:	4b4b      	ldr	r3, [pc, #300]	@ (800ff30 <SetInterval+0x17c>)
 800fe04:	2201      	movs	r2, #1
 800fe06:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fe08:	4b4a      	ldr	r3, [pc, #296]	@ (800ff34 <SetInterval+0x180>)
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fe0e:	f107 0310 	add.w	r3, r7, #16
 800fe12:	2232      	movs	r2, #50	@ 0x32
 800fe14:	4619      	mov	r1, r3
 800fe16:	68f8      	ldr	r0, [r7, #12]
 800fe18:	f7ff fbb2 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fe1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fe1e:	f7f0 fa3f 	bl	80002a0 <strlen>
 800fe22:	4603      	mov	r3, r0
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe2c:	483b      	ldr	r0, [pc, #236]	@ (800ff1c <SetInterval+0x168>)
 800fe2e:	f7fc fa03 	bl	800c238 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800fe32:	f107 0310 	add.w	r3, r7, #16
 800fe36:	2131      	movs	r1, #49	@ 0x31
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f00e ff13 	bl	801ec64 <strchr>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d015      	beq.n	800fe70 <SetInterval+0xbc>
		_Flash_Packet.Time_Interval = 5;
 800fe44:	4b3c      	ldr	r3, [pc, #240]	@ (800ff38 <SetInterval+0x184>)
 800fe46:	2200      	movs	r2, #0
 800fe48:	f042 0205 	orr.w	r2, r2, #5
 800fe4c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fe50:	2200      	movs	r2, #0
 800fe52:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fe62:	4b36      	ldr	r3, [pc, #216]	@ (800ff3c <SetInterval+0x188>)
 800fe64:	2201      	movs	r2, #1
 800fe66:	701a      	strb	r2, [r3, #0]
 800fe68:	4b35      	ldr	r3, [pc, #212]	@ (800ff40 <SetInterval+0x18c>)
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	701a      	strb	r2, [r3, #0]
 800fe6e:	e03c      	b.n	800feea <SetInterval+0x136>
	} else if (strstr(buffer, "2")) {
 800fe70:	f107 0310 	add.w	r3, r7, #16
 800fe74:	2132      	movs	r1, #50	@ 0x32
 800fe76:	4618      	mov	r0, r3
 800fe78:	f00e fef4 	bl	801ec64 <strchr>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d015      	beq.n	800feae <SetInterval+0xfa>
		_Flash_Packet.Time_Interval = 15;
 800fe82:	4b2d      	ldr	r3, [pc, #180]	@ (800ff38 <SetInterval+0x184>)
 800fe84:	2200      	movs	r2, #0
 800fe86:	f042 020f 	orr.w	r2, r2, #15
 800fe8a:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fe94:	2200      	movs	r2, #0
 800fe96:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fea0:	4b26      	ldr	r3, [pc, #152]	@ (800ff3c <SetInterval+0x188>)
 800fea2:	2201      	movs	r2, #1
 800fea4:	701a      	strb	r2, [r3, #0]
 800fea6:	4b26      	ldr	r3, [pc, #152]	@ (800ff40 <SetInterval+0x18c>)
 800fea8:	2201      	movs	r2, #1
 800feaa:	701a      	strb	r2, [r3, #0]
 800feac:	e01d      	b.n	800feea <SetInterval+0x136>
	} else if (strstr(buffer, "3")) {
 800feae:	f107 0310 	add.w	r3, r7, #16
 800feb2:	2133      	movs	r1, #51	@ 0x33
 800feb4:	4618      	mov	r0, r3
 800feb6:	f00e fed5 	bl	801ec64 <strchr>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	d014      	beq.n	800feea <SetInterval+0x136>
		_Flash_Packet.Time_Interval = 60;
 800fec0:	4b1d      	ldr	r3, [pc, #116]	@ (800ff38 <SetInterval+0x184>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	f042 023c 	orr.w	r2, r2, #60	@ 0x3c
 800fec8:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fecc:	2200      	movs	r2, #0
 800fece:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fed2:	2200      	movs	r2, #0
 800fed4:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fed8:	2200      	movs	r2, #0
 800feda:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fede:	4b17      	ldr	r3, [pc, #92]	@ (800ff3c <SetInterval+0x188>)
 800fee0:	2201      	movs	r2, #1
 800fee2:	701a      	strb	r2, [r3, #0]
 800fee4:	4b16      	ldr	r3, [pc, #88]	@ (800ff40 <SetInterval+0x18c>)
 800fee6:	2201      	movs	r2, #1
 800fee8:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800feea:	4b12      	ldr	r3, [pc, #72]	@ (800ff34 <SetInterval+0x180>)
 800feec:	2200      	movs	r2, #0
 800feee:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fef0:	4b0f      	ldr	r3, [pc, #60]	@ (800ff30 <SetInterval+0x17c>)
 800fef2:	2200      	movs	r2, #0
 800fef4:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "Interval is set to: %ldmin", _Flash_Packet.Time_Interval);
 800fef6:	4b10      	ldr	r3, [pc, #64]	@ (800ff38 <SetInterval+0x184>)
 800fef8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800fefc:	461a      	mov	r2, r3
 800fefe:	4911      	ldr	r1, [pc, #68]	@ (800ff44 <SetInterval+0x190>)
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	f7ff fafb 	bl	800f4fc <cli_printf>
	set_alarm_Time = 1;
 800ff06:	4b10      	ldr	r3, [pc, #64]	@ (800ff48 <SetInterval+0x194>)
 800ff08:	2201      	movs	r2, #1
 800ff0a:	701a      	strb	r2, [r3, #0]
}
 800ff0c:	bf00      	nop
 800ff0e:	3748      	adds	r7, #72	@ 0x48
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}
 800ff14:	0802230c 	.word	0x0802230c
 800ff18:	08022380 	.word	0x08022380
 800ff1c:	20001a74 	.word	0x20001a74
 800ff20:	0802261c 	.word	0x0802261c
 800ff24:	08022630 	.word	0x08022630
 800ff28:	08022644 	.word	0x08022644
 800ff2c:	08022658 	.word	0x08022658
 800ff30:	20001b3a 	.word	0x20001b3a
 800ff34:	20001b3b 	.word	0x20001b3b
 800ff38:	200012cc 	.word	0x200012cc
 800ff3c:	20001579 	.word	0x20001579
 800ff40:	2000157a 	.word	0x2000157a
 800ff44:	080226a0 	.word	0x080226a0
 800ff48:	20000029 	.word	0x20000029

0800ff4c <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Interval is Set to: %ldmin", _Flash_Packet.Time_Interval);
 800ff58:	4b05      	ldr	r3, [pc, #20]	@ (800ff70 <GetInterval+0x24>)
 800ff5a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ff5e:	461a      	mov	r2, r3
 800ff60:	4904      	ldr	r1, [pc, #16]	@ (800ff74 <GetInterval+0x28>)
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f7ff faca 	bl	800f4fc <cli_printf>

}
 800ff68:	bf00      	nop
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}
 800ff70:	200012cc 	.word	0x200012cc
 800ff74:	080226bc 	.word	0x080226bc

0800ff78 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b09a      	sub	sp, #104	@ 0x68
 800ff7c:	af02      	add	r7, sp, #8
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800ff84:	4b40      	ldr	r3, [pc, #256]	@ (8010088 <SetFilename+0x110>)
 800ff86:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800ff88:	4940      	ldr	r1, [pc, #256]	@ (801008c <SetFilename+0x114>)
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f7ff fab6 	bl	800f4fc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ff90:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ff92:	f7f0 f985 	bl	80002a0 <strlen>
 800ff96:	4603      	mov	r3, r0
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff9e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ffa0:	483b      	ldr	r0, [pc, #236]	@ (8010090 <SetFilename+0x118>)
 800ffa2:	f7fc f949 	bl	800c238 <HAL_UART_Transmit>
			1000);
	cli_printf(cli,
 800ffa6:	493b      	ldr	r1, [pc, #236]	@ (8010094 <SetFilename+0x11c>)
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f7ff faa7 	bl	800f4fc <cli_printf>
			"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
	cli_printf(cli,
 800ffae:	493a      	ldr	r1, [pc, #232]	@ (8010098 <SetFilename+0x120>)
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f7ff faa3 	bl	800f4fc <cli_printf>
			"If any special characters they will be omitted automatically.");

	cli_other = 1;
 800ffb6:	4b39      	ldr	r3, [pc, #228]	@ (801009c <SetFilename+0x124>)
 800ffb8:	2201      	movs	r2, #1
 800ffba:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ffbc:	4b38      	ldr	r3, [pc, #224]	@ (80100a0 <SetFilename+0x128>)
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800ffc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ffc6:	2232      	movs	r2, #50	@ 0x32
 800ffc8:	4619      	mov	r1, r3
 800ffca:	68f8      	ldr	r0, [r7, #12]
 800ffcc:	f7ff fad8 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ffd0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ffd2:	f7f0 f965 	bl	80002a0 <strlen>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	b29a      	uxth	r2, r3
 800ffda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffde:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ffe0:	482b      	ldr	r0, [pc, #172]	@ (8010090 <SetFilename+0x118>)
 800ffe2:	f7fc f929 	bl	800c238 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800ffe6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7f0 f958 	bl	80002a0 <strlen>
 800fff0:	4603      	mov	r3, r0
 800fff2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (len < 20) {
 800fff6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800fffa:	2b13      	cmp	r3, #19
 800fffc:	d836      	bhi.n	801006c <SetFilename+0xf4>
		if (buffer[0] != '\0') {
 800fffe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010002:	2b00      	cmp	r3, #0
 8010004:	d036      	beq.n	8010074 <SetFilename+0xfc>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.File_Name, buffer);
 8010006:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801000a:	4619      	mov	r1, r3
 801000c:	4825      	ldr	r0, [pc, #148]	@ (80100a4 <SetFilename+0x12c>)
 801000e:	f00e ff30 	bl	801ee72 <strcpy>
				set_param_flags();
 8010012:	4b25      	ldr	r3, [pc, #148]	@ (80100a8 <SetFilename+0x130>)
 8010014:	2201      	movs	r2, #1
 8010016:	701a      	strb	r2, [r3, #0]
 8010018:	4b24      	ldr	r3, [pc, #144]	@ (80100ac <SetFilename+0x134>)
 801001a:	2201      	movs	r2, #1
 801001c:	701a      	strb	r2, [r3, #0]
				_RunTime_Packet.filename_changed = 1;
 801001e:	4b24      	ldr	r3, [pc, #144]	@ (80100b0 <SetFilename+0x138>)
 8010020:	2201      	movs	r2, #1
 8010022:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				cli_printf(cli, "Filename is set to: %s",
 8010026:	4a1f      	ldr	r2, [pc, #124]	@ (80100a4 <SetFilename+0x12c>)
 8010028:	4922      	ldr	r1, [pc, #136]	@ (80100b4 <SetFilename+0x13c>)
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f7ff fa66 	bl	800f4fc <cli_printf>
						_Flash_Packet.File_Name);

				RTC_DateTypeDef sDate;
				HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8010030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010034:	2200      	movs	r2, #0
 8010036:	4619      	mov	r1, r3
 8010038:	481f      	ldr	r0, [pc, #124]	@ (80100b8 <SetFilename+0x140>)
 801003a:	f7f9 fd7c 	bl	8009b36 <HAL_RTC_GetDate>
				RTC_TimeTypeDef sTime;
				HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801003e:	f107 0310 	add.w	r3, r7, #16
 8010042:	2200      	movs	r2, #0
 8010044:	4619      	mov	r1, r3
 8010046:	481c      	ldr	r0, [pc, #112]	@ (80100b8 <SetFilename+0x140>)
 8010048:	f7f9 fc93 	bl	8009972 <HAL_RTC_GetTime>


				sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", _Flash_Packet.File_Name, sDate.Year,sDate.Month, sDate.Date);
 801004c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010050:	4619      	mov	r1, r3
 8010052:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010056:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801005a:	9201      	str	r2, [sp, #4]
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	460b      	mov	r3, r1
 8010060:	4a10      	ldr	r2, [pc, #64]	@ (80100a4 <SetFilename+0x12c>)
 8010062:	4916      	ldr	r1, [pc, #88]	@ (80100bc <SetFilename+0x144>)
 8010064:	4816      	ldr	r0, [pc, #88]	@ (80100c0 <SetFilename+0x148>)
 8010066:	f00e fcab 	bl	801e9c0 <siprintf>
 801006a:	e003      	b.n	8010074 <SetFilename+0xfc>
			}
		}
	} else {
		cli_printf(cli, "Filename is too long");
 801006c:	4915      	ldr	r1, [pc, #84]	@ (80100c4 <SetFilename+0x14c>)
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	f7ff fa44 	bl	800f4fc <cli_printf>
	}

	flag_cli = 0;
 8010074:	4b0a      	ldr	r3, [pc, #40]	@ (80100a0 <SetFilename+0x128>)
 8010076:	2200      	movs	r2, #0
 8010078:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801007a:	4b08      	ldr	r3, [pc, #32]	@ (801009c <SetFilename+0x124>)
 801007c:	2200      	movs	r2, #0
 801007e:	701a      	strb	r2, [r3, #0]

}
 8010080:	bf00      	nop
 8010082:	3760      	adds	r7, #96	@ 0x60
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	0802230c 	.word	0x0802230c
 801008c:	08022380 	.word	0x08022380
 8010090:	20001a74 	.word	0x20001a74
 8010094:	080226d8 	.word	0x080226d8
 8010098:	0802274c 	.word	0x0802274c
 801009c:	20001b3a 	.word	0x20001b3a
 80100a0:	20001b3b 	.word	0x20001b3b
 80100a4:	200012cc 	.word	0x200012cc
 80100a8:	20001579 	.word	0x20001579
 80100ac:	2000157a 	.word	0x2000157a
 80100b0:	20001530 	.word	0x20001530
 80100b4:	0802278c 	.word	0x0802278c
 80100b8:	20001898 	.word	0x20001898
 80100bc:	080227a4 	.word	0x080227a4
 80100c0:	200014c5 	.word	0x200014c5
 80100c4:	080227b8 	.word	0x080227b8

080100c8 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Filename is set to: %s", _Flash_Packet.filename_ver_date);
 80100d4:	4a04      	ldr	r2, [pc, #16]	@ (80100e8 <GetFilename+0x20>)
 80100d6:	4905      	ldr	r1, [pc, #20]	@ (80100ec <GetFilename+0x24>)
 80100d8:	68f8      	ldr	r0, [r7, #12]
 80100da:	f7ff fa0f 	bl	800f4fc <cli_printf>

}
 80100de:	bf00      	nop
 80100e0:	3710      	adds	r7, #16
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	200014c5 	.word	0x200014c5
 80100ec:	0802278c 	.word	0x0802278c

080100f0 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b092      	sub	sp, #72	@ 0x48
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 80100fc:	4b41      	ldr	r3, [pc, #260]	@ (8010204 <SetFileformat+0x114>)
 80100fe:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010100:	4941      	ldr	r1, [pc, #260]	@ (8010208 <SetFileformat+0x118>)
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f7ff f9fa 	bl	800f4fc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010108:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801010a:	f7f0 f8c9 	bl	80002a0 <strlen>
 801010e:	4603      	mov	r3, r0
 8010110:	b29a      	uxth	r2, r3
 8010112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010116:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010118:	483c      	ldr	r0, [pc, #240]	@ (801020c <SetFileformat+0x11c>)
 801011a:	f7fc f88d 	bl	800c238 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Following file formats are allowed:");
 801011e:	493c      	ldr	r1, [pc, #240]	@ (8010210 <SetFileformat+0x120>)
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f7ff f9eb 	bl	800f4fc <cli_printf>
	cli_printf(cli, "1. (.csv)");
 8010126:	493b      	ldr	r1, [pc, #236]	@ (8010214 <SetFileformat+0x124>)
 8010128:	68f8      	ldr	r0, [r7, #12]
 801012a:	f7ff f9e7 	bl	800f4fc <cli_printf>
	cli_printf(cli, "2. (.json)");
 801012e:	493a      	ldr	r1, [pc, #232]	@ (8010218 <SetFileformat+0x128>)
 8010130:	68f8      	ldr	r0, [r7, #12]
 8010132:	f7ff f9e3 	bl	800f4fc <cli_printf>
	cli_printf(cli, "Enter the number to select your desired format");
 8010136:	4939      	ldr	r1, [pc, #228]	@ (801021c <SetFileformat+0x12c>)
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f7ff f9df 	bl	800f4fc <cli_printf>

	cli_other = 1;
 801013e:	4b38      	ldr	r3, [pc, #224]	@ (8010220 <SetFileformat+0x130>)
 8010140:	2201      	movs	r2, #1
 8010142:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010144:	4b37      	ldr	r3, [pc, #220]	@ (8010224 <SetFileformat+0x134>)
 8010146:	2200      	movs	r2, #0
 8010148:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 801014a:	f107 0310 	add.w	r3, r7, #16
 801014e:	2232      	movs	r2, #50	@ 0x32
 8010150:	4619      	mov	r1, r3
 8010152:	68f8      	ldr	r0, [r7, #12]
 8010154:	f7ff fa14 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010158:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801015a:	f7f0 f8a1 	bl	80002a0 <strlen>
 801015e:	4603      	mov	r3, r0
 8010160:	b29a      	uxth	r2, r3
 8010162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010166:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010168:	4828      	ldr	r0, [pc, #160]	@ (801020c <SetFileformat+0x11c>)
 801016a:	f7fc f865 	bl	800c238 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 801016e:	f107 0310 	add.w	r3, r7, #16
 8010172:	2131      	movs	r1, #49	@ 0x31
 8010174:	4618      	mov	r0, r3
 8010176:	f00e fd75 	bl	801ec64 <strchr>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d014      	beq.n	80101aa <SetFileformat+0xba>
		strcpy(_Flash_Packet.File_Format, ".CSV");
 8010180:	4b29      	ldr	r3, [pc, #164]	@ (8010228 <SetFileformat+0x138>)
 8010182:	4a2a      	ldr	r2, [pc, #168]	@ (801022c <SetFileformat+0x13c>)
 8010184:	6810      	ldr	r0, [r2, #0]
 8010186:	6018      	str	r0, [r3, #0]
 8010188:	7912      	ldrb	r2, [r2, #4]
 801018a:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 801018c:	4b28      	ldr	r3, [pc, #160]	@ (8010230 <SetFileformat+0x140>)
 801018e:	2201      	movs	r2, #1
 8010190:	701a      	strb	r2, [r3, #0]
 8010192:	4b28      	ldr	r3, [pc, #160]	@ (8010234 <SetFileformat+0x144>)
 8010194:	2201      	movs	r2, #1
 8010196:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 8010198:	4b27      	ldr	r3, [pc, #156]	@ (8010238 <SetFileformat+0x148>)
 801019a:	2201      	movs	r2, #1
 801019c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 1;
 80101a0:	4b25      	ldr	r3, [pc, #148]	@ (8010238 <SetFileformat+0x148>)
 80101a2:	2201      	movs	r2, #1
 80101a4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80101a8:	e01c      	b.n	80101e4 <SetFileformat+0xf4>
	} else if (strstr(buffer, "2")) {
 80101aa:	f107 0310 	add.w	r3, r7, #16
 80101ae:	2132      	movs	r1, #50	@ 0x32
 80101b0:	4618      	mov	r0, r3
 80101b2:	f00e fd57 	bl	801ec64 <strchr>
 80101b6:	4603      	mov	r3, r0
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d013      	beq.n	80101e4 <SetFileformat+0xf4>
		strcpy(_Flash_Packet.File_Format, ".JSON");
 80101bc:	4b1a      	ldr	r3, [pc, #104]	@ (8010228 <SetFileformat+0x138>)
 80101be:	4a1f      	ldr	r2, [pc, #124]	@ (801023c <SetFileformat+0x14c>)
 80101c0:	6810      	ldr	r0, [r2, #0]
 80101c2:	6018      	str	r0, [r3, #0]
 80101c4:	8892      	ldrh	r2, [r2, #4]
 80101c6:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 80101c8:	4b19      	ldr	r3, [pc, #100]	@ (8010230 <SetFileformat+0x140>)
 80101ca:	2201      	movs	r2, #1
 80101cc:	701a      	strb	r2, [r3, #0]
 80101ce:	4b19      	ldr	r3, [pc, #100]	@ (8010234 <SetFileformat+0x144>)
 80101d0:	2201      	movs	r2, #1
 80101d2:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 80101d4:	4b18      	ldr	r3, [pc, #96]	@ (8010238 <SetFileformat+0x148>)
 80101d6:	2201      	movs	r2, #1
 80101d8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 0;
 80101dc:	4b16      	ldr	r3, [pc, #88]	@ (8010238 <SetFileformat+0x148>)
 80101de:	2200      	movs	r2, #0
 80101e0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	}

	flag_cli = 0;
 80101e4:	4b0f      	ldr	r3, [pc, #60]	@ (8010224 <SetFileformat+0x134>)
 80101e6:	2200      	movs	r2, #0
 80101e8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80101ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010220 <SetFileformat+0x130>)
 80101ec:	2200      	movs	r2, #0
 80101ee:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 80101f0:	4a0d      	ldr	r2, [pc, #52]	@ (8010228 <SetFileformat+0x138>)
 80101f2:	4913      	ldr	r1, [pc, #76]	@ (8010240 <SetFileformat+0x150>)
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f7ff f981 	bl	800f4fc <cli_printf>

}
 80101fa:	bf00      	nop
 80101fc:	3748      	adds	r7, #72	@ 0x48
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop
 8010204:	0802230c 	.word	0x0802230c
 8010208:	08022380 	.word	0x08022380
 801020c:	20001a74 	.word	0x20001a74
 8010210:	080227d0 	.word	0x080227d0
 8010214:	080227f4 	.word	0x080227f4
 8010218:	08022800 	.word	0x08022800
 801021c:	0802280c 	.word	0x0802280c
 8010220:	20001b3a 	.word	0x20001b3a
 8010224:	20001b3b 	.word	0x20001b3b
 8010228:	20001330 	.word	0x20001330
 801022c:	0802283c 	.word	0x0802283c
 8010230:	20001579 	.word	0x20001579
 8010234:	2000157a 	.word	0x2000157a
 8010238:	20001530 	.word	0x20001530
 801023c:	08022844 	.word	0x08022844
 8010240:	0802284c 	.word	0x0802284c

08010244 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 8010250:	4a04      	ldr	r2, [pc, #16]	@ (8010264 <GetFileformat+0x20>)
 8010252:	4905      	ldr	r1, [pc, #20]	@ (8010268 <GetFileformat+0x24>)
 8010254:	68f8      	ldr	r0, [r7, #12]
 8010256:	f7ff f951 	bl	800f4fc <cli_printf>

}
 801025a:	bf00      	nop
 801025c:	3710      	adds	r7, #16
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	20001330 	.word	0x20001330
 8010268:	0802284c 	.word	0x0802284c

0801026c <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 801026c:	b580      	push	{r7, lr}
 801026e:	b096      	sub	sp, #88	@ 0x58
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 8010278:	4b48      	ldr	r3, [pc, #288]	@ (801039c <fanclean+0x130>)
 801027a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int counter = 0;
 801027c:	2300      	movs	r3, #0
 801027e:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010280:	4b47      	ldr	r3, [pc, #284]	@ (80103a0 <fanclean+0x134>)
 8010282:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010284:	2300      	movs	r3, #0
 8010286:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_printf(cli,
 801028a:	4946      	ldr	r1, [pc, #280]	@ (80103a4 <fanclean+0x138>)
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	f7ff f935 	bl	800f4fc <cli_printf>
			"Do you want to initiate particle sensor fan-cleaning? y/n?");

	cli_other = 1;
 8010292:	4b45      	ldr	r3, [pc, #276]	@ (80103a8 <fanclean+0x13c>)
 8010294:	2201      	movs	r2, #1
 8010296:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010298:	4b44      	ldr	r3, [pc, #272]	@ (80103ac <fanclean+0x140>)
 801029a:	2200      	movs	r2, #0
 801029c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 801029e:	f107 0314 	add.w	r3, r7, #20
 80102a2:	2232      	movs	r2, #50	@ 0x32
 80102a4:	4619      	mov	r1, r3
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f7ff f96a 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80102ac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80102ae:	f7ef fff7 	bl	80002a0 <strlen>
 80102b2:	4603      	mov	r3, r0
 80102b4:	b29a      	uxth	r2, r3
 80102b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80102ba:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80102bc:	483c      	ldr	r0, [pc, #240]	@ (80103b0 <fanclean+0x144>)
 80102be:	f7fb ffbb 	bl	800c238 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "n")) {
 80102c2:	f107 0314 	add.w	r3, r7, #20
 80102c6:	216e      	movs	r1, #110	@ 0x6e
 80102c8:	4618      	mov	r0, r3
 80102ca:	f00e fccb 	bl	801ec64 <strchr>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d00f      	beq.n	80102f4 <fanclean+0x88>
		_Flash_Packet.Calibration_Status = 0;
 80102d4:	4b37      	ldr	r3, [pc, #220]	@ (80103b4 <fanclean+0x148>)
 80102d6:	2200      	movs	r2, #0
 80102d8:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
		_RunTime_Packet.PM_calibration = 1;
 80102dc:	4b36      	ldr	r3, [pc, #216]	@ (80103b8 <fanclean+0x14c>)
 80102de:	2201      	movs	r2, #1
 80102e0:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		cli_printf(cli, "Particle sensor fan-cleaning aborted.");
 80102e4:	4935      	ldr	r1, [pc, #212]	@ (80103bc <fanclean+0x150>)
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f7ff f908 	bl	800f4fc <cli_printf>
		//set_param_flags();
		do_Calibration = 0;
 80102ec:	2300      	movs	r3, #0
 80102ee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80102f2:	e00f      	b.n	8010314 <fanclean+0xa8>
	} else if (strstr(buffer, "y")) {
 80102f4:	f107 0314 	add.w	r3, r7, #20
 80102f8:	2179      	movs	r1, #121	@ 0x79
 80102fa:	4618      	mov	r0, r3
 80102fc:	f00e fcb2 	bl	801ec64 <strchr>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d006      	beq.n	8010314 <fanclean+0xa8>
		_RunTime_Packet.PM_calibration = 0;
 8010306:	4b2c      	ldr	r3, [pc, #176]	@ (80103b8 <fanclean+0x14c>)
 8010308:	2200      	movs	r2, #0
 801030a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		do_Calibration = 1;
 801030e:	2301      	movs	r3, #1
 8010310:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 8010314:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8010318:	2b01      	cmp	r3, #1
 801031a:	d135      	bne.n	8010388 <fanclean+0x11c>

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801031c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801031e:	f7ef ffbf 	bl	80002a0 <strlen>
 8010322:	4603      	mov	r3, r0
 8010324:	b29a      	uxth	r2, r3
 8010326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801032a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801032c:	4820      	ldr	r0, [pc, #128]	@ (80103b0 <fanclean+0x144>)
 801032e:	f7fb ff83 	bl	800c238 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Particle sensor fan-cleaning initiated, please wait.");
 8010332:	4923      	ldr	r1, [pc, #140]	@ (80103c0 <fanclean+0x154>)
 8010334:	68f8      	ldr	r0, [r7, #12]
 8010336:	f7ff f8e1 	bl	800f4fc <cli_printf>
		while (counter < 8) {
 801033a:	e013      	b.n	8010364 <fanclean+0xf8>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 801033c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801033e:	f7ef ffaf 	bl	80002a0 <strlen>
 8010342:	4603      	mov	r3, r0
 8010344:	b29a      	uxth	r2, r3
 8010346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801034a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801034c:	4818      	ldr	r0, [pc, #96]	@ (80103b0 <fanclean+0x144>)
 801034e:	f7fb ff73 	bl	800c238 <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 8010352:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8010356:	f7f3 fedb 	bl	8004110 <HAL_Delay>
			toggle_blue_led();
 801035a:	f7f0 feaf 	bl	80010bc <toggle_blue_led>
			counter++;
 801035e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010360:	3301      	adds	r3, #1
 8010362:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 8010364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010366:	2b07      	cmp	r3, #7
 8010368:	dde8      	ble.n	801033c <fanclean+0xd0>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801036a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801036c:	f7ef ff98 	bl	80002a0 <strlen>
 8010370:	4603      	mov	r3, r0
 8010372:	b29a      	uxth	r2, r3
 8010374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010378:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801037a:	480d      	ldr	r0, [pc, #52]	@ (80103b0 <fanclean+0x144>)
 801037c:	f7fb ff5c 	bl	800c238 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "fan-cleaning done.");
 8010380:	4910      	ldr	r1, [pc, #64]	@ (80103c4 <fanclean+0x158>)
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f7ff f8ba 	bl	800f4fc <cli_printf>

	}

	flag_cli = 0;
 8010388:	4b08      	ldr	r3, [pc, #32]	@ (80103ac <fanclean+0x140>)
 801038a:	2200      	movs	r2, #0
 801038c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801038e:	4b06      	ldr	r3, [pc, #24]	@ (80103a8 <fanclean+0x13c>)
 8010390:	2200      	movs	r2, #0
 8010392:	701a      	strb	r2, [r3, #0]
}
 8010394:	bf00      	nop
 8010396:	3758      	adds	r7, #88	@ 0x58
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	0802230c 	.word	0x0802230c
 80103a0:	08022868 	.word	0x08022868
 80103a4:	08022874 	.word	0x08022874
 80103a8:	20001b3a 	.word	0x20001b3a
 80103ac:	20001b3b 	.word	0x20001b3b
 80103b0:	20001a74 	.word	0x20001a74
 80103b4:	200012cc 	.word	0x200012cc
 80103b8:	20001530 	.word	0x20001530
 80103bc:	080228b0 	.word	0x080228b0
 80103c0:	080228d8 	.word	0x080228d8
 80103c4:	08022910 	.word	0x08022910

080103c8 <co2calibrate>:

void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b096      	sub	sp, #88	@ 0x58
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 80103d4:	4b55      	ldr	r3, [pc, #340]	@ (801052c <co2calibrate+0x164>)
 80103d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 80103d8:	2300      	movs	r3, #0
 80103da:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 80103dc:	4b54      	ldr	r3, [pc, #336]	@ (8010530 <co2calibrate+0x168>)
 80103de:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 80103e0:	2300      	movs	r3, #0
 80103e2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	cli_other = 1;
 80103e6:	4b53      	ldr	r3, [pc, #332]	@ (8010534 <co2calibrate+0x16c>)
 80103e8:	2201      	movs	r2, #1
 80103ea:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 80103ec:	4b52      	ldr	r3, [pc, #328]	@ (8010538 <co2calibrate+0x170>)
 80103ee:	2200      	movs	r2, #0
 80103f0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 80103f2:	f107 0310 	add.w	r3, r7, #16
 80103f6:	2232      	movs	r2, #50	@ 0x32
 80103f8:	2100      	movs	r1, #0
 80103fa:	4618      	mov	r0, r3
 80103fc:	f00e fc2a 	bl	801ec54 <memset>
	cli_printf(cli,
 8010400:	494e      	ldr	r1, [pc, #312]	@ (801053c <co2calibrate+0x174>)
 8010402:	68f8      	ldr	r0, [r7, #12]
 8010404:	f7ff f87a 	bl	800f4fc <cli_printf>
			"To calibrate Co2 sensor, please provide Co2 concentration value.");
	cli_printf(cli,
 8010408:	494d      	ldr	r1, [pc, #308]	@ (8010540 <co2calibrate+0x178>)
 801040a:	68f8      	ldr	r0, [r7, #12]
 801040c:	f7ff f876 	bl	800f4fc <cli_printf>
			"If Co2 concentration is unknown then just press enter to cancel the calibration.");

	receiveString(cli, buffer, sizeof(buffer));
 8010410:	f107 0310 	add.w	r3, r7, #16
 8010414:	2232      	movs	r2, #50	@ 0x32
 8010416:	4619      	mov	r1, r3
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	f7ff f8b1 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801041e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010420:	f7ef ff3e 	bl	80002a0 <strlen>
 8010424:	4603      	mov	r3, r0
 8010426:	b29a      	uxth	r2, r3
 8010428:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801042c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801042e:	4845      	ldr	r0, [pc, #276]	@ (8010544 <co2calibrate+0x17c>)
 8010430:	f7fb ff02 	bl	800c238 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8010434:	7c3b      	ldrb	r3, [r7, #16]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d01e      	beq.n	8010478 <co2calibrate+0xb0>
		_RunTime_Packet.CO2_calibration = 1;
 801043a:	4b43      	ldr	r3, [pc, #268]	@ (8010548 <co2calibrate+0x180>)
 801043c:	2201      	movs	r2, #1
 801043e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

		val = atoi(buffer);
 8010442:	f107 0310 	add.w	r3, r7, #16
 8010446:	4618      	mov	r0, r3
 8010448:	f00d f982 	bl	801d750 <atoi>
 801044c:	4603      	mov	r3, r0
 801044e:	647b      	str	r3, [r7, #68]	@ 0x44

		if (val < 65535) {
 8010450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010452:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010456:	4293      	cmp	r3, r2
 8010458:	d803      	bhi.n	8010462 <co2calibrate+0x9a>
			_RunTime_Packet._target_co2_concentration = val;
 801045a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801045c:	b29a      	uxth	r2, r3
 801045e:	4b3a      	ldr	r3, [pc, #232]	@ (8010548 <co2calibrate+0x180>)
 8010460:	879a      	strh	r2, [r3, #60]	@ 0x3c
		}

		cli_printf(cli,
				"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
				_RunTime_Packet._target_co2_concentration);
 8010462:	4b39      	ldr	r3, [pc, #228]	@ (8010548 <co2calibrate+0x180>)
 8010464:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
		cli_printf(cli,
 8010466:	461a      	mov	r2, r3
 8010468:	4938      	ldr	r1, [pc, #224]	@ (801054c <co2calibrate+0x184>)
 801046a:	68f8      	ldr	r0, [r7, #12]
 801046c:	f7ff f846 	bl	800f4fc <cli_printf>
		do_Calibration = 1;
 8010470:	2301      	movs	r3, #1
 8010472:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010476:	e00a      	b.n	801048e <co2calibrate+0xc6>
	} else {
		cli_printf(cli, "Co2 sensor Calibration aborted.");
 8010478:	4935      	ldr	r1, [pc, #212]	@ (8010550 <co2calibrate+0x188>)
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	f7ff f83e 	bl	800f4fc <cli_printf>
		_RunTime_Packet.CO2_calibration = 0;
 8010480:	4b31      	ldr	r3, [pc, #196]	@ (8010548 <co2calibrate+0x180>)
 8010482:	2200      	movs	r2, #0
 8010484:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		do_Calibration = 0;
 8010488:	2300      	movs	r3, #0
 801048a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 801048e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8010492:	2b01      	cmp	r3, #1
 8010494:	d13f      	bne.n	8010516 <co2calibrate+0x14e>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010496:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010498:	f7ef ff02 	bl	80002a0 <strlen>
 801049c:	4603      	mov	r3, r0
 801049e:	b29a      	uxth	r2, r3
 80104a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104a4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80104a6:	4827      	ldr	r0, [pc, #156]	@ (8010544 <co2calibrate+0x17c>)
 80104a8:	f7fb fec6 	bl	800c238 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Co2 is calibrating, please wait.");
 80104ac:	4929      	ldr	r1, [pc, #164]	@ (8010554 <co2calibrate+0x18c>)
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f7ff f824 	bl	800f4fc <cli_printf>
		if (!_RunTime_Packet.scd4x_i2c_error) {
 80104b4:	4b24      	ldr	r3, [pc, #144]	@ (8010548 <co2calibrate+0x180>)
 80104b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d119      	bne.n	80104f2 <co2calibrate+0x12a>
#ifdef use_scd40x
			scd4x_perform_forced_recalibration(
					_RunTime_Packet._target_co2_concentration,
					&_RunTime_Packet._frc_correction);
#elif use_scd30
		scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 80104be:	4b22      	ldr	r3, [pc, #136]	@ (8010548 <co2calibrate+0x180>)
 80104c0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80104c2:	4618      	mov	r0, r3
 80104c4:	f004 f8ee 	bl	80146a4 <scd30_force_recalibration>
#endif
		}
		while (counter < 8) {
 80104c8:	e013      	b.n	80104f2 <co2calibrate+0x12a>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 80104ca:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80104cc:	f7ef fee8 	bl	80002a0 <strlen>
 80104d0:	4603      	mov	r3, r0
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104d8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80104da:	481a      	ldr	r0, [pc, #104]	@ (8010544 <co2calibrate+0x17c>)
 80104dc:	f7fb feac 	bl	800c238 <HAL_UART_Transmit>
					1000);
			HAL_Delay(1000);
 80104e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80104e4:	f7f3 fe14 	bl	8004110 <HAL_Delay>
			toggle_blue_led();
 80104e8:	f7f0 fde8 	bl	80010bc <toggle_blue_led>
			counter++;
 80104ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104ee:	3301      	adds	r3, #1
 80104f0:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 80104f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104f4:	2b07      	cmp	r3, #7
 80104f6:	dde8      	ble.n	80104ca <co2calibrate+0x102>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80104f8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80104fa:	f7ef fed1 	bl	80002a0 <strlen>
 80104fe:	4603      	mov	r3, r0
 8010500:	b29a      	uxth	r2, r3
 8010502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010506:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010508:	480e      	ldr	r0, [pc, #56]	@ (8010544 <co2calibrate+0x17c>)
 801050a:	f7fb fe95 	bl	800c238 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Sensor calibration done.");
 801050e:	4912      	ldr	r1, [pc, #72]	@ (8010558 <co2calibrate+0x190>)
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	f7fe fff3 	bl	800f4fc <cli_printf>
	}

	flag_cli = 0;
 8010516:	4b08      	ldr	r3, [pc, #32]	@ (8010538 <co2calibrate+0x170>)
 8010518:	2200      	movs	r2, #0
 801051a:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801051c:	4b05      	ldr	r3, [pc, #20]	@ (8010534 <co2calibrate+0x16c>)
 801051e:	2200      	movs	r2, #0
 8010520:	701a      	strb	r2, [r3, #0]
}
 8010522:	bf00      	nop
 8010524:	3758      	adds	r7, #88	@ 0x58
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	0802230c 	.word	0x0802230c
 8010530:	08022868 	.word	0x08022868
 8010534:	20001b3a 	.word	0x20001b3a
 8010538:	20001b3b 	.word	0x20001b3b
 801053c:	08022924 	.word	0x08022924
 8010540:	08022968 	.word	0x08022968
 8010544:	20001a74 	.word	0x20001a74
 8010548:	20001530 	.word	0x20001530
 801054c:	080229bc 	.word	0x080229bc
 8010550:	08022a0c 	.word	0x08022a0c
 8010554:	08022a2c 	.word	0x08022a2c
 8010558:	08022a50 	.word	0x08022a50

0801055c <statco2calibrate>:


void statco2calibrate(EmbeddedCli *cli, char *args, void *context)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b08a      	sub	sp, #40	@ 0x28
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]

	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_force_recalibration_status(&calib_val);
 8010568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801056c:	4618      	mov	r0, r3
 801056e:	f004 f8d7 	bl	8014720 <scd30_get_force_recalibration_status>
 8010572:	4603      	mov	r3, r0
 8010574:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 8010576:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801057a:	2b00      	cmp	r3, #0
 801057c:	d107      	bne.n	801058e <statco2calibrate+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 801057e:	f107 0310 	add.w	r3, r7, #16
 8010582:	4a0f      	ldr	r2, [pc, #60]	@ (80105c0 <statco2calibrate+0x64>)
 8010584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010588:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 801058c:	e007      	b.n	801059e <statco2calibrate+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 801058e:	f107 0310 	add.w	r3, r7, #16
 8010592:	4a0c      	ldr	r2, [pc, #48]	@ (80105c4 <statco2calibrate+0x68>)
 8010594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010598:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 801059c:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 801059e:	f107 0310 	add.w	r3, r7, #16
 80105a2:	461a      	mov	r2, r3
 80105a4:	4908      	ldr	r1, [pc, #32]	@ (80105c8 <statco2calibrate+0x6c>)
 80105a6:	68f8      	ldr	r0, [r7, #12]
 80105a8:	f7fe ffa8 	bl	800f4fc <cli_printf>
	cli_printf(cli, "Calibration Value: %d",calib_val);
 80105ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105ae:	461a      	mov	r2, r3
 80105b0:	4906      	ldr	r1, [pc, #24]	@ (80105cc <statco2calibrate+0x70>)
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	f7fe ffa2 	bl	800f4fc <cli_printf>



}
 80105b8:	bf00      	nop
 80105ba:	3728      	adds	r7, #40	@ 0x28
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	08022a6c 	.word	0x08022a6c
 80105c4:	08022a74 	.word	0x08022a74
 80105c8:	08022a7c 	.word	0x08022a7c
 80105cc:	08022a94 	.word	0x08022a94

080105d0 <co2_auto_calibration>:


void co2_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b094      	sub	sp, #80	@ 0x50
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]

	uint16_t calib;
	const char *newLine = "\r\n";
 80105dc:	4b28      	ldr	r3, [pc, #160]	@ (8010680 <co2_auto_calibration+0xb0>)
 80105de:	64bb      	str	r3, [r7, #72]	@ 0x48
		cli_printf(cli, "Enter \"y\" to enable auto calibration!");
 80105e0:	4928      	ldr	r1, [pc, #160]	@ (8010684 <co2_auto_calibration+0xb4>)
 80105e2:	68f8      	ldr	r0, [r7, #12]
 80105e4:	f7fe ff8a 	bl	800f4fc <cli_printf>
		cli_printf(cli, "Enter \"n\" to disable auto calibration!");
 80105e8:	4927      	ldr	r1, [pc, #156]	@ (8010688 <co2_auto_calibration+0xb8>)
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	f7fe ff86 	bl	800f4fc <cli_printf>



		cli_other = 1;
 80105f0:	4b26      	ldr	r3, [pc, #152]	@ (801068c <co2_auto_calibration+0xbc>)
 80105f2:	2201      	movs	r2, #1
 80105f4:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 80105f6:	4b26      	ldr	r3, [pc, #152]	@ (8010690 <co2_auto_calibration+0xc0>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli, buffer, sizeof(buffer));
 80105fc:	f107 0314 	add.w	r3, r7, #20
 8010600:	2232      	movs	r2, #50	@ 0x32
 8010602:	4619      	mov	r1, r3
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	f7fe ffbb 	bl	800f580 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801060a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801060c:	f7ef fe48 	bl	80002a0 <strlen>
 8010610:	4603      	mov	r3, r0
 8010612:	b29a      	uxth	r2, r3
 8010614:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010618:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801061a:	481e      	ldr	r0, [pc, #120]	@ (8010694 <co2_auto_calibration+0xc4>)
 801061c:	f7fb fe0c 	bl	800c238 <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010620:	f107 0314 	add.w	r3, r7, #20
 8010624:	2179      	movs	r1, #121	@ 0x79
 8010626:	4618      	mov	r0, r3
 8010628:	f00e fb1c 	bl	801ec64 <strchr>
 801062c:	4603      	mov	r3, r0
 801062e:	2b00      	cmp	r3, #0
 8010630:	d007      	beq.n	8010642 <co2_auto_calibration+0x72>
			calib = 1;
 8010632:	2301      	movs	r3, #1
 8010634:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

			cli_printf(cli, "Auto calibration enabled");
 8010638:	4917      	ldr	r1, [pc, #92]	@ (8010698 <co2_auto_calibration+0xc8>)
 801063a:	68f8      	ldr	r0, [r7, #12]
 801063c:	f7fe ff5e 	bl	800f4fc <cli_printf>
 8010640:	e00f      	b.n	8010662 <co2_auto_calibration+0x92>
		} else if (strstr(buffer, "n")) {
 8010642:	f107 0314 	add.w	r3, r7, #20
 8010646:	216e      	movs	r1, #110	@ 0x6e
 8010648:	4618      	mov	r0, r3
 801064a:	f00e fb0b 	bl	801ec64 <strchr>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d006      	beq.n	8010662 <co2_auto_calibration+0x92>
			calib = 0;
 8010654:	2300      	movs	r3, #0
 8010656:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			cli_printf(cli, "Auto calibration disabled");
 801065a:	4910      	ldr	r1, [pc, #64]	@ (801069c <co2_auto_calibration+0xcc>)
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f7fe ff4d 	bl	800f4fc <cli_printf>
		}

		flag_cli = 0;
 8010662:	4b0b      	ldr	r3, [pc, #44]	@ (8010690 <co2_auto_calibration+0xc0>)
 8010664:	2200      	movs	r2, #0
 8010666:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010668:	4b08      	ldr	r3, [pc, #32]	@ (801068c <co2_auto_calibration+0xbc>)
 801066a:	2200      	movs	r2, #0
 801066c:	701a      	strb	r2, [r3, #0]



	scd30_activate_auto_calibration(calib);
 801066e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010672:	4618      	mov	r0, r3
 8010674:	f003 ff88 	bl	8014588 <scd30_activate_auto_calibration>
}
 8010678:	bf00      	nop
 801067a:	3750      	adds	r7, #80	@ 0x50
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	0802230c 	.word	0x0802230c
 8010684:	08022aac 	.word	0x08022aac
 8010688:	08022ad4 	.word	0x08022ad4
 801068c:	20001b3a 	.word	0x20001b3a
 8010690:	20001b3b 	.word	0x20001b3b
 8010694:	20001a74 	.word	0x20001a74
 8010698:	08022afc 	.word	0x08022afc
 801069c:	08022b18 	.word	0x08022b18

080106a0 <get_auto_calibration>:


void get_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b08a      	sub	sp, #40	@ 0x28
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_auto_calibration_status(&calib_val);
 80106ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80106b0:	4618      	mov	r0, r3
 80106b2:	f003 ffa7 	bl	8014604 <scd30_get_auto_calibration_status>
 80106b6:	4603      	mov	r3, r0
 80106b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 80106ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d107      	bne.n	80106d2 <get_auto_calibration+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 80106c2:	f107 0310 	add.w	r3, r7, #16
 80106c6:	4a0f      	ldr	r2, [pc, #60]	@ (8010704 <get_auto_calibration+0x64>)
 80106c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106cc:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80106d0:	e007      	b.n	80106e2 <get_auto_calibration+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 80106d2:	f107 0310 	add.w	r3, r7, #16
 80106d6:	4a0c      	ldr	r2, [pc, #48]	@ (8010708 <get_auto_calibration+0x68>)
 80106d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106dc:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80106e0:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 80106e2:	f107 0310 	add.w	r3, r7, #16
 80106e6:	461a      	mov	r2, r3
 80106e8:	4908      	ldr	r1, [pc, #32]	@ (801070c <get_auto_calibration+0x6c>)
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f7fe ff06 	bl	800f4fc <cli_printf>
	cli_printf(cli, "Auto calibration active status: %d",calib_val);
 80106f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106f2:	461a      	mov	r2, r3
 80106f4:	4906      	ldr	r1, [pc, #24]	@ (8010710 <get_auto_calibration+0x70>)
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	f7fe ff00 	bl	800f4fc <cli_printf>
}
 80106fc:	bf00      	nop
 80106fe:	3728      	adds	r7, #40	@ 0x28
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	08022a6c 	.word	0x08022a6c
 8010708:	08022a74 	.word	0x08022a74
 801070c:	08022a7c 	.word	0x08022a7c
 8010710:	08022b34 	.word	0x08022b34

08010714 <set_co2_temp_offset>:

void set_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b096      	sub	sp, #88	@ 0x58
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010720:	4b53      	ldr	r3, [pc, #332]	@ (8010870 <set_co2_temp_offset+0x15c>)
 8010722:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010724:	2300      	movs	r3, #0
 8010726:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010728:	4b52      	ldr	r3, [pc, #328]	@ (8010874 <set_co2_temp_offset+0x160>)
 801072a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 801072c:	2300      	movs	r3, #0
 801072e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 8010732:	4b51      	ldr	r3, [pc, #324]	@ (8010878 <set_co2_temp_offset+0x164>)
 8010734:	2201      	movs	r2, #1
 8010736:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010738:	4b50      	ldr	r3, [pc, #320]	@ (801087c <set_co2_temp_offset+0x168>)
 801073a:	2200      	movs	r2, #0
 801073c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 801073e:	f107 0310 	add.w	r3, r7, #16
 8010742:	2232      	movs	r2, #50	@ 0x32
 8010744:	2100      	movs	r1, #0
 8010746:	4618      	mov	r0, r3
 8010748:	f00e fa84 	bl	801ec54 <memset>
		cli_printf(cli,
 801074c:	494c      	ldr	r1, [pc, #304]	@ (8010880 <set_co2_temp_offset+0x16c>)
 801074e:	68f8      	ldr	r0, [r7, #12]
 8010750:	f7fe fed4 	bl	800f4fc <cli_printf>
				"To calibrate Co2 sensor Temperature offset, please provide value.");
		cli_printf(cli,
 8010754:	494b      	ldr	r1, [pc, #300]	@ (8010884 <set_co2_temp_offset+0x170>)
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f7fe fed0 	bl	800f4fc <cli_printf>
				"If temperature offset is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 801075c:	f107 0310 	add.w	r3, r7, #16
 8010760:	2232      	movs	r2, #50	@ 0x32
 8010762:	4619      	mov	r1, r3
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	f7fe ff0b 	bl	800f580 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801076a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801076c:	f7ef fd98 	bl	80002a0 <strlen>
 8010770:	4603      	mov	r3, r0
 8010772:	b29a      	uxth	r2, r3
 8010774:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010778:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801077a:	4843      	ldr	r0, [pc, #268]	@ (8010888 <set_co2_temp_offset+0x174>)
 801077c:	f7fb fd5c 	bl	800c238 <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 8010780:	7c3b      	ldrb	r3, [r7, #16]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d01e      	beq.n	80107c4 <set_co2_temp_offset+0xb0>
			_RunTime_Packet.temp_offset = 1;
 8010786:	4b41      	ldr	r3, [pc, #260]	@ (801088c <set_co2_temp_offset+0x178>)
 8010788:	2201      	movs	r2, #1
 801078a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 801078e:	f107 0310 	add.w	r3, r7, #16
 8010792:	4618      	mov	r0, r3
 8010794:	f00c ffdc 	bl	801d750 <atoi>
 8010798:	4603      	mov	r3, r0
 801079a:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 801079c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801079e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d803      	bhi.n	80107ae <set_co2_temp_offset+0x9a>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 80107a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107a8:	b29a      	uxth	r2, r3
 80107aa:	4b38      	ldr	r3, [pc, #224]	@ (801088c <set_co2_temp_offset+0x178>)
 80107ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor temperature offset is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 80107ae:	4b37      	ldr	r3, [pc, #220]	@ (801088c <set_co2_temp_offset+0x178>)
 80107b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 80107b2:	461a      	mov	r2, r3
 80107b4:	4936      	ldr	r1, [pc, #216]	@ (8010890 <set_co2_temp_offset+0x17c>)
 80107b6:	68f8      	ldr	r0, [r7, #12]
 80107b8:	f7fe fea0 	bl	800f4fc <cli_printf>

			do_Calibration = 1;
 80107bc:	2301      	movs	r3, #1
 80107be:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80107c2:	e006      	b.n	80107d2 <set_co2_temp_offset+0xbe>
		} else {
			cli_printf(cli, "Co2 sensor Temperature Offset aborted.");
 80107c4:	4933      	ldr	r1, [pc, #204]	@ (8010894 <set_co2_temp_offset+0x180>)
 80107c6:	68f8      	ldr	r0, [r7, #12]
 80107c8:	f7fe fe98 	bl	800f4fc <cli_printf>
			do_Calibration = 0;
 80107cc:	2300      	movs	r3, #0
 80107ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 80107d2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80107d6:	2b01      	cmp	r3, #1
 80107d8:	d13f      	bne.n	801085a <set_co2_temp_offset+0x146>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80107da:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80107dc:	f7ef fd60 	bl	80002a0 <strlen>
 80107e0:	4603      	mov	r3, r0
 80107e2:	b29a      	uxth	r2, r3
 80107e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80107e8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80107ea:	4827      	ldr	r0, [pc, #156]	@ (8010888 <set_co2_temp_offset+0x174>)
 80107ec:	f7fb fd24 	bl	800c238 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating temperature offset, please wait.");
 80107f0:	4929      	ldr	r1, [pc, #164]	@ (8010898 <set_co2_temp_offset+0x184>)
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f7fe fe82 	bl	800f4fc <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 80107f8:	4b24      	ldr	r3, [pc, #144]	@ (801088c <set_co2_temp_offset+0x178>)
 80107fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d119      	bne.n	8010836 <set_co2_temp_offset+0x122>


				scd30_set_temperature_offset(_RunTime_Packet._tempOffset_co2_concentration);
 8010802:	4b22      	ldr	r3, [pc, #136]	@ (801088c <set_co2_temp_offset+0x178>)
 8010804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010806:	4618      	mov	r0, r3
 8010808:	f003 ffda 	bl	80147c0 <scd30_set_temperature_offset>

			}
			while (counter < 8) {
 801080c:	e013      	b.n	8010836 <set_co2_temp_offset+0x122>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 801080e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010810:	f7ef fd46 	bl	80002a0 <strlen>
 8010814:	4603      	mov	r3, r0
 8010816:	b29a      	uxth	r2, r3
 8010818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801081c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801081e:	481a      	ldr	r0, [pc, #104]	@ (8010888 <set_co2_temp_offset+0x174>)
 8010820:	f7fb fd0a 	bl	800c238 <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010828:	f7f3 fc72 	bl	8004110 <HAL_Delay>
				toggle_blue_led();
 801082c:	f7f0 fc46 	bl	80010bc <toggle_blue_led>
				counter++;
 8010830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010832:	3301      	adds	r3, #1
 8010834:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 8010836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010838:	2b07      	cmp	r3, #7
 801083a:	dde8      	ble.n	801080e <set_co2_temp_offset+0xfa>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801083c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801083e:	f7ef fd2f 	bl	80002a0 <strlen>
 8010842:	4603      	mov	r3, r0
 8010844:	b29a      	uxth	r2, r3
 8010846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801084a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801084c:	480e      	ldr	r0, [pc, #56]	@ (8010888 <set_co2_temp_offset+0x174>)
 801084e:	f7fb fcf3 	bl	800c238 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 8010852:	4912      	ldr	r1, [pc, #72]	@ (801089c <set_co2_temp_offset+0x188>)
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f7fe fe51 	bl	800f4fc <cli_printf>
		}

		flag_cli = 0;
 801085a:	4b08      	ldr	r3, [pc, #32]	@ (801087c <set_co2_temp_offset+0x168>)
 801085c:	2200      	movs	r2, #0
 801085e:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010860:	4b05      	ldr	r3, [pc, #20]	@ (8010878 <set_co2_temp_offset+0x164>)
 8010862:	2200      	movs	r2, #0
 8010864:	701a      	strb	r2, [r3, #0]
}
 8010866:	bf00      	nop
 8010868:	3758      	adds	r7, #88	@ 0x58
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	0802230c 	.word	0x0802230c
 8010874:	08022868 	.word	0x08022868
 8010878:	20001b3a 	.word	0x20001b3a
 801087c:	20001b3b 	.word	0x20001b3b
 8010880:	08022b58 	.word	0x08022b58
 8010884:	08022b9c 	.word	0x08022b9c
 8010888:	20001a74 	.word	0x20001a74
 801088c:	20001530 	.word	0x20001530
 8010890:	08022be0 	.word	0x08022be0
 8010894:	08022c24 	.word	0x08022c24
 8010898:	08022c4c 	.word	0x08022c4c
 801089c:	08022a50 	.word	0x08022a50

080108a0 <get_co2_temp_offset>:

void get_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b08a      	sub	sp, #40	@ 0x28
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_temperature_offset(&calib_val);
 80108ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80108b0:	4618      	mov	r0, r3
 80108b2:	f003 ffc3 	bl	801483c <scd30_get_temperature_offset>
 80108b6:	4603      	mov	r3, r0
 80108b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 80108ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d107      	bne.n	80108d2 <get_co2_temp_offset+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 80108c2:	f107 0310 	add.w	r3, r7, #16
 80108c6:	4a0f      	ldr	r2, [pc, #60]	@ (8010904 <get_co2_temp_offset+0x64>)
 80108c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108cc:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80108d0:	e007      	b.n	80108e2 <get_co2_temp_offset+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 80108d2:	f107 0310 	add.w	r3, r7, #16
 80108d6:	4a0c      	ldr	r2, [pc, #48]	@ (8010908 <get_co2_temp_offset+0x68>)
 80108d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108dc:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80108e0:	bf00      	nop
		}
		}

		cli_printf(cli, "Temperature Offset Status: %s",status);
 80108e2:	f107 0310 	add.w	r3, r7, #16
 80108e6:	461a      	mov	r2, r3
 80108e8:	4908      	ldr	r1, [pc, #32]	@ (801090c <get_co2_temp_offset+0x6c>)
 80108ea:	68f8      	ldr	r0, [r7, #12]
 80108ec:	f7fe fe06 	bl	800f4fc <cli_printf>
		cli_printf(cli, "Temperature Offset Value: %d",calib_val);
 80108f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108f2:	461a      	mov	r2, r3
 80108f4:	4906      	ldr	r1, [pc, #24]	@ (8010910 <get_co2_temp_offset+0x70>)
 80108f6:	68f8      	ldr	r0, [r7, #12]
 80108f8:	f7fe fe00 	bl	800f4fc <cli_printf>
}
 80108fc:	bf00      	nop
 80108fe:	3728      	adds	r7, #40	@ 0x28
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	08022a6c 	.word	0x08022a6c
 8010908:	08022a74 	.word	0x08022a74
 801090c:	08022c80 	.word	0x08022c80
 8010910:	08022ca0 	.word	0x08022ca0

08010914 <set_co2_altitude_compensation>:

void set_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b096      	sub	sp, #88	@ 0x58
 8010918:	af00      	add	r7, sp, #0
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010920:	4b53      	ldr	r3, [pc, #332]	@ (8010a70 <set_co2_altitude_compensation+0x15c>)
 8010922:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010924:	2300      	movs	r3, #0
 8010926:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010928:	4b52      	ldr	r3, [pc, #328]	@ (8010a74 <set_co2_altitude_compensation+0x160>)
 801092a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 801092c:	2300      	movs	r3, #0
 801092e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 8010932:	4b51      	ldr	r3, [pc, #324]	@ (8010a78 <set_co2_altitude_compensation+0x164>)
 8010934:	2201      	movs	r2, #1
 8010936:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010938:	4b50      	ldr	r3, [pc, #320]	@ (8010a7c <set_co2_altitude_compensation+0x168>)
 801093a:	2200      	movs	r2, #0
 801093c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 801093e:	f107 0310 	add.w	r3, r7, #16
 8010942:	2232      	movs	r2, #50	@ 0x32
 8010944:	2100      	movs	r1, #0
 8010946:	4618      	mov	r0, r3
 8010948:	f00e f984 	bl	801ec54 <memset>
		cli_printf(cli,
 801094c:	494c      	ldr	r1, [pc, #304]	@ (8010a80 <set_co2_altitude_compensation+0x16c>)
 801094e:	68f8      	ldr	r0, [r7, #12]
 8010950:	f7fe fdd4 	bl	800f4fc <cli_printf>
				"To calibrate Co2 sensor Altitude compensation, please provide value.");
		cli_printf(cli,
 8010954:	494b      	ldr	r1, [pc, #300]	@ (8010a84 <set_co2_altitude_compensation+0x170>)
 8010956:	68f8      	ldr	r0, [r7, #12]
 8010958:	f7fe fdd0 	bl	800f4fc <cli_printf>
				"If Altitude compensation is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 801095c:	f107 0310 	add.w	r3, r7, #16
 8010960:	2232      	movs	r2, #50	@ 0x32
 8010962:	4619      	mov	r1, r3
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7fe fe0b 	bl	800f580 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801096a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801096c:	f7ef fc98 	bl	80002a0 <strlen>
 8010970:	4603      	mov	r3, r0
 8010972:	b29a      	uxth	r2, r3
 8010974:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010978:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801097a:	4843      	ldr	r0, [pc, #268]	@ (8010a88 <set_co2_altitude_compensation+0x174>)
 801097c:	f7fb fc5c 	bl	800c238 <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 8010980:	7c3b      	ldrb	r3, [r7, #16]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d01e      	beq.n	80109c4 <set_co2_altitude_compensation+0xb0>
			_RunTime_Packet.temp_offset = 1;
 8010986:	4b41      	ldr	r3, [pc, #260]	@ (8010a8c <set_co2_altitude_compensation+0x178>)
 8010988:	2201      	movs	r2, #1
 801098a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 801098e:	f107 0310 	add.w	r3, r7, #16
 8010992:	4618      	mov	r0, r3
 8010994:	f00c fedc 	bl	801d750 <atoi>
 8010998:	4603      	mov	r3, r0
 801099a:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 801099c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801099e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d803      	bhi.n	80109ae <set_co2_altitude_compensation+0x9a>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 80109a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	4b38      	ldr	r3, [pc, #224]	@ (8010a8c <set_co2_altitude_compensation+0x178>)
 80109ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor Altitude compensation is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 80109ae:	4b37      	ldr	r3, [pc, #220]	@ (8010a8c <set_co2_altitude_compensation+0x178>)
 80109b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 80109b2:	461a      	mov	r2, r3
 80109b4:	4936      	ldr	r1, [pc, #216]	@ (8010a90 <set_co2_altitude_compensation+0x17c>)
 80109b6:	68f8      	ldr	r0, [r7, #12]
 80109b8:	f7fe fda0 	bl	800f4fc <cli_printf>

			do_Calibration = 1;
 80109bc:	2301      	movs	r3, #1
 80109be:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80109c2:	e006      	b.n	80109d2 <set_co2_altitude_compensation+0xbe>
		} else {
			cli_printf(cli, "Co2 sensor Altitude compensation aborted.");
 80109c4:	4933      	ldr	r1, [pc, #204]	@ (8010a94 <set_co2_altitude_compensation+0x180>)
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	f7fe fd98 	bl	800f4fc <cli_printf>
			do_Calibration = 0;
 80109cc:	2300      	movs	r3, #0
 80109ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 80109d2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d13f      	bne.n	8010a5a <set_co2_altitude_compensation+0x146>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80109da:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80109dc:	f7ef fc60 	bl	80002a0 <strlen>
 80109e0:	4603      	mov	r3, r0
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80109e8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80109ea:	4827      	ldr	r0, [pc, #156]	@ (8010a88 <set_co2_altitude_compensation+0x174>)
 80109ec:	f7fb fc24 	bl	800c238 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating Altitude compensation, please wait.");
 80109f0:	4929      	ldr	r1, [pc, #164]	@ (8010a98 <set_co2_altitude_compensation+0x184>)
 80109f2:	68f8      	ldr	r0, [r7, #12]
 80109f4:	f7fe fd82 	bl	800f4fc <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 80109f8:	4b24      	ldr	r3, [pc, #144]	@ (8010a8c <set_co2_altitude_compensation+0x178>)
 80109fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d119      	bne.n	8010a36 <set_co2_altitude_compensation+0x122>


				scd30_set_altitude_compensation(_RunTime_Packet._tempOffset_co2_concentration);
 8010a02:	4b22      	ldr	r3, [pc, #136]	@ (8010a8c <set_co2_altitude_compensation+0x178>)
 8010a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a06:	4618      	mov	r0, r3
 8010a08:	f003 ffb8 	bl	801497c <scd30_set_altitude_compensation>

			}
			while (counter < 8) {
 8010a0c:	e013      	b.n	8010a36 <set_co2_altitude_compensation+0x122>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010a0e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010a10:	f7ef fc46 	bl	80002a0 <strlen>
 8010a14:	4603      	mov	r3, r0
 8010a16:	b29a      	uxth	r2, r3
 8010a18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a1c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010a1e:	481a      	ldr	r0, [pc, #104]	@ (8010a88 <set_co2_altitude_compensation+0x174>)
 8010a20:	f7fb fc0a 	bl	800c238 <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010a24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010a28:	f7f3 fb72 	bl	8004110 <HAL_Delay>
				toggle_blue_led();
 8010a2c:	f7f0 fb46 	bl	80010bc <toggle_blue_led>
				counter++;
 8010a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a32:	3301      	adds	r3, #1
 8010a34:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 8010a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a38:	2b07      	cmp	r3, #7
 8010a3a:	dde8      	ble.n	8010a0e <set_co2_altitude_compensation+0xfa>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010a3c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010a3e:	f7ef fc2f 	bl	80002a0 <strlen>
 8010a42:	4603      	mov	r3, r0
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a4a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010a4c:	480e      	ldr	r0, [pc, #56]	@ (8010a88 <set_co2_altitude_compensation+0x174>)
 8010a4e:	f7fb fbf3 	bl	800c238 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 8010a52:	4912      	ldr	r1, [pc, #72]	@ (8010a9c <set_co2_altitude_compensation+0x188>)
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f7fe fd51 	bl	800f4fc <cli_printf>
		}

		flag_cli = 0;
 8010a5a:	4b08      	ldr	r3, [pc, #32]	@ (8010a7c <set_co2_altitude_compensation+0x168>)
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010a60:	4b05      	ldr	r3, [pc, #20]	@ (8010a78 <set_co2_altitude_compensation+0x164>)
 8010a62:	2200      	movs	r2, #0
 8010a64:	701a      	strb	r2, [r3, #0]
}
 8010a66:	bf00      	nop
 8010a68:	3758      	adds	r7, #88	@ 0x58
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	0802230c 	.word	0x0802230c
 8010a74:	08022868 	.word	0x08022868
 8010a78:	20001b3a 	.word	0x20001b3a
 8010a7c:	20001b3b 	.word	0x20001b3b
 8010a80:	08022cc0 	.word	0x08022cc0
 8010a84:	08022d08 	.word	0x08022d08
 8010a88:	20001a74 	.word	0x20001a74
 8010a8c:	20001530 	.word	0x20001530
 8010a90:	08022d50 	.word	0x08022d50
 8010a94:	08022d94 	.word	0x08022d94
 8010a98:	08022dc0 	.word	0x08022dc0
 8010a9c:	08022a50 	.word	0x08022a50

08010aa0 <get_co2_altitude_compensation>:

void get_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b08a      	sub	sp, #40	@ 0x28
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	60b9      	str	r1, [r7, #8]
 8010aaa:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_altitude_compensation(&calib_val);
 8010aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f003 ff13 	bl	80148dc <scd30_get_altitude_compensation>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 8010aba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d107      	bne.n	8010ad2 <get_co2_altitude_compensation+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 8010ac2:	f107 0310 	add.w	r3, r7, #16
 8010ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8010b04 <get_co2_altitude_compensation+0x64>)
 8010ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010acc:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010ad0:	e007      	b.n	8010ae2 <get_co2_altitude_compensation+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 8010ad2:	f107 0310 	add.w	r3, r7, #16
 8010ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8010b08 <get_co2_altitude_compensation+0x68>)
 8010ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010adc:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010ae0:	bf00      	nop
		}
		}

		cli_printf(cli, "Altitude_compensation Status: %s",status);
 8010ae2:	f107 0310 	add.w	r3, r7, #16
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	4908      	ldr	r1, [pc, #32]	@ (8010b0c <get_co2_altitude_compensation+0x6c>)
 8010aea:	68f8      	ldr	r0, [r7, #12]
 8010aec:	f7fe fd06 	bl	800f4fc <cli_printf>
		cli_printf(cli, "Altitude_compensation Value: %d",calib_val);
 8010af0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010af2:	461a      	mov	r2, r3
 8010af4:	4906      	ldr	r1, [pc, #24]	@ (8010b10 <get_co2_altitude_compensation+0x70>)
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f7fe fd00 	bl	800f4fc <cli_printf>
}
 8010afc:	bf00      	nop
 8010afe:	3728      	adds	r7, #40	@ 0x28
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	08022a6c 	.word	0x08022a6c
 8010b08:	08022a74 	.word	0x08022a74
 8010b0c:	08022df8 	.word	0x08022df8
 8010b10:	08022e1c 	.word	0x08022e1c

08010b14 <run_co2_calibration_routine>:


void run_co2_calibration_routine(EmbeddedCli *cli, char *args, void *context)
{
 8010b14:	b590      	push	{r4, r7, lr}
 8010b16:	b0a7      	sub	sp, #156	@ 0x9c
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
	uint32_t maxTime = 120000;
 8010b20:	4bb1      	ldr	r3, [pc, #708]	@ (8010de8 <run_co2_calibration_routine+0x2d4>)
 8010b22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	uint32_t prev_maxTime =  HAL_GetTick();
 8010b26:	f7f3 fae7 	bl	80040f8 <HAL_GetTick>
 8010b2a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	uint32_t cur_tick = 0;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const char *newLine = "\r\n";
 8010b34:	4bad      	ldr	r3, [pc, #692]	@ (8010dec <run_co2_calibration_routine+0x2d8>)
 8010b36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	uint32_t val;
	int counter = 0;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const char *dot = "........";
 8010b40:	4bab      	ldr	r3, [pc, #684]	@ (8010df0 <run_co2_calibration_routine+0x2dc>)
 8010b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
	char progressbar_buf[50] = "ProgressBar: ";
 8010b44:	4aab      	ldr	r2, [pc, #684]	@ (8010df4 <run_co2_calibration_routine+0x2e0>)
 8010b46:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010b4a:	4614      	mov	r4, r2
 8010b4c:	6820      	ldr	r0, [r4, #0]
 8010b4e:	6861      	ldr	r1, [r4, #4]
 8010b50:	68a2      	ldr	r2, [r4, #8]
 8010b52:	c307      	stmia	r3!, {r0, r1, r2}
 8010b54:	89a2      	ldrh	r2, [r4, #12]
 8010b56:	801a      	strh	r2, [r3, #0]
 8010b58:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 8010b5c:	2224      	movs	r2, #36	@ 0x24
 8010b5e:	2100      	movs	r1, #0
 8010b60:	4618      	mov	r0, r3
 8010b62:	f00e f877 	bl	801ec54 <memset>
	uint8_t calib = 0;
 8010b66:	2300      	movs	r3, #0
 8010b68:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	uint8_t do_Calibration = 0;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	cli_other = 1;
 8010b72:	4ba1      	ldr	r3, [pc, #644]	@ (8010df8 <run_co2_calibration_routine+0x2e4>)
 8010b74:	2201      	movs	r2, #1
 8010b76:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010b78:	4ba0      	ldr	r3, [pc, #640]	@ (8010dfc <run_co2_calibration_routine+0x2e8>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 8010b7e:	f107 0310 	add.w	r3, r7, #16
 8010b82:	2232      	movs	r2, #50	@ 0x32
 8010b84:	2100      	movs	r1, #0
 8010b86:	4618      	mov	r0, r3
 8010b88:	f00e f864 	bl	801ec54 <memset>

		     cli_printf(cli,"");
 8010b8c:	499c      	ldr	r1, [pc, #624]	@ (8010e00 <run_co2_calibration_routine+0x2ec>)
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f7fe fcb4 	bl	800f4fc <cli_printf>
				cli_printf(cli,"It takes about 2-3min to run complete routine. ");
 8010b94:	499b      	ldr	r1, [pc, #620]	@ (8010e04 <run_co2_calibration_routine+0x2f0>)
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f7fe fcb0 	bl	800f4fc <cli_printf>
				cli_printf(cli,"once this routine is activated it cant be canceled. ");
 8010b9c:	499a      	ldr	r1, [pc, #616]	@ (8010e08 <run_co2_calibration_routine+0x2f4>)
 8010b9e:	68f8      	ldr	r0, [r7, #12]
 8010ba0:	f7fe fcac 	bl	800f4fc <cli_printf>
				cli_printf(cli,"Do you want to run calibration routine y/n?. ");
 8010ba4:	4999      	ldr	r1, [pc, #612]	@ (8010e0c <run_co2_calibration_routine+0x2f8>)
 8010ba6:	68f8      	ldr	r0, [r7, #12]
 8010ba8:	f7fe fca8 	bl	800f4fc <cli_printf>

		receiveString(cli, buffer, sizeof(buffer));
 8010bac:	f107 0310 	add.w	r3, r7, #16
 8010bb0:	2232      	movs	r2, #50	@ 0x32
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f7fe fce3 	bl	800f580 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010bba:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010bbe:	f7ef fb6f 	bl	80002a0 <strlen>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010bca:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010bce:	4890      	ldr	r0, [pc, #576]	@ (8010e10 <run_co2_calibration_routine+0x2fc>)
 8010bd0:	f7fb fb32 	bl	800c238 <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010bd4:	f107 0310 	add.w	r3, r7, #16
 8010bd8:	2179      	movs	r1, #121	@ 0x79
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f00e f842 	bl	801ec64 <strchr>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d007      	beq.n	8010bf6 <run_co2_calibration_routine+0xe2>
			calib = 1;
 8010be6:	2301      	movs	r3, #1
 8010be8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

			cli_printf(cli, "Calibration routine running");
 8010bec:	4989      	ldr	r1, [pc, #548]	@ (8010e14 <run_co2_calibration_routine+0x300>)
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	f7fe fc84 	bl	800f4fc <cli_printf>
 8010bf4:	e00f      	b.n	8010c16 <run_co2_calibration_routine+0x102>
		} else if (strstr(buffer, "n")) {
 8010bf6:	f107 0310 	add.w	r3, r7, #16
 8010bfa:	216e      	movs	r1, #110	@ 0x6e
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f00e f831 	bl	801ec64 <strchr>
 8010c02:	4603      	mov	r3, r0
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d006      	beq.n	8010c16 <run_co2_calibration_routine+0x102>
			calib = 0;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			cli_printf(cli, "Calibration routine aborted");
 8010c0e:	4982      	ldr	r1, [pc, #520]	@ (8010e18 <run_co2_calibration_routine+0x304>)
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	f7fe fc73 	bl	800f4fc <cli_printf>
		}


		if(calib)
 8010c16:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	f000 8141 	beq.w	8010ea2 <run_co2_calibration_routine+0x38e>
		{
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010c20:	4b7e      	ldr	r3, [pc, #504]	@ (8010e1c <run_co2_calibration_routine+0x308>)
 8010c22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d102      	bne.n	8010c30 <run_co2_calibration_routine+0x11c>
				scd30_start_periodic_measurement(0);
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	f003 fb4c 	bl	80142c8 <scd30_start_periodic_measurement>
			}
			cli_printf(cli,"");
 8010c30:	4973      	ldr	r1, [pc, #460]	@ (8010e00 <run_co2_calibration_routine+0x2ec>)
 8010c32:	68f8      	ldr	r0, [r7, #12]
 8010c34:	f7fe fc62 	bl	800f4fc <cli_printf>
			cli_printf(cli,"GuideLines");
 8010c38:	4979      	ldr	r1, [pc, #484]	@ (8010e20 <run_co2_calibration_routine+0x30c>)
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f7fe fc5e 	bl	800f4fc <cli_printf>
			cli_printf(cli,"");
 8010c40:	496f      	ldr	r1, [pc, #444]	@ (8010e00 <run_co2_calibration_routine+0x2ec>)
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	f7fe fc5a 	bl	800f4fc <cli_printf>
			cli_printf(cli,"1)Donot remove USB, otherwise calibrations will be canceled. ");
 8010c48:	4976      	ldr	r1, [pc, #472]	@ (8010e24 <run_co2_calibration_routine+0x310>)
 8010c4a:	68f8      	ldr	r0, [r7, #12]
 8010c4c:	f7fe fc56 	bl	800f4fc <cli_printf>
			cli_printf(cli,"2)Expose the sensor to a controlled environment with a known value of Co2. ");
 8010c50:	4975      	ldr	r1, [pc, #468]	@ (8010e28 <run_co2_calibration_routine+0x314>)
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f7fe fc52 	bl	800f4fc <cli_printf>
			cli_printf(cli,"3)After 2min, apply known value of Co2. ");
 8010c58:	4974      	ldr	r1, [pc, #464]	@ (8010e2c <run_co2_calibration_routine+0x318>)
 8010c5a:	68f8      	ldr	r0, [r7, #12]
 8010c5c:	f7fe fc4e 	bl	800f4fc <cli_printf>
			cli_printf(cli,"4)Calibration routine finished. ");
 8010c60:	4973      	ldr	r1, [pc, #460]	@ (8010e30 <run_co2_calibration_routine+0x31c>)
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f7fe fc4a 	bl	800f4fc <cli_printf>
			memset(buffer, '\0', sizeof(buffer));
 8010c68:	f107 0310 	add.w	r3, r7, #16
 8010c6c:	2232      	movs	r2, #50	@ 0x32
 8010c6e:	2100      	movs	r1, #0
 8010c70:	4618      	mov	r0, r3
 8010c72:	f00d ffef 	bl	801ec54 <memset>

			 prev_maxTime =  HAL_GetTick();
 8010c76:	f7f3 fa3f 	bl	80040f8 <HAL_GetTick>
 8010c7a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
				cur_tick = HAL_GetTick();
 8010c7e:	f7f3 fa3b 	bl	80040f8 <HAL_GetTick>
 8010c82:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				cli_printf(cli,"");
 8010c86:	495e      	ldr	r1, [pc, #376]	@ (8010e00 <run_co2_calibration_routine+0x2ec>)
 8010c88:	68f8      	ldr	r0, [r7, #12]
 8010c8a:	f7fe fc37 	bl	800f4fc <cli_printf>
				cli_printf(cli,"");
 8010c8e:	495c      	ldr	r1, [pc, #368]	@ (8010e00 <run_co2_calibration_routine+0x2ec>)
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	f7fe fc33 	bl	800f4fc <cli_printf>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) progressbar_buf, strlen(progressbar_buf),
 8010c96:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7ef fb00 	bl	80002a0 <strlen>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	b29a      	uxth	r2, r3
 8010ca4:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8010ca8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010cac:	4858      	ldr	r0, [pc, #352]	@ (8010e10 <run_co2_calibration_routine+0x2fc>)
 8010cae:	f7fb fac3 	bl	800c238 <HAL_UART_Transmit>
									1000);
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010cb2:	e01e      	b.n	8010cf2 <run_co2_calibration_routine+0x1de>

					if ((HAL_GetTick() - cur_tick > 5000)) {
 8010cb4:	f7f3 fa20 	bl	80040f8 <HAL_GetTick>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010cbe:	1ad3      	subs	r3, r2, r3
 8010cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d90a      	bls.n	8010cde <run_co2_calibration_routine+0x1ca>


							HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*)"##", 2,
 8010cc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010ccc:	2202      	movs	r2, #2
 8010cce:	4959      	ldr	r1, [pc, #356]	@ (8010e34 <run_co2_calibration_routine+0x320>)
 8010cd0:	484f      	ldr	r0, [pc, #316]	@ (8010e10 <run_co2_calibration_routine+0x2fc>)
 8010cd2:	f7fb fab1 	bl	800c238 <HAL_UART_Transmit>
									1000);
							cur_tick = HAL_GetTick();
 8010cd6:	f7f3 fa0f 	bl	80040f8 <HAL_GetTick>
 8010cda:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
						}

			        if ((HAL_GetTick() - prev_maxTime > maxTime)) {
 8010cde:	f7f3 fa0b 	bl	80040f8 <HAL_GetTick>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010ce8:	1ad3      	subs	r3, r2, r3
 8010cea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d308      	bcc.n	8010d04 <run_co2_calibration_routine+0x1f0>
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010cf2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010cf6:	4850      	ldr	r0, [pc, #320]	@ (8010e38 <run_co2_calibration_routine+0x324>)
 8010cf8:	f7f5 f9ca 	bl	8006090 <HAL_GPIO_ReadPin>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d1d8      	bne.n	8010cb4 <run_co2_calibration_routine+0x1a0>
 8010d02:	e000      	b.n	8010d06 <run_co2_calibration_routine+0x1f2>
					//we break the loop if time goes above 5min
					break;
 8010d04:	bf00      	nop
				}

			}

			 cli_printf(cli,"");
 8010d06:	493e      	ldr	r1, [pc, #248]	@ (8010e00 <run_co2_calibration_routine+0x2ec>)
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	f7fe fbf7 	bl	800f4fc <cli_printf>
			 cli_printf(cli,"");
 8010d0e:	493c      	ldr	r1, [pc, #240]	@ (8010e00 <run_co2_calibration_routine+0x2ec>)
 8010d10:	68f8      	ldr	r0, [r7, #12]
 8010d12:	f7fe fbf3 	bl	800f4fc <cli_printf>
			 cli_printf(cli,"");
 8010d16:	493a      	ldr	r1, [pc, #232]	@ (8010e00 <run_co2_calibration_routine+0x2ec>)
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f7fe fbef 	bl	800f4fc <cli_printf>
			 cli_printf(cli,"Enter Known Co2 reference value!");
 8010d1e:	4947      	ldr	r1, [pc, #284]	@ (8010e3c <run_co2_calibration_routine+0x328>)
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f7fe fbeb 	bl	800f4fc <cli_printf>

				receiveString(cli, buffer, sizeof(buffer));
 8010d26:	f107 0310 	add.w	r3, r7, #16
 8010d2a:	2232      	movs	r2, #50	@ 0x32
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	f7fe fc26 	bl	800f580 <receiveString>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010d34:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010d38:	f7ef fab2 	bl	80002a0 <strlen>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	b29a      	uxth	r2, r3
 8010d40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d44:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010d48:	4831      	ldr	r0, [pc, #196]	@ (8010e10 <run_co2_calibration_routine+0x2fc>)
 8010d4a:	f7fb fa75 	bl	800c238 <HAL_UART_Transmit>
						1000);

				if (buffer[0] != '\0') {
 8010d4e:	7c3b      	ldrb	r3, [r7, #16]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d01e      	beq.n	8010d92 <run_co2_calibration_routine+0x27e>
					_RunTime_Packet.CO2_calibration = 1;
 8010d54:	4b31      	ldr	r3, [pc, #196]	@ (8010e1c <run_co2_calibration_routine+0x308>)
 8010d56:	2201      	movs	r2, #1
 8010d58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

					val = atoi(buffer);
 8010d5c:	f107 0310 	add.w	r3, r7, #16
 8010d60:	4618      	mov	r0, r3
 8010d62:	f00c fcf5 	bl	801d750 <atoi>
 8010d66:	4603      	mov	r3, r0
 8010d68:	67bb      	str	r3, [r7, #120]	@ 0x78

					if (val < 65535) {
 8010d6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d6c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d803      	bhi.n	8010d7c <run_co2_calibration_routine+0x268>
						_RunTime_Packet._target_co2_concentration = val;
 8010d74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	4b28      	ldr	r3, [pc, #160]	@ (8010e1c <run_co2_calibration_routine+0x308>)
 8010d7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
					}

					cli_printf(cli,
							"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
							_RunTime_Packet._target_co2_concentration);
 8010d7c:	4b27      	ldr	r3, [pc, #156]	@ (8010e1c <run_co2_calibration_routine+0x308>)
 8010d7e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
					cli_printf(cli,
 8010d80:	461a      	mov	r2, r3
 8010d82:	492f      	ldr	r1, [pc, #188]	@ (8010e40 <run_co2_calibration_routine+0x32c>)
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f7fe fbb9 	bl	800f4fc <cli_printf>
					do_Calibration = 1;
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8010d90:	e00a      	b.n	8010da8 <run_co2_calibration_routine+0x294>
				} else {
					cli_printf(cli, "Co2 sensor Calibration aborted. No value provided");
 8010d92:	492c      	ldr	r1, [pc, #176]	@ (8010e44 <run_co2_calibration_routine+0x330>)
 8010d94:	68f8      	ldr	r0, [r7, #12]
 8010d96:	f7fe fbb1 	bl	800f4fc <cli_printf>
					_RunTime_Packet.CO2_calibration = 0;
 8010d9a:	4b20      	ldr	r3, [pc, #128]	@ (8010e1c <run_co2_calibration_routine+0x308>)
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
					do_Calibration = 0;
 8010da2:	2300      	movs	r3, #0
 8010da4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
				}

				if (do_Calibration == 1) {
 8010da8:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d178      	bne.n	8010ea2 <run_co2_calibration_routine+0x38e>
					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010db0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010db4:	f7ef fa74 	bl	80002a0 <strlen>
 8010db8:	4603      	mov	r3, r0
 8010dba:	b29a      	uxth	r2, r3
 8010dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010dc0:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010dc4:	4812      	ldr	r0, [pc, #72]	@ (8010e10 <run_co2_calibration_routine+0x2fc>)
 8010dc6:	f7fb fa37 	bl	800c238 <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Co2 is calibrating, please wait.");
 8010dca:	491f      	ldr	r1, [pc, #124]	@ (8010e48 <run_co2_calibration_routine+0x334>)
 8010dcc:	68f8      	ldr	r0, [r7, #12]
 8010dce:	f7fe fb95 	bl	800f4fc <cli_printf>
					if (!_RunTime_Packet.scd4x_i2c_error) {
 8010dd2:	4b12      	ldr	r3, [pc, #72]	@ (8010e1c <run_co2_calibration_routine+0x308>)
 8010dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d14d      	bne.n	8010e78 <run_co2_calibration_routine+0x364>
			#ifdef use_scd40x
						scd4x_perform_forced_recalibration(
								_RunTime_Packet._target_co2_concentration,
								&_RunTime_Packet._frc_correction);
			#elif use_scd30
					scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 8010ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8010e1c <run_co2_calibration_routine+0x308>)
 8010dde:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8010de0:	4618      	mov	r0, r3
 8010de2:	f003 fc5f 	bl	80146a4 <scd30_force_recalibration>
			#endif
					}
					while (counter < 8) {
 8010de6:	e047      	b.n	8010e78 <run_co2_calibration_routine+0x364>
 8010de8:	0001d4c0 	.word	0x0001d4c0
 8010dec:	0802230c 	.word	0x0802230c
 8010df0:	08022868 	.word	0x08022868
 8010df4:	08023054 	.word	0x08023054
 8010df8:	20001b3a 	.word	0x20001b3a
 8010dfc:	20001b3b 	.word	0x20001b3b
 8010e00:	08022e3c 	.word	0x08022e3c
 8010e04:	08022e40 	.word	0x08022e40
 8010e08:	08022e70 	.word	0x08022e70
 8010e0c:	08022ea8 	.word	0x08022ea8
 8010e10:	20001a74 	.word	0x20001a74
 8010e14:	08022ed8 	.word	0x08022ed8
 8010e18:	08022ef4 	.word	0x08022ef4
 8010e1c:	20001530 	.word	0x20001530
 8010e20:	08022f10 	.word	0x08022f10
 8010e24:	08022f1c 	.word	0x08022f1c
 8010e28:	08022f5c 	.word	0x08022f5c
 8010e2c:	08022fa8 	.word	0x08022fa8
 8010e30:	08022fd4 	.word	0x08022fd4
 8010e34:	08022ff8 	.word	0x08022ff8
 8010e38:	40020000 	.word	0x40020000
 8010e3c:	08022ffc 	.word	0x08022ffc
 8010e40:	080229bc 	.word	0x080229bc
 8010e44:	08023020 	.word	0x08023020
 8010e48:	08022a2c 	.word	0x08022a2c
						HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010e4c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8010e4e:	f7ef fa27 	bl	80002a0 <strlen>
 8010e52:	4603      	mov	r3, r0
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e5a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010e5c:	4816      	ldr	r0, [pc, #88]	@ (8010eb8 <run_co2_calibration_routine+0x3a4>)
 8010e5e:	f7fb f9eb 	bl	800c238 <HAL_UART_Transmit>
								1000);
						HAL_Delay(1000);
 8010e62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010e66:	f7f3 f953 	bl	8004110 <HAL_Delay>
						toggle_blue_led();
 8010e6a:	f7f0 f927 	bl	80010bc <toggle_blue_led>
						counter++;
 8010e6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010e72:	3301      	adds	r3, #1
 8010e74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
					while (counter < 8) {
 8010e78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010e7c:	2b07      	cmp	r3, #7
 8010e7e:	dde5      	ble.n	8010e4c <run_co2_calibration_routine+0x338>
					}

					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010e80:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010e84:	f7ef fa0c 	bl	80002a0 <strlen>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	b29a      	uxth	r2, r3
 8010e8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e90:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010e94:	4808      	ldr	r0, [pc, #32]	@ (8010eb8 <run_co2_calibration_routine+0x3a4>)
 8010e96:	f7fb f9cf 	bl	800c238 <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Sensor calibration done.");
 8010e9a:	4908      	ldr	r1, [pc, #32]	@ (8010ebc <run_co2_calibration_routine+0x3a8>)
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	f7fe fb2d 	bl	800f4fc <cli_printf>
		}




		flag_cli = 0;
 8010ea2:	4b07      	ldr	r3, [pc, #28]	@ (8010ec0 <run_co2_calibration_routine+0x3ac>)
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	701a      	strb	r2, [r3, #0]
			cli_other = 0;
 8010ea8:	4b06      	ldr	r3, [pc, #24]	@ (8010ec4 <run_co2_calibration_routine+0x3b0>)
 8010eaa:	2200      	movs	r2, #0
 8010eac:	701a      	strb	r2, [r3, #0]

}
 8010eae:	bf00      	nop
 8010eb0:	379c      	adds	r7, #156	@ 0x9c
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd90      	pop	{r4, r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	20001a74 	.word	0x20001a74
 8010ebc:	08022a50 	.word	0x08022a50
 8010ec0:	20001b3b 	.word	0x20001b3b
 8010ec4:	20001b3a 	.word	0x20001b3a

08010ec8 <set_co2_samples>:


void set_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b092      	sub	sp, #72	@ 0x48
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	60f8      	str	r0, [r7, #12]
 8010ed0:	60b9      	str	r1, [r7, #8]
 8010ed2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010ed4:	4b33      	ldr	r3, [pc, #204]	@ (8010fa4 <set_co2_samples+0xdc>)
 8010ed6:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010ed8:	4933      	ldr	r1, [pc, #204]	@ (8010fa8 <set_co2_samples+0xe0>)
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f7fe fb0e 	bl	800f4fc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010ee0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010ee2:	f7ef f9dd 	bl	80002a0 <strlen>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010eee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010ef0:	482e      	ldr	r0, [pc, #184]	@ (8010fac <set_co2_samples+0xe4>)
 8010ef2:	f7fb f9a1 	bl	800c238 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter the number of Samples: ");
 8010ef6:	492e      	ldr	r1, [pc, #184]	@ (8010fb0 <set_co2_samples+0xe8>)
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f7fe faff 	bl	800f4fc <cli_printf>

	uint16_t val;
	cli_other = 1;
 8010efe:	4b2d      	ldr	r3, [pc, #180]	@ (8010fb4 <set_co2_samples+0xec>)
 8010f00:	2201      	movs	r2, #1
 8010f02:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010f04:	4b2c      	ldr	r3, [pc, #176]	@ (8010fb8 <set_co2_samples+0xf0>)
 8010f06:	2200      	movs	r2, #0
 8010f08:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 8010f0a:	f107 0310 	add.w	r3, r7, #16
 8010f0e:	2232      	movs	r2, #50	@ 0x32
 8010f10:	2100      	movs	r1, #0
 8010f12:	4618      	mov	r0, r3
 8010f14:	f00d fe9e 	bl	801ec54 <memset>
	receiveString(cli, buffer, sizeof(buffer));
 8010f18:	f107 0310 	add.w	r3, r7, #16
 8010f1c:	2232      	movs	r2, #50	@ 0x32
 8010f1e:	4619      	mov	r1, r3
 8010f20:	68f8      	ldr	r0, [r7, #12]
 8010f22:	f7fe fb2d 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010f26:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010f28:	f7ef f9ba 	bl	80002a0 <strlen>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	b29a      	uxth	r2, r3
 8010f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010f36:	481d      	ldr	r0, [pc, #116]	@ (8010fac <set_co2_samples+0xe4>)
 8010f38:	f7fb f97e 	bl	800c238 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8010f3c:	7c3b      	ldrb	r3, [r7, #16]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d022      	beq.n	8010f88 <set_co2_samples+0xc0>

		val = atoi(buffer);
 8010f42:	f107 0310 	add.w	r3, r7, #16
 8010f46:	4618      	mov	r0, r3
 8010f48:	f00c fc02 	bl	801d750 <atoi>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

			if (val < 65535) {
 8010f52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d004      	beq.n	8010f68 <set_co2_samples+0xa0>
				_Flash_Packet.co2_samples = val;
 8010f5e:	4b17      	ldr	r3, [pc, #92]	@ (8010fbc <set_co2_samples+0xf4>)
 8010f60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f64:	f8a3 225d 	strh.w	r2, [r3, #605]	@ 0x25d
			}

		cli_printf(cli, "Samples: %d", _Flash_Packet.co2_samples);
 8010f68:	4b14      	ldr	r3, [pc, #80]	@ (8010fbc <set_co2_samples+0xf4>)
 8010f6a:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	461a      	mov	r2, r3
 8010f72:	4913      	ldr	r1, [pc, #76]	@ (8010fc0 <set_co2_samples+0xf8>)
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	f7fe fac1 	bl	800f4fc <cli_printf>
		set_param_flags();
 8010f7a:	4b12      	ldr	r3, [pc, #72]	@ (8010fc4 <set_co2_samples+0xfc>)
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	701a      	strb	r2, [r3, #0]
 8010f80:	4b11      	ldr	r3, [pc, #68]	@ (8010fc8 <set_co2_samples+0x100>)
 8010f82:	2201      	movs	r2, #1
 8010f84:	701a      	strb	r2, [r3, #0]
 8010f86:	e003      	b.n	8010f90 <set_co2_samples+0xc8>
	}
	else
	{
		cli_printf(cli, "No Value provided");
 8010f88:	4910      	ldr	r1, [pc, #64]	@ (8010fcc <set_co2_samples+0x104>)
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	f7fe fab6 	bl	800f4fc <cli_printf>
	}

	flag_cli = 0;
 8010f90:	4b09      	ldr	r3, [pc, #36]	@ (8010fb8 <set_co2_samples+0xf0>)
 8010f92:	2200      	movs	r2, #0
 8010f94:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010f96:	4b07      	ldr	r3, [pc, #28]	@ (8010fb4 <set_co2_samples+0xec>)
 8010f98:	2200      	movs	r2, #0
 8010f9a:	701a      	strb	r2, [r3, #0]

}
 8010f9c:	bf00      	nop
 8010f9e:	3748      	adds	r7, #72	@ 0x48
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	0802230c 	.word	0x0802230c
 8010fa8:	08022380 	.word	0x08022380
 8010fac:	20001a74 	.word	0x20001a74
 8010fb0:	08023064 	.word	0x08023064
 8010fb4:	20001b3a 	.word	0x20001b3a
 8010fb8:	20001b3b 	.word	0x20001b3b
 8010fbc:	200012cc 	.word	0x200012cc
 8010fc0:	08023084 	.word	0x08023084
 8010fc4:	20001579 	.word	0x20001579
 8010fc8:	2000157a 	.word	0x2000157a
 8010fcc:	08023090 	.word	0x08023090

08010fd0 <get_co2_samples>:

void get_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b084      	sub	sp, #16
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	60f8      	str	r0, [r7, #12]
 8010fd8:	60b9      	str	r1, [r7, #8]
 8010fda:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Co2 Samples: %d", _Flash_Packet.co2_samples);
 8010fdc:	4b06      	ldr	r3, [pc, #24]	@ (8010ff8 <get_co2_samples+0x28>)
 8010fde:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	4905      	ldr	r1, [pc, #20]	@ (8010ffc <get_co2_samples+0x2c>)
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	f7fe fa87 	bl	800f4fc <cli_printf>
}
 8010fee:	bf00      	nop
 8010ff0:	3710      	adds	r7, #16
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	200012cc 	.word	0x200012cc
 8010ffc:	080230a4 	.word	0x080230a4

08011000 <SystemRestart>:


void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 8011000:	b580      	push	{r7, lr}
 8011002:	b092      	sub	sp, #72	@ 0x48
 8011004:	af00      	add	r7, sp, #0
 8011006:	60f8      	str	r0, [r7, #12]
 8011008:	60b9      	str	r1, [r7, #8]
 801100a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 801100c:	4b22      	ldr	r3, [pc, #136]	@ (8011098 <SystemRestart+0x98>)
 801100e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to restart the device y/n?");
 8011010:	4922      	ldr	r1, [pc, #136]	@ (801109c <SystemRestart+0x9c>)
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7fe fa72 	bl	800f4fc <cli_printf>

	cli_other = 1;
 8011018:	4b21      	ldr	r3, [pc, #132]	@ (80110a0 <SystemRestart+0xa0>)
 801101a:	2201      	movs	r2, #1
 801101c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 801101e:	4b21      	ldr	r3, [pc, #132]	@ (80110a4 <SystemRestart+0xa4>)
 8011020:	2200      	movs	r2, #0
 8011022:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 8011024:	f107 0310 	add.w	r3, r7, #16
 8011028:	2232      	movs	r2, #50	@ 0x32
 801102a:	4619      	mov	r1, r3
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	f7fe faa7 	bl	800f580 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8011032:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011034:	f7ef f934 	bl	80002a0 <strlen>
 8011038:	4603      	mov	r3, r0
 801103a:	b29a      	uxth	r2, r3
 801103c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011040:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011042:	4819      	ldr	r0, [pc, #100]	@ (80110a8 <SystemRestart+0xa8>)
 8011044:	f7fb f8f8 	bl	800c238 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 8011048:	f107 0310 	add.w	r3, r7, #16
 801104c:	2179      	movs	r1, #121	@ 0x79
 801104e:	4618      	mov	r0, r3
 8011050:	f00d fe08 	bl	801ec64 <strchr>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d006      	beq.n	8011068 <SystemRestart+0x68>
		cli_printf(cli, "Device is going to restart.");
 801105a:	4914      	ldr	r1, [pc, #80]	@ (80110ac <SystemRestart+0xac>)
 801105c:	68f8      	ldr	r0, [r7, #12]
 801105e:	f7fe fa4d 	bl	800f4fc <cli_printf>
		HAL_NVIC_SystemReset();
 8011062:	f7f3 fe64 	bl	8004d2e <HAL_NVIC_SystemReset>
 8011066:	e00c      	b.n	8011082 <SystemRestart+0x82>
	} else if (strstr(buffer, "n")) {
 8011068:	f107 0310 	add.w	r3, r7, #16
 801106c:	216e      	movs	r1, #110	@ 0x6e
 801106e:	4618      	mov	r0, r3
 8011070:	f00d fdf8 	bl	801ec64 <strchr>
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d003      	beq.n	8011082 <SystemRestart+0x82>
		cli_printf(cli, "Device restart aborted.");
 801107a:	490d      	ldr	r1, [pc, #52]	@ (80110b0 <SystemRestart+0xb0>)
 801107c:	68f8      	ldr	r0, [r7, #12]
 801107e:	f7fe fa3d 	bl	800f4fc <cli_printf>
	}

	flag_cli = 0;
 8011082:	4b08      	ldr	r3, [pc, #32]	@ (80110a4 <SystemRestart+0xa4>)
 8011084:	2200      	movs	r2, #0
 8011086:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8011088:	4b05      	ldr	r3, [pc, #20]	@ (80110a0 <SystemRestart+0xa0>)
 801108a:	2200      	movs	r2, #0
 801108c:	701a      	strb	r2, [r3, #0]
}
 801108e:	bf00      	nop
 8011090:	3748      	adds	r7, #72	@ 0x48
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}
 8011096:	bf00      	nop
 8011098:	0802230c 	.word	0x0802230c
 801109c:	080230b4 	.word	0x080230b4
 80110a0:	20001b3a 	.word	0x20001b3a
 80110a4:	20001b3b 	.word	0x20001b3b
 80110a8:	20001a74 	.word	0x20001a74
 80110ac:	080230dc 	.word	0x080230dc
 80110b0:	080230f8 	.word	0x080230f8

080110b4 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 80110c0:	4b0a      	ldr	r3, [pc, #40]	@ (80110ec <Co2Level+0x38>)
 80110c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d101      	bne.n	80110ce <Co2Level+0x1a>


#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 80110ca:	f7f0 fb01 	bl	80016d0 <get_scd30_measurement_>
#endif
	}
#ifdef use_scd40x
	cli_printf(cli, "Co2 Value: %d", _RunTime_Packet.co2);
#elif use_scd30
	cli_printf(cli, "Co2 Value: %.2f", _RunTime_Packet.co2);
 80110ce:	4b07      	ldr	r3, [pc, #28]	@ (80110ec <Co2Level+0x38>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7ef fa50 	bl	8000578 <__aeabi_f2d>
 80110d8:	4602      	mov	r2, r0
 80110da:	460b      	mov	r3, r1
 80110dc:	4904      	ldr	r1, [pc, #16]	@ (80110f0 <Co2Level+0x3c>)
 80110de:	68f8      	ldr	r0, [r7, #12]
 80110e0:	f7fe fa0c 	bl	800f4fc <cli_printf>
#endif
}
 80110e4:	bf00      	nop
 80110e6:	3710      	adds	r7, #16
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	20001530 	.word	0x20001530
 80110f0:	08023110 	.word	0x08023110

080110f4 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b084      	sub	sp, #16
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011100:	4b0a      	ldr	r3, [pc, #40]	@ (801112c <TempLevel+0x38>)
 8011102:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011106:	2b00      	cmp	r3, #0
 8011108:	d101      	bne.n	801110e <TempLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 801110a:	f7f0 fae1 	bl	80016d0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Temperature Value: %dC ", _RunTime_Packet.temperature);
#elif use_scd30
	cli_printf(cli, "Temperature Value: %.2fC ", _RunTime_Packet.temperature);
 801110e:	4b07      	ldr	r3, [pc, #28]	@ (801112c <TempLevel+0x38>)
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	4618      	mov	r0, r3
 8011114:	f7ef fa30 	bl	8000578 <__aeabi_f2d>
 8011118:	4602      	mov	r2, r0
 801111a:	460b      	mov	r3, r1
 801111c:	4904      	ldr	r1, [pc, #16]	@ (8011130 <TempLevel+0x3c>)
 801111e:	68f8      	ldr	r0, [r7, #12]
 8011120:	f7fe f9ec 	bl	800f4fc <cli_printf>
#endif
}
 8011124:	bf00      	nop
 8011126:	3710      	adds	r7, #16
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}
 801112c:	20001530 	.word	0x20001530
 8011130:	08023120 	.word	0x08023120

08011134 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	60f8      	str	r0, [r7, #12]
 801113c:	60b9      	str	r1, [r7, #8]
 801113e:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011140:	4b0a      	ldr	r3, [pc, #40]	@ (801116c <HumidLevel+0x38>)
 8011142:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011146:	2b00      	cmp	r3, #0
 8011148:	d101      	bne.n	801114e <HumidLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 801114a:	f7f0 fac1 	bl	80016d0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Humidity Value: %d ", _RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, "Humidity Value: %.2f ", _RunTime_Packet.humidity);
 801114e:	4b07      	ldr	r3, [pc, #28]	@ (801116c <HumidLevel+0x38>)
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	4618      	mov	r0, r3
 8011154:	f7ef fa10 	bl	8000578 <__aeabi_f2d>
 8011158:	4602      	mov	r2, r0
 801115a:	460b      	mov	r3, r1
 801115c:	4904      	ldr	r1, [pc, #16]	@ (8011170 <HumidLevel+0x3c>)
 801115e:	68f8      	ldr	r0, [r7, #12]
 8011160:	f7fe f9cc 	bl	800f4fc <cli_printf>
#endif
}
 8011164:	bf00      	nop
 8011166:	3710      	adds	r7, #16
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	20001530 	.word	0x20001530
 8011170:	0802313c 	.word	0x0802313c

08011174 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "For 10seconds system will poll here to detect motion.");
 8011180:	491f      	ldr	r1, [pc, #124]	@ (8011200 <MotionDetection+0x8c>)
 8011182:	68f8      	ldr	r0, [r7, #12]
 8011184:	f7fe f9ba 	bl	800f4fc <cli_printf>
	HAL_Delay(2000);
 8011188:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 801118c:	f7f2 ffc0 	bl	8004110 <HAL_Delay>
	prev_max_wait_time_motion = HAL_GetTick();
 8011190:	f7f2 ffb2 	bl	80040f8 <HAL_GetTick>
 8011194:	4603      	mov	r3, r0
 8011196:	4a1b      	ldr	r2, [pc, #108]	@ (8011204 <MotionDetection+0x90>)
 8011198:	6013      	str	r3, [r2, #0]
	prev_motion = 0;
 801119a:	4b1b      	ldr	r3, [pc, #108]	@ (8011208 <MotionDetection+0x94>)
 801119c:	2200      	movs	r2, #0
 801119e:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80111a0:	e01c      	b.n	80111dc <MotionDetection+0x68>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80111a2:	2101      	movs	r1, #1
 80111a4:	4819      	ldr	r0, [pc, #100]	@ (801120c <MotionDetection+0x98>)
 80111a6:	f7f4 ff73 	bl	8006090 <HAL_GPIO_ReadPin>
 80111aa:	4603      	mov	r3, r0
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d003      	beq.n	80111b8 <MotionDetection+0x44>
			_RunTime_Packet.motion_detection = 1;
 80111b0:	4b17      	ldr	r3, [pc, #92]	@ (8011210 <MotionDetection+0x9c>)
 80111b2:	2201      	movs	r2, #1
 80111b4:	731a      	strb	r2, [r3, #12]
 80111b6:	e002      	b.n	80111be <MotionDetection+0x4a>
			//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
		} else {
			_RunTime_Packet.motion_detection = 0;
 80111b8:	4b15      	ldr	r3, [pc, #84]	@ (8011210 <MotionDetection+0x9c>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	731a      	strb	r2, [r3, #12]

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
		cli_printf(cli, "PIR Motion: %s\r\n",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80111be:	4b14      	ldr	r3, [pc, #80]	@ (8011210 <MotionDetection+0x9c>)
 80111c0:	7b1b      	ldrb	r3, [r3, #12]
		cli_printf(cli, "PIR Motion: %s\r\n",
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d101      	bne.n	80111ca <MotionDetection+0x56>
 80111c6:	4b13      	ldr	r3, [pc, #76]	@ (8011214 <MotionDetection+0xa0>)
 80111c8:	e000      	b.n	80111cc <MotionDetection+0x58>
 80111ca:	4b13      	ldr	r3, [pc, #76]	@ (8011218 <MotionDetection+0xa4>)
 80111cc:	461a      	mov	r2, r3
 80111ce:	4913      	ldr	r1, [pc, #76]	@ (801121c <MotionDetection+0xa8>)
 80111d0:	68f8      	ldr	r0, [r7, #12]
 80111d2:	f7fe f993 	bl	800f4fc <cli_printf>
//	         	}
		HAL_Delay(100);
 80111d6:	2064      	movs	r0, #100	@ 0x64
 80111d8:	f7f2 ff9a 	bl	8004110 <HAL_Delay>
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80111dc:	f7f2 ff8c 	bl	80040f8 <HAL_GetTick>
 80111e0:	4602      	mov	r2, r0
 80111e2:	4b08      	ldr	r3, [pc, #32]	@ (8011204 <MotionDetection+0x90>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	1ad2      	subs	r2, r2, r3
 80111e8:	4b0d      	ldr	r3, [pc, #52]	@ (8011220 <MotionDetection+0xac>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d3d8      	bcc.n	80111a2 <MotionDetection+0x2e>
//}
//

	}

	cli_printf(cli, "Session ended");
 80111f0:	490c      	ldr	r1, [pc, #48]	@ (8011224 <MotionDetection+0xb0>)
 80111f2:	68f8      	ldr	r0, [r7, #12]
 80111f4:	f7fe f982 	bl	800f4fc <cli_printf>

}
 80111f8:	bf00      	nop
 80111fa:	3710      	adds	r7, #16
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	08023154 	.word	0x08023154
 8011204:	20001b34 	.word	0x20001b34
 8011208:	20001b3c 	.word	0x20001b3c
 801120c:	40020000 	.word	0x40020000
 8011210:	20001530 	.word	0x20001530
 8011214:	0802318c 	.word	0x0802318c
 8011218:	08023194 	.word	0x08023194
 801121c:	0802319c 	.word	0x0802319c
 8011220:	20000020 	.word	0x20000020
 8011224:	080231b0 	.word	0x080231b0

08011228 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	60f8      	str	r0, [r7, #12]
 8011230:	60b9      	str	r1, [r7, #8]
 8011232:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "AirQuality Measured Values:");
 8011234:	4922      	ldr	r1, [pc, #136]	@ (80112c0 <AirQuality+0x98>)
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f7fe f960 	bl	800f4fc <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 801123c:	4b21      	ldr	r3, [pc, #132]	@ (80112c4 <AirQuality+0x9c>)
 801123e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011242:	2b00      	cmp	r3, #0
 8011244:	d104      	bne.n	8011250 <AirQuality+0x28>
 8011246:	4b1f      	ldr	r3, [pc, #124]	@ (80112c4 <AirQuality+0x9c>)
 8011248:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801124c:	2b00      	cmp	r3, #0
 801124e:	d004      	beq.n	801125a <AirQuality+0x32>
		cli_printf(cli, "Calculating, try again later");
 8011250:	491d      	ldr	r1, [pc, #116]	@ (80112c8 <AirQuality+0xa0>)
 8011252:	68f8      	ldr	r0, [r7, #12]
 8011254:	f7fe f952 	bl	800f4fc <cli_printf>
 8011258:	e02e      	b.n	80112b8 <AirQuality+0x90>
	} else {

		get_sps30_measurement();
 801125a:	f7f0 faf7 	bl	800184c <get_sps30_measurement>
		cli_printf(cli, "%0.2f pm1.0", _RunTime_Packet.pm1_0);
 801125e:	4b19      	ldr	r3, [pc, #100]	@ (80112c4 <AirQuality+0x9c>)
 8011260:	691b      	ldr	r3, [r3, #16]
 8011262:	4618      	mov	r0, r3
 8011264:	f7ef f988 	bl	8000578 <__aeabi_f2d>
 8011268:	4602      	mov	r2, r0
 801126a:	460b      	mov	r3, r1
 801126c:	4917      	ldr	r1, [pc, #92]	@ (80112cc <AirQuality+0xa4>)
 801126e:	68f8      	ldr	r0, [r7, #12]
 8011270:	f7fe f944 	bl	800f4fc <cli_printf>
		cli_printf(cli, "%0.2f pm2.5 ", _RunTime_Packet.pm2_5);
 8011274:	4b13      	ldr	r3, [pc, #76]	@ (80112c4 <AirQuality+0x9c>)
 8011276:	695b      	ldr	r3, [r3, #20]
 8011278:	4618      	mov	r0, r3
 801127a:	f7ef f97d 	bl	8000578 <__aeabi_f2d>
 801127e:	4602      	mov	r2, r0
 8011280:	460b      	mov	r3, r1
 8011282:	4913      	ldr	r1, [pc, #76]	@ (80112d0 <AirQuality+0xa8>)
 8011284:	68f8      	ldr	r0, [r7, #12]
 8011286:	f7fe f939 	bl	800f4fc <cli_printf>
		cli_printf(cli, "%0.2f pm4.0 ", _RunTime_Packet.pm4_0);
 801128a:	4b0e      	ldr	r3, [pc, #56]	@ (80112c4 <AirQuality+0x9c>)
 801128c:	699b      	ldr	r3, [r3, #24]
 801128e:	4618      	mov	r0, r3
 8011290:	f7ef f972 	bl	8000578 <__aeabi_f2d>
 8011294:	4602      	mov	r2, r0
 8011296:	460b      	mov	r3, r1
 8011298:	490e      	ldr	r1, [pc, #56]	@ (80112d4 <AirQuality+0xac>)
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	f7fe f92e 	bl	800f4fc <cli_printf>
		cli_printf(cli, "%0.2f pm10.0", _RunTime_Packet.pm10_0);
 80112a0:	4b08      	ldr	r3, [pc, #32]	@ (80112c4 <AirQuality+0x9c>)
 80112a2:	69db      	ldr	r3, [r3, #28]
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ef f967 	bl	8000578 <__aeabi_f2d>
 80112aa:	4602      	mov	r2, r0
 80112ac:	460b      	mov	r3, r1
 80112ae:	490a      	ldr	r1, [pc, #40]	@ (80112d8 <AirQuality+0xb0>)
 80112b0:	68f8      	ldr	r0, [r7, #12]
 80112b2:	f7fe f923 	bl	800f4fc <cli_printf>
	}

}
 80112b6:	bf00      	nop
 80112b8:	bf00      	nop
 80112ba:	3710      	adds	r7, #16
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	080231c0 	.word	0x080231c0
 80112c4:	20001530 	.word	0x20001530
 80112c8:	080231dc 	.word	0x080231dc
 80112cc:	080231fc 	.word	0x080231fc
 80112d0:	08023208 	.word	0x08023208
 80112d4:	08023218 	.word	0x08023218
 80112d8:	08023228 	.word	0x08023228

080112dc <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 80112dc:	b580      	push	{r7, lr}
 80112de:	b084      	sub	sp, #16
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	60f8      	str	r0, [r7, #12]
 80112e4:	60b9      	str	r1, [r7, #8]
 80112e6:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 80112e8:	4808      	ldr	r0, [pc, #32]	@ (801130c <BattVolt+0x30>)
 80112ea:	f002 fee5 	bl	80140b8 <adc_Measure>
	cli_printf(cli, "Battery voltage: %0.2f", _RunTime_Packet.battery_voltage);
 80112ee:	4b08      	ldr	r3, [pc, #32]	@ (8011310 <BattVolt+0x34>)
 80112f0:	6a1b      	ldr	r3, [r3, #32]
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7ef f940 	bl	8000578 <__aeabi_f2d>
 80112f8:	4602      	mov	r2, r0
 80112fa:	460b      	mov	r3, r1
 80112fc:	4905      	ldr	r1, [pc, #20]	@ (8011314 <BattVolt+0x38>)
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	f7fe f8fc 	bl	800f4fc <cli_printf>

}
 8011304:	bf00      	nop
 8011306:	3710      	adds	r7, #16
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	20001550 	.word	0x20001550
 8011310:	20001530 	.word	0x20001530
 8011314:	08023238 	.word	0x08023238

08011318 <port>:

void port(EmbeddedCli *cli, char *args, void *context) {
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	60f8      	str	r0, [r7, #12]
 8011320:	60b9      	str	r1, [r7, #8]
 8011322:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Auxiliary port value measured(inactive)");
 8011324:	4903      	ldr	r1, [pc, #12]	@ (8011334 <port+0x1c>)
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f7fe f8e8 	bl	800f4fc <cli_printf>
}
 801132c:	bf00      	nop
 801132e:	3710      	adds	r7, #16
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	08023250 	.word	0x08023250

08011338 <showall>:

void showall(EmbeddedCli *cli, char *args, void *context) {
 8011338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801133a:	b0ad      	sub	sp, #180	@ 0xb4
 801133c:	af06      	add	r7, sp, #24
 801133e:	60f8      	str	r0, [r7, #12]
 8011340:	60b9      	str	r1, [r7, #8]
 8011342:	607a      	str	r2, [r7, #4]
	char buff_pm[20];
	char buff_filewritten[50];

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 8011344:	4b9e      	ldr	r3, [pc, #632]	@ (80115c0 <showall+0x288>)
 8011346:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801134a:	2b00      	cmp	r3, #0
 801134c:	d104      	bne.n	8011358 <showall+0x20>
 801134e:	4b9c      	ldr	r3, [pc, #624]	@ (80115c0 <showall+0x288>)
 8011350:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011354:	2b00      	cmp	r3, #0
 8011356:	d006      	beq.n	8011366 <showall+0x2e>
		sprintf(buff_pm, "Calculating");
 8011358:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801135c:	4999      	ldr	r1, [pc, #612]	@ (80115c4 <showall+0x28c>)
 801135e:	4618      	mov	r0, r3
 8011360:	f00d fb2e 	bl	801e9c0 <siprintf>
 8011364:	e00d      	b.n	8011382 <showall+0x4a>
	} else {

		get_sps30_measurement();
 8011366:	f7f0 fa71 	bl	800184c <get_sps30_measurement>
		sprintf(buff_pm, "%0.2f", _RunTime_Packet.pm2_5);
 801136a:	4b95      	ldr	r3, [pc, #596]	@ (80115c0 <showall+0x288>)
 801136c:	695b      	ldr	r3, [r3, #20]
 801136e:	4618      	mov	r0, r3
 8011370:	f7ef f902 	bl	8000578 <__aeabi_f2d>
 8011374:	4602      	mov	r2, r0
 8011376:	460b      	mov	r3, r1
 8011378:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 801137c:	4992      	ldr	r1, [pc, #584]	@ (80115c8 <showall+0x290>)
 801137e:	f00d fb1f 	bl	801e9c0 <siprintf>

	}
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8011382:	4892      	ldr	r0, [pc, #584]	@ (80115cc <showall+0x294>)
 8011384:	f002 fe98 	bl	80140b8 <adc_Measure>
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8011388:	2101      	movs	r1, #1
 801138a:	4891      	ldr	r0, [pc, #580]	@ (80115d0 <showall+0x298>)
 801138c:	f7f4 fe80 	bl	8006090 <HAL_GPIO_ReadPin>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d003      	beq.n	801139e <showall+0x66>
		_RunTime_Packet.motion_detection = 1;
 8011396:	4b8a      	ldr	r3, [pc, #552]	@ (80115c0 <showall+0x288>)
 8011398:	2201      	movs	r2, #1
 801139a:	731a      	strb	r2, [r3, #12]
 801139c:	e002      	b.n	80113a4 <showall+0x6c>
	} else {
		_RunTime_Packet.motion_detection = 0;
 801139e:	4b88      	ldr	r3, [pc, #544]	@ (80115c0 <showall+0x288>)
 80113a0:	2200      	movs	r2, #0
 80113a2:	731a      	strb	r2, [r3, #12]
	}

	char co2_Sensor_stat[30] = "ERROR";
 80113a4:	4a8b      	ldr	r2, [pc, #556]	@ (80115d4 <showall+0x29c>)
 80113a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80113aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113ae:	6018      	str	r0, [r3, #0]
 80113b0:	3304      	adds	r3, #4
 80113b2:	8019      	strh	r1, [r3, #0]
 80113b4:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 80113b8:	2200      	movs	r2, #0
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	605a      	str	r2, [r3, #4]
 80113be:	609a      	str	r2, [r3, #8]
 80113c0:	60da      	str	r2, [r3, #12]
 80113c2:	611a      	str	r2, [r3, #16]
 80113c4:	615a      	str	r2, [r3, #20]
	if (!_RunTime_Packet.scd4x_i2c_error) {
 80113c6:	4b7e      	ldr	r3, [pc, #504]	@ (80115c0 <showall+0x288>)
 80113c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d10a      	bne.n	80113e6 <showall+0xae>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	//get_scd30_measurement();
#endif
		strcpy(co2_Sensor_stat,"ACTIVE");
 80113d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80113d4:	4a80      	ldr	r2, [pc, #512]	@ (80115d8 <showall+0x2a0>)
 80113d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113da:	6018      	str	r0, [r3, #0]
 80113dc:	3304      	adds	r3, #4
 80113de:	8019      	strh	r1, [r3, #0]
 80113e0:	3302      	adds	r3, #2
 80113e2:	0c0a      	lsrs	r2, r1, #16
 80113e4:	701a      	strb	r2, [r3, #0]
	}


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 80113e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80113ea:	2200      	movs	r2, #0
 80113ec:	4619      	mov	r1, r3
 80113ee:	487b      	ldr	r0, [pc, #492]	@ (80115dc <showall+0x2a4>)
 80113f0:	f7f8 fba1 	bl	8009b36 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80113f4:	f107 0318 	add.w	r3, r7, #24
 80113f8:	2200      	movs	r2, #0
 80113fa:	4619      	mov	r1, r3
 80113fc:	4877      	ldr	r0, [pc, #476]	@ (80115dc <showall+0x2a4>)
 80113fe:	f7f8 fab8 	bl	8009972 <HAL_RTC_GetTime>

	if (datawritten == 0) {
 8011402:	4b77      	ldr	r3, [pc, #476]	@ (80115e0 <showall+0x2a8>)
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d106      	bne.n	8011418 <showall+0xe0>

		sprintf(buff_filewritten, "Data not written yet");
 801140a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801140e:	4975      	ldr	r1, [pc, #468]	@ (80115e4 <showall+0x2ac>)
 8011410:	4618      	mov	r0, r3
 8011412:	f00d fad5 	bl	801e9c0 <siprintf>
 8011416:	e014      	b.n	8011442 <showall+0x10a>

	} else if (datawritten == 1) {
 8011418:	4b71      	ldr	r3, [pc, #452]	@ (80115e0 <showall+0x2a8>)
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	2b01      	cmp	r3, #1
 801141e:	d106      	bne.n	801142e <showall+0xf6>
		sprintf(buff_filewritten, " **SUCCESSFUL** ");
 8011420:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011424:	4970      	ldr	r1, [pc, #448]	@ (80115e8 <showall+0x2b0>)
 8011426:	4618      	mov	r0, r3
 8011428:	f00d faca 	bl	801e9c0 <siprintf>
 801142c:	e009      	b.n	8011442 <showall+0x10a>
	} else if (datawritten == 2) {
 801142e:	4b6c      	ldr	r3, [pc, #432]	@ (80115e0 <showall+0x2a8>)
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	2b02      	cmp	r3, #2
 8011434:	d105      	bne.n	8011442 <showall+0x10a>

		sprintf(buff_filewritten, " **FAILED** ");
 8011436:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801143a:	496c      	ldr	r1, [pc, #432]	@ (80115ec <showall+0x2b4>)
 801143c:	4618      	mov	r0, r3
 801143e:	f00d fabf 	bl	801e9c0 <siprintf>
	}
	uint16_t calib_val = 0;
 8011442:	2300      	movs	r3, #0
 8011444:	82fb      	strh	r3, [r7, #22]
	uint16_t calib_stat = 0;
 8011446:	2300      	movs	r3, #0
 8011448:	82bb      	strh	r3, [r7, #20]
	uint16_t temp_offset = 0;
 801144a:	2300      	movs	r3, #0
 801144c:	827b      	strh	r3, [r7, #18]
	uint16_t altitude_comp = 0;
 801144e:	2300      	movs	r3, #0
 8011450:	823b      	strh	r3, [r7, #16]
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011452:	4b5b      	ldr	r3, [pc, #364]	@ (80115c0 <showall+0x288>)
 8011454:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011458:	2b00      	cmp	r3, #0
 801145a:	d113      	bne.n	8011484 <showall+0x14c>
	scd30_get_force_recalibration_status(&calib_val);
 801145c:	f107 0316 	add.w	r3, r7, #22
 8011460:	4618      	mov	r0, r3
 8011462:	f003 f95d 	bl	8014720 <scd30_get_force_recalibration_status>
	scd30_get_auto_calibration_status(&calib_stat);
 8011466:	f107 0314 	add.w	r3, r7, #20
 801146a:	4618      	mov	r0, r3
 801146c:	f003 f8ca 	bl	8014604 <scd30_get_auto_calibration_status>
	scd30_get_altitude_compensation(&altitude_comp);
 8011470:	f107 0310 	add.w	r3, r7, #16
 8011474:	4618      	mov	r0, r3
 8011476:	f003 fa31 	bl	80148dc <scd30_get_altitude_compensation>
	scd30_get_temperature_offset(&temp_offset);
 801147a:	f107 0312 	add.w	r3, r7, #18
 801147e:	4618      	mov	r0, r3
 8011480:	f003 f9dc 	bl	801483c <scd30_get_temperature_offset>
	}


	cli_printf(cli, "");
 8011484:	495a      	ldr	r1, [pc, #360]	@ (80115f0 <showall+0x2b8>)
 8011486:	68f8      	ldr	r0, [r7, #12]
 8011488:	f7fe f838 	bl	800f4fc <cli_printf>
	cli_printf(cli, "");
 801148c:	4958      	ldr	r1, [pc, #352]	@ (80115f0 <showall+0x2b8>)
 801148e:	68f8      	ldr	r0, [r7, #12]
 8011490:	f7fe f834 	bl	800f4fc <cli_printf>
	cli_printf(cli, "");
 8011494:	4956      	ldr	r1, [pc, #344]	@ (80115f0 <showall+0x2b8>)
 8011496:	68f8      	ldr	r0, [r7, #12]
 8011498:	f7fe f830 	bl	800f4fc <cli_printf>

	cli_printf(cli, " *devEUI           | %s                       ",
 801149c:	f7f0 ffe4 	bl	8002468 <ver_GetUid>
 80114a0:	4603      	mov	r3, r0
 80114a2:	461a      	mov	r2, r3
 80114a4:	4953      	ldr	r1, [pc, #332]	@ (80115f4 <showall+0x2bc>)
 80114a6:	68f8      	ldr	r0, [r7, #12]
 80114a8:	f7fe f828 	bl	800f4fc <cli_printf>
			ver_GetUid());
	cli_printf(cli, " *Id               | %s                       ",
 80114ac:	4a52      	ldr	r2, [pc, #328]	@ (80115f8 <showall+0x2c0>)
 80114ae:	4953      	ldr	r1, [pc, #332]	@ (80115fc <showall+0x2c4>)
 80114b0:	68f8      	ldr	r0, [r7, #12]
 80114b2:	f7fe f823 	bl	800f4fc <cli_printf>
			_Flash_Packet.id);
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80114b6:	7e3b      	ldrb	r3, [r7, #24]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80114b8:	461a      	mov	r2, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80114ba:	7e7b      	ldrb	r3, [r7, #25]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80114bc:	4619      	mov	r1, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80114be:	7ebb      	ldrb	r3, [r7, #26]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	460b      	mov	r3, r1
 80114c4:	494e      	ldr	r1, [pc, #312]	@ (8011600 <showall+0x2c8>)
 80114c6:	68f8      	ldr	r0, [r7, #12]
 80114c8:	f7fe f818 	bl	800f4fc <cli_printf>
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
			gDate.Date, gDate.Month, gDate.Year);
 80114cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80114d0:	461a      	mov	r2, r3
			gDate.Date, gDate.Month, gDate.Year);
 80114d2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80114d6:	4619      	mov	r1, r3
			gDate.Date, gDate.Month, gDate.Year);
 80114d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	460b      	mov	r3, r1
 80114e0:	4948      	ldr	r1, [pc, #288]	@ (8011604 <showall+0x2cc>)
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f7fe f80a 	bl	800f4fc <cli_printf>
	cli_printf(cli, " *Location         | %s                       ",
 80114e8:	4a47      	ldr	r2, [pc, #284]	@ (8011608 <showall+0x2d0>)
 80114ea:	4948      	ldr	r1, [pc, #288]	@ (801160c <showall+0x2d4>)
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f7fe f805 	bl	800f4fc <cli_printf>
			_Flash_Packet.location);
	cli_printf(cli, " *Filename         | %s                       ",
 80114f2:	4a47      	ldr	r2, [pc, #284]	@ (8011610 <showall+0x2d8>)
 80114f4:	4947      	ldr	r1, [pc, #284]	@ (8011614 <showall+0x2dc>)
 80114f6:	68f8      	ldr	r0, [r7, #12]
 80114f8:	f7fe f800 	bl	800f4fc <cli_printf>
			_Flash_Packet.filename_ver_date);
	cli_printf(cli, " *Fileformat       | %s                       ",
 80114fc:	4a46      	ldr	r2, [pc, #280]	@ (8011618 <showall+0x2e0>)
 80114fe:	4947      	ldr	r1, [pc, #284]	@ (801161c <showall+0x2e4>)
 8011500:	68f8      	ldr	r0, [r7, #12]
 8011502:	f7fd fffb 	bl	800f4fc <cli_printf>
			_Flash_Packet.File_Format);
	cli_printf(cli, " *Group            | %s                       ",
 8011506:	4a46      	ldr	r2, [pc, #280]	@ (8011620 <showall+0x2e8>)
 8011508:	4946      	ldr	r1, [pc, #280]	@ (8011624 <showall+0x2ec>)
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f7fd fff6 	bl	800f4fc <cli_printf>
			_Flash_Packet.group);
	cli_printf(cli, " *Interval         | %dmin                       ",
 8011510:	4b45      	ldr	r3, [pc, #276]	@ (8011628 <showall+0x2f0>)
 8011512:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011516:	461a      	mov	r2, r3
 8011518:	4944      	ldr	r1, [pc, #272]	@ (801162c <showall+0x2f4>)
 801151a:	68f8      	ldr	r0, [r7, #12]
 801151c:	f7fd ffee 	bl	800f4fc <cli_printf>
			_Flash_Packet.Time_Interval);
	cli_printf(cli, " *Co2 sensor status| %s                       ",
 8011520:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011524:	461a      	mov	r2, r3
 8011526:	4942      	ldr	r1, [pc, #264]	@ (8011630 <showall+0x2f8>)
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f7fd ffe7 	bl	800f4fc <cli_printf>
			co2_Sensor_stat);
	cli_printf(cli, " *Calibration Value| %d                       ",
 801152e:	8afb      	ldrh	r3, [r7, #22]
 8011530:	461a      	mov	r2, r3
 8011532:	4940      	ldr	r1, [pc, #256]	@ (8011634 <showall+0x2fc>)
 8011534:	68f8      	ldr	r0, [r7, #12]
 8011536:	f7fd ffe1 	bl	800f4fc <cli_printf>
			calib_val);
	cli_printf(cli, " *Auto calibration | %d                       ",
 801153a:	8abb      	ldrh	r3, [r7, #20]
 801153c:	461a      	mov	r2, r3
 801153e:	493e      	ldr	r1, [pc, #248]	@ (8011638 <showall+0x300>)
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f7fd ffdb 	bl	800f4fc <cli_printf>
			calib_stat);
	cli_printf(cli, " *Temp offset      | %d                       ",
 8011546:	8a7b      	ldrh	r3, [r7, #18]
 8011548:	461a      	mov	r2, r3
 801154a:	493c      	ldr	r1, [pc, #240]	@ (801163c <showall+0x304>)
 801154c:	68f8      	ldr	r0, [r7, #12]
 801154e:	f7fd ffd5 	bl	800f4fc <cli_printf>
			temp_offset);
	cli_printf(cli, " *Altitude Comp    | %d                       ",
 8011552:	8a3b      	ldrh	r3, [r7, #16]
 8011554:	461a      	mov	r2, r3
 8011556:	493a      	ldr	r1, [pc, #232]	@ (8011640 <showall+0x308>)
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	f7fd ffcf 	bl	800f4fc <cli_printf>
			altitude_comp);
	cli_printf(cli, " *Co2 Samples      | %d                       ",
			_Flash_Packet.co2_samples);
 801155e:	4b32      	ldr	r3, [pc, #200]	@ (8011628 <showall+0x2f0>)
 8011560:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8011564:	b29b      	uxth	r3, r3
	cli_printf(cli, " *Co2 Samples      | %d                       ",
 8011566:	461a      	mov	r2, r3
 8011568:	4936      	ldr	r1, [pc, #216]	@ (8011644 <showall+0x30c>)
 801156a:	68f8      	ldr	r0, [r7, #12]
 801156c:	f7fd ffc6 	bl	800f4fc <cli_printf>
			_RunTime_Packet.temperature);
	cli_printf(cli, " *Humidity         | %d%%                     ",
			_RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, " *Co2              | %.2f                       ",
			_RunTime_Packet.co2);
 8011570:	4b13      	ldr	r3, [pc, #76]	@ (80115c0 <showall+0x288>)
 8011572:	681b      	ldr	r3, [r3, #0]
	cli_printf(cli, " *Co2              | %.2f                       ",
 8011574:	4618      	mov	r0, r3
 8011576:	f7ee ffff 	bl	8000578 <__aeabi_f2d>
 801157a:	4602      	mov	r2, r0
 801157c:	460b      	mov	r3, r1
 801157e:	4932      	ldr	r1, [pc, #200]	@ (8011648 <showall+0x310>)
 8011580:	68f8      	ldr	r0, [r7, #12]
 8011582:	f7fd ffbb 	bl	800f4fc <cli_printf>
	cli_printf(cli, " *Temperature      | %.2fC                      ",
			_RunTime_Packet.temperature);
 8011586:	4b0e      	ldr	r3, [pc, #56]	@ (80115c0 <showall+0x288>)
 8011588:	685b      	ldr	r3, [r3, #4]
	cli_printf(cli, " *Temperature      | %.2fC                      ",
 801158a:	4618      	mov	r0, r3
 801158c:	f7ee fff4 	bl	8000578 <__aeabi_f2d>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	492d      	ldr	r1, [pc, #180]	@ (801164c <showall+0x314>)
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	f7fd ffb0 	bl	800f4fc <cli_printf>
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
			_RunTime_Packet.humidity);
 801159c:	4b08      	ldr	r3, [pc, #32]	@ (80115c0 <showall+0x288>)
 801159e:	689b      	ldr	r3, [r3, #8]
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7ee ffe9 	bl	8000578 <__aeabi_f2d>
 80115a6:	4602      	mov	r2, r0
 80115a8:	460b      	mov	r3, r1
 80115aa:	4929      	ldr	r1, [pc, #164]	@ (8011650 <showall+0x318>)
 80115ac:	68f8      	ldr	r0, [r7, #12]
 80115ae:	f7fd ffa5 	bl	800f4fc <cli_printf>
#endif

	cli_printf(cli, " *PIR              | %s                       ",
			_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80115b2:	4b03      	ldr	r3, [pc, #12]	@ (80115c0 <showall+0x288>)
 80115b4:	7b1b      	ldrb	r3, [r3, #12]
	cli_printf(cli, " *PIR              | %s                       ",
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d14e      	bne.n	8011658 <showall+0x320>
 80115ba:	4b26      	ldr	r3, [pc, #152]	@ (8011654 <showall+0x31c>)
 80115bc:	e04d      	b.n	801165a <showall+0x322>
 80115be:	bf00      	nop
 80115c0:	20001530 	.word	0x20001530
 80115c4:	08023278 	.word	0x08023278
 80115c8:	08023284 	.word	0x08023284
 80115cc:	20001550 	.word	0x20001550
 80115d0:	40020000 	.word	0x40020000
 80115d4:	08023798 	.word	0x08023798
 80115d8:	0802328c 	.word	0x0802328c
 80115dc:	20001898 	.word	0x20001898
 80115e0:	20002328 	.word	0x20002328
 80115e4:	08023294 	.word	0x08023294
 80115e8:	080232ac 	.word	0x080232ac
 80115ec:	080232c0 	.word	0x080232c0
 80115f0:	08022e3c 	.word	0x08022e3c
 80115f4:	080232d0 	.word	0x080232d0
 80115f8:	20001399 	.word	0x20001399
 80115fc:	08023300 	.word	0x08023300
 8011600:	08023330 	.word	0x08023330
 8011604:	08023360 	.word	0x08023360
 8011608:	200013cb 	.word	0x200013cb
 801160c:	08023390 	.word	0x08023390
 8011610:	200014c5 	.word	0x200014c5
 8011614:	080233c0 	.word	0x080233c0
 8011618:	20001330 	.word	0x20001330
 801161c:	080233f0 	.word	0x080233f0
 8011620:	2000142f 	.word	0x2000142f
 8011624:	08023420 	.word	0x08023420
 8011628:	200012cc 	.word	0x200012cc
 801162c:	08023450 	.word	0x08023450
 8011630:	08023484 	.word	0x08023484
 8011634:	080234b4 	.word	0x080234b4
 8011638:	080234e4 	.word	0x080234e4
 801163c:	08023514 	.word	0x08023514
 8011640:	08023544 	.word	0x08023544
 8011644:	08023574 	.word	0x08023574
 8011648:	080235a4 	.word	0x080235a4
 801164c:	080235d8 	.word	0x080235d8
 8011650:	0802360c 	.word	0x0802360c
 8011654:	0802318c 	.word	0x0802318c
 8011658:	4b28      	ldr	r3, [pc, #160]	@ (80116fc <showall+0x3c4>)
 801165a:	461a      	mov	r2, r3
 801165c:	4928      	ldr	r1, [pc, #160]	@ (8011700 <showall+0x3c8>)
 801165e:	68f8      	ldr	r0, [r7, #12]
 8011660:	f7fd ff4c 	bl	800f4fc <cli_printf>
	cli_printf(cli, " *Pm2.5            | %s                       ", buff_pm);
 8011664:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8011668:	461a      	mov	r2, r3
 801166a:	4926      	ldr	r1, [pc, #152]	@ (8011704 <showall+0x3cc>)
 801166c:	68f8      	ldr	r0, [r7, #12]
 801166e:	f7fd ff45 	bl	800f4fc <cli_printf>
	cli_printf(cli, " *Port             | Inactive                 ");
 8011672:	4925      	ldr	r1, [pc, #148]	@ (8011708 <showall+0x3d0>)
 8011674:	68f8      	ldr	r0, [r7, #12]
 8011676:	f7fd ff41 	bl	800f4fc <cli_printf>
	cli_printf(cli, " *Battery          | %0.2f                    ",
			_RunTime_Packet.battery_voltage);
 801167a:	4b24      	ldr	r3, [pc, #144]	@ (801170c <showall+0x3d4>)
 801167c:	6a1b      	ldr	r3, [r3, #32]
	cli_printf(cli, " *Battery          | %0.2f                    ",
 801167e:	4618      	mov	r0, r3
 8011680:	f7ee ff7a 	bl	8000578 <__aeabi_f2d>
 8011684:	4602      	mov	r2, r0
 8011686:	460b      	mov	r3, r1
 8011688:	4921      	ldr	r1, [pc, #132]	@ (8011710 <showall+0x3d8>)
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f7fd ff36 	bl	800f4fc <cli_printf>
	cli_printf(cli, " *Last_Packet      | [Date:%02d.%02d.%02d] [Time: %02d:%02d:%02d] [Filename: %s] [Packet Status: %s]",
 8011690:	4b20      	ldr	r3, [pc, #128]	@ (8011714 <showall+0x3dc>)
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	461d      	mov	r5, r3
 8011696:	4b20      	ldr	r3, [pc, #128]	@ (8011718 <showall+0x3e0>)
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	461e      	mov	r6, r3
 801169c:	4b1f      	ldr	r3, [pc, #124]	@ (801171c <showall+0x3e4>)
 801169e:	781b      	ldrb	r3, [r3, #0]
 80116a0:	461a      	mov	r2, r3
 80116a2:	4b1f      	ldr	r3, [pc, #124]	@ (8011720 <showall+0x3e8>)
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	4619      	mov	r1, r3
 80116a8:	4b1e      	ldr	r3, [pc, #120]	@ (8011724 <showall+0x3ec>)
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	4618      	mov	r0, r3
 80116ae:	4b1e      	ldr	r3, [pc, #120]	@ (8011728 <showall+0x3f0>)
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	461c      	mov	r4, r3
 80116b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80116b8:	9305      	str	r3, [sp, #20]
 80116ba:	4b1c      	ldr	r3, [pc, #112]	@ (801172c <showall+0x3f4>)
 80116bc:	9304      	str	r3, [sp, #16]
 80116be:	9403      	str	r4, [sp, #12]
 80116c0:	9002      	str	r0, [sp, #8]
 80116c2:	9101      	str	r1, [sp, #4]
 80116c4:	9200      	str	r2, [sp, #0]
 80116c6:	4633      	mov	r3, r6
 80116c8:	462a      	mov	r2, r5
 80116ca:	4919      	ldr	r1, [pc, #100]	@ (8011730 <showall+0x3f8>)
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f7fd ff15 	bl	800f4fc <cli_printf>
			fileWrite_day, fileWrite_month, fileWrite_year, fileWrite_hour,
			fileWrite_min, fileWrite_sec, _Flash_Packet.filename_ver_date,
			buff_filewritten);
	cli_printf(cli, " *Scheduled_Packet | [Time: %s]               ",
 80116d2:	4a18      	ldr	r2, [pc, #96]	@ (8011734 <showall+0x3fc>)
 80116d4:	4918      	ldr	r1, [pc, #96]	@ (8011738 <showall+0x400>)
 80116d6:	68f8      	ldr	r0, [r7, #12]
 80116d8:	f7fd ff10 	bl	800f4fc <cli_printf>
			scheduled_packet);

	cli_printf(cli, "");
 80116dc:	4917      	ldr	r1, [pc, #92]	@ (801173c <showall+0x404>)
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	f7fd ff0c 	bl	800f4fc <cli_printf>
	cli_printf(cli, "");
 80116e4:	4915      	ldr	r1, [pc, #84]	@ (801173c <showall+0x404>)
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f7fd ff08 	bl	800f4fc <cli_printf>
	cli_printf(cli, "");
 80116ec:	4913      	ldr	r1, [pc, #76]	@ (801173c <showall+0x404>)
 80116ee:	68f8      	ldr	r0, [r7, #12]
 80116f0:	f7fd ff04 	bl	800f4fc <cli_printf>
}
 80116f4:	bf00      	nop
 80116f6:	379c      	adds	r7, #156	@ 0x9c
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116fc:	08023194 	.word	0x08023194
 8011700:	08023640 	.word	0x08023640
 8011704:	08023670 	.word	0x08023670
 8011708:	080236a0 	.word	0x080236a0
 801170c:	20001530 	.word	0x20001530
 8011710:	080236d0 	.word	0x080236d0
 8011714:	20002322 	.word	0x20002322
 8011718:	20002323 	.word	0x20002323
 801171c:	20002324 	.word	0x20002324
 8011720:	20002325 	.word	0x20002325
 8011724:	20002326 	.word	0x20002326
 8011728:	20002327 	.word	0x20002327
 801172c:	200014c5 	.word	0x200014c5
 8011730:	08023700 	.word	0x08023700
 8011734:	2000002c 	.word	0x2000002c
 8011738:	08023768 	.word	0x08023768
 801173c:	08022e3c 	.word	0x08022e3c

08011740 <systemversion>:

void systemversion(EmbeddedCli *cli, char *args, void *context) {
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	607a      	str	r2, [r7, #4]


	cli_printf(cli, "");
 801174c:	4911      	ldr	r1, [pc, #68]	@ (8011794 <systemversion+0x54>)
 801174e:	68f8      	ldr	r0, [r7, #12]
 8011750:	f7fd fed4 	bl	800f4fc <cli_printf>
		cli_printf(cli, "");
 8011754:	490f      	ldr	r1, [pc, #60]	@ (8011794 <systemversion+0x54>)
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f7fd fed0 	bl	800f4fc <cli_printf>
		cli_printf(cli, "");
 801175c:	490d      	ldr	r1, [pc, #52]	@ (8011794 <systemversion+0x54>)
 801175e:	68f8      	ldr	r0, [r7, #12]
 8011760:	f7fd fecc 	bl	800f4fc <cli_printf>

		cli_printf(cli, " *Hardware | TF410 Version 1.3                       ");
 8011764:	490c      	ldr	r1, [pc, #48]	@ (8011798 <systemversion+0x58>)
 8011766:	68f8      	ldr	r0, [r7, #12]
 8011768:	f7fd fec8 	bl	800f4fc <cli_printf>
		cli_printf(cli, " *Software | TF410 Version 1.5                       ");
 801176c:	490b      	ldr	r1, [pc, #44]	@ (801179c <systemversion+0x5c>)
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	f7fd fec4 	bl	800f4fc <cli_printf>

		cli_printf(cli, "");
 8011774:	4907      	ldr	r1, [pc, #28]	@ (8011794 <systemversion+0x54>)
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	f7fd fec0 	bl	800f4fc <cli_printf>
			cli_printf(cli, "");
 801177c:	4905      	ldr	r1, [pc, #20]	@ (8011794 <systemversion+0x54>)
 801177e:	68f8      	ldr	r0, [r7, #12]
 8011780:	f7fd febc 	bl	800f4fc <cli_printf>
			cli_printf(cli, "");
 8011784:	4903      	ldr	r1, [pc, #12]	@ (8011794 <systemversion+0x54>)
 8011786:	68f8      	ldr	r0, [r7, #12]
 8011788:	f7fd feb8 	bl	800f4fc <cli_printf>

}
 801178c:	bf00      	nop
 801178e:	3710      	adds	r7, #16
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	08022e3c 	.word	0x08022e3c
 8011798:	080237b8 	.word	0x080237b8
 801179c:	080237f0 	.word	0x080237f0

080117a0 <aboutDev>:

void aboutDev(EmbeddedCli *cli, char *args, void *context)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
	  cli_printf(cli, "");
 80117ac:	4917      	ldr	r1, [pc, #92]	@ (801180c <aboutDev+0x6c>)
 80117ae:	68f8      	ldr	r0, [r7, #12]
 80117b0:	f7fd fea4 	bl	800f4fc <cli_printf>
	cli_printf(cli, "");
 80117b4:	4915      	ldr	r1, [pc, #84]	@ (801180c <aboutDev+0x6c>)
 80117b6:	68f8      	ldr	r0, [r7, #12]
 80117b8:	f7fd fea0 	bl	800f4fc <cli_printf>
	cli_printf(cli, "This product is powered by BuildUp! "); //TM 0x99
 80117bc:	4914      	ldr	r1, [pc, #80]	@ (8011810 <aboutDev+0x70>)
 80117be:	68f8      	ldr	r0, [r7, #12]
 80117c0:	f7fd fe9c 	bl	800f4fc <cli_printf>
	cli_printf(cli, "");
 80117c4:	4911      	ldr	r1, [pc, #68]	@ (801180c <aboutDev+0x6c>)
 80117c6:	68f8      	ldr	r0, [r7, #12]
 80117c8:	f7fd fe98 	bl	800f4fc <cli_printf>
	cli_printf(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 80117cc:	4911      	ldr	r1, [pc, #68]	@ (8011814 <aboutDev+0x74>)
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f7fd fe94 	bl	800f4fc <cli_printf>
	cli_printf(cli, "");
 80117d4:	490d      	ldr	r1, [pc, #52]	@ (801180c <aboutDev+0x6c>)
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	f7fd fe90 	bl	800f4fc <cli_printf>
	cli_printf(cli, "Montreal, Canada");
 80117dc:	490e      	ldr	r1, [pc, #56]	@ (8011818 <aboutDev+0x78>)
 80117de:	68f8      	ldr	r0, [r7, #12]
 80117e0:	f7fd fe8c 	bl	800f4fc <cli_printf>
	cli_printf(cli, "");
 80117e4:	4909      	ldr	r1, [pc, #36]	@ (801180c <aboutDev+0x6c>)
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f7fd fe88 	bl	800f4fc <cli_printf>
	cli_printf(cli, "https://thingsfactory.com");
 80117ec:	490b      	ldr	r1, [pc, #44]	@ (801181c <aboutDev+0x7c>)
 80117ee:	68f8      	ldr	r0, [r7, #12]
 80117f0:	f7fd fe84 	bl	800f4fc <cli_printf>
	cli_printf(cli, "");
 80117f4:	4905      	ldr	r1, [pc, #20]	@ (801180c <aboutDev+0x6c>)
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	f7fd fe80 	bl	800f4fc <cli_printf>
	cli_printf(cli, "");
 80117fc:	4903      	ldr	r1, [pc, #12]	@ (801180c <aboutDev+0x6c>)
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f7fd fe7c 	bl	800f4fc <cli_printf>
}
 8011804:	bf00      	nop
 8011806:	3710      	adds	r7, #16
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}
 801180c:	08022e3c 	.word	0x08022e3c
 8011810:	08023828 	.word	0x08023828
 8011814:	08023850 	.word	0x08023850
 8011818:	08023878 	.word	0x08023878
 801181c:	0802388c 	.word	0x0802388c

08011820 <initializeEmbeddedCli>:
/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 8011820:	b5b0      	push	{r4, r5, r7, lr}
 8011822:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 8011826:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 8011828:	f000 fe3b 	bl	80124a2 <embeddedCliNewDefault>
 801182c:	4603      	mov	r3, r0
 801182e:	4aa9      	ldr	r2, [pc, #676]	@ (8011ad4 <initializeEmbeddedCli+0x2b4>)
 8011830:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 8011832:	4ba9      	ldr	r3, [pc, #676]	@ (8011ad8 <initializeEmbeddedCli+0x2b8>)
 8011834:	f507 744d 	add.w	r4, r7, #820	@ 0x334
 8011838:	461d      	mov	r5, r3
 801183a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801183c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801183e:	682b      	ldr	r3, [r5, #0]
 8011840:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 8011842:	4ba6      	ldr	r3, [pc, #664]	@ (8011adc <initializeEmbeddedCli+0x2bc>)
 8011844:	f507 7448 	add.w	r4, r7, #800	@ 0x320
 8011848:	461d      	mov	r5, r3
 801184a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801184c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801184e:	682b      	ldr	r3, [r5, #0]
 8011850:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor",
			.tokenizeArgs = true, .context = NULL, .binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature",
 8011852:	4ba3      	ldr	r3, [pc, #652]	@ (8011ae0 <initializeEmbeddedCli+0x2c0>)
 8011854:	f507 7443 	add.w	r4, r7, #780	@ 0x30c
 8011858:	461d      	mov	r5, r3
 801185a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801185c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801185e:	682b      	ldr	r3, [r5, #0]
 8011860:	6023      	str	r3, [r4, #0]
			.help = "Unique device identifier(from STM32 electronic signature)",
			.tokenizeArgs = true, .context = NULL, .binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 8011862:	4ba0      	ldr	r3, [pc, #640]	@ (8011ae4 <initializeEmbeddedCli+0x2c4>)
 8011864:	f507 743e 	add.w	r4, r7, #760	@ 0x2f8
 8011868:	461d      	mov	r5, r3
 801186a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801186c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801186e:	682b      	ldr	r3, [r5, #0]
 8011870:	6023      	str	r3, [r4, #0]
			"Asset number assigned to the device", .tokenizeArgs = true,
			.context = NULL, .binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 8011872:	4b9d      	ldr	r3, [pc, #628]	@ (8011ae8 <initializeEmbeddedCli+0x2c8>)
 8011874:	f507 7439 	add.w	r4, r7, #740	@ 0x2e4
 8011878:	461d      	mov	r5, r3
 801187a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801187c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801187e:	682b      	ldr	r3, [r5, #0]
 8011880:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Set_name = { .name = "set-name", .help =
//				"Optional field to assign name to the device", .tokenizeArgs = true, .context = NULL,
//				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 8011882:	4b9a      	ldr	r3, [pc, #616]	@ (8011aec <initializeEmbeddedCli+0x2cc>)
 8011884:	f507 7434 	add.w	r4, r7, #720	@ 0x2d0
 8011888:	461d      	mov	r5, r3
 801188a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801188c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801188e:	682b      	ldr	r3, [r5, #0]
 8011890:	6023      	str	r3, [r4, #0]
			"Optional field to assign group to the device",
			.tokenizeArgs = true, .context = NULL, .binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help = "gets ID",
 8011892:	4b97      	ldr	r3, [pc, #604]	@ (8011af0 <initializeEmbeddedCli+0x2d0>)
 8011894:	f507 742f 	add.w	r4, r7, #700	@ 0x2bc
 8011898:	461d      	mov	r5, r3
 801189a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801189c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801189e:	682b      	ldr	r3, [r5, #0]
 80118a0:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 80118a2:	4b94      	ldr	r3, [pc, #592]	@ (8011af4 <initializeEmbeddedCli+0x2d4>)
 80118a4:	f507 742a 	add.w	r4, r7, #680	@ 0x2a8
 80118a8:	461d      	mov	r5, r3
 80118aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118ae:	682b      	ldr	r3, [r5, #0]
 80118b0:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Get_name = { .name = "get-name", .help =
//				"gets name", .tokenizeArgs = true, .context = NULL,
//				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help = "gets group",
 80118b2:	4b91      	ldr	r3, [pc, #580]	@ (8011af8 <initializeEmbeddedCli+0x2d8>)
 80118b4:	f507 7425 	add.w	r4, r7, #660	@ 0x294
 80118b8:	461d      	mov	r5, r3
 80118ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118be:	682b      	ldr	r3, [r5, #0]
 80118c0:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 80118c2:	4b8e      	ldr	r3, [pc, #568]	@ (8011afc <initializeEmbeddedCli+0x2dc>)
 80118c4:	f507 7420 	add.w	r4, r7, #640	@ 0x280
 80118c8:	461d      	mov	r5, r3
 80118ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118ce:	682b      	ldr	r3, [r5, #0]
 80118d0:	6023      	str	r3, [r4, #0]
			"In day:month:year", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help = "In hh:mm:ss",
 80118d2:	4b8b      	ldr	r3, [pc, #556]	@ (8011b00 <initializeEmbeddedCli+0x2e0>)
 80118d4:	f507 741b 	add.w	r4, r7, #620	@ 0x26c
 80118d8:	461d      	mov	r5, r3
 80118da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118de:	682b      	ldr	r3, [r5, #0]
 80118e0:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 80118e2:	4b88      	ldr	r3, [pc, #544]	@ (8011b04 <initializeEmbeddedCli+0x2e4>)
 80118e4:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 80118e8:	461d      	mov	r5, r3
 80118ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118ee:	682b      	ldr	r3, [r5, #0]
 80118f0:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 80118f2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80118f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80118fa:	4a83      	ldr	r2, [pc, #524]	@ (8011b08 <initializeEmbeddedCli+0x2e8>)
 80118fc:	461c      	mov	r4, r3
 80118fe:	4615      	mov	r5, r2
 8011900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011904:	682b      	ldr	r3, [r5, #0]
 8011906:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 8011908:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801190c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011910:	4a7e      	ldr	r2, [pc, #504]	@ (8011b0c <initializeEmbeddedCli+0x2ec>)
 8011912:	461c      	mov	r4, r3
 8011914:	4615      	mov	r5, r2
 8011916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801191a:	682b      	ldr	r3, [r5, #0]
 801191c:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true,
			.context = NULL, .binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 801191e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011922:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011926:	4a7a      	ldr	r2, [pc, #488]	@ (8011b10 <initializeEmbeddedCli+0x2f0>)
 8011928:	461c      	mov	r4, r3
 801192a:	4615      	mov	r5, r2
 801192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011930:	682b      	ldr	r3, [r5, #0]
 8011932:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };

	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 8011934:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011938:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 801193c:	4a75      	ldr	r2, [pc, #468]	@ (8011b14 <initializeEmbeddedCli+0x2f4>)
 801193e:	461c      	mov	r4, r3
 8011940:	4615      	mov	r5, r2
 8011942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011946:	682b      	ldr	r3, [r5, #0]
 8011948:	6023      	str	r3, [r4, #0]
			"Filename prefix as in \"value+date\" in file naming convention",
			.tokenizeArgs = true, .context = NULL, .binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 801194a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801194e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8011952:	4a71      	ldr	r2, [pc, #452]	@ (8011b18 <initializeEmbeddedCli+0x2f8>)
 8011954:	461c      	mov	r4, r3
 8011956:	4615      	mov	r5, r2
 8011958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801195a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801195c:	682b      	ldr	r3, [r5, #0]
 801195e:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL, .binding =
			GetFilename };

	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 8011960:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011964:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011968:	4a6c      	ldr	r2, [pc, #432]	@ (8011b1c <initializeEmbeddedCli+0x2fc>)
 801196a:	461c      	mov	r4, r3
 801196c:	4615      	mov	r5, r2
 801196e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011972:	682b      	ldr	r3, [r5, #0]
 8011974:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 8011976:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801197a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 801197e:	4a68      	ldr	r2, [pc, #416]	@ (8011b20 <initializeEmbeddedCli+0x300>)
 8011980:	461c      	mov	r4, r3
 8011982:	4615      	mov	r5, r2
 8011984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011988:	682b      	ldr	r3, [r5, #0]
 801198a:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL, .binding =
			GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 801198c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011990:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011994:	4a63      	ldr	r2, [pc, #396]	@ (8011b24 <initializeEmbeddedCli+0x304>)
 8011996:	461c      	mov	r4, r3
 8011998:	4615      	mov	r5, r2
 801199a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801199c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801199e:	682b      	ldr	r3, [r5, #0]
 80119a0:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context =
			NULL, .binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-force-calibration", .help =
 80119a2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119a6:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80119aa:	4a5f      	ldr	r2, [pc, #380]	@ (8011b28 <initializeEmbeddedCli+0x308>)
 80119ac:	461c      	mov	r4, r3
 80119ae:	4615      	mov	r5, r2
 80119b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119b4:	682b      	ldr	r3, [r5, #0]
 80119b6:	6023      	str	r3, [r4, #0]
			"Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding getCo2_Calibration = { .name = "get-co2-force-calibration-status", .help =
 80119b8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119bc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80119c0:	4a5a      	ldr	r2, [pc, #360]	@ (8011b2c <initializeEmbeddedCli+0x30c>)
 80119c2:	461c      	mov	r4, r3
 80119c4:	4615      	mov	r5, r2
 80119c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119ca:	682b      	ldr	r3, [r5, #0]
 80119cc:	6023      	str	r3, [r4, #0]
			"Get status of Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = statco2calibrate };


	CliCommandBinding Co2_AutoCalibration = { .name = "co2-auto-calibration", .help =
 80119ce:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119d2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80119d6:	4a56      	ldr	r2, [pc, #344]	@ (8011b30 <initializeEmbeddedCli+0x310>)
 80119d8:	461c      	mov	r4, r3
 80119da:	4615      	mov	r5, r2
 80119dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119e0:	682b      	ldr	r3, [r5, #0]
 80119e2:	6023      	str	r3, [r4, #0]
			"Enable/Disable auto calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2_auto_calibration };


	CliCommandBinding getCo2_AutoCalibration = { .name = "get-co2-auto-calibration", .help =
 80119e4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119e8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80119ec:	4a51      	ldr	r2, [pc, #324]	@ (8011b34 <initializeEmbeddedCli+0x314>)
 80119ee:	461c      	mov	r4, r3
 80119f0:	4615      	mov	r5, r2
 80119f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119f6:	682b      	ldr	r3, [r5, #0]
 80119f8:	6023      	str	r3, [r4, #0]
			"Get Co2 sensor auto calibration status ", .tokenizeArgs = true, .context = NULL,
			.binding = get_auto_calibration };

	CliCommandBinding Co2_Tempoffset = { .name = "set-co2-temp-offset", .help =
 80119fa:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119fe:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8011a02:	4a4d      	ldr	r2, [pc, #308]	@ (8011b38 <initializeEmbeddedCli+0x318>)
 8011a04:	461c      	mov	r4, r3
 8011a06:	4615      	mov	r5, r2
 8011a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a0c:	682b      	ldr	r3, [r5, #0]
 8011a0e:	6023      	str	r3, [r4, #0]
			"Set temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_temp_offset };

	CliCommandBinding getCo2_Tempoffset = { .name = "get-co2-temp-offset", .help =
 8011a10:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a14:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8011a18:	4a48      	ldr	r2, [pc, #288]	@ (8011b3c <initializeEmbeddedCli+0x31c>)
 8011a1a:	461c      	mov	r4, r3
 8011a1c:	4615      	mov	r5, r2
 8011a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a22:	682b      	ldr	r3, [r5, #0]
 8011a24:	6023      	str	r3, [r4, #0]
			"Get temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_temp_offset };

	CliCommandBinding Co2_altitudecompsentation = { .name = "set-co2-altitude-comp", .help =
 8011a26:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a2a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011a2e:	4a44      	ldr	r2, [pc, #272]	@ (8011b40 <initializeEmbeddedCli+0x320>)
 8011a30:	461c      	mov	r4, r3
 8011a32:	4615      	mov	r5, r2
 8011a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a38:	682b      	ldr	r3, [r5, #0]
 8011a3a:	6023      	str	r3, [r4, #0]
			"Set altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_altitude_compensation };

	CliCommandBinding getCo2_altitudecompsentation = { .name = "get-co2-altitude-comp", .help =
 8011a3c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a40:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8011a44:	4a3f      	ldr	r2, [pc, #252]	@ (8011b44 <initializeEmbeddedCli+0x324>)
 8011a46:	461c      	mov	r4, r3
 8011a48:	4615      	mov	r5, r2
 8011a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a4e:	682b      	ldr	r3, [r5, #0]
 8011a50:	6023      	str	r3, [r4, #0]
			"Get altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_altitude_compensation };

	CliCommandBinding Co2_Calibration_program = { .name = "run-co2-calib-prog", .help =
 8011a52:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a56:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8011a5a:	4a3b      	ldr	r2, [pc, #236]	@ (8011b48 <initializeEmbeddedCli+0x328>)
 8011a5c:	461c      	mov	r4, r3
 8011a5e:	4615      	mov	r5, r2
 8011a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a64:	682b      	ldr	r3, [r5, #0]
 8011a66:	6023      	str	r3, [r4, #0]
			"Run Co2 sensor calibration program", .tokenizeArgs = true, .context = NULL,
			.binding = run_co2_calibration_routine };

	CliCommandBinding set_Co2_samples= { .name = "set-co2-samples", .help =
 8011a68:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a6c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8011a70:	4a36      	ldr	r2, [pc, #216]	@ (8011b4c <initializeEmbeddedCli+0x32c>)
 8011a72:	461c      	mov	r4, r3
 8011a74:	4615      	mov	r5, r2
 8011a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a7a:	682b      	ldr	r3, [r5, #0]
 8011a7c:	6023      	str	r3, [r4, #0]
			"Set how much samples you want Co2 sensor to take", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_samples };

	CliCommandBinding get_Co2_samples= { .name = "get-co2-samples", .help =
 8011a7e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a82:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8011a86:	4a32      	ldr	r2, [pc, #200]	@ (8011b50 <initializeEmbeddedCli+0x330>)
 8011a88:	461c      	mov	r4, r3
 8011a8a:	4615      	mov	r5, r2
 8011a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a90:	682b      	ldr	r3, [r5, #0]
 8011a92:	6023      	str	r3, [r4, #0]
			"Get Co2 samples", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_samples };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 8011a94:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a98:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8011a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8011b54 <initializeEmbeddedCli+0x334>)
 8011a9e:	461c      	mov	r4, r3
 8011aa0:	4615      	mov	r5, r2
 8011aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011aa6:	682b      	ldr	r3, [r5, #0]
 8011aa8:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 8011aaa:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011aae:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8011ab2:	4a29      	ldr	r2, [pc, #164]	@ (8011b58 <initializeEmbeddedCli+0x338>)
 8011ab4:	461c      	mov	r4, r3
 8011ab6:	4615      	mov	r5, r2
 8011ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011abc:	682b      	ldr	r3, [r5, #0]
 8011abe:	6023      	str	r3, [r4, #0]
			"Co2 measured in ppm", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8011ac0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ac4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8011ac8:	4a24      	ldr	r2, [pc, #144]	@ (8011b5c <initializeEmbeddedCli+0x33c>)
 8011aca:	461c      	mov	r4, r3
 8011acc:	4615      	mov	r5, r2
 8011ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ad2:	e045      	b.n	8011b60 <initializeEmbeddedCli+0x340>
 8011ad4:	20001b2c 	.word	0x20001b2c
 8011ad8:	080238c4 	.word	0x080238c4
 8011adc:	08023918 	.word	0x08023918
 8011ae0:	08023980 	.word	0x08023980
 8011ae4:	080239c0 	.word	0x080239c0
 8011ae8:	08023a20 	.word	0x08023a20
 8011aec:	08023a70 	.word	0x08023a70
 8011af0:	08023a94 	.word	0x08023a94
 8011af4:	08023ac8 	.word	0x08023ac8
 8011af8:	08023af4 	.word	0x08023af4
 8011afc:	08023b28 	.word	0x08023b28
 8011b00:	08023b54 	.word	0x08023b54
 8011b04:	08023b88 	.word	0x08023b88
 8011b08:	08023bbc 	.word	0x08023bbc
 8011b0c:	08023c08 	.word	0x08023c08
 8011b10:	08023c40 	.word	0x08023c40
 8011b14:	08023ca4 	.word	0x08023ca4
 8011b18:	08023cd8 	.word	0x08023cd8
 8011b1c:	08023d14 	.word	0x08023d14
 8011b20:	08023d48 	.word	0x08023d48
 8011b24:	08023d88 	.word	0x08023d88
 8011b28:	08023dd4 	.word	0x08023dd4
 8011b2c:	08023e3c 	.word	0x08023e3c
 8011b30:	08023e98 	.word	0x08023e98
 8011b34:	08023ef0 	.word	0x08023ef0
 8011b38:	08023f40 	.word	0x08023f40
 8011b3c:	08023f90 	.word	0x08023f90
 8011b40:	08023fe4 	.word	0x08023fe4
 8011b44:	08024038 	.word	0x08024038
 8011b48:	08024084 	.word	0x08024084
 8011b4c:	080240dc 	.word	0x080240dc
 8011b50:	08024110 	.word	0x08024110
 8011b54:	08024148 	.word	0x08024148
 8011b58:	0802417c 	.word	0x0802417c
 8011b5c:	080241c4 	.word	0x080241c4
 8011b60:	682b      	ldr	r3, [r5, #0]
 8011b62:	6023      	str	r3, [r4, #0]
			"Temperature measured in Celsius", .tokenizeArgs = true, .context =
			NULL, .binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 8011b64:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b68:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8011b6c:	4acb      	ldr	r2, [pc, #812]	@ (8011e9c <initializeEmbeddedCli+0x67c>)
 8011b6e:	461c      	mov	r4, r3
 8011b70:	4615      	mov	r5, r2
 8011b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b76:	682b      	ldr	r3, [r5, #0]
 8011b78:	6023      	str	r3, [r4, #0]
			"Humidity measured in % of relative", .tokenizeArgs = true,
			.context = NULL, .binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 8011b7a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b7e:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8011b82:	4ac7      	ldr	r2, [pc, #796]	@ (8011ea0 <initializeEmbeddedCli+0x680>)
 8011b84:	461c      	mov	r4, r3
 8011b86:	4615      	mov	r5, r2
 8011b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b8c:	682b      	ldr	r3, [r5, #0]
 8011b8e:	6023      	str	r3, [r4, #0]
			"Movement detected - yes or no", .tokenizeArgs = true, .context =
			NULL, .binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 8011b90:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b94:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8011b98:	4ac2      	ldr	r2, [pc, #776]	@ (8011ea4 <initializeEmbeddedCli+0x684>)
 8011b9a:	461c      	mov	r4, r3
 8011b9c:	4615      	mov	r5, r2
 8011b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ba2:	682b      	ldr	r3, [r5, #0]
 8011ba4:	6023      	str	r3, [r4, #0]
			"Check air quality level", .tokenizeArgs = true, .context = NULL,
			.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 8011ba6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011baa:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8011bae:	4abe      	ldr	r2, [pc, #760]	@ (8011ea8 <initializeEmbeddedCli+0x688>)
 8011bb0:	461c      	mov	r4, r3
 8011bb2:	4615      	mov	r5, r2
 8011bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bb8:	682b      	ldr	r3, [r5, #0]
 8011bba:	6023      	str	r3, [r4, #0]
			"Measure voltage from 4.17v(Full Charge) to 3.0v(Battery Low)",
			.tokenizeArgs = true, .context = NULL, .binding = BattVolt };

	CliCommandBinding _port = { .name = "port", .help = "Inactive field",
 8011bbc:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011bc0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8011bc4:	4ab9      	ldr	r2, [pc, #740]	@ (8011eac <initializeEmbeddedCli+0x68c>)
 8011bc6:	461c      	mov	r4, r3
 8011bc8:	4615      	mov	r5, r2
 8011bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bce:	682b      	ldr	r3, [r5, #0]
 8011bd0:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = port };

	CliCommandBinding _showall = { .name = "show-all", .help =
 8011bd2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011bd6:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8011bda:	4ab5      	ldr	r2, [pc, #724]	@ (8011eb0 <initializeEmbeddedCli+0x690>)
 8011bdc:	461c      	mov	r4, r3
 8011bde:	4615      	mov	r5, r2
 8011be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011be4:	682b      	ldr	r3, [r5, #0]
 8011be6:	6023      	str	r3, [r4, #0]
			"Shows all parameters", .tokenizeArgs = true, .context = NULL,
			.binding = showall };

	CliCommandBinding getversion = { .name = "get-version", .help =
 8011be8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011bec:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8011bf0:	4ab0      	ldr	r2, [pc, #704]	@ (8011eb4 <initializeEmbeddedCli+0x694>)
 8011bf2:	461c      	mov	r4, r3
 8011bf4:	4615      	mov	r5, r2
 8011bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bfa:	682b      	ldr	r3, [r5, #0]
 8011bfc:	6023      	str	r3, [r4, #0]
				"Shows hardware and software version", .tokenizeArgs = true, .context = NULL,
				.binding = systemversion };

	CliCommandBinding aboutdev = { .name = "about", .help =
 8011bfe:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c02:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8011c06:	4aac      	ldr	r2, [pc, #688]	@ (8011eb8 <initializeEmbeddedCli+0x698>)
 8011c08:	461c      	mov	r4, r3
 8011c0a:	4615      	mov	r5, r2
 8011c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c10:	682b      	ldr	r3, [r5, #0]
 8011c12:	6023      	str	r3, [r4, #0]
				"Information about device", .tokenizeArgs = true, .context = NULL,
				.binding = aboutDev };

	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8011c14:	4ba9      	ldr	r3, [pc, #676]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011c16:	681c      	ldr	r4, [r3, #0]
 8011c18:	466a      	mov	r2, sp
 8011c1a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8011c1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c22:	e882 0003 	stmia.w	r2, {r0, r1}
 8011c26:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8011c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f000 fcf6 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8011c32:	4ba2      	ldr	r3, [pc, #648]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011c34:	681c      	ldr	r4, [r3, #0]
 8011c36:	466a      	mov	r2, sp
 8011c38:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 8011c3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c40:	e882 0003 	stmia.w	r2, {r0, r1}
 8011c44:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8011c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f000 fce7 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 8011c50:	4b9a      	ldr	r3, [pc, #616]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011c52:	681c      	ldr	r4, [r3, #0]
 8011c54:	466a      	mov	r2, sp
 8011c56:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8011c5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c5e:	e882 0003 	stmia.w	r2, {r0, r1}
 8011c62:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8011c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f000 fcd8 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8011c6e:	4b93      	ldr	r3, [pc, #588]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011c70:	681c      	ldr	r4, [r3, #0]
 8011c72:	466a      	mov	r2, sp
 8011c74:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 8011c78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c7c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011c80:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8011c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011c86:	4620      	mov	r0, r4
 8011c88:	f000 fcc9 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 8011c8c:	4b8b      	ldr	r3, [pc, #556]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011c8e:	681c      	ldr	r4, [r3, #0]
 8011c90:	466a      	mov	r2, sp
 8011c92:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8011c96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c9a:	e882 0003 	stmia.w	r2, {r0, r1}
 8011c9e:	f507 7339 	add.w	r3, r7, #740	@ 0x2e4
 8011ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f000 fcba 	bl	801261e <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Set_name);
	embeddedCliAddBinding(cli, Set_group);
 8011caa:	4b84      	ldr	r3, [pc, #528]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011cac:	681c      	ldr	r4, [r3, #0]
 8011cae:	466a      	mov	r2, sp
 8011cb0:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8011cb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cb8:	e882 0003 	stmia.w	r2, {r0, r1}
 8011cbc:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8011cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	f000 fcab 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 8011cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011cca:	681c      	ldr	r4, [r3, #0]
 8011ccc:	466a      	mov	r2, sp
 8011cce:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8011cd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cd6:	e882 0003 	stmia.w	r2, {r0, r1}
 8011cda:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8011cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f000 fc9c 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8011ce6:	4b75      	ldr	r3, [pc, #468]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011ce8:	681c      	ldr	r4, [r3, #0]
 8011cea:	466a      	mov	r2, sp
 8011cec:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 8011cf0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cf4:	e882 0003 	stmia.w	r2, {r0, r1}
 8011cf8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8011cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011cfe:	4620      	mov	r0, r4
 8011d00:	f000 fc8d 	bl	801261e <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Get_name);
	embeddedCliAddBinding(cli, Get_group);
 8011d04:	4b6d      	ldr	r3, [pc, #436]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011d06:	681c      	ldr	r4, [r3, #0]
 8011d08:	466a      	mov	r2, sp
 8011d0a:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8011d0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d12:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d16:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 8011d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f000 fc7e 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 8011d22:	4b66      	ldr	r3, [pc, #408]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011d24:	681c      	ldr	r4, [r3, #0]
 8011d26:	466a      	mov	r2, sp
 8011d28:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8011d2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d30:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d34:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8011d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f000 fc6f 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 8011d40:	4b5e      	ldr	r3, [pc, #376]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011d42:	681c      	ldr	r4, [r3, #0]
 8011d44:	466a      	mov	r2, sp
 8011d46:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8011d4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d4e:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d52:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8011d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f000 fc60 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 8011d5e:	4b57      	ldr	r3, [pc, #348]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011d60:	681c      	ldr	r4, [r3, #0]
 8011d62:	466a      	mov	r2, sp
 8011d64:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8011d68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d70:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8011d74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d76:	4620      	mov	r0, r4
 8011d78:	f000 fc51 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8011d7c:	4b4f      	ldr	r3, [pc, #316]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011d7e:	681c      	ldr	r4, [r3, #0]
 8011d80:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011d88:	466d      	mov	r5, sp
 8011d8a:	f103 020c 	add.w	r2, r3, #12
 8011d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d92:	e885 0003 	stmia.w	r5, {r0, r1}
 8011d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d98:	4620      	mov	r0, r4
 8011d9a:	f000 fc40 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8011d9e:	4b47      	ldr	r3, [pc, #284]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011da0:	681c      	ldr	r4, [r3, #0]
 8011da2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011da6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011daa:	466d      	mov	r5, sp
 8011dac:	f103 020c 	add.w	r2, r3, #12
 8011db0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011db4:	e885 0003 	stmia.w	r5, {r0, r1}
 8011db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f000 fc2f 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8011dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011dc2:	681c      	ldr	r4, [r3, #0]
 8011dc4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011dc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011dcc:	466d      	mov	r5, sp
 8011dce:	f103 020c 	add.w	r2, r3, #12
 8011dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011dd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8011dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ddc:	4620      	mov	r0, r4
 8011dde:	f000 fc1e 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8011de2:	4b36      	ldr	r3, [pc, #216]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011de4:	681c      	ldr	r4, [r3, #0]
 8011de6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011dea:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8011dee:	466d      	mov	r5, sp
 8011df0:	f103 020c 	add.w	r2, r3, #12
 8011df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011df8:	e885 0003 	stmia.w	r5, {r0, r1}
 8011dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f000 fc0d 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8011e04:	4b2d      	ldr	r3, [pc, #180]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011e06:	681c      	ldr	r4, [r3, #0]
 8011e08:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e0c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8011e10:	466d      	mov	r5, sp
 8011e12:	f103 020c 	add.w	r2, r3, #12
 8011e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e20:	4620      	mov	r0, r4
 8011e22:	f000 fbfc 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8011e26:	4b25      	ldr	r3, [pc, #148]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011e28:	681c      	ldr	r4, [r3, #0]
 8011e2a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e2e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011e32:	466d      	mov	r5, sp
 8011e34:	f103 020c 	add.w	r2, r3, #12
 8011e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e42:	4620      	mov	r0, r4
 8011e44:	f000 fbeb 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8011e48:	4b1c      	ldr	r3, [pc, #112]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011e4a:	681c      	ldr	r4, [r3, #0]
 8011e4c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e50:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011e54:	466d      	mov	r5, sp
 8011e56:	f103 020c 	add.w	r2, r3, #12
 8011e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e64:	4620      	mov	r0, r4
 8011e66:	f000 fbda 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 8011e6a:	4b14      	ldr	r3, [pc, #80]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011e6c:	681c      	ldr	r4, [r3, #0]
 8011e6e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e72:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011e76:	466d      	mov	r5, sp
 8011e78:	f103 020c 	add.w	r2, r3, #12
 8011e7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e80:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e86:	4620      	mov	r0, r4
 8011e88:	f000 fbc9 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8011e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8011ebc <initializeEmbeddedCli+0x69c>)
 8011e8e:	681c      	ldr	r4, [r3, #0]
 8011e90:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e94:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8011e98:	e012      	b.n	8011ec0 <initializeEmbeddedCli+0x6a0>
 8011e9a:	bf00      	nop
 8011e9c:	0802420c 	.word	0x0802420c
 8011ea0:	08024254 	.word	0x08024254
 8011ea4:	0802428c 	.word	0x0802428c
 8011ea8:	080242f0 	.word	0x080242f0
 8011eac:	0802431c 	.word	0x0802431c
 8011eb0:	08024354 	.word	0x08024354
 8011eb4:	08024398 	.word	0x08024398
 8011eb8:	080243d0 	.word	0x080243d0
 8011ebc:	20001b2c 	.word	0x20001b2c
 8011ec0:	466d      	mov	r5, sp
 8011ec2:	f103 020c 	add.w	r2, r3, #12
 8011ec6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011eca:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	f000 fba4 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Calibration);
 8011ed6:	4bba      	ldr	r3, [pc, #744]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8011ed8:	681c      	ldr	r4, [r3, #0]
 8011eda:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ede:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8011ee2:	466d      	mov	r5, sp
 8011ee4:	f103 020c 	add.w	r2, r3, #12
 8011ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011eec:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	f000 fb93 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_AutoCalibration);
 8011ef8:	4bb1      	ldr	r3, [pc, #708]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8011efa:	681c      	ldr	r4, [r3, #0]
 8011efc:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f00:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011f04:	466d      	mov	r5, sp
 8011f06:	f103 020c 	add.w	r2, r3, #12
 8011f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f14:	4620      	mov	r0, r4
 8011f16:	f000 fb82 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_AutoCalibration);
 8011f1a:	4ba9      	ldr	r3, [pc, #676]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8011f1c:	681c      	ldr	r4, [r3, #0]
 8011f1e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f22:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011f26:	466d      	mov	r5, sp
 8011f28:	f103 020c 	add.w	r2, r3, #12
 8011f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f30:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f36:	4620      	mov	r0, r4
 8011f38:	f000 fb71 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Tempoffset);
 8011f3c:	4ba0      	ldr	r3, [pc, #640]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8011f3e:	681c      	ldr	r4, [r3, #0]
 8011f40:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f44:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8011f48:	466d      	mov	r5, sp
 8011f4a:	f103 020c 	add.w	r2, r3, #12
 8011f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f52:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f000 fb60 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Tempoffset);
 8011f5e:	4b98      	ldr	r3, [pc, #608]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8011f60:	681c      	ldr	r4, [r3, #0]
 8011f62:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f66:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8011f6a:	466d      	mov	r5, sp
 8011f6c:	f103 020c 	add.w	r2, r3, #12
 8011f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f74:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	f000 fb4f 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_altitudecompsentation);
 8011f80:	4b8f      	ldr	r3, [pc, #572]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8011f82:	681c      	ldr	r4, [r3, #0]
 8011f84:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f88:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011f8c:	466d      	mov	r5, sp
 8011f8e:	f103 020c 	add.w	r2, r3, #12
 8011f92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f96:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	f000 fb3e 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_altitudecompsentation);
 8011fa2:	4b87      	ldr	r3, [pc, #540]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8011fa4:	681c      	ldr	r4, [r3, #0]
 8011fa6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011faa:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8011fae:	466d      	mov	r5, sp
 8011fb0:	f103 020c 	add.w	r2, r3, #12
 8011fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f000 fb2d 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration_program);
 8011fc4:	4b7e      	ldr	r3, [pc, #504]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8011fc6:	681c      	ldr	r4, [r3, #0]
 8011fc8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fcc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8011fd0:	466d      	mov	r5, sp
 8011fd2:	f103 020c 	add.w	r2, r3, #12
 8011fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fda:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	f000 fb1c 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, set_Co2_samples);
 8011fe6:	4b76      	ldr	r3, [pc, #472]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8011fe8:	681c      	ldr	r4, [r3, #0]
 8011fea:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fee:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8011ff2:	466d      	mov	r5, sp
 8011ff4:	f103 020c 	add.w	r2, r3, #12
 8011ff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ffc:	e885 0003 	stmia.w	r5, {r0, r1}
 8012000:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012002:	4620      	mov	r0, r4
 8012004:	f000 fb0b 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, get_Co2_samples);
 8012008:	4b6d      	ldr	r3, [pc, #436]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 801200a:	681c      	ldr	r4, [r3, #0]
 801200c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012010:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8012014:	466d      	mov	r5, sp
 8012016:	f103 020c 	add.w	r2, r3, #12
 801201a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801201e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012024:	4620      	mov	r0, r4
 8012026:	f000 fafa 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 801202a:	4b65      	ldr	r3, [pc, #404]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 801202c:	681c      	ldr	r4, [r3, #0]
 801202e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012032:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8012036:	466d      	mov	r5, sp
 8012038:	f103 020c 	add.w	r2, r3, #12
 801203c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012040:	e885 0003 	stmia.w	r5, {r0, r1}
 8012044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012046:	4620      	mov	r0, r4
 8012048:	f000 fae9 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 801204c:	4b5c      	ldr	r3, [pc, #368]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 801204e:	681c      	ldr	r4, [r3, #0]
 8012050:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012054:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8012058:	466d      	mov	r5, sp
 801205a:	f103 020c 	add.w	r2, r3, #12
 801205e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012062:	e885 0003 	stmia.w	r5, {r0, r1}
 8012066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012068:	4620      	mov	r0, r4
 801206a:	f000 fad8 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 801206e:	4b54      	ldr	r3, [pc, #336]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8012070:	681c      	ldr	r4, [r3, #0]
 8012072:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012076:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 801207a:	466d      	mov	r5, sp
 801207c:	f103 020c 	add.w	r2, r3, #12
 8012080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012084:	e885 0003 	stmia.w	r5, {r0, r1}
 8012088:	cb0e      	ldmia	r3, {r1, r2, r3}
 801208a:	4620      	mov	r0, r4
 801208c:	f000 fac7 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8012090:	4b4b      	ldr	r3, [pc, #300]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8012092:	681c      	ldr	r4, [r3, #0]
 8012094:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012098:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 801209c:	466d      	mov	r5, sp
 801209e:	f103 020c 	add.w	r2, r3, #12
 80120a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80120aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120ac:	4620      	mov	r0, r4
 80120ae:	f000 fab6 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 80120b2:	4b43      	ldr	r3, [pc, #268]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 80120b4:	681c      	ldr	r4, [r3, #0]
 80120b6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120ba:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80120be:	466d      	mov	r5, sp
 80120c0:	f103 020c 	add.w	r2, r3, #12
 80120c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80120cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120ce:	4620      	mov	r0, r4
 80120d0:	f000 faa5 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 80120d4:	4b3a      	ldr	r3, [pc, #232]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 80120d6:	681c      	ldr	r4, [r3, #0]
 80120d8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120dc:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80120e0:	466d      	mov	r5, sp
 80120e2:	f103 020c 	add.w	r2, r3, #12
 80120e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80120ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120f0:	4620      	mov	r0, r4
 80120f2:	f000 fa94 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 80120f6:	4b32      	ldr	r3, [pc, #200]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 80120f8:	681c      	ldr	r4, [r3, #0]
 80120fa:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120fe:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8012102:	466d      	mov	r5, sp
 8012104:	f103 020c 	add.w	r2, r3, #12
 8012108:	e892 0003 	ldmia.w	r2, {r0, r1}
 801210c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012110:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012112:	4620      	mov	r0, r4
 8012114:	f000 fa83 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _port);
 8012118:	4b29      	ldr	r3, [pc, #164]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 801211a:	681c      	ldr	r4, [r3, #0]
 801211c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012120:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8012124:	466d      	mov	r5, sp
 8012126:	f103 020c 	add.w	r2, r3, #12
 801212a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801212e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012134:	4620      	mov	r0, r4
 8012136:	f000 fa72 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _showall);
 801213a:	4b21      	ldr	r3, [pc, #132]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 801213c:	681c      	ldr	r4, [r3, #0]
 801213e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012142:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8012146:	466d      	mov	r5, sp
 8012148:	f103 020c 	add.w	r2, r3, #12
 801214c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012150:	e885 0003 	stmia.w	r5, {r0, r1}
 8012154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012156:	4620      	mov	r0, r4
 8012158:	f000 fa61 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getversion);
 801215c:	4b18      	ldr	r3, [pc, #96]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 801215e:	681c      	ldr	r4, [r3, #0]
 8012160:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012164:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8012168:	466d      	mov	r5, sp
 801216a:	f103 020c 	add.w	r2, r3, #12
 801216e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012172:	e885 0003 	stmia.w	r5, {r0, r1}
 8012176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012178:	4620      	mov	r0, r4
 801217a:	f000 fa50 	bl	801261e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, aboutdev);
 801217e:	4b10      	ldr	r3, [pc, #64]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 8012180:	681c      	ldr	r4, [r3, #0]
 8012182:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012186:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 801218a:	466d      	mov	r5, sp
 801218c:	f103 020c 	add.w	r2, r3, #12
 8012190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012194:	e885 0003 	stmia.w	r5, {r0, r1}
 8012198:	cb0e      	ldmia	r3, {r1, r2, r3}
 801219a:	4620      	mov	r0, r4
 801219c:	f000 fa3f 	bl	801261e <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 80121a0:	4b07      	ldr	r3, [pc, #28]	@ (80121c0 <initializeEmbeddedCli+0x9a0>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4a07      	ldr	r2, [pc, #28]	@ (80121c4 <initializeEmbeddedCli+0x9a4>)
 80121a6:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 80121a8:	4b07      	ldr	r3, [pc, #28]	@ (80121c8 <initializeEmbeddedCli+0x9a8>)
 80121aa:	2201      	movs	r2, #1
 80121ac:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80121ae:	4b07      	ldr	r3, [pc, #28]	@ (80121cc <initializeEmbeddedCli+0x9ac>)
 80121b0:	2200      	movs	r2, #0
 80121b2:	701a      	strb	r2, [r3, #0]
}
 80121b4:	bf00      	nop
 80121b6:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bdb0      	pop	{r4, r5, r7, pc}
 80121be:	bf00      	nop
 80121c0:	20001b2c 	.word	0x20001b2c
 80121c4:	0800f4d1 	.word	0x0800f4d1
 80121c8:	20001b39 	.word	0x20001b39
 80121cc:	20001b3a 	.word	0x20001b3a

080121d0 <console_process>:

void console_process(void) {
 80121d0:	b580      	push	{r7, lr}
 80121d2:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 80121d4:	4b03      	ldr	r3, [pc, #12]	@ (80121e4 <console_process+0x14>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	4618      	mov	r0, r3
 80121da:	f000 f990 	bl	80124fe <embeddedCliProcess>
}
 80121de:	bf00      	nop
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	20001b2c 	.word	0x20001b2c

080121e8 <console_uart_deinit>:

void console_uart_deinit() {
 80121e8:	b580      	push	{r7, lr}
 80121ea:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80121ec:	4803      	ldr	r0, [pc, #12]	@ (80121fc <console_uart_deinit+0x14>)
 80121ee:	f7f9 fff1 	bl	800c1d4 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 80121f2:	4802      	ldr	r0, [pc, #8]	@ (80121fc <console_uart_deinit+0x14>)
 80121f4:	f7f1 fd58 	bl	8003ca8 <HAL_UART_MspDeInit>
}
 80121f8:	bf00      	nop
 80121fa:	bd80      	pop	{r7, pc}
 80121fc:	20001a74 	.word	0x20001a74

08012200 <console_uart_init>:
void console_uart_init() {
 8012200:	b580      	push	{r7, lr}
 8012202:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8012204:	4815      	ldr	r0, [pc, #84]	@ (801225c <console_uart_init+0x5c>)
 8012206:	f7f9 ffe5 	bl	800c1d4 <HAL_UART_DeInit>
	huart1.Instance = USART1;
 801220a:	4b14      	ldr	r3, [pc, #80]	@ (801225c <console_uart_init+0x5c>)
 801220c:	4a14      	ldr	r2, [pc, #80]	@ (8012260 <console_uart_init+0x60>)
 801220e:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8012210:	4b12      	ldr	r3, [pc, #72]	@ (801225c <console_uart_init+0x5c>)
 8012212:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8012216:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012218:	4b10      	ldr	r3, [pc, #64]	@ (801225c <console_uart_init+0x5c>)
 801221a:	2200      	movs	r2, #0
 801221c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 801221e:	4b0f      	ldr	r3, [pc, #60]	@ (801225c <console_uart_init+0x5c>)
 8012220:	2200      	movs	r2, #0
 8012222:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8012224:	4b0d      	ldr	r3, [pc, #52]	@ (801225c <console_uart_init+0x5c>)
 8012226:	2200      	movs	r2, #0
 8012228:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 801222a:	4b0c      	ldr	r3, [pc, #48]	@ (801225c <console_uart_init+0x5c>)
 801222c:	220c      	movs	r2, #12
 801222e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012230:	4b0a      	ldr	r3, [pc, #40]	@ (801225c <console_uart_init+0x5c>)
 8012232:	2200      	movs	r2, #0
 8012234:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012236:	4b09      	ldr	r3, [pc, #36]	@ (801225c <console_uart_init+0x5c>)
 8012238:	2200      	movs	r2, #0
 801223a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 801223c:	4807      	ldr	r0, [pc, #28]	@ (801225c <console_uart_init+0x5c>)
 801223e:	f7f9 ff79 	bl	800c134 <HAL_UART_Init>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d001      	beq.n	801224c <console_uart_init+0x4c>
		Error_Handler();
 8012248:	f7f1 fa0c 	bl	8003664 <Error_Handler>
	}
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 801224c:	2201      	movs	r2, #1
 801224e:	4905      	ldr	r1, [pc, #20]	@ (8012264 <console_uart_init+0x64>)
 8012250:	4802      	ldr	r0, [pc, #8]	@ (801225c <console_uart_init+0x5c>)
 8012252:	f7fa f87c 	bl	800c34e <HAL_UART_Receive_IT>
}
 8012256:	bf00      	nop
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	20001a74 	.word	0x20001a74
 8012260:	40011000 	.word	0x40011000
 8012264:	20001b38 	.word	0x20001b38

08012268 <console_init>:

void console_init(void) {
 8012268:	b580      	push	{r7, lr}
 801226a:	af00      	add	r7, sp, #0
	console_uart_init();
 801226c:	f7ff ffc8 	bl	8012200 <console_uart_init>
	initializeEmbeddedCli();
 8012270:	f7ff fad6 	bl	8011820 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8012274:	2201      	movs	r2, #1
 8012276:	4903      	ldr	r1, [pc, #12]	@ (8012284 <console_init+0x1c>)
 8012278:	4803      	ldr	r0, [pc, #12]	@ (8012288 <console_init+0x20>)
 801227a:	f7fa f868 	bl	800c34e <HAL_UART_Receive_IT>
}
 801227e:	bf00      	nop
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	20001b38 	.word	0x20001b38
 8012288:	20001a74 	.word	0x20001a74

0801228c <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 801228c:	b480      	push	{r7}
 801228e:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8012290:	4b0e      	ldr	r3, [pc, #56]	@ (80122cc <embeddedCliDefaultConfig+0x40>)
 8012292:	2240      	movs	r2, #64	@ 0x40
 8012294:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8012296:	4b0d      	ldr	r3, [pc, #52]	@ (80122cc <embeddedCliDefaultConfig+0x40>)
 8012298:	2240      	movs	r2, #64	@ 0x40
 801229a:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 801229c:	4b0b      	ldr	r3, [pc, #44]	@ (80122cc <embeddedCliDefaultConfig+0x40>)
 801229e:	2280      	movs	r2, #128	@ 0x80
 80122a0:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 80122a2:	4b0a      	ldr	r3, [pc, #40]	@ (80122cc <embeddedCliDefaultConfig+0x40>)
 80122a4:	2200      	movs	r2, #0
 80122a6:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 80122a8:	4b08      	ldr	r3, [pc, #32]	@ (80122cc <embeddedCliDefaultConfig+0x40>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 70;
 80122ae:	4b07      	ldr	r3, [pc, #28]	@ (80122cc <embeddedCliDefaultConfig+0x40>)
 80122b0:	2246      	movs	r2, #70	@ 0x46
 80122b2:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 80122b4:	4b05      	ldr	r3, [pc, #20]	@ (80122cc <embeddedCliDefaultConfig+0x40>)
 80122b6:	2201      	movs	r2, #1
 80122b8:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 80122ba:	4b04      	ldr	r3, [pc, #16]	@ (80122cc <embeddedCliDefaultConfig+0x40>)
 80122bc:	4a04      	ldr	r2, [pc, #16]	@ (80122d0 <embeddedCliDefaultConfig+0x44>)
 80122be:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 80122c0:	4b02      	ldr	r3, [pc, #8]	@ (80122cc <embeddedCliDefaultConfig+0x40>)
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr
 80122cc:	20001b40 	.word	0x20001b40
 80122d0:	080243e8 	.word	0x080243e8

080122d4 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 80122d4:	b480      	push	{r7}
 80122d6:	b085      	sub	sp, #20
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	895b      	ldrh	r3, [r3, #10]
 80122e0:	2201      	movs	r2, #1
 80122e2:	4413      	add	r3, r2
 80122e4:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	889b      	ldrh	r3, [r3, #4]
 80122ea:	3303      	adds	r3, #3
 80122ec:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	88db      	ldrh	r3, [r3, #6]
 80122f2:	3303      	adds	r3, #3
 80122f4:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80122f6:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	891b      	ldrh	r3, [r3, #8]
 80122fc:	3303      	adds	r3, #3
 80122fe:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8012300:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8012302:	89fa      	ldrh	r2, [r7, #14]
 8012304:	4613      	mov	r3, r2
 8012306:	009b      	lsls	r3, r3, #2
 8012308:	4413      	add	r3, r2
 801230a:	009b      	lsls	r3, r3, #2
 801230c:	3303      	adds	r3, #3
 801230e:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8012310:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 8012312:	89fb      	ldrh	r3, [r7, #14]
 8012314:	3303      	adds	r3, #3
 8012316:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8012318:	4413      	add	r3, r2
 801231a:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 801231c:	b29b      	uxth	r3, r3
 801231e:	009b      	lsls	r3, r3, #2
 8012320:	b29b      	uxth	r3, r3
}
 8012322:	4618      	mov	r0, r3
 8012324:	3714      	adds	r7, #20
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr

0801232e <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 801232e:	b580      	push	{r7, lr}
 8012330:	b088      	sub	sp, #32
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8012336:	2300      	movs	r3, #0
 8012338:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	895b      	ldrh	r3, [r3, #10]
 801233e:	2201      	movs	r2, #1
 8012340:	4413      	add	r3, r2
 8012342:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f7ff ffc5 	bl	80122d4 <embeddedCliRequiredSize>
 801234a:	4603      	mov	r3, r0
 801234c:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 801234e:	2300      	movs	r3, #0
 8012350:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	68db      	ldr	r3, [r3, #12]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d10f      	bne.n	801237a <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 801235a:	6938      	ldr	r0, [r7, #16]
 801235c:	f00b f9fc 	bl	801d758 <malloc>
 8012360:	4603      	mov	r3, r0
 8012362:	461a      	mov	r2, r3
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	68db      	ldr	r3, [r3, #12]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d101      	bne.n	8012374 <embeddedCliNew+0x46>
            return NULL;
 8012370:	2300      	movs	r3, #0
 8012372:	e092      	b.n	801249a <embeddedCliNew+0x16c>
        allocated = true;
 8012374:	2301      	movs	r3, #1
 8012376:	77fb      	strb	r3, [r7, #31]
 8012378:	e007      	b.n	801238a <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	8a1b      	ldrh	r3, [r3, #16]
 801237e:	461a      	mov	r2, r3
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	4293      	cmp	r3, r2
 8012384:	d901      	bls.n	801238a <embeddedCliNew+0x5c>
        return NULL;
 8012386:	2300      	movs	r3, #0
 8012388:	e087      	b.n	801249a <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8012390:	693a      	ldr	r2, [r7, #16]
 8012392:	2100      	movs	r1, #0
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f00c fc5d 	bl	801ec54 <memset>

    cli = (EmbeddedCli *) buf;
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	3310      	adds	r3, #16
 80123a2:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 80123a4:	69bb      	ldr	r3, [r7, #24]
 80123a6:	68fa      	ldr	r2, [r7, #12]
 80123a8:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	3334      	adds	r3, #52	@ 0x34
 80123ae:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 80123b0:	69bb      	ldr	r3, [r7, #24]
 80123b2:	68db      	ldr	r3, [r3, #12]
 80123b4:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	68fa      	ldr	r2, [r7, #12]
 80123ba:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	889b      	ldrh	r3, [r3, #4]
 80123c0:	3303      	adds	r3, #3
 80123c2:	f023 0303 	bic.w	r3, r3, #3
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	4413      	add	r3, r2
 80123ca:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	68fa      	ldr	r2, [r7, #12]
 80123d0:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	88db      	ldrh	r3, [r3, #6]
 80123d6:	3303      	adds	r3, #3
 80123d8:	f023 0303 	bic.w	r3, r3, #3
 80123dc:	68fa      	ldr	r2, [r7, #12]
 80123de:	4413      	add	r3, r2
 80123e0:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	68fa      	ldr	r2, [r7, #12]
 80123e6:	625a      	str	r2, [r3, #36]	@ 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 80123e8:	8afa      	ldrh	r2, [r7, #22]
 80123ea:	4613      	mov	r3, r2
 80123ec:	009b      	lsls	r3, r3, #2
 80123ee:	4413      	add	r3, r2
 80123f0:	009b      	lsls	r3, r3, #2
 80123f2:	3303      	adds	r3, #3
 80123f4:	f023 0303 	bic.w	r3, r3, #3
 80123f8:	68fa      	ldr	r2, [r7, #12]
 80123fa:	4413      	add	r3, r2
 80123fc:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	68fa      	ldr	r2, [r7, #12]
 8012402:	629a      	str	r2, [r3, #40]	@ 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 8012404:	8afb      	ldrh	r3, [r7, #22]
 8012406:	3303      	adds	r3, #3
 8012408:	f023 0303 	bic.w	r3, r3, #3
 801240c:	68fa      	ldr	r2, [r7, #12]
 801240e:	4413      	add	r3, r2
 8012410:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	68fa      	ldr	r2, [r7, #12]
 8012416:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	891a      	ldrh	r2, [r3, #8]
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8012420:	7ffb      	ldrb	r3, [r7, #31]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d008      	beq.n	8012438 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801242c:	f043 0304 	orr.w	r3, r3, #4
 8012430:	b2da      	uxtb	r2, r3
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	7c9b      	ldrb	r3, [r3, #18]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d008      	beq.n	8012452 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012446:	f043 0320 	orr.w	r3, r3, #32
 801244a:	b2da      	uxtb	r2, r3
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	889a      	ldrh	r2, [r3, #4]
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	2200      	movs	r2, #0
 801245e:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	2200      	movs	r2, #0
 8012464:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	88da      	ldrh	r2, [r3, #6]
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->bindingsCount = 0;
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	2200      	movs	r2, #0
 8012472:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	895b      	ldrh	r3, [r3, #10]
 8012478:	2201      	movs	r2, #1
 801247a:	4413      	add	r3, r2
 801247c:	b29a      	uxth	r2, r3
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	85da      	strh	r2, [r3, #46]	@ 0x2e
    impl->lastChar = '\0';
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	2200      	movs	r2, #0
 8012486:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 8012492:	69b8      	ldr	r0, [r7, #24]
 8012494:	f000 fc5e 	bl	8012d54 <initInternalBindings>

    return cli;
 8012498:	69bb      	ldr	r3, [r7, #24]
}
 801249a:	4618      	mov	r0, r3
 801249c:	3720      	adds	r7, #32
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}

080124a2 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 80124a2:	b580      	push	{r7, lr}
 80124a4:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 80124a6:	f7ff fef1 	bl	801228c <embeddedCliDefaultConfig>
 80124aa:	4603      	mov	r3, r0
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7ff ff3e 	bl	801232e <embeddedCliNew>
 80124b2:	4603      	mov	r3, r0
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b084      	sub	sp, #16
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	460b      	mov	r3, r1
 80124c2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	3310      	adds	r3, #16
 80124ce:	78fa      	ldrb	r2, [r7, #3]
 80124d0:	4611      	mov	r1, r2
 80124d2:	4618      	mov	r0, r3
 80124d4:	f001 f865 	bl	80135a2 <fifoBufPush>
 80124d8:	4603      	mov	r3, r0
 80124da:	f083 0301 	eor.w	r3, r3, #1
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d008      	beq.n	80124f6 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80124ea:	f043 0301 	orr.w	r3, r3, #1
 80124ee:	b2da      	uxtb	r2, r3
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 80124f6:	bf00      	nop
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 80124fe:	b580      	push	{r7, lr}
 8012500:	b084      	sub	sp, #16
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	f000 8083 	beq.w	8012616 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	68db      	ldr	r3, [r3, #12]
 8012514:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801251c:	f003 0302 	and.w	r3, r3, #2
 8012520:	2b00      	cmp	r3, #0
 8012522:	d155      	bne.n	80125d0 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801252a:	f043 0302 	orr.w	r3, r3, #2
 801252e:	b2da      	uxtb	r2, r3
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4619      	mov	r1, r3
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f000 ff8f 	bl	8013460 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8012542:	e045      	b.n	80125d0 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	3310      	adds	r3, #16
 8012548:	4618      	mov	r0, r3
 801254a:	f001 f802 	bl	8013552 <fifoBufPop>
 801254e:	4603      	mov	r3, r0
 8012550:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012558:	f003 0308 	and.w	r3, r3, #8
 801255c:	2b00      	cmp	r3, #0
 801255e:	d005      	beq.n	801256c <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8012560:	7afb      	ldrb	r3, [r7, #11]
 8012562:	4619      	mov	r1, r3
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f000 fa17 	bl	8012998 <onEscapedInput>
 801256a:	e02a      	b.n	80125c2 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012572:	2b1b      	cmp	r3, #27
 8012574:	d10c      	bne.n	8012590 <embeddedCliProcess+0x92>
 8012576:	7afb      	ldrb	r3, [r7, #11]
 8012578:	2b5b      	cmp	r3, #91	@ 0x5b
 801257a:	d109      	bne.n	8012590 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012582:	f043 0308 	orr.w	r3, r3, #8
 8012586:	b2da      	uxtb	r2, r3
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 801258e:	e018      	b.n	80125c2 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8012590:	7afb      	ldrb	r3, [r7, #11]
 8012592:	4618      	mov	r0, r3
 8012594:	f000 ff85 	bl	80134a2 <isControlChar>
 8012598:	4603      	mov	r3, r0
 801259a:	2b00      	cmp	r3, #0
 801259c:	d005      	beq.n	80125aa <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 801259e:	7afb      	ldrb	r3, [r7, #11]
 80125a0:	4619      	mov	r1, r3
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f000 fa54 	bl	8012a50 <onControlInput>
 80125a8:	e00b      	b.n	80125c2 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 80125aa:	7afb      	ldrb	r3, [r7, #11]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f000 ff98 	bl	80134e2 <isDisplayableChar>
 80125b2:	4603      	mov	r3, r0
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d004      	beq.n	80125c2 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 80125b8:	7afb      	ldrb	r3, [r7, #11]
 80125ba:	4619      	mov	r1, r3
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f000 fa17 	bl	80129f0 <onCharInput>
        }

        printLiveAutocompletion(cli);
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f000 fe35 	bl	8013232 <printLiveAutocompletion>

        impl->lastChar = c;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	7afa      	ldrb	r2, [r7, #11]
 80125cc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	3310      	adds	r3, #16
 80125d4:	4618      	mov	r0, r3
 80125d6:	f000 ff9b 	bl	8013510 <fifoBufAvailable>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d1b1      	bne.n	8012544 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125e6:	f003 0301 	and.w	r3, r3, #1
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d014      	beq.n	8012618 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	2200      	movs	r2, #0
 80125f2:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	69db      	ldr	r3, [r3, #28]
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	8c12      	ldrh	r2, [r2, #32]
 80125fc:	4413      	add	r3, r2
 80125fe:	2200      	movs	r2, #0
 8012600:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012608:	f023 0301 	bic.w	r3, r3, #1
 801260c:	b2da      	uxtb	r2, r3
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012614:	e000      	b.n	8012618 <embeddedCliProcess+0x11a>
        return;
 8012616:	bf00      	nop
    }
}
 8012618:	3710      	adds	r7, #16
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}

0801261e <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 801261e:	b084      	sub	sp, #16
 8012620:	b4b0      	push	{r4, r5, r7}
 8012622:	b085      	sub	sp, #20
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801262c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801263e:	429a      	cmp	r2, r3
 8012640:	d101      	bne.n	8012646 <embeddedCliAddBinding+0x28>
        return false;
 8012642:	2300      	movs	r3, #0
 8012644:	e017      	b.n	8012676 <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801264e:	4619      	mov	r1, r3
 8012650:	460b      	mov	r3, r1
 8012652:	009b      	lsls	r3, r3, #2
 8012654:	440b      	add	r3, r1
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	4413      	add	r3, r2
 801265a:	461d      	mov	r5, r3
 801265c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8012660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012664:	6823      	ldr	r3, [r4, #0]
 8012666:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801266c:	3301      	adds	r3, #1
 801266e:	b29a      	uxth	r2, r3
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	859a      	strh	r2, [r3, #44]	@ 0x2c
    return true;
 8012674:	2301      	movs	r3, #1
}
 8012676:	4618      	mov	r0, r3
 8012678:	3714      	adds	r7, #20
 801267a:	46bd      	mov	sp, r7
 801267c:	bcb0      	pop	{r4, r5, r7}
 801267e:	b004      	add	sp, #16
 8012680:	4770      	bx	lr
	...

08012684 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d031      	beq.n	80126fa <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	68db      	ldr	r3, [r3, #12]
 801269a:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80126a2:	f003 0310 	and.w	r3, r3, #16
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d102      	bne.n	80126b0 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f000 fea6 	bl	80133fc <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 80126b0:	6839      	ldr	r1, [r7, #0]
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f000 fed4 	bl	8013460 <writeToOutput>
    writeToOutput(cli, lineBreak);
 80126b8:	4b12      	ldr	r3, [pc, #72]	@ (8012704 <embeddedCliPrint+0x80>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4619      	mov	r1, r3
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f000 fece 	bl	8013460 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80126ca:	f003 0310 	and.w	r3, r3, #16
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d114      	bne.n	80126fc <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	4619      	mov	r1, r3
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 fec1 	bl	8013460 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	69db      	ldr	r3, [r3, #28]
 80126e2:	4619      	mov	r1, r3
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f000 febb 	bl	8013460 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	8c1a      	ldrh	r2, [r3, #32]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	861a      	strh	r2, [r3, #48]	@ 0x30

        printLiveAutocompletion(cli);
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 fd9d 	bl	8013232 <printLiveAutocompletion>
 80126f8:	e000      	b.n	80126fc <embeddedCliPrint+0x78>
        return;
 80126fa:	bf00      	nop
    }
}
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	20000024 	.word	0x20000024

08012708 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 8012708:	b580      	push	{r7, lr}
 801270a:	b088      	sub	sp, #32
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d066      	beq.n	80127e4 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8012716:	4b35      	ldr	r3, [pc, #212]	@ (80127ec <embeddedCliTokenizeArgs+0xe4>)
 8012718:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 801271a:	2300      	movs	r3, #0
 801271c:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 801271e:	2300      	movs	r3, #0
 8012720:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8012722:	2300      	movs	r3, #0
 8012724:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8012726:	2300      	movs	r3, #0
 8012728:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 801272a:	e047      	b.n	80127bc <embeddedCliTokenizeArgs+0xb4>
        ++i;
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	3301      	adds	r3, #1
 8012730:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8012732:	7fbb      	ldrb	r3, [r7, #30]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d002      	beq.n	801273e <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8012738:	2300      	movs	r3, #0
 801273a:	77bb      	strb	r3, [r7, #30]
 801273c:	e029      	b.n	8012792 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 801273e:	7cfb      	ldrb	r3, [r7, #19]
 8012740:	2b5c      	cmp	r3, #92	@ 0x5c
 8012742:	d102      	bne.n	801274a <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8012744:	2301      	movs	r3, #1
 8012746:	77bb      	strb	r3, [r7, #30]
            continue;
 8012748:	e038      	b.n	80127bc <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 801274a:	7cfb      	ldrb	r3, [r7, #19]
 801274c:	2b22      	cmp	r3, #34	@ 0x22
 801274e:	d110      	bne.n	8012772 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8012750:	7ffb      	ldrb	r3, [r7, #31]
 8012752:	2b00      	cmp	r3, #0
 8012754:	bf14      	ite	ne
 8012756:	2301      	movne	r3, #1
 8012758:	2300      	moveq	r3, #0
 801275a:	b2db      	uxtb	r3, r3
 801275c:	f083 0301 	eor.w	r3, r3, #1
 8012760:	b2db      	uxtb	r3, r3
 8012762:	77fb      	strb	r3, [r7, #31]
 8012764:	7ffb      	ldrb	r3, [r7, #31]
 8012766:	f003 0301 	and.w	r3, r3, #1
 801276a:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 801276c:	2300      	movs	r3, #0
 801276e:	74fb      	strb	r3, [r7, #19]
 8012770:	e00f      	b.n	8012792 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8012772:	7ffb      	ldrb	r3, [r7, #31]
 8012774:	f083 0301 	eor.w	r3, r3, #1
 8012778:	b2db      	uxtb	r3, r3
 801277a:	2b00      	cmp	r3, #0
 801277c:	d009      	beq.n	8012792 <embeddedCliTokenizeArgs+0x8a>
 801277e:	7cfb      	ldrb	r3, [r7, #19]
 8012780:	4619      	mov	r1, r3
 8012782:	68f8      	ldr	r0, [r7, #12]
 8012784:	f00c fa6e 	bl	801ec64 <strchr>
 8012788:	4603      	mov	r3, r0
 801278a:	2b00      	cmp	r3, #0
 801278c:	d001      	beq.n	8012792 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 801278e:	2300      	movs	r3, #0
 8012790:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8012792:	7cfb      	ldrb	r3, [r7, #19]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d109      	bne.n	80127ac <embeddedCliTokenizeArgs+0xa4>
 8012798:	69bb      	ldr	r3, [r7, #24]
 801279a:	2b00      	cmp	r3, #0
 801279c:	dd0e      	ble.n	80127bc <embeddedCliTokenizeArgs+0xb4>
 801279e:	69bb      	ldr	r3, [r7, #24]
 80127a0:	3b01      	subs	r3, #1
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	4413      	add	r3, r2
 80127a6:	781b      	ldrb	r3, [r3, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d007      	beq.n	80127bc <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 80127ac:	69bb      	ldr	r3, [r7, #24]
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	4413      	add	r3, r2
 80127b2:	7cfa      	ldrb	r2, [r7, #19]
 80127b4:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	3301      	adds	r3, #1
 80127ba:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	687a      	ldr	r2, [r7, #4]
 80127c0:	4413      	add	r3, r2
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	74fb      	strb	r3, [r7, #19]
 80127c6:	7cfb      	ldrb	r3, [r7, #19]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d1af      	bne.n	801272c <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	4413      	add	r3, r2
 80127d2:	2200      	movs	r2, #0
 80127d4:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 80127d6:	69bb      	ldr	r3, [r7, #24]
 80127d8:	3301      	adds	r3, #1
 80127da:	687a      	ldr	r2, [r7, #4]
 80127dc:	4413      	add	r3, r2
 80127de:	2200      	movs	r2, #0
 80127e0:	701a      	strb	r2, [r3, #0]
 80127e2:	e000      	b.n	80127e6 <embeddedCliTokenizeArgs+0xde>
        return;
 80127e4:	bf00      	nop
}
 80127e6:	3720      	adds	r7, #32
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	080243ec 	.word	0x080243ec

080127f0 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b084      	sub	sp, #16
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	460b      	mov	r3, r1
 80127fa:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80127fc:	887b      	ldrh	r3, [r7, #2]
 80127fe:	4619      	mov	r1, r3
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 ffd5 	bl	80137b0 <getTokenPosition>
 8012806:	4603      	mov	r3, r0
 8012808:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 801280a:	89fb      	ldrh	r3, [r7, #14]
 801280c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012810:	4293      	cmp	r3, r2
 8012812:	d003      	beq.n	801281c <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8012814:	89fb      	ldrh	r3, [r7, #14]
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	4413      	add	r3, r2
 801281a:	e000      	b.n	801281e <embeddedCliGetToken+0x2e>
    else
        return NULL;
 801281c:	2300      	movs	r3, #0
}
 801281e:	4618      	mov	r0, r3
 8012820:	3710      	adds	r7, #16
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}

08012826 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8012826:	b580      	push	{r7, lr}
 8012828:	b084      	sub	sp, #16
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
 801282e:	460b      	mov	r3, r1
 8012830:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8012832:	887b      	ldrh	r3, [r7, #2]
 8012834:	4619      	mov	r1, r3
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f000 ffba 	bl	80137b0 <getTokenPosition>
 801283c:	4603      	mov	r3, r0
 801283e:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8012840:	89fb      	ldrh	r3, [r7, #14]
 8012842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012846:	4293      	cmp	r3, r2
 8012848:	d003      	beq.n	8012852 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 801284a:	89fb      	ldrh	r3, [r7, #14]
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	4413      	add	r3, r2
 8012850:	e000      	b.n	8012854 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8012852:	2300      	movs	r3, #0
}
 8012854:	4618      	mov	r0, r3
 8012856:	3710      	adds	r7, #16
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}

0801285c <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 801285c:	b480      	push	{r7}
 801285e:	b085      	sub	sp, #20
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d003      	beq.n	8012872 <embeddedCliGetTokenCount+0x16>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d101      	bne.n	8012876 <embeddedCliGetTokenCount+0x1a>
        return 0;
 8012872:	2300      	movs	r3, #0
 8012874:	e019      	b.n	80128aa <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8012876:	2300      	movs	r3, #0
 8012878:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 801287a:	2301      	movs	r3, #1
 801287c:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	687a      	ldr	r2, [r7, #4]
 8012882:	4413      	add	r3, r2
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d109      	bne.n	801289e <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	3301      	adds	r3, #1
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	4413      	add	r3, r2
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d006      	beq.n	80128a6 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8012898:	897b      	ldrh	r3, [r7, #10]
 801289a:	3301      	adds	r3, #1
 801289c:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	3301      	adds	r3, #1
 80128a2:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 80128a4:	e7eb      	b.n	801287e <embeddedCliGetTokenCount+0x22>
                break;
 80128a6:	bf00      	nop
    }

    return tokenCount;
 80128a8:	897b      	ldrh	r3, [r7, #10]
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3714      	adds	r7, #20
 80128ae:	46bd      	mov	sp, r7
 80128b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b4:	4770      	bx	lr
	...

080128b8 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b086      	sub	sp, #24
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
 80128c0:	460b      	mov	r3, r1
 80128c2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	68db      	ldr	r3, [r3, #12]
 80128c8:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	899b      	ldrh	r3, [r3, #12]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d05c      	beq.n	801298c <navigateHistory+0xd4>
 80128d2:	78fb      	ldrb	r3, [r7, #3]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d005      	beq.n	80128e4 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	895a      	ldrh	r2, [r3, #10]
 80128dc:	693b      	ldr	r3, [r7, #16]
 80128de:	899b      	ldrh	r3, [r3, #12]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d053      	beq.n	801298c <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 80128e4:	78fb      	ldrb	r3, [r7, #3]
 80128e6:	f083 0301 	eor.w	r3, r3, #1
 80128ea:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d003      	beq.n	80128f8 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	895b      	ldrh	r3, [r3, #10]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d049      	beq.n	801298c <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f000 fd7f 	bl	80133fc <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	4619      	mov	r1, r3
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f000 fdab 	bl	8013460 <writeToOutput>

    if (navigateUp)
 801290a:	78fb      	ldrb	r3, [r7, #3]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d006      	beq.n	801291e <navigateHistory+0x66>
        ++impl->history.current;
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	895b      	ldrh	r3, [r3, #10]
 8012914:	3301      	adds	r3, #1
 8012916:	b29a      	uxth	r2, r3
 8012918:	693b      	ldr	r3, [r7, #16]
 801291a:	815a      	strh	r2, [r3, #10]
 801291c:	e005      	b.n	801292a <navigateHistory+0x72>
    else
        --impl->history.current;
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	895b      	ldrh	r3, [r3, #10]
 8012922:	3b01      	subs	r3, #1
 8012924:	b29a      	uxth	r2, r3
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	1d1a      	adds	r2, r3, #4
 801292e:	693b      	ldr	r3, [r7, #16]
 8012930:	895b      	ldrh	r3, [r3, #10]
 8012932:	4619      	mov	r1, r3
 8012934:	4610      	mov	r0, r2
 8012936:	f000 fec2 	bl	80136be <historyGet>
 801293a:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d101      	bne.n	8012946 <navigateHistory+0x8e>
        item = "";
 8012942:	4b14      	ldr	r3, [pc, #80]	@ (8012994 <navigateHistory+0xdc>)
 8012944:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8012946:	6978      	ldr	r0, [r7, #20]
 8012948:	f7ed fcaa 	bl	80002a0 <strlen>
 801294c:	4603      	mov	r3, r0
 801294e:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	69db      	ldr	r3, [r3, #28]
 8012954:	89fa      	ldrh	r2, [r7, #14]
 8012956:	6979      	ldr	r1, [r7, #20]
 8012958:	4618      	mov	r0, r3
 801295a:	f00c fa92 	bl	801ee82 <memcpy>
    impl->cmdBuffer[len] = '\0';
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	69da      	ldr	r2, [r3, #28]
 8012962:	89fb      	ldrh	r3, [r7, #14]
 8012964:	4413      	add	r3, r2
 8012966:	2200      	movs	r2, #0
 8012968:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	89fa      	ldrh	r2, [r7, #14]
 801296e:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	69db      	ldr	r3, [r3, #28]
 8012974:	4619      	mov	r1, r3
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f000 fd72 	bl	8013460 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	8c1a      	ldrh	r2, [r3, #32]
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	861a      	strh	r2, [r3, #48]	@ 0x30

    printLiveAutocompletion(cli);
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f000 fc54 	bl	8013232 <printLiveAutocompletion>
 801298a:	e000      	b.n	801298e <navigateHistory+0xd6>
        return;
 801298c:	bf00      	nop
}
 801298e:	3718      	adds	r7, #24
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}
 8012994:	080243f0 	.word	0x080243f0

08012998 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	460b      	mov	r3, r1
 80129a2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	68db      	ldr	r3, [r3, #12]
 80129a8:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 80129aa:	78fb      	ldrb	r3, [r7, #3]
 80129ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80129ae:	d91b      	bls.n	80129e8 <onEscapedInput+0x50>
 80129b0:	78fb      	ldrb	r3, [r7, #3]
 80129b2:	2b7e      	cmp	r3, #126	@ 0x7e
 80129b4:	d818      	bhi.n	80129e8 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80129bc:	f023 0308 	bic.w	r3, r3, #8
 80129c0:	b2da      	uxtb	r2, r3
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 80129c8:	78fb      	ldrb	r3, [r7, #3]
 80129ca:	2b41      	cmp	r3, #65	@ 0x41
 80129cc:	d002      	beq.n	80129d4 <onEscapedInput+0x3c>
 80129ce:	78fb      	ldrb	r3, [r7, #3]
 80129d0:	2b42      	cmp	r3, #66	@ 0x42
 80129d2:	d109      	bne.n	80129e8 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 80129d4:	78fb      	ldrb	r3, [r7, #3]
 80129d6:	2b41      	cmp	r3, #65	@ 0x41
 80129d8:	bf0c      	ite	eq
 80129da:	2301      	moveq	r3, #1
 80129dc:	2300      	movne	r3, #0
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	4619      	mov	r1, r3
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f7ff ff68 	bl	80128b8 <navigateHistory>
        }
    }
}
 80129e8:	bf00      	nop
 80129ea:	3710      	adds	r7, #16
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b084      	sub	sp, #16
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	460b      	mov	r3, r1
 80129fa:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	68db      	ldr	r3, [r3, #12]
 8012a00:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	8c1b      	ldrh	r3, [r3, #32]
 8012a06:	3302      	adds	r3, #2
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	da1a      	bge.n	8012a46 <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	69db      	ldr	r3, [r3, #28]
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	8c12      	ldrh	r2, [r2, #32]
 8012a18:	4413      	add	r3, r2
 8012a1a:	78fa      	ldrb	r2, [r7, #3]
 8012a1c:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	8c1b      	ldrh	r3, [r3, #32]
 8012a22:	3301      	adds	r3, #1
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	69db      	ldr	r3, [r3, #28]
 8012a2e:	68fa      	ldr	r2, [r7, #12]
 8012a30:	8c12      	ldrh	r2, [r2, #32]
 8012a32:	4413      	add	r3, r2
 8012a34:	2200      	movs	r2, #0
 8012a36:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	78fa      	ldrb	r2, [r7, #3]
 8012a3e:	4611      	mov	r1, r2
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	4798      	blx	r3
 8012a44:	e000      	b.n	8012a48 <onCharInput+0x58>
        return;
 8012a46:	bf00      	nop
}
 8012a48:	3710      	adds	r7, #16
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
	...

08012a50 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	460b      	mov	r3, r1
 8012a5a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012a68:	2b0d      	cmp	r3, #13
 8012a6a:	d102      	bne.n	8012a72 <onControlInput+0x22>
 8012a6c:	78fb      	ldrb	r3, [r7, #3]
 8012a6e:	2b0a      	cmp	r3, #10
 8012a70:	d062      	beq.n	8012b38 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012a78:	2b0a      	cmp	r3, #10
 8012a7a:	d102      	bne.n	8012a82 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8012a7c:	78fb      	ldrb	r3, [r7, #3]
 8012a7e:	2b0d      	cmp	r3, #13
 8012a80:	d05a      	beq.n	8012b38 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8012a82:	78fb      	ldrb	r3, [r7, #3]
 8012a84:	2b0d      	cmp	r3, #13
 8012a86:	d002      	beq.n	8012a8e <onControlInput+0x3e>
 8012a88:	78fb      	ldrb	r3, [r7, #3]
 8012a8a:	2b0a      	cmp	r3, #10
 8012a8c:	d126      	bne.n	8012adc <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f000 fc2a 	bl	80132e8 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8012a94:	4b2a      	ldr	r3, [pc, #168]	@ (8012b40 <onControlInput+0xf0>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	4619      	mov	r1, r3
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f000 fce0 	bl	8013460 <writeToOutput>

        if (impl->cmdSize > 0)
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	8c1b      	ldrh	r3, [r3, #32]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d002      	beq.n	8012aae <onControlInput+0x5e>
            parseCommand(cli);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f000 f84b 	bl	8012b44 <parseCommand>
        impl->cmdSize = 0;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	69db      	ldr	r3, [r3, #28]
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	8c12      	ldrh	r2, [r2, #32]
 8012abc:	4413      	add	r3, r2
 8012abe:	2200      	movs	r2, #0
 8012ac0:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	2200      	movs	r2, #0
 8012acc:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f000 fcc3 	bl	8013460 <writeToOutput>
 8012ada:	e02e      	b.n	8012b3a <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8012adc:	78fb      	ldrb	r3, [r7, #3]
 8012ade:	2b08      	cmp	r3, #8
 8012ae0:	d002      	beq.n	8012ae8 <onControlInput+0x98>
 8012ae2:	78fb      	ldrb	r3, [r7, #3]
 8012ae4:	2b7f      	cmp	r3, #127	@ 0x7f
 8012ae6:	d120      	bne.n	8012b2a <onControlInput+0xda>
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	8c1b      	ldrh	r3, [r3, #32]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d01c      	beq.n	8012b2a <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	2108      	movs	r1, #8
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	2120      	movs	r1, #32
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	2108      	movs	r1, #8
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	8c1b      	ldrh	r3, [r3, #32]
 8012b12:	3b01      	subs	r3, #1
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	69db      	ldr	r3, [r3, #28]
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	8c12      	ldrh	r2, [r2, #32]
 8012b22:	4413      	add	r3, r2
 8012b24:	2200      	movs	r2, #0
 8012b26:	701a      	strb	r2, [r3, #0]
 8012b28:	e007      	b.n	8012b3a <onControlInput+0xea>
    } else if (c == '\t') {
 8012b2a:	78fb      	ldrb	r3, [r7, #3]
 8012b2c:	2b09      	cmp	r3, #9
 8012b2e:	d104      	bne.n	8012b3a <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f000 fbd9 	bl	80132e8 <onAutocompleteRequest>
 8012b36:	e000      	b.n	8012b3a <onControlInput+0xea>
        return;
 8012b38:	bf00      	nop
    }

}
 8012b3a:	3710      	adds	r7, #16
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}
 8012b40:	20000024 	.word	0x20000024

08012b44 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8012b44:	b590      	push	{r4, r7, lr}
 8012b46:	b08f      	sub	sp, #60	@ 0x3c
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	68db      	ldr	r3, [r3, #12]
 8012b50:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8012b52:	2301      	movs	r3, #1
 8012b54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8012b58:	2300      	movs	r3, #0
 8012b5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012b5c:	e00d      	b.n	8012b7a <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8012b5e:	69bb      	ldr	r3, [r7, #24]
 8012b60:	69da      	ldr	r2, [r3, #28]
 8012b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b64:	4413      	add	r3, r2
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	2b20      	cmp	r3, #32
 8012b6a:	d003      	beq.n	8012b74 <parseCommand+0x30>
            isEmpty = false;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8012b72:	e008      	b.n	8012b86 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b76:	3301      	adds	r3, #1
 8012b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	8c1b      	ldrh	r3, [r3, #32]
 8012b7e:	461a      	mov	r2, r3
 8012b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b82:	4293      	cmp	r3, r2
 8012b84:	dbeb      	blt.n	8012b5e <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8012b86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	f040 80dc 	bne.w	8012d48 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	1d1a      	adds	r2, r3, #4
 8012b94:	69bb      	ldr	r3, [r7, #24]
 8012b96:	69db      	ldr	r3, [r3, #28]
 8012b98:	4619      	mov	r1, r3
 8012b9a:	4610      	mov	r0, r2
 8012b9c:	f000 fd2b 	bl	80135f6 <historyPut>

    char *cmdName = NULL;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012bae:	2300      	movs	r3, #0
 8012bb0:	623b      	str	r3, [r7, #32]
 8012bb2:	e030      	b.n	8012c16 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	69da      	ldr	r2, [r3, #28]
 8012bb8:	6a3b      	ldr	r3, [r7, #32]
 8012bba:	4413      	add	r3, r2
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8012bc0:	7dfb      	ldrb	r3, [r7, #23]
 8012bc2:	2b20      	cmp	r3, #32
 8012bc4:	d10f      	bne.n	8012be6 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8012bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d105      	bne.n	8012bd8 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8012bcc:	69bb      	ldr	r3, [r7, #24]
 8012bce:	69da      	ldr	r2, [r3, #28]
 8012bd0:	6a3b      	ldr	r3, [r7, #32]
 8012bd2:	4413      	add	r3, r2
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8012bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d018      	beq.n	8012c10 <parseCommand+0xcc>
                nameFinished = true;
 8012bde:	2301      	movs	r3, #1
 8012be0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012be4:	e014      	b.n	8012c10 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8012be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d105      	bne.n	8012bf8 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	69da      	ldr	r2, [r3, #28]
 8012bf0:	6a3b      	ldr	r3, [r7, #32]
 8012bf2:	4413      	add	r3, r2
 8012bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012bf6:	e00b      	b.n	8012c10 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8012bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d108      	bne.n	8012c10 <parseCommand+0xcc>
 8012bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d004      	beq.n	8012c10 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	69da      	ldr	r2, [r3, #28]
 8012c0a:	6a3b      	ldr	r3, [r7, #32]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012c10:	6a3b      	ldr	r3, [r7, #32]
 8012c12:	3301      	adds	r3, #1
 8012c14:	623b      	str	r3, [r7, #32]
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	8c1b      	ldrh	r3, [r3, #32]
 8012c1a:	461a      	mov	r2, r3
 8012c1c:	6a3b      	ldr	r3, [r7, #32]
 8012c1e:	4293      	cmp	r3, r2
 8012c20:	dbc8      	blt.n	8012bb4 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	69da      	ldr	r2, [r3, #28]
 8012c26:	69bb      	ldr	r3, [r7, #24]
 8012c28:	8c1b      	ldrh	r3, [r3, #32]
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	4413      	add	r3, r2
 8012c2e:	2200      	movs	r2, #0
 8012c30:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8012c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	f000 8089 	beq.w	8012d4c <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	61fb      	str	r3, [r7, #28]
 8012c3e:	e054      	b.n	8012cea <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8012c40:	69bb      	ldr	r3, [r7, #24]
 8012c42:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012c44:	69fa      	ldr	r2, [r7, #28]
 8012c46:	4613      	mov	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	440b      	add	r3, r1
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	4619      	mov	r1, r3
 8012c54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c56:	f7ed fac3 	bl	80001e0 <strcmp>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d141      	bne.n	8012ce4 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012c64:	69fa      	ldr	r2, [r7, #28]
 8012c66:	4613      	mov	r3, r2
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	4413      	add	r3, r2
 8012c6c:	009b      	lsls	r3, r3, #2
 8012c6e:	440b      	add	r3, r1
 8012c70:	691b      	ldr	r3, [r3, #16]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d040      	beq.n	8012cf8 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8012c76:	69bb      	ldr	r3, [r7, #24]
 8012c78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012c7a:	69fa      	ldr	r2, [r7, #28]
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	009b      	lsls	r3, r3, #2
 8012c80:	4413      	add	r3, r2
 8012c82:	009b      	lsls	r3, r3, #2
 8012c84:	440b      	add	r3, r1
 8012c86:	7a1b      	ldrb	r3, [r3, #8]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d002      	beq.n	8012c92 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8012c8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c8e:	f7ff fd3b 	bl	8012708 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012c98:	f043 0310 	orr.w	r3, r3, #16
 8012c9c:	b2da      	uxtb	r2, r3
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8012ca4:	69bb      	ldr	r3, [r7, #24]
 8012ca6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012ca8:	69fa      	ldr	r2, [r7, #28]
 8012caa:	4613      	mov	r3, r2
 8012cac:	009b      	lsls	r3, r3, #2
 8012cae:	4413      	add	r3, r2
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	440b      	add	r3, r1
 8012cb4:	691c      	ldr	r4, [r3, #16]
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012cba:	69fa      	ldr	r2, [r7, #28]
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	4413      	add	r3, r2
 8012cc2:	009b      	lsls	r3, r3, #2
 8012cc4:	440b      	add	r3, r1
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	461a      	mov	r2, r3
 8012cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012cd6:	f023 0310 	bic.w	r3, r3, #16
 8012cda:	b2da      	uxtb	r2, r3
 8012cdc:	69bb      	ldr	r3, [r7, #24]
 8012cde:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8012ce2:	e034      	b.n	8012d4e <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012ce4:	69fb      	ldr	r3, [r7, #28]
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	61fb      	str	r3, [r7, #28]
 8012cea:	69bb      	ldr	r3, [r7, #24]
 8012cec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012cee:	461a      	mov	r2, r3
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	4293      	cmp	r3, r2
 8012cf4:	dba4      	blt.n	8012c40 <parseCommand+0xfc>
 8012cf6:	e000      	b.n	8012cfa <parseCommand+0x1b6>
                break;
 8012cf8:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d01d      	beq.n	8012d3e <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8012d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d04:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8012d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d08:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012d0a:	69bb      	ldr	r3, [r7, #24]
 8012d0c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012d10:	f043 0310 	orr.w	r3, r3, #16
 8012d14:	b2da      	uxtb	r2, r3
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	f107 020c 	add.w	r2, r7, #12
 8012d24:	4611      	mov	r1, r2
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012d2a:	69bb      	ldr	r3, [r7, #24]
 8012d2c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012d30:	f023 0310 	bic.w	r3, r3, #16
 8012d34:	b2da      	uxtb	r2, r3
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012d3c:	e007      	b.n	8012d4e <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8012d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f000 f997 	bl	8013074 <onUnknownCommand>
 8012d46:	e002      	b.n	8012d4e <parseCommand+0x20a>
        return;
 8012d48:	bf00      	nop
 8012d4a:	e000      	b.n	8012d4e <parseCommand+0x20a>
        return;
 8012d4c:	bf00      	nop
    }
}
 8012d4e:	373c      	adds	r7, #60	@ 0x3c
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd90      	pop	{r4, r7, pc}

08012d54 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8012d54:	b5b0      	push	{r4, r5, r7, lr}
 8012d56:	b08a      	sub	sp, #40	@ 0x28
 8012d58:	af02      	add	r7, sp, #8
 8012d5a:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8012d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8012d90 <initInternalBindings+0x3c>)
 8012d5e:	f107 040c 	add.w	r4, r7, #12
 8012d62:	461d      	mov	r5, r3
 8012d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d68:	682b      	ldr	r3, [r5, #0]
 8012d6a:	6023      	str	r3, [r4, #0]
//            "Print list of commands",
//            true,
//            NULL,
//            onHelp
//    };
    embeddedCliAddBinding(cli, b);
 8012d6c:	466a      	mov	r2, sp
 8012d6e:	f107 0318 	add.w	r3, r7, #24
 8012d72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012d76:	e882 0003 	stmia.w	r2, {r0, r1}
 8012d7a:	f107 030c 	add.w	r3, r7, #12
 8012d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff fc4c 	bl	801261e <embeddedCliAddBinding>
//    embeddedCliAddBinding(cli, _b);
}
 8012d86:	bf00      	nop
 8012d88:	3720      	adds	r7, #32
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8012d8e:	bf00      	nop
 8012d90:	08024414 	.word	0x08024414

08012d94 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b08c      	sub	sp, #48	@ 0x30
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	60f8      	str	r0, [r7, #12]
 8012d9c:	60b9      	str	r1, [r7, #8]
 8012d9e:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8012da6:	69fb      	ldr	r3, [r7, #28]
 8012da8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d10a      	bne.n	8012dc4 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8012dae:	49a5      	ldr	r1, [pc, #660]	@ (8013044 <onHelp+0x2b0>)
 8012db0:	68f8      	ldr	r0, [r7, #12]
 8012db2:	f000 fb55 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012db6:	4ba4      	ldr	r3, [pc, #656]	@ (8013048 <onHelp+0x2b4>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4619      	mov	r1, r3
 8012dbc:	68f8      	ldr	r0, [r7, #12]
 8012dbe:	f000 fb4f 	bl	8013460 <writeToOutput>
        return;
 8012dc2:	e13b      	b.n	801303c <onHelp+0x2a8>
    }

    if(_RunTime_Packet.showPrompt )
 8012dc4:	4ba1      	ldr	r3, [pc, #644]	@ (801304c <onHelp+0x2b8>)
 8012dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d03d      	beq.n	8012e4a <onHelp+0xb6>
    {
    	_RunTime_Packet.showPrompt  = 0;
 8012dce:	4b9f      	ldr	r3, [pc, #636]	@ (801304c <onHelp+0x2b8>)
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        writeToOutput(cli, lineBreak);
 8012dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8013048 <onHelp+0x2b4>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	4619      	mov	r1, r3
 8012ddc:	68f8      	ldr	r0, [r7, #12]
 8012dde:	f000 fb3f 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012de2:	4b99      	ldr	r3, [pc, #612]	@ (8013048 <onHelp+0x2b4>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	4619      	mov	r1, r3
 8012de8:	68f8      	ldr	r0, [r7, #12]
 8012dea:	f000 fb39 	bl	8013460 <writeToOutput>
		writeToOutput(cli, "This product is powered by BuildUp! "); //TM 0x99
 8012dee:	4998      	ldr	r1, [pc, #608]	@ (8013050 <onHelp+0x2bc>)
 8012df0:	68f8      	ldr	r0, [r7, #12]
 8012df2:	f000 fb35 	bl	8013460 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8012df6:	4b94      	ldr	r3, [pc, #592]	@ (8013048 <onHelp+0x2b4>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	68f8      	ldr	r0, [r7, #12]
 8012dfe:	f000 fb2f 	bl	8013460 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8012e02:	4994      	ldr	r1, [pc, #592]	@ (8013054 <onHelp+0x2c0>)
 8012e04:	68f8      	ldr	r0, [r7, #12]
 8012e06:	f000 fb2b 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e0a:	4b8f      	ldr	r3, [pc, #572]	@ (8013048 <onHelp+0x2b4>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	4619      	mov	r1, r3
 8012e10:	68f8      	ldr	r0, [r7, #12]
 8012e12:	f000 fb25 	bl	8013460 <writeToOutput>
        writeToOutput(cli, "Montreal, Canada");
 8012e16:	4990      	ldr	r1, [pc, #576]	@ (8013058 <onHelp+0x2c4>)
 8012e18:	68f8      	ldr	r0, [r7, #12]
 8012e1a:	f000 fb21 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e1e:	4b8a      	ldr	r3, [pc, #552]	@ (8013048 <onHelp+0x2b4>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	4619      	mov	r1, r3
 8012e24:	68f8      	ldr	r0, [r7, #12]
 8012e26:	f000 fb1b 	bl	8013460 <writeToOutput>
        writeToOutput(cli, "https://thingsfactory.com");
 8012e2a:	498c      	ldr	r1, [pc, #560]	@ (801305c <onHelp+0x2c8>)
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	f000 fb17 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e32:	4b85      	ldr	r3, [pc, #532]	@ (8013048 <onHelp+0x2b4>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	4619      	mov	r1, r3
 8012e38:	68f8      	ldr	r0, [r7, #12]
 8012e3a:	f000 fb11 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e3e:	4b82      	ldr	r3, [pc, #520]	@ (8013048 <onHelp+0x2b4>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	4619      	mov	r1, r3
 8012e44:	68f8      	ldr	r0, [r7, #12]
 8012e46:	f000 fb0b 	bl	8013460 <writeToOutput>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8012e4a:	68b8      	ldr	r0, [r7, #8]
 8012e4c:	f7ff fd06 	bl	801285c <embeddedCliGetTokenCount>
 8012e50:	4603      	mov	r3, r0
 8012e52:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8012e54:	8b7b      	ldrh	r3, [r7, #26]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d176      	bne.n	8012f48 <onHelp+0x1b4>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012e5e:	e03c      	b.n	8012eda <onHelp+0x146>
            writeToOutput(cli, " * ");
 8012e60:	497f      	ldr	r1, [pc, #508]	@ (8013060 <onHelp+0x2cc>)
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	f000 fafc 	bl	8013460 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012e6e:	4613      	mov	r3, r2
 8012e70:	009b      	lsls	r3, r3, #2
 8012e72:	4413      	add	r3, r2
 8012e74:	009b      	lsls	r3, r3, #2
 8012e76:	440b      	add	r3, r1
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	f000 faef 	bl	8013460 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8012e82:	4b71      	ldr	r3, [pc, #452]	@ (8013048 <onHelp+0x2b4>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	4619      	mov	r1, r3
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	f000 fae9 	bl	8013460 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8012e8e:	69fb      	ldr	r3, [r7, #28]
 8012e90:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012e94:	4613      	mov	r3, r2
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	4413      	add	r3, r2
 8012e9a:	009b      	lsls	r3, r3, #2
 8012e9c:	440b      	add	r3, r1
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d017      	beq.n	8012ed4 <onHelp+0x140>
                cli->writeChar(cli, '\t');
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	2109      	movs	r1, #9
 8012eaa:	68f8      	ldr	r0, [r7, #12]
 8012eac:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8012eae:	69fb      	ldr	r3, [r7, #28]
 8012eb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012eb4:	4613      	mov	r3, r2
 8012eb6:	009b      	lsls	r3, r3, #2
 8012eb8:	4413      	add	r3, r2
 8012eba:	009b      	lsls	r3, r3, #2
 8012ebc:	440b      	add	r3, r1
 8012ebe:	685b      	ldr	r3, [r3, #4]
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	68f8      	ldr	r0, [r7, #12]
 8012ec4:	f000 facc 	bl	8013460 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8012ec8:	4b5f      	ldr	r3, [pc, #380]	@ (8013048 <onHelp+0x2b4>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	4619      	mov	r1, r3
 8012ece:	68f8      	ldr	r0, [r7, #12]
 8012ed0:	f000 fac6 	bl	8013460 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ed6:	3301      	adds	r3, #1
 8012ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012eda:	69fb      	ldr	r3, [r7, #28]
 8012edc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012ede:	461a      	mov	r2, r3
 8012ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	dbbc      	blt.n	8012e60 <onHelp+0xcc>
            }
        }

        writeToOutput(cli, lineBreak);
 8012ee6:	4b58      	ldr	r3, [pc, #352]	@ (8013048 <onHelp+0x2b4>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4619      	mov	r1, r3
 8012eec:	68f8      	ldr	r0, [r7, #12]
 8012eee:	f000 fab7 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012ef2:	4b55      	ldr	r3, [pc, #340]	@ (8013048 <onHelp+0x2b4>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	68f8      	ldr	r0, [r7, #12]
 8012efa:	f000 fab1 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012efe:	4b52      	ldr	r3, [pc, #328]	@ (8013048 <onHelp+0x2b4>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	4619      	mov	r1, r3
 8012f04:	68f8      	ldr	r0, [r7, #12]
 8012f06:	f000 faab 	bl	8013460 <writeToOutput>
		writeToOutput(cli, "BuildUp! Edge C02 Data Logger "); //TM 0x99
 8012f0a:	4956      	ldr	r1, [pc, #344]	@ (8013064 <onHelp+0x2d0>)
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f000 faa7 	bl	8013460 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8012f12:	4b4d      	ldr	r3, [pc, #308]	@ (8013048 <onHelp+0x2b4>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	4619      	mov	r1, r3
 8012f18:	68f8      	ldr	r0, [r7, #12]
 8012f1a:	f000 faa1 	bl	8013460 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Co. Montreal Canada "); //copyright 0xA9
 8012f1e:	4952      	ldr	r1, [pc, #328]	@ (8013068 <onHelp+0x2d4>)
 8012f20:	68f8      	ldr	r0, [r7, #12]
 8012f22:	f000 fa9d 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f26:	4b48      	ldr	r3, [pc, #288]	@ (8013048 <onHelp+0x2b4>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	68f8      	ldr	r0, [r7, #12]
 8012f2e:	f000 fa97 	bl	8013460 <writeToOutput>
        writeToOutput(cli, "thingsfactory.com");
 8012f32:	494e      	ldr	r1, [pc, #312]	@ (801306c <onHelp+0x2d8>)
 8012f34:	68f8      	ldr	r0, [r7, #12]
 8012f36:	f000 fa93 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f3a:	4b43      	ldr	r3, [pc, #268]	@ (8013048 <onHelp+0x2b4>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	4619      	mov	r1, r3
 8012f40:	68f8      	ldr	r0, [r7, #12]
 8012f42:	f000 fa8d 	bl	8013460 <writeToOutput>
 8012f46:	e079      	b.n	801303c <onHelp+0x2a8>



    } else if (tokenCount == 1) {
 8012f48:	8b7b      	ldrh	r3, [r7, #26]
 8012f4a:	2b01      	cmp	r3, #1
 8012f4c:	d16c      	bne.n	8013028 <onHelp+0x294>
        // try find command
        const char *helpStr = NULL;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8012f52:	2101      	movs	r1, #1
 8012f54:	68b8      	ldr	r0, [r7, #8]
 8012f56:	f7ff fc4b 	bl	80127f0 <embeddedCliGetToken>
 8012f5a:	6178      	str	r0, [r7, #20]
        bool found = false;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012f62:	2300      	movs	r3, #0
 8012f64:	623b      	str	r3, [r7, #32]
 8012f66:	e020      	b.n	8012faa <onHelp+0x216>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8012f68:	69fb      	ldr	r3, [r7, #28]
 8012f6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f6c:	6a3a      	ldr	r2, [r7, #32]
 8012f6e:	4613      	mov	r3, r2
 8012f70:	009b      	lsls	r3, r3, #2
 8012f72:	4413      	add	r3, r2
 8012f74:	009b      	lsls	r3, r3, #2
 8012f76:	440b      	add	r3, r1
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	6979      	ldr	r1, [r7, #20]
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7ed f92f 	bl	80001e0 <strcmp>
 8012f82:	4603      	mov	r3, r0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d10d      	bne.n	8012fa4 <onHelp+0x210>
                helpStr = impl->bindings[i].help;
 8012f88:	69fb      	ldr	r3, [r7, #28]
 8012f8a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f8c:	6a3a      	ldr	r2, [r7, #32]
 8012f8e:	4613      	mov	r3, r2
 8012f90:	009b      	lsls	r3, r3, #2
 8012f92:	4413      	add	r3, r2
 8012f94:	009b      	lsls	r3, r3, #2
 8012f96:	440b      	add	r3, r1
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
                found = true;
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8012fa2:	e008      	b.n	8012fb6 <onHelp+0x222>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012fa4:	6a3b      	ldr	r3, [r7, #32]
 8012fa6:	3301      	adds	r3, #1
 8012fa8:	623b      	str	r3, [r7, #32]
 8012faa:	69fb      	ldr	r3, [r7, #28]
 8012fac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012fae:	461a      	mov	r2, r3
 8012fb0:	6a3b      	ldr	r3, [r7, #32]
 8012fb2:	4293      	cmp	r3, r2
 8012fb4:	dbd8      	blt.n	8012f68 <onHelp+0x1d4>
            }
        }
        if (found && helpStr != NULL) {
 8012fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d020      	beq.n	8013000 <onHelp+0x26c>
 8012fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d01d      	beq.n	8013000 <onHelp+0x26c>
            writeToOutput(cli, " * ");
 8012fc4:	4926      	ldr	r1, [pc, #152]	@ (8013060 <onHelp+0x2cc>)
 8012fc6:	68f8      	ldr	r0, [r7, #12]
 8012fc8:	f000 fa4a 	bl	8013460 <writeToOutput>
            writeToOutput(cli, cmdName);
 8012fcc:	6979      	ldr	r1, [r7, #20]
 8012fce:	68f8      	ldr	r0, [r7, #12]
 8012fd0:	f000 fa46 	bl	8013460 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8012fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8013048 <onHelp+0x2b4>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	4619      	mov	r1, r3
 8012fda:	68f8      	ldr	r0, [r7, #12]
 8012fdc:	f000 fa40 	bl	8013460 <writeToOutput>
            cli->writeChar(cli, '\t');
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	2109      	movs	r1, #9
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8012fea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012fec:	68f8      	ldr	r0, [r7, #12]
 8012fee:	f000 fa37 	bl	8013460 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8012ff2:	4b15      	ldr	r3, [pc, #84]	@ (8013048 <onHelp+0x2b4>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	68f8      	ldr	r0, [r7, #12]
 8012ffa:	f000 fa31 	bl	8013460 <writeToOutput>
 8012ffe:	e01d      	b.n	801303c <onHelp+0x2a8>
        } else if (found) {
 8013000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013004:	2b00      	cmp	r3, #0
 8013006:	d00a      	beq.n	801301e <onHelp+0x28a>
            writeToOutput(cli, "Help is not available");
 8013008:	490e      	ldr	r1, [pc, #56]	@ (8013044 <onHelp+0x2b0>)
 801300a:	68f8      	ldr	r0, [r7, #12]
 801300c:	f000 fa28 	bl	8013460 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8013010:	4b0d      	ldr	r3, [pc, #52]	@ (8013048 <onHelp+0x2b4>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	4619      	mov	r1, r3
 8013016:	68f8      	ldr	r0, [r7, #12]
 8013018:	f000 fa22 	bl	8013460 <writeToOutput>
 801301c:	e00e      	b.n	801303c <onHelp+0x2a8>
        } else {
            onUnknownCommand(cli, cmdName);
 801301e:	6979      	ldr	r1, [r7, #20]
 8013020:	68f8      	ldr	r0, [r7, #12]
 8013022:	f000 f827 	bl	8013074 <onUnknownCommand>
 8013026:	e009      	b.n	801303c <onHelp+0x2a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8013028:	4911      	ldr	r1, [pc, #68]	@ (8013070 <onHelp+0x2dc>)
 801302a:	68f8      	ldr	r0, [r7, #12]
 801302c:	f000 fa18 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8013030:	4b05      	ldr	r3, [pc, #20]	@ (8013048 <onHelp+0x2b4>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	4619      	mov	r1, r3
 8013036:	68f8      	ldr	r0, [r7, #12]
 8013038:	f000 fa12 	bl	8013460 <writeToOutput>
    }
}
 801303c:	3730      	adds	r7, #48	@ 0x30
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	08024428 	.word	0x08024428
 8013048:	20000024 	.word	0x20000024
 801304c:	20001530 	.word	0x20001530
 8013050:	08024440 	.word	0x08024440
 8013054:	08024468 	.word	0x08024468
 8013058:	08024490 	.word	0x08024490
 801305c:	080244a4 	.word	0x080244a4
 8013060:	080244c0 	.word	0x080244c0
 8013064:	080244c4 	.word	0x080244c4
 8013068:	080244e4 	.word	0x080244e4
 801306c:	08024508 	.word	0x08024508
 8013070:	0802451c 	.word	0x0802451c

08013074 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 801307e:	490b      	ldr	r1, [pc, #44]	@ (80130ac <onUnknownCommand+0x38>)
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f000 f9ed 	bl	8013460 <writeToOutput>
    writeToOutput(cli, name);
 8013086:	6839      	ldr	r1, [r7, #0]
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f000 f9e9 	bl	8013460 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 801308e:	4908      	ldr	r1, [pc, #32]	@ (80130b0 <onUnknownCommand+0x3c>)
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f000 f9e5 	bl	8013460 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8013096:	4b07      	ldr	r3, [pc, #28]	@ (80130b4 <onUnknownCommand+0x40>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	4619      	mov	r1, r3
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f000 f9df 	bl	8013460 <writeToOutput>
}
 80130a2:	bf00      	nop
 80130a4:	3708      	adds	r7, #8
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	bf00      	nop
 80130ac:	0802454c 	.word	0x0802454c
 80130b0:	08024560 	.word	0x08024560
 80130b4:	20000024 	.word	0x20000024

080130b8 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b08e      	sub	sp, #56	@ 0x38
 80130bc:	af00      	add	r7, sp, #0
 80130be:	60f8      	str	r0, [r7, #12]
 80130c0:	60b9      	str	r1, [r7, #8]
 80130c2:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 80130c4:	2300      	movs	r3, #0
 80130c6:	613b      	str	r3, [r7, #16]
 80130c8:	2300      	movs	r3, #0
 80130ca:	82bb      	strh	r3, [r7, #20]
 80130cc:	2300      	movs	r3, #0
 80130ce:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f7ed f8e5 	bl	80002a0 <strlen>
 80130d6:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 80130de:	6a3b      	ldr	r3, [r7, #32]
 80130e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d002      	beq.n	80130ec <getAutocompletedCommand+0x34>
 80130e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d108      	bne.n	80130fe <getAutocompletedCommand+0x46>
        return cmd;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	461a      	mov	r2, r3
 80130f0:	f107 0310 	add.w	r3, r7, #16
 80130f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80130f8:	e882 0003 	stmia.w	r2, {r0, r1}
 80130fc:	e095      	b.n	801322a <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 80130fe:	2300      	movs	r3, #0
 8013100:	637b      	str	r3, [r7, #52]	@ 0x34
 8013102:	e083      	b.n	801320c <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8013104:	6a3b      	ldr	r3, [r7, #32]
 8013106:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013108:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801310a:	4613      	mov	r3, r2
 801310c:	009b      	lsls	r3, r3, #2
 801310e:	4413      	add	r3, r2
 8013110:	009b      	lsls	r3, r3, #2
 8013112:	440b      	add	r3, r1
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8013118:	69f8      	ldr	r0, [r7, #28]
 801311a:	f7ed f8c1 	bl	80002a0 <strlen>
 801311e:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8013120:	6a3b      	ldr	r3, [r7, #32]
 8013122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013126:	4413      	add	r3, r2
 8013128:	781a      	ldrb	r2, [r3, #0]
 801312a:	6a3b      	ldr	r3, [r7, #32]
 801312c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013130:	440b      	add	r3, r1
 8013132:	f022 0201 	bic.w	r2, r2, #1
 8013136:	b2d2      	uxtb	r2, r2
 8013138:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 801313a:	69ba      	ldr	r2, [r7, #24]
 801313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801313e:	429a      	cmp	r2, r3
 8013140:	d35e      	bcc.n	8013200 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8013142:	2301      	movs	r3, #1
 8013144:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8013148:	2300      	movs	r3, #0
 801314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801314c:	e010      	b.n	8013170 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013152:	4413      	add	r3, r2
 8013154:	781a      	ldrb	r2, [r3, #0]
 8013156:	69f9      	ldr	r1, [r7, #28]
 8013158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801315a:	440b      	add	r3, r1
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	429a      	cmp	r2, r3
 8013160:	d003      	beq.n	801316a <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8013162:	2300      	movs	r3, #0
 8013164:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8013168:	e006      	b.n	8013178 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 801316a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801316c:	3301      	adds	r3, #1
 801316e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013174:	429a      	cmp	r2, r3
 8013176:	d3ea      	bcc.n	801314e <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8013178:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801317c:	f083 0301 	eor.w	r3, r3, #1
 8013180:	b2db      	uxtb	r3, r3
 8013182:	2b00      	cmp	r3, #0
 8013184:	d13e      	bne.n	8013204 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8013186:	6a3b      	ldr	r3, [r7, #32]
 8013188:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801318a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801318c:	4413      	add	r3, r2
 801318e:	781a      	ldrb	r2, [r3, #0]
 8013190:	6a3b      	ldr	r3, [r7, #32]
 8013192:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8013194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013196:	440b      	add	r3, r1
 8013198:	f042 0201 	orr.w	r2, r2, #1
 801319c:	b2d2      	uxtb	r2, r2
 801319e:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 80131a0:	8afb      	ldrh	r3, [r7, #22]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d004      	beq.n	80131b0 <getAutocompletedCommand+0xf8>
 80131a6:	8abb      	ldrh	r3, [r7, #20]
 80131a8:	461a      	mov	r2, r3
 80131aa:	69bb      	ldr	r3, [r7, #24]
 80131ac:	4293      	cmp	r3, r2
 80131ae:	d202      	bcs.n	80131b6 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 80131b0:	69bb      	ldr	r3, [r7, #24]
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 80131b6:	8afb      	ldrh	r3, [r7, #22]
 80131b8:	3301      	adds	r3, #1
 80131ba:	b29b      	uxth	r3, r3
 80131bc:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 80131be:	8afb      	ldrh	r3, [r7, #22]
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	d102      	bne.n	80131ca <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	613b      	str	r3, [r7, #16]
            continue;
 80131c8:	e01d      	b.n	8013206 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 80131ca:	6a3b      	ldr	r3, [r7, #32]
 80131cc:	8c1b      	ldrh	r3, [r3, #32]
 80131ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80131d0:	e010      	b.n	80131f4 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 80131d2:	693a      	ldr	r2, [r7, #16]
 80131d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131d6:	4413      	add	r3, r2
 80131d8:	781a      	ldrb	r2, [r3, #0]
 80131da:	69f9      	ldr	r1, [r7, #28]
 80131dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131de:	440b      	add	r3, r1
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d003      	beq.n	80131ee <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 80131e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	82bb      	strh	r3, [r7, #20]
                break;
 80131ec:	e00b      	b.n	8013206 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 80131ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131f0:	3301      	adds	r3, #1
 80131f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80131f4:	8abb      	ldrh	r3, [r7, #20]
 80131f6:	461a      	mov	r2, r3
 80131f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131fa:	4293      	cmp	r3, r2
 80131fc:	d3e9      	bcc.n	80131d2 <getAutocompletedCommand+0x11a>
 80131fe:	e002      	b.n	8013206 <getAutocompletedCommand+0x14e>
            continue;
 8013200:	bf00      	nop
 8013202:	e000      	b.n	8013206 <getAutocompletedCommand+0x14e>
            continue;
 8013204:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013208:	3301      	adds	r3, #1
 801320a:	637b      	str	r3, [r7, #52]	@ 0x34
 801320c:	6a3b      	ldr	r3, [r7, #32]
 801320e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013210:	461a      	mov	r2, r3
 8013212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013214:	4293      	cmp	r3, r2
 8013216:	f6ff af75 	blt.w	8013104 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	461a      	mov	r2, r3
 801321e:	f107 0310 	add.w	r3, r7, #16
 8013222:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013226:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801322a:	68f8      	ldr	r0, [r7, #12]
 801322c:	3738      	adds	r7, #56	@ 0x38
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}

08013232 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8013232:	b580      	push	{r7, lr}
 8013234:	b088      	sub	sp, #32
 8013236:	af00      	add	r7, sp, #0
 8013238:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8013246:	f003 0320 	and.w	r3, r3, #32
 801324a:	2b00      	cmp	r3, #0
 801324c:	d048      	beq.n	80132e0 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	69da      	ldr	r2, [r3, #28]
 8013252:	f107 030c 	add.w	r3, r7, #12
 8013256:	6879      	ldr	r1, [r7, #4]
 8013258:	4618      	mov	r0, r3
 801325a:	f7ff ff2d 	bl	80130b8 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 801325e:	8a7b      	ldrh	r3, [r7, #18]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d102      	bne.n	801326a <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	8c1b      	ldrh	r3, [r3, #32]
 8013268:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	8c1b      	ldrh	r3, [r3, #32]
 801326e:	61fb      	str	r3, [r7, #28]
 8013270:	e00b      	b.n	801328a <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	68f9      	ldr	r1, [r7, #12]
 8013278:	69fa      	ldr	r2, [r7, #28]
 801327a:	440a      	add	r2, r1
 801327c:	7812      	ldrb	r2, [r2, #0]
 801327e:	4611      	mov	r1, r2
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	3301      	adds	r3, #1
 8013288:	61fb      	str	r3, [r7, #28]
 801328a:	8a3b      	ldrh	r3, [r7, #16]
 801328c:	461a      	mov	r2, r3
 801328e:	69fb      	ldr	r3, [r7, #28]
 8013290:	4293      	cmp	r3, r2
 8013292:	d3ee      	bcc.n	8013272 <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8013294:	8a3b      	ldrh	r3, [r7, #16]
 8013296:	61bb      	str	r3, [r7, #24]
 8013298:	e007      	b.n	80132aa <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	2120      	movs	r1, #32
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80132a4:	69bb      	ldr	r3, [r7, #24]
 80132a6:	3301      	adds	r3, #1
 80132a8:	61bb      	str	r3, [r7, #24]
 80132aa:	697b      	ldr	r3, [r7, #20]
 80132ac:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80132ae:	461a      	mov	r2, r3
 80132b0:	69bb      	ldr	r3, [r7, #24]
 80132b2:	4293      	cmp	r3, r2
 80132b4:	d3f1      	bcc.n	801329a <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 80132b6:	8a3a      	ldrh	r2, [r7, #16]
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	861a      	strh	r2, [r3, #48]	@ 0x30
    cli->writeChar(cli, '\r');
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	210d      	movs	r1, #13
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	4619      	mov	r1, r3
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f000 f8c7 	bl	8013460 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	69db      	ldr	r3, [r3, #28]
 80132d6:	4619      	mov	r1, r3
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f000 f8c1 	bl	8013460 <writeToOutput>
 80132de:	e000      	b.n	80132e2 <printLiveAutocompletion+0xb0>
        return;
 80132e0:	bf00      	nop
}
 80132e2:	3720      	adds	r7, #32
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b088      	sub	sp, #32
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	68db      	ldr	r3, [r3, #12]
 80132f4:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	69da      	ldr	r2, [r3, #28]
 80132fa:	f107 030c 	add.w	r3, r7, #12
 80132fe:	6879      	ldr	r1, [r7, #4]
 8013300:	4618      	mov	r0, r3
 8013302:	f7ff fed9 	bl	80130b8 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8013306:	8a7b      	ldrh	r3, [r7, #18]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d071      	beq.n	80133f0 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 801330c:	8a7b      	ldrh	r3, [r7, #18]
 801330e:	2b01      	cmp	r3, #1
 8013310:	d004      	beq.n	801331c <onAutocompleteRequest+0x34>
 8013312:	8a3a      	ldrh	r2, [r7, #16]
 8013314:	69bb      	ldr	r3, [r7, #24]
 8013316:	8c1b      	ldrh	r3, [r3, #32]
 8013318:	429a      	cmp	r2, r3
 801331a:	d92a      	bls.n	8013372 <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	69db      	ldr	r3, [r3, #28]
 8013320:	68f9      	ldr	r1, [r7, #12]
 8013322:	8a3a      	ldrh	r2, [r7, #16]
 8013324:	4618      	mov	r0, r3
 8013326:	f00b fdac 	bl	801ee82 <memcpy>
        if (cmd.candidateCount == 1) {
 801332a:	8a7b      	ldrh	r3, [r7, #18]
 801332c:	2b01      	cmp	r3, #1
 801332e:	d109      	bne.n	8013344 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8013330:	69bb      	ldr	r3, [r7, #24]
 8013332:	69db      	ldr	r3, [r3, #28]
 8013334:	8a3a      	ldrh	r2, [r7, #16]
 8013336:	4413      	add	r3, r2
 8013338:	2220      	movs	r2, #32
 801333a:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 801333c:	8a3b      	ldrh	r3, [r7, #16]
 801333e:	3301      	adds	r3, #1
 8013340:	b29b      	uxth	r3, r3
 8013342:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8013344:	69bb      	ldr	r3, [r7, #24]
 8013346:	69db      	ldr	r3, [r3, #28]
 8013348:	8a3a      	ldrh	r2, [r7, #16]
 801334a:	4413      	add	r3, r2
 801334c:	2200      	movs	r2, #0
 801334e:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	69db      	ldr	r3, [r3, #28]
 8013354:	69ba      	ldr	r2, [r7, #24]
 8013356:	8c12      	ldrh	r2, [r2, #32]
 8013358:	4413      	add	r3, r2
 801335a:	4619      	mov	r1, r3
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f000 f87f 	bl	8013460 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8013362:	8a3a      	ldrh	r2, [r7, #16]
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8013368:	69bb      	ldr	r3, [r7, #24]
 801336a:	8c1a      	ldrh	r2, [r3, #32]
 801336c:	69bb      	ldr	r3, [r7, #24]
 801336e:	861a      	strh	r2, [r3, #48]	@ 0x30
        return;
 8013370:	e03f      	b.n	80133f2 <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8013372:	6878      	ldr	r0, [r7, #4]
 8013374:	f000 f842 	bl	80133fc <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013378:	2300      	movs	r3, #0
 801337a:	61fb      	str	r3, [r7, #28]
 801337c:	e021      	b.n	80133c2 <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 801337e:	69bb      	ldr	r3, [r7, #24]
 8013380:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	4413      	add	r3, r2
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	f003 0301 	and.w	r3, r3, #1
 801338c:	2b00      	cmp	r3, #0
 801338e:	d014      	beq.n	80133ba <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8013390:	69bb      	ldr	r3, [r7, #24]
 8013392:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013394:	69fa      	ldr	r2, [r7, #28]
 8013396:	4613      	mov	r3, r2
 8013398:	009b      	lsls	r3, r3, #2
 801339a:	4413      	add	r3, r2
 801339c:	009b      	lsls	r3, r3, #2
 801339e:	440b      	add	r3, r1
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 80133a4:	6979      	ldr	r1, [r7, #20]
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f000 f85a 	bl	8013460 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80133ac:	4b12      	ldr	r3, [pc, #72]	@ (80133f8 <onAutocompleteRequest+0x110>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	4619      	mov	r1, r3
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f000 f854 	bl	8013460 <writeToOutput>
 80133b8:	e000      	b.n	80133bc <onAutocompleteRequest+0xd4>
            continue;
 80133ba:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80133bc:	69fb      	ldr	r3, [r7, #28]
 80133be:	3301      	adds	r3, #1
 80133c0:	61fb      	str	r3, [r7, #28]
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80133c6:	461a      	mov	r2, r3
 80133c8:	69fb      	ldr	r3, [r7, #28]
 80133ca:	4293      	cmp	r3, r2
 80133cc:	dbd7      	blt.n	801337e <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 80133ce:	69bb      	ldr	r3, [r7, #24]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	4619      	mov	r1, r3
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f000 f843 	bl	8013460 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80133da:	69bb      	ldr	r3, [r7, #24]
 80133dc:	69db      	ldr	r3, [r3, #28]
 80133de:	4619      	mov	r1, r3
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f000 f83d 	bl	8013460 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 80133e6:	69bb      	ldr	r3, [r7, #24]
 80133e8:	8c1a      	ldrh	r2, [r3, #32]
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	861a      	strh	r2, [r3, #48]	@ 0x30
 80133ee:	e000      	b.n	80133f2 <onAutocompleteRequest+0x10a>
        return;
 80133f0:	bf00      	nop
}
 80133f2:	3720      	adds	r7, #32
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}
 80133f8:	20000024 	.word	0x20000024

080133fc <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 80133fc:	b590      	push	{r4, r7, lr}
 80133fe:	b087      	sub	sp, #28
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801340e:	461c      	mov	r4, r3
 8013410:	693b      	ldr	r3, [r7, #16]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	4618      	mov	r0, r3
 8013416:	f7ec ff43 	bl	80002a0 <strlen>
 801341a:	4603      	mov	r3, r0
 801341c:	4423      	add	r3, r4
 801341e:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	210d      	movs	r1, #13
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 801342a:	2300      	movs	r3, #0
 801342c:	617b      	str	r3, [r7, #20]
 801342e:	e007      	b.n	8013440 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	2120      	movs	r1, #32
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	3301      	adds	r3, #1
 801343e:	617b      	str	r3, [r7, #20]
 8013440:	697a      	ldr	r2, [r7, #20]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	429a      	cmp	r2, r3
 8013446:	d3f3      	bcc.n	8013430 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	210d      	movs	r1, #13
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	4798      	blx	r3
    impl->inputLineLength = 0;
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	2200      	movs	r2, #0
 8013456:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 8013458:	bf00      	nop
 801345a:	371c      	adds	r7, #28
 801345c:	46bd      	mov	sp, r7
 801345e:	bd90      	pop	{r4, r7, pc}

08013460 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
 8013468:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 801346a:	6838      	ldr	r0, [r7, #0]
 801346c:	f7ec ff18 	bl	80002a0 <strlen>
 8013470:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8013472:	2300      	movs	r3, #0
 8013474:	60fb      	str	r3, [r7, #12]
 8013476:	e00b      	b.n	8013490 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	6839      	ldr	r1, [r7, #0]
 801347e:	68fa      	ldr	r2, [r7, #12]
 8013480:	440a      	add	r2, r1
 8013482:	7812      	ldrb	r2, [r2, #0]
 8013484:	4611      	mov	r1, r2
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	3301      	adds	r3, #1
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	68fa      	ldr	r2, [r7, #12]
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	429a      	cmp	r2, r3
 8013496:	d3ef      	bcc.n	8013478 <writeToOutput+0x18>
    }
}
 8013498:	bf00      	nop
 801349a:	bf00      	nop
 801349c:	3710      	adds	r7, #16
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}

080134a2 <isControlChar>:

static bool isControlChar(char c) {
 80134a2:	b480      	push	{r7}
 80134a4:	b083      	sub	sp, #12
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	4603      	mov	r3, r0
 80134aa:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 80134ac:	79fb      	ldrb	r3, [r7, #7]
 80134ae:	2b0d      	cmp	r3, #13
 80134b0:	d00b      	beq.n	80134ca <isControlChar+0x28>
 80134b2:	79fb      	ldrb	r3, [r7, #7]
 80134b4:	2b0a      	cmp	r3, #10
 80134b6:	d008      	beq.n	80134ca <isControlChar+0x28>
 80134b8:	79fb      	ldrb	r3, [r7, #7]
 80134ba:	2b08      	cmp	r3, #8
 80134bc:	d005      	beq.n	80134ca <isControlChar+0x28>
 80134be:	79fb      	ldrb	r3, [r7, #7]
 80134c0:	2b09      	cmp	r3, #9
 80134c2:	d002      	beq.n	80134ca <isControlChar+0x28>
 80134c4:	79fb      	ldrb	r3, [r7, #7]
 80134c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80134c8:	d101      	bne.n	80134ce <isControlChar+0x2c>
 80134ca:	2301      	movs	r3, #1
 80134cc:	e000      	b.n	80134d0 <isControlChar+0x2e>
 80134ce:	2300      	movs	r3, #0
 80134d0:	f003 0301 	and.w	r3, r3, #1
 80134d4:	b2db      	uxtb	r3, r3
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	370c      	adds	r7, #12
 80134da:	46bd      	mov	sp, r7
 80134dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e0:	4770      	bx	lr

080134e2 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 80134e2:	b480      	push	{r7}
 80134e4:	b083      	sub	sp, #12
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	4603      	mov	r3, r0
 80134ea:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 80134ec:	79fb      	ldrb	r3, [r7, #7]
 80134ee:	2b1f      	cmp	r3, #31
 80134f0:	d904      	bls.n	80134fc <isDisplayableChar+0x1a>
 80134f2:	79fb      	ldrb	r3, [r7, #7]
 80134f4:	2b7e      	cmp	r3, #126	@ 0x7e
 80134f6:	d801      	bhi.n	80134fc <isDisplayableChar+0x1a>
 80134f8:	2301      	movs	r3, #1
 80134fa:	e000      	b.n	80134fe <isDisplayableChar+0x1c>
 80134fc:	2300      	movs	r3, #0
 80134fe:	f003 0301 	and.w	r3, r3, #1
 8013502:	b2db      	uxtb	r3, r3
}
 8013504:	4618      	mov	r0, r3
 8013506:	370c      	adds	r7, #12
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr

08013510 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8013510:	b480      	push	{r7}
 8013512:	b083      	sub	sp, #12
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	88da      	ldrh	r2, [r3, #6]
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	889b      	ldrh	r3, [r3, #4]
 8013520:	429a      	cmp	r2, r3
 8013522:	d306      	bcc.n	8013532 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	88da      	ldrh	r2, [r3, #6]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	889b      	ldrh	r3, [r3, #4]
 801352c:	1ad3      	subs	r3, r2, r3
 801352e:	b29b      	uxth	r3, r3
 8013530:	e009      	b.n	8013546 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	891a      	ldrh	r2, [r3, #8]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	889b      	ldrh	r3, [r3, #4]
 801353a:	1ad3      	subs	r3, r2, r3
 801353c:	b29a      	uxth	r2, r3
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	88db      	ldrh	r3, [r3, #6]
 8013542:	4413      	add	r3, r2
 8013544:	b29b      	uxth	r3, r3
}
 8013546:	4618      	mov	r0, r3
 8013548:	370c      	adds	r7, #12
 801354a:	46bd      	mov	sp, r7
 801354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013550:	4770      	bx	lr

08013552 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 8013552:	b480      	push	{r7}
 8013554:	b085      	sub	sp, #20
 8013556:	af00      	add	r7, sp, #0
 8013558:	6078      	str	r0, [r7, #4]
    char a = '\0';
 801355a:	2300      	movs	r3, #0
 801355c:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	889a      	ldrh	r2, [r3, #4]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	88db      	ldrh	r3, [r3, #6]
 8013566:	429a      	cmp	r2, r3
 8013568:	d014      	beq.n	8013594 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	8892      	ldrh	r2, [r2, #4]
 8013572:	4413      	add	r3, r2
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	889b      	ldrh	r3, [r3, #4]
 801357c:	3301      	adds	r3, #1
 801357e:	b29b      	uxth	r3, r3
 8013580:	687a      	ldr	r2, [r7, #4]
 8013582:	8912      	ldrh	r2, [r2, #8]
 8013584:	fbb3 f1f2 	udiv	r1, r3, r2
 8013588:	fb01 f202 	mul.w	r2, r1, r2
 801358c:	1a9b      	subs	r3, r3, r2
 801358e:	b29a      	uxth	r2, r3
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8013594:	7bfb      	ldrb	r3, [r7, #15]
}
 8013596:	4618      	mov	r0, r3
 8013598:	3714      	adds	r7, #20
 801359a:	46bd      	mov	sp, r7
 801359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a0:	4770      	bx	lr

080135a2 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 80135a2:	b480      	push	{r7}
 80135a4:	b085      	sub	sp, #20
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
 80135aa:	460b      	mov	r3, r1
 80135ac:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	88db      	ldrh	r3, [r3, #6]
 80135b2:	3301      	adds	r3, #1
 80135b4:	b29b      	uxth	r3, r3
 80135b6:	687a      	ldr	r2, [r7, #4]
 80135b8:	8912      	ldrh	r2, [r2, #8]
 80135ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80135be:	fb01 f202 	mul.w	r2, r1, r2
 80135c2:	1a9b      	subs	r3, r3, r2
 80135c4:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	889b      	ldrh	r3, [r3, #4]
 80135ca:	89fa      	ldrh	r2, [r7, #14]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d00b      	beq.n	80135e8 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	88d2      	ldrh	r2, [r2, #6]
 80135d8:	4413      	add	r3, r2
 80135da:	78fa      	ldrb	r2, [r7, #3]
 80135dc:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	89fa      	ldrh	r2, [r7, #14]
 80135e2:	80da      	strh	r2, [r3, #6]
        return true;
 80135e4:	2301      	movs	r3, #1
 80135e6:	e000      	b.n	80135ea <fifoBufPush+0x48>
    }
    return false;
 80135e8:	2300      	movs	r3, #0
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3714      	adds	r7, #20
 80135ee:	46bd      	mov	sp, r7
 80135f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f4:	4770      	bx	lr

080135f6 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 80135f6:	b580      	push	{r7, lr}
 80135f8:	b088      	sub	sp, #32
 80135fa:	af00      	add	r7, sp, #0
 80135fc:	6078      	str	r0, [r7, #4]
 80135fe:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8013600:	6838      	ldr	r0, [r7, #0]
 8013602:	f7ec fe4d 	bl	80002a0 <strlen>
 8013606:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	889b      	ldrh	r3, [r3, #4]
 801360c:	461a      	mov	r2, r3
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	3301      	adds	r3, #1
 8013612:	429a      	cmp	r2, r3
 8013614:	d201      	bcs.n	801361a <historyPut+0x24>
        return false;
 8013616:	2300      	movs	r3, #0
 8013618:	e04d      	b.n	80136b6 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 801361a:	6839      	ldr	r1, [r7, #0]
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f000 f86a 	bl	80136f6 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8013622:	e024      	b.n	801366e <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	891b      	ldrh	r3, [r3, #8]
 8013628:	4619      	mov	r1, r3
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f000 f847 	bl	80136be <historyGet>
 8013630:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8013632:	6978      	ldr	r0, [r7, #20]
 8013634:	f7ec fe34 	bl	80002a0 <strlen>
 8013638:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	697a      	ldr	r2, [r7, #20]
 8013640:	1ad3      	subs	r3, r2, r3
 8013642:	461a      	mov	r2, r3
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	4413      	add	r3, r2
 8013648:	3301      	adds	r3, #1
 801364a:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	889b      	ldrh	r3, [r3, #4]
 8013650:	461a      	mov	r2, r3
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	1ad3      	subs	r3, r2, r3
 8013656:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	3301      	adds	r3, #1
 801365c:	68fa      	ldr	r2, [r7, #12]
 801365e:	429a      	cmp	r2, r3
 8013660:	d20a      	bcs.n	8013678 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	891b      	ldrh	r3, [r3, #8]
 8013666:	3b01      	subs	r3, #1
 8013668:	b29a      	uxth	r2, r3
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	891b      	ldrh	r3, [r3, #8]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d1d6      	bne.n	8013624 <historyPut+0x2e>
 8013676:	e000      	b.n	801367a <historyPut+0x84>
            break;
 8013678:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	891b      	ldrh	r3, [r3, #8]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d00a      	beq.n	8013698 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681a      	ldr	r2, [r3, #0]
 8013686:	69bb      	ldr	r3, [r7, #24]
 8013688:	3301      	adds	r3, #1
 801368a:	18d0      	adds	r0, r2, r3
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	69fa      	ldr	r2, [r7, #28]
 8013692:	4619      	mov	r1, r3
 8013694:	f00b fac4 	bl	801ec20 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6818      	ldr	r0, [r3, #0]
 801369c:	69bb      	ldr	r3, [r7, #24]
 801369e:	3301      	adds	r3, #1
 80136a0:	461a      	mov	r2, r3
 80136a2:	6839      	ldr	r1, [r7, #0]
 80136a4:	f00b fbed 	bl	801ee82 <memcpy>
    ++history->itemsCount;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	891b      	ldrh	r3, [r3, #8]
 80136ac:	3301      	adds	r3, #1
 80136ae:	b29a      	uxth	r2, r3
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	811a      	strh	r2, [r3, #8]

    return true;
 80136b4:	2301      	movs	r3, #1
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	3720      	adds	r7, #32
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 80136be:	b580      	push	{r7, lr}
 80136c0:	b082      	sub	sp, #8
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
 80136c6:	460b      	mov	r3, r1
 80136c8:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 80136ca:	887b      	ldrh	r3, [r7, #2]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d004      	beq.n	80136da <historyGet+0x1c>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	891b      	ldrh	r3, [r3, #8]
 80136d4:	887a      	ldrh	r2, [r7, #2]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d901      	bls.n	80136de <historyGet+0x20>
        return NULL;
 80136da:	2300      	movs	r3, #0
 80136dc:	e007      	b.n	80136ee <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	887a      	ldrh	r2, [r7, #2]
 80136e4:	4611      	mov	r1, r2
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7ff f882 	bl	80127f0 <embeddedCliGetToken>
 80136ec:	4603      	mov	r3, r0
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3708      	adds	r7, #8
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}

080136f6 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 80136f6:	b580      	push	{r7, lr}
 80136f8:	b086      	sub	sp, #24
 80136fa:	af00      	add	r7, sp, #0
 80136fc:	6078      	str	r0, [r7, #4]
 80136fe:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d04c      	beq.n	80137a0 <historyRemove+0xaa>
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	891b      	ldrh	r3, [r3, #8]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d048      	beq.n	80137a0 <historyRemove+0xaa>
        return;
    char *item = NULL;
 801370e:	2300      	movs	r3, #0
 8013710:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8013712:	2301      	movs	r3, #1
 8013714:	827b      	strh	r3, [r7, #18]
 8013716:	e013      	b.n	8013740 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	8a7a      	ldrh	r2, [r7, #18]
 801371e:	4611      	mov	r1, r2
 8013720:	4618      	mov	r0, r3
 8013722:	f7ff f880 	bl	8012826 <embeddedCliGetTokenVariable>
 8013726:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8013728:	6839      	ldr	r1, [r7, #0]
 801372a:	6978      	ldr	r0, [r7, #20]
 801372c:	f7ec fd58 	bl	80001e0 <strcmp>
 8013730:	4603      	mov	r3, r0
 8013732:	2b00      	cmp	r3, #0
 8013734:	d00a      	beq.n	801374c <historyRemove+0x56>
            break;
        }
        item = NULL;
 8013736:	2300      	movs	r3, #0
 8013738:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 801373a:	8a7b      	ldrh	r3, [r7, #18]
 801373c:	3301      	adds	r3, #1
 801373e:	827b      	strh	r3, [r7, #18]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	891b      	ldrh	r3, [r3, #8]
 8013744:	8a7a      	ldrh	r2, [r7, #18]
 8013746:	429a      	cmp	r2, r3
 8013748:	d9e6      	bls.n	8013718 <historyRemove+0x22>
 801374a:	e000      	b.n	801374e <historyRemove+0x58>
            break;
 801374c:	bf00      	nop
    }
    if (item == NULL)
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d027      	beq.n	80137a4 <historyRemove+0xae>
        return;

    --history->itemsCount;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	891b      	ldrh	r3, [r3, #8]
 8013758:	3b01      	subs	r3, #1
 801375a:	b29a      	uxth	r2, r3
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8013760:	8a7a      	ldrh	r2, [r7, #18]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	891b      	ldrh	r3, [r3, #8]
 8013766:	3301      	adds	r3, #1
 8013768:	429a      	cmp	r2, r3
 801376a:	d01d      	beq.n	80137a8 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 801376c:	6978      	ldr	r0, [r7, #20]
 801376e:	f7ec fd97 	bl	80002a0 <strlen>
 8013772:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	889b      	ldrh	r3, [r3, #4]
 8013778:	4619      	mov	r1, r3
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	3301      	adds	r3, #1
 801377e:	697a      	ldr	r2, [r7, #20]
 8013780:	441a      	add	r2, r3
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	1ad3      	subs	r3, r2, r3
 8013788:	1acb      	subs	r3, r1, r3
 801378a:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	3301      	adds	r3, #1
 8013790:	697a      	ldr	r2, [r7, #20]
 8013792:	4413      	add	r3, r2
 8013794:	68ba      	ldr	r2, [r7, #8]
 8013796:	4619      	mov	r1, r3
 8013798:	6978      	ldr	r0, [r7, #20]
 801379a:	f00b fa41 	bl	801ec20 <memmove>
 801379e:	e004      	b.n	80137aa <historyRemove+0xb4>
        return;
 80137a0:	bf00      	nop
 80137a2:	e002      	b.n	80137aa <historyRemove+0xb4>
        return;
 80137a4:	bf00      	nop
 80137a6:	e000      	b.n	80137aa <historyRemove+0xb4>
        return;
 80137a8:	bf00      	nop
}
 80137aa:	3718      	adds	r7, #24
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 80137b0:	b480      	push	{r7}
 80137b2:	b085      	sub	sp, #20
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	460b      	mov	r3, r1
 80137ba:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d002      	beq.n	80137c8 <getTokenPosition+0x18>
 80137c2:	887b      	ldrh	r3, [r7, #2]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d102      	bne.n	80137ce <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 80137c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80137cc:	e028      	b.n	8013820 <getTokenPosition+0x70>
    uint16_t i = 0;
 80137ce:	2300      	movs	r3, #0
 80137d0:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 80137d2:	2301      	movs	r3, #1
 80137d4:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 80137d6:	89ba      	ldrh	r2, [r7, #12]
 80137d8:	887b      	ldrh	r3, [r7, #2]
 80137da:	429a      	cmp	r2, r3
 80137dc:	d013      	beq.n	8013806 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 80137de:	89fb      	ldrh	r3, [r7, #14]
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	4413      	add	r3, r2
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d109      	bne.n	80137fe <getTokenPosition+0x4e>
            ++tokenCount;
 80137ea:	89bb      	ldrh	r3, [r7, #12]
 80137ec:	3301      	adds	r3, #1
 80137ee:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 80137f0:	89fb      	ldrh	r3, [r7, #14]
 80137f2:	3301      	adds	r3, #1
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	4413      	add	r3, r2
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d005      	beq.n	801380a <getTokenPosition+0x5a>
                break;
        }

        ++i;
 80137fe:	89fb      	ldrh	r3, [r7, #14]
 8013800:	3301      	adds	r3, #1
 8013802:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8013804:	e7e7      	b.n	80137d6 <getTokenPosition+0x26>
            break;
 8013806:	bf00      	nop
 8013808:	e000      	b.n	801380c <getTokenPosition+0x5c>
                break;
 801380a:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 801380c:	89fb      	ldrh	r3, [r7, #14]
 801380e:	687a      	ldr	r2, [r7, #4]
 8013810:	4413      	add	r3, r2
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d001      	beq.n	801381c <getTokenPosition+0x6c>
        return i;
 8013818:	89fb      	ldrh	r3, [r7, #14]
 801381a:	e001      	b.n	8013820 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 801381c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8013820:	4618      	mov	r0, r3
 8013822:	3714      	adds	r7, #20
 8013824:	46bd      	mov	sp, r7
 8013826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382a:	4770      	bx	lr

0801382c <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013830:	4904      	ldr	r1, [pc, #16]	@ (8013844 <MX_FATFS_Init+0x18>)
 8013832:	4805      	ldr	r0, [pc, #20]	@ (8013848 <MX_FATFS_Init+0x1c>)
 8013834:	f008 facc 	bl	801bdd0 <FATFS_LinkDriver>
 8013838:	4603      	mov	r3, r0
 801383a:	461a      	mov	r2, r3
 801383c:	4b03      	ldr	r3, [pc, #12]	@ (801384c <MX_FATFS_Init+0x20>)
 801383e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013840:	bf00      	nop
 8013842:	bd80      	pop	{r7, pc}
 8013844:	20001b58 	.word	0x20001b58
 8013848:	08024eb4 	.word	0x08024eb4
 801384c:	20001b54 	.word	0x20001b54

08013850 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013850:	b480      	push	{r7}
 8013852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013854:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013856:	4618      	mov	r0, r3
 8013858:	46bd      	mov	sp, r7
 801385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385e:	4770      	bx	lr

08013860 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b082      	sub	sp, #8
 8013864:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013866:	2300      	movs	r3, #0
 8013868:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801386a:	f000 f86b 	bl	8013944 <BSP_SD_IsDetected>
 801386e:	4603      	mov	r3, r0
 8013870:	2b01      	cmp	r3, #1
 8013872:	d001      	beq.n	8013878 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8013874:	2301      	movs	r3, #1
 8013876:	e005      	b.n	8013884 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8013878:	4804      	ldr	r0, [pc, #16]	@ (801388c <BSP_SD_Init+0x2c>)
 801387a:	f7f6 fc2f 	bl	800a0dc <HAL_SD_Init>
 801387e:	4603      	mov	r3, r0
 8013880:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8013882:	79fb      	ldrb	r3, [r7, #7]
}
 8013884:	4618      	mov	r0, r3
 8013886:	3708      	adds	r7, #8
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	200018b8 	.word	0x200018b8

08013890 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b088      	sub	sp, #32
 8013894:	af02      	add	r7, sp, #8
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	607a      	str	r2, [r7, #4]
 801389c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801389e:	2300      	movs	r3, #0
 80138a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	9300      	str	r3, [sp, #0]
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	68ba      	ldr	r2, [r7, #8]
 80138aa:	68f9      	ldr	r1, [r7, #12]
 80138ac:	4806      	ldr	r0, [pc, #24]	@ (80138c8 <BSP_SD_ReadBlocks+0x38>)
 80138ae:	f7f6 fcc5 	bl	800a23c <HAL_SD_ReadBlocks>
 80138b2:	4603      	mov	r3, r0
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d001      	beq.n	80138bc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80138b8:	2301      	movs	r3, #1
 80138ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80138bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3718      	adds	r7, #24
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}
 80138c6:	bf00      	nop
 80138c8:	200018b8 	.word	0x200018b8

080138cc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b088      	sub	sp, #32
 80138d0:	af02      	add	r7, sp, #8
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	607a      	str	r2, [r7, #4]
 80138d8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80138da:	2300      	movs	r3, #0
 80138dc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	9300      	str	r3, [sp, #0]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	68ba      	ldr	r2, [r7, #8]
 80138e6:	68f9      	ldr	r1, [r7, #12]
 80138e8:	4806      	ldr	r0, [pc, #24]	@ (8013904 <BSP_SD_WriteBlocks+0x38>)
 80138ea:	f7f6 fe8d 	bl	800a608 <HAL_SD_WriteBlocks>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d001      	beq.n	80138f8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80138f4:	2301      	movs	r3, #1
 80138f6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80138f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3718      	adds	r7, #24
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	200018b8 	.word	0x200018b8

08013908 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801390c:	4805      	ldr	r0, [pc, #20]	@ (8013924 <BSP_SD_GetCardState+0x1c>)
 801390e:	f7f7 f9d9 	bl	800acc4 <HAL_SD_GetCardState>
 8013912:	4603      	mov	r3, r0
 8013914:	2b04      	cmp	r3, #4
 8013916:	bf14      	ite	ne
 8013918:	2301      	movne	r3, #1
 801391a:	2300      	moveq	r3, #0
 801391c:	b2db      	uxtb	r3, r3
}
 801391e:	4618      	mov	r0, r3
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	200018b8 	.word	0x200018b8

08013928 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8013930:	6879      	ldr	r1, [r7, #4]
 8013932:	4803      	ldr	r0, [pc, #12]	@ (8013940 <BSP_SD_GetCardInfo+0x18>)
 8013934:	f7f7 f99a 	bl	800ac6c <HAL_SD_GetCardInfo>
}
 8013938:	bf00      	nop
 801393a:	3708      	adds	r7, #8
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}
 8013940:	200018b8 	.word	0x200018b8

08013944 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013944:	b480      	push	{r7}
 8013946:	b083      	sub	sp, #12
 8013948:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801394a:	2301      	movs	r3, #1
 801394c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 801394e:	79fb      	ldrb	r3, [r7, #7]
 8013950:	b2db      	uxtb	r3, r3
}
 8013952:	4618      	mov	r0, r3
 8013954:	370c      	adds	r7, #12
 8013956:	46bd      	mov	sp, r7
 8013958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395c:	4770      	bx	lr
	...

08013960 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
 8013966:	4603      	mov	r3, r0
 8013968:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801396a:	4b0b      	ldr	r3, [pc, #44]	@ (8013998 <SD_CheckStatus+0x38>)
 801396c:	2201      	movs	r2, #1
 801396e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013970:	f7ff ffca 	bl	8013908 <BSP_SD_GetCardState>
 8013974:	4603      	mov	r3, r0
 8013976:	2b00      	cmp	r3, #0
 8013978:	d107      	bne.n	801398a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801397a:	4b07      	ldr	r3, [pc, #28]	@ (8013998 <SD_CheckStatus+0x38>)
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	b2db      	uxtb	r3, r3
 8013980:	f023 0301 	bic.w	r3, r3, #1
 8013984:	b2da      	uxtb	r2, r3
 8013986:	4b04      	ldr	r3, [pc, #16]	@ (8013998 <SD_CheckStatus+0x38>)
 8013988:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801398a:	4b03      	ldr	r3, [pc, #12]	@ (8013998 <SD_CheckStatus+0x38>)
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	b2db      	uxtb	r3, r3
}
 8013990:	4618      	mov	r0, r3
 8013992:	3708      	adds	r7, #8
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}
 8013998:	20000028 	.word	0x20000028

0801399c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	4603      	mov	r3, r0
 80139a4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80139a6:	4b0b      	ldr	r3, [pc, #44]	@ (80139d4 <SD_initialize+0x38>)
 80139a8:	2201      	movs	r2, #1
 80139aa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80139ac:	f7ff ff58 	bl	8013860 <BSP_SD_Init>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d107      	bne.n	80139c6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80139b6:	79fb      	ldrb	r3, [r7, #7]
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7ff ffd1 	bl	8013960 <SD_CheckStatus>
 80139be:	4603      	mov	r3, r0
 80139c0:	461a      	mov	r2, r3
 80139c2:	4b04      	ldr	r3, [pc, #16]	@ (80139d4 <SD_initialize+0x38>)
 80139c4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80139c6:	4b03      	ldr	r3, [pc, #12]	@ (80139d4 <SD_initialize+0x38>)
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	b2db      	uxtb	r3, r3
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3708      	adds	r7, #8
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}
 80139d4:	20000028 	.word	0x20000028

080139d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b082      	sub	sp, #8
 80139dc:	af00      	add	r7, sp, #0
 80139de:	4603      	mov	r3, r0
 80139e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80139e2:	79fb      	ldrb	r3, [r7, #7]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7ff ffbb 	bl	8013960 <SD_CheckStatus>
 80139ea:	4603      	mov	r3, r0
}
 80139ec:	4618      	mov	r0, r3
 80139ee:	3708      	adds	r7, #8
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}

080139f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b086      	sub	sp, #24
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	60b9      	str	r1, [r7, #8]
 80139fc:	607a      	str	r2, [r7, #4]
 80139fe:	603b      	str	r3, [r7, #0]
 8013a00:	4603      	mov	r3, r0
 8013a02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013a04:	2301      	movs	r3, #1
 8013a06:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8013a08:	f04f 33ff 	mov.w	r3, #4294967295
 8013a0c:	683a      	ldr	r2, [r7, #0]
 8013a0e:	6879      	ldr	r1, [r7, #4]
 8013a10:	68b8      	ldr	r0, [r7, #8]
 8013a12:	f7ff ff3d 	bl	8013890 <BSP_SD_ReadBlocks>
 8013a16:	4603      	mov	r3, r0
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d107      	bne.n	8013a2c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8013a1c:	bf00      	nop
 8013a1e:	f7ff ff73 	bl	8013908 <BSP_SD_GetCardState>
 8013a22:	4603      	mov	r3, r0
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d1fa      	bne.n	8013a1e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8013a28:	2300      	movs	r3, #0
 8013a2a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a2e:	4618      	mov	r0, r3
 8013a30:	3718      	adds	r7, #24
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}

08013a36 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013a36:	b580      	push	{r7, lr}
 8013a38:	b086      	sub	sp, #24
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	60b9      	str	r1, [r7, #8]
 8013a3e:	607a      	str	r2, [r7, #4]
 8013a40:	603b      	str	r3, [r7, #0]
 8013a42:	4603      	mov	r3, r0
 8013a44:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013a46:	2301      	movs	r3, #1
 8013a48:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8013a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a4e:	683a      	ldr	r2, [r7, #0]
 8013a50:	6879      	ldr	r1, [r7, #4]
 8013a52:	68b8      	ldr	r0, [r7, #8]
 8013a54:	f7ff ff3a 	bl	80138cc <BSP_SD_WriteBlocks>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d107      	bne.n	8013a6e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8013a5e:	bf00      	nop
 8013a60:	f7ff ff52 	bl	8013908 <BSP_SD_GetCardState>
 8013a64:	4603      	mov	r3, r0
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d1fa      	bne.n	8013a60 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a70:	4618      	mov	r0, r3
 8013a72:	3718      	adds	r7, #24
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}

08013a78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b08c      	sub	sp, #48	@ 0x30
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	4603      	mov	r3, r0
 8013a80:	603a      	str	r2, [r7, #0]
 8013a82:	71fb      	strb	r3, [r7, #7]
 8013a84:	460b      	mov	r3, r1
 8013a86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013a88:	2301      	movs	r3, #1
 8013a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013a8e:	4b25      	ldr	r3, [pc, #148]	@ (8013b24 <SD_ioctl+0xac>)
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	b2db      	uxtb	r3, r3
 8013a94:	f003 0301 	and.w	r3, r3, #1
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d001      	beq.n	8013aa0 <SD_ioctl+0x28>
 8013a9c:	2303      	movs	r3, #3
 8013a9e:	e03c      	b.n	8013b1a <SD_ioctl+0xa2>

  switch (cmd)
 8013aa0:	79bb      	ldrb	r3, [r7, #6]
 8013aa2:	2b03      	cmp	r3, #3
 8013aa4:	d834      	bhi.n	8013b10 <SD_ioctl+0x98>
 8013aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8013aac <SD_ioctl+0x34>)
 8013aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013aac:	08013abd 	.word	0x08013abd
 8013ab0:	08013ac5 	.word	0x08013ac5
 8013ab4:	08013add 	.word	0x08013add
 8013ab8:	08013af7 	.word	0x08013af7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013abc:	2300      	movs	r3, #0
 8013abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013ac2:	e028      	b.n	8013b16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013ac4:	f107 030c 	add.w	r3, r7, #12
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f7ff ff2d 	bl	8013928 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013ada:	e01c      	b.n	8013b16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013adc:	f107 030c 	add.w	r3, r7, #12
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7ff ff21 	bl	8013928 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ae8:	b29a      	uxth	r2, r3
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013aee:	2300      	movs	r3, #0
 8013af0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013af4:	e00f      	b.n	8013b16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013af6:	f107 030c 	add.w	r3, r7, #12
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7ff ff14 	bl	8013928 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b02:	0a5a      	lsrs	r2, r3, #9
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013b08:	2300      	movs	r3, #0
 8013b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b0e:	e002      	b.n	8013b16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013b10:	2304      	movs	r3, #4
 8013b12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8013b16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3730      	adds	r7, #48	@ 0x30
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}
 8013b22:	bf00      	nop
 8013b24:	20000028 	.word	0x20000028

08013b28 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;
char scheduled_packet[30] = "NULL";
void RtcInt()
{
 8013b28:	b480      	push	{r7}
 8013b2a:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8013b2c:	4b03      	ldr	r3, [pc, #12]	@ (8013b3c <RtcInt+0x14>)
 8013b2e:	2201      	movs	r2, #1
 8013b30:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8013b32:	bf00      	nop
 8013b34:	46bd      	mov	sp, r7
 8013b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3a:	4770      	bx	lr
 8013b3c:	20000029 	.word	0x20000029

08013b40 <Rtc_Alarm_watchdog_disable>:

void Rtc_Alarm_watchdog_disable()
{
 8013b40:	b480      	push	{r7}
 8013b42:	af00      	add	r7, sp, #0
  __HAL_RTC_ALARM_DISABLE_IT(&hrtc, RTC_IT_ALRB);
 8013b44:	4b06      	ldr	r3, [pc, #24]	@ (8013b60 <Rtc_Alarm_watchdog_disable+0x20>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	689a      	ldr	r2, [r3, #8]
 8013b4a:	4b05      	ldr	r3, [pc, #20]	@ (8013b60 <Rtc_Alarm_watchdog_disable+0x20>)
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013b52:	609a      	str	r2, [r3, #8]
}
 8013b54:	bf00      	nop
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr
 8013b5e:	bf00      	nop
 8013b60:	20001898 	.word	0x20001898

08013b64 <Rtc_Alarm_watchdog>:

void Rtc_Alarm_watchdog()
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b092      	sub	sp, #72	@ 0x48
 8013b68:	af00      	add	r7, sp, #0
	uint16_t seconds;
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013b6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013b6e:	2200      	movs	r2, #0
 8013b70:	4619      	mov	r1, r3
 8013b72:	4828      	ldr	r0, [pc, #160]	@ (8013c14 <Rtc_Alarm_watchdog+0xb0>)
 8013b74:	f7f5 fefd 	bl	8009972 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013b78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	4619      	mov	r1, r3
 8013b80:	4824      	ldr	r0, [pc, #144]	@ (8013c14 <Rtc_Alarm_watchdog+0xb0>)
 8013b82:	f7f5 ffd8 	bl	8009b36 <HAL_RTC_GetDate>

    seconds = gTime.Seconds + 25;
 8013b86:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8013b8a:	3319      	adds	r3, #25
 8013b8c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if(seconds > 59)
 8013b90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013b94:	2b3b      	cmp	r3, #59	@ 0x3b
 8013b96:	d902      	bls.n	8013b9e <Rtc_Alarm_watchdog+0x3a>
    {
    	seconds = 0;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    }

      RTC_AlarmTypeDef sAlarm = {0};
 8013b9e:	1d3b      	adds	r3, r7, #4
 8013ba0:	2228      	movs	r2, #40	@ 0x28
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f00b f855 	bl	801ec54 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013baa:	2300      	movs	r3, #0
 8013bac:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = 0;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = seconds;
 8013bb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013bb6:	b2db      	uxtb	r3, r3
 8013bb8:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013bc6:	4b14      	ldr	r3, [pc, #80]	@ (8013c18 <Rtc_Alarm_watchdog+0xb4>)
 8013bc8:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_B;
 8013bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013bde:	1d3b      	adds	r3, r7, #4
 8013be0:	2200      	movs	r2, #0
 8013be2:	4619      	mov	r1, r3
 8013be4:	480b      	ldr	r0, [pc, #44]	@ (8013c14 <Rtc_Alarm_watchdog+0xb0>)
 8013be6:	f7f5 fff5 	bl	8009bd4 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRB);
 8013bea:	4b0a      	ldr	r3, [pc, #40]	@ (8013c14 <Rtc_Alarm_watchdog+0xb0>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	689a      	ldr	r2, [r3, #8]
 8013bf0:	4b08      	ldr	r3, [pc, #32]	@ (8013c14 <Rtc_Alarm_watchdog+0xb0>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013bf8:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRB);
 8013bfa:	4b06      	ldr	r3, [pc, #24]	@ (8013c14 <Rtc_Alarm_watchdog+0xb0>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	68db      	ldr	r3, [r3, #12]
 8013c00:	b2da      	uxtb	r2, r3
 8013c02:	4b04      	ldr	r3, [pc, #16]	@ (8013c14 <Rtc_Alarm_watchdog+0xb0>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	f462 5202 	orn	r2, r2, #8320	@ 0x2080
 8013c0a:	60da      	str	r2, [r3, #12]

}
 8013c0c:	bf00      	nop
 8013c0e:	3748      	adds	r7, #72	@ 0x48
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}
 8013c14:	20001898 	.word	0x20001898
 8013c18:	80808000 	.word	0x80808000

08013c1c <Set_Date>:

void Set_Date(char *Datebuffer) {
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b088      	sub	sp, #32
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8013c24:	f107 030c 	add.w	r3, r7, #12
 8013c28:	4619      	mov	r1, r3
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f000 f8e4 	bl	8013df8 <Parse_Date>
 8013c30:	4603      	mov	r3, r0
 8013c32:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8013c34:	7ffb      	ldrb	r3, [r7, #31]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d10c      	bne.n	8013c54 <Set_Date+0x38>
		sDate.Date = date[0];
 8013c3a:	7b3b      	ldrb	r3, [r7, #12]
 8013c3c:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8013c3e:	7b7b      	ldrb	r3, [r7, #13]
 8013c40:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8013c42:	7bbb      	ldrb	r3, [r7, #14]
 8013c44:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013c46:	f107 0318 	add.w	r3, r7, #24
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	4619      	mov	r1, r3
 8013c4e:	4805      	ldr	r0, [pc, #20]	@ (8013c64 <Set_Date+0x48>)
 8013c50:	f7f5 feed 	bl	8009a2e <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8013c54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013c58:	f7f0 fa5a 	bl	8004110 <HAL_Delay>
}
 8013c5c:	bf00      	nop
 8013c5e:	3720      	adds	r7, #32
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}
 8013c64:	20001898 	.word	0x20001898

08013c68 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b094      	sub	sp, #80	@ 0x50
 8013c6c:	af02      	add	r7, sp, #8
uint16_t minute;



if(set_alarm_Time)
 8013c6e:	4b44      	ldr	r3, [pc, #272]	@ (8013d80 <Rtc_set_alarm+0x118>)
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d07f      	beq.n	8013d76 <Rtc_set_alarm+0x10e>
{
	uint8_t hour = 0;
 8013c76:	2300      	movs	r3, #0
 8013c78:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013c7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013c80:	2200      	movs	r2, #0
 8013c82:	4619      	mov	r1, r3
 8013c84:	483f      	ldr	r0, [pc, #252]	@ (8013d84 <Rtc_set_alarm+0x11c>)
 8013c86:	f7f5 fe74 	bl	8009972 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013c8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013c8e:	2200      	movs	r2, #0
 8013c90:	4619      	mov	r1, r3
 8013c92:	483c      	ldr	r0, [pc, #240]	@ (8013d84 <Rtc_set_alarm+0x11c>)
 8013c94:	f7f5 ff4f 	bl	8009b36 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8013c98:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8013d88 <Rtc_set_alarm+0x120>)
 8013ca0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013ca4:	b29b      	uxth	r3, r3
 8013ca6:	4413      	add	r3, r2
 8013ca8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    hour = gTime.Hours;
 8013cac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8013cb0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    if(minute > 59)
 8013cb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013cb8:	2b3b      	cmp	r3, #59	@ 0x3b
 8013cba:	d917      	bls.n	8013cec <Rtc_set_alarm+0x84>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8013cbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013cc0:	4a31      	ldr	r2, [pc, #196]	@ (8013d88 <Rtc_set_alarm+0x120>)
 8013cc2:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8013cc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8013cca:	fb01 f202 	mul.w	r2, r1, r2
 8013cce:	1a9b      	subs	r3, r3, r2
 8013cd0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
//    	if(minute == 0)
//    	{
//    		minute = 1;
//    	}

    	hour = hour + 1; //we go to next hour as our time is schedualed for next hour
 8013cd4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013cd8:	3301      	adds	r3, #1
 8013cda:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    	if(hour > 23)
 8013cde:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013ce2:	2b17      	cmp	r3, #23
 8013ce4:	d902      	bls.n	8013cec <Rtc_set_alarm+0x84>
    	{
          hour = 0;
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    	}


    }

    sprintf(scheduled_packet,"%02d:%02d:%02d",hour,minute,gTime.Seconds);
 8013cec:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8013cf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013cf4:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 8013cf8:	9100      	str	r1, [sp, #0]
 8013cfa:	4924      	ldr	r1, [pc, #144]	@ (8013d8c <Rtc_set_alarm+0x124>)
 8013cfc:	4824      	ldr	r0, [pc, #144]	@ (8013d90 <Rtc_set_alarm+0x128>)
 8013cfe:	f00a fe5f 	bl	801e9c0 <siprintf>

      RTC_AlarmTypeDef sAlarm = {0};
 8013d02:	1d3b      	adds	r3, r7, #4
 8013d04:	2228      	movs	r2, #40	@ 0x28
 8013d06:	2100      	movs	r1, #0
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f00a ffa3 	bl	801ec54 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8013d12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013d22:	2300      	movs	r3, #0
 8013d24:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013d26:	2300      	movs	r3, #0
 8013d28:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8013d94 <Rtc_set_alarm+0x12c>)
 8013d2c:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013d32:	2300      	movs	r3, #0
 8013d34:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013d36:	2301      	movs	r3, #1
 8013d38:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8013d3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013d40:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013d42:	1d3b      	adds	r3, r7, #4
 8013d44:	2200      	movs	r2, #0
 8013d46:	4619      	mov	r1, r3
 8013d48:	480e      	ldr	r0, [pc, #56]	@ (8013d84 <Rtc_set_alarm+0x11c>)
 8013d4a:	f7f5 ff43 	bl	8009bd4 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8013d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8013d84 <Rtc_set_alarm+0x11c>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	689a      	ldr	r2, [r3, #8]
 8013d54:	4b0b      	ldr	r3, [pc, #44]	@ (8013d84 <Rtc_set_alarm+0x11c>)
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013d5c:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 8013d5e:	4b09      	ldr	r3, [pc, #36]	@ (8013d84 <Rtc_set_alarm+0x11c>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	68db      	ldr	r3, [r3, #12]
 8013d64:	b2da      	uxtb	r2, r3
 8013d66:	4b07      	ldr	r3, [pc, #28]	@ (8013d84 <Rtc_set_alarm+0x11c>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8013d6e:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 8013d70:	4b03      	ldr	r3, [pc, #12]	@ (8013d80 <Rtc_set_alarm+0x118>)
 8013d72:	2200      	movs	r2, #0
 8013d74:	701a      	strb	r2, [r3, #0]


		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8013d76:	bf00      	nop
 8013d78:	3748      	adds	r7, #72	@ 0x48
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}
 8013d7e:	bf00      	nop
 8013d80:	20000029 	.word	0x20000029
 8013d84:	20001898 	.word	0x20001898
 8013d88:	200012cc 	.word	0x200012cc
 8013d8c:	08024594 	.word	0x08024594
 8013d90:	2000002c 	.word	0x2000002c
 8013d94:	80800080 	.word	0x80800080

08013d98 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b08c      	sub	sp, #48	@ 0x30
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8013da0:	f107 030c 	add.w	r3, r7, #12
 8013da4:	4619      	mov	r1, r3
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	f000 f890 	bl	8013ecc <Parse_Time>
 8013dac:	4603      	mov	r3, r0
 8013dae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8013db2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d113      	bne.n	8013de2 <Set_Time+0x4a>
		sTime.Hours = time[0];
 8013dba:	7b3b      	ldrb	r3, [r7, #12]
 8013dbc:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8013dbe:	7b7b      	ldrb	r3, [r7, #13]
 8013dc0:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8013dc2:	7bbb      	ldrb	r3, [r7, #14]
 8013dc4:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	627b      	str	r3, [r7, #36]	@ 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8013dce:	f107 0318 	add.w	r3, r7, #24
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	4807      	ldr	r0, [pc, #28]	@ (8013df4 <Set_Time+0x5c>)
 8013dd8:	f7f5 fd31 	bl	800983e <HAL_RTC_SetTime>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}

	HAL_Delay(500);
 8013de2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013de6:	f7f0 f993 	bl	8004110 <HAL_Delay>

}
 8013dea:	bf00      	nop
 8013dec:	3730      	adds	r7, #48	@ 0x30
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	20001898 	.word	0x20001898

08013df8 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b084      	sub	sp, #16
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013e02:	2300      	movs	r3, #0
 8013e04:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8013e06:	2300      	movs	r3, #0
 8013e08:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8013e0a:	492e      	ldr	r1, [pc, #184]	@ (8013ec4 <Parse_Date+0xcc>)
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f00a ff37 	bl	801ec80 <strtok>
 8013e12:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d14b      	bne.n	8013eb2 <Parse_Date+0xba>
		{
			return 1;
 8013e1a:	2301      	movs	r3, #1
 8013e1c:	e04d      	b.n	8013eba <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8013e1e:	68b8      	ldr	r0, [r7, #8]
 8013e20:	f009 fc96 	bl	801d750 <atoi>
 8013e24:	4603      	mov	r3, r0
 8013e26:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8013e28:	89fb      	ldrh	r3, [r7, #14]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d10a      	bne.n	8013e44 <Parse_Date+0x4c>
 8013e2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e32:	2b1f      	cmp	r3, #31
 8013e34:	dc03      	bgt.n	8013e3e <Parse_Date+0x46>
 8013e36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	dc02      	bgt.n	8013e44 <Parse_Date+0x4c>
			{
				val= 1;
 8013e3e:	2301      	movs	r3, #1
 8013e40:	81bb      	strh	r3, [r7, #12]
 8013e42:	e028      	b.n	8013e96 <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8013e44:	89fb      	ldrh	r3, [r7, #14]
 8013e46:	2b01      	cmp	r3, #1
 8013e48:	d10a      	bne.n	8013e60 <Parse_Date+0x68>
 8013e4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e4e:	2b0c      	cmp	r3, #12
 8013e50:	dc03      	bgt.n	8013e5a <Parse_Date+0x62>
 8013e52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	dc02      	bgt.n	8013e60 <Parse_Date+0x68>
			{
				val= 1;
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	81bb      	strh	r3, [r7, #12]
 8013e5e:	e01a      	b.n	8013e96 <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8013e60:	89fb      	ldrh	r3, [r7, #14]
 8013e62:	2b02      	cmp	r3, #2
 8013e64:	d112      	bne.n	8013e8c <Parse_Date+0x94>
 8013e66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013e6e:	dd0d      	ble.n	8013e8c <Parse_Date+0x94>
			{
				val=val%100;
 8013e70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e74:	4a14      	ldr	r2, [pc, #80]	@ (8013ec8 <Parse_Date+0xd0>)
 8013e76:	fb82 1203 	smull	r1, r2, r2, r3
 8013e7a:	1151      	asrs	r1, r2, #5
 8013e7c:	17da      	asrs	r2, r3, #31
 8013e7e:	1a8a      	subs	r2, r1, r2
 8013e80:	2164      	movs	r1, #100	@ 0x64
 8013e82:	fb01 f202 	mul.w	r2, r1, r2
 8013e86:	1a9b      	subs	r3, r3, r2
 8013e88:	81bb      	strh	r3, [r7, #12]
 8013e8a:	e004      	b.n	8013e96 <Parse_Date+0x9e>
			}
			else if(i > 2)
 8013e8c:	89fb      	ldrh	r3, [r7, #14]
 8013e8e:	2b02      	cmp	r3, #2
 8013e90:	d901      	bls.n	8013e96 <Parse_Date+0x9e>
			{
				return 1;
 8013e92:	2301      	movs	r3, #1
 8013e94:	e011      	b.n	8013eba <Parse_Date+0xc2>
			}


		   date[i] =val;
 8013e96:	89fb      	ldrh	r3, [r7, #14]
 8013e98:	683a      	ldr	r2, [r7, #0]
 8013e9a:	4413      	add	r3, r2
 8013e9c:	89ba      	ldrh	r2, [r7, #12]
 8013e9e:	b2d2      	uxtb	r2, r2
 8013ea0:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8013ea2:	4908      	ldr	r1, [pc, #32]	@ (8013ec4 <Parse_Date+0xcc>)
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	f00a feeb 	bl	801ec80 <strtok>
 8013eaa:	60b8      	str	r0, [r7, #8]
		i++;
 8013eac:	89fb      	ldrh	r3, [r7, #14]
 8013eae:	3301      	adds	r3, #1
 8013eb0:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d1b2      	bne.n	8013e1e <Parse_Date+0x26>
	}

	}

	return 0;
 8013eb8:	2300      	movs	r3, #0

}
 8013eba:	4618      	mov	r0, r3
 8013ebc:	3710      	adds	r7, #16
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
 8013ec2:	bf00      	nop
 8013ec4:	080245a4 	.word	0x080245a4
 8013ec8:	51eb851f 	.word	0x51eb851f

08013ecc <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b084      	sub	sp, #16
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8013eda:	2300      	movs	r3, #0
 8013edc:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8013ede:	492a      	ldr	r1, [pc, #168]	@ (8013f88 <Parse_Time+0xbc>)
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f00a fecd 	bl	801ec80 <strtok>
 8013ee6:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d143      	bne.n	8013f76 <Parse_Time+0xaa>
			{
				return 1;
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e045      	b.n	8013f7e <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8013ef2:	68b8      	ldr	r0, [r7, #8]
 8013ef4:	f009 fc2c 	bl	801d750 <atoi>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8013efc:	89fb      	ldrh	r3, [r7, #14]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d10a      	bne.n	8013f18 <Parse_Time+0x4c>
 8013f02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f06:	2b18      	cmp	r3, #24
 8013f08:	dc03      	bgt.n	8013f12 <Parse_Time+0x46>
 8013f0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	da02      	bge.n	8013f18 <Parse_Time+0x4c>
				{
					val= 24;
 8013f12:	2318      	movs	r3, #24
 8013f14:	81bb      	strh	r3, [r7, #12]
 8013f16:	e020      	b.n	8013f5a <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8013f18:	89fb      	ldrh	r3, [r7, #14]
 8013f1a:	2b01      	cmp	r3, #1
 8013f1c:	d10a      	bne.n	8013f34 <Parse_Time+0x68>
 8013f1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f22:	2b3b      	cmp	r3, #59	@ 0x3b
 8013f24:	dc03      	bgt.n	8013f2e <Parse_Time+0x62>
 8013f26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	da02      	bge.n	8013f34 <Parse_Time+0x68>
				{
					val= 59;
 8013f2e:	233b      	movs	r3, #59	@ 0x3b
 8013f30:	81bb      	strh	r3, [r7, #12]
 8013f32:	e012      	b.n	8013f5a <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8013f34:	89fb      	ldrh	r3, [r7, #14]
 8013f36:	2b02      	cmp	r3, #2
 8013f38:	d10a      	bne.n	8013f50 <Parse_Time+0x84>
 8013f3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f3e:	2b3b      	cmp	r3, #59	@ 0x3b
 8013f40:	dc03      	bgt.n	8013f4a <Parse_Time+0x7e>
 8013f42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	da02      	bge.n	8013f50 <Parse_Time+0x84>
				{
					val=59;
 8013f4a:	233b      	movs	r3, #59	@ 0x3b
 8013f4c:	81bb      	strh	r3, [r7, #12]
 8013f4e:	e004      	b.n	8013f5a <Parse_Time+0x8e>
				}
				else if(i > 2)
 8013f50:	89fb      	ldrh	r3, [r7, #14]
 8013f52:	2b02      	cmp	r3, #2
 8013f54:	d901      	bls.n	8013f5a <Parse_Time+0x8e>
				{
					return 1;
 8013f56:	2301      	movs	r3, #1
 8013f58:	e011      	b.n	8013f7e <Parse_Time+0xb2>
				}


				time[i] =val;
 8013f5a:	89fb      	ldrh	r3, [r7, #14]
 8013f5c:	683a      	ldr	r2, [r7, #0]
 8013f5e:	4413      	add	r3, r2
 8013f60:	89ba      	ldrh	r2, [r7, #12]
 8013f62:	b2d2      	uxtb	r2, r2
 8013f64:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 8013f66:	4908      	ldr	r1, [pc, #32]	@ (8013f88 <Parse_Time+0xbc>)
 8013f68:	2000      	movs	r0, #0
 8013f6a:	f00a fe89 	bl	801ec80 <strtok>
 8013f6e:	60b8      	str	r0, [r7, #8]
			i++;
 8013f70:	89fb      	ldrh	r3, [r7, #14]
 8013f72:	3301      	adds	r3, #1
 8013f74:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d1ba      	bne.n	8013ef2 <Parse_Time+0x26>
		}

		}

		return 0;
 8013f7c:	2300      	movs	r3, #0
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3710      	adds	r7, #16
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
 8013f86:	bf00      	nop
 8013f88:	080245a4 	.word	0x080245a4

08013f8c <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b083      	sub	sp, #12
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	460b      	mov	r3, r1
 8013f96:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8013f98:	78fb      	ldrb	r3, [r7, #3]
 8013f9a:	091b      	lsrs	r3, r3, #4
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	1c5a      	adds	r2, r3, #1
 8013fa4:	607a      	str	r2, [r7, #4]
 8013fa6:	4a08      	ldr	r2, [pc, #32]	@ (8013fc8 <CharToHexasc+0x3c>)
 8013fa8:	5c52      	ldrb	r2, [r2, r1]
 8013faa:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 8013fac:	78fb      	ldrb	r3, [r7, #3]
 8013fae:	f003 030f 	and.w	r3, r3, #15
 8013fb2:	4a05      	ldr	r2, [pc, #20]	@ (8013fc8 <CharToHexasc+0x3c>)
 8013fb4:	5cd2      	ldrb	r2, [r2, r3]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	701a      	strb	r2, [r3, #0]
}
 8013fba:	bf00      	nop
 8013fbc:	370c      	adds	r7, #12
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc4:	4770      	bx	lr
 8013fc6:	bf00      	nop
 8013fc8:	08024ec8 	.word	0x08024ec8

08013fcc <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b088      	sub	sp, #32
 8013fd0:	af00      	add	r7, sp, #0
	adc_Disable();
 8013fd2:	4830      	ldr	r0, [pc, #192]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8013fd4:	f7f0 f947 	bl	8004266 <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8013fd8:	f107 0314 	add.w	r3, r7, #20
 8013fdc:	2200      	movs	r2, #0
 8013fde:	601a      	str	r2, [r3, #0]
 8013fe0:	605a      	str	r2, [r3, #4]
 8013fe2:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 8013fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8013fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8014098 <adc_InitOneShotMode+0xcc>)
 8013fe8:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8013fea:	4b2a      	ldr	r3, [pc, #168]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8013fec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8013ff0:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8013ff2:	4b28      	ldr	r3, [pc, #160]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8013ff8:	4b26      	ldr	r3, [pc, #152]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8013ffe:	4b25      	ldr	r3, [pc, #148]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8014000:	2200      	movs	r2, #0
 8014002:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014004:	4b23      	ldr	r3, [pc, #140]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8014006:	2200      	movs	r2, #0
 8014008:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801400c:	4b21      	ldr	r3, [pc, #132]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 801400e:	2200      	movs	r2, #0
 8014010:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8014012:	4b20      	ldr	r3, [pc, #128]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8014014:	4a21      	ldr	r2, [pc, #132]	@ (801409c <adc_InitOneShotMode+0xd0>)
 8014016:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8014018:	4b1e      	ldr	r3, [pc, #120]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 801401a:	2200      	movs	r2, #0
 801401c:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 801401e:	4b1d      	ldr	r3, [pc, #116]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8014020:	2201      	movs	r2, #1
 8014022:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8014024:	4b1b      	ldr	r3, [pc, #108]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8014026:	2200      	movs	r2, #0
 8014028:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801402c:	4b19      	ldr	r3, [pc, #100]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 801402e:	2201      	movs	r2, #1
 8014030:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8014032:	4818      	ldr	r0, [pc, #96]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 8014034:	f7f0 f8d4 	bl	80041e0 <HAL_ADC_Init>
 8014038:	4603      	mov	r3, r0
 801403a:	2b00      	cmp	r3, #0
 801403c:	d001      	beq.n	8014042 <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 801403e:	f7ef fb11 	bl	8003664 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8014042:	2300      	movs	r3, #0
 8014044:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8014046:	f107 0314 	add.w	r3, r7, #20
 801404a:	4619      	mov	r1, r3
 801404c:	4811      	ldr	r0, [pc, #68]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 801404e:	f7f0 fcdb 	bl	8004a08 <HAL_ADCEx_MultiModeConfigChannel>
 8014052:	4603      	mov	r3, r0
 8014054:	2b00      	cmp	r3, #0
 8014056:	d001      	beq.n	801405c <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 8014058:	f7ef fb04 	bl	8003664 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 801405c:	1d3b      	adds	r3, r7, #4
 801405e:	2200      	movs	r2, #0
 8014060:	601a      	str	r2, [r3, #0]
 8014062:	605a      	str	r2, [r3, #4]
 8014064:	609a      	str	r2, [r3, #8]
 8014066:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 8014068:	230a      	movs	r3, #10
 801406a:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 801406c:	2301      	movs	r3, #1
 801406e:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8014070:	2302      	movs	r3, #2
 8014072:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 8014074:	2300      	movs	r3, #0
 8014076:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014078:	1d3b      	adds	r3, r7, #4
 801407a:	4619      	mov	r1, r3
 801407c:	4805      	ldr	r0, [pc, #20]	@ (8014094 <adc_InitOneShotMode+0xc8>)
 801407e:	f7f0 faa5 	bl	80045cc <HAL_ADC_ConfigChannel>
 8014082:	4603      	mov	r3, r0
 8014084:	2b00      	cmp	r3, #0
 8014086:	d001      	beq.n	801408c <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8014088:	f7ef faec 	bl	8003664 <Error_Handler>
		  }



}
 801408c:	bf00      	nop
 801408e:	3720      	adds	r7, #32
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}
 8014094:	200017f0 	.word	0x200017f0
 8014098:	40012000 	.word	0x40012000
 801409c:	0f000001 	.word	0x0f000001

080140a0 <adc_Getval>:

static uint32_t adc_Getval ()
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 80140a4:	4802      	ldr	r0, [pc, #8]	@ (80140b0 <adc_Getval+0x10>)
 80140a6:	f7f0 fa83 	bl	80045b0 <HAL_ADC_GetValue>
 80140aa:	4603      	mov	r3, r0

}
 80140ac:	4618      	mov	r0, r3
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	200017f0 	.word	0x200017f0
 80140b4:	00000000 	.word	0x00000000

080140b8 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b084      	sub	sp, #16
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 80140c0:	f7ff ff84 	bl	8013fcc <adc_InitOneShotMode>
	HAL_Delay(1);
 80140c4:	2001      	movs	r0, #1
 80140c6:	f7f0 f823 	bl	8004110 <HAL_Delay>
	adc_Start();
 80140ca:	4847      	ldr	r0, [pc, #284]	@ (80141e8 <adc_Measure+0x130>)
 80140cc:	f7f0 f8fe 	bl	80042cc <HAL_ADC_Start>
	HAL_Delay(1);
 80140d0:	2001      	movs	r0, #1
 80140d2:	f7f0 f81d 	bl	8004110 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80140d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80140da:	4843      	ldr	r0, [pc, #268]	@ (80141e8 <adc_Measure+0x130>)
 80140dc:	f7f0 f9dd 	bl	800449a <HAL_ADC_PollForConversion>
 80140e0:	4603      	mov	r3, r0
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d01d      	beq.n	8014122 <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 80140e6:	2001      	movs	r0, #1
 80140e8:	f7f0 f812 	bl	8004110 <HAL_Delay>
		   adc_Start();
 80140ec:	483e      	ldr	r0, [pc, #248]	@ (80141e8 <adc_Measure+0x130>)
 80140ee:	f7f0 f8ed 	bl	80042cc <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80140f2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80140f6:	483c      	ldr	r0, [pc, #240]	@ (80141e8 <adc_Measure+0x130>)
 80140f8:	f7f0 f9cf 	bl	800449a <HAL_ADC_PollForConversion>
 80140fc:	4603      	mov	r3, r0
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d00f      	beq.n	8014122 <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 8014102:	2001      	movs	r0, #1
 8014104:	f7f0 f804 	bl	8004110 <HAL_Delay>
				adc_Start();
 8014108:	4837      	ldr	r0, [pc, #220]	@ (80141e8 <adc_Measure+0x130>)
 801410a:	f7f0 f8df 	bl	80042cc <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801410e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014112:	4835      	ldr	r0, [pc, #212]	@ (80141e8 <adc_Measure+0x130>)
 8014114:	f7f0 f9c1 	bl	800449a <HAL_ADC_PollForConversion>
 8014118:	4603      	mov	r3, r0
 801411a:	2b00      	cmp	r3, #0
 801411c:	d001      	beq.n	8014122 <adc_Measure+0x6a>
				{
					return 0;
 801411e:	2300      	movs	r3, #0
 8014120:	e05a      	b.n	80141d8 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8014122:	4831      	ldr	r0, [pc, #196]	@ (80141e8 <adc_Measure+0x130>)
 8014124:	f7f0 f986 	bl	8004434 <HAL_ADC_Stop>

	val = adc_Getval();
 8014128:	f7ff ffba 	bl	80140a0 <adc_Getval>
 801412c:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 801412e:	2001      	movs	r0, #1
 8014130:	f7ef ffee 	bl	8004110 <HAL_Delay>
	adc_Start();
 8014134:	482c      	ldr	r0, [pc, #176]	@ (80141e8 <adc_Measure+0x130>)
 8014136:	f7f0 f8c9 	bl	80042cc <HAL_ADC_Start>
	HAL_Delay(1);
 801413a:	2001      	movs	r0, #1
 801413c:	f7ef ffe8 	bl	8004110 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014140:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014144:	4828      	ldr	r0, [pc, #160]	@ (80141e8 <adc_Measure+0x130>)
 8014146:	f7f0 f9a8 	bl	800449a <HAL_ADC_PollForConversion>
 801414a:	4603      	mov	r3, r0
 801414c:	2b00      	cmp	r3, #0
 801414e:	d01d      	beq.n	801418c <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8014150:	2001      	movs	r0, #1
 8014152:	f7ef ffdd 	bl	8004110 <HAL_Delay>
		   adc_Start();
 8014156:	4824      	ldr	r0, [pc, #144]	@ (80141e8 <adc_Measure+0x130>)
 8014158:	f7f0 f8b8 	bl	80042cc <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801415c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014160:	4821      	ldr	r0, [pc, #132]	@ (80141e8 <adc_Measure+0x130>)
 8014162:	f7f0 f99a 	bl	800449a <HAL_ADC_PollForConversion>
 8014166:	4603      	mov	r3, r0
 8014168:	2b00      	cmp	r3, #0
 801416a:	d00f      	beq.n	801418c <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 801416c:	2001      	movs	r0, #1
 801416e:	f7ef ffcf 	bl	8004110 <HAL_Delay>
				adc_Start();
 8014172:	481d      	ldr	r0, [pc, #116]	@ (80141e8 <adc_Measure+0x130>)
 8014174:	f7f0 f8aa 	bl	80042cc <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014178:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801417c:	481a      	ldr	r0, [pc, #104]	@ (80141e8 <adc_Measure+0x130>)
 801417e:	f7f0 f98c 	bl	800449a <HAL_ADC_PollForConversion>
 8014182:	4603      	mov	r3, r0
 8014184:	2b00      	cmp	r3, #0
 8014186:	d001      	beq.n	801418c <adc_Measure+0xd4>
				{
					return 0;
 8014188:	2300      	movs	r3, #0
 801418a:	e025      	b.n	80141d8 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 801418c:	4816      	ldr	r0, [pc, #88]	@ (80141e8 <adc_Measure+0x130>)
 801418e:	f7f0 f951 	bl	8004434 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 8014192:	f7ff ff85 	bl	80140a0 <adc_Getval>
 8014196:	4602      	mov	r2, r0
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	4413      	add	r3, r2
 801419c:	085b      	lsrs	r3, r3, #1
 801419e:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	ee07 3a90 	vmov	s15, r3
 80141a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141aa:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80141ec <adc_Measure+0x134>
 80141ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80141b2:	ee17 0a90 	vmov	r0, s15
 80141b6:	f7ec f9df 	bl	8000578 <__aeabi_f2d>
 80141ba:	a309      	add	r3, pc, #36	@ (adr r3, 80141e0 <adc_Measure+0x128>)
 80141bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c0:	f7ec fa32 	bl	8000628 <__aeabi_dmul>
 80141c4:	4602      	mov	r2, r0
 80141c6:	460b      	mov	r3, r1
 80141c8:	4610      	mov	r0, r2
 80141ca:	4619      	mov	r1, r3
 80141cc:	f7ec fd24 	bl	8000c18 <__aeabi_d2f>
 80141d0:	4602      	mov	r2, r0
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	601a      	str	r2, [r3, #0]


	return 1;
 80141d6:	2301      	movs	r3, #1


}
 80141d8:	4618      	mov	r0, r3
 80141da:	3710      	adds	r7, #16
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	851eb852 	.word	0x851eb852
 80141e4:	3ff451eb 	.word	0x3ff451eb
 80141e8:	200017f0 	.word	0x200017f0
 80141ec:	3a533333 	.word	0x3a533333

080141f0 <init_driver>:

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

static uint8_t _i2c_address;

void init_driver(uint8_t i2c_address) {
 80141f0:	b480      	push	{r7}
 80141f2:	b083      	sub	sp, #12
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	4603      	mov	r3, r0
 80141f8:	71fb      	strb	r3, [r7, #7]
    _i2c_address = i2c_address;
 80141fa:	4a04      	ldr	r2, [pc, #16]	@ (801420c <init_driver+0x1c>)
 80141fc:	79fb      	ldrb	r3, [r7, #7]
 80141fe:	7013      	strb	r3, [r2, #0]
}
 8014200:	bf00      	nop
 8014202:	370c      	adds	r7, #12
 8014204:	46bd      	mov	sp, r7
 8014206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420a:	4770      	bx	lr
 801420c:	20001b5c 	.word	0x20001b5c

08014210 <scd30_await_data_ready>:

int16_t scd30_await_data_ready() {
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
    uint16_t data_ready = 0;
 8014216:	2300      	movs	r3, #0
 8014218:	80bb      	strh	r3, [r7, #4]
    int16_t local_error = 0;
 801421a:	2300      	movs	r3, #0
 801421c:	80fb      	strh	r3, [r7, #6]
    local_error = scd30_get_data_ready(&data_ready);
 801421e:	1d3b      	adds	r3, r7, #4
 8014220:	4618      	mov	r0, r3
 8014222:	f000 f8f5 	bl	8014410 <scd30_get_data_ready>
 8014226:	4603      	mov	r3, r0
 8014228:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 801422a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d01c      	beq.n	801426c <scd30_await_data_ready+0x5c>
        return local_error;
 8014232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014236:	e01e      	b.n	8014276 <scd30_await_data_ready+0x66>
    }
    while (data_ready == 0) {
    	if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))//dont give delay when usb connected as we want to service console aswell
 8014238:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801423c:	4810      	ldr	r0, [pc, #64]	@ (8014280 <scd30_await_data_ready+0x70>)
 801423e:	f7f1 ff27 	bl	8006090 <HAL_GPIO_ReadPin>
 8014242:	4603      	mov	r3, r0
 8014244:	2b00      	cmp	r3, #0
 8014246:	d102      	bne.n	801424e <scd30_await_data_ready+0x3e>
    			{
        sensirion_hal_sleep_us(100000);
 8014248:	480e      	ldr	r0, [pc, #56]	@ (8014284 <scd30_await_data_ready+0x74>)
 801424a:	f000 feb5 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    			}
        local_error = scd30_get_data_ready(&data_ready);
 801424e:	1d3b      	adds	r3, r7, #4
 8014250:	4618      	mov	r0, r3
 8014252:	f000 f8dd 	bl	8014410 <scd30_get_data_ready>
 8014256:	4603      	mov	r3, r0
 8014258:	80fb      	strh	r3, [r7, #6]
        if (local_error != NO_ERROR) {
 801425a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d002      	beq.n	8014268 <scd30_await_data_ready+0x58>
            return local_error;
 8014262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014266:	e006      	b.n	8014276 <scd30_await_data_ready+0x66>
        }

        run_console_from_scd30();
 8014268:	f7ee f94c 	bl	8002504 <run_console_from_scd30>
    while (data_ready == 0) {
 801426c:	88bb      	ldrh	r3, [r7, #4]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d0e2      	beq.n	8014238 <scd30_await_data_ready+0x28>
    }
    return local_error;
 8014272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014276:	4618      	mov	r0, r3
 8014278:	3708      	adds	r7, #8
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}
 801427e:	bf00      	nop
 8014280:	40020000 	.word	0x40020000
 8014284:	000186a0 	.word	0x000186a0

08014288 <scd30_blocking_read_measurement_data>:

int16_t scd30_blocking_read_measurement_data(float* co2_concentration,
                                             float* temperature,
                                             float* humidity) {
 8014288:	b580      	push	{r7, lr}
 801428a:	b086      	sub	sp, #24
 801428c:	af00      	add	r7, sp, #0
 801428e:	60f8      	str	r0, [r7, #12]
 8014290:	60b9      	str	r1, [r7, #8]
 8014292:	607a      	str	r2, [r7, #4]
    int16_t local_error = 0;
 8014294:	2300      	movs	r3, #0
 8014296:	82fb      	strh	r3, [r7, #22]
    local_error = scd30_await_data_ready();
 8014298:	f7ff ffba 	bl	8014210 <scd30_await_data_ready>
 801429c:	4603      	mov	r3, r0
 801429e:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80142a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d002      	beq.n	80142ae <scd30_blocking_read_measurement_data+0x26>
        return local_error;
 80142a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80142ac:	e008      	b.n	80142c0 <scd30_blocking_read_measurement_data+0x38>
    }
    local_error =
        scd30_read_measurement_data(co2_concentration, temperature, humidity);
 80142ae:	687a      	ldr	r2, [r7, #4]
 80142b0:	68b9      	ldr	r1, [r7, #8]
 80142b2:	68f8      	ldr	r0, [r7, #12]
 80142b4:	f000 f8fc 	bl	80144b0 <scd30_read_measurement_data>
 80142b8:	4603      	mov	r3, r0
 80142ba:	82fb      	strh	r3, [r7, #22]
    return local_error;
 80142bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3718      	adds	r7, #24
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <scd30_start_periodic_measurement>:

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure) {
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b086      	sub	sp, #24
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	4603      	mov	r3, r0
 80142d0:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80142d2:	2300      	movs	r3, #0
 80142d4:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80142d6:	2300      	movs	r3, #0
 80142d8:	60fb      	str	r3, [r7, #12]
 80142da:	2300      	movs	r3, #0
 80142dc:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80142de:	2300      	movs	r3, #0
 80142e0:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x10);
 80142e2:	8ab9      	ldrh	r1, [r7, #20]
 80142e4:	f107 030c 	add.w	r3, r7, #12
 80142e8:	2210      	movs	r2, #16
 80142ea:	4618      	mov	r0, r3
 80142ec:	f000 fd25 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 80142f0:	4603      	mov	r3, r0
 80142f2:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80142f4:	88fa      	ldrh	r2, [r7, #6]
 80142f6:	8ab9      	ldrh	r1, [r7, #20]
 80142f8:	f107 030c 	add.w	r3, r7, #12
 80142fc:	4618      	mov	r0, r3
 80142fe:	f000 fd3f 	bl	8014d80 <sensirion_i2c_add_uint16_t_to_buffer>
 8014302:	4603      	mov	r3, r0
 8014304:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, ambient_pressure);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014306:	4b0b      	ldr	r3, [pc, #44]	@ (8014334 <scd30_start_periodic_measurement+0x6c>)
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	8aba      	ldrh	r2, [r7, #20]
 801430c:	f107 010c 	add.w	r1, r7, #12
 8014310:	4618      	mov	r0, r3
 8014312:	f000 fd65 	bl	8014de0 <sensirion_i2c_write_data>
 8014316:	4603      	mov	r3, r0
 8014318:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 801431a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d002      	beq.n	8014328 <scd30_start_periodic_measurement+0x60>
        return local_error;
 8014322:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014326:	e001      	b.n	801432c <scd30_start_periodic_measurement+0x64>
    }
    return local_error;
 8014328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801432c:	4618      	mov	r0, r3
 801432e:	3718      	adds	r7, #24
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	20001b5c 	.word	0x20001b5c

08014338 <scd30_stop_periodic_measurement>:

int16_t scd30_stop_periodic_measurement() {
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 801433e:	2300      	movs	r3, #0
 8014340:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 8014342:	2300      	movs	r3, #0
 8014344:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 8014346:	2300      	movs	r3, #0
 8014348:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x104);
 801434a:	88b9      	ldrh	r1, [r7, #4]
 801434c:	463b      	mov	r3, r7
 801434e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8014352:	4618      	mov	r0, r3
 8014354:	f000 fcf1 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 8014358:	4603      	mov	r3, r0
 801435a:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801435c:	4b0c      	ldr	r3, [pc, #48]	@ (8014390 <scd30_stop_periodic_measurement+0x58>)
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	88ba      	ldrh	r2, [r7, #4]
 8014362:	4639      	mov	r1, r7
 8014364:	4618      	mov	r0, r3
 8014366:	f000 fd3b 	bl	8014de0 <sensirion_i2c_write_data>
 801436a:	4603      	mov	r3, r0
 801436c:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 801436e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d002      	beq.n	801437c <scd30_stop_periodic_measurement+0x44>
        return local_error;
 8014376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801437a:	e005      	b.n	8014388 <scd30_stop_periodic_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801437c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014380:	f000 fe1a 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014388:	4618      	mov	r0, r3
 801438a:	3708      	adds	r7, #8
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}
 8014390:	20001b5c 	.word	0x20001b5c

08014394 <scd30_set_measurement_interval>:

int16_t scd30_set_measurement_interval(uint16_t interval) {
 8014394:	b580      	push	{r7, lr}
 8014396:	b086      	sub	sp, #24
 8014398:	af00      	add	r7, sp, #0
 801439a:	4603      	mov	r3, r0
 801439c:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801439e:	2300      	movs	r3, #0
 80143a0:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80143a2:	2300      	movs	r3, #0
 80143a4:	60fb      	str	r3, [r7, #12]
 80143a6:	2300      	movs	r3, #0
 80143a8:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80143aa:	2300      	movs	r3, #0
 80143ac:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x4600);
 80143ae:	8ab9      	ldrh	r1, [r7, #20]
 80143b0:	f107 030c 	add.w	r3, r7, #12
 80143b4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80143b8:	4618      	mov	r0, r3
 80143ba:	f000 fcbe 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 80143be:	4603      	mov	r3, r0
 80143c0:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 80143c2:	88fa      	ldrh	r2, [r7, #6]
 80143c4:	8ab9      	ldrh	r1, [r7, #20]
 80143c6:	f107 030c 	add.w	r3, r7, #12
 80143ca:	4618      	mov	r0, r3
 80143cc:	f000 fcd8 	bl	8014d80 <sensirion_i2c_add_uint16_t_to_buffer>
 80143d0:	4603      	mov	r3, r0
 80143d2:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, interval);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80143d4:	4b0d      	ldr	r3, [pc, #52]	@ (801440c <scd30_set_measurement_interval+0x78>)
 80143d6:	781b      	ldrb	r3, [r3, #0]
 80143d8:	8aba      	ldrh	r2, [r7, #20]
 80143da:	f107 010c 	add.w	r1, r7, #12
 80143de:	4618      	mov	r0, r3
 80143e0:	f000 fcfe 	bl	8014de0 <sensirion_i2c_write_data>
 80143e4:	4603      	mov	r3, r0
 80143e6:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80143e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d002      	beq.n	80143f6 <scd30_set_measurement_interval+0x62>
        return local_error;
 80143f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143f4:	e005      	b.n	8014402 <scd30_set_measurement_interval+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80143f6:	f242 7010 	movw	r0, #10000	@ 0x2710
 80143fa:	f000 fddd 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80143fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014402:	4618      	mov	r0, r3
 8014404:	3718      	adds	r7, #24
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
 801440a:	bf00      	nop
 801440c:	20001b5c 	.word	0x20001b5c

08014410 <scd30_get_data_ready>:
    }
    *interval = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_get_data_ready(uint16_t* data_ready_flag) {
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014418:	2300      	movs	r3, #0
 801441a:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 801441c:	4b22      	ldr	r3, [pc, #136]	@ (80144a8 <scd30_get_data_ready+0x98>)
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	813b      	strh	r3, [r7, #8]
 8014422:	2300      	movs	r3, #0
 8014424:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014426:	2300      	movs	r3, #0
 8014428:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x202);
 801442a:	89b9      	ldrh	r1, [r7, #12]
 801442c:	f107 0308 	add.w	r3, r7, #8
 8014430:	f240 2202 	movw	r2, #514	@ 0x202
 8014434:	4618      	mov	r0, r3
 8014436:	f000 fc80 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 801443a:	4603      	mov	r3, r0
 801443c:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801443e:	4b1b      	ldr	r3, [pc, #108]	@ (80144ac <scd30_get_data_ready+0x9c>)
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	89ba      	ldrh	r2, [r7, #12]
 8014444:	f107 0108 	add.w	r1, r7, #8
 8014448:	4618      	mov	r0, r3
 801444a:	f000 fcc9 	bl	8014de0 <sensirion_i2c_write_data>
 801444e:	4603      	mov	r3, r0
 8014450:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014452:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d002      	beq.n	8014460 <scd30_get_data_ready+0x50>
        return local_error;
 801445a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801445e:	e01f      	b.n	80144a0 <scd30_get_data_ready+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014460:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014464:	f000 fda8 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014468:	4b10      	ldr	r3, [pc, #64]	@ (80144ac <scd30_get_data_ready+0x9c>)
 801446a:	781b      	ldrb	r3, [r3, #0]
 801446c:	f107 0108 	add.w	r1, r7, #8
 8014470:	2202      	movs	r2, #2
 8014472:	4618      	mov	r0, r3
 8014474:	f000 fcc7 	bl	8014e06 <sensirion_i2c_read_data_inplace>
 8014478:	4603      	mov	r3, r0
 801447a:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801447c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d002      	beq.n	801448a <scd30_get_data_ready+0x7a>
        return local_error;
 8014484:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014488:	e00a      	b.n	80144a0 <scd30_get_data_ready+0x90>
    }
    *data_ready_flag = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801448a:	f107 0308 	add.w	r3, r7, #8
 801448e:	4618      	mov	r0, r3
 8014490:	f000 fbc1 	bl	8014c16 <sensirion_common_bytes_to_uint16_t>
 8014494:	4603      	mov	r3, r0
 8014496:	461a      	mov	r2, r3
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	801a      	strh	r2, [r3, #0]
    return local_error;
 801449c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	3710      	adds	r7, #16
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	080245a8 	.word	0x080245a8
 80144ac:	20001b5c 	.word	0x20001b5c

080144b0 <scd30_read_measurement_data>:

int16_t scd30_read_measurement_data(float* co2_concentration,
                                    float* temperature, float* humidity) {
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b08a      	sub	sp, #40	@ 0x28
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	60f8      	str	r0, [r7, #12]
 80144b8:	60b9      	str	r1, [r7, #8]
 80144ba:	607a      	str	r2, [r7, #4]
    int16_t local_error = NO_ERROR;
 80144bc:	2300      	movs	r3, #0
 80144be:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t local_buffer[18] = {0};
 80144c0:	2300      	movs	r3, #0
 80144c2:	613b      	str	r3, [r7, #16]
 80144c4:	f107 0314 	add.w	r3, r7, #20
 80144c8:	2200      	movs	r2, #0
 80144ca:	601a      	str	r2, [r3, #0]
 80144cc:	605a      	str	r2, [r3, #4]
 80144ce:	609a      	str	r2, [r3, #8]
 80144d0:	819a      	strh	r2, [r3, #12]
    uint16_t local_offset = 0;
 80144d2:	2300      	movs	r3, #0
 80144d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x300);
 80144d6:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80144d8:	f107 0310 	add.w	r3, r7, #16
 80144dc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80144e0:	4618      	mov	r0, r3
 80144e2:	f000 fc2a 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 80144e6:	4603      	mov	r3, r0
 80144e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80144ea:	4b26      	ldr	r3, [pc, #152]	@ (8014584 <scd30_read_measurement_data+0xd4>)
 80144ec:	781b      	ldrb	r3, [r3, #0]
 80144ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80144f0:	f107 0110 	add.w	r1, r7, #16
 80144f4:	4618      	mov	r0, r3
 80144f6:	f000 fc73 	bl	8014de0 <sensirion_i2c_write_data>
 80144fa:	4603      	mov	r3, r0
 80144fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 80144fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014502:	2b00      	cmp	r3, #0
 8014504:	d002      	beq.n	801450c <scd30_read_measurement_data+0x5c>
        return local_error;
 8014506:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801450a:	e036      	b.n	801457a <scd30_read_measurement_data+0xca>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801450c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014510:	f000 fd52 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 12);
 8014514:	4b1b      	ldr	r3, [pc, #108]	@ (8014584 <scd30_read_measurement_data+0xd4>)
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	f107 0110 	add.w	r1, r7, #16
 801451c:	220c      	movs	r2, #12
 801451e:	4618      	mov	r0, r3
 8014520:	f000 fc71 	bl	8014e06 <sensirion_i2c_read_data_inplace>
 8014524:	4603      	mov	r3, r0
 8014526:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 8014528:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801452c:	2b00      	cmp	r3, #0
 801452e:	d002      	beq.n	8014536 <scd30_read_measurement_data+0x86>
        return local_error;
 8014530:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014534:	e021      	b.n	801457a <scd30_read_measurement_data+0xca>
    }
    *co2_concentration = sensirion_common_bytes_to_float(&local_buffer[0]);
 8014536:	f107 0310 	add.w	r3, r7, #16
 801453a:	4618      	mov	r0, r3
 801453c:	f000 fb9b 	bl	8014c76 <sensirion_common_bytes_to_float>
 8014540:	eef0 7a40 	vmov.f32	s15, s0
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_common_bytes_to_float(&local_buffer[4]);
 801454a:	f107 0310 	add.w	r3, r7, #16
 801454e:	3304      	adds	r3, #4
 8014550:	4618      	mov	r0, r3
 8014552:	f000 fb90 	bl	8014c76 <sensirion_common_bytes_to_float>
 8014556:	eef0 7a40 	vmov.f32	s15, s0
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_common_bytes_to_float(&local_buffer[8]);
 8014560:	f107 0310 	add.w	r3, r7, #16
 8014564:	3308      	adds	r3, #8
 8014566:	4618      	mov	r0, r3
 8014568:	f000 fb85 	bl	8014c76 <sensirion_common_bytes_to_float>
 801456c:	eef0 7a40 	vmov.f32	s15, s0
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	edc3 7a00 	vstr	s15, [r3]
    return local_error;
 8014576:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801457a:	4618      	mov	r0, r3
 801457c:	3728      	adds	r7, #40	@ 0x28
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}
 8014582:	bf00      	nop
 8014584:	20001b5c 	.word	0x20001b5c

08014588 <scd30_activate_auto_calibration>:

int16_t scd30_activate_auto_calibration(uint16_t do_activate) {
 8014588:	b580      	push	{r7, lr}
 801458a:	b086      	sub	sp, #24
 801458c:	af00      	add	r7, sp, #0
 801458e:	4603      	mov	r3, r0
 8014590:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014592:	2300      	movs	r3, #0
 8014594:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014596:	2300      	movs	r3, #0
 8014598:	60fb      	str	r3, [r7, #12]
 801459a:	2300      	movs	r3, #0
 801459c:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 801459e:	2300      	movs	r3, #0
 80145a0:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 80145a2:	8ab9      	ldrh	r1, [r7, #20]
 80145a4:	f107 030c 	add.w	r3, r7, #12
 80145a8:	f245 3206 	movw	r2, #21254	@ 0x5306
 80145ac:	4618      	mov	r0, r3
 80145ae:	f000 fbc4 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 80145b2:	4603      	mov	r3, r0
 80145b4:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80145b6:	88fa      	ldrh	r2, [r7, #6]
 80145b8:	8ab9      	ldrh	r1, [r7, #20]
 80145ba:	f107 030c 	add.w	r3, r7, #12
 80145be:	4618      	mov	r0, r3
 80145c0:	f000 fbde 	bl	8014d80 <sensirion_i2c_add_uint16_t_to_buffer>
 80145c4:	4603      	mov	r3, r0
 80145c6:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, do_activate);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80145c8:	4b0d      	ldr	r3, [pc, #52]	@ (8014600 <scd30_activate_auto_calibration+0x78>)
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	8aba      	ldrh	r2, [r7, #20]
 80145ce:	f107 010c 	add.w	r1, r7, #12
 80145d2:	4618      	mov	r0, r3
 80145d4:	f000 fc04 	bl	8014de0 <sensirion_i2c_write_data>
 80145d8:	4603      	mov	r3, r0
 80145da:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80145dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d002      	beq.n	80145ea <scd30_activate_auto_calibration+0x62>
        return local_error;
 80145e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80145e8:	e005      	b.n	80145f6 <scd30_activate_auto_calibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80145ea:	f242 7010 	movw	r0, #10000	@ 0x2710
 80145ee:	f000 fce3 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80145f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3718      	adds	r7, #24
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	20001b5c 	.word	0x20001b5c

08014604 <scd30_get_auto_calibration_status>:

int16_t scd30_get_auto_calibration_status(uint16_t* is_active) {
 8014604:	b580      	push	{r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 801460c:	2300      	movs	r3, #0
 801460e:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014610:	4b22      	ldr	r3, [pc, #136]	@ (801469c <scd30_get_auto_calibration_status+0x98>)
 8014612:	881b      	ldrh	r3, [r3, #0]
 8014614:	813b      	strh	r3, [r7, #8]
 8014616:	2300      	movs	r3, #0
 8014618:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 801461a:	2300      	movs	r3, #0
 801461c:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 801461e:	89b9      	ldrh	r1, [r7, #12]
 8014620:	f107 0308 	add.w	r3, r7, #8
 8014624:	f245 3206 	movw	r2, #21254	@ 0x5306
 8014628:	4618      	mov	r0, r3
 801462a:	f000 fb86 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 801462e:	4603      	mov	r3, r0
 8014630:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014632:	4b1b      	ldr	r3, [pc, #108]	@ (80146a0 <scd30_get_auto_calibration_status+0x9c>)
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	89ba      	ldrh	r2, [r7, #12]
 8014638:	f107 0108 	add.w	r1, r7, #8
 801463c:	4618      	mov	r0, r3
 801463e:	f000 fbcf 	bl	8014de0 <sensirion_i2c_write_data>
 8014642:	4603      	mov	r3, r0
 8014644:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d002      	beq.n	8014654 <scd30_get_auto_calibration_status+0x50>
        return local_error;
 801464e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014652:	e01f      	b.n	8014694 <scd30_get_auto_calibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014654:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014658:	f000 fcae 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 801465c:	4b10      	ldr	r3, [pc, #64]	@ (80146a0 <scd30_get_auto_calibration_status+0x9c>)
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	f107 0108 	add.w	r1, r7, #8
 8014664:	2202      	movs	r2, #2
 8014666:	4618      	mov	r0, r3
 8014668:	f000 fbcd 	bl	8014e06 <sensirion_i2c_read_data_inplace>
 801466c:	4603      	mov	r3, r0
 801466e:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d002      	beq.n	801467e <scd30_get_auto_calibration_status+0x7a>
        return local_error;
 8014678:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801467c:	e00a      	b.n	8014694 <scd30_get_auto_calibration_status+0x90>
    }
    *is_active = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801467e:	f107 0308 	add.w	r3, r7, #8
 8014682:	4618      	mov	r0, r3
 8014684:	f000 fac7 	bl	8014c16 <sensirion_common_bytes_to_uint16_t>
 8014688:	4603      	mov	r3, r0
 801468a:	461a      	mov	r2, r3
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014694:	4618      	mov	r0, r3
 8014696:	3710      	adds	r7, #16
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}
 801469c:	080245a8 	.word	0x080245a8
 80146a0:	20001b5c 	.word	0x20001b5c

080146a4 <scd30_force_recalibration>:

int16_t scd30_force_recalibration(uint16_t co2_ref_concentration) {
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b086      	sub	sp, #24
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	4603      	mov	r3, r0
 80146ac:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80146ae:	2300      	movs	r3, #0
 80146b0:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80146b2:	2300      	movs	r3, #0
 80146b4:	60fb      	str	r3, [r7, #12]
 80146b6:	2300      	movs	r3, #0
 80146b8:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80146ba:	2300      	movs	r3, #0
 80146bc:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 80146be:	8ab9      	ldrh	r1, [r7, #20]
 80146c0:	f107 030c 	add.w	r3, r7, #12
 80146c4:	f245 2204 	movw	r2, #20996	@ 0x5204
 80146c8:	4618      	mov	r0, r3
 80146ca:	f000 fb36 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 80146ce:	4603      	mov	r3, r0
 80146d0:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80146d2:	88fa      	ldrh	r2, [r7, #6]
 80146d4:	8ab9      	ldrh	r1, [r7, #20]
 80146d6:	f107 030c 	add.w	r3, r7, #12
 80146da:	4618      	mov	r0, r3
 80146dc:	f000 fb50 	bl	8014d80 <sensirion_i2c_add_uint16_t_to_buffer>
 80146e0:	4603      	mov	r3, r0
 80146e2:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, co2_ref_concentration);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80146e4:	4b0d      	ldr	r3, [pc, #52]	@ (801471c <scd30_force_recalibration+0x78>)
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	8aba      	ldrh	r2, [r7, #20]
 80146ea:	f107 010c 	add.w	r1, r7, #12
 80146ee:	4618      	mov	r0, r3
 80146f0:	f000 fb76 	bl	8014de0 <sensirion_i2c_write_data>
 80146f4:	4603      	mov	r3, r0
 80146f6:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80146f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d002      	beq.n	8014706 <scd30_force_recalibration+0x62>
        return local_error;
 8014700:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014704:	e005      	b.n	8014712 <scd30_force_recalibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014706:	f242 7010 	movw	r0, #10000	@ 0x2710
 801470a:	f000 fc55 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801470e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014712:	4618      	mov	r0, r3
 8014714:	3718      	adds	r7, #24
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}
 801471a:	bf00      	nop
 801471c:	20001b5c 	.word	0x20001b5c

08014720 <scd30_get_force_recalibration_status>:

int16_t scd30_get_force_recalibration_status(uint16_t* co2_ref_concentration) {
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014728:	2300      	movs	r3, #0
 801472a:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 801472c:	4b22      	ldr	r3, [pc, #136]	@ (80147b8 <scd30_get_force_recalibration_status+0x98>)
 801472e:	881b      	ldrh	r3, [r3, #0]
 8014730:	813b      	strh	r3, [r7, #8]
 8014732:	2300      	movs	r3, #0
 8014734:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014736:	2300      	movs	r3, #0
 8014738:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 801473a:	89b9      	ldrh	r1, [r7, #12]
 801473c:	f107 0308 	add.w	r3, r7, #8
 8014740:	f245 2204 	movw	r2, #20996	@ 0x5204
 8014744:	4618      	mov	r0, r3
 8014746:	f000 faf8 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 801474a:	4603      	mov	r3, r0
 801474c:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801474e:	4b1b      	ldr	r3, [pc, #108]	@ (80147bc <scd30_get_force_recalibration_status+0x9c>)
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	89ba      	ldrh	r2, [r7, #12]
 8014754:	f107 0108 	add.w	r1, r7, #8
 8014758:	4618      	mov	r0, r3
 801475a:	f000 fb41 	bl	8014de0 <sensirion_i2c_write_data>
 801475e:	4603      	mov	r3, r0
 8014760:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014762:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d002      	beq.n	8014770 <scd30_get_force_recalibration_status+0x50>
        return local_error;
 801476a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801476e:	e01f      	b.n	80147b0 <scd30_get_force_recalibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014770:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014774:	f000 fc20 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014778:	4b10      	ldr	r3, [pc, #64]	@ (80147bc <scd30_get_force_recalibration_status+0x9c>)
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	f107 0108 	add.w	r1, r7, #8
 8014780:	2202      	movs	r2, #2
 8014782:	4618      	mov	r0, r3
 8014784:	f000 fb3f 	bl	8014e06 <sensirion_i2c_read_data_inplace>
 8014788:	4603      	mov	r3, r0
 801478a:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801478c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d002      	beq.n	801479a <scd30_get_force_recalibration_status+0x7a>
        return local_error;
 8014794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014798:	e00a      	b.n	80147b0 <scd30_get_force_recalibration_status+0x90>
    }
    *co2_ref_concentration =
        sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801479a:	f107 0308 	add.w	r3, r7, #8
 801479e:	4618      	mov	r0, r3
 80147a0:	f000 fa39 	bl	8014c16 <sensirion_common_bytes_to_uint16_t>
 80147a4:	4603      	mov	r3, r0
 80147a6:	461a      	mov	r2, r3
    *co2_ref_concentration =
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	801a      	strh	r2, [r3, #0]
    return local_error;
 80147ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3710      	adds	r7, #16
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	080245a8 	.word	0x080245a8
 80147bc:	20001b5c 	.word	0x20001b5c

080147c0 <scd30_set_temperature_offset>:

int16_t scd30_set_temperature_offset(uint16_t temperature_offset) {
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b086      	sub	sp, #24
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	4603      	mov	r3, r0
 80147c8:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80147ca:	2300      	movs	r3, #0
 80147cc:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80147ce:	2300      	movs	r3, #0
 80147d0:	60fb      	str	r3, [r7, #12]
 80147d2:	2300      	movs	r3, #0
 80147d4:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80147d6:	2300      	movs	r3, #0
 80147d8:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 80147da:	8ab9      	ldrh	r1, [r7, #20]
 80147dc:	f107 030c 	add.w	r3, r7, #12
 80147e0:	f245 4203 	movw	r2, #21507	@ 0x5403
 80147e4:	4618      	mov	r0, r3
 80147e6:	f000 faa8 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 80147ea:	4603      	mov	r3, r0
 80147ec:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80147ee:	88fa      	ldrh	r2, [r7, #6]
 80147f0:	8ab9      	ldrh	r1, [r7, #20]
 80147f2:	f107 030c 	add.w	r3, r7, #12
 80147f6:	4618      	mov	r0, r3
 80147f8:	f000 fac2 	bl	8014d80 <sensirion_i2c_add_uint16_t_to_buffer>
 80147fc:	4603      	mov	r3, r0
 80147fe:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, temperature_offset);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014800:	4b0d      	ldr	r3, [pc, #52]	@ (8014838 <scd30_set_temperature_offset+0x78>)
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	8aba      	ldrh	r2, [r7, #20]
 8014806:	f107 010c 	add.w	r1, r7, #12
 801480a:	4618      	mov	r0, r3
 801480c:	f000 fae8 	bl	8014de0 <sensirion_i2c_write_data>
 8014810:	4603      	mov	r3, r0
 8014812:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014814:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d002      	beq.n	8014822 <scd30_set_temperature_offset+0x62>
        return local_error;
 801481c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014820:	e005      	b.n	801482e <scd30_set_temperature_offset+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014822:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014826:	f000 fbc7 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801482a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801482e:	4618      	mov	r0, r3
 8014830:	3718      	adds	r7, #24
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop
 8014838:	20001b5c 	.word	0x20001b5c

0801483c <scd30_get_temperature_offset>:

int16_t scd30_get_temperature_offset(uint16_t* temperature_offset) {
 801483c:	b580      	push	{r7, lr}
 801483e:	b084      	sub	sp, #16
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014844:	2300      	movs	r3, #0
 8014846:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014848:	4b22      	ldr	r3, [pc, #136]	@ (80148d4 <scd30_get_temperature_offset+0x98>)
 801484a:	881b      	ldrh	r3, [r3, #0]
 801484c:	813b      	strh	r3, [r7, #8]
 801484e:	2300      	movs	r3, #0
 8014850:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014852:	2300      	movs	r3, #0
 8014854:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 8014856:	89b9      	ldrh	r1, [r7, #12]
 8014858:	f107 0308 	add.w	r3, r7, #8
 801485c:	f245 4203 	movw	r2, #21507	@ 0x5403
 8014860:	4618      	mov	r0, r3
 8014862:	f000 fa6a 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 8014866:	4603      	mov	r3, r0
 8014868:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801486a:	4b1b      	ldr	r3, [pc, #108]	@ (80148d8 <scd30_get_temperature_offset+0x9c>)
 801486c:	781b      	ldrb	r3, [r3, #0]
 801486e:	89ba      	ldrh	r2, [r7, #12]
 8014870:	f107 0108 	add.w	r1, r7, #8
 8014874:	4618      	mov	r0, r3
 8014876:	f000 fab3 	bl	8014de0 <sensirion_i2c_write_data>
 801487a:	4603      	mov	r3, r0
 801487c:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801487e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d002      	beq.n	801488c <scd30_get_temperature_offset+0x50>
        return local_error;
 8014886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801488a:	e01f      	b.n	80148cc <scd30_get_temperature_offset+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801488c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014890:	f000 fb92 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014894:	4b10      	ldr	r3, [pc, #64]	@ (80148d8 <scd30_get_temperature_offset+0x9c>)
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	f107 0108 	add.w	r1, r7, #8
 801489c:	2202      	movs	r2, #2
 801489e:	4618      	mov	r0, r3
 80148a0:	f000 fab1 	bl	8014e06 <sensirion_i2c_read_data_inplace>
 80148a4:	4603      	mov	r3, r0
 80148a6:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80148a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d002      	beq.n	80148b6 <scd30_get_temperature_offset+0x7a>
        return local_error;
 80148b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80148b4:	e00a      	b.n	80148cc <scd30_get_temperature_offset+0x90>
    }
    *temperature_offset = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 80148b6:	f107 0308 	add.w	r3, r7, #8
 80148ba:	4618      	mov	r0, r3
 80148bc:	f000 f9ab 	bl	8014c16 <sensirion_common_bytes_to_uint16_t>
 80148c0:	4603      	mov	r3, r0
 80148c2:	461a      	mov	r2, r3
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	801a      	strh	r2, [r3, #0]
    return local_error;
 80148c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80148cc:	4618      	mov	r0, r3
 80148ce:	3710      	adds	r7, #16
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}
 80148d4:	080245a8 	.word	0x080245a8
 80148d8:	20001b5c 	.word	0x20001b5c

080148dc <scd30_get_altitude_compensation>:

int16_t scd30_get_altitude_compensation(uint16_t* altitude) {
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80148e4:	2300      	movs	r3, #0
 80148e6:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80148e8:	4b22      	ldr	r3, [pc, #136]	@ (8014974 <scd30_get_altitude_compensation+0x98>)
 80148ea:	881b      	ldrh	r3, [r3, #0]
 80148ec:	813b      	strh	r3, [r7, #8]
 80148ee:	2300      	movs	r3, #0
 80148f0:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80148f2:	2300      	movs	r3, #0
 80148f4:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 80148f6:	89b9      	ldrh	r1, [r7, #12]
 80148f8:	f107 0308 	add.w	r3, r7, #8
 80148fc:	f245 1202 	movw	r2, #20738	@ 0x5102
 8014900:	4618      	mov	r0, r3
 8014902:	f000 fa1a 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 8014906:	4603      	mov	r3, r0
 8014908:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801490a:	4b1b      	ldr	r3, [pc, #108]	@ (8014978 <scd30_get_altitude_compensation+0x9c>)
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	89ba      	ldrh	r2, [r7, #12]
 8014910:	f107 0108 	add.w	r1, r7, #8
 8014914:	4618      	mov	r0, r3
 8014916:	f000 fa63 	bl	8014de0 <sensirion_i2c_write_data>
 801491a:	4603      	mov	r3, r0
 801491c:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801491e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d002      	beq.n	801492c <scd30_get_altitude_compensation+0x50>
        return local_error;
 8014926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801492a:	e01f      	b.n	801496c <scd30_get_altitude_compensation+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801492c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014930:	f000 fb42 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014934:	4b10      	ldr	r3, [pc, #64]	@ (8014978 <scd30_get_altitude_compensation+0x9c>)
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	f107 0108 	add.w	r1, r7, #8
 801493c:	2202      	movs	r2, #2
 801493e:	4618      	mov	r0, r3
 8014940:	f000 fa61 	bl	8014e06 <sensirion_i2c_read_data_inplace>
 8014944:	4603      	mov	r3, r0
 8014946:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d002      	beq.n	8014956 <scd30_get_altitude_compensation+0x7a>
        return local_error;
 8014950:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014954:	e00a      	b.n	801496c <scd30_get_altitude_compensation+0x90>
    }
    *altitude = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014956:	f107 0308 	add.w	r3, r7, #8
 801495a:	4618      	mov	r0, r3
 801495c:	f000 f95b 	bl	8014c16 <sensirion_common_bytes_to_uint16_t>
 8014960:	4603      	mov	r3, r0
 8014962:	461a      	mov	r2, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801496c:	4618      	mov	r0, r3
 801496e:	3710      	adds	r7, #16
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}
 8014974:	080245a8 	.word	0x080245a8
 8014978:	20001b5c 	.word	0x20001b5c

0801497c <scd30_set_altitude_compensation>:

int16_t scd30_set_altitude_compensation(uint16_t altitude) {
 801497c:	b580      	push	{r7, lr}
 801497e:	b086      	sub	sp, #24
 8014980:	af00      	add	r7, sp, #0
 8014982:	4603      	mov	r3, r0
 8014984:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014986:	2300      	movs	r3, #0
 8014988:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801498a:	2300      	movs	r3, #0
 801498c:	60fb      	str	r3, [r7, #12]
 801498e:	2300      	movs	r3, #0
 8014990:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014992:	2300      	movs	r3, #0
 8014994:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 8014996:	8ab9      	ldrh	r1, [r7, #20]
 8014998:	f107 030c 	add.w	r3, r7, #12
 801499c:	f245 1202 	movw	r2, #20738	@ 0x5102
 80149a0:	4618      	mov	r0, r3
 80149a2:	f000 f9ca 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 80149a6:	4603      	mov	r3, r0
 80149a8:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 80149aa:	88fa      	ldrh	r2, [r7, #6]
 80149ac:	8ab9      	ldrh	r1, [r7, #20]
 80149ae:	f107 030c 	add.w	r3, r7, #12
 80149b2:	4618      	mov	r0, r3
 80149b4:	f000 f9e4 	bl	8014d80 <sensirion_i2c_add_uint16_t_to_buffer>
 80149b8:	4603      	mov	r3, r0
 80149ba:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, altitude);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80149bc:	4b0d      	ldr	r3, [pc, #52]	@ (80149f4 <scd30_set_altitude_compensation+0x78>)
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	8aba      	ldrh	r2, [r7, #20]
 80149c2:	f107 010c 	add.w	r1, r7, #12
 80149c6:	4618      	mov	r0, r3
 80149c8:	f000 fa0a 	bl	8014de0 <sensirion_i2c_write_data>
 80149cc:	4603      	mov	r3, r0
 80149ce:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80149d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d002      	beq.n	80149de <scd30_set_altitude_compensation+0x62>
        return local_error;
 80149d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80149dc:	e005      	b.n	80149ea <scd30_set_altitude_compensation+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80149de:	f242 7010 	movw	r0, #10000	@ 0x2710
 80149e2:	f000 fae9 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80149e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3718      	adds	r7, #24
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	20001b5c 	.word	0x20001b5c

080149f8 <scd30_read_firmware_version>:

int16_t scd30_read_firmware_version(uint8_t* major, uint8_t* minor) {
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b084      	sub	sp, #16
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
 8014a00:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8014a02:	2300      	movs	r3, #0
 8014a04:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014a06:	4b21      	ldr	r3, [pc, #132]	@ (8014a8c <scd30_read_firmware_version+0x94>)
 8014a08:	881b      	ldrh	r3, [r3, #0]
 8014a0a:	813b      	strh	r3, [r7, #8]
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014a10:	2300      	movs	r3, #0
 8014a12:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd100);
 8014a14:	89b9      	ldrh	r1, [r7, #12]
 8014a16:	f107 0308 	add.w	r3, r7, #8
 8014a1a:	f44f 4251 	mov.w	r2, #53504	@ 0xd100
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f000 f98b 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 8014a24:	4603      	mov	r3, r0
 8014a26:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014a28:	4b19      	ldr	r3, [pc, #100]	@ (8014a90 <scd30_read_firmware_version+0x98>)
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	89ba      	ldrh	r2, [r7, #12]
 8014a2e:	f107 0108 	add.w	r1, r7, #8
 8014a32:	4618      	mov	r0, r3
 8014a34:	f000 f9d4 	bl	8014de0 <sensirion_i2c_write_data>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d002      	beq.n	8014a4a <scd30_read_firmware_version+0x52>
        return local_error;
 8014a44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a48:	e01c      	b.n	8014a84 <scd30_read_firmware_version+0x8c>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014a4a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014a4e:	f000 fab3 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014a52:	4b0f      	ldr	r3, [pc, #60]	@ (8014a90 <scd30_read_firmware_version+0x98>)
 8014a54:	781b      	ldrb	r3, [r3, #0]
 8014a56:	f107 0108 	add.w	r1, r7, #8
 8014a5a:	2202      	movs	r2, #2
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f000 f9d2 	bl	8014e06 <sensirion_i2c_read_data_inplace>
 8014a62:	4603      	mov	r3, r0
 8014a64:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d002      	beq.n	8014a74 <scd30_read_firmware_version+0x7c>
        return local_error;
 8014a6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a72:	e007      	b.n	8014a84 <scd30_read_firmware_version+0x8c>
    }
    *major = (uint8_t)local_buffer[0];
 8014a74:	7a3a      	ldrb	r2, [r7, #8]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	701a      	strb	r2, [r3, #0]
    *minor = (uint8_t)local_buffer[1];
 8014a7a:	7a7a      	ldrb	r2, [r7, #9]
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	701a      	strb	r2, [r3, #0]
    return local_error;
 8014a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3710      	adds	r7, #16
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}
 8014a8c:	080245a8 	.word	0x080245a8
 8014a90:	20001b5c 	.word	0x20001b5c

08014a94 <scd30_soft_reset>:

int16_t scd30_soft_reset() {
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b082      	sub	sp, #8
 8014a98:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd304);
 8014aa6:	88b9      	ldrh	r1, [r7, #4]
 8014aa8:	463b      	mov	r3, r7
 8014aaa:	f24d 3204 	movw	r2, #54020	@ 0xd304
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f000 f943 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8014aec <scd30_soft_reset+0x58>)
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	88ba      	ldrh	r2, [r7, #4]
 8014abe:	4639      	mov	r1, r7
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f000 f98d 	bl	8014de0 <sensirion_i2c_write_data>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8014aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d002      	beq.n	8014ad8 <scd30_soft_reset+0x44>
        return local_error;
 8014ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ad6:	e004      	b.n	8014ae2 <scd30_soft_reset+0x4e>
    }
    sensirion_i2c_hal_sleep_usec(2000 * 1000);
 8014ad8:	4805      	ldr	r0, [pc, #20]	@ (8014af0 <scd30_soft_reset+0x5c>)
 8014ada:	f000 fa6d 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	3708      	adds	r7, #8
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	20001b5c 	.word	0x20001b5c
 8014af0:	001e8480 	.word	0x001e8480

08014af4 <scd4x_stop_periodic_measurement>:
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
    return NO_ERROR;
}

int16_t scd4x_stop_periodic_measurement() {
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014afa:	2300      	movs	r3, #0
 8014afc:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8014afe:	88f9      	ldrh	r1, [r7, #6]
 8014b00:	463b      	mov	r3, r7
 8014b02:	f643 7286 	movw	r2, #16262	@ 0x3f86
 8014b06:	4618      	mov	r0, r3
 8014b08:	f000 f917 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014b10:	88fa      	ldrh	r2, [r7, #6]
 8014b12:	463b      	mov	r3, r7
 8014b14:	4619      	mov	r1, r3
 8014b16:	2062      	movs	r0, #98	@ 0x62
 8014b18:	f000 f962 	bl	8014de0 <sensirion_i2c_write_data>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014b20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d002      	beq.n	8014b2e <scd4x_stop_periodic_measurement+0x3a>
        return error;
 8014b28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014b2c:	e003      	b.n	8014b36 <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8014b2e:	4804      	ldr	r0, [pc, #16]	@ (8014b40 <scd4x_stop_periodic_measurement+0x4c>)
 8014b30:	f000 fa42 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014b34:	2300      	movs	r3, #0
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3708      	adds	r7, #8
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	0007a120 	.word	0x0007a120

08014b44 <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8014b4e:	88f9      	ldrh	r1, [r7, #6]
 8014b50:	463b      	mov	r3, r7
 8014b52:	f243 6246 	movw	r2, #13894	@ 0x3646
 8014b56:	4618      	mov	r0, r3
 8014b58:	f000 f8ef 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014b60:	88fa      	ldrh	r2, [r7, #6]
 8014b62:	463b      	mov	r3, r7
 8014b64:	4619      	mov	r1, r3
 8014b66:	2062      	movs	r0, #98	@ 0x62
 8014b68:	f000 f93a 	bl	8014de0 <sensirion_i2c_write_data>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014b70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d002      	beq.n	8014b7e <scd4x_reinit+0x3a>
        return error;
 8014b78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014b7c:	e004      	b.n	8014b88 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8014b7e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014b82:	f000 fa19 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014b86:	2300      	movs	r3, #0
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3708      	adds	r7, #8
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b082      	sub	sp, #8
 8014b94:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014b96:	2300      	movs	r3, #0
 8014b98:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8014b9a:	88f9      	ldrh	r1, [r7, #6]
 8014b9c:	463b      	mov	r3, r7
 8014b9e:	f243 62e0 	movw	r2, #14048	@ 0x36e0
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f000 f8c9 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014bac:	88fa      	ldrh	r2, [r7, #6]
 8014bae:	463b      	mov	r3, r7
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	2062      	movs	r0, #98	@ 0x62
 8014bb4:	f000 f914 	bl	8014de0 <sensirion_i2c_write_data>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014bbc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d002      	beq.n	8014bca <scd4x_power_down+0x3a>
        return error;
 8014bc4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014bc8:	e004      	b.n	8014bd4 <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8014bca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014bce:	f000 f9f3 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014bd2:	2300      	movs	r3, #0
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3708      	adds	r7, #8
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}

08014bdc <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014be2:	2300      	movs	r3, #0
 8014be4:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8014be6:	88f9      	ldrh	r1, [r7, #6]
 8014be8:	1d3b      	adds	r3, r7, #4
 8014bea:	f243 62f6 	movw	r2, #14070	@ 0x36f6
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f000 f8a3 	bl	8014d3a <sensirion_i2c_add_command_to_buffer>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014bf8:	88fa      	ldrh	r2, [r7, #6]
 8014bfa:	1d3b      	adds	r3, r7, #4
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	2062      	movs	r0, #98	@ 0x62
 8014c00:	f000 f8ee 	bl	8014de0 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8014c04:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014c08:	f000 f9d6 	bl	8014fb8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c0c:	2300      	movs	r3, #0
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3708      	adds	r7, #8
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}

08014c16 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8014c16:	b480      	push	{r7}
 8014c18:	b083      	sub	sp, #12
 8014c1a:	af00      	add	r7, sp, #0
 8014c1c:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	781b      	ldrb	r3, [r3, #0]
 8014c22:	021b      	lsls	r3, r3, #8
 8014c24:	b21a      	sxth	r2, r3
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	3301      	adds	r3, #1
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	b21b      	sxth	r3, r3
 8014c2e:	4313      	orrs	r3, r2
 8014c30:	b21b      	sxth	r3, r3
 8014c32:	b29b      	uxth	r3, r3
}
 8014c34:	4618      	mov	r0, r3
 8014c36:	370c      	adds	r7, #12
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3e:	4770      	bx	lr

08014c40 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8014c40:	b480      	push	{r7}
 8014c42:	b083      	sub	sp, #12
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	781b      	ldrb	r3, [r3, #0]
 8014c4c:	061a      	lsls	r2, r3, #24
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	3301      	adds	r3, #1
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	041b      	lsls	r3, r3, #16
 8014c56:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	3302      	adds	r3, #2
 8014c5c:	781b      	ldrb	r3, [r3, #0]
 8014c5e:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014c60:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	3203      	adds	r2, #3
 8014c66:	7812      	ldrb	r2, [r2, #0]
 8014c68:	4313      	orrs	r3, r2
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	370c      	adds	r7, #12
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c74:	4770      	bx	lr

08014c76 <sensirion_common_bytes_to_float>:

int32_t sensirion_common_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_common_bytes_to_uint32_t(bytes);
}

float sensirion_common_bytes_to_float(const uint8_t* bytes) {
 8014c76:	b580      	push	{r7, lr}
 8014c78:	b084      	sub	sp, #16
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_common_bytes_to_uint32_t(bytes);
 8014c7e:	6878      	ldr	r0, [r7, #4]
 8014c80:	f7ff ffde 	bl	8014c40 <sensirion_common_bytes_to_uint32_t>
 8014c84:	4603      	mov	r3, r0
 8014c86:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	ee07 3a90 	vmov	s15, r3
}
 8014c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8014c92:	3710      	adds	r7, #16
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8014c98:	b480      	push	{r7}
 8014c9a:	b085      	sub	sp, #20
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8014ca4:	23ff      	movs	r3, #255	@ 0xff
 8014ca6:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014ca8:	2300      	movs	r3, #0
 8014caa:	81fb      	strh	r3, [r7, #14]
 8014cac:	e021      	b.n	8014cf2 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8014cae:	89fb      	ldrh	r3, [r7, #14]
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	4413      	add	r3, r2
 8014cb4:	781a      	ldrb	r2, [r3, #0]
 8014cb6:	7b7b      	ldrb	r3, [r7, #13]
 8014cb8:	4053      	eors	r3, r2
 8014cba:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014cbc:	2308      	movs	r3, #8
 8014cbe:	733b      	strb	r3, [r7, #12]
 8014cc0:	e011      	b.n	8014ce6 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8014cc2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	da07      	bge.n	8014cda <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8014cca:	7b7b      	ldrb	r3, [r7, #13]
 8014ccc:	005b      	lsls	r3, r3, #1
 8014cce:	b25b      	sxtb	r3, r3
 8014cd0:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8014cd4:	b25b      	sxtb	r3, r3
 8014cd6:	737b      	strb	r3, [r7, #13]
 8014cd8:	e002      	b.n	8014ce0 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8014cda:	7b7b      	ldrb	r3, [r7, #13]
 8014cdc:	005b      	lsls	r3, r3, #1
 8014cde:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014ce0:	7b3b      	ldrb	r3, [r7, #12]
 8014ce2:	3b01      	subs	r3, #1
 8014ce4:	733b      	strb	r3, [r7, #12]
 8014ce6:	7b3b      	ldrb	r3, [r7, #12]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d1ea      	bne.n	8014cc2 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014cec:	89fb      	ldrh	r3, [r7, #14]
 8014cee:	3301      	adds	r3, #1
 8014cf0:	81fb      	strh	r3, [r7, #14]
 8014cf2:	89fa      	ldrh	r2, [r7, #14]
 8014cf4:	887b      	ldrh	r3, [r7, #2]
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d3d9      	bcc.n	8014cae <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8014cfa:	7b7b      	ldrb	r3, [r7, #13]
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3714      	adds	r7, #20
 8014d00:	46bd      	mov	sp, r7
 8014d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d06:	4770      	bx	lr

08014d08 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	460b      	mov	r3, r1
 8014d12:	807b      	strh	r3, [r7, #2]
 8014d14:	4613      	mov	r3, r2
 8014d16:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8014d18:	887b      	ldrh	r3, [r7, #2]
 8014d1a:	4619      	mov	r1, r3
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f7ff ffbb 	bl	8014c98 <sensirion_i2c_generate_crc>
 8014d22:	4603      	mov	r3, r0
 8014d24:	461a      	mov	r2, r3
 8014d26:	787b      	ldrb	r3, [r7, #1]
 8014d28:	4293      	cmp	r3, r2
 8014d2a:	d001      	beq.n	8014d30 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	e000      	b.n	8014d32 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8014d30:	2300      	movs	r3, #0
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3708      	adds	r7, #8
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}

08014d3a <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8014d3a:	b480      	push	{r7}
 8014d3c:	b083      	sub	sp, #12
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
 8014d42:	460b      	mov	r3, r1
 8014d44:	807b      	strh	r3, [r7, #2]
 8014d46:	4613      	mov	r3, r2
 8014d48:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8014d4a:	883b      	ldrh	r3, [r7, #0]
 8014d4c:	0a1b      	lsrs	r3, r3, #8
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	887b      	ldrh	r3, [r7, #2]
 8014d52:	1c59      	adds	r1, r3, #1
 8014d54:	8079      	strh	r1, [r7, #2]
 8014d56:	4619      	mov	r1, r3
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	440b      	add	r3, r1
 8014d5c:	b2d2      	uxtb	r2, r2
 8014d5e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8014d60:	887b      	ldrh	r3, [r7, #2]
 8014d62:	1c5a      	adds	r2, r3, #1
 8014d64:	807a      	strh	r2, [r7, #2]
 8014d66:	461a      	mov	r2, r3
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	4413      	add	r3, r2
 8014d6c:	883a      	ldrh	r2, [r7, #0]
 8014d6e:	b2d2      	uxtb	r2, r2
 8014d70:	701a      	strb	r2, [r3, #0]
    return offset;
 8014d72:	887b      	ldrh	r3, [r7, #2]
}
 8014d74:	4618      	mov	r0, r3
 8014d76:	370c      	adds	r7, #12
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7e:	4770      	bx	lr

08014d80 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8014d80:	b590      	push	{r4, r7, lr}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	460b      	mov	r3, r1
 8014d8a:	807b      	strh	r3, [r7, #2]
 8014d8c:	4613      	mov	r3, r2
 8014d8e:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8014d90:	883b      	ldrh	r3, [r7, #0]
 8014d92:	0a1b      	lsrs	r3, r3, #8
 8014d94:	b29a      	uxth	r2, r3
 8014d96:	887b      	ldrh	r3, [r7, #2]
 8014d98:	1c59      	adds	r1, r3, #1
 8014d9a:	8079      	strh	r1, [r7, #2]
 8014d9c:	4619      	mov	r1, r3
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	440b      	add	r3, r1
 8014da2:	b2d2      	uxtb	r2, r2
 8014da4:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8014da6:	887b      	ldrh	r3, [r7, #2]
 8014da8:	1c5a      	adds	r2, r3, #1
 8014daa:	807a      	strh	r2, [r7, #2]
 8014dac:	461a      	mov	r2, r3
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	4413      	add	r3, r2
 8014db2:	883a      	ldrh	r2, [r7, #0]
 8014db4:	b2d2      	uxtb	r2, r2
 8014db6:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8014db8:	887b      	ldrh	r3, [r7, #2]
 8014dba:	3b02      	subs	r3, #2
 8014dbc:	687a      	ldr	r2, [r7, #4]
 8014dbe:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8014dc0:	887b      	ldrh	r3, [r7, #2]
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	18d4      	adds	r4, r2, r3
 8014dc6:	2102      	movs	r1, #2
 8014dc8:	f7ff ff66 	bl	8014c98 <sensirion_i2c_generate_crc>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	7023      	strb	r3, [r4, #0]
    offset++;
 8014dd0:	887b      	ldrh	r3, [r7, #2]
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	807b      	strh	r3, [r7, #2]

    return offset;
 8014dd6:	887b      	ldrh	r3, [r7, #2]
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	370c      	adds	r7, #12
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd90      	pop	{r4, r7, pc}

08014de0 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	4603      	mov	r3, r0
 8014de8:	6039      	str	r1, [r7, #0]
 8014dea:	71fb      	strb	r3, [r7, #7]
 8014dec:	4613      	mov	r3, r2
 8014dee:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8014df0:	88ba      	ldrh	r2, [r7, #4]
 8014df2:	79fb      	ldrb	r3, [r7, #7]
 8014df4:	6839      	ldr	r1, [r7, #0]
 8014df6:	4618      	mov	r0, r3
 8014df8:	f000 f8c2 	bl	8014f80 <sensirion_i2c_hal_write>
 8014dfc:	4603      	mov	r3, r0
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3708      	adds	r7, #8
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}

08014e06 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8014e06:	b580      	push	{r7, lr}
 8014e08:	b084      	sub	sp, #16
 8014e0a:	af00      	add	r7, sp, #0
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	6039      	str	r1, [r7, #0]
 8014e10:	71fb      	strb	r3, [r7, #7]
 8014e12:	4613      	mov	r3, r2
 8014e14:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8014e16:	88bb      	ldrh	r3, [r7, #4]
 8014e18:	085b      	lsrs	r3, r3, #1
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	0052      	lsls	r2, r2, #1
 8014e20:	4413      	add	r3, r2
 8014e22:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8014e24:	88bb      	ldrh	r3, [r7, #4]
 8014e26:	f003 0301 	and.w	r3, r3, #1
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d001      	beq.n	8014e34 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8014e30:	2304      	movs	r3, #4
 8014e32:	e047      	b.n	8014ec4 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8014e34:	897a      	ldrh	r2, [r7, #10]
 8014e36:	79fb      	ldrb	r3, [r7, #7]
 8014e38:	6839      	ldr	r1, [r7, #0]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f000 f884 	bl	8014f48 <sensirion_i2c_hal_read>
 8014e40:	4603      	mov	r3, r0
 8014e42:	813b      	strh	r3, [r7, #8]
    if (error) {
 8014e44:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d002      	beq.n	8014e52 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8014e4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014e50:	e038      	b.n	8014ec4 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014e52:	2300      	movs	r3, #0
 8014e54:	81fb      	strh	r3, [r7, #14]
 8014e56:	2300      	movs	r3, #0
 8014e58:	81bb      	strh	r3, [r7, #12]
 8014e5a:	e02e      	b.n	8014eba <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014e5c:	89fb      	ldrh	r3, [r7, #14]
 8014e5e:	683a      	ldr	r2, [r7, #0]
 8014e60:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8014e62:	89fb      	ldrh	r3, [r7, #14]
 8014e64:	3302      	adds	r3, #2
 8014e66:	683a      	ldr	r2, [r7, #0]
 8014e68:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	2102      	movs	r1, #2
 8014e70:	f7ff ff4a 	bl	8014d08 <sensirion_i2c_check_crc>
 8014e74:	4603      	mov	r3, r0
 8014e76:	813b      	strh	r3, [r7, #8]
        if (error) {
 8014e78:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d002      	beq.n	8014e86 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8014e80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014e84:	e01e      	b.n	8014ec4 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8014e86:	89fb      	ldrh	r3, [r7, #14]
 8014e88:	683a      	ldr	r2, [r7, #0]
 8014e8a:	441a      	add	r2, r3
 8014e8c:	89bb      	ldrh	r3, [r7, #12]
 8014e8e:	1c59      	adds	r1, r3, #1
 8014e90:	81b9      	strh	r1, [r7, #12]
 8014e92:	4619      	mov	r1, r3
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	440b      	add	r3, r1
 8014e98:	7812      	ldrb	r2, [r2, #0]
 8014e9a:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8014e9c:	89fb      	ldrh	r3, [r7, #14]
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	683a      	ldr	r2, [r7, #0]
 8014ea2:	441a      	add	r2, r3
 8014ea4:	89bb      	ldrh	r3, [r7, #12]
 8014ea6:	1c59      	adds	r1, r3, #1
 8014ea8:	81b9      	strh	r1, [r7, #12]
 8014eaa:	4619      	mov	r1, r3
 8014eac:	683b      	ldr	r3, [r7, #0]
 8014eae:	440b      	add	r3, r1
 8014eb0:	7812      	ldrb	r2, [r2, #0]
 8014eb2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014eb4:	89fb      	ldrh	r3, [r7, #14]
 8014eb6:	3303      	adds	r3, #3
 8014eb8:	81fb      	strh	r3, [r7, #14]
 8014eba:	89fa      	ldrh	r2, [r7, #14]
 8014ebc:	897b      	ldrh	r3, [r7, #10]
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	d3cc      	bcc.n	8014e5c <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8014ec2:	2300      	movs	r3, #0
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3710      	adds	r7, #16
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8014ed0:	4814      	ldr	r0, [pc, #80]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014ed2:	f7f1 fa6b 	bl	80063ac <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 8014ed6:	4b13      	ldr	r3, [pc, #76]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014ed8:	4a13      	ldr	r2, [pc, #76]	@ (8014f28 <sensirion_i2c_hal_init+0x5c>)
 8014eda:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 8014edc:	4b11      	ldr	r3, [pc, #68]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014ede:	4a13      	ldr	r2, [pc, #76]	@ (8014f2c <sensirion_i2c_hal_init+0x60>)
 8014ee0:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014ee2:	4b10      	ldr	r3, [pc, #64]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8014ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014eea:	2200      	movs	r2, #0
 8014eec:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014eee:	4b0d      	ldr	r3, [pc, #52]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014ef0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8014ef4:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014ef8:	2200      	movs	r2, #0
 8014efa:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8014efc:	4b09      	ldr	r3, [pc, #36]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014efe:	2200      	movs	r2, #0
 8014f00:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014f02:	4b08      	ldr	r3, [pc, #32]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014f04:	2200      	movs	r2, #0
 8014f06:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014f08:	4b06      	ldr	r3, [pc, #24]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014f0e:	4805      	ldr	r0, [pc, #20]	@ (8014f24 <sensirion_i2c_hal_init+0x58>)
 8014f10:	f7f1 f908 	bl	8006124 <HAL_I2C_Init>
 8014f14:	4603      	mov	r3, r0
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d001      	beq.n	8014f1e <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8014f1a:	f7ee fba3 	bl	8003664 <Error_Handler>
	  }
}
 8014f1e:	bf00      	nop
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	20001838 	.word	0x20001838
 8014f28:	40005400 	.word	0x40005400
 8014f2c:	000186a0 	.word	0x000186a0

08014f30 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8014f30:	b580      	push	{r7, lr}
 8014f32:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8014f34:	4803      	ldr	r0, [pc, #12]	@ (8014f44 <sensirion_i2c_hal_free+0x14>)
 8014f36:	f7f1 fa39 	bl	80063ac <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8014f3a:	4802      	ldr	r0, [pc, #8]	@ (8014f44 <sensirion_i2c_hal_free+0x14>)
 8014f3c:	f7ee fc6c 	bl	8003818 <HAL_I2C_MspDeInit>
}
 8014f40:	bf00      	nop
 8014f42:	bd80      	pop	{r7, pc}
 8014f44:	20001838 	.word	0x20001838

08014f48 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b084      	sub	sp, #16
 8014f4c:	af02      	add	r7, sp, #8
 8014f4e:	4603      	mov	r3, r0
 8014f50:	6039      	str	r1, [r7, #0]
 8014f52:	71fb      	strb	r3, [r7, #7]
 8014f54:	4613      	mov	r3, r2
 8014f56:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8014f58:	79fb      	ldrb	r3, [r7, #7]
 8014f5a:	b29b      	uxth	r3, r3
 8014f5c:	005b      	lsls	r3, r3, #1
 8014f5e:	b299      	uxth	r1, r3
 8014f60:	88bb      	ldrh	r3, [r7, #4]
 8014f62:	f04f 32ff 	mov.w	r2, #4294967295
 8014f66:	9200      	str	r2, [sp, #0]
 8014f68:	683a      	ldr	r2, [r7, #0]
 8014f6a:	4804      	ldr	r0, [pc, #16]	@ (8014f7c <sensirion_i2c_hal_read+0x34>)
 8014f6c:	f7f1 fb4c 	bl	8006608 <HAL_I2C_Master_Receive>
 8014f70:	4603      	mov	r3, r0
 8014f72:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3708      	adds	r7, #8
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}
 8014f7c:	20001838 	.word	0x20001838

08014f80 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b084      	sub	sp, #16
 8014f84:	af02      	add	r7, sp, #8
 8014f86:	4603      	mov	r3, r0
 8014f88:	6039      	str	r1, [r7, #0]
 8014f8a:	71fb      	strb	r3, [r7, #7]
 8014f8c:	4613      	mov	r3, r2
 8014f8e:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),(uint8_t *)data,count,HAL_MAX_DELAY);
 8014f90:	79fb      	ldrb	r3, [r7, #7]
 8014f92:	b29b      	uxth	r3, r3
 8014f94:	005b      	lsls	r3, r3, #1
 8014f96:	b299      	uxth	r1, r3
 8014f98:	88bb      	ldrh	r3, [r7, #4]
 8014f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8014f9e:	9200      	str	r2, [sp, #0]
 8014fa0:	683a      	ldr	r2, [r7, #0]
 8014fa2:	4804      	ldr	r0, [pc, #16]	@ (8014fb4 <sensirion_i2c_hal_write+0x34>)
 8014fa4:	f7f1 fa32 	bl	800640c <HAL_I2C_Master_Transmit>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	3708      	adds	r7, #8
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}
 8014fb4:	20001838 	.word	0x20001838

08014fb8 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b084      	sub	sp, #16
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */
	   uint32_t msec = useconds / 1000;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8014ff8 <sensirion_i2c_hal_sleep_usec+0x40>)
 8014fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8014fc8:	099b      	lsrs	r3, r3, #6
 8014fca:	60fb      	str	r3, [r7, #12]
	    if (useconds % 1000 > 0) {
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	4b0a      	ldr	r3, [pc, #40]	@ (8014ff8 <sensirion_i2c_hal_sleep_usec+0x40>)
 8014fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8014fd4:	099b      	lsrs	r3, r3, #6
 8014fd6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014fda:	fb01 f303 	mul.w	r3, r1, r3
 8014fde:	1ad3      	subs	r3, r2, r3
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d002      	beq.n	8014fea <sensirion_i2c_hal_sleep_usec+0x32>
	        msec++;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	3301      	adds	r3, #1
 8014fe8:	60fb      	str	r3, [r7, #12]
	    }
	    HAL_Delay(msec);
 8014fea:	68f8      	ldr	r0, [r7, #12]
 8014fec:	f7ef f890 	bl	8004110 <HAL_Delay>
}
 8014ff0:	bf00      	nop
 8014ff2:	3710      	adds	r7, #16
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}
 8014ff8:	10624dd3 	.word	0x10624dd3

08014ffc <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8014ffc:	b480      	push	{r7}
 8014ffe:	b083      	sub	sp, #12
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	781b      	ldrb	r3, [r3, #0]
 8015008:	061a      	lsls	r2, r3, #24
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	3301      	adds	r3, #1
 801500e:	781b      	ldrb	r3, [r3, #0]
 8015010:	041b      	lsls	r3, r3, #16
 8015012:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	3302      	adds	r3, #2
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 801501c:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	3203      	adds	r2, #3
 8015022:	7812      	ldrb	r2, [r2, #0]
 8015024:	4313      	orrs	r3, r2
}
 8015026:	4618      	mov	r0, r3
 8015028:	370c      	adds	r7, #12
 801502a:	46bd      	mov	sp, r7
 801502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015030:	4770      	bx	lr

08015032 <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8015032:	b580      	push	{r7, lr}
 8015034:	b084      	sub	sp, #16
 8015036:	af00      	add	r7, sp, #0
 8015038:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 801503a:	6878      	ldr	r0, [r7, #4]
 801503c:	f7ff ffde 	bl	8014ffc <sensirion_bytes_to_uint32_t>
 8015040:	4603      	mov	r3, r0
 8015042:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	ee07 3a90 	vmov	s15, r3
}
 801504a:	eeb0 0a67 	vmov.f32	s0, s15
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 8015054:	b480      	push	{r7}
 8015056:	b083      	sub	sp, #12
 8015058:	af00      	add	r7, sp, #0
 801505a:	4603      	mov	r3, r0
 801505c:	603a      	str	r2, [r7, #0]
 801505e:	71fb      	strb	r3, [r7, #7]
 8015060:	460b      	mov	r3, r1
 8015062:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 8015064:	79fa      	ldrb	r2, [r7, #7]
 8015066:	79bb      	ldrb	r3, [r7, #6]
 8015068:	4413      	add	r3, r2
 801506a:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 801506c:	e006      	b.n	801507c <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	1c5a      	adds	r2, r3, #1
 8015072:	603a      	str	r2, [r7, #0]
 8015074:	781a      	ldrb	r2, [r3, #0]
 8015076:	79fb      	ldrb	r3, [r7, #7]
 8015078:	4413      	add	r3, r2
 801507a:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 801507c:	79bb      	ldrb	r3, [r7, #6]
 801507e:	1e5a      	subs	r2, r3, #1
 8015080:	71ba      	strb	r2, [r7, #6]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d1f3      	bne.n	801506e <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 8015086:	79fb      	ldrb	r3, [r7, #7]
 8015088:	43db      	mvns	r3, r3
 801508a:	b2db      	uxtb	r3, r3
}
 801508c:	4618      	mov	r0, r3
 801508e:	370c      	adds	r7, #12
 8015090:	46bd      	mov	sp, r7
 8015092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015096:	4770      	bx	lr

08015098 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 8015098:	b480      	push	{r7}
 801509a:	b087      	sub	sp, #28
 801509c:	af00      	add	r7, sp, #0
 801509e:	4603      	mov	r3, r0
 80150a0:	60b9      	str	r1, [r7, #8]
 80150a2:	607a      	str	r2, [r7, #4]
 80150a4:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 80150a6:	2300      	movs	r3, #0
 80150a8:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 80150aa:	e026      	b.n	80150fa <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	1c5a      	adds	r2, r3, #1
 80150b0:	60ba      	str	r2, [r7, #8]
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	757b      	strb	r3, [r7, #21]
        switch (c) {
 80150b6:	7d7b      	ldrb	r3, [r7, #21]
 80150b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80150ba:	dc16      	bgt.n	80150ea <sensirion_shdlc_stuff_data+0x52>
 80150bc:	2b7d      	cmp	r3, #125	@ 0x7d
 80150be:	da03      	bge.n	80150c8 <sensirion_shdlc_stuff_data+0x30>
 80150c0:	2b11      	cmp	r3, #17
 80150c2:	d001      	beq.n	80150c8 <sensirion_shdlc_stuff_data+0x30>
 80150c4:	2b13      	cmp	r3, #19
 80150c6:	d110      	bne.n	80150ea <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	1c5a      	adds	r2, r3, #1
 80150cc:	607a      	str	r2, [r7, #4]
 80150ce:	227d      	movs	r2, #125	@ 0x7d
 80150d0:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	1c5a      	adds	r2, r3, #1
 80150d6:	607a      	str	r2, [r7, #4]
 80150d8:	7d7a      	ldrb	r2, [r7, #21]
 80150da:	f082 0220 	eor.w	r2, r2, #32
 80150de:	b2d2      	uxtb	r2, r2
 80150e0:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 80150e2:	8afb      	ldrh	r3, [r7, #22]
 80150e4:	3302      	adds	r3, #2
 80150e6:	82fb      	strh	r3, [r7, #22]
                break;
 80150e8:	e007      	b.n	80150fa <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	1c5a      	adds	r2, r3, #1
 80150ee:	607a      	str	r2, [r7, #4]
 80150f0:	7d7a      	ldrb	r2, [r7, #21]
 80150f2:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 80150f4:	8afb      	ldrh	r3, [r7, #22]
 80150f6:	3301      	adds	r3, #1
 80150f8:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 80150fa:	7bfb      	ldrb	r3, [r7, #15]
 80150fc:	1e5a      	subs	r2, r3, #1
 80150fe:	73fa      	strb	r2, [r7, #15]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d1d3      	bne.n	80150ac <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 8015104:	8afb      	ldrh	r3, [r7, #22]
}
 8015106:	4618      	mov	r0, r3
 8015108:	371c      	adds	r7, #28
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr

08015112 <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 8015112:	b480      	push	{r7}
 8015114:	b083      	sub	sp, #12
 8015116:	af00      	add	r7, sp, #0
 8015118:	4603      	mov	r3, r0
 801511a:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 801511c:	79fb      	ldrb	r3, [r7, #7]
 801511e:	2b7d      	cmp	r3, #125	@ 0x7d
 8015120:	bf0c      	ite	eq
 8015122:	2301      	moveq	r3, #1
 8015124:	2300      	movne	r3, #0
 8015126:	b2db      	uxtb	r3, r3
}
 8015128:	4618      	mov	r0, r3
 801512a:	370c      	adds	r7, #12
 801512c:	46bd      	mov	sp, r7
 801512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015132:	4770      	bx	lr

08015134 <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 8015134:	b480      	push	{r7}
 8015136:	b083      	sub	sp, #12
 8015138:	af00      	add	r7, sp, #0
 801513a:	4603      	mov	r3, r0
 801513c:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 801513e:	79fb      	ldrb	r3, [r7, #7]
 8015140:	2b5e      	cmp	r3, #94	@ 0x5e
 8015142:	d010      	beq.n	8015166 <sensirion_shdlc_unstuff_byte+0x32>
 8015144:	2b5e      	cmp	r3, #94	@ 0x5e
 8015146:	dc10      	bgt.n	801516a <sensirion_shdlc_unstuff_byte+0x36>
 8015148:	2b5d      	cmp	r3, #93	@ 0x5d
 801514a:	d00a      	beq.n	8015162 <sensirion_shdlc_unstuff_byte+0x2e>
 801514c:	2b5d      	cmp	r3, #93	@ 0x5d
 801514e:	dc0c      	bgt.n	801516a <sensirion_shdlc_unstuff_byte+0x36>
 8015150:	2b31      	cmp	r3, #49	@ 0x31
 8015152:	d002      	beq.n	801515a <sensirion_shdlc_unstuff_byte+0x26>
 8015154:	2b33      	cmp	r3, #51	@ 0x33
 8015156:	d002      	beq.n	801515e <sensirion_shdlc_unstuff_byte+0x2a>
 8015158:	e007      	b.n	801516a <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 801515a:	2311      	movs	r3, #17
 801515c:	e006      	b.n	801516c <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 801515e:	2313      	movs	r3, #19
 8015160:	e004      	b.n	801516c <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 8015162:	237d      	movs	r3, #125	@ 0x7d
 8015164:	e002      	b.n	801516c <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 8015166:	237e      	movs	r3, #126	@ 0x7e
 8015168:	e000      	b.n	801516c <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 801516a:	79fb      	ldrb	r3, [r7, #7]
    }
}
 801516c:	4618      	mov	r0, r3
 801516e:	370c      	adds	r7, #12
 8015170:	46bd      	mov	sp, r7
 8015172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015176:	4770      	bx	lr

08015178 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
 801517e:	603b      	str	r3, [r7, #0]
 8015180:	4603      	mov	r3, r0
 8015182:	71fb      	strb	r3, [r7, #7]
 8015184:	460b      	mov	r3, r1
 8015186:	71bb      	strb	r3, [r7, #6]
 8015188:	4613      	mov	r3, r2
 801518a:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 801518c:	797a      	ldrb	r2, [r7, #5]
 801518e:	79b9      	ldrb	r1, [r7, #6]
 8015190:	79f8      	ldrb	r0, [r7, #7]
 8015192:	683b      	ldr	r3, [r7, #0]
 8015194:	f000 f818 	bl	80151c8 <sensirion_shdlc_tx>
 8015198:	4603      	mov	r3, r0
 801519a:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 801519c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d002      	beq.n	80151aa <sensirion_shdlc_xcv+0x32>
        return ret;
 80151a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151a8:	e00a      	b.n	80151c0 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 80151aa:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80151ae:	f000 fb07 	bl	80157c0 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 80151b2:	7e3b      	ldrb	r3, [r7, #24]
 80151b4:	6a3a      	ldr	r2, [r7, #32]
 80151b6:	69f9      	ldr	r1, [r7, #28]
 80151b8:	4618      	mov	r0, r3
 80151ba:	f000 f8d7 	bl	801536c <sensirion_shdlc_rx>
 80151be:	4603      	mov	r3, r0
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3710      	adds	r7, #16
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 80151c8:	b590      	push	{r4, r7, lr}
 80151ca:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	4604      	mov	r4, r0
 80151d2:	4608      	mov	r0, r1
 80151d4:	4611      	mov	r1, r2
 80151d6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80151da:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80151de:	6013      	str	r3, [r2, #0]
 80151e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80151e4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80151e8:	4622      	mov	r2, r4
 80151ea:	701a      	strb	r2, [r3, #0]
 80151ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80151f0:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80151f4:	4602      	mov	r2, r0
 80151f6:	701a      	strb	r2, [r3, #0]
 80151f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80151fc:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8015200:	460a      	mov	r2, r1
 8015202:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 8015204:	2300      	movs	r3, #0
 8015206:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 801520a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801520e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8015212:	781a      	ldrb	r2, [r3, #0]
 8015214:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015218:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 801521c:	781b      	ldrb	r3, [r3, #0]
 801521e:	4413      	add	r3, r2
 8015220:	b2d8      	uxtb	r0, r3
 8015222:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015226:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 801522a:	7819      	ldrb	r1, [r3, #0]
 801522c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015230:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015234:	681a      	ldr	r2, [r3, #0]
 8015236:	f7ff ff0d 	bl	8015054 <sensirion_shdlc_crc>
 801523a:	4603      	mov	r3, r0
 801523c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    tx_frame_buf[len++] = SHDLC_START;
 8015240:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015244:	1c5a      	adds	r2, r3, #1
 8015246:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 801524a:	461a      	mov	r2, r3
 801524c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015250:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8015254:	217e      	movs	r1, #126	@ 0x7e
 8015256:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 8015258:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801525c:	f107 0208 	add.w	r2, r7, #8
 8015260:	441a      	add	r2, r3
 8015262:	1dfb      	adds	r3, r7, #7
 8015264:	4619      	mov	r1, r3
 8015266:	2001      	movs	r0, #1
 8015268:	f7ff ff16 	bl	8015098 <sensirion_shdlc_stuff_data>
 801526c:	4603      	mov	r3, r0
 801526e:	461a      	mov	r2, r3
 8015270:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015274:	4413      	add	r3, r2
 8015276:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 801527a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801527e:	f107 0208 	add.w	r2, r7, #8
 8015282:	441a      	add	r2, r3
 8015284:	1dbb      	adds	r3, r7, #6
 8015286:	4619      	mov	r1, r3
 8015288:	2001      	movs	r0, #1
 801528a:	f7ff ff05 	bl	8015098 <sensirion_shdlc_stuff_data>
 801528e:	4603      	mov	r3, r0
 8015290:	461a      	mov	r2, r3
 8015292:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015296:	4413      	add	r3, r2
 8015298:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 801529c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152a0:	f107 0208 	add.w	r2, r7, #8
 80152a4:	441a      	add	r2, r3
 80152a6:	1d7b      	adds	r3, r7, #5
 80152a8:	4619      	mov	r1, r3
 80152aa:	2001      	movs	r0, #1
 80152ac:	f7ff fef4 	bl	8015098 <sensirion_shdlc_stuff_data>
 80152b0:	4603      	mov	r3, r0
 80152b2:	461a      	mov	r2, r3
 80152b4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152b8:	4413      	add	r3, r2
 80152ba:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 80152be:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152c2:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 80152c6:	7818      	ldrb	r0, [r3, #0]
 80152c8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152cc:	f107 0208 	add.w	r2, r7, #8
 80152d0:	441a      	add	r2, r3
 80152d2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152d6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80152da:	6819      	ldr	r1, [r3, #0]
 80152dc:	f7ff fedc 	bl	8015098 <sensirion_shdlc_stuff_data>
 80152e0:	4603      	mov	r3, r0
 80152e2:	461a      	mov	r2, r3
 80152e4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152e8:	4413      	add	r3, r2
 80152ea:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 80152ee:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152f2:	f107 0208 	add.w	r2, r7, #8
 80152f6:	441a      	add	r2, r3
 80152f8:	f207 2313 	addw	r3, r7, #531	@ 0x213
 80152fc:	4619      	mov	r1, r3
 80152fe:	2001      	movs	r0, #1
 8015300:	f7ff feca 	bl	8015098 <sensirion_shdlc_stuff_data>
 8015304:	4603      	mov	r3, r0
 8015306:	461a      	mov	r2, r3
 8015308:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801530c:	4413      	add	r3, r2
 801530e:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 8015312:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015316:	1c5a      	adds	r2, r3, #1
 8015318:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 801531c:	461a      	mov	r2, r3
 801531e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015322:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8015326:	217e      	movs	r1, #126	@ 0x7e
 8015328:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 801532a:	f107 0208 	add.w	r2, r7, #8
 801532e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015332:	4611      	mov	r1, r2
 8015334:	4618      	mov	r0, r3
 8015336:	f000 f9db 	bl	80156f0 <sensirion_uart_tx>
 801533a:	4603      	mov	r3, r0
 801533c:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (ret < 0)
 8015340:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8015344:	2b00      	cmp	r3, #0
 8015346:	da02      	bge.n	801534e <sensirion_shdlc_tx+0x186>
        return ret;
 8015348:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 801534c:	e009      	b.n	8015362 <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 801534e:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	@ 0x214
 8015352:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015356:	429a      	cmp	r2, r3
 8015358:	d002      	beq.n	8015360 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 801535a:	f06f 0305 	mvn.w	r3, #5
 801535e:	e000      	b.n	8015362 <sensirion_shdlc_tx+0x19a>
    return 0;
 8015360:	2300      	movs	r3, #0
}
 8015362:	4618      	mov	r0, r3
 8015364:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8015368:	46bd      	mov	sp, r7
 801536a:	bd90      	pop	{r4, r7, pc}

0801536c <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 801536c:	b590      	push	{r4, r7, lr}
 801536e:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8015372:	af00      	add	r7, sp, #0
 8015374:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015378:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801537c:	6019      	str	r1, [r3, #0]
 801537e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015382:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015386:	601a      	str	r2, [r3, #0]
 8015388:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801538c:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8015390:	4602      	mov	r2, r0
 8015392:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 8015394:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015398:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 80153a2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80153a6:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80153aa:	781b      	ldrb	r3, [r3, #0]
 80153ac:	3306      	adds	r3, #6
 80153ae:	b29b      	uxth	r3, r3
 80153b0:	005b      	lsls	r3, r3, #1
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	f107 0210 	add.w	r2, r7, #16
 80153b8:	4611      	mov	r1, r2
 80153ba:	4618      	mov	r0, r3
 80153bc:	f000 f9d2 	bl	8015764 <sensirion_uart_rx>
 80153c0:	4603      	mov	r3, r0
 80153c2:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 80153c6:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	dd03      	ble.n	80153d6 <sensirion_shdlc_rx+0x6a>
 80153ce:	4ba0      	ldr	r3, [pc, #640]	@ (8015650 <sensirion_shdlc_rx+0x2e4>)
 80153d0:	781b      	ldrb	r3, [r3, #0]
 80153d2:	2b7e      	cmp	r3, #126	@ 0x7e
 80153d4:	d002      	beq.n	80153dc <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 80153d6:	f06f 0301 	mvn.w	r3, #1
 80153da:	e133      	b.n	8015644 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 80153dc:	2300      	movs	r3, #0
 80153de:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80153e2:	2301      	movs	r3, #1
 80153e4:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 80153e8:	2300      	movs	r3, #0
 80153ea:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 80153ee:	e03a      	b.n	8015466 <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 80153f0:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d015      	beq.n	8015424 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 80153f8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80153fc:	4a94      	ldr	r2, [pc, #592]	@ (8015650 <sensirion_shdlc_rx+0x2e4>)
 80153fe:	5cd2      	ldrb	r2, [r2, r3]
 8015400:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015404:	1c59      	adds	r1, r3, #1
 8015406:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 801540a:	4619      	mov	r1, r3
 801540c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8015410:	185c      	adds	r4, r3, r1
 8015412:	4610      	mov	r0, r2
 8015414:	f7ff fe8e 	bl	8015134 <sensirion_shdlc_unstuff_byte>
 8015418:	4603      	mov	r3, r0
 801541a:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 801541c:	2300      	movs	r3, #0
 801541e:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8015422:	e01b      	b.n	801545c <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8015424:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015428:	4a89      	ldr	r2, [pc, #548]	@ (8015650 <sensirion_shdlc_rx+0x2e4>)
 801542a:	5cd3      	ldrb	r3, [r2, r3]
 801542c:	4618      	mov	r0, r3
 801542e:	f7ff fe70 	bl	8015112 <sensirion_shdlc_check_unstuff>
 8015432:	4603      	mov	r3, r0
 8015434:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 8015438:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 801543c:	2b00      	cmp	r3, #0
 801543e:	d10d      	bne.n	801545c <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 8015440:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8015444:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015448:	1c59      	adds	r1, r3, #1
 801544a:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 801544e:	4619      	mov	r1, r3
 8015450:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8015454:	440b      	add	r3, r1
 8015456:	497e      	ldr	r1, [pc, #504]	@ (8015650 <sensirion_shdlc_rx+0x2e4>)
 8015458:	5c8a      	ldrb	r2, [r1, r2]
 801545a:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 801545c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015460:	3301      	adds	r3, #1
 8015462:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8015466:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801546a:	2b03      	cmp	r3, #3
 801546c:	d806      	bhi.n	801547c <sensirion_shdlc_rx+0x110>
 801546e:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8015472:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8015476:	3b02      	subs	r3, #2
 8015478:	429a      	cmp	r2, r3
 801547a:	dbb9      	blt.n	80153f0 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 801547c:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015480:	2b04      	cmp	r3, #4
 8015482:	d103      	bne.n	801548c <sensirion_shdlc_rx+0x120>
 8015484:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015488:	2b00      	cmp	r3, #0
 801548a:	d002      	beq.n	8015492 <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 801548c:	f06f 0304 	mvn.w	r3, #4
 8015490:	e0d8      	b.n	8015644 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 8015492:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015496:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	78db      	ldrb	r3, [r3, #3]
 801549e:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 80154a2:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 80154a6:	7812      	ldrb	r2, [r2, #0]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d202      	bcs.n	80154b2 <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 80154ac:	f06f 0306 	mvn.w	r3, #6
 80154b0:	e0c8      	b.n	8015644 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 80154b2:	2300      	movs	r3, #0
 80154b4:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80154b8:	2300      	movs	r3, #0
 80154ba:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 80154be:	e040      	b.n	8015542 <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 80154c0:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d018      	beq.n	80154fa <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 80154c8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80154cc:	4a60      	ldr	r2, [pc, #384]	@ (8015650 <sensirion_shdlc_rx+0x2e4>)
 80154ce:	5cd2      	ldrb	r2, [r2, r3]
 80154d0:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80154d4:	1c59      	adds	r1, r3, #1
 80154d6:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80154da:	4619      	mov	r1, r3
 80154dc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80154e0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	185c      	adds	r4, r3, r1
 80154e8:	4610      	mov	r0, r2
 80154ea:	f7ff fe23 	bl	8015134 <sensirion_shdlc_unstuff_byte>
 80154ee:	4603      	mov	r3, r0
 80154f0:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 80154f2:	2300      	movs	r3, #0
 80154f4:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80154f8:	e01e      	b.n	8015538 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 80154fa:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80154fe:	4a54      	ldr	r2, [pc, #336]	@ (8015650 <sensirion_shdlc_rx+0x2e4>)
 8015500:	5cd3      	ldrb	r3, [r2, r3]
 8015502:	4618      	mov	r0, r3
 8015504:	f7ff fe05 	bl	8015112 <sensirion_shdlc_check_unstuff>
 8015508:	4603      	mov	r3, r0
 801550a:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 801550e:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015512:	2b00      	cmp	r3, #0
 8015514:	d110      	bne.n	8015538 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 8015516:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 801551a:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801551e:	1c59      	adds	r1, r3, #1
 8015520:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8015524:	4619      	mov	r1, r3
 8015526:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801552a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	440b      	add	r3, r1
 8015532:	4947      	ldr	r1, [pc, #284]	@ (8015650 <sensirion_shdlc_rx+0x2e4>)
 8015534:	5c8a      	ldrb	r2, [r1, r2]
 8015536:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8015538:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 801553c:	3301      	adds	r3, #1
 801553e:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8015542:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015546:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	78db      	ldrb	r3, [r3, #3]
 801554e:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8015552:	429a      	cmp	r2, r3
 8015554:	d206      	bcs.n	8015564 <sensirion_shdlc_rx+0x1f8>
 8015556:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 801555a:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 801555e:	3b02      	subs	r3, #2
 8015560:	429a      	cmp	r2, r3
 8015562:	dbad      	blt.n	80154c0 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8015564:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015568:	2b00      	cmp	r3, #0
 801556a:	d002      	beq.n	8015572 <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 801556c:	f06f 0304 	mvn.w	r3, #4
 8015570:	e068      	b.n	8015644 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 8015572:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015576:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	78db      	ldrb	r3, [r3, #3]
 801557e:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8015582:	429a      	cmp	r2, r3
 8015584:	d202      	bcs.n	801558c <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015586:	f06f 0304 	mvn.w	r3, #4
 801558a:	e05b      	b.n	8015644 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 801558c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015590:	1c5a      	adds	r2, r3, #1
 8015592:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 8015596:	461a      	mov	r2, r3
 8015598:	4b2d      	ldr	r3, [pc, #180]	@ (8015650 <sensirion_shdlc_rx+0x2e4>)
 801559a:	5c9b      	ldrb	r3, [r3, r2]
 801559c:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 80155a0:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7ff fdb4 	bl	8015112 <sensirion_shdlc_check_unstuff>
 80155aa:	4603      	mov	r3, r0
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d00d      	beq.n	80155cc <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 80155b0:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80155b4:	1c5a      	adds	r2, r3, #1
 80155b6:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 80155ba:	461a      	mov	r2, r3
 80155bc:	4b24      	ldr	r3, [pc, #144]	@ (8015650 <sensirion_shdlc_rx+0x2e4>)
 80155be:	5c9b      	ldrb	r3, [r3, r2]
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7ff fdb7 	bl	8015134 <sensirion_shdlc_unstuff_byte>
 80155c6:	4603      	mov	r3, r0
 80155c8:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 80155cc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155d0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	781a      	ldrb	r2, [r3, #0]
 80155d8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155dc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	785b      	ldrb	r3, [r3, #1]
 80155e4:	4413      	add	r3, r2
 80155e6:	b2da      	uxtb	r2, r3
 80155e8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155ec:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	789b      	ldrb	r3, [r3, #2]
 80155f4:	4413      	add	r3, r2
 80155f6:	b2d8      	uxtb	r0, r3
 80155f8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155fc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	78d9      	ldrb	r1, [r3, #3]
 8015604:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015608:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	f7ff fd21 	bl	8015054 <sensirion_shdlc_crc>
 8015612:	4603      	mov	r3, r0
 8015614:	461a      	mov	r2, r3
 8015616:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 801561a:	4293      	cmp	r3, r2
 801561c:	d002      	beq.n	8015624 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 801561e:	f06f 0303 	mvn.w	r3, #3
 8015622:	e00f      	b.n	8015644 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8015624:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8015628:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 801562c:	429a      	cmp	r2, r3
 801562e:	da05      	bge.n	801563c <sensirion_shdlc_rx+0x2d0>
 8015630:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015634:	4a06      	ldr	r2, [pc, #24]	@ (8015650 <sensirion_shdlc_rx+0x2e4>)
 8015636:	5cd3      	ldrb	r3, [r2, r3]
 8015638:	2b7e      	cmp	r3, #126	@ 0x7e
 801563a:	d002      	beq.n	8015642 <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 801563c:	f06f 0302 	mvn.w	r3, #2
 8015640:	e000      	b.n	8015644 <sensirion_shdlc_rx+0x2d8>

    return 0;
 8015642:	2300      	movs	r3, #0
}
 8015644:	4618      	mov	r0, r3
 8015646:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 801564a:	46bd      	mov	sp, r7
 801564c:	bd90      	pop	{r4, r7, pc}
 801564e:	bf00      	nop
 8015650:	2000158c 	.word	0x2000158c

08015654 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8015654:	b580      	push	{r7, lr}
 8015656:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8015658:	4819      	ldr	r0, [pc, #100]	@ (80156c0 <sensirion_uart_open+0x6c>)
 801565a:	f7f6 fdbb 	bl	800c1d4 <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 801565e:	4b18      	ldr	r3, [pc, #96]	@ (80156c0 <sensirion_uart_open+0x6c>)
 8015660:	4a18      	ldr	r2, [pc, #96]	@ (80156c4 <sensirion_uart_open+0x70>)
 8015662:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8015664:	4b16      	ldr	r3, [pc, #88]	@ (80156c0 <sensirion_uart_open+0x6c>)
 8015666:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 801566a:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801566c:	4b14      	ldr	r3, [pc, #80]	@ (80156c0 <sensirion_uart_open+0x6c>)
 801566e:	2200      	movs	r2, #0
 8015670:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8015672:	4b13      	ldr	r3, [pc, #76]	@ (80156c0 <sensirion_uart_open+0x6c>)
 8015674:	2200      	movs	r2, #0
 8015676:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8015678:	4b11      	ldr	r3, [pc, #68]	@ (80156c0 <sensirion_uart_open+0x6c>)
 801567a:	2200      	movs	r2, #0
 801567c:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 801567e:	4b10      	ldr	r3, [pc, #64]	@ (80156c0 <sensirion_uart_open+0x6c>)
 8015680:	220c      	movs	r2, #12
 8015682:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8015684:	4b0e      	ldr	r3, [pc, #56]	@ (80156c0 <sensirion_uart_open+0x6c>)
 8015686:	2200      	movs	r2, #0
 8015688:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801568a:	4b0d      	ldr	r3, [pc, #52]	@ (80156c0 <sensirion_uart_open+0x6c>)
 801568c:	2200      	movs	r2, #0
 801568e:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8015690:	480b      	ldr	r0, [pc, #44]	@ (80156c0 <sensirion_uart_open+0x6c>)
 8015692:	f7f6 fd4f 	bl	800c134 <HAL_UART_Init>
 8015696:	4603      	mov	r3, r0
 8015698:	2b00      	cmp	r3, #0
 801569a:	d001      	beq.n	80156a0 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 801569c:	f7ed ffe2 	bl	8003664 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 80156a0:	f240 220a 	movw	r2, #522	@ 0x20a
 80156a4:	4908      	ldr	r1, [pc, #32]	@ (80156c8 <sensirion_uart_open+0x74>)
 80156a6:	4806      	ldr	r0, [pc, #24]	@ (80156c0 <sensirion_uart_open+0x6c>)
 80156a8:	f7f6 fe76 	bl	800c398 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 80156ac:	4b07      	ldr	r3, [pc, #28]	@ (80156cc <sensirion_uart_open+0x78>)
 80156ae:	2200      	movs	r2, #0
 80156b0:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 80156b2:	4b07      	ldr	r3, [pc, #28]	@ (80156d0 <sensirion_uart_open+0x7c>)
 80156b4:	2200      	movs	r2, #0
 80156b6:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 80156b8:	2300      	movs	r3, #0
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	20001abc 	.word	0x20001abc
 80156c4:	40004400 	.word	0x40004400
 80156c8:	2000158c 	.word	0x2000158c
 80156cc:	20001b5e 	.word	0x20001b5e
 80156d0:	20001b60 	.word	0x20001b60

080156d4 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 80156d4:	b580      	push	{r7, lr}
 80156d6:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 80156d8:	4804      	ldr	r0, [pc, #16]	@ (80156ec <sensirion_uart_close+0x18>)
 80156da:	f7f6 fd7b 	bl	800c1d4 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 80156de:	4803      	ldr	r0, [pc, #12]	@ (80156ec <sensirion_uart_close+0x18>)
 80156e0:	f7ee fae2 	bl	8003ca8 <HAL_UART_MspDeInit>
    return 0;
 80156e4:	2300      	movs	r3, #0
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	bd80      	pop	{r7, pc}
 80156ea:	bf00      	nop
 80156ec:	20001abc 	.word	0x20001abc

080156f0 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b082      	sub	sp, #8
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	4603      	mov	r3, r0
 80156f8:	6039      	str	r1, [r7, #0]
 80156fa:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 80156fc:	88fa      	ldrh	r2, [r7, #6]
 80156fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015702:	6839      	ldr	r1, [r7, #0]
 8015704:	4807      	ldr	r0, [pc, #28]	@ (8015724 <sensirion_uart_tx+0x34>)
 8015706:	f7f6 fd97 	bl	800c238 <HAL_UART_Transmit>
 801570a:	4603      	mov	r3, r0
 801570c:	2b00      	cmp	r3, #0
 801570e:	d102      	bne.n	8015716 <sensirion_uart_tx+0x26>
		{
			return data_len;
 8015710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015714:	e001      	b.n	801571a <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 8015716:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 801571a:	4618      	mov	r0, r3
 801571c:	3708      	adds	r7, #8
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}
 8015722:	bf00      	nop
 8015724:	20001abc 	.word	0x20001abc

08015728 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	460b      	mov	r3, r1
 8015732:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8015734:	4a07      	ldr	r2, [pc, #28]	@ (8015754 <HAL_UARTEx_RxEventCallback+0x2c>)
 8015736:	887b      	ldrh	r3, [r7, #2]
 8015738:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 801573a:	4b07      	ldr	r3, [pc, #28]	@ (8015758 <HAL_UARTEx_RxEventCallback+0x30>)
 801573c:	2201      	movs	r2, #1
 801573e:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 8015740:	f240 220a 	movw	r2, #522	@ 0x20a
 8015744:	4905      	ldr	r1, [pc, #20]	@ (801575c <HAL_UARTEx_RxEventCallback+0x34>)
 8015746:	4806      	ldr	r0, [pc, #24]	@ (8015760 <HAL_UARTEx_RxEventCallback+0x38>)
 8015748:	f7f6 fe26 	bl	800c398 <HAL_UARTEx_ReceiveToIdle_IT>
}
 801574c:	bf00      	nop
 801574e:	3708      	adds	r7, #8
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}
 8015754:	20001b5e 	.word	0x20001b5e
 8015758:	20001b62 	.word	0x20001b62
 801575c:	2000158c 	.word	0x2000158c
 8015760:	20001abc 	.word	0x20001abc

08015764 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8015764:	b580      	push	{r7, lr}
 8015766:	b084      	sub	sp, #16
 8015768:	af00      	add	r7, sp, #0
 801576a:	4603      	mov	r3, r0
 801576c:	6039      	str	r1, [r7, #0]
 801576e:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8015770:	2300      	movs	r3, #0
 8015772:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8015774:	e005      	b.n	8015782 <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	3301      	adds	r3, #1
 801577a:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 801577c:	200a      	movs	r0, #10
 801577e:	f7ee fcc7 	bl	8004110 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 8015782:	4b0b      	ldr	r3, [pc, #44]	@ (80157b0 <sensirion_uart_rx+0x4c>)
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d102      	bne.n	8015790 <sensirion_uart_rx+0x2c>
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	2b02      	cmp	r3, #2
 801578e:	d9f2      	bls.n	8015776 <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8015790:	4b07      	ldr	r3, [pc, #28]	@ (80157b0 <sensirion_uart_rx+0x4c>)
 8015792:	2200      	movs	r2, #0
 8015794:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 8015796:	4b07      	ldr	r3, [pc, #28]	@ (80157b4 <sensirion_uart_rx+0x50>)
 8015798:	2200      	movs	r2, #0
 801579a:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 801579c:	4b06      	ldr	r3, [pc, #24]	@ (80157b8 <sensirion_uart_rx+0x54>)
 801579e:	2200      	movs	r2, #0
 80157a0:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 80157a2:	4b06      	ldr	r3, [pc, #24]	@ (80157bc <sensirion_uart_rx+0x58>)
 80157a4:	881b      	ldrh	r3, [r3, #0]
 80157a6:	b21b      	sxth	r3, r3
	//return i;
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3710      	adds	r7, #16
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	20001b62 	.word	0x20001b62
 80157b4:	20001b64 	.word	0x20001b64
 80157b8:	20001b60 	.word	0x20001b60
 80157bc:	20001b5e 	.word	0x20001b5e

080157c0 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	4a06      	ldr	r2, [pc, #24]	@ (80157e4 <sensirion_sleep_usec+0x24>)
 80157cc:	fba2 2303 	umull	r2, r3, r2, r3
 80157d0:	099b      	lsrs	r3, r3, #6
 80157d2:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f7ee fc9b 	bl	8004110 <HAL_Delay>
}
 80157da:	bf00      	nop
 80157dc:	3708      	adds	r7, #8
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
 80157e2:	bf00      	nop
 80157e4:	10624dd3 	.word	0x10624dd3

080157e8 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b08a      	sub	sp, #40	@ 0x28
 80157ec:	af04      	add	r7, sp, #16
 80157ee:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 80157f0:	2303      	movs	r3, #3
 80157f2:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 80157f4:	f107 020c 	add.w	r2, r7, #12
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	9302      	str	r3, [sp, #8]
 80157fc:	f107 0310 	add.w	r3, r7, #16
 8015800:	9301      	str	r3, [sp, #4]
 8015802:	2320      	movs	r3, #32
 8015804:	9300      	str	r3, [sp, #0]
 8015806:	4613      	mov	r3, r2
 8015808:	2201      	movs	r2, #1
 801580a:	21d0      	movs	r1, #208	@ 0xd0
 801580c:	2000      	movs	r0, #0
 801580e:	f7ff fcb3 	bl	8015178 <sensirion_shdlc_xcv>
 8015812:	4603      	mov	r3, r0
 8015814:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 8015816:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801581a:	2b00      	cmp	r3, #0
 801581c:	da02      	bge.n	8015824 <sps30_get_serial+0x3c>
        return ret;
 801581e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015822:	e009      	b.n	8015838 <sps30_get_serial+0x50>

    if (header.state)
 8015824:	7cbb      	ldrb	r3, [r7, #18]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d005      	beq.n	8015836 <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 801582a:	7cbb      	ldrb	r3, [r7, #18]
 801582c:	b21b      	sxth	r3, r3
 801582e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015832:	b21b      	sxth	r3, r3
 8015834:	e000      	b.n	8015838 <sps30_get_serial+0x50>

    return 0;
 8015836:	2300      	movs	r3, #0
}
 8015838:	4618      	mov	r0, r3
 801583a:	3718      	adds	r7, #24
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}

08015840 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 8015840:	b580      	push	{r7, lr}
 8015842:	b086      	sub	sp, #24
 8015844:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 8015846:	f240 3301 	movw	r3, #769	@ 0x301
 801584a:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 801584c:	463a      	mov	r2, r7
 801584e:	2300      	movs	r3, #0
 8015850:	9302      	str	r3, [sp, #8]
 8015852:	1d3b      	adds	r3, r7, #4
 8015854:	9301      	str	r3, [sp, #4]
 8015856:	2300      	movs	r3, #0
 8015858:	9300      	str	r3, [sp, #0]
 801585a:	4613      	mov	r3, r2
 801585c:	2202      	movs	r2, #2
 801585e:	2100      	movs	r1, #0
 8015860:	2000      	movs	r0, #0
 8015862:	f7ff fc89 	bl	8015178 <sensirion_shdlc_xcv>
 8015866:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8015868:	4618      	mov	r0, r3
 801586a:	3708      	adds	r7, #8
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}

08015870 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 8015870:	b580      	push	{r7, lr}
 8015872:	b086      	sub	sp, #24
 8015874:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 8015876:	2300      	movs	r3, #0
 8015878:	9302      	str	r3, [sp, #8]
 801587a:	1d3b      	adds	r3, r7, #4
 801587c:	9301      	str	r3, [sp, #4]
 801587e:	2300      	movs	r3, #0
 8015880:	9300      	str	r3, [sp, #0]
 8015882:	2300      	movs	r3, #0
 8015884:	2200      	movs	r2, #0
 8015886:	2101      	movs	r1, #1
 8015888:	2000      	movs	r0, #0
 801588a:	f7ff fc75 	bl	8015178 <sensirion_shdlc_xcv>
 801588e:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8015890:	4618      	mov	r0, r3
 8015892:	3708      	adds	r7, #8
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}

08015898 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8015898:	b580      	push	{r7, lr}
 801589a:	b092      	sub	sp, #72	@ 0x48
 801589c:	af04      	add	r7, sp, #16
 801589e:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 80158a0:	f107 0308 	add.w	r3, r7, #8
 80158a4:	9302      	str	r3, [sp, #8]
 80158a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80158aa:	9301      	str	r3, [sp, #4]
 80158ac:	2328      	movs	r3, #40	@ 0x28
 80158ae:	9300      	str	r3, [sp, #0]
 80158b0:	2300      	movs	r3, #0
 80158b2:	2200      	movs	r2, #0
 80158b4:	2103      	movs	r1, #3
 80158b6:	2000      	movs	r0, #0
 80158b8:	f7ff fc5e 	bl	8015178 <sensirion_shdlc_xcv>
 80158bc:	4603      	mov	r3, r0
 80158be:	86fb      	strh	r3, [r7, #54]	@ 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 80158c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d002      	beq.n	80158ce <sps30_read_measurement+0x36>
        return error;
 80158c8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80158cc:	e07f      	b.n	80159ce <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 80158ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80158d2:	2b28      	cmp	r3, #40	@ 0x28
 80158d4:	d002      	beq.n	80158dc <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 80158d6:	f04f 33ff 	mov.w	r3, #4294967295
 80158da:	e078      	b.n	80159ce <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 80158dc:	f107 0308 	add.w	r3, r7, #8
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7ff fba6 	bl	8015032 <sensirion_bytes_to_float>
 80158e6:	eef0 7a40 	vmov.f32	s15, s0
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 80158f0:	f107 0308 	add.w	r3, r7, #8
 80158f4:	3304      	adds	r3, #4
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7ff fb9b 	bl	8015032 <sensirion_bytes_to_float>
 80158fc:	eef0 7a40 	vmov.f32	s15, s0
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 8015906:	f107 0308 	add.w	r3, r7, #8
 801590a:	3308      	adds	r3, #8
 801590c:	4618      	mov	r0, r3
 801590e:	f7ff fb90 	bl	8015032 <sensirion_bytes_to_float>
 8015912:	eef0 7a40 	vmov.f32	s15, s0
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 801591c:	f107 0308 	add.w	r3, r7, #8
 8015920:	330c      	adds	r3, #12
 8015922:	4618      	mov	r0, r3
 8015924:	f7ff fb85 	bl	8015032 <sensirion_bytes_to_float>
 8015928:	eef0 7a40 	vmov.f32	s15, s0
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 8015932:	f107 0308 	add.w	r3, r7, #8
 8015936:	3310      	adds	r3, #16
 8015938:	4618      	mov	r0, r3
 801593a:	f7ff fb7a 	bl	8015032 <sensirion_bytes_to_float>
 801593e:	eef0 7a40 	vmov.f32	s15, s0
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 8015948:	f107 0308 	add.w	r3, r7, #8
 801594c:	3314      	adds	r3, #20
 801594e:	4618      	mov	r0, r3
 8015950:	f7ff fb6f 	bl	8015032 <sensirion_bytes_to_float>
 8015954:	eef0 7a40 	vmov.f32	s15, s0
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 801595e:	f107 0308 	add.w	r3, r7, #8
 8015962:	3318      	adds	r3, #24
 8015964:	4618      	mov	r0, r3
 8015966:	f7ff fb64 	bl	8015032 <sensirion_bytes_to_float>
 801596a:	eef0 7a40 	vmov.f32	s15, s0
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8015974:	f107 0308 	add.w	r3, r7, #8
 8015978:	331c      	adds	r3, #28
 801597a:	4618      	mov	r0, r3
 801597c:	f7ff fb59 	bl	8015032 <sensirion_bytes_to_float>
 8015980:	eef0 7a40 	vmov.f32	s15, s0
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 801598a:	f107 0308 	add.w	r3, r7, #8
 801598e:	3320      	adds	r3, #32
 8015990:	4618      	mov	r0, r3
 8015992:	f7ff fb4e 	bl	8015032 <sensirion_bytes_to_float>
 8015996:	eef0 7a40 	vmov.f32	s15, s0
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 80159a0:	f107 0308 	add.w	r3, r7, #8
 80159a4:	3324      	adds	r3, #36	@ 0x24
 80159a6:	4618      	mov	r0, r3
 80159a8:	f7ff fb43 	bl	8015032 <sensirion_bytes_to_float>
 80159ac:	eef0 7a40 	vmov.f32	s15, s0
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    if (header.state) {
 80159b6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d006      	beq.n	80159cc <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 80159be:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80159c2:	b21b      	sxth	r3, r3
 80159c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80159c8:	b21b      	sxth	r3, r3
 80159ca:	e000      	b.n	80159ce <sps30_read_measurement+0x136>
    }

    return 0;
 80159cc:	2300      	movs	r3, #0
}
 80159ce:	4618      	mov	r0, r3
 80159d0:	3738      	adds	r7, #56	@ 0x38
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}

080159d6 <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 80159d6:	b580      	push	{r7, lr}
 80159d8:	b086      	sub	sp, #24
 80159da:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 80159dc:	2300      	movs	r3, #0
 80159de:	9302      	str	r3, [sp, #8]
 80159e0:	1d3b      	adds	r3, r7, #4
 80159e2:	9301      	str	r3, [sp, #4]
 80159e4:	2300      	movs	r3, #0
 80159e6:	9300      	str	r3, [sp, #0]
 80159e8:	2300      	movs	r3, #0
 80159ea:	2200      	movs	r2, #0
 80159ec:	2156      	movs	r1, #86	@ 0x56
 80159ee:	2000      	movs	r0, #0
 80159f0:	f7ff fbc2 	bl	8015178 <sensirion_shdlc_xcv>
 80159f4:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3708      	adds	r7, #8
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}

080159fe <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 80159fe:	b580      	push	{r7, lr}
 8015a00:	b08a      	sub	sp, #40	@ 0x28
 8015a02:	af04      	add	r7, sp, #16
 8015a04:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8015a06:	f107 0308 	add.w	r3, r7, #8
 8015a0a:	9302      	str	r3, [sp, #8]
 8015a0c:	f107 0310 	add.w	r3, r7, #16
 8015a10:	9301      	str	r3, [sp, #4]
 8015a12:	2307      	movs	r3, #7
 8015a14:	9300      	str	r3, [sp, #0]
 8015a16:	2300      	movs	r3, #0
 8015a18:	2200      	movs	r2, #0
 8015a1a:	21d1      	movs	r1, #209	@ 0xd1
 8015a1c:	2000      	movs	r0, #0
 8015a1e:	f7ff fbab 	bl	8015178 <sensirion_shdlc_xcv>
 8015a22:	4603      	mov	r3, r0
 8015a24:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8015a26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d002      	beq.n	8015a34 <sps30_read_version+0x36>
        return error;
 8015a2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015a32:	e01f      	b.n	8015a74 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8015a34:	7cfb      	ldrb	r3, [r7, #19]
 8015a36:	2b07      	cmp	r3, #7
 8015a38:	d002      	beq.n	8015a40 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8015a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a3e:	e019      	b.n	8015a74 <sps30_read_version+0x76>
    }

    if (header.state) {
 8015a40:	7cbb      	ldrb	r3, [r7, #18]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d005      	beq.n	8015a52 <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8015a46:	7cbb      	ldrb	r3, [r7, #18]
 8015a48:	b21b      	sxth	r3, r3
 8015a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015a4e:	b21b      	sxth	r3, r3
 8015a50:	e010      	b.n	8015a74 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8015a52:	7a3a      	ldrb	r2, [r7, #8]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8015a58:	7a7a      	ldrb	r2, [r7, #9]
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8015a5e:	7afa      	ldrb	r2, [r7, #11]
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8015a64:	7b7a      	ldrb	r2, [r7, #13]
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8015a6a:	7bba      	ldrb	r2, [r7, #14]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	711a      	strb	r2, [r3, #4]

    return error;
 8015a70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	3718      	adds	r7, #24
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}

08015a7c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b084      	sub	sp, #16
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
 8015a84:	460b      	mov	r3, r1
 8015a86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8015a88:	f640 0074 	movw	r0, #2164	@ 0x874
 8015a8c:	f007 fe1c 	bl	801d6c8 <USBD_static_malloc>
 8015a90:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d109      	bne.n	8015aac <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	32b0      	adds	r2, #176	@ 0xb0
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015aa8:	2302      	movs	r3, #2
 8015aaa:	e06e      	b.n	8015b8a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	32b0      	adds	r2, #176	@ 0xb0
 8015ab6:	68f9      	ldr	r1, [r7, #12]
 8015ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	32b0      	adds	r2, #176	@ 0xb0
 8015ac6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	7c1b      	ldrb	r3, [r3, #16]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d12b      	bne.n	8015b30 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8015b94 <USBD_MSC_Init+0x118>)
 8015ada:	7819      	ldrb	r1, [r3, #0]
 8015adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015ae0:	2202      	movs	r2, #2
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f007 fcad 	bl	801d442 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8015b94 <USBD_MSC_Init+0x118>)
 8015aea:	781b      	ldrb	r3, [r3, #0]
 8015aec:	f003 020f 	and.w	r2, r3, #15
 8015af0:	6879      	ldr	r1, [r7, #4]
 8015af2:	4613      	mov	r3, r2
 8015af4:	009b      	lsls	r3, r3, #2
 8015af6:	4413      	add	r3, r2
 8015af8:	009b      	lsls	r3, r3, #2
 8015afa:	440b      	add	r3, r1
 8015afc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015b00:	2201      	movs	r2, #1
 8015b02:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015b04:	4b24      	ldr	r3, [pc, #144]	@ (8015b98 <USBD_MSC_Init+0x11c>)
 8015b06:	7819      	ldrb	r1, [r3, #0]
 8015b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b0c:	2202      	movs	r2, #2
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f007 fc97 	bl	801d442 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015b14:	4b20      	ldr	r3, [pc, #128]	@ (8015b98 <USBD_MSC_Init+0x11c>)
 8015b16:	781b      	ldrb	r3, [r3, #0]
 8015b18:	f003 020f 	and.w	r2, r3, #15
 8015b1c:	6879      	ldr	r1, [r7, #4]
 8015b1e:	4613      	mov	r3, r2
 8015b20:	009b      	lsls	r3, r3, #2
 8015b22:	4413      	add	r3, r2
 8015b24:	009b      	lsls	r3, r3, #2
 8015b26:	440b      	add	r3, r1
 8015b28:	3324      	adds	r3, #36	@ 0x24
 8015b2a:	2201      	movs	r2, #1
 8015b2c:	801a      	strh	r2, [r3, #0]
 8015b2e:	e028      	b.n	8015b82 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015b30:	4b18      	ldr	r3, [pc, #96]	@ (8015b94 <USBD_MSC_Init+0x118>)
 8015b32:	7819      	ldrb	r1, [r3, #0]
 8015b34:	2340      	movs	r3, #64	@ 0x40
 8015b36:	2202      	movs	r2, #2
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f007 fc82 	bl	801d442 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015b3e:	4b15      	ldr	r3, [pc, #84]	@ (8015b94 <USBD_MSC_Init+0x118>)
 8015b40:	781b      	ldrb	r3, [r3, #0]
 8015b42:	f003 020f 	and.w	r2, r3, #15
 8015b46:	6879      	ldr	r1, [r7, #4]
 8015b48:	4613      	mov	r3, r2
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	4413      	add	r3, r2
 8015b4e:	009b      	lsls	r3, r3, #2
 8015b50:	440b      	add	r3, r1
 8015b52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015b56:	2201      	movs	r2, #1
 8015b58:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8015b98 <USBD_MSC_Init+0x11c>)
 8015b5c:	7819      	ldrb	r1, [r3, #0]
 8015b5e:	2340      	movs	r3, #64	@ 0x40
 8015b60:	2202      	movs	r2, #2
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f007 fc6d 	bl	801d442 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015b68:	4b0b      	ldr	r3, [pc, #44]	@ (8015b98 <USBD_MSC_Init+0x11c>)
 8015b6a:	781b      	ldrb	r3, [r3, #0]
 8015b6c:	f003 020f 	and.w	r2, r3, #15
 8015b70:	6879      	ldr	r1, [r7, #4]
 8015b72:	4613      	mov	r3, r2
 8015b74:	009b      	lsls	r3, r3, #2
 8015b76:	4413      	add	r3, r2
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	440b      	add	r3, r1
 8015b7c:	3324      	adds	r3, #36	@ 0x24
 8015b7e:	2201      	movs	r2, #1
 8015b80:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f000 fa2c 	bl	8015fe0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8015b88:	2300      	movs	r3, #0
}
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	3710      	adds	r7, #16
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}
 8015b92:	bf00      	nop
 8015b94:	200000af 	.word	0x200000af
 8015b98:	200000ae 	.word	0x200000ae

08015b9c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b082      	sub	sp, #8
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	460b      	mov	r3, r1
 8015ba6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8015ba8:	4b26      	ldr	r3, [pc, #152]	@ (8015c44 <USBD_MSC_DeInit+0xa8>)
 8015baa:	781b      	ldrb	r3, [r3, #0]
 8015bac:	4619      	mov	r1, r3
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f007 fc6d 	bl	801d48e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8015bb4:	4b23      	ldr	r3, [pc, #140]	@ (8015c44 <USBD_MSC_DeInit+0xa8>)
 8015bb6:	781b      	ldrb	r3, [r3, #0]
 8015bb8:	f003 020f 	and.w	r2, r3, #15
 8015bbc:	6879      	ldr	r1, [r7, #4]
 8015bbe:	4613      	mov	r3, r2
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	4413      	add	r3, r2
 8015bc4:	009b      	lsls	r3, r3, #2
 8015bc6:	440b      	add	r3, r1
 8015bc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015bcc:	2200      	movs	r2, #0
 8015bce:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8015bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8015c48 <USBD_MSC_DeInit+0xac>)
 8015bd2:	781b      	ldrb	r3, [r3, #0]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f007 fc59 	bl	801d48e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8015bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8015c48 <USBD_MSC_DeInit+0xac>)
 8015bde:	781b      	ldrb	r3, [r3, #0]
 8015be0:	f003 020f 	and.w	r2, r3, #15
 8015be4:	6879      	ldr	r1, [r7, #4]
 8015be6:	4613      	mov	r3, r2
 8015be8:	009b      	lsls	r3, r3, #2
 8015bea:	4413      	add	r3, r2
 8015bec:	009b      	lsls	r3, r3, #2
 8015bee:	440b      	add	r3, r1
 8015bf0:	3324      	adds	r3, #36	@ 0x24
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	32b0      	adds	r2, #176	@ 0xb0
 8015c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d018      	beq.n	8015c3a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f000 fa67 	bl	80160dc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	32b0      	adds	r2, #176	@ 0xb0
 8015c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f007 fd61 	bl	801d6e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	32b0      	adds	r2, #176	@ 0xb0
 8015c2c:	2100      	movs	r1, #0
 8015c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	2200      	movs	r2, #0
 8015c36:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015c3a:	2300      	movs	r3, #0
}
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3708      	adds	r7, #8
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}
 8015c44:	200000af 	.word	0x200000af
 8015c48:	200000ae 	.word	0x200000ae

08015c4c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b086      	sub	sp, #24
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
 8015c54:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	32b0      	adds	r2, #176	@ 0xb0
 8015c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c64:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c66:	2300      	movs	r3, #0
 8015c68:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d101      	bne.n	8015c78 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8015c74:	2303      	movs	r3, #3
 8015c76:	e0e1      	b.n	8015e3c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d053      	beq.n	8015d2c <USBD_MSC_Setup+0xe0>
 8015c84:	2b20      	cmp	r3, #32
 8015c86:	f040 80d1 	bne.w	8015e2c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8015c8a:	683b      	ldr	r3, [r7, #0]
 8015c8c:	785b      	ldrb	r3, [r3, #1]
 8015c8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8015c90:	d002      	beq.n	8015c98 <USBD_MSC_Setup+0x4c>
 8015c92:	2bff      	cmp	r3, #255	@ 0xff
 8015c94:	d02a      	beq.n	8015cec <USBD_MSC_Setup+0xa0>
 8015c96:	e041      	b.n	8015d1c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	885b      	ldrh	r3, [r3, #2]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d11e      	bne.n	8015cde <USBD_MSC_Setup+0x92>
 8015ca0:	683b      	ldr	r3, [r7, #0]
 8015ca2:	88db      	ldrh	r3, [r3, #6]
 8015ca4:	2b01      	cmp	r3, #1
 8015ca6:	d11a      	bne.n	8015cde <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	781b      	ldrb	r3, [r3, #0]
 8015cac:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	da15      	bge.n	8015cde <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015cb8:	687a      	ldr	r2, [r7, #4]
 8015cba:	33b0      	adds	r3, #176	@ 0xb0
 8015cbc:	009b      	lsls	r3, r3, #2
 8015cbe:	4413      	add	r3, r2
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	699b      	ldr	r3, [r3, #24]
 8015cc4:	4798      	blx	r3
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	461a      	mov	r2, r3
 8015cca:	693b      	ldr	r3, [r7, #16]
 8015ccc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	2201      	movs	r2, #1
 8015cd2:	4619      	mov	r1, r3
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f003 f979 	bl	8018fcc <USBD_CtlSendData>
 8015cda:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015cdc:	e025      	b.n	8015d2a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015cde:	6839      	ldr	r1, [r7, #0]
 8015ce0:	6878      	ldr	r0, [r7, #4]
 8015ce2:	f003 f902 	bl	8018eea <USBD_CtlError>
            ret = USBD_FAIL;
 8015ce6:	2303      	movs	r3, #3
 8015ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8015cea:	e01e      	b.n	8015d2a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	885b      	ldrh	r3, [r3, #2]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d10c      	bne.n	8015d0e <USBD_MSC_Setup+0xc2>
 8015cf4:	683b      	ldr	r3, [r7, #0]
 8015cf6:	88db      	ldrh	r3, [r3, #6]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d108      	bne.n	8015d0e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	db03      	blt.n	8015d0e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f000 f9b4 	bl	8016074 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015d0c:	e00d      	b.n	8015d2a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015d0e:	6839      	ldr	r1, [r7, #0]
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f003 f8ea 	bl	8018eea <USBD_CtlError>
            ret = USBD_FAIL;
 8015d16:	2303      	movs	r3, #3
 8015d18:	75fb      	strb	r3, [r7, #23]
          break;
 8015d1a:	e006      	b.n	8015d2a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8015d1c:	6839      	ldr	r1, [r7, #0]
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f003 f8e3 	bl	8018eea <USBD_CtlError>
          ret = USBD_FAIL;
 8015d24:	2303      	movs	r3, #3
 8015d26:	75fb      	strb	r3, [r7, #23]
          break;
 8015d28:	bf00      	nop
      }
      break;
 8015d2a:	e086      	b.n	8015e3a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	785b      	ldrb	r3, [r3, #1]
 8015d30:	2b0b      	cmp	r3, #11
 8015d32:	d872      	bhi.n	8015e1a <USBD_MSC_Setup+0x1ce>
 8015d34:	a201      	add	r2, pc, #4	@ (adr r2, 8015d3c <USBD_MSC_Setup+0xf0>)
 8015d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d3a:	bf00      	nop
 8015d3c:	08015d6d 	.word	0x08015d6d
 8015d40:	08015de9 	.word	0x08015de9
 8015d44:	08015e1b 	.word	0x08015e1b
 8015d48:	08015e1b 	.word	0x08015e1b
 8015d4c:	08015e1b 	.word	0x08015e1b
 8015d50:	08015e1b 	.word	0x08015e1b
 8015d54:	08015e1b 	.word	0x08015e1b
 8015d58:	08015e1b 	.word	0x08015e1b
 8015d5c:	08015e1b 	.word	0x08015e1b
 8015d60:	08015e1b 	.word	0x08015e1b
 8015d64:	08015d97 	.word	0x08015d97
 8015d68:	08015dc1 	.word	0x08015dc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	2b03      	cmp	r3, #3
 8015d76:	d107      	bne.n	8015d88 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015d78:	f107 030e 	add.w	r3, r7, #14
 8015d7c:	2202      	movs	r2, #2
 8015d7e:	4619      	mov	r1, r3
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f003 f923 	bl	8018fcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015d86:	e050      	b.n	8015e2a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015d88:	6839      	ldr	r1, [r7, #0]
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f003 f8ad 	bl	8018eea <USBD_CtlError>
            ret = USBD_FAIL;
 8015d90:	2303      	movs	r3, #3
 8015d92:	75fb      	strb	r3, [r7, #23]
          break;
 8015d94:	e049      	b.n	8015e2a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015d9c:	b2db      	uxtb	r3, r3
 8015d9e:	2b03      	cmp	r3, #3
 8015da0:	d107      	bne.n	8015db2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8015da2:	693b      	ldr	r3, [r7, #16]
 8015da4:	3304      	adds	r3, #4
 8015da6:	2201      	movs	r2, #1
 8015da8:	4619      	mov	r1, r3
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f003 f90e 	bl	8018fcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015db0:	e03b      	b.n	8015e2a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015db2:	6839      	ldr	r1, [r7, #0]
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f003 f898 	bl	8018eea <USBD_CtlError>
            ret = USBD_FAIL;
 8015dba:	2303      	movs	r3, #3
 8015dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8015dbe:	e034      	b.n	8015e2a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	2b03      	cmp	r3, #3
 8015dca:	d106      	bne.n	8015dda <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	885b      	ldrh	r3, [r3, #2]
 8015dd0:	b2db      	uxtb	r3, r3
 8015dd2:	461a      	mov	r2, r3
 8015dd4:	693b      	ldr	r3, [r7, #16]
 8015dd6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015dd8:	e027      	b.n	8015e2a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015dda:	6839      	ldr	r1, [r7, #0]
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	f003 f884 	bl	8018eea <USBD_CtlError>
            ret = USBD_FAIL;
 8015de2:	2303      	movs	r3, #3
 8015de4:	75fb      	strb	r3, [r7, #23]
          break;
 8015de6:	e020      	b.n	8015e2a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015dee:	b2db      	uxtb	r3, r3
 8015df0:	2b03      	cmp	r3, #3
 8015df2:	d119      	bne.n	8015e28 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	885b      	ldrh	r3, [r3, #2]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d115      	bne.n	8015e28 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	889b      	ldrh	r3, [r3, #4]
 8015e00:	b2db      	uxtb	r3, r3
 8015e02:	4619      	mov	r1, r3
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f007 fb61 	bl	801d4cc <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	889b      	ldrh	r3, [r3, #4]
 8015e0e:	b2db      	uxtb	r3, r3
 8015e10:	4619      	mov	r1, r3
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f000 fb2e 	bl	8016474 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8015e18:	e006      	b.n	8015e28 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8015e1a:	6839      	ldr	r1, [r7, #0]
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f003 f864 	bl	8018eea <USBD_CtlError>
          ret = USBD_FAIL;
 8015e22:	2303      	movs	r3, #3
 8015e24:	75fb      	strb	r3, [r7, #23]
          break;
 8015e26:	e000      	b.n	8015e2a <USBD_MSC_Setup+0x1de>
          break;
 8015e28:	bf00      	nop
      }
      break;
 8015e2a:	e006      	b.n	8015e3a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8015e2c:	6839      	ldr	r1, [r7, #0]
 8015e2e:	6878      	ldr	r0, [r7, #4]
 8015e30:	f003 f85b 	bl	8018eea <USBD_CtlError>
      ret = USBD_FAIL;
 8015e34:	2303      	movs	r3, #3
 8015e36:	75fb      	strb	r3, [r7, #23]
      break;
 8015e38:	bf00      	nop
  }

  return (uint8_t)ret;
 8015e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3718      	adds	r7, #24
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}

08015e44 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b082      	sub	sp, #8
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	460b      	mov	r3, r1
 8015e4e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8015e50:	78fb      	ldrb	r3, [r7, #3]
 8015e52:	4619      	mov	r1, r3
 8015e54:	6878      	ldr	r0, [r7, #4]
 8015e56:	f000 f959 	bl	801610c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8015e5a:	2300      	movs	r3, #0
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3708      	adds	r7, #8
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}

08015e64 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b082      	sub	sp, #8
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	460b      	mov	r3, r1
 8015e6e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8015e70:	78fb      	ldrb	r3, [r7, #3]
 8015e72:	4619      	mov	r1, r3
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f000 f983 	bl	8016180 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8015e7a:	2300      	movs	r3, #0
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3708      	adds	r7, #8
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b084      	sub	sp, #16
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015e8c:	2181      	movs	r1, #129	@ 0x81
 8015e8e:	4812      	ldr	r0, [pc, #72]	@ (8015ed8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8015e90:	f002 f9f5 	bl	801827e <USBD_GetEpDesc>
 8015e94:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015e96:	2101      	movs	r1, #1
 8015e98:	480f      	ldr	r0, [pc, #60]	@ (8015ed8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8015e9a:	f002 f9f0 	bl	801827e <USBD_GetEpDesc>
 8015e9e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d006      	beq.n	8015eb4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	711a      	strb	r2, [r3, #4]
 8015eac:	2200      	movs	r2, #0
 8015eae:	f042 0202 	orr.w	r2, r2, #2
 8015eb2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d006      	beq.n	8015ec8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	711a      	strb	r2, [r3, #4]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	f042 0202 	orr.w	r2, r2, #2
 8015ec6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2220      	movs	r2, #32
 8015ecc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015ece:	4b02      	ldr	r3, [pc, #8]	@ (8015ed8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3710      	adds	r7, #16
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd80      	pop	{r7, pc}
 8015ed8:	20000084 	.word	0x20000084

08015edc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015ee4:	2181      	movs	r1, #129	@ 0x81
 8015ee6:	4812      	ldr	r0, [pc, #72]	@ (8015f30 <USBD_MSC_GetFSCfgDesc+0x54>)
 8015ee8:	f002 f9c9 	bl	801827e <USBD_GetEpDesc>
 8015eec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015eee:	2101      	movs	r1, #1
 8015ef0:	480f      	ldr	r0, [pc, #60]	@ (8015f30 <USBD_MSC_GetFSCfgDesc+0x54>)
 8015ef2:	f002 f9c4 	bl	801827e <USBD_GetEpDesc>
 8015ef6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d006      	beq.n	8015f0c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	2200      	movs	r2, #0
 8015f02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f06:	711a      	strb	r2, [r3, #4]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d006      	beq.n	8015f20 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015f12:	68bb      	ldr	r3, [r7, #8]
 8015f14:	2200      	movs	r2, #0
 8015f16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f1a:	711a      	strb	r2, [r3, #4]
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2220      	movs	r2, #32
 8015f24:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015f26:	4b02      	ldr	r3, [pc, #8]	@ (8015f30 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3710      	adds	r7, #16
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}
 8015f30:	20000084 	.word	0x20000084

08015f34 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b084      	sub	sp, #16
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015f3c:	2181      	movs	r1, #129	@ 0x81
 8015f3e:	4812      	ldr	r0, [pc, #72]	@ (8015f88 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8015f40:	f002 f99d 	bl	801827e <USBD_GetEpDesc>
 8015f44:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015f46:	2101      	movs	r1, #1
 8015f48:	480f      	ldr	r0, [pc, #60]	@ (8015f88 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8015f4a:	f002 f998 	bl	801827e <USBD_GetEpDesc>
 8015f4e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d006      	beq.n	8015f64 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	2200      	movs	r2, #0
 8015f5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f5e:	711a      	strb	r2, [r3, #4]
 8015f60:	2200      	movs	r2, #0
 8015f62:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015f64:	68bb      	ldr	r3, [r7, #8]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d006      	beq.n	8015f78 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015f6a:	68bb      	ldr	r3, [r7, #8]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f72:	711a      	strb	r2, [r3, #4]
 8015f74:	2200      	movs	r2, #0
 8015f76:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2220      	movs	r2, #32
 8015f7c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015f7e:	4b02      	ldr	r3, [pc, #8]	@ (8015f88 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8015f80:	4618      	mov	r0, r3
 8015f82:	3710      	adds	r7, #16
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}
 8015f88:	20000084 	.word	0x20000084

08015f8c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015f8c:	b480      	push	{r7}
 8015f8e:	b083      	sub	sp, #12
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	220a      	movs	r2, #10
 8015f98:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8015f9a:	4b03      	ldr	r3, [pc, #12]	@ (8015fa8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	370c      	adds	r7, #12
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr
 8015fa8:	200000a4 	.word	0x200000a4

08015fac <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8015fac:	b480      	push	{r7}
 8015fae:	b083      	sub	sp, #12
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
 8015fb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d101      	bne.n	8015fc0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015fbc:	2303      	movs	r3, #3
 8015fbe:	e009      	b.n	8015fd4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	33b0      	adds	r3, #176	@ 0xb0
 8015fca:	009b      	lsls	r3, r3, #2
 8015fcc:	4413      	add	r3, r2
 8015fce:	683a      	ldr	r2, [r7, #0]
 8015fd0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015fd2:	2300      	movs	r3, #0
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	370c      	adds	r7, #12
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fde:	4770      	bx	lr

08015fe0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b084      	sub	sp, #16
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	32b0      	adds	r2, #176	@ 0xb0
 8015ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ff6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d032      	beq.n	8016064 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	2200      	movs	r2, #0
 8016002:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	2200      	movs	r2, #0
 8016008:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	2200      	movs	r2, #0
 801600e:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
  hmsc->scsi_sense_head = 0U;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	2200      	movs	r2, #0
 8016016:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	2200      	movs	r2, #0
 801601e:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016028:	687a      	ldr	r2, [r7, #4]
 801602a:	33b0      	adds	r3, #176	@ 0xb0
 801602c:	009b      	lsls	r3, r3, #2
 801602e:	4413      	add	r3, r2
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	2000      	movs	r0, #0
 8016036:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8016038:	4b0c      	ldr	r3, [pc, #48]	@ (801606c <MSC_BOT_Init+0x8c>)
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	4619      	mov	r1, r3
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f007 fa44 	bl	801d4cc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8016044:	4b0a      	ldr	r3, [pc, #40]	@ (8016070 <MSC_BOT_Init+0x90>)
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	4619      	mov	r1, r3
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f007 fa3e 	bl	801d4cc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8016050:	4b06      	ldr	r3, [pc, #24]	@ (801606c <MSC_BOT_Init+0x8c>)
 8016052:	7819      	ldrb	r1, [r3, #0]
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 801605a:	231f      	movs	r3, #31
 801605c:	6878      	ldr	r0, [r7, #4]
 801605e:	f007 fafe 	bl	801d65e <USBD_LL_PrepareReceive>
 8016062:	e000      	b.n	8016066 <MSC_BOT_Init+0x86>
    return;
 8016064:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8016066:	3710      	adds	r7, #16
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}
 801606c:	200000af 	.word	0x200000af
 8016070:	200000ae 	.word	0x200000ae

08016074 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b084      	sub	sp, #16
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	32b0      	adds	r2, #176	@ 0xb0
 8016086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801608a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d01b      	beq.n	80160ca <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	2200      	movs	r2, #0
 8016096:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2201      	movs	r2, #1
 801609c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801609e:	4b0d      	ldr	r3, [pc, #52]	@ (80160d4 <MSC_BOT_Reset+0x60>)
 80160a0:	781b      	ldrb	r3, [r3, #0]
 80160a2:	4619      	mov	r1, r3
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f007 fa4f 	bl	801d548 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80160aa:	4b0b      	ldr	r3, [pc, #44]	@ (80160d8 <MSC_BOT_Reset+0x64>)
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	4619      	mov	r1, r3
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f007 fa49 	bl	801d548 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80160b6:	4b08      	ldr	r3, [pc, #32]	@ (80160d8 <MSC_BOT_Reset+0x64>)
 80160b8:	7819      	ldrb	r1, [r3, #0]
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 80160c0:	231f      	movs	r3, #31
 80160c2:	6878      	ldr	r0, [r7, #4]
 80160c4:	f007 facb 	bl	801d65e <USBD_LL_PrepareReceive>
 80160c8:	e000      	b.n	80160cc <MSC_BOT_Reset+0x58>
    return;
 80160ca:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80160cc:	3710      	adds	r7, #16
 80160ce:	46bd      	mov	sp, r7
 80160d0:	bd80      	pop	{r7, pc}
 80160d2:	bf00      	nop
 80160d4:	200000ae 	.word	0x200000ae
 80160d8:	200000af 	.word	0x200000af

080160dc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80160dc:	b480      	push	{r7}
 80160de:	b085      	sub	sp, #20
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	32b0      	adds	r2, #176	@ 0xb0
 80160ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160f2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d002      	beq.n	8016100 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	2200      	movs	r2, #0
 80160fe:	721a      	strb	r2, [r3, #8]
  }
}
 8016100:	bf00      	nop
 8016102:	3714      	adds	r7, #20
 8016104:	46bd      	mov	sp, r7
 8016106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610a:	4770      	bx	lr

0801610c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b084      	sub	sp, #16
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
 8016114:	460b      	mov	r3, r1
 8016116:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	32b0      	adds	r2, #176	@ 0xb0
 8016122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016126:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d020      	beq.n	8016170 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	7a1b      	ldrb	r3, [r3, #8]
 8016132:	2b02      	cmp	r3, #2
 8016134:	d005      	beq.n	8016142 <MSC_BOT_DataIn+0x36>
 8016136:	2b02      	cmp	r3, #2
 8016138:	db1c      	blt.n	8016174 <MSC_BOT_DataIn+0x68>
 801613a:	3b03      	subs	r3, #3
 801613c:	2b01      	cmp	r3, #1
 801613e:	d819      	bhi.n	8016174 <MSC_BOT_DataIn+0x68>
 8016140:	e011      	b.n	8016166 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 801614e:	461a      	mov	r2, r3
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 f9c9 	bl	80164e8 <SCSI_ProcessCmd>
 8016156:	4603      	mov	r3, r0
 8016158:	2b00      	cmp	r3, #0
 801615a:	da0d      	bge.n	8016178 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801615c:	2101      	movs	r1, #1
 801615e:	6878      	ldr	r0, [r7, #4]
 8016160:	f000 f90c 	bl	801637c <MSC_BOT_SendCSW>
      }
      break;
 8016164:	e008      	b.n	8016178 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8016166:	2100      	movs	r1, #0
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f000 f907 	bl	801637c <MSC_BOT_SendCSW>
      break;
 801616e:	e004      	b.n	801617a <MSC_BOT_DataIn+0x6e>
    return;
 8016170:	bf00      	nop
 8016172:	e002      	b.n	801617a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8016174:	bf00      	nop
 8016176:	e000      	b.n	801617a <MSC_BOT_DataIn+0x6e>
      break;
 8016178:	bf00      	nop
  }
}
 801617a:	3710      	adds	r7, #16
 801617c:	46bd      	mov	sp, r7
 801617e:	bd80      	pop	{r7, pc}

08016180 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b084      	sub	sp, #16
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
 8016188:	460b      	mov	r3, r1
 801618a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	32b0      	adds	r2, #176	@ 0xb0
 8016196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801619a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d01c      	beq.n	80161dc <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	7a1b      	ldrb	r3, [r3, #8]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d002      	beq.n	80161b0 <MSC_BOT_DataOut+0x30>
 80161aa:	2b01      	cmp	r3, #1
 80161ac:	d004      	beq.n	80161b8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80161ae:	e018      	b.n	80161e2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f000 f819 	bl	80161e8 <MSC_BOT_CBW_Decode>
      break;
 80161b6:	e014      	b.n	80161e2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 80161c4:	461a      	mov	r2, r3
 80161c6:	6878      	ldr	r0, [r7, #4]
 80161c8:	f000 f98e 	bl	80164e8 <SCSI_ProcessCmd>
 80161cc:	4603      	mov	r3, r0
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	da06      	bge.n	80161e0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80161d2:	2101      	movs	r1, #1
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f000 f8d1 	bl	801637c <MSC_BOT_SendCSW>
      break;
 80161da:	e001      	b.n	80161e0 <MSC_BOT_DataOut+0x60>
    return;
 80161dc:	bf00      	nop
 80161de:	e000      	b.n	80161e2 <MSC_BOT_DataOut+0x62>
      break;
 80161e0:	bf00      	nop
  }
}
 80161e2:	3710      	adds	r7, #16
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b084      	sub	sp, #16
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	32b0      	adds	r2, #176	@ 0xb0
 80161fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161fe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d079      	beq.n	80162fa <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801621e:	4b3a      	ldr	r3, [pc, #232]	@ (8016308 <MSC_BOT_CBW_Decode+0x120>)
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	4619      	mov	r1, r3
 8016224:	6878      	ldr	r0, [r7, #4]
 8016226:	f007 fa3b 	bl	801d6a0 <USBD_LL_GetRxDataSize>
 801622a:	4603      	mov	r3, r0
 801622c:	2b1f      	cmp	r3, #31
 801622e:	d114      	bne.n	801625a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8016236:	4a35      	ldr	r2, [pc, #212]	@ (801630c <MSC_BOT_CBW_Decode+0x124>)
 8016238:	4293      	cmp	r3, r2
 801623a:	d10e      	bne.n	801625a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8016242:	2b01      	cmp	r3, #1
 8016244:	d809      	bhi.n	801625a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
 801624c:	2b00      	cmp	r3, #0
 801624e:	d004      	beq.n	801625a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8016256:	2b10      	cmp	r3, #16
 8016258:	d90e      	bls.n	8016278 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016260:	2320      	movs	r3, #32
 8016262:	2205      	movs	r2, #5
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f000 fe57 	bl	8016f18 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	2202      	movs	r2, #2
 801626e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f000 f8bd 	bl	80163f0 <MSC_BOT_Abort>
 8016276:	e043      	b.n	8016300 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 8016284:	461a      	mov	r2, r3
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f000 f92e 	bl	80164e8 <SCSI_ProcessCmd>
 801628c:	4603      	mov	r3, r0
 801628e:	2b00      	cmp	r3, #0
 8016290:	da0c      	bge.n	80162ac <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	7a1b      	ldrb	r3, [r3, #8]
 8016296:	2b05      	cmp	r3, #5
 8016298:	d104      	bne.n	80162a4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801629a:	2101      	movs	r1, #1
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f000 f86d 	bl	801637c <MSC_BOT_SendCSW>
 80162a2:	e02d      	b.n	8016300 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f000 f8a3 	bl	80163f0 <MSC_BOT_Abort>
 80162aa:	e029      	b.n	8016300 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	7a1b      	ldrb	r3, [r3, #8]
 80162b0:	2b02      	cmp	r3, #2
 80162b2:	d024      	beq.n	80162fe <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80162b8:	2b01      	cmp	r3, #1
 80162ba:	d020      	beq.n	80162fe <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80162c0:	2b03      	cmp	r3, #3
 80162c2:	d01c      	beq.n	80162fe <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d009      	beq.n	80162e0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	f103 0110 	add.w	r1, r3, #16
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	461a      	mov	r2, r3
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f000 f819 	bl	8016310 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80162de:	e00f      	b.n	8016300 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d104      	bne.n	80162f2 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80162e8:	2100      	movs	r1, #0
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f000 f846 	bl	801637c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80162f0:	e006      	b.n	8016300 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f000 f87c 	bl	80163f0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80162f8:	e002      	b.n	8016300 <MSC_BOT_CBW_Decode+0x118>
    return;
 80162fa:	bf00      	nop
 80162fc:	e000      	b.n	8016300 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80162fe:	bf00      	nop
    }
  }
}
 8016300:	3710      	adds	r7, #16
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	200000af 	.word	0x200000af
 801630c:	43425355 	.word	0x43425355

08016310 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b086      	sub	sp, #24
 8016314:	af00      	add	r7, sp, #0
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	32b0      	adds	r2, #176	@ 0xb0
 8016326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801632a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801632c:	697b      	ldr	r3, [r7, #20]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d01e      	beq.n	8016370 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8016332:	697b      	ldr	r3, [r7, #20]
 8016334:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016338:	687a      	ldr	r2, [r7, #4]
 801633a:	4293      	cmp	r3, r2
 801633c:	bf28      	it	cs
 801633e:	4613      	movcs	r3, r2
 8016340:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8016342:	697b      	ldr	r3, [r7, #20]
 8016344:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	1ad2      	subs	r2, r2, r3
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8016352:	697b      	ldr	r3, [r7, #20]
 8016354:	2200      	movs	r2, #0
 8016356:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801635a:	697b      	ldr	r3, [r7, #20]
 801635c:	2204      	movs	r2, #4
 801635e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8016360:	4b05      	ldr	r3, [pc, #20]	@ (8016378 <MSC_BOT_SendData+0x68>)
 8016362:	7819      	ldrb	r1, [r3, #0]
 8016364:	693b      	ldr	r3, [r7, #16]
 8016366:	68ba      	ldr	r2, [r7, #8]
 8016368:	68f8      	ldr	r0, [r7, #12]
 801636a:	f007 f957 	bl	801d61c <USBD_LL_Transmit>
 801636e:	e000      	b.n	8016372 <MSC_BOT_SendData+0x62>
    return;
 8016370:	bf00      	nop
}
 8016372:	3718      	adds	r7, #24
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	200000ae 	.word	0x200000ae

0801637c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b084      	sub	sp, #16
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
 8016384:	460b      	mov	r3, r1
 8016386:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	32b0      	adds	r2, #176	@ 0xb0
 8016392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016396:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d01d      	beq.n	80163da <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	4a10      	ldr	r2, [pc, #64]	@ (80163e4 <MSC_BOT_SendCSW+0x68>)
 80163a2:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  hmsc->csw.bStatus = CSW_Status;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	78fa      	ldrb	r2, [r7, #3]
 80163aa:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	2200      	movs	r2, #0
 80163b2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80163b4:	4b0c      	ldr	r3, [pc, #48]	@ (80163e8 <MSC_BOT_SendCSW+0x6c>)
 80163b6:	7819      	ldrb	r1, [r3, #0]
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	f503 6203 	add.w	r2, r3, #2096	@ 0x830
 80163be:	230d      	movs	r3, #13
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f007 f92b 	bl	801d61c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80163c6:	4b09      	ldr	r3, [pc, #36]	@ (80163ec <MSC_BOT_SendCSW+0x70>)
 80163c8:	7819      	ldrb	r1, [r3, #0]
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 80163d0:	231f      	movs	r3, #31
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	f007 f943 	bl	801d65e <USBD_LL_PrepareReceive>
 80163d8:	e000      	b.n	80163dc <MSC_BOT_SendCSW+0x60>
    return;
 80163da:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80163dc:	3710      	adds	r7, #16
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	53425355 	.word	0x53425355
 80163e8:	200000ae 	.word	0x200000ae
 80163ec:	200000af 	.word	0x200000af

080163f0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b084      	sub	sp, #16
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	32b0      	adds	r2, #176	@ 0xb0
 8016402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016406:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d02a      	beq.n	8016464 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8016414:	2b00      	cmp	r3, #0
 8016416:	d10e      	bne.n	8016436 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 801641e:	2b00      	cmp	r3, #0
 8016420:	d009      	beq.n	8016436 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8016426:	2b00      	cmp	r3, #0
 8016428:	d105      	bne.n	8016436 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801642a:	4b10      	ldr	r3, [pc, #64]	@ (801646c <MSC_BOT_Abort+0x7c>)
 801642c:	781b      	ldrb	r3, [r3, #0]
 801642e:	4619      	mov	r1, r3
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f007 f86a 	bl	801d50a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8016436:	4b0e      	ldr	r3, [pc, #56]	@ (8016470 <MSC_BOT_Abort+0x80>)
 8016438:	781b      	ldrb	r3, [r3, #0]
 801643a:	4619      	mov	r1, r3
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f007 f864 	bl	801d50a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	7a5b      	ldrb	r3, [r3, #9]
 8016446:	2b02      	cmp	r3, #2
 8016448:	d10d      	bne.n	8016466 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801644a:	4b09      	ldr	r3, [pc, #36]	@ (8016470 <MSC_BOT_Abort+0x80>)
 801644c:	781b      	ldrb	r3, [r3, #0]
 801644e:	4619      	mov	r1, r3
 8016450:	6878      	ldr	r0, [r7, #4]
 8016452:	f007 f85a 	bl	801d50a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8016456:	4b05      	ldr	r3, [pc, #20]	@ (801646c <MSC_BOT_Abort+0x7c>)
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	4619      	mov	r1, r3
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f007 f854 	bl	801d50a <USBD_LL_StallEP>
 8016462:	e000      	b.n	8016466 <MSC_BOT_Abort+0x76>
    return;
 8016464:	bf00      	nop
  }
}
 8016466:	3710      	adds	r7, #16
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}
 801646c:	200000af 	.word	0x200000af
 8016470:	200000ae 	.word	0x200000ae

08016474 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b084      	sub	sp, #16
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	460b      	mov	r3, r1
 801647e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	32b0      	adds	r2, #176	@ 0xb0
 801648a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801648e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d01d      	beq.n	80164d2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	7a5b      	ldrb	r3, [r3, #9]
 801649a:	2b02      	cmp	r3, #2
 801649c:	d10c      	bne.n	80164b8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801649e:	4b10      	ldr	r3, [pc, #64]	@ (80164e0 <MSC_BOT_CplClrFeature+0x6c>)
 80164a0:	781b      	ldrb	r3, [r3, #0]
 80164a2:	4619      	mov	r1, r3
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f007 f830 	bl	801d50a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80164aa:	4b0e      	ldr	r3, [pc, #56]	@ (80164e4 <MSC_BOT_CplClrFeature+0x70>)
 80164ac:	781b      	ldrb	r3, [r3, #0]
 80164ae:	4619      	mov	r1, r3
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f007 f82a 	bl	801d50a <USBD_LL_StallEP>
 80164b6:	e00f      	b.n	80164d8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80164b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	da0a      	bge.n	80164d6 <MSC_BOT_CplClrFeature+0x62>
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	7a5b      	ldrb	r3, [r3, #9]
 80164c4:	2b01      	cmp	r3, #1
 80164c6:	d006      	beq.n	80164d6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80164c8:	2101      	movs	r1, #1
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	f7ff ff56 	bl	801637c <MSC_BOT_SendCSW>
 80164d0:	e002      	b.n	80164d8 <MSC_BOT_CplClrFeature+0x64>
    return;
 80164d2:	bf00      	nop
 80164d4:	e000      	b.n	80164d8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80164d6:	bf00      	nop
  }
}
 80164d8:	3710      	adds	r7, #16
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}
 80164de:	bf00      	nop
 80164e0:	200000ae 	.word	0x200000ae
 80164e4:	200000af 	.word	0x200000af

080164e8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b086      	sub	sp, #24
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	60f8      	str	r0, [r7, #12]
 80164f0:	460b      	mov	r3, r1
 80164f2:	607a      	str	r2, [r7, #4]
 80164f4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	32b0      	adds	r2, #176	@ 0xb0
 8016500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016504:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8016506:	693b      	ldr	r3, [r7, #16]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d102      	bne.n	8016512 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 801650c:	f04f 33ff 	mov.w	r3, #4294967295
 8016510:	e168      	b.n	80167e4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	781b      	ldrb	r3, [r3, #0]
 8016516:	2baa      	cmp	r3, #170	@ 0xaa
 8016518:	f000 8144 	beq.w	80167a4 <SCSI_ProcessCmd+0x2bc>
 801651c:	2baa      	cmp	r3, #170	@ 0xaa
 801651e:	f300 8153 	bgt.w	80167c8 <SCSI_ProcessCmd+0x2e0>
 8016522:	2ba8      	cmp	r3, #168	@ 0xa8
 8016524:	f000 812c 	beq.w	8016780 <SCSI_ProcessCmd+0x298>
 8016528:	2ba8      	cmp	r3, #168	@ 0xa8
 801652a:	f300 814d 	bgt.w	80167c8 <SCSI_ProcessCmd+0x2e0>
 801652e:	2b5a      	cmp	r3, #90	@ 0x5a
 8016530:	f300 80c0 	bgt.w	80166b4 <SCSI_ProcessCmd+0x1cc>
 8016534:	2b00      	cmp	r3, #0
 8016536:	f2c0 8147 	blt.w	80167c8 <SCSI_ProcessCmd+0x2e0>
 801653a:	2b5a      	cmp	r3, #90	@ 0x5a
 801653c:	f200 8144 	bhi.w	80167c8 <SCSI_ProcessCmd+0x2e0>
 8016540:	a201      	add	r2, pc, #4	@ (adr r2, 8016548 <SCSI_ProcessCmd+0x60>)
 8016542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016546:	bf00      	nop
 8016548:	080166bb 	.word	0x080166bb
 801654c:	080167c9 	.word	0x080167c9
 8016550:	080167c9 	.word	0x080167c9
 8016554:	080166cd 	.word	0x080166cd
 8016558:	080167c9 	.word	0x080167c9
 801655c:	080167c9 	.word	0x080167c9
 8016560:	080167c9 	.word	0x080167c9
 8016564:	080167c9 	.word	0x080167c9
 8016568:	080167c9 	.word	0x080167c9
 801656c:	080167c9 	.word	0x080167c9
 8016570:	080167c9 	.word	0x080167c9
 8016574:	080167c9 	.word	0x080167c9
 8016578:	080167c9 	.word	0x080167c9
 801657c:	080167c9 	.word	0x080167c9
 8016580:	080167c9 	.word	0x080167c9
 8016584:	080167c9 	.word	0x080167c9
 8016588:	080167c9 	.word	0x080167c9
 801658c:	080167c9 	.word	0x080167c9
 8016590:	080166df 	.word	0x080166df
 8016594:	080167c9 	.word	0x080167c9
 8016598:	080167c9 	.word	0x080167c9
 801659c:	080167c9 	.word	0x080167c9
 80165a0:	080167c9 	.word	0x080167c9
 80165a4:	080167c9 	.word	0x080167c9
 80165a8:	080167c9 	.word	0x080167c9
 80165ac:	080167c9 	.word	0x080167c9
 80165b0:	08016715 	.word	0x08016715
 80165b4:	080166f1 	.word	0x080166f1
 80165b8:	080167c9 	.word	0x080167c9
 80165bc:	080167c9 	.word	0x080167c9
 80165c0:	08016703 	.word	0x08016703
 80165c4:	080167c9 	.word	0x080167c9
 80165c8:	080167c9 	.word	0x080167c9
 80165cc:	080167c9 	.word	0x080167c9
 80165d0:	080167c9 	.word	0x080167c9
 80165d4:	08016739 	.word	0x08016739
 80165d8:	080167c9 	.word	0x080167c9
 80165dc:	0801674b 	.word	0x0801674b
 80165e0:	080167c9 	.word	0x080167c9
 80165e4:	080167c9 	.word	0x080167c9
 80165e8:	0801676f 	.word	0x0801676f
 80165ec:	080167c9 	.word	0x080167c9
 80165f0:	08016793 	.word	0x08016793
 80165f4:	080167c9 	.word	0x080167c9
 80165f8:	080167c9 	.word	0x080167c9
 80165fc:	080167c9 	.word	0x080167c9
 8016600:	080167c9 	.word	0x080167c9
 8016604:	080167b7 	.word	0x080167b7
 8016608:	080167c9 	.word	0x080167c9
 801660c:	080167c9 	.word	0x080167c9
 8016610:	080167c9 	.word	0x080167c9
 8016614:	080167c9 	.word	0x080167c9
 8016618:	080167c9 	.word	0x080167c9
 801661c:	080167c9 	.word	0x080167c9
 8016620:	080167c9 	.word	0x080167c9
 8016624:	080167c9 	.word	0x080167c9
 8016628:	080167c9 	.word	0x080167c9
 801662c:	080167c9 	.word	0x080167c9
 8016630:	080167c9 	.word	0x080167c9
 8016634:	080167c9 	.word	0x080167c9
 8016638:	080167c9 	.word	0x080167c9
 801663c:	080167c9 	.word	0x080167c9
 8016640:	080167c9 	.word	0x080167c9
 8016644:	080167c9 	.word	0x080167c9
 8016648:	080167c9 	.word	0x080167c9
 801664c:	080167c9 	.word	0x080167c9
 8016650:	080167c9 	.word	0x080167c9
 8016654:	080167c9 	.word	0x080167c9
 8016658:	080167c9 	.word	0x080167c9
 801665c:	080167c9 	.word	0x080167c9
 8016660:	080167c9 	.word	0x080167c9
 8016664:	080167c9 	.word	0x080167c9
 8016668:	080167c9 	.word	0x080167c9
 801666c:	080167c9 	.word	0x080167c9
 8016670:	080167c9 	.word	0x080167c9
 8016674:	080167c9 	.word	0x080167c9
 8016678:	080167c9 	.word	0x080167c9
 801667c:	080167c9 	.word	0x080167c9
 8016680:	080167c9 	.word	0x080167c9
 8016684:	080167c9 	.word	0x080167c9
 8016688:	080167c9 	.word	0x080167c9
 801668c:	080167c9 	.word	0x080167c9
 8016690:	080167c9 	.word	0x080167c9
 8016694:	080167c9 	.word	0x080167c9
 8016698:	080167c9 	.word	0x080167c9
 801669c:	080167c9 	.word	0x080167c9
 80166a0:	080167c9 	.word	0x080167c9
 80166a4:	080167c9 	.word	0x080167c9
 80166a8:	080167c9 	.word	0x080167c9
 80166ac:	080167c9 	.word	0x080167c9
 80166b0:	08016727 	.word	0x08016727
 80166b4:	2b9e      	cmp	r3, #158	@ 0x9e
 80166b6:	d051      	beq.n	801675c <SCSI_ProcessCmd+0x274>
 80166b8:	e086      	b.n	80167c8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80166ba:	7afb      	ldrb	r3, [r7, #11]
 80166bc:	687a      	ldr	r2, [r7, #4]
 80166be:	4619      	mov	r1, r3
 80166c0:	68f8      	ldr	r0, [r7, #12]
 80166c2:	f000 f893 	bl	80167ec <SCSI_TestUnitReady>
 80166c6:	4603      	mov	r3, r0
 80166c8:	75fb      	strb	r3, [r7, #23]
      break;
 80166ca:	e089      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80166cc:	7afb      	ldrb	r3, [r7, #11]
 80166ce:	687a      	ldr	r2, [r7, #4]
 80166d0:	4619      	mov	r1, r3
 80166d2:	68f8      	ldr	r0, [r7, #12]
 80166d4:	f000 fb9a 	bl	8016e0c <SCSI_RequestSense>
 80166d8:	4603      	mov	r3, r0
 80166da:	75fb      	strb	r3, [r7, #23]
      break;
 80166dc:	e080      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80166de:	7afb      	ldrb	r3, [r7, #11]
 80166e0:	687a      	ldr	r2, [r7, #4]
 80166e2:	4619      	mov	r1, r3
 80166e4:	68f8      	ldr	r0, [r7, #12]
 80166e6:	f000 f8db 	bl	80168a0 <SCSI_Inquiry>
 80166ea:	4603      	mov	r3, r0
 80166ec:	75fb      	strb	r3, [r7, #23]
      break;
 80166ee:	e077      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80166f0:	7afb      	ldrb	r3, [r7, #11]
 80166f2:	687a      	ldr	r2, [r7, #4]
 80166f4:	4619      	mov	r1, r3
 80166f6:	68f8      	ldr	r0, [r7, #12]
 80166f8:	f000 fc5c 	bl	8016fb4 <SCSI_StartStopUnit>
 80166fc:	4603      	mov	r3, r0
 80166fe:	75fb      	strb	r3, [r7, #23]
      break;
 8016700:	e06e      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8016702:	7afb      	ldrb	r3, [r7, #11]
 8016704:	687a      	ldr	r2, [r7, #4]
 8016706:	4619      	mov	r1, r3
 8016708:	68f8      	ldr	r0, [r7, #12]
 801670a:	f000 fca8 	bl	801705e <SCSI_AllowPreventRemovable>
 801670e:	4603      	mov	r3, r0
 8016710:	75fb      	strb	r3, [r7, #23]
      break;
 8016712:	e065      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8016714:	7afb      	ldrb	r3, [r7, #11]
 8016716:	687a      	ldr	r2, [r7, #4]
 8016718:	4619      	mov	r1, r3
 801671a:	68f8      	ldr	r0, [r7, #12]
 801671c:	f000 faea 	bl	8016cf4 <SCSI_ModeSense6>
 8016720:	4603      	mov	r3, r0
 8016722:	75fb      	strb	r3, [r7, #23]
      break;
 8016724:	e05c      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8016726:	7afb      	ldrb	r3, [r7, #11]
 8016728:	687a      	ldr	r2, [r7, #4]
 801672a:	4619      	mov	r1, r3
 801672c:	68f8      	ldr	r0, [r7, #12]
 801672e:	f000 fb27 	bl	8016d80 <SCSI_ModeSense10>
 8016732:	4603      	mov	r3, r0
 8016734:	75fb      	strb	r3, [r7, #23]
      break;
 8016736:	e053      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8016738:	7afb      	ldrb	r3, [r7, #11]
 801673a:	687a      	ldr	r2, [r7, #4]
 801673c:	4619      	mov	r1, r3
 801673e:	68f8      	ldr	r0, [r7, #12]
 8016740:	f000 fa5c 	bl	8016bfc <SCSI_ReadFormatCapacity>
 8016744:	4603      	mov	r3, r0
 8016746:	75fb      	strb	r3, [r7, #23]
      break;
 8016748:	e04a      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801674a:	7afb      	ldrb	r3, [r7, #11]
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	4619      	mov	r1, r3
 8016750:	68f8      	ldr	r0, [r7, #12]
 8016752:	f000 f921 	bl	8016998 <SCSI_ReadCapacity10>
 8016756:	4603      	mov	r3, r0
 8016758:	75fb      	strb	r3, [r7, #23]
      break;
 801675a:	e041      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801675c:	7afb      	ldrb	r3, [r7, #11]
 801675e:	687a      	ldr	r2, [r7, #4]
 8016760:	4619      	mov	r1, r3
 8016762:	68f8      	ldr	r0, [r7, #12]
 8016764:	f000 f996 	bl	8016a94 <SCSI_ReadCapacity16>
 8016768:	4603      	mov	r3, r0
 801676a:	75fb      	strb	r3, [r7, #23]
      break;
 801676c:	e038      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801676e:	7afb      	ldrb	r3, [r7, #11]
 8016770:	687a      	ldr	r2, [r7, #4]
 8016772:	4619      	mov	r1, r3
 8016774:	68f8      	ldr	r0, [r7, #12]
 8016776:	f000 fc9f 	bl	80170b8 <SCSI_Read10>
 801677a:	4603      	mov	r3, r0
 801677c:	75fb      	strb	r3, [r7, #23]
      break;
 801677e:	e02f      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8016780:	7afb      	ldrb	r3, [r7, #11]
 8016782:	687a      	ldr	r2, [r7, #4]
 8016784:	4619      	mov	r1, r3
 8016786:	68f8      	ldr	r0, [r7, #12]
 8016788:	f000 fd40 	bl	801720c <SCSI_Read12>
 801678c:	4603      	mov	r3, r0
 801678e:	75fb      	strb	r3, [r7, #23]
      break;
 8016790:	e026      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8016792:	7afb      	ldrb	r3, [r7, #11]
 8016794:	687a      	ldr	r2, [r7, #4]
 8016796:	4619      	mov	r1, r3
 8016798:	68f8      	ldr	r0, [r7, #12]
 801679a:	f000 fdeb 	bl	8017374 <SCSI_Write10>
 801679e:	4603      	mov	r3, r0
 80167a0:	75fb      	strb	r3, [r7, #23]
      break;
 80167a2:	e01d      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80167a4:	7afb      	ldrb	r3, [r7, #11]
 80167a6:	687a      	ldr	r2, [r7, #4]
 80167a8:	4619      	mov	r1, r3
 80167aa:	68f8      	ldr	r0, [r7, #12]
 80167ac:	f000 feb8 	bl	8017520 <SCSI_Write12>
 80167b0:	4603      	mov	r3, r0
 80167b2:	75fb      	strb	r3, [r7, #23]
      break;
 80167b4:	e014      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80167b6:	7afb      	ldrb	r3, [r7, #11]
 80167b8:	687a      	ldr	r2, [r7, #4]
 80167ba:	4619      	mov	r1, r3
 80167bc:	68f8      	ldr	r0, [r7, #12]
 80167be:	f000 ff95 	bl	80176ec <SCSI_Verify10>
 80167c2:	4603      	mov	r3, r0
 80167c4:	75fb      	strb	r3, [r7, #23]
      break;
 80167c6:	e00b      	b.n	80167e0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80167c8:	7af9      	ldrb	r1, [r7, #11]
 80167ca:	2320      	movs	r3, #32
 80167cc:	2205      	movs	r2, #5
 80167ce:	68f8      	ldr	r0, [r7, #12]
 80167d0:	f000 fba2 	bl	8016f18 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	2202      	movs	r2, #2
 80167d8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80167da:	23ff      	movs	r3, #255	@ 0xff
 80167dc:	75fb      	strb	r3, [r7, #23]
      break;
 80167de:	bf00      	nop
  }

  return ret;
 80167e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80167e4:	4618      	mov	r0, r3
 80167e6:	3718      	adds	r7, #24
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}

080167ec <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b086      	sub	sp, #24
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	60f8      	str	r0, [r7, #12]
 80167f4:	460b      	mov	r3, r1
 80167f6:	607a      	str	r2, [r7, #4]
 80167f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	32b0      	adds	r2, #176	@ 0xb0
 8016804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016808:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801680a:	697b      	ldr	r3, [r7, #20]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d102      	bne.n	8016816 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8016810:	f04f 33ff 	mov.w	r3, #4294967295
 8016814:	e03f      	b.n	8016896 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8016816:	697b      	ldr	r3, [r7, #20]
 8016818:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801681c:	2b00      	cmp	r3, #0
 801681e:	d00a      	beq.n	8016836 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016820:	697b      	ldr	r3, [r7, #20]
 8016822:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016826:	2320      	movs	r3, #32
 8016828:	2205      	movs	r2, #5
 801682a:	68f8      	ldr	r0, [r7, #12]
 801682c:	f000 fb74 	bl	8016f18 <SCSI_SenseCode>

    return -1;
 8016830:	f04f 33ff 	mov.w	r3, #4294967295
 8016834:	e02f      	b.n	8016896 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8016836:	697b      	ldr	r3, [r7, #20]
 8016838:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 801683c:	2b02      	cmp	r3, #2
 801683e:	d10b      	bne.n	8016858 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016840:	7af9      	ldrb	r1, [r7, #11]
 8016842:	233a      	movs	r3, #58	@ 0x3a
 8016844:	2202      	movs	r2, #2
 8016846:	68f8      	ldr	r0, [r7, #12]
 8016848:	f000 fb66 	bl	8016f18 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	2205      	movs	r2, #5
 8016850:	721a      	strb	r2, [r3, #8]
    return -1;
 8016852:	f04f 33ff 	mov.w	r3, #4294967295
 8016856:	e01e      	b.n	8016896 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801685e:	68fa      	ldr	r2, [r7, #12]
 8016860:	33b0      	adds	r3, #176	@ 0xb0
 8016862:	009b      	lsls	r3, r3, #2
 8016864:	4413      	add	r3, r2
 8016866:	685b      	ldr	r3, [r3, #4]
 8016868:	689b      	ldr	r3, [r3, #8]
 801686a:	7afa      	ldrb	r2, [r7, #11]
 801686c:	4610      	mov	r0, r2
 801686e:	4798      	blx	r3
 8016870:	4603      	mov	r3, r0
 8016872:	2b00      	cmp	r3, #0
 8016874:	d00b      	beq.n	801688e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016876:	7af9      	ldrb	r1, [r7, #11]
 8016878:	233a      	movs	r3, #58	@ 0x3a
 801687a:	2202      	movs	r2, #2
 801687c:	68f8      	ldr	r0, [r7, #12]
 801687e:	f000 fb4b 	bl	8016f18 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8016882:	697b      	ldr	r3, [r7, #20]
 8016884:	2205      	movs	r2, #5
 8016886:	721a      	strb	r2, [r3, #8]

    return -1;
 8016888:	f04f 33ff 	mov.w	r3, #4294967295
 801688c:	e003      	b.n	8016896 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 801688e:	697b      	ldr	r3, [r7, #20]
 8016890:	2200      	movs	r2, #0
 8016892:	60da      	str	r2, [r3, #12]

  return 0;
 8016894:	2300      	movs	r3, #0
}
 8016896:	4618      	mov	r0, r3
 8016898:	3718      	adds	r7, #24
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
	...

080168a0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b088      	sub	sp, #32
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	60f8      	str	r0, [r7, #12]
 80168a8:	460b      	mov	r3, r1
 80168aa:	607a      	str	r2, [r7, #4]
 80168ac:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	32b0      	adds	r2, #176	@ 0xb0
 80168b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168bc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80168be:	69bb      	ldr	r3, [r7, #24]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d102      	bne.n	80168ca <SCSI_Inquiry+0x2a>
  {
    return -1;
 80168c4:	f04f 33ff 	mov.w	r3, #4294967295
 80168c8:	e05e      	b.n	8016988 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80168ca:	69bb      	ldr	r3, [r7, #24]
 80168cc:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d10a      	bne.n	80168ea <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80168d4:	69bb      	ldr	r3, [r7, #24]
 80168d6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80168da:	2320      	movs	r3, #32
 80168dc:	2205      	movs	r2, #5
 80168de:	68f8      	ldr	r0, [r7, #12]
 80168e0:	f000 fb1a 	bl	8016f18 <SCSI_SenseCode>
    return -1;
 80168e4:	f04f 33ff 	mov.w	r3, #4294967295
 80168e8:	e04e      	b.n	8016988 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	3301      	adds	r3, #1
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	f003 0301 	and.w	r3, r3, #1
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d020      	beq.n	801693a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	3302      	adds	r3, #2
 80168fc:	781b      	ldrb	r3, [r3, #0]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d105      	bne.n	801690e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8016902:	2206      	movs	r2, #6
 8016904:	4922      	ldr	r1, [pc, #136]	@ (8016990 <SCSI_Inquiry+0xf0>)
 8016906:	69b8      	ldr	r0, [r7, #24]
 8016908:	f001 f876 	bl	80179f8 <SCSI_UpdateBotData>
 801690c:	e03b      	b.n	8016986 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	3302      	adds	r3, #2
 8016912:	781b      	ldrb	r3, [r3, #0]
 8016914:	2b80      	cmp	r3, #128	@ 0x80
 8016916:	d105      	bne.n	8016924 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8016918:	2208      	movs	r2, #8
 801691a:	491e      	ldr	r1, [pc, #120]	@ (8016994 <SCSI_Inquiry+0xf4>)
 801691c:	69b8      	ldr	r0, [r7, #24]
 801691e:	f001 f86b 	bl	80179f8 <SCSI_UpdateBotData>
 8016922:	e030      	b.n	8016986 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8016924:	69bb      	ldr	r3, [r7, #24]
 8016926:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801692a:	2324      	movs	r3, #36	@ 0x24
 801692c:	2205      	movs	r2, #5
 801692e:	68f8      	ldr	r0, [r7, #12]
 8016930:	f000 faf2 	bl	8016f18 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8016934:	f04f 33ff 	mov.w	r3, #4294967295
 8016938:	e026      	b.n	8016988 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016940:	68fa      	ldr	r2, [r7, #12]
 8016942:	33b0      	adds	r3, #176	@ 0xb0
 8016944:	009b      	lsls	r3, r3, #2
 8016946:	4413      	add	r3, r2
 8016948:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801694a:	69d9      	ldr	r1, [r3, #28]
 801694c:	7afa      	ldrb	r2, [r7, #11]
 801694e:	4613      	mov	r3, r2
 8016950:	00db      	lsls	r3, r3, #3
 8016952:	4413      	add	r3, r2
 8016954:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8016956:	440b      	add	r3, r1
 8016958:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801695a:	697b      	ldr	r3, [r7, #20]
 801695c:	3304      	adds	r3, #4
 801695e:	781b      	ldrb	r3, [r3, #0]
 8016960:	3305      	adds	r3, #5
 8016962:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	3304      	adds	r3, #4
 8016968:	781b      	ldrb	r3, [r3, #0]
 801696a:	461a      	mov	r2, r3
 801696c:	8bfb      	ldrh	r3, [r7, #30]
 801696e:	4293      	cmp	r3, r2
 8016970:	d303      	bcc.n	801697a <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	3304      	adds	r3, #4
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801697a:	8bfb      	ldrh	r3, [r7, #30]
 801697c:	461a      	mov	r2, r3
 801697e:	6979      	ldr	r1, [r7, #20]
 8016980:	69b8      	ldr	r0, [r7, #24]
 8016982:	f001 f839 	bl	80179f8 <SCSI_UpdateBotData>
  }

  return 0;
 8016986:	2300      	movs	r3, #0
}
 8016988:	4618      	mov	r0, r3
 801698a:	3720      	adds	r7, #32
 801698c:	46bd      	mov	sp, r7
 801698e:	bd80      	pop	{r7, pc}
 8016990:	200000b0 	.word	0x200000b0
 8016994:	200000b8 	.word	0x200000b8

08016998 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b086      	sub	sp, #24
 801699c:	af00      	add	r7, sp, #0
 801699e:	60f8      	str	r0, [r7, #12]
 80169a0:	460b      	mov	r3, r1
 80169a2:	607a      	str	r2, [r7, #4]
 80169a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	32b0      	adds	r2, #176	@ 0xb0
 80169b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d102      	bne.n	80169c2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80169bc:	f04f 33ff 	mov.w	r3, #4294967295
 80169c0:	e064      	b.n	8016a8c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80169c8:	68fa      	ldr	r2, [r7, #12]
 80169ca:	33b0      	adds	r3, #176	@ 0xb0
 80169cc:	009b      	lsls	r3, r3, #2
 80169ce:	4413      	add	r3, r2
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	685b      	ldr	r3, [r3, #4]
 80169d4:	697a      	ldr	r2, [r7, #20]
 80169d6:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 80169da:	697a      	ldr	r2, [r7, #20]
 80169dc:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 80169e0:	7af8      	ldrb	r0, [r7, #11]
 80169e2:	4798      	blx	r3
 80169e4:	4603      	mov	r3, r0
 80169e6:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80169e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d104      	bne.n	80169fa <SCSI_ReadCapacity10+0x62>
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80169f6:	2b02      	cmp	r3, #2
 80169f8:	d108      	bne.n	8016a0c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80169fa:	7af9      	ldrb	r1, [r7, #11]
 80169fc:	233a      	movs	r3, #58	@ 0x3a
 80169fe:	2202      	movs	r2, #2
 8016a00:	68f8      	ldr	r0, [r7, #12]
 8016a02:	f000 fa89 	bl	8016f18 <SCSI_SenseCode>
    return -1;
 8016a06:	f04f 33ff 	mov.w	r3, #4294967295
 8016a0a:	e03f      	b.n	8016a8c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016a0c:	697b      	ldr	r3, [r7, #20]
 8016a0e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016a12:	3b01      	subs	r3, #1
 8016a14:	0e1b      	lsrs	r3, r3, #24
 8016a16:	b2da      	uxtb	r2, r3
 8016a18:	697b      	ldr	r3, [r7, #20]
 8016a1a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016a1c:	697b      	ldr	r3, [r7, #20]
 8016a1e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016a22:	3b01      	subs	r3, #1
 8016a24:	0c1b      	lsrs	r3, r3, #16
 8016a26:	b2da      	uxtb	r2, r3
 8016a28:	697b      	ldr	r3, [r7, #20]
 8016a2a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016a32:	3b01      	subs	r3, #1
 8016a34:	0a1b      	lsrs	r3, r3, #8
 8016a36:	b2da      	uxtb	r2, r3
 8016a38:	697b      	ldr	r3, [r7, #20]
 8016a3a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016a3c:	697b      	ldr	r3, [r7, #20]
 8016a3e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016a42:	b2db      	uxtb	r3, r3
 8016a44:	3b01      	subs	r3, #1
 8016a46:	b2da      	uxtb	r2, r3
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016a4c:	697b      	ldr	r3, [r7, #20]
 8016a4e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016a52:	161b      	asrs	r3, r3, #24
 8016a54:	b2da      	uxtb	r2, r3
 8016a56:	697b      	ldr	r3, [r7, #20]
 8016a58:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016a60:	141b      	asrs	r3, r3, #16
 8016a62:	b2da      	uxtb	r2, r3
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016a68:	697b      	ldr	r3, [r7, #20]
 8016a6a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016a6e:	0a1b      	lsrs	r3, r3, #8
 8016a70:	b29b      	uxth	r3, r3
 8016a72:	b2da      	uxtb	r2, r3
 8016a74:	697b      	ldr	r3, [r7, #20]
 8016a76:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8016a78:	697b      	ldr	r3, [r7, #20]
 8016a7a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016a7e:	b2da      	uxtb	r2, r3
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	2208      	movs	r2, #8
 8016a88:	60da      	str	r2, [r3, #12]

  return 0;
 8016a8a:	2300      	movs	r3, #0

}
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	3718      	adds	r7, #24
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b088      	sub	sp, #32
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	60f8      	str	r0, [r7, #12]
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	607a      	str	r2, [r7, #4]
 8016aa0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	32b0      	adds	r2, #176	@ 0xb0
 8016aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ab0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016ab2:	69bb      	ldr	r3, [r7, #24]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d102      	bne.n	8016abe <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8016ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8016abc:	e09a      	b.n	8016bf4 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016ac4:	68fa      	ldr	r2, [r7, #12]
 8016ac6:	33b0      	adds	r3, #176	@ 0xb0
 8016ac8:	009b      	lsls	r3, r3, #2
 8016aca:	4413      	add	r3, r2
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	685b      	ldr	r3, [r3, #4]
 8016ad0:	69ba      	ldr	r2, [r7, #24]
 8016ad2:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016ad6:	69ba      	ldr	r2, [r7, #24]
 8016ad8:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016adc:	7af8      	ldrb	r0, [r7, #11]
 8016ade:	4798      	blx	r3
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016ae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d104      	bne.n	8016af6 <SCSI_ReadCapacity16+0x62>
 8016aec:	69bb      	ldr	r3, [r7, #24]
 8016aee:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016af2:	2b02      	cmp	r3, #2
 8016af4:	d108      	bne.n	8016b08 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016af6:	7af9      	ldrb	r1, [r7, #11]
 8016af8:	233a      	movs	r3, #58	@ 0x3a
 8016afa:	2202      	movs	r2, #2
 8016afc:	68f8      	ldr	r0, [r7, #12]
 8016afe:	f000 fa0b 	bl	8016f18 <SCSI_SenseCode>
    return -1;
 8016b02:	f04f 33ff 	mov.w	r3, #4294967295
 8016b06:	e075      	b.n	8016bf4 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	330a      	adds	r3, #10
 8016b0c:	781b      	ldrb	r3, [r3, #0]
 8016b0e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	330b      	adds	r3, #11
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016b18:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	330c      	adds	r3, #12
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016b22:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016b24:	687a      	ldr	r2, [r7, #4]
 8016b26:	320d      	adds	r2, #13
 8016b28:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016b2a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016b2c:	69bb      	ldr	r3, [r7, #24]
 8016b2e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016b30:	2300      	movs	r3, #0
 8016b32:	61fb      	str	r3, [r7, #28]
 8016b34:	e008      	b.n	8016b48 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8016b36:	69ba      	ldr	r2, [r7, #24]
 8016b38:	69fb      	ldr	r3, [r7, #28]
 8016b3a:	4413      	add	r3, r2
 8016b3c:	3310      	adds	r3, #16
 8016b3e:	2200      	movs	r2, #0
 8016b40:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	3301      	adds	r3, #1
 8016b46:	61fb      	str	r3, [r7, #28]
 8016b48:	69bb      	ldr	r3, [r7, #24]
 8016b4a:	68db      	ldr	r3, [r3, #12]
 8016b4c:	69fa      	ldr	r2, [r7, #28]
 8016b4e:	429a      	cmp	r2, r3
 8016b50:	d3f1      	bcc.n	8016b36 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016b52:	69bb      	ldr	r3, [r7, #24]
 8016b54:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016b58:	3b01      	subs	r3, #1
 8016b5a:	0e1b      	lsrs	r3, r3, #24
 8016b5c:	b2da      	uxtb	r2, r3
 8016b5e:	69bb      	ldr	r3, [r7, #24]
 8016b60:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016b62:	69bb      	ldr	r3, [r7, #24]
 8016b64:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016b68:	3b01      	subs	r3, #1
 8016b6a:	0c1b      	lsrs	r3, r3, #16
 8016b6c:	b2da      	uxtb	r2, r3
 8016b6e:	69bb      	ldr	r3, [r7, #24]
 8016b70:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016b72:	69bb      	ldr	r3, [r7, #24]
 8016b74:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016b78:	3b01      	subs	r3, #1
 8016b7a:	0a1b      	lsrs	r3, r3, #8
 8016b7c:	b2da      	uxtb	r2, r3
 8016b7e:	69bb      	ldr	r3, [r7, #24]
 8016b80:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016b82:	69bb      	ldr	r3, [r7, #24]
 8016b84:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016b88:	b2db      	uxtb	r3, r3
 8016b8a:	3b01      	subs	r3, #1
 8016b8c:	b2da      	uxtb	r2, r3
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016b92:	69bb      	ldr	r3, [r7, #24]
 8016b94:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b98:	161b      	asrs	r3, r3, #24
 8016b9a:	b2da      	uxtb	r2, r3
 8016b9c:	69bb      	ldr	r3, [r7, #24]
 8016b9e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016ba0:	69bb      	ldr	r3, [r7, #24]
 8016ba2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016ba6:	141b      	asrs	r3, r3, #16
 8016ba8:	b2da      	uxtb	r2, r3
 8016baa:	69bb      	ldr	r3, [r7, #24]
 8016bac:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016bae:	69bb      	ldr	r3, [r7, #24]
 8016bb0:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016bb4:	0a1b      	lsrs	r3, r3, #8
 8016bb6:	b29b      	uxth	r3, r3
 8016bb8:	b2da      	uxtb	r2, r3
 8016bba:	69bb      	ldr	r3, [r7, #24]
 8016bbc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8016bbe:	69bb      	ldr	r3, [r7, #24]
 8016bc0:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016bc4:	b2da      	uxtb	r2, r3
 8016bc6:	69bb      	ldr	r3, [r7, #24]
 8016bc8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	330a      	adds	r3, #10
 8016bce:	781b      	ldrb	r3, [r3, #0]
 8016bd0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	330b      	adds	r3, #11
 8016bd6:	781b      	ldrb	r3, [r3, #0]
 8016bd8:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bda:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	330c      	adds	r3, #12
 8016be0:	781b      	ldrb	r3, [r3, #0]
 8016be2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016be4:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016be6:	687a      	ldr	r2, [r7, #4]
 8016be8:	320d      	adds	r2, #13
 8016bea:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016bec:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bee:	69bb      	ldr	r3, [r7, #24]
 8016bf0:	60da      	str	r2, [r3, #12]

  return 0;
 8016bf2:	2300      	movs	r3, #0
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3720      	adds	r7, #32
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b088      	sub	sp, #32
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	60f8      	str	r0, [r7, #12]
 8016c04:	460b      	mov	r3, r1
 8016c06:	607a      	str	r2, [r7, #4]
 8016c08:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	32b0      	adds	r2, #176	@ 0xb0
 8016c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c18:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016c1a:	69bb      	ldr	r3, [r7, #24]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d102      	bne.n	8016c26 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8016c20:	f04f 33ff 	mov.w	r3, #4294967295
 8016c24:	e061      	b.n	8016cea <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016c2c:	68fa      	ldr	r2, [r7, #12]
 8016c2e:	33b0      	adds	r3, #176	@ 0xb0
 8016c30:	009b      	lsls	r3, r3, #2
 8016c32:	4413      	add	r3, r2
 8016c34:	685b      	ldr	r3, [r3, #4]
 8016c36:	685b      	ldr	r3, [r3, #4]
 8016c38:	f107 0214 	add.w	r2, r7, #20
 8016c3c:	f107 0110 	add.w	r1, r7, #16
 8016c40:	7af8      	ldrb	r0, [r7, #11]
 8016c42:	4798      	blx	r3
 8016c44:	4603      	mov	r3, r0
 8016c46:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d104      	bne.n	8016c5a <SCSI_ReadFormatCapacity+0x5e>
 8016c50:	69bb      	ldr	r3, [r7, #24]
 8016c52:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016c56:	2b02      	cmp	r3, #2
 8016c58:	d108      	bne.n	8016c6c <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016c5a:	7af9      	ldrb	r1, [r7, #11]
 8016c5c:	233a      	movs	r3, #58	@ 0x3a
 8016c5e:	2202      	movs	r2, #2
 8016c60:	68f8      	ldr	r0, [r7, #12]
 8016c62:	f000 f959 	bl	8016f18 <SCSI_SenseCode>
    return -1;
 8016c66:	f04f 33ff 	mov.w	r3, #4294967295
 8016c6a:	e03e      	b.n	8016cea <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	83fb      	strh	r3, [r7, #30]
 8016c70:	e007      	b.n	8016c82 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8016c72:	8bfb      	ldrh	r3, [r7, #30]
 8016c74:	69ba      	ldr	r2, [r7, #24]
 8016c76:	4413      	add	r3, r2
 8016c78:	2200      	movs	r2, #0
 8016c7a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8016c7c:	8bfb      	ldrh	r3, [r7, #30]
 8016c7e:	3301      	adds	r3, #1
 8016c80:	83fb      	strh	r3, [r7, #30]
 8016c82:	8bfb      	ldrh	r3, [r7, #30]
 8016c84:	2b0b      	cmp	r3, #11
 8016c86:	d9f4      	bls.n	8016c72 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8016c88:	69bb      	ldr	r3, [r7, #24]
 8016c8a:	2208      	movs	r2, #8
 8016c8c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8016c8e:	693b      	ldr	r3, [r7, #16]
 8016c90:	3b01      	subs	r3, #1
 8016c92:	0e1b      	lsrs	r3, r3, #24
 8016c94:	b2da      	uxtb	r2, r3
 8016c96:	69bb      	ldr	r3, [r7, #24]
 8016c98:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	3b01      	subs	r3, #1
 8016c9e:	0c1b      	lsrs	r3, r3, #16
 8016ca0:	b2da      	uxtb	r2, r3
 8016ca2:	69bb      	ldr	r3, [r7, #24]
 8016ca4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8016ca6:	693b      	ldr	r3, [r7, #16]
 8016ca8:	3b01      	subs	r3, #1
 8016caa:	0a1b      	lsrs	r3, r3, #8
 8016cac:	b2da      	uxtb	r2, r3
 8016cae:	69bb      	ldr	r3, [r7, #24]
 8016cb0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	b2db      	uxtb	r3, r3
 8016cb6:	3b01      	subs	r3, #1
 8016cb8:	b2da      	uxtb	r2, r3
 8016cba:	69bb      	ldr	r3, [r7, #24]
 8016cbc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8016cbe:	69bb      	ldr	r3, [r7, #24]
 8016cc0:	2202      	movs	r2, #2
 8016cc2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8016cc4:	8abb      	ldrh	r3, [r7, #20]
 8016cc6:	141b      	asrs	r3, r3, #16
 8016cc8:	b2da      	uxtb	r2, r3
 8016cca:	69bb      	ldr	r3, [r7, #24]
 8016ccc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8016cce:	8abb      	ldrh	r3, [r7, #20]
 8016cd0:	0a1b      	lsrs	r3, r3, #8
 8016cd2:	b29b      	uxth	r3, r3
 8016cd4:	b2da      	uxtb	r2, r3
 8016cd6:	69bb      	ldr	r3, [r7, #24]
 8016cd8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8016cda:	8abb      	ldrh	r3, [r7, #20]
 8016cdc:	b2da      	uxtb	r2, r3
 8016cde:	69bb      	ldr	r3, [r7, #24]
 8016ce0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8016ce2:	69bb      	ldr	r3, [r7, #24]
 8016ce4:	220c      	movs	r2, #12
 8016ce6:	60da      	str	r2, [r3, #12]

  return 0;
 8016ce8:	2300      	movs	r3, #0
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	3720      	adds	r7, #32
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bd80      	pop	{r7, pc}
	...

08016cf4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b086      	sub	sp, #24
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	60f8      	str	r0, [r7, #12]
 8016cfc:	460b      	mov	r3, r1
 8016cfe:	607a      	str	r2, [r7, #4]
 8016d00:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	32b0      	adds	r2, #176	@ 0xb0
 8016d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d10:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8016d12:	2304      	movs	r3, #4
 8016d14:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d102      	bne.n	8016d22 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8016d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8016d20:	e027      	b.n	8016d72 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016d28:	68fa      	ldr	r2, [r7, #12]
 8016d2a:	33b0      	adds	r3, #176	@ 0xb0
 8016d2c:	009b      	lsls	r3, r3, #2
 8016d2e:	4413      	add	r3, r2
 8016d30:	685b      	ldr	r3, [r3, #4]
 8016d32:	68db      	ldr	r3, [r3, #12]
 8016d34:	7afa      	ldrb	r2, [r7, #11]
 8016d36:	4610      	mov	r0, r2
 8016d38:	4798      	blx	r3
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d006      	beq.n	8016d4e <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8016d40:	4b0e      	ldr	r3, [pc, #56]	@ (8016d7c <SCSI_ModeSense6+0x88>)
 8016d42:	789b      	ldrb	r3, [r3, #2]
 8016d44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016d48:	b2da      	uxtb	r2, r3
 8016d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8016d7c <SCSI_ModeSense6+0x88>)
 8016d4c:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	3304      	adds	r3, #4
 8016d52:	781b      	ldrb	r3, [r3, #0]
 8016d54:	461a      	mov	r2, r3
 8016d56:	8afb      	ldrh	r3, [r7, #22]
 8016d58:	4293      	cmp	r3, r2
 8016d5a:	d303      	bcc.n	8016d64 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	3304      	adds	r3, #4
 8016d60:	781b      	ldrb	r3, [r3, #0]
 8016d62:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8016d64:	8afb      	ldrh	r3, [r7, #22]
 8016d66:	461a      	mov	r2, r3
 8016d68:	4904      	ldr	r1, [pc, #16]	@ (8016d7c <SCSI_ModeSense6+0x88>)
 8016d6a:	6938      	ldr	r0, [r7, #16]
 8016d6c:	f000 fe44 	bl	80179f8 <SCSI_UpdateBotData>

  return 0;
 8016d70:	2300      	movs	r3, #0
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	3718      	adds	r7, #24
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}
 8016d7a:	bf00      	nop
 8016d7c:	200000c0 	.word	0x200000c0

08016d80 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b086      	sub	sp, #24
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	460b      	mov	r3, r1
 8016d8a:	607a      	str	r2, [r7, #4]
 8016d8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	32b0      	adds	r2, #176	@ 0xb0
 8016d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d9c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8016d9e:	2308      	movs	r3, #8
 8016da0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016da2:	693b      	ldr	r3, [r7, #16]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d102      	bne.n	8016dae <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8016da8:	f04f 33ff 	mov.w	r3, #4294967295
 8016dac:	e027      	b.n	8016dfe <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016db4:	68fa      	ldr	r2, [r7, #12]
 8016db6:	33b0      	adds	r3, #176	@ 0xb0
 8016db8:	009b      	lsls	r3, r3, #2
 8016dba:	4413      	add	r3, r2
 8016dbc:	685b      	ldr	r3, [r3, #4]
 8016dbe:	68db      	ldr	r3, [r3, #12]
 8016dc0:	7afa      	ldrb	r2, [r7, #11]
 8016dc2:	4610      	mov	r0, r2
 8016dc4:	4798      	blx	r3
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d006      	beq.n	8016dda <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8016dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8016e08 <SCSI_ModeSense10+0x88>)
 8016dce:	78db      	ldrb	r3, [r3, #3]
 8016dd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016dd4:	b2da      	uxtb	r2, r3
 8016dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8016e08 <SCSI_ModeSense10+0x88>)
 8016dd8:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	3308      	adds	r3, #8
 8016dde:	781b      	ldrb	r3, [r3, #0]
 8016de0:	461a      	mov	r2, r3
 8016de2:	8afb      	ldrh	r3, [r7, #22]
 8016de4:	4293      	cmp	r3, r2
 8016de6:	d303      	bcc.n	8016df0 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	3308      	adds	r3, #8
 8016dec:	781b      	ldrb	r3, [r3, #0]
 8016dee:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8016df0:	8afb      	ldrh	r3, [r7, #22]
 8016df2:	461a      	mov	r2, r3
 8016df4:	4904      	ldr	r1, [pc, #16]	@ (8016e08 <SCSI_ModeSense10+0x88>)
 8016df6:	6938      	ldr	r0, [r7, #16]
 8016df8:	f000 fdfe 	bl	80179f8 <SCSI_UpdateBotData>

  return 0;
 8016dfc:	2300      	movs	r3, #0
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3718      	adds	r7, #24
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	bf00      	nop
 8016e08:	200000c4 	.word	0x200000c4

08016e0c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b086      	sub	sp, #24
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	60f8      	str	r0, [r7, #12]
 8016e14:	460b      	mov	r3, r1
 8016e16:	607a      	str	r2, [r7, #4]
 8016e18:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	32b0      	adds	r2, #176	@ 0xb0
 8016e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e28:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d102      	bne.n	8016e36 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8016e30:	f04f 33ff 	mov.w	r3, #4294967295
 8016e34:	e06c      	b.n	8016f10 <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d10a      	bne.n	8016e56 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016e46:	2320      	movs	r3, #32
 8016e48:	2205      	movs	r2, #5
 8016e4a:	68f8      	ldr	r0, [r7, #12]
 8016e4c:	f000 f864 	bl	8016f18 <SCSI_SenseCode>
    return -1;
 8016e50:	f04f 33ff 	mov.w	r3, #4294967295
 8016e54:	e05c      	b.n	8016f10 <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016e56:	2300      	movs	r3, #0
 8016e58:	75fb      	strb	r3, [r7, #23]
 8016e5a:	e007      	b.n	8016e6c <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8016e5c:	7dfb      	ldrb	r3, [r7, #23]
 8016e5e:	693a      	ldr	r2, [r7, #16]
 8016e60:	4413      	add	r3, r2
 8016e62:	2200      	movs	r2, #0
 8016e64:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016e66:	7dfb      	ldrb	r3, [r7, #23]
 8016e68:	3301      	adds	r3, #1
 8016e6a:	75fb      	strb	r3, [r7, #23]
 8016e6c:	7dfb      	ldrb	r3, [r7, #23]
 8016e6e:	2b11      	cmp	r3, #17
 8016e70:	d9f4      	bls.n	8016e5c <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8016e72:	693b      	ldr	r3, [r7, #16]
 8016e74:	2270      	movs	r2, #112	@ 0x70
 8016e76:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8016e78:	693b      	ldr	r3, [r7, #16]
 8016e7a:	220c      	movs	r2, #12
 8016e7c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	f893 2860 	ldrb.w	r2, [r3, #2144]	@ 0x860
 8016e84:	693b      	ldr	r3, [r7, #16]
 8016e86:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	d031      	beq.n	8016ef2 <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8016e8e:	693b      	ldr	r3, [r7, #16]
 8016e90:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016e94:	461a      	mov	r2, r3
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8016e9c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8016ea0:	693b      	ldr	r3, [r7, #16]
 8016ea2:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8016ea4:	693b      	ldr	r3, [r7, #16]
 8016ea6:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016eaa:	693a      	ldr	r2, [r7, #16]
 8016eac:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016eb0:	00db      	lsls	r3, r3, #3
 8016eb2:	4413      	add	r3, r2
 8016eb4:	791a      	ldrb	r2, [r3, #4]
 8016eb6:	693b      	ldr	r3, [r7, #16]
 8016eb8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8016eba:	693b      	ldr	r3, [r7, #16]
 8016ebc:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016ec0:	693a      	ldr	r2, [r7, #16]
 8016ec2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016ec6:	00db      	lsls	r3, r3, #3
 8016ec8:	4413      	add	r3, r2
 8016eca:	795a      	ldrb	r2, [r3, #5]
 8016ecc:	693b      	ldr	r3, [r7, #16]
 8016ece:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016ed6:	3301      	adds	r3, #1
 8016ed8:	b2da      	uxtb	r2, r3
 8016eda:	693b      	ldr	r3, [r7, #16]
 8016edc:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8016ee0:	693b      	ldr	r3, [r7, #16]
 8016ee2:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016ee6:	2b04      	cmp	r3, #4
 8016ee8:	d103      	bne.n	8016ef2 <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 8016eea:	693b      	ldr	r3, [r7, #16]
 8016eec:	2200      	movs	r2, #0
 8016eee:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8016ef2:	693b      	ldr	r3, [r7, #16]
 8016ef4:	2212      	movs	r2, #18
 8016ef6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	3304      	adds	r3, #4
 8016efc:	781b      	ldrb	r3, [r3, #0]
 8016efe:	2b12      	cmp	r3, #18
 8016f00:	d805      	bhi.n	8016f0e <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	3304      	adds	r3, #4
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	461a      	mov	r2, r3
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8016f0e:	2300      	movs	r3, #0
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	3718      	adds	r7, #24
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}

08016f18 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b085      	sub	sp, #20
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	4608      	mov	r0, r1
 8016f22:	4611      	mov	r1, r2
 8016f24:	461a      	mov	r2, r3
 8016f26:	4603      	mov	r3, r0
 8016f28:	70fb      	strb	r3, [r7, #3]
 8016f2a:	460b      	mov	r3, r1
 8016f2c:	70bb      	strb	r3, [r7, #2]
 8016f2e:	4613      	mov	r3, r2
 8016f30:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	32b0      	adds	r2, #176	@ 0xb0
 8016f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f40:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d02f      	beq.n	8016fa8 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016f4e:	461a      	mov	r2, r3
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8016f56:	78b9      	ldrb	r1, [r7, #2]
 8016f58:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016f62:	68fa      	ldr	r2, [r7, #12]
 8016f64:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f68:	00db      	lsls	r3, r3, #3
 8016f6a:	4413      	add	r3, r2
 8016f6c:	787a      	ldrb	r2, [r7, #1]
 8016f6e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016f76:	68fa      	ldr	r2, [r7, #12]
 8016f78:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f7c:	00db      	lsls	r3, r3, #3
 8016f7e:	4413      	add	r3, r2
 8016f80:	2200      	movs	r2, #0
 8016f82:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016f8a:	3301      	adds	r3, #1
 8016f8c:	b2da      	uxtb	r2, r3
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016f9a:	2b04      	cmp	r3, #4
 8016f9c:	d105      	bne.n	8016faa <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
 8016fa6:	e000      	b.n	8016faa <SCSI_SenseCode+0x92>
    return;
 8016fa8:	bf00      	nop
  }
}
 8016faa:	3714      	adds	r7, #20
 8016fac:	46bd      	mov	sp, r7
 8016fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb2:	4770      	bx	lr

08016fb4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b086      	sub	sp, #24
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	60f8      	str	r0, [r7, #12]
 8016fbc:	460b      	mov	r3, r1
 8016fbe:	607a      	str	r2, [r7, #4]
 8016fc0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	32b0      	adds	r2, #176	@ 0xb0
 8016fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fd0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8016fd2:	697b      	ldr	r3, [r7, #20]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d102      	bne.n	8016fde <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8016fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8016fdc:	e03b      	b.n	8017056 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8016fde:	697b      	ldr	r3, [r7, #20]
 8016fe0:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016fe4:	2b01      	cmp	r3, #1
 8016fe6:	d10f      	bne.n	8017008 <SCSI_StartStopUnit+0x54>
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	3304      	adds	r3, #4
 8016fec:	781b      	ldrb	r3, [r3, #0]
 8016fee:	f003 0303 	and.w	r3, r3, #3
 8016ff2:	2b02      	cmp	r3, #2
 8016ff4:	d108      	bne.n	8017008 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8016ff6:	7af9      	ldrb	r1, [r7, #11]
 8016ff8:	2324      	movs	r3, #36	@ 0x24
 8016ffa:	2205      	movs	r2, #5
 8016ffc:	68f8      	ldr	r0, [r7, #12]
 8016ffe:	f7ff ff8b 	bl	8016f18 <SCSI_SenseCode>

    return -1;
 8017002:	f04f 33ff 	mov.w	r3, #4294967295
 8017006:	e026      	b.n	8017056 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	3304      	adds	r3, #4
 801700c:	781b      	ldrb	r3, [r3, #0]
 801700e:	f003 0303 	and.w	r3, r3, #3
 8017012:	2b01      	cmp	r3, #1
 8017014:	d104      	bne.n	8017020 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8017016:	697b      	ldr	r3, [r7, #20]
 8017018:	2200      	movs	r2, #0
 801701a:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 801701e:	e016      	b.n	801704e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	3304      	adds	r3, #4
 8017024:	781b      	ldrb	r3, [r3, #0]
 8017026:	f003 0303 	and.w	r3, r3, #3
 801702a:	2b02      	cmp	r3, #2
 801702c:	d104      	bne.n	8017038 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	2202      	movs	r2, #2
 8017032:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 8017036:	e00a      	b.n	801704e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	3304      	adds	r3, #4
 801703c:	781b      	ldrb	r3, [r3, #0]
 801703e:	f003 0303 	and.w	r3, r3, #3
 8017042:	2b03      	cmp	r3, #3
 8017044:	d103      	bne.n	801704e <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8017046:	697b      	ldr	r3, [r7, #20]
 8017048:	2200      	movs	r2, #0
 801704a:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801704e:	697b      	ldr	r3, [r7, #20]
 8017050:	2200      	movs	r2, #0
 8017052:	60da      	str	r2, [r3, #12]

  return 0;
 8017054:	2300      	movs	r3, #0
}
 8017056:	4618      	mov	r0, r3
 8017058:	3718      	adds	r7, #24
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}

0801705e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801705e:	b480      	push	{r7}
 8017060:	b087      	sub	sp, #28
 8017062:	af00      	add	r7, sp, #0
 8017064:	60f8      	str	r0, [r7, #12]
 8017066:	460b      	mov	r3, r1
 8017068:	607a      	str	r2, [r7, #4]
 801706a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	32b0      	adds	r2, #176	@ 0xb0
 8017076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801707a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801707c:	697b      	ldr	r3, [r7, #20]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d102      	bne.n	8017088 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8017082:	f04f 33ff 	mov.w	r3, #4294967295
 8017086:	e011      	b.n	80170ac <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	3304      	adds	r3, #4
 801708c:	781b      	ldrb	r3, [r3, #0]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d104      	bne.n	801709c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8017092:	697b      	ldr	r3, [r7, #20]
 8017094:	2200      	movs	r2, #0
 8017096:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 801709a:	e003      	b.n	80170a4 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801709c:	697b      	ldr	r3, [r7, #20]
 801709e:	2201      	movs	r2, #1
 80170a0:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }

  hmsc->bot_data_length = 0U;
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	2200      	movs	r2, #0
 80170a8:	60da      	str	r2, [r3, #12]

  return 0;
 80170aa:	2300      	movs	r3, #0
}
 80170ac:	4618      	mov	r0, r3
 80170ae:	371c      	adds	r7, #28
 80170b0:	46bd      	mov	sp, r7
 80170b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b6:	4770      	bx	lr

080170b8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b086      	sub	sp, #24
 80170bc:	af00      	add	r7, sp, #0
 80170be:	60f8      	str	r0, [r7, #12]
 80170c0:	460b      	mov	r3, r1
 80170c2:	607a      	str	r2, [r7, #4]
 80170c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	32b0      	adds	r2, #176	@ 0xb0
 80170d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80170d6:	697b      	ldr	r3, [r7, #20]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d102      	bne.n	80170e2 <SCSI_Read10+0x2a>
  {
    return -1;
 80170dc:	f04f 33ff 	mov.w	r3, #4294967295
 80170e0:	e090      	b.n	8017204 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80170e2:	697b      	ldr	r3, [r7, #20]
 80170e4:	7a1b      	ldrb	r3, [r3, #8]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	f040 8082 	bne.w	80171f0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80170ec:	697b      	ldr	r3, [r7, #20]
 80170ee:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80170f2:	b25b      	sxtb	r3, r3
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	db0a      	blt.n	801710e <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80170f8:	697b      	ldr	r3, [r7, #20]
 80170fa:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80170fe:	2320      	movs	r3, #32
 8017100:	2205      	movs	r2, #5
 8017102:	68f8      	ldr	r0, [r7, #12]
 8017104:	f7ff ff08 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 8017108:	f04f 33ff 	mov.w	r3, #4294967295
 801710c:	e07a      	b.n	8017204 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8017114:	2b02      	cmp	r3, #2
 8017116:	d108      	bne.n	801712a <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017118:	7af9      	ldrb	r1, [r7, #11]
 801711a:	233a      	movs	r3, #58	@ 0x3a
 801711c:	2202      	movs	r2, #2
 801711e:	68f8      	ldr	r0, [r7, #12]
 8017120:	f7ff fefa 	bl	8016f18 <SCSI_SenseCode>

      return -1;
 8017124:	f04f 33ff 	mov.w	r3, #4294967295
 8017128:	e06c      	b.n	8017204 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017130:	68fa      	ldr	r2, [r7, #12]
 8017132:	33b0      	adds	r3, #176	@ 0xb0
 8017134:	009b      	lsls	r3, r3, #2
 8017136:	4413      	add	r3, r2
 8017138:	685b      	ldr	r3, [r3, #4]
 801713a:	689b      	ldr	r3, [r3, #8]
 801713c:	7afa      	ldrb	r2, [r7, #11]
 801713e:	4610      	mov	r0, r2
 8017140:	4798      	blx	r3
 8017142:	4603      	mov	r3, r0
 8017144:	2b00      	cmp	r3, #0
 8017146:	d008      	beq.n	801715a <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017148:	7af9      	ldrb	r1, [r7, #11]
 801714a:	233a      	movs	r3, #58	@ 0x3a
 801714c:	2202      	movs	r2, #2
 801714e:	68f8      	ldr	r0, [r7, #12]
 8017150:	f7ff fee2 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 8017154:	f04f 33ff 	mov.w	r3, #4294967295
 8017158:	e054      	b.n	8017204 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	3302      	adds	r3, #2
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	3303      	adds	r3, #3
 8017166:	781b      	ldrb	r3, [r3, #0]
 8017168:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801716a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	3304      	adds	r3, #4
 8017170:	781b      	ldrb	r3, [r3, #0]
 8017172:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017174:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8017176:	687a      	ldr	r2, [r7, #4]
 8017178:	3205      	adds	r2, #5
 801717a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801717c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801717e:	697b      	ldr	r3, [r7, #20]
 8017180:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	3307      	adds	r3, #7
 8017188:	781b      	ldrb	r3, [r3, #0]
 801718a:	021b      	lsls	r3, r3, #8
 801718c:	687a      	ldr	r2, [r7, #4]
 801718e:	3208      	adds	r2, #8
 8017190:	7812      	ldrb	r2, [r2, #0]
 8017192:	431a      	orrs	r2, r3
 8017194:	697b      	ldr	r3, [r7, #20]
 8017196:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801719a:	697b      	ldr	r3, [r7, #20]
 801719c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80171a0:	697b      	ldr	r3, [r7, #20]
 80171a2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80171a6:	7af9      	ldrb	r1, [r7, #11]
 80171a8:	68f8      	ldr	r0, [r7, #12]
 80171aa:	f000 fadc 	bl	8017766 <SCSI_CheckAddressRange>
 80171ae:	4603      	mov	r3, r0
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	da02      	bge.n	80171ba <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80171b4:	f04f 33ff 	mov.w	r3, #4294967295
 80171b8:	e024      	b.n	8017204 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80171ba:	697b      	ldr	r3, [r7, #20]
 80171bc:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80171c0:	697b      	ldr	r3, [r7, #20]
 80171c2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80171c6:	6979      	ldr	r1, [r7, #20]
 80171c8:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 80171cc:	fb01 f303 	mul.w	r3, r1, r3
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d00a      	beq.n	80171ea <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80171d4:	697b      	ldr	r3, [r7, #20]
 80171d6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80171da:	2320      	movs	r3, #32
 80171dc:	2205      	movs	r2, #5
 80171de:	68f8      	ldr	r0, [r7, #12]
 80171e0:	f7ff fe9a 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 80171e4:	f04f 33ff 	mov.w	r3, #4294967295
 80171e8:	e00c      	b.n	8017204 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80171ea:	697b      	ldr	r3, [r7, #20]
 80171ec:	2202      	movs	r2, #2
 80171ee:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80171f0:	697b      	ldr	r3, [r7, #20]
 80171f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80171f6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80171f8:	7afb      	ldrb	r3, [r7, #11]
 80171fa:	4619      	mov	r1, r3
 80171fc:	68f8      	ldr	r0, [r7, #12]
 80171fe:	f000 fadf 	bl	80177c0 <SCSI_ProcessRead>
 8017202:	4603      	mov	r3, r0
}
 8017204:	4618      	mov	r0, r3
 8017206:	3718      	adds	r7, #24
 8017208:	46bd      	mov	sp, r7
 801720a:	bd80      	pop	{r7, pc}

0801720c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b086      	sub	sp, #24
 8017210:	af00      	add	r7, sp, #0
 8017212:	60f8      	str	r0, [r7, #12]
 8017214:	460b      	mov	r3, r1
 8017216:	607a      	str	r2, [r7, #4]
 8017218:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	32b0      	adds	r2, #176	@ 0xb0
 8017224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017228:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801722a:	697b      	ldr	r3, [r7, #20]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d102      	bne.n	8017236 <SCSI_Read12+0x2a>
  {
    return -1;
 8017230:	f04f 33ff 	mov.w	r3, #4294967295
 8017234:	e09a      	b.n	801736c <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	7a1b      	ldrb	r3, [r3, #8]
 801723a:	2b00      	cmp	r3, #0
 801723c:	f040 808c 	bne.w	8017358 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8017240:	697b      	ldr	r3, [r7, #20]
 8017242:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8017246:	b25b      	sxtb	r3, r3
 8017248:	2b00      	cmp	r3, #0
 801724a:	db0a      	blt.n	8017262 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801724c:	697b      	ldr	r3, [r7, #20]
 801724e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017252:	2320      	movs	r3, #32
 8017254:	2205      	movs	r2, #5
 8017256:	68f8      	ldr	r0, [r7, #12]
 8017258:	f7ff fe5e 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 801725c:	f04f 33ff 	mov.w	r3, #4294967295
 8017260:	e084      	b.n	801736c <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8017268:	2b02      	cmp	r3, #2
 801726a:	d108      	bne.n	801727e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801726c:	7af9      	ldrb	r1, [r7, #11]
 801726e:	233a      	movs	r3, #58	@ 0x3a
 8017270:	2202      	movs	r2, #2
 8017272:	68f8      	ldr	r0, [r7, #12]
 8017274:	f7ff fe50 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 8017278:	f04f 33ff 	mov.w	r3, #4294967295
 801727c:	e076      	b.n	801736c <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017284:	68fa      	ldr	r2, [r7, #12]
 8017286:	33b0      	adds	r3, #176	@ 0xb0
 8017288:	009b      	lsls	r3, r3, #2
 801728a:	4413      	add	r3, r2
 801728c:	685b      	ldr	r3, [r3, #4]
 801728e:	689b      	ldr	r3, [r3, #8]
 8017290:	7afa      	ldrb	r2, [r7, #11]
 8017292:	4610      	mov	r0, r2
 8017294:	4798      	blx	r3
 8017296:	4603      	mov	r3, r0
 8017298:	2b00      	cmp	r3, #0
 801729a:	d008      	beq.n	80172ae <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801729c:	7af9      	ldrb	r1, [r7, #11]
 801729e:	233a      	movs	r3, #58	@ 0x3a
 80172a0:	2202      	movs	r2, #2
 80172a2:	68f8      	ldr	r0, [r7, #12]
 80172a4:	f7ff fe38 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 80172a8:	f04f 33ff 	mov.w	r3, #4294967295
 80172ac:	e05e      	b.n	801736c <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	3302      	adds	r3, #2
 80172b2:	781b      	ldrb	r3, [r3, #0]
 80172b4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	3303      	adds	r3, #3
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80172be:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	3304      	adds	r3, #4
 80172c4:	781b      	ldrb	r3, [r3, #0]
 80172c6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80172c8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80172ca:	687a      	ldr	r2, [r7, #4]
 80172cc:	3205      	adds	r2, #5
 80172ce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80172d0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	3306      	adds	r3, #6
 80172dc:	781b      	ldrb	r3, [r3, #0]
 80172de:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	3307      	adds	r3, #7
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80172e8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	3308      	adds	r3, #8
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80172f2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80172f4:	687a      	ldr	r2, [r7, #4]
 80172f6:	3209      	adds	r2, #9
 80172f8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80172fa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017302:	697b      	ldr	r3, [r7, #20]
 8017304:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017308:	697b      	ldr	r3, [r7, #20]
 801730a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801730e:	7af9      	ldrb	r1, [r7, #11]
 8017310:	68f8      	ldr	r0, [r7, #12]
 8017312:	f000 fa28 	bl	8017766 <SCSI_CheckAddressRange>
 8017316:	4603      	mov	r3, r0
 8017318:	2b00      	cmp	r3, #0
 801731a:	da02      	bge.n	8017322 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801731c:	f04f 33ff 	mov.w	r3, #4294967295
 8017320:	e024      	b.n	801736c <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801732e:	6979      	ldr	r1, [r7, #20]
 8017330:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 8017334:	fb01 f303 	mul.w	r3, r1, r3
 8017338:	429a      	cmp	r2, r3
 801733a:	d00a      	beq.n	8017352 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801733c:	697b      	ldr	r3, [r7, #20]
 801733e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017342:	2320      	movs	r3, #32
 8017344:	2205      	movs	r2, #5
 8017346:	68f8      	ldr	r0, [r7, #12]
 8017348:	f7ff fde6 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 801734c:	f04f 33ff 	mov.w	r3, #4294967295
 8017350:	e00c      	b.n	801736c <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	2202      	movs	r2, #2
 8017356:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8017358:	697b      	ldr	r3, [r7, #20]
 801735a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801735e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8017360:	7afb      	ldrb	r3, [r7, #11]
 8017362:	4619      	mov	r1, r3
 8017364:	68f8      	ldr	r0, [r7, #12]
 8017366:	f000 fa2b 	bl	80177c0 <SCSI_ProcessRead>
 801736a:	4603      	mov	r3, r0
}
 801736c:	4618      	mov	r0, r3
 801736e:	3718      	adds	r7, #24
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}

08017374 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b086      	sub	sp, #24
 8017378:	af00      	add	r7, sp, #0
 801737a:	60f8      	str	r0, [r7, #12]
 801737c:	460b      	mov	r3, r1
 801737e:	607a      	str	r2, [r7, #4]
 8017380:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	32b0      	adds	r2, #176	@ 0xb0
 801738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017390:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8017392:	697b      	ldr	r3, [r7, #20]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d102      	bne.n	801739e <SCSI_Write10+0x2a>
  {
    return -1;
 8017398:	f04f 33ff 	mov.w	r3, #4294967295
 801739c:	e0ba      	b.n	8017514 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	7a1b      	ldrb	r3, [r3, #8]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	f040 80b0 	bne.w	8017508 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80173a8:	697b      	ldr	r3, [r7, #20]
 80173aa:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d10a      	bne.n	80173c8 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80173b2:	697b      	ldr	r3, [r7, #20]
 80173b4:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80173b8:	2320      	movs	r3, #32
 80173ba:	2205      	movs	r2, #5
 80173bc:	68f8      	ldr	r0, [r7, #12]
 80173be:	f7ff fdab 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 80173c2:	f04f 33ff 	mov.w	r3, #4294967295
 80173c6:	e0a5      	b.n	8017514 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80173ce:	b25b      	sxtb	r3, r3
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	da0a      	bge.n	80173ea <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80173da:	2320      	movs	r3, #32
 80173dc:	2205      	movs	r2, #5
 80173de:	68f8      	ldr	r0, [r7, #12]
 80173e0:	f7ff fd9a 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 80173e4:	f04f 33ff 	mov.w	r3, #4294967295
 80173e8:	e094      	b.n	8017514 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80173f0:	68fa      	ldr	r2, [r7, #12]
 80173f2:	33b0      	adds	r3, #176	@ 0xb0
 80173f4:	009b      	lsls	r3, r3, #2
 80173f6:	4413      	add	r3, r2
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	689b      	ldr	r3, [r3, #8]
 80173fc:	7afa      	ldrb	r2, [r7, #11]
 80173fe:	4610      	mov	r0, r2
 8017400:	4798      	blx	r3
 8017402:	4603      	mov	r3, r0
 8017404:	2b00      	cmp	r3, #0
 8017406:	d008      	beq.n	801741a <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017408:	7af9      	ldrb	r1, [r7, #11]
 801740a:	233a      	movs	r3, #58	@ 0x3a
 801740c:	2202      	movs	r2, #2
 801740e:	68f8      	ldr	r0, [r7, #12]
 8017410:	f7ff fd82 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 8017414:	f04f 33ff 	mov.w	r3, #4294967295
 8017418:	e07c      	b.n	8017514 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017420:	68fa      	ldr	r2, [r7, #12]
 8017422:	33b0      	adds	r3, #176	@ 0xb0
 8017424:	009b      	lsls	r3, r3, #2
 8017426:	4413      	add	r3, r2
 8017428:	685b      	ldr	r3, [r3, #4]
 801742a:	68db      	ldr	r3, [r3, #12]
 801742c:	7afa      	ldrb	r2, [r7, #11]
 801742e:	4610      	mov	r0, r2
 8017430:	4798      	blx	r3
 8017432:	4603      	mov	r3, r0
 8017434:	2b00      	cmp	r3, #0
 8017436:	d008      	beq.n	801744a <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8017438:	7af9      	ldrb	r1, [r7, #11]
 801743a:	2327      	movs	r3, #39	@ 0x27
 801743c:	2202      	movs	r2, #2
 801743e:	68f8      	ldr	r0, [r7, #12]
 8017440:	f7ff fd6a 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 8017444:	f04f 33ff 	mov.w	r3, #4294967295
 8017448:	e064      	b.n	8017514 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	3302      	adds	r3, #2
 801744e:	781b      	ldrb	r3, [r3, #0]
 8017450:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	3303      	adds	r3, #3
 8017456:	781b      	ldrb	r3, [r3, #0]
 8017458:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801745a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	3304      	adds	r3, #4
 8017460:	781b      	ldrb	r3, [r3, #0]
 8017462:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017464:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8017466:	687a      	ldr	r2, [r7, #4]
 8017468:	3205      	adds	r2, #5
 801746a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801746c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801746e:	697b      	ldr	r3, [r7, #20]
 8017470:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	3307      	adds	r3, #7
 8017478:	781b      	ldrb	r3, [r3, #0]
 801747a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801747c:	687a      	ldr	r2, [r7, #4]
 801747e:	3208      	adds	r2, #8
 8017480:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8017482:	431a      	orrs	r2, r3
 8017484:	697b      	ldr	r3, [r7, #20]
 8017486:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801748a:	697b      	ldr	r3, [r7, #20]
 801748c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017490:	697b      	ldr	r3, [r7, #20]
 8017492:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017496:	7af9      	ldrb	r1, [r7, #11]
 8017498:	68f8      	ldr	r0, [r7, #12]
 801749a:	f000 f964 	bl	8017766 <SCSI_CheckAddressRange>
 801749e:	4603      	mov	r3, r0
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	da02      	bge.n	80174aa <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80174a4:	f04f 33ff 	mov.w	r3, #4294967295
 80174a8:	e034      	b.n	8017514 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80174aa:	697b      	ldr	r3, [r7, #20]
 80174ac:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80174b0:	697a      	ldr	r2, [r7, #20]
 80174b2:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 80174b6:	fb02 f303 	mul.w	r3, r2, r3
 80174ba:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80174bc:	697b      	ldr	r3, [r7, #20]
 80174be:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80174c2:	693a      	ldr	r2, [r7, #16]
 80174c4:	429a      	cmp	r2, r3
 80174c6:	d00a      	beq.n	80174de <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80174c8:	697b      	ldr	r3, [r7, #20]
 80174ca:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80174ce:	2320      	movs	r3, #32
 80174d0:	2205      	movs	r2, #5
 80174d2:	68f8      	ldr	r0, [r7, #12]
 80174d4:	f7ff fd20 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 80174d8:	f04f 33ff 	mov.w	r3, #4294967295
 80174dc:	e01a      	b.n	8017514 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80174de:	693b      	ldr	r3, [r7, #16]
 80174e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80174e4:	bf28      	it	cs
 80174e6:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80174ea:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80174ec:	697b      	ldr	r3, [r7, #20]
 80174ee:	2201      	movs	r2, #1
 80174f0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80174f2:	4b0a      	ldr	r3, [pc, #40]	@ (801751c <SCSI_Write10+0x1a8>)
 80174f4:	7819      	ldrb	r1, [r3, #0]
 80174f6:	697b      	ldr	r3, [r7, #20]
 80174f8:	f103 0210 	add.w	r2, r3, #16
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	68f8      	ldr	r0, [r7, #12]
 8017500:	f006 f8ad 	bl	801d65e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8017504:	2300      	movs	r3, #0
 8017506:	e005      	b.n	8017514 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8017508:	7afb      	ldrb	r3, [r7, #11]
 801750a:	4619      	mov	r1, r3
 801750c:	68f8      	ldr	r0, [r7, #12]
 801750e:	f000 f9dd 	bl	80178cc <SCSI_ProcessWrite>
 8017512:	4603      	mov	r3, r0
}
 8017514:	4618      	mov	r0, r3
 8017516:	3718      	adds	r7, #24
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}
 801751c:	200000af 	.word	0x200000af

08017520 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b086      	sub	sp, #24
 8017524:	af00      	add	r7, sp, #0
 8017526:	60f8      	str	r0, [r7, #12]
 8017528:	460b      	mov	r3, r1
 801752a:	607a      	str	r2, [r7, #4]
 801752c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	32b0      	adds	r2, #176	@ 0xb0
 8017538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801753c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801753e:	697b      	ldr	r3, [r7, #20]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d102      	bne.n	801754a <SCSI_Write12+0x2a>
  {
    return -1;
 8017544:	f04f 33ff 	mov.w	r3, #4294967295
 8017548:	e0ca      	b.n	80176e0 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	7a1b      	ldrb	r3, [r3, #8]
 801754e:	2b00      	cmp	r3, #0
 8017550:	f040 80c0 	bne.w	80176d4 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8017554:	697b      	ldr	r3, [r7, #20]
 8017556:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801755a:	2b00      	cmp	r3, #0
 801755c:	d10a      	bne.n	8017574 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017564:	2320      	movs	r3, #32
 8017566:	2205      	movs	r2, #5
 8017568:	68f8      	ldr	r0, [r7, #12]
 801756a:	f7ff fcd5 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 801756e:	f04f 33ff 	mov.w	r3, #4294967295
 8017572:	e0b5      	b.n	80176e0 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8017574:	697b      	ldr	r3, [r7, #20]
 8017576:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 801757a:	b25b      	sxtb	r3, r3
 801757c:	2b00      	cmp	r3, #0
 801757e:	da0a      	bge.n	8017596 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017580:	697b      	ldr	r3, [r7, #20]
 8017582:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017586:	2320      	movs	r3, #32
 8017588:	2205      	movs	r2, #5
 801758a:	68f8      	ldr	r0, [r7, #12]
 801758c:	f7ff fcc4 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 8017590:	f04f 33ff 	mov.w	r3, #4294967295
 8017594:	e0a4      	b.n	80176e0 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801759c:	68fa      	ldr	r2, [r7, #12]
 801759e:	33b0      	adds	r3, #176	@ 0xb0
 80175a0:	009b      	lsls	r3, r3, #2
 80175a2:	4413      	add	r3, r2
 80175a4:	685b      	ldr	r3, [r3, #4]
 80175a6:	689b      	ldr	r3, [r3, #8]
 80175a8:	7afa      	ldrb	r2, [r7, #11]
 80175aa:	4610      	mov	r0, r2
 80175ac:	4798      	blx	r3
 80175ae:	4603      	mov	r3, r0
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d00b      	beq.n	80175cc <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80175b4:	7af9      	ldrb	r1, [r7, #11]
 80175b6:	233a      	movs	r3, #58	@ 0x3a
 80175b8:	2202      	movs	r2, #2
 80175ba:	68f8      	ldr	r0, [r7, #12]
 80175bc:	f7ff fcac 	bl	8016f18 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80175c0:	697b      	ldr	r3, [r7, #20]
 80175c2:	2205      	movs	r2, #5
 80175c4:	721a      	strb	r2, [r3, #8]
      return -1;
 80175c6:	f04f 33ff 	mov.w	r3, #4294967295
 80175ca:	e089      	b.n	80176e0 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80175d2:	68fa      	ldr	r2, [r7, #12]
 80175d4:	33b0      	adds	r3, #176	@ 0xb0
 80175d6:	009b      	lsls	r3, r3, #2
 80175d8:	4413      	add	r3, r2
 80175da:	685b      	ldr	r3, [r3, #4]
 80175dc:	68db      	ldr	r3, [r3, #12]
 80175de:	7afa      	ldrb	r2, [r7, #11]
 80175e0:	4610      	mov	r0, r2
 80175e2:	4798      	blx	r3
 80175e4:	4603      	mov	r3, r0
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d00b      	beq.n	8017602 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80175ea:	7af9      	ldrb	r1, [r7, #11]
 80175ec:	2327      	movs	r3, #39	@ 0x27
 80175ee:	2202      	movs	r2, #2
 80175f0:	68f8      	ldr	r0, [r7, #12]
 80175f2:	f7ff fc91 	bl	8016f18 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80175f6:	697b      	ldr	r3, [r7, #20]
 80175f8:	2205      	movs	r2, #5
 80175fa:	721a      	strb	r2, [r3, #8]
      return -1;
 80175fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017600:	e06e      	b.n	80176e0 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	3302      	adds	r3, #2
 8017606:	781b      	ldrb	r3, [r3, #0]
 8017608:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	3303      	adds	r3, #3
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017612:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	3304      	adds	r3, #4
 8017618:	781b      	ldrb	r3, [r3, #0]
 801761a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801761c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801761e:	687a      	ldr	r2, [r7, #4]
 8017620:	3205      	adds	r2, #5
 8017622:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8017624:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017626:	697b      	ldr	r3, [r7, #20]
 8017628:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	3306      	adds	r3, #6
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	3307      	adds	r3, #7
 8017638:	781b      	ldrb	r3, [r3, #0]
 801763a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801763c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	3308      	adds	r3, #8
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8017646:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8017648:	687a      	ldr	r2, [r7, #4]
 801764a:	3209      	adds	r2, #9
 801764c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801764e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017656:	697b      	ldr	r3, [r7, #20]
 8017658:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 801765c:	697b      	ldr	r3, [r7, #20]
 801765e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017662:	7af9      	ldrb	r1, [r7, #11]
 8017664:	68f8      	ldr	r0, [r7, #12]
 8017666:	f000 f87e 	bl	8017766 <SCSI_CheckAddressRange>
 801766a:	4603      	mov	r3, r0
 801766c:	2b00      	cmp	r3, #0
 801766e:	da02      	bge.n	8017676 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017670:	f04f 33ff 	mov.w	r3, #4294967295
 8017674:	e034      	b.n	80176e0 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017676:	697b      	ldr	r3, [r7, #20]
 8017678:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801767c:	697a      	ldr	r2, [r7, #20]
 801767e:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017682:	fb02 f303 	mul.w	r3, r2, r3
 8017686:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8017688:	697b      	ldr	r3, [r7, #20]
 801768a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801768e:	693a      	ldr	r2, [r7, #16]
 8017690:	429a      	cmp	r2, r3
 8017692:	d00a      	beq.n	80176aa <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017694:	697b      	ldr	r3, [r7, #20]
 8017696:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801769a:	2320      	movs	r3, #32
 801769c:	2205      	movs	r2, #5
 801769e:	68f8      	ldr	r0, [r7, #12]
 80176a0:	f7ff fc3a 	bl	8016f18 <SCSI_SenseCode>
      return -1;
 80176a4:	f04f 33ff 	mov.w	r3, #4294967295
 80176a8:	e01a      	b.n	80176e0 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80176aa:	693b      	ldr	r3, [r7, #16]
 80176ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80176b0:	bf28      	it	cs
 80176b2:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80176b6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80176b8:	697b      	ldr	r3, [r7, #20]
 80176ba:	2201      	movs	r2, #1
 80176bc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80176be:	4b0a      	ldr	r3, [pc, #40]	@ (80176e8 <SCSI_Write12+0x1c8>)
 80176c0:	7819      	ldrb	r1, [r3, #0]
 80176c2:	697b      	ldr	r3, [r7, #20]
 80176c4:	f103 0210 	add.w	r2, r3, #16
 80176c8:	693b      	ldr	r3, [r7, #16]
 80176ca:	68f8      	ldr	r0, [r7, #12]
 80176cc:	f005 ffc7 	bl	801d65e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80176d0:	2300      	movs	r3, #0
 80176d2:	e005      	b.n	80176e0 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80176d4:	7afb      	ldrb	r3, [r7, #11]
 80176d6:	4619      	mov	r1, r3
 80176d8:	68f8      	ldr	r0, [r7, #12]
 80176da:	f000 f8f7 	bl	80178cc <SCSI_ProcessWrite>
 80176de:	4603      	mov	r3, r0
}
 80176e0:	4618      	mov	r0, r3
 80176e2:	3718      	adds	r7, #24
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd80      	pop	{r7, pc}
 80176e8:	200000af 	.word	0x200000af

080176ec <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b086      	sub	sp, #24
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	60f8      	str	r0, [r7, #12]
 80176f4:	460b      	mov	r3, r1
 80176f6:	607a      	str	r2, [r7, #4]
 80176f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	32b0      	adds	r2, #176	@ 0xb0
 8017704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017708:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801770a:	697b      	ldr	r3, [r7, #20]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d102      	bne.n	8017716 <SCSI_Verify10+0x2a>
  {
    return -1;
 8017710:	f04f 33ff 	mov.w	r3, #4294967295
 8017714:	e023      	b.n	801775e <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	3301      	adds	r3, #1
 801771a:	781b      	ldrb	r3, [r3, #0]
 801771c:	f003 0302 	and.w	r3, r3, #2
 8017720:	2b00      	cmp	r3, #0
 8017722:	d008      	beq.n	8017736 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8017724:	7af9      	ldrb	r1, [r7, #11]
 8017726:	2324      	movs	r3, #36	@ 0x24
 8017728:	2205      	movs	r2, #5
 801772a:	68f8      	ldr	r0, [r7, #12]
 801772c:	f7ff fbf4 	bl	8016f18 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8017730:	f04f 33ff 	mov.w	r3, #4294967295
 8017734:	e013      	b.n	801775e <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8017736:	697b      	ldr	r3, [r7, #20]
 8017738:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 801773c:	697b      	ldr	r3, [r7, #20]
 801773e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017742:	7af9      	ldrb	r1, [r7, #11]
 8017744:	68f8      	ldr	r0, [r7, #12]
 8017746:	f000 f80e 	bl	8017766 <SCSI_CheckAddressRange>
 801774a:	4603      	mov	r3, r0
 801774c:	2b00      	cmp	r3, #0
 801774e:	da02      	bge.n	8017756 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8017750:	f04f 33ff 	mov.w	r3, #4294967295
 8017754:	e003      	b.n	801775e <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8017756:	697b      	ldr	r3, [r7, #20]
 8017758:	2200      	movs	r2, #0
 801775a:	60da      	str	r2, [r3, #12]

  return 0;
 801775c:	2300      	movs	r3, #0
}
 801775e:	4618      	mov	r0, r3
 8017760:	3718      	adds	r7, #24
 8017762:	46bd      	mov	sp, r7
 8017764:	bd80      	pop	{r7, pc}

08017766 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8017766:	b580      	push	{r7, lr}
 8017768:	b086      	sub	sp, #24
 801776a:	af00      	add	r7, sp, #0
 801776c:	60f8      	str	r0, [r7, #12]
 801776e:	607a      	str	r2, [r7, #4]
 8017770:	603b      	str	r3, [r7, #0]
 8017772:	460b      	mov	r3, r1
 8017774:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	32b0      	adds	r2, #176	@ 0xb0
 8017780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017784:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d102      	bne.n	8017792 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 801778c:	f04f 33ff 	mov.w	r3, #4294967295
 8017790:	e011      	b.n	80177b6 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8017792:	687a      	ldr	r2, [r7, #4]
 8017794:	683b      	ldr	r3, [r7, #0]
 8017796:	441a      	add	r2, r3
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 801779e:	429a      	cmp	r2, r3
 80177a0:	d908      	bls.n	80177b4 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80177a2:	7af9      	ldrb	r1, [r7, #11]
 80177a4:	2321      	movs	r3, #33	@ 0x21
 80177a6:	2205      	movs	r2, #5
 80177a8:	68f8      	ldr	r0, [r7, #12]
 80177aa:	f7ff fbb5 	bl	8016f18 <SCSI_SenseCode>
    return -1;
 80177ae:	f04f 33ff 	mov.w	r3, #4294967295
 80177b2:	e000      	b.n	80177b6 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 80177b4:	2300      	movs	r3, #0
}
 80177b6:	4618      	mov	r0, r3
 80177b8:	3718      	adds	r7, #24
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}
	...

080177c0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80177c0:	b590      	push	{r4, r7, lr}
 80177c2:	b085      	sub	sp, #20
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
 80177c8:	460b      	mov	r3, r1
 80177ca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	32b0      	adds	r2, #176	@ 0xb0
 80177d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80177da:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d102      	bne.n	80177e8 <SCSI_ProcessRead+0x28>
  {
    return -1;
 80177e2:	f04f 33ff 	mov.w	r3, #4294967295
 80177e6:	e06a      	b.n	80178be <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80177ee:	68fa      	ldr	r2, [r7, #12]
 80177f0:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 80177f4:	fb02 f303 	mul.w	r3, r2, r3
 80177f8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80177fa:	68bb      	ldr	r3, [r7, #8]
 80177fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017800:	bf28      	it	cs
 8017802:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017806:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801780e:	687a      	ldr	r2, [r7, #4]
 8017810:	33b0      	adds	r3, #176	@ 0xb0
 8017812:	009b      	lsls	r3, r3, #2
 8017814:	4413      	add	r3, r2
 8017816:	685b      	ldr	r3, [r3, #4]
 8017818:	691c      	ldr	r4, [r3, #16]
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	f103 0110 	add.w	r1, r3, #16
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801782c:	4618      	mov	r0, r3
 801782e:	68bb      	ldr	r3, [r7, #8]
 8017830:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8017834:	b29b      	uxth	r3, r3
 8017836:	78f8      	ldrb	r0, [r7, #3]
 8017838:	47a0      	blx	r4
 801783a:	4603      	mov	r3, r0
 801783c:	2b00      	cmp	r3, #0
 801783e:	da08      	bge.n	8017852 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8017840:	78f9      	ldrb	r1, [r7, #3]
 8017842:	2311      	movs	r3, #17
 8017844:	2204      	movs	r2, #4
 8017846:	6878      	ldr	r0, [r7, #4]
 8017848:	f7ff fb66 	bl	8016f18 <SCSI_SenseCode>
    return -1;
 801784c:	f04f 33ff 	mov.w	r3, #4294967295
 8017850:	e035      	b.n	80178be <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8017852:	4b1d      	ldr	r3, [pc, #116]	@ (80178c8 <SCSI_ProcessRead+0x108>)
 8017854:	7819      	ldrb	r1, [r3, #0]
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	f103 0210 	add.w	r2, r3, #16
 801785c:	68bb      	ldr	r3, [r7, #8]
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f005 fedc 	bl	801d61c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017870:	4619      	mov	r1, r3
 8017872:	68bb      	ldr	r3, [r7, #8]
 8017874:	fbb3 f3f1 	udiv	r3, r3, r1
 8017878:	441a      	add	r2, r3
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801788c:	4619      	mov	r1, r3
 801788e:	68bb      	ldr	r3, [r7, #8]
 8017890:	fbb3 f3f1 	udiv	r3, r3, r1
 8017894:	1ad2      	subs	r2, r2, r3
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	1ad2      	subs	r2, r2, r3
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d102      	bne.n	80178bc <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	2203      	movs	r2, #3
 80178ba:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80178bc:	2300      	movs	r3, #0
}
 80178be:	4618      	mov	r0, r3
 80178c0:	3714      	adds	r7, #20
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd90      	pop	{r4, r7, pc}
 80178c6:	bf00      	nop
 80178c8:	200000ae 	.word	0x200000ae

080178cc <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80178cc:	b590      	push	{r4, r7, lr}
 80178ce:	b085      	sub	sp, #20
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
 80178d4:	460b      	mov	r3, r1
 80178d6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	32b0      	adds	r2, #176	@ 0xb0
 80178e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80178e6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d102      	bne.n	80178f4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80178ee:	f04f 33ff 	mov.w	r3, #4294967295
 80178f2:	e07a      	b.n	80179ea <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80178fa:	68fa      	ldr	r2, [r7, #12]
 80178fc:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017900:	fb02 f303 	mul.w	r3, r2, r3
 8017904:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8017906:	68bb      	ldr	r3, [r7, #8]
 8017908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801790c:	bf28      	it	cs
 801790e:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017912:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801791a:	687a      	ldr	r2, [r7, #4]
 801791c:	33b0      	adds	r3, #176	@ 0xb0
 801791e:	009b      	lsls	r3, r3, #2
 8017920:	4413      	add	r3, r2
 8017922:	685b      	ldr	r3, [r3, #4]
 8017924:	695c      	ldr	r4, [r3, #20]
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	f103 0110 	add.w	r1, r3, #16
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017938:	4618      	mov	r0, r3
 801793a:	68bb      	ldr	r3, [r7, #8]
 801793c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8017940:	b29b      	uxth	r3, r3
 8017942:	78f8      	ldrb	r0, [r7, #3]
 8017944:	47a0      	blx	r4
 8017946:	4603      	mov	r3, r0
 8017948:	2b00      	cmp	r3, #0
 801794a:	da08      	bge.n	801795e <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801794c:	78f9      	ldrb	r1, [r7, #3]
 801794e:	2303      	movs	r3, #3
 8017950:	2204      	movs	r2, #4
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	f7ff fae0 	bl	8016f18 <SCSI_SenseCode>
    return -1;
 8017958:	f04f 33ff 	mov.w	r3, #4294967295
 801795c:	e045      	b.n	80179ea <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801796a:	4619      	mov	r1, r3
 801796c:	68bb      	ldr	r3, [r7, #8]
 801796e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017972:	441a      	add	r2, r3
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017986:	4619      	mov	r1, r3
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	fbb3 f3f1 	udiv	r3, r3, r1
 801798e:	1ad2      	subs	r2, r2, r3
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 801799c:	68bb      	ldr	r3, [r7, #8]
 801799e:	1ad2      	subs	r2, r2, r3
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d104      	bne.n	80179ba <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80179b0:	2100      	movs	r1, #0
 80179b2:	6878      	ldr	r0, [r7, #4]
 80179b4:	f7fe fce2 	bl	801637c <MSC_BOT_SendCSW>
 80179b8:	e016      	b.n	80179e8 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80179c0:	68fa      	ldr	r2, [r7, #12]
 80179c2:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 80179c6:	fb02 f303 	mul.w	r3, r2, r3
 80179ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80179ce:	bf28      	it	cs
 80179d0:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80179d4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80179d6:	4b07      	ldr	r3, [pc, #28]	@ (80179f4 <SCSI_ProcessWrite+0x128>)
 80179d8:	7819      	ldrb	r1, [r3, #0]
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	f103 0210 	add.w	r2, r3, #16
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	6878      	ldr	r0, [r7, #4]
 80179e4:	f005 fe3b 	bl	801d65e <USBD_LL_PrepareReceive>
  }

  return 0;
 80179e8:	2300      	movs	r3, #0
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	3714      	adds	r7, #20
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd90      	pop	{r4, r7, pc}
 80179f2:	bf00      	nop
 80179f4:	200000af 	.word	0x200000af

080179f8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80179f8:	b480      	push	{r7}
 80179fa:	b087      	sub	sp, #28
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	60f8      	str	r0, [r7, #12]
 8017a00:	60b9      	str	r1, [r7, #8]
 8017a02:	4613      	mov	r3, r2
 8017a04:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8017a06:	88fb      	ldrh	r3, [r7, #6]
 8017a08:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d102      	bne.n	8017a16 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8017a10:	f04f 33ff 	mov.w	r3, #4294967295
 8017a14:	e013      	b.n	8017a3e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8017a16:	8afa      	ldrh	r2, [r7, #22]
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8017a1c:	e00b      	b.n	8017a36 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8017a1e:	8afb      	ldrh	r3, [r7, #22]
 8017a20:	3b01      	subs	r3, #1
 8017a22:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8017a24:	8afb      	ldrh	r3, [r7, #22]
 8017a26:	68ba      	ldr	r2, [r7, #8]
 8017a28:	441a      	add	r2, r3
 8017a2a:	8afb      	ldrh	r3, [r7, #22]
 8017a2c:	7811      	ldrb	r1, [r2, #0]
 8017a2e:	68fa      	ldr	r2, [r7, #12]
 8017a30:	4413      	add	r3, r2
 8017a32:	460a      	mov	r2, r1
 8017a34:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8017a36:	8afb      	ldrh	r3, [r7, #22]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d1f0      	bne.n	8017a1e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8017a3c:	2300      	movs	r3, #0
}
 8017a3e:	4618      	mov	r0, r3
 8017a40:	371c      	adds	r7, #28
 8017a42:	46bd      	mov	sp, r7
 8017a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a48:	4770      	bx	lr

08017a4a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017a4a:	b580      	push	{r7, lr}
 8017a4c:	b086      	sub	sp, #24
 8017a4e:	af00      	add	r7, sp, #0
 8017a50:	60f8      	str	r0, [r7, #12]
 8017a52:	60b9      	str	r1, [r7, #8]
 8017a54:	4613      	mov	r3, r2
 8017a56:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d101      	bne.n	8017a62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017a5e:	2303      	movs	r3, #3
 8017a60:	e01f      	b.n	8017aa2 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	2200      	movs	r2, #0
 8017a66:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	2200      	movs	r2, #0
 8017a76:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017a7a:	68bb      	ldr	r3, [r7, #8]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d003      	beq.n	8017a88 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	68ba      	ldr	r2, [r7, #8]
 8017a84:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	2201      	movs	r2, #1
 8017a8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	79fa      	ldrb	r2, [r7, #7]
 8017a94:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017a96:	68f8      	ldr	r0, [r7, #12]
 8017a98:	f005 fc36 	bl	801d308 <USBD_LL_Init>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	3718      	adds	r7, #24
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}

08017aaa <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8017aaa:	b580      	push	{r7, lr}
 8017aac:	b084      	sub	sp, #16
 8017aae:	af00      	add	r7, sp, #0
 8017ab0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8017ab2:	6878      	ldr	r0, [r7, #4]
 8017ab4:	f005 fcaa 	bl	801d40c <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2201      	movs	r2, #1
 8017abc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d009      	beq.n	8017ade <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	687a      	ldr	r2, [r7, #4]
 8017ad4:	6852      	ldr	r2, [r2, #4]
 8017ad6:	b2d2      	uxtb	r2, r2
 8017ad8:	4611      	mov	r1, r2
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	2200      	movs	r2, #0
 8017aea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	2200      	movs	r2, #0
 8017af2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8017af6:	6878      	ldr	r0, [r7, #4]
 8017af8:	f005 fc52 	bl	801d3a0 <USBD_LL_DeInit>
 8017afc:	4603      	mov	r3, r0
 8017afe:	73fb      	strb	r3, [r7, #15]

  return ret;
 8017b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b02:	4618      	mov	r0, r3
 8017b04:	3710      	adds	r7, #16
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}

08017b0a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017b0a:	b580      	push	{r7, lr}
 8017b0c:	b084      	sub	sp, #16
 8017b0e:	af00      	add	r7, sp, #0
 8017b10:	6078      	str	r0, [r7, #4]
 8017b12:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017b14:	2300      	movs	r3, #0
 8017b16:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017b18:	683b      	ldr	r3, [r7, #0]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d101      	bne.n	8017b22 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017b1e:	2303      	movs	r3, #3
 8017b20:	e025      	b.n	8017b6e <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	683a      	ldr	r2, [r7, #0]
 8017b26:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	32ae      	adds	r2, #174	@ 0xae
 8017b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d00f      	beq.n	8017b5e <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	32ae      	adds	r2, #174	@ 0xae
 8017b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017b4e:	f107 020e 	add.w	r2, r7, #14
 8017b52:	4610      	mov	r0, r2
 8017b54:	4798      	blx	r3
 8017b56:	4602      	mov	r2, r0
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017b64:	1c5a      	adds	r2, r3, #1
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8017b6c:	2300      	movs	r3, #0
}
 8017b6e:	4618      	mov	r0, r3
 8017b70:	3710      	adds	r7, #16
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd80      	pop	{r7, pc}

08017b76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017b76:	b580      	push	{r7, lr}
 8017b78:	b082      	sub	sp, #8
 8017b7a:	af00      	add	r7, sp, #0
 8017b7c:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017b7e:	6878      	ldr	r0, [r7, #4]
 8017b80:	f005 fc29 	bl	801d3d6 <USBD_LL_Start>
 8017b84:	4603      	mov	r3, r0
}
 8017b86:	4618      	mov	r0, r3
 8017b88:	3708      	adds	r7, #8
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	bd80      	pop	{r7, pc}

08017b8e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8017b8e:	b580      	push	{r7, lr}
 8017b90:	b082      	sub	sp, #8
 8017b92:	af00      	add	r7, sp, #0
 8017b94:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8017b96:	6878      	ldr	r0, [r7, #4]
 8017b98:	f005 fc38 	bl	801d40c <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d009      	beq.n	8017bba <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017bac:	685b      	ldr	r3, [r3, #4]
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	6852      	ldr	r2, [r2, #4]
 8017bb2:	b2d2      	uxtb	r2, r2
 8017bb4:	4611      	mov	r1, r2
 8017bb6:	6878      	ldr	r0, [r7, #4]
 8017bb8:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8017bba:	2300      	movs	r3, #0
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	3708      	adds	r7, #8
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}

08017bc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017bc4:	b480      	push	{r7}
 8017bc6:	b083      	sub	sp, #12
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017bcc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8017bce:	4618      	mov	r0, r3
 8017bd0:	370c      	adds	r7, #12
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd8:	4770      	bx	lr

08017bda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017bda:	b580      	push	{r7, lr}
 8017bdc:	b084      	sub	sp, #16
 8017bde:	af00      	add	r7, sp, #0
 8017be0:	6078      	str	r0, [r7, #4]
 8017be2:	460b      	mov	r3, r1
 8017be4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017be6:	2300      	movs	r3, #0
 8017be8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d009      	beq.n	8017c08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	78fa      	ldrb	r2, [r7, #3]
 8017bfe:	4611      	mov	r1, r2
 8017c00:	6878      	ldr	r0, [r7, #4]
 8017c02:	4798      	blx	r3
 8017c04:	4603      	mov	r3, r0
 8017c06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	3710      	adds	r7, #16
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd80      	pop	{r7, pc}

08017c12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017c12:	b580      	push	{r7, lr}
 8017c14:	b084      	sub	sp, #16
 8017c16:	af00      	add	r7, sp, #0
 8017c18:	6078      	str	r0, [r7, #4]
 8017c1a:	460b      	mov	r3, r1
 8017c1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c1e:	2300      	movs	r3, #0
 8017c20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c28:	685b      	ldr	r3, [r3, #4]
 8017c2a:	78fa      	ldrb	r2, [r7, #3]
 8017c2c:	4611      	mov	r1, r2
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	4798      	blx	r3
 8017c32:	4603      	mov	r3, r0
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d001      	beq.n	8017c3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8017c38:	2303      	movs	r3, #3
 8017c3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c3e:	4618      	mov	r0, r3
 8017c40:	3710      	adds	r7, #16
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bd80      	pop	{r7, pc}

08017c46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017c46:	b580      	push	{r7, lr}
 8017c48:	b084      	sub	sp, #16
 8017c4a:	af00      	add	r7, sp, #0
 8017c4c:	6078      	str	r0, [r7, #4]
 8017c4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017c56:	6839      	ldr	r1, [r7, #0]
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f001 f90c 	bl	8018e76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	2201      	movs	r2, #1
 8017c62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8017c6c:	461a      	mov	r2, r3
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017c7a:	f003 031f 	and.w	r3, r3, #31
 8017c7e:	2b02      	cmp	r3, #2
 8017c80:	d01a      	beq.n	8017cb8 <USBD_LL_SetupStage+0x72>
 8017c82:	2b02      	cmp	r3, #2
 8017c84:	d822      	bhi.n	8017ccc <USBD_LL_SetupStage+0x86>
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d002      	beq.n	8017c90 <USBD_LL_SetupStage+0x4a>
 8017c8a:	2b01      	cmp	r3, #1
 8017c8c:	d00a      	beq.n	8017ca4 <USBD_LL_SetupStage+0x5e>
 8017c8e:	e01d      	b.n	8017ccc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017c96:	4619      	mov	r1, r3
 8017c98:	6878      	ldr	r0, [r7, #4]
 8017c9a:	f000 fb63 	bl	8018364 <USBD_StdDevReq>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8017ca2:	e020      	b.n	8017ce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017caa:	4619      	mov	r1, r3
 8017cac:	6878      	ldr	r0, [r7, #4]
 8017cae:	f000 fbcb 	bl	8018448 <USBD_StdItfReq>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8017cb6:	e016      	b.n	8017ce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017cbe:	4619      	mov	r1, r3
 8017cc0:	6878      	ldr	r0, [r7, #4]
 8017cc2:	f000 fc2d 	bl	8018520 <USBD_StdEPReq>
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8017cca:	e00c      	b.n	8017ce6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017cd2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017cd6:	b2db      	uxtb	r3, r3
 8017cd8:	4619      	mov	r1, r3
 8017cda:	6878      	ldr	r0, [r7, #4]
 8017cdc:	f005 fc15 	bl	801d50a <USBD_LL_StallEP>
 8017ce0:	4603      	mov	r3, r0
 8017ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8017ce4:	bf00      	nop
  }

  return ret;
 8017ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	3710      	adds	r7, #16
 8017cec:	46bd      	mov	sp, r7
 8017cee:	bd80      	pop	{r7, pc}

08017cf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b086      	sub	sp, #24
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	60f8      	str	r0, [r7, #12]
 8017cf8:	460b      	mov	r3, r1
 8017cfa:	607a      	str	r2, [r7, #4]
 8017cfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8017cfe:	2300      	movs	r3, #0
 8017d00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8017d02:	7afb      	ldrb	r3, [r7, #11]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d16e      	bne.n	8017de6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8017d0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017d16:	2b03      	cmp	r3, #3
 8017d18:	f040 8098 	bne.w	8017e4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8017d1c:	693b      	ldr	r3, [r7, #16]
 8017d1e:	689a      	ldr	r2, [r3, #8]
 8017d20:	693b      	ldr	r3, [r7, #16]
 8017d22:	68db      	ldr	r3, [r3, #12]
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d913      	bls.n	8017d50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8017d28:	693b      	ldr	r3, [r7, #16]
 8017d2a:	689a      	ldr	r2, [r3, #8]
 8017d2c:	693b      	ldr	r3, [r7, #16]
 8017d2e:	68db      	ldr	r3, [r3, #12]
 8017d30:	1ad2      	subs	r2, r2, r3
 8017d32:	693b      	ldr	r3, [r7, #16]
 8017d34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017d36:	693b      	ldr	r3, [r7, #16]
 8017d38:	68da      	ldr	r2, [r3, #12]
 8017d3a:	693b      	ldr	r3, [r7, #16]
 8017d3c:	689b      	ldr	r3, [r3, #8]
 8017d3e:	4293      	cmp	r3, r2
 8017d40:	bf28      	it	cs
 8017d42:	4613      	movcs	r3, r2
 8017d44:	461a      	mov	r2, r3
 8017d46:	6879      	ldr	r1, [r7, #4]
 8017d48:	68f8      	ldr	r0, [r7, #12]
 8017d4a:	f001 f96b 	bl	8019024 <USBD_CtlContinueRx>
 8017d4e:	e07d      	b.n	8017e4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017d56:	f003 031f 	and.w	r3, r3, #31
 8017d5a:	2b02      	cmp	r3, #2
 8017d5c:	d014      	beq.n	8017d88 <USBD_LL_DataOutStage+0x98>
 8017d5e:	2b02      	cmp	r3, #2
 8017d60:	d81d      	bhi.n	8017d9e <USBD_LL_DataOutStage+0xae>
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d002      	beq.n	8017d6c <USBD_LL_DataOutStage+0x7c>
 8017d66:	2b01      	cmp	r3, #1
 8017d68:	d003      	beq.n	8017d72 <USBD_LL_DataOutStage+0x82>
 8017d6a:	e018      	b.n	8017d9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	75bb      	strb	r3, [r7, #22]
            break;
 8017d70:	e018      	b.n	8017da4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017d78:	b2db      	uxtb	r3, r3
 8017d7a:	4619      	mov	r1, r3
 8017d7c:	68f8      	ldr	r0, [r7, #12]
 8017d7e:	f000 fa64 	bl	801824a <USBD_CoreFindIF>
 8017d82:	4603      	mov	r3, r0
 8017d84:	75bb      	strb	r3, [r7, #22]
            break;
 8017d86:	e00d      	b.n	8017da4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017d8e:	b2db      	uxtb	r3, r3
 8017d90:	4619      	mov	r1, r3
 8017d92:	68f8      	ldr	r0, [r7, #12]
 8017d94:	f000 fa66 	bl	8018264 <USBD_CoreFindEP>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	75bb      	strb	r3, [r7, #22]
            break;
 8017d9c:	e002      	b.n	8017da4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8017d9e:	2300      	movs	r3, #0
 8017da0:	75bb      	strb	r3, [r7, #22]
            break;
 8017da2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017da4:	7dbb      	ldrb	r3, [r7, #22]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d119      	bne.n	8017dde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017db0:	b2db      	uxtb	r3, r3
 8017db2:	2b03      	cmp	r3, #3
 8017db4:	d113      	bne.n	8017dde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017db6:	7dba      	ldrb	r2, [r7, #22]
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	32ae      	adds	r2, #174	@ 0xae
 8017dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017dc0:	691b      	ldr	r3, [r3, #16]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d00b      	beq.n	8017dde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017dc6:	7dba      	ldrb	r2, [r7, #22]
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8017dce:	7dba      	ldrb	r2, [r7, #22]
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	32ae      	adds	r2, #174	@ 0xae
 8017dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017dd8:	691b      	ldr	r3, [r3, #16]
 8017dda:	68f8      	ldr	r0, [r7, #12]
 8017ddc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017dde:	68f8      	ldr	r0, [r7, #12]
 8017de0:	f001 f931 	bl	8019046 <USBD_CtlSendStatus>
 8017de4:	e032      	b.n	8017e4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8017de6:	7afb      	ldrb	r3, [r7, #11]
 8017de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017dec:	b2db      	uxtb	r3, r3
 8017dee:	4619      	mov	r1, r3
 8017df0:	68f8      	ldr	r0, [r7, #12]
 8017df2:	f000 fa37 	bl	8018264 <USBD_CoreFindEP>
 8017df6:	4603      	mov	r3, r0
 8017df8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017dfa:	7dbb      	ldrb	r3, [r7, #22]
 8017dfc:	2bff      	cmp	r3, #255	@ 0xff
 8017dfe:	d025      	beq.n	8017e4c <USBD_LL_DataOutStage+0x15c>
 8017e00:	7dbb      	ldrb	r3, [r7, #22]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d122      	bne.n	8017e4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017e0c:	b2db      	uxtb	r3, r3
 8017e0e:	2b03      	cmp	r3, #3
 8017e10:	d117      	bne.n	8017e42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8017e12:	7dba      	ldrb	r2, [r7, #22]
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	32ae      	adds	r2, #174	@ 0xae
 8017e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e1c:	699b      	ldr	r3, [r3, #24]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d00f      	beq.n	8017e42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8017e22:	7dba      	ldrb	r2, [r7, #22]
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8017e2a:	7dba      	ldrb	r2, [r7, #22]
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	32ae      	adds	r2, #174	@ 0xae
 8017e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e34:	699b      	ldr	r3, [r3, #24]
 8017e36:	7afa      	ldrb	r2, [r7, #11]
 8017e38:	4611      	mov	r1, r2
 8017e3a:	68f8      	ldr	r0, [r7, #12]
 8017e3c:	4798      	blx	r3
 8017e3e:	4603      	mov	r3, r0
 8017e40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8017e42:	7dfb      	ldrb	r3, [r7, #23]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d001      	beq.n	8017e4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8017e48:	7dfb      	ldrb	r3, [r7, #23]
 8017e4a:	e000      	b.n	8017e4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8017e4c:	2300      	movs	r3, #0
}
 8017e4e:	4618      	mov	r0, r3
 8017e50:	3718      	adds	r7, #24
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}

08017e56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017e56:	b580      	push	{r7, lr}
 8017e58:	b086      	sub	sp, #24
 8017e5a:	af00      	add	r7, sp, #0
 8017e5c:	60f8      	str	r0, [r7, #12]
 8017e5e:	460b      	mov	r3, r1
 8017e60:	607a      	str	r2, [r7, #4]
 8017e62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8017e64:	7afb      	ldrb	r3, [r7, #11]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d16f      	bne.n	8017f4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	3314      	adds	r3, #20
 8017e6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017e76:	2b02      	cmp	r3, #2
 8017e78:	d15a      	bne.n	8017f30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8017e7a:	693b      	ldr	r3, [r7, #16]
 8017e7c:	689a      	ldr	r2, [r3, #8]
 8017e7e:	693b      	ldr	r3, [r7, #16]
 8017e80:	68db      	ldr	r3, [r3, #12]
 8017e82:	429a      	cmp	r2, r3
 8017e84:	d914      	bls.n	8017eb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017e86:	693b      	ldr	r3, [r7, #16]
 8017e88:	689a      	ldr	r2, [r3, #8]
 8017e8a:	693b      	ldr	r3, [r7, #16]
 8017e8c:	68db      	ldr	r3, [r3, #12]
 8017e8e:	1ad2      	subs	r2, r2, r3
 8017e90:	693b      	ldr	r3, [r7, #16]
 8017e92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017e94:	693b      	ldr	r3, [r7, #16]
 8017e96:	689b      	ldr	r3, [r3, #8]
 8017e98:	461a      	mov	r2, r3
 8017e9a:	6879      	ldr	r1, [r7, #4]
 8017e9c:	68f8      	ldr	r0, [r7, #12]
 8017e9e:	f001 f8b0 	bl	8019002 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	2100      	movs	r1, #0
 8017ea8:	68f8      	ldr	r0, [r7, #12]
 8017eaa:	f005 fbd8 	bl	801d65e <USBD_LL_PrepareReceive>
 8017eae:	e03f      	b.n	8017f30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017eb0:	693b      	ldr	r3, [r7, #16]
 8017eb2:	68da      	ldr	r2, [r3, #12]
 8017eb4:	693b      	ldr	r3, [r7, #16]
 8017eb6:	689b      	ldr	r3, [r3, #8]
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	d11c      	bne.n	8017ef6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017ebc:	693b      	ldr	r3, [r7, #16]
 8017ebe:	685a      	ldr	r2, [r3, #4]
 8017ec0:	693b      	ldr	r3, [r7, #16]
 8017ec2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	d316      	bcc.n	8017ef6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	685a      	ldr	r2, [r3, #4]
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	d20f      	bcs.n	8017ef6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	2100      	movs	r1, #0
 8017eda:	68f8      	ldr	r0, [r7, #12]
 8017edc:	f001 f891 	bl	8019002 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017ee8:	2300      	movs	r3, #0
 8017eea:	2200      	movs	r2, #0
 8017eec:	2100      	movs	r1, #0
 8017eee:	68f8      	ldr	r0, [r7, #12]
 8017ef0:	f005 fbb5 	bl	801d65e <USBD_LL_PrepareReceive>
 8017ef4:	e01c      	b.n	8017f30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	2b03      	cmp	r3, #3
 8017f00:	d10f      	bne.n	8017f22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017f08:	68db      	ldr	r3, [r3, #12]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d009      	beq.n	8017f22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2200      	movs	r2, #0
 8017f12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017f1c:	68db      	ldr	r3, [r3, #12]
 8017f1e:	68f8      	ldr	r0, [r7, #12]
 8017f20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017f22:	2180      	movs	r1, #128	@ 0x80
 8017f24:	68f8      	ldr	r0, [r7, #12]
 8017f26:	f005 faf0 	bl	801d50a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017f2a:	68f8      	ldr	r0, [r7, #12]
 8017f2c:	f001 f89e 	bl	801906c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d03a      	beq.n	8017fb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8017f3a:	68f8      	ldr	r0, [r7, #12]
 8017f3c:	f7ff fe42 	bl	8017bc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	2200      	movs	r2, #0
 8017f44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8017f48:	e032      	b.n	8017fb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8017f4a:	7afb      	ldrb	r3, [r7, #11]
 8017f4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017f50:	b2db      	uxtb	r3, r3
 8017f52:	4619      	mov	r1, r3
 8017f54:	68f8      	ldr	r0, [r7, #12]
 8017f56:	f000 f985 	bl	8018264 <USBD_CoreFindEP>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017f5e:	7dfb      	ldrb	r3, [r7, #23]
 8017f60:	2bff      	cmp	r3, #255	@ 0xff
 8017f62:	d025      	beq.n	8017fb0 <USBD_LL_DataInStage+0x15a>
 8017f64:	7dfb      	ldrb	r3, [r7, #23]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d122      	bne.n	8017fb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017f70:	b2db      	uxtb	r3, r3
 8017f72:	2b03      	cmp	r3, #3
 8017f74:	d11c      	bne.n	8017fb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8017f76:	7dfa      	ldrb	r2, [r7, #23]
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	32ae      	adds	r2, #174	@ 0xae
 8017f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f80:	695b      	ldr	r3, [r3, #20]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d014      	beq.n	8017fb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8017f86:	7dfa      	ldrb	r2, [r7, #23]
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8017f8e:	7dfa      	ldrb	r2, [r7, #23]
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	32ae      	adds	r2, #174	@ 0xae
 8017f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f98:	695b      	ldr	r3, [r3, #20]
 8017f9a:	7afa      	ldrb	r2, [r7, #11]
 8017f9c:	4611      	mov	r1, r2
 8017f9e:	68f8      	ldr	r0, [r7, #12]
 8017fa0:	4798      	blx	r3
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8017fa6:	7dbb      	ldrb	r3, [r7, #22]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d001      	beq.n	8017fb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8017fac:	7dbb      	ldrb	r3, [r7, #22]
 8017fae:	e000      	b.n	8017fb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8017fb0:	2300      	movs	r3, #0
}
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	3718      	adds	r7, #24
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd80      	pop	{r7, pc}

08017fba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017fba:	b580      	push	{r7, lr}
 8017fbc:	b084      	sub	sp, #16
 8017fbe:	af00      	add	r7, sp, #0
 8017fc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	2201      	movs	r2, #1
 8017fca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	2200      	movs	r2, #0
 8017fda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	2200      	movs	r2, #0
 8017fe0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	2200      	movs	r2, #0
 8017fe8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d014      	beq.n	8018020 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017ffc:	685b      	ldr	r3, [r3, #4]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d00e      	beq.n	8018020 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018008:	685b      	ldr	r3, [r3, #4]
 801800a:	687a      	ldr	r2, [r7, #4]
 801800c:	6852      	ldr	r2, [r2, #4]
 801800e:	b2d2      	uxtb	r2, r2
 8018010:	4611      	mov	r1, r2
 8018012:	6878      	ldr	r0, [r7, #4]
 8018014:	4798      	blx	r3
 8018016:	4603      	mov	r3, r0
 8018018:	2b00      	cmp	r3, #0
 801801a:	d001      	beq.n	8018020 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801801c:	2303      	movs	r3, #3
 801801e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018020:	2340      	movs	r3, #64	@ 0x40
 8018022:	2200      	movs	r2, #0
 8018024:	2100      	movs	r1, #0
 8018026:	6878      	ldr	r0, [r7, #4]
 8018028:	f005 fa0b 	bl	801d442 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	2201      	movs	r2, #1
 8018030:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	2240      	movs	r2, #64	@ 0x40
 8018038:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801803c:	2340      	movs	r3, #64	@ 0x40
 801803e:	2200      	movs	r2, #0
 8018040:	2180      	movs	r1, #128	@ 0x80
 8018042:	6878      	ldr	r0, [r7, #4]
 8018044:	f005 f9fd 	bl	801d442 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	2201      	movs	r2, #1
 801804c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	2240      	movs	r2, #64	@ 0x40
 8018052:	621a      	str	r2, [r3, #32]

  return ret;
 8018054:	7bfb      	ldrb	r3, [r7, #15]
}
 8018056:	4618      	mov	r0, r3
 8018058:	3710      	adds	r7, #16
 801805a:	46bd      	mov	sp, r7
 801805c:	bd80      	pop	{r7, pc}

0801805e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801805e:	b480      	push	{r7}
 8018060:	b083      	sub	sp, #12
 8018062:	af00      	add	r7, sp, #0
 8018064:	6078      	str	r0, [r7, #4]
 8018066:	460b      	mov	r3, r1
 8018068:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	78fa      	ldrb	r2, [r7, #3]
 801806e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018070:	2300      	movs	r3, #0
}
 8018072:	4618      	mov	r0, r3
 8018074:	370c      	adds	r7, #12
 8018076:	46bd      	mov	sp, r7
 8018078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807c:	4770      	bx	lr

0801807e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801807e:	b480      	push	{r7}
 8018080:	b083      	sub	sp, #12
 8018082:	af00      	add	r7, sp, #0
 8018084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801808c:	b2db      	uxtb	r3, r3
 801808e:	2b04      	cmp	r3, #4
 8018090:	d006      	beq.n	80180a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018098:	b2da      	uxtb	r2, r3
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	2204      	movs	r2, #4
 80180a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80180a8:	2300      	movs	r3, #0
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	370c      	adds	r7, #12
 80180ae:	46bd      	mov	sp, r7
 80180b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b4:	4770      	bx	lr

080180b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80180b6:	b480      	push	{r7}
 80180b8:	b083      	sub	sp, #12
 80180ba:	af00      	add	r7, sp, #0
 80180bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80180c4:	b2db      	uxtb	r3, r3
 80180c6:	2b04      	cmp	r3, #4
 80180c8:	d106      	bne.n	80180d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80180d0:	b2da      	uxtb	r2, r3
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80180d8:	2300      	movs	r3, #0
}
 80180da:	4618      	mov	r0, r3
 80180dc:	370c      	adds	r7, #12
 80180de:	46bd      	mov	sp, r7
 80180e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e4:	4770      	bx	lr

080180e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80180e6:	b580      	push	{r7, lr}
 80180e8:	b082      	sub	sp, #8
 80180ea:	af00      	add	r7, sp, #0
 80180ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80180f4:	b2db      	uxtb	r3, r3
 80180f6:	2b03      	cmp	r3, #3
 80180f8:	d110      	bne.n	801811c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018100:	2b00      	cmp	r3, #0
 8018102:	d00b      	beq.n	801811c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801810a:	69db      	ldr	r3, [r3, #28]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d005      	beq.n	801811c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018116:	69db      	ldr	r3, [r3, #28]
 8018118:	6878      	ldr	r0, [r7, #4]
 801811a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801811c:	2300      	movs	r3, #0
}
 801811e:	4618      	mov	r0, r3
 8018120:	3708      	adds	r7, #8
 8018122:	46bd      	mov	sp, r7
 8018124:	bd80      	pop	{r7, pc}

08018126 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8018126:	b580      	push	{r7, lr}
 8018128:	b082      	sub	sp, #8
 801812a:	af00      	add	r7, sp, #0
 801812c:	6078      	str	r0, [r7, #4]
 801812e:	460b      	mov	r3, r1
 8018130:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	32ae      	adds	r2, #174	@ 0xae
 801813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d101      	bne.n	8018148 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8018144:	2303      	movs	r3, #3
 8018146:	e01c      	b.n	8018182 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801814e:	b2db      	uxtb	r3, r3
 8018150:	2b03      	cmp	r3, #3
 8018152:	d115      	bne.n	8018180 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	32ae      	adds	r2, #174	@ 0xae
 801815e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018162:	6a1b      	ldr	r3, [r3, #32]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d00b      	beq.n	8018180 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	32ae      	adds	r2, #174	@ 0xae
 8018172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018176:	6a1b      	ldr	r3, [r3, #32]
 8018178:	78fa      	ldrb	r2, [r7, #3]
 801817a:	4611      	mov	r1, r2
 801817c:	6878      	ldr	r0, [r7, #4]
 801817e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018180:	2300      	movs	r3, #0
}
 8018182:	4618      	mov	r0, r3
 8018184:	3708      	adds	r7, #8
 8018186:	46bd      	mov	sp, r7
 8018188:	bd80      	pop	{r7, pc}

0801818a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801818a:	b580      	push	{r7, lr}
 801818c:	b082      	sub	sp, #8
 801818e:	af00      	add	r7, sp, #0
 8018190:	6078      	str	r0, [r7, #4]
 8018192:	460b      	mov	r3, r1
 8018194:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	32ae      	adds	r2, #174	@ 0xae
 80181a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d101      	bne.n	80181ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80181a8:	2303      	movs	r3, #3
 80181aa:	e01c      	b.n	80181e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181b2:	b2db      	uxtb	r3, r3
 80181b4:	2b03      	cmp	r3, #3
 80181b6:	d115      	bne.n	80181e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	32ae      	adds	r2, #174	@ 0xae
 80181c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d00b      	beq.n	80181e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	32ae      	adds	r2, #174	@ 0xae
 80181d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181dc:	78fa      	ldrb	r2, [r7, #3]
 80181de:	4611      	mov	r1, r2
 80181e0:	6878      	ldr	r0, [r7, #4]
 80181e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80181e4:	2300      	movs	r3, #0
}
 80181e6:	4618      	mov	r0, r3
 80181e8:	3708      	adds	r7, #8
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}

080181ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80181ee:	b480      	push	{r7}
 80181f0:	b083      	sub	sp, #12
 80181f2:	af00      	add	r7, sp, #0
 80181f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80181f6:	2300      	movs	r3, #0
}
 80181f8:	4618      	mov	r0, r3
 80181fa:	370c      	adds	r7, #12
 80181fc:	46bd      	mov	sp, r7
 80181fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018202:	4770      	bx	lr

08018204 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b084      	sub	sp, #16
 8018208:	af00      	add	r7, sp, #0
 801820a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801820c:	2300      	movs	r3, #0
 801820e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	2201      	movs	r2, #1
 8018214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801821e:	2b00      	cmp	r3, #0
 8018220:	d00e      	beq.n	8018240 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018228:	685b      	ldr	r3, [r3, #4]
 801822a:	687a      	ldr	r2, [r7, #4]
 801822c:	6852      	ldr	r2, [r2, #4]
 801822e:	b2d2      	uxtb	r2, r2
 8018230:	4611      	mov	r1, r2
 8018232:	6878      	ldr	r0, [r7, #4]
 8018234:	4798      	blx	r3
 8018236:	4603      	mov	r3, r0
 8018238:	2b00      	cmp	r3, #0
 801823a:	d001      	beq.n	8018240 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801823c:	2303      	movs	r3, #3
 801823e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018240:	7bfb      	ldrb	r3, [r7, #15]
}
 8018242:	4618      	mov	r0, r3
 8018244:	3710      	adds	r7, #16
 8018246:	46bd      	mov	sp, r7
 8018248:	bd80      	pop	{r7, pc}

0801824a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801824a:	b480      	push	{r7}
 801824c:	b083      	sub	sp, #12
 801824e:	af00      	add	r7, sp, #0
 8018250:	6078      	str	r0, [r7, #4]
 8018252:	460b      	mov	r3, r1
 8018254:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018256:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018258:	4618      	mov	r0, r3
 801825a:	370c      	adds	r7, #12
 801825c:	46bd      	mov	sp, r7
 801825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018262:	4770      	bx	lr

08018264 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018264:	b480      	push	{r7}
 8018266:	b083      	sub	sp, #12
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
 801826c:	460b      	mov	r3, r1
 801826e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018270:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018272:	4618      	mov	r0, r3
 8018274:	370c      	adds	r7, #12
 8018276:	46bd      	mov	sp, r7
 8018278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827c:	4770      	bx	lr

0801827e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801827e:	b580      	push	{r7, lr}
 8018280:	b086      	sub	sp, #24
 8018282:	af00      	add	r7, sp, #0
 8018284:	6078      	str	r0, [r7, #4]
 8018286:	460b      	mov	r3, r1
 8018288:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8018292:	2300      	movs	r3, #0
 8018294:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	885b      	ldrh	r3, [r3, #2]
 801829a:	b29b      	uxth	r3, r3
 801829c:	68fa      	ldr	r2, [r7, #12]
 801829e:	7812      	ldrb	r2, [r2, #0]
 80182a0:	4293      	cmp	r3, r2
 80182a2:	d91f      	bls.n	80182e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	781b      	ldrb	r3, [r3, #0]
 80182a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80182aa:	e013      	b.n	80182d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80182ac:	f107 030a 	add.w	r3, r7, #10
 80182b0:	4619      	mov	r1, r3
 80182b2:	6978      	ldr	r0, [r7, #20]
 80182b4:	f000 f81b 	bl	80182ee <USBD_GetNextDesc>
 80182b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80182ba:	697b      	ldr	r3, [r7, #20]
 80182bc:	785b      	ldrb	r3, [r3, #1]
 80182be:	2b05      	cmp	r3, #5
 80182c0:	d108      	bne.n	80182d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80182c6:	693b      	ldr	r3, [r7, #16]
 80182c8:	789b      	ldrb	r3, [r3, #2]
 80182ca:	78fa      	ldrb	r2, [r7, #3]
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d008      	beq.n	80182e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80182d0:	2300      	movs	r3, #0
 80182d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	885b      	ldrh	r3, [r3, #2]
 80182d8:	b29a      	uxth	r2, r3
 80182da:	897b      	ldrh	r3, [r7, #10]
 80182dc:	429a      	cmp	r2, r3
 80182de:	d8e5      	bhi.n	80182ac <USBD_GetEpDesc+0x2e>
 80182e0:	e000      	b.n	80182e4 <USBD_GetEpDesc+0x66>
          break;
 80182e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80182e4:	693b      	ldr	r3, [r7, #16]
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	3718      	adds	r7, #24
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}

080182ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80182ee:	b480      	push	{r7}
 80182f0:	b085      	sub	sp, #20
 80182f2:	af00      	add	r7, sp, #0
 80182f4:	6078      	str	r0, [r7, #4]
 80182f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80182fc:	683b      	ldr	r3, [r7, #0]
 80182fe:	881b      	ldrh	r3, [r3, #0]
 8018300:	68fa      	ldr	r2, [r7, #12]
 8018302:	7812      	ldrb	r2, [r2, #0]
 8018304:	4413      	add	r3, r2
 8018306:	b29a      	uxth	r2, r3
 8018308:	683b      	ldr	r3, [r7, #0]
 801830a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	781b      	ldrb	r3, [r3, #0]
 8018310:	461a      	mov	r2, r3
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	4413      	add	r3, r2
 8018316:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8018318:	68fb      	ldr	r3, [r7, #12]
}
 801831a:	4618      	mov	r0, r3
 801831c:	3714      	adds	r7, #20
 801831e:	46bd      	mov	sp, r7
 8018320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018324:	4770      	bx	lr

08018326 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018326:	b480      	push	{r7}
 8018328:	b087      	sub	sp, #28
 801832a:	af00      	add	r7, sp, #0
 801832c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018332:	697b      	ldr	r3, [r7, #20]
 8018334:	781b      	ldrb	r3, [r3, #0]
 8018336:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018338:	697b      	ldr	r3, [r7, #20]
 801833a:	3301      	adds	r3, #1
 801833c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801833e:	697b      	ldr	r3, [r7, #20]
 8018340:	781b      	ldrb	r3, [r3, #0]
 8018342:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018344:	8a3b      	ldrh	r3, [r7, #16]
 8018346:	021b      	lsls	r3, r3, #8
 8018348:	b21a      	sxth	r2, r3
 801834a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801834e:	4313      	orrs	r3, r2
 8018350:	b21b      	sxth	r3, r3
 8018352:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018354:	89fb      	ldrh	r3, [r7, #14]
}
 8018356:	4618      	mov	r0, r3
 8018358:	371c      	adds	r7, #28
 801835a:	46bd      	mov	sp, r7
 801835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018360:	4770      	bx	lr
	...

08018364 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b084      	sub	sp, #16
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
 801836c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801836e:	2300      	movs	r3, #0
 8018370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018372:	683b      	ldr	r3, [r7, #0]
 8018374:	781b      	ldrb	r3, [r3, #0]
 8018376:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801837a:	2b40      	cmp	r3, #64	@ 0x40
 801837c:	d005      	beq.n	801838a <USBD_StdDevReq+0x26>
 801837e:	2b40      	cmp	r3, #64	@ 0x40
 8018380:	d857      	bhi.n	8018432 <USBD_StdDevReq+0xce>
 8018382:	2b00      	cmp	r3, #0
 8018384:	d00f      	beq.n	80183a6 <USBD_StdDevReq+0x42>
 8018386:	2b20      	cmp	r3, #32
 8018388:	d153      	bne.n	8018432 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	32ae      	adds	r2, #174	@ 0xae
 8018394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018398:	689b      	ldr	r3, [r3, #8]
 801839a:	6839      	ldr	r1, [r7, #0]
 801839c:	6878      	ldr	r0, [r7, #4]
 801839e:	4798      	blx	r3
 80183a0:	4603      	mov	r3, r0
 80183a2:	73fb      	strb	r3, [r7, #15]
      break;
 80183a4:	e04a      	b.n	801843c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80183a6:	683b      	ldr	r3, [r7, #0]
 80183a8:	785b      	ldrb	r3, [r3, #1]
 80183aa:	2b09      	cmp	r3, #9
 80183ac:	d83b      	bhi.n	8018426 <USBD_StdDevReq+0xc2>
 80183ae:	a201      	add	r2, pc, #4	@ (adr r2, 80183b4 <USBD_StdDevReq+0x50>)
 80183b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183b4:	08018409 	.word	0x08018409
 80183b8:	0801841d 	.word	0x0801841d
 80183bc:	08018427 	.word	0x08018427
 80183c0:	08018413 	.word	0x08018413
 80183c4:	08018427 	.word	0x08018427
 80183c8:	080183e7 	.word	0x080183e7
 80183cc:	080183dd 	.word	0x080183dd
 80183d0:	08018427 	.word	0x08018427
 80183d4:	080183ff 	.word	0x080183ff
 80183d8:	080183f1 	.word	0x080183f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80183dc:	6839      	ldr	r1, [r7, #0]
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f000 fa3c 	bl	801885c <USBD_GetDescriptor>
          break;
 80183e4:	e024      	b.n	8018430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80183e6:	6839      	ldr	r1, [r7, #0]
 80183e8:	6878      	ldr	r0, [r7, #4]
 80183ea:	f000 fba1 	bl	8018b30 <USBD_SetAddress>
          break;
 80183ee:	e01f      	b.n	8018430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80183f0:	6839      	ldr	r1, [r7, #0]
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	f000 fbe0 	bl	8018bb8 <USBD_SetConfig>
 80183f8:	4603      	mov	r3, r0
 80183fa:	73fb      	strb	r3, [r7, #15]
          break;
 80183fc:	e018      	b.n	8018430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80183fe:	6839      	ldr	r1, [r7, #0]
 8018400:	6878      	ldr	r0, [r7, #4]
 8018402:	f000 fc83 	bl	8018d0c <USBD_GetConfig>
          break;
 8018406:	e013      	b.n	8018430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018408:	6839      	ldr	r1, [r7, #0]
 801840a:	6878      	ldr	r0, [r7, #4]
 801840c:	f000 fcb4 	bl	8018d78 <USBD_GetStatus>
          break;
 8018410:	e00e      	b.n	8018430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018412:	6839      	ldr	r1, [r7, #0]
 8018414:	6878      	ldr	r0, [r7, #4]
 8018416:	f000 fce3 	bl	8018de0 <USBD_SetFeature>
          break;
 801841a:	e009      	b.n	8018430 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801841c:	6839      	ldr	r1, [r7, #0]
 801841e:	6878      	ldr	r0, [r7, #4]
 8018420:	f000 fd07 	bl	8018e32 <USBD_ClrFeature>
          break;
 8018424:	e004      	b.n	8018430 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8018426:	6839      	ldr	r1, [r7, #0]
 8018428:	6878      	ldr	r0, [r7, #4]
 801842a:	f000 fd5e 	bl	8018eea <USBD_CtlError>
          break;
 801842e:	bf00      	nop
      }
      break;
 8018430:	e004      	b.n	801843c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8018432:	6839      	ldr	r1, [r7, #0]
 8018434:	6878      	ldr	r0, [r7, #4]
 8018436:	f000 fd58 	bl	8018eea <USBD_CtlError>
      break;
 801843a:	bf00      	nop
  }

  return ret;
 801843c:	7bfb      	ldrb	r3, [r7, #15]
}
 801843e:	4618      	mov	r0, r3
 8018440:	3710      	adds	r7, #16
 8018442:	46bd      	mov	sp, r7
 8018444:	bd80      	pop	{r7, pc}
 8018446:	bf00      	nop

08018448 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b084      	sub	sp, #16
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018452:	2300      	movs	r3, #0
 8018454:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018456:	683b      	ldr	r3, [r7, #0]
 8018458:	781b      	ldrb	r3, [r3, #0]
 801845a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801845e:	2b40      	cmp	r3, #64	@ 0x40
 8018460:	d005      	beq.n	801846e <USBD_StdItfReq+0x26>
 8018462:	2b40      	cmp	r3, #64	@ 0x40
 8018464:	d852      	bhi.n	801850c <USBD_StdItfReq+0xc4>
 8018466:	2b00      	cmp	r3, #0
 8018468:	d001      	beq.n	801846e <USBD_StdItfReq+0x26>
 801846a:	2b20      	cmp	r3, #32
 801846c:	d14e      	bne.n	801850c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018474:	b2db      	uxtb	r3, r3
 8018476:	3b01      	subs	r3, #1
 8018478:	2b02      	cmp	r3, #2
 801847a:	d840      	bhi.n	80184fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801847c:	683b      	ldr	r3, [r7, #0]
 801847e:	889b      	ldrh	r3, [r3, #4]
 8018480:	b2db      	uxtb	r3, r3
 8018482:	2b01      	cmp	r3, #1
 8018484:	d836      	bhi.n	80184f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8018486:	683b      	ldr	r3, [r7, #0]
 8018488:	889b      	ldrh	r3, [r3, #4]
 801848a:	b2db      	uxtb	r3, r3
 801848c:	4619      	mov	r1, r3
 801848e:	6878      	ldr	r0, [r7, #4]
 8018490:	f7ff fedb 	bl	801824a <USBD_CoreFindIF>
 8018494:	4603      	mov	r3, r0
 8018496:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018498:	7bbb      	ldrb	r3, [r7, #14]
 801849a:	2bff      	cmp	r3, #255	@ 0xff
 801849c:	d01d      	beq.n	80184da <USBD_StdItfReq+0x92>
 801849e:	7bbb      	ldrb	r3, [r7, #14]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d11a      	bne.n	80184da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80184a4:	7bba      	ldrb	r2, [r7, #14]
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	32ae      	adds	r2, #174	@ 0xae
 80184aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80184ae:	689b      	ldr	r3, [r3, #8]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d00f      	beq.n	80184d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80184b4:	7bba      	ldrb	r2, [r7, #14]
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80184bc:	7bba      	ldrb	r2, [r7, #14]
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	32ae      	adds	r2, #174	@ 0xae
 80184c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80184c6:	689b      	ldr	r3, [r3, #8]
 80184c8:	6839      	ldr	r1, [r7, #0]
 80184ca:	6878      	ldr	r0, [r7, #4]
 80184cc:	4798      	blx	r3
 80184ce:	4603      	mov	r3, r0
 80184d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80184d2:	e004      	b.n	80184de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80184d4:	2303      	movs	r3, #3
 80184d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80184d8:	e001      	b.n	80184de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80184da:	2303      	movs	r3, #3
 80184dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80184de:	683b      	ldr	r3, [r7, #0]
 80184e0:	88db      	ldrh	r3, [r3, #6]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d110      	bne.n	8018508 <USBD_StdItfReq+0xc0>
 80184e6:	7bfb      	ldrb	r3, [r7, #15]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d10d      	bne.n	8018508 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80184ec:	6878      	ldr	r0, [r7, #4]
 80184ee:	f000 fdaa 	bl	8019046 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80184f2:	e009      	b.n	8018508 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80184f4:	6839      	ldr	r1, [r7, #0]
 80184f6:	6878      	ldr	r0, [r7, #4]
 80184f8:	f000 fcf7 	bl	8018eea <USBD_CtlError>
          break;
 80184fc:	e004      	b.n	8018508 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80184fe:	6839      	ldr	r1, [r7, #0]
 8018500:	6878      	ldr	r0, [r7, #4]
 8018502:	f000 fcf2 	bl	8018eea <USBD_CtlError>
          break;
 8018506:	e000      	b.n	801850a <USBD_StdItfReq+0xc2>
          break;
 8018508:	bf00      	nop
      }
      break;
 801850a:	e004      	b.n	8018516 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801850c:	6839      	ldr	r1, [r7, #0]
 801850e:	6878      	ldr	r0, [r7, #4]
 8018510:	f000 fceb 	bl	8018eea <USBD_CtlError>
      break;
 8018514:	bf00      	nop
  }

  return ret;
 8018516:	7bfb      	ldrb	r3, [r7, #15]
}
 8018518:	4618      	mov	r0, r3
 801851a:	3710      	adds	r7, #16
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}

08018520 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b084      	sub	sp, #16
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
 8018528:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801852a:	2300      	movs	r3, #0
 801852c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	889b      	ldrh	r3, [r3, #4]
 8018532:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	781b      	ldrb	r3, [r3, #0]
 8018538:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801853c:	2b40      	cmp	r3, #64	@ 0x40
 801853e:	d007      	beq.n	8018550 <USBD_StdEPReq+0x30>
 8018540:	2b40      	cmp	r3, #64	@ 0x40
 8018542:	f200 817f 	bhi.w	8018844 <USBD_StdEPReq+0x324>
 8018546:	2b00      	cmp	r3, #0
 8018548:	d02a      	beq.n	80185a0 <USBD_StdEPReq+0x80>
 801854a:	2b20      	cmp	r3, #32
 801854c:	f040 817a 	bne.w	8018844 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8018550:	7bbb      	ldrb	r3, [r7, #14]
 8018552:	4619      	mov	r1, r3
 8018554:	6878      	ldr	r0, [r7, #4]
 8018556:	f7ff fe85 	bl	8018264 <USBD_CoreFindEP>
 801855a:	4603      	mov	r3, r0
 801855c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801855e:	7b7b      	ldrb	r3, [r7, #13]
 8018560:	2bff      	cmp	r3, #255	@ 0xff
 8018562:	f000 8174 	beq.w	801884e <USBD_StdEPReq+0x32e>
 8018566:	7b7b      	ldrb	r3, [r7, #13]
 8018568:	2b00      	cmp	r3, #0
 801856a:	f040 8170 	bne.w	801884e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801856e:	7b7a      	ldrb	r2, [r7, #13]
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8018576:	7b7a      	ldrb	r2, [r7, #13]
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	32ae      	adds	r2, #174	@ 0xae
 801857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018580:	689b      	ldr	r3, [r3, #8]
 8018582:	2b00      	cmp	r3, #0
 8018584:	f000 8163 	beq.w	801884e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8018588:	7b7a      	ldrb	r2, [r7, #13]
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	32ae      	adds	r2, #174	@ 0xae
 801858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018592:	689b      	ldr	r3, [r3, #8]
 8018594:	6839      	ldr	r1, [r7, #0]
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	4798      	blx	r3
 801859a:	4603      	mov	r3, r0
 801859c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801859e:	e156      	b.n	801884e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80185a0:	683b      	ldr	r3, [r7, #0]
 80185a2:	785b      	ldrb	r3, [r3, #1]
 80185a4:	2b03      	cmp	r3, #3
 80185a6:	d008      	beq.n	80185ba <USBD_StdEPReq+0x9a>
 80185a8:	2b03      	cmp	r3, #3
 80185aa:	f300 8145 	bgt.w	8018838 <USBD_StdEPReq+0x318>
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f000 809b 	beq.w	80186ea <USBD_StdEPReq+0x1ca>
 80185b4:	2b01      	cmp	r3, #1
 80185b6:	d03c      	beq.n	8018632 <USBD_StdEPReq+0x112>
 80185b8:	e13e      	b.n	8018838 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80185c0:	b2db      	uxtb	r3, r3
 80185c2:	2b02      	cmp	r3, #2
 80185c4:	d002      	beq.n	80185cc <USBD_StdEPReq+0xac>
 80185c6:	2b03      	cmp	r3, #3
 80185c8:	d016      	beq.n	80185f8 <USBD_StdEPReq+0xd8>
 80185ca:	e02c      	b.n	8018626 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80185cc:	7bbb      	ldrb	r3, [r7, #14]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d00d      	beq.n	80185ee <USBD_StdEPReq+0xce>
 80185d2:	7bbb      	ldrb	r3, [r7, #14]
 80185d4:	2b80      	cmp	r3, #128	@ 0x80
 80185d6:	d00a      	beq.n	80185ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80185d8:	7bbb      	ldrb	r3, [r7, #14]
 80185da:	4619      	mov	r1, r3
 80185dc:	6878      	ldr	r0, [r7, #4]
 80185de:	f004 ff94 	bl	801d50a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80185e2:	2180      	movs	r1, #128	@ 0x80
 80185e4:	6878      	ldr	r0, [r7, #4]
 80185e6:	f004 ff90 	bl	801d50a <USBD_LL_StallEP>
 80185ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80185ec:	e020      	b.n	8018630 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80185ee:	6839      	ldr	r1, [r7, #0]
 80185f0:	6878      	ldr	r0, [r7, #4]
 80185f2:	f000 fc7a 	bl	8018eea <USBD_CtlError>
              break;
 80185f6:	e01b      	b.n	8018630 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	885b      	ldrh	r3, [r3, #2]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d10e      	bne.n	801861e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018600:	7bbb      	ldrb	r3, [r7, #14]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d00b      	beq.n	801861e <USBD_StdEPReq+0xfe>
 8018606:	7bbb      	ldrb	r3, [r7, #14]
 8018608:	2b80      	cmp	r3, #128	@ 0x80
 801860a:	d008      	beq.n	801861e <USBD_StdEPReq+0xfe>
 801860c:	683b      	ldr	r3, [r7, #0]
 801860e:	88db      	ldrh	r3, [r3, #6]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d104      	bne.n	801861e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8018614:	7bbb      	ldrb	r3, [r7, #14]
 8018616:	4619      	mov	r1, r3
 8018618:	6878      	ldr	r0, [r7, #4]
 801861a:	f004 ff76 	bl	801d50a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801861e:	6878      	ldr	r0, [r7, #4]
 8018620:	f000 fd11 	bl	8019046 <USBD_CtlSendStatus>

              break;
 8018624:	e004      	b.n	8018630 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8018626:	6839      	ldr	r1, [r7, #0]
 8018628:	6878      	ldr	r0, [r7, #4]
 801862a:	f000 fc5e 	bl	8018eea <USBD_CtlError>
              break;
 801862e:	bf00      	nop
          }
          break;
 8018630:	e107      	b.n	8018842 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018638:	b2db      	uxtb	r3, r3
 801863a:	2b02      	cmp	r3, #2
 801863c:	d002      	beq.n	8018644 <USBD_StdEPReq+0x124>
 801863e:	2b03      	cmp	r3, #3
 8018640:	d016      	beq.n	8018670 <USBD_StdEPReq+0x150>
 8018642:	e04b      	b.n	80186dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018644:	7bbb      	ldrb	r3, [r7, #14]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d00d      	beq.n	8018666 <USBD_StdEPReq+0x146>
 801864a:	7bbb      	ldrb	r3, [r7, #14]
 801864c:	2b80      	cmp	r3, #128	@ 0x80
 801864e:	d00a      	beq.n	8018666 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018650:	7bbb      	ldrb	r3, [r7, #14]
 8018652:	4619      	mov	r1, r3
 8018654:	6878      	ldr	r0, [r7, #4]
 8018656:	f004 ff58 	bl	801d50a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801865a:	2180      	movs	r1, #128	@ 0x80
 801865c:	6878      	ldr	r0, [r7, #4]
 801865e:	f004 ff54 	bl	801d50a <USBD_LL_StallEP>
 8018662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018664:	e040      	b.n	80186e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8018666:	6839      	ldr	r1, [r7, #0]
 8018668:	6878      	ldr	r0, [r7, #4]
 801866a:	f000 fc3e 	bl	8018eea <USBD_CtlError>
              break;
 801866e:	e03b      	b.n	80186e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018670:	683b      	ldr	r3, [r7, #0]
 8018672:	885b      	ldrh	r3, [r3, #2]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d136      	bne.n	80186e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018678:	7bbb      	ldrb	r3, [r7, #14]
 801867a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801867e:	2b00      	cmp	r3, #0
 8018680:	d004      	beq.n	801868c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018682:	7bbb      	ldrb	r3, [r7, #14]
 8018684:	4619      	mov	r1, r3
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f004 ff5e 	bl	801d548 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801868c:	6878      	ldr	r0, [r7, #4]
 801868e:	f000 fcda 	bl	8019046 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8018692:	7bbb      	ldrb	r3, [r7, #14]
 8018694:	4619      	mov	r1, r3
 8018696:	6878      	ldr	r0, [r7, #4]
 8018698:	f7ff fde4 	bl	8018264 <USBD_CoreFindEP>
 801869c:	4603      	mov	r3, r0
 801869e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80186a0:	7b7b      	ldrb	r3, [r7, #13]
 80186a2:	2bff      	cmp	r3, #255	@ 0xff
 80186a4:	d01f      	beq.n	80186e6 <USBD_StdEPReq+0x1c6>
 80186a6:	7b7b      	ldrb	r3, [r7, #13]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d11c      	bne.n	80186e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80186ac:	7b7a      	ldrb	r2, [r7, #13]
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80186b4:	7b7a      	ldrb	r2, [r7, #13]
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	32ae      	adds	r2, #174	@ 0xae
 80186ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186be:	689b      	ldr	r3, [r3, #8]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d010      	beq.n	80186e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80186c4:	7b7a      	ldrb	r2, [r7, #13]
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	32ae      	adds	r2, #174	@ 0xae
 80186ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186ce:	689b      	ldr	r3, [r3, #8]
 80186d0:	6839      	ldr	r1, [r7, #0]
 80186d2:	6878      	ldr	r0, [r7, #4]
 80186d4:	4798      	blx	r3
 80186d6:	4603      	mov	r3, r0
 80186d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80186da:	e004      	b.n	80186e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80186dc:	6839      	ldr	r1, [r7, #0]
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f000 fc03 	bl	8018eea <USBD_CtlError>
              break;
 80186e4:	e000      	b.n	80186e8 <USBD_StdEPReq+0x1c8>
              break;
 80186e6:	bf00      	nop
          }
          break;
 80186e8:	e0ab      	b.n	8018842 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80186f0:	b2db      	uxtb	r3, r3
 80186f2:	2b02      	cmp	r3, #2
 80186f4:	d002      	beq.n	80186fc <USBD_StdEPReq+0x1dc>
 80186f6:	2b03      	cmp	r3, #3
 80186f8:	d032      	beq.n	8018760 <USBD_StdEPReq+0x240>
 80186fa:	e097      	b.n	801882c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80186fc:	7bbb      	ldrb	r3, [r7, #14]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d007      	beq.n	8018712 <USBD_StdEPReq+0x1f2>
 8018702:	7bbb      	ldrb	r3, [r7, #14]
 8018704:	2b80      	cmp	r3, #128	@ 0x80
 8018706:	d004      	beq.n	8018712 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8018708:	6839      	ldr	r1, [r7, #0]
 801870a:	6878      	ldr	r0, [r7, #4]
 801870c:	f000 fbed 	bl	8018eea <USBD_CtlError>
                break;
 8018710:	e091      	b.n	8018836 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018716:	2b00      	cmp	r3, #0
 8018718:	da0b      	bge.n	8018732 <USBD_StdEPReq+0x212>
 801871a:	7bbb      	ldrb	r3, [r7, #14]
 801871c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018720:	4613      	mov	r3, r2
 8018722:	009b      	lsls	r3, r3, #2
 8018724:	4413      	add	r3, r2
 8018726:	009b      	lsls	r3, r3, #2
 8018728:	3310      	adds	r3, #16
 801872a:	687a      	ldr	r2, [r7, #4]
 801872c:	4413      	add	r3, r2
 801872e:	3304      	adds	r3, #4
 8018730:	e00b      	b.n	801874a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018732:	7bbb      	ldrb	r3, [r7, #14]
 8018734:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018738:	4613      	mov	r3, r2
 801873a:	009b      	lsls	r3, r3, #2
 801873c:	4413      	add	r3, r2
 801873e:	009b      	lsls	r3, r3, #2
 8018740:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8018744:	687a      	ldr	r2, [r7, #4]
 8018746:	4413      	add	r3, r2
 8018748:	3304      	adds	r3, #4
 801874a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801874c:	68bb      	ldr	r3, [r7, #8]
 801874e:	2200      	movs	r2, #0
 8018750:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	2202      	movs	r2, #2
 8018756:	4619      	mov	r1, r3
 8018758:	6878      	ldr	r0, [r7, #4]
 801875a:	f000 fc37 	bl	8018fcc <USBD_CtlSendData>
              break;
 801875e:	e06a      	b.n	8018836 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018764:	2b00      	cmp	r3, #0
 8018766:	da11      	bge.n	801878c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018768:	7bbb      	ldrb	r3, [r7, #14]
 801876a:	f003 020f 	and.w	r2, r3, #15
 801876e:	6879      	ldr	r1, [r7, #4]
 8018770:	4613      	mov	r3, r2
 8018772:	009b      	lsls	r3, r3, #2
 8018774:	4413      	add	r3, r2
 8018776:	009b      	lsls	r3, r3, #2
 8018778:	440b      	add	r3, r1
 801877a:	3324      	adds	r3, #36	@ 0x24
 801877c:	881b      	ldrh	r3, [r3, #0]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d117      	bne.n	80187b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018782:	6839      	ldr	r1, [r7, #0]
 8018784:	6878      	ldr	r0, [r7, #4]
 8018786:	f000 fbb0 	bl	8018eea <USBD_CtlError>
                  break;
 801878a:	e054      	b.n	8018836 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801878c:	7bbb      	ldrb	r3, [r7, #14]
 801878e:	f003 020f 	and.w	r2, r3, #15
 8018792:	6879      	ldr	r1, [r7, #4]
 8018794:	4613      	mov	r3, r2
 8018796:	009b      	lsls	r3, r3, #2
 8018798:	4413      	add	r3, r2
 801879a:	009b      	lsls	r3, r3, #2
 801879c:	440b      	add	r3, r1
 801879e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80187a2:	881b      	ldrh	r3, [r3, #0]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d104      	bne.n	80187b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80187a8:	6839      	ldr	r1, [r7, #0]
 80187aa:	6878      	ldr	r0, [r7, #4]
 80187ac:	f000 fb9d 	bl	8018eea <USBD_CtlError>
                  break;
 80187b0:	e041      	b.n	8018836 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	da0b      	bge.n	80187d2 <USBD_StdEPReq+0x2b2>
 80187ba:	7bbb      	ldrb	r3, [r7, #14]
 80187bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187c0:	4613      	mov	r3, r2
 80187c2:	009b      	lsls	r3, r3, #2
 80187c4:	4413      	add	r3, r2
 80187c6:	009b      	lsls	r3, r3, #2
 80187c8:	3310      	adds	r3, #16
 80187ca:	687a      	ldr	r2, [r7, #4]
 80187cc:	4413      	add	r3, r2
 80187ce:	3304      	adds	r3, #4
 80187d0:	e00b      	b.n	80187ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80187d2:	7bbb      	ldrb	r3, [r7, #14]
 80187d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187d8:	4613      	mov	r3, r2
 80187da:	009b      	lsls	r3, r3, #2
 80187dc:	4413      	add	r3, r2
 80187de:	009b      	lsls	r3, r3, #2
 80187e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80187e4:	687a      	ldr	r2, [r7, #4]
 80187e6:	4413      	add	r3, r2
 80187e8:	3304      	adds	r3, #4
 80187ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80187ec:	7bbb      	ldrb	r3, [r7, #14]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d002      	beq.n	80187f8 <USBD_StdEPReq+0x2d8>
 80187f2:	7bbb      	ldrb	r3, [r7, #14]
 80187f4:	2b80      	cmp	r3, #128	@ 0x80
 80187f6:	d103      	bne.n	8018800 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	2200      	movs	r2, #0
 80187fc:	601a      	str	r2, [r3, #0]
 80187fe:	e00e      	b.n	801881e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8018800:	7bbb      	ldrb	r3, [r7, #14]
 8018802:	4619      	mov	r1, r3
 8018804:	6878      	ldr	r0, [r7, #4]
 8018806:	f004 febe 	bl	801d586 <USBD_LL_IsStallEP>
 801880a:	4603      	mov	r3, r0
 801880c:	2b00      	cmp	r3, #0
 801880e:	d003      	beq.n	8018818 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8018810:	68bb      	ldr	r3, [r7, #8]
 8018812:	2201      	movs	r2, #1
 8018814:	601a      	str	r2, [r3, #0]
 8018816:	e002      	b.n	801881e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	2200      	movs	r2, #0
 801881c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801881e:	68bb      	ldr	r3, [r7, #8]
 8018820:	2202      	movs	r2, #2
 8018822:	4619      	mov	r1, r3
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f000 fbd1 	bl	8018fcc <USBD_CtlSendData>
              break;
 801882a:	e004      	b.n	8018836 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801882c:	6839      	ldr	r1, [r7, #0]
 801882e:	6878      	ldr	r0, [r7, #4]
 8018830:	f000 fb5b 	bl	8018eea <USBD_CtlError>
              break;
 8018834:	bf00      	nop
          }
          break;
 8018836:	e004      	b.n	8018842 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8018838:	6839      	ldr	r1, [r7, #0]
 801883a:	6878      	ldr	r0, [r7, #4]
 801883c:	f000 fb55 	bl	8018eea <USBD_CtlError>
          break;
 8018840:	bf00      	nop
      }
      break;
 8018842:	e005      	b.n	8018850 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8018844:	6839      	ldr	r1, [r7, #0]
 8018846:	6878      	ldr	r0, [r7, #4]
 8018848:	f000 fb4f 	bl	8018eea <USBD_CtlError>
      break;
 801884c:	e000      	b.n	8018850 <USBD_StdEPReq+0x330>
      break;
 801884e:	bf00      	nop
  }

  return ret;
 8018850:	7bfb      	ldrb	r3, [r7, #15]
}
 8018852:	4618      	mov	r0, r3
 8018854:	3710      	adds	r7, #16
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}
	...

0801885c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b084      	sub	sp, #16
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
 8018864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018866:	2300      	movs	r3, #0
 8018868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801886a:	2300      	movs	r3, #0
 801886c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801886e:	2300      	movs	r3, #0
 8018870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8018872:	683b      	ldr	r3, [r7, #0]
 8018874:	885b      	ldrh	r3, [r3, #2]
 8018876:	0a1b      	lsrs	r3, r3, #8
 8018878:	b29b      	uxth	r3, r3
 801887a:	3b01      	subs	r3, #1
 801887c:	2b06      	cmp	r3, #6
 801887e:	f200 8128 	bhi.w	8018ad2 <USBD_GetDescriptor+0x276>
 8018882:	a201      	add	r2, pc, #4	@ (adr r2, 8018888 <USBD_GetDescriptor+0x2c>)
 8018884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018888:	080188a5 	.word	0x080188a5
 801888c:	080188bd 	.word	0x080188bd
 8018890:	080188fd 	.word	0x080188fd
 8018894:	08018ad3 	.word	0x08018ad3
 8018898:	08018ad3 	.word	0x08018ad3
 801889c:	08018a73 	.word	0x08018a73
 80188a0:	08018a9f 	.word	0x08018a9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	687a      	ldr	r2, [r7, #4]
 80188ae:	7c12      	ldrb	r2, [r2, #16]
 80188b0:	f107 0108 	add.w	r1, r7, #8
 80188b4:	4610      	mov	r0, r2
 80188b6:	4798      	blx	r3
 80188b8:	60f8      	str	r0, [r7, #12]
      break;
 80188ba:	e112      	b.n	8018ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	7c1b      	ldrb	r3, [r3, #16]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d10d      	bne.n	80188e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80188ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188cc:	f107 0208 	add.w	r2, r7, #8
 80188d0:	4610      	mov	r0, r2
 80188d2:	4798      	blx	r3
 80188d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	3301      	adds	r3, #1
 80188da:	2202      	movs	r2, #2
 80188dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80188de:	e100      	b.n	8018ae2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80188e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188e8:	f107 0208 	add.w	r2, r7, #8
 80188ec:	4610      	mov	r0, r2
 80188ee:	4798      	blx	r3
 80188f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	3301      	adds	r3, #1
 80188f6:	2202      	movs	r2, #2
 80188f8:	701a      	strb	r2, [r3, #0]
      break;
 80188fa:	e0f2      	b.n	8018ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	885b      	ldrh	r3, [r3, #2]
 8018900:	b2db      	uxtb	r3, r3
 8018902:	2b05      	cmp	r3, #5
 8018904:	f200 80ac 	bhi.w	8018a60 <USBD_GetDescriptor+0x204>
 8018908:	a201      	add	r2, pc, #4	@ (adr r2, 8018910 <USBD_GetDescriptor+0xb4>)
 801890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801890e:	bf00      	nop
 8018910:	08018929 	.word	0x08018929
 8018914:	0801895d 	.word	0x0801895d
 8018918:	08018991 	.word	0x08018991
 801891c:	080189c5 	.word	0x080189c5
 8018920:	080189f9 	.word	0x080189f9
 8018924:	08018a2d 	.word	0x08018a2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801892e:	685b      	ldr	r3, [r3, #4]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d00b      	beq.n	801894c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801893a:	685b      	ldr	r3, [r3, #4]
 801893c:	687a      	ldr	r2, [r7, #4]
 801893e:	7c12      	ldrb	r2, [r2, #16]
 8018940:	f107 0108 	add.w	r1, r7, #8
 8018944:	4610      	mov	r0, r2
 8018946:	4798      	blx	r3
 8018948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801894a:	e091      	b.n	8018a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801894c:	6839      	ldr	r1, [r7, #0]
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f000 facb 	bl	8018eea <USBD_CtlError>
            err++;
 8018954:	7afb      	ldrb	r3, [r7, #11]
 8018956:	3301      	adds	r3, #1
 8018958:	72fb      	strb	r3, [r7, #11]
          break;
 801895a:	e089      	b.n	8018a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018962:	689b      	ldr	r3, [r3, #8]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d00b      	beq.n	8018980 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801896e:	689b      	ldr	r3, [r3, #8]
 8018970:	687a      	ldr	r2, [r7, #4]
 8018972:	7c12      	ldrb	r2, [r2, #16]
 8018974:	f107 0108 	add.w	r1, r7, #8
 8018978:	4610      	mov	r0, r2
 801897a:	4798      	blx	r3
 801897c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801897e:	e077      	b.n	8018a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018980:	6839      	ldr	r1, [r7, #0]
 8018982:	6878      	ldr	r0, [r7, #4]
 8018984:	f000 fab1 	bl	8018eea <USBD_CtlError>
            err++;
 8018988:	7afb      	ldrb	r3, [r7, #11]
 801898a:	3301      	adds	r3, #1
 801898c:	72fb      	strb	r3, [r7, #11]
          break;
 801898e:	e06f      	b.n	8018a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018996:	68db      	ldr	r3, [r3, #12]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d00b      	beq.n	80189b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189a2:	68db      	ldr	r3, [r3, #12]
 80189a4:	687a      	ldr	r2, [r7, #4]
 80189a6:	7c12      	ldrb	r2, [r2, #16]
 80189a8:	f107 0108 	add.w	r1, r7, #8
 80189ac:	4610      	mov	r0, r2
 80189ae:	4798      	blx	r3
 80189b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189b2:	e05d      	b.n	8018a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80189b4:	6839      	ldr	r1, [r7, #0]
 80189b6:	6878      	ldr	r0, [r7, #4]
 80189b8:	f000 fa97 	bl	8018eea <USBD_CtlError>
            err++;
 80189bc:	7afb      	ldrb	r3, [r7, #11]
 80189be:	3301      	adds	r3, #1
 80189c0:	72fb      	strb	r3, [r7, #11]
          break;
 80189c2:	e055      	b.n	8018a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189ca:	691b      	ldr	r3, [r3, #16]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d00b      	beq.n	80189e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189d6:	691b      	ldr	r3, [r3, #16]
 80189d8:	687a      	ldr	r2, [r7, #4]
 80189da:	7c12      	ldrb	r2, [r2, #16]
 80189dc:	f107 0108 	add.w	r1, r7, #8
 80189e0:	4610      	mov	r0, r2
 80189e2:	4798      	blx	r3
 80189e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189e6:	e043      	b.n	8018a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80189e8:	6839      	ldr	r1, [r7, #0]
 80189ea:	6878      	ldr	r0, [r7, #4]
 80189ec:	f000 fa7d 	bl	8018eea <USBD_CtlError>
            err++;
 80189f0:	7afb      	ldrb	r3, [r7, #11]
 80189f2:	3301      	adds	r3, #1
 80189f4:	72fb      	strb	r3, [r7, #11]
          break;
 80189f6:	e03b      	b.n	8018a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189fe:	695b      	ldr	r3, [r3, #20]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d00b      	beq.n	8018a1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a0a:	695b      	ldr	r3, [r3, #20]
 8018a0c:	687a      	ldr	r2, [r7, #4]
 8018a0e:	7c12      	ldrb	r2, [r2, #16]
 8018a10:	f107 0108 	add.w	r1, r7, #8
 8018a14:	4610      	mov	r0, r2
 8018a16:	4798      	blx	r3
 8018a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a1a:	e029      	b.n	8018a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a1c:	6839      	ldr	r1, [r7, #0]
 8018a1e:	6878      	ldr	r0, [r7, #4]
 8018a20:	f000 fa63 	bl	8018eea <USBD_CtlError>
            err++;
 8018a24:	7afb      	ldrb	r3, [r7, #11]
 8018a26:	3301      	adds	r3, #1
 8018a28:	72fb      	strb	r3, [r7, #11]
          break;
 8018a2a:	e021      	b.n	8018a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a32:	699b      	ldr	r3, [r3, #24]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d00b      	beq.n	8018a50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a3e:	699b      	ldr	r3, [r3, #24]
 8018a40:	687a      	ldr	r2, [r7, #4]
 8018a42:	7c12      	ldrb	r2, [r2, #16]
 8018a44:	f107 0108 	add.w	r1, r7, #8
 8018a48:	4610      	mov	r0, r2
 8018a4a:	4798      	blx	r3
 8018a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a4e:	e00f      	b.n	8018a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a50:	6839      	ldr	r1, [r7, #0]
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f000 fa49 	bl	8018eea <USBD_CtlError>
            err++;
 8018a58:	7afb      	ldrb	r3, [r7, #11]
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8018a5e:	e007      	b.n	8018a70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018a60:	6839      	ldr	r1, [r7, #0]
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f000 fa41 	bl	8018eea <USBD_CtlError>
          err++;
 8018a68:	7afb      	ldrb	r3, [r7, #11]
 8018a6a:	3301      	adds	r3, #1
 8018a6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8018a6e:	bf00      	nop
      }
      break;
 8018a70:	e037      	b.n	8018ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	7c1b      	ldrb	r3, [r3, #16]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d109      	bne.n	8018a8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a82:	f107 0208 	add.w	r2, r7, #8
 8018a86:	4610      	mov	r0, r2
 8018a88:	4798      	blx	r3
 8018a8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018a8c:	e029      	b.n	8018ae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018a8e:	6839      	ldr	r1, [r7, #0]
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	f000 fa2a 	bl	8018eea <USBD_CtlError>
        err++;
 8018a96:	7afb      	ldrb	r3, [r7, #11]
 8018a98:	3301      	adds	r3, #1
 8018a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8018a9c:	e021      	b.n	8018ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	7c1b      	ldrb	r3, [r3, #16]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d10d      	bne.n	8018ac2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018aae:	f107 0208 	add.w	r2, r7, #8
 8018ab2:	4610      	mov	r0, r2
 8018ab4:	4798      	blx	r3
 8018ab6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	3301      	adds	r3, #1
 8018abc:	2207      	movs	r2, #7
 8018abe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018ac0:	e00f      	b.n	8018ae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018ac2:	6839      	ldr	r1, [r7, #0]
 8018ac4:	6878      	ldr	r0, [r7, #4]
 8018ac6:	f000 fa10 	bl	8018eea <USBD_CtlError>
        err++;
 8018aca:	7afb      	ldrb	r3, [r7, #11]
 8018acc:	3301      	adds	r3, #1
 8018ace:	72fb      	strb	r3, [r7, #11]
      break;
 8018ad0:	e007      	b.n	8018ae2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8018ad2:	6839      	ldr	r1, [r7, #0]
 8018ad4:	6878      	ldr	r0, [r7, #4]
 8018ad6:	f000 fa08 	bl	8018eea <USBD_CtlError>
      err++;
 8018ada:	7afb      	ldrb	r3, [r7, #11]
 8018adc:	3301      	adds	r3, #1
 8018ade:	72fb      	strb	r3, [r7, #11]
      break;
 8018ae0:	bf00      	nop
  }

  if (err != 0U)
 8018ae2:	7afb      	ldrb	r3, [r7, #11]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d11e      	bne.n	8018b26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8018ae8:	683b      	ldr	r3, [r7, #0]
 8018aea:	88db      	ldrh	r3, [r3, #6]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d016      	beq.n	8018b1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8018af0:	893b      	ldrh	r3, [r7, #8]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d00e      	beq.n	8018b14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8018af6:	683b      	ldr	r3, [r7, #0]
 8018af8:	88da      	ldrh	r2, [r3, #6]
 8018afa:	893b      	ldrh	r3, [r7, #8]
 8018afc:	4293      	cmp	r3, r2
 8018afe:	bf28      	it	cs
 8018b00:	4613      	movcs	r3, r2
 8018b02:	b29b      	uxth	r3, r3
 8018b04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018b06:	893b      	ldrh	r3, [r7, #8]
 8018b08:	461a      	mov	r2, r3
 8018b0a:	68f9      	ldr	r1, [r7, #12]
 8018b0c:	6878      	ldr	r0, [r7, #4]
 8018b0e:	f000 fa5d 	bl	8018fcc <USBD_CtlSendData>
 8018b12:	e009      	b.n	8018b28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018b14:	6839      	ldr	r1, [r7, #0]
 8018b16:	6878      	ldr	r0, [r7, #4]
 8018b18:	f000 f9e7 	bl	8018eea <USBD_CtlError>
 8018b1c:	e004      	b.n	8018b28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018b1e:	6878      	ldr	r0, [r7, #4]
 8018b20:	f000 fa91 	bl	8019046 <USBD_CtlSendStatus>
 8018b24:	e000      	b.n	8018b28 <USBD_GetDescriptor+0x2cc>
    return;
 8018b26:	bf00      	nop
  }
}
 8018b28:	3710      	adds	r7, #16
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bd80      	pop	{r7, pc}
 8018b2e:	bf00      	nop

08018b30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b084      	sub	sp, #16
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018b3a:	683b      	ldr	r3, [r7, #0]
 8018b3c:	889b      	ldrh	r3, [r3, #4]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d131      	bne.n	8018ba6 <USBD_SetAddress+0x76>
 8018b42:	683b      	ldr	r3, [r7, #0]
 8018b44:	88db      	ldrh	r3, [r3, #6]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d12d      	bne.n	8018ba6 <USBD_SetAddress+0x76>
 8018b4a:	683b      	ldr	r3, [r7, #0]
 8018b4c:	885b      	ldrh	r3, [r3, #2]
 8018b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8018b50:	d829      	bhi.n	8018ba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018b52:	683b      	ldr	r3, [r7, #0]
 8018b54:	885b      	ldrh	r3, [r3, #2]
 8018b56:	b2db      	uxtb	r3, r3
 8018b58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018b5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018b64:	b2db      	uxtb	r3, r3
 8018b66:	2b03      	cmp	r3, #3
 8018b68:	d104      	bne.n	8018b74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8018b6a:	6839      	ldr	r1, [r7, #0]
 8018b6c:	6878      	ldr	r0, [r7, #4]
 8018b6e:	f000 f9bc 	bl	8018eea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b72:	e01d      	b.n	8018bb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	7bfa      	ldrb	r2, [r7, #15]
 8018b78:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018b7c:	7bfb      	ldrb	r3, [r7, #15]
 8018b7e:	4619      	mov	r1, r3
 8018b80:	6878      	ldr	r0, [r7, #4]
 8018b82:	f004 fd2c 	bl	801d5de <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018b86:	6878      	ldr	r0, [r7, #4]
 8018b88:	f000 fa5d 	bl	8019046 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018b8c:	7bfb      	ldrb	r3, [r7, #15]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d004      	beq.n	8018b9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	2202      	movs	r2, #2
 8018b96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b9a:	e009      	b.n	8018bb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	2201      	movs	r2, #1
 8018ba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ba4:	e004      	b.n	8018bb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018ba6:	6839      	ldr	r1, [r7, #0]
 8018ba8:	6878      	ldr	r0, [r7, #4]
 8018baa:	f000 f99e 	bl	8018eea <USBD_CtlError>
  }
}
 8018bae:	bf00      	nop
 8018bb0:	bf00      	nop
 8018bb2:	3710      	adds	r7, #16
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}

08018bb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b084      	sub	sp, #16
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018bc6:	683b      	ldr	r3, [r7, #0]
 8018bc8:	885b      	ldrh	r3, [r3, #2]
 8018bca:	b2da      	uxtb	r2, r3
 8018bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018bce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	2b01      	cmp	r3, #1
 8018bd6:	d905      	bls.n	8018be4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018bd8:	6839      	ldr	r1, [r7, #0]
 8018bda:	6878      	ldr	r0, [r7, #4]
 8018bdc:	f000 f985 	bl	8018eea <USBD_CtlError>
    return USBD_FAIL;
 8018be0:	2303      	movs	r3, #3
 8018be2:	e08c      	b.n	8018cfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018bea:	b2db      	uxtb	r3, r3
 8018bec:	2b02      	cmp	r3, #2
 8018bee:	d002      	beq.n	8018bf6 <USBD_SetConfig+0x3e>
 8018bf0:	2b03      	cmp	r3, #3
 8018bf2:	d029      	beq.n	8018c48 <USBD_SetConfig+0x90>
 8018bf4:	e075      	b.n	8018ce2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018bf6:	4b44      	ldr	r3, [pc, #272]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018bf8:	781b      	ldrb	r3, [r3, #0]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d020      	beq.n	8018c40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8018bfe:	4b42      	ldr	r3, [pc, #264]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018c00:	781b      	ldrb	r3, [r3, #0]
 8018c02:	461a      	mov	r2, r3
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018c08:	4b3f      	ldr	r3, [pc, #252]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018c0a:	781b      	ldrb	r3, [r3, #0]
 8018c0c:	4619      	mov	r1, r3
 8018c0e:	6878      	ldr	r0, [r7, #4]
 8018c10:	f7fe ffe3 	bl	8017bda <USBD_SetClassConfig>
 8018c14:	4603      	mov	r3, r0
 8018c16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018c18:	7bfb      	ldrb	r3, [r7, #15]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d008      	beq.n	8018c30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8018c1e:	6839      	ldr	r1, [r7, #0]
 8018c20:	6878      	ldr	r0, [r7, #4]
 8018c22:	f000 f962 	bl	8018eea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	2202      	movs	r2, #2
 8018c2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018c2e:	e065      	b.n	8018cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	f000 fa08 	bl	8019046 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	2203      	movs	r2, #3
 8018c3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018c3e:	e05d      	b.n	8018cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018c40:	6878      	ldr	r0, [r7, #4]
 8018c42:	f000 fa00 	bl	8019046 <USBD_CtlSendStatus>
      break;
 8018c46:	e059      	b.n	8018cfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018c48:	4b2f      	ldr	r3, [pc, #188]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018c4a:	781b      	ldrb	r3, [r3, #0]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d112      	bne.n	8018c76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	2202      	movs	r2, #2
 8018c54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8018c58:	4b2b      	ldr	r3, [pc, #172]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018c5a:	781b      	ldrb	r3, [r3, #0]
 8018c5c:	461a      	mov	r2, r3
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018c62:	4b29      	ldr	r3, [pc, #164]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018c64:	781b      	ldrb	r3, [r3, #0]
 8018c66:	4619      	mov	r1, r3
 8018c68:	6878      	ldr	r0, [r7, #4]
 8018c6a:	f7fe ffd2 	bl	8017c12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f000 f9e9 	bl	8019046 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018c74:	e042      	b.n	8018cfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8018c76:	4b24      	ldr	r3, [pc, #144]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018c78:	781b      	ldrb	r3, [r3, #0]
 8018c7a:	461a      	mov	r2, r3
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	685b      	ldr	r3, [r3, #4]
 8018c80:	429a      	cmp	r2, r3
 8018c82:	d02a      	beq.n	8018cda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	685b      	ldr	r3, [r3, #4]
 8018c88:	b2db      	uxtb	r3, r3
 8018c8a:	4619      	mov	r1, r3
 8018c8c:	6878      	ldr	r0, [r7, #4]
 8018c8e:	f7fe ffc0 	bl	8017c12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018c92:	4b1d      	ldr	r3, [pc, #116]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018c94:	781b      	ldrb	r3, [r3, #0]
 8018c96:	461a      	mov	r2, r3
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	4619      	mov	r1, r3
 8018ca2:	6878      	ldr	r0, [r7, #4]
 8018ca4:	f7fe ff99 	bl	8017bda <USBD_SetClassConfig>
 8018ca8:	4603      	mov	r3, r0
 8018caa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018cac:	7bfb      	ldrb	r3, [r7, #15]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d00f      	beq.n	8018cd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8018cb2:	6839      	ldr	r1, [r7, #0]
 8018cb4:	6878      	ldr	r0, [r7, #4]
 8018cb6:	f000 f918 	bl	8018eea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	685b      	ldr	r3, [r3, #4]
 8018cbe:	b2db      	uxtb	r3, r3
 8018cc0:	4619      	mov	r1, r3
 8018cc2:	6878      	ldr	r0, [r7, #4]
 8018cc4:	f7fe ffa5 	bl	8017c12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	2202      	movs	r2, #2
 8018ccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018cd0:	e014      	b.n	8018cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018cd2:	6878      	ldr	r0, [r7, #4]
 8018cd4:	f000 f9b7 	bl	8019046 <USBD_CtlSendStatus>
      break;
 8018cd8:	e010      	b.n	8018cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018cda:	6878      	ldr	r0, [r7, #4]
 8018cdc:	f000 f9b3 	bl	8019046 <USBD_CtlSendStatus>
      break;
 8018ce0:	e00c      	b.n	8018cfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8018ce2:	6839      	ldr	r1, [r7, #0]
 8018ce4:	6878      	ldr	r0, [r7, #4]
 8018ce6:	f000 f900 	bl	8018eea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018cea:	4b07      	ldr	r3, [pc, #28]	@ (8018d08 <USBD_SetConfig+0x150>)
 8018cec:	781b      	ldrb	r3, [r3, #0]
 8018cee:	4619      	mov	r1, r3
 8018cf0:	6878      	ldr	r0, [r7, #4]
 8018cf2:	f7fe ff8e 	bl	8017c12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8018cf6:	2303      	movs	r3, #3
 8018cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8018cfa:	bf00      	nop
  }

  return ret;
 8018cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cfe:	4618      	mov	r0, r3
 8018d00:	3710      	adds	r7, #16
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bd80      	pop	{r7, pc}
 8018d06:	bf00      	nop
 8018d08:	20001b66 	.word	0x20001b66

08018d0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b082      	sub	sp, #8
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	6078      	str	r0, [r7, #4]
 8018d14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	88db      	ldrh	r3, [r3, #6]
 8018d1a:	2b01      	cmp	r3, #1
 8018d1c:	d004      	beq.n	8018d28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018d1e:	6839      	ldr	r1, [r7, #0]
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	f000 f8e2 	bl	8018eea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018d26:	e023      	b.n	8018d70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d2e:	b2db      	uxtb	r3, r3
 8018d30:	2b02      	cmp	r3, #2
 8018d32:	dc02      	bgt.n	8018d3a <USBD_GetConfig+0x2e>
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	dc03      	bgt.n	8018d40 <USBD_GetConfig+0x34>
 8018d38:	e015      	b.n	8018d66 <USBD_GetConfig+0x5a>
 8018d3a:	2b03      	cmp	r3, #3
 8018d3c:	d00b      	beq.n	8018d56 <USBD_GetConfig+0x4a>
 8018d3e:	e012      	b.n	8018d66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2200      	movs	r2, #0
 8018d44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	3308      	adds	r3, #8
 8018d4a:	2201      	movs	r2, #1
 8018d4c:	4619      	mov	r1, r3
 8018d4e:	6878      	ldr	r0, [r7, #4]
 8018d50:	f000 f93c 	bl	8018fcc <USBD_CtlSendData>
        break;
 8018d54:	e00c      	b.n	8018d70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	3304      	adds	r3, #4
 8018d5a:	2201      	movs	r2, #1
 8018d5c:	4619      	mov	r1, r3
 8018d5e:	6878      	ldr	r0, [r7, #4]
 8018d60:	f000 f934 	bl	8018fcc <USBD_CtlSendData>
        break;
 8018d64:	e004      	b.n	8018d70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018d66:	6839      	ldr	r1, [r7, #0]
 8018d68:	6878      	ldr	r0, [r7, #4]
 8018d6a:	f000 f8be 	bl	8018eea <USBD_CtlError>
        break;
 8018d6e:	bf00      	nop
}
 8018d70:	bf00      	nop
 8018d72:	3708      	adds	r7, #8
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd80      	pop	{r7, pc}

08018d78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b082      	sub	sp, #8
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d88:	b2db      	uxtb	r3, r3
 8018d8a:	3b01      	subs	r3, #1
 8018d8c:	2b02      	cmp	r3, #2
 8018d8e:	d81e      	bhi.n	8018dce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018d90:	683b      	ldr	r3, [r7, #0]
 8018d92:	88db      	ldrh	r3, [r3, #6]
 8018d94:	2b02      	cmp	r3, #2
 8018d96:	d004      	beq.n	8018da2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018d98:	6839      	ldr	r1, [r7, #0]
 8018d9a:	6878      	ldr	r0, [r7, #4]
 8018d9c:	f000 f8a5 	bl	8018eea <USBD_CtlError>
        break;
 8018da0:	e01a      	b.n	8018dd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	2201      	movs	r2, #1
 8018da6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d005      	beq.n	8018dbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	68db      	ldr	r3, [r3, #12]
 8018db6:	f043 0202 	orr.w	r2, r3, #2
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	330c      	adds	r3, #12
 8018dc2:	2202      	movs	r2, #2
 8018dc4:	4619      	mov	r1, r3
 8018dc6:	6878      	ldr	r0, [r7, #4]
 8018dc8:	f000 f900 	bl	8018fcc <USBD_CtlSendData>
      break;
 8018dcc:	e004      	b.n	8018dd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018dce:	6839      	ldr	r1, [r7, #0]
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	f000 f88a 	bl	8018eea <USBD_CtlError>
      break;
 8018dd6:	bf00      	nop
  }
}
 8018dd8:	bf00      	nop
 8018dda:	3708      	adds	r7, #8
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bd80      	pop	{r7, pc}

08018de0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b082      	sub	sp, #8
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
 8018de8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018dea:	683b      	ldr	r3, [r7, #0]
 8018dec:	885b      	ldrh	r3, [r3, #2]
 8018dee:	2b01      	cmp	r3, #1
 8018df0:	d107      	bne.n	8018e02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	2201      	movs	r2, #1
 8018df6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018dfa:	6878      	ldr	r0, [r7, #4]
 8018dfc:	f000 f923 	bl	8019046 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8018e00:	e013      	b.n	8018e2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8018e02:	683b      	ldr	r3, [r7, #0]
 8018e04:	885b      	ldrh	r3, [r3, #2]
 8018e06:	2b02      	cmp	r3, #2
 8018e08:	d10b      	bne.n	8018e22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8018e0a:	683b      	ldr	r3, [r7, #0]
 8018e0c:	889b      	ldrh	r3, [r3, #4]
 8018e0e:	0a1b      	lsrs	r3, r3, #8
 8018e10:	b29b      	uxth	r3, r3
 8018e12:	b2da      	uxtb	r2, r3
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8018e1a:	6878      	ldr	r0, [r7, #4]
 8018e1c:	f000 f913 	bl	8019046 <USBD_CtlSendStatus>
}
 8018e20:	e003      	b.n	8018e2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018e22:	6839      	ldr	r1, [r7, #0]
 8018e24:	6878      	ldr	r0, [r7, #4]
 8018e26:	f000 f860 	bl	8018eea <USBD_CtlError>
}
 8018e2a:	bf00      	nop
 8018e2c:	3708      	adds	r7, #8
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}

08018e32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e32:	b580      	push	{r7, lr}
 8018e34:	b082      	sub	sp, #8
 8018e36:	af00      	add	r7, sp, #0
 8018e38:	6078      	str	r0, [r7, #4]
 8018e3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018e42:	b2db      	uxtb	r3, r3
 8018e44:	3b01      	subs	r3, #1
 8018e46:	2b02      	cmp	r3, #2
 8018e48:	d80b      	bhi.n	8018e62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018e4a:	683b      	ldr	r3, [r7, #0]
 8018e4c:	885b      	ldrh	r3, [r3, #2]
 8018e4e:	2b01      	cmp	r3, #1
 8018e50:	d10c      	bne.n	8018e6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	2200      	movs	r2, #0
 8018e56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018e5a:	6878      	ldr	r0, [r7, #4]
 8018e5c:	f000 f8f3 	bl	8019046 <USBD_CtlSendStatus>
      }
      break;
 8018e60:	e004      	b.n	8018e6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018e62:	6839      	ldr	r1, [r7, #0]
 8018e64:	6878      	ldr	r0, [r7, #4]
 8018e66:	f000 f840 	bl	8018eea <USBD_CtlError>
      break;
 8018e6a:	e000      	b.n	8018e6e <USBD_ClrFeature+0x3c>
      break;
 8018e6c:	bf00      	nop
  }
}
 8018e6e:	bf00      	nop
 8018e70:	3708      	adds	r7, #8
 8018e72:	46bd      	mov	sp, r7
 8018e74:	bd80      	pop	{r7, pc}

08018e76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018e76:	b580      	push	{r7, lr}
 8018e78:	b084      	sub	sp, #16
 8018e7a:	af00      	add	r7, sp, #0
 8018e7c:	6078      	str	r0, [r7, #4]
 8018e7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018e80:	683b      	ldr	r3, [r7, #0]
 8018e82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	781a      	ldrb	r2, [r3, #0]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	3301      	adds	r3, #1
 8018e90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	781a      	ldrb	r2, [r3, #0]
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	3301      	adds	r3, #1
 8018e9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018ea0:	68f8      	ldr	r0, [r7, #12]
 8018ea2:	f7ff fa40 	bl	8018326 <SWAPBYTE>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	461a      	mov	r2, r3
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	3301      	adds	r3, #1
 8018eb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	3301      	adds	r3, #1
 8018eb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018eba:	68f8      	ldr	r0, [r7, #12]
 8018ebc:	f7ff fa33 	bl	8018326 <SWAPBYTE>
 8018ec0:	4603      	mov	r3, r0
 8018ec2:	461a      	mov	r2, r3
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	3301      	adds	r3, #1
 8018ecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	3301      	adds	r3, #1
 8018ed2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018ed4:	68f8      	ldr	r0, [r7, #12]
 8018ed6:	f7ff fa26 	bl	8018326 <SWAPBYTE>
 8018eda:	4603      	mov	r3, r0
 8018edc:	461a      	mov	r2, r3
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	80da      	strh	r2, [r3, #6]
}
 8018ee2:	bf00      	nop
 8018ee4:	3710      	adds	r7, #16
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bd80      	pop	{r7, pc}

08018eea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018eea:	b580      	push	{r7, lr}
 8018eec:	b082      	sub	sp, #8
 8018eee:	af00      	add	r7, sp, #0
 8018ef0:	6078      	str	r0, [r7, #4]
 8018ef2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018ef4:	2180      	movs	r1, #128	@ 0x80
 8018ef6:	6878      	ldr	r0, [r7, #4]
 8018ef8:	f004 fb07 	bl	801d50a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018efc:	2100      	movs	r1, #0
 8018efe:	6878      	ldr	r0, [r7, #4]
 8018f00:	f004 fb03 	bl	801d50a <USBD_LL_StallEP>
}
 8018f04:	bf00      	nop
 8018f06:	3708      	adds	r7, #8
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	bd80      	pop	{r7, pc}

08018f0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b086      	sub	sp, #24
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	60f8      	str	r0, [r7, #12]
 8018f14:	60b9      	str	r1, [r7, #8]
 8018f16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018f18:	2300      	movs	r3, #0
 8018f1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d036      	beq.n	8018f90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018f26:	6938      	ldr	r0, [r7, #16]
 8018f28:	f000 f836 	bl	8018f98 <USBD_GetLen>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	3301      	adds	r3, #1
 8018f30:	b29b      	uxth	r3, r3
 8018f32:	005b      	lsls	r3, r3, #1
 8018f34:	b29a      	uxth	r2, r3
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018f3a:	7dfb      	ldrb	r3, [r7, #23]
 8018f3c:	68ba      	ldr	r2, [r7, #8]
 8018f3e:	4413      	add	r3, r2
 8018f40:	687a      	ldr	r2, [r7, #4]
 8018f42:	7812      	ldrb	r2, [r2, #0]
 8018f44:	701a      	strb	r2, [r3, #0]
  idx++;
 8018f46:	7dfb      	ldrb	r3, [r7, #23]
 8018f48:	3301      	adds	r3, #1
 8018f4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8018f4c:	7dfb      	ldrb	r3, [r7, #23]
 8018f4e:	68ba      	ldr	r2, [r7, #8]
 8018f50:	4413      	add	r3, r2
 8018f52:	2203      	movs	r2, #3
 8018f54:	701a      	strb	r2, [r3, #0]
  idx++;
 8018f56:	7dfb      	ldrb	r3, [r7, #23]
 8018f58:	3301      	adds	r3, #1
 8018f5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8018f5c:	e013      	b.n	8018f86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8018f5e:	7dfb      	ldrb	r3, [r7, #23]
 8018f60:	68ba      	ldr	r2, [r7, #8]
 8018f62:	4413      	add	r3, r2
 8018f64:	693a      	ldr	r2, [r7, #16]
 8018f66:	7812      	ldrb	r2, [r2, #0]
 8018f68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8018f6a:	693b      	ldr	r3, [r7, #16]
 8018f6c:	3301      	adds	r3, #1
 8018f6e:	613b      	str	r3, [r7, #16]
    idx++;
 8018f70:	7dfb      	ldrb	r3, [r7, #23]
 8018f72:	3301      	adds	r3, #1
 8018f74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8018f76:	7dfb      	ldrb	r3, [r7, #23]
 8018f78:	68ba      	ldr	r2, [r7, #8]
 8018f7a:	4413      	add	r3, r2
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8018f80:	7dfb      	ldrb	r3, [r7, #23]
 8018f82:	3301      	adds	r3, #1
 8018f84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8018f86:	693b      	ldr	r3, [r7, #16]
 8018f88:	781b      	ldrb	r3, [r3, #0]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d1e7      	bne.n	8018f5e <USBD_GetString+0x52>
 8018f8e:	e000      	b.n	8018f92 <USBD_GetString+0x86>
    return;
 8018f90:	bf00      	nop
  }
}
 8018f92:	3718      	adds	r7, #24
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd80      	pop	{r7, pc}

08018f98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018f98:	b480      	push	{r7}
 8018f9a:	b085      	sub	sp, #20
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8018fa8:	e005      	b.n	8018fb6 <USBD_GetLen+0x1e>
  {
    len++;
 8018faa:	7bfb      	ldrb	r3, [r7, #15]
 8018fac:	3301      	adds	r3, #1
 8018fae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	3301      	adds	r3, #1
 8018fb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8018fb6:	68bb      	ldr	r3, [r7, #8]
 8018fb8:	781b      	ldrb	r3, [r3, #0]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d1f5      	bne.n	8018faa <USBD_GetLen+0x12>
  }

  return len;
 8018fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	3714      	adds	r7, #20
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fca:	4770      	bx	lr

08018fcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b084      	sub	sp, #16
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	60f8      	str	r0, [r7, #12]
 8018fd4:	60b9      	str	r1, [r7, #8]
 8018fd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	2202      	movs	r2, #2
 8018fdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	687a      	ldr	r2, [r7, #4]
 8018fe4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	68ba      	ldr	r2, [r7, #8]
 8018ff0:	2100      	movs	r1, #0
 8018ff2:	68f8      	ldr	r0, [r7, #12]
 8018ff4:	f004 fb12 	bl	801d61c <USBD_LL_Transmit>

  return USBD_OK;
 8018ff8:	2300      	movs	r3, #0
}
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	3710      	adds	r7, #16
 8018ffe:	46bd      	mov	sp, r7
 8019000:	bd80      	pop	{r7, pc}

08019002 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019002:	b580      	push	{r7, lr}
 8019004:	b084      	sub	sp, #16
 8019006:	af00      	add	r7, sp, #0
 8019008:	60f8      	str	r0, [r7, #12]
 801900a:	60b9      	str	r1, [r7, #8]
 801900c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	68ba      	ldr	r2, [r7, #8]
 8019012:	2100      	movs	r1, #0
 8019014:	68f8      	ldr	r0, [r7, #12]
 8019016:	f004 fb01 	bl	801d61c <USBD_LL_Transmit>

  return USBD_OK;
 801901a:	2300      	movs	r3, #0
}
 801901c:	4618      	mov	r0, r3
 801901e:	3710      	adds	r7, #16
 8019020:	46bd      	mov	sp, r7
 8019022:	bd80      	pop	{r7, pc}

08019024 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b084      	sub	sp, #16
 8019028:	af00      	add	r7, sp, #0
 801902a:	60f8      	str	r0, [r7, #12]
 801902c:	60b9      	str	r1, [r7, #8]
 801902e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	68ba      	ldr	r2, [r7, #8]
 8019034:	2100      	movs	r1, #0
 8019036:	68f8      	ldr	r0, [r7, #12]
 8019038:	f004 fb11 	bl	801d65e <USBD_LL_PrepareReceive>

  return USBD_OK;
 801903c:	2300      	movs	r3, #0
}
 801903e:	4618      	mov	r0, r3
 8019040:	3710      	adds	r7, #16
 8019042:	46bd      	mov	sp, r7
 8019044:	bd80      	pop	{r7, pc}

08019046 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019046:	b580      	push	{r7, lr}
 8019048:	b082      	sub	sp, #8
 801904a:	af00      	add	r7, sp, #0
 801904c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	2204      	movs	r2, #4
 8019052:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019056:	2300      	movs	r3, #0
 8019058:	2200      	movs	r2, #0
 801905a:	2100      	movs	r1, #0
 801905c:	6878      	ldr	r0, [r7, #4]
 801905e:	f004 fadd 	bl	801d61c <USBD_LL_Transmit>

  return USBD_OK;
 8019062:	2300      	movs	r3, #0
}
 8019064:	4618      	mov	r0, r3
 8019066:	3708      	adds	r7, #8
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}

0801906c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801906c:	b580      	push	{r7, lr}
 801906e:	b082      	sub	sp, #8
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	2205      	movs	r2, #5
 8019078:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801907c:	2300      	movs	r3, #0
 801907e:	2200      	movs	r2, #0
 8019080:	2100      	movs	r1, #0
 8019082:	6878      	ldr	r0, [r7, #4]
 8019084:	f004 faeb 	bl	801d65e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019088:	2300      	movs	r3, #0
}
 801908a:	4618      	mov	r0, r3
 801908c:	3708      	adds	r7, #8
 801908e:	46bd      	mov	sp, r7
 8019090:	bd80      	pop	{r7, pc}
	...

08019094 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8019094:	b580      	push	{r7, lr}
 8019096:	b084      	sub	sp, #16
 8019098:	af00      	add	r7, sp, #0
 801909a:	4603      	mov	r3, r0
 801909c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801909e:	79fb      	ldrb	r3, [r7, #7]
 80190a0:	4a08      	ldr	r2, [pc, #32]	@ (80190c4 <disk_status+0x30>)
 80190a2:	009b      	lsls	r3, r3, #2
 80190a4:	4413      	add	r3, r2
 80190a6:	685b      	ldr	r3, [r3, #4]
 80190a8:	685b      	ldr	r3, [r3, #4]
 80190aa:	79fa      	ldrb	r2, [r7, #7]
 80190ac:	4905      	ldr	r1, [pc, #20]	@ (80190c4 <disk_status+0x30>)
 80190ae:	440a      	add	r2, r1
 80190b0:	7a12      	ldrb	r2, [r2, #8]
 80190b2:	4610      	mov	r0, r2
 80190b4:	4798      	blx	r3
 80190b6:	4603      	mov	r3, r0
 80190b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80190ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80190bc:	4618      	mov	r0, r3
 80190be:	3710      	adds	r7, #16
 80190c0:	46bd      	mov	sp, r7
 80190c2:	bd80      	pop	{r7, pc}
 80190c4:	20001d90 	.word	0x20001d90

080190c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b084      	sub	sp, #16
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	4603      	mov	r3, r0
 80190d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80190d2:	2300      	movs	r3, #0
 80190d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80190d6:	79fb      	ldrb	r3, [r7, #7]
 80190d8:	4a0e      	ldr	r2, [pc, #56]	@ (8019114 <disk_initialize+0x4c>)
 80190da:	5cd3      	ldrb	r3, [r2, r3]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d114      	bne.n	801910a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80190e0:	79fb      	ldrb	r3, [r7, #7]
 80190e2:	4a0c      	ldr	r2, [pc, #48]	@ (8019114 <disk_initialize+0x4c>)
 80190e4:	009b      	lsls	r3, r3, #2
 80190e6:	4413      	add	r3, r2
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	79fa      	ldrb	r2, [r7, #7]
 80190ee:	4909      	ldr	r1, [pc, #36]	@ (8019114 <disk_initialize+0x4c>)
 80190f0:	440a      	add	r2, r1
 80190f2:	7a12      	ldrb	r2, [r2, #8]
 80190f4:	4610      	mov	r0, r2
 80190f6:	4798      	blx	r3
 80190f8:	4603      	mov	r3, r0
 80190fa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80190fc:	7bfb      	ldrb	r3, [r7, #15]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d103      	bne.n	801910a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8019102:	79fb      	ldrb	r3, [r7, #7]
 8019104:	4a03      	ldr	r2, [pc, #12]	@ (8019114 <disk_initialize+0x4c>)
 8019106:	2101      	movs	r1, #1
 8019108:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801910a:	7bfb      	ldrb	r3, [r7, #15]
}
 801910c:	4618      	mov	r0, r3
 801910e:	3710      	adds	r7, #16
 8019110:	46bd      	mov	sp, r7
 8019112:	bd80      	pop	{r7, pc}
 8019114:	20001d90 	.word	0x20001d90

08019118 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8019118:	b590      	push	{r4, r7, lr}
 801911a:	b087      	sub	sp, #28
 801911c:	af00      	add	r7, sp, #0
 801911e:	60b9      	str	r1, [r7, #8]
 8019120:	607a      	str	r2, [r7, #4]
 8019122:	603b      	str	r3, [r7, #0]
 8019124:	4603      	mov	r3, r0
 8019126:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8019128:	7bfb      	ldrb	r3, [r7, #15]
 801912a:	4a0a      	ldr	r2, [pc, #40]	@ (8019154 <disk_read+0x3c>)
 801912c:	009b      	lsls	r3, r3, #2
 801912e:	4413      	add	r3, r2
 8019130:	685b      	ldr	r3, [r3, #4]
 8019132:	689c      	ldr	r4, [r3, #8]
 8019134:	7bfb      	ldrb	r3, [r7, #15]
 8019136:	4a07      	ldr	r2, [pc, #28]	@ (8019154 <disk_read+0x3c>)
 8019138:	4413      	add	r3, r2
 801913a:	7a18      	ldrb	r0, [r3, #8]
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	687a      	ldr	r2, [r7, #4]
 8019140:	68b9      	ldr	r1, [r7, #8]
 8019142:	47a0      	blx	r4
 8019144:	4603      	mov	r3, r0
 8019146:	75fb      	strb	r3, [r7, #23]
  return res;
 8019148:	7dfb      	ldrb	r3, [r7, #23]
}
 801914a:	4618      	mov	r0, r3
 801914c:	371c      	adds	r7, #28
 801914e:	46bd      	mov	sp, r7
 8019150:	bd90      	pop	{r4, r7, pc}
 8019152:	bf00      	nop
 8019154:	20001d90 	.word	0x20001d90

08019158 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8019158:	b590      	push	{r4, r7, lr}
 801915a:	b087      	sub	sp, #28
 801915c:	af00      	add	r7, sp, #0
 801915e:	60b9      	str	r1, [r7, #8]
 8019160:	607a      	str	r2, [r7, #4]
 8019162:	603b      	str	r3, [r7, #0]
 8019164:	4603      	mov	r3, r0
 8019166:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8019168:	7bfb      	ldrb	r3, [r7, #15]
 801916a:	4a0a      	ldr	r2, [pc, #40]	@ (8019194 <disk_write+0x3c>)
 801916c:	009b      	lsls	r3, r3, #2
 801916e:	4413      	add	r3, r2
 8019170:	685b      	ldr	r3, [r3, #4]
 8019172:	68dc      	ldr	r4, [r3, #12]
 8019174:	7bfb      	ldrb	r3, [r7, #15]
 8019176:	4a07      	ldr	r2, [pc, #28]	@ (8019194 <disk_write+0x3c>)
 8019178:	4413      	add	r3, r2
 801917a:	7a18      	ldrb	r0, [r3, #8]
 801917c:	683b      	ldr	r3, [r7, #0]
 801917e:	687a      	ldr	r2, [r7, #4]
 8019180:	68b9      	ldr	r1, [r7, #8]
 8019182:	47a0      	blx	r4
 8019184:	4603      	mov	r3, r0
 8019186:	75fb      	strb	r3, [r7, #23]
  return res;
 8019188:	7dfb      	ldrb	r3, [r7, #23]
}
 801918a:	4618      	mov	r0, r3
 801918c:	371c      	adds	r7, #28
 801918e:	46bd      	mov	sp, r7
 8019190:	bd90      	pop	{r4, r7, pc}
 8019192:	bf00      	nop
 8019194:	20001d90 	.word	0x20001d90

08019198 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b084      	sub	sp, #16
 801919c:	af00      	add	r7, sp, #0
 801919e:	4603      	mov	r3, r0
 80191a0:	603a      	str	r2, [r7, #0]
 80191a2:	71fb      	strb	r3, [r7, #7]
 80191a4:	460b      	mov	r3, r1
 80191a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80191a8:	79fb      	ldrb	r3, [r7, #7]
 80191aa:	4a09      	ldr	r2, [pc, #36]	@ (80191d0 <disk_ioctl+0x38>)
 80191ac:	009b      	lsls	r3, r3, #2
 80191ae:	4413      	add	r3, r2
 80191b0:	685b      	ldr	r3, [r3, #4]
 80191b2:	691b      	ldr	r3, [r3, #16]
 80191b4:	79fa      	ldrb	r2, [r7, #7]
 80191b6:	4906      	ldr	r1, [pc, #24]	@ (80191d0 <disk_ioctl+0x38>)
 80191b8:	440a      	add	r2, r1
 80191ba:	7a10      	ldrb	r0, [r2, #8]
 80191bc:	79b9      	ldrb	r1, [r7, #6]
 80191be:	683a      	ldr	r2, [r7, #0]
 80191c0:	4798      	blx	r3
 80191c2:	4603      	mov	r3, r0
 80191c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80191c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80191c8:	4618      	mov	r0, r3
 80191ca:	3710      	adds	r7, #16
 80191cc:	46bd      	mov	sp, r7
 80191ce:	bd80      	pop	{r7, pc}
 80191d0:	20001d90 	.word	0x20001d90

080191d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80191d4:	b480      	push	{r7}
 80191d6:	b085      	sub	sp, #20
 80191d8:	af00      	add	r7, sp, #0
 80191da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	3301      	adds	r3, #1
 80191e0:	781b      	ldrb	r3, [r3, #0]
 80191e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80191e4:	89fb      	ldrh	r3, [r7, #14]
 80191e6:	021b      	lsls	r3, r3, #8
 80191e8:	b21a      	sxth	r2, r3
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	781b      	ldrb	r3, [r3, #0]
 80191ee:	b21b      	sxth	r3, r3
 80191f0:	4313      	orrs	r3, r2
 80191f2:	b21b      	sxth	r3, r3
 80191f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80191f6:	89fb      	ldrh	r3, [r7, #14]
}
 80191f8:	4618      	mov	r0, r3
 80191fa:	3714      	adds	r7, #20
 80191fc:	46bd      	mov	sp, r7
 80191fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019202:	4770      	bx	lr

08019204 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8019204:	b480      	push	{r7}
 8019206:	b085      	sub	sp, #20
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	3303      	adds	r3, #3
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	021b      	lsls	r3, r3, #8
 8019218:	687a      	ldr	r2, [r7, #4]
 801921a:	3202      	adds	r2, #2
 801921c:	7812      	ldrb	r2, [r2, #0]
 801921e:	4313      	orrs	r3, r2
 8019220:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	021b      	lsls	r3, r3, #8
 8019226:	687a      	ldr	r2, [r7, #4]
 8019228:	3201      	adds	r2, #1
 801922a:	7812      	ldrb	r2, [r2, #0]
 801922c:	4313      	orrs	r3, r2
 801922e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	021b      	lsls	r3, r3, #8
 8019234:	687a      	ldr	r2, [r7, #4]
 8019236:	7812      	ldrb	r2, [r2, #0]
 8019238:	4313      	orrs	r3, r2
 801923a:	60fb      	str	r3, [r7, #12]
	return rv;
 801923c:	68fb      	ldr	r3, [r7, #12]
}
 801923e:	4618      	mov	r0, r3
 8019240:	3714      	adds	r7, #20
 8019242:	46bd      	mov	sp, r7
 8019244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019248:	4770      	bx	lr

0801924a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801924a:	b480      	push	{r7}
 801924c:	b083      	sub	sp, #12
 801924e:	af00      	add	r7, sp, #0
 8019250:	6078      	str	r0, [r7, #4]
 8019252:	460b      	mov	r3, r1
 8019254:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	1c5a      	adds	r2, r3, #1
 801925a:	607a      	str	r2, [r7, #4]
 801925c:	887a      	ldrh	r2, [r7, #2]
 801925e:	b2d2      	uxtb	r2, r2
 8019260:	701a      	strb	r2, [r3, #0]
 8019262:	887b      	ldrh	r3, [r7, #2]
 8019264:	0a1b      	lsrs	r3, r3, #8
 8019266:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	1c5a      	adds	r2, r3, #1
 801926c:	607a      	str	r2, [r7, #4]
 801926e:	887a      	ldrh	r2, [r7, #2]
 8019270:	b2d2      	uxtb	r2, r2
 8019272:	701a      	strb	r2, [r3, #0]
}
 8019274:	bf00      	nop
 8019276:	370c      	adds	r7, #12
 8019278:	46bd      	mov	sp, r7
 801927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927e:	4770      	bx	lr

08019280 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8019280:	b480      	push	{r7}
 8019282:	b083      	sub	sp, #12
 8019284:	af00      	add	r7, sp, #0
 8019286:	6078      	str	r0, [r7, #4]
 8019288:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	1c5a      	adds	r2, r3, #1
 801928e:	607a      	str	r2, [r7, #4]
 8019290:	683a      	ldr	r2, [r7, #0]
 8019292:	b2d2      	uxtb	r2, r2
 8019294:	701a      	strb	r2, [r3, #0]
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	0a1b      	lsrs	r3, r3, #8
 801929a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	1c5a      	adds	r2, r3, #1
 80192a0:	607a      	str	r2, [r7, #4]
 80192a2:	683a      	ldr	r2, [r7, #0]
 80192a4:	b2d2      	uxtb	r2, r2
 80192a6:	701a      	strb	r2, [r3, #0]
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	0a1b      	lsrs	r3, r3, #8
 80192ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	1c5a      	adds	r2, r3, #1
 80192b2:	607a      	str	r2, [r7, #4]
 80192b4:	683a      	ldr	r2, [r7, #0]
 80192b6:	b2d2      	uxtb	r2, r2
 80192b8:	701a      	strb	r2, [r3, #0]
 80192ba:	683b      	ldr	r3, [r7, #0]
 80192bc:	0a1b      	lsrs	r3, r3, #8
 80192be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	1c5a      	adds	r2, r3, #1
 80192c4:	607a      	str	r2, [r7, #4]
 80192c6:	683a      	ldr	r2, [r7, #0]
 80192c8:	b2d2      	uxtb	r2, r2
 80192ca:	701a      	strb	r2, [r3, #0]
}
 80192cc:	bf00      	nop
 80192ce:	370c      	adds	r7, #12
 80192d0:	46bd      	mov	sp, r7
 80192d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d6:	4770      	bx	lr

080192d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80192d8:	b480      	push	{r7}
 80192da:	b087      	sub	sp, #28
 80192dc:	af00      	add	r7, sp, #0
 80192de:	60f8      	str	r0, [r7, #12]
 80192e0:	60b9      	str	r1, [r7, #8]
 80192e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80192e8:	68bb      	ldr	r3, [r7, #8]
 80192ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d00d      	beq.n	801930e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80192f2:	693a      	ldr	r2, [r7, #16]
 80192f4:	1c53      	adds	r3, r2, #1
 80192f6:	613b      	str	r3, [r7, #16]
 80192f8:	697b      	ldr	r3, [r7, #20]
 80192fa:	1c59      	adds	r1, r3, #1
 80192fc:	6179      	str	r1, [r7, #20]
 80192fe:	7812      	ldrb	r2, [r2, #0]
 8019300:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	3b01      	subs	r3, #1
 8019306:	607b      	str	r3, [r7, #4]
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d1f1      	bne.n	80192f2 <mem_cpy+0x1a>
	}
}
 801930e:	bf00      	nop
 8019310:	371c      	adds	r7, #28
 8019312:	46bd      	mov	sp, r7
 8019314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019318:	4770      	bx	lr

0801931a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801931a:	b480      	push	{r7}
 801931c:	b087      	sub	sp, #28
 801931e:	af00      	add	r7, sp, #0
 8019320:	60f8      	str	r0, [r7, #12]
 8019322:	60b9      	str	r1, [r7, #8]
 8019324:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801932a:	697b      	ldr	r3, [r7, #20]
 801932c:	1c5a      	adds	r2, r3, #1
 801932e:	617a      	str	r2, [r7, #20]
 8019330:	68ba      	ldr	r2, [r7, #8]
 8019332:	b2d2      	uxtb	r2, r2
 8019334:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	3b01      	subs	r3, #1
 801933a:	607b      	str	r3, [r7, #4]
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d1f3      	bne.n	801932a <mem_set+0x10>
}
 8019342:	bf00      	nop
 8019344:	bf00      	nop
 8019346:	371c      	adds	r7, #28
 8019348:	46bd      	mov	sp, r7
 801934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934e:	4770      	bx	lr

08019350 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8019350:	b480      	push	{r7}
 8019352:	b089      	sub	sp, #36	@ 0x24
 8019354:	af00      	add	r7, sp, #0
 8019356:	60f8      	str	r0, [r7, #12]
 8019358:	60b9      	str	r1, [r7, #8]
 801935a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	61fb      	str	r3, [r7, #28]
 8019360:	68bb      	ldr	r3, [r7, #8]
 8019362:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8019364:	2300      	movs	r3, #0
 8019366:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8019368:	69fb      	ldr	r3, [r7, #28]
 801936a:	1c5a      	adds	r2, r3, #1
 801936c:	61fa      	str	r2, [r7, #28]
 801936e:	781b      	ldrb	r3, [r3, #0]
 8019370:	4619      	mov	r1, r3
 8019372:	69bb      	ldr	r3, [r7, #24]
 8019374:	1c5a      	adds	r2, r3, #1
 8019376:	61ba      	str	r2, [r7, #24]
 8019378:	781b      	ldrb	r3, [r3, #0]
 801937a:	1acb      	subs	r3, r1, r3
 801937c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	3b01      	subs	r3, #1
 8019382:	607b      	str	r3, [r7, #4]
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d002      	beq.n	8019390 <mem_cmp+0x40>
 801938a:	697b      	ldr	r3, [r7, #20]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d0eb      	beq.n	8019368 <mem_cmp+0x18>

	return r;
 8019390:	697b      	ldr	r3, [r7, #20]
}
 8019392:	4618      	mov	r0, r3
 8019394:	3724      	adds	r7, #36	@ 0x24
 8019396:	46bd      	mov	sp, r7
 8019398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939c:	4770      	bx	lr

0801939e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801939e:	b480      	push	{r7}
 80193a0:	b083      	sub	sp, #12
 80193a2:	af00      	add	r7, sp, #0
 80193a4:	6078      	str	r0, [r7, #4]
 80193a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80193a8:	e002      	b.n	80193b0 <chk_chr+0x12>
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	3301      	adds	r3, #1
 80193ae:	607b      	str	r3, [r7, #4]
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	781b      	ldrb	r3, [r3, #0]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d005      	beq.n	80193c4 <chk_chr+0x26>
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	781b      	ldrb	r3, [r3, #0]
 80193bc:	461a      	mov	r2, r3
 80193be:	683b      	ldr	r3, [r7, #0]
 80193c0:	4293      	cmp	r3, r2
 80193c2:	d1f2      	bne.n	80193aa <chk_chr+0xc>
	return *str;
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	781b      	ldrb	r3, [r3, #0]
}
 80193c8:	4618      	mov	r0, r3
 80193ca:	370c      	adds	r7, #12
 80193cc:	46bd      	mov	sp, r7
 80193ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d2:	4770      	bx	lr

080193d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80193d4:	b480      	push	{r7}
 80193d6:	b085      	sub	sp, #20
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
 80193dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80193de:	2300      	movs	r3, #0
 80193e0:	60bb      	str	r3, [r7, #8]
 80193e2:	68bb      	ldr	r3, [r7, #8]
 80193e4:	60fb      	str	r3, [r7, #12]
 80193e6:	e029      	b.n	801943c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80193e8:	4a27      	ldr	r2, [pc, #156]	@ (8019488 <chk_lock+0xb4>)
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	011b      	lsls	r3, r3, #4
 80193ee:	4413      	add	r3, r2
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d01d      	beq.n	8019432 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80193f6:	4a24      	ldr	r2, [pc, #144]	@ (8019488 <chk_lock+0xb4>)
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	011b      	lsls	r3, r3, #4
 80193fc:	4413      	add	r3, r2
 80193fe:	681a      	ldr	r2, [r3, #0]
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	429a      	cmp	r2, r3
 8019406:	d116      	bne.n	8019436 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8019408:	4a1f      	ldr	r2, [pc, #124]	@ (8019488 <chk_lock+0xb4>)
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	011b      	lsls	r3, r3, #4
 801940e:	4413      	add	r3, r2
 8019410:	3304      	adds	r3, #4
 8019412:	681a      	ldr	r2, [r3, #0]
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8019418:	429a      	cmp	r2, r3
 801941a:	d10c      	bne.n	8019436 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801941c:	4a1a      	ldr	r2, [pc, #104]	@ (8019488 <chk_lock+0xb4>)
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	011b      	lsls	r3, r3, #4
 8019422:	4413      	add	r3, r2
 8019424:	3308      	adds	r3, #8
 8019426:	681a      	ldr	r2, [r3, #0]
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801942c:	429a      	cmp	r2, r3
 801942e:	d102      	bne.n	8019436 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8019430:	e007      	b.n	8019442 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8019432:	2301      	movs	r3, #1
 8019434:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	3301      	adds	r3, #1
 801943a:	60fb      	str	r3, [r7, #12]
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	2b01      	cmp	r3, #1
 8019440:	d9d2      	bls.n	80193e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	2b02      	cmp	r3, #2
 8019446:	d109      	bne.n	801945c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8019448:	68bb      	ldr	r3, [r7, #8]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d102      	bne.n	8019454 <chk_lock+0x80>
 801944e:	683b      	ldr	r3, [r7, #0]
 8019450:	2b02      	cmp	r3, #2
 8019452:	d101      	bne.n	8019458 <chk_lock+0x84>
 8019454:	2300      	movs	r3, #0
 8019456:	e010      	b.n	801947a <chk_lock+0xa6>
 8019458:	2312      	movs	r3, #18
 801945a:	e00e      	b.n	801947a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801945c:	683b      	ldr	r3, [r7, #0]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d108      	bne.n	8019474 <chk_lock+0xa0>
 8019462:	4a09      	ldr	r2, [pc, #36]	@ (8019488 <chk_lock+0xb4>)
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	011b      	lsls	r3, r3, #4
 8019468:	4413      	add	r3, r2
 801946a:	330c      	adds	r3, #12
 801946c:	881b      	ldrh	r3, [r3, #0]
 801946e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019472:	d101      	bne.n	8019478 <chk_lock+0xa4>
 8019474:	2310      	movs	r3, #16
 8019476:	e000      	b.n	801947a <chk_lock+0xa6>
 8019478:	2300      	movs	r3, #0
}
 801947a:	4618      	mov	r0, r3
 801947c:	3714      	adds	r7, #20
 801947e:	46bd      	mov	sp, r7
 8019480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019484:	4770      	bx	lr
 8019486:	bf00      	nop
 8019488:	20001b70 	.word	0x20001b70

0801948c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801948c:	b480      	push	{r7}
 801948e:	b083      	sub	sp, #12
 8019490:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8019492:	2300      	movs	r3, #0
 8019494:	607b      	str	r3, [r7, #4]
 8019496:	e002      	b.n	801949e <enq_lock+0x12>
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	3301      	adds	r3, #1
 801949c:	607b      	str	r3, [r7, #4]
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	2b01      	cmp	r3, #1
 80194a2:	d806      	bhi.n	80194b2 <enq_lock+0x26>
 80194a4:	4a09      	ldr	r2, [pc, #36]	@ (80194cc <enq_lock+0x40>)
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	011b      	lsls	r3, r3, #4
 80194aa:	4413      	add	r3, r2
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d1f2      	bne.n	8019498 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	2b02      	cmp	r3, #2
 80194b6:	bf14      	ite	ne
 80194b8:	2301      	movne	r3, #1
 80194ba:	2300      	moveq	r3, #0
 80194bc:	b2db      	uxtb	r3, r3
}
 80194be:	4618      	mov	r0, r3
 80194c0:	370c      	adds	r7, #12
 80194c2:	46bd      	mov	sp, r7
 80194c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194c8:	4770      	bx	lr
 80194ca:	bf00      	nop
 80194cc:	20001b70 	.word	0x20001b70

080194d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80194d0:	b480      	push	{r7}
 80194d2:	b085      	sub	sp, #20
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	6078      	str	r0, [r7, #4]
 80194d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80194da:	2300      	movs	r3, #0
 80194dc:	60fb      	str	r3, [r7, #12]
 80194de:	e01f      	b.n	8019520 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80194e0:	4a41      	ldr	r2, [pc, #260]	@ (80195e8 <inc_lock+0x118>)
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	011b      	lsls	r3, r3, #4
 80194e6:	4413      	add	r3, r2
 80194e8:	681a      	ldr	r2, [r3, #0]
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	429a      	cmp	r2, r3
 80194f0:	d113      	bne.n	801951a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80194f2:	4a3d      	ldr	r2, [pc, #244]	@ (80195e8 <inc_lock+0x118>)
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	011b      	lsls	r3, r3, #4
 80194f8:	4413      	add	r3, r2
 80194fa:	3304      	adds	r3, #4
 80194fc:	681a      	ldr	r2, [r3, #0]
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8019502:	429a      	cmp	r2, r3
 8019504:	d109      	bne.n	801951a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8019506:	4a38      	ldr	r2, [pc, #224]	@ (80195e8 <inc_lock+0x118>)
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	011b      	lsls	r3, r3, #4
 801950c:	4413      	add	r3, r2
 801950e:	3308      	adds	r3, #8
 8019510:	681a      	ldr	r2, [r3, #0]
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8019516:	429a      	cmp	r2, r3
 8019518:	d006      	beq.n	8019528 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	3301      	adds	r3, #1
 801951e:	60fb      	str	r3, [r7, #12]
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	2b01      	cmp	r3, #1
 8019524:	d9dc      	bls.n	80194e0 <inc_lock+0x10>
 8019526:	e000      	b.n	801952a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8019528:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	2b02      	cmp	r3, #2
 801952e:	d132      	bne.n	8019596 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8019530:	2300      	movs	r3, #0
 8019532:	60fb      	str	r3, [r7, #12]
 8019534:	e002      	b.n	801953c <inc_lock+0x6c>
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	3301      	adds	r3, #1
 801953a:	60fb      	str	r3, [r7, #12]
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	2b01      	cmp	r3, #1
 8019540:	d806      	bhi.n	8019550 <inc_lock+0x80>
 8019542:	4a29      	ldr	r2, [pc, #164]	@ (80195e8 <inc_lock+0x118>)
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	011b      	lsls	r3, r3, #4
 8019548:	4413      	add	r3, r2
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d1f2      	bne.n	8019536 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	2b02      	cmp	r3, #2
 8019554:	d101      	bne.n	801955a <inc_lock+0x8a>
 8019556:	2300      	movs	r3, #0
 8019558:	e040      	b.n	80195dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	681a      	ldr	r2, [r3, #0]
 801955e:	4922      	ldr	r1, [pc, #136]	@ (80195e8 <inc_lock+0x118>)
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	011b      	lsls	r3, r3, #4
 8019564:	440b      	add	r3, r1
 8019566:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	689a      	ldr	r2, [r3, #8]
 801956c:	491e      	ldr	r1, [pc, #120]	@ (80195e8 <inc_lock+0x118>)
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	011b      	lsls	r3, r3, #4
 8019572:	440b      	add	r3, r1
 8019574:	3304      	adds	r3, #4
 8019576:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	695a      	ldr	r2, [r3, #20]
 801957c:	491a      	ldr	r1, [pc, #104]	@ (80195e8 <inc_lock+0x118>)
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	011b      	lsls	r3, r3, #4
 8019582:	440b      	add	r3, r1
 8019584:	3308      	adds	r3, #8
 8019586:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8019588:	4a17      	ldr	r2, [pc, #92]	@ (80195e8 <inc_lock+0x118>)
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	011b      	lsls	r3, r3, #4
 801958e:	4413      	add	r3, r2
 8019590:	330c      	adds	r3, #12
 8019592:	2200      	movs	r2, #0
 8019594:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d009      	beq.n	80195b0 <inc_lock+0xe0>
 801959c:	4a12      	ldr	r2, [pc, #72]	@ (80195e8 <inc_lock+0x118>)
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	011b      	lsls	r3, r3, #4
 80195a2:	4413      	add	r3, r2
 80195a4:	330c      	adds	r3, #12
 80195a6:	881b      	ldrh	r3, [r3, #0]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d001      	beq.n	80195b0 <inc_lock+0xe0>
 80195ac:	2300      	movs	r3, #0
 80195ae:	e015      	b.n	80195dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80195b0:	683b      	ldr	r3, [r7, #0]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d108      	bne.n	80195c8 <inc_lock+0xf8>
 80195b6:	4a0c      	ldr	r2, [pc, #48]	@ (80195e8 <inc_lock+0x118>)
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	011b      	lsls	r3, r3, #4
 80195bc:	4413      	add	r3, r2
 80195be:	330c      	adds	r3, #12
 80195c0:	881b      	ldrh	r3, [r3, #0]
 80195c2:	3301      	adds	r3, #1
 80195c4:	b29a      	uxth	r2, r3
 80195c6:	e001      	b.n	80195cc <inc_lock+0xfc>
 80195c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80195cc:	4906      	ldr	r1, [pc, #24]	@ (80195e8 <inc_lock+0x118>)
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	011b      	lsls	r3, r3, #4
 80195d2:	440b      	add	r3, r1
 80195d4:	330c      	adds	r3, #12
 80195d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	3301      	adds	r3, #1
}
 80195dc:	4618      	mov	r0, r3
 80195de:	3714      	adds	r7, #20
 80195e0:	46bd      	mov	sp, r7
 80195e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e6:	4770      	bx	lr
 80195e8:	20001b70 	.word	0x20001b70

080195ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80195ec:	b480      	push	{r7}
 80195ee:	b085      	sub	sp, #20
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	3b01      	subs	r3, #1
 80195f8:	607b      	str	r3, [r7, #4]
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	2b01      	cmp	r3, #1
 80195fe:	d825      	bhi.n	801964c <dec_lock+0x60>
		n = Files[i].ctr;
 8019600:	4a17      	ldr	r2, [pc, #92]	@ (8019660 <dec_lock+0x74>)
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	011b      	lsls	r3, r3, #4
 8019606:	4413      	add	r3, r2
 8019608:	330c      	adds	r3, #12
 801960a:	881b      	ldrh	r3, [r3, #0]
 801960c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801960e:	89fb      	ldrh	r3, [r7, #14]
 8019610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019614:	d101      	bne.n	801961a <dec_lock+0x2e>
 8019616:	2300      	movs	r3, #0
 8019618:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801961a:	89fb      	ldrh	r3, [r7, #14]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d002      	beq.n	8019626 <dec_lock+0x3a>
 8019620:	89fb      	ldrh	r3, [r7, #14]
 8019622:	3b01      	subs	r3, #1
 8019624:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8019626:	4a0e      	ldr	r2, [pc, #56]	@ (8019660 <dec_lock+0x74>)
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	011b      	lsls	r3, r3, #4
 801962c:	4413      	add	r3, r2
 801962e:	330c      	adds	r3, #12
 8019630:	89fa      	ldrh	r2, [r7, #14]
 8019632:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8019634:	89fb      	ldrh	r3, [r7, #14]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d105      	bne.n	8019646 <dec_lock+0x5a>
 801963a:	4a09      	ldr	r2, [pc, #36]	@ (8019660 <dec_lock+0x74>)
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	011b      	lsls	r3, r3, #4
 8019640:	4413      	add	r3, r2
 8019642:	2200      	movs	r2, #0
 8019644:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8019646:	2300      	movs	r3, #0
 8019648:	737b      	strb	r3, [r7, #13]
 801964a:	e001      	b.n	8019650 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801964c:	2302      	movs	r3, #2
 801964e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8019650:	7b7b      	ldrb	r3, [r7, #13]
}
 8019652:	4618      	mov	r0, r3
 8019654:	3714      	adds	r7, #20
 8019656:	46bd      	mov	sp, r7
 8019658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965c:	4770      	bx	lr
 801965e:	bf00      	nop
 8019660:	20001b70 	.word	0x20001b70

08019664 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8019664:	b480      	push	{r7}
 8019666:	b085      	sub	sp, #20
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801966c:	2300      	movs	r3, #0
 801966e:	60fb      	str	r3, [r7, #12]
 8019670:	e010      	b.n	8019694 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8019672:	4a0d      	ldr	r2, [pc, #52]	@ (80196a8 <clear_lock+0x44>)
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	011b      	lsls	r3, r3, #4
 8019678:	4413      	add	r3, r2
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	687a      	ldr	r2, [r7, #4]
 801967e:	429a      	cmp	r2, r3
 8019680:	d105      	bne.n	801968e <clear_lock+0x2a>
 8019682:	4a09      	ldr	r2, [pc, #36]	@ (80196a8 <clear_lock+0x44>)
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	011b      	lsls	r3, r3, #4
 8019688:	4413      	add	r3, r2
 801968a:	2200      	movs	r2, #0
 801968c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	3301      	adds	r3, #1
 8019692:	60fb      	str	r3, [r7, #12]
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	2b01      	cmp	r3, #1
 8019698:	d9eb      	bls.n	8019672 <clear_lock+0xe>
	}
}
 801969a:	bf00      	nop
 801969c:	bf00      	nop
 801969e:	3714      	adds	r7, #20
 80196a0:	46bd      	mov	sp, r7
 80196a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a6:	4770      	bx	lr
 80196a8:	20001b70 	.word	0x20001b70

080196ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b086      	sub	sp, #24
 80196b0:	af00      	add	r7, sp, #0
 80196b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80196b4:	2300      	movs	r3, #0
 80196b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	78db      	ldrb	r3, [r3, #3]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d034      	beq.n	801972a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80196c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	7858      	ldrb	r0, [r3, #1]
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80196d0:	2301      	movs	r3, #1
 80196d2:	697a      	ldr	r2, [r7, #20]
 80196d4:	f7ff fd40 	bl	8019158 <disk_write>
 80196d8:	4603      	mov	r3, r0
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d002      	beq.n	80196e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80196de:	2301      	movs	r3, #1
 80196e0:	73fb      	strb	r3, [r7, #15]
 80196e2:	e022      	b.n	801972a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	2200      	movs	r2, #0
 80196e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196ee:	697a      	ldr	r2, [r7, #20]
 80196f0:	1ad2      	subs	r2, r2, r3
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	69db      	ldr	r3, [r3, #28]
 80196f6:	429a      	cmp	r2, r3
 80196f8:	d217      	bcs.n	801972a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	789b      	ldrb	r3, [r3, #2]
 80196fe:	613b      	str	r3, [r7, #16]
 8019700:	e010      	b.n	8019724 <sync_window+0x78>
					wsect += fs->fsize;
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	69db      	ldr	r3, [r3, #28]
 8019706:	697a      	ldr	r2, [r7, #20]
 8019708:	4413      	add	r3, r2
 801970a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	7858      	ldrb	r0, [r3, #1]
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8019716:	2301      	movs	r3, #1
 8019718:	697a      	ldr	r2, [r7, #20]
 801971a:	f7ff fd1d 	bl	8019158 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801971e:	693b      	ldr	r3, [r7, #16]
 8019720:	3b01      	subs	r3, #1
 8019722:	613b      	str	r3, [r7, #16]
 8019724:	693b      	ldr	r3, [r7, #16]
 8019726:	2b01      	cmp	r3, #1
 8019728:	d8eb      	bhi.n	8019702 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801972a:	7bfb      	ldrb	r3, [r7, #15]
}
 801972c:	4618      	mov	r0, r3
 801972e:	3718      	adds	r7, #24
 8019730:	46bd      	mov	sp, r7
 8019732:	bd80      	pop	{r7, pc}

08019734 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8019734:	b580      	push	{r7, lr}
 8019736:	b084      	sub	sp, #16
 8019738:	af00      	add	r7, sp, #0
 801973a:	6078      	str	r0, [r7, #4]
 801973c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801973e:	2300      	movs	r3, #0
 8019740:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019746:	683a      	ldr	r2, [r7, #0]
 8019748:	429a      	cmp	r2, r3
 801974a:	d01b      	beq.n	8019784 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801974c:	6878      	ldr	r0, [r7, #4]
 801974e:	f7ff ffad 	bl	80196ac <sync_window>
 8019752:	4603      	mov	r3, r0
 8019754:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8019756:	7bfb      	ldrb	r3, [r7, #15]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d113      	bne.n	8019784 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	7858      	ldrb	r0, [r3, #1]
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8019766:	2301      	movs	r3, #1
 8019768:	683a      	ldr	r2, [r7, #0]
 801976a:	f7ff fcd5 	bl	8019118 <disk_read>
 801976e:	4603      	mov	r3, r0
 8019770:	2b00      	cmp	r3, #0
 8019772:	d004      	beq.n	801977e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8019774:	f04f 33ff 	mov.w	r3, #4294967295
 8019778:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801977a:	2301      	movs	r3, #1
 801977c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	683a      	ldr	r2, [r7, #0]
 8019782:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8019784:	7bfb      	ldrb	r3, [r7, #15]
}
 8019786:	4618      	mov	r0, r3
 8019788:	3710      	adds	r7, #16
 801978a:	46bd      	mov	sp, r7
 801978c:	bd80      	pop	{r7, pc}
	...

08019790 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b084      	sub	sp, #16
 8019794:	af00      	add	r7, sp, #0
 8019796:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8019798:	6878      	ldr	r0, [r7, #4]
 801979a:	f7ff ff87 	bl	80196ac <sync_window>
 801979e:	4603      	mov	r3, r0
 80197a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80197a2:	7bfb      	ldrb	r3, [r7, #15]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d158      	bne.n	801985a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	781b      	ldrb	r3, [r3, #0]
 80197ac:	2b03      	cmp	r3, #3
 80197ae:	d148      	bne.n	8019842 <sync_fs+0xb2>
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	791b      	ldrb	r3, [r3, #4]
 80197b4:	2b01      	cmp	r3, #1
 80197b6:	d144      	bne.n	8019842 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	3334      	adds	r3, #52	@ 0x34
 80197bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80197c0:	2100      	movs	r1, #0
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7ff fda9 	bl	801931a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	3334      	adds	r3, #52	@ 0x34
 80197cc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80197d0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80197d4:	4618      	mov	r0, r3
 80197d6:	f7ff fd38 	bl	801924a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	3334      	adds	r3, #52	@ 0x34
 80197de:	4921      	ldr	r1, [pc, #132]	@ (8019864 <sync_fs+0xd4>)
 80197e0:	4618      	mov	r0, r3
 80197e2:	f7ff fd4d 	bl	8019280 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	3334      	adds	r3, #52	@ 0x34
 80197ea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80197ee:	491e      	ldr	r1, [pc, #120]	@ (8019868 <sync_fs+0xd8>)
 80197f0:	4618      	mov	r0, r3
 80197f2:	f7ff fd45 	bl	8019280 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	3334      	adds	r3, #52	@ 0x34
 80197fa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	695b      	ldr	r3, [r3, #20]
 8019802:	4619      	mov	r1, r3
 8019804:	4610      	mov	r0, r2
 8019806:	f7ff fd3b 	bl	8019280 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	3334      	adds	r3, #52	@ 0x34
 801980e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	691b      	ldr	r3, [r3, #16]
 8019816:	4619      	mov	r1, r3
 8019818:	4610      	mov	r0, r2
 801981a:	f7ff fd31 	bl	8019280 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	6a1b      	ldr	r3, [r3, #32]
 8019822:	1c5a      	adds	r2, r3, #1
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	7858      	ldrb	r0, [r3, #1]
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019836:	2301      	movs	r3, #1
 8019838:	f7ff fc8e 	bl	8019158 <disk_write>
			fs->fsi_flag = 0;
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	2200      	movs	r2, #0
 8019840:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	785b      	ldrb	r3, [r3, #1]
 8019846:	2200      	movs	r2, #0
 8019848:	2100      	movs	r1, #0
 801984a:	4618      	mov	r0, r3
 801984c:	f7ff fca4 	bl	8019198 <disk_ioctl>
 8019850:	4603      	mov	r3, r0
 8019852:	2b00      	cmp	r3, #0
 8019854:	d001      	beq.n	801985a <sync_fs+0xca>
 8019856:	2301      	movs	r3, #1
 8019858:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801985a:	7bfb      	ldrb	r3, [r7, #15]
}
 801985c:	4618      	mov	r0, r3
 801985e:	3710      	adds	r7, #16
 8019860:	46bd      	mov	sp, r7
 8019862:	bd80      	pop	{r7, pc}
 8019864:	41615252 	.word	0x41615252
 8019868:	61417272 	.word	0x61417272

0801986c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801986c:	b480      	push	{r7}
 801986e:	b083      	sub	sp, #12
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
 8019874:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8019876:	683b      	ldr	r3, [r7, #0]
 8019878:	3b02      	subs	r3, #2
 801987a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	699b      	ldr	r3, [r3, #24]
 8019880:	3b02      	subs	r3, #2
 8019882:	683a      	ldr	r2, [r7, #0]
 8019884:	429a      	cmp	r2, r3
 8019886:	d301      	bcc.n	801988c <clust2sect+0x20>
 8019888:	2300      	movs	r3, #0
 801988a:	e008      	b.n	801989e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	895b      	ldrh	r3, [r3, #10]
 8019890:	461a      	mov	r2, r3
 8019892:	683b      	ldr	r3, [r7, #0]
 8019894:	fb03 f202 	mul.w	r2, r3, r2
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801989c:	4413      	add	r3, r2
}
 801989e:	4618      	mov	r0, r3
 80198a0:	370c      	adds	r7, #12
 80198a2:	46bd      	mov	sp, r7
 80198a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a8:	4770      	bx	lr

080198aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80198aa:	b580      	push	{r7, lr}
 80198ac:	b086      	sub	sp, #24
 80198ae:	af00      	add	r7, sp, #0
 80198b0:	6078      	str	r0, [r7, #4]
 80198b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80198ba:	683b      	ldr	r3, [r7, #0]
 80198bc:	2b01      	cmp	r3, #1
 80198be:	d904      	bls.n	80198ca <get_fat+0x20>
 80198c0:	693b      	ldr	r3, [r7, #16]
 80198c2:	699b      	ldr	r3, [r3, #24]
 80198c4:	683a      	ldr	r2, [r7, #0]
 80198c6:	429a      	cmp	r2, r3
 80198c8:	d302      	bcc.n	80198d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80198ca:	2301      	movs	r3, #1
 80198cc:	617b      	str	r3, [r7, #20]
 80198ce:	e08e      	b.n	80199ee <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80198d0:	f04f 33ff 	mov.w	r3, #4294967295
 80198d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80198d6:	693b      	ldr	r3, [r7, #16]
 80198d8:	781b      	ldrb	r3, [r3, #0]
 80198da:	2b03      	cmp	r3, #3
 80198dc:	d061      	beq.n	80199a2 <get_fat+0xf8>
 80198de:	2b03      	cmp	r3, #3
 80198e0:	dc7b      	bgt.n	80199da <get_fat+0x130>
 80198e2:	2b01      	cmp	r3, #1
 80198e4:	d002      	beq.n	80198ec <get_fat+0x42>
 80198e6:	2b02      	cmp	r3, #2
 80198e8:	d041      	beq.n	801996e <get_fat+0xc4>
 80198ea:	e076      	b.n	80199da <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80198ec:	683b      	ldr	r3, [r7, #0]
 80198ee:	60fb      	str	r3, [r7, #12]
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	085b      	lsrs	r3, r3, #1
 80198f4:	68fa      	ldr	r2, [r7, #12]
 80198f6:	4413      	add	r3, r2
 80198f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80198fa:	693b      	ldr	r3, [r7, #16]
 80198fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	0a5b      	lsrs	r3, r3, #9
 8019902:	4413      	add	r3, r2
 8019904:	4619      	mov	r1, r3
 8019906:	6938      	ldr	r0, [r7, #16]
 8019908:	f7ff ff14 	bl	8019734 <move_window>
 801990c:	4603      	mov	r3, r0
 801990e:	2b00      	cmp	r3, #0
 8019910:	d166      	bne.n	80199e0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	1c5a      	adds	r2, r3, #1
 8019916:	60fa      	str	r2, [r7, #12]
 8019918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801991c:	693a      	ldr	r2, [r7, #16]
 801991e:	4413      	add	r3, r2
 8019920:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8019924:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019926:	693b      	ldr	r3, [r7, #16]
 8019928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	0a5b      	lsrs	r3, r3, #9
 801992e:	4413      	add	r3, r2
 8019930:	4619      	mov	r1, r3
 8019932:	6938      	ldr	r0, [r7, #16]
 8019934:	f7ff fefe 	bl	8019734 <move_window>
 8019938:	4603      	mov	r3, r0
 801993a:	2b00      	cmp	r3, #0
 801993c:	d152      	bne.n	80199e4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019944:	693a      	ldr	r2, [r7, #16]
 8019946:	4413      	add	r3, r2
 8019948:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801994c:	021b      	lsls	r3, r3, #8
 801994e:	68ba      	ldr	r2, [r7, #8]
 8019950:	4313      	orrs	r3, r2
 8019952:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	f003 0301 	and.w	r3, r3, #1
 801995a:	2b00      	cmp	r3, #0
 801995c:	d002      	beq.n	8019964 <get_fat+0xba>
 801995e:	68bb      	ldr	r3, [r7, #8]
 8019960:	091b      	lsrs	r3, r3, #4
 8019962:	e002      	b.n	801996a <get_fat+0xc0>
 8019964:	68bb      	ldr	r3, [r7, #8]
 8019966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801996a:	617b      	str	r3, [r7, #20]
			break;
 801996c:	e03f      	b.n	80199ee <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801996e:	693b      	ldr	r3, [r7, #16]
 8019970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019972:	683b      	ldr	r3, [r7, #0]
 8019974:	0a1b      	lsrs	r3, r3, #8
 8019976:	4413      	add	r3, r2
 8019978:	4619      	mov	r1, r3
 801997a:	6938      	ldr	r0, [r7, #16]
 801997c:	f7ff feda 	bl	8019734 <move_window>
 8019980:	4603      	mov	r3, r0
 8019982:	2b00      	cmp	r3, #0
 8019984:	d130      	bne.n	80199e8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019986:	693b      	ldr	r3, [r7, #16]
 8019988:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801998c:	683b      	ldr	r3, [r7, #0]
 801998e:	005b      	lsls	r3, r3, #1
 8019990:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019994:	4413      	add	r3, r2
 8019996:	4618      	mov	r0, r3
 8019998:	f7ff fc1c 	bl	80191d4 <ld_word>
 801999c:	4603      	mov	r3, r0
 801999e:	617b      	str	r3, [r7, #20]
			break;
 80199a0:	e025      	b.n	80199ee <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80199a2:	693b      	ldr	r3, [r7, #16]
 80199a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80199a6:	683b      	ldr	r3, [r7, #0]
 80199a8:	09db      	lsrs	r3, r3, #7
 80199aa:	4413      	add	r3, r2
 80199ac:	4619      	mov	r1, r3
 80199ae:	6938      	ldr	r0, [r7, #16]
 80199b0:	f7ff fec0 	bl	8019734 <move_window>
 80199b4:	4603      	mov	r3, r0
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d118      	bne.n	80199ec <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80199ba:	693b      	ldr	r3, [r7, #16]
 80199bc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	009b      	lsls	r3, r3, #2
 80199c4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80199c8:	4413      	add	r3, r2
 80199ca:	4618      	mov	r0, r3
 80199cc:	f7ff fc1a 	bl	8019204 <ld_dword>
 80199d0:	4603      	mov	r3, r0
 80199d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80199d6:	617b      	str	r3, [r7, #20]
			break;
 80199d8:	e009      	b.n	80199ee <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80199da:	2301      	movs	r3, #1
 80199dc:	617b      	str	r3, [r7, #20]
 80199de:	e006      	b.n	80199ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80199e0:	bf00      	nop
 80199e2:	e004      	b.n	80199ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80199e4:	bf00      	nop
 80199e6:	e002      	b.n	80199ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80199e8:	bf00      	nop
 80199ea:	e000      	b.n	80199ee <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80199ec:	bf00      	nop
		}
	}

	return val;
 80199ee:	697b      	ldr	r3, [r7, #20]
}
 80199f0:	4618      	mov	r0, r3
 80199f2:	3718      	adds	r7, #24
 80199f4:	46bd      	mov	sp, r7
 80199f6:	bd80      	pop	{r7, pc}

080199f8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80199f8:	b590      	push	{r4, r7, lr}
 80199fa:	b089      	sub	sp, #36	@ 0x24
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	60f8      	str	r0, [r7, #12]
 8019a00:	60b9      	str	r1, [r7, #8]
 8019a02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8019a04:	2302      	movs	r3, #2
 8019a06:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019a08:	68bb      	ldr	r3, [r7, #8]
 8019a0a:	2b01      	cmp	r3, #1
 8019a0c:	f240 80d9 	bls.w	8019bc2 <put_fat+0x1ca>
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	699b      	ldr	r3, [r3, #24]
 8019a14:	68ba      	ldr	r2, [r7, #8]
 8019a16:	429a      	cmp	r2, r3
 8019a18:	f080 80d3 	bcs.w	8019bc2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8019a1c:	68fb      	ldr	r3, [r7, #12]
 8019a1e:	781b      	ldrb	r3, [r3, #0]
 8019a20:	2b03      	cmp	r3, #3
 8019a22:	f000 8096 	beq.w	8019b52 <put_fat+0x15a>
 8019a26:	2b03      	cmp	r3, #3
 8019a28:	f300 80cb 	bgt.w	8019bc2 <put_fat+0x1ca>
 8019a2c:	2b01      	cmp	r3, #1
 8019a2e:	d002      	beq.n	8019a36 <put_fat+0x3e>
 8019a30:	2b02      	cmp	r3, #2
 8019a32:	d06e      	beq.n	8019b12 <put_fat+0x11a>
 8019a34:	e0c5      	b.n	8019bc2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8019a36:	68bb      	ldr	r3, [r7, #8]
 8019a38:	61bb      	str	r3, [r7, #24]
 8019a3a:	69bb      	ldr	r3, [r7, #24]
 8019a3c:	085b      	lsrs	r3, r3, #1
 8019a3e:	69ba      	ldr	r2, [r7, #24]
 8019a40:	4413      	add	r3, r2
 8019a42:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a48:	69bb      	ldr	r3, [r7, #24]
 8019a4a:	0a5b      	lsrs	r3, r3, #9
 8019a4c:	4413      	add	r3, r2
 8019a4e:	4619      	mov	r1, r3
 8019a50:	68f8      	ldr	r0, [r7, #12]
 8019a52:	f7ff fe6f 	bl	8019734 <move_window>
 8019a56:	4603      	mov	r3, r0
 8019a58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019a5a:	7ffb      	ldrb	r3, [r7, #31]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	f040 80a9 	bne.w	8019bb4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019a68:	69bb      	ldr	r3, [r7, #24]
 8019a6a:	1c59      	adds	r1, r3, #1
 8019a6c:	61b9      	str	r1, [r7, #24]
 8019a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019a72:	4413      	add	r3, r2
 8019a74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019a76:	68bb      	ldr	r3, [r7, #8]
 8019a78:	f003 0301 	and.w	r3, r3, #1
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d00d      	beq.n	8019a9c <put_fat+0xa4>
 8019a80:	697b      	ldr	r3, [r7, #20]
 8019a82:	781b      	ldrb	r3, [r3, #0]
 8019a84:	b25b      	sxtb	r3, r3
 8019a86:	f003 030f 	and.w	r3, r3, #15
 8019a8a:	b25a      	sxtb	r2, r3
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	b2db      	uxtb	r3, r3
 8019a90:	011b      	lsls	r3, r3, #4
 8019a92:	b25b      	sxtb	r3, r3
 8019a94:	4313      	orrs	r3, r2
 8019a96:	b25b      	sxtb	r3, r3
 8019a98:	b2db      	uxtb	r3, r3
 8019a9a:	e001      	b.n	8019aa0 <put_fat+0xa8>
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	b2db      	uxtb	r3, r3
 8019aa0:	697a      	ldr	r2, [r7, #20]
 8019aa2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	2201      	movs	r2, #1
 8019aa8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019aae:	69bb      	ldr	r3, [r7, #24]
 8019ab0:	0a5b      	lsrs	r3, r3, #9
 8019ab2:	4413      	add	r3, r2
 8019ab4:	4619      	mov	r1, r3
 8019ab6:	68f8      	ldr	r0, [r7, #12]
 8019ab8:	f7ff fe3c 	bl	8019734 <move_window>
 8019abc:	4603      	mov	r3, r0
 8019abe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019ac0:	7ffb      	ldrb	r3, [r7, #31]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d178      	bne.n	8019bb8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019acc:	69bb      	ldr	r3, [r7, #24]
 8019ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019ad2:	4413      	add	r3, r2
 8019ad4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019ad6:	68bb      	ldr	r3, [r7, #8]
 8019ad8:	f003 0301 	and.w	r3, r3, #1
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d003      	beq.n	8019ae8 <put_fat+0xf0>
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	091b      	lsrs	r3, r3, #4
 8019ae4:	b2db      	uxtb	r3, r3
 8019ae6:	e00e      	b.n	8019b06 <put_fat+0x10e>
 8019ae8:	697b      	ldr	r3, [r7, #20]
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	b25b      	sxtb	r3, r3
 8019aee:	f023 030f 	bic.w	r3, r3, #15
 8019af2:	b25a      	sxtb	r2, r3
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	0a1b      	lsrs	r3, r3, #8
 8019af8:	b25b      	sxtb	r3, r3
 8019afa:	f003 030f 	and.w	r3, r3, #15
 8019afe:	b25b      	sxtb	r3, r3
 8019b00:	4313      	orrs	r3, r2
 8019b02:	b25b      	sxtb	r3, r3
 8019b04:	b2db      	uxtb	r3, r3
 8019b06:	697a      	ldr	r2, [r7, #20]
 8019b08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	2201      	movs	r2, #1
 8019b0e:	70da      	strb	r2, [r3, #3]
			break;
 8019b10:	e057      	b.n	8019bc2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b16:	68bb      	ldr	r3, [r7, #8]
 8019b18:	0a1b      	lsrs	r3, r3, #8
 8019b1a:	4413      	add	r3, r2
 8019b1c:	4619      	mov	r1, r3
 8019b1e:	68f8      	ldr	r0, [r7, #12]
 8019b20:	f7ff fe08 	bl	8019734 <move_window>
 8019b24:	4603      	mov	r3, r0
 8019b26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019b28:	7ffb      	ldrb	r3, [r7, #31]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d146      	bne.n	8019bbc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b34:	68bb      	ldr	r3, [r7, #8]
 8019b36:	005b      	lsls	r3, r3, #1
 8019b38:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019b3c:	4413      	add	r3, r2
 8019b3e:	687a      	ldr	r2, [r7, #4]
 8019b40:	b292      	uxth	r2, r2
 8019b42:	4611      	mov	r1, r2
 8019b44:	4618      	mov	r0, r3
 8019b46:	f7ff fb80 	bl	801924a <st_word>
			fs->wflag = 1;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	2201      	movs	r2, #1
 8019b4e:	70da      	strb	r2, [r3, #3]
			break;
 8019b50:	e037      	b.n	8019bc2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b56:	68bb      	ldr	r3, [r7, #8]
 8019b58:	09db      	lsrs	r3, r3, #7
 8019b5a:	4413      	add	r3, r2
 8019b5c:	4619      	mov	r1, r3
 8019b5e:	68f8      	ldr	r0, [r7, #12]
 8019b60:	f7ff fde8 	bl	8019734 <move_window>
 8019b64:	4603      	mov	r3, r0
 8019b66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019b68:	7ffb      	ldrb	r3, [r7, #31]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d128      	bne.n	8019bc0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b7a:	68bb      	ldr	r3, [r7, #8]
 8019b7c:	009b      	lsls	r3, r3, #2
 8019b7e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019b82:	4413      	add	r3, r2
 8019b84:	4618      	mov	r0, r3
 8019b86:	f7ff fb3d 	bl	8019204 <ld_dword>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8019b90:	4323      	orrs	r3, r4
 8019b92:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b9a:	68bb      	ldr	r3, [r7, #8]
 8019b9c:	009b      	lsls	r3, r3, #2
 8019b9e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019ba2:	4413      	add	r3, r2
 8019ba4:	6879      	ldr	r1, [r7, #4]
 8019ba6:	4618      	mov	r0, r3
 8019ba8:	f7ff fb6a 	bl	8019280 <st_dword>
			fs->wflag = 1;
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	2201      	movs	r2, #1
 8019bb0:	70da      	strb	r2, [r3, #3]
			break;
 8019bb2:	e006      	b.n	8019bc2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019bb4:	bf00      	nop
 8019bb6:	e004      	b.n	8019bc2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019bb8:	bf00      	nop
 8019bba:	e002      	b.n	8019bc2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019bbc:	bf00      	nop
 8019bbe:	e000      	b.n	8019bc2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019bc0:	bf00      	nop
		}
	}
	return res;
 8019bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	3724      	adds	r7, #36	@ 0x24
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	bd90      	pop	{r4, r7, pc}

08019bcc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b088      	sub	sp, #32
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	60f8      	str	r0, [r7, #12]
 8019bd4:	60b9      	str	r1, [r7, #8]
 8019bd6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8019bd8:	2300      	movs	r3, #0
 8019bda:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019be2:	68bb      	ldr	r3, [r7, #8]
 8019be4:	2b01      	cmp	r3, #1
 8019be6:	d904      	bls.n	8019bf2 <remove_chain+0x26>
 8019be8:	69bb      	ldr	r3, [r7, #24]
 8019bea:	699b      	ldr	r3, [r3, #24]
 8019bec:	68ba      	ldr	r2, [r7, #8]
 8019bee:	429a      	cmp	r2, r3
 8019bf0:	d301      	bcc.n	8019bf6 <remove_chain+0x2a>
 8019bf2:	2302      	movs	r3, #2
 8019bf4:	e04b      	b.n	8019c8e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d00c      	beq.n	8019c16 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8019bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8019c00:	6879      	ldr	r1, [r7, #4]
 8019c02:	69b8      	ldr	r0, [r7, #24]
 8019c04:	f7ff fef8 	bl	80199f8 <put_fat>
 8019c08:	4603      	mov	r3, r0
 8019c0a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019c0c:	7ffb      	ldrb	r3, [r7, #31]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d001      	beq.n	8019c16 <remove_chain+0x4a>
 8019c12:	7ffb      	ldrb	r3, [r7, #31]
 8019c14:	e03b      	b.n	8019c8e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019c16:	68b9      	ldr	r1, [r7, #8]
 8019c18:	68f8      	ldr	r0, [r7, #12]
 8019c1a:	f7ff fe46 	bl	80198aa <get_fat>
 8019c1e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8019c20:	697b      	ldr	r3, [r7, #20]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d031      	beq.n	8019c8a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019c26:	697b      	ldr	r3, [r7, #20]
 8019c28:	2b01      	cmp	r3, #1
 8019c2a:	d101      	bne.n	8019c30 <remove_chain+0x64>
 8019c2c:	2302      	movs	r3, #2
 8019c2e:	e02e      	b.n	8019c8e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019c30:	697b      	ldr	r3, [r7, #20]
 8019c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c36:	d101      	bne.n	8019c3c <remove_chain+0x70>
 8019c38:	2301      	movs	r3, #1
 8019c3a:	e028      	b.n	8019c8e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	68b9      	ldr	r1, [r7, #8]
 8019c40:	69b8      	ldr	r0, [r7, #24]
 8019c42:	f7ff fed9 	bl	80199f8 <put_fat>
 8019c46:	4603      	mov	r3, r0
 8019c48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8019c4a:	7ffb      	ldrb	r3, [r7, #31]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d001      	beq.n	8019c54 <remove_chain+0x88>
 8019c50:	7ffb      	ldrb	r3, [r7, #31]
 8019c52:	e01c      	b.n	8019c8e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019c54:	69bb      	ldr	r3, [r7, #24]
 8019c56:	695a      	ldr	r2, [r3, #20]
 8019c58:	69bb      	ldr	r3, [r7, #24]
 8019c5a:	699b      	ldr	r3, [r3, #24]
 8019c5c:	3b02      	subs	r3, #2
 8019c5e:	429a      	cmp	r2, r3
 8019c60:	d20b      	bcs.n	8019c7a <remove_chain+0xae>
			fs->free_clst++;
 8019c62:	69bb      	ldr	r3, [r7, #24]
 8019c64:	695b      	ldr	r3, [r3, #20]
 8019c66:	1c5a      	adds	r2, r3, #1
 8019c68:	69bb      	ldr	r3, [r7, #24]
 8019c6a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8019c6c:	69bb      	ldr	r3, [r7, #24]
 8019c6e:	791b      	ldrb	r3, [r3, #4]
 8019c70:	f043 0301 	orr.w	r3, r3, #1
 8019c74:	b2da      	uxtb	r2, r3
 8019c76:	69bb      	ldr	r3, [r7, #24]
 8019c78:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8019c7a:	697b      	ldr	r3, [r7, #20]
 8019c7c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8019c7e:	69bb      	ldr	r3, [r7, #24]
 8019c80:	699b      	ldr	r3, [r3, #24]
 8019c82:	68ba      	ldr	r2, [r7, #8]
 8019c84:	429a      	cmp	r2, r3
 8019c86:	d3c6      	bcc.n	8019c16 <remove_chain+0x4a>
 8019c88:	e000      	b.n	8019c8c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8019c8a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8019c8c:	2300      	movs	r3, #0
}
 8019c8e:	4618      	mov	r0, r3
 8019c90:	3720      	adds	r7, #32
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}

08019c96 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019c96:	b580      	push	{r7, lr}
 8019c98:	b088      	sub	sp, #32
 8019c9a:	af00      	add	r7, sp, #0
 8019c9c:	6078      	str	r0, [r7, #4]
 8019c9e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8019ca6:	683b      	ldr	r3, [r7, #0]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d10d      	bne.n	8019cc8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8019cac:	693b      	ldr	r3, [r7, #16]
 8019cae:	691b      	ldr	r3, [r3, #16]
 8019cb0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019cb2:	69bb      	ldr	r3, [r7, #24]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d004      	beq.n	8019cc2 <create_chain+0x2c>
 8019cb8:	693b      	ldr	r3, [r7, #16]
 8019cba:	699b      	ldr	r3, [r3, #24]
 8019cbc:	69ba      	ldr	r2, [r7, #24]
 8019cbe:	429a      	cmp	r2, r3
 8019cc0:	d31b      	bcc.n	8019cfa <create_chain+0x64>
 8019cc2:	2301      	movs	r3, #1
 8019cc4:	61bb      	str	r3, [r7, #24]
 8019cc6:	e018      	b.n	8019cfa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8019cc8:	6839      	ldr	r1, [r7, #0]
 8019cca:	6878      	ldr	r0, [r7, #4]
 8019ccc:	f7ff fded 	bl	80198aa <get_fat>
 8019cd0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	2b01      	cmp	r3, #1
 8019cd6:	d801      	bhi.n	8019cdc <create_chain+0x46>
 8019cd8:	2301      	movs	r3, #1
 8019cda:	e070      	b.n	8019dbe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ce2:	d101      	bne.n	8019ce8 <create_chain+0x52>
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	e06a      	b.n	8019dbe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8019ce8:	693b      	ldr	r3, [r7, #16]
 8019cea:	699b      	ldr	r3, [r3, #24]
 8019cec:	68fa      	ldr	r2, [r7, #12]
 8019cee:	429a      	cmp	r2, r3
 8019cf0:	d201      	bcs.n	8019cf6 <create_chain+0x60>
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	e063      	b.n	8019dbe <create_chain+0x128>
		scl = clst;
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8019cfa:	69bb      	ldr	r3, [r7, #24]
 8019cfc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8019cfe:	69fb      	ldr	r3, [r7, #28]
 8019d00:	3301      	adds	r3, #1
 8019d02:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019d04:	693b      	ldr	r3, [r7, #16]
 8019d06:	699b      	ldr	r3, [r3, #24]
 8019d08:	69fa      	ldr	r2, [r7, #28]
 8019d0a:	429a      	cmp	r2, r3
 8019d0c:	d307      	bcc.n	8019d1e <create_chain+0x88>
				ncl = 2;
 8019d0e:	2302      	movs	r3, #2
 8019d10:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8019d12:	69fa      	ldr	r2, [r7, #28]
 8019d14:	69bb      	ldr	r3, [r7, #24]
 8019d16:	429a      	cmp	r2, r3
 8019d18:	d901      	bls.n	8019d1e <create_chain+0x88>
 8019d1a:	2300      	movs	r3, #0
 8019d1c:	e04f      	b.n	8019dbe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019d1e:	69f9      	ldr	r1, [r7, #28]
 8019d20:	6878      	ldr	r0, [r7, #4]
 8019d22:	f7ff fdc2 	bl	80198aa <get_fat>
 8019d26:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d00e      	beq.n	8019d4c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	2b01      	cmp	r3, #1
 8019d32:	d003      	beq.n	8019d3c <create_chain+0xa6>
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d3a:	d101      	bne.n	8019d40 <create_chain+0xaa>
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	e03e      	b.n	8019dbe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8019d40:	69fa      	ldr	r2, [r7, #28]
 8019d42:	69bb      	ldr	r3, [r7, #24]
 8019d44:	429a      	cmp	r2, r3
 8019d46:	d1da      	bne.n	8019cfe <create_chain+0x68>
 8019d48:	2300      	movs	r3, #0
 8019d4a:	e038      	b.n	8019dbe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8019d4c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8019d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8019d52:	69f9      	ldr	r1, [r7, #28]
 8019d54:	6938      	ldr	r0, [r7, #16]
 8019d56:	f7ff fe4f 	bl	80199f8 <put_fat>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8019d5e:	7dfb      	ldrb	r3, [r7, #23]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d109      	bne.n	8019d78 <create_chain+0xe2>
 8019d64:	683b      	ldr	r3, [r7, #0]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d006      	beq.n	8019d78 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019d6a:	69fa      	ldr	r2, [r7, #28]
 8019d6c:	6839      	ldr	r1, [r7, #0]
 8019d6e:	6938      	ldr	r0, [r7, #16]
 8019d70:	f7ff fe42 	bl	80199f8 <put_fat>
 8019d74:	4603      	mov	r3, r0
 8019d76:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019d78:	7dfb      	ldrb	r3, [r7, #23]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d116      	bne.n	8019dac <create_chain+0x116>
		fs->last_clst = ncl;
 8019d7e:	693b      	ldr	r3, [r7, #16]
 8019d80:	69fa      	ldr	r2, [r7, #28]
 8019d82:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8019d84:	693b      	ldr	r3, [r7, #16]
 8019d86:	695a      	ldr	r2, [r3, #20]
 8019d88:	693b      	ldr	r3, [r7, #16]
 8019d8a:	699b      	ldr	r3, [r3, #24]
 8019d8c:	3b02      	subs	r3, #2
 8019d8e:	429a      	cmp	r2, r3
 8019d90:	d804      	bhi.n	8019d9c <create_chain+0x106>
 8019d92:	693b      	ldr	r3, [r7, #16]
 8019d94:	695b      	ldr	r3, [r3, #20]
 8019d96:	1e5a      	subs	r2, r3, #1
 8019d98:	693b      	ldr	r3, [r7, #16]
 8019d9a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8019d9c:	693b      	ldr	r3, [r7, #16]
 8019d9e:	791b      	ldrb	r3, [r3, #4]
 8019da0:	f043 0301 	orr.w	r3, r3, #1
 8019da4:	b2da      	uxtb	r2, r3
 8019da6:	693b      	ldr	r3, [r7, #16]
 8019da8:	711a      	strb	r2, [r3, #4]
 8019daa:	e007      	b.n	8019dbc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8019dac:	7dfb      	ldrb	r3, [r7, #23]
 8019dae:	2b01      	cmp	r3, #1
 8019db0:	d102      	bne.n	8019db8 <create_chain+0x122>
 8019db2:	f04f 33ff 	mov.w	r3, #4294967295
 8019db6:	e000      	b.n	8019dba <create_chain+0x124>
 8019db8:	2301      	movs	r3, #1
 8019dba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8019dbc:	69fb      	ldr	r3, [r7, #28]
}
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	3720      	adds	r7, #32
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	bd80      	pop	{r7, pc}

08019dc6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8019dc6:	b480      	push	{r7}
 8019dc8:	b087      	sub	sp, #28
 8019dca:	af00      	add	r7, sp, #0
 8019dcc:	6078      	str	r0, [r7, #4]
 8019dce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019dda:	3304      	adds	r3, #4
 8019ddc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8019dde:	683b      	ldr	r3, [r7, #0]
 8019de0:	0a5b      	lsrs	r3, r3, #9
 8019de2:	68fa      	ldr	r2, [r7, #12]
 8019de4:	8952      	ldrh	r2, [r2, #10]
 8019de6:	fbb3 f3f2 	udiv	r3, r3, r2
 8019dea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019dec:	693b      	ldr	r3, [r7, #16]
 8019dee:	1d1a      	adds	r2, r3, #4
 8019df0:	613a      	str	r2, [r7, #16]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8019df6:	68bb      	ldr	r3, [r7, #8]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d101      	bne.n	8019e00 <clmt_clust+0x3a>
 8019dfc:	2300      	movs	r3, #0
 8019dfe:	e010      	b.n	8019e22 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8019e00:	697a      	ldr	r2, [r7, #20]
 8019e02:	68bb      	ldr	r3, [r7, #8]
 8019e04:	429a      	cmp	r2, r3
 8019e06:	d307      	bcc.n	8019e18 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8019e08:	697a      	ldr	r2, [r7, #20]
 8019e0a:	68bb      	ldr	r3, [r7, #8]
 8019e0c:	1ad3      	subs	r3, r2, r3
 8019e0e:	617b      	str	r3, [r7, #20]
 8019e10:	693b      	ldr	r3, [r7, #16]
 8019e12:	3304      	adds	r3, #4
 8019e14:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019e16:	e7e9      	b.n	8019dec <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8019e18:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8019e1a:	693b      	ldr	r3, [r7, #16]
 8019e1c:	681a      	ldr	r2, [r3, #0]
 8019e1e:	697b      	ldr	r3, [r7, #20]
 8019e20:	4413      	add	r3, r2
}
 8019e22:	4618      	mov	r0, r3
 8019e24:	371c      	adds	r7, #28
 8019e26:	46bd      	mov	sp, r7
 8019e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e2c:	4770      	bx	lr

08019e2e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8019e2e:	b580      	push	{r7, lr}
 8019e30:	b086      	sub	sp, #24
 8019e32:	af00      	add	r7, sp, #0
 8019e34:	6078      	str	r0, [r7, #4]
 8019e36:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8019e3e:	683b      	ldr	r3, [r7, #0]
 8019e40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019e44:	d204      	bcs.n	8019e50 <dir_sdi+0x22>
 8019e46:	683b      	ldr	r3, [r7, #0]
 8019e48:	f003 031f 	and.w	r3, r3, #31
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d001      	beq.n	8019e54 <dir_sdi+0x26>
		return FR_INT_ERR;
 8019e50:	2302      	movs	r3, #2
 8019e52:	e063      	b.n	8019f1c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	683a      	ldr	r2, [r7, #0]
 8019e58:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	689b      	ldr	r3, [r3, #8]
 8019e5e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8019e60:	697b      	ldr	r3, [r7, #20]
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d106      	bne.n	8019e74 <dir_sdi+0x46>
 8019e66:	693b      	ldr	r3, [r7, #16]
 8019e68:	781b      	ldrb	r3, [r3, #0]
 8019e6a:	2b02      	cmp	r3, #2
 8019e6c:	d902      	bls.n	8019e74 <dir_sdi+0x46>
		clst = fs->dirbase;
 8019e6e:	693b      	ldr	r3, [r7, #16]
 8019e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e72:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8019e74:	697b      	ldr	r3, [r7, #20]
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d10c      	bne.n	8019e94 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	095b      	lsrs	r3, r3, #5
 8019e7e:	693a      	ldr	r2, [r7, #16]
 8019e80:	8912      	ldrh	r2, [r2, #8]
 8019e82:	4293      	cmp	r3, r2
 8019e84:	d301      	bcc.n	8019e8a <dir_sdi+0x5c>
 8019e86:	2302      	movs	r3, #2
 8019e88:	e048      	b.n	8019f1c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8019e8a:	693b      	ldr	r3, [r7, #16]
 8019e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	61da      	str	r2, [r3, #28]
 8019e92:	e029      	b.n	8019ee8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8019e94:	693b      	ldr	r3, [r7, #16]
 8019e96:	895b      	ldrh	r3, [r3, #10]
 8019e98:	025b      	lsls	r3, r3, #9
 8019e9a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019e9c:	e019      	b.n	8019ed2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6979      	ldr	r1, [r7, #20]
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f7ff fd01 	bl	80198aa <get_fat>
 8019ea8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019eaa:	697b      	ldr	r3, [r7, #20]
 8019eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019eb0:	d101      	bne.n	8019eb6 <dir_sdi+0x88>
 8019eb2:	2301      	movs	r3, #1
 8019eb4:	e032      	b.n	8019f1c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8019eb6:	697b      	ldr	r3, [r7, #20]
 8019eb8:	2b01      	cmp	r3, #1
 8019eba:	d904      	bls.n	8019ec6 <dir_sdi+0x98>
 8019ebc:	693b      	ldr	r3, [r7, #16]
 8019ebe:	699b      	ldr	r3, [r3, #24]
 8019ec0:	697a      	ldr	r2, [r7, #20]
 8019ec2:	429a      	cmp	r2, r3
 8019ec4:	d301      	bcc.n	8019eca <dir_sdi+0x9c>
 8019ec6:	2302      	movs	r3, #2
 8019ec8:	e028      	b.n	8019f1c <dir_sdi+0xee>
			ofs -= csz;
 8019eca:	683a      	ldr	r2, [r7, #0]
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	1ad3      	subs	r3, r2, r3
 8019ed0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019ed2:	683a      	ldr	r2, [r7, #0]
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	429a      	cmp	r2, r3
 8019ed8:	d2e1      	bcs.n	8019e9e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8019eda:	6979      	ldr	r1, [r7, #20]
 8019edc:	6938      	ldr	r0, [r7, #16]
 8019ede:	f7ff fcc5 	bl	801986c <clust2sect>
 8019ee2:	4602      	mov	r2, r0
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	697a      	ldr	r2, [r7, #20]
 8019eec:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	69db      	ldr	r3, [r3, #28]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d101      	bne.n	8019efa <dir_sdi+0xcc>
 8019ef6:	2302      	movs	r3, #2
 8019ef8:	e010      	b.n	8019f1c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	69da      	ldr	r2, [r3, #28]
 8019efe:	683b      	ldr	r3, [r7, #0]
 8019f00:	0a5b      	lsrs	r3, r3, #9
 8019f02:	441a      	add	r2, r3
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8019f08:	693b      	ldr	r3, [r7, #16]
 8019f0a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019f14:	441a      	add	r2, r3
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019f1a:	2300      	movs	r3, #0
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3718      	adds	r7, #24
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}

08019f24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b086      	sub	sp, #24
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	6078      	str	r0, [r7, #4]
 8019f2c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	695b      	ldr	r3, [r3, #20]
 8019f38:	3320      	adds	r3, #32
 8019f3a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	69db      	ldr	r3, [r3, #28]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d003      	beq.n	8019f4c <dir_next+0x28>
 8019f44:	68bb      	ldr	r3, [r7, #8]
 8019f46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019f4a:	d301      	bcc.n	8019f50 <dir_next+0x2c>
 8019f4c:	2304      	movs	r3, #4
 8019f4e:	e0aa      	b.n	801a0a6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8019f50:	68bb      	ldr	r3, [r7, #8]
 8019f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	f040 8098 	bne.w	801a08c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	69db      	ldr	r3, [r3, #28]
 8019f60:	1c5a      	adds	r2, r3, #1
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	699b      	ldr	r3, [r3, #24]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d10b      	bne.n	8019f86 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8019f6e:	68bb      	ldr	r3, [r7, #8]
 8019f70:	095b      	lsrs	r3, r3, #5
 8019f72:	68fa      	ldr	r2, [r7, #12]
 8019f74:	8912      	ldrh	r2, [r2, #8]
 8019f76:	4293      	cmp	r3, r2
 8019f78:	f0c0 8088 	bcc.w	801a08c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	2200      	movs	r2, #0
 8019f80:	61da      	str	r2, [r3, #28]
 8019f82:	2304      	movs	r3, #4
 8019f84:	e08f      	b.n	801a0a6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8019f86:	68bb      	ldr	r3, [r7, #8]
 8019f88:	0a5b      	lsrs	r3, r3, #9
 8019f8a:	68fa      	ldr	r2, [r7, #12]
 8019f8c:	8952      	ldrh	r2, [r2, #10]
 8019f8e:	3a01      	subs	r2, #1
 8019f90:	4013      	ands	r3, r2
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d17a      	bne.n	801a08c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8019f96:	687a      	ldr	r2, [r7, #4]
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	699b      	ldr	r3, [r3, #24]
 8019f9c:	4619      	mov	r1, r3
 8019f9e:	4610      	mov	r0, r2
 8019fa0:	f7ff fc83 	bl	80198aa <get_fat>
 8019fa4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	2b01      	cmp	r3, #1
 8019faa:	d801      	bhi.n	8019fb0 <dir_next+0x8c>
 8019fac:	2302      	movs	r3, #2
 8019fae:	e07a      	b.n	801a0a6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8019fb0:	697b      	ldr	r3, [r7, #20]
 8019fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fb6:	d101      	bne.n	8019fbc <dir_next+0x98>
 8019fb8:	2301      	movs	r3, #1
 8019fba:	e074      	b.n	801a0a6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	699b      	ldr	r3, [r3, #24]
 8019fc0:	697a      	ldr	r2, [r7, #20]
 8019fc2:	429a      	cmp	r2, r3
 8019fc4:	d358      	bcc.n	801a078 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8019fc6:	683b      	ldr	r3, [r7, #0]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d104      	bne.n	8019fd6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	2200      	movs	r2, #0
 8019fd0:	61da      	str	r2, [r3, #28]
 8019fd2:	2304      	movs	r3, #4
 8019fd4:	e067      	b.n	801a0a6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8019fd6:	687a      	ldr	r2, [r7, #4]
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	699b      	ldr	r3, [r3, #24]
 8019fdc:	4619      	mov	r1, r3
 8019fde:	4610      	mov	r0, r2
 8019fe0:	f7ff fe59 	bl	8019c96 <create_chain>
 8019fe4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8019fe6:	697b      	ldr	r3, [r7, #20]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d101      	bne.n	8019ff0 <dir_next+0xcc>
 8019fec:	2307      	movs	r3, #7
 8019fee:	e05a      	b.n	801a0a6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8019ff0:	697b      	ldr	r3, [r7, #20]
 8019ff2:	2b01      	cmp	r3, #1
 8019ff4:	d101      	bne.n	8019ffa <dir_next+0xd6>
 8019ff6:	2302      	movs	r3, #2
 8019ff8:	e055      	b.n	801a0a6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019ffa:	697b      	ldr	r3, [r7, #20]
 8019ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a000:	d101      	bne.n	801a006 <dir_next+0xe2>
 801a002:	2301      	movs	r3, #1
 801a004:	e04f      	b.n	801a0a6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801a006:	68f8      	ldr	r0, [r7, #12]
 801a008:	f7ff fb50 	bl	80196ac <sync_window>
 801a00c:	4603      	mov	r3, r0
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d001      	beq.n	801a016 <dir_next+0xf2>
 801a012:	2301      	movs	r3, #1
 801a014:	e047      	b.n	801a0a6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	3334      	adds	r3, #52	@ 0x34
 801a01a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a01e:	2100      	movs	r1, #0
 801a020:	4618      	mov	r0, r3
 801a022:	f7ff f97a 	bl	801931a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a026:	2300      	movs	r3, #0
 801a028:	613b      	str	r3, [r7, #16]
 801a02a:	6979      	ldr	r1, [r7, #20]
 801a02c:	68f8      	ldr	r0, [r7, #12]
 801a02e:	f7ff fc1d 	bl	801986c <clust2sect>
 801a032:	4602      	mov	r2, r0
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	631a      	str	r2, [r3, #48]	@ 0x30
 801a038:	e012      	b.n	801a060 <dir_next+0x13c>
						fs->wflag = 1;
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	2201      	movs	r2, #1
 801a03e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801a040:	68f8      	ldr	r0, [r7, #12]
 801a042:	f7ff fb33 	bl	80196ac <sync_window>
 801a046:	4603      	mov	r3, r0
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d001      	beq.n	801a050 <dir_next+0x12c>
 801a04c:	2301      	movs	r3, #1
 801a04e:	e02a      	b.n	801a0a6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a050:	693b      	ldr	r3, [r7, #16]
 801a052:	3301      	adds	r3, #1
 801a054:	613b      	str	r3, [r7, #16]
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a05a:	1c5a      	adds	r2, r3, #1
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	631a      	str	r2, [r3, #48]	@ 0x30
 801a060:	68fb      	ldr	r3, [r7, #12]
 801a062:	895b      	ldrh	r3, [r3, #10]
 801a064:	461a      	mov	r2, r3
 801a066:	693b      	ldr	r3, [r7, #16]
 801a068:	4293      	cmp	r3, r2
 801a06a:	d3e6      	bcc.n	801a03a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a070:	693b      	ldr	r3, [r7, #16]
 801a072:	1ad2      	subs	r2, r2, r3
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	697a      	ldr	r2, [r7, #20]
 801a07c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801a07e:	6979      	ldr	r1, [r7, #20]
 801a080:	68f8      	ldr	r0, [r7, #12]
 801a082:	f7ff fbf3 	bl	801986c <clust2sect>
 801a086:	4602      	mov	r2, r0
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	68ba      	ldr	r2, [r7, #8]
 801a090:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801a098:	68bb      	ldr	r3, [r7, #8]
 801a09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a09e:	441a      	add	r2, r3
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801a0a4:	2300      	movs	r3, #0
}
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	3718      	adds	r7, #24
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	bd80      	pop	{r7, pc}

0801a0ae <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801a0ae:	b580      	push	{r7, lr}
 801a0b0:	b086      	sub	sp, #24
 801a0b2:	af00      	add	r7, sp, #0
 801a0b4:	6078      	str	r0, [r7, #4]
 801a0b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801a0be:	2100      	movs	r1, #0
 801a0c0:	6878      	ldr	r0, [r7, #4]
 801a0c2:	f7ff feb4 	bl	8019e2e <dir_sdi>
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a0ca:	7dfb      	ldrb	r3, [r7, #23]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d12b      	bne.n	801a128 <dir_alloc+0x7a>
		n = 0;
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	69db      	ldr	r3, [r3, #28]
 801a0d8:	4619      	mov	r1, r3
 801a0da:	68f8      	ldr	r0, [r7, #12]
 801a0dc:	f7ff fb2a 	bl	8019734 <move_window>
 801a0e0:	4603      	mov	r3, r0
 801a0e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a0e4:	7dfb      	ldrb	r3, [r7, #23]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d11d      	bne.n	801a126 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	6a1b      	ldr	r3, [r3, #32]
 801a0ee:	781b      	ldrb	r3, [r3, #0]
 801a0f0:	2be5      	cmp	r3, #229	@ 0xe5
 801a0f2:	d004      	beq.n	801a0fe <dir_alloc+0x50>
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	6a1b      	ldr	r3, [r3, #32]
 801a0f8:	781b      	ldrb	r3, [r3, #0]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d107      	bne.n	801a10e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801a0fe:	693b      	ldr	r3, [r7, #16]
 801a100:	3301      	adds	r3, #1
 801a102:	613b      	str	r3, [r7, #16]
 801a104:	693a      	ldr	r2, [r7, #16]
 801a106:	683b      	ldr	r3, [r7, #0]
 801a108:	429a      	cmp	r2, r3
 801a10a:	d102      	bne.n	801a112 <dir_alloc+0x64>
 801a10c:	e00c      	b.n	801a128 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801a10e:	2300      	movs	r3, #0
 801a110:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801a112:	2101      	movs	r1, #1
 801a114:	6878      	ldr	r0, [r7, #4]
 801a116:	f7ff ff05 	bl	8019f24 <dir_next>
 801a11a:	4603      	mov	r3, r0
 801a11c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801a11e:	7dfb      	ldrb	r3, [r7, #23]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d0d7      	beq.n	801a0d4 <dir_alloc+0x26>
 801a124:	e000      	b.n	801a128 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801a126:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801a128:	7dfb      	ldrb	r3, [r7, #23]
 801a12a:	2b04      	cmp	r3, #4
 801a12c:	d101      	bne.n	801a132 <dir_alloc+0x84>
 801a12e:	2307      	movs	r3, #7
 801a130:	75fb      	strb	r3, [r7, #23]
	return res;
 801a132:	7dfb      	ldrb	r3, [r7, #23]
}
 801a134:	4618      	mov	r0, r3
 801a136:	3718      	adds	r7, #24
 801a138:	46bd      	mov	sp, r7
 801a13a:	bd80      	pop	{r7, pc}

0801a13c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b084      	sub	sp, #16
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
 801a144:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801a146:	683b      	ldr	r3, [r7, #0]
 801a148:	331a      	adds	r3, #26
 801a14a:	4618      	mov	r0, r3
 801a14c:	f7ff f842 	bl	80191d4 <ld_word>
 801a150:	4603      	mov	r3, r0
 801a152:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	781b      	ldrb	r3, [r3, #0]
 801a158:	2b03      	cmp	r3, #3
 801a15a:	d109      	bne.n	801a170 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	3314      	adds	r3, #20
 801a160:	4618      	mov	r0, r3
 801a162:	f7ff f837 	bl	80191d4 <ld_word>
 801a166:	4603      	mov	r3, r0
 801a168:	041b      	lsls	r3, r3, #16
 801a16a:	68fa      	ldr	r2, [r7, #12]
 801a16c:	4313      	orrs	r3, r2
 801a16e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801a170:	68fb      	ldr	r3, [r7, #12]
}
 801a172:	4618      	mov	r0, r3
 801a174:	3710      	adds	r7, #16
 801a176:	46bd      	mov	sp, r7
 801a178:	bd80      	pop	{r7, pc}

0801a17a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801a17a:	b580      	push	{r7, lr}
 801a17c:	b084      	sub	sp, #16
 801a17e:	af00      	add	r7, sp, #0
 801a180:	60f8      	str	r0, [r7, #12]
 801a182:	60b9      	str	r1, [r7, #8]
 801a184:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801a186:	68bb      	ldr	r3, [r7, #8]
 801a188:	331a      	adds	r3, #26
 801a18a:	687a      	ldr	r2, [r7, #4]
 801a18c:	b292      	uxth	r2, r2
 801a18e:	4611      	mov	r1, r2
 801a190:	4618      	mov	r0, r3
 801a192:	f7ff f85a 	bl	801924a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	781b      	ldrb	r3, [r3, #0]
 801a19a:	2b03      	cmp	r3, #3
 801a19c:	d109      	bne.n	801a1b2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801a19e:	68bb      	ldr	r3, [r7, #8]
 801a1a0:	f103 0214 	add.w	r2, r3, #20
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	0c1b      	lsrs	r3, r3, #16
 801a1a8:	b29b      	uxth	r3, r3
 801a1aa:	4619      	mov	r1, r3
 801a1ac:	4610      	mov	r0, r2
 801a1ae:	f7ff f84c 	bl	801924a <st_word>
	}
}
 801a1b2:	bf00      	nop
 801a1b4:	3710      	adds	r7, #16
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	bd80      	pop	{r7, pc}
	...

0801a1bc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801a1bc:	b590      	push	{r4, r7, lr}
 801a1be:	b087      	sub	sp, #28
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]
 801a1c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801a1c6:	683b      	ldr	r3, [r7, #0]
 801a1c8:	331a      	adds	r3, #26
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f7ff f802 	bl	80191d4 <ld_word>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d001      	beq.n	801a1da <cmp_lfn+0x1e>
 801a1d6:	2300      	movs	r3, #0
 801a1d8:	e059      	b.n	801a28e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801a1da:	683b      	ldr	r3, [r7, #0]
 801a1dc:	781b      	ldrb	r3, [r3, #0]
 801a1de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a1e2:	1e5a      	subs	r2, r3, #1
 801a1e4:	4613      	mov	r3, r2
 801a1e6:	005b      	lsls	r3, r3, #1
 801a1e8:	4413      	add	r3, r2
 801a1ea:	009b      	lsls	r3, r3, #2
 801a1ec:	4413      	add	r3, r2
 801a1ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	81fb      	strh	r3, [r7, #14]
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	613b      	str	r3, [r7, #16]
 801a1f8:	e033      	b.n	801a262 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a1fa:	4a27      	ldr	r2, [pc, #156]	@ (801a298 <cmp_lfn+0xdc>)
 801a1fc:	693b      	ldr	r3, [r7, #16]
 801a1fe:	4413      	add	r3, r2
 801a200:	781b      	ldrb	r3, [r3, #0]
 801a202:	461a      	mov	r2, r3
 801a204:	683b      	ldr	r3, [r7, #0]
 801a206:	4413      	add	r3, r2
 801a208:	4618      	mov	r0, r3
 801a20a:	f7fe ffe3 	bl	80191d4 <ld_word>
 801a20e:	4603      	mov	r3, r0
 801a210:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a212:	89fb      	ldrh	r3, [r7, #14]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d01a      	beq.n	801a24e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801a218:	697b      	ldr	r3, [r7, #20]
 801a21a:	2bfe      	cmp	r3, #254	@ 0xfe
 801a21c:	d812      	bhi.n	801a244 <cmp_lfn+0x88>
 801a21e:	89bb      	ldrh	r3, [r7, #12]
 801a220:	4618      	mov	r0, r3
 801a222:	f001 fe21 	bl	801be68 <ff_wtoupper>
 801a226:	4603      	mov	r3, r0
 801a228:	461c      	mov	r4, r3
 801a22a:	697b      	ldr	r3, [r7, #20]
 801a22c:	1c5a      	adds	r2, r3, #1
 801a22e:	617a      	str	r2, [r7, #20]
 801a230:	005b      	lsls	r3, r3, #1
 801a232:	687a      	ldr	r2, [r7, #4]
 801a234:	4413      	add	r3, r2
 801a236:	881b      	ldrh	r3, [r3, #0]
 801a238:	4618      	mov	r0, r3
 801a23a:	f001 fe15 	bl	801be68 <ff_wtoupper>
 801a23e:	4603      	mov	r3, r0
 801a240:	429c      	cmp	r4, r3
 801a242:	d001      	beq.n	801a248 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801a244:	2300      	movs	r3, #0
 801a246:	e022      	b.n	801a28e <cmp_lfn+0xd2>
			}
			wc = uc;
 801a248:	89bb      	ldrh	r3, [r7, #12]
 801a24a:	81fb      	strh	r3, [r7, #14]
 801a24c:	e006      	b.n	801a25c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a24e:	89bb      	ldrh	r3, [r7, #12]
 801a250:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a254:	4293      	cmp	r3, r2
 801a256:	d001      	beq.n	801a25c <cmp_lfn+0xa0>
 801a258:	2300      	movs	r3, #0
 801a25a:	e018      	b.n	801a28e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a25c:	693b      	ldr	r3, [r7, #16]
 801a25e:	3301      	adds	r3, #1
 801a260:	613b      	str	r3, [r7, #16]
 801a262:	693b      	ldr	r3, [r7, #16]
 801a264:	2b0c      	cmp	r3, #12
 801a266:	d9c8      	bls.n	801a1fa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801a268:	683b      	ldr	r3, [r7, #0]
 801a26a:	781b      	ldrb	r3, [r3, #0]
 801a26c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a270:	2b00      	cmp	r3, #0
 801a272:	d00b      	beq.n	801a28c <cmp_lfn+0xd0>
 801a274:	89fb      	ldrh	r3, [r7, #14]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d008      	beq.n	801a28c <cmp_lfn+0xd0>
 801a27a:	697b      	ldr	r3, [r7, #20]
 801a27c:	005b      	lsls	r3, r3, #1
 801a27e:	687a      	ldr	r2, [r7, #4]
 801a280:	4413      	add	r3, r2
 801a282:	881b      	ldrh	r3, [r3, #0]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d001      	beq.n	801a28c <cmp_lfn+0xd0>
 801a288:	2300      	movs	r3, #0
 801a28a:	e000      	b.n	801a28e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801a28c:	2301      	movs	r3, #1
}
 801a28e:	4618      	mov	r0, r3
 801a290:	371c      	adds	r7, #28
 801a292:	46bd      	mov	sp, r7
 801a294:	bd90      	pop	{r4, r7, pc}
 801a296:	bf00      	nop
 801a298:	08024f58 	.word	0x08024f58

0801a29c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b088      	sub	sp, #32
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	60f8      	str	r0, [r7, #12]
 801a2a4:	60b9      	str	r1, [r7, #8]
 801a2a6:	4611      	mov	r1, r2
 801a2a8:	461a      	mov	r2, r3
 801a2aa:	460b      	mov	r3, r1
 801a2ac:	71fb      	strb	r3, [r7, #7]
 801a2ae:	4613      	mov	r3, r2
 801a2b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801a2b2:	68bb      	ldr	r3, [r7, #8]
 801a2b4:	330d      	adds	r3, #13
 801a2b6:	79ba      	ldrb	r2, [r7, #6]
 801a2b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801a2ba:	68bb      	ldr	r3, [r7, #8]
 801a2bc:	330b      	adds	r3, #11
 801a2be:	220f      	movs	r2, #15
 801a2c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801a2c2:	68bb      	ldr	r3, [r7, #8]
 801a2c4:	330c      	adds	r3, #12
 801a2c6:	2200      	movs	r2, #0
 801a2c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801a2ca:	68bb      	ldr	r3, [r7, #8]
 801a2cc:	331a      	adds	r3, #26
 801a2ce:	2100      	movs	r1, #0
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	f7fe ffba 	bl	801924a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801a2d6:	79fb      	ldrb	r3, [r7, #7]
 801a2d8:	1e5a      	subs	r2, r3, #1
 801a2da:	4613      	mov	r3, r2
 801a2dc:	005b      	lsls	r3, r3, #1
 801a2de:	4413      	add	r3, r2
 801a2e0:	009b      	lsls	r3, r3, #2
 801a2e2:	4413      	add	r3, r2
 801a2e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	82fb      	strh	r3, [r7, #22]
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801a2ee:	8afb      	ldrh	r3, [r7, #22]
 801a2f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a2f4:	4293      	cmp	r3, r2
 801a2f6:	d007      	beq.n	801a308 <put_lfn+0x6c>
 801a2f8:	69fb      	ldr	r3, [r7, #28]
 801a2fa:	1c5a      	adds	r2, r3, #1
 801a2fc:	61fa      	str	r2, [r7, #28]
 801a2fe:	005b      	lsls	r3, r3, #1
 801a300:	68fa      	ldr	r2, [r7, #12]
 801a302:	4413      	add	r3, r2
 801a304:	881b      	ldrh	r3, [r3, #0]
 801a306:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801a308:	4a17      	ldr	r2, [pc, #92]	@ (801a368 <put_lfn+0xcc>)
 801a30a:	69bb      	ldr	r3, [r7, #24]
 801a30c:	4413      	add	r3, r2
 801a30e:	781b      	ldrb	r3, [r3, #0]
 801a310:	461a      	mov	r2, r3
 801a312:	68bb      	ldr	r3, [r7, #8]
 801a314:	4413      	add	r3, r2
 801a316:	8afa      	ldrh	r2, [r7, #22]
 801a318:	4611      	mov	r1, r2
 801a31a:	4618      	mov	r0, r3
 801a31c:	f7fe ff95 	bl	801924a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801a320:	8afb      	ldrh	r3, [r7, #22]
 801a322:	2b00      	cmp	r3, #0
 801a324:	d102      	bne.n	801a32c <put_lfn+0x90>
 801a326:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a32a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801a32c:	69bb      	ldr	r3, [r7, #24]
 801a32e:	3301      	adds	r3, #1
 801a330:	61bb      	str	r3, [r7, #24]
 801a332:	69bb      	ldr	r3, [r7, #24]
 801a334:	2b0c      	cmp	r3, #12
 801a336:	d9da      	bls.n	801a2ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801a338:	8afb      	ldrh	r3, [r7, #22]
 801a33a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a33e:	4293      	cmp	r3, r2
 801a340:	d006      	beq.n	801a350 <put_lfn+0xb4>
 801a342:	69fb      	ldr	r3, [r7, #28]
 801a344:	005b      	lsls	r3, r3, #1
 801a346:	68fa      	ldr	r2, [r7, #12]
 801a348:	4413      	add	r3, r2
 801a34a:	881b      	ldrh	r3, [r3, #0]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d103      	bne.n	801a358 <put_lfn+0xbc>
 801a350:	79fb      	ldrb	r3, [r7, #7]
 801a352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a356:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801a358:	68bb      	ldr	r3, [r7, #8]
 801a35a:	79fa      	ldrb	r2, [r7, #7]
 801a35c:	701a      	strb	r2, [r3, #0]
}
 801a35e:	bf00      	nop
 801a360:	3720      	adds	r7, #32
 801a362:	46bd      	mov	sp, r7
 801a364:	bd80      	pop	{r7, pc}
 801a366:	bf00      	nop
 801a368:	08024f58 	.word	0x08024f58

0801a36c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	b08c      	sub	sp, #48	@ 0x30
 801a370:	af00      	add	r7, sp, #0
 801a372:	60f8      	str	r0, [r7, #12]
 801a374:	60b9      	str	r1, [r7, #8]
 801a376:	607a      	str	r2, [r7, #4]
 801a378:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801a37a:	220b      	movs	r2, #11
 801a37c:	68b9      	ldr	r1, [r7, #8]
 801a37e:	68f8      	ldr	r0, [r7, #12]
 801a380:	f7fe ffaa 	bl	80192d8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801a384:	683b      	ldr	r3, [r7, #0]
 801a386:	2b05      	cmp	r3, #5
 801a388:	d92b      	bls.n	801a3e2 <gen_numname+0x76>
		sr = seq;
 801a38a:	683b      	ldr	r3, [r7, #0]
 801a38c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801a38e:	e022      	b.n	801a3d6 <gen_numname+0x6a>
			wc = *lfn++;
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	1c9a      	adds	r2, r3, #2
 801a394:	607a      	str	r2, [r7, #4]
 801a396:	881b      	ldrh	r3, [r3, #0]
 801a398:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801a39a:	2300      	movs	r3, #0
 801a39c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a39e:	e017      	b.n	801a3d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801a3a0:	69fb      	ldr	r3, [r7, #28]
 801a3a2:	005a      	lsls	r2, r3, #1
 801a3a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a3a6:	f003 0301 	and.w	r3, r3, #1
 801a3aa:	4413      	add	r3, r2
 801a3ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801a3ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a3b0:	085b      	lsrs	r3, r3, #1
 801a3b2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801a3b4:	69fb      	ldr	r3, [r7, #28]
 801a3b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d005      	beq.n	801a3ca <gen_numname+0x5e>
 801a3be:	69fb      	ldr	r3, [r7, #28]
 801a3c0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 801a3c4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 801a3c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801a3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3cc:	3301      	adds	r3, #1
 801a3ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3d2:	2b0f      	cmp	r3, #15
 801a3d4:	d9e4      	bls.n	801a3a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	881b      	ldrh	r3, [r3, #0]
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d1d8      	bne.n	801a390 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801a3de:	69fb      	ldr	r3, [r7, #28]
 801a3e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801a3e2:	2307      	movs	r3, #7
 801a3e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801a3e6:	683b      	ldr	r3, [r7, #0]
 801a3e8:	b2db      	uxtb	r3, r3
 801a3ea:	f003 030f 	and.w	r3, r3, #15
 801a3ee:	b2db      	uxtb	r3, r3
 801a3f0:	3330      	adds	r3, #48	@ 0x30
 801a3f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801a3f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a3fa:	2b39      	cmp	r3, #57	@ 0x39
 801a3fc:	d904      	bls.n	801a408 <gen_numname+0x9c>
 801a3fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a402:	3307      	adds	r3, #7
 801a404:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801a408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a40a:	1e5a      	subs	r2, r3, #1
 801a40c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a40e:	3330      	adds	r3, #48	@ 0x30
 801a410:	443b      	add	r3, r7
 801a412:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801a416:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801a41a:	683b      	ldr	r3, [r7, #0]
 801a41c:	091b      	lsrs	r3, r3, #4
 801a41e:	603b      	str	r3, [r7, #0]
	} while (seq);
 801a420:	683b      	ldr	r3, [r7, #0]
 801a422:	2b00      	cmp	r3, #0
 801a424:	d1df      	bne.n	801a3e6 <gen_numname+0x7a>
	ns[i] = '~';
 801a426:	f107 0214 	add.w	r2, r7, #20
 801a42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a42c:	4413      	add	r3, r2
 801a42e:	227e      	movs	r2, #126	@ 0x7e
 801a430:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801a432:	2300      	movs	r3, #0
 801a434:	627b      	str	r3, [r7, #36]	@ 0x24
 801a436:	e002      	b.n	801a43e <gen_numname+0xd2>
 801a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a43a:	3301      	adds	r3, #1
 801a43c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a442:	429a      	cmp	r2, r3
 801a444:	d205      	bcs.n	801a452 <gen_numname+0xe6>
 801a446:	68fa      	ldr	r2, [r7, #12]
 801a448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a44a:	4413      	add	r3, r2
 801a44c:	781b      	ldrb	r3, [r3, #0]
 801a44e:	2b20      	cmp	r3, #32
 801a450:	d1f2      	bne.n	801a438 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801a452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a454:	2b07      	cmp	r3, #7
 801a456:	d807      	bhi.n	801a468 <gen_numname+0xfc>
 801a458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a45a:	1c5a      	adds	r2, r3, #1
 801a45c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a45e:	3330      	adds	r3, #48	@ 0x30
 801a460:	443b      	add	r3, r7
 801a462:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801a466:	e000      	b.n	801a46a <gen_numname+0xfe>
 801a468:	2120      	movs	r1, #32
 801a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a46c:	1c5a      	adds	r2, r3, #1
 801a46e:	627a      	str	r2, [r7, #36]	@ 0x24
 801a470:	68fa      	ldr	r2, [r7, #12]
 801a472:	4413      	add	r3, r2
 801a474:	460a      	mov	r2, r1
 801a476:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801a478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a47a:	2b07      	cmp	r3, #7
 801a47c:	d9e9      	bls.n	801a452 <gen_numname+0xe6>
}
 801a47e:	bf00      	nop
 801a480:	bf00      	nop
 801a482:	3730      	adds	r7, #48	@ 0x30
 801a484:	46bd      	mov	sp, r7
 801a486:	bd80      	pop	{r7, pc}

0801a488 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801a488:	b480      	push	{r7}
 801a48a:	b085      	sub	sp, #20
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801a490:	2300      	movs	r3, #0
 801a492:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801a494:	230b      	movs	r3, #11
 801a496:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a498:	7bfb      	ldrb	r3, [r7, #15]
 801a49a:	b2da      	uxtb	r2, r3
 801a49c:	0852      	lsrs	r2, r2, #1
 801a49e:	01db      	lsls	r3, r3, #7
 801a4a0:	4313      	orrs	r3, r2
 801a4a2:	b2da      	uxtb	r2, r3
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	1c59      	adds	r1, r3, #1
 801a4a8:	6079      	str	r1, [r7, #4]
 801a4aa:	781b      	ldrb	r3, [r3, #0]
 801a4ac:	4413      	add	r3, r2
 801a4ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801a4b0:	68bb      	ldr	r3, [r7, #8]
 801a4b2:	3b01      	subs	r3, #1
 801a4b4:	60bb      	str	r3, [r7, #8]
 801a4b6:	68bb      	ldr	r3, [r7, #8]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d1ed      	bne.n	801a498 <sum_sfn+0x10>
	return sum;
 801a4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 801a4be:	4618      	mov	r0, r3
 801a4c0:	3714      	adds	r7, #20
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c8:	4770      	bx	lr

0801a4ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801a4ca:	b580      	push	{r7, lr}
 801a4cc:	b086      	sub	sp, #24
 801a4ce:	af00      	add	r7, sp, #0
 801a4d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801a4d8:	2100      	movs	r1, #0
 801a4da:	6878      	ldr	r0, [r7, #4]
 801a4dc:	f7ff fca7 	bl	8019e2e <dir_sdi>
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801a4e4:	7dfb      	ldrb	r3, [r7, #23]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d001      	beq.n	801a4ee <dir_find+0x24>
 801a4ea:	7dfb      	ldrb	r3, [r7, #23]
 801a4ec:	e0a9      	b.n	801a642 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a4ee:	23ff      	movs	r3, #255	@ 0xff
 801a4f0:	753b      	strb	r3, [r7, #20]
 801a4f2:	7d3b      	ldrb	r3, [r7, #20]
 801a4f4:	757b      	strb	r3, [r7, #21]
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	f04f 32ff 	mov.w	r2, #4294967295
 801a4fc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	69db      	ldr	r3, [r3, #28]
 801a502:	4619      	mov	r1, r3
 801a504:	6938      	ldr	r0, [r7, #16]
 801a506:	f7ff f915 	bl	8019734 <move_window>
 801a50a:	4603      	mov	r3, r0
 801a50c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801a50e:	7dfb      	ldrb	r3, [r7, #23]
 801a510:	2b00      	cmp	r3, #0
 801a512:	f040 8090 	bne.w	801a636 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	6a1b      	ldr	r3, [r3, #32]
 801a51a:	781b      	ldrb	r3, [r3, #0]
 801a51c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a51e:	7dbb      	ldrb	r3, [r7, #22]
 801a520:	2b00      	cmp	r3, #0
 801a522:	d102      	bne.n	801a52a <dir_find+0x60>
 801a524:	2304      	movs	r3, #4
 801a526:	75fb      	strb	r3, [r7, #23]
 801a528:	e08a      	b.n	801a640 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	6a1b      	ldr	r3, [r3, #32]
 801a52e:	330b      	adds	r3, #11
 801a530:	781b      	ldrb	r3, [r3, #0]
 801a532:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a536:	73fb      	strb	r3, [r7, #15]
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	7bfa      	ldrb	r2, [r7, #15]
 801a53c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801a53e:	7dbb      	ldrb	r3, [r7, #22]
 801a540:	2be5      	cmp	r3, #229	@ 0xe5
 801a542:	d007      	beq.n	801a554 <dir_find+0x8a>
 801a544:	7bfb      	ldrb	r3, [r7, #15]
 801a546:	f003 0308 	and.w	r3, r3, #8
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d009      	beq.n	801a562 <dir_find+0x98>
 801a54e:	7bfb      	ldrb	r3, [r7, #15]
 801a550:	2b0f      	cmp	r3, #15
 801a552:	d006      	beq.n	801a562 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a554:	23ff      	movs	r3, #255	@ 0xff
 801a556:	757b      	strb	r3, [r7, #21]
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	f04f 32ff 	mov.w	r2, #4294967295
 801a55e:	631a      	str	r2, [r3, #48]	@ 0x30
 801a560:	e05e      	b.n	801a620 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801a562:	7bfb      	ldrb	r3, [r7, #15]
 801a564:	2b0f      	cmp	r3, #15
 801a566:	d136      	bne.n	801a5d6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a56e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a572:	2b00      	cmp	r3, #0
 801a574:	d154      	bne.n	801a620 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801a576:	7dbb      	ldrb	r3, [r7, #22]
 801a578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d00d      	beq.n	801a59c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	6a1b      	ldr	r3, [r3, #32]
 801a584:	7b5b      	ldrb	r3, [r3, #13]
 801a586:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801a588:	7dbb      	ldrb	r3, [r7, #22]
 801a58a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a58e:	75bb      	strb	r3, [r7, #22]
 801a590:	7dbb      	ldrb	r3, [r7, #22]
 801a592:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	695a      	ldr	r2, [r3, #20]
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a59c:	7dba      	ldrb	r2, [r7, #22]
 801a59e:	7d7b      	ldrb	r3, [r7, #21]
 801a5a0:	429a      	cmp	r2, r3
 801a5a2:	d115      	bne.n	801a5d0 <dir_find+0x106>
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	6a1b      	ldr	r3, [r3, #32]
 801a5a8:	330d      	adds	r3, #13
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	7d3a      	ldrb	r2, [r7, #20]
 801a5ae:	429a      	cmp	r2, r3
 801a5b0:	d10e      	bne.n	801a5d0 <dir_find+0x106>
 801a5b2:	693b      	ldr	r3, [r7, #16]
 801a5b4:	68da      	ldr	r2, [r3, #12]
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	6a1b      	ldr	r3, [r3, #32]
 801a5ba:	4619      	mov	r1, r3
 801a5bc:	4610      	mov	r0, r2
 801a5be:	f7ff fdfd 	bl	801a1bc <cmp_lfn>
 801a5c2:	4603      	mov	r3, r0
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d003      	beq.n	801a5d0 <dir_find+0x106>
 801a5c8:	7d7b      	ldrb	r3, [r7, #21]
 801a5ca:	3b01      	subs	r3, #1
 801a5cc:	b2db      	uxtb	r3, r3
 801a5ce:	e000      	b.n	801a5d2 <dir_find+0x108>
 801a5d0:	23ff      	movs	r3, #255	@ 0xff
 801a5d2:	757b      	strb	r3, [r7, #21]
 801a5d4:	e024      	b.n	801a620 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a5d6:	7d7b      	ldrb	r3, [r7, #21]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d109      	bne.n	801a5f0 <dir_find+0x126>
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	6a1b      	ldr	r3, [r3, #32]
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	f7ff ff51 	bl	801a488 <sum_sfn>
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	461a      	mov	r2, r3
 801a5ea:	7d3b      	ldrb	r3, [r7, #20]
 801a5ec:	4293      	cmp	r3, r2
 801a5ee:	d024      	beq.n	801a63a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a5f6:	f003 0301 	and.w	r3, r3, #1
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d10a      	bne.n	801a614 <dir_find+0x14a>
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	6a18      	ldr	r0, [r3, #32]
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	3324      	adds	r3, #36	@ 0x24
 801a606:	220b      	movs	r2, #11
 801a608:	4619      	mov	r1, r3
 801a60a:	f7fe fea1 	bl	8019350 <mem_cmp>
 801a60e:	4603      	mov	r3, r0
 801a610:	2b00      	cmp	r3, #0
 801a612:	d014      	beq.n	801a63e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a614:	23ff      	movs	r3, #255	@ 0xff
 801a616:	757b      	strb	r3, [r7, #21]
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	f04f 32ff 	mov.w	r2, #4294967295
 801a61e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801a620:	2100      	movs	r1, #0
 801a622:	6878      	ldr	r0, [r7, #4]
 801a624:	f7ff fc7e 	bl	8019f24 <dir_next>
 801a628:	4603      	mov	r3, r0
 801a62a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801a62c:	7dfb      	ldrb	r3, [r7, #23]
 801a62e:	2b00      	cmp	r3, #0
 801a630:	f43f af65 	beq.w	801a4fe <dir_find+0x34>
 801a634:	e004      	b.n	801a640 <dir_find+0x176>
		if (res != FR_OK) break;
 801a636:	bf00      	nop
 801a638:	e002      	b.n	801a640 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a63a:	bf00      	nop
 801a63c:	e000      	b.n	801a640 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a63e:	bf00      	nop

	return res;
 801a640:	7dfb      	ldrb	r3, [r7, #23]
}
 801a642:	4618      	mov	r0, r3
 801a644:	3718      	adds	r7, #24
 801a646:	46bd      	mov	sp, r7
 801a648:	bd80      	pop	{r7, pc}
	...

0801a64c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	b08c      	sub	sp, #48	@ 0x30
 801a650:	af00      	add	r7, sp, #0
 801a652:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a660:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801a664:	2b00      	cmp	r3, #0
 801a666:	d001      	beq.n	801a66c <dir_register+0x20>
 801a668:	2306      	movs	r3, #6
 801a66a:	e0e0      	b.n	801a82e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801a66c:	2300      	movs	r3, #0
 801a66e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a670:	e002      	b.n	801a678 <dir_register+0x2c>
 801a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a674:	3301      	adds	r3, #1
 801a676:	627b      	str	r3, [r7, #36]	@ 0x24
 801a678:	69fb      	ldr	r3, [r7, #28]
 801a67a:	68da      	ldr	r2, [r3, #12]
 801a67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a67e:	005b      	lsls	r3, r3, #1
 801a680:	4413      	add	r3, r2
 801a682:	881b      	ldrh	r3, [r3, #0]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d1f4      	bne.n	801a672 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801a68e:	f107 030c 	add.w	r3, r7, #12
 801a692:	220c      	movs	r2, #12
 801a694:	4618      	mov	r0, r3
 801a696:	f7fe fe1f 	bl	80192d8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801a69a:	7dfb      	ldrb	r3, [r7, #23]
 801a69c:	f003 0301 	and.w	r3, r3, #1
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d032      	beq.n	801a70a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	2240      	movs	r2, #64	@ 0x40
 801a6a8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801a6ac:	2301      	movs	r3, #1
 801a6ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a6b0:	e016      	b.n	801a6e0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801a6b8:	69fb      	ldr	r3, [r7, #28]
 801a6ba:	68da      	ldr	r2, [r3, #12]
 801a6bc:	f107 010c 	add.w	r1, r7, #12
 801a6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6c2:	f7ff fe53 	bl	801a36c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801a6c6:	6878      	ldr	r0, [r7, #4]
 801a6c8:	f7ff feff 	bl	801a4ca <dir_find>
 801a6cc:	4603      	mov	r3, r0
 801a6ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801a6d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d106      	bne.n	801a6e8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801a6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6dc:	3301      	adds	r3, #1
 801a6de:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6e2:	2b63      	cmp	r3, #99	@ 0x63
 801a6e4:	d9e5      	bls.n	801a6b2 <dir_register+0x66>
 801a6e6:	e000      	b.n	801a6ea <dir_register+0x9e>
			if (res != FR_OK) break;
 801a6e8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801a6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6ec:	2b64      	cmp	r3, #100	@ 0x64
 801a6ee:	d101      	bne.n	801a6f4 <dir_register+0xa8>
 801a6f0:	2307      	movs	r3, #7
 801a6f2:	e09c      	b.n	801a82e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801a6f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a6f8:	2b04      	cmp	r3, #4
 801a6fa:	d002      	beq.n	801a702 <dir_register+0xb6>
 801a6fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a700:	e095      	b.n	801a82e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801a702:	7dfa      	ldrb	r2, [r7, #23]
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801a70a:	7dfb      	ldrb	r3, [r7, #23]
 801a70c:	f003 0302 	and.w	r3, r3, #2
 801a710:	2b00      	cmp	r3, #0
 801a712:	d007      	beq.n	801a724 <dir_register+0xd8>
 801a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a716:	330c      	adds	r3, #12
 801a718:	4a47      	ldr	r2, [pc, #284]	@ (801a838 <dir_register+0x1ec>)
 801a71a:	fba2 2303 	umull	r2, r3, r2, r3
 801a71e:	089b      	lsrs	r3, r3, #2
 801a720:	3301      	adds	r3, #1
 801a722:	e000      	b.n	801a726 <dir_register+0xda>
 801a724:	2301      	movs	r3, #1
 801a726:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801a728:	6a39      	ldr	r1, [r7, #32]
 801a72a:	6878      	ldr	r0, [r7, #4]
 801a72c:	f7ff fcbf 	bl	801a0ae <dir_alloc>
 801a730:	4603      	mov	r3, r0
 801a732:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801a736:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d148      	bne.n	801a7d0 <dir_register+0x184>
 801a73e:	6a3b      	ldr	r3, [r7, #32]
 801a740:	3b01      	subs	r3, #1
 801a742:	623b      	str	r3, [r7, #32]
 801a744:	6a3b      	ldr	r3, [r7, #32]
 801a746:	2b00      	cmp	r3, #0
 801a748:	d042      	beq.n	801a7d0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	695a      	ldr	r2, [r3, #20]
 801a74e:	6a3b      	ldr	r3, [r7, #32]
 801a750:	015b      	lsls	r3, r3, #5
 801a752:	1ad3      	subs	r3, r2, r3
 801a754:	4619      	mov	r1, r3
 801a756:	6878      	ldr	r0, [r7, #4]
 801a758:	f7ff fb69 	bl	8019e2e <dir_sdi>
 801a75c:	4603      	mov	r3, r0
 801a75e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a762:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a766:	2b00      	cmp	r3, #0
 801a768:	d132      	bne.n	801a7d0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	3324      	adds	r3, #36	@ 0x24
 801a76e:	4618      	mov	r0, r3
 801a770:	f7ff fe8a 	bl	801a488 <sum_sfn>
 801a774:	4603      	mov	r3, r0
 801a776:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	69db      	ldr	r3, [r3, #28]
 801a77c:	4619      	mov	r1, r3
 801a77e:	69f8      	ldr	r0, [r7, #28]
 801a780:	f7fe ffd8 	bl	8019734 <move_window>
 801a784:	4603      	mov	r3, r0
 801a786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801a78a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d11d      	bne.n	801a7ce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801a792:	69fb      	ldr	r3, [r7, #28]
 801a794:	68d8      	ldr	r0, [r3, #12]
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	6a19      	ldr	r1, [r3, #32]
 801a79a:	6a3b      	ldr	r3, [r7, #32]
 801a79c:	b2da      	uxtb	r2, r3
 801a79e:	7efb      	ldrb	r3, [r7, #27]
 801a7a0:	f7ff fd7c 	bl	801a29c <put_lfn>
				fs->wflag = 1;
 801a7a4:	69fb      	ldr	r3, [r7, #28]
 801a7a6:	2201      	movs	r2, #1
 801a7a8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801a7aa:	2100      	movs	r1, #0
 801a7ac:	6878      	ldr	r0, [r7, #4]
 801a7ae:	f7ff fbb9 	bl	8019f24 <dir_next>
 801a7b2:	4603      	mov	r3, r0
 801a7b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801a7b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d107      	bne.n	801a7d0 <dir_register+0x184>
 801a7c0:	6a3b      	ldr	r3, [r7, #32]
 801a7c2:	3b01      	subs	r3, #1
 801a7c4:	623b      	str	r3, [r7, #32]
 801a7c6:	6a3b      	ldr	r3, [r7, #32]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d1d5      	bne.n	801a778 <dir_register+0x12c>
 801a7cc:	e000      	b.n	801a7d0 <dir_register+0x184>
				if (res != FR_OK) break;
 801a7ce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801a7d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d128      	bne.n	801a82a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	69db      	ldr	r3, [r3, #28]
 801a7dc:	4619      	mov	r1, r3
 801a7de:	69f8      	ldr	r0, [r7, #28]
 801a7e0:	f7fe ffa8 	bl	8019734 <move_window>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a7ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d11b      	bne.n	801a82a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	6a1b      	ldr	r3, [r3, #32]
 801a7f6:	2220      	movs	r2, #32
 801a7f8:	2100      	movs	r1, #0
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	f7fe fd8d 	bl	801931a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	6a18      	ldr	r0, [r3, #32]
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	3324      	adds	r3, #36	@ 0x24
 801a808:	220b      	movs	r2, #11
 801a80a:	4619      	mov	r1, r3
 801a80c:	f7fe fd64 	bl	80192d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	6a1b      	ldr	r3, [r3, #32]
 801a81a:	330c      	adds	r3, #12
 801a81c:	f002 0218 	and.w	r2, r2, #24
 801a820:	b2d2      	uxtb	r2, r2
 801a822:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801a824:	69fb      	ldr	r3, [r7, #28]
 801a826:	2201      	movs	r2, #1
 801a828:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801a82a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801a82e:	4618      	mov	r0, r3
 801a830:	3730      	adds	r7, #48	@ 0x30
 801a832:	46bd      	mov	sp, r7
 801a834:	bd80      	pop	{r7, pc}
 801a836:	bf00      	nop
 801a838:	4ec4ec4f 	.word	0x4ec4ec4f

0801a83c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801a83c:	b580      	push	{r7, lr}
 801a83e:	b088      	sub	sp, #32
 801a840:	af00      	add	r7, sp, #0
 801a842:	6078      	str	r0, [r7, #4]
 801a844:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801a84c:	683b      	ldr	r3, [r7, #0]
 801a84e:	2200      	movs	r2, #0
 801a850:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	69db      	ldr	r3, [r3, #28]
 801a856:	2b00      	cmp	r3, #0
 801a858:	f000 80ca 	beq.w	801a9f0 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a860:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a864:	d032      	beq.n	801a8cc <get_fileinfo+0x90>
			i = j = 0;
 801a866:	2300      	movs	r3, #0
 801a868:	61bb      	str	r3, [r7, #24]
 801a86a:	69bb      	ldr	r3, [r7, #24]
 801a86c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a86e:	e01b      	b.n	801a8a8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801a870:	89fb      	ldrh	r3, [r7, #14]
 801a872:	2100      	movs	r1, #0
 801a874:	4618      	mov	r0, r3
 801a876:	f001 fabb 	bl	801bdf0 <ff_convert>
 801a87a:	4603      	mov	r3, r0
 801a87c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801a87e:	89fb      	ldrh	r3, [r7, #14]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d102      	bne.n	801a88a <get_fileinfo+0x4e>
 801a884:	2300      	movs	r3, #0
 801a886:	61fb      	str	r3, [r7, #28]
 801a888:	e01a      	b.n	801a8c0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801a88a:	69fb      	ldr	r3, [r7, #28]
 801a88c:	2bfe      	cmp	r3, #254	@ 0xfe
 801a88e:	d902      	bls.n	801a896 <get_fileinfo+0x5a>
 801a890:	2300      	movs	r3, #0
 801a892:	61fb      	str	r3, [r7, #28]
 801a894:	e014      	b.n	801a8c0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801a896:	69fb      	ldr	r3, [r7, #28]
 801a898:	1c5a      	adds	r2, r3, #1
 801a89a:	61fa      	str	r2, [r7, #28]
 801a89c:	89fa      	ldrh	r2, [r7, #14]
 801a89e:	b2d1      	uxtb	r1, r2
 801a8a0:	683a      	ldr	r2, [r7, #0]
 801a8a2:	4413      	add	r3, r2
 801a8a4:	460a      	mov	r2, r1
 801a8a6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a8a8:	693b      	ldr	r3, [r7, #16]
 801a8aa:	68da      	ldr	r2, [r3, #12]
 801a8ac:	69bb      	ldr	r3, [r7, #24]
 801a8ae:	1c59      	adds	r1, r3, #1
 801a8b0:	61b9      	str	r1, [r7, #24]
 801a8b2:	005b      	lsls	r3, r3, #1
 801a8b4:	4413      	add	r3, r2
 801a8b6:	881b      	ldrh	r3, [r3, #0]
 801a8b8:	81fb      	strh	r3, [r7, #14]
 801a8ba:	89fb      	ldrh	r3, [r7, #14]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d1d7      	bne.n	801a870 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801a8c0:	683a      	ldr	r2, [r7, #0]
 801a8c2:	69fb      	ldr	r3, [r7, #28]
 801a8c4:	4413      	add	r3, r2
 801a8c6:	3316      	adds	r3, #22
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	61bb      	str	r3, [r7, #24]
 801a8d0:	69bb      	ldr	r3, [r7, #24]
 801a8d2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801a8d4:	683a      	ldr	r2, [r7, #0]
 801a8d6:	69fb      	ldr	r3, [r7, #28]
 801a8d8:	4413      	add	r3, r2
 801a8da:	3316      	adds	r3, #22
 801a8dc:	781b      	ldrb	r3, [r3, #0]
 801a8de:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801a8e0:	e04d      	b.n	801a97e <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	6a1a      	ldr	r2, [r3, #32]
 801a8e6:	69fb      	ldr	r3, [r7, #28]
 801a8e8:	1c59      	adds	r1, r3, #1
 801a8ea:	61f9      	str	r1, [r7, #28]
 801a8ec:	4413      	add	r3, r2
 801a8ee:	781b      	ldrb	r3, [r3, #0]
 801a8f0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801a8f2:	7dfb      	ldrb	r3, [r7, #23]
 801a8f4:	2b20      	cmp	r3, #32
 801a8f6:	d041      	beq.n	801a97c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801a8f8:	7dfb      	ldrb	r3, [r7, #23]
 801a8fa:	2b05      	cmp	r3, #5
 801a8fc:	d101      	bne.n	801a902 <get_fileinfo+0xc6>
 801a8fe:	23e5      	movs	r3, #229	@ 0xe5
 801a900:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801a902:	69fb      	ldr	r3, [r7, #28]
 801a904:	2b09      	cmp	r3, #9
 801a906:	d10f      	bne.n	801a928 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 801a908:	89bb      	ldrh	r3, [r7, #12]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d105      	bne.n	801a91a <get_fileinfo+0xde>
 801a90e:	683a      	ldr	r2, [r7, #0]
 801a910:	69bb      	ldr	r3, [r7, #24]
 801a912:	4413      	add	r3, r2
 801a914:	3316      	adds	r3, #22
 801a916:	222e      	movs	r2, #46	@ 0x2e
 801a918:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801a91a:	69bb      	ldr	r3, [r7, #24]
 801a91c:	1c5a      	adds	r2, r3, #1
 801a91e:	61ba      	str	r2, [r7, #24]
 801a920:	683a      	ldr	r2, [r7, #0]
 801a922:	4413      	add	r3, r2
 801a924:	222e      	movs	r2, #46	@ 0x2e
 801a926:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801a928:	683a      	ldr	r2, [r7, #0]
 801a92a:	69bb      	ldr	r3, [r7, #24]
 801a92c:	4413      	add	r3, r2
 801a92e:	3309      	adds	r3, #9
 801a930:	7dfa      	ldrb	r2, [r7, #23]
 801a932:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801a934:	89bb      	ldrh	r3, [r7, #12]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d11c      	bne.n	801a974 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801a93a:	7dfb      	ldrb	r3, [r7, #23]
 801a93c:	2b40      	cmp	r3, #64	@ 0x40
 801a93e:	d913      	bls.n	801a968 <get_fileinfo+0x12c>
 801a940:	7dfb      	ldrb	r3, [r7, #23]
 801a942:	2b5a      	cmp	r3, #90	@ 0x5a
 801a944:	d810      	bhi.n	801a968 <get_fileinfo+0x12c>
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	6a1b      	ldr	r3, [r3, #32]
 801a94a:	330c      	adds	r3, #12
 801a94c:	781b      	ldrb	r3, [r3, #0]
 801a94e:	461a      	mov	r2, r3
 801a950:	69fb      	ldr	r3, [r7, #28]
 801a952:	2b08      	cmp	r3, #8
 801a954:	d901      	bls.n	801a95a <get_fileinfo+0x11e>
 801a956:	2310      	movs	r3, #16
 801a958:	e000      	b.n	801a95c <get_fileinfo+0x120>
 801a95a:	2308      	movs	r3, #8
 801a95c:	4013      	ands	r3, r2
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d002      	beq.n	801a968 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 801a962:	7dfb      	ldrb	r3, [r7, #23]
 801a964:	3320      	adds	r3, #32
 801a966:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801a968:	683a      	ldr	r2, [r7, #0]
 801a96a:	69bb      	ldr	r3, [r7, #24]
 801a96c:	4413      	add	r3, r2
 801a96e:	3316      	adds	r3, #22
 801a970:	7dfa      	ldrb	r2, [r7, #23]
 801a972:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801a974:	69bb      	ldr	r3, [r7, #24]
 801a976:	3301      	adds	r3, #1
 801a978:	61bb      	str	r3, [r7, #24]
 801a97a:	e000      	b.n	801a97e <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 801a97c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801a97e:	69fb      	ldr	r3, [r7, #28]
 801a980:	2b0a      	cmp	r3, #10
 801a982:	d9ae      	bls.n	801a8e2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801a984:	89bb      	ldrh	r3, [r7, #12]
 801a986:	2b00      	cmp	r3, #0
 801a988:	d10d      	bne.n	801a9a6 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 801a98a:	683a      	ldr	r2, [r7, #0]
 801a98c:	69bb      	ldr	r3, [r7, #24]
 801a98e:	4413      	add	r3, r2
 801a990:	3316      	adds	r3, #22
 801a992:	2200      	movs	r2, #0
 801a994:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	6a1b      	ldr	r3, [r3, #32]
 801a99a:	330c      	adds	r3, #12
 801a99c:	781b      	ldrb	r3, [r3, #0]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d101      	bne.n	801a9a6 <get_fileinfo+0x16a>
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801a9a6:	683a      	ldr	r2, [r7, #0]
 801a9a8:	69bb      	ldr	r3, [r7, #24]
 801a9aa:	4413      	add	r3, r2
 801a9ac:	3309      	adds	r3, #9
 801a9ae:	2200      	movs	r2, #0
 801a9b0:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	6a1b      	ldr	r3, [r3, #32]
 801a9b6:	7ada      	ldrb	r2, [r3, #11]
 801a9b8:	683b      	ldr	r3, [r7, #0]
 801a9ba:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	6a1b      	ldr	r3, [r3, #32]
 801a9c0:	331c      	adds	r3, #28
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	f7fe fc1e 	bl	8019204 <ld_dword>
 801a9c8:	4602      	mov	r2, r0
 801a9ca:	683b      	ldr	r3, [r7, #0]
 801a9cc:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	6a1b      	ldr	r3, [r3, #32]
 801a9d2:	3316      	adds	r3, #22
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	f7fe fc15 	bl	8019204 <ld_dword>
 801a9da:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801a9dc:	68bb      	ldr	r3, [r7, #8]
 801a9de:	b29a      	uxth	r2, r3
 801a9e0:	683b      	ldr	r3, [r7, #0]
 801a9e2:	80da      	strh	r2, [r3, #6]
 801a9e4:	68bb      	ldr	r3, [r7, #8]
 801a9e6:	0c1b      	lsrs	r3, r3, #16
 801a9e8:	b29a      	uxth	r2, r3
 801a9ea:	683b      	ldr	r3, [r7, #0]
 801a9ec:	809a      	strh	r2, [r3, #4]
 801a9ee:	e000      	b.n	801a9f2 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801a9f0:	bf00      	nop
}
 801a9f2:	3720      	adds	r7, #32
 801a9f4:	46bd      	mov	sp, r7
 801a9f6:	bd80      	pop	{r7, pc}

0801a9f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b08a      	sub	sp, #40	@ 0x28
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
 801aa00:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801aa02:	683b      	ldr	r3, [r7, #0]
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	613b      	str	r3, [r7, #16]
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	68db      	ldr	r3, [r3, #12]
 801aa0e:	60fb      	str	r3, [r7, #12]
 801aa10:	2300      	movs	r3, #0
 801aa12:	617b      	str	r3, [r7, #20]
 801aa14:	697b      	ldr	r3, [r7, #20]
 801aa16:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801aa18:	69bb      	ldr	r3, [r7, #24]
 801aa1a:	1c5a      	adds	r2, r3, #1
 801aa1c:	61ba      	str	r2, [r7, #24]
 801aa1e:	693a      	ldr	r2, [r7, #16]
 801aa20:	4413      	add	r3, r2
 801aa22:	781b      	ldrb	r3, [r3, #0]
 801aa24:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801aa26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aa28:	2b1f      	cmp	r3, #31
 801aa2a:	d940      	bls.n	801aaae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801aa2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aa2e:	2b2f      	cmp	r3, #47	@ 0x2f
 801aa30:	d006      	beq.n	801aa40 <create_name+0x48>
 801aa32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aa34:	2b5c      	cmp	r3, #92	@ 0x5c
 801aa36:	d110      	bne.n	801aa5a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801aa38:	e002      	b.n	801aa40 <create_name+0x48>
 801aa3a:	69bb      	ldr	r3, [r7, #24]
 801aa3c:	3301      	adds	r3, #1
 801aa3e:	61bb      	str	r3, [r7, #24]
 801aa40:	693a      	ldr	r2, [r7, #16]
 801aa42:	69bb      	ldr	r3, [r7, #24]
 801aa44:	4413      	add	r3, r2
 801aa46:	781b      	ldrb	r3, [r3, #0]
 801aa48:	2b2f      	cmp	r3, #47	@ 0x2f
 801aa4a:	d0f6      	beq.n	801aa3a <create_name+0x42>
 801aa4c:	693a      	ldr	r2, [r7, #16]
 801aa4e:	69bb      	ldr	r3, [r7, #24]
 801aa50:	4413      	add	r3, r2
 801aa52:	781b      	ldrb	r3, [r3, #0]
 801aa54:	2b5c      	cmp	r3, #92	@ 0x5c
 801aa56:	d0f0      	beq.n	801aa3a <create_name+0x42>
			break;
 801aa58:	e02a      	b.n	801aab0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801aa5a:	697b      	ldr	r3, [r7, #20]
 801aa5c:	2bfe      	cmp	r3, #254	@ 0xfe
 801aa5e:	d901      	bls.n	801aa64 <create_name+0x6c>
 801aa60:	2306      	movs	r3, #6
 801aa62:	e17d      	b.n	801ad60 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801aa64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aa66:	b2db      	uxtb	r3, r3
 801aa68:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801aa6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aa6c:	2101      	movs	r1, #1
 801aa6e:	4618      	mov	r0, r3
 801aa70:	f001 f9be 	bl	801bdf0 <ff_convert>
 801aa74:	4603      	mov	r3, r0
 801aa76:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801aa78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d101      	bne.n	801aa82 <create_name+0x8a>
 801aa7e:	2306      	movs	r3, #6
 801aa80:	e16e      	b.n	801ad60 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801aa82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aa84:	2b7f      	cmp	r3, #127	@ 0x7f
 801aa86:	d809      	bhi.n	801aa9c <create_name+0xa4>
 801aa88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aa8a:	4619      	mov	r1, r3
 801aa8c:	488d      	ldr	r0, [pc, #564]	@ (801acc4 <create_name+0x2cc>)
 801aa8e:	f7fe fc86 	bl	801939e <chk_chr>
 801aa92:	4603      	mov	r3, r0
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d001      	beq.n	801aa9c <create_name+0xa4>
 801aa98:	2306      	movs	r3, #6
 801aa9a:	e161      	b.n	801ad60 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801aa9c:	697b      	ldr	r3, [r7, #20]
 801aa9e:	1c5a      	adds	r2, r3, #1
 801aaa0:	617a      	str	r2, [r7, #20]
 801aaa2:	005b      	lsls	r3, r3, #1
 801aaa4:	68fa      	ldr	r2, [r7, #12]
 801aaa6:	4413      	add	r3, r2
 801aaa8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801aaaa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801aaac:	e7b4      	b.n	801aa18 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801aaae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801aab0:	693a      	ldr	r2, [r7, #16]
 801aab2:	69bb      	ldr	r3, [r7, #24]
 801aab4:	441a      	add	r2, r3
 801aab6:	683b      	ldr	r3, [r7, #0]
 801aab8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801aaba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aabc:	2b1f      	cmp	r3, #31
 801aabe:	d801      	bhi.n	801aac4 <create_name+0xcc>
 801aac0:	2304      	movs	r3, #4
 801aac2:	e000      	b.n	801aac6 <create_name+0xce>
 801aac4:	2300      	movs	r3, #0
 801aac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801aaca:	e011      	b.n	801aaf0 <create_name+0xf8>
		w = lfn[di - 1];
 801aacc:	697b      	ldr	r3, [r7, #20]
 801aace:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801aad2:	3b01      	subs	r3, #1
 801aad4:	005b      	lsls	r3, r3, #1
 801aad6:	68fa      	ldr	r2, [r7, #12]
 801aad8:	4413      	add	r3, r2
 801aada:	881b      	ldrh	r3, [r3, #0]
 801aadc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801aade:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aae0:	2b20      	cmp	r3, #32
 801aae2:	d002      	beq.n	801aaea <create_name+0xf2>
 801aae4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aae6:	2b2e      	cmp	r3, #46	@ 0x2e
 801aae8:	d106      	bne.n	801aaf8 <create_name+0x100>
		di--;
 801aaea:	697b      	ldr	r3, [r7, #20]
 801aaec:	3b01      	subs	r3, #1
 801aaee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801aaf0:	697b      	ldr	r3, [r7, #20]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d1ea      	bne.n	801aacc <create_name+0xd4>
 801aaf6:	e000      	b.n	801aafa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801aaf8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801aafa:	697b      	ldr	r3, [r7, #20]
 801aafc:	005b      	lsls	r3, r3, #1
 801aafe:	68fa      	ldr	r2, [r7, #12]
 801ab00:	4413      	add	r3, r2
 801ab02:	2200      	movs	r2, #0
 801ab04:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801ab06:	697b      	ldr	r3, [r7, #20]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d101      	bne.n	801ab10 <create_name+0x118>
 801ab0c:	2306      	movs	r3, #6
 801ab0e:	e127      	b.n	801ad60 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	3324      	adds	r3, #36	@ 0x24
 801ab14:	220b      	movs	r2, #11
 801ab16:	2120      	movs	r1, #32
 801ab18:	4618      	mov	r0, r3
 801ab1a:	f7fe fbfe 	bl	801931a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801ab1e:	2300      	movs	r3, #0
 801ab20:	61bb      	str	r3, [r7, #24]
 801ab22:	e002      	b.n	801ab2a <create_name+0x132>
 801ab24:	69bb      	ldr	r3, [r7, #24]
 801ab26:	3301      	adds	r3, #1
 801ab28:	61bb      	str	r3, [r7, #24]
 801ab2a:	69bb      	ldr	r3, [r7, #24]
 801ab2c:	005b      	lsls	r3, r3, #1
 801ab2e:	68fa      	ldr	r2, [r7, #12]
 801ab30:	4413      	add	r3, r2
 801ab32:	881b      	ldrh	r3, [r3, #0]
 801ab34:	2b20      	cmp	r3, #32
 801ab36:	d0f5      	beq.n	801ab24 <create_name+0x12c>
 801ab38:	69bb      	ldr	r3, [r7, #24]
 801ab3a:	005b      	lsls	r3, r3, #1
 801ab3c:	68fa      	ldr	r2, [r7, #12]
 801ab3e:	4413      	add	r3, r2
 801ab40:	881b      	ldrh	r3, [r3, #0]
 801ab42:	2b2e      	cmp	r3, #46	@ 0x2e
 801ab44:	d0ee      	beq.n	801ab24 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801ab46:	69bb      	ldr	r3, [r7, #24]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d009      	beq.n	801ab60 <create_name+0x168>
 801ab4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ab50:	f043 0303 	orr.w	r3, r3, #3
 801ab54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801ab58:	e002      	b.n	801ab60 <create_name+0x168>
 801ab5a:	697b      	ldr	r3, [r7, #20]
 801ab5c:	3b01      	subs	r3, #1
 801ab5e:	617b      	str	r3, [r7, #20]
 801ab60:	697b      	ldr	r3, [r7, #20]
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d009      	beq.n	801ab7a <create_name+0x182>
 801ab66:	697b      	ldr	r3, [r7, #20]
 801ab68:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ab6c:	3b01      	subs	r3, #1
 801ab6e:	005b      	lsls	r3, r3, #1
 801ab70:	68fa      	ldr	r2, [r7, #12]
 801ab72:	4413      	add	r3, r2
 801ab74:	881b      	ldrh	r3, [r3, #0]
 801ab76:	2b2e      	cmp	r3, #46	@ 0x2e
 801ab78:	d1ef      	bne.n	801ab5a <create_name+0x162>

	i = b = 0; ni = 8;
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ab80:	2300      	movs	r3, #0
 801ab82:	623b      	str	r3, [r7, #32]
 801ab84:	2308      	movs	r3, #8
 801ab86:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801ab88:	69bb      	ldr	r3, [r7, #24]
 801ab8a:	1c5a      	adds	r2, r3, #1
 801ab8c:	61ba      	str	r2, [r7, #24]
 801ab8e:	005b      	lsls	r3, r3, #1
 801ab90:	68fa      	ldr	r2, [r7, #12]
 801ab92:	4413      	add	r3, r2
 801ab94:	881b      	ldrh	r3, [r3, #0]
 801ab96:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801ab98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	f000 8090 	beq.w	801acc0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801aba0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aba2:	2b20      	cmp	r3, #32
 801aba4:	d006      	beq.n	801abb4 <create_name+0x1bc>
 801aba6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aba8:	2b2e      	cmp	r3, #46	@ 0x2e
 801abaa:	d10a      	bne.n	801abc2 <create_name+0x1ca>
 801abac:	69ba      	ldr	r2, [r7, #24]
 801abae:	697b      	ldr	r3, [r7, #20]
 801abb0:	429a      	cmp	r2, r3
 801abb2:	d006      	beq.n	801abc2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801abb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801abb8:	f043 0303 	orr.w	r3, r3, #3
 801abbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801abc0:	e07d      	b.n	801acbe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801abc2:	6a3a      	ldr	r2, [r7, #32]
 801abc4:	69fb      	ldr	r3, [r7, #28]
 801abc6:	429a      	cmp	r2, r3
 801abc8:	d203      	bcs.n	801abd2 <create_name+0x1da>
 801abca:	69ba      	ldr	r2, [r7, #24]
 801abcc:	697b      	ldr	r3, [r7, #20]
 801abce:	429a      	cmp	r2, r3
 801abd0:	d123      	bne.n	801ac1a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801abd2:	69fb      	ldr	r3, [r7, #28]
 801abd4:	2b0b      	cmp	r3, #11
 801abd6:	d106      	bne.n	801abe6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801abd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801abdc:	f043 0303 	orr.w	r3, r3, #3
 801abe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801abe4:	e075      	b.n	801acd2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801abe6:	69ba      	ldr	r2, [r7, #24]
 801abe8:	697b      	ldr	r3, [r7, #20]
 801abea:	429a      	cmp	r2, r3
 801abec:	d005      	beq.n	801abfa <create_name+0x202>
 801abee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801abf2:	f043 0303 	orr.w	r3, r3, #3
 801abf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801abfa:	69ba      	ldr	r2, [r7, #24]
 801abfc:	697b      	ldr	r3, [r7, #20]
 801abfe:	429a      	cmp	r2, r3
 801ac00:	d866      	bhi.n	801acd0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801ac02:	697b      	ldr	r3, [r7, #20]
 801ac04:	61bb      	str	r3, [r7, #24]
 801ac06:	2308      	movs	r3, #8
 801ac08:	623b      	str	r3, [r7, #32]
 801ac0a:	230b      	movs	r3, #11
 801ac0c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801ac0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ac12:	009b      	lsls	r3, r3, #2
 801ac14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ac18:	e051      	b.n	801acbe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801ac1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac1c:	2b7f      	cmp	r3, #127	@ 0x7f
 801ac1e:	d914      	bls.n	801ac4a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801ac20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac22:	2100      	movs	r1, #0
 801ac24:	4618      	mov	r0, r3
 801ac26:	f001 f8e3 	bl	801bdf0 <ff_convert>
 801ac2a:	4603      	mov	r3, r0
 801ac2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801ac2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d004      	beq.n	801ac3e <create_name+0x246>
 801ac34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac36:	3b80      	subs	r3, #128	@ 0x80
 801ac38:	4a23      	ldr	r2, [pc, #140]	@ (801acc8 <create_name+0x2d0>)
 801ac3a:	5cd3      	ldrb	r3, [r2, r3]
 801ac3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801ac3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac42:	f043 0302 	orr.w	r3, r3, #2
 801ac46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801ac4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d007      	beq.n	801ac60 <create_name+0x268>
 801ac50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac52:	4619      	mov	r1, r3
 801ac54:	481d      	ldr	r0, [pc, #116]	@ (801accc <create_name+0x2d4>)
 801ac56:	f7fe fba2 	bl	801939e <chk_chr>
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d008      	beq.n	801ac72 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801ac60:	235f      	movs	r3, #95	@ 0x5f
 801ac62:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801ac64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac68:	f043 0303 	orr.w	r3, r3, #3
 801ac6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ac70:	e01b      	b.n	801acaa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801ac72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac74:	2b40      	cmp	r3, #64	@ 0x40
 801ac76:	d909      	bls.n	801ac8c <create_name+0x294>
 801ac78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac7a:	2b5a      	cmp	r3, #90	@ 0x5a
 801ac7c:	d806      	bhi.n	801ac8c <create_name+0x294>
					b |= 2;
 801ac7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ac82:	f043 0302 	orr.w	r3, r3, #2
 801ac86:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ac8a:	e00e      	b.n	801acaa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801ac8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac8e:	2b60      	cmp	r3, #96	@ 0x60
 801ac90:	d90b      	bls.n	801acaa <create_name+0x2b2>
 801ac92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac94:	2b7a      	cmp	r3, #122	@ 0x7a
 801ac96:	d808      	bhi.n	801acaa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801ac98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ac9c:	f043 0301 	orr.w	r3, r3, #1
 801aca0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801aca4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aca6:	3b20      	subs	r3, #32
 801aca8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801acaa:	6a3b      	ldr	r3, [r7, #32]
 801acac:	1c5a      	adds	r2, r3, #1
 801acae:	623a      	str	r2, [r7, #32]
 801acb0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801acb2:	b2d1      	uxtb	r1, r2
 801acb4:	687a      	ldr	r2, [r7, #4]
 801acb6:	4413      	add	r3, r2
 801acb8:	460a      	mov	r2, r1
 801acba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801acbe:	e763      	b.n	801ab88 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801acc0:	bf00      	nop
 801acc2:	e006      	b.n	801acd2 <create_name+0x2da>
 801acc4:	080245ac 	.word	0x080245ac
 801acc8:	08024ed8 	.word	0x08024ed8
 801accc:	080245b8 	.word	0x080245b8
			if (si > di) break;			/* No extension */
 801acd0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801acd8:	2be5      	cmp	r3, #229	@ 0xe5
 801acda:	d103      	bne.n	801ace4 <create_name+0x2ec>
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	2205      	movs	r2, #5
 801ace0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801ace4:	69fb      	ldr	r3, [r7, #28]
 801ace6:	2b08      	cmp	r3, #8
 801ace8:	d104      	bne.n	801acf4 <create_name+0x2fc>
 801acea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801acee:	009b      	lsls	r3, r3, #2
 801acf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801acf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801acf8:	f003 030c 	and.w	r3, r3, #12
 801acfc:	2b0c      	cmp	r3, #12
 801acfe:	d005      	beq.n	801ad0c <create_name+0x314>
 801ad00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad04:	f003 0303 	and.w	r3, r3, #3
 801ad08:	2b03      	cmp	r3, #3
 801ad0a:	d105      	bne.n	801ad18 <create_name+0x320>
 801ad0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad10:	f043 0302 	orr.w	r3, r3, #2
 801ad14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801ad18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad1c:	f003 0302 	and.w	r3, r3, #2
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d117      	bne.n	801ad54 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801ad24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad28:	f003 0303 	and.w	r3, r3, #3
 801ad2c:	2b01      	cmp	r3, #1
 801ad2e:	d105      	bne.n	801ad3c <create_name+0x344>
 801ad30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad34:	f043 0310 	orr.w	r3, r3, #16
 801ad38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801ad3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad40:	f003 030c 	and.w	r3, r3, #12
 801ad44:	2b04      	cmp	r3, #4
 801ad46:	d105      	bne.n	801ad54 <create_name+0x35c>
 801ad48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad4c:	f043 0308 	orr.w	r3, r3, #8
 801ad50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ad5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801ad5e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801ad60:	4618      	mov	r0, r3
 801ad62:	3728      	adds	r7, #40	@ 0x28
 801ad64:	46bd      	mov	sp, r7
 801ad66:	bd80      	pop	{r7, pc}

0801ad68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b086      	sub	sp, #24
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
 801ad70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801ad76:	693b      	ldr	r3, [r7, #16]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801ad7c:	e002      	b.n	801ad84 <follow_path+0x1c>
 801ad7e:	683b      	ldr	r3, [r7, #0]
 801ad80:	3301      	adds	r3, #1
 801ad82:	603b      	str	r3, [r7, #0]
 801ad84:	683b      	ldr	r3, [r7, #0]
 801ad86:	781b      	ldrb	r3, [r3, #0]
 801ad88:	2b2f      	cmp	r3, #47	@ 0x2f
 801ad8a:	d0f8      	beq.n	801ad7e <follow_path+0x16>
 801ad8c:	683b      	ldr	r3, [r7, #0]
 801ad8e:	781b      	ldrb	r3, [r3, #0]
 801ad90:	2b5c      	cmp	r3, #92	@ 0x5c
 801ad92:	d0f4      	beq.n	801ad7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801ad94:	693b      	ldr	r3, [r7, #16]
 801ad96:	2200      	movs	r2, #0
 801ad98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ad9a:	683b      	ldr	r3, [r7, #0]
 801ad9c:	781b      	ldrb	r3, [r3, #0]
 801ad9e:	2b1f      	cmp	r3, #31
 801ada0:	d80a      	bhi.n	801adb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	2280      	movs	r2, #128	@ 0x80
 801ada6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801adaa:	2100      	movs	r1, #0
 801adac:	6878      	ldr	r0, [r7, #4]
 801adae:	f7ff f83e 	bl	8019e2e <dir_sdi>
 801adb2:	4603      	mov	r3, r0
 801adb4:	75fb      	strb	r3, [r7, #23]
 801adb6:	e043      	b.n	801ae40 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801adb8:	463b      	mov	r3, r7
 801adba:	4619      	mov	r1, r3
 801adbc:	6878      	ldr	r0, [r7, #4]
 801adbe:	f7ff fe1b 	bl	801a9f8 <create_name>
 801adc2:	4603      	mov	r3, r0
 801adc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801adc6:	7dfb      	ldrb	r3, [r7, #23]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d134      	bne.n	801ae36 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801adcc:	6878      	ldr	r0, [r7, #4]
 801adce:	f7ff fb7c 	bl	801a4ca <dir_find>
 801add2:	4603      	mov	r3, r0
 801add4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801addc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801adde:	7dfb      	ldrb	r3, [r7, #23]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d00a      	beq.n	801adfa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801ade4:	7dfb      	ldrb	r3, [r7, #23]
 801ade6:	2b04      	cmp	r3, #4
 801ade8:	d127      	bne.n	801ae3a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801adea:	7afb      	ldrb	r3, [r7, #11]
 801adec:	f003 0304 	and.w	r3, r3, #4
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d122      	bne.n	801ae3a <follow_path+0xd2>
 801adf4:	2305      	movs	r3, #5
 801adf6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801adf8:	e01f      	b.n	801ae3a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801adfa:	7afb      	ldrb	r3, [r7, #11]
 801adfc:	f003 0304 	and.w	r3, r3, #4
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d11c      	bne.n	801ae3e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801ae04:	693b      	ldr	r3, [r7, #16]
 801ae06:	799b      	ldrb	r3, [r3, #6]
 801ae08:	f003 0310 	and.w	r3, r3, #16
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d102      	bne.n	801ae16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801ae10:	2305      	movs	r3, #5
 801ae12:	75fb      	strb	r3, [r7, #23]
 801ae14:	e014      	b.n	801ae40 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	695b      	ldr	r3, [r3, #20]
 801ae20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ae24:	4413      	add	r3, r2
 801ae26:	4619      	mov	r1, r3
 801ae28:	68f8      	ldr	r0, [r7, #12]
 801ae2a:	f7ff f987 	bl	801a13c <ld_clust>
 801ae2e:	4602      	mov	r2, r0
 801ae30:	693b      	ldr	r3, [r7, #16]
 801ae32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ae34:	e7c0      	b.n	801adb8 <follow_path+0x50>
			if (res != FR_OK) break;
 801ae36:	bf00      	nop
 801ae38:	e002      	b.n	801ae40 <follow_path+0xd8>
				break;
 801ae3a:	bf00      	nop
 801ae3c:	e000      	b.n	801ae40 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ae3e:	bf00      	nop
			}
		}
	}

	return res;
 801ae40:	7dfb      	ldrb	r3, [r7, #23]
}
 801ae42:	4618      	mov	r0, r3
 801ae44:	3718      	adds	r7, #24
 801ae46:	46bd      	mov	sp, r7
 801ae48:	bd80      	pop	{r7, pc}

0801ae4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801ae4a:	b480      	push	{r7}
 801ae4c:	b087      	sub	sp, #28
 801ae4e:	af00      	add	r7, sp, #0
 801ae50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801ae52:	f04f 33ff 	mov.w	r3, #4294967295
 801ae56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d031      	beq.n	801aec4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	617b      	str	r3, [r7, #20]
 801ae66:	e002      	b.n	801ae6e <get_ldnumber+0x24>
 801ae68:	697b      	ldr	r3, [r7, #20]
 801ae6a:	3301      	adds	r3, #1
 801ae6c:	617b      	str	r3, [r7, #20]
 801ae6e:	697b      	ldr	r3, [r7, #20]
 801ae70:	781b      	ldrb	r3, [r3, #0]
 801ae72:	2b1f      	cmp	r3, #31
 801ae74:	d903      	bls.n	801ae7e <get_ldnumber+0x34>
 801ae76:	697b      	ldr	r3, [r7, #20]
 801ae78:	781b      	ldrb	r3, [r3, #0]
 801ae7a:	2b3a      	cmp	r3, #58	@ 0x3a
 801ae7c:	d1f4      	bne.n	801ae68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801ae7e:	697b      	ldr	r3, [r7, #20]
 801ae80:	781b      	ldrb	r3, [r3, #0]
 801ae82:	2b3a      	cmp	r3, #58	@ 0x3a
 801ae84:	d11c      	bne.n	801aec0 <get_ldnumber+0x76>
			tp = *path;
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	1c5a      	adds	r2, r3, #1
 801ae90:	60fa      	str	r2, [r7, #12]
 801ae92:	781b      	ldrb	r3, [r3, #0]
 801ae94:	3b30      	subs	r3, #48	@ 0x30
 801ae96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ae98:	68bb      	ldr	r3, [r7, #8]
 801ae9a:	2b09      	cmp	r3, #9
 801ae9c:	d80e      	bhi.n	801aebc <get_ldnumber+0x72>
 801ae9e:	68fa      	ldr	r2, [r7, #12]
 801aea0:	697b      	ldr	r3, [r7, #20]
 801aea2:	429a      	cmp	r2, r3
 801aea4:	d10a      	bne.n	801aebc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801aea6:	68bb      	ldr	r3, [r7, #8]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d107      	bne.n	801aebc <get_ldnumber+0x72>
					vol = (int)i;
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801aeb0:	697b      	ldr	r3, [r7, #20]
 801aeb2:	3301      	adds	r3, #1
 801aeb4:	617b      	str	r3, [r7, #20]
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	697a      	ldr	r2, [r7, #20]
 801aeba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801aebc:	693b      	ldr	r3, [r7, #16]
 801aebe:	e002      	b.n	801aec6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801aec0:	2300      	movs	r3, #0
 801aec2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801aec4:	693b      	ldr	r3, [r7, #16]
}
 801aec6:	4618      	mov	r0, r3
 801aec8:	371c      	adds	r7, #28
 801aeca:	46bd      	mov	sp, r7
 801aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aed0:	4770      	bx	lr
	...

0801aed4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801aed4:	b580      	push	{r7, lr}
 801aed6:	b082      	sub	sp, #8
 801aed8:	af00      	add	r7, sp, #0
 801aeda:	6078      	str	r0, [r7, #4]
 801aedc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	2200      	movs	r2, #0
 801aee2:	70da      	strb	r2, [r3, #3]
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	f04f 32ff 	mov.w	r2, #4294967295
 801aeea:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801aeec:	6839      	ldr	r1, [r7, #0]
 801aeee:	6878      	ldr	r0, [r7, #4]
 801aef0:	f7fe fc20 	bl	8019734 <move_window>
 801aef4:	4603      	mov	r3, r0
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d001      	beq.n	801aefe <check_fs+0x2a>
 801aefa:	2304      	movs	r3, #4
 801aefc:	e038      	b.n	801af70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	3334      	adds	r3, #52	@ 0x34
 801af02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801af06:	4618      	mov	r0, r3
 801af08:	f7fe f964 	bl	80191d4 <ld_word>
 801af0c:	4603      	mov	r3, r0
 801af0e:	461a      	mov	r2, r3
 801af10:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801af14:	429a      	cmp	r2, r3
 801af16:	d001      	beq.n	801af1c <check_fs+0x48>
 801af18:	2303      	movs	r3, #3
 801af1a:	e029      	b.n	801af70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801af22:	2be9      	cmp	r3, #233	@ 0xe9
 801af24:	d009      	beq.n	801af3a <check_fs+0x66>
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801af2c:	2beb      	cmp	r3, #235	@ 0xeb
 801af2e:	d11e      	bne.n	801af6e <check_fs+0x9a>
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801af36:	2b90      	cmp	r3, #144	@ 0x90
 801af38:	d119      	bne.n	801af6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	3334      	adds	r3, #52	@ 0x34
 801af3e:	3336      	adds	r3, #54	@ 0x36
 801af40:	4618      	mov	r0, r3
 801af42:	f7fe f95f 	bl	8019204 <ld_dword>
 801af46:	4603      	mov	r3, r0
 801af48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801af4c:	4a0a      	ldr	r2, [pc, #40]	@ (801af78 <check_fs+0xa4>)
 801af4e:	4293      	cmp	r3, r2
 801af50:	d101      	bne.n	801af56 <check_fs+0x82>
 801af52:	2300      	movs	r3, #0
 801af54:	e00c      	b.n	801af70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	3334      	adds	r3, #52	@ 0x34
 801af5a:	3352      	adds	r3, #82	@ 0x52
 801af5c:	4618      	mov	r0, r3
 801af5e:	f7fe f951 	bl	8019204 <ld_dword>
 801af62:	4603      	mov	r3, r0
 801af64:	4a05      	ldr	r2, [pc, #20]	@ (801af7c <check_fs+0xa8>)
 801af66:	4293      	cmp	r3, r2
 801af68:	d101      	bne.n	801af6e <check_fs+0x9a>
 801af6a:	2300      	movs	r3, #0
 801af6c:	e000      	b.n	801af70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801af6e:	2302      	movs	r3, #2
}
 801af70:	4618      	mov	r0, r3
 801af72:	3708      	adds	r7, #8
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}
 801af78:	00544146 	.word	0x00544146
 801af7c:	33544146 	.word	0x33544146

0801af80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801af80:	b580      	push	{r7, lr}
 801af82:	b096      	sub	sp, #88	@ 0x58
 801af84:	af00      	add	r7, sp, #0
 801af86:	60f8      	str	r0, [r7, #12]
 801af88:	60b9      	str	r1, [r7, #8]
 801af8a:	4613      	mov	r3, r2
 801af8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801af8e:	68bb      	ldr	r3, [r7, #8]
 801af90:	2200      	movs	r2, #0
 801af92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801af94:	68f8      	ldr	r0, [r7, #12]
 801af96:	f7ff ff58 	bl	801ae4a <get_ldnumber>
 801af9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801af9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	da01      	bge.n	801afa6 <find_volume+0x26>
 801afa2:	230b      	movs	r3, #11
 801afa4:	e230      	b.n	801b408 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801afa6:	4aa1      	ldr	r2, [pc, #644]	@ (801b22c <find_volume+0x2ac>)
 801afa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801afae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801afb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d101      	bne.n	801afba <find_volume+0x3a>
 801afb6:	230c      	movs	r3, #12
 801afb8:	e226      	b.n	801b408 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801afba:	68bb      	ldr	r3, [r7, #8]
 801afbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801afbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801afc0:	79fb      	ldrb	r3, [r7, #7]
 801afc2:	f023 0301 	bic.w	r3, r3, #1
 801afc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801afc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801afca:	781b      	ldrb	r3, [r3, #0]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d01a      	beq.n	801b006 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801afd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801afd2:	785b      	ldrb	r3, [r3, #1]
 801afd4:	4618      	mov	r0, r3
 801afd6:	f7fe f85d 	bl	8019094 <disk_status>
 801afda:	4603      	mov	r3, r0
 801afdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801afe0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801afe4:	f003 0301 	and.w	r3, r3, #1
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d10c      	bne.n	801b006 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801afec:	79fb      	ldrb	r3, [r7, #7]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d007      	beq.n	801b002 <find_volume+0x82>
 801aff2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801aff6:	f003 0304 	and.w	r3, r3, #4
 801affa:	2b00      	cmp	r3, #0
 801affc:	d001      	beq.n	801b002 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801affe:	230a      	movs	r3, #10
 801b000:	e202      	b.n	801b408 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801b002:	2300      	movs	r3, #0
 801b004:	e200      	b.n	801b408 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801b006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b008:	2200      	movs	r2, #0
 801b00a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801b00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b00e:	b2da      	uxtb	r2, r3
 801b010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b012:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801b014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b016:	785b      	ldrb	r3, [r3, #1]
 801b018:	4618      	mov	r0, r3
 801b01a:	f7fe f855 	bl	80190c8 <disk_initialize>
 801b01e:	4603      	mov	r3, r0
 801b020:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801b024:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b028:	f003 0301 	and.w	r3, r3, #1
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d001      	beq.n	801b034 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801b030:	2303      	movs	r3, #3
 801b032:	e1e9      	b.n	801b408 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801b034:	79fb      	ldrb	r3, [r7, #7]
 801b036:	2b00      	cmp	r3, #0
 801b038:	d007      	beq.n	801b04a <find_volume+0xca>
 801b03a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b03e:	f003 0304 	and.w	r3, r3, #4
 801b042:	2b00      	cmp	r3, #0
 801b044:	d001      	beq.n	801b04a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801b046:	230a      	movs	r3, #10
 801b048:	e1de      	b.n	801b408 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801b04a:	2300      	movs	r3, #0
 801b04c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801b04e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b050:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b052:	f7ff ff3f 	bl	801aed4 <check_fs>
 801b056:	4603      	mov	r3, r0
 801b058:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801b05c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b060:	2b02      	cmp	r3, #2
 801b062:	d149      	bne.n	801b0f8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b064:	2300      	movs	r3, #0
 801b066:	643b      	str	r3, [r7, #64]	@ 0x40
 801b068:	e01e      	b.n	801b0a8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801b06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b06c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801b070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b072:	011b      	lsls	r3, r3, #4
 801b074:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801b078:	4413      	add	r3, r2
 801b07a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b07e:	3304      	adds	r3, #4
 801b080:	781b      	ldrb	r3, [r3, #0]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d006      	beq.n	801b094 <find_volume+0x114>
 801b086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b088:	3308      	adds	r3, #8
 801b08a:	4618      	mov	r0, r3
 801b08c:	f7fe f8ba 	bl	8019204 <ld_dword>
 801b090:	4602      	mov	r2, r0
 801b092:	e000      	b.n	801b096 <find_volume+0x116>
 801b094:	2200      	movs	r2, #0
 801b096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b098:	009b      	lsls	r3, r3, #2
 801b09a:	3358      	adds	r3, #88	@ 0x58
 801b09c:	443b      	add	r3, r7
 801b09e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b0a4:	3301      	adds	r3, #1
 801b0a6:	643b      	str	r3, [r7, #64]	@ 0x40
 801b0a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b0aa:	2b03      	cmp	r3, #3
 801b0ac:	d9dd      	bls.n	801b06a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801b0b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d002      	beq.n	801b0be <find_volume+0x13e>
 801b0b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b0ba:	3b01      	subs	r3, #1
 801b0bc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801b0be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b0c0:	009b      	lsls	r3, r3, #2
 801b0c2:	3358      	adds	r3, #88	@ 0x58
 801b0c4:	443b      	add	r3, r7
 801b0c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801b0ca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801b0cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d005      	beq.n	801b0de <find_volume+0x15e>
 801b0d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b0d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b0d6:	f7ff fefd 	bl	801aed4 <check_fs>
 801b0da:	4603      	mov	r3, r0
 801b0dc:	e000      	b.n	801b0e0 <find_volume+0x160>
 801b0de:	2303      	movs	r3, #3
 801b0e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801b0e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b0e8:	2b01      	cmp	r3, #1
 801b0ea:	d905      	bls.n	801b0f8 <find_volume+0x178>
 801b0ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b0ee:	3301      	adds	r3, #1
 801b0f0:	643b      	str	r3, [r7, #64]	@ 0x40
 801b0f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b0f4:	2b03      	cmp	r3, #3
 801b0f6:	d9e2      	bls.n	801b0be <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801b0f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b0fc:	2b04      	cmp	r3, #4
 801b0fe:	d101      	bne.n	801b104 <find_volume+0x184>
 801b100:	2301      	movs	r3, #1
 801b102:	e181      	b.n	801b408 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801b104:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b108:	2b01      	cmp	r3, #1
 801b10a:	d901      	bls.n	801b110 <find_volume+0x190>
 801b10c:	230d      	movs	r3, #13
 801b10e:	e17b      	b.n	801b408 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801b110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b112:	3334      	adds	r3, #52	@ 0x34
 801b114:	330b      	adds	r3, #11
 801b116:	4618      	mov	r0, r3
 801b118:	f7fe f85c 	bl	80191d4 <ld_word>
 801b11c:	4603      	mov	r3, r0
 801b11e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b122:	d001      	beq.n	801b128 <find_volume+0x1a8>
 801b124:	230d      	movs	r3, #13
 801b126:	e16f      	b.n	801b408 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801b128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b12a:	3334      	adds	r3, #52	@ 0x34
 801b12c:	3316      	adds	r3, #22
 801b12e:	4618      	mov	r0, r3
 801b130:	f7fe f850 	bl	80191d4 <ld_word>
 801b134:	4603      	mov	r3, r0
 801b136:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801b138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d106      	bne.n	801b14c <find_volume+0x1cc>
 801b13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b140:	3334      	adds	r3, #52	@ 0x34
 801b142:	3324      	adds	r3, #36	@ 0x24
 801b144:	4618      	mov	r0, r3
 801b146:	f7fe f85d 	bl	8019204 <ld_dword>
 801b14a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801b14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b14e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b150:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801b152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b154:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801b158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b15a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801b15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b15e:	789b      	ldrb	r3, [r3, #2]
 801b160:	2b01      	cmp	r3, #1
 801b162:	d005      	beq.n	801b170 <find_volume+0x1f0>
 801b164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b166:	789b      	ldrb	r3, [r3, #2]
 801b168:	2b02      	cmp	r3, #2
 801b16a:	d001      	beq.n	801b170 <find_volume+0x1f0>
 801b16c:	230d      	movs	r3, #13
 801b16e:	e14b      	b.n	801b408 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801b170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b172:	789b      	ldrb	r3, [r3, #2]
 801b174:	461a      	mov	r2, r3
 801b176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b178:	fb02 f303 	mul.w	r3, r2, r3
 801b17c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801b17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801b184:	461a      	mov	r2, r3
 801b186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b188:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801b18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b18c:	895b      	ldrh	r3, [r3, #10]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d008      	beq.n	801b1a4 <find_volume+0x224>
 801b192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b194:	895b      	ldrh	r3, [r3, #10]
 801b196:	461a      	mov	r2, r3
 801b198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b19a:	895b      	ldrh	r3, [r3, #10]
 801b19c:	3b01      	subs	r3, #1
 801b19e:	4013      	ands	r3, r2
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d001      	beq.n	801b1a8 <find_volume+0x228>
 801b1a4:	230d      	movs	r3, #13
 801b1a6:	e12f      	b.n	801b408 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801b1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1aa:	3334      	adds	r3, #52	@ 0x34
 801b1ac:	3311      	adds	r3, #17
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f7fe f810 	bl	80191d4 <ld_word>
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	461a      	mov	r2, r3
 801b1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801b1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1be:	891b      	ldrh	r3, [r3, #8]
 801b1c0:	f003 030f 	and.w	r3, r3, #15
 801b1c4:	b29b      	uxth	r3, r3
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d001      	beq.n	801b1ce <find_volume+0x24e>
 801b1ca:	230d      	movs	r3, #13
 801b1cc:	e11c      	b.n	801b408 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801b1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1d0:	3334      	adds	r3, #52	@ 0x34
 801b1d2:	3313      	adds	r3, #19
 801b1d4:	4618      	mov	r0, r3
 801b1d6:	f7fd fffd 	bl	80191d4 <ld_word>
 801b1da:	4603      	mov	r3, r0
 801b1dc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801b1de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d106      	bne.n	801b1f2 <find_volume+0x272>
 801b1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1e6:	3334      	adds	r3, #52	@ 0x34
 801b1e8:	3320      	adds	r3, #32
 801b1ea:	4618      	mov	r0, r3
 801b1ec:	f7fe f80a 	bl	8019204 <ld_dword>
 801b1f0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801b1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1f4:	3334      	adds	r3, #52	@ 0x34
 801b1f6:	330e      	adds	r3, #14
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	f7fd ffeb 	bl	80191d4 <ld_word>
 801b1fe:	4603      	mov	r3, r0
 801b200:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801b202:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b204:	2b00      	cmp	r3, #0
 801b206:	d101      	bne.n	801b20c <find_volume+0x28c>
 801b208:	230d      	movs	r3, #13
 801b20a:	e0fd      	b.n	801b408 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801b20c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b210:	4413      	add	r3, r2
 801b212:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b214:	8912      	ldrh	r2, [r2, #8]
 801b216:	0912      	lsrs	r2, r2, #4
 801b218:	b292      	uxth	r2, r2
 801b21a:	4413      	add	r3, r2
 801b21c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801b21e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b222:	429a      	cmp	r2, r3
 801b224:	d204      	bcs.n	801b230 <find_volume+0x2b0>
 801b226:	230d      	movs	r3, #13
 801b228:	e0ee      	b.n	801b408 <find_volume+0x488>
 801b22a:	bf00      	nop
 801b22c:	20001b68 	.word	0x20001b68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801b230:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b234:	1ad3      	subs	r3, r2, r3
 801b236:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b238:	8952      	ldrh	r2, [r2, #10]
 801b23a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b23e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801b240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b242:	2b00      	cmp	r3, #0
 801b244:	d101      	bne.n	801b24a <find_volume+0x2ca>
 801b246:	230d      	movs	r3, #13
 801b248:	e0de      	b.n	801b408 <find_volume+0x488>
		fmt = FS_FAT32;
 801b24a:	2303      	movs	r3, #3
 801b24c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801b250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b252:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801b256:	4293      	cmp	r3, r2
 801b258:	d802      	bhi.n	801b260 <find_volume+0x2e0>
 801b25a:	2302      	movs	r3, #2
 801b25c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801b260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b262:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801b266:	4293      	cmp	r3, r2
 801b268:	d802      	bhi.n	801b270 <find_volume+0x2f0>
 801b26a:	2301      	movs	r3, #1
 801b26c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801b270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b272:	1c9a      	adds	r2, r3, #2
 801b274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b276:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801b278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b27a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b27c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801b27e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b282:	441a      	add	r2, r3
 801b284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b286:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801b288:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b28c:	441a      	add	r2, r3
 801b28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b290:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801b292:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b296:	2b03      	cmp	r3, #3
 801b298:	d11e      	bne.n	801b2d8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801b29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b29c:	3334      	adds	r3, #52	@ 0x34
 801b29e:	332a      	adds	r3, #42	@ 0x2a
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	f7fd ff97 	bl	80191d4 <ld_word>
 801b2a6:	4603      	mov	r3, r0
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d001      	beq.n	801b2b0 <find_volume+0x330>
 801b2ac:	230d      	movs	r3, #13
 801b2ae:	e0ab      	b.n	801b408 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801b2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2b2:	891b      	ldrh	r3, [r3, #8]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d001      	beq.n	801b2bc <find_volume+0x33c>
 801b2b8:	230d      	movs	r3, #13
 801b2ba:	e0a5      	b.n	801b408 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801b2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2be:	3334      	adds	r3, #52	@ 0x34
 801b2c0:	332c      	adds	r3, #44	@ 0x2c
 801b2c2:	4618      	mov	r0, r3
 801b2c4:	f7fd ff9e 	bl	8019204 <ld_dword>
 801b2c8:	4602      	mov	r2, r0
 801b2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2cc:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801b2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2d0:	699b      	ldr	r3, [r3, #24]
 801b2d2:	009b      	lsls	r3, r3, #2
 801b2d4:	647b      	str	r3, [r7, #68]	@ 0x44
 801b2d6:	e01f      	b.n	801b318 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801b2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2da:	891b      	ldrh	r3, [r3, #8]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d101      	bne.n	801b2e4 <find_volume+0x364>
 801b2e0:	230d      	movs	r3, #13
 801b2e2:	e091      	b.n	801b408 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801b2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b2e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2ea:	441a      	add	r2, r3
 801b2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2ee:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801b2f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b2f4:	2b02      	cmp	r3, #2
 801b2f6:	d103      	bne.n	801b300 <find_volume+0x380>
 801b2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2fa:	699b      	ldr	r3, [r3, #24]
 801b2fc:	005b      	lsls	r3, r3, #1
 801b2fe:	e00a      	b.n	801b316 <find_volume+0x396>
 801b300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b302:	699a      	ldr	r2, [r3, #24]
 801b304:	4613      	mov	r3, r2
 801b306:	005b      	lsls	r3, r3, #1
 801b308:	4413      	add	r3, r2
 801b30a:	085a      	lsrs	r2, r3, #1
 801b30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b30e:	699b      	ldr	r3, [r3, #24]
 801b310:	f003 0301 	and.w	r3, r3, #1
 801b314:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801b316:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801b318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b31a:	69da      	ldr	r2, [r3, #28]
 801b31c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b31e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801b322:	0a5b      	lsrs	r3, r3, #9
 801b324:	429a      	cmp	r2, r3
 801b326:	d201      	bcs.n	801b32c <find_volume+0x3ac>
 801b328:	230d      	movs	r3, #13
 801b32a:	e06d      	b.n	801b408 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801b32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b32e:	f04f 32ff 	mov.w	r2, #4294967295
 801b332:	615a      	str	r2, [r3, #20]
 801b334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b336:	695a      	ldr	r2, [r3, #20]
 801b338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b33a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801b33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b33e:	2280      	movs	r2, #128	@ 0x80
 801b340:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801b342:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b346:	2b03      	cmp	r3, #3
 801b348:	d149      	bne.n	801b3de <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801b34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b34c:	3334      	adds	r3, #52	@ 0x34
 801b34e:	3330      	adds	r3, #48	@ 0x30
 801b350:	4618      	mov	r0, r3
 801b352:	f7fd ff3f 	bl	80191d4 <ld_word>
 801b356:	4603      	mov	r3, r0
 801b358:	2b01      	cmp	r3, #1
 801b35a:	d140      	bne.n	801b3de <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801b35c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b35e:	3301      	adds	r3, #1
 801b360:	4619      	mov	r1, r3
 801b362:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b364:	f7fe f9e6 	bl	8019734 <move_window>
 801b368:	4603      	mov	r3, r0
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d137      	bne.n	801b3de <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801b36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b370:	2200      	movs	r2, #0
 801b372:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801b374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b376:	3334      	adds	r3, #52	@ 0x34
 801b378:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b37c:	4618      	mov	r0, r3
 801b37e:	f7fd ff29 	bl	80191d4 <ld_word>
 801b382:	4603      	mov	r3, r0
 801b384:	461a      	mov	r2, r3
 801b386:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801b38a:	429a      	cmp	r2, r3
 801b38c:	d127      	bne.n	801b3de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801b38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b390:	3334      	adds	r3, #52	@ 0x34
 801b392:	4618      	mov	r0, r3
 801b394:	f7fd ff36 	bl	8019204 <ld_dword>
 801b398:	4603      	mov	r3, r0
 801b39a:	4a1d      	ldr	r2, [pc, #116]	@ (801b410 <find_volume+0x490>)
 801b39c:	4293      	cmp	r3, r2
 801b39e:	d11e      	bne.n	801b3de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3a2:	3334      	adds	r3, #52	@ 0x34
 801b3a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	f7fd ff2b 	bl	8019204 <ld_dword>
 801b3ae:	4603      	mov	r3, r0
 801b3b0:	4a18      	ldr	r2, [pc, #96]	@ (801b414 <find_volume+0x494>)
 801b3b2:	4293      	cmp	r3, r2
 801b3b4:	d113      	bne.n	801b3de <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801b3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3b8:	3334      	adds	r3, #52	@ 0x34
 801b3ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801b3be:	4618      	mov	r0, r3
 801b3c0:	f7fd ff20 	bl	8019204 <ld_dword>
 801b3c4:	4602      	mov	r2, r0
 801b3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3c8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801b3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3cc:	3334      	adds	r3, #52	@ 0x34
 801b3ce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801b3d2:	4618      	mov	r0, r3
 801b3d4:	f7fd ff16 	bl	8019204 <ld_dword>
 801b3d8:	4602      	mov	r2, r0
 801b3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3dc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801b3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3e0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801b3e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801b3e6:	4b0c      	ldr	r3, [pc, #48]	@ (801b418 <find_volume+0x498>)
 801b3e8:	881b      	ldrh	r3, [r3, #0]
 801b3ea:	3301      	adds	r3, #1
 801b3ec:	b29a      	uxth	r2, r3
 801b3ee:	4b0a      	ldr	r3, [pc, #40]	@ (801b418 <find_volume+0x498>)
 801b3f0:	801a      	strh	r2, [r3, #0]
 801b3f2:	4b09      	ldr	r3, [pc, #36]	@ (801b418 <find_volume+0x498>)
 801b3f4:	881a      	ldrh	r2, [r3, #0]
 801b3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3f8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801b3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3fc:	4a07      	ldr	r2, [pc, #28]	@ (801b41c <find_volume+0x49c>)
 801b3fe:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801b400:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b402:	f7fe f92f 	bl	8019664 <clear_lock>
#endif
	return FR_OK;
 801b406:	2300      	movs	r3, #0
}
 801b408:	4618      	mov	r0, r3
 801b40a:	3758      	adds	r7, #88	@ 0x58
 801b40c:	46bd      	mov	sp, r7
 801b40e:	bd80      	pop	{r7, pc}
 801b410:	41615252 	.word	0x41615252
 801b414:	61417272 	.word	0x61417272
 801b418:	20001b6c 	.word	0x20001b6c
 801b41c:	20001b90 	.word	0x20001b90

0801b420 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b084      	sub	sp, #16
 801b424:	af00      	add	r7, sp, #0
 801b426:	6078      	str	r0, [r7, #4]
 801b428:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801b42a:	2309      	movs	r3, #9
 801b42c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	2b00      	cmp	r3, #0
 801b432:	d01c      	beq.n	801b46e <validate+0x4e>
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d018      	beq.n	801b46e <validate+0x4e>
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	781b      	ldrb	r3, [r3, #0]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d013      	beq.n	801b46e <validate+0x4e>
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	889a      	ldrh	r2, [r3, #4]
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	88db      	ldrh	r3, [r3, #6]
 801b450:	429a      	cmp	r2, r3
 801b452:	d10c      	bne.n	801b46e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	785b      	ldrb	r3, [r3, #1]
 801b45a:	4618      	mov	r0, r3
 801b45c:	f7fd fe1a 	bl	8019094 <disk_status>
 801b460:	4603      	mov	r3, r0
 801b462:	f003 0301 	and.w	r3, r3, #1
 801b466:	2b00      	cmp	r3, #0
 801b468:	d101      	bne.n	801b46e <validate+0x4e>
			res = FR_OK;
 801b46a:	2300      	movs	r3, #0
 801b46c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801b46e:	7bfb      	ldrb	r3, [r7, #15]
 801b470:	2b00      	cmp	r3, #0
 801b472:	d102      	bne.n	801b47a <validate+0x5a>
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	e000      	b.n	801b47c <validate+0x5c>
 801b47a:	2300      	movs	r3, #0
 801b47c:	683a      	ldr	r2, [r7, #0]
 801b47e:	6013      	str	r3, [r2, #0]
	return res;
 801b480:	7bfb      	ldrb	r3, [r7, #15]
}
 801b482:	4618      	mov	r0, r3
 801b484:	3710      	adds	r7, #16
 801b486:	46bd      	mov	sp, r7
 801b488:	bd80      	pop	{r7, pc}
	...

0801b48c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b088      	sub	sp, #32
 801b490:	af00      	add	r7, sp, #0
 801b492:	60f8      	str	r0, [r7, #12]
 801b494:	60b9      	str	r1, [r7, #8]
 801b496:	4613      	mov	r3, r2
 801b498:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801b49a:	68bb      	ldr	r3, [r7, #8]
 801b49c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801b49e:	f107 0310 	add.w	r3, r7, #16
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f7ff fcd1 	bl	801ae4a <get_ldnumber>
 801b4a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801b4aa:	69fb      	ldr	r3, [r7, #28]
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	da01      	bge.n	801b4b4 <f_mount+0x28>
 801b4b0:	230b      	movs	r3, #11
 801b4b2:	e02b      	b.n	801b50c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801b4b4:	4a17      	ldr	r2, [pc, #92]	@ (801b514 <f_mount+0x88>)
 801b4b6:	69fb      	ldr	r3, [r7, #28]
 801b4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b4bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801b4be:	69bb      	ldr	r3, [r7, #24]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d005      	beq.n	801b4d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801b4c4:	69b8      	ldr	r0, [r7, #24]
 801b4c6:	f7fe f8cd 	bl	8019664 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801b4ca:	69bb      	ldr	r3, [r7, #24]
 801b4cc:	2200      	movs	r2, #0
 801b4ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d002      	beq.n	801b4dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	2200      	movs	r2, #0
 801b4da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801b4dc:	68fa      	ldr	r2, [r7, #12]
 801b4de:	490d      	ldr	r1, [pc, #52]	@ (801b514 <f_mount+0x88>)
 801b4e0:	69fb      	ldr	r3, [r7, #28]
 801b4e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d002      	beq.n	801b4f2 <f_mount+0x66>
 801b4ec:	79fb      	ldrb	r3, [r7, #7]
 801b4ee:	2b01      	cmp	r3, #1
 801b4f0:	d001      	beq.n	801b4f6 <f_mount+0x6a>
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	e00a      	b.n	801b50c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801b4f6:	f107 010c 	add.w	r1, r7, #12
 801b4fa:	f107 0308 	add.w	r3, r7, #8
 801b4fe:	2200      	movs	r2, #0
 801b500:	4618      	mov	r0, r3
 801b502:	f7ff fd3d 	bl	801af80 <find_volume>
 801b506:	4603      	mov	r3, r0
 801b508:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801b50a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b50c:	4618      	mov	r0, r3
 801b50e:	3720      	adds	r7, #32
 801b510:	46bd      	mov	sp, r7
 801b512:	bd80      	pop	{r7, pc}
 801b514:	20001b68 	.word	0x20001b68

0801b518 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801b518:	b580      	push	{r7, lr}
 801b51a:	b09a      	sub	sp, #104	@ 0x68
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	60f8      	str	r0, [r7, #12]
 801b520:	60b9      	str	r1, [r7, #8]
 801b522:	4613      	mov	r3, r2
 801b524:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801b526:	68fb      	ldr	r3, [r7, #12]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d101      	bne.n	801b530 <f_open+0x18>
 801b52c:	2309      	movs	r3, #9
 801b52e:	e1a9      	b.n	801b884 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801b530:	79fb      	ldrb	r3, [r7, #7]
 801b532:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b536:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801b538:	79fa      	ldrb	r2, [r7, #7]
 801b53a:	f107 0114 	add.w	r1, r7, #20
 801b53e:	f107 0308 	add.w	r3, r7, #8
 801b542:	4618      	mov	r0, r3
 801b544:	f7ff fd1c 	bl	801af80 <find_volume>
 801b548:	4603      	mov	r3, r0
 801b54a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801b54e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b552:	2b00      	cmp	r3, #0
 801b554:	f040 818d 	bne.w	801b872 <f_open+0x35a>
		dj.obj.fs = fs;
 801b558:	697b      	ldr	r3, [r7, #20]
 801b55a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801b55c:	68ba      	ldr	r2, [r7, #8]
 801b55e:	f107 0318 	add.w	r3, r7, #24
 801b562:	4611      	mov	r1, r2
 801b564:	4618      	mov	r0, r3
 801b566:	f7ff fbff 	bl	801ad68 <follow_path>
 801b56a:	4603      	mov	r3, r0
 801b56c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801b570:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b574:	2b00      	cmp	r3, #0
 801b576:	d118      	bne.n	801b5aa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801b578:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b57c:	b25b      	sxtb	r3, r3
 801b57e:	2b00      	cmp	r3, #0
 801b580:	da03      	bge.n	801b58a <f_open+0x72>
				res = FR_INVALID_NAME;
 801b582:	2306      	movs	r3, #6
 801b584:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b588:	e00f      	b.n	801b5aa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b58a:	79fb      	ldrb	r3, [r7, #7]
 801b58c:	2b01      	cmp	r3, #1
 801b58e:	bf8c      	ite	hi
 801b590:	2301      	movhi	r3, #1
 801b592:	2300      	movls	r3, #0
 801b594:	b2db      	uxtb	r3, r3
 801b596:	461a      	mov	r2, r3
 801b598:	f107 0318 	add.w	r3, r7, #24
 801b59c:	4611      	mov	r1, r2
 801b59e:	4618      	mov	r0, r3
 801b5a0:	f7fd ff18 	bl	80193d4 <chk_lock>
 801b5a4:	4603      	mov	r3, r0
 801b5a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801b5aa:	79fb      	ldrb	r3, [r7, #7]
 801b5ac:	f003 031c 	and.w	r3, r3, #28
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d07f      	beq.n	801b6b4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801b5b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d017      	beq.n	801b5ec <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801b5bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b5c0:	2b04      	cmp	r3, #4
 801b5c2:	d10e      	bne.n	801b5e2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801b5c4:	f7fd ff62 	bl	801948c <enq_lock>
 801b5c8:	4603      	mov	r3, r0
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d006      	beq.n	801b5dc <f_open+0xc4>
 801b5ce:	f107 0318 	add.w	r3, r7, #24
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	f7ff f83a 	bl	801a64c <dir_register>
 801b5d8:	4603      	mov	r3, r0
 801b5da:	e000      	b.n	801b5de <f_open+0xc6>
 801b5dc:	2312      	movs	r3, #18
 801b5de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801b5e2:	79fb      	ldrb	r3, [r7, #7]
 801b5e4:	f043 0308 	orr.w	r3, r3, #8
 801b5e8:	71fb      	strb	r3, [r7, #7]
 801b5ea:	e010      	b.n	801b60e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801b5ec:	7fbb      	ldrb	r3, [r7, #30]
 801b5ee:	f003 0311 	and.w	r3, r3, #17
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d003      	beq.n	801b5fe <f_open+0xe6>
					res = FR_DENIED;
 801b5f6:	2307      	movs	r3, #7
 801b5f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b5fc:	e007      	b.n	801b60e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801b5fe:	79fb      	ldrb	r3, [r7, #7]
 801b600:	f003 0304 	and.w	r3, r3, #4
 801b604:	2b00      	cmp	r3, #0
 801b606:	d002      	beq.n	801b60e <f_open+0xf6>
 801b608:	2308      	movs	r3, #8
 801b60a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801b60e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b612:	2b00      	cmp	r3, #0
 801b614:	d168      	bne.n	801b6e8 <f_open+0x1d0>
 801b616:	79fb      	ldrb	r3, [r7, #7]
 801b618:	f003 0308 	and.w	r3, r3, #8
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d063      	beq.n	801b6e8 <f_open+0x1d0>
				dw = GET_FATTIME();
 801b620:	f7f8 f916 	bl	8013850 <get_fattime>
 801b624:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801b626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b628:	330e      	adds	r3, #14
 801b62a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b62c:	4618      	mov	r0, r3
 801b62e:	f7fd fe27 	bl	8019280 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801b632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b634:	3316      	adds	r3, #22
 801b636:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b638:	4618      	mov	r0, r3
 801b63a:	f7fd fe21 	bl	8019280 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801b63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b640:	330b      	adds	r3, #11
 801b642:	2220      	movs	r2, #32
 801b644:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801b646:	697b      	ldr	r3, [r7, #20]
 801b648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b64a:	4611      	mov	r1, r2
 801b64c:	4618      	mov	r0, r3
 801b64e:	f7fe fd75 	bl	801a13c <ld_clust>
 801b652:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801b654:	697b      	ldr	r3, [r7, #20]
 801b656:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b658:	2200      	movs	r2, #0
 801b65a:	4618      	mov	r0, r3
 801b65c:	f7fe fd8d 	bl	801a17a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801b660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b662:	331c      	adds	r3, #28
 801b664:	2100      	movs	r1, #0
 801b666:	4618      	mov	r0, r3
 801b668:	f7fd fe0a 	bl	8019280 <st_dword>
					fs->wflag = 1;
 801b66c:	697b      	ldr	r3, [r7, #20]
 801b66e:	2201      	movs	r2, #1
 801b670:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801b672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b674:	2b00      	cmp	r3, #0
 801b676:	d037      	beq.n	801b6e8 <f_open+0x1d0>
						dw = fs->winsect;
 801b678:	697b      	ldr	r3, [r7, #20]
 801b67a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b67c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801b67e:	f107 0318 	add.w	r3, r7, #24
 801b682:	2200      	movs	r2, #0
 801b684:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b686:	4618      	mov	r0, r3
 801b688:	f7fe faa0 	bl	8019bcc <remove_chain>
 801b68c:	4603      	mov	r3, r0
 801b68e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801b692:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b696:	2b00      	cmp	r3, #0
 801b698:	d126      	bne.n	801b6e8 <f_open+0x1d0>
							res = move_window(fs, dw);
 801b69a:	697b      	ldr	r3, [r7, #20]
 801b69c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b69e:	4618      	mov	r0, r3
 801b6a0:	f7fe f848 	bl	8019734 <move_window>
 801b6a4:	4603      	mov	r3, r0
 801b6a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801b6aa:	697b      	ldr	r3, [r7, #20]
 801b6ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b6ae:	3a01      	subs	r2, #1
 801b6b0:	611a      	str	r2, [r3, #16]
 801b6b2:	e019      	b.n	801b6e8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801b6b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d115      	bne.n	801b6e8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801b6bc:	7fbb      	ldrb	r3, [r7, #30]
 801b6be:	f003 0310 	and.w	r3, r3, #16
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d003      	beq.n	801b6ce <f_open+0x1b6>
					res = FR_NO_FILE;
 801b6c6:	2304      	movs	r3, #4
 801b6c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b6cc:	e00c      	b.n	801b6e8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801b6ce:	79fb      	ldrb	r3, [r7, #7]
 801b6d0:	f003 0302 	and.w	r3, r3, #2
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d007      	beq.n	801b6e8 <f_open+0x1d0>
 801b6d8:	7fbb      	ldrb	r3, [r7, #30]
 801b6da:	f003 0301 	and.w	r3, r3, #1
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d002      	beq.n	801b6e8 <f_open+0x1d0>
						res = FR_DENIED;
 801b6e2:	2307      	movs	r3, #7
 801b6e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801b6e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d126      	bne.n	801b73e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801b6f0:	79fb      	ldrb	r3, [r7, #7]
 801b6f2:	f003 0308 	and.w	r3, r3, #8
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d003      	beq.n	801b702 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801b6fa:	79fb      	ldrb	r3, [r7, #7]
 801b6fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b700:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801b702:	697b      	ldr	r3, [r7, #20]
 801b704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801b70a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b710:	79fb      	ldrb	r3, [r7, #7]
 801b712:	2b01      	cmp	r3, #1
 801b714:	bf8c      	ite	hi
 801b716:	2301      	movhi	r3, #1
 801b718:	2300      	movls	r3, #0
 801b71a:	b2db      	uxtb	r3, r3
 801b71c:	461a      	mov	r2, r3
 801b71e:	f107 0318 	add.w	r3, r7, #24
 801b722:	4611      	mov	r1, r2
 801b724:	4618      	mov	r0, r3
 801b726:	f7fd fed3 	bl	80194d0 <inc_lock>
 801b72a:	4602      	mov	r2, r0
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801b730:	68fb      	ldr	r3, [r7, #12]
 801b732:	691b      	ldr	r3, [r3, #16]
 801b734:	2b00      	cmp	r3, #0
 801b736:	d102      	bne.n	801b73e <f_open+0x226>
 801b738:	2302      	movs	r3, #2
 801b73a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801b73e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b742:	2b00      	cmp	r3, #0
 801b744:	f040 8095 	bne.w	801b872 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801b748:	697b      	ldr	r3, [r7, #20]
 801b74a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b74c:	4611      	mov	r1, r2
 801b74e:	4618      	mov	r0, r3
 801b750:	f7fe fcf4 	bl	801a13c <ld_clust>
 801b754:	4602      	mov	r2, r0
 801b756:	68fb      	ldr	r3, [r7, #12]
 801b758:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801b75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b75c:	331c      	adds	r3, #28
 801b75e:	4618      	mov	r0, r3
 801b760:	f7fd fd50 	bl	8019204 <ld_dword>
 801b764:	4602      	mov	r2, r0
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	2200      	movs	r2, #0
 801b76e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801b770:	697a      	ldr	r2, [r7, #20]
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801b776:	697b      	ldr	r3, [r7, #20]
 801b778:	88da      	ldrh	r2, [r3, #6]
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	79fa      	ldrb	r2, [r7, #7]
 801b782:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	2200      	movs	r2, #0
 801b788:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801b78a:	68fb      	ldr	r3, [r7, #12]
 801b78c:	2200      	movs	r2, #0
 801b78e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	2200      	movs	r2, #0
 801b794:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	3330      	adds	r3, #48	@ 0x30
 801b79a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b79e:	2100      	movs	r1, #0
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	f7fd fdba 	bl	801931a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801b7a6:	79fb      	ldrb	r3, [r7, #7]
 801b7a8:	f003 0320 	and.w	r3, r3, #32
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d060      	beq.n	801b872 <f_open+0x35a>
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	68db      	ldr	r3, [r3, #12]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d05c      	beq.n	801b872 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	68da      	ldr	r2, [r3, #12]
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801b7c0:	697b      	ldr	r3, [r7, #20]
 801b7c2:	895b      	ldrh	r3, [r3, #10]
 801b7c4:	025b      	lsls	r3, r3, #9
 801b7c6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	689b      	ldr	r3, [r3, #8]
 801b7cc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	68db      	ldr	r3, [r3, #12]
 801b7d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b7d4:	e016      	b.n	801b804 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801b7d6:	68fb      	ldr	r3, [r7, #12]
 801b7d8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b7da:	4618      	mov	r0, r3
 801b7dc:	f7fe f865 	bl	80198aa <get_fat>
 801b7e0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801b7e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b7e4:	2b01      	cmp	r3, #1
 801b7e6:	d802      	bhi.n	801b7ee <f_open+0x2d6>
 801b7e8:	2302      	movs	r3, #2
 801b7ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801b7ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7f4:	d102      	bne.n	801b7fc <f_open+0x2e4>
 801b7f6:	2301      	movs	r3, #1
 801b7f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b7fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b7fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b800:	1ad3      	subs	r3, r2, r3
 801b802:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b804:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d103      	bne.n	801b814 <f_open+0x2fc>
 801b80c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b80e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b810:	429a      	cmp	r2, r3
 801b812:	d8e0      	bhi.n	801b7d6 <f_open+0x2be>
				}
				fp->clust = clst;
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b818:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801b81a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d127      	bne.n	801b872 <f_open+0x35a>
 801b822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d022      	beq.n	801b872 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801b82c:	697b      	ldr	r3, [r7, #20]
 801b82e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b830:	4618      	mov	r0, r3
 801b832:	f7fe f81b 	bl	801986c <clust2sect>
 801b836:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801b838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d103      	bne.n	801b846 <f_open+0x32e>
						res = FR_INT_ERR;
 801b83e:	2302      	movs	r3, #2
 801b840:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b844:	e015      	b.n	801b872 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801b846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b848:	0a5a      	lsrs	r2, r3, #9
 801b84a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b84c:	441a      	add	r2, r3
 801b84e:	68fb      	ldr	r3, [r7, #12]
 801b850:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801b852:	697b      	ldr	r3, [r7, #20]
 801b854:	7858      	ldrb	r0, [r3, #1]
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	6a1a      	ldr	r2, [r3, #32]
 801b860:	2301      	movs	r3, #1
 801b862:	f7fd fc59 	bl	8019118 <disk_read>
 801b866:	4603      	mov	r3, r0
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d002      	beq.n	801b872 <f_open+0x35a>
 801b86c:	2301      	movs	r3, #1
 801b86e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801b872:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b876:	2b00      	cmp	r3, #0
 801b878:	d002      	beq.n	801b880 <f_open+0x368>
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	2200      	movs	r2, #0
 801b87e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801b880:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801b884:	4618      	mov	r0, r3
 801b886:	3768      	adds	r7, #104	@ 0x68
 801b888:	46bd      	mov	sp, r7
 801b88a:	bd80      	pop	{r7, pc}

0801b88c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b08c      	sub	sp, #48	@ 0x30
 801b890:	af00      	add	r7, sp, #0
 801b892:	60f8      	str	r0, [r7, #12]
 801b894:	60b9      	str	r1, [r7, #8]
 801b896:	607a      	str	r2, [r7, #4]
 801b898:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801b89a:	68bb      	ldr	r3, [r7, #8]
 801b89c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801b89e:	683b      	ldr	r3, [r7, #0]
 801b8a0:	2200      	movs	r2, #0
 801b8a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	f107 0210 	add.w	r2, r7, #16
 801b8aa:	4611      	mov	r1, r2
 801b8ac:	4618      	mov	r0, r3
 801b8ae:	f7ff fdb7 	bl	801b420 <validate>
 801b8b2:	4603      	mov	r3, r0
 801b8b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801b8b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d107      	bne.n	801b8d0 <f_write+0x44>
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	7d5b      	ldrb	r3, [r3, #21]
 801b8c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801b8c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d002      	beq.n	801b8d6 <f_write+0x4a>
 801b8d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b8d4:	e14b      	b.n	801bb6e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	7d1b      	ldrb	r3, [r3, #20]
 801b8da:	f003 0302 	and.w	r3, r3, #2
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d101      	bne.n	801b8e6 <f_write+0x5a>
 801b8e2:	2307      	movs	r3, #7
 801b8e4:	e143      	b.n	801bb6e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	699a      	ldr	r2, [r3, #24]
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	441a      	add	r2, r3
 801b8ee:	68fb      	ldr	r3, [r7, #12]
 801b8f0:	699b      	ldr	r3, [r3, #24]
 801b8f2:	429a      	cmp	r2, r3
 801b8f4:	f080 812d 	bcs.w	801bb52 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	699b      	ldr	r3, [r3, #24]
 801b8fc:	43db      	mvns	r3, r3
 801b8fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801b900:	e127      	b.n	801bb52 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	699b      	ldr	r3, [r3, #24]
 801b906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	f040 80e3 	bne.w	801bad6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	699b      	ldr	r3, [r3, #24]
 801b914:	0a5b      	lsrs	r3, r3, #9
 801b916:	693a      	ldr	r2, [r7, #16]
 801b918:	8952      	ldrh	r2, [r2, #10]
 801b91a:	3a01      	subs	r2, #1
 801b91c:	4013      	ands	r3, r2
 801b91e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801b920:	69bb      	ldr	r3, [r7, #24]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d143      	bne.n	801b9ae <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801b926:	68fb      	ldr	r3, [r7, #12]
 801b928:	699b      	ldr	r3, [r3, #24]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d10c      	bne.n	801b948 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	689b      	ldr	r3, [r3, #8]
 801b932:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801b934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b936:	2b00      	cmp	r3, #0
 801b938:	d11a      	bne.n	801b970 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	2100      	movs	r1, #0
 801b93e:	4618      	mov	r0, r3
 801b940:	f7fe f9a9 	bl	8019c96 <create_chain>
 801b944:	62b8      	str	r0, [r7, #40]	@ 0x28
 801b946:	e013      	b.n	801b970 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d007      	beq.n	801b960 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	699b      	ldr	r3, [r3, #24]
 801b954:	4619      	mov	r1, r3
 801b956:	68f8      	ldr	r0, [r7, #12]
 801b958:	f7fe fa35 	bl	8019dc6 <clmt_clust>
 801b95c:	62b8      	str	r0, [r7, #40]	@ 0x28
 801b95e:	e007      	b.n	801b970 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801b960:	68fa      	ldr	r2, [r7, #12]
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	69db      	ldr	r3, [r3, #28]
 801b966:	4619      	mov	r1, r3
 801b968:	4610      	mov	r0, r2
 801b96a:	f7fe f994 	bl	8019c96 <create_chain>
 801b96e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801b970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b972:	2b00      	cmp	r3, #0
 801b974:	f000 80f2 	beq.w	801bb5c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b97a:	2b01      	cmp	r3, #1
 801b97c:	d104      	bne.n	801b988 <f_write+0xfc>
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	2202      	movs	r2, #2
 801b982:	755a      	strb	r2, [r3, #21]
 801b984:	2302      	movs	r3, #2
 801b986:	e0f2      	b.n	801bb6e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801b988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b98e:	d104      	bne.n	801b99a <f_write+0x10e>
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	2201      	movs	r2, #1
 801b994:	755a      	strb	r2, [r3, #21]
 801b996:	2301      	movs	r3, #1
 801b998:	e0e9      	b.n	801bb6e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b99e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	689b      	ldr	r3, [r3, #8]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d102      	bne.n	801b9ae <f_write+0x122>
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b9ac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	7d1b      	ldrb	r3, [r3, #20]
 801b9b2:	b25b      	sxtb	r3, r3
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	da18      	bge.n	801b9ea <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b9b8:	693b      	ldr	r3, [r7, #16]
 801b9ba:	7858      	ldrb	r0, [r3, #1]
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	6a1a      	ldr	r2, [r3, #32]
 801b9c6:	2301      	movs	r3, #1
 801b9c8:	f7fd fbc6 	bl	8019158 <disk_write>
 801b9cc:	4603      	mov	r3, r0
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d004      	beq.n	801b9dc <f_write+0x150>
 801b9d2:	68fb      	ldr	r3, [r7, #12]
 801b9d4:	2201      	movs	r2, #1
 801b9d6:	755a      	strb	r2, [r3, #21]
 801b9d8:	2301      	movs	r3, #1
 801b9da:	e0c8      	b.n	801bb6e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	7d1b      	ldrb	r3, [r3, #20]
 801b9e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b9e4:	b2da      	uxtb	r2, r3
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801b9ea:	693a      	ldr	r2, [r7, #16]
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	69db      	ldr	r3, [r3, #28]
 801b9f0:	4619      	mov	r1, r3
 801b9f2:	4610      	mov	r0, r2
 801b9f4:	f7fd ff3a 	bl	801986c <clust2sect>
 801b9f8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801b9fa:	697b      	ldr	r3, [r7, #20]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d104      	bne.n	801ba0a <f_write+0x17e>
 801ba00:	68fb      	ldr	r3, [r7, #12]
 801ba02:	2202      	movs	r2, #2
 801ba04:	755a      	strb	r2, [r3, #21]
 801ba06:	2302      	movs	r3, #2
 801ba08:	e0b1      	b.n	801bb6e <f_write+0x2e2>
			sect += csect;
 801ba0a:	697a      	ldr	r2, [r7, #20]
 801ba0c:	69bb      	ldr	r3, [r7, #24]
 801ba0e:	4413      	add	r3, r2
 801ba10:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	0a5b      	lsrs	r3, r3, #9
 801ba16:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801ba18:	6a3b      	ldr	r3, [r7, #32]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d03c      	beq.n	801ba98 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801ba1e:	69ba      	ldr	r2, [r7, #24]
 801ba20:	6a3b      	ldr	r3, [r7, #32]
 801ba22:	4413      	add	r3, r2
 801ba24:	693a      	ldr	r2, [r7, #16]
 801ba26:	8952      	ldrh	r2, [r2, #10]
 801ba28:	4293      	cmp	r3, r2
 801ba2a:	d905      	bls.n	801ba38 <f_write+0x1ac>
					cc = fs->csize - csect;
 801ba2c:	693b      	ldr	r3, [r7, #16]
 801ba2e:	895b      	ldrh	r3, [r3, #10]
 801ba30:	461a      	mov	r2, r3
 801ba32:	69bb      	ldr	r3, [r7, #24]
 801ba34:	1ad3      	subs	r3, r2, r3
 801ba36:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ba38:	693b      	ldr	r3, [r7, #16]
 801ba3a:	7858      	ldrb	r0, [r3, #1]
 801ba3c:	6a3b      	ldr	r3, [r7, #32]
 801ba3e:	697a      	ldr	r2, [r7, #20]
 801ba40:	69f9      	ldr	r1, [r7, #28]
 801ba42:	f7fd fb89 	bl	8019158 <disk_write>
 801ba46:	4603      	mov	r3, r0
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d004      	beq.n	801ba56 <f_write+0x1ca>
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	2201      	movs	r2, #1
 801ba50:	755a      	strb	r2, [r3, #21]
 801ba52:	2301      	movs	r3, #1
 801ba54:	e08b      	b.n	801bb6e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	6a1a      	ldr	r2, [r3, #32]
 801ba5a:	697b      	ldr	r3, [r7, #20]
 801ba5c:	1ad3      	subs	r3, r2, r3
 801ba5e:	6a3a      	ldr	r2, [r7, #32]
 801ba60:	429a      	cmp	r2, r3
 801ba62:	d915      	bls.n	801ba90 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	6a1a      	ldr	r2, [r3, #32]
 801ba6e:	697b      	ldr	r3, [r7, #20]
 801ba70:	1ad3      	subs	r3, r2, r3
 801ba72:	025b      	lsls	r3, r3, #9
 801ba74:	69fa      	ldr	r2, [r7, #28]
 801ba76:	4413      	add	r3, r2
 801ba78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ba7c:	4619      	mov	r1, r3
 801ba7e:	f7fd fc2b 	bl	80192d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	7d1b      	ldrb	r3, [r3, #20]
 801ba86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ba8a:	b2da      	uxtb	r2, r3
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801ba90:	6a3b      	ldr	r3, [r7, #32]
 801ba92:	025b      	lsls	r3, r3, #9
 801ba94:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801ba96:	e03f      	b.n	801bb18 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	6a1b      	ldr	r3, [r3, #32]
 801ba9c:	697a      	ldr	r2, [r7, #20]
 801ba9e:	429a      	cmp	r2, r3
 801baa0:	d016      	beq.n	801bad0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	699a      	ldr	r2, [r3, #24]
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801baaa:	429a      	cmp	r2, r3
 801baac:	d210      	bcs.n	801bad0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801baae:	693b      	ldr	r3, [r7, #16]
 801bab0:	7858      	ldrb	r0, [r3, #1]
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bab8:	2301      	movs	r3, #1
 801baba:	697a      	ldr	r2, [r7, #20]
 801babc:	f7fd fb2c 	bl	8019118 <disk_read>
 801bac0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d004      	beq.n	801bad0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801bac6:	68fb      	ldr	r3, [r7, #12]
 801bac8:	2201      	movs	r2, #1
 801baca:	755a      	strb	r2, [r3, #21]
 801bacc:	2301      	movs	r3, #1
 801bace:	e04e      	b.n	801bb6e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	697a      	ldr	r2, [r7, #20]
 801bad4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	699b      	ldr	r3, [r3, #24]
 801bada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bade:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801bae2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801bae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	429a      	cmp	r2, r3
 801baea:	d901      	bls.n	801baf0 <f_write+0x264>
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	699b      	ldr	r3, [r3, #24]
 801bafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bafe:	4413      	add	r3, r2
 801bb00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb02:	69f9      	ldr	r1, [r7, #28]
 801bb04:	4618      	mov	r0, r3
 801bb06:	f7fd fbe7 	bl	80192d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	7d1b      	ldrb	r3, [r3, #20]
 801bb0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801bb12:	b2da      	uxtb	r2, r3
 801bb14:	68fb      	ldr	r3, [r7, #12]
 801bb16:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801bb18:	69fa      	ldr	r2, [r7, #28]
 801bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb1c:	4413      	add	r3, r2
 801bb1e:	61fb      	str	r3, [r7, #28]
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	699a      	ldr	r2, [r3, #24]
 801bb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb26:	441a      	add	r2, r3
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	619a      	str	r2, [r3, #24]
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	68da      	ldr	r2, [r3, #12]
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	699b      	ldr	r3, [r3, #24]
 801bb34:	429a      	cmp	r2, r3
 801bb36:	bf38      	it	cc
 801bb38:	461a      	movcc	r2, r3
 801bb3a:	68fb      	ldr	r3, [r7, #12]
 801bb3c:	60da      	str	r2, [r3, #12]
 801bb3e:	683b      	ldr	r3, [r7, #0]
 801bb40:	681a      	ldr	r2, [r3, #0]
 801bb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb44:	441a      	add	r2, r3
 801bb46:	683b      	ldr	r3, [r7, #0]
 801bb48:	601a      	str	r2, [r3, #0]
 801bb4a:	687a      	ldr	r2, [r7, #4]
 801bb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb4e:	1ad3      	subs	r3, r2, r3
 801bb50:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	f47f aed4 	bne.w	801b902 <f_write+0x76>
 801bb5a:	e000      	b.n	801bb5e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801bb5c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	7d1b      	ldrb	r3, [r3, #20]
 801bb62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bb66:	b2da      	uxtb	r2, r3
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801bb6c:	2300      	movs	r3, #0
}
 801bb6e:	4618      	mov	r0, r3
 801bb70:	3730      	adds	r7, #48	@ 0x30
 801bb72:	46bd      	mov	sp, r7
 801bb74:	bd80      	pop	{r7, pc}

0801bb76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801bb76:	b580      	push	{r7, lr}
 801bb78:	b086      	sub	sp, #24
 801bb7a:	af00      	add	r7, sp, #0
 801bb7c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	f107 0208 	add.w	r2, r7, #8
 801bb84:	4611      	mov	r1, r2
 801bb86:	4618      	mov	r0, r3
 801bb88:	f7ff fc4a 	bl	801b420 <validate>
 801bb8c:	4603      	mov	r3, r0
 801bb8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bb90:	7dfb      	ldrb	r3, [r7, #23]
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d168      	bne.n	801bc68 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	7d1b      	ldrb	r3, [r3, #20]
 801bb9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d062      	beq.n	801bc68 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	7d1b      	ldrb	r3, [r3, #20]
 801bba6:	b25b      	sxtb	r3, r3
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	da15      	bge.n	801bbd8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801bbac:	68bb      	ldr	r3, [r7, #8]
 801bbae:	7858      	ldrb	r0, [r3, #1]
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	6a1a      	ldr	r2, [r3, #32]
 801bbba:	2301      	movs	r3, #1
 801bbbc:	f7fd facc 	bl	8019158 <disk_write>
 801bbc0:	4603      	mov	r3, r0
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d001      	beq.n	801bbca <f_sync+0x54>
 801bbc6:	2301      	movs	r3, #1
 801bbc8:	e04f      	b.n	801bc6a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	7d1b      	ldrb	r3, [r3, #20]
 801bbce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bbd2:	b2da      	uxtb	r2, r3
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801bbd8:	f7f7 fe3a 	bl	8013850 <get_fattime>
 801bbdc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801bbde:	68ba      	ldr	r2, [r7, #8]
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bbe4:	4619      	mov	r1, r3
 801bbe6:	4610      	mov	r0, r2
 801bbe8:	f7fd fda4 	bl	8019734 <move_window>
 801bbec:	4603      	mov	r3, r0
 801bbee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801bbf0:	7dfb      	ldrb	r3, [r7, #23]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d138      	bne.n	801bc68 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bbfa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	330b      	adds	r3, #11
 801bc00:	781a      	ldrb	r2, [r3, #0]
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	330b      	adds	r3, #11
 801bc06:	f042 0220 	orr.w	r2, r2, #32
 801bc0a:	b2d2      	uxtb	r2, r2
 801bc0c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	6818      	ldr	r0, [r3, #0]
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	689b      	ldr	r3, [r3, #8]
 801bc16:	461a      	mov	r2, r3
 801bc18:	68f9      	ldr	r1, [r7, #12]
 801bc1a:	f7fe faae 	bl	801a17a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	f103 021c 	add.w	r2, r3, #28
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	68db      	ldr	r3, [r3, #12]
 801bc28:	4619      	mov	r1, r3
 801bc2a:	4610      	mov	r0, r2
 801bc2c:	f7fd fb28 	bl	8019280 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801bc30:	68fb      	ldr	r3, [r7, #12]
 801bc32:	3316      	adds	r3, #22
 801bc34:	6939      	ldr	r1, [r7, #16]
 801bc36:	4618      	mov	r0, r3
 801bc38:	f7fd fb22 	bl	8019280 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	3312      	adds	r3, #18
 801bc40:	2100      	movs	r1, #0
 801bc42:	4618      	mov	r0, r3
 801bc44:	f7fd fb01 	bl	801924a <st_word>
					fs->wflag = 1;
 801bc48:	68bb      	ldr	r3, [r7, #8]
 801bc4a:	2201      	movs	r2, #1
 801bc4c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801bc4e:	68bb      	ldr	r3, [r7, #8]
 801bc50:	4618      	mov	r0, r3
 801bc52:	f7fd fd9d 	bl	8019790 <sync_fs>
 801bc56:	4603      	mov	r3, r0
 801bc58:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	7d1b      	ldrb	r3, [r3, #20]
 801bc5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bc62:	b2da      	uxtb	r2, r3
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801bc68:	7dfb      	ldrb	r3, [r7, #23]
}
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	3718      	adds	r7, #24
 801bc6e:	46bd      	mov	sp, r7
 801bc70:	bd80      	pop	{r7, pc}

0801bc72 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801bc72:	b580      	push	{r7, lr}
 801bc74:	b084      	sub	sp, #16
 801bc76:	af00      	add	r7, sp, #0
 801bc78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801bc7a:	6878      	ldr	r0, [r7, #4]
 801bc7c:	f7ff ff7b 	bl	801bb76 <f_sync>
 801bc80:	4603      	mov	r3, r0
 801bc82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801bc84:	7bfb      	ldrb	r3, [r7, #15]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d118      	bne.n	801bcbc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	f107 0208 	add.w	r2, r7, #8
 801bc90:	4611      	mov	r1, r2
 801bc92:	4618      	mov	r0, r3
 801bc94:	f7ff fbc4 	bl	801b420 <validate>
 801bc98:	4603      	mov	r3, r0
 801bc9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801bc9c:	7bfb      	ldrb	r3, [r7, #15]
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d10c      	bne.n	801bcbc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	691b      	ldr	r3, [r3, #16]
 801bca6:	4618      	mov	r0, r3
 801bca8:	f7fd fca0 	bl	80195ec <dec_lock>
 801bcac:	4603      	mov	r3, r0
 801bcae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801bcb0:	7bfb      	ldrb	r3, [r7, #15]
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d102      	bne.n	801bcbc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	2200      	movs	r2, #0
 801bcba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801bcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	3710      	adds	r7, #16
 801bcc2:	46bd      	mov	sp, r7
 801bcc4:	bd80      	pop	{r7, pc}

0801bcc6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801bcc6:	b580      	push	{r7, lr}
 801bcc8:	b090      	sub	sp, #64	@ 0x40
 801bcca:	af00      	add	r7, sp, #0
 801bccc:	6078      	str	r0, [r7, #4]
 801bcce:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801bcd0:	f107 0108 	add.w	r1, r7, #8
 801bcd4:	1d3b      	adds	r3, r7, #4
 801bcd6:	2200      	movs	r2, #0
 801bcd8:	4618      	mov	r0, r3
 801bcda:	f7ff f951 	bl	801af80 <find_volume>
 801bcde:	4603      	mov	r3, r0
 801bce0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801bce4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d11f      	bne.n	801bd2c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801bcec:	687a      	ldr	r2, [r7, #4]
 801bcee:	f107 0308 	add.w	r3, r7, #8
 801bcf2:	4611      	mov	r1, r2
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	f7ff f837 	bl	801ad68 <follow_path>
 801bcfa:	4603      	mov	r3, r0
 801bcfc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801bd00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d111      	bne.n	801bd2c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801bd08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bd0c:	b25b      	sxtb	r3, r3
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	da03      	bge.n	801bd1a <f_stat+0x54>
				res = FR_INVALID_NAME;
 801bd12:	2306      	movs	r3, #6
 801bd14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801bd18:	e008      	b.n	801bd2c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801bd1a:	683b      	ldr	r3, [r7, #0]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d005      	beq.n	801bd2c <f_stat+0x66>
 801bd20:	f107 0308 	add.w	r3, r7, #8
 801bd24:	6839      	ldr	r1, [r7, #0]
 801bd26:	4618      	mov	r0, r3
 801bd28:	f7fe fd88 	bl	801a83c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801bd2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801bd30:	4618      	mov	r0, r3
 801bd32:	3740      	adds	r7, #64	@ 0x40
 801bd34:	46bd      	mov	sp, r7
 801bd36:	bd80      	pop	{r7, pc}

0801bd38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801bd38:	b480      	push	{r7}
 801bd3a:	b087      	sub	sp, #28
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	60f8      	str	r0, [r7, #12]
 801bd40:	60b9      	str	r1, [r7, #8]
 801bd42:	4613      	mov	r3, r2
 801bd44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801bd46:	2301      	movs	r3, #1
 801bd48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801bd4a:	2300      	movs	r3, #0
 801bd4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801bd4e:	4b1f      	ldr	r3, [pc, #124]	@ (801bdcc <FATFS_LinkDriverEx+0x94>)
 801bd50:	7a5b      	ldrb	r3, [r3, #9]
 801bd52:	b2db      	uxtb	r3, r3
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d131      	bne.n	801bdbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801bd58:	4b1c      	ldr	r3, [pc, #112]	@ (801bdcc <FATFS_LinkDriverEx+0x94>)
 801bd5a:	7a5b      	ldrb	r3, [r3, #9]
 801bd5c:	b2db      	uxtb	r3, r3
 801bd5e:	461a      	mov	r2, r3
 801bd60:	4b1a      	ldr	r3, [pc, #104]	@ (801bdcc <FATFS_LinkDriverEx+0x94>)
 801bd62:	2100      	movs	r1, #0
 801bd64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801bd66:	4b19      	ldr	r3, [pc, #100]	@ (801bdcc <FATFS_LinkDriverEx+0x94>)
 801bd68:	7a5b      	ldrb	r3, [r3, #9]
 801bd6a:	b2db      	uxtb	r3, r3
 801bd6c:	4a17      	ldr	r2, [pc, #92]	@ (801bdcc <FATFS_LinkDriverEx+0x94>)
 801bd6e:	009b      	lsls	r3, r3, #2
 801bd70:	4413      	add	r3, r2
 801bd72:	68fa      	ldr	r2, [r7, #12]
 801bd74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801bd76:	4b15      	ldr	r3, [pc, #84]	@ (801bdcc <FATFS_LinkDriverEx+0x94>)
 801bd78:	7a5b      	ldrb	r3, [r3, #9]
 801bd7a:	b2db      	uxtb	r3, r3
 801bd7c:	461a      	mov	r2, r3
 801bd7e:	4b13      	ldr	r3, [pc, #76]	@ (801bdcc <FATFS_LinkDriverEx+0x94>)
 801bd80:	4413      	add	r3, r2
 801bd82:	79fa      	ldrb	r2, [r7, #7]
 801bd84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801bd86:	4b11      	ldr	r3, [pc, #68]	@ (801bdcc <FATFS_LinkDriverEx+0x94>)
 801bd88:	7a5b      	ldrb	r3, [r3, #9]
 801bd8a:	b2db      	uxtb	r3, r3
 801bd8c:	1c5a      	adds	r2, r3, #1
 801bd8e:	b2d1      	uxtb	r1, r2
 801bd90:	4a0e      	ldr	r2, [pc, #56]	@ (801bdcc <FATFS_LinkDriverEx+0x94>)
 801bd92:	7251      	strb	r1, [r2, #9]
 801bd94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801bd96:	7dbb      	ldrb	r3, [r7, #22]
 801bd98:	3330      	adds	r3, #48	@ 0x30
 801bd9a:	b2da      	uxtb	r2, r3
 801bd9c:	68bb      	ldr	r3, [r7, #8]
 801bd9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	3301      	adds	r3, #1
 801bda4:	223a      	movs	r2, #58	@ 0x3a
 801bda6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801bda8:	68bb      	ldr	r3, [r7, #8]
 801bdaa:	3302      	adds	r3, #2
 801bdac:	222f      	movs	r2, #47	@ 0x2f
 801bdae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801bdb0:	68bb      	ldr	r3, [r7, #8]
 801bdb2:	3303      	adds	r3, #3
 801bdb4:	2200      	movs	r2, #0
 801bdb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801bdb8:	2300      	movs	r3, #0
 801bdba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801bdbc:	7dfb      	ldrb	r3, [r7, #23]
}
 801bdbe:	4618      	mov	r0, r3
 801bdc0:	371c      	adds	r7, #28
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdc8:	4770      	bx	lr
 801bdca:	bf00      	nop
 801bdcc:	20001d90 	.word	0x20001d90

0801bdd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b082      	sub	sp, #8
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
 801bdd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801bdda:	2200      	movs	r2, #0
 801bddc:	6839      	ldr	r1, [r7, #0]
 801bdde:	6878      	ldr	r0, [r7, #4]
 801bde0:	f7ff ffaa 	bl	801bd38 <FATFS_LinkDriverEx>
 801bde4:	4603      	mov	r3, r0
}
 801bde6:	4618      	mov	r0, r3
 801bde8:	3708      	adds	r7, #8
 801bdea:	46bd      	mov	sp, r7
 801bdec:	bd80      	pop	{r7, pc}
	...

0801bdf0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801bdf0:	b480      	push	{r7}
 801bdf2:	b085      	sub	sp, #20
 801bdf4:	af00      	add	r7, sp, #0
 801bdf6:	4603      	mov	r3, r0
 801bdf8:	6039      	str	r1, [r7, #0]
 801bdfa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801bdfc:	88fb      	ldrh	r3, [r7, #6]
 801bdfe:	2b7f      	cmp	r3, #127	@ 0x7f
 801be00:	d802      	bhi.n	801be08 <ff_convert+0x18>
		c = chr;
 801be02:	88fb      	ldrh	r3, [r7, #6]
 801be04:	81fb      	strh	r3, [r7, #14]
 801be06:	e025      	b.n	801be54 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801be08:	683b      	ldr	r3, [r7, #0]
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d00b      	beq.n	801be26 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801be0e:	88fb      	ldrh	r3, [r7, #6]
 801be10:	2bff      	cmp	r3, #255	@ 0xff
 801be12:	d805      	bhi.n	801be20 <ff_convert+0x30>
 801be14:	88fb      	ldrh	r3, [r7, #6]
 801be16:	3b80      	subs	r3, #128	@ 0x80
 801be18:	4a12      	ldr	r2, [pc, #72]	@ (801be64 <ff_convert+0x74>)
 801be1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801be1e:	e000      	b.n	801be22 <ff_convert+0x32>
 801be20:	2300      	movs	r3, #0
 801be22:	81fb      	strh	r3, [r7, #14]
 801be24:	e016      	b.n	801be54 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801be26:	2300      	movs	r3, #0
 801be28:	81fb      	strh	r3, [r7, #14]
 801be2a:	e009      	b.n	801be40 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801be2c:	89fb      	ldrh	r3, [r7, #14]
 801be2e:	4a0d      	ldr	r2, [pc, #52]	@ (801be64 <ff_convert+0x74>)
 801be30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801be34:	88fa      	ldrh	r2, [r7, #6]
 801be36:	429a      	cmp	r2, r3
 801be38:	d006      	beq.n	801be48 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801be3a:	89fb      	ldrh	r3, [r7, #14]
 801be3c:	3301      	adds	r3, #1
 801be3e:	81fb      	strh	r3, [r7, #14]
 801be40:	89fb      	ldrh	r3, [r7, #14]
 801be42:	2b7f      	cmp	r3, #127	@ 0x7f
 801be44:	d9f2      	bls.n	801be2c <ff_convert+0x3c>
 801be46:	e000      	b.n	801be4a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801be48:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801be4a:	89fb      	ldrh	r3, [r7, #14]
 801be4c:	3380      	adds	r3, #128	@ 0x80
 801be4e:	b29b      	uxth	r3, r3
 801be50:	b2db      	uxtb	r3, r3
 801be52:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801be54:	89fb      	ldrh	r3, [r7, #14]
}
 801be56:	4618      	mov	r0, r3
 801be58:	3714      	adds	r7, #20
 801be5a:	46bd      	mov	sp, r7
 801be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be60:	4770      	bx	lr
 801be62:	bf00      	nop
 801be64:	08024f68 	.word	0x08024f68

0801be68 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801be68:	b480      	push	{r7}
 801be6a:	b087      	sub	sp, #28
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	4603      	mov	r3, r0
 801be70:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801be72:	88fb      	ldrh	r3, [r7, #6]
 801be74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801be78:	d201      	bcs.n	801be7e <ff_wtoupper+0x16>
 801be7a:	4b3e      	ldr	r3, [pc, #248]	@ (801bf74 <ff_wtoupper+0x10c>)
 801be7c:	e000      	b.n	801be80 <ff_wtoupper+0x18>
 801be7e:	4b3e      	ldr	r3, [pc, #248]	@ (801bf78 <ff_wtoupper+0x110>)
 801be80:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801be82:	697b      	ldr	r3, [r7, #20]
 801be84:	1c9a      	adds	r2, r3, #2
 801be86:	617a      	str	r2, [r7, #20]
 801be88:	881b      	ldrh	r3, [r3, #0]
 801be8a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801be8c:	8a7b      	ldrh	r3, [r7, #18]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d068      	beq.n	801bf64 <ff_wtoupper+0xfc>
 801be92:	88fa      	ldrh	r2, [r7, #6]
 801be94:	8a7b      	ldrh	r3, [r7, #18]
 801be96:	429a      	cmp	r2, r3
 801be98:	d364      	bcc.n	801bf64 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801be9a:	697b      	ldr	r3, [r7, #20]
 801be9c:	1c9a      	adds	r2, r3, #2
 801be9e:	617a      	str	r2, [r7, #20]
 801bea0:	881b      	ldrh	r3, [r3, #0]
 801bea2:	823b      	strh	r3, [r7, #16]
 801bea4:	8a3b      	ldrh	r3, [r7, #16]
 801bea6:	0a1b      	lsrs	r3, r3, #8
 801bea8:	81fb      	strh	r3, [r7, #14]
 801beaa:	8a3b      	ldrh	r3, [r7, #16]
 801beac:	b2db      	uxtb	r3, r3
 801beae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801beb0:	88fa      	ldrh	r2, [r7, #6]
 801beb2:	8a79      	ldrh	r1, [r7, #18]
 801beb4:	8a3b      	ldrh	r3, [r7, #16]
 801beb6:	440b      	add	r3, r1
 801beb8:	429a      	cmp	r2, r3
 801beba:	da49      	bge.n	801bf50 <ff_wtoupper+0xe8>
			switch (cmd) {
 801bebc:	89fb      	ldrh	r3, [r7, #14]
 801bebe:	2b08      	cmp	r3, #8
 801bec0:	d84f      	bhi.n	801bf62 <ff_wtoupper+0xfa>
 801bec2:	a201      	add	r2, pc, #4	@ (adr r2, 801bec8 <ff_wtoupper+0x60>)
 801bec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bec8:	0801beed 	.word	0x0801beed
 801becc:	0801beff 	.word	0x0801beff
 801bed0:	0801bf15 	.word	0x0801bf15
 801bed4:	0801bf1d 	.word	0x0801bf1d
 801bed8:	0801bf25 	.word	0x0801bf25
 801bedc:	0801bf2d 	.word	0x0801bf2d
 801bee0:	0801bf35 	.word	0x0801bf35
 801bee4:	0801bf3d 	.word	0x0801bf3d
 801bee8:	0801bf45 	.word	0x0801bf45
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801beec:	88fa      	ldrh	r2, [r7, #6]
 801beee:	8a7b      	ldrh	r3, [r7, #18]
 801bef0:	1ad3      	subs	r3, r2, r3
 801bef2:	005b      	lsls	r3, r3, #1
 801bef4:	697a      	ldr	r2, [r7, #20]
 801bef6:	4413      	add	r3, r2
 801bef8:	881b      	ldrh	r3, [r3, #0]
 801befa:	80fb      	strh	r3, [r7, #6]
 801befc:	e027      	b.n	801bf4e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801befe:	88fa      	ldrh	r2, [r7, #6]
 801bf00:	8a7b      	ldrh	r3, [r7, #18]
 801bf02:	1ad3      	subs	r3, r2, r3
 801bf04:	b29b      	uxth	r3, r3
 801bf06:	f003 0301 	and.w	r3, r3, #1
 801bf0a:	b29b      	uxth	r3, r3
 801bf0c:	88fa      	ldrh	r2, [r7, #6]
 801bf0e:	1ad3      	subs	r3, r2, r3
 801bf10:	80fb      	strh	r3, [r7, #6]
 801bf12:	e01c      	b.n	801bf4e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801bf14:	88fb      	ldrh	r3, [r7, #6]
 801bf16:	3b10      	subs	r3, #16
 801bf18:	80fb      	strh	r3, [r7, #6]
 801bf1a:	e018      	b.n	801bf4e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801bf1c:	88fb      	ldrh	r3, [r7, #6]
 801bf1e:	3b20      	subs	r3, #32
 801bf20:	80fb      	strh	r3, [r7, #6]
 801bf22:	e014      	b.n	801bf4e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801bf24:	88fb      	ldrh	r3, [r7, #6]
 801bf26:	3b30      	subs	r3, #48	@ 0x30
 801bf28:	80fb      	strh	r3, [r7, #6]
 801bf2a:	e010      	b.n	801bf4e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801bf2c:	88fb      	ldrh	r3, [r7, #6]
 801bf2e:	3b1a      	subs	r3, #26
 801bf30:	80fb      	strh	r3, [r7, #6]
 801bf32:	e00c      	b.n	801bf4e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801bf34:	88fb      	ldrh	r3, [r7, #6]
 801bf36:	3308      	adds	r3, #8
 801bf38:	80fb      	strh	r3, [r7, #6]
 801bf3a:	e008      	b.n	801bf4e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801bf3c:	88fb      	ldrh	r3, [r7, #6]
 801bf3e:	3b50      	subs	r3, #80	@ 0x50
 801bf40:	80fb      	strh	r3, [r7, #6]
 801bf42:	e004      	b.n	801bf4e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801bf44:	88fb      	ldrh	r3, [r7, #6]
 801bf46:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801bf4a:	80fb      	strh	r3, [r7, #6]
 801bf4c:	bf00      	nop
			}
			break;
 801bf4e:	e008      	b.n	801bf62 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801bf50:	89fb      	ldrh	r3, [r7, #14]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d195      	bne.n	801be82 <ff_wtoupper+0x1a>
 801bf56:	8a3b      	ldrh	r3, [r7, #16]
 801bf58:	005b      	lsls	r3, r3, #1
 801bf5a:	697a      	ldr	r2, [r7, #20]
 801bf5c:	4413      	add	r3, r2
 801bf5e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801bf60:	e78f      	b.n	801be82 <ff_wtoupper+0x1a>
			break;
 801bf62:	bf00      	nop
	}

	return chr;
 801bf64:	88fb      	ldrh	r3, [r7, #6]
}
 801bf66:	4618      	mov	r0, r3
 801bf68:	371c      	adds	r7, #28
 801bf6a:	46bd      	mov	sp, r7
 801bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf70:	4770      	bx	lr
 801bf72:	bf00      	nop
 801bf74:	08025068 	.word	0x08025068
 801bf78:	0802525c 	.word	0x0802525c

0801bf7c <Mount_SD>:
//			printf("Successfully saved to SD Card\n");
//			}
//	}
//}

FRESULT Mount_SD(const TCHAR *path) {
 801bf7c:	b580      	push	{r7, lr}
 801bf7e:	b082      	sub	sp, #8
 801bf80:	af00      	add	r7, sp, #0
 801bf82:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 801bf84:	2201      	movs	r2, #1
 801bf86:	6879      	ldr	r1, [r7, #4]
 801bf88:	480e      	ldr	r0, [pc, #56]	@ (801bfc4 <Mount_SD+0x48>)
 801bf8a:	f7ff fa7f 	bl	801b48c <f_mount>
 801bf8e:	4603      	mov	r3, r0
 801bf90:	461a      	mov	r2, r3
 801bf92:	4b0d      	ldr	r3, [pc, #52]	@ (801bfc8 <Mount_SD+0x4c>)
 801bf94:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801bf96:	4b0c      	ldr	r3, [pc, #48]	@ (801bfc8 <Mount_SD+0x4c>)
 801bf98:	781b      	ldrb	r3, [r3, #0]
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d006      	beq.n	801bfac <Mount_SD+0x30>
		if (sdioPrints)
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d009      	beq.n	801bfb8 <Mount_SD+0x3c>
			printf("ERROR!!! in mounting SD CARD...\n");
 801bfa4:	4809      	ldr	r0, [pc, #36]	@ (801bfcc <Mount_SD+0x50>)
 801bfa6:	f002 fd03 	bl	801e9b0 <puts>
 801bfaa:	e005      	b.n	801bfb8 <Mount_SD+0x3c>
	} else if (sdioPrints)
 801bfac:	2300      	movs	r3, #0
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d002      	beq.n	801bfb8 <Mount_SD+0x3c>
		printf("SD CARD mounted successfully...\n");
 801bfb2:	4807      	ldr	r0, [pc, #28]	@ (801bfd0 <Mount_SD+0x54>)
 801bfb4:	f002 fcfc 	bl	801e9b0 <puts>

	return fresult;
 801bfb8:	4b03      	ldr	r3, [pc, #12]	@ (801bfc8 <Mount_SD+0x4c>)
 801bfba:	781b      	ldrb	r3, [r3, #0]
}
 801bfbc:	4618      	mov	r0, r3
 801bfbe:	3708      	adds	r7, #8
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bd80      	pop	{r7, pc}
 801bfc4:	20001d9c 	.word	0x20001d9c
 801bfc8:	20002318 	.word	0x20002318
 801bfcc:	080245f4 	.word	0x080245f4
 801bfd0:	08024614 	.word	0x08024614

0801bfd4 <Unmount_SD>:

void Unmount_SD(const TCHAR *path) {
 801bfd4:	b580      	push	{r7, lr}
 801bfd6:	b082      	sub	sp, #8
 801bfd8:	af00      	add	r7, sp, #0
 801bfda:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 801bfdc:	2201      	movs	r2, #1
 801bfde:	6879      	ldr	r1, [r7, #4]
 801bfe0:	2000      	movs	r0, #0
 801bfe2:	f7ff fa53 	bl	801b48c <f_mount>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	461a      	mov	r2, r3
 801bfea:	4b0b      	ldr	r3, [pc, #44]	@ (801c018 <Unmount_SD+0x44>)
 801bfec:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801bfee:	4b0a      	ldr	r3, [pc, #40]	@ (801c018 <Unmount_SD+0x44>)
 801bff0:	781b      	ldrb	r3, [r3, #0]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d106      	bne.n	801c004 <Unmount_SD+0x30>
		if (sdioPrints)
 801bff6:	2300      	movs	r3, #0
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d009      	beq.n	801c010 <Unmount_SD+0x3c>
			printf("SD CARD UNMOUNTED successfully...\n\n");
 801bffc:	4807      	ldr	r0, [pc, #28]	@ (801c01c <Unmount_SD+0x48>)
 801bffe:	f002 fcd7 	bl	801e9b0 <puts>
	} else if (sdioPrints)
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 801c002:	e005      	b.n	801c010 <Unmount_SD+0x3c>
	} else if (sdioPrints)
 801c004:	2300      	movs	r3, #0
 801c006:	2b00      	cmp	r3, #0
 801c008:	d002      	beq.n	801c010 <Unmount_SD+0x3c>
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 801c00a:	4805      	ldr	r0, [pc, #20]	@ (801c020 <Unmount_SD+0x4c>)
 801c00c:	f002 fcd0 	bl	801e9b0 <puts>
}
 801c010:	bf00      	nop
 801c012:	3708      	adds	r7, #8
 801c014:	46bd      	mov	sp, r7
 801c016:	bd80      	pop	{r7, pc}
 801c018:	20002318 	.word	0x20002318
 801c01c:	08024634 	.word	0x08024634
 801c020:	08024658 	.word	0x08024658

0801c024 <Create_File>:
		}
		return fresult;
	}
}

FRESULT Create_File(char *name) {
 801c024:	b580      	push	{r7, lr}
 801c026:	b0a8      	sub	sp, #160	@ 0xa0
 801c028:	af00      	add	r7, sp, #0
 801c02a:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat(name, &fno);
 801c02c:	4941      	ldr	r1, [pc, #260]	@ (801c134 <Create_File+0x110>)
 801c02e:	6878      	ldr	r0, [r7, #4]
 801c030:	f7ff fe49 	bl	801bcc6 <f_stat>
 801c034:	4603      	mov	r3, r0
 801c036:	461a      	mov	r2, r3
 801c038:	4b3f      	ldr	r3, [pc, #252]	@ (801c138 <Create_File+0x114>)
 801c03a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c03c:	4b3e      	ldr	r3, [pc, #248]	@ (801c138 <Create_File+0x114>)
 801c03e:	781b      	ldrb	r3, [r3, #0]
 801c040:	2b00      	cmp	r3, #0
 801c042:	d114      	bne.n	801c06e <Create_File+0x4a>
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801c044:	4b3d      	ldr	r3, [pc, #244]	@ (801c13c <Create_File+0x118>)
 801c046:	2201      	movs	r2, #1
 801c048:	701a      	strb	r2, [r3, #0]

		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",
 801c04a:	f107 0308 	add.w	r3, r7, #8
 801c04e:	687a      	ldr	r2, [r7, #4]
 801c050:	493b      	ldr	r1, [pc, #236]	@ (801c140 <Create_File+0x11c>)
 801c052:	4618      	mov	r0, r3
 801c054:	f002 fcb4 	bl	801e9c0 <siprintf>
				name);
		if (sdioPrints)
 801c058:	2300      	movs	r3, #0
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d004      	beq.n	801c068 <Create_File+0x44>
			printf(buf);
 801c05e:	f107 0308 	add.w	r3, r7, #8
 801c062:	4618      	mov	r0, r3
 801c064:	f002 fc3c 	bl	801e8e0 <iprintf>

		return fresult;
 801c068:	4b33      	ldr	r3, [pc, #204]	@ (801c138 <Create_File+0x114>)
 801c06a:	781b      	ldrb	r3, [r3, #0]
 801c06c:	e05d      	b.n	801c12a <Create_File+0x106>
	} else {
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 801c06e:	220b      	movs	r2, #11
 801c070:	6879      	ldr	r1, [r7, #4]
 801c072:	4834      	ldr	r0, [pc, #208]	@ (801c144 <Create_File+0x120>)
 801c074:	f7ff fa50 	bl	801b518 <f_open>
 801c078:	4603      	mov	r3, r0
 801c07a:	461a      	mov	r2, r3
 801c07c:	4b2e      	ldr	r3, [pc, #184]	@ (801c138 <Create_File+0x114>)
 801c07e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c080:	4b2d      	ldr	r3, [pc, #180]	@ (801c138 <Create_File+0x114>)
 801c082:	781b      	ldrb	r3, [r3, #0]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d013      	beq.n	801c0b0 <Create_File+0x8c>

			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n", fresult,
 801c088:	4b2b      	ldr	r3, [pc, #172]	@ (801c138 <Create_File+0x114>)
 801c08a:	781b      	ldrb	r3, [r3, #0]
 801c08c:	461a      	mov	r2, r3
 801c08e:	f107 0008 	add.w	r0, r7, #8
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	492c      	ldr	r1, [pc, #176]	@ (801c148 <Create_File+0x124>)
 801c096:	f002 fc93 	bl	801e9c0 <siprintf>
					name);
			if (sdioPrints)
 801c09a:	2300      	movs	r3, #0
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d004      	beq.n	801c0aa <Create_File+0x86>
				printf(buf);
 801c0a0:	f107 0308 	add.w	r3, r7, #8
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	f002 fc1b 	bl	801e8e0 <iprintf>

			return fresult;
 801c0aa:	4b23      	ldr	r3, [pc, #140]	@ (801c138 <Create_File+0x114>)
 801c0ac:	781b      	ldrb	r3, [r3, #0]
 801c0ae:	e03c      	b.n	801c12a <Create_File+0x106>
		} else {

			sprintf(buf,
 801c0b0:	f107 0308 	add.w	r3, r7, #8
 801c0b4:	687a      	ldr	r2, [r7, #4]
 801c0b6:	4925      	ldr	r1, [pc, #148]	@ (801c14c <Create_File+0x128>)
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	f002 fc81 	bl	801e9c0 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			if (sdioPrints)
 801c0be:	2300      	movs	r3, #0
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d004      	beq.n	801c0ce <Create_File+0xaa>
				printf(buf);
 801c0c4:	f107 0308 	add.w	r3, r7, #8
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	f002 fc09 	bl	801e8e0 <iprintf>

		}

		fresult = f_close(&fil);
 801c0ce:	481d      	ldr	r0, [pc, #116]	@ (801c144 <Create_File+0x120>)
 801c0d0:	f7ff fdcf 	bl	801bc72 <f_close>
 801c0d4:	4603      	mov	r3, r0
 801c0d6:	461a      	mov	r2, r3
 801c0d8:	4b17      	ldr	r3, [pc, #92]	@ (801c138 <Create_File+0x114>)
 801c0da:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c0dc:	4b16      	ldr	r3, [pc, #88]	@ (801c138 <Create_File+0x114>)
 801c0de:	781b      	ldrb	r3, [r3, #0]
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d011      	beq.n	801c108 <Create_File+0xe4>

			sprintf(buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801c0e4:	4b14      	ldr	r3, [pc, #80]	@ (801c138 <Create_File+0x114>)
 801c0e6:	781b      	ldrb	r3, [r3, #0]
 801c0e8:	461a      	mov	r2, r3
 801c0ea:	f107 0008 	add.w	r0, r7, #8
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	4917      	ldr	r1, [pc, #92]	@ (801c150 <Create_File+0x12c>)
 801c0f2:	f002 fc65 	bl	801e9c0 <siprintf>
			if (sdioPrints)
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d014      	beq.n	801c126 <Create_File+0x102>
				printf(buf);
 801c0fc:	f107 0308 	add.w	r3, r7, #8
 801c100:	4618      	mov	r0, r3
 801c102:	f002 fbed 	bl	801e8e0 <iprintf>
 801c106:	e00e      	b.n	801c126 <Create_File+0x102>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c108:	f107 0308 	add.w	r3, r7, #8
 801c10c:	687a      	ldr	r2, [r7, #4]
 801c10e:	4911      	ldr	r1, [pc, #68]	@ (801c154 <Create_File+0x130>)
 801c110:	4618      	mov	r0, r3
 801c112:	f002 fc55 	bl	801e9c0 <siprintf>
			if (sdioPrints)
 801c116:	2300      	movs	r3, #0
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d004      	beq.n	801c126 <Create_File+0x102>
				printf(buf);
 801c11c:	f107 0308 	add.w	r3, r7, #8
 801c120:	4618      	mov	r0, r3
 801c122:	f002 fbdd 	bl	801e8e0 <iprintf>

		}
	}
	return fresult;
 801c126:	4b04      	ldr	r3, [pc, #16]	@ (801c138 <Create_File+0x114>)
 801c128:	781b      	ldrb	r3, [r3, #0]
}
 801c12a:	4618      	mov	r0, r3
 801c12c:	37a0      	adds	r7, #160	@ 0xa0
 801c12e:	46bd      	mov	sp, r7
 801c130:	bd80      	pop	{r7, pc}
 801c132:	bf00      	nop
 801c134:	20002200 	.word	0x20002200
 801c138:	20002318 	.word	0x20002318
 801c13c:	20002321 	.word	0x20002321
 801c140:	0802481c 	.word	0x0802481c
 801c144:	20001fd0 	.word	0x20001fd0
 801c148:	08024850 	.word	0x08024850
 801c14c:	08024878 	.word	0x08024878
 801c150:	080248b8 	.word	0x080248b8
 801c154:	080247fc 	.word	0x080247fc

0801c158 <Update_File>:

FRESULT Update_File(char *name, char *data) {
 801c158:	b580      	push	{r7, lr}
 801c15a:	b0a8      	sub	sp, #160	@ 0xa0
 801c15c:	af00      	add	r7, sp, #0
 801c15e:	6078      	str	r0, [r7, #4]
 801c160:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 801c162:	4951      	ldr	r1, [pc, #324]	@ (801c2a8 <Update_File+0x150>)
 801c164:	6878      	ldr	r0, [r7, #4]
 801c166:	f7ff fdae 	bl	801bcc6 <f_stat>
 801c16a:	4603      	mov	r3, r0
 801c16c:	461a      	mov	r2, r3
 801c16e:	4b4f      	ldr	r3, [pc, #316]	@ (801c2ac <Update_File+0x154>)
 801c170:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c172:	4b4e      	ldr	r3, [pc, #312]	@ (801c2ac <Update_File+0x154>)
 801c174:	781b      	ldrb	r3, [r3, #0]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d011      	beq.n	801c19e <Update_File+0x46>

		sprintf(buf, "ERROR!!! *%s* does not exists\n", name);
 801c17a:	f107 0308 	add.w	r3, r7, #8
 801c17e:	687a      	ldr	r2, [r7, #4]
 801c180:	494b      	ldr	r1, [pc, #300]	@ (801c2b0 <Update_File+0x158>)
 801c182:	4618      	mov	r0, r3
 801c184:	f002 fc1c 	bl	801e9c0 <siprintf>
		if (sdioPrints)
 801c188:	2300      	movs	r3, #0
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d004      	beq.n	801c198 <Update_File+0x40>
			printf(buf);
 801c18e:	f107 0308 	add.w	r3, r7, #8
 801c192:	4618      	mov	r0, r3
 801c194:	f002 fba4 	bl	801e8e0 <iprintf>

		return fresult;
 801c198:	4b44      	ldr	r3, [pc, #272]	@ (801c2ac <Update_File+0x154>)
 801c19a:	781b      	ldrb	r3, [r3, #0]
 801c19c:	e080      	b.n	801c2a0 <Update_File+0x148>
	}

	else {
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801c19e:	2232      	movs	r2, #50	@ 0x32
 801c1a0:	6879      	ldr	r1, [r7, #4]
 801c1a2:	4844      	ldr	r0, [pc, #272]	@ (801c2b4 <Update_File+0x15c>)
 801c1a4:	f7ff f9b8 	bl	801b518 <f_open>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	461a      	mov	r2, r3
 801c1ac:	4b3f      	ldr	r3, [pc, #252]	@ (801c2ac <Update_File+0x154>)
 801c1ae:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c1b0:	4b3e      	ldr	r3, [pc, #248]	@ (801c2ac <Update_File+0x154>)
 801c1b2:	781b      	ldrb	r3, [r3, #0]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d013      	beq.n	801c1e0 <Update_File+0x88>

			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n", fresult,
 801c1b8:	4b3c      	ldr	r3, [pc, #240]	@ (801c2ac <Update_File+0x154>)
 801c1ba:	781b      	ldrb	r3, [r3, #0]
 801c1bc:	461a      	mov	r2, r3
 801c1be:	f107 0008 	add.w	r0, r7, #8
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	493c      	ldr	r1, [pc, #240]	@ (801c2b8 <Update_File+0x160>)
 801c1c6:	f002 fbfb 	bl	801e9c0 <siprintf>
					name);
			if (sdioPrints)
 801c1ca:	2300      	movs	r3, #0
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d004      	beq.n	801c1da <Update_File+0x82>
				printf(buf);
 801c1d0:	f107 0308 	add.w	r3, r7, #8
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	f002 fb83 	bl	801e8e0 <iprintf>

			return fresult;
 801c1da:	4b34      	ldr	r3, [pc, #208]	@ (801c2ac <Update_File+0x154>)
 801c1dc:	781b      	ldrb	r3, [r3, #0]
 801c1de:	e05f      	b.n	801c2a0 <Update_File+0x148>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 801c1e0:	6838      	ldr	r0, [r7, #0]
 801c1e2:	f7e4 f85d 	bl	80002a0 <strlen>
 801c1e6:	4602      	mov	r2, r0
 801c1e8:	4b34      	ldr	r3, [pc, #208]	@ (801c2bc <Update_File+0x164>)
 801c1ea:	6839      	ldr	r1, [r7, #0]
 801c1ec:	4831      	ldr	r0, [pc, #196]	@ (801c2b4 <Update_File+0x15c>)
 801c1ee:	f7ff fb4d 	bl	801b88c <f_write>
 801c1f2:	4603      	mov	r3, r0
 801c1f4:	461a      	mov	r2, r3
 801c1f6:	4b2d      	ldr	r3, [pc, #180]	@ (801c2ac <Update_File+0x154>)
 801c1f8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c1fa:	4b2c      	ldr	r3, [pc, #176]	@ (801c2ac <Update_File+0x154>)
 801c1fc:	781b      	ldrb	r3, [r3, #0]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d011      	beq.n	801c226 <Update_File+0xce>

			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n", fresult,
 801c202:	4b2a      	ldr	r3, [pc, #168]	@ (801c2ac <Update_File+0x154>)
 801c204:	781b      	ldrb	r3, [r3, #0]
 801c206:	461a      	mov	r2, r3
 801c208:	f107 0008 	add.w	r0, r7, #8
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	492c      	ldr	r1, [pc, #176]	@ (801c2c0 <Update_File+0x168>)
 801c210:	f002 fbd6 	bl	801e9c0 <siprintf>
					name);
			if (sdioPrints)
 801c214:	2300      	movs	r3, #0
 801c216:	2b00      	cmp	r3, #0
 801c218:	d014      	beq.n	801c244 <Update_File+0xec>
				printf(buf);
 801c21a:	f107 0308 	add.w	r3, r7, #8
 801c21e:	4618      	mov	r0, r3
 801c220:	f002 fb5e 	bl	801e8e0 <iprintf>
 801c224:	e00e      	b.n	801c244 <Update_File+0xec>

		}

		else {

			sprintf(buf, "*%s* UPDATED successfully\n", name);
 801c226:	f107 0308 	add.w	r3, r7, #8
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	4925      	ldr	r1, [pc, #148]	@ (801c2c4 <Update_File+0x16c>)
 801c22e:	4618      	mov	r0, r3
 801c230:	f002 fbc6 	bl	801e9c0 <siprintf>
			if (sdioPrints)
 801c234:	2300      	movs	r3, #0
 801c236:	2b00      	cmp	r3, #0
 801c238:	d004      	beq.n	801c244 <Update_File+0xec>
				printf(buf);
 801c23a:	f107 0308 	add.w	r3, r7, #8
 801c23e:	4618      	mov	r0, r3
 801c240:	f002 fb4e 	bl	801e8e0 <iprintf>

		}

		/* Close file */
		fresult = f_close(&fil);
 801c244:	481b      	ldr	r0, [pc, #108]	@ (801c2b4 <Update_File+0x15c>)
 801c246:	f7ff fd14 	bl	801bc72 <f_close>
 801c24a:	4603      	mov	r3, r0
 801c24c:	461a      	mov	r2, r3
 801c24e:	4b17      	ldr	r3, [pc, #92]	@ (801c2ac <Update_File+0x154>)
 801c250:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c252:	4b16      	ldr	r3, [pc, #88]	@ (801c2ac <Update_File+0x154>)
 801c254:	781b      	ldrb	r3, [r3, #0]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d011      	beq.n	801c27e <Update_File+0x126>

			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n", fresult,
 801c25a:	4b14      	ldr	r3, [pc, #80]	@ (801c2ac <Update_File+0x154>)
 801c25c:	781b      	ldrb	r3, [r3, #0]
 801c25e:	461a      	mov	r2, r3
 801c260:	f107 0008 	add.w	r0, r7, #8
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	4918      	ldr	r1, [pc, #96]	@ (801c2c8 <Update_File+0x170>)
 801c268:	f002 fbaa 	bl	801e9c0 <siprintf>
					name);
			if (sdioPrints)
 801c26c:	2300      	movs	r3, #0
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d014      	beq.n	801c29c <Update_File+0x144>
				printf(buf);
 801c272:	f107 0308 	add.w	r3, r7, #8
 801c276:	4618      	mov	r0, r3
 801c278:	f002 fb32 	bl	801e8e0 <iprintf>
 801c27c:	e00e      	b.n	801c29c <Update_File+0x144>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c27e:	f107 0308 	add.w	r3, r7, #8
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	4911      	ldr	r1, [pc, #68]	@ (801c2cc <Update_File+0x174>)
 801c286:	4618      	mov	r0, r3
 801c288:	f002 fb9a 	bl	801e9c0 <siprintf>
			if (sdioPrints)
 801c28c:	2300      	movs	r3, #0
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d004      	beq.n	801c29c <Update_File+0x144>
				printf(buf);
 801c292:	f107 0308 	add.w	r3, r7, #8
 801c296:	4618      	mov	r0, r3
 801c298:	f002 fb22 	bl	801e8e0 <iprintf>

		}
	}
	return fresult;
 801c29c:	4b03      	ldr	r3, [pc, #12]	@ (801c2ac <Update_File+0x154>)
 801c29e:	781b      	ldrb	r3, [r3, #0]
}
 801c2a0:	4618      	mov	r0, r3
 801c2a2:	37a0      	adds	r7, #160	@ 0xa0
 801c2a4:	46bd      	mov	sp, r7
 801c2a6:	bd80      	pop	{r7, pc}
 801c2a8:	20002200 	.word	0x20002200
 801c2ac:	20002318 	.word	0x20002318
 801c2b0:	080246ac 	.word	0x080246ac
 801c2b4:	20001fd0 	.word	0x20001fd0
 801c2b8:	080246cc 	.word	0x080246cc
 801c2bc:	2000231c 	.word	0x2000231c
 801c2c0:	080248dc 	.word	0x080248dc
 801c2c4:	08024904 	.word	0x08024904
 801c2c8:	080247d4 	.word	0x080247d4
 801c2cc:	080247fc 	.word	0x080247fc

0801c2d0 <json_update>:
uint8_t fileWrite_sec = 0;

uint8_t datawritten = 0;
char buffer[255];

void json_update() {
 801c2d0:	b580      	push	{r7, lr}
 801c2d2:	b088      	sub	sp, #32
 801c2d4:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c2d6:	f107 0314 	add.w	r3, r7, #20
 801c2da:	2200      	movs	r2, #0
 801c2dc:	4619      	mov	r1, r3
 801c2de:	48b4      	ldr	r0, [pc, #720]	@ (801c5b0 <json_update+0x2e0>)
 801c2e0:	f7ed fc29 	bl	8009b36 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c2e4:	463b      	mov	r3, r7
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	4619      	mov	r1, r3
 801c2ea:	48b1      	ldr	r0, [pc, #708]	@ (801c5b0 <json_update+0x2e0>)
 801c2ec:	f7ed fb41 	bl	8009972 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c2f0:	7dba      	ldrb	r2, [r7, #22]
 801c2f2:	4bb0      	ldr	r3, [pc, #704]	@ (801c5b4 <json_update+0x2e4>)
 801c2f4:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c2f6:	7d7a      	ldrb	r2, [r7, #21]
 801c2f8:	4baf      	ldr	r3, [pc, #700]	@ (801c5b8 <json_update+0x2e8>)
 801c2fa:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c2fc:	7dfa      	ldrb	r2, [r7, #23]
 801c2fe:	4baf      	ldr	r3, [pc, #700]	@ (801c5bc <json_update+0x2ec>)
 801c300:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c302:	783a      	ldrb	r2, [r7, #0]
 801c304:	4bae      	ldr	r3, [pc, #696]	@ (801c5c0 <json_update+0x2f0>)
 801c306:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c308:	787a      	ldrb	r2, [r7, #1]
 801c30a:	4bae      	ldr	r3, [pc, #696]	@ (801c5c4 <json_update+0x2f4>)
 801c30c:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c30e:	78ba      	ldrb	r2, [r7, #2]
 801c310:	4bad      	ldr	r3, [pc, #692]	@ (801c5c8 <json_update+0x2f8>)
 801c312:	701a      	strb	r2, [r3, #0]

	fresult1 = Mount_SD("/");
 801c314:	48ad      	ldr	r0, [pc, #692]	@ (801c5cc <json_update+0x2fc>)
 801c316:	f7ff fe31 	bl	801bf7c <Mount_SD>
 801c31a:	4603      	mov	r3, r0
 801c31c:	461a      	mov	r2, r3
 801c31e:	4bac      	ldr	r3, [pc, #688]	@ (801c5d0 <json_update+0x300>)
 801c320:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c322:	4bab      	ldr	r3, [pc, #684]	@ (801c5d0 <json_update+0x300>)
 801c324:	781b      	ldrb	r3, [r3, #0]
 801c326:	2b00      	cmp	r3, #0
 801c328:	f040 8137 	bne.w	801c59a <json_update+0x2ca>
		//CAN Bus
		sprintf(buffer, "{\n");
 801c32c:	49a9      	ldr	r1, [pc, #676]	@ (801c5d4 <json_update+0x304>)
 801c32e:	48aa      	ldr	r0, [pc, #680]	@ (801c5d8 <json_update+0x308>)
 801c330:	f002 fb46 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c334:	49a8      	ldr	r1, [pc, #672]	@ (801c5d8 <json_update+0x308>)
 801c336:	48a9      	ldr	r0, [pc, #676]	@ (801c5dc <json_update+0x30c>)
 801c338:	f7ff ff0e 	bl	801c158 <Update_File>
 801c33c:	4603      	mov	r3, r0
 801c33e:	461a      	mov	r2, r3
 801c340:	4ba3      	ldr	r3, [pc, #652]	@ (801c5d0 <json_update+0x300>)
 801c342:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c344:	22ff      	movs	r2, #255	@ 0xff
 801c346:	2100      	movs	r1, #0
 801c348:	48a3      	ldr	r0, [pc, #652]	@ (801c5d8 <json_update+0x308>)
 801c34a:	f002 fc83 	bl	801ec54 <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801c34e:	f7e6 f88b 	bl	8002468 <ver_GetUid>
 801c352:	4603      	mov	r3, r0
 801c354:	461a      	mov	r2, r3
 801c356:	49a2      	ldr	r1, [pc, #648]	@ (801c5e0 <json_update+0x310>)
 801c358:	489f      	ldr	r0, [pc, #636]	@ (801c5d8 <json_update+0x308>)
 801c35a:	f002 fb31 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c35e:	499e      	ldr	r1, [pc, #632]	@ (801c5d8 <json_update+0x308>)
 801c360:	489e      	ldr	r0, [pc, #632]	@ (801c5dc <json_update+0x30c>)
 801c362:	f7ff fef9 	bl	801c158 <Update_File>
 801c366:	4603      	mov	r3, r0
 801c368:	461a      	mov	r2, r3
 801c36a:	4b99      	ldr	r3, [pc, #612]	@ (801c5d0 <json_update+0x300>)
 801c36c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c36e:	22ff      	movs	r2, #255	@ 0xff
 801c370:	2100      	movs	r1, #0
 801c372:	4899      	ldr	r0, [pc, #612]	@ (801c5d8 <json_update+0x308>)
 801c374:	f002 fc6e 	bl	801ec54 <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801c378:	4a9a      	ldr	r2, [pc, #616]	@ (801c5e4 <json_update+0x314>)
 801c37a:	499b      	ldr	r1, [pc, #620]	@ (801c5e8 <json_update+0x318>)
 801c37c:	4896      	ldr	r0, [pc, #600]	@ (801c5d8 <json_update+0x308>)
 801c37e:	f002 fb1f 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c382:	4995      	ldr	r1, [pc, #596]	@ (801c5d8 <json_update+0x308>)
 801c384:	4895      	ldr	r0, [pc, #596]	@ (801c5dc <json_update+0x30c>)
 801c386:	f7ff fee7 	bl	801c158 <Update_File>
 801c38a:	4603      	mov	r3, r0
 801c38c:	461a      	mov	r2, r3
 801c38e:	4b90      	ldr	r3, [pc, #576]	@ (801c5d0 <json_update+0x300>)
 801c390:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c392:	22ff      	movs	r2, #255	@ 0xff
 801c394:	2100      	movs	r1, #0
 801c396:	4890      	ldr	r0, [pc, #576]	@ (801c5d8 <json_update+0x308>)
 801c398:	f002 fc5c 	bl	801ec54 <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c39c:	783b      	ldrb	r3, [r7, #0]
 801c39e:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801c3a0:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c3a2:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801c3a4:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c3a6:	9300      	str	r3, [sp, #0]
 801c3a8:	460b      	mov	r3, r1
 801c3aa:	4990      	ldr	r1, [pc, #576]	@ (801c5ec <json_update+0x31c>)
 801c3ac:	488a      	ldr	r0, [pc, #552]	@ (801c5d8 <json_update+0x308>)
 801c3ae:	f002 fb07 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c3b2:	4989      	ldr	r1, [pc, #548]	@ (801c5d8 <json_update+0x308>)
 801c3b4:	4889      	ldr	r0, [pc, #548]	@ (801c5dc <json_update+0x30c>)
 801c3b6:	f7ff fecf 	bl	801c158 <Update_File>
 801c3ba:	4603      	mov	r3, r0
 801c3bc:	461a      	mov	r2, r3
 801c3be:	4b84      	ldr	r3, [pc, #528]	@ (801c5d0 <json_update+0x300>)
 801c3c0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c3c2:	22ff      	movs	r2, #255	@ 0xff
 801c3c4:	2100      	movs	r1, #0
 801c3c6:	4884      	ldr	r0, [pc, #528]	@ (801c5d8 <json_update+0x308>)
 801c3c8:	f002 fc44 	bl	801ec54 <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801c3cc:	4a88      	ldr	r2, [pc, #544]	@ (801c5f0 <json_update+0x320>)
 801c3ce:	4989      	ldr	r1, [pc, #548]	@ (801c5f4 <json_update+0x324>)
 801c3d0:	4881      	ldr	r0, [pc, #516]	@ (801c5d8 <json_update+0x308>)
 801c3d2:	f002 faf5 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c3d6:	4980      	ldr	r1, [pc, #512]	@ (801c5d8 <json_update+0x308>)
 801c3d8:	4880      	ldr	r0, [pc, #512]	@ (801c5dc <json_update+0x30c>)
 801c3da:	f7ff febd 	bl	801c158 <Update_File>
 801c3de:	4603      	mov	r3, r0
 801c3e0:	461a      	mov	r2, r3
 801c3e2:	4b7b      	ldr	r3, [pc, #492]	@ (801c5d0 <json_update+0x300>)
 801c3e4:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c3e6:	22ff      	movs	r2, #255	@ 0xff
 801c3e8:	2100      	movs	r1, #0
 801c3ea:	487b      	ldr	r0, [pc, #492]	@ (801c5d8 <json_update+0x308>)
 801c3ec:	f002 fc32 	bl	801ec54 <memset>
		sprintf(buffer, "\"Filename\":\"%s\",\n", _Flash_Packet.filename_ver_date);
 801c3f0:	4a81      	ldr	r2, [pc, #516]	@ (801c5f8 <json_update+0x328>)
 801c3f2:	4982      	ldr	r1, [pc, #520]	@ (801c5fc <json_update+0x32c>)
 801c3f4:	4878      	ldr	r0, [pc, #480]	@ (801c5d8 <json_update+0x308>)
 801c3f6:	f002 fae3 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c3fa:	4977      	ldr	r1, [pc, #476]	@ (801c5d8 <json_update+0x308>)
 801c3fc:	4877      	ldr	r0, [pc, #476]	@ (801c5dc <json_update+0x30c>)
 801c3fe:	f7ff feab 	bl	801c158 <Update_File>
 801c402:	4603      	mov	r3, r0
 801c404:	461a      	mov	r2, r3
 801c406:	4b72      	ldr	r3, [pc, #456]	@ (801c5d0 <json_update+0x300>)
 801c408:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c40a:	22ff      	movs	r2, #255	@ 0xff
 801c40c:	2100      	movs	r1, #0
 801c40e:	4872      	ldr	r0, [pc, #456]	@ (801c5d8 <json_update+0x308>)
 801c410:	f002 fc20 	bl	801ec54 <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801c414:	4a7a      	ldr	r2, [pc, #488]	@ (801c600 <json_update+0x330>)
 801c416:	497b      	ldr	r1, [pc, #492]	@ (801c604 <json_update+0x334>)
 801c418:	486f      	ldr	r0, [pc, #444]	@ (801c5d8 <json_update+0x308>)
 801c41a:	f002 fad1 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c41e:	496e      	ldr	r1, [pc, #440]	@ (801c5d8 <json_update+0x308>)
 801c420:	486e      	ldr	r0, [pc, #440]	@ (801c5dc <json_update+0x30c>)
 801c422:	f7ff fe99 	bl	801c158 <Update_File>
 801c426:	4603      	mov	r3, r0
 801c428:	461a      	mov	r2, r3
 801c42a:	4b69      	ldr	r3, [pc, #420]	@ (801c5d0 <json_update+0x300>)
 801c42c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c42e:	22ff      	movs	r2, #255	@ 0xff
 801c430:	2100      	movs	r1, #0
 801c432:	4869      	ldr	r0, [pc, #420]	@ (801c5d8 <json_update+0x308>)
 801c434:	f002 fc0e 	bl	801ec54 <memset>
		sprintf(buffer, "\"co2\":\"%.2f\",\n", _RunTime_Packet.co2);
 801c438:	4b73      	ldr	r3, [pc, #460]	@ (801c608 <json_update+0x338>)
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	4618      	mov	r0, r3
 801c43e:	f7e4 f89b 	bl	8000578 <__aeabi_f2d>
 801c442:	4602      	mov	r2, r0
 801c444:	460b      	mov	r3, r1
 801c446:	4971      	ldr	r1, [pc, #452]	@ (801c60c <json_update+0x33c>)
 801c448:	4863      	ldr	r0, [pc, #396]	@ (801c5d8 <json_update+0x308>)
 801c44a:	f002 fab9 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c44e:	4962      	ldr	r1, [pc, #392]	@ (801c5d8 <json_update+0x308>)
 801c450:	4862      	ldr	r0, [pc, #392]	@ (801c5dc <json_update+0x30c>)
 801c452:	f7ff fe81 	bl	801c158 <Update_File>
 801c456:	4603      	mov	r3, r0
 801c458:	461a      	mov	r2, r3
 801c45a:	4b5d      	ldr	r3, [pc, #372]	@ (801c5d0 <json_update+0x300>)
 801c45c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c45e:	22ff      	movs	r2, #255	@ 0xff
 801c460:	2100      	movs	r1, #0
 801c462:	485d      	ldr	r0, [pc, #372]	@ (801c5d8 <json_update+0x308>)
 801c464:	f002 fbf6 	bl	801ec54 <memset>
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
				_RunTime_Packet.temperature);
 801c468:	4b67      	ldr	r3, [pc, #412]	@ (801c608 <json_update+0x338>)
 801c46a:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
 801c46c:	4618      	mov	r0, r3
 801c46e:	f7e4 f883 	bl	8000578 <__aeabi_f2d>
 801c472:	4602      	mov	r2, r0
 801c474:	460b      	mov	r3, r1
 801c476:	4966      	ldr	r1, [pc, #408]	@ (801c610 <json_update+0x340>)
 801c478:	4857      	ldr	r0, [pc, #348]	@ (801c5d8 <json_update+0x308>)
 801c47a:	f002 faa1 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c47e:	4956      	ldr	r1, [pc, #344]	@ (801c5d8 <json_update+0x308>)
 801c480:	4856      	ldr	r0, [pc, #344]	@ (801c5dc <json_update+0x30c>)
 801c482:	f7ff fe69 	bl	801c158 <Update_File>
 801c486:	4603      	mov	r3, r0
 801c488:	461a      	mov	r2, r3
 801c48a:	4b51      	ldr	r3, [pc, #324]	@ (801c5d0 <json_update+0x300>)
 801c48c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c48e:	22ff      	movs	r2, #255	@ 0xff
 801c490:	2100      	movs	r1, #0
 801c492:	4851      	ldr	r0, [pc, #324]	@ (801c5d8 <json_update+0x308>)
 801c494:	f002 fbde 	bl	801ec54 <memset>
		sprintf(buffer, "\"humidity\":\"%.2f\",\n", _RunTime_Packet.humidity);
 801c498:	4b5b      	ldr	r3, [pc, #364]	@ (801c608 <json_update+0x338>)
 801c49a:	689b      	ldr	r3, [r3, #8]
 801c49c:	4618      	mov	r0, r3
 801c49e:	f7e4 f86b 	bl	8000578 <__aeabi_f2d>
 801c4a2:	4602      	mov	r2, r0
 801c4a4:	460b      	mov	r3, r1
 801c4a6:	495b      	ldr	r1, [pc, #364]	@ (801c614 <json_update+0x344>)
 801c4a8:	484b      	ldr	r0, [pc, #300]	@ (801c5d8 <json_update+0x308>)
 801c4aa:	f002 fa89 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4ae:	494a      	ldr	r1, [pc, #296]	@ (801c5d8 <json_update+0x308>)
 801c4b0:	484a      	ldr	r0, [pc, #296]	@ (801c5dc <json_update+0x30c>)
 801c4b2:	f7ff fe51 	bl	801c158 <Update_File>
 801c4b6:	4603      	mov	r3, r0
 801c4b8:	461a      	mov	r2, r3
 801c4ba:	4b45      	ldr	r3, [pc, #276]	@ (801c5d0 <json_update+0x300>)
 801c4bc:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c4be:	22ff      	movs	r2, #255	@ 0xff
 801c4c0:	2100      	movs	r1, #0
 801c4c2:	4845      	ldr	r0, [pc, #276]	@ (801c5d8 <json_update+0x308>)
 801c4c4:	f002 fbc6 	bl	801ec54 <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801c4c8:	4b4f      	ldr	r3, [pc, #316]	@ (801c608 <json_update+0x338>)
 801c4ca:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d001      	beq.n	801c4d4 <json_update+0x204>
 801c4d0:	4b51      	ldr	r3, [pc, #324]	@ (801c618 <json_update+0x348>)
 801c4d2:	e000      	b.n	801c4d6 <json_update+0x206>
 801c4d4:	4b51      	ldr	r3, [pc, #324]	@ (801c61c <json_update+0x34c>)
 801c4d6:	461a      	mov	r2, r3
 801c4d8:	4951      	ldr	r1, [pc, #324]	@ (801c620 <json_update+0x350>)
 801c4da:	483f      	ldr	r0, [pc, #252]	@ (801c5d8 <json_update+0x308>)
 801c4dc:	f002 fa70 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4e0:	493d      	ldr	r1, [pc, #244]	@ (801c5d8 <json_update+0x308>)
 801c4e2:	483e      	ldr	r0, [pc, #248]	@ (801c5dc <json_update+0x30c>)
 801c4e4:	f7ff fe38 	bl	801c158 <Update_File>
 801c4e8:	4603      	mov	r3, r0
 801c4ea:	461a      	mov	r2, r3
 801c4ec:	4b38      	ldr	r3, [pc, #224]	@ (801c5d0 <json_update+0x300>)
 801c4ee:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4f0:	22ff      	movs	r2, #255	@ 0xff
 801c4f2:	2100      	movs	r1, #0
 801c4f4:	4838      	ldr	r0, [pc, #224]	@ (801c5d8 <json_update+0x308>)
 801c4f6:	f002 fbad 	bl	801ec54 <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801c4fa:	4b43      	ldr	r3, [pc, #268]	@ (801c608 <json_update+0x338>)
 801c4fc:	695b      	ldr	r3, [r3, #20]
 801c4fe:	4618      	mov	r0, r3
 801c500:	f7e4 f83a 	bl	8000578 <__aeabi_f2d>
 801c504:	4602      	mov	r2, r0
 801c506:	460b      	mov	r3, r1
 801c508:	4946      	ldr	r1, [pc, #280]	@ (801c624 <json_update+0x354>)
 801c50a:	4833      	ldr	r0, [pc, #204]	@ (801c5d8 <json_update+0x308>)
 801c50c:	f002 fa58 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c510:	4931      	ldr	r1, [pc, #196]	@ (801c5d8 <json_update+0x308>)
 801c512:	4832      	ldr	r0, [pc, #200]	@ (801c5dc <json_update+0x30c>)
 801c514:	f7ff fe20 	bl	801c158 <Update_File>
 801c518:	4603      	mov	r3, r0
 801c51a:	461a      	mov	r2, r3
 801c51c:	4b2c      	ldr	r3, [pc, #176]	@ (801c5d0 <json_update+0x300>)
 801c51e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c520:	22ff      	movs	r2, #255	@ 0xff
 801c522:	2100      	movs	r1, #0
 801c524:	482c      	ldr	r0, [pc, #176]	@ (801c5d8 <json_update+0x308>)
 801c526:	f002 fb95 	bl	801ec54 <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801c52a:	493f      	ldr	r1, [pc, #252]	@ (801c628 <json_update+0x358>)
 801c52c:	482a      	ldr	r0, [pc, #168]	@ (801c5d8 <json_update+0x308>)
 801c52e:	f002 fa47 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c532:	4929      	ldr	r1, [pc, #164]	@ (801c5d8 <json_update+0x308>)
 801c534:	4829      	ldr	r0, [pc, #164]	@ (801c5dc <json_update+0x30c>)
 801c536:	f7ff fe0f 	bl	801c158 <Update_File>
 801c53a:	4603      	mov	r3, r0
 801c53c:	461a      	mov	r2, r3
 801c53e:	4b24      	ldr	r3, [pc, #144]	@ (801c5d0 <json_update+0x300>)
 801c540:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c542:	22ff      	movs	r2, #255	@ 0xff
 801c544:	2100      	movs	r1, #0
 801c546:	4824      	ldr	r0, [pc, #144]	@ (801c5d8 <json_update+0x308>)
 801c548:	f002 fb84 	bl	801ec54 <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801c54c:	4b2e      	ldr	r3, [pc, #184]	@ (801c608 <json_update+0x338>)
 801c54e:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801c550:	4618      	mov	r0, r3
 801c552:	f7e4 f811 	bl	8000578 <__aeabi_f2d>
 801c556:	4602      	mov	r2, r0
 801c558:	460b      	mov	r3, r1
 801c55a:	4934      	ldr	r1, [pc, #208]	@ (801c62c <json_update+0x35c>)
 801c55c:	481e      	ldr	r0, [pc, #120]	@ (801c5d8 <json_update+0x308>)
 801c55e:	f002 fa2f 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c562:	491d      	ldr	r1, [pc, #116]	@ (801c5d8 <json_update+0x308>)
 801c564:	481d      	ldr	r0, [pc, #116]	@ (801c5dc <json_update+0x30c>)
 801c566:	f7ff fdf7 	bl	801c158 <Update_File>
 801c56a:	4603      	mov	r3, r0
 801c56c:	461a      	mov	r2, r3
 801c56e:	4b18      	ldr	r3, [pc, #96]	@ (801c5d0 <json_update+0x300>)
 801c570:	701a      	strb	r2, [r3, #0]

		//we end it
		memset(buffer, 0, sizeof(buffer));
 801c572:	22ff      	movs	r2, #255	@ 0xff
 801c574:	2100      	movs	r1, #0
 801c576:	4818      	ldr	r0, [pc, #96]	@ (801c5d8 <json_update+0x308>)
 801c578:	f002 fb6c 	bl	801ec54 <memset>
		sprintf(buffer, "}\n\n");
 801c57c:	492c      	ldr	r1, [pc, #176]	@ (801c630 <json_update+0x360>)
 801c57e:	4816      	ldr	r0, [pc, #88]	@ (801c5d8 <json_update+0x308>)
 801c580:	f002 fa1e 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c584:	4914      	ldr	r1, [pc, #80]	@ (801c5d8 <json_update+0x308>)
 801c586:	4815      	ldr	r0, [pc, #84]	@ (801c5dc <json_update+0x30c>)
 801c588:	f7ff fde6 	bl	801c158 <Update_File>
 801c58c:	4603      	mov	r3, r0
 801c58e:	461a      	mov	r2, r3
 801c590:	4b0f      	ldr	r3, [pc, #60]	@ (801c5d0 <json_update+0x300>)
 801c592:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c594:	480d      	ldr	r0, [pc, #52]	@ (801c5cc <json_update+0x2fc>)
 801c596:	f7ff fd1d 	bl	801bfd4 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c59a:	4b0d      	ldr	r3, [pc, #52]	@ (801c5d0 <json_update+0x300>)
 801c59c:	781b      	ldrb	r3, [r3, #0]
 801c59e:	b25a      	sxtb	r2, r3
 801c5a0:	4b19      	ldr	r3, [pc, #100]	@ (801c608 <json_update+0x338>)
 801c5a2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c5a6:	bf00      	nop
 801c5a8:	3718      	adds	r7, #24
 801c5aa:	46bd      	mov	sp, r7
 801c5ac:	bd80      	pop	{r7, pc}
 801c5ae:	bf00      	nop
 801c5b0:	20001898 	.word	0x20001898
 801c5b4:	20002322 	.word	0x20002322
 801c5b8:	20002323 	.word	0x20002323
 801c5bc:	20002324 	.word	0x20002324
 801c5c0:	20002325 	.word	0x20002325
 801c5c4:	20002326 	.word	0x20002326
 801c5c8:	20002327 	.word	0x20002327
 801c5cc:	080249f0 	.word	0x080249f0
 801c5d0:	20002320 	.word	0x20002320
 801c5d4:	080249f4 	.word	0x080249f4
 801c5d8:	2000232c 	.word	0x2000232c
 801c5dc:	20001461 	.word	0x20001461
 801c5e0:	080249f8 	.word	0x080249f8
 801c5e4:	20001399 	.word	0x20001399
 801c5e8:	08024a08 	.word	0x08024a08
 801c5ec:	08024a14 	.word	0x08024a14
 801c5f0:	200013cb 	.word	0x200013cb
 801c5f4:	08024a34 	.word	0x08024a34
 801c5f8:	200014c5 	.word	0x200014c5
 801c5fc:	08024a48 	.word	0x08024a48
 801c600:	2000142f 	.word	0x2000142f
 801c604:	08024a5c 	.word	0x08024a5c
 801c608:	20001530 	.word	0x20001530
 801c60c:	08024a6c 	.word	0x08024a6c
 801c610:	08024a7c 	.word	0x08024a7c
 801c614:	08024a94 	.word	0x08024a94
 801c618:	08024aa8 	.word	0x08024aa8
 801c61c:	08024ab0 	.word	0x08024ab0
 801c620:	08024ab8 	.word	0x08024ab8
 801c624:	08024ac8 	.word	0x08024ac8
 801c628:	08024adc 	.word	0x08024adc
 801c62c:	08024aec 	.word	0x08024aec
 801c630:	08024b00 	.word	0x08024b00

0801c634 <csv_update>:
void csv_update() {
 801c634:	b580      	push	{r7, lr}
 801c636:	b088      	sub	sp, #32
 801c638:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c63a:	f107 0314 	add.w	r3, r7, #20
 801c63e:	2200      	movs	r2, #0
 801c640:	4619      	mov	r1, r3
 801c642:	48ab      	ldr	r0, [pc, #684]	@ (801c8f0 <csv_update+0x2bc>)
 801c644:	f7ed fa77 	bl	8009b36 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c648:	463b      	mov	r3, r7
 801c64a:	2200      	movs	r2, #0
 801c64c:	4619      	mov	r1, r3
 801c64e:	48a8      	ldr	r0, [pc, #672]	@ (801c8f0 <csv_update+0x2bc>)
 801c650:	f7ed f98f 	bl	8009972 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c654:	7dba      	ldrb	r2, [r7, #22]
 801c656:	4ba7      	ldr	r3, [pc, #668]	@ (801c8f4 <csv_update+0x2c0>)
 801c658:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c65a:	7d7a      	ldrb	r2, [r7, #21]
 801c65c:	4ba6      	ldr	r3, [pc, #664]	@ (801c8f8 <csv_update+0x2c4>)
 801c65e:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c660:	7dfa      	ldrb	r2, [r7, #23]
 801c662:	4ba6      	ldr	r3, [pc, #664]	@ (801c8fc <csv_update+0x2c8>)
 801c664:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c666:	783a      	ldrb	r2, [r7, #0]
 801c668:	4ba5      	ldr	r3, [pc, #660]	@ (801c900 <csv_update+0x2cc>)
 801c66a:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c66c:	787a      	ldrb	r2, [r7, #1]
 801c66e:	4ba5      	ldr	r3, [pc, #660]	@ (801c904 <csv_update+0x2d0>)
 801c670:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c672:	78ba      	ldrb	r2, [r7, #2]
 801c674:	4ba4      	ldr	r3, [pc, #656]	@ (801c908 <csv_update+0x2d4>)
 801c676:	701a      	strb	r2, [r3, #0]
	fresult1 = Mount_SD("/");
 801c678:	48a4      	ldr	r0, [pc, #656]	@ (801c90c <csv_update+0x2d8>)
 801c67a:	f7ff fc7f 	bl	801bf7c <Mount_SD>
 801c67e:	4603      	mov	r3, r0
 801c680:	461a      	mov	r2, r3
 801c682:	4ba3      	ldr	r3, [pc, #652]	@ (801c910 <csv_update+0x2dc>)
 801c684:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c686:	4ba2      	ldr	r3, [pc, #648]	@ (801c910 <csv_update+0x2dc>)
 801c688:	781b      	ldrb	r3, [r3, #0]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	f040 8126 	bne.w	801c8dc <csv_update+0x2a8>


		sprintf(buffer, "%s ,", ver_GetUid());
 801c690:	f7e5 feea 	bl	8002468 <ver_GetUid>
 801c694:	4603      	mov	r3, r0
 801c696:	461a      	mov	r2, r3
 801c698:	499e      	ldr	r1, [pc, #632]	@ (801c914 <csv_update+0x2e0>)
 801c69a:	489f      	ldr	r0, [pc, #636]	@ (801c918 <csv_update+0x2e4>)
 801c69c:	f002 f990 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c6a0:	499d      	ldr	r1, [pc, #628]	@ (801c918 <csv_update+0x2e4>)
 801c6a2:	489e      	ldr	r0, [pc, #632]	@ (801c91c <csv_update+0x2e8>)
 801c6a4:	f7ff fd58 	bl	801c158 <Update_File>
 801c6a8:	4603      	mov	r3, r0
 801c6aa:	461a      	mov	r2, r3
 801c6ac:	4b98      	ldr	r3, [pc, #608]	@ (801c910 <csv_update+0x2dc>)
 801c6ae:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c6b0:	22ff      	movs	r2, #255	@ 0xff
 801c6b2:	2100      	movs	r1, #0
 801c6b4:	4898      	ldr	r0, [pc, #608]	@ (801c918 <csv_update+0x2e4>)
 801c6b6:	f002 facd 	bl	801ec54 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801c6ba:	4a99      	ldr	r2, [pc, #612]	@ (801c920 <csv_update+0x2ec>)
 801c6bc:	4995      	ldr	r1, [pc, #596]	@ (801c914 <csv_update+0x2e0>)
 801c6be:	4896      	ldr	r0, [pc, #600]	@ (801c918 <csv_update+0x2e4>)
 801c6c0:	f002 f97e 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c6c4:	4994      	ldr	r1, [pc, #592]	@ (801c918 <csv_update+0x2e4>)
 801c6c6:	4895      	ldr	r0, [pc, #596]	@ (801c91c <csv_update+0x2e8>)
 801c6c8:	f7ff fd46 	bl	801c158 <Update_File>
 801c6cc:	4603      	mov	r3, r0
 801c6ce:	461a      	mov	r2, r3
 801c6d0:	4b8f      	ldr	r3, [pc, #572]	@ (801c910 <csv_update+0x2dc>)
 801c6d2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c6d4:	22ff      	movs	r2, #255	@ 0xff
 801c6d6:	2100      	movs	r1, #0
 801c6d8:	488f      	ldr	r0, [pc, #572]	@ (801c918 <csv_update+0x2e4>)
 801c6da:	f002 fabb 	bl	801ec54 <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c6de:	783b      	ldrb	r3, [r7, #0]
 801c6e0:	461a      	mov	r2, r3
 801c6e2:	787b      	ldrb	r3, [r7, #1]
 801c6e4:	4619      	mov	r1, r3
				sTime.Seconds);
 801c6e6:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c6e8:	9300      	str	r3, [sp, #0]
 801c6ea:	460b      	mov	r3, r1
 801c6ec:	498d      	ldr	r1, [pc, #564]	@ (801c924 <csv_update+0x2f0>)
 801c6ee:	488a      	ldr	r0, [pc, #552]	@ (801c918 <csv_update+0x2e4>)
 801c6f0:	f002 f966 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c6f4:	4988      	ldr	r1, [pc, #544]	@ (801c918 <csv_update+0x2e4>)
 801c6f6:	4889      	ldr	r0, [pc, #548]	@ (801c91c <csv_update+0x2e8>)
 801c6f8:	f7ff fd2e 	bl	801c158 <Update_File>
 801c6fc:	4603      	mov	r3, r0
 801c6fe:	461a      	mov	r2, r3
 801c700:	4b83      	ldr	r3, [pc, #524]	@ (801c910 <csv_update+0x2dc>)
 801c702:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c704:	22ff      	movs	r2, #255	@ 0xff
 801c706:	2100      	movs	r1, #0
 801c708:	4883      	ldr	r0, [pc, #524]	@ (801c918 <csv_update+0x2e4>)
 801c70a:	f002 faa3 	bl	801ec54 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801c70e:	4a86      	ldr	r2, [pc, #536]	@ (801c928 <csv_update+0x2f4>)
 801c710:	4980      	ldr	r1, [pc, #512]	@ (801c914 <csv_update+0x2e0>)
 801c712:	4881      	ldr	r0, [pc, #516]	@ (801c918 <csv_update+0x2e4>)
 801c714:	f002 f954 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c718:	497f      	ldr	r1, [pc, #508]	@ (801c918 <csv_update+0x2e4>)
 801c71a:	4880      	ldr	r0, [pc, #512]	@ (801c91c <csv_update+0x2e8>)
 801c71c:	f7ff fd1c 	bl	801c158 <Update_File>
 801c720:	4603      	mov	r3, r0
 801c722:	461a      	mov	r2, r3
 801c724:	4b7a      	ldr	r3, [pc, #488]	@ (801c910 <csv_update+0x2dc>)
 801c726:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c728:	22ff      	movs	r2, #255	@ 0xff
 801c72a:	2100      	movs	r1, #0
 801c72c:	487a      	ldr	r0, [pc, #488]	@ (801c918 <csv_update+0x2e4>)
 801c72e:	f002 fa91 	bl	801ec54 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.filename_ver_date);
 801c732:	4a7e      	ldr	r2, [pc, #504]	@ (801c92c <csv_update+0x2f8>)
 801c734:	4977      	ldr	r1, [pc, #476]	@ (801c914 <csv_update+0x2e0>)
 801c736:	4878      	ldr	r0, [pc, #480]	@ (801c918 <csv_update+0x2e4>)
 801c738:	f002 f942 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c73c:	4976      	ldr	r1, [pc, #472]	@ (801c918 <csv_update+0x2e4>)
 801c73e:	4877      	ldr	r0, [pc, #476]	@ (801c91c <csv_update+0x2e8>)
 801c740:	f7ff fd0a 	bl	801c158 <Update_File>
 801c744:	4603      	mov	r3, r0
 801c746:	461a      	mov	r2, r3
 801c748:	4b71      	ldr	r3, [pc, #452]	@ (801c910 <csv_update+0x2dc>)
 801c74a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c74c:	22ff      	movs	r2, #255	@ 0xff
 801c74e:	2100      	movs	r1, #0
 801c750:	4871      	ldr	r0, [pc, #452]	@ (801c918 <csv_update+0x2e4>)
 801c752:	f002 fa7f 	bl	801ec54 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801c756:	4a76      	ldr	r2, [pc, #472]	@ (801c930 <csv_update+0x2fc>)
 801c758:	496e      	ldr	r1, [pc, #440]	@ (801c914 <csv_update+0x2e0>)
 801c75a:	486f      	ldr	r0, [pc, #444]	@ (801c918 <csv_update+0x2e4>)
 801c75c:	f002 f930 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c760:	496d      	ldr	r1, [pc, #436]	@ (801c918 <csv_update+0x2e4>)
 801c762:	486e      	ldr	r0, [pc, #440]	@ (801c91c <csv_update+0x2e8>)
 801c764:	f7ff fcf8 	bl	801c158 <Update_File>
 801c768:	4603      	mov	r3, r0
 801c76a:	461a      	mov	r2, r3
 801c76c:	4b68      	ldr	r3, [pc, #416]	@ (801c910 <csv_update+0x2dc>)
 801c76e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "%ld ,", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c770:	22ff      	movs	r2, #255	@ 0xff
 801c772:	2100      	movs	r1, #0
 801c774:	4868      	ldr	r0, [pc, #416]	@ (801c918 <csv_update+0x2e4>)
 801c776:	f002 fa6d 	bl	801ec54 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.co2);
 801c77a:	4b6e      	ldr	r3, [pc, #440]	@ (801c934 <csv_update+0x300>)
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	4618      	mov	r0, r3
 801c780:	f7e3 fefa 	bl	8000578 <__aeabi_f2d>
 801c784:	4602      	mov	r2, r0
 801c786:	460b      	mov	r3, r1
 801c788:	496b      	ldr	r1, [pc, #428]	@ (801c938 <csv_update+0x304>)
 801c78a:	4863      	ldr	r0, [pc, #396]	@ (801c918 <csv_update+0x2e4>)
 801c78c:	f002 f918 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c790:	4961      	ldr	r1, [pc, #388]	@ (801c918 <csv_update+0x2e4>)
 801c792:	4862      	ldr	r0, [pc, #392]	@ (801c91c <csv_update+0x2e8>)
 801c794:	f7ff fce0 	bl	801c158 <Update_File>
 801c798:	4603      	mov	r3, r0
 801c79a:	461a      	mov	r2, r3
 801c79c:	4b5c      	ldr	r3, [pc, #368]	@ (801c910 <csv_update+0x2dc>)
 801c79e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7a0:	22ff      	movs	r2, #255	@ 0xff
 801c7a2:	2100      	movs	r1, #0
 801c7a4:	485c      	ldr	r0, [pc, #368]	@ (801c918 <csv_update+0x2e4>)
 801c7a6:	f002 fa55 	bl	801ec54 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.temperature);
 801c7aa:	4b62      	ldr	r3, [pc, #392]	@ (801c934 <csv_update+0x300>)
 801c7ac:	685b      	ldr	r3, [r3, #4]
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	f7e3 fee2 	bl	8000578 <__aeabi_f2d>
 801c7b4:	4602      	mov	r2, r0
 801c7b6:	460b      	mov	r3, r1
 801c7b8:	495f      	ldr	r1, [pc, #380]	@ (801c938 <csv_update+0x304>)
 801c7ba:	4857      	ldr	r0, [pc, #348]	@ (801c918 <csv_update+0x2e4>)
 801c7bc:	f002 f900 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7c0:	4955      	ldr	r1, [pc, #340]	@ (801c918 <csv_update+0x2e4>)
 801c7c2:	4856      	ldr	r0, [pc, #344]	@ (801c91c <csv_update+0x2e8>)
 801c7c4:	f7ff fcc8 	bl	801c158 <Update_File>
 801c7c8:	4603      	mov	r3, r0
 801c7ca:	461a      	mov	r2, r3
 801c7cc:	4b50      	ldr	r3, [pc, #320]	@ (801c910 <csv_update+0x2dc>)
 801c7ce:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7d0:	22ff      	movs	r2, #255	@ 0xff
 801c7d2:	2100      	movs	r1, #0
 801c7d4:	4850      	ldr	r0, [pc, #320]	@ (801c918 <csv_update+0x2e4>)
 801c7d6:	f002 fa3d 	bl	801ec54 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.humidity);
 801c7da:	4b56      	ldr	r3, [pc, #344]	@ (801c934 <csv_update+0x300>)
 801c7dc:	689b      	ldr	r3, [r3, #8]
 801c7de:	4618      	mov	r0, r3
 801c7e0:	f7e3 feca 	bl	8000578 <__aeabi_f2d>
 801c7e4:	4602      	mov	r2, r0
 801c7e6:	460b      	mov	r3, r1
 801c7e8:	4953      	ldr	r1, [pc, #332]	@ (801c938 <csv_update+0x304>)
 801c7ea:	484b      	ldr	r0, [pc, #300]	@ (801c918 <csv_update+0x2e4>)
 801c7ec:	f002 f8e8 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7f0:	4949      	ldr	r1, [pc, #292]	@ (801c918 <csv_update+0x2e4>)
 801c7f2:	484a      	ldr	r0, [pc, #296]	@ (801c91c <csv_update+0x2e8>)
 801c7f4:	f7ff fcb0 	bl	801c158 <Update_File>
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	461a      	mov	r2, r3
 801c7fc:	4b44      	ldr	r3, [pc, #272]	@ (801c910 <csv_update+0x2dc>)
 801c7fe:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c800:	22ff      	movs	r2, #255	@ 0xff
 801c802:	2100      	movs	r1, #0
 801c804:	4844      	ldr	r0, [pc, #272]	@ (801c918 <csv_update+0x2e4>)
 801c806:	f002 fa25 	bl	801ec54 <memset>
		sprintf(buffer, "%s ,",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801c80a:	4b4a      	ldr	r3, [pc, #296]	@ (801c934 <csv_update+0x300>)
 801c80c:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "%s ,",
 801c80e:	2b01      	cmp	r3, #1
 801c810:	d101      	bne.n	801c816 <csv_update+0x1e2>
 801c812:	4b4a      	ldr	r3, [pc, #296]	@ (801c93c <csv_update+0x308>)
 801c814:	e000      	b.n	801c818 <csv_update+0x1e4>
 801c816:	4b4a      	ldr	r3, [pc, #296]	@ (801c940 <csv_update+0x30c>)
 801c818:	461a      	mov	r2, r3
 801c81a:	493e      	ldr	r1, [pc, #248]	@ (801c914 <csv_update+0x2e0>)
 801c81c:	483e      	ldr	r0, [pc, #248]	@ (801c918 <csv_update+0x2e4>)
 801c81e:	f002 f8cf 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c822:	493d      	ldr	r1, [pc, #244]	@ (801c918 <csv_update+0x2e4>)
 801c824:	483d      	ldr	r0, [pc, #244]	@ (801c91c <csv_update+0x2e8>)
 801c826:	f7ff fc97 	bl	801c158 <Update_File>
 801c82a:	4603      	mov	r3, r0
 801c82c:	461a      	mov	r2, r3
 801c82e:	4b38      	ldr	r3, [pc, #224]	@ (801c910 <csv_update+0x2dc>)
 801c830:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c832:	22ff      	movs	r2, #255	@ 0xff
 801c834:	2100      	movs	r1, #0
 801c836:	4838      	ldr	r0, [pc, #224]	@ (801c918 <csv_update+0x2e4>)
 801c838:	f002 fa0c 	bl	801ec54 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801c83c:	4b3d      	ldr	r3, [pc, #244]	@ (801c934 <csv_update+0x300>)
 801c83e:	695b      	ldr	r3, [r3, #20]
 801c840:	4618      	mov	r0, r3
 801c842:	f7e3 fe99 	bl	8000578 <__aeabi_f2d>
 801c846:	4602      	mov	r2, r0
 801c848:	460b      	mov	r3, r1
 801c84a:	493e      	ldr	r1, [pc, #248]	@ (801c944 <csv_update+0x310>)
 801c84c:	4832      	ldr	r0, [pc, #200]	@ (801c918 <csv_update+0x2e4>)
 801c84e:	f002 f8b7 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c852:	4931      	ldr	r1, [pc, #196]	@ (801c918 <csv_update+0x2e4>)
 801c854:	4831      	ldr	r0, [pc, #196]	@ (801c91c <csv_update+0x2e8>)
 801c856:	f7ff fc7f 	bl	801c158 <Update_File>
 801c85a:	4603      	mov	r3, r0
 801c85c:	461a      	mov	r2, r3
 801c85e:	4b2c      	ldr	r3, [pc, #176]	@ (801c910 <csv_update+0x2dc>)
 801c860:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c862:	22ff      	movs	r2, #255	@ 0xff
 801c864:	2100      	movs	r1, #0
 801c866:	482c      	ldr	r0, [pc, #176]	@ (801c918 <csv_update+0x2e4>)
 801c868:	f002 f9f4 	bl	801ec54 <memset>
		sprintf(buffer, "NONE ,");
 801c86c:	4936      	ldr	r1, [pc, #216]	@ (801c948 <csv_update+0x314>)
 801c86e:	482a      	ldr	r0, [pc, #168]	@ (801c918 <csv_update+0x2e4>)
 801c870:	f002 f8a6 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c874:	4928      	ldr	r1, [pc, #160]	@ (801c918 <csv_update+0x2e4>)
 801c876:	4829      	ldr	r0, [pc, #164]	@ (801c91c <csv_update+0x2e8>)
 801c878:	f7ff fc6e 	bl	801c158 <Update_File>
 801c87c:	4603      	mov	r3, r0
 801c87e:	461a      	mov	r2, r3
 801c880:	4b23      	ldr	r3, [pc, #140]	@ (801c910 <csv_update+0x2dc>)
 801c882:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c884:	22ff      	movs	r2, #255	@ 0xff
 801c886:	2100      	movs	r1, #0
 801c888:	4823      	ldr	r0, [pc, #140]	@ (801c918 <csv_update+0x2e4>)
 801c88a:	f002 f9e3 	bl	801ec54 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801c88e:	4b29      	ldr	r3, [pc, #164]	@ (801c934 <csv_update+0x300>)
 801c890:	6a1b      	ldr	r3, [r3, #32]
 801c892:	4618      	mov	r0, r3
 801c894:	f7e3 fe70 	bl	8000578 <__aeabi_f2d>
 801c898:	4602      	mov	r2, r0
 801c89a:	460b      	mov	r3, r1
 801c89c:	4929      	ldr	r1, [pc, #164]	@ (801c944 <csv_update+0x310>)
 801c89e:	481e      	ldr	r0, [pc, #120]	@ (801c918 <csv_update+0x2e4>)
 801c8a0:	f002 f88e 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8a4:	491c      	ldr	r1, [pc, #112]	@ (801c918 <csv_update+0x2e4>)
 801c8a6:	481d      	ldr	r0, [pc, #116]	@ (801c91c <csv_update+0x2e8>)
 801c8a8:	f7ff fc56 	bl	801c158 <Update_File>
 801c8ac:	4603      	mov	r3, r0
 801c8ae:	461a      	mov	r2, r3
 801c8b0:	4b17      	ldr	r3, [pc, #92]	@ (801c910 <csv_update+0x2dc>)
 801c8b2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c8b4:	22ff      	movs	r2, #255	@ 0xff
 801c8b6:	2100      	movs	r1, #0
 801c8b8:	4817      	ldr	r0, [pc, #92]	@ (801c918 <csv_update+0x2e4>)
 801c8ba:	f002 f9cb 	bl	801ec54 <memset>
		sprintf(buffer, "\n");
 801c8be:	4923      	ldr	r1, [pc, #140]	@ (801c94c <csv_update+0x318>)
 801c8c0:	4815      	ldr	r0, [pc, #84]	@ (801c918 <csv_update+0x2e4>)
 801c8c2:	f002 f87d 	bl	801e9c0 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8c6:	4914      	ldr	r1, [pc, #80]	@ (801c918 <csv_update+0x2e4>)
 801c8c8:	4814      	ldr	r0, [pc, #80]	@ (801c91c <csv_update+0x2e8>)
 801c8ca:	f7ff fc45 	bl	801c158 <Update_File>
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	461a      	mov	r2, r3
 801c8d2:	4b0f      	ldr	r3, [pc, #60]	@ (801c910 <csv_update+0x2dc>)
 801c8d4:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c8d6:	480d      	ldr	r0, [pc, #52]	@ (801c90c <csv_update+0x2d8>)
 801c8d8:	f7ff fb7c 	bl	801bfd4 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c8dc:	4b0c      	ldr	r3, [pc, #48]	@ (801c910 <csv_update+0x2dc>)
 801c8de:	781b      	ldrb	r3, [r3, #0]
 801c8e0:	b25a      	sxtb	r2, r3
 801c8e2:	4b14      	ldr	r3, [pc, #80]	@ (801c934 <csv_update+0x300>)
 801c8e4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c8e8:	bf00      	nop
 801c8ea:	3718      	adds	r7, #24
 801c8ec:	46bd      	mov	sp, r7
 801c8ee:	bd80      	pop	{r7, pc}
 801c8f0:	20001898 	.word	0x20001898
 801c8f4:	20002322 	.word	0x20002322
 801c8f8:	20002323 	.word	0x20002323
 801c8fc:	20002324 	.word	0x20002324
 801c900:	20002325 	.word	0x20002325
 801c904:	20002326 	.word	0x20002326
 801c908:	20002327 	.word	0x20002327
 801c90c:	080249f0 	.word	0x080249f0
 801c910:	20002320 	.word	0x20002320
 801c914:	08024b04 	.word	0x08024b04
 801c918:	2000232c 	.word	0x2000232c
 801c91c:	20001461 	.word	0x20001461
 801c920:	20001399 	.word	0x20001399
 801c924:	08024b0c 	.word	0x08024b0c
 801c928:	200013cb 	.word	0x200013cb
 801c92c:	200014c5 	.word	0x200014c5
 801c930:	2000142f 	.word	0x2000142f
 801c934:	20001530 	.word	0x20001530
 801c938:	08024b20 	.word	0x08024b20
 801c93c:	08024aa8 	.word	0x08024aa8
 801c940:	08024ab0 	.word	0x08024ab0
 801c944:	08024b28 	.word	0x08024b28
 801c948:	08024b30 	.word	0x08024b30
 801c94c:	08024b38 	.word	0x08024b38

0801c950 <csv_header>:
void csv_header() {
 801c950:	b580      	push	{r7, lr}
 801c952:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801c954:	485d      	ldr	r0, [pc, #372]	@ (801cacc <csv_header+0x17c>)
 801c956:	f7ff fb11 	bl	801bf7c <Mount_SD>
 801c95a:	4603      	mov	r3, r0
 801c95c:	461a      	mov	r2, r3
 801c95e:	4b5c      	ldr	r3, [pc, #368]	@ (801cad0 <csv_header+0x180>)
 801c960:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c962:	4b5b      	ldr	r3, [pc, #364]	@ (801cad0 <csv_header+0x180>)
 801c964:	781b      	ldrb	r3, [r3, #0]
 801c966:	2b00      	cmp	r3, #0
 801c968:	f040 80a7 	bne.w	801caba <csv_header+0x16a>


		sprintf(buffer, "devEUI ,");
 801c96c:	4959      	ldr	r1, [pc, #356]	@ (801cad4 <csv_header+0x184>)
 801c96e:	485a      	ldr	r0, [pc, #360]	@ (801cad8 <csv_header+0x188>)
 801c970:	f002 f826 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801c974:	4958      	ldr	r1, [pc, #352]	@ (801cad8 <csv_header+0x188>)
 801c976:	4859      	ldr	r0, [pc, #356]	@ (801cadc <csv_header+0x18c>)
 801c978:	f7ff fbee 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801c97c:	22ff      	movs	r2, #255	@ 0xff
 801c97e:	2100      	movs	r1, #0
 801c980:	4855      	ldr	r0, [pc, #340]	@ (801cad8 <csv_header+0x188>)
 801c982:	f002 f967 	bl	801ec54 <memset>
		sprintf(buffer, "id ,");
 801c986:	4956      	ldr	r1, [pc, #344]	@ (801cae0 <csv_header+0x190>)
 801c988:	4853      	ldr	r0, [pc, #332]	@ (801cad8 <csv_header+0x188>)
 801c98a:	f002 f819 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801c98e:	4952      	ldr	r1, [pc, #328]	@ (801cad8 <csv_header+0x188>)
 801c990:	4852      	ldr	r0, [pc, #328]	@ (801cadc <csv_header+0x18c>)
 801c992:	f7ff fbe1 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801c996:	22ff      	movs	r2, #255	@ 0xff
 801c998:	2100      	movs	r1, #0
 801c99a:	484f      	ldr	r0, [pc, #316]	@ (801cad8 <csv_header+0x188>)
 801c99c:	f002 f95a 	bl	801ec54 <memset>
		sprintf(buffer, "timestamp ,");
 801c9a0:	4950      	ldr	r1, [pc, #320]	@ (801cae4 <csv_header+0x194>)
 801c9a2:	484d      	ldr	r0, [pc, #308]	@ (801cad8 <csv_header+0x188>)
 801c9a4:	f002 f80c 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801c9a8:	494b      	ldr	r1, [pc, #300]	@ (801cad8 <csv_header+0x188>)
 801c9aa:	484c      	ldr	r0, [pc, #304]	@ (801cadc <csv_header+0x18c>)
 801c9ac:	f7ff fbd4 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801c9b0:	22ff      	movs	r2, #255	@ 0xff
 801c9b2:	2100      	movs	r1, #0
 801c9b4:	4848      	ldr	r0, [pc, #288]	@ (801cad8 <csv_header+0x188>)
 801c9b6:	f002 f94d 	bl	801ec54 <memset>
		sprintf(buffer, "location ,");
 801c9ba:	494b      	ldr	r1, [pc, #300]	@ (801cae8 <csv_header+0x198>)
 801c9bc:	4846      	ldr	r0, [pc, #280]	@ (801cad8 <csv_header+0x188>)
 801c9be:	f001 ffff 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801c9c2:	4945      	ldr	r1, [pc, #276]	@ (801cad8 <csv_header+0x188>)
 801c9c4:	4845      	ldr	r0, [pc, #276]	@ (801cadc <csv_header+0x18c>)
 801c9c6:	f7ff fbc7 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801c9ca:	22ff      	movs	r2, #255	@ 0xff
 801c9cc:	2100      	movs	r1, #0
 801c9ce:	4842      	ldr	r0, [pc, #264]	@ (801cad8 <csv_header+0x188>)
 801c9d0:	f002 f940 	bl	801ec54 <memset>
		sprintf(buffer, "Filename ,");
 801c9d4:	4945      	ldr	r1, [pc, #276]	@ (801caec <csv_header+0x19c>)
 801c9d6:	4840      	ldr	r0, [pc, #256]	@ (801cad8 <csv_header+0x188>)
 801c9d8:	f001 fff2 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801c9dc:	493e      	ldr	r1, [pc, #248]	@ (801cad8 <csv_header+0x188>)
 801c9de:	483f      	ldr	r0, [pc, #252]	@ (801cadc <csv_header+0x18c>)
 801c9e0:	f7ff fbba 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801c9e4:	22ff      	movs	r2, #255	@ 0xff
 801c9e6:	2100      	movs	r1, #0
 801c9e8:	483b      	ldr	r0, [pc, #236]	@ (801cad8 <csv_header+0x188>)
 801c9ea:	f002 f933 	bl	801ec54 <memset>
		sprintf(buffer, "group ,");
 801c9ee:	4940      	ldr	r1, [pc, #256]	@ (801caf0 <csv_header+0x1a0>)
 801c9f0:	4839      	ldr	r0, [pc, #228]	@ (801cad8 <csv_header+0x188>)
 801c9f2:	f001 ffe5 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801c9f6:	4938      	ldr	r1, [pc, #224]	@ (801cad8 <csv_header+0x188>)
 801c9f8:	4838      	ldr	r0, [pc, #224]	@ (801cadc <csv_header+0x18c>)
 801c9fa:	f7ff fbad 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801c9fe:	22ff      	movs	r2, #255	@ 0xff
 801ca00:	2100      	movs	r1, #0
 801ca02:	4835      	ldr	r0, [pc, #212]	@ (801cad8 <csv_header+0x188>)
 801ca04:	f002 f926 	bl	801ec54 <memset>
		sprintf(buffer, "co2 ,");
 801ca08:	493a      	ldr	r1, [pc, #232]	@ (801caf4 <csv_header+0x1a4>)
 801ca0a:	4833      	ldr	r0, [pc, #204]	@ (801cad8 <csv_header+0x188>)
 801ca0c:	f001 ffd8 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca10:	4931      	ldr	r1, [pc, #196]	@ (801cad8 <csv_header+0x188>)
 801ca12:	4832      	ldr	r0, [pc, #200]	@ (801cadc <csv_header+0x18c>)
 801ca14:	f7ff fba0 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca18:	22ff      	movs	r2, #255	@ 0xff
 801ca1a:	2100      	movs	r1, #0
 801ca1c:	482e      	ldr	r0, [pc, #184]	@ (801cad8 <csv_header+0x188>)
 801ca1e:	f002 f919 	bl	801ec54 <memset>
		sprintf(buffer, "temperature ,");
 801ca22:	4935      	ldr	r1, [pc, #212]	@ (801caf8 <csv_header+0x1a8>)
 801ca24:	482c      	ldr	r0, [pc, #176]	@ (801cad8 <csv_header+0x188>)
 801ca26:	f001 ffcb 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca2a:	492b      	ldr	r1, [pc, #172]	@ (801cad8 <csv_header+0x188>)
 801ca2c:	482b      	ldr	r0, [pc, #172]	@ (801cadc <csv_header+0x18c>)
 801ca2e:	f7ff fb93 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca32:	22ff      	movs	r2, #255	@ 0xff
 801ca34:	2100      	movs	r1, #0
 801ca36:	4828      	ldr	r0, [pc, #160]	@ (801cad8 <csv_header+0x188>)
 801ca38:	f002 f90c 	bl	801ec54 <memset>
		sprintf(buffer, "humidity ,");
 801ca3c:	492f      	ldr	r1, [pc, #188]	@ (801cafc <csv_header+0x1ac>)
 801ca3e:	4826      	ldr	r0, [pc, #152]	@ (801cad8 <csv_header+0x188>)
 801ca40:	f001 ffbe 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca44:	4924      	ldr	r1, [pc, #144]	@ (801cad8 <csv_header+0x188>)
 801ca46:	4825      	ldr	r0, [pc, #148]	@ (801cadc <csv_header+0x18c>)
 801ca48:	f7ff fb86 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca4c:	22ff      	movs	r2, #255	@ 0xff
 801ca4e:	2100      	movs	r1, #0
 801ca50:	4821      	ldr	r0, [pc, #132]	@ (801cad8 <csv_header+0x188>)
 801ca52:	f002 f8ff 	bl	801ec54 <memset>
		sprintf(buffer, "pir ,");
 801ca56:	492a      	ldr	r1, [pc, #168]	@ (801cb00 <csv_header+0x1b0>)
 801ca58:	481f      	ldr	r0, [pc, #124]	@ (801cad8 <csv_header+0x188>)
 801ca5a:	f001 ffb1 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca5e:	491e      	ldr	r1, [pc, #120]	@ (801cad8 <csv_header+0x188>)
 801ca60:	481e      	ldr	r0, [pc, #120]	@ (801cadc <csv_header+0x18c>)
 801ca62:	f7ff fb79 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca66:	22ff      	movs	r2, #255	@ 0xff
 801ca68:	2100      	movs	r1, #0
 801ca6a:	481b      	ldr	r0, [pc, #108]	@ (801cad8 <csv_header+0x188>)
 801ca6c:	f002 f8f2 	bl	801ec54 <memset>
		sprintf(buffer, "pm2.5 ,");
 801ca70:	4924      	ldr	r1, [pc, #144]	@ (801cb04 <csv_header+0x1b4>)
 801ca72:	4819      	ldr	r0, [pc, #100]	@ (801cad8 <csv_header+0x188>)
 801ca74:	f001 ffa4 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca78:	4917      	ldr	r1, [pc, #92]	@ (801cad8 <csv_header+0x188>)
 801ca7a:	4818      	ldr	r0, [pc, #96]	@ (801cadc <csv_header+0x18c>)
 801ca7c:	f7ff fb6c 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca80:	22ff      	movs	r2, #255	@ 0xff
 801ca82:	2100      	movs	r1, #0
 801ca84:	4814      	ldr	r0, [pc, #80]	@ (801cad8 <csv_header+0x188>)
 801ca86:	f002 f8e5 	bl	801ec54 <memset>
		sprintf(buffer, "port ,");
 801ca8a:	491f      	ldr	r1, [pc, #124]	@ (801cb08 <csv_header+0x1b8>)
 801ca8c:	4812      	ldr	r0, [pc, #72]	@ (801cad8 <csv_header+0x188>)
 801ca8e:	f001 ff97 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca92:	4911      	ldr	r1, [pc, #68]	@ (801cad8 <csv_header+0x188>)
 801ca94:	4811      	ldr	r0, [pc, #68]	@ (801cadc <csv_header+0x18c>)
 801ca96:	f7ff fb5f 	bl	801c158 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca9a:	22ff      	movs	r2, #255	@ 0xff
 801ca9c:	2100      	movs	r1, #0
 801ca9e:	480e      	ldr	r0, [pc, #56]	@ (801cad8 <csv_header+0x188>)
 801caa0:	f002 f8d8 	bl	801ec54 <memset>
		sprintf(buffer, "battery \n\n");
 801caa4:	4919      	ldr	r1, [pc, #100]	@ (801cb0c <csv_header+0x1bc>)
 801caa6:	480c      	ldr	r0, [pc, #48]	@ (801cad8 <csv_header+0x188>)
 801caa8:	f001 ff8a 	bl	801e9c0 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801caac:	490a      	ldr	r1, [pc, #40]	@ (801cad8 <csv_header+0x188>)
 801caae:	480b      	ldr	r0, [pc, #44]	@ (801cadc <csv_header+0x18c>)
 801cab0:	f7ff fb52 	bl	801c158 <Update_File>

		Unmount_SD("/");
 801cab4:	4805      	ldr	r0, [pc, #20]	@ (801cacc <csv_header+0x17c>)
 801cab6:	f7ff fa8d 	bl	801bfd4 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801caba:	4b05      	ldr	r3, [pc, #20]	@ (801cad0 <csv_header+0x180>)
 801cabc:	781b      	ldrb	r3, [r3, #0]
 801cabe:	b25a      	sxtb	r2, r3
 801cac0:	4b13      	ldr	r3, [pc, #76]	@ (801cb10 <csv_header+0x1c0>)
 801cac2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

}
 801cac6:	bf00      	nop
 801cac8:	bd80      	pop	{r7, pc}
 801caca:	bf00      	nop
 801cacc:	080249f0 	.word	0x080249f0
 801cad0:	20002320 	.word	0x20002320
 801cad4:	08024b3c 	.word	0x08024b3c
 801cad8:	2000232c 	.word	0x2000232c
 801cadc:	20001461 	.word	0x20001461
 801cae0:	08024b48 	.word	0x08024b48
 801cae4:	08024b50 	.word	0x08024b50
 801cae8:	08024b5c 	.word	0x08024b5c
 801caec:	08024b68 	.word	0x08024b68
 801caf0:	08024b74 	.word	0x08024b74
 801caf4:	08024b7c 	.word	0x08024b7c
 801caf8:	08024b84 	.word	0x08024b84
 801cafc:	08024b94 	.word	0x08024b94
 801cb00:	08024ba0 	.word	0x08024ba0
 801cb04:	08024ba8 	.word	0x08024ba8
 801cb08:	08024bb0 	.word	0x08024bb0
 801cb0c:	08024bb8 	.word	0x08024bb8
 801cb10:	20001530 	.word	0x20001530

0801cb14 <filesaving_process>:
uint8_t filesaving_process() {
 801cb14:	b580      	push	{r7, lr}
 801cb16:	af00      	add	r7, sp, #0
//	__disable_irq();

	memset(buffer, 0, sizeof(buffer));
 801cb18:	22ff      	movs	r2, #255	@ 0xff
 801cb1a:	2100      	movs	r1, #0
 801cb1c:	480f      	ldr	r0, [pc, #60]	@ (801cb5c <filesaving_process+0x48>)
 801cb1e:	f002 f899 	bl	801ec54 <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801cb22:	4b0f      	ldr	r3, [pc, #60]	@ (801cb60 <filesaving_process+0x4c>)
 801cb24:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d002      	beq.n	801cb32 <filesaving_process+0x1e>
		csv_update();
 801cb2c:	f7ff fd82 	bl	801c634 <csv_update>
 801cb30:	e001      	b.n	801cb36 <filesaving_process+0x22>
	} else {
		json_update();
 801cb32:	f7ff fbcd 	bl	801c2d0 <json_update>
	}

	if (_RunTime_Packet.sd_card_disk_write_error != 0) //means there is error
 801cb36:	4b0a      	ldr	r3, [pc, #40]	@ (801cb60 <filesaving_process+0x4c>)
 801cb38:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d006      	beq.n	801cb4e <filesaving_process+0x3a>
			{
		//blink red so user can know
		blink_red();
 801cb40:	f7e5 fa94 	bl	800206c <blink_red>
		datawritten = 2;
 801cb44:	4b07      	ldr	r3, [pc, #28]	@ (801cb64 <filesaving_process+0x50>)
 801cb46:	2202      	movs	r2, #2
 801cb48:	701a      	strb	r2, [r3, #0]
		return 1; //not working
 801cb4a:	2301      	movs	r3, #1
 801cb4c:	e003      	b.n	801cb56 <filesaving_process+0x42>
	} else //packet written succesfully
	{
		datawritten = 1;
 801cb4e:	4b05      	ldr	r3, [pc, #20]	@ (801cb64 <filesaving_process+0x50>)
 801cb50:	2201      	movs	r2, #1
 801cb52:	701a      	strb	r2, [r3, #0]
	}

	return 0; //all good
 801cb54:	2300      	movs	r3, #0
//	__enable_irq();
}
 801cb56:	4618      	mov	r0, r3
 801cb58:	bd80      	pop	{r7, pc}
 801cb5a:	bf00      	nop
 801cb5c:	2000232c 	.word	0x2000232c
 801cb60:	20001530 	.word	0x20001530
 801cb64:	20002328 	.word	0x20002328

0801cb68 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801cb68:	b580      	push	{r7, lr}
 801cb6a:	b08c      	sub	sp, #48	@ 0x30
 801cb6c:	af04      	add	r7, sp, #16
 801cb6e:	6078      	str	r0, [r7, #4]
 801cb70:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801cb72:	f107 031c 	add.w	r3, r7, #28
 801cb76:	2200      	movs	r2, #0
 801cb78:	4619      	mov	r1, r3
 801cb7a:	4832      	ldr	r0, [pc, #200]	@ (801cc44 <createfile+0xdc>)
 801cb7c:	f7ec ffdb 	bl	8009b36 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801cb80:	f107 0308 	add.w	r3, r7, #8
 801cb84:	2200      	movs	r2, #0
 801cb86:	4619      	mov	r1, r3
 801cb88:	482e      	ldr	r0, [pc, #184]	@ (801cc44 <createfile+0xdc>)
 801cb8a:	f7ec fef2 	bl	8009972 <HAL_RTC_GetTime>

	sprintf(_Flash_Packet.filename_with_format, "%s_%02d-%02d-%02d%s", filename,sDate.Year, sDate.Month, sDate.Date, fileformat);
 801cb8e:	7ffb      	ldrb	r3, [r7, #31]
 801cb90:	4618      	mov	r0, r3
 801cb92:	7f7b      	ldrb	r3, [r7, #29]
 801cb94:	461a      	mov	r2, r3
 801cb96:	7fbb      	ldrb	r3, [r7, #30]
 801cb98:	4619      	mov	r1, r3
 801cb9a:	683b      	ldr	r3, [r7, #0]
 801cb9c:	9302      	str	r3, [sp, #8]
 801cb9e:	9101      	str	r1, [sp, #4]
 801cba0:	9200      	str	r2, [sp, #0]
 801cba2:	4603      	mov	r3, r0
 801cba4:	687a      	ldr	r2, [r7, #4]
 801cba6:	4928      	ldr	r1, [pc, #160]	@ (801cc48 <createfile+0xe0>)
 801cba8:	4828      	ldr	r0, [pc, #160]	@ (801cc4c <createfile+0xe4>)
 801cbaa:	f001 ff09 	bl	801e9c0 <siprintf>
	sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,sDate.Month, sDate.Date);
 801cbae:	7ffb      	ldrb	r3, [r7, #31]
 801cbb0:	4619      	mov	r1, r3
 801cbb2:	7f7b      	ldrb	r3, [r7, #29]
 801cbb4:	7fba      	ldrb	r2, [r7, #30]
 801cbb6:	9201      	str	r2, [sp, #4]
 801cbb8:	9300      	str	r3, [sp, #0]
 801cbba:	460b      	mov	r3, r1
 801cbbc:	687a      	ldr	r2, [r7, #4]
 801cbbe:	4924      	ldr	r1, [pc, #144]	@ (801cc50 <createfile+0xe8>)
 801cbc0:	4824      	ldr	r0, [pc, #144]	@ (801cc54 <createfile+0xec>)
 801cbc2:	f001 fefd 	bl	801e9c0 <siprintf>

	set_param_flags();
 801cbc6:	4b24      	ldr	r3, [pc, #144]	@ (801cc58 <createfile+0xf0>)
 801cbc8:	2201      	movs	r2, #1
 801cbca:	701a      	strb	r2, [r3, #0]
 801cbcc:	4b23      	ldr	r3, [pc, #140]	@ (801cc5c <createfile+0xf4>)
 801cbce:	2201      	movs	r2, #1
 801cbd0:	701a      	strb	r2, [r3, #0]
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801cbd2:	4823      	ldr	r0, [pc, #140]	@ (801cc60 <createfile+0xf8>)
 801cbd4:	f7ff f9d2 	bl	801bf7c <Mount_SD>
 801cbd8:	4603      	mov	r3, r0
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d002      	beq.n	801cbe4 <createfile+0x7c>
	} else {
		//	__enable_irq();
		return -1;
 801cbde:	f04f 33ff 	mov.w	r3, #4294967295
 801cbe2:	e02b      	b.n	801cc3c <createfile+0xd4>
	}
	Unmount_SD("/");
 801cbe4:	481e      	ldr	r0, [pc, #120]	@ (801cc60 <createfile+0xf8>)
 801cbe6:	f7ff f9f5 	bl	801bfd4 <Unmount_SD>



	fresult1 = Mount_SD("/");
 801cbea:	481d      	ldr	r0, [pc, #116]	@ (801cc60 <createfile+0xf8>)
 801cbec:	f7ff f9c6 	bl	801bf7c <Mount_SD>
 801cbf0:	4603      	mov	r3, r0
 801cbf2:	461a      	mov	r2, r3
 801cbf4:	4b1b      	ldr	r3, [pc, #108]	@ (801cc64 <createfile+0xfc>)
 801cbf6:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801cbf8:	4b1a      	ldr	r3, [pc, #104]	@ (801cc64 <createfile+0xfc>)
 801cbfa:	781b      	ldrb	r3, [r3, #0]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d119      	bne.n	801cc34 <createfile+0xcc>





		fresult1 = Create_File(_Flash_Packet.filename_with_format);
 801cc00:	4812      	ldr	r0, [pc, #72]	@ (801cc4c <createfile+0xe4>)
 801cc02:	f7ff fa0f 	bl	801c024 <Create_File>
 801cc06:	4603      	mov	r3, r0
 801cc08:	461a      	mov	r2, r3
 801cc0a:	4b16      	ldr	r3, [pc, #88]	@ (801cc64 <createfile+0xfc>)
 801cc0c:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801cc0e:	4814      	ldr	r0, [pc, #80]	@ (801cc60 <createfile+0xf8>)
 801cc10:	f7ff f9e0 	bl	801bfd4 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801cc14:	4b14      	ldr	r3, [pc, #80]	@ (801cc68 <createfile+0x100>)
 801cc16:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d00d      	beq.n	801cc3a <createfile+0xd2>
			if (file_already_exist) {
 801cc1e:	4b13      	ldr	r3, [pc, #76]	@ (801cc6c <createfile+0x104>)
 801cc20:	781b      	ldrb	r3, [r3, #0]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d003      	beq.n	801cc2e <createfile+0xc6>
				file_already_exist = 0;
 801cc26:	4b11      	ldr	r3, [pc, #68]	@ (801cc6c <createfile+0x104>)
 801cc28:	2200      	movs	r2, #0
 801cc2a:	701a      	strb	r2, [r3, #0]
 801cc2c:	e005      	b.n	801cc3a <createfile+0xd2>
			} else {
				csv_header();  //json does not require an header only csv
 801cc2e:	f7ff fe8f 	bl	801c950 <csv_header>
 801cc32:	e002      	b.n	801cc3a <createfile+0xd2>
			}
		}

	} else {
		//	__enable_irq();
		return -1;
 801cc34:	f04f 33ff 	mov.w	r3, #4294967295
 801cc38:	e000      	b.n	801cc3c <createfile+0xd4>
	}
//	__enable_irq();
	return 0;
 801cc3a:	2300      	movs	r3, #0
}
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	3720      	adds	r7, #32
 801cc40:	46bd      	mov	sp, r7
 801cc42:	bd80      	pop	{r7, pc}
 801cc44:	20001898 	.word	0x20001898
 801cc48:	08024bc4 	.word	0x08024bc4
 801cc4c:	20001461 	.word	0x20001461
 801cc50:	08024bd8 	.word	0x08024bd8
 801cc54:	200014c5 	.word	0x200014c5
 801cc58:	20001579 	.word	0x20001579
 801cc5c:	2000157a 	.word	0x2000157a
 801cc60:	080249f0 	.word	0x080249f0
 801cc64:	20002320 	.word	0x20002320
 801cc68:	20001530 	.word	0x20001530
 801cc6c:	20002321 	.word	0x20002321

0801cc70 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801cc70:	b580      	push	{r7, lr}
 801cc72:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801cc74:	4905      	ldr	r1, [pc, #20]	@ (801cc8c <MX_USB_DEVICE_DeInit+0x1c>)
 801cc76:	4806      	ldr	r0, [pc, #24]	@ (801cc90 <MX_USB_DEVICE_DeInit+0x20>)
 801cc78:	f7f8 ff90 	bl	8015b9c <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801cc7c:	4804      	ldr	r0, [pc, #16]	@ (801cc90 <MX_USB_DEVICE_DeInit+0x20>)
 801cc7e:	f7fa ff86 	bl	8017b8e <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801cc82:	4803      	ldr	r0, [pc, #12]	@ (801cc90 <MX_USB_DEVICE_DeInit+0x20>)
 801cc84:	f7fa ff11 	bl	8017aaa <USBD_DeInit>

}
 801cc88:	bf00      	nop
 801cc8a:	bd80      	pop	{r7, pc}
 801cc8c:	2000011c 	.word	0x2000011c
 801cc90:	2000242c 	.word	0x2000242c

0801cc94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cc94:	b580      	push	{r7, lr}
 801cc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cc98:	2200      	movs	r2, #0
 801cc9a:	4912      	ldr	r1, [pc, #72]	@ (801cce4 <MX_USB_DEVICE_Init+0x50>)
 801cc9c:	4812      	ldr	r0, [pc, #72]	@ (801cce8 <MX_USB_DEVICE_Init+0x54>)
 801cc9e:	f7fa fed4 	bl	8017a4a <USBD_Init>
 801cca2:	4603      	mov	r3, r0
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d001      	beq.n	801ccac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cca8:	f7e6 fcdc 	bl	8003664 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801ccac:	490f      	ldr	r1, [pc, #60]	@ (801ccec <MX_USB_DEVICE_Init+0x58>)
 801ccae:	480e      	ldr	r0, [pc, #56]	@ (801cce8 <MX_USB_DEVICE_Init+0x54>)
 801ccb0:	f7fa ff2b 	bl	8017b0a <USBD_RegisterClass>
 801ccb4:	4603      	mov	r3, r0
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d001      	beq.n	801ccbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801ccba:	f7e6 fcd3 	bl	8003664 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801ccbe:	490c      	ldr	r1, [pc, #48]	@ (801ccf0 <MX_USB_DEVICE_Init+0x5c>)
 801ccc0:	4809      	ldr	r0, [pc, #36]	@ (801cce8 <MX_USB_DEVICE_Init+0x54>)
 801ccc2:	f7f9 f973 	bl	8015fac <USBD_MSC_RegisterStorage>
 801ccc6:	4603      	mov	r3, r0
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d001      	beq.n	801ccd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801cccc:	f7e6 fcca 	bl	8003664 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801ccd0:	4805      	ldr	r0, [pc, #20]	@ (801cce8 <MX_USB_DEVICE_Init+0x54>)
 801ccd2:	f7fa ff50 	bl	8017b76 <USBD_Start>
 801ccd6:	4603      	mov	r3, r0
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d001      	beq.n	801cce0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801ccdc:	f7e6 fcc2 	bl	8003664 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cce0:	bf00      	nop
 801cce2:	bd80      	pop	{r7, pc}
 801cce4:	200000cc 	.word	0x200000cc
 801cce8:	2000242c 	.word	0x2000242c
 801ccec:	2000004c 	.word	0x2000004c
 801ccf0:	2000011c 	.word	0x2000011c

0801ccf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ccf4:	b480      	push	{r7}
 801ccf6:	b083      	sub	sp, #12
 801ccf8:	af00      	add	r7, sp, #0
 801ccfa:	4603      	mov	r3, r0
 801ccfc:	6039      	str	r1, [r7, #0]
 801ccfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cd00:	683b      	ldr	r3, [r7, #0]
 801cd02:	2212      	movs	r2, #18
 801cd04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cd06:	4b03      	ldr	r3, [pc, #12]	@ (801cd14 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cd08:	4618      	mov	r0, r3
 801cd0a:	370c      	adds	r7, #12
 801cd0c:	46bd      	mov	sp, r7
 801cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd12:	4770      	bx	lr
 801cd14:	200000e8 	.word	0x200000e8

0801cd18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd18:	b480      	push	{r7}
 801cd1a:	b083      	sub	sp, #12
 801cd1c:	af00      	add	r7, sp, #0
 801cd1e:	4603      	mov	r3, r0
 801cd20:	6039      	str	r1, [r7, #0]
 801cd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cd24:	683b      	ldr	r3, [r7, #0]
 801cd26:	2204      	movs	r2, #4
 801cd28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cd2a:	4b03      	ldr	r3, [pc, #12]	@ (801cd38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	370c      	adds	r7, #12
 801cd30:	46bd      	mov	sp, r7
 801cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd36:	4770      	bx	lr
 801cd38:	200000fc 	.word	0x200000fc

0801cd3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd3c:	b580      	push	{r7, lr}
 801cd3e:	b082      	sub	sp, #8
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	4603      	mov	r3, r0
 801cd44:	6039      	str	r1, [r7, #0]
 801cd46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cd48:	79fb      	ldrb	r3, [r7, #7]
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d105      	bne.n	801cd5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cd4e:	683a      	ldr	r2, [r7, #0]
 801cd50:	4907      	ldr	r1, [pc, #28]	@ (801cd70 <USBD_FS_ProductStrDescriptor+0x34>)
 801cd52:	4808      	ldr	r0, [pc, #32]	@ (801cd74 <USBD_FS_ProductStrDescriptor+0x38>)
 801cd54:	f7fc f8da 	bl	8018f0c <USBD_GetString>
 801cd58:	e004      	b.n	801cd64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cd5a:	683a      	ldr	r2, [r7, #0]
 801cd5c:	4904      	ldr	r1, [pc, #16]	@ (801cd70 <USBD_FS_ProductStrDescriptor+0x34>)
 801cd5e:	4805      	ldr	r0, [pc, #20]	@ (801cd74 <USBD_FS_ProductStrDescriptor+0x38>)
 801cd60:	f7fc f8d4 	bl	8018f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801cd64:	4b02      	ldr	r3, [pc, #8]	@ (801cd70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801cd66:	4618      	mov	r0, r3
 801cd68:	3708      	adds	r7, #8
 801cd6a:	46bd      	mov	sp, r7
 801cd6c:	bd80      	pop	{r7, pc}
 801cd6e:	bf00      	nop
 801cd70:	20002708 	.word	0x20002708
 801cd74:	08024bec 	.word	0x08024bec

0801cd78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd78:	b580      	push	{r7, lr}
 801cd7a:	b082      	sub	sp, #8
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	4603      	mov	r3, r0
 801cd80:	6039      	str	r1, [r7, #0]
 801cd82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cd84:	683a      	ldr	r2, [r7, #0]
 801cd86:	4904      	ldr	r1, [pc, #16]	@ (801cd98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801cd88:	4804      	ldr	r0, [pc, #16]	@ (801cd9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801cd8a:	f7fc f8bf 	bl	8018f0c <USBD_GetString>
  return USBD_StrDesc;
 801cd8e:	4b02      	ldr	r3, [pc, #8]	@ (801cd98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801cd90:	4618      	mov	r0, r3
 801cd92:	3708      	adds	r7, #8
 801cd94:	46bd      	mov	sp, r7
 801cd96:	bd80      	pop	{r7, pc}
 801cd98:	20002708 	.word	0x20002708
 801cd9c:	08024c00 	.word	0x08024c00

0801cda0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cda0:	b580      	push	{r7, lr}
 801cda2:	b082      	sub	sp, #8
 801cda4:	af00      	add	r7, sp, #0
 801cda6:	4603      	mov	r3, r0
 801cda8:	6039      	str	r1, [r7, #0]
 801cdaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801cdac:	683b      	ldr	r3, [r7, #0]
 801cdae:	221a      	movs	r2, #26
 801cdb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801cdb2:	f000 f843 	bl	801ce3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801cdb6:	4b02      	ldr	r3, [pc, #8]	@ (801cdc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801cdb8:	4618      	mov	r0, r3
 801cdba:	3708      	adds	r7, #8
 801cdbc:	46bd      	mov	sp, r7
 801cdbe:	bd80      	pop	{r7, pc}
 801cdc0:	20000100 	.word	0x20000100

0801cdc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cdc4:	b580      	push	{r7, lr}
 801cdc6:	b082      	sub	sp, #8
 801cdc8:	af00      	add	r7, sp, #0
 801cdca:	4603      	mov	r3, r0
 801cdcc:	6039      	str	r1, [r7, #0]
 801cdce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801cdd0:	79fb      	ldrb	r3, [r7, #7]
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d105      	bne.n	801cde2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cdd6:	683a      	ldr	r2, [r7, #0]
 801cdd8:	4907      	ldr	r1, [pc, #28]	@ (801cdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801cdda:	4808      	ldr	r0, [pc, #32]	@ (801cdfc <USBD_FS_ConfigStrDescriptor+0x38>)
 801cddc:	f7fc f896 	bl	8018f0c <USBD_GetString>
 801cde0:	e004      	b.n	801cdec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cde2:	683a      	ldr	r2, [r7, #0]
 801cde4:	4904      	ldr	r1, [pc, #16]	@ (801cdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801cde6:	4805      	ldr	r0, [pc, #20]	@ (801cdfc <USBD_FS_ConfigStrDescriptor+0x38>)
 801cde8:	f7fc f890 	bl	8018f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801cdec:	4b02      	ldr	r3, [pc, #8]	@ (801cdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801cdee:	4618      	mov	r0, r3
 801cdf0:	3708      	adds	r7, #8
 801cdf2:	46bd      	mov	sp, r7
 801cdf4:	bd80      	pop	{r7, pc}
 801cdf6:	bf00      	nop
 801cdf8:	20002708 	.word	0x20002708
 801cdfc:	08024c14 	.word	0x08024c14

0801ce00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce00:	b580      	push	{r7, lr}
 801ce02:	b082      	sub	sp, #8
 801ce04:	af00      	add	r7, sp, #0
 801ce06:	4603      	mov	r3, r0
 801ce08:	6039      	str	r1, [r7, #0]
 801ce0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ce0c:	79fb      	ldrb	r3, [r7, #7]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d105      	bne.n	801ce1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ce12:	683a      	ldr	r2, [r7, #0]
 801ce14:	4907      	ldr	r1, [pc, #28]	@ (801ce34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ce16:	4808      	ldr	r0, [pc, #32]	@ (801ce38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ce18:	f7fc f878 	bl	8018f0c <USBD_GetString>
 801ce1c:	e004      	b.n	801ce28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ce1e:	683a      	ldr	r2, [r7, #0]
 801ce20:	4904      	ldr	r1, [pc, #16]	@ (801ce34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ce22:	4805      	ldr	r0, [pc, #20]	@ (801ce38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ce24:	f7fc f872 	bl	8018f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801ce28:	4b02      	ldr	r3, [pc, #8]	@ (801ce34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801ce2a:	4618      	mov	r0, r3
 801ce2c:	3708      	adds	r7, #8
 801ce2e:	46bd      	mov	sp, r7
 801ce30:	bd80      	pop	{r7, pc}
 801ce32:	bf00      	nop
 801ce34:	20002708 	.word	0x20002708
 801ce38:	08024c20 	.word	0x08024c20

0801ce3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ce3c:	b580      	push	{r7, lr}
 801ce3e:	b084      	sub	sp, #16
 801ce40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 801ce42:	68fa      	ldr	r2, [r7, #12]
 801ce44:	68bb      	ldr	r3, [r7, #8]
 801ce46:	4413      	add	r3, r2
 801ce48:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ce4a:	68fb      	ldr	r3, [r7, #12]
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d009      	beq.n	801ce64 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ce50:	2208      	movs	r2, #8
 801ce52:	4906      	ldr	r1, [pc, #24]	@ (801ce6c <Get_SerialNum+0x30>)
 801ce54:	68f8      	ldr	r0, [r7, #12]
 801ce56:	f000 f80d 	bl	801ce74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ce5a:	2204      	movs	r2, #4
 801ce5c:	4904      	ldr	r1, [pc, #16]	@ (801ce70 <Get_SerialNum+0x34>)
 801ce5e:	6878      	ldr	r0, [r7, #4]
 801ce60:	f000 f808 	bl	801ce74 <IntToUnicode>
  }
}
 801ce64:	bf00      	nop
 801ce66:	3710      	adds	r7, #16
 801ce68:	46bd      	mov	sp, r7
 801ce6a:	bd80      	pop	{r7, pc}
 801ce6c:	20000102 	.word	0x20000102
 801ce70:	20000112 	.word	0x20000112

0801ce74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ce74:	b480      	push	{r7}
 801ce76:	b087      	sub	sp, #28
 801ce78:	af00      	add	r7, sp, #0
 801ce7a:	60f8      	str	r0, [r7, #12]
 801ce7c:	60b9      	str	r1, [r7, #8]
 801ce7e:	4613      	mov	r3, r2
 801ce80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801ce82:	2300      	movs	r3, #0
 801ce84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801ce86:	2300      	movs	r3, #0
 801ce88:	75fb      	strb	r3, [r7, #23]
 801ce8a:	e027      	b.n	801cedc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801ce8c:	68fb      	ldr	r3, [r7, #12]
 801ce8e:	0f1b      	lsrs	r3, r3, #28
 801ce90:	2b09      	cmp	r3, #9
 801ce92:	d80b      	bhi.n	801ceac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801ce94:	68fb      	ldr	r3, [r7, #12]
 801ce96:	0f1b      	lsrs	r3, r3, #28
 801ce98:	b2da      	uxtb	r2, r3
 801ce9a:	7dfb      	ldrb	r3, [r7, #23]
 801ce9c:	005b      	lsls	r3, r3, #1
 801ce9e:	4619      	mov	r1, r3
 801cea0:	68bb      	ldr	r3, [r7, #8]
 801cea2:	440b      	add	r3, r1
 801cea4:	3230      	adds	r2, #48	@ 0x30
 801cea6:	b2d2      	uxtb	r2, r2
 801cea8:	701a      	strb	r2, [r3, #0]
 801ceaa:	e00a      	b.n	801cec2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	0f1b      	lsrs	r3, r3, #28
 801ceb0:	b2da      	uxtb	r2, r3
 801ceb2:	7dfb      	ldrb	r3, [r7, #23]
 801ceb4:	005b      	lsls	r3, r3, #1
 801ceb6:	4619      	mov	r1, r3
 801ceb8:	68bb      	ldr	r3, [r7, #8]
 801ceba:	440b      	add	r3, r1
 801cebc:	3237      	adds	r2, #55	@ 0x37
 801cebe:	b2d2      	uxtb	r2, r2
 801cec0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801cec2:	68fb      	ldr	r3, [r7, #12]
 801cec4:	011b      	lsls	r3, r3, #4
 801cec6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cec8:	7dfb      	ldrb	r3, [r7, #23]
 801ceca:	005b      	lsls	r3, r3, #1
 801cecc:	3301      	adds	r3, #1
 801cece:	68ba      	ldr	r2, [r7, #8]
 801ced0:	4413      	add	r3, r2
 801ced2:	2200      	movs	r2, #0
 801ced4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ced6:	7dfb      	ldrb	r3, [r7, #23]
 801ced8:	3301      	adds	r3, #1
 801ceda:	75fb      	strb	r3, [r7, #23]
 801cedc:	7dfa      	ldrb	r2, [r7, #23]
 801cede:	79fb      	ldrb	r3, [r7, #7]
 801cee0:	429a      	cmp	r2, r3
 801cee2:	d3d3      	bcc.n	801ce8c <IntToUnicode+0x18>
  }
}
 801cee4:	bf00      	nop
 801cee6:	bf00      	nop
 801cee8:	371c      	adds	r7, #28
 801ceea:	46bd      	mov	sp, r7
 801ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cef0:	4770      	bx	lr

0801cef2 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801cef2:	b480      	push	{r7}
 801cef4:	b083      	sub	sp, #12
 801cef6:	af00      	add	r7, sp, #0
 801cef8:	4603      	mov	r3, r0
 801cefa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801cefc:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801cefe:	4618      	mov	r0, r3
 801cf00:	370c      	adds	r7, #12
 801cf02:	46bd      	mov	sp, r7
 801cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf08:	4770      	bx	lr
	...

0801cf0c <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801cf0c:	b580      	push	{r7, lr}
 801cf0e:	b08e      	sub	sp, #56	@ 0x38
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	4603      	mov	r3, r0
 801cf14:	60b9      	str	r1, [r7, #8]
 801cf16:	607a      	str	r2, [r7, #4]
 801cf18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801cf1a:	23ff      	movs	r3, #255	@ 0xff
 801cf1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801cf20:	f107 0314 	add.w	r3, r7, #20
 801cf24:	4619      	mov	r1, r3
 801cf26:	480a      	ldr	r0, [pc, #40]	@ (801cf50 <STORAGE_GetCapacity_FS+0x44>)
 801cf28:	f7ed fea0 	bl	800ac6c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801cf2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf2e:	1e5a      	subs	r2, r3, #1
 801cf30:	68bb      	ldr	r3, [r7, #8]
 801cf32:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801cf34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf36:	b29a      	uxth	r2, r3
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801cf3c:	2300      	movs	r3, #0
 801cf3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  return ret;
 801cf42:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 801cf46:	4618      	mov	r0, r3
 801cf48:	3738      	adds	r7, #56	@ 0x38
 801cf4a:	46bd      	mov	sp, r7
 801cf4c:	bd80      	pop	{r7, pc}
 801cf4e:	bf00      	nop
 801cf50:	200018b8 	.word	0x200018b8

0801cf54 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801cf54:	b480      	push	{r7}
 801cf56:	b083      	sub	sp, #12
 801cf58:	af00      	add	r7, sp, #0
 801cf5a:	4603      	mov	r3, r0
 801cf5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801cf5e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801cf60:	4618      	mov	r0, r3
 801cf62:	370c      	adds	r7, #12
 801cf64:	46bd      	mov	sp, r7
 801cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf6a:	4770      	bx	lr

0801cf6c <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801cf6c:	b480      	push	{r7}
 801cf6e:	b083      	sub	sp, #12
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	4603      	mov	r3, r0
 801cf74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801cf76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cf78:	4618      	mov	r0, r3
 801cf7a:	370c      	adds	r7, #12
 801cf7c:	46bd      	mov	sp, r7
 801cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf82:	4770      	bx	lr

0801cf84 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801cf84:	b580      	push	{r7, lr}
 801cf86:	b088      	sub	sp, #32
 801cf88:	af02      	add	r7, sp, #8
 801cf8a:	60b9      	str	r1, [r7, #8]
 801cf8c:	607a      	str	r2, [r7, #4]
 801cf8e:	461a      	mov	r2, r3
 801cf90:	4603      	mov	r3, r0
 801cf92:	73fb      	strb	r3, [r7, #15]
 801cf94:	4613      	mov	r3, r2
 801cf96:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801cf98:	23ff      	movs	r3, #255	@ 0xff
 801cf9a:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801cf9c:	f7e7 f8ac 	bl	80040f8 <HAL_GetTick>
 801cfa0:	4603      	mov	r3, r0
 801cfa2:	4a0d      	ldr	r2, [pc, #52]	@ (801cfd8 <STORAGE_Read_FS+0x54>)
 801cfa4:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801cfa6:	89bb      	ldrh	r3, [r7, #12]
 801cfa8:	f04f 32ff 	mov.w	r2, #4294967295
 801cfac:	9200      	str	r2, [sp, #0]
 801cfae:	687a      	ldr	r2, [r7, #4]
 801cfb0:	68b9      	ldr	r1, [r7, #8]
 801cfb2:	480a      	ldr	r0, [pc, #40]	@ (801cfdc <STORAGE_Read_FS+0x58>)
 801cfb4:	f7ed f942 	bl	800a23c <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801cfb8:	bf00      	nop
 801cfba:	4808      	ldr	r0, [pc, #32]	@ (801cfdc <STORAGE_Read_FS+0x58>)
 801cfbc:	f7ed fe82 	bl	800acc4 <HAL_SD_GetCardState>
 801cfc0:	4603      	mov	r3, r0
 801cfc2:	2b04      	cmp	r3, #4
 801cfc4:	d1f9      	bne.n	801cfba <STORAGE_Read_FS+0x36>
	  ret = 0;
 801cfc6:	2300      	movs	r3, #0
 801cfc8:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801cfca:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801cfce:	4618      	mov	r0, r3
 801cfd0:	3718      	adds	r7, #24
 801cfd2:	46bd      	mov	sp, r7
 801cfd4:	bd80      	pop	{r7, pc}
 801cfd6:	bf00      	nop
 801cfd8:	200017c0 	.word	0x200017c0
 801cfdc:	200018b8 	.word	0x200018b8

0801cfe0 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801cfe0:	b580      	push	{r7, lr}
 801cfe2:	b088      	sub	sp, #32
 801cfe4:	af02      	add	r7, sp, #8
 801cfe6:	60b9      	str	r1, [r7, #8]
 801cfe8:	607a      	str	r2, [r7, #4]
 801cfea:	461a      	mov	r2, r3
 801cfec:	4603      	mov	r3, r0
 801cfee:	73fb      	strb	r3, [r7, #15]
 801cff0:	4613      	mov	r3, r2
 801cff2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801cff4:	23ff      	movs	r3, #255	@ 0xff
 801cff6:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801cff8:	89bb      	ldrh	r3, [r7, #12]
 801cffa:	f04f 32ff 	mov.w	r2, #4294967295
 801cffe:	9200      	str	r2, [sp, #0]
 801d000:	687a      	ldr	r2, [r7, #4]
 801d002:	68b9      	ldr	r1, [r7, #8]
 801d004:	4808      	ldr	r0, [pc, #32]	@ (801d028 <STORAGE_Write_FS+0x48>)
 801d006:	f7ed faff 	bl	800a608 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d00a:	bf00      	nop
 801d00c:	4806      	ldr	r0, [pc, #24]	@ (801d028 <STORAGE_Write_FS+0x48>)
 801d00e:	f7ed fe59 	bl	800acc4 <HAL_SD_GetCardState>
 801d012:	4603      	mov	r3, r0
 801d014:	2b04      	cmp	r3, #4
 801d016:	d1f9      	bne.n	801d00c <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801d018:	2300      	movs	r3, #0
 801d01a:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d01c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801d020:	4618      	mov	r0, r3
 801d022:	3718      	adds	r7, #24
 801d024:	46bd      	mov	sp, r7
 801d026:	bd80      	pop	{r7, pc}
 801d028:	200018b8 	.word	0x200018b8

0801d02c <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801d02c:	b480      	push	{r7}
 801d02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801d030:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801d032:	4618      	mov	r0, r3
 801d034:	46bd      	mov	sp, r7
 801d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d03a:	4770      	bx	lr

0801d03c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d03c:	b580      	push	{r7, lr}
 801d03e:	b08a      	sub	sp, #40	@ 0x28
 801d040:	af00      	add	r7, sp, #0
 801d042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d044:	f107 0314 	add.w	r3, r7, #20
 801d048:	2200      	movs	r2, #0
 801d04a:	601a      	str	r2, [r3, #0]
 801d04c:	605a      	str	r2, [r3, #4]
 801d04e:	609a      	str	r2, [r3, #8]
 801d050:	60da      	str	r2, [r3, #12]
 801d052:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d05c:	d13a      	bne.n	801d0d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d05e:	2300      	movs	r3, #0
 801d060:	613b      	str	r3, [r7, #16]
 801d062:	4b1e      	ldr	r3, [pc, #120]	@ (801d0dc <HAL_PCD_MspInit+0xa0>)
 801d064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d066:	4a1d      	ldr	r2, [pc, #116]	@ (801d0dc <HAL_PCD_MspInit+0xa0>)
 801d068:	f043 0301 	orr.w	r3, r3, #1
 801d06c:	6313      	str	r3, [r2, #48]	@ 0x30
 801d06e:	4b1b      	ldr	r3, [pc, #108]	@ (801d0dc <HAL_PCD_MspInit+0xa0>)
 801d070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d072:	f003 0301 	and.w	r3, r3, #1
 801d076:	613b      	str	r3, [r7, #16]
 801d078:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d07a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801d07e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d080:	2302      	movs	r3, #2
 801d082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d084:	2300      	movs	r3, #0
 801d086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d088:	2303      	movs	r3, #3
 801d08a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d08c:	230a      	movs	r3, #10
 801d08e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d090:	f107 0314 	add.w	r3, r7, #20
 801d094:	4619      	mov	r1, r3
 801d096:	4812      	ldr	r0, [pc, #72]	@ (801d0e0 <HAL_PCD_MspInit+0xa4>)
 801d098:	f7e8 fd92 	bl	8005bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d09c:	4b0f      	ldr	r3, [pc, #60]	@ (801d0dc <HAL_PCD_MspInit+0xa0>)
 801d09e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d0a0:	4a0e      	ldr	r2, [pc, #56]	@ (801d0dc <HAL_PCD_MspInit+0xa0>)
 801d0a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d0a6:	6353      	str	r3, [r2, #52]	@ 0x34
 801d0a8:	2300      	movs	r3, #0
 801d0aa:	60fb      	str	r3, [r7, #12]
 801d0ac:	4b0b      	ldr	r3, [pc, #44]	@ (801d0dc <HAL_PCD_MspInit+0xa0>)
 801d0ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d0b0:	4a0a      	ldr	r2, [pc, #40]	@ (801d0dc <HAL_PCD_MspInit+0xa0>)
 801d0b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d0b6:	6453      	str	r3, [r2, #68]	@ 0x44
 801d0b8:	4b08      	ldr	r3, [pc, #32]	@ (801d0dc <HAL_PCD_MspInit+0xa0>)
 801d0ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d0bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801d0c0:	60fb      	str	r3, [r7, #12]
 801d0c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	2100      	movs	r1, #0
 801d0c8:	2043      	movs	r0, #67	@ 0x43
 801d0ca:	f7e7 fdf8 	bl	8004cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d0ce:	2043      	movs	r0, #67	@ 0x43
 801d0d0:	f7e7 fe11 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d0d4:	bf00      	nop
 801d0d6:	3728      	adds	r7, #40	@ 0x28
 801d0d8:	46bd      	mov	sp, r7
 801d0da:	bd80      	pop	{r7, pc}
 801d0dc:	40023800 	.word	0x40023800
 801d0e0:	40020000 	.word	0x40020000

0801d0e4 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	b082      	sub	sp, #8
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d0f4:	d10d      	bne.n	801d112 <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801d0f6:	4b09      	ldr	r3, [pc, #36]	@ (801d11c <HAL_PCD_MspDeInit+0x38>)
 801d0f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d0fa:	4a08      	ldr	r2, [pc, #32]	@ (801d11c <HAL_PCD_MspDeInit+0x38>)
 801d0fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d100:	6353      	str	r3, [r2, #52]	@ 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801d102:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801d106:	4806      	ldr	r0, [pc, #24]	@ (801d120 <HAL_PCD_MspDeInit+0x3c>)
 801d108:	f7e8 fede 	bl	8005ec8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801d10c:	2043      	movs	r0, #67	@ 0x43
 801d10e:	f7e7 fe00 	bl	8004d12 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801d112:	bf00      	nop
 801d114:	3708      	adds	r7, #8
 801d116:	46bd      	mov	sp, r7
 801d118:	bd80      	pop	{r7, pc}
 801d11a:	bf00      	nop
 801d11c:	40023800 	.word	0x40023800
 801d120:	40020000 	.word	0x40020000

0801d124 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d124:	b580      	push	{r7, lr}
 801d126:	b082      	sub	sp, #8
 801d128:	af00      	add	r7, sp, #0
 801d12a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801d138:	4619      	mov	r1, r3
 801d13a:	4610      	mov	r0, r2
 801d13c:	f7fa fd83 	bl	8017c46 <USBD_LL_SetupStage>
}
 801d140:	bf00      	nop
 801d142:	3708      	adds	r7, #8
 801d144:	46bd      	mov	sp, r7
 801d146:	bd80      	pop	{r7, pc}

0801d148 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d148:	b580      	push	{r7, lr}
 801d14a:	b082      	sub	sp, #8
 801d14c:	af00      	add	r7, sp, #0
 801d14e:	6078      	str	r0, [r7, #4]
 801d150:	460b      	mov	r3, r1
 801d152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d15a:	78fa      	ldrb	r2, [r7, #3]
 801d15c:	6879      	ldr	r1, [r7, #4]
 801d15e:	4613      	mov	r3, r2
 801d160:	00db      	lsls	r3, r3, #3
 801d162:	4413      	add	r3, r2
 801d164:	009b      	lsls	r3, r3, #2
 801d166:	440b      	add	r3, r1
 801d168:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d16c:	681a      	ldr	r2, [r3, #0]
 801d16e:	78fb      	ldrb	r3, [r7, #3]
 801d170:	4619      	mov	r1, r3
 801d172:	f7fa fdbd 	bl	8017cf0 <USBD_LL_DataOutStage>
}
 801d176:	bf00      	nop
 801d178:	3708      	adds	r7, #8
 801d17a:	46bd      	mov	sp, r7
 801d17c:	bd80      	pop	{r7, pc}

0801d17e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d17e:	b580      	push	{r7, lr}
 801d180:	b082      	sub	sp, #8
 801d182:	af00      	add	r7, sp, #0
 801d184:	6078      	str	r0, [r7, #4]
 801d186:	460b      	mov	r3, r1
 801d188:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d190:	78fa      	ldrb	r2, [r7, #3]
 801d192:	6879      	ldr	r1, [r7, #4]
 801d194:	4613      	mov	r3, r2
 801d196:	00db      	lsls	r3, r3, #3
 801d198:	4413      	add	r3, r2
 801d19a:	009b      	lsls	r3, r3, #2
 801d19c:	440b      	add	r3, r1
 801d19e:	3320      	adds	r3, #32
 801d1a0:	681a      	ldr	r2, [r3, #0]
 801d1a2:	78fb      	ldrb	r3, [r7, #3]
 801d1a4:	4619      	mov	r1, r3
 801d1a6:	f7fa fe56 	bl	8017e56 <USBD_LL_DataInStage>
}
 801d1aa:	bf00      	nop
 801d1ac:	3708      	adds	r7, #8
 801d1ae:	46bd      	mov	sp, r7
 801d1b0:	bd80      	pop	{r7, pc}

0801d1b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1b2:	b580      	push	{r7, lr}
 801d1b4:	b082      	sub	sp, #8
 801d1b6:	af00      	add	r7, sp, #0
 801d1b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d1c0:	4618      	mov	r0, r3
 801d1c2:	f7fa ff90 	bl	80180e6 <USBD_LL_SOF>
}
 801d1c6:	bf00      	nop
 801d1c8:	3708      	adds	r7, #8
 801d1ca:	46bd      	mov	sp, r7
 801d1cc:	bd80      	pop	{r7, pc}

0801d1ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1ce:	b580      	push	{r7, lr}
 801d1d0:	b084      	sub	sp, #16
 801d1d2:	af00      	add	r7, sp, #0
 801d1d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d1d6:	2301      	movs	r3, #1
 801d1d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	79db      	ldrb	r3, [r3, #7]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d102      	bne.n	801d1e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801d1e2:	2300      	movs	r3, #0
 801d1e4:	73fb      	strb	r3, [r7, #15]
 801d1e6:	e008      	b.n	801d1fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	79db      	ldrb	r3, [r3, #7]
 801d1ec:	2b02      	cmp	r3, #2
 801d1ee:	d102      	bne.n	801d1f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801d1f0:	2301      	movs	r3, #1
 801d1f2:	73fb      	strb	r3, [r7, #15]
 801d1f4:	e001      	b.n	801d1fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801d1f6:	f7e6 fa35 	bl	8003664 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d200:	7bfa      	ldrb	r2, [r7, #15]
 801d202:	4611      	mov	r1, r2
 801d204:	4618      	mov	r0, r3
 801d206:	f7fa ff2a 	bl	801805e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d210:	4618      	mov	r0, r3
 801d212:	f7fa fed2 	bl	8017fba <USBD_LL_Reset>
}
 801d216:	bf00      	nop
 801d218:	3710      	adds	r7, #16
 801d21a:	46bd      	mov	sp, r7
 801d21c:	bd80      	pop	{r7, pc}
	...

0801d220 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d220:	b580      	push	{r7, lr}
 801d222:	b082      	sub	sp, #8
 801d224:	af00      	add	r7, sp, #0
 801d226:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d22e:	4618      	mov	r0, r3
 801d230:	f7fa ff25 	bl	801807e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	687a      	ldr	r2, [r7, #4]
 801d240:	6812      	ldr	r2, [r2, #0]
 801d242:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801d246:	f043 0301 	orr.w	r3, r3, #1
 801d24a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	7adb      	ldrb	r3, [r3, #11]
 801d250:	2b00      	cmp	r3, #0
 801d252:	d005      	beq.n	801d260 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d254:	4b04      	ldr	r3, [pc, #16]	@ (801d268 <HAL_PCD_SuspendCallback+0x48>)
 801d256:	691b      	ldr	r3, [r3, #16]
 801d258:	4a03      	ldr	r2, [pc, #12]	@ (801d268 <HAL_PCD_SuspendCallback+0x48>)
 801d25a:	f043 0306 	orr.w	r3, r3, #6
 801d25e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d260:	bf00      	nop
 801d262:	3708      	adds	r7, #8
 801d264:	46bd      	mov	sp, r7
 801d266:	bd80      	pop	{r7, pc}
 801d268:	e000ed00 	.word	0xe000ed00

0801d26c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d26c:	b580      	push	{r7, lr}
 801d26e:	b082      	sub	sp, #8
 801d270:	af00      	add	r7, sp, #0
 801d272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d27a:	4618      	mov	r0, r3
 801d27c:	f7fa ff1b 	bl	80180b6 <USBD_LL_Resume>
}
 801d280:	bf00      	nop
 801d282:	3708      	adds	r7, #8
 801d284:	46bd      	mov	sp, r7
 801d286:	bd80      	pop	{r7, pc}

0801d288 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d288:	b580      	push	{r7, lr}
 801d28a:	b082      	sub	sp, #8
 801d28c:	af00      	add	r7, sp, #0
 801d28e:	6078      	str	r0, [r7, #4]
 801d290:	460b      	mov	r3, r1
 801d292:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d29a:	78fa      	ldrb	r2, [r7, #3]
 801d29c:	4611      	mov	r1, r2
 801d29e:	4618      	mov	r0, r3
 801d2a0:	f7fa ff73 	bl	801818a <USBD_LL_IsoOUTIncomplete>
}
 801d2a4:	bf00      	nop
 801d2a6:	3708      	adds	r7, #8
 801d2a8:	46bd      	mov	sp, r7
 801d2aa:	bd80      	pop	{r7, pc}

0801d2ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b082      	sub	sp, #8
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
 801d2b4:	460b      	mov	r3, r1
 801d2b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d2be:	78fa      	ldrb	r2, [r7, #3]
 801d2c0:	4611      	mov	r1, r2
 801d2c2:	4618      	mov	r0, r3
 801d2c4:	f7fa ff2f 	bl	8018126 <USBD_LL_IsoINIncomplete>
}
 801d2c8:	bf00      	nop
 801d2ca:	3708      	adds	r7, #8
 801d2cc:	46bd      	mov	sp, r7
 801d2ce:	bd80      	pop	{r7, pc}

0801d2d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b082      	sub	sp, #8
 801d2d4:	af00      	add	r7, sp, #0
 801d2d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d2de:	4618      	mov	r0, r3
 801d2e0:	f7fa ff85 	bl	80181ee <USBD_LL_DevConnected>
}
 801d2e4:	bf00      	nop
 801d2e6:	3708      	adds	r7, #8
 801d2e8:	46bd      	mov	sp, r7
 801d2ea:	bd80      	pop	{r7, pc}

0801d2ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2ec:	b580      	push	{r7, lr}
 801d2ee:	b082      	sub	sp, #8
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f7fa ff82 	bl	8018204 <USBD_LL_DevDisconnected>
}
 801d300:	bf00      	nop
 801d302:	3708      	adds	r7, #8
 801d304:	46bd      	mov	sp, r7
 801d306:	bd80      	pop	{r7, pc}

0801d308 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d308:	b580      	push	{r7, lr}
 801d30a:	b082      	sub	sp, #8
 801d30c:	af00      	add	r7, sp, #0
 801d30e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	781b      	ldrb	r3, [r3, #0]
 801d314:	2b00      	cmp	r3, #0
 801d316:	d13c      	bne.n	801d392 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d318:	4a20      	ldr	r2, [pc, #128]	@ (801d39c <USBD_LL_Init+0x94>)
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	4a1e      	ldr	r2, [pc, #120]	@ (801d39c <USBD_LL_Init+0x94>)
 801d324:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d328:	4b1c      	ldr	r3, [pc, #112]	@ (801d39c <USBD_LL_Init+0x94>)
 801d32a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801d32e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d330:	4b1a      	ldr	r3, [pc, #104]	@ (801d39c <USBD_LL_Init+0x94>)
 801d332:	2204      	movs	r2, #4
 801d334:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d336:	4b19      	ldr	r3, [pc, #100]	@ (801d39c <USBD_LL_Init+0x94>)
 801d338:	2202      	movs	r2, #2
 801d33a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d33c:	4b17      	ldr	r3, [pc, #92]	@ (801d39c <USBD_LL_Init+0x94>)
 801d33e:	2200      	movs	r2, #0
 801d340:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d342:	4b16      	ldr	r3, [pc, #88]	@ (801d39c <USBD_LL_Init+0x94>)
 801d344:	2202      	movs	r2, #2
 801d346:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d348:	4b14      	ldr	r3, [pc, #80]	@ (801d39c <USBD_LL_Init+0x94>)
 801d34a:	2200      	movs	r2, #0
 801d34c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d34e:	4b13      	ldr	r3, [pc, #76]	@ (801d39c <USBD_LL_Init+0x94>)
 801d350:	2200      	movs	r2, #0
 801d352:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d354:	4b11      	ldr	r3, [pc, #68]	@ (801d39c <USBD_LL_Init+0x94>)
 801d356:	2200      	movs	r2, #0
 801d358:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d35a:	4b10      	ldr	r3, [pc, #64]	@ (801d39c <USBD_LL_Init+0x94>)
 801d35c:	2200      	movs	r2, #0
 801d35e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d360:	4b0e      	ldr	r3, [pc, #56]	@ (801d39c <USBD_LL_Init+0x94>)
 801d362:	2200      	movs	r2, #0
 801d364:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d366:	480d      	ldr	r0, [pc, #52]	@ (801d39c <USBD_LL_Init+0x94>)
 801d368:	f7ea f886 	bl	8007478 <HAL_PCD_Init>
 801d36c:	4603      	mov	r3, r0
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d001      	beq.n	801d376 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d372:	f7e6 f977 	bl	8003664 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d376:	2180      	movs	r1, #128	@ 0x80
 801d378:	4808      	ldr	r0, [pc, #32]	@ (801d39c <USBD_LL_Init+0x94>)
 801d37a:	f7eb fb3c 	bl	80089f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d37e:	2240      	movs	r2, #64	@ 0x40
 801d380:	2100      	movs	r1, #0
 801d382:	4806      	ldr	r0, [pc, #24]	@ (801d39c <USBD_LL_Init+0x94>)
 801d384:	f7eb faf0 	bl	8008968 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d388:	2280      	movs	r2, #128	@ 0x80
 801d38a:	2101      	movs	r1, #1
 801d38c:	4803      	ldr	r0, [pc, #12]	@ (801d39c <USBD_LL_Init+0x94>)
 801d38e:	f7eb faeb 	bl	8008968 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d392:	2300      	movs	r3, #0
}
 801d394:	4618      	mov	r0, r3
 801d396:	3708      	adds	r7, #8
 801d398:	46bd      	mov	sp, r7
 801d39a:	bd80      	pop	{r7, pc}
 801d39c:	20002908 	.word	0x20002908

0801d3a0 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801d3a0:	b580      	push	{r7, lr}
 801d3a2:	b084      	sub	sp, #16
 801d3a4:	af00      	add	r7, sp, #0
 801d3a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f7ea f96d 	bl	8007696 <HAL_PCD_DeInit>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d3c0:	7bfb      	ldrb	r3, [r7, #15]
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	f000 f998 	bl	801d6f8 <USBD_Get_USB_Status>
 801d3c8:	4603      	mov	r3, r0
 801d3ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d3cc:	7bbb      	ldrb	r3, [r7, #14]
}
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	3710      	adds	r7, #16
 801d3d2:	46bd      	mov	sp, r7
 801d3d4:	bd80      	pop	{r7, pc}

0801d3d6 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d3d6:	b580      	push	{r7, lr}
 801d3d8:	b084      	sub	sp, #16
 801d3da:	af00      	add	r7, sp, #0
 801d3dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3de:	2300      	movs	r3, #0
 801d3e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3e2:	2300      	movs	r3, #0
 801d3e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d3ec:	4618      	mov	r0, r3
 801d3ee:	f7ea f975 	bl	80076dc <HAL_PCD_Start>
 801d3f2:	4603      	mov	r3, r0
 801d3f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d3f6:	7bfb      	ldrb	r3, [r7, #15]
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	f000 f97d 	bl	801d6f8 <USBD_Get_USB_Status>
 801d3fe:	4603      	mov	r3, r0
 801d400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d402:	7bbb      	ldrb	r3, [r7, #14]
}
 801d404:	4618      	mov	r0, r3
 801d406:	3710      	adds	r7, #16
 801d408:	46bd      	mov	sp, r7
 801d40a:	bd80      	pop	{r7, pc}

0801d40c <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801d40c:	b580      	push	{r7, lr}
 801d40e:	b084      	sub	sp, #16
 801d410:	af00      	add	r7, sp, #0
 801d412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d414:	2300      	movs	r3, #0
 801d416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d418:	2300      	movs	r3, #0
 801d41a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d422:	4618      	mov	r0, r3
 801d424:	f7ea f98f 	bl	8007746 <HAL_PCD_Stop>
 801d428:	4603      	mov	r3, r0
 801d42a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d42c:	7bfb      	ldrb	r3, [r7, #15]
 801d42e:	4618      	mov	r0, r3
 801d430:	f000 f962 	bl	801d6f8 <USBD_Get_USB_Status>
 801d434:	4603      	mov	r3, r0
 801d436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d438:	7bbb      	ldrb	r3, [r7, #14]
}
 801d43a:	4618      	mov	r0, r3
 801d43c:	3710      	adds	r7, #16
 801d43e:	46bd      	mov	sp, r7
 801d440:	bd80      	pop	{r7, pc}

0801d442 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d442:	b580      	push	{r7, lr}
 801d444:	b084      	sub	sp, #16
 801d446:	af00      	add	r7, sp, #0
 801d448:	6078      	str	r0, [r7, #4]
 801d44a:	4608      	mov	r0, r1
 801d44c:	4611      	mov	r1, r2
 801d44e:	461a      	mov	r2, r3
 801d450:	4603      	mov	r3, r0
 801d452:	70fb      	strb	r3, [r7, #3]
 801d454:	460b      	mov	r3, r1
 801d456:	70bb      	strb	r3, [r7, #2]
 801d458:	4613      	mov	r3, r2
 801d45a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d45c:	2300      	movs	r3, #0
 801d45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d460:	2300      	movs	r3, #0
 801d462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d46a:	78bb      	ldrb	r3, [r7, #2]
 801d46c:	883a      	ldrh	r2, [r7, #0]
 801d46e:	78f9      	ldrb	r1, [r7, #3]
 801d470:	f7ea fe69 	bl	8008146 <HAL_PCD_EP_Open>
 801d474:	4603      	mov	r3, r0
 801d476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d478:	7bfb      	ldrb	r3, [r7, #15]
 801d47a:	4618      	mov	r0, r3
 801d47c:	f000 f93c 	bl	801d6f8 <USBD_Get_USB_Status>
 801d480:	4603      	mov	r3, r0
 801d482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d484:	7bbb      	ldrb	r3, [r7, #14]
}
 801d486:	4618      	mov	r0, r3
 801d488:	3710      	adds	r7, #16
 801d48a:	46bd      	mov	sp, r7
 801d48c:	bd80      	pop	{r7, pc}

0801d48e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d48e:	b580      	push	{r7, lr}
 801d490:	b084      	sub	sp, #16
 801d492:	af00      	add	r7, sp, #0
 801d494:	6078      	str	r0, [r7, #4]
 801d496:	460b      	mov	r3, r1
 801d498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d49a:	2300      	movs	r3, #0
 801d49c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d49e:	2300      	movs	r3, #0
 801d4a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d4a8:	78fa      	ldrb	r2, [r7, #3]
 801d4aa:	4611      	mov	r1, r2
 801d4ac:	4618      	mov	r0, r3
 801d4ae:	f7ea feb2 	bl	8008216 <HAL_PCD_EP_Close>
 801d4b2:	4603      	mov	r3, r0
 801d4b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4b6:	7bfb      	ldrb	r3, [r7, #15]
 801d4b8:	4618      	mov	r0, r3
 801d4ba:	f000 f91d 	bl	801d6f8 <USBD_Get_USB_Status>
 801d4be:	4603      	mov	r3, r0
 801d4c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d4c2:	7bbb      	ldrb	r3, [r7, #14]
}
 801d4c4:	4618      	mov	r0, r3
 801d4c6:	3710      	adds	r7, #16
 801d4c8:	46bd      	mov	sp, r7
 801d4ca:	bd80      	pop	{r7, pc}

0801d4cc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d4cc:	b580      	push	{r7, lr}
 801d4ce:	b084      	sub	sp, #16
 801d4d0:	af00      	add	r7, sp, #0
 801d4d2:	6078      	str	r0, [r7, #4]
 801d4d4:	460b      	mov	r3, r1
 801d4d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4d8:	2300      	movs	r3, #0
 801d4da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4dc:	2300      	movs	r3, #0
 801d4de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d4e6:	78fa      	ldrb	r2, [r7, #3]
 801d4e8:	4611      	mov	r1, r2
 801d4ea:	4618      	mov	r0, r3
 801d4ec:	f7eb f854 	bl	8008598 <HAL_PCD_EP_Flush>
 801d4f0:	4603      	mov	r3, r0
 801d4f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4f4:	7bfb      	ldrb	r3, [r7, #15]
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	f000 f8fe 	bl	801d6f8 <USBD_Get_USB_Status>
 801d4fc:	4603      	mov	r3, r0
 801d4fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d500:	7bbb      	ldrb	r3, [r7, #14]
}
 801d502:	4618      	mov	r0, r3
 801d504:	3710      	adds	r7, #16
 801d506:	46bd      	mov	sp, r7
 801d508:	bd80      	pop	{r7, pc}

0801d50a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d50a:	b580      	push	{r7, lr}
 801d50c:	b084      	sub	sp, #16
 801d50e:	af00      	add	r7, sp, #0
 801d510:	6078      	str	r0, [r7, #4]
 801d512:	460b      	mov	r3, r1
 801d514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d516:	2300      	movs	r3, #0
 801d518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d51a:	2300      	movs	r3, #0
 801d51c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d524:	78fa      	ldrb	r2, [r7, #3]
 801d526:	4611      	mov	r1, r2
 801d528:	4618      	mov	r0, r3
 801d52a:	f7ea ff4b 	bl	80083c4 <HAL_PCD_EP_SetStall>
 801d52e:	4603      	mov	r3, r0
 801d530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d532:	7bfb      	ldrb	r3, [r7, #15]
 801d534:	4618      	mov	r0, r3
 801d536:	f000 f8df 	bl	801d6f8 <USBD_Get_USB_Status>
 801d53a:	4603      	mov	r3, r0
 801d53c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d53e:	7bbb      	ldrb	r3, [r7, #14]
}
 801d540:	4618      	mov	r0, r3
 801d542:	3710      	adds	r7, #16
 801d544:	46bd      	mov	sp, r7
 801d546:	bd80      	pop	{r7, pc}

0801d548 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b084      	sub	sp, #16
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
 801d550:	460b      	mov	r3, r1
 801d552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d554:	2300      	movs	r3, #0
 801d556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d558:	2300      	movs	r3, #0
 801d55a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d562:	78fa      	ldrb	r2, [r7, #3]
 801d564:	4611      	mov	r1, r2
 801d566:	4618      	mov	r0, r3
 801d568:	f7ea ff8f 	bl	800848a <HAL_PCD_EP_ClrStall>
 801d56c:	4603      	mov	r3, r0
 801d56e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d570:	7bfb      	ldrb	r3, [r7, #15]
 801d572:	4618      	mov	r0, r3
 801d574:	f000 f8c0 	bl	801d6f8 <USBD_Get_USB_Status>
 801d578:	4603      	mov	r3, r0
 801d57a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d57c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d57e:	4618      	mov	r0, r3
 801d580:	3710      	adds	r7, #16
 801d582:	46bd      	mov	sp, r7
 801d584:	bd80      	pop	{r7, pc}

0801d586 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d586:	b480      	push	{r7}
 801d588:	b085      	sub	sp, #20
 801d58a:	af00      	add	r7, sp, #0
 801d58c:	6078      	str	r0, [r7, #4]
 801d58e:	460b      	mov	r3, r1
 801d590:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d598:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d59a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	da0b      	bge.n	801d5ba <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d5a2:	78fb      	ldrb	r3, [r7, #3]
 801d5a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d5a8:	68f9      	ldr	r1, [r7, #12]
 801d5aa:	4613      	mov	r3, r2
 801d5ac:	00db      	lsls	r3, r3, #3
 801d5ae:	4413      	add	r3, r2
 801d5b0:	009b      	lsls	r3, r3, #2
 801d5b2:	440b      	add	r3, r1
 801d5b4:	3316      	adds	r3, #22
 801d5b6:	781b      	ldrb	r3, [r3, #0]
 801d5b8:	e00b      	b.n	801d5d2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d5ba:	78fb      	ldrb	r3, [r7, #3]
 801d5bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d5c0:	68f9      	ldr	r1, [r7, #12]
 801d5c2:	4613      	mov	r3, r2
 801d5c4:	00db      	lsls	r3, r3, #3
 801d5c6:	4413      	add	r3, r2
 801d5c8:	009b      	lsls	r3, r3, #2
 801d5ca:	440b      	add	r3, r1
 801d5cc:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801d5d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d5d2:	4618      	mov	r0, r3
 801d5d4:	3714      	adds	r7, #20
 801d5d6:	46bd      	mov	sp, r7
 801d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5dc:	4770      	bx	lr

0801d5de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d5de:	b580      	push	{r7, lr}
 801d5e0:	b084      	sub	sp, #16
 801d5e2:	af00      	add	r7, sp, #0
 801d5e4:	6078      	str	r0, [r7, #4]
 801d5e6:	460b      	mov	r3, r1
 801d5e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5ea:	2300      	movs	r3, #0
 801d5ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d5f8:	78fa      	ldrb	r2, [r7, #3]
 801d5fa:	4611      	mov	r1, r2
 801d5fc:	4618      	mov	r0, r3
 801d5fe:	f7ea fd7e 	bl	80080fe <HAL_PCD_SetAddress>
 801d602:	4603      	mov	r3, r0
 801d604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d606:	7bfb      	ldrb	r3, [r7, #15]
 801d608:	4618      	mov	r0, r3
 801d60a:	f000 f875 	bl	801d6f8 <USBD_Get_USB_Status>
 801d60e:	4603      	mov	r3, r0
 801d610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d612:	7bbb      	ldrb	r3, [r7, #14]
}
 801d614:	4618      	mov	r0, r3
 801d616:	3710      	adds	r7, #16
 801d618:	46bd      	mov	sp, r7
 801d61a:	bd80      	pop	{r7, pc}

0801d61c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d61c:	b580      	push	{r7, lr}
 801d61e:	b086      	sub	sp, #24
 801d620:	af00      	add	r7, sp, #0
 801d622:	60f8      	str	r0, [r7, #12]
 801d624:	607a      	str	r2, [r7, #4]
 801d626:	603b      	str	r3, [r7, #0]
 801d628:	460b      	mov	r3, r1
 801d62a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d62c:	2300      	movs	r3, #0
 801d62e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d630:	2300      	movs	r3, #0
 801d632:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d63a:	7af9      	ldrb	r1, [r7, #11]
 801d63c:	683b      	ldr	r3, [r7, #0]
 801d63e:	687a      	ldr	r2, [r7, #4]
 801d640:	f7ea fe86 	bl	8008350 <HAL_PCD_EP_Transmit>
 801d644:	4603      	mov	r3, r0
 801d646:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d648:	7dfb      	ldrb	r3, [r7, #23]
 801d64a:	4618      	mov	r0, r3
 801d64c:	f000 f854 	bl	801d6f8 <USBD_Get_USB_Status>
 801d650:	4603      	mov	r3, r0
 801d652:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d654:	7dbb      	ldrb	r3, [r7, #22]
}
 801d656:	4618      	mov	r0, r3
 801d658:	3718      	adds	r7, #24
 801d65a:	46bd      	mov	sp, r7
 801d65c:	bd80      	pop	{r7, pc}

0801d65e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d65e:	b580      	push	{r7, lr}
 801d660:	b086      	sub	sp, #24
 801d662:	af00      	add	r7, sp, #0
 801d664:	60f8      	str	r0, [r7, #12]
 801d666:	607a      	str	r2, [r7, #4]
 801d668:	603b      	str	r3, [r7, #0]
 801d66a:	460b      	mov	r3, r1
 801d66c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d66e:	2300      	movs	r3, #0
 801d670:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d672:	2300      	movs	r3, #0
 801d674:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d67c:	7af9      	ldrb	r1, [r7, #11]
 801d67e:	683b      	ldr	r3, [r7, #0]
 801d680:	687a      	ldr	r2, [r7, #4]
 801d682:	f7ea fe12 	bl	80082aa <HAL_PCD_EP_Receive>
 801d686:	4603      	mov	r3, r0
 801d688:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d68a:	7dfb      	ldrb	r3, [r7, #23]
 801d68c:	4618      	mov	r0, r3
 801d68e:	f000 f833 	bl	801d6f8 <USBD_Get_USB_Status>
 801d692:	4603      	mov	r3, r0
 801d694:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d696:	7dbb      	ldrb	r3, [r7, #22]
}
 801d698:	4618      	mov	r0, r3
 801d69a:	3718      	adds	r7, #24
 801d69c:	46bd      	mov	sp, r7
 801d69e:	bd80      	pop	{r7, pc}

0801d6a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d6a0:	b580      	push	{r7, lr}
 801d6a2:	b082      	sub	sp, #8
 801d6a4:	af00      	add	r7, sp, #0
 801d6a6:	6078      	str	r0, [r7, #4]
 801d6a8:	460b      	mov	r3, r1
 801d6aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d6b2:	78fa      	ldrb	r2, [r7, #3]
 801d6b4:	4611      	mov	r1, r2
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7ea fe32 	bl	8008320 <HAL_PCD_EP_GetRxCount>
 801d6bc:	4603      	mov	r3, r0
}
 801d6be:	4618      	mov	r0, r3
 801d6c0:	3708      	adds	r7, #8
 801d6c2:	46bd      	mov	sp, r7
 801d6c4:	bd80      	pop	{r7, pc}
	...

0801d6c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d6c8:	b480      	push	{r7}
 801d6ca:	b083      	sub	sp, #12
 801d6cc:	af00      	add	r7, sp, #0
 801d6ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d6d0:	4b03      	ldr	r3, [pc, #12]	@ (801d6e0 <USBD_static_malloc+0x18>)
}
 801d6d2:	4618      	mov	r0, r3
 801d6d4:	370c      	adds	r7, #12
 801d6d6:	46bd      	mov	sp, r7
 801d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6dc:	4770      	bx	lr
 801d6de:	bf00      	nop
 801d6e0:	20002dec 	.word	0x20002dec

0801d6e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d6e4:	b480      	push	{r7}
 801d6e6:	b083      	sub	sp, #12
 801d6e8:	af00      	add	r7, sp, #0
 801d6ea:	6078      	str	r0, [r7, #4]

}
 801d6ec:	bf00      	nop
 801d6ee:	370c      	adds	r7, #12
 801d6f0:	46bd      	mov	sp, r7
 801d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6f6:	4770      	bx	lr

0801d6f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d6f8:	b480      	push	{r7}
 801d6fa:	b085      	sub	sp, #20
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	4603      	mov	r3, r0
 801d700:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d702:	2300      	movs	r3, #0
 801d704:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d706:	79fb      	ldrb	r3, [r7, #7]
 801d708:	2b03      	cmp	r3, #3
 801d70a:	d817      	bhi.n	801d73c <USBD_Get_USB_Status+0x44>
 801d70c:	a201      	add	r2, pc, #4	@ (adr r2, 801d714 <USBD_Get_USB_Status+0x1c>)
 801d70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d712:	bf00      	nop
 801d714:	0801d725 	.word	0x0801d725
 801d718:	0801d72b 	.word	0x0801d72b
 801d71c:	0801d731 	.word	0x0801d731
 801d720:	0801d737 	.word	0x0801d737
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d724:	2300      	movs	r3, #0
 801d726:	73fb      	strb	r3, [r7, #15]
    break;
 801d728:	e00b      	b.n	801d742 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d72a:	2303      	movs	r3, #3
 801d72c:	73fb      	strb	r3, [r7, #15]
    break;
 801d72e:	e008      	b.n	801d742 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d730:	2301      	movs	r3, #1
 801d732:	73fb      	strb	r3, [r7, #15]
    break;
 801d734:	e005      	b.n	801d742 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d736:	2303      	movs	r3, #3
 801d738:	73fb      	strb	r3, [r7, #15]
    break;
 801d73a:	e002      	b.n	801d742 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d73c:	2303      	movs	r3, #3
 801d73e:	73fb      	strb	r3, [r7, #15]
    break;
 801d740:	bf00      	nop
  }
  return usb_status;
 801d742:	7bfb      	ldrb	r3, [r7, #15]
}
 801d744:	4618      	mov	r0, r3
 801d746:	3714      	adds	r7, #20
 801d748:	46bd      	mov	sp, r7
 801d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d74e:	4770      	bx	lr

0801d750 <atoi>:
 801d750:	220a      	movs	r2, #10
 801d752:	2100      	movs	r1, #0
 801d754:	f000 b932 	b.w	801d9bc <strtol>

0801d758 <malloc>:
 801d758:	4b02      	ldr	r3, [pc, #8]	@ (801d764 <malloc+0xc>)
 801d75a:	4601      	mov	r1, r0
 801d75c:	6818      	ldr	r0, [r3, #0]
 801d75e:	f000 b825 	b.w	801d7ac <_malloc_r>
 801d762:	bf00      	nop
 801d764:	20000148 	.word	0x20000148

0801d768 <sbrk_aligned>:
 801d768:	b570      	push	{r4, r5, r6, lr}
 801d76a:	4e0f      	ldr	r6, [pc, #60]	@ (801d7a8 <sbrk_aligned+0x40>)
 801d76c:	460c      	mov	r4, r1
 801d76e:	6831      	ldr	r1, [r6, #0]
 801d770:	4605      	mov	r5, r0
 801d772:	b911      	cbnz	r1, 801d77a <sbrk_aligned+0x12>
 801d774:	f001 fb2e 	bl	801edd4 <_sbrk_r>
 801d778:	6030      	str	r0, [r6, #0]
 801d77a:	4621      	mov	r1, r4
 801d77c:	4628      	mov	r0, r5
 801d77e:	f001 fb29 	bl	801edd4 <_sbrk_r>
 801d782:	1c43      	adds	r3, r0, #1
 801d784:	d103      	bne.n	801d78e <sbrk_aligned+0x26>
 801d786:	f04f 34ff 	mov.w	r4, #4294967295
 801d78a:	4620      	mov	r0, r4
 801d78c:	bd70      	pop	{r4, r5, r6, pc}
 801d78e:	1cc4      	adds	r4, r0, #3
 801d790:	f024 0403 	bic.w	r4, r4, #3
 801d794:	42a0      	cmp	r0, r4
 801d796:	d0f8      	beq.n	801d78a <sbrk_aligned+0x22>
 801d798:	1a21      	subs	r1, r4, r0
 801d79a:	4628      	mov	r0, r5
 801d79c:	f001 fb1a 	bl	801edd4 <_sbrk_r>
 801d7a0:	3001      	adds	r0, #1
 801d7a2:	d1f2      	bne.n	801d78a <sbrk_aligned+0x22>
 801d7a4:	e7ef      	b.n	801d786 <sbrk_aligned+0x1e>
 801d7a6:	bf00      	nop
 801d7a8:	20003664 	.word	0x20003664

0801d7ac <_malloc_r>:
 801d7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d7b0:	1ccd      	adds	r5, r1, #3
 801d7b2:	f025 0503 	bic.w	r5, r5, #3
 801d7b6:	3508      	adds	r5, #8
 801d7b8:	2d0c      	cmp	r5, #12
 801d7ba:	bf38      	it	cc
 801d7bc:	250c      	movcc	r5, #12
 801d7be:	2d00      	cmp	r5, #0
 801d7c0:	4606      	mov	r6, r0
 801d7c2:	db01      	blt.n	801d7c8 <_malloc_r+0x1c>
 801d7c4:	42a9      	cmp	r1, r5
 801d7c6:	d904      	bls.n	801d7d2 <_malloc_r+0x26>
 801d7c8:	230c      	movs	r3, #12
 801d7ca:	6033      	str	r3, [r6, #0]
 801d7cc:	2000      	movs	r0, #0
 801d7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d7d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d8a8 <_malloc_r+0xfc>
 801d7d6:	f000 f869 	bl	801d8ac <__malloc_lock>
 801d7da:	f8d8 3000 	ldr.w	r3, [r8]
 801d7de:	461c      	mov	r4, r3
 801d7e0:	bb44      	cbnz	r4, 801d834 <_malloc_r+0x88>
 801d7e2:	4629      	mov	r1, r5
 801d7e4:	4630      	mov	r0, r6
 801d7e6:	f7ff ffbf 	bl	801d768 <sbrk_aligned>
 801d7ea:	1c43      	adds	r3, r0, #1
 801d7ec:	4604      	mov	r4, r0
 801d7ee:	d158      	bne.n	801d8a2 <_malloc_r+0xf6>
 801d7f0:	f8d8 4000 	ldr.w	r4, [r8]
 801d7f4:	4627      	mov	r7, r4
 801d7f6:	2f00      	cmp	r7, #0
 801d7f8:	d143      	bne.n	801d882 <_malloc_r+0xd6>
 801d7fa:	2c00      	cmp	r4, #0
 801d7fc:	d04b      	beq.n	801d896 <_malloc_r+0xea>
 801d7fe:	6823      	ldr	r3, [r4, #0]
 801d800:	4639      	mov	r1, r7
 801d802:	4630      	mov	r0, r6
 801d804:	eb04 0903 	add.w	r9, r4, r3
 801d808:	f001 fae4 	bl	801edd4 <_sbrk_r>
 801d80c:	4581      	cmp	r9, r0
 801d80e:	d142      	bne.n	801d896 <_malloc_r+0xea>
 801d810:	6821      	ldr	r1, [r4, #0]
 801d812:	1a6d      	subs	r5, r5, r1
 801d814:	4629      	mov	r1, r5
 801d816:	4630      	mov	r0, r6
 801d818:	f7ff ffa6 	bl	801d768 <sbrk_aligned>
 801d81c:	3001      	adds	r0, #1
 801d81e:	d03a      	beq.n	801d896 <_malloc_r+0xea>
 801d820:	6823      	ldr	r3, [r4, #0]
 801d822:	442b      	add	r3, r5
 801d824:	6023      	str	r3, [r4, #0]
 801d826:	f8d8 3000 	ldr.w	r3, [r8]
 801d82a:	685a      	ldr	r2, [r3, #4]
 801d82c:	bb62      	cbnz	r2, 801d888 <_malloc_r+0xdc>
 801d82e:	f8c8 7000 	str.w	r7, [r8]
 801d832:	e00f      	b.n	801d854 <_malloc_r+0xa8>
 801d834:	6822      	ldr	r2, [r4, #0]
 801d836:	1b52      	subs	r2, r2, r5
 801d838:	d420      	bmi.n	801d87c <_malloc_r+0xd0>
 801d83a:	2a0b      	cmp	r2, #11
 801d83c:	d917      	bls.n	801d86e <_malloc_r+0xc2>
 801d83e:	1961      	adds	r1, r4, r5
 801d840:	42a3      	cmp	r3, r4
 801d842:	6025      	str	r5, [r4, #0]
 801d844:	bf18      	it	ne
 801d846:	6059      	strne	r1, [r3, #4]
 801d848:	6863      	ldr	r3, [r4, #4]
 801d84a:	bf08      	it	eq
 801d84c:	f8c8 1000 	streq.w	r1, [r8]
 801d850:	5162      	str	r2, [r4, r5]
 801d852:	604b      	str	r3, [r1, #4]
 801d854:	4630      	mov	r0, r6
 801d856:	f000 f82f 	bl	801d8b8 <__malloc_unlock>
 801d85a:	f104 000b 	add.w	r0, r4, #11
 801d85e:	1d23      	adds	r3, r4, #4
 801d860:	f020 0007 	bic.w	r0, r0, #7
 801d864:	1ac2      	subs	r2, r0, r3
 801d866:	bf1c      	itt	ne
 801d868:	1a1b      	subne	r3, r3, r0
 801d86a:	50a3      	strne	r3, [r4, r2]
 801d86c:	e7af      	b.n	801d7ce <_malloc_r+0x22>
 801d86e:	6862      	ldr	r2, [r4, #4]
 801d870:	42a3      	cmp	r3, r4
 801d872:	bf0c      	ite	eq
 801d874:	f8c8 2000 	streq.w	r2, [r8]
 801d878:	605a      	strne	r2, [r3, #4]
 801d87a:	e7eb      	b.n	801d854 <_malloc_r+0xa8>
 801d87c:	4623      	mov	r3, r4
 801d87e:	6864      	ldr	r4, [r4, #4]
 801d880:	e7ae      	b.n	801d7e0 <_malloc_r+0x34>
 801d882:	463c      	mov	r4, r7
 801d884:	687f      	ldr	r7, [r7, #4]
 801d886:	e7b6      	b.n	801d7f6 <_malloc_r+0x4a>
 801d888:	461a      	mov	r2, r3
 801d88a:	685b      	ldr	r3, [r3, #4]
 801d88c:	42a3      	cmp	r3, r4
 801d88e:	d1fb      	bne.n	801d888 <_malloc_r+0xdc>
 801d890:	2300      	movs	r3, #0
 801d892:	6053      	str	r3, [r2, #4]
 801d894:	e7de      	b.n	801d854 <_malloc_r+0xa8>
 801d896:	230c      	movs	r3, #12
 801d898:	6033      	str	r3, [r6, #0]
 801d89a:	4630      	mov	r0, r6
 801d89c:	f000 f80c 	bl	801d8b8 <__malloc_unlock>
 801d8a0:	e794      	b.n	801d7cc <_malloc_r+0x20>
 801d8a2:	6005      	str	r5, [r0, #0]
 801d8a4:	e7d6      	b.n	801d854 <_malloc_r+0xa8>
 801d8a6:	bf00      	nop
 801d8a8:	20003668 	.word	0x20003668

0801d8ac <__malloc_lock>:
 801d8ac:	4801      	ldr	r0, [pc, #4]	@ (801d8b4 <__malloc_lock+0x8>)
 801d8ae:	f001 bade 	b.w	801ee6e <__retarget_lock_acquire_recursive>
 801d8b2:	bf00      	nop
 801d8b4:	200037ac 	.word	0x200037ac

0801d8b8 <__malloc_unlock>:
 801d8b8:	4801      	ldr	r0, [pc, #4]	@ (801d8c0 <__malloc_unlock+0x8>)
 801d8ba:	f001 bad9 	b.w	801ee70 <__retarget_lock_release_recursive>
 801d8be:	bf00      	nop
 801d8c0:	200037ac 	.word	0x200037ac

0801d8c4 <_strtol_l.constprop.0>:
 801d8c4:	2b24      	cmp	r3, #36	@ 0x24
 801d8c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8ca:	4686      	mov	lr, r0
 801d8cc:	4690      	mov	r8, r2
 801d8ce:	d801      	bhi.n	801d8d4 <_strtol_l.constprop.0+0x10>
 801d8d0:	2b01      	cmp	r3, #1
 801d8d2:	d106      	bne.n	801d8e2 <_strtol_l.constprop.0+0x1e>
 801d8d4:	f001 faa0 	bl	801ee18 <__errno>
 801d8d8:	2316      	movs	r3, #22
 801d8da:	6003      	str	r3, [r0, #0]
 801d8dc:	2000      	movs	r0, #0
 801d8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8e2:	4834      	ldr	r0, [pc, #208]	@ (801d9b4 <_strtol_l.constprop.0+0xf0>)
 801d8e4:	460d      	mov	r5, r1
 801d8e6:	462a      	mov	r2, r5
 801d8e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d8ec:	5d06      	ldrb	r6, [r0, r4]
 801d8ee:	f016 0608 	ands.w	r6, r6, #8
 801d8f2:	d1f8      	bne.n	801d8e6 <_strtol_l.constprop.0+0x22>
 801d8f4:	2c2d      	cmp	r4, #45	@ 0x2d
 801d8f6:	d12d      	bne.n	801d954 <_strtol_l.constprop.0+0x90>
 801d8f8:	782c      	ldrb	r4, [r5, #0]
 801d8fa:	2601      	movs	r6, #1
 801d8fc:	1c95      	adds	r5, r2, #2
 801d8fe:	f033 0210 	bics.w	r2, r3, #16
 801d902:	d109      	bne.n	801d918 <_strtol_l.constprop.0+0x54>
 801d904:	2c30      	cmp	r4, #48	@ 0x30
 801d906:	d12a      	bne.n	801d95e <_strtol_l.constprop.0+0x9a>
 801d908:	782a      	ldrb	r2, [r5, #0]
 801d90a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d90e:	2a58      	cmp	r2, #88	@ 0x58
 801d910:	d125      	bne.n	801d95e <_strtol_l.constprop.0+0x9a>
 801d912:	786c      	ldrb	r4, [r5, #1]
 801d914:	2310      	movs	r3, #16
 801d916:	3502      	adds	r5, #2
 801d918:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d91c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d920:	2200      	movs	r2, #0
 801d922:	fbbc f9f3 	udiv	r9, ip, r3
 801d926:	4610      	mov	r0, r2
 801d928:	fb03 ca19 	mls	sl, r3, r9, ip
 801d92c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d930:	2f09      	cmp	r7, #9
 801d932:	d81b      	bhi.n	801d96c <_strtol_l.constprop.0+0xa8>
 801d934:	463c      	mov	r4, r7
 801d936:	42a3      	cmp	r3, r4
 801d938:	dd27      	ble.n	801d98a <_strtol_l.constprop.0+0xc6>
 801d93a:	1c57      	adds	r7, r2, #1
 801d93c:	d007      	beq.n	801d94e <_strtol_l.constprop.0+0x8a>
 801d93e:	4581      	cmp	r9, r0
 801d940:	d320      	bcc.n	801d984 <_strtol_l.constprop.0+0xc0>
 801d942:	d101      	bne.n	801d948 <_strtol_l.constprop.0+0x84>
 801d944:	45a2      	cmp	sl, r4
 801d946:	db1d      	blt.n	801d984 <_strtol_l.constprop.0+0xc0>
 801d948:	fb00 4003 	mla	r0, r0, r3, r4
 801d94c:	2201      	movs	r2, #1
 801d94e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d952:	e7eb      	b.n	801d92c <_strtol_l.constprop.0+0x68>
 801d954:	2c2b      	cmp	r4, #43	@ 0x2b
 801d956:	bf04      	itt	eq
 801d958:	782c      	ldrbeq	r4, [r5, #0]
 801d95a:	1c95      	addeq	r5, r2, #2
 801d95c:	e7cf      	b.n	801d8fe <_strtol_l.constprop.0+0x3a>
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d1da      	bne.n	801d918 <_strtol_l.constprop.0+0x54>
 801d962:	2c30      	cmp	r4, #48	@ 0x30
 801d964:	bf0c      	ite	eq
 801d966:	2308      	moveq	r3, #8
 801d968:	230a      	movne	r3, #10
 801d96a:	e7d5      	b.n	801d918 <_strtol_l.constprop.0+0x54>
 801d96c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d970:	2f19      	cmp	r7, #25
 801d972:	d801      	bhi.n	801d978 <_strtol_l.constprop.0+0xb4>
 801d974:	3c37      	subs	r4, #55	@ 0x37
 801d976:	e7de      	b.n	801d936 <_strtol_l.constprop.0+0x72>
 801d978:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d97c:	2f19      	cmp	r7, #25
 801d97e:	d804      	bhi.n	801d98a <_strtol_l.constprop.0+0xc6>
 801d980:	3c57      	subs	r4, #87	@ 0x57
 801d982:	e7d8      	b.n	801d936 <_strtol_l.constprop.0+0x72>
 801d984:	f04f 32ff 	mov.w	r2, #4294967295
 801d988:	e7e1      	b.n	801d94e <_strtol_l.constprop.0+0x8a>
 801d98a:	1c53      	adds	r3, r2, #1
 801d98c:	d108      	bne.n	801d9a0 <_strtol_l.constprop.0+0xdc>
 801d98e:	2322      	movs	r3, #34	@ 0x22
 801d990:	f8ce 3000 	str.w	r3, [lr]
 801d994:	4660      	mov	r0, ip
 801d996:	f1b8 0f00 	cmp.w	r8, #0
 801d99a:	d0a0      	beq.n	801d8de <_strtol_l.constprop.0+0x1a>
 801d99c:	1e69      	subs	r1, r5, #1
 801d99e:	e006      	b.n	801d9ae <_strtol_l.constprop.0+0xea>
 801d9a0:	b106      	cbz	r6, 801d9a4 <_strtol_l.constprop.0+0xe0>
 801d9a2:	4240      	negs	r0, r0
 801d9a4:	f1b8 0f00 	cmp.w	r8, #0
 801d9a8:	d099      	beq.n	801d8de <_strtol_l.constprop.0+0x1a>
 801d9aa:	2a00      	cmp	r2, #0
 801d9ac:	d1f6      	bne.n	801d99c <_strtol_l.constprop.0+0xd8>
 801d9ae:	f8c8 1000 	str.w	r1, [r8]
 801d9b2:	e794      	b.n	801d8de <_strtol_l.constprop.0+0x1a>
 801d9b4:	0802533d 	.word	0x0802533d

0801d9b8 <_strtol_r>:
 801d9b8:	f7ff bf84 	b.w	801d8c4 <_strtol_l.constprop.0>

0801d9bc <strtol>:
 801d9bc:	4613      	mov	r3, r2
 801d9be:	460a      	mov	r2, r1
 801d9c0:	4601      	mov	r1, r0
 801d9c2:	4802      	ldr	r0, [pc, #8]	@ (801d9cc <strtol+0x10>)
 801d9c4:	6800      	ldr	r0, [r0, #0]
 801d9c6:	f7ff bf7d 	b.w	801d8c4 <_strtol_l.constprop.0>
 801d9ca:	bf00      	nop
 801d9cc:	20000148 	.word	0x20000148

0801d9d0 <__cvt>:
 801d9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d9d4:	ec57 6b10 	vmov	r6, r7, d0
 801d9d8:	2f00      	cmp	r7, #0
 801d9da:	460c      	mov	r4, r1
 801d9dc:	4619      	mov	r1, r3
 801d9de:	463b      	mov	r3, r7
 801d9e0:	bfbb      	ittet	lt
 801d9e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801d9e6:	461f      	movlt	r7, r3
 801d9e8:	2300      	movge	r3, #0
 801d9ea:	232d      	movlt	r3, #45	@ 0x2d
 801d9ec:	700b      	strb	r3, [r1, #0]
 801d9ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d9f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801d9f4:	4691      	mov	r9, r2
 801d9f6:	f023 0820 	bic.w	r8, r3, #32
 801d9fa:	bfbc      	itt	lt
 801d9fc:	4632      	movlt	r2, r6
 801d9fe:	4616      	movlt	r6, r2
 801da00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801da04:	d005      	beq.n	801da12 <__cvt+0x42>
 801da06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801da0a:	d100      	bne.n	801da0e <__cvt+0x3e>
 801da0c:	3401      	adds	r4, #1
 801da0e:	2102      	movs	r1, #2
 801da10:	e000      	b.n	801da14 <__cvt+0x44>
 801da12:	2103      	movs	r1, #3
 801da14:	ab03      	add	r3, sp, #12
 801da16:	9301      	str	r3, [sp, #4]
 801da18:	ab02      	add	r3, sp, #8
 801da1a:	9300      	str	r3, [sp, #0]
 801da1c:	ec47 6b10 	vmov	d0, r6, r7
 801da20:	4653      	mov	r3, sl
 801da22:	4622      	mov	r2, r4
 801da24:	f001 fae8 	bl	801eff8 <_dtoa_r>
 801da28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801da2c:	4605      	mov	r5, r0
 801da2e:	d119      	bne.n	801da64 <__cvt+0x94>
 801da30:	f019 0f01 	tst.w	r9, #1
 801da34:	d00e      	beq.n	801da54 <__cvt+0x84>
 801da36:	eb00 0904 	add.w	r9, r0, r4
 801da3a:	2200      	movs	r2, #0
 801da3c:	2300      	movs	r3, #0
 801da3e:	4630      	mov	r0, r6
 801da40:	4639      	mov	r1, r7
 801da42:	f7e3 f859 	bl	8000af8 <__aeabi_dcmpeq>
 801da46:	b108      	cbz	r0, 801da4c <__cvt+0x7c>
 801da48:	f8cd 900c 	str.w	r9, [sp, #12]
 801da4c:	2230      	movs	r2, #48	@ 0x30
 801da4e:	9b03      	ldr	r3, [sp, #12]
 801da50:	454b      	cmp	r3, r9
 801da52:	d31e      	bcc.n	801da92 <__cvt+0xc2>
 801da54:	9b03      	ldr	r3, [sp, #12]
 801da56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801da58:	1b5b      	subs	r3, r3, r5
 801da5a:	4628      	mov	r0, r5
 801da5c:	6013      	str	r3, [r2, #0]
 801da5e:	b004      	add	sp, #16
 801da60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801da68:	eb00 0904 	add.w	r9, r0, r4
 801da6c:	d1e5      	bne.n	801da3a <__cvt+0x6a>
 801da6e:	7803      	ldrb	r3, [r0, #0]
 801da70:	2b30      	cmp	r3, #48	@ 0x30
 801da72:	d10a      	bne.n	801da8a <__cvt+0xba>
 801da74:	2200      	movs	r2, #0
 801da76:	2300      	movs	r3, #0
 801da78:	4630      	mov	r0, r6
 801da7a:	4639      	mov	r1, r7
 801da7c:	f7e3 f83c 	bl	8000af8 <__aeabi_dcmpeq>
 801da80:	b918      	cbnz	r0, 801da8a <__cvt+0xba>
 801da82:	f1c4 0401 	rsb	r4, r4, #1
 801da86:	f8ca 4000 	str.w	r4, [sl]
 801da8a:	f8da 3000 	ldr.w	r3, [sl]
 801da8e:	4499      	add	r9, r3
 801da90:	e7d3      	b.n	801da3a <__cvt+0x6a>
 801da92:	1c59      	adds	r1, r3, #1
 801da94:	9103      	str	r1, [sp, #12]
 801da96:	701a      	strb	r2, [r3, #0]
 801da98:	e7d9      	b.n	801da4e <__cvt+0x7e>

0801da9a <__exponent>:
 801da9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801da9c:	2900      	cmp	r1, #0
 801da9e:	bfba      	itte	lt
 801daa0:	4249      	neglt	r1, r1
 801daa2:	232d      	movlt	r3, #45	@ 0x2d
 801daa4:	232b      	movge	r3, #43	@ 0x2b
 801daa6:	2909      	cmp	r1, #9
 801daa8:	7002      	strb	r2, [r0, #0]
 801daaa:	7043      	strb	r3, [r0, #1]
 801daac:	dd29      	ble.n	801db02 <__exponent+0x68>
 801daae:	f10d 0307 	add.w	r3, sp, #7
 801dab2:	461d      	mov	r5, r3
 801dab4:	270a      	movs	r7, #10
 801dab6:	461a      	mov	r2, r3
 801dab8:	fbb1 f6f7 	udiv	r6, r1, r7
 801dabc:	fb07 1416 	mls	r4, r7, r6, r1
 801dac0:	3430      	adds	r4, #48	@ 0x30
 801dac2:	f802 4c01 	strb.w	r4, [r2, #-1]
 801dac6:	460c      	mov	r4, r1
 801dac8:	2c63      	cmp	r4, #99	@ 0x63
 801daca:	f103 33ff 	add.w	r3, r3, #4294967295
 801dace:	4631      	mov	r1, r6
 801dad0:	dcf1      	bgt.n	801dab6 <__exponent+0x1c>
 801dad2:	3130      	adds	r1, #48	@ 0x30
 801dad4:	1e94      	subs	r4, r2, #2
 801dad6:	f803 1c01 	strb.w	r1, [r3, #-1]
 801dada:	1c41      	adds	r1, r0, #1
 801dadc:	4623      	mov	r3, r4
 801dade:	42ab      	cmp	r3, r5
 801dae0:	d30a      	bcc.n	801daf8 <__exponent+0x5e>
 801dae2:	f10d 0309 	add.w	r3, sp, #9
 801dae6:	1a9b      	subs	r3, r3, r2
 801dae8:	42ac      	cmp	r4, r5
 801daea:	bf88      	it	hi
 801daec:	2300      	movhi	r3, #0
 801daee:	3302      	adds	r3, #2
 801daf0:	4403      	add	r3, r0
 801daf2:	1a18      	subs	r0, r3, r0
 801daf4:	b003      	add	sp, #12
 801daf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801daf8:	f813 6b01 	ldrb.w	r6, [r3], #1
 801dafc:	f801 6f01 	strb.w	r6, [r1, #1]!
 801db00:	e7ed      	b.n	801dade <__exponent+0x44>
 801db02:	2330      	movs	r3, #48	@ 0x30
 801db04:	3130      	adds	r1, #48	@ 0x30
 801db06:	7083      	strb	r3, [r0, #2]
 801db08:	70c1      	strb	r1, [r0, #3]
 801db0a:	1d03      	adds	r3, r0, #4
 801db0c:	e7f1      	b.n	801daf2 <__exponent+0x58>
	...

0801db10 <_printf_float>:
 801db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db14:	b08d      	sub	sp, #52	@ 0x34
 801db16:	460c      	mov	r4, r1
 801db18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801db1c:	4616      	mov	r6, r2
 801db1e:	461f      	mov	r7, r3
 801db20:	4605      	mov	r5, r0
 801db22:	f001 f91f 	bl	801ed64 <_localeconv_r>
 801db26:	6803      	ldr	r3, [r0, #0]
 801db28:	9304      	str	r3, [sp, #16]
 801db2a:	4618      	mov	r0, r3
 801db2c:	f7e2 fbb8 	bl	80002a0 <strlen>
 801db30:	2300      	movs	r3, #0
 801db32:	930a      	str	r3, [sp, #40]	@ 0x28
 801db34:	f8d8 3000 	ldr.w	r3, [r8]
 801db38:	9005      	str	r0, [sp, #20]
 801db3a:	3307      	adds	r3, #7
 801db3c:	f023 0307 	bic.w	r3, r3, #7
 801db40:	f103 0208 	add.w	r2, r3, #8
 801db44:	f894 a018 	ldrb.w	sl, [r4, #24]
 801db48:	f8d4 b000 	ldr.w	fp, [r4]
 801db4c:	f8c8 2000 	str.w	r2, [r8]
 801db50:	e9d3 8900 	ldrd	r8, r9, [r3]
 801db54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801db58:	9307      	str	r3, [sp, #28]
 801db5a:	f8cd 8018 	str.w	r8, [sp, #24]
 801db5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801db62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801db66:	4b9c      	ldr	r3, [pc, #624]	@ (801ddd8 <_printf_float+0x2c8>)
 801db68:	f04f 32ff 	mov.w	r2, #4294967295
 801db6c:	f7e2 fff6 	bl	8000b5c <__aeabi_dcmpun>
 801db70:	bb70      	cbnz	r0, 801dbd0 <_printf_float+0xc0>
 801db72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801db76:	4b98      	ldr	r3, [pc, #608]	@ (801ddd8 <_printf_float+0x2c8>)
 801db78:	f04f 32ff 	mov.w	r2, #4294967295
 801db7c:	f7e2 ffd0 	bl	8000b20 <__aeabi_dcmple>
 801db80:	bb30      	cbnz	r0, 801dbd0 <_printf_float+0xc0>
 801db82:	2200      	movs	r2, #0
 801db84:	2300      	movs	r3, #0
 801db86:	4640      	mov	r0, r8
 801db88:	4649      	mov	r1, r9
 801db8a:	f7e2 ffbf 	bl	8000b0c <__aeabi_dcmplt>
 801db8e:	b110      	cbz	r0, 801db96 <_printf_float+0x86>
 801db90:	232d      	movs	r3, #45	@ 0x2d
 801db92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801db96:	4a91      	ldr	r2, [pc, #580]	@ (801dddc <_printf_float+0x2cc>)
 801db98:	4b91      	ldr	r3, [pc, #580]	@ (801dde0 <_printf_float+0x2d0>)
 801db9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801db9e:	bf94      	ite	ls
 801dba0:	4690      	movls	r8, r2
 801dba2:	4698      	movhi	r8, r3
 801dba4:	2303      	movs	r3, #3
 801dba6:	6123      	str	r3, [r4, #16]
 801dba8:	f02b 0304 	bic.w	r3, fp, #4
 801dbac:	6023      	str	r3, [r4, #0]
 801dbae:	f04f 0900 	mov.w	r9, #0
 801dbb2:	9700      	str	r7, [sp, #0]
 801dbb4:	4633      	mov	r3, r6
 801dbb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 801dbb8:	4621      	mov	r1, r4
 801dbba:	4628      	mov	r0, r5
 801dbbc:	f000 f9d2 	bl	801df64 <_printf_common>
 801dbc0:	3001      	adds	r0, #1
 801dbc2:	f040 808d 	bne.w	801dce0 <_printf_float+0x1d0>
 801dbc6:	f04f 30ff 	mov.w	r0, #4294967295
 801dbca:	b00d      	add	sp, #52	@ 0x34
 801dbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbd0:	4642      	mov	r2, r8
 801dbd2:	464b      	mov	r3, r9
 801dbd4:	4640      	mov	r0, r8
 801dbd6:	4649      	mov	r1, r9
 801dbd8:	f7e2 ffc0 	bl	8000b5c <__aeabi_dcmpun>
 801dbdc:	b140      	cbz	r0, 801dbf0 <_printf_float+0xe0>
 801dbde:	464b      	mov	r3, r9
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	bfbc      	itt	lt
 801dbe4:	232d      	movlt	r3, #45	@ 0x2d
 801dbe6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801dbea:	4a7e      	ldr	r2, [pc, #504]	@ (801dde4 <_printf_float+0x2d4>)
 801dbec:	4b7e      	ldr	r3, [pc, #504]	@ (801dde8 <_printf_float+0x2d8>)
 801dbee:	e7d4      	b.n	801db9a <_printf_float+0x8a>
 801dbf0:	6863      	ldr	r3, [r4, #4]
 801dbf2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801dbf6:	9206      	str	r2, [sp, #24]
 801dbf8:	1c5a      	adds	r2, r3, #1
 801dbfa:	d13b      	bne.n	801dc74 <_printf_float+0x164>
 801dbfc:	2306      	movs	r3, #6
 801dbfe:	6063      	str	r3, [r4, #4]
 801dc00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801dc04:	2300      	movs	r3, #0
 801dc06:	6022      	str	r2, [r4, #0]
 801dc08:	9303      	str	r3, [sp, #12]
 801dc0a:	ab0a      	add	r3, sp, #40	@ 0x28
 801dc0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 801dc10:	ab09      	add	r3, sp, #36	@ 0x24
 801dc12:	9300      	str	r3, [sp, #0]
 801dc14:	6861      	ldr	r1, [r4, #4]
 801dc16:	ec49 8b10 	vmov	d0, r8, r9
 801dc1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801dc1e:	4628      	mov	r0, r5
 801dc20:	f7ff fed6 	bl	801d9d0 <__cvt>
 801dc24:	9b06      	ldr	r3, [sp, #24]
 801dc26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dc28:	2b47      	cmp	r3, #71	@ 0x47
 801dc2a:	4680      	mov	r8, r0
 801dc2c:	d129      	bne.n	801dc82 <_printf_float+0x172>
 801dc2e:	1cc8      	adds	r0, r1, #3
 801dc30:	db02      	blt.n	801dc38 <_printf_float+0x128>
 801dc32:	6863      	ldr	r3, [r4, #4]
 801dc34:	4299      	cmp	r1, r3
 801dc36:	dd41      	ble.n	801dcbc <_printf_float+0x1ac>
 801dc38:	f1aa 0a02 	sub.w	sl, sl, #2
 801dc3c:	fa5f fa8a 	uxtb.w	sl, sl
 801dc40:	3901      	subs	r1, #1
 801dc42:	4652      	mov	r2, sl
 801dc44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801dc48:	9109      	str	r1, [sp, #36]	@ 0x24
 801dc4a:	f7ff ff26 	bl	801da9a <__exponent>
 801dc4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dc50:	1813      	adds	r3, r2, r0
 801dc52:	2a01      	cmp	r2, #1
 801dc54:	4681      	mov	r9, r0
 801dc56:	6123      	str	r3, [r4, #16]
 801dc58:	dc02      	bgt.n	801dc60 <_printf_float+0x150>
 801dc5a:	6822      	ldr	r2, [r4, #0]
 801dc5c:	07d2      	lsls	r2, r2, #31
 801dc5e:	d501      	bpl.n	801dc64 <_printf_float+0x154>
 801dc60:	3301      	adds	r3, #1
 801dc62:	6123      	str	r3, [r4, #16]
 801dc64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	d0a2      	beq.n	801dbb2 <_printf_float+0xa2>
 801dc6c:	232d      	movs	r3, #45	@ 0x2d
 801dc6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dc72:	e79e      	b.n	801dbb2 <_printf_float+0xa2>
 801dc74:	9a06      	ldr	r2, [sp, #24]
 801dc76:	2a47      	cmp	r2, #71	@ 0x47
 801dc78:	d1c2      	bne.n	801dc00 <_printf_float+0xf0>
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d1c0      	bne.n	801dc00 <_printf_float+0xf0>
 801dc7e:	2301      	movs	r3, #1
 801dc80:	e7bd      	b.n	801dbfe <_printf_float+0xee>
 801dc82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801dc86:	d9db      	bls.n	801dc40 <_printf_float+0x130>
 801dc88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801dc8c:	d118      	bne.n	801dcc0 <_printf_float+0x1b0>
 801dc8e:	2900      	cmp	r1, #0
 801dc90:	6863      	ldr	r3, [r4, #4]
 801dc92:	dd0b      	ble.n	801dcac <_printf_float+0x19c>
 801dc94:	6121      	str	r1, [r4, #16]
 801dc96:	b913      	cbnz	r3, 801dc9e <_printf_float+0x18e>
 801dc98:	6822      	ldr	r2, [r4, #0]
 801dc9a:	07d0      	lsls	r0, r2, #31
 801dc9c:	d502      	bpl.n	801dca4 <_printf_float+0x194>
 801dc9e:	3301      	adds	r3, #1
 801dca0:	440b      	add	r3, r1
 801dca2:	6123      	str	r3, [r4, #16]
 801dca4:	65a1      	str	r1, [r4, #88]	@ 0x58
 801dca6:	f04f 0900 	mov.w	r9, #0
 801dcaa:	e7db      	b.n	801dc64 <_printf_float+0x154>
 801dcac:	b913      	cbnz	r3, 801dcb4 <_printf_float+0x1a4>
 801dcae:	6822      	ldr	r2, [r4, #0]
 801dcb0:	07d2      	lsls	r2, r2, #31
 801dcb2:	d501      	bpl.n	801dcb8 <_printf_float+0x1a8>
 801dcb4:	3302      	adds	r3, #2
 801dcb6:	e7f4      	b.n	801dca2 <_printf_float+0x192>
 801dcb8:	2301      	movs	r3, #1
 801dcba:	e7f2      	b.n	801dca2 <_printf_float+0x192>
 801dcbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801dcc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dcc2:	4299      	cmp	r1, r3
 801dcc4:	db05      	blt.n	801dcd2 <_printf_float+0x1c2>
 801dcc6:	6823      	ldr	r3, [r4, #0]
 801dcc8:	6121      	str	r1, [r4, #16]
 801dcca:	07d8      	lsls	r0, r3, #31
 801dccc:	d5ea      	bpl.n	801dca4 <_printf_float+0x194>
 801dcce:	1c4b      	adds	r3, r1, #1
 801dcd0:	e7e7      	b.n	801dca2 <_printf_float+0x192>
 801dcd2:	2900      	cmp	r1, #0
 801dcd4:	bfd4      	ite	le
 801dcd6:	f1c1 0202 	rsble	r2, r1, #2
 801dcda:	2201      	movgt	r2, #1
 801dcdc:	4413      	add	r3, r2
 801dcde:	e7e0      	b.n	801dca2 <_printf_float+0x192>
 801dce0:	6823      	ldr	r3, [r4, #0]
 801dce2:	055a      	lsls	r2, r3, #21
 801dce4:	d407      	bmi.n	801dcf6 <_printf_float+0x1e6>
 801dce6:	6923      	ldr	r3, [r4, #16]
 801dce8:	4642      	mov	r2, r8
 801dcea:	4631      	mov	r1, r6
 801dcec:	4628      	mov	r0, r5
 801dcee:	47b8      	blx	r7
 801dcf0:	3001      	adds	r0, #1
 801dcf2:	d12b      	bne.n	801dd4c <_printf_float+0x23c>
 801dcf4:	e767      	b.n	801dbc6 <_printf_float+0xb6>
 801dcf6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801dcfa:	f240 80dd 	bls.w	801deb8 <_printf_float+0x3a8>
 801dcfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801dd02:	2200      	movs	r2, #0
 801dd04:	2300      	movs	r3, #0
 801dd06:	f7e2 fef7 	bl	8000af8 <__aeabi_dcmpeq>
 801dd0a:	2800      	cmp	r0, #0
 801dd0c:	d033      	beq.n	801dd76 <_printf_float+0x266>
 801dd0e:	4a37      	ldr	r2, [pc, #220]	@ (801ddec <_printf_float+0x2dc>)
 801dd10:	2301      	movs	r3, #1
 801dd12:	4631      	mov	r1, r6
 801dd14:	4628      	mov	r0, r5
 801dd16:	47b8      	blx	r7
 801dd18:	3001      	adds	r0, #1
 801dd1a:	f43f af54 	beq.w	801dbc6 <_printf_float+0xb6>
 801dd1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801dd22:	4543      	cmp	r3, r8
 801dd24:	db02      	blt.n	801dd2c <_printf_float+0x21c>
 801dd26:	6823      	ldr	r3, [r4, #0]
 801dd28:	07d8      	lsls	r0, r3, #31
 801dd2a:	d50f      	bpl.n	801dd4c <_printf_float+0x23c>
 801dd2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd30:	4631      	mov	r1, r6
 801dd32:	4628      	mov	r0, r5
 801dd34:	47b8      	blx	r7
 801dd36:	3001      	adds	r0, #1
 801dd38:	f43f af45 	beq.w	801dbc6 <_printf_float+0xb6>
 801dd3c:	f04f 0900 	mov.w	r9, #0
 801dd40:	f108 38ff 	add.w	r8, r8, #4294967295
 801dd44:	f104 0a1a 	add.w	sl, r4, #26
 801dd48:	45c8      	cmp	r8, r9
 801dd4a:	dc09      	bgt.n	801dd60 <_printf_float+0x250>
 801dd4c:	6823      	ldr	r3, [r4, #0]
 801dd4e:	079b      	lsls	r3, r3, #30
 801dd50:	f100 8103 	bmi.w	801df5a <_printf_float+0x44a>
 801dd54:	68e0      	ldr	r0, [r4, #12]
 801dd56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dd58:	4298      	cmp	r0, r3
 801dd5a:	bfb8      	it	lt
 801dd5c:	4618      	movlt	r0, r3
 801dd5e:	e734      	b.n	801dbca <_printf_float+0xba>
 801dd60:	2301      	movs	r3, #1
 801dd62:	4652      	mov	r2, sl
 801dd64:	4631      	mov	r1, r6
 801dd66:	4628      	mov	r0, r5
 801dd68:	47b8      	blx	r7
 801dd6a:	3001      	adds	r0, #1
 801dd6c:	f43f af2b 	beq.w	801dbc6 <_printf_float+0xb6>
 801dd70:	f109 0901 	add.w	r9, r9, #1
 801dd74:	e7e8      	b.n	801dd48 <_printf_float+0x238>
 801dd76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	dc39      	bgt.n	801ddf0 <_printf_float+0x2e0>
 801dd7c:	4a1b      	ldr	r2, [pc, #108]	@ (801ddec <_printf_float+0x2dc>)
 801dd7e:	2301      	movs	r3, #1
 801dd80:	4631      	mov	r1, r6
 801dd82:	4628      	mov	r0, r5
 801dd84:	47b8      	blx	r7
 801dd86:	3001      	adds	r0, #1
 801dd88:	f43f af1d 	beq.w	801dbc6 <_printf_float+0xb6>
 801dd8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801dd90:	ea59 0303 	orrs.w	r3, r9, r3
 801dd94:	d102      	bne.n	801dd9c <_printf_float+0x28c>
 801dd96:	6823      	ldr	r3, [r4, #0]
 801dd98:	07d9      	lsls	r1, r3, #31
 801dd9a:	d5d7      	bpl.n	801dd4c <_printf_float+0x23c>
 801dd9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dda0:	4631      	mov	r1, r6
 801dda2:	4628      	mov	r0, r5
 801dda4:	47b8      	blx	r7
 801dda6:	3001      	adds	r0, #1
 801dda8:	f43f af0d 	beq.w	801dbc6 <_printf_float+0xb6>
 801ddac:	f04f 0a00 	mov.w	sl, #0
 801ddb0:	f104 0b1a 	add.w	fp, r4, #26
 801ddb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddb6:	425b      	negs	r3, r3
 801ddb8:	4553      	cmp	r3, sl
 801ddba:	dc01      	bgt.n	801ddc0 <_printf_float+0x2b0>
 801ddbc:	464b      	mov	r3, r9
 801ddbe:	e793      	b.n	801dce8 <_printf_float+0x1d8>
 801ddc0:	2301      	movs	r3, #1
 801ddc2:	465a      	mov	r2, fp
 801ddc4:	4631      	mov	r1, r6
 801ddc6:	4628      	mov	r0, r5
 801ddc8:	47b8      	blx	r7
 801ddca:	3001      	adds	r0, #1
 801ddcc:	f43f aefb 	beq.w	801dbc6 <_printf_float+0xb6>
 801ddd0:	f10a 0a01 	add.w	sl, sl, #1
 801ddd4:	e7ee      	b.n	801ddb4 <_printf_float+0x2a4>
 801ddd6:	bf00      	nop
 801ddd8:	7fefffff 	.word	0x7fefffff
 801dddc:	0802543d 	.word	0x0802543d
 801dde0:	08025441 	.word	0x08025441
 801dde4:	08025445 	.word	0x08025445
 801dde8:	08025449 	.word	0x08025449
 801ddec:	0802544d 	.word	0x0802544d
 801ddf0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ddf2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ddf6:	4553      	cmp	r3, sl
 801ddf8:	bfa8      	it	ge
 801ddfa:	4653      	movge	r3, sl
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	4699      	mov	r9, r3
 801de00:	dc36      	bgt.n	801de70 <_printf_float+0x360>
 801de02:	f04f 0b00 	mov.w	fp, #0
 801de06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801de0a:	f104 021a 	add.w	r2, r4, #26
 801de0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801de10:	9306      	str	r3, [sp, #24]
 801de12:	eba3 0309 	sub.w	r3, r3, r9
 801de16:	455b      	cmp	r3, fp
 801de18:	dc31      	bgt.n	801de7e <_printf_float+0x36e>
 801de1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de1c:	459a      	cmp	sl, r3
 801de1e:	dc3a      	bgt.n	801de96 <_printf_float+0x386>
 801de20:	6823      	ldr	r3, [r4, #0]
 801de22:	07da      	lsls	r2, r3, #31
 801de24:	d437      	bmi.n	801de96 <_printf_float+0x386>
 801de26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de28:	ebaa 0903 	sub.w	r9, sl, r3
 801de2c:	9b06      	ldr	r3, [sp, #24]
 801de2e:	ebaa 0303 	sub.w	r3, sl, r3
 801de32:	4599      	cmp	r9, r3
 801de34:	bfa8      	it	ge
 801de36:	4699      	movge	r9, r3
 801de38:	f1b9 0f00 	cmp.w	r9, #0
 801de3c:	dc33      	bgt.n	801dea6 <_printf_float+0x396>
 801de3e:	f04f 0800 	mov.w	r8, #0
 801de42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801de46:	f104 0b1a 	add.w	fp, r4, #26
 801de4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de4c:	ebaa 0303 	sub.w	r3, sl, r3
 801de50:	eba3 0309 	sub.w	r3, r3, r9
 801de54:	4543      	cmp	r3, r8
 801de56:	f77f af79 	ble.w	801dd4c <_printf_float+0x23c>
 801de5a:	2301      	movs	r3, #1
 801de5c:	465a      	mov	r2, fp
 801de5e:	4631      	mov	r1, r6
 801de60:	4628      	mov	r0, r5
 801de62:	47b8      	blx	r7
 801de64:	3001      	adds	r0, #1
 801de66:	f43f aeae 	beq.w	801dbc6 <_printf_float+0xb6>
 801de6a:	f108 0801 	add.w	r8, r8, #1
 801de6e:	e7ec      	b.n	801de4a <_printf_float+0x33a>
 801de70:	4642      	mov	r2, r8
 801de72:	4631      	mov	r1, r6
 801de74:	4628      	mov	r0, r5
 801de76:	47b8      	blx	r7
 801de78:	3001      	adds	r0, #1
 801de7a:	d1c2      	bne.n	801de02 <_printf_float+0x2f2>
 801de7c:	e6a3      	b.n	801dbc6 <_printf_float+0xb6>
 801de7e:	2301      	movs	r3, #1
 801de80:	4631      	mov	r1, r6
 801de82:	4628      	mov	r0, r5
 801de84:	9206      	str	r2, [sp, #24]
 801de86:	47b8      	blx	r7
 801de88:	3001      	adds	r0, #1
 801de8a:	f43f ae9c 	beq.w	801dbc6 <_printf_float+0xb6>
 801de8e:	9a06      	ldr	r2, [sp, #24]
 801de90:	f10b 0b01 	add.w	fp, fp, #1
 801de94:	e7bb      	b.n	801de0e <_printf_float+0x2fe>
 801de96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801de9a:	4631      	mov	r1, r6
 801de9c:	4628      	mov	r0, r5
 801de9e:	47b8      	blx	r7
 801dea0:	3001      	adds	r0, #1
 801dea2:	d1c0      	bne.n	801de26 <_printf_float+0x316>
 801dea4:	e68f      	b.n	801dbc6 <_printf_float+0xb6>
 801dea6:	9a06      	ldr	r2, [sp, #24]
 801dea8:	464b      	mov	r3, r9
 801deaa:	4442      	add	r2, r8
 801deac:	4631      	mov	r1, r6
 801deae:	4628      	mov	r0, r5
 801deb0:	47b8      	blx	r7
 801deb2:	3001      	adds	r0, #1
 801deb4:	d1c3      	bne.n	801de3e <_printf_float+0x32e>
 801deb6:	e686      	b.n	801dbc6 <_printf_float+0xb6>
 801deb8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801debc:	f1ba 0f01 	cmp.w	sl, #1
 801dec0:	dc01      	bgt.n	801dec6 <_printf_float+0x3b6>
 801dec2:	07db      	lsls	r3, r3, #31
 801dec4:	d536      	bpl.n	801df34 <_printf_float+0x424>
 801dec6:	2301      	movs	r3, #1
 801dec8:	4642      	mov	r2, r8
 801deca:	4631      	mov	r1, r6
 801decc:	4628      	mov	r0, r5
 801dece:	47b8      	blx	r7
 801ded0:	3001      	adds	r0, #1
 801ded2:	f43f ae78 	beq.w	801dbc6 <_printf_float+0xb6>
 801ded6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801deda:	4631      	mov	r1, r6
 801dedc:	4628      	mov	r0, r5
 801dede:	47b8      	blx	r7
 801dee0:	3001      	adds	r0, #1
 801dee2:	f43f ae70 	beq.w	801dbc6 <_printf_float+0xb6>
 801dee6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801deea:	2200      	movs	r2, #0
 801deec:	2300      	movs	r3, #0
 801deee:	f10a 3aff 	add.w	sl, sl, #4294967295
 801def2:	f7e2 fe01 	bl	8000af8 <__aeabi_dcmpeq>
 801def6:	b9c0      	cbnz	r0, 801df2a <_printf_float+0x41a>
 801def8:	4653      	mov	r3, sl
 801defa:	f108 0201 	add.w	r2, r8, #1
 801defe:	4631      	mov	r1, r6
 801df00:	4628      	mov	r0, r5
 801df02:	47b8      	blx	r7
 801df04:	3001      	adds	r0, #1
 801df06:	d10c      	bne.n	801df22 <_printf_float+0x412>
 801df08:	e65d      	b.n	801dbc6 <_printf_float+0xb6>
 801df0a:	2301      	movs	r3, #1
 801df0c:	465a      	mov	r2, fp
 801df0e:	4631      	mov	r1, r6
 801df10:	4628      	mov	r0, r5
 801df12:	47b8      	blx	r7
 801df14:	3001      	adds	r0, #1
 801df16:	f43f ae56 	beq.w	801dbc6 <_printf_float+0xb6>
 801df1a:	f108 0801 	add.w	r8, r8, #1
 801df1e:	45d0      	cmp	r8, sl
 801df20:	dbf3      	blt.n	801df0a <_printf_float+0x3fa>
 801df22:	464b      	mov	r3, r9
 801df24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801df28:	e6df      	b.n	801dcea <_printf_float+0x1da>
 801df2a:	f04f 0800 	mov.w	r8, #0
 801df2e:	f104 0b1a 	add.w	fp, r4, #26
 801df32:	e7f4      	b.n	801df1e <_printf_float+0x40e>
 801df34:	2301      	movs	r3, #1
 801df36:	4642      	mov	r2, r8
 801df38:	e7e1      	b.n	801defe <_printf_float+0x3ee>
 801df3a:	2301      	movs	r3, #1
 801df3c:	464a      	mov	r2, r9
 801df3e:	4631      	mov	r1, r6
 801df40:	4628      	mov	r0, r5
 801df42:	47b8      	blx	r7
 801df44:	3001      	adds	r0, #1
 801df46:	f43f ae3e 	beq.w	801dbc6 <_printf_float+0xb6>
 801df4a:	f108 0801 	add.w	r8, r8, #1
 801df4e:	68e3      	ldr	r3, [r4, #12]
 801df50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801df52:	1a5b      	subs	r3, r3, r1
 801df54:	4543      	cmp	r3, r8
 801df56:	dcf0      	bgt.n	801df3a <_printf_float+0x42a>
 801df58:	e6fc      	b.n	801dd54 <_printf_float+0x244>
 801df5a:	f04f 0800 	mov.w	r8, #0
 801df5e:	f104 0919 	add.w	r9, r4, #25
 801df62:	e7f4      	b.n	801df4e <_printf_float+0x43e>

0801df64 <_printf_common>:
 801df64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df68:	4616      	mov	r6, r2
 801df6a:	4698      	mov	r8, r3
 801df6c:	688a      	ldr	r2, [r1, #8]
 801df6e:	690b      	ldr	r3, [r1, #16]
 801df70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801df74:	4293      	cmp	r3, r2
 801df76:	bfb8      	it	lt
 801df78:	4613      	movlt	r3, r2
 801df7a:	6033      	str	r3, [r6, #0]
 801df7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801df80:	4607      	mov	r7, r0
 801df82:	460c      	mov	r4, r1
 801df84:	b10a      	cbz	r2, 801df8a <_printf_common+0x26>
 801df86:	3301      	adds	r3, #1
 801df88:	6033      	str	r3, [r6, #0]
 801df8a:	6823      	ldr	r3, [r4, #0]
 801df8c:	0699      	lsls	r1, r3, #26
 801df8e:	bf42      	ittt	mi
 801df90:	6833      	ldrmi	r3, [r6, #0]
 801df92:	3302      	addmi	r3, #2
 801df94:	6033      	strmi	r3, [r6, #0]
 801df96:	6825      	ldr	r5, [r4, #0]
 801df98:	f015 0506 	ands.w	r5, r5, #6
 801df9c:	d106      	bne.n	801dfac <_printf_common+0x48>
 801df9e:	f104 0a19 	add.w	sl, r4, #25
 801dfa2:	68e3      	ldr	r3, [r4, #12]
 801dfa4:	6832      	ldr	r2, [r6, #0]
 801dfa6:	1a9b      	subs	r3, r3, r2
 801dfa8:	42ab      	cmp	r3, r5
 801dfaa:	dc26      	bgt.n	801dffa <_printf_common+0x96>
 801dfac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801dfb0:	6822      	ldr	r2, [r4, #0]
 801dfb2:	3b00      	subs	r3, #0
 801dfb4:	bf18      	it	ne
 801dfb6:	2301      	movne	r3, #1
 801dfb8:	0692      	lsls	r2, r2, #26
 801dfba:	d42b      	bmi.n	801e014 <_printf_common+0xb0>
 801dfbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801dfc0:	4641      	mov	r1, r8
 801dfc2:	4638      	mov	r0, r7
 801dfc4:	47c8      	blx	r9
 801dfc6:	3001      	adds	r0, #1
 801dfc8:	d01e      	beq.n	801e008 <_printf_common+0xa4>
 801dfca:	6823      	ldr	r3, [r4, #0]
 801dfcc:	6922      	ldr	r2, [r4, #16]
 801dfce:	f003 0306 	and.w	r3, r3, #6
 801dfd2:	2b04      	cmp	r3, #4
 801dfd4:	bf02      	ittt	eq
 801dfd6:	68e5      	ldreq	r5, [r4, #12]
 801dfd8:	6833      	ldreq	r3, [r6, #0]
 801dfda:	1aed      	subeq	r5, r5, r3
 801dfdc:	68a3      	ldr	r3, [r4, #8]
 801dfde:	bf0c      	ite	eq
 801dfe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dfe4:	2500      	movne	r5, #0
 801dfe6:	4293      	cmp	r3, r2
 801dfe8:	bfc4      	itt	gt
 801dfea:	1a9b      	subgt	r3, r3, r2
 801dfec:	18ed      	addgt	r5, r5, r3
 801dfee:	2600      	movs	r6, #0
 801dff0:	341a      	adds	r4, #26
 801dff2:	42b5      	cmp	r5, r6
 801dff4:	d11a      	bne.n	801e02c <_printf_common+0xc8>
 801dff6:	2000      	movs	r0, #0
 801dff8:	e008      	b.n	801e00c <_printf_common+0xa8>
 801dffa:	2301      	movs	r3, #1
 801dffc:	4652      	mov	r2, sl
 801dffe:	4641      	mov	r1, r8
 801e000:	4638      	mov	r0, r7
 801e002:	47c8      	blx	r9
 801e004:	3001      	adds	r0, #1
 801e006:	d103      	bne.n	801e010 <_printf_common+0xac>
 801e008:	f04f 30ff 	mov.w	r0, #4294967295
 801e00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e010:	3501      	adds	r5, #1
 801e012:	e7c6      	b.n	801dfa2 <_printf_common+0x3e>
 801e014:	18e1      	adds	r1, r4, r3
 801e016:	1c5a      	adds	r2, r3, #1
 801e018:	2030      	movs	r0, #48	@ 0x30
 801e01a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e01e:	4422      	add	r2, r4
 801e020:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e024:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e028:	3302      	adds	r3, #2
 801e02a:	e7c7      	b.n	801dfbc <_printf_common+0x58>
 801e02c:	2301      	movs	r3, #1
 801e02e:	4622      	mov	r2, r4
 801e030:	4641      	mov	r1, r8
 801e032:	4638      	mov	r0, r7
 801e034:	47c8      	blx	r9
 801e036:	3001      	adds	r0, #1
 801e038:	d0e6      	beq.n	801e008 <_printf_common+0xa4>
 801e03a:	3601      	adds	r6, #1
 801e03c:	e7d9      	b.n	801dff2 <_printf_common+0x8e>
	...

0801e040 <_printf_i>:
 801e040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e044:	7e0f      	ldrb	r7, [r1, #24]
 801e046:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e048:	2f78      	cmp	r7, #120	@ 0x78
 801e04a:	4691      	mov	r9, r2
 801e04c:	4680      	mov	r8, r0
 801e04e:	460c      	mov	r4, r1
 801e050:	469a      	mov	sl, r3
 801e052:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e056:	d807      	bhi.n	801e068 <_printf_i+0x28>
 801e058:	2f62      	cmp	r7, #98	@ 0x62
 801e05a:	d80a      	bhi.n	801e072 <_printf_i+0x32>
 801e05c:	2f00      	cmp	r7, #0
 801e05e:	f000 80d2 	beq.w	801e206 <_printf_i+0x1c6>
 801e062:	2f58      	cmp	r7, #88	@ 0x58
 801e064:	f000 80b9 	beq.w	801e1da <_printf_i+0x19a>
 801e068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e06c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e070:	e03a      	b.n	801e0e8 <_printf_i+0xa8>
 801e072:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e076:	2b15      	cmp	r3, #21
 801e078:	d8f6      	bhi.n	801e068 <_printf_i+0x28>
 801e07a:	a101      	add	r1, pc, #4	@ (adr r1, 801e080 <_printf_i+0x40>)
 801e07c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e080:	0801e0d9 	.word	0x0801e0d9
 801e084:	0801e0ed 	.word	0x0801e0ed
 801e088:	0801e069 	.word	0x0801e069
 801e08c:	0801e069 	.word	0x0801e069
 801e090:	0801e069 	.word	0x0801e069
 801e094:	0801e069 	.word	0x0801e069
 801e098:	0801e0ed 	.word	0x0801e0ed
 801e09c:	0801e069 	.word	0x0801e069
 801e0a0:	0801e069 	.word	0x0801e069
 801e0a4:	0801e069 	.word	0x0801e069
 801e0a8:	0801e069 	.word	0x0801e069
 801e0ac:	0801e1ed 	.word	0x0801e1ed
 801e0b0:	0801e117 	.word	0x0801e117
 801e0b4:	0801e1a7 	.word	0x0801e1a7
 801e0b8:	0801e069 	.word	0x0801e069
 801e0bc:	0801e069 	.word	0x0801e069
 801e0c0:	0801e20f 	.word	0x0801e20f
 801e0c4:	0801e069 	.word	0x0801e069
 801e0c8:	0801e117 	.word	0x0801e117
 801e0cc:	0801e069 	.word	0x0801e069
 801e0d0:	0801e069 	.word	0x0801e069
 801e0d4:	0801e1af 	.word	0x0801e1af
 801e0d8:	6833      	ldr	r3, [r6, #0]
 801e0da:	1d1a      	adds	r2, r3, #4
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	6032      	str	r2, [r6, #0]
 801e0e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e0e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e0e8:	2301      	movs	r3, #1
 801e0ea:	e09d      	b.n	801e228 <_printf_i+0x1e8>
 801e0ec:	6833      	ldr	r3, [r6, #0]
 801e0ee:	6820      	ldr	r0, [r4, #0]
 801e0f0:	1d19      	adds	r1, r3, #4
 801e0f2:	6031      	str	r1, [r6, #0]
 801e0f4:	0606      	lsls	r6, r0, #24
 801e0f6:	d501      	bpl.n	801e0fc <_printf_i+0xbc>
 801e0f8:	681d      	ldr	r5, [r3, #0]
 801e0fa:	e003      	b.n	801e104 <_printf_i+0xc4>
 801e0fc:	0645      	lsls	r5, r0, #25
 801e0fe:	d5fb      	bpl.n	801e0f8 <_printf_i+0xb8>
 801e100:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e104:	2d00      	cmp	r5, #0
 801e106:	da03      	bge.n	801e110 <_printf_i+0xd0>
 801e108:	232d      	movs	r3, #45	@ 0x2d
 801e10a:	426d      	negs	r5, r5
 801e10c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e110:	4859      	ldr	r0, [pc, #356]	@ (801e278 <_printf_i+0x238>)
 801e112:	230a      	movs	r3, #10
 801e114:	e011      	b.n	801e13a <_printf_i+0xfa>
 801e116:	6821      	ldr	r1, [r4, #0]
 801e118:	6833      	ldr	r3, [r6, #0]
 801e11a:	0608      	lsls	r0, r1, #24
 801e11c:	f853 5b04 	ldr.w	r5, [r3], #4
 801e120:	d402      	bmi.n	801e128 <_printf_i+0xe8>
 801e122:	0649      	lsls	r1, r1, #25
 801e124:	bf48      	it	mi
 801e126:	b2ad      	uxthmi	r5, r5
 801e128:	2f6f      	cmp	r7, #111	@ 0x6f
 801e12a:	4853      	ldr	r0, [pc, #332]	@ (801e278 <_printf_i+0x238>)
 801e12c:	6033      	str	r3, [r6, #0]
 801e12e:	bf14      	ite	ne
 801e130:	230a      	movne	r3, #10
 801e132:	2308      	moveq	r3, #8
 801e134:	2100      	movs	r1, #0
 801e136:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e13a:	6866      	ldr	r6, [r4, #4]
 801e13c:	60a6      	str	r6, [r4, #8]
 801e13e:	2e00      	cmp	r6, #0
 801e140:	bfa2      	ittt	ge
 801e142:	6821      	ldrge	r1, [r4, #0]
 801e144:	f021 0104 	bicge.w	r1, r1, #4
 801e148:	6021      	strge	r1, [r4, #0]
 801e14a:	b90d      	cbnz	r5, 801e150 <_printf_i+0x110>
 801e14c:	2e00      	cmp	r6, #0
 801e14e:	d04b      	beq.n	801e1e8 <_printf_i+0x1a8>
 801e150:	4616      	mov	r6, r2
 801e152:	fbb5 f1f3 	udiv	r1, r5, r3
 801e156:	fb03 5711 	mls	r7, r3, r1, r5
 801e15a:	5dc7      	ldrb	r7, [r0, r7]
 801e15c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e160:	462f      	mov	r7, r5
 801e162:	42bb      	cmp	r3, r7
 801e164:	460d      	mov	r5, r1
 801e166:	d9f4      	bls.n	801e152 <_printf_i+0x112>
 801e168:	2b08      	cmp	r3, #8
 801e16a:	d10b      	bne.n	801e184 <_printf_i+0x144>
 801e16c:	6823      	ldr	r3, [r4, #0]
 801e16e:	07df      	lsls	r7, r3, #31
 801e170:	d508      	bpl.n	801e184 <_printf_i+0x144>
 801e172:	6923      	ldr	r3, [r4, #16]
 801e174:	6861      	ldr	r1, [r4, #4]
 801e176:	4299      	cmp	r1, r3
 801e178:	bfde      	ittt	le
 801e17a:	2330      	movle	r3, #48	@ 0x30
 801e17c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e180:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e184:	1b92      	subs	r2, r2, r6
 801e186:	6122      	str	r2, [r4, #16]
 801e188:	f8cd a000 	str.w	sl, [sp]
 801e18c:	464b      	mov	r3, r9
 801e18e:	aa03      	add	r2, sp, #12
 801e190:	4621      	mov	r1, r4
 801e192:	4640      	mov	r0, r8
 801e194:	f7ff fee6 	bl	801df64 <_printf_common>
 801e198:	3001      	adds	r0, #1
 801e19a:	d14a      	bne.n	801e232 <_printf_i+0x1f2>
 801e19c:	f04f 30ff 	mov.w	r0, #4294967295
 801e1a0:	b004      	add	sp, #16
 801e1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1a6:	6823      	ldr	r3, [r4, #0]
 801e1a8:	f043 0320 	orr.w	r3, r3, #32
 801e1ac:	6023      	str	r3, [r4, #0]
 801e1ae:	4833      	ldr	r0, [pc, #204]	@ (801e27c <_printf_i+0x23c>)
 801e1b0:	2778      	movs	r7, #120	@ 0x78
 801e1b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e1b6:	6823      	ldr	r3, [r4, #0]
 801e1b8:	6831      	ldr	r1, [r6, #0]
 801e1ba:	061f      	lsls	r7, r3, #24
 801e1bc:	f851 5b04 	ldr.w	r5, [r1], #4
 801e1c0:	d402      	bmi.n	801e1c8 <_printf_i+0x188>
 801e1c2:	065f      	lsls	r7, r3, #25
 801e1c4:	bf48      	it	mi
 801e1c6:	b2ad      	uxthmi	r5, r5
 801e1c8:	6031      	str	r1, [r6, #0]
 801e1ca:	07d9      	lsls	r1, r3, #31
 801e1cc:	bf44      	itt	mi
 801e1ce:	f043 0320 	orrmi.w	r3, r3, #32
 801e1d2:	6023      	strmi	r3, [r4, #0]
 801e1d4:	b11d      	cbz	r5, 801e1de <_printf_i+0x19e>
 801e1d6:	2310      	movs	r3, #16
 801e1d8:	e7ac      	b.n	801e134 <_printf_i+0xf4>
 801e1da:	4827      	ldr	r0, [pc, #156]	@ (801e278 <_printf_i+0x238>)
 801e1dc:	e7e9      	b.n	801e1b2 <_printf_i+0x172>
 801e1de:	6823      	ldr	r3, [r4, #0]
 801e1e0:	f023 0320 	bic.w	r3, r3, #32
 801e1e4:	6023      	str	r3, [r4, #0]
 801e1e6:	e7f6      	b.n	801e1d6 <_printf_i+0x196>
 801e1e8:	4616      	mov	r6, r2
 801e1ea:	e7bd      	b.n	801e168 <_printf_i+0x128>
 801e1ec:	6833      	ldr	r3, [r6, #0]
 801e1ee:	6825      	ldr	r5, [r4, #0]
 801e1f0:	6961      	ldr	r1, [r4, #20]
 801e1f2:	1d18      	adds	r0, r3, #4
 801e1f4:	6030      	str	r0, [r6, #0]
 801e1f6:	062e      	lsls	r6, r5, #24
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	d501      	bpl.n	801e200 <_printf_i+0x1c0>
 801e1fc:	6019      	str	r1, [r3, #0]
 801e1fe:	e002      	b.n	801e206 <_printf_i+0x1c6>
 801e200:	0668      	lsls	r0, r5, #25
 801e202:	d5fb      	bpl.n	801e1fc <_printf_i+0x1bc>
 801e204:	8019      	strh	r1, [r3, #0]
 801e206:	2300      	movs	r3, #0
 801e208:	6123      	str	r3, [r4, #16]
 801e20a:	4616      	mov	r6, r2
 801e20c:	e7bc      	b.n	801e188 <_printf_i+0x148>
 801e20e:	6833      	ldr	r3, [r6, #0]
 801e210:	1d1a      	adds	r2, r3, #4
 801e212:	6032      	str	r2, [r6, #0]
 801e214:	681e      	ldr	r6, [r3, #0]
 801e216:	6862      	ldr	r2, [r4, #4]
 801e218:	2100      	movs	r1, #0
 801e21a:	4630      	mov	r0, r6
 801e21c:	f7e1 fff0 	bl	8000200 <memchr>
 801e220:	b108      	cbz	r0, 801e226 <_printf_i+0x1e6>
 801e222:	1b80      	subs	r0, r0, r6
 801e224:	6060      	str	r0, [r4, #4]
 801e226:	6863      	ldr	r3, [r4, #4]
 801e228:	6123      	str	r3, [r4, #16]
 801e22a:	2300      	movs	r3, #0
 801e22c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e230:	e7aa      	b.n	801e188 <_printf_i+0x148>
 801e232:	6923      	ldr	r3, [r4, #16]
 801e234:	4632      	mov	r2, r6
 801e236:	4649      	mov	r1, r9
 801e238:	4640      	mov	r0, r8
 801e23a:	47d0      	blx	sl
 801e23c:	3001      	adds	r0, #1
 801e23e:	d0ad      	beq.n	801e19c <_printf_i+0x15c>
 801e240:	6823      	ldr	r3, [r4, #0]
 801e242:	079b      	lsls	r3, r3, #30
 801e244:	d413      	bmi.n	801e26e <_printf_i+0x22e>
 801e246:	68e0      	ldr	r0, [r4, #12]
 801e248:	9b03      	ldr	r3, [sp, #12]
 801e24a:	4298      	cmp	r0, r3
 801e24c:	bfb8      	it	lt
 801e24e:	4618      	movlt	r0, r3
 801e250:	e7a6      	b.n	801e1a0 <_printf_i+0x160>
 801e252:	2301      	movs	r3, #1
 801e254:	4632      	mov	r2, r6
 801e256:	4649      	mov	r1, r9
 801e258:	4640      	mov	r0, r8
 801e25a:	47d0      	blx	sl
 801e25c:	3001      	adds	r0, #1
 801e25e:	d09d      	beq.n	801e19c <_printf_i+0x15c>
 801e260:	3501      	adds	r5, #1
 801e262:	68e3      	ldr	r3, [r4, #12]
 801e264:	9903      	ldr	r1, [sp, #12]
 801e266:	1a5b      	subs	r3, r3, r1
 801e268:	42ab      	cmp	r3, r5
 801e26a:	dcf2      	bgt.n	801e252 <_printf_i+0x212>
 801e26c:	e7eb      	b.n	801e246 <_printf_i+0x206>
 801e26e:	2500      	movs	r5, #0
 801e270:	f104 0619 	add.w	r6, r4, #25
 801e274:	e7f5      	b.n	801e262 <_printf_i+0x222>
 801e276:	bf00      	nop
 801e278:	0802544f 	.word	0x0802544f
 801e27c:	08025460 	.word	0x08025460

0801e280 <_scanf_float>:
 801e280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e284:	b087      	sub	sp, #28
 801e286:	4617      	mov	r7, r2
 801e288:	9303      	str	r3, [sp, #12]
 801e28a:	688b      	ldr	r3, [r1, #8]
 801e28c:	1e5a      	subs	r2, r3, #1
 801e28e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e292:	bf81      	itttt	hi
 801e294:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e298:	eb03 0b05 	addhi.w	fp, r3, r5
 801e29c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e2a0:	608b      	strhi	r3, [r1, #8]
 801e2a2:	680b      	ldr	r3, [r1, #0]
 801e2a4:	460a      	mov	r2, r1
 801e2a6:	f04f 0500 	mov.w	r5, #0
 801e2aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801e2ae:	f842 3b1c 	str.w	r3, [r2], #28
 801e2b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e2b6:	4680      	mov	r8, r0
 801e2b8:	460c      	mov	r4, r1
 801e2ba:	bf98      	it	ls
 801e2bc:	f04f 0b00 	movls.w	fp, #0
 801e2c0:	9201      	str	r2, [sp, #4]
 801e2c2:	4616      	mov	r6, r2
 801e2c4:	46aa      	mov	sl, r5
 801e2c6:	46a9      	mov	r9, r5
 801e2c8:	9502      	str	r5, [sp, #8]
 801e2ca:	68a2      	ldr	r2, [r4, #8]
 801e2cc:	b152      	cbz	r2, 801e2e4 <_scanf_float+0x64>
 801e2ce:	683b      	ldr	r3, [r7, #0]
 801e2d0:	781b      	ldrb	r3, [r3, #0]
 801e2d2:	2b4e      	cmp	r3, #78	@ 0x4e
 801e2d4:	d864      	bhi.n	801e3a0 <_scanf_float+0x120>
 801e2d6:	2b40      	cmp	r3, #64	@ 0x40
 801e2d8:	d83c      	bhi.n	801e354 <_scanf_float+0xd4>
 801e2da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801e2de:	b2c8      	uxtb	r0, r1
 801e2e0:	280e      	cmp	r0, #14
 801e2e2:	d93a      	bls.n	801e35a <_scanf_float+0xda>
 801e2e4:	f1b9 0f00 	cmp.w	r9, #0
 801e2e8:	d003      	beq.n	801e2f2 <_scanf_float+0x72>
 801e2ea:	6823      	ldr	r3, [r4, #0]
 801e2ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e2f0:	6023      	str	r3, [r4, #0]
 801e2f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e2f6:	f1ba 0f01 	cmp.w	sl, #1
 801e2fa:	f200 8117 	bhi.w	801e52c <_scanf_float+0x2ac>
 801e2fe:	9b01      	ldr	r3, [sp, #4]
 801e300:	429e      	cmp	r6, r3
 801e302:	f200 8108 	bhi.w	801e516 <_scanf_float+0x296>
 801e306:	2001      	movs	r0, #1
 801e308:	b007      	add	sp, #28
 801e30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e30e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801e312:	2a0d      	cmp	r2, #13
 801e314:	d8e6      	bhi.n	801e2e4 <_scanf_float+0x64>
 801e316:	a101      	add	r1, pc, #4	@ (adr r1, 801e31c <_scanf_float+0x9c>)
 801e318:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e31c:	0801e463 	.word	0x0801e463
 801e320:	0801e2e5 	.word	0x0801e2e5
 801e324:	0801e2e5 	.word	0x0801e2e5
 801e328:	0801e2e5 	.word	0x0801e2e5
 801e32c:	0801e4c3 	.word	0x0801e4c3
 801e330:	0801e49b 	.word	0x0801e49b
 801e334:	0801e2e5 	.word	0x0801e2e5
 801e338:	0801e2e5 	.word	0x0801e2e5
 801e33c:	0801e471 	.word	0x0801e471
 801e340:	0801e2e5 	.word	0x0801e2e5
 801e344:	0801e2e5 	.word	0x0801e2e5
 801e348:	0801e2e5 	.word	0x0801e2e5
 801e34c:	0801e2e5 	.word	0x0801e2e5
 801e350:	0801e429 	.word	0x0801e429
 801e354:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801e358:	e7db      	b.n	801e312 <_scanf_float+0x92>
 801e35a:	290e      	cmp	r1, #14
 801e35c:	d8c2      	bhi.n	801e2e4 <_scanf_float+0x64>
 801e35e:	a001      	add	r0, pc, #4	@ (adr r0, 801e364 <_scanf_float+0xe4>)
 801e360:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801e364:	0801e419 	.word	0x0801e419
 801e368:	0801e2e5 	.word	0x0801e2e5
 801e36c:	0801e419 	.word	0x0801e419
 801e370:	0801e4af 	.word	0x0801e4af
 801e374:	0801e2e5 	.word	0x0801e2e5
 801e378:	0801e3c1 	.word	0x0801e3c1
 801e37c:	0801e3ff 	.word	0x0801e3ff
 801e380:	0801e3ff 	.word	0x0801e3ff
 801e384:	0801e3ff 	.word	0x0801e3ff
 801e388:	0801e3ff 	.word	0x0801e3ff
 801e38c:	0801e3ff 	.word	0x0801e3ff
 801e390:	0801e3ff 	.word	0x0801e3ff
 801e394:	0801e3ff 	.word	0x0801e3ff
 801e398:	0801e3ff 	.word	0x0801e3ff
 801e39c:	0801e3ff 	.word	0x0801e3ff
 801e3a0:	2b6e      	cmp	r3, #110	@ 0x6e
 801e3a2:	d809      	bhi.n	801e3b8 <_scanf_float+0x138>
 801e3a4:	2b60      	cmp	r3, #96	@ 0x60
 801e3a6:	d8b2      	bhi.n	801e30e <_scanf_float+0x8e>
 801e3a8:	2b54      	cmp	r3, #84	@ 0x54
 801e3aa:	d07b      	beq.n	801e4a4 <_scanf_float+0x224>
 801e3ac:	2b59      	cmp	r3, #89	@ 0x59
 801e3ae:	d199      	bne.n	801e2e4 <_scanf_float+0x64>
 801e3b0:	2d07      	cmp	r5, #7
 801e3b2:	d197      	bne.n	801e2e4 <_scanf_float+0x64>
 801e3b4:	2508      	movs	r5, #8
 801e3b6:	e02c      	b.n	801e412 <_scanf_float+0x192>
 801e3b8:	2b74      	cmp	r3, #116	@ 0x74
 801e3ba:	d073      	beq.n	801e4a4 <_scanf_float+0x224>
 801e3bc:	2b79      	cmp	r3, #121	@ 0x79
 801e3be:	e7f6      	b.n	801e3ae <_scanf_float+0x12e>
 801e3c0:	6821      	ldr	r1, [r4, #0]
 801e3c2:	05c8      	lsls	r0, r1, #23
 801e3c4:	d51b      	bpl.n	801e3fe <_scanf_float+0x17e>
 801e3c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801e3ca:	6021      	str	r1, [r4, #0]
 801e3cc:	f109 0901 	add.w	r9, r9, #1
 801e3d0:	f1bb 0f00 	cmp.w	fp, #0
 801e3d4:	d003      	beq.n	801e3de <_scanf_float+0x15e>
 801e3d6:	3201      	adds	r2, #1
 801e3d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e3dc:	60a2      	str	r2, [r4, #8]
 801e3de:	68a3      	ldr	r3, [r4, #8]
 801e3e0:	3b01      	subs	r3, #1
 801e3e2:	60a3      	str	r3, [r4, #8]
 801e3e4:	6923      	ldr	r3, [r4, #16]
 801e3e6:	3301      	adds	r3, #1
 801e3e8:	6123      	str	r3, [r4, #16]
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	3b01      	subs	r3, #1
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	607b      	str	r3, [r7, #4]
 801e3f2:	f340 8087 	ble.w	801e504 <_scanf_float+0x284>
 801e3f6:	683b      	ldr	r3, [r7, #0]
 801e3f8:	3301      	adds	r3, #1
 801e3fa:	603b      	str	r3, [r7, #0]
 801e3fc:	e765      	b.n	801e2ca <_scanf_float+0x4a>
 801e3fe:	eb1a 0105 	adds.w	r1, sl, r5
 801e402:	f47f af6f 	bne.w	801e2e4 <_scanf_float+0x64>
 801e406:	6822      	ldr	r2, [r4, #0]
 801e408:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801e40c:	6022      	str	r2, [r4, #0]
 801e40e:	460d      	mov	r5, r1
 801e410:	468a      	mov	sl, r1
 801e412:	f806 3b01 	strb.w	r3, [r6], #1
 801e416:	e7e2      	b.n	801e3de <_scanf_float+0x15e>
 801e418:	6822      	ldr	r2, [r4, #0]
 801e41a:	0610      	lsls	r0, r2, #24
 801e41c:	f57f af62 	bpl.w	801e2e4 <_scanf_float+0x64>
 801e420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e424:	6022      	str	r2, [r4, #0]
 801e426:	e7f4      	b.n	801e412 <_scanf_float+0x192>
 801e428:	f1ba 0f00 	cmp.w	sl, #0
 801e42c:	d10e      	bne.n	801e44c <_scanf_float+0x1cc>
 801e42e:	f1b9 0f00 	cmp.w	r9, #0
 801e432:	d10e      	bne.n	801e452 <_scanf_float+0x1d2>
 801e434:	6822      	ldr	r2, [r4, #0]
 801e436:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e43a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e43e:	d108      	bne.n	801e452 <_scanf_float+0x1d2>
 801e440:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e444:	6022      	str	r2, [r4, #0]
 801e446:	f04f 0a01 	mov.w	sl, #1
 801e44a:	e7e2      	b.n	801e412 <_scanf_float+0x192>
 801e44c:	f1ba 0f02 	cmp.w	sl, #2
 801e450:	d055      	beq.n	801e4fe <_scanf_float+0x27e>
 801e452:	2d01      	cmp	r5, #1
 801e454:	d002      	beq.n	801e45c <_scanf_float+0x1dc>
 801e456:	2d04      	cmp	r5, #4
 801e458:	f47f af44 	bne.w	801e2e4 <_scanf_float+0x64>
 801e45c:	3501      	adds	r5, #1
 801e45e:	b2ed      	uxtb	r5, r5
 801e460:	e7d7      	b.n	801e412 <_scanf_float+0x192>
 801e462:	f1ba 0f01 	cmp.w	sl, #1
 801e466:	f47f af3d 	bne.w	801e2e4 <_scanf_float+0x64>
 801e46a:	f04f 0a02 	mov.w	sl, #2
 801e46e:	e7d0      	b.n	801e412 <_scanf_float+0x192>
 801e470:	b97d      	cbnz	r5, 801e492 <_scanf_float+0x212>
 801e472:	f1b9 0f00 	cmp.w	r9, #0
 801e476:	f47f af38 	bne.w	801e2ea <_scanf_float+0x6a>
 801e47a:	6822      	ldr	r2, [r4, #0]
 801e47c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e480:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e484:	f040 8108 	bne.w	801e698 <_scanf_float+0x418>
 801e488:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e48c:	6022      	str	r2, [r4, #0]
 801e48e:	2501      	movs	r5, #1
 801e490:	e7bf      	b.n	801e412 <_scanf_float+0x192>
 801e492:	2d03      	cmp	r5, #3
 801e494:	d0e2      	beq.n	801e45c <_scanf_float+0x1dc>
 801e496:	2d05      	cmp	r5, #5
 801e498:	e7de      	b.n	801e458 <_scanf_float+0x1d8>
 801e49a:	2d02      	cmp	r5, #2
 801e49c:	f47f af22 	bne.w	801e2e4 <_scanf_float+0x64>
 801e4a0:	2503      	movs	r5, #3
 801e4a2:	e7b6      	b.n	801e412 <_scanf_float+0x192>
 801e4a4:	2d06      	cmp	r5, #6
 801e4a6:	f47f af1d 	bne.w	801e2e4 <_scanf_float+0x64>
 801e4aa:	2507      	movs	r5, #7
 801e4ac:	e7b1      	b.n	801e412 <_scanf_float+0x192>
 801e4ae:	6822      	ldr	r2, [r4, #0]
 801e4b0:	0591      	lsls	r1, r2, #22
 801e4b2:	f57f af17 	bpl.w	801e2e4 <_scanf_float+0x64>
 801e4b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e4ba:	6022      	str	r2, [r4, #0]
 801e4bc:	f8cd 9008 	str.w	r9, [sp, #8]
 801e4c0:	e7a7      	b.n	801e412 <_scanf_float+0x192>
 801e4c2:	6822      	ldr	r2, [r4, #0]
 801e4c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e4c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e4cc:	d006      	beq.n	801e4dc <_scanf_float+0x25c>
 801e4ce:	0550      	lsls	r0, r2, #21
 801e4d0:	f57f af08 	bpl.w	801e2e4 <_scanf_float+0x64>
 801e4d4:	f1b9 0f00 	cmp.w	r9, #0
 801e4d8:	f000 80de 	beq.w	801e698 <_scanf_float+0x418>
 801e4dc:	0591      	lsls	r1, r2, #22
 801e4de:	bf58      	it	pl
 801e4e0:	9902      	ldrpl	r1, [sp, #8]
 801e4e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e4e6:	bf58      	it	pl
 801e4e8:	eba9 0101 	subpl.w	r1, r9, r1
 801e4ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e4f0:	bf58      	it	pl
 801e4f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e4f6:	6022      	str	r2, [r4, #0]
 801e4f8:	f04f 0900 	mov.w	r9, #0
 801e4fc:	e789      	b.n	801e412 <_scanf_float+0x192>
 801e4fe:	f04f 0a03 	mov.w	sl, #3
 801e502:	e786      	b.n	801e412 <_scanf_float+0x192>
 801e504:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e508:	4639      	mov	r1, r7
 801e50a:	4640      	mov	r0, r8
 801e50c:	4798      	blx	r3
 801e50e:	2800      	cmp	r0, #0
 801e510:	f43f aedb 	beq.w	801e2ca <_scanf_float+0x4a>
 801e514:	e6e6      	b.n	801e2e4 <_scanf_float+0x64>
 801e516:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e51a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e51e:	463a      	mov	r2, r7
 801e520:	4640      	mov	r0, r8
 801e522:	4798      	blx	r3
 801e524:	6923      	ldr	r3, [r4, #16]
 801e526:	3b01      	subs	r3, #1
 801e528:	6123      	str	r3, [r4, #16]
 801e52a:	e6e8      	b.n	801e2fe <_scanf_float+0x7e>
 801e52c:	1e6b      	subs	r3, r5, #1
 801e52e:	2b06      	cmp	r3, #6
 801e530:	d824      	bhi.n	801e57c <_scanf_float+0x2fc>
 801e532:	2d02      	cmp	r5, #2
 801e534:	d836      	bhi.n	801e5a4 <_scanf_float+0x324>
 801e536:	9b01      	ldr	r3, [sp, #4]
 801e538:	429e      	cmp	r6, r3
 801e53a:	f67f aee4 	bls.w	801e306 <_scanf_float+0x86>
 801e53e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e542:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e546:	463a      	mov	r2, r7
 801e548:	4640      	mov	r0, r8
 801e54a:	4798      	blx	r3
 801e54c:	6923      	ldr	r3, [r4, #16]
 801e54e:	3b01      	subs	r3, #1
 801e550:	6123      	str	r3, [r4, #16]
 801e552:	e7f0      	b.n	801e536 <_scanf_float+0x2b6>
 801e554:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e558:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e55c:	463a      	mov	r2, r7
 801e55e:	4640      	mov	r0, r8
 801e560:	4798      	blx	r3
 801e562:	6923      	ldr	r3, [r4, #16]
 801e564:	3b01      	subs	r3, #1
 801e566:	6123      	str	r3, [r4, #16]
 801e568:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e56c:	fa5f fa8a 	uxtb.w	sl, sl
 801e570:	f1ba 0f02 	cmp.w	sl, #2
 801e574:	d1ee      	bne.n	801e554 <_scanf_float+0x2d4>
 801e576:	3d03      	subs	r5, #3
 801e578:	b2ed      	uxtb	r5, r5
 801e57a:	1b76      	subs	r6, r6, r5
 801e57c:	6823      	ldr	r3, [r4, #0]
 801e57e:	05da      	lsls	r2, r3, #23
 801e580:	d530      	bpl.n	801e5e4 <_scanf_float+0x364>
 801e582:	055b      	lsls	r3, r3, #21
 801e584:	d511      	bpl.n	801e5aa <_scanf_float+0x32a>
 801e586:	9b01      	ldr	r3, [sp, #4]
 801e588:	429e      	cmp	r6, r3
 801e58a:	f67f aebc 	bls.w	801e306 <_scanf_float+0x86>
 801e58e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e596:	463a      	mov	r2, r7
 801e598:	4640      	mov	r0, r8
 801e59a:	4798      	blx	r3
 801e59c:	6923      	ldr	r3, [r4, #16]
 801e59e:	3b01      	subs	r3, #1
 801e5a0:	6123      	str	r3, [r4, #16]
 801e5a2:	e7f0      	b.n	801e586 <_scanf_float+0x306>
 801e5a4:	46aa      	mov	sl, r5
 801e5a6:	46b3      	mov	fp, r6
 801e5a8:	e7de      	b.n	801e568 <_scanf_float+0x2e8>
 801e5aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e5ae:	6923      	ldr	r3, [r4, #16]
 801e5b0:	2965      	cmp	r1, #101	@ 0x65
 801e5b2:	f103 33ff 	add.w	r3, r3, #4294967295
 801e5b6:	f106 35ff 	add.w	r5, r6, #4294967295
 801e5ba:	6123      	str	r3, [r4, #16]
 801e5bc:	d00c      	beq.n	801e5d8 <_scanf_float+0x358>
 801e5be:	2945      	cmp	r1, #69	@ 0x45
 801e5c0:	d00a      	beq.n	801e5d8 <_scanf_float+0x358>
 801e5c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e5c6:	463a      	mov	r2, r7
 801e5c8:	4640      	mov	r0, r8
 801e5ca:	4798      	blx	r3
 801e5cc:	6923      	ldr	r3, [r4, #16]
 801e5ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e5d2:	3b01      	subs	r3, #1
 801e5d4:	1eb5      	subs	r5, r6, #2
 801e5d6:	6123      	str	r3, [r4, #16]
 801e5d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e5dc:	463a      	mov	r2, r7
 801e5de:	4640      	mov	r0, r8
 801e5e0:	4798      	blx	r3
 801e5e2:	462e      	mov	r6, r5
 801e5e4:	6822      	ldr	r2, [r4, #0]
 801e5e6:	f012 0210 	ands.w	r2, r2, #16
 801e5ea:	d001      	beq.n	801e5f0 <_scanf_float+0x370>
 801e5ec:	2000      	movs	r0, #0
 801e5ee:	e68b      	b.n	801e308 <_scanf_float+0x88>
 801e5f0:	7032      	strb	r2, [r6, #0]
 801e5f2:	6823      	ldr	r3, [r4, #0]
 801e5f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e5f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e5fc:	d11c      	bne.n	801e638 <_scanf_float+0x3b8>
 801e5fe:	9b02      	ldr	r3, [sp, #8]
 801e600:	454b      	cmp	r3, r9
 801e602:	eba3 0209 	sub.w	r2, r3, r9
 801e606:	d123      	bne.n	801e650 <_scanf_float+0x3d0>
 801e608:	9901      	ldr	r1, [sp, #4]
 801e60a:	2200      	movs	r2, #0
 801e60c:	4640      	mov	r0, r8
 801e60e:	f002 fdb7 	bl	8021180 <_strtod_r>
 801e612:	9b03      	ldr	r3, [sp, #12]
 801e614:	6821      	ldr	r1, [r4, #0]
 801e616:	681b      	ldr	r3, [r3, #0]
 801e618:	f011 0f02 	tst.w	r1, #2
 801e61c:	ec57 6b10 	vmov	r6, r7, d0
 801e620:	f103 0204 	add.w	r2, r3, #4
 801e624:	d01f      	beq.n	801e666 <_scanf_float+0x3e6>
 801e626:	9903      	ldr	r1, [sp, #12]
 801e628:	600a      	str	r2, [r1, #0]
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	e9c3 6700 	strd	r6, r7, [r3]
 801e630:	68e3      	ldr	r3, [r4, #12]
 801e632:	3301      	adds	r3, #1
 801e634:	60e3      	str	r3, [r4, #12]
 801e636:	e7d9      	b.n	801e5ec <_scanf_float+0x36c>
 801e638:	9b04      	ldr	r3, [sp, #16]
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	d0e4      	beq.n	801e608 <_scanf_float+0x388>
 801e63e:	9905      	ldr	r1, [sp, #20]
 801e640:	230a      	movs	r3, #10
 801e642:	3101      	adds	r1, #1
 801e644:	4640      	mov	r0, r8
 801e646:	f7ff f9b7 	bl	801d9b8 <_strtol_r>
 801e64a:	9b04      	ldr	r3, [sp, #16]
 801e64c:	9e05      	ldr	r6, [sp, #20]
 801e64e:	1ac2      	subs	r2, r0, r3
 801e650:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e654:	429e      	cmp	r6, r3
 801e656:	bf28      	it	cs
 801e658:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e65c:	4910      	ldr	r1, [pc, #64]	@ (801e6a0 <_scanf_float+0x420>)
 801e65e:	4630      	mov	r0, r6
 801e660:	f000 f9ae 	bl	801e9c0 <siprintf>
 801e664:	e7d0      	b.n	801e608 <_scanf_float+0x388>
 801e666:	f011 0f04 	tst.w	r1, #4
 801e66a:	9903      	ldr	r1, [sp, #12]
 801e66c:	600a      	str	r2, [r1, #0]
 801e66e:	d1dc      	bne.n	801e62a <_scanf_float+0x3aa>
 801e670:	681d      	ldr	r5, [r3, #0]
 801e672:	4632      	mov	r2, r6
 801e674:	463b      	mov	r3, r7
 801e676:	4630      	mov	r0, r6
 801e678:	4639      	mov	r1, r7
 801e67a:	f7e2 fa6f 	bl	8000b5c <__aeabi_dcmpun>
 801e67e:	b128      	cbz	r0, 801e68c <_scanf_float+0x40c>
 801e680:	4808      	ldr	r0, [pc, #32]	@ (801e6a4 <_scanf_float+0x424>)
 801e682:	f000 fc0d 	bl	801eea0 <nanf>
 801e686:	ed85 0a00 	vstr	s0, [r5]
 801e68a:	e7d1      	b.n	801e630 <_scanf_float+0x3b0>
 801e68c:	4630      	mov	r0, r6
 801e68e:	4639      	mov	r1, r7
 801e690:	f7e2 fac2 	bl	8000c18 <__aeabi_d2f>
 801e694:	6028      	str	r0, [r5, #0]
 801e696:	e7cb      	b.n	801e630 <_scanf_float+0x3b0>
 801e698:	f04f 0900 	mov.w	r9, #0
 801e69c:	e629      	b.n	801e2f2 <_scanf_float+0x72>
 801e69e:	bf00      	nop
 801e6a0:	08025471 	.word	0x08025471
 801e6a4:	08025522 	.word	0x08025522

0801e6a8 <std>:
 801e6a8:	2300      	movs	r3, #0
 801e6aa:	b510      	push	{r4, lr}
 801e6ac:	4604      	mov	r4, r0
 801e6ae:	e9c0 3300 	strd	r3, r3, [r0]
 801e6b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e6b6:	6083      	str	r3, [r0, #8]
 801e6b8:	8181      	strh	r1, [r0, #12]
 801e6ba:	6643      	str	r3, [r0, #100]	@ 0x64
 801e6bc:	81c2      	strh	r2, [r0, #14]
 801e6be:	6183      	str	r3, [r0, #24]
 801e6c0:	4619      	mov	r1, r3
 801e6c2:	2208      	movs	r2, #8
 801e6c4:	305c      	adds	r0, #92	@ 0x5c
 801e6c6:	f000 fac5 	bl	801ec54 <memset>
 801e6ca:	4b0d      	ldr	r3, [pc, #52]	@ (801e700 <std+0x58>)
 801e6cc:	6263      	str	r3, [r4, #36]	@ 0x24
 801e6ce:	4b0d      	ldr	r3, [pc, #52]	@ (801e704 <std+0x5c>)
 801e6d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e6d2:	4b0d      	ldr	r3, [pc, #52]	@ (801e708 <std+0x60>)
 801e6d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e6d6:	4b0d      	ldr	r3, [pc, #52]	@ (801e70c <std+0x64>)
 801e6d8:	6323      	str	r3, [r4, #48]	@ 0x30
 801e6da:	4b0d      	ldr	r3, [pc, #52]	@ (801e710 <std+0x68>)
 801e6dc:	6224      	str	r4, [r4, #32]
 801e6de:	429c      	cmp	r4, r3
 801e6e0:	d006      	beq.n	801e6f0 <std+0x48>
 801e6e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e6e6:	4294      	cmp	r4, r2
 801e6e8:	d002      	beq.n	801e6f0 <std+0x48>
 801e6ea:	33d0      	adds	r3, #208	@ 0xd0
 801e6ec:	429c      	cmp	r4, r3
 801e6ee:	d105      	bne.n	801e6fc <std+0x54>
 801e6f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6f8:	f000 bbb8 	b.w	801ee6c <__retarget_lock_init_recursive>
 801e6fc:	bd10      	pop	{r4, pc}
 801e6fe:	bf00      	nop
 801e700:	0801ea01 	.word	0x0801ea01
 801e704:	0801ea23 	.word	0x0801ea23
 801e708:	0801ea5b 	.word	0x0801ea5b
 801e70c:	0801ea7f 	.word	0x0801ea7f
 801e710:	2000366c 	.word	0x2000366c

0801e714 <stdio_exit_handler>:
 801e714:	4a02      	ldr	r2, [pc, #8]	@ (801e720 <stdio_exit_handler+0xc>)
 801e716:	4903      	ldr	r1, [pc, #12]	@ (801e724 <stdio_exit_handler+0x10>)
 801e718:	4803      	ldr	r0, [pc, #12]	@ (801e728 <stdio_exit_handler+0x14>)
 801e71a:	f000 b869 	b.w	801e7f0 <_fwalk_sglue>
 801e71e:	bf00      	nop
 801e720:	2000013c 	.word	0x2000013c
 801e724:	080217c9 	.word	0x080217c9
 801e728:	2000014c 	.word	0x2000014c

0801e72c <cleanup_stdio>:
 801e72c:	6841      	ldr	r1, [r0, #4]
 801e72e:	4b0c      	ldr	r3, [pc, #48]	@ (801e760 <cleanup_stdio+0x34>)
 801e730:	4299      	cmp	r1, r3
 801e732:	b510      	push	{r4, lr}
 801e734:	4604      	mov	r4, r0
 801e736:	d001      	beq.n	801e73c <cleanup_stdio+0x10>
 801e738:	f003 f846 	bl	80217c8 <_fflush_r>
 801e73c:	68a1      	ldr	r1, [r4, #8]
 801e73e:	4b09      	ldr	r3, [pc, #36]	@ (801e764 <cleanup_stdio+0x38>)
 801e740:	4299      	cmp	r1, r3
 801e742:	d002      	beq.n	801e74a <cleanup_stdio+0x1e>
 801e744:	4620      	mov	r0, r4
 801e746:	f003 f83f 	bl	80217c8 <_fflush_r>
 801e74a:	68e1      	ldr	r1, [r4, #12]
 801e74c:	4b06      	ldr	r3, [pc, #24]	@ (801e768 <cleanup_stdio+0x3c>)
 801e74e:	4299      	cmp	r1, r3
 801e750:	d004      	beq.n	801e75c <cleanup_stdio+0x30>
 801e752:	4620      	mov	r0, r4
 801e754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e758:	f003 b836 	b.w	80217c8 <_fflush_r>
 801e75c:	bd10      	pop	{r4, pc}
 801e75e:	bf00      	nop
 801e760:	2000366c 	.word	0x2000366c
 801e764:	200036d4 	.word	0x200036d4
 801e768:	2000373c 	.word	0x2000373c

0801e76c <global_stdio_init.part.0>:
 801e76c:	b510      	push	{r4, lr}
 801e76e:	4b0b      	ldr	r3, [pc, #44]	@ (801e79c <global_stdio_init.part.0+0x30>)
 801e770:	4c0b      	ldr	r4, [pc, #44]	@ (801e7a0 <global_stdio_init.part.0+0x34>)
 801e772:	4a0c      	ldr	r2, [pc, #48]	@ (801e7a4 <global_stdio_init.part.0+0x38>)
 801e774:	601a      	str	r2, [r3, #0]
 801e776:	4620      	mov	r0, r4
 801e778:	2200      	movs	r2, #0
 801e77a:	2104      	movs	r1, #4
 801e77c:	f7ff ff94 	bl	801e6a8 <std>
 801e780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e784:	2201      	movs	r2, #1
 801e786:	2109      	movs	r1, #9
 801e788:	f7ff ff8e 	bl	801e6a8 <std>
 801e78c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e790:	2202      	movs	r2, #2
 801e792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e796:	2112      	movs	r1, #18
 801e798:	f7ff bf86 	b.w	801e6a8 <std>
 801e79c:	200037a4 	.word	0x200037a4
 801e7a0:	2000366c 	.word	0x2000366c
 801e7a4:	0801e715 	.word	0x0801e715

0801e7a8 <__sfp_lock_acquire>:
 801e7a8:	4801      	ldr	r0, [pc, #4]	@ (801e7b0 <__sfp_lock_acquire+0x8>)
 801e7aa:	f000 bb60 	b.w	801ee6e <__retarget_lock_acquire_recursive>
 801e7ae:	bf00      	nop
 801e7b0:	200037ad 	.word	0x200037ad

0801e7b4 <__sfp_lock_release>:
 801e7b4:	4801      	ldr	r0, [pc, #4]	@ (801e7bc <__sfp_lock_release+0x8>)
 801e7b6:	f000 bb5b 	b.w	801ee70 <__retarget_lock_release_recursive>
 801e7ba:	bf00      	nop
 801e7bc:	200037ad 	.word	0x200037ad

0801e7c0 <__sinit>:
 801e7c0:	b510      	push	{r4, lr}
 801e7c2:	4604      	mov	r4, r0
 801e7c4:	f7ff fff0 	bl	801e7a8 <__sfp_lock_acquire>
 801e7c8:	6a23      	ldr	r3, [r4, #32]
 801e7ca:	b11b      	cbz	r3, 801e7d4 <__sinit+0x14>
 801e7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7d0:	f7ff bff0 	b.w	801e7b4 <__sfp_lock_release>
 801e7d4:	4b04      	ldr	r3, [pc, #16]	@ (801e7e8 <__sinit+0x28>)
 801e7d6:	6223      	str	r3, [r4, #32]
 801e7d8:	4b04      	ldr	r3, [pc, #16]	@ (801e7ec <__sinit+0x2c>)
 801e7da:	681b      	ldr	r3, [r3, #0]
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d1f5      	bne.n	801e7cc <__sinit+0xc>
 801e7e0:	f7ff ffc4 	bl	801e76c <global_stdio_init.part.0>
 801e7e4:	e7f2      	b.n	801e7cc <__sinit+0xc>
 801e7e6:	bf00      	nop
 801e7e8:	0801e72d 	.word	0x0801e72d
 801e7ec:	200037a4 	.word	0x200037a4

0801e7f0 <_fwalk_sglue>:
 801e7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e7f4:	4607      	mov	r7, r0
 801e7f6:	4688      	mov	r8, r1
 801e7f8:	4614      	mov	r4, r2
 801e7fa:	2600      	movs	r6, #0
 801e7fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e800:	f1b9 0901 	subs.w	r9, r9, #1
 801e804:	d505      	bpl.n	801e812 <_fwalk_sglue+0x22>
 801e806:	6824      	ldr	r4, [r4, #0]
 801e808:	2c00      	cmp	r4, #0
 801e80a:	d1f7      	bne.n	801e7fc <_fwalk_sglue+0xc>
 801e80c:	4630      	mov	r0, r6
 801e80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e812:	89ab      	ldrh	r3, [r5, #12]
 801e814:	2b01      	cmp	r3, #1
 801e816:	d907      	bls.n	801e828 <_fwalk_sglue+0x38>
 801e818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e81c:	3301      	adds	r3, #1
 801e81e:	d003      	beq.n	801e828 <_fwalk_sglue+0x38>
 801e820:	4629      	mov	r1, r5
 801e822:	4638      	mov	r0, r7
 801e824:	47c0      	blx	r8
 801e826:	4306      	orrs	r6, r0
 801e828:	3568      	adds	r5, #104	@ 0x68
 801e82a:	e7e9      	b.n	801e800 <_fwalk_sglue+0x10>

0801e82c <_fwrite_r>:
 801e82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e830:	9c08      	ldr	r4, [sp, #32]
 801e832:	468a      	mov	sl, r1
 801e834:	4690      	mov	r8, r2
 801e836:	fb02 f903 	mul.w	r9, r2, r3
 801e83a:	4606      	mov	r6, r0
 801e83c:	b118      	cbz	r0, 801e846 <_fwrite_r+0x1a>
 801e83e:	6a03      	ldr	r3, [r0, #32]
 801e840:	b90b      	cbnz	r3, 801e846 <_fwrite_r+0x1a>
 801e842:	f7ff ffbd 	bl	801e7c0 <__sinit>
 801e846:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e848:	07dd      	lsls	r5, r3, #31
 801e84a:	d405      	bmi.n	801e858 <_fwrite_r+0x2c>
 801e84c:	89a3      	ldrh	r3, [r4, #12]
 801e84e:	0598      	lsls	r0, r3, #22
 801e850:	d402      	bmi.n	801e858 <_fwrite_r+0x2c>
 801e852:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e854:	f000 fb0b 	bl	801ee6e <__retarget_lock_acquire_recursive>
 801e858:	89a3      	ldrh	r3, [r4, #12]
 801e85a:	0719      	lsls	r1, r3, #28
 801e85c:	d516      	bpl.n	801e88c <_fwrite_r+0x60>
 801e85e:	6923      	ldr	r3, [r4, #16]
 801e860:	b1a3      	cbz	r3, 801e88c <_fwrite_r+0x60>
 801e862:	2500      	movs	r5, #0
 801e864:	454d      	cmp	r5, r9
 801e866:	d01f      	beq.n	801e8a8 <_fwrite_r+0x7c>
 801e868:	68a7      	ldr	r7, [r4, #8]
 801e86a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801e86e:	3f01      	subs	r7, #1
 801e870:	2f00      	cmp	r7, #0
 801e872:	60a7      	str	r7, [r4, #8]
 801e874:	da04      	bge.n	801e880 <_fwrite_r+0x54>
 801e876:	69a3      	ldr	r3, [r4, #24]
 801e878:	429f      	cmp	r7, r3
 801e87a:	db0f      	blt.n	801e89c <_fwrite_r+0x70>
 801e87c:	290a      	cmp	r1, #10
 801e87e:	d00d      	beq.n	801e89c <_fwrite_r+0x70>
 801e880:	6823      	ldr	r3, [r4, #0]
 801e882:	1c5a      	adds	r2, r3, #1
 801e884:	6022      	str	r2, [r4, #0]
 801e886:	7019      	strb	r1, [r3, #0]
 801e888:	3501      	adds	r5, #1
 801e88a:	e7eb      	b.n	801e864 <_fwrite_r+0x38>
 801e88c:	4621      	mov	r1, r4
 801e88e:	4630      	mov	r0, r6
 801e890:	f000 f970 	bl	801eb74 <__swsetup_r>
 801e894:	2800      	cmp	r0, #0
 801e896:	d0e4      	beq.n	801e862 <_fwrite_r+0x36>
 801e898:	2500      	movs	r5, #0
 801e89a:	e005      	b.n	801e8a8 <_fwrite_r+0x7c>
 801e89c:	4622      	mov	r2, r4
 801e89e:	4630      	mov	r0, r6
 801e8a0:	f000 f92a 	bl	801eaf8 <__swbuf_r>
 801e8a4:	3001      	adds	r0, #1
 801e8a6:	d1ef      	bne.n	801e888 <_fwrite_r+0x5c>
 801e8a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e8aa:	07da      	lsls	r2, r3, #31
 801e8ac:	d405      	bmi.n	801e8ba <_fwrite_r+0x8e>
 801e8ae:	89a3      	ldrh	r3, [r4, #12]
 801e8b0:	059b      	lsls	r3, r3, #22
 801e8b2:	d402      	bmi.n	801e8ba <_fwrite_r+0x8e>
 801e8b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e8b6:	f000 fadb 	bl	801ee70 <__retarget_lock_release_recursive>
 801e8ba:	fbb5 f0f8 	udiv	r0, r5, r8
 801e8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801e8c4 <fwrite>:
 801e8c4:	b507      	push	{r0, r1, r2, lr}
 801e8c6:	9300      	str	r3, [sp, #0]
 801e8c8:	4613      	mov	r3, r2
 801e8ca:	460a      	mov	r2, r1
 801e8cc:	4601      	mov	r1, r0
 801e8ce:	4803      	ldr	r0, [pc, #12]	@ (801e8dc <fwrite+0x18>)
 801e8d0:	6800      	ldr	r0, [r0, #0]
 801e8d2:	f7ff ffab 	bl	801e82c <_fwrite_r>
 801e8d6:	b003      	add	sp, #12
 801e8d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801e8dc:	20000148 	.word	0x20000148

0801e8e0 <iprintf>:
 801e8e0:	b40f      	push	{r0, r1, r2, r3}
 801e8e2:	b507      	push	{r0, r1, r2, lr}
 801e8e4:	4906      	ldr	r1, [pc, #24]	@ (801e900 <iprintf+0x20>)
 801e8e6:	ab04      	add	r3, sp, #16
 801e8e8:	6808      	ldr	r0, [r1, #0]
 801e8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801e8ee:	6881      	ldr	r1, [r0, #8]
 801e8f0:	9301      	str	r3, [sp, #4]
 801e8f2:	f002 fdcd 	bl	8021490 <_vfiprintf_r>
 801e8f6:	b003      	add	sp, #12
 801e8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e8fc:	b004      	add	sp, #16
 801e8fe:	4770      	bx	lr
 801e900:	20000148 	.word	0x20000148

0801e904 <_puts_r>:
 801e904:	6a03      	ldr	r3, [r0, #32]
 801e906:	b570      	push	{r4, r5, r6, lr}
 801e908:	6884      	ldr	r4, [r0, #8]
 801e90a:	4605      	mov	r5, r0
 801e90c:	460e      	mov	r6, r1
 801e90e:	b90b      	cbnz	r3, 801e914 <_puts_r+0x10>
 801e910:	f7ff ff56 	bl	801e7c0 <__sinit>
 801e914:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e916:	07db      	lsls	r3, r3, #31
 801e918:	d405      	bmi.n	801e926 <_puts_r+0x22>
 801e91a:	89a3      	ldrh	r3, [r4, #12]
 801e91c:	0598      	lsls	r0, r3, #22
 801e91e:	d402      	bmi.n	801e926 <_puts_r+0x22>
 801e920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e922:	f000 faa4 	bl	801ee6e <__retarget_lock_acquire_recursive>
 801e926:	89a3      	ldrh	r3, [r4, #12]
 801e928:	0719      	lsls	r1, r3, #28
 801e92a:	d502      	bpl.n	801e932 <_puts_r+0x2e>
 801e92c:	6923      	ldr	r3, [r4, #16]
 801e92e:	2b00      	cmp	r3, #0
 801e930:	d135      	bne.n	801e99e <_puts_r+0x9a>
 801e932:	4621      	mov	r1, r4
 801e934:	4628      	mov	r0, r5
 801e936:	f000 f91d 	bl	801eb74 <__swsetup_r>
 801e93a:	b380      	cbz	r0, 801e99e <_puts_r+0x9a>
 801e93c:	f04f 35ff 	mov.w	r5, #4294967295
 801e940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e942:	07da      	lsls	r2, r3, #31
 801e944:	d405      	bmi.n	801e952 <_puts_r+0x4e>
 801e946:	89a3      	ldrh	r3, [r4, #12]
 801e948:	059b      	lsls	r3, r3, #22
 801e94a:	d402      	bmi.n	801e952 <_puts_r+0x4e>
 801e94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e94e:	f000 fa8f 	bl	801ee70 <__retarget_lock_release_recursive>
 801e952:	4628      	mov	r0, r5
 801e954:	bd70      	pop	{r4, r5, r6, pc}
 801e956:	2b00      	cmp	r3, #0
 801e958:	da04      	bge.n	801e964 <_puts_r+0x60>
 801e95a:	69a2      	ldr	r2, [r4, #24]
 801e95c:	429a      	cmp	r2, r3
 801e95e:	dc17      	bgt.n	801e990 <_puts_r+0x8c>
 801e960:	290a      	cmp	r1, #10
 801e962:	d015      	beq.n	801e990 <_puts_r+0x8c>
 801e964:	6823      	ldr	r3, [r4, #0]
 801e966:	1c5a      	adds	r2, r3, #1
 801e968:	6022      	str	r2, [r4, #0]
 801e96a:	7019      	strb	r1, [r3, #0]
 801e96c:	68a3      	ldr	r3, [r4, #8]
 801e96e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e972:	3b01      	subs	r3, #1
 801e974:	60a3      	str	r3, [r4, #8]
 801e976:	2900      	cmp	r1, #0
 801e978:	d1ed      	bne.n	801e956 <_puts_r+0x52>
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	da11      	bge.n	801e9a2 <_puts_r+0x9e>
 801e97e:	4622      	mov	r2, r4
 801e980:	210a      	movs	r1, #10
 801e982:	4628      	mov	r0, r5
 801e984:	f000 f8b8 	bl	801eaf8 <__swbuf_r>
 801e988:	3001      	adds	r0, #1
 801e98a:	d0d7      	beq.n	801e93c <_puts_r+0x38>
 801e98c:	250a      	movs	r5, #10
 801e98e:	e7d7      	b.n	801e940 <_puts_r+0x3c>
 801e990:	4622      	mov	r2, r4
 801e992:	4628      	mov	r0, r5
 801e994:	f000 f8b0 	bl	801eaf8 <__swbuf_r>
 801e998:	3001      	adds	r0, #1
 801e99a:	d1e7      	bne.n	801e96c <_puts_r+0x68>
 801e99c:	e7ce      	b.n	801e93c <_puts_r+0x38>
 801e99e:	3e01      	subs	r6, #1
 801e9a0:	e7e4      	b.n	801e96c <_puts_r+0x68>
 801e9a2:	6823      	ldr	r3, [r4, #0]
 801e9a4:	1c5a      	adds	r2, r3, #1
 801e9a6:	6022      	str	r2, [r4, #0]
 801e9a8:	220a      	movs	r2, #10
 801e9aa:	701a      	strb	r2, [r3, #0]
 801e9ac:	e7ee      	b.n	801e98c <_puts_r+0x88>
	...

0801e9b0 <puts>:
 801e9b0:	4b02      	ldr	r3, [pc, #8]	@ (801e9bc <puts+0xc>)
 801e9b2:	4601      	mov	r1, r0
 801e9b4:	6818      	ldr	r0, [r3, #0]
 801e9b6:	f7ff bfa5 	b.w	801e904 <_puts_r>
 801e9ba:	bf00      	nop
 801e9bc:	20000148 	.word	0x20000148

0801e9c0 <siprintf>:
 801e9c0:	b40e      	push	{r1, r2, r3}
 801e9c2:	b500      	push	{lr}
 801e9c4:	b09c      	sub	sp, #112	@ 0x70
 801e9c6:	ab1d      	add	r3, sp, #116	@ 0x74
 801e9c8:	9002      	str	r0, [sp, #8]
 801e9ca:	9006      	str	r0, [sp, #24]
 801e9cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e9d0:	4809      	ldr	r0, [pc, #36]	@ (801e9f8 <siprintf+0x38>)
 801e9d2:	9107      	str	r1, [sp, #28]
 801e9d4:	9104      	str	r1, [sp, #16]
 801e9d6:	4909      	ldr	r1, [pc, #36]	@ (801e9fc <siprintf+0x3c>)
 801e9d8:	f853 2b04 	ldr.w	r2, [r3], #4
 801e9dc:	9105      	str	r1, [sp, #20]
 801e9de:	6800      	ldr	r0, [r0, #0]
 801e9e0:	9301      	str	r3, [sp, #4]
 801e9e2:	a902      	add	r1, sp, #8
 801e9e4:	f002 fc2e 	bl	8021244 <_svfiprintf_r>
 801e9e8:	9b02      	ldr	r3, [sp, #8]
 801e9ea:	2200      	movs	r2, #0
 801e9ec:	701a      	strb	r2, [r3, #0]
 801e9ee:	b01c      	add	sp, #112	@ 0x70
 801e9f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801e9f4:	b003      	add	sp, #12
 801e9f6:	4770      	bx	lr
 801e9f8:	20000148 	.word	0x20000148
 801e9fc:	ffff0208 	.word	0xffff0208

0801ea00 <__sread>:
 801ea00:	b510      	push	{r4, lr}
 801ea02:	460c      	mov	r4, r1
 801ea04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea08:	f000 f9d2 	bl	801edb0 <_read_r>
 801ea0c:	2800      	cmp	r0, #0
 801ea0e:	bfab      	itete	ge
 801ea10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ea12:	89a3      	ldrhlt	r3, [r4, #12]
 801ea14:	181b      	addge	r3, r3, r0
 801ea16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ea1a:	bfac      	ite	ge
 801ea1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ea1e:	81a3      	strhlt	r3, [r4, #12]
 801ea20:	bd10      	pop	{r4, pc}

0801ea22 <__swrite>:
 801ea22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea26:	461f      	mov	r7, r3
 801ea28:	898b      	ldrh	r3, [r1, #12]
 801ea2a:	05db      	lsls	r3, r3, #23
 801ea2c:	4605      	mov	r5, r0
 801ea2e:	460c      	mov	r4, r1
 801ea30:	4616      	mov	r6, r2
 801ea32:	d505      	bpl.n	801ea40 <__swrite+0x1e>
 801ea34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea38:	2302      	movs	r3, #2
 801ea3a:	2200      	movs	r2, #0
 801ea3c:	f000 f9a6 	bl	801ed8c <_lseek_r>
 801ea40:	89a3      	ldrh	r3, [r4, #12]
 801ea42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ea46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ea4a:	81a3      	strh	r3, [r4, #12]
 801ea4c:	4632      	mov	r2, r6
 801ea4e:	463b      	mov	r3, r7
 801ea50:	4628      	mov	r0, r5
 801ea52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ea56:	f000 b9cd 	b.w	801edf4 <_write_r>

0801ea5a <__sseek>:
 801ea5a:	b510      	push	{r4, lr}
 801ea5c:	460c      	mov	r4, r1
 801ea5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea62:	f000 f993 	bl	801ed8c <_lseek_r>
 801ea66:	1c43      	adds	r3, r0, #1
 801ea68:	89a3      	ldrh	r3, [r4, #12]
 801ea6a:	bf15      	itete	ne
 801ea6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ea6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ea72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ea76:	81a3      	strheq	r3, [r4, #12]
 801ea78:	bf18      	it	ne
 801ea7a:	81a3      	strhne	r3, [r4, #12]
 801ea7c:	bd10      	pop	{r4, pc}

0801ea7e <__sclose>:
 801ea7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea82:	f000 b973 	b.w	801ed6c <_close_r>

0801ea86 <_vsniprintf_r>:
 801ea86:	b530      	push	{r4, r5, lr}
 801ea88:	4614      	mov	r4, r2
 801ea8a:	2c00      	cmp	r4, #0
 801ea8c:	b09b      	sub	sp, #108	@ 0x6c
 801ea8e:	4605      	mov	r5, r0
 801ea90:	461a      	mov	r2, r3
 801ea92:	da05      	bge.n	801eaa0 <_vsniprintf_r+0x1a>
 801ea94:	238b      	movs	r3, #139	@ 0x8b
 801ea96:	6003      	str	r3, [r0, #0]
 801ea98:	f04f 30ff 	mov.w	r0, #4294967295
 801ea9c:	b01b      	add	sp, #108	@ 0x6c
 801ea9e:	bd30      	pop	{r4, r5, pc}
 801eaa0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801eaa4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801eaa8:	bf14      	ite	ne
 801eaaa:	f104 33ff 	addne.w	r3, r4, #4294967295
 801eaae:	4623      	moveq	r3, r4
 801eab0:	9302      	str	r3, [sp, #8]
 801eab2:	9305      	str	r3, [sp, #20]
 801eab4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801eab8:	9100      	str	r1, [sp, #0]
 801eaba:	9104      	str	r1, [sp, #16]
 801eabc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801eac0:	4669      	mov	r1, sp
 801eac2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801eac4:	f002 fbbe 	bl	8021244 <_svfiprintf_r>
 801eac8:	1c43      	adds	r3, r0, #1
 801eaca:	bfbc      	itt	lt
 801eacc:	238b      	movlt	r3, #139	@ 0x8b
 801eace:	602b      	strlt	r3, [r5, #0]
 801ead0:	2c00      	cmp	r4, #0
 801ead2:	d0e3      	beq.n	801ea9c <_vsniprintf_r+0x16>
 801ead4:	9b00      	ldr	r3, [sp, #0]
 801ead6:	2200      	movs	r2, #0
 801ead8:	701a      	strb	r2, [r3, #0]
 801eada:	e7df      	b.n	801ea9c <_vsniprintf_r+0x16>

0801eadc <vsniprintf>:
 801eadc:	b507      	push	{r0, r1, r2, lr}
 801eade:	9300      	str	r3, [sp, #0]
 801eae0:	4613      	mov	r3, r2
 801eae2:	460a      	mov	r2, r1
 801eae4:	4601      	mov	r1, r0
 801eae6:	4803      	ldr	r0, [pc, #12]	@ (801eaf4 <vsniprintf+0x18>)
 801eae8:	6800      	ldr	r0, [r0, #0]
 801eaea:	f7ff ffcc 	bl	801ea86 <_vsniprintf_r>
 801eaee:	b003      	add	sp, #12
 801eaf0:	f85d fb04 	ldr.w	pc, [sp], #4
 801eaf4:	20000148 	.word	0x20000148

0801eaf8 <__swbuf_r>:
 801eaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eafa:	460e      	mov	r6, r1
 801eafc:	4614      	mov	r4, r2
 801eafe:	4605      	mov	r5, r0
 801eb00:	b118      	cbz	r0, 801eb0a <__swbuf_r+0x12>
 801eb02:	6a03      	ldr	r3, [r0, #32]
 801eb04:	b90b      	cbnz	r3, 801eb0a <__swbuf_r+0x12>
 801eb06:	f7ff fe5b 	bl	801e7c0 <__sinit>
 801eb0a:	69a3      	ldr	r3, [r4, #24]
 801eb0c:	60a3      	str	r3, [r4, #8]
 801eb0e:	89a3      	ldrh	r3, [r4, #12]
 801eb10:	071a      	lsls	r2, r3, #28
 801eb12:	d501      	bpl.n	801eb18 <__swbuf_r+0x20>
 801eb14:	6923      	ldr	r3, [r4, #16]
 801eb16:	b943      	cbnz	r3, 801eb2a <__swbuf_r+0x32>
 801eb18:	4621      	mov	r1, r4
 801eb1a:	4628      	mov	r0, r5
 801eb1c:	f000 f82a 	bl	801eb74 <__swsetup_r>
 801eb20:	b118      	cbz	r0, 801eb2a <__swbuf_r+0x32>
 801eb22:	f04f 37ff 	mov.w	r7, #4294967295
 801eb26:	4638      	mov	r0, r7
 801eb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb2a:	6823      	ldr	r3, [r4, #0]
 801eb2c:	6922      	ldr	r2, [r4, #16]
 801eb2e:	1a98      	subs	r0, r3, r2
 801eb30:	6963      	ldr	r3, [r4, #20]
 801eb32:	b2f6      	uxtb	r6, r6
 801eb34:	4283      	cmp	r3, r0
 801eb36:	4637      	mov	r7, r6
 801eb38:	dc05      	bgt.n	801eb46 <__swbuf_r+0x4e>
 801eb3a:	4621      	mov	r1, r4
 801eb3c:	4628      	mov	r0, r5
 801eb3e:	f002 fe43 	bl	80217c8 <_fflush_r>
 801eb42:	2800      	cmp	r0, #0
 801eb44:	d1ed      	bne.n	801eb22 <__swbuf_r+0x2a>
 801eb46:	68a3      	ldr	r3, [r4, #8]
 801eb48:	3b01      	subs	r3, #1
 801eb4a:	60a3      	str	r3, [r4, #8]
 801eb4c:	6823      	ldr	r3, [r4, #0]
 801eb4e:	1c5a      	adds	r2, r3, #1
 801eb50:	6022      	str	r2, [r4, #0]
 801eb52:	701e      	strb	r6, [r3, #0]
 801eb54:	6962      	ldr	r2, [r4, #20]
 801eb56:	1c43      	adds	r3, r0, #1
 801eb58:	429a      	cmp	r2, r3
 801eb5a:	d004      	beq.n	801eb66 <__swbuf_r+0x6e>
 801eb5c:	89a3      	ldrh	r3, [r4, #12]
 801eb5e:	07db      	lsls	r3, r3, #31
 801eb60:	d5e1      	bpl.n	801eb26 <__swbuf_r+0x2e>
 801eb62:	2e0a      	cmp	r6, #10
 801eb64:	d1df      	bne.n	801eb26 <__swbuf_r+0x2e>
 801eb66:	4621      	mov	r1, r4
 801eb68:	4628      	mov	r0, r5
 801eb6a:	f002 fe2d 	bl	80217c8 <_fflush_r>
 801eb6e:	2800      	cmp	r0, #0
 801eb70:	d0d9      	beq.n	801eb26 <__swbuf_r+0x2e>
 801eb72:	e7d6      	b.n	801eb22 <__swbuf_r+0x2a>

0801eb74 <__swsetup_r>:
 801eb74:	b538      	push	{r3, r4, r5, lr}
 801eb76:	4b29      	ldr	r3, [pc, #164]	@ (801ec1c <__swsetup_r+0xa8>)
 801eb78:	4605      	mov	r5, r0
 801eb7a:	6818      	ldr	r0, [r3, #0]
 801eb7c:	460c      	mov	r4, r1
 801eb7e:	b118      	cbz	r0, 801eb88 <__swsetup_r+0x14>
 801eb80:	6a03      	ldr	r3, [r0, #32]
 801eb82:	b90b      	cbnz	r3, 801eb88 <__swsetup_r+0x14>
 801eb84:	f7ff fe1c 	bl	801e7c0 <__sinit>
 801eb88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb8c:	0719      	lsls	r1, r3, #28
 801eb8e:	d422      	bmi.n	801ebd6 <__swsetup_r+0x62>
 801eb90:	06da      	lsls	r2, r3, #27
 801eb92:	d407      	bmi.n	801eba4 <__swsetup_r+0x30>
 801eb94:	2209      	movs	r2, #9
 801eb96:	602a      	str	r2, [r5, #0]
 801eb98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eb9c:	81a3      	strh	r3, [r4, #12]
 801eb9e:	f04f 30ff 	mov.w	r0, #4294967295
 801eba2:	e033      	b.n	801ec0c <__swsetup_r+0x98>
 801eba4:	0758      	lsls	r0, r3, #29
 801eba6:	d512      	bpl.n	801ebce <__swsetup_r+0x5a>
 801eba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ebaa:	b141      	cbz	r1, 801ebbe <__swsetup_r+0x4a>
 801ebac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ebb0:	4299      	cmp	r1, r3
 801ebb2:	d002      	beq.n	801ebba <__swsetup_r+0x46>
 801ebb4:	4628      	mov	r0, r5
 801ebb6:	f000 ffe3 	bl	801fb80 <_free_r>
 801ebba:	2300      	movs	r3, #0
 801ebbc:	6363      	str	r3, [r4, #52]	@ 0x34
 801ebbe:	89a3      	ldrh	r3, [r4, #12]
 801ebc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ebc4:	81a3      	strh	r3, [r4, #12]
 801ebc6:	2300      	movs	r3, #0
 801ebc8:	6063      	str	r3, [r4, #4]
 801ebca:	6923      	ldr	r3, [r4, #16]
 801ebcc:	6023      	str	r3, [r4, #0]
 801ebce:	89a3      	ldrh	r3, [r4, #12]
 801ebd0:	f043 0308 	orr.w	r3, r3, #8
 801ebd4:	81a3      	strh	r3, [r4, #12]
 801ebd6:	6923      	ldr	r3, [r4, #16]
 801ebd8:	b94b      	cbnz	r3, 801ebee <__swsetup_r+0x7a>
 801ebda:	89a3      	ldrh	r3, [r4, #12]
 801ebdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ebe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ebe4:	d003      	beq.n	801ebee <__swsetup_r+0x7a>
 801ebe6:	4621      	mov	r1, r4
 801ebe8:	4628      	mov	r0, r5
 801ebea:	f002 fe4d 	bl	8021888 <__smakebuf_r>
 801ebee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ebf2:	f013 0201 	ands.w	r2, r3, #1
 801ebf6:	d00a      	beq.n	801ec0e <__swsetup_r+0x9a>
 801ebf8:	2200      	movs	r2, #0
 801ebfa:	60a2      	str	r2, [r4, #8]
 801ebfc:	6962      	ldr	r2, [r4, #20]
 801ebfe:	4252      	negs	r2, r2
 801ec00:	61a2      	str	r2, [r4, #24]
 801ec02:	6922      	ldr	r2, [r4, #16]
 801ec04:	b942      	cbnz	r2, 801ec18 <__swsetup_r+0xa4>
 801ec06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ec0a:	d1c5      	bne.n	801eb98 <__swsetup_r+0x24>
 801ec0c:	bd38      	pop	{r3, r4, r5, pc}
 801ec0e:	0799      	lsls	r1, r3, #30
 801ec10:	bf58      	it	pl
 801ec12:	6962      	ldrpl	r2, [r4, #20]
 801ec14:	60a2      	str	r2, [r4, #8]
 801ec16:	e7f4      	b.n	801ec02 <__swsetup_r+0x8e>
 801ec18:	2000      	movs	r0, #0
 801ec1a:	e7f7      	b.n	801ec0c <__swsetup_r+0x98>
 801ec1c:	20000148 	.word	0x20000148

0801ec20 <memmove>:
 801ec20:	4288      	cmp	r0, r1
 801ec22:	b510      	push	{r4, lr}
 801ec24:	eb01 0402 	add.w	r4, r1, r2
 801ec28:	d902      	bls.n	801ec30 <memmove+0x10>
 801ec2a:	4284      	cmp	r4, r0
 801ec2c:	4623      	mov	r3, r4
 801ec2e:	d807      	bhi.n	801ec40 <memmove+0x20>
 801ec30:	1e43      	subs	r3, r0, #1
 801ec32:	42a1      	cmp	r1, r4
 801ec34:	d008      	beq.n	801ec48 <memmove+0x28>
 801ec36:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ec3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ec3e:	e7f8      	b.n	801ec32 <memmove+0x12>
 801ec40:	4402      	add	r2, r0
 801ec42:	4601      	mov	r1, r0
 801ec44:	428a      	cmp	r2, r1
 801ec46:	d100      	bne.n	801ec4a <memmove+0x2a>
 801ec48:	bd10      	pop	{r4, pc}
 801ec4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ec4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ec52:	e7f7      	b.n	801ec44 <memmove+0x24>

0801ec54 <memset>:
 801ec54:	4402      	add	r2, r0
 801ec56:	4603      	mov	r3, r0
 801ec58:	4293      	cmp	r3, r2
 801ec5a:	d100      	bne.n	801ec5e <memset+0xa>
 801ec5c:	4770      	bx	lr
 801ec5e:	f803 1b01 	strb.w	r1, [r3], #1
 801ec62:	e7f9      	b.n	801ec58 <memset+0x4>

0801ec64 <strchr>:
 801ec64:	b2c9      	uxtb	r1, r1
 801ec66:	4603      	mov	r3, r0
 801ec68:	4618      	mov	r0, r3
 801ec6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ec6e:	b112      	cbz	r2, 801ec76 <strchr+0x12>
 801ec70:	428a      	cmp	r2, r1
 801ec72:	d1f9      	bne.n	801ec68 <strchr+0x4>
 801ec74:	4770      	bx	lr
 801ec76:	2900      	cmp	r1, #0
 801ec78:	bf18      	it	ne
 801ec7a:	2000      	movne	r0, #0
 801ec7c:	4770      	bx	lr
	...

0801ec80 <strtok>:
 801ec80:	4b16      	ldr	r3, [pc, #88]	@ (801ecdc <strtok+0x5c>)
 801ec82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec86:	681f      	ldr	r7, [r3, #0]
 801ec88:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801ec8a:	4605      	mov	r5, r0
 801ec8c:	460e      	mov	r6, r1
 801ec8e:	b9ec      	cbnz	r4, 801eccc <strtok+0x4c>
 801ec90:	2050      	movs	r0, #80	@ 0x50
 801ec92:	f7fe fd61 	bl	801d758 <malloc>
 801ec96:	4602      	mov	r2, r0
 801ec98:	6478      	str	r0, [r7, #68]	@ 0x44
 801ec9a:	b920      	cbnz	r0, 801eca6 <strtok+0x26>
 801ec9c:	4b10      	ldr	r3, [pc, #64]	@ (801ece0 <strtok+0x60>)
 801ec9e:	4811      	ldr	r0, [pc, #68]	@ (801ece4 <strtok+0x64>)
 801eca0:	215b      	movs	r1, #91	@ 0x5b
 801eca2:	f000 f903 	bl	801eeac <__assert_func>
 801eca6:	e9c0 4400 	strd	r4, r4, [r0]
 801ecaa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ecae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ecb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801ecb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801ecba:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801ecbe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801ecc2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801ecc6:	6184      	str	r4, [r0, #24]
 801ecc8:	7704      	strb	r4, [r0, #28]
 801ecca:	6244      	str	r4, [r0, #36]	@ 0x24
 801eccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ecce:	4631      	mov	r1, r6
 801ecd0:	4628      	mov	r0, r5
 801ecd2:	2301      	movs	r3, #1
 801ecd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ecd8:	f000 b806 	b.w	801ece8 <__strtok_r>
 801ecdc:	20000148 	.word	0x20000148
 801ece0:	08025476 	.word	0x08025476
 801ece4:	0802548d 	.word	0x0802548d

0801ece8 <__strtok_r>:
 801ece8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecea:	4604      	mov	r4, r0
 801ecec:	b908      	cbnz	r0, 801ecf2 <__strtok_r+0xa>
 801ecee:	6814      	ldr	r4, [r2, #0]
 801ecf0:	b144      	cbz	r4, 801ed04 <__strtok_r+0x1c>
 801ecf2:	4620      	mov	r0, r4
 801ecf4:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ecf8:	460f      	mov	r7, r1
 801ecfa:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ecfe:	b91e      	cbnz	r6, 801ed08 <__strtok_r+0x20>
 801ed00:	b965      	cbnz	r5, 801ed1c <__strtok_r+0x34>
 801ed02:	6015      	str	r5, [r2, #0]
 801ed04:	2000      	movs	r0, #0
 801ed06:	e005      	b.n	801ed14 <__strtok_r+0x2c>
 801ed08:	42b5      	cmp	r5, r6
 801ed0a:	d1f6      	bne.n	801ecfa <__strtok_r+0x12>
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	d1f0      	bne.n	801ecf2 <__strtok_r+0xa>
 801ed10:	6014      	str	r4, [r2, #0]
 801ed12:	7003      	strb	r3, [r0, #0]
 801ed14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed16:	461c      	mov	r4, r3
 801ed18:	e00c      	b.n	801ed34 <__strtok_r+0x4c>
 801ed1a:	b915      	cbnz	r5, 801ed22 <__strtok_r+0x3a>
 801ed1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ed20:	460e      	mov	r6, r1
 801ed22:	f816 5b01 	ldrb.w	r5, [r6], #1
 801ed26:	42ab      	cmp	r3, r5
 801ed28:	d1f7      	bne.n	801ed1a <__strtok_r+0x32>
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d0f3      	beq.n	801ed16 <__strtok_r+0x2e>
 801ed2e:	2300      	movs	r3, #0
 801ed30:	f804 3c01 	strb.w	r3, [r4, #-1]
 801ed34:	6014      	str	r4, [r2, #0]
 801ed36:	e7ed      	b.n	801ed14 <__strtok_r+0x2c>

0801ed38 <strstr>:
 801ed38:	780a      	ldrb	r2, [r1, #0]
 801ed3a:	b570      	push	{r4, r5, r6, lr}
 801ed3c:	b96a      	cbnz	r2, 801ed5a <strstr+0x22>
 801ed3e:	bd70      	pop	{r4, r5, r6, pc}
 801ed40:	429a      	cmp	r2, r3
 801ed42:	d109      	bne.n	801ed58 <strstr+0x20>
 801ed44:	460c      	mov	r4, r1
 801ed46:	4605      	mov	r5, r0
 801ed48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	d0f6      	beq.n	801ed3e <strstr+0x6>
 801ed50:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801ed54:	429e      	cmp	r6, r3
 801ed56:	d0f7      	beq.n	801ed48 <strstr+0x10>
 801ed58:	3001      	adds	r0, #1
 801ed5a:	7803      	ldrb	r3, [r0, #0]
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d1ef      	bne.n	801ed40 <strstr+0x8>
 801ed60:	4618      	mov	r0, r3
 801ed62:	e7ec      	b.n	801ed3e <strstr+0x6>

0801ed64 <_localeconv_r>:
 801ed64:	4800      	ldr	r0, [pc, #0]	@ (801ed68 <_localeconv_r+0x4>)
 801ed66:	4770      	bx	lr
 801ed68:	20000288 	.word	0x20000288

0801ed6c <_close_r>:
 801ed6c:	b538      	push	{r3, r4, r5, lr}
 801ed6e:	4d06      	ldr	r5, [pc, #24]	@ (801ed88 <_close_r+0x1c>)
 801ed70:	2300      	movs	r3, #0
 801ed72:	4604      	mov	r4, r0
 801ed74:	4608      	mov	r0, r1
 801ed76:	602b      	str	r3, [r5, #0]
 801ed78:	f7e5 f8b2 	bl	8003ee0 <_close>
 801ed7c:	1c43      	adds	r3, r0, #1
 801ed7e:	d102      	bne.n	801ed86 <_close_r+0x1a>
 801ed80:	682b      	ldr	r3, [r5, #0]
 801ed82:	b103      	cbz	r3, 801ed86 <_close_r+0x1a>
 801ed84:	6023      	str	r3, [r4, #0]
 801ed86:	bd38      	pop	{r3, r4, r5, pc}
 801ed88:	200037a8 	.word	0x200037a8

0801ed8c <_lseek_r>:
 801ed8c:	b538      	push	{r3, r4, r5, lr}
 801ed8e:	4d07      	ldr	r5, [pc, #28]	@ (801edac <_lseek_r+0x20>)
 801ed90:	4604      	mov	r4, r0
 801ed92:	4608      	mov	r0, r1
 801ed94:	4611      	mov	r1, r2
 801ed96:	2200      	movs	r2, #0
 801ed98:	602a      	str	r2, [r5, #0]
 801ed9a:	461a      	mov	r2, r3
 801ed9c:	f7e5 f8c7 	bl	8003f2e <_lseek>
 801eda0:	1c43      	adds	r3, r0, #1
 801eda2:	d102      	bne.n	801edaa <_lseek_r+0x1e>
 801eda4:	682b      	ldr	r3, [r5, #0]
 801eda6:	b103      	cbz	r3, 801edaa <_lseek_r+0x1e>
 801eda8:	6023      	str	r3, [r4, #0]
 801edaa:	bd38      	pop	{r3, r4, r5, pc}
 801edac:	200037a8 	.word	0x200037a8

0801edb0 <_read_r>:
 801edb0:	b538      	push	{r3, r4, r5, lr}
 801edb2:	4d07      	ldr	r5, [pc, #28]	@ (801edd0 <_read_r+0x20>)
 801edb4:	4604      	mov	r4, r0
 801edb6:	4608      	mov	r0, r1
 801edb8:	4611      	mov	r1, r2
 801edba:	2200      	movs	r2, #0
 801edbc:	602a      	str	r2, [r5, #0]
 801edbe:	461a      	mov	r2, r3
 801edc0:	f7e5 f855 	bl	8003e6e <_read>
 801edc4:	1c43      	adds	r3, r0, #1
 801edc6:	d102      	bne.n	801edce <_read_r+0x1e>
 801edc8:	682b      	ldr	r3, [r5, #0]
 801edca:	b103      	cbz	r3, 801edce <_read_r+0x1e>
 801edcc:	6023      	str	r3, [r4, #0]
 801edce:	bd38      	pop	{r3, r4, r5, pc}
 801edd0:	200037a8 	.word	0x200037a8

0801edd4 <_sbrk_r>:
 801edd4:	b538      	push	{r3, r4, r5, lr}
 801edd6:	4d06      	ldr	r5, [pc, #24]	@ (801edf0 <_sbrk_r+0x1c>)
 801edd8:	2300      	movs	r3, #0
 801edda:	4604      	mov	r4, r0
 801eddc:	4608      	mov	r0, r1
 801edde:	602b      	str	r3, [r5, #0]
 801ede0:	f7e5 f8b2 	bl	8003f48 <_sbrk>
 801ede4:	1c43      	adds	r3, r0, #1
 801ede6:	d102      	bne.n	801edee <_sbrk_r+0x1a>
 801ede8:	682b      	ldr	r3, [r5, #0]
 801edea:	b103      	cbz	r3, 801edee <_sbrk_r+0x1a>
 801edec:	6023      	str	r3, [r4, #0]
 801edee:	bd38      	pop	{r3, r4, r5, pc}
 801edf0:	200037a8 	.word	0x200037a8

0801edf4 <_write_r>:
 801edf4:	b538      	push	{r3, r4, r5, lr}
 801edf6:	4d07      	ldr	r5, [pc, #28]	@ (801ee14 <_write_r+0x20>)
 801edf8:	4604      	mov	r4, r0
 801edfa:	4608      	mov	r0, r1
 801edfc:	4611      	mov	r1, r2
 801edfe:	2200      	movs	r2, #0
 801ee00:	602a      	str	r2, [r5, #0]
 801ee02:	461a      	mov	r2, r3
 801ee04:	f7e5 f850 	bl	8003ea8 <_write>
 801ee08:	1c43      	adds	r3, r0, #1
 801ee0a:	d102      	bne.n	801ee12 <_write_r+0x1e>
 801ee0c:	682b      	ldr	r3, [r5, #0]
 801ee0e:	b103      	cbz	r3, 801ee12 <_write_r+0x1e>
 801ee10:	6023      	str	r3, [r4, #0]
 801ee12:	bd38      	pop	{r3, r4, r5, pc}
 801ee14:	200037a8 	.word	0x200037a8

0801ee18 <__errno>:
 801ee18:	4b01      	ldr	r3, [pc, #4]	@ (801ee20 <__errno+0x8>)
 801ee1a:	6818      	ldr	r0, [r3, #0]
 801ee1c:	4770      	bx	lr
 801ee1e:	bf00      	nop
 801ee20:	20000148 	.word	0x20000148

0801ee24 <__libc_init_array>:
 801ee24:	b570      	push	{r4, r5, r6, lr}
 801ee26:	4d0d      	ldr	r5, [pc, #52]	@ (801ee5c <__libc_init_array+0x38>)
 801ee28:	4c0d      	ldr	r4, [pc, #52]	@ (801ee60 <__libc_init_array+0x3c>)
 801ee2a:	1b64      	subs	r4, r4, r5
 801ee2c:	10a4      	asrs	r4, r4, #2
 801ee2e:	2600      	movs	r6, #0
 801ee30:	42a6      	cmp	r6, r4
 801ee32:	d109      	bne.n	801ee48 <__libc_init_array+0x24>
 801ee34:	4d0b      	ldr	r5, [pc, #44]	@ (801ee64 <__libc_init_array+0x40>)
 801ee36:	4c0c      	ldr	r4, [pc, #48]	@ (801ee68 <__libc_init_array+0x44>)
 801ee38:	f003 f98a 	bl	8022150 <_init>
 801ee3c:	1b64      	subs	r4, r4, r5
 801ee3e:	10a4      	asrs	r4, r4, #2
 801ee40:	2600      	movs	r6, #0
 801ee42:	42a6      	cmp	r6, r4
 801ee44:	d105      	bne.n	801ee52 <__libc_init_array+0x2e>
 801ee46:	bd70      	pop	{r4, r5, r6, pc}
 801ee48:	f855 3b04 	ldr.w	r3, [r5], #4
 801ee4c:	4798      	blx	r3
 801ee4e:	3601      	adds	r6, #1
 801ee50:	e7ee      	b.n	801ee30 <__libc_init_array+0xc>
 801ee52:	f855 3b04 	ldr.w	r3, [r5], #4
 801ee56:	4798      	blx	r3
 801ee58:	3601      	adds	r6, #1
 801ee5a:	e7f2      	b.n	801ee42 <__libc_init_array+0x1e>
 801ee5c:	080257cc 	.word	0x080257cc
 801ee60:	080257cc 	.word	0x080257cc
 801ee64:	080257cc 	.word	0x080257cc
 801ee68:	080257d0 	.word	0x080257d0

0801ee6c <__retarget_lock_init_recursive>:
 801ee6c:	4770      	bx	lr

0801ee6e <__retarget_lock_acquire_recursive>:
 801ee6e:	4770      	bx	lr

0801ee70 <__retarget_lock_release_recursive>:
 801ee70:	4770      	bx	lr

0801ee72 <strcpy>:
 801ee72:	4603      	mov	r3, r0
 801ee74:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ee78:	f803 2b01 	strb.w	r2, [r3], #1
 801ee7c:	2a00      	cmp	r2, #0
 801ee7e:	d1f9      	bne.n	801ee74 <strcpy+0x2>
 801ee80:	4770      	bx	lr

0801ee82 <memcpy>:
 801ee82:	440a      	add	r2, r1
 801ee84:	4291      	cmp	r1, r2
 801ee86:	f100 33ff 	add.w	r3, r0, #4294967295
 801ee8a:	d100      	bne.n	801ee8e <memcpy+0xc>
 801ee8c:	4770      	bx	lr
 801ee8e:	b510      	push	{r4, lr}
 801ee90:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ee94:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ee98:	4291      	cmp	r1, r2
 801ee9a:	d1f9      	bne.n	801ee90 <memcpy+0xe>
 801ee9c:	bd10      	pop	{r4, pc}
	...

0801eea0 <nanf>:
 801eea0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801eea8 <nanf+0x8>
 801eea4:	4770      	bx	lr
 801eea6:	bf00      	nop
 801eea8:	7fc00000 	.word	0x7fc00000

0801eeac <__assert_func>:
 801eeac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801eeae:	4614      	mov	r4, r2
 801eeb0:	461a      	mov	r2, r3
 801eeb2:	4b09      	ldr	r3, [pc, #36]	@ (801eed8 <__assert_func+0x2c>)
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	4605      	mov	r5, r0
 801eeb8:	68d8      	ldr	r0, [r3, #12]
 801eeba:	b954      	cbnz	r4, 801eed2 <__assert_func+0x26>
 801eebc:	4b07      	ldr	r3, [pc, #28]	@ (801eedc <__assert_func+0x30>)
 801eebe:	461c      	mov	r4, r3
 801eec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801eec4:	9100      	str	r1, [sp, #0]
 801eec6:	462b      	mov	r3, r5
 801eec8:	4905      	ldr	r1, [pc, #20]	@ (801eee0 <__assert_func+0x34>)
 801eeca:	f002 fca5 	bl	8021818 <fiprintf>
 801eece:	f002 fd53 	bl	8021978 <abort>
 801eed2:	4b04      	ldr	r3, [pc, #16]	@ (801eee4 <__assert_func+0x38>)
 801eed4:	e7f4      	b.n	801eec0 <__assert_func+0x14>
 801eed6:	bf00      	nop
 801eed8:	20000148 	.word	0x20000148
 801eedc:	08025522 	.word	0x08025522
 801eee0:	080254f4 	.word	0x080254f4
 801eee4:	080254e7 	.word	0x080254e7

0801eee8 <quorem>:
 801eee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeec:	6903      	ldr	r3, [r0, #16]
 801eeee:	690c      	ldr	r4, [r1, #16]
 801eef0:	42a3      	cmp	r3, r4
 801eef2:	4607      	mov	r7, r0
 801eef4:	db7e      	blt.n	801eff4 <quorem+0x10c>
 801eef6:	3c01      	subs	r4, #1
 801eef8:	f101 0814 	add.w	r8, r1, #20
 801eefc:	00a3      	lsls	r3, r4, #2
 801eefe:	f100 0514 	add.w	r5, r0, #20
 801ef02:	9300      	str	r3, [sp, #0]
 801ef04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ef08:	9301      	str	r3, [sp, #4]
 801ef0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ef0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ef12:	3301      	adds	r3, #1
 801ef14:	429a      	cmp	r2, r3
 801ef16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ef1a:	fbb2 f6f3 	udiv	r6, r2, r3
 801ef1e:	d32e      	bcc.n	801ef7e <quorem+0x96>
 801ef20:	f04f 0a00 	mov.w	sl, #0
 801ef24:	46c4      	mov	ip, r8
 801ef26:	46ae      	mov	lr, r5
 801ef28:	46d3      	mov	fp, sl
 801ef2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ef2e:	b298      	uxth	r0, r3
 801ef30:	fb06 a000 	mla	r0, r6, r0, sl
 801ef34:	0c02      	lsrs	r2, r0, #16
 801ef36:	0c1b      	lsrs	r3, r3, #16
 801ef38:	fb06 2303 	mla	r3, r6, r3, r2
 801ef3c:	f8de 2000 	ldr.w	r2, [lr]
 801ef40:	b280      	uxth	r0, r0
 801ef42:	b292      	uxth	r2, r2
 801ef44:	1a12      	subs	r2, r2, r0
 801ef46:	445a      	add	r2, fp
 801ef48:	f8de 0000 	ldr.w	r0, [lr]
 801ef4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ef50:	b29b      	uxth	r3, r3
 801ef52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ef56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ef5a:	b292      	uxth	r2, r2
 801ef5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ef60:	45e1      	cmp	r9, ip
 801ef62:	f84e 2b04 	str.w	r2, [lr], #4
 801ef66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801ef6a:	d2de      	bcs.n	801ef2a <quorem+0x42>
 801ef6c:	9b00      	ldr	r3, [sp, #0]
 801ef6e:	58eb      	ldr	r3, [r5, r3]
 801ef70:	b92b      	cbnz	r3, 801ef7e <quorem+0x96>
 801ef72:	9b01      	ldr	r3, [sp, #4]
 801ef74:	3b04      	subs	r3, #4
 801ef76:	429d      	cmp	r5, r3
 801ef78:	461a      	mov	r2, r3
 801ef7a:	d32f      	bcc.n	801efdc <quorem+0xf4>
 801ef7c:	613c      	str	r4, [r7, #16]
 801ef7e:	4638      	mov	r0, r7
 801ef80:	f001 f90c 	bl	802019c <__mcmp>
 801ef84:	2800      	cmp	r0, #0
 801ef86:	db25      	blt.n	801efd4 <quorem+0xec>
 801ef88:	4629      	mov	r1, r5
 801ef8a:	2000      	movs	r0, #0
 801ef8c:	f858 2b04 	ldr.w	r2, [r8], #4
 801ef90:	f8d1 c000 	ldr.w	ip, [r1]
 801ef94:	fa1f fe82 	uxth.w	lr, r2
 801ef98:	fa1f f38c 	uxth.w	r3, ip
 801ef9c:	eba3 030e 	sub.w	r3, r3, lr
 801efa0:	4403      	add	r3, r0
 801efa2:	0c12      	lsrs	r2, r2, #16
 801efa4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801efa8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801efac:	b29b      	uxth	r3, r3
 801efae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801efb2:	45c1      	cmp	r9, r8
 801efb4:	f841 3b04 	str.w	r3, [r1], #4
 801efb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 801efbc:	d2e6      	bcs.n	801ef8c <quorem+0xa4>
 801efbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801efc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801efc6:	b922      	cbnz	r2, 801efd2 <quorem+0xea>
 801efc8:	3b04      	subs	r3, #4
 801efca:	429d      	cmp	r5, r3
 801efcc:	461a      	mov	r2, r3
 801efce:	d30b      	bcc.n	801efe8 <quorem+0x100>
 801efd0:	613c      	str	r4, [r7, #16]
 801efd2:	3601      	adds	r6, #1
 801efd4:	4630      	mov	r0, r6
 801efd6:	b003      	add	sp, #12
 801efd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efdc:	6812      	ldr	r2, [r2, #0]
 801efde:	3b04      	subs	r3, #4
 801efe0:	2a00      	cmp	r2, #0
 801efe2:	d1cb      	bne.n	801ef7c <quorem+0x94>
 801efe4:	3c01      	subs	r4, #1
 801efe6:	e7c6      	b.n	801ef76 <quorem+0x8e>
 801efe8:	6812      	ldr	r2, [r2, #0]
 801efea:	3b04      	subs	r3, #4
 801efec:	2a00      	cmp	r2, #0
 801efee:	d1ef      	bne.n	801efd0 <quorem+0xe8>
 801eff0:	3c01      	subs	r4, #1
 801eff2:	e7ea      	b.n	801efca <quorem+0xe2>
 801eff4:	2000      	movs	r0, #0
 801eff6:	e7ee      	b.n	801efd6 <quorem+0xee>

0801eff8 <_dtoa_r>:
 801eff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801effc:	69c7      	ldr	r7, [r0, #28]
 801effe:	b099      	sub	sp, #100	@ 0x64
 801f000:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f004:	ec55 4b10 	vmov	r4, r5, d0
 801f008:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f00a:	9109      	str	r1, [sp, #36]	@ 0x24
 801f00c:	4683      	mov	fp, r0
 801f00e:	920e      	str	r2, [sp, #56]	@ 0x38
 801f010:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f012:	b97f      	cbnz	r7, 801f034 <_dtoa_r+0x3c>
 801f014:	2010      	movs	r0, #16
 801f016:	f7fe fb9f 	bl	801d758 <malloc>
 801f01a:	4602      	mov	r2, r0
 801f01c:	f8cb 001c 	str.w	r0, [fp, #28]
 801f020:	b920      	cbnz	r0, 801f02c <_dtoa_r+0x34>
 801f022:	4ba7      	ldr	r3, [pc, #668]	@ (801f2c0 <_dtoa_r+0x2c8>)
 801f024:	21ef      	movs	r1, #239	@ 0xef
 801f026:	48a7      	ldr	r0, [pc, #668]	@ (801f2c4 <_dtoa_r+0x2cc>)
 801f028:	f7ff ff40 	bl	801eeac <__assert_func>
 801f02c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f030:	6007      	str	r7, [r0, #0]
 801f032:	60c7      	str	r7, [r0, #12]
 801f034:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f038:	6819      	ldr	r1, [r3, #0]
 801f03a:	b159      	cbz	r1, 801f054 <_dtoa_r+0x5c>
 801f03c:	685a      	ldr	r2, [r3, #4]
 801f03e:	604a      	str	r2, [r1, #4]
 801f040:	2301      	movs	r3, #1
 801f042:	4093      	lsls	r3, r2
 801f044:	608b      	str	r3, [r1, #8]
 801f046:	4658      	mov	r0, fp
 801f048:	f000 fe24 	bl	801fc94 <_Bfree>
 801f04c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f050:	2200      	movs	r2, #0
 801f052:	601a      	str	r2, [r3, #0]
 801f054:	1e2b      	subs	r3, r5, #0
 801f056:	bfb9      	ittee	lt
 801f058:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f05c:	9303      	strlt	r3, [sp, #12]
 801f05e:	2300      	movge	r3, #0
 801f060:	6033      	strge	r3, [r6, #0]
 801f062:	9f03      	ldr	r7, [sp, #12]
 801f064:	4b98      	ldr	r3, [pc, #608]	@ (801f2c8 <_dtoa_r+0x2d0>)
 801f066:	bfbc      	itt	lt
 801f068:	2201      	movlt	r2, #1
 801f06a:	6032      	strlt	r2, [r6, #0]
 801f06c:	43bb      	bics	r3, r7
 801f06e:	d112      	bne.n	801f096 <_dtoa_r+0x9e>
 801f070:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f072:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f076:	6013      	str	r3, [r2, #0]
 801f078:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f07c:	4323      	orrs	r3, r4
 801f07e:	f000 854d 	beq.w	801fb1c <_dtoa_r+0xb24>
 801f082:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f084:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f2dc <_dtoa_r+0x2e4>
 801f088:	2b00      	cmp	r3, #0
 801f08a:	f000 854f 	beq.w	801fb2c <_dtoa_r+0xb34>
 801f08e:	f10a 0303 	add.w	r3, sl, #3
 801f092:	f000 bd49 	b.w	801fb28 <_dtoa_r+0xb30>
 801f096:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f09a:	2200      	movs	r2, #0
 801f09c:	ec51 0b17 	vmov	r0, r1, d7
 801f0a0:	2300      	movs	r3, #0
 801f0a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f0a6:	f7e1 fd27 	bl	8000af8 <__aeabi_dcmpeq>
 801f0aa:	4680      	mov	r8, r0
 801f0ac:	b158      	cbz	r0, 801f0c6 <_dtoa_r+0xce>
 801f0ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f0b0:	2301      	movs	r3, #1
 801f0b2:	6013      	str	r3, [r2, #0]
 801f0b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f0b6:	b113      	cbz	r3, 801f0be <_dtoa_r+0xc6>
 801f0b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f0ba:	4b84      	ldr	r3, [pc, #528]	@ (801f2cc <_dtoa_r+0x2d4>)
 801f0bc:	6013      	str	r3, [r2, #0]
 801f0be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801f2e0 <_dtoa_r+0x2e8>
 801f0c2:	f000 bd33 	b.w	801fb2c <_dtoa_r+0xb34>
 801f0c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f0ca:	aa16      	add	r2, sp, #88	@ 0x58
 801f0cc:	a917      	add	r1, sp, #92	@ 0x5c
 801f0ce:	4658      	mov	r0, fp
 801f0d0:	f001 f984 	bl	80203dc <__d2b>
 801f0d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f0d8:	4681      	mov	r9, r0
 801f0da:	2e00      	cmp	r6, #0
 801f0dc:	d077      	beq.n	801f1ce <_dtoa_r+0x1d6>
 801f0de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f0e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f0e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f0e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f0ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f0f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f0f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f0f8:	4619      	mov	r1, r3
 801f0fa:	2200      	movs	r2, #0
 801f0fc:	4b74      	ldr	r3, [pc, #464]	@ (801f2d0 <_dtoa_r+0x2d8>)
 801f0fe:	f7e1 f8db 	bl	80002b8 <__aeabi_dsub>
 801f102:	a369      	add	r3, pc, #420	@ (adr r3, 801f2a8 <_dtoa_r+0x2b0>)
 801f104:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f108:	f7e1 fa8e 	bl	8000628 <__aeabi_dmul>
 801f10c:	a368      	add	r3, pc, #416	@ (adr r3, 801f2b0 <_dtoa_r+0x2b8>)
 801f10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f112:	f7e1 f8d3 	bl	80002bc <__adddf3>
 801f116:	4604      	mov	r4, r0
 801f118:	4630      	mov	r0, r6
 801f11a:	460d      	mov	r5, r1
 801f11c:	f7e1 fa1a 	bl	8000554 <__aeabi_i2d>
 801f120:	a365      	add	r3, pc, #404	@ (adr r3, 801f2b8 <_dtoa_r+0x2c0>)
 801f122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f126:	f7e1 fa7f 	bl	8000628 <__aeabi_dmul>
 801f12a:	4602      	mov	r2, r0
 801f12c:	460b      	mov	r3, r1
 801f12e:	4620      	mov	r0, r4
 801f130:	4629      	mov	r1, r5
 801f132:	f7e1 f8c3 	bl	80002bc <__adddf3>
 801f136:	4604      	mov	r4, r0
 801f138:	460d      	mov	r5, r1
 801f13a:	f7e1 fd25 	bl	8000b88 <__aeabi_d2iz>
 801f13e:	2200      	movs	r2, #0
 801f140:	4607      	mov	r7, r0
 801f142:	2300      	movs	r3, #0
 801f144:	4620      	mov	r0, r4
 801f146:	4629      	mov	r1, r5
 801f148:	f7e1 fce0 	bl	8000b0c <__aeabi_dcmplt>
 801f14c:	b140      	cbz	r0, 801f160 <_dtoa_r+0x168>
 801f14e:	4638      	mov	r0, r7
 801f150:	f7e1 fa00 	bl	8000554 <__aeabi_i2d>
 801f154:	4622      	mov	r2, r4
 801f156:	462b      	mov	r3, r5
 801f158:	f7e1 fcce 	bl	8000af8 <__aeabi_dcmpeq>
 801f15c:	b900      	cbnz	r0, 801f160 <_dtoa_r+0x168>
 801f15e:	3f01      	subs	r7, #1
 801f160:	2f16      	cmp	r7, #22
 801f162:	d851      	bhi.n	801f208 <_dtoa_r+0x210>
 801f164:	4b5b      	ldr	r3, [pc, #364]	@ (801f2d4 <_dtoa_r+0x2dc>)
 801f166:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f16e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f172:	f7e1 fccb 	bl	8000b0c <__aeabi_dcmplt>
 801f176:	2800      	cmp	r0, #0
 801f178:	d048      	beq.n	801f20c <_dtoa_r+0x214>
 801f17a:	3f01      	subs	r7, #1
 801f17c:	2300      	movs	r3, #0
 801f17e:	9312      	str	r3, [sp, #72]	@ 0x48
 801f180:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f182:	1b9b      	subs	r3, r3, r6
 801f184:	1e5a      	subs	r2, r3, #1
 801f186:	bf44      	itt	mi
 801f188:	f1c3 0801 	rsbmi	r8, r3, #1
 801f18c:	2300      	movmi	r3, #0
 801f18e:	9208      	str	r2, [sp, #32]
 801f190:	bf54      	ite	pl
 801f192:	f04f 0800 	movpl.w	r8, #0
 801f196:	9308      	strmi	r3, [sp, #32]
 801f198:	2f00      	cmp	r7, #0
 801f19a:	db39      	blt.n	801f210 <_dtoa_r+0x218>
 801f19c:	9b08      	ldr	r3, [sp, #32]
 801f19e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f1a0:	443b      	add	r3, r7
 801f1a2:	9308      	str	r3, [sp, #32]
 801f1a4:	2300      	movs	r3, #0
 801f1a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801f1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1aa:	2b09      	cmp	r3, #9
 801f1ac:	d864      	bhi.n	801f278 <_dtoa_r+0x280>
 801f1ae:	2b05      	cmp	r3, #5
 801f1b0:	bfc4      	itt	gt
 801f1b2:	3b04      	subgt	r3, #4
 801f1b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1b8:	f1a3 0302 	sub.w	r3, r3, #2
 801f1bc:	bfcc      	ite	gt
 801f1be:	2400      	movgt	r4, #0
 801f1c0:	2401      	movle	r4, #1
 801f1c2:	2b03      	cmp	r3, #3
 801f1c4:	d863      	bhi.n	801f28e <_dtoa_r+0x296>
 801f1c6:	e8df f003 	tbb	[pc, r3]
 801f1ca:	372a      	.short	0x372a
 801f1cc:	5535      	.short	0x5535
 801f1ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f1d2:	441e      	add	r6, r3
 801f1d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f1d8:	2b20      	cmp	r3, #32
 801f1da:	bfc1      	itttt	gt
 801f1dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f1e0:	409f      	lslgt	r7, r3
 801f1e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f1e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f1ea:	bfd6      	itet	le
 801f1ec:	f1c3 0320 	rsble	r3, r3, #32
 801f1f0:	ea47 0003 	orrgt.w	r0, r7, r3
 801f1f4:	fa04 f003 	lslle.w	r0, r4, r3
 801f1f8:	f7e1 f99c 	bl	8000534 <__aeabi_ui2d>
 801f1fc:	2201      	movs	r2, #1
 801f1fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f202:	3e01      	subs	r6, #1
 801f204:	9214      	str	r2, [sp, #80]	@ 0x50
 801f206:	e777      	b.n	801f0f8 <_dtoa_r+0x100>
 801f208:	2301      	movs	r3, #1
 801f20a:	e7b8      	b.n	801f17e <_dtoa_r+0x186>
 801f20c:	9012      	str	r0, [sp, #72]	@ 0x48
 801f20e:	e7b7      	b.n	801f180 <_dtoa_r+0x188>
 801f210:	427b      	negs	r3, r7
 801f212:	930a      	str	r3, [sp, #40]	@ 0x28
 801f214:	2300      	movs	r3, #0
 801f216:	eba8 0807 	sub.w	r8, r8, r7
 801f21a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f21c:	e7c4      	b.n	801f1a8 <_dtoa_r+0x1b0>
 801f21e:	2300      	movs	r3, #0
 801f220:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f224:	2b00      	cmp	r3, #0
 801f226:	dc35      	bgt.n	801f294 <_dtoa_r+0x29c>
 801f228:	2301      	movs	r3, #1
 801f22a:	9300      	str	r3, [sp, #0]
 801f22c:	9307      	str	r3, [sp, #28]
 801f22e:	461a      	mov	r2, r3
 801f230:	920e      	str	r2, [sp, #56]	@ 0x38
 801f232:	e00b      	b.n	801f24c <_dtoa_r+0x254>
 801f234:	2301      	movs	r3, #1
 801f236:	e7f3      	b.n	801f220 <_dtoa_r+0x228>
 801f238:	2300      	movs	r3, #0
 801f23a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f23c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f23e:	18fb      	adds	r3, r7, r3
 801f240:	9300      	str	r3, [sp, #0]
 801f242:	3301      	adds	r3, #1
 801f244:	2b01      	cmp	r3, #1
 801f246:	9307      	str	r3, [sp, #28]
 801f248:	bfb8      	it	lt
 801f24a:	2301      	movlt	r3, #1
 801f24c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801f250:	2100      	movs	r1, #0
 801f252:	2204      	movs	r2, #4
 801f254:	f102 0514 	add.w	r5, r2, #20
 801f258:	429d      	cmp	r5, r3
 801f25a:	d91f      	bls.n	801f29c <_dtoa_r+0x2a4>
 801f25c:	6041      	str	r1, [r0, #4]
 801f25e:	4658      	mov	r0, fp
 801f260:	f000 fcd8 	bl	801fc14 <_Balloc>
 801f264:	4682      	mov	sl, r0
 801f266:	2800      	cmp	r0, #0
 801f268:	d13c      	bne.n	801f2e4 <_dtoa_r+0x2ec>
 801f26a:	4b1b      	ldr	r3, [pc, #108]	@ (801f2d8 <_dtoa_r+0x2e0>)
 801f26c:	4602      	mov	r2, r0
 801f26e:	f240 11af 	movw	r1, #431	@ 0x1af
 801f272:	e6d8      	b.n	801f026 <_dtoa_r+0x2e>
 801f274:	2301      	movs	r3, #1
 801f276:	e7e0      	b.n	801f23a <_dtoa_r+0x242>
 801f278:	2401      	movs	r4, #1
 801f27a:	2300      	movs	r3, #0
 801f27c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f27e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f280:	f04f 33ff 	mov.w	r3, #4294967295
 801f284:	9300      	str	r3, [sp, #0]
 801f286:	9307      	str	r3, [sp, #28]
 801f288:	2200      	movs	r2, #0
 801f28a:	2312      	movs	r3, #18
 801f28c:	e7d0      	b.n	801f230 <_dtoa_r+0x238>
 801f28e:	2301      	movs	r3, #1
 801f290:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f292:	e7f5      	b.n	801f280 <_dtoa_r+0x288>
 801f294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f296:	9300      	str	r3, [sp, #0]
 801f298:	9307      	str	r3, [sp, #28]
 801f29a:	e7d7      	b.n	801f24c <_dtoa_r+0x254>
 801f29c:	3101      	adds	r1, #1
 801f29e:	0052      	lsls	r2, r2, #1
 801f2a0:	e7d8      	b.n	801f254 <_dtoa_r+0x25c>
 801f2a2:	bf00      	nop
 801f2a4:	f3af 8000 	nop.w
 801f2a8:	636f4361 	.word	0x636f4361
 801f2ac:	3fd287a7 	.word	0x3fd287a7
 801f2b0:	8b60c8b3 	.word	0x8b60c8b3
 801f2b4:	3fc68a28 	.word	0x3fc68a28
 801f2b8:	509f79fb 	.word	0x509f79fb
 801f2bc:	3fd34413 	.word	0x3fd34413
 801f2c0:	08025476 	.word	0x08025476
 801f2c4:	08025530 	.word	0x08025530
 801f2c8:	7ff00000 	.word	0x7ff00000
 801f2cc:	0802544e 	.word	0x0802544e
 801f2d0:	3ff80000 	.word	0x3ff80000
 801f2d4:	08025628 	.word	0x08025628
 801f2d8:	08025588 	.word	0x08025588
 801f2dc:	0802552c 	.word	0x0802552c
 801f2e0:	0802544d 	.word	0x0802544d
 801f2e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f2e8:	6018      	str	r0, [r3, #0]
 801f2ea:	9b07      	ldr	r3, [sp, #28]
 801f2ec:	2b0e      	cmp	r3, #14
 801f2ee:	f200 80a4 	bhi.w	801f43a <_dtoa_r+0x442>
 801f2f2:	2c00      	cmp	r4, #0
 801f2f4:	f000 80a1 	beq.w	801f43a <_dtoa_r+0x442>
 801f2f8:	2f00      	cmp	r7, #0
 801f2fa:	dd33      	ble.n	801f364 <_dtoa_r+0x36c>
 801f2fc:	4bad      	ldr	r3, [pc, #692]	@ (801f5b4 <_dtoa_r+0x5bc>)
 801f2fe:	f007 020f 	and.w	r2, r7, #15
 801f302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f306:	ed93 7b00 	vldr	d7, [r3]
 801f30a:	05f8      	lsls	r0, r7, #23
 801f30c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f310:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f314:	d516      	bpl.n	801f344 <_dtoa_r+0x34c>
 801f316:	4ba8      	ldr	r3, [pc, #672]	@ (801f5b8 <_dtoa_r+0x5c0>)
 801f318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f31c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f320:	f7e1 faac 	bl	800087c <__aeabi_ddiv>
 801f324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f328:	f004 040f 	and.w	r4, r4, #15
 801f32c:	2603      	movs	r6, #3
 801f32e:	4da2      	ldr	r5, [pc, #648]	@ (801f5b8 <_dtoa_r+0x5c0>)
 801f330:	b954      	cbnz	r4, 801f348 <_dtoa_r+0x350>
 801f332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f33a:	f7e1 fa9f 	bl	800087c <__aeabi_ddiv>
 801f33e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f342:	e028      	b.n	801f396 <_dtoa_r+0x39e>
 801f344:	2602      	movs	r6, #2
 801f346:	e7f2      	b.n	801f32e <_dtoa_r+0x336>
 801f348:	07e1      	lsls	r1, r4, #31
 801f34a:	d508      	bpl.n	801f35e <_dtoa_r+0x366>
 801f34c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f350:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f354:	f7e1 f968 	bl	8000628 <__aeabi_dmul>
 801f358:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f35c:	3601      	adds	r6, #1
 801f35e:	1064      	asrs	r4, r4, #1
 801f360:	3508      	adds	r5, #8
 801f362:	e7e5      	b.n	801f330 <_dtoa_r+0x338>
 801f364:	f000 80d2 	beq.w	801f50c <_dtoa_r+0x514>
 801f368:	427c      	negs	r4, r7
 801f36a:	4b92      	ldr	r3, [pc, #584]	@ (801f5b4 <_dtoa_r+0x5bc>)
 801f36c:	4d92      	ldr	r5, [pc, #584]	@ (801f5b8 <_dtoa_r+0x5c0>)
 801f36e:	f004 020f 	and.w	r2, r4, #15
 801f372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f37a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f37e:	f7e1 f953 	bl	8000628 <__aeabi_dmul>
 801f382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f386:	1124      	asrs	r4, r4, #4
 801f388:	2300      	movs	r3, #0
 801f38a:	2602      	movs	r6, #2
 801f38c:	2c00      	cmp	r4, #0
 801f38e:	f040 80b2 	bne.w	801f4f6 <_dtoa_r+0x4fe>
 801f392:	2b00      	cmp	r3, #0
 801f394:	d1d3      	bne.n	801f33e <_dtoa_r+0x346>
 801f396:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f398:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	f000 80b7 	beq.w	801f510 <_dtoa_r+0x518>
 801f3a2:	4b86      	ldr	r3, [pc, #536]	@ (801f5bc <_dtoa_r+0x5c4>)
 801f3a4:	2200      	movs	r2, #0
 801f3a6:	4620      	mov	r0, r4
 801f3a8:	4629      	mov	r1, r5
 801f3aa:	f7e1 fbaf 	bl	8000b0c <__aeabi_dcmplt>
 801f3ae:	2800      	cmp	r0, #0
 801f3b0:	f000 80ae 	beq.w	801f510 <_dtoa_r+0x518>
 801f3b4:	9b07      	ldr	r3, [sp, #28]
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	f000 80aa 	beq.w	801f510 <_dtoa_r+0x518>
 801f3bc:	9b00      	ldr	r3, [sp, #0]
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	dd37      	ble.n	801f432 <_dtoa_r+0x43a>
 801f3c2:	1e7b      	subs	r3, r7, #1
 801f3c4:	9304      	str	r3, [sp, #16]
 801f3c6:	4620      	mov	r0, r4
 801f3c8:	4b7d      	ldr	r3, [pc, #500]	@ (801f5c0 <_dtoa_r+0x5c8>)
 801f3ca:	2200      	movs	r2, #0
 801f3cc:	4629      	mov	r1, r5
 801f3ce:	f7e1 f92b 	bl	8000628 <__aeabi_dmul>
 801f3d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f3d6:	9c00      	ldr	r4, [sp, #0]
 801f3d8:	3601      	adds	r6, #1
 801f3da:	4630      	mov	r0, r6
 801f3dc:	f7e1 f8ba 	bl	8000554 <__aeabi_i2d>
 801f3e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f3e4:	f7e1 f920 	bl	8000628 <__aeabi_dmul>
 801f3e8:	4b76      	ldr	r3, [pc, #472]	@ (801f5c4 <_dtoa_r+0x5cc>)
 801f3ea:	2200      	movs	r2, #0
 801f3ec:	f7e0 ff66 	bl	80002bc <__adddf3>
 801f3f0:	4605      	mov	r5, r0
 801f3f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f3f6:	2c00      	cmp	r4, #0
 801f3f8:	f040 808d 	bne.w	801f516 <_dtoa_r+0x51e>
 801f3fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f400:	4b71      	ldr	r3, [pc, #452]	@ (801f5c8 <_dtoa_r+0x5d0>)
 801f402:	2200      	movs	r2, #0
 801f404:	f7e0 ff58 	bl	80002b8 <__aeabi_dsub>
 801f408:	4602      	mov	r2, r0
 801f40a:	460b      	mov	r3, r1
 801f40c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f410:	462a      	mov	r2, r5
 801f412:	4633      	mov	r3, r6
 801f414:	f7e1 fb98 	bl	8000b48 <__aeabi_dcmpgt>
 801f418:	2800      	cmp	r0, #0
 801f41a:	f040 828b 	bne.w	801f934 <_dtoa_r+0x93c>
 801f41e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f422:	462a      	mov	r2, r5
 801f424:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f428:	f7e1 fb70 	bl	8000b0c <__aeabi_dcmplt>
 801f42c:	2800      	cmp	r0, #0
 801f42e:	f040 8128 	bne.w	801f682 <_dtoa_r+0x68a>
 801f432:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f436:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f43a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f43c:	2b00      	cmp	r3, #0
 801f43e:	f2c0 815a 	blt.w	801f6f6 <_dtoa_r+0x6fe>
 801f442:	2f0e      	cmp	r7, #14
 801f444:	f300 8157 	bgt.w	801f6f6 <_dtoa_r+0x6fe>
 801f448:	4b5a      	ldr	r3, [pc, #360]	@ (801f5b4 <_dtoa_r+0x5bc>)
 801f44a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f44e:	ed93 7b00 	vldr	d7, [r3]
 801f452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f454:	2b00      	cmp	r3, #0
 801f456:	ed8d 7b00 	vstr	d7, [sp]
 801f45a:	da03      	bge.n	801f464 <_dtoa_r+0x46c>
 801f45c:	9b07      	ldr	r3, [sp, #28]
 801f45e:	2b00      	cmp	r3, #0
 801f460:	f340 8101 	ble.w	801f666 <_dtoa_r+0x66e>
 801f464:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f468:	4656      	mov	r6, sl
 801f46a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f46e:	4620      	mov	r0, r4
 801f470:	4629      	mov	r1, r5
 801f472:	f7e1 fa03 	bl	800087c <__aeabi_ddiv>
 801f476:	f7e1 fb87 	bl	8000b88 <__aeabi_d2iz>
 801f47a:	4680      	mov	r8, r0
 801f47c:	f7e1 f86a 	bl	8000554 <__aeabi_i2d>
 801f480:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f484:	f7e1 f8d0 	bl	8000628 <__aeabi_dmul>
 801f488:	4602      	mov	r2, r0
 801f48a:	460b      	mov	r3, r1
 801f48c:	4620      	mov	r0, r4
 801f48e:	4629      	mov	r1, r5
 801f490:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f494:	f7e0 ff10 	bl	80002b8 <__aeabi_dsub>
 801f498:	f806 4b01 	strb.w	r4, [r6], #1
 801f49c:	9d07      	ldr	r5, [sp, #28]
 801f49e:	eba6 040a 	sub.w	r4, r6, sl
 801f4a2:	42a5      	cmp	r5, r4
 801f4a4:	4602      	mov	r2, r0
 801f4a6:	460b      	mov	r3, r1
 801f4a8:	f040 8117 	bne.w	801f6da <_dtoa_r+0x6e2>
 801f4ac:	f7e0 ff06 	bl	80002bc <__adddf3>
 801f4b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f4b4:	4604      	mov	r4, r0
 801f4b6:	460d      	mov	r5, r1
 801f4b8:	f7e1 fb46 	bl	8000b48 <__aeabi_dcmpgt>
 801f4bc:	2800      	cmp	r0, #0
 801f4be:	f040 80f9 	bne.w	801f6b4 <_dtoa_r+0x6bc>
 801f4c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f4c6:	4620      	mov	r0, r4
 801f4c8:	4629      	mov	r1, r5
 801f4ca:	f7e1 fb15 	bl	8000af8 <__aeabi_dcmpeq>
 801f4ce:	b118      	cbz	r0, 801f4d8 <_dtoa_r+0x4e0>
 801f4d0:	f018 0f01 	tst.w	r8, #1
 801f4d4:	f040 80ee 	bne.w	801f6b4 <_dtoa_r+0x6bc>
 801f4d8:	4649      	mov	r1, r9
 801f4da:	4658      	mov	r0, fp
 801f4dc:	f000 fbda 	bl	801fc94 <_Bfree>
 801f4e0:	2300      	movs	r3, #0
 801f4e2:	7033      	strb	r3, [r6, #0]
 801f4e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f4e6:	3701      	adds	r7, #1
 801f4e8:	601f      	str	r7, [r3, #0]
 801f4ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	f000 831d 	beq.w	801fb2c <_dtoa_r+0xb34>
 801f4f2:	601e      	str	r6, [r3, #0]
 801f4f4:	e31a      	b.n	801fb2c <_dtoa_r+0xb34>
 801f4f6:	07e2      	lsls	r2, r4, #31
 801f4f8:	d505      	bpl.n	801f506 <_dtoa_r+0x50e>
 801f4fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f4fe:	f7e1 f893 	bl	8000628 <__aeabi_dmul>
 801f502:	3601      	adds	r6, #1
 801f504:	2301      	movs	r3, #1
 801f506:	1064      	asrs	r4, r4, #1
 801f508:	3508      	adds	r5, #8
 801f50a:	e73f      	b.n	801f38c <_dtoa_r+0x394>
 801f50c:	2602      	movs	r6, #2
 801f50e:	e742      	b.n	801f396 <_dtoa_r+0x39e>
 801f510:	9c07      	ldr	r4, [sp, #28]
 801f512:	9704      	str	r7, [sp, #16]
 801f514:	e761      	b.n	801f3da <_dtoa_r+0x3e2>
 801f516:	4b27      	ldr	r3, [pc, #156]	@ (801f5b4 <_dtoa_r+0x5bc>)
 801f518:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f51a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f51e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f522:	4454      	add	r4, sl
 801f524:	2900      	cmp	r1, #0
 801f526:	d053      	beq.n	801f5d0 <_dtoa_r+0x5d8>
 801f528:	4928      	ldr	r1, [pc, #160]	@ (801f5cc <_dtoa_r+0x5d4>)
 801f52a:	2000      	movs	r0, #0
 801f52c:	f7e1 f9a6 	bl	800087c <__aeabi_ddiv>
 801f530:	4633      	mov	r3, r6
 801f532:	462a      	mov	r2, r5
 801f534:	f7e0 fec0 	bl	80002b8 <__aeabi_dsub>
 801f538:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f53c:	4656      	mov	r6, sl
 801f53e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f542:	f7e1 fb21 	bl	8000b88 <__aeabi_d2iz>
 801f546:	4605      	mov	r5, r0
 801f548:	f7e1 f804 	bl	8000554 <__aeabi_i2d>
 801f54c:	4602      	mov	r2, r0
 801f54e:	460b      	mov	r3, r1
 801f550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f554:	f7e0 feb0 	bl	80002b8 <__aeabi_dsub>
 801f558:	3530      	adds	r5, #48	@ 0x30
 801f55a:	4602      	mov	r2, r0
 801f55c:	460b      	mov	r3, r1
 801f55e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f562:	f806 5b01 	strb.w	r5, [r6], #1
 801f566:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f56a:	f7e1 facf 	bl	8000b0c <__aeabi_dcmplt>
 801f56e:	2800      	cmp	r0, #0
 801f570:	d171      	bne.n	801f656 <_dtoa_r+0x65e>
 801f572:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f576:	4911      	ldr	r1, [pc, #68]	@ (801f5bc <_dtoa_r+0x5c4>)
 801f578:	2000      	movs	r0, #0
 801f57a:	f7e0 fe9d 	bl	80002b8 <__aeabi_dsub>
 801f57e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f582:	f7e1 fac3 	bl	8000b0c <__aeabi_dcmplt>
 801f586:	2800      	cmp	r0, #0
 801f588:	f040 8095 	bne.w	801f6b6 <_dtoa_r+0x6be>
 801f58c:	42a6      	cmp	r6, r4
 801f58e:	f43f af50 	beq.w	801f432 <_dtoa_r+0x43a>
 801f592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f596:	4b0a      	ldr	r3, [pc, #40]	@ (801f5c0 <_dtoa_r+0x5c8>)
 801f598:	2200      	movs	r2, #0
 801f59a:	f7e1 f845 	bl	8000628 <__aeabi_dmul>
 801f59e:	4b08      	ldr	r3, [pc, #32]	@ (801f5c0 <_dtoa_r+0x5c8>)
 801f5a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f5a4:	2200      	movs	r2, #0
 801f5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5aa:	f7e1 f83d 	bl	8000628 <__aeabi_dmul>
 801f5ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f5b2:	e7c4      	b.n	801f53e <_dtoa_r+0x546>
 801f5b4:	08025628 	.word	0x08025628
 801f5b8:	08025600 	.word	0x08025600
 801f5bc:	3ff00000 	.word	0x3ff00000
 801f5c0:	40240000 	.word	0x40240000
 801f5c4:	401c0000 	.word	0x401c0000
 801f5c8:	40140000 	.word	0x40140000
 801f5cc:	3fe00000 	.word	0x3fe00000
 801f5d0:	4631      	mov	r1, r6
 801f5d2:	4628      	mov	r0, r5
 801f5d4:	f7e1 f828 	bl	8000628 <__aeabi_dmul>
 801f5d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f5dc:	9415      	str	r4, [sp, #84]	@ 0x54
 801f5de:	4656      	mov	r6, sl
 801f5e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5e4:	f7e1 fad0 	bl	8000b88 <__aeabi_d2iz>
 801f5e8:	4605      	mov	r5, r0
 801f5ea:	f7e0 ffb3 	bl	8000554 <__aeabi_i2d>
 801f5ee:	4602      	mov	r2, r0
 801f5f0:	460b      	mov	r3, r1
 801f5f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5f6:	f7e0 fe5f 	bl	80002b8 <__aeabi_dsub>
 801f5fa:	3530      	adds	r5, #48	@ 0x30
 801f5fc:	f806 5b01 	strb.w	r5, [r6], #1
 801f600:	4602      	mov	r2, r0
 801f602:	460b      	mov	r3, r1
 801f604:	42a6      	cmp	r6, r4
 801f606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f60a:	f04f 0200 	mov.w	r2, #0
 801f60e:	d124      	bne.n	801f65a <_dtoa_r+0x662>
 801f610:	4bac      	ldr	r3, [pc, #688]	@ (801f8c4 <_dtoa_r+0x8cc>)
 801f612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f616:	f7e0 fe51 	bl	80002bc <__adddf3>
 801f61a:	4602      	mov	r2, r0
 801f61c:	460b      	mov	r3, r1
 801f61e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f622:	f7e1 fa91 	bl	8000b48 <__aeabi_dcmpgt>
 801f626:	2800      	cmp	r0, #0
 801f628:	d145      	bne.n	801f6b6 <_dtoa_r+0x6be>
 801f62a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f62e:	49a5      	ldr	r1, [pc, #660]	@ (801f8c4 <_dtoa_r+0x8cc>)
 801f630:	2000      	movs	r0, #0
 801f632:	f7e0 fe41 	bl	80002b8 <__aeabi_dsub>
 801f636:	4602      	mov	r2, r0
 801f638:	460b      	mov	r3, r1
 801f63a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f63e:	f7e1 fa65 	bl	8000b0c <__aeabi_dcmplt>
 801f642:	2800      	cmp	r0, #0
 801f644:	f43f aef5 	beq.w	801f432 <_dtoa_r+0x43a>
 801f648:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f64a:	1e73      	subs	r3, r6, #1
 801f64c:	9315      	str	r3, [sp, #84]	@ 0x54
 801f64e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f652:	2b30      	cmp	r3, #48	@ 0x30
 801f654:	d0f8      	beq.n	801f648 <_dtoa_r+0x650>
 801f656:	9f04      	ldr	r7, [sp, #16]
 801f658:	e73e      	b.n	801f4d8 <_dtoa_r+0x4e0>
 801f65a:	4b9b      	ldr	r3, [pc, #620]	@ (801f8c8 <_dtoa_r+0x8d0>)
 801f65c:	f7e0 ffe4 	bl	8000628 <__aeabi_dmul>
 801f660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f664:	e7bc      	b.n	801f5e0 <_dtoa_r+0x5e8>
 801f666:	d10c      	bne.n	801f682 <_dtoa_r+0x68a>
 801f668:	4b98      	ldr	r3, [pc, #608]	@ (801f8cc <_dtoa_r+0x8d4>)
 801f66a:	2200      	movs	r2, #0
 801f66c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f670:	f7e0 ffda 	bl	8000628 <__aeabi_dmul>
 801f674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f678:	f7e1 fa5c 	bl	8000b34 <__aeabi_dcmpge>
 801f67c:	2800      	cmp	r0, #0
 801f67e:	f000 8157 	beq.w	801f930 <_dtoa_r+0x938>
 801f682:	2400      	movs	r4, #0
 801f684:	4625      	mov	r5, r4
 801f686:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f688:	43db      	mvns	r3, r3
 801f68a:	9304      	str	r3, [sp, #16]
 801f68c:	4656      	mov	r6, sl
 801f68e:	2700      	movs	r7, #0
 801f690:	4621      	mov	r1, r4
 801f692:	4658      	mov	r0, fp
 801f694:	f000 fafe 	bl	801fc94 <_Bfree>
 801f698:	2d00      	cmp	r5, #0
 801f69a:	d0dc      	beq.n	801f656 <_dtoa_r+0x65e>
 801f69c:	b12f      	cbz	r7, 801f6aa <_dtoa_r+0x6b2>
 801f69e:	42af      	cmp	r7, r5
 801f6a0:	d003      	beq.n	801f6aa <_dtoa_r+0x6b2>
 801f6a2:	4639      	mov	r1, r7
 801f6a4:	4658      	mov	r0, fp
 801f6a6:	f000 faf5 	bl	801fc94 <_Bfree>
 801f6aa:	4629      	mov	r1, r5
 801f6ac:	4658      	mov	r0, fp
 801f6ae:	f000 faf1 	bl	801fc94 <_Bfree>
 801f6b2:	e7d0      	b.n	801f656 <_dtoa_r+0x65e>
 801f6b4:	9704      	str	r7, [sp, #16]
 801f6b6:	4633      	mov	r3, r6
 801f6b8:	461e      	mov	r6, r3
 801f6ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f6be:	2a39      	cmp	r2, #57	@ 0x39
 801f6c0:	d107      	bne.n	801f6d2 <_dtoa_r+0x6da>
 801f6c2:	459a      	cmp	sl, r3
 801f6c4:	d1f8      	bne.n	801f6b8 <_dtoa_r+0x6c0>
 801f6c6:	9a04      	ldr	r2, [sp, #16]
 801f6c8:	3201      	adds	r2, #1
 801f6ca:	9204      	str	r2, [sp, #16]
 801f6cc:	2230      	movs	r2, #48	@ 0x30
 801f6ce:	f88a 2000 	strb.w	r2, [sl]
 801f6d2:	781a      	ldrb	r2, [r3, #0]
 801f6d4:	3201      	adds	r2, #1
 801f6d6:	701a      	strb	r2, [r3, #0]
 801f6d8:	e7bd      	b.n	801f656 <_dtoa_r+0x65e>
 801f6da:	4b7b      	ldr	r3, [pc, #492]	@ (801f8c8 <_dtoa_r+0x8d0>)
 801f6dc:	2200      	movs	r2, #0
 801f6de:	f7e0 ffa3 	bl	8000628 <__aeabi_dmul>
 801f6e2:	2200      	movs	r2, #0
 801f6e4:	2300      	movs	r3, #0
 801f6e6:	4604      	mov	r4, r0
 801f6e8:	460d      	mov	r5, r1
 801f6ea:	f7e1 fa05 	bl	8000af8 <__aeabi_dcmpeq>
 801f6ee:	2800      	cmp	r0, #0
 801f6f0:	f43f aebb 	beq.w	801f46a <_dtoa_r+0x472>
 801f6f4:	e6f0      	b.n	801f4d8 <_dtoa_r+0x4e0>
 801f6f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f6f8:	2a00      	cmp	r2, #0
 801f6fa:	f000 80db 	beq.w	801f8b4 <_dtoa_r+0x8bc>
 801f6fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f700:	2a01      	cmp	r2, #1
 801f702:	f300 80bf 	bgt.w	801f884 <_dtoa_r+0x88c>
 801f706:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f708:	2a00      	cmp	r2, #0
 801f70a:	f000 80b7 	beq.w	801f87c <_dtoa_r+0x884>
 801f70e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f712:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f714:	4646      	mov	r6, r8
 801f716:	9a08      	ldr	r2, [sp, #32]
 801f718:	2101      	movs	r1, #1
 801f71a:	441a      	add	r2, r3
 801f71c:	4658      	mov	r0, fp
 801f71e:	4498      	add	r8, r3
 801f720:	9208      	str	r2, [sp, #32]
 801f722:	f000 fbb5 	bl	801fe90 <__i2b>
 801f726:	4605      	mov	r5, r0
 801f728:	b15e      	cbz	r6, 801f742 <_dtoa_r+0x74a>
 801f72a:	9b08      	ldr	r3, [sp, #32]
 801f72c:	2b00      	cmp	r3, #0
 801f72e:	dd08      	ble.n	801f742 <_dtoa_r+0x74a>
 801f730:	42b3      	cmp	r3, r6
 801f732:	9a08      	ldr	r2, [sp, #32]
 801f734:	bfa8      	it	ge
 801f736:	4633      	movge	r3, r6
 801f738:	eba8 0803 	sub.w	r8, r8, r3
 801f73c:	1af6      	subs	r6, r6, r3
 801f73e:	1ad3      	subs	r3, r2, r3
 801f740:	9308      	str	r3, [sp, #32]
 801f742:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f744:	b1f3      	cbz	r3, 801f784 <_dtoa_r+0x78c>
 801f746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f748:	2b00      	cmp	r3, #0
 801f74a:	f000 80b7 	beq.w	801f8bc <_dtoa_r+0x8c4>
 801f74e:	b18c      	cbz	r4, 801f774 <_dtoa_r+0x77c>
 801f750:	4629      	mov	r1, r5
 801f752:	4622      	mov	r2, r4
 801f754:	4658      	mov	r0, fp
 801f756:	f000 fc5b 	bl	8020010 <__pow5mult>
 801f75a:	464a      	mov	r2, r9
 801f75c:	4601      	mov	r1, r0
 801f75e:	4605      	mov	r5, r0
 801f760:	4658      	mov	r0, fp
 801f762:	f000 fbab 	bl	801febc <__multiply>
 801f766:	4649      	mov	r1, r9
 801f768:	9004      	str	r0, [sp, #16]
 801f76a:	4658      	mov	r0, fp
 801f76c:	f000 fa92 	bl	801fc94 <_Bfree>
 801f770:	9b04      	ldr	r3, [sp, #16]
 801f772:	4699      	mov	r9, r3
 801f774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f776:	1b1a      	subs	r2, r3, r4
 801f778:	d004      	beq.n	801f784 <_dtoa_r+0x78c>
 801f77a:	4649      	mov	r1, r9
 801f77c:	4658      	mov	r0, fp
 801f77e:	f000 fc47 	bl	8020010 <__pow5mult>
 801f782:	4681      	mov	r9, r0
 801f784:	2101      	movs	r1, #1
 801f786:	4658      	mov	r0, fp
 801f788:	f000 fb82 	bl	801fe90 <__i2b>
 801f78c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f78e:	4604      	mov	r4, r0
 801f790:	2b00      	cmp	r3, #0
 801f792:	f000 81cf 	beq.w	801fb34 <_dtoa_r+0xb3c>
 801f796:	461a      	mov	r2, r3
 801f798:	4601      	mov	r1, r0
 801f79a:	4658      	mov	r0, fp
 801f79c:	f000 fc38 	bl	8020010 <__pow5mult>
 801f7a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f7a2:	2b01      	cmp	r3, #1
 801f7a4:	4604      	mov	r4, r0
 801f7a6:	f300 8095 	bgt.w	801f8d4 <_dtoa_r+0x8dc>
 801f7aa:	9b02      	ldr	r3, [sp, #8]
 801f7ac:	2b00      	cmp	r3, #0
 801f7ae:	f040 8087 	bne.w	801f8c0 <_dtoa_r+0x8c8>
 801f7b2:	9b03      	ldr	r3, [sp, #12]
 801f7b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	f040 8089 	bne.w	801f8d0 <_dtoa_r+0x8d8>
 801f7be:	9b03      	ldr	r3, [sp, #12]
 801f7c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f7c4:	0d1b      	lsrs	r3, r3, #20
 801f7c6:	051b      	lsls	r3, r3, #20
 801f7c8:	b12b      	cbz	r3, 801f7d6 <_dtoa_r+0x7de>
 801f7ca:	9b08      	ldr	r3, [sp, #32]
 801f7cc:	3301      	adds	r3, #1
 801f7ce:	9308      	str	r3, [sp, #32]
 801f7d0:	f108 0801 	add.w	r8, r8, #1
 801f7d4:	2301      	movs	r3, #1
 801f7d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801f7d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7da:	2b00      	cmp	r3, #0
 801f7dc:	f000 81b0 	beq.w	801fb40 <_dtoa_r+0xb48>
 801f7e0:	6923      	ldr	r3, [r4, #16]
 801f7e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f7e6:	6918      	ldr	r0, [r3, #16]
 801f7e8:	f000 fb06 	bl	801fdf8 <__hi0bits>
 801f7ec:	f1c0 0020 	rsb	r0, r0, #32
 801f7f0:	9b08      	ldr	r3, [sp, #32]
 801f7f2:	4418      	add	r0, r3
 801f7f4:	f010 001f 	ands.w	r0, r0, #31
 801f7f8:	d077      	beq.n	801f8ea <_dtoa_r+0x8f2>
 801f7fa:	f1c0 0320 	rsb	r3, r0, #32
 801f7fe:	2b04      	cmp	r3, #4
 801f800:	dd6b      	ble.n	801f8da <_dtoa_r+0x8e2>
 801f802:	9b08      	ldr	r3, [sp, #32]
 801f804:	f1c0 001c 	rsb	r0, r0, #28
 801f808:	4403      	add	r3, r0
 801f80a:	4480      	add	r8, r0
 801f80c:	4406      	add	r6, r0
 801f80e:	9308      	str	r3, [sp, #32]
 801f810:	f1b8 0f00 	cmp.w	r8, #0
 801f814:	dd05      	ble.n	801f822 <_dtoa_r+0x82a>
 801f816:	4649      	mov	r1, r9
 801f818:	4642      	mov	r2, r8
 801f81a:	4658      	mov	r0, fp
 801f81c:	f000 fc52 	bl	80200c4 <__lshift>
 801f820:	4681      	mov	r9, r0
 801f822:	9b08      	ldr	r3, [sp, #32]
 801f824:	2b00      	cmp	r3, #0
 801f826:	dd05      	ble.n	801f834 <_dtoa_r+0x83c>
 801f828:	4621      	mov	r1, r4
 801f82a:	461a      	mov	r2, r3
 801f82c:	4658      	mov	r0, fp
 801f82e:	f000 fc49 	bl	80200c4 <__lshift>
 801f832:	4604      	mov	r4, r0
 801f834:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f836:	2b00      	cmp	r3, #0
 801f838:	d059      	beq.n	801f8ee <_dtoa_r+0x8f6>
 801f83a:	4621      	mov	r1, r4
 801f83c:	4648      	mov	r0, r9
 801f83e:	f000 fcad 	bl	802019c <__mcmp>
 801f842:	2800      	cmp	r0, #0
 801f844:	da53      	bge.n	801f8ee <_dtoa_r+0x8f6>
 801f846:	1e7b      	subs	r3, r7, #1
 801f848:	9304      	str	r3, [sp, #16]
 801f84a:	4649      	mov	r1, r9
 801f84c:	2300      	movs	r3, #0
 801f84e:	220a      	movs	r2, #10
 801f850:	4658      	mov	r0, fp
 801f852:	f000 fa41 	bl	801fcd8 <__multadd>
 801f856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f858:	4681      	mov	r9, r0
 801f85a:	2b00      	cmp	r3, #0
 801f85c:	f000 8172 	beq.w	801fb44 <_dtoa_r+0xb4c>
 801f860:	2300      	movs	r3, #0
 801f862:	4629      	mov	r1, r5
 801f864:	220a      	movs	r2, #10
 801f866:	4658      	mov	r0, fp
 801f868:	f000 fa36 	bl	801fcd8 <__multadd>
 801f86c:	9b00      	ldr	r3, [sp, #0]
 801f86e:	2b00      	cmp	r3, #0
 801f870:	4605      	mov	r5, r0
 801f872:	dc67      	bgt.n	801f944 <_dtoa_r+0x94c>
 801f874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f876:	2b02      	cmp	r3, #2
 801f878:	dc41      	bgt.n	801f8fe <_dtoa_r+0x906>
 801f87a:	e063      	b.n	801f944 <_dtoa_r+0x94c>
 801f87c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f87e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f882:	e746      	b.n	801f712 <_dtoa_r+0x71a>
 801f884:	9b07      	ldr	r3, [sp, #28]
 801f886:	1e5c      	subs	r4, r3, #1
 801f888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f88a:	42a3      	cmp	r3, r4
 801f88c:	bfbf      	itttt	lt
 801f88e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f890:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f892:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f894:	1ae3      	sublt	r3, r4, r3
 801f896:	bfb4      	ite	lt
 801f898:	18d2      	addlt	r2, r2, r3
 801f89a:	1b1c      	subge	r4, r3, r4
 801f89c:	9b07      	ldr	r3, [sp, #28]
 801f89e:	bfbc      	itt	lt
 801f8a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f8a2:	2400      	movlt	r4, #0
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	bfb5      	itete	lt
 801f8a8:	eba8 0603 	sublt.w	r6, r8, r3
 801f8ac:	9b07      	ldrge	r3, [sp, #28]
 801f8ae:	2300      	movlt	r3, #0
 801f8b0:	4646      	movge	r6, r8
 801f8b2:	e730      	b.n	801f716 <_dtoa_r+0x71e>
 801f8b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f8b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f8b8:	4646      	mov	r6, r8
 801f8ba:	e735      	b.n	801f728 <_dtoa_r+0x730>
 801f8bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f8be:	e75c      	b.n	801f77a <_dtoa_r+0x782>
 801f8c0:	2300      	movs	r3, #0
 801f8c2:	e788      	b.n	801f7d6 <_dtoa_r+0x7de>
 801f8c4:	3fe00000 	.word	0x3fe00000
 801f8c8:	40240000 	.word	0x40240000
 801f8cc:	40140000 	.word	0x40140000
 801f8d0:	9b02      	ldr	r3, [sp, #8]
 801f8d2:	e780      	b.n	801f7d6 <_dtoa_r+0x7de>
 801f8d4:	2300      	movs	r3, #0
 801f8d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801f8d8:	e782      	b.n	801f7e0 <_dtoa_r+0x7e8>
 801f8da:	d099      	beq.n	801f810 <_dtoa_r+0x818>
 801f8dc:	9a08      	ldr	r2, [sp, #32]
 801f8de:	331c      	adds	r3, #28
 801f8e0:	441a      	add	r2, r3
 801f8e2:	4498      	add	r8, r3
 801f8e4:	441e      	add	r6, r3
 801f8e6:	9208      	str	r2, [sp, #32]
 801f8e8:	e792      	b.n	801f810 <_dtoa_r+0x818>
 801f8ea:	4603      	mov	r3, r0
 801f8ec:	e7f6      	b.n	801f8dc <_dtoa_r+0x8e4>
 801f8ee:	9b07      	ldr	r3, [sp, #28]
 801f8f0:	9704      	str	r7, [sp, #16]
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	dc20      	bgt.n	801f938 <_dtoa_r+0x940>
 801f8f6:	9300      	str	r3, [sp, #0]
 801f8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8fa:	2b02      	cmp	r3, #2
 801f8fc:	dd1e      	ble.n	801f93c <_dtoa_r+0x944>
 801f8fe:	9b00      	ldr	r3, [sp, #0]
 801f900:	2b00      	cmp	r3, #0
 801f902:	f47f aec0 	bne.w	801f686 <_dtoa_r+0x68e>
 801f906:	4621      	mov	r1, r4
 801f908:	2205      	movs	r2, #5
 801f90a:	4658      	mov	r0, fp
 801f90c:	f000 f9e4 	bl	801fcd8 <__multadd>
 801f910:	4601      	mov	r1, r0
 801f912:	4604      	mov	r4, r0
 801f914:	4648      	mov	r0, r9
 801f916:	f000 fc41 	bl	802019c <__mcmp>
 801f91a:	2800      	cmp	r0, #0
 801f91c:	f77f aeb3 	ble.w	801f686 <_dtoa_r+0x68e>
 801f920:	4656      	mov	r6, sl
 801f922:	2331      	movs	r3, #49	@ 0x31
 801f924:	f806 3b01 	strb.w	r3, [r6], #1
 801f928:	9b04      	ldr	r3, [sp, #16]
 801f92a:	3301      	adds	r3, #1
 801f92c:	9304      	str	r3, [sp, #16]
 801f92e:	e6ae      	b.n	801f68e <_dtoa_r+0x696>
 801f930:	9c07      	ldr	r4, [sp, #28]
 801f932:	9704      	str	r7, [sp, #16]
 801f934:	4625      	mov	r5, r4
 801f936:	e7f3      	b.n	801f920 <_dtoa_r+0x928>
 801f938:	9b07      	ldr	r3, [sp, #28]
 801f93a:	9300      	str	r3, [sp, #0]
 801f93c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f93e:	2b00      	cmp	r3, #0
 801f940:	f000 8104 	beq.w	801fb4c <_dtoa_r+0xb54>
 801f944:	2e00      	cmp	r6, #0
 801f946:	dd05      	ble.n	801f954 <_dtoa_r+0x95c>
 801f948:	4629      	mov	r1, r5
 801f94a:	4632      	mov	r2, r6
 801f94c:	4658      	mov	r0, fp
 801f94e:	f000 fbb9 	bl	80200c4 <__lshift>
 801f952:	4605      	mov	r5, r0
 801f954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f956:	2b00      	cmp	r3, #0
 801f958:	d05a      	beq.n	801fa10 <_dtoa_r+0xa18>
 801f95a:	6869      	ldr	r1, [r5, #4]
 801f95c:	4658      	mov	r0, fp
 801f95e:	f000 f959 	bl	801fc14 <_Balloc>
 801f962:	4606      	mov	r6, r0
 801f964:	b928      	cbnz	r0, 801f972 <_dtoa_r+0x97a>
 801f966:	4b84      	ldr	r3, [pc, #528]	@ (801fb78 <_dtoa_r+0xb80>)
 801f968:	4602      	mov	r2, r0
 801f96a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801f96e:	f7ff bb5a 	b.w	801f026 <_dtoa_r+0x2e>
 801f972:	692a      	ldr	r2, [r5, #16]
 801f974:	3202      	adds	r2, #2
 801f976:	0092      	lsls	r2, r2, #2
 801f978:	f105 010c 	add.w	r1, r5, #12
 801f97c:	300c      	adds	r0, #12
 801f97e:	f7ff fa80 	bl	801ee82 <memcpy>
 801f982:	2201      	movs	r2, #1
 801f984:	4631      	mov	r1, r6
 801f986:	4658      	mov	r0, fp
 801f988:	f000 fb9c 	bl	80200c4 <__lshift>
 801f98c:	f10a 0301 	add.w	r3, sl, #1
 801f990:	9307      	str	r3, [sp, #28]
 801f992:	9b00      	ldr	r3, [sp, #0]
 801f994:	4453      	add	r3, sl
 801f996:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f998:	9b02      	ldr	r3, [sp, #8]
 801f99a:	f003 0301 	and.w	r3, r3, #1
 801f99e:	462f      	mov	r7, r5
 801f9a0:	930a      	str	r3, [sp, #40]	@ 0x28
 801f9a2:	4605      	mov	r5, r0
 801f9a4:	9b07      	ldr	r3, [sp, #28]
 801f9a6:	4621      	mov	r1, r4
 801f9a8:	3b01      	subs	r3, #1
 801f9aa:	4648      	mov	r0, r9
 801f9ac:	9300      	str	r3, [sp, #0]
 801f9ae:	f7ff fa9b 	bl	801eee8 <quorem>
 801f9b2:	4639      	mov	r1, r7
 801f9b4:	9002      	str	r0, [sp, #8]
 801f9b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f9ba:	4648      	mov	r0, r9
 801f9bc:	f000 fbee 	bl	802019c <__mcmp>
 801f9c0:	462a      	mov	r2, r5
 801f9c2:	9008      	str	r0, [sp, #32]
 801f9c4:	4621      	mov	r1, r4
 801f9c6:	4658      	mov	r0, fp
 801f9c8:	f000 fc04 	bl	80201d4 <__mdiff>
 801f9cc:	68c2      	ldr	r2, [r0, #12]
 801f9ce:	4606      	mov	r6, r0
 801f9d0:	bb02      	cbnz	r2, 801fa14 <_dtoa_r+0xa1c>
 801f9d2:	4601      	mov	r1, r0
 801f9d4:	4648      	mov	r0, r9
 801f9d6:	f000 fbe1 	bl	802019c <__mcmp>
 801f9da:	4602      	mov	r2, r0
 801f9dc:	4631      	mov	r1, r6
 801f9de:	4658      	mov	r0, fp
 801f9e0:	920e      	str	r2, [sp, #56]	@ 0x38
 801f9e2:	f000 f957 	bl	801fc94 <_Bfree>
 801f9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f9ea:	9e07      	ldr	r6, [sp, #28]
 801f9ec:	ea43 0102 	orr.w	r1, r3, r2
 801f9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9f2:	4319      	orrs	r1, r3
 801f9f4:	d110      	bne.n	801fa18 <_dtoa_r+0xa20>
 801f9f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f9fa:	d029      	beq.n	801fa50 <_dtoa_r+0xa58>
 801f9fc:	9b08      	ldr	r3, [sp, #32]
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	dd02      	ble.n	801fa08 <_dtoa_r+0xa10>
 801fa02:	9b02      	ldr	r3, [sp, #8]
 801fa04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801fa08:	9b00      	ldr	r3, [sp, #0]
 801fa0a:	f883 8000 	strb.w	r8, [r3]
 801fa0e:	e63f      	b.n	801f690 <_dtoa_r+0x698>
 801fa10:	4628      	mov	r0, r5
 801fa12:	e7bb      	b.n	801f98c <_dtoa_r+0x994>
 801fa14:	2201      	movs	r2, #1
 801fa16:	e7e1      	b.n	801f9dc <_dtoa_r+0x9e4>
 801fa18:	9b08      	ldr	r3, [sp, #32]
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	db04      	blt.n	801fa28 <_dtoa_r+0xa30>
 801fa1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fa20:	430b      	orrs	r3, r1
 801fa22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa24:	430b      	orrs	r3, r1
 801fa26:	d120      	bne.n	801fa6a <_dtoa_r+0xa72>
 801fa28:	2a00      	cmp	r2, #0
 801fa2a:	dded      	ble.n	801fa08 <_dtoa_r+0xa10>
 801fa2c:	4649      	mov	r1, r9
 801fa2e:	2201      	movs	r2, #1
 801fa30:	4658      	mov	r0, fp
 801fa32:	f000 fb47 	bl	80200c4 <__lshift>
 801fa36:	4621      	mov	r1, r4
 801fa38:	4681      	mov	r9, r0
 801fa3a:	f000 fbaf 	bl	802019c <__mcmp>
 801fa3e:	2800      	cmp	r0, #0
 801fa40:	dc03      	bgt.n	801fa4a <_dtoa_r+0xa52>
 801fa42:	d1e1      	bne.n	801fa08 <_dtoa_r+0xa10>
 801fa44:	f018 0f01 	tst.w	r8, #1
 801fa48:	d0de      	beq.n	801fa08 <_dtoa_r+0xa10>
 801fa4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fa4e:	d1d8      	bne.n	801fa02 <_dtoa_r+0xa0a>
 801fa50:	9a00      	ldr	r2, [sp, #0]
 801fa52:	2339      	movs	r3, #57	@ 0x39
 801fa54:	7013      	strb	r3, [r2, #0]
 801fa56:	4633      	mov	r3, r6
 801fa58:	461e      	mov	r6, r3
 801fa5a:	3b01      	subs	r3, #1
 801fa5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fa60:	2a39      	cmp	r2, #57	@ 0x39
 801fa62:	d052      	beq.n	801fb0a <_dtoa_r+0xb12>
 801fa64:	3201      	adds	r2, #1
 801fa66:	701a      	strb	r2, [r3, #0]
 801fa68:	e612      	b.n	801f690 <_dtoa_r+0x698>
 801fa6a:	2a00      	cmp	r2, #0
 801fa6c:	dd07      	ble.n	801fa7e <_dtoa_r+0xa86>
 801fa6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fa72:	d0ed      	beq.n	801fa50 <_dtoa_r+0xa58>
 801fa74:	9a00      	ldr	r2, [sp, #0]
 801fa76:	f108 0301 	add.w	r3, r8, #1
 801fa7a:	7013      	strb	r3, [r2, #0]
 801fa7c:	e608      	b.n	801f690 <_dtoa_r+0x698>
 801fa7e:	9b07      	ldr	r3, [sp, #28]
 801fa80:	9a07      	ldr	r2, [sp, #28]
 801fa82:	f803 8c01 	strb.w	r8, [r3, #-1]
 801fa86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fa88:	4293      	cmp	r3, r2
 801fa8a:	d028      	beq.n	801fade <_dtoa_r+0xae6>
 801fa8c:	4649      	mov	r1, r9
 801fa8e:	2300      	movs	r3, #0
 801fa90:	220a      	movs	r2, #10
 801fa92:	4658      	mov	r0, fp
 801fa94:	f000 f920 	bl	801fcd8 <__multadd>
 801fa98:	42af      	cmp	r7, r5
 801fa9a:	4681      	mov	r9, r0
 801fa9c:	f04f 0300 	mov.w	r3, #0
 801faa0:	f04f 020a 	mov.w	r2, #10
 801faa4:	4639      	mov	r1, r7
 801faa6:	4658      	mov	r0, fp
 801faa8:	d107      	bne.n	801faba <_dtoa_r+0xac2>
 801faaa:	f000 f915 	bl	801fcd8 <__multadd>
 801faae:	4607      	mov	r7, r0
 801fab0:	4605      	mov	r5, r0
 801fab2:	9b07      	ldr	r3, [sp, #28]
 801fab4:	3301      	adds	r3, #1
 801fab6:	9307      	str	r3, [sp, #28]
 801fab8:	e774      	b.n	801f9a4 <_dtoa_r+0x9ac>
 801faba:	f000 f90d 	bl	801fcd8 <__multadd>
 801fabe:	4629      	mov	r1, r5
 801fac0:	4607      	mov	r7, r0
 801fac2:	2300      	movs	r3, #0
 801fac4:	220a      	movs	r2, #10
 801fac6:	4658      	mov	r0, fp
 801fac8:	f000 f906 	bl	801fcd8 <__multadd>
 801facc:	4605      	mov	r5, r0
 801face:	e7f0      	b.n	801fab2 <_dtoa_r+0xaba>
 801fad0:	9b00      	ldr	r3, [sp, #0]
 801fad2:	2b00      	cmp	r3, #0
 801fad4:	bfcc      	ite	gt
 801fad6:	461e      	movgt	r6, r3
 801fad8:	2601      	movle	r6, #1
 801fada:	4456      	add	r6, sl
 801fadc:	2700      	movs	r7, #0
 801fade:	4649      	mov	r1, r9
 801fae0:	2201      	movs	r2, #1
 801fae2:	4658      	mov	r0, fp
 801fae4:	f000 faee 	bl	80200c4 <__lshift>
 801fae8:	4621      	mov	r1, r4
 801faea:	4681      	mov	r9, r0
 801faec:	f000 fb56 	bl	802019c <__mcmp>
 801faf0:	2800      	cmp	r0, #0
 801faf2:	dcb0      	bgt.n	801fa56 <_dtoa_r+0xa5e>
 801faf4:	d102      	bne.n	801fafc <_dtoa_r+0xb04>
 801faf6:	f018 0f01 	tst.w	r8, #1
 801fafa:	d1ac      	bne.n	801fa56 <_dtoa_r+0xa5e>
 801fafc:	4633      	mov	r3, r6
 801fafe:	461e      	mov	r6, r3
 801fb00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fb04:	2a30      	cmp	r2, #48	@ 0x30
 801fb06:	d0fa      	beq.n	801fafe <_dtoa_r+0xb06>
 801fb08:	e5c2      	b.n	801f690 <_dtoa_r+0x698>
 801fb0a:	459a      	cmp	sl, r3
 801fb0c:	d1a4      	bne.n	801fa58 <_dtoa_r+0xa60>
 801fb0e:	9b04      	ldr	r3, [sp, #16]
 801fb10:	3301      	adds	r3, #1
 801fb12:	9304      	str	r3, [sp, #16]
 801fb14:	2331      	movs	r3, #49	@ 0x31
 801fb16:	f88a 3000 	strb.w	r3, [sl]
 801fb1a:	e5b9      	b.n	801f690 <_dtoa_r+0x698>
 801fb1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fb1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801fb7c <_dtoa_r+0xb84>
 801fb22:	b11b      	cbz	r3, 801fb2c <_dtoa_r+0xb34>
 801fb24:	f10a 0308 	add.w	r3, sl, #8
 801fb28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fb2a:	6013      	str	r3, [r2, #0]
 801fb2c:	4650      	mov	r0, sl
 801fb2e:	b019      	add	sp, #100	@ 0x64
 801fb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb36:	2b01      	cmp	r3, #1
 801fb38:	f77f ae37 	ble.w	801f7aa <_dtoa_r+0x7b2>
 801fb3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fb3e:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb40:	2001      	movs	r0, #1
 801fb42:	e655      	b.n	801f7f0 <_dtoa_r+0x7f8>
 801fb44:	9b00      	ldr	r3, [sp, #0]
 801fb46:	2b00      	cmp	r3, #0
 801fb48:	f77f aed6 	ble.w	801f8f8 <_dtoa_r+0x900>
 801fb4c:	4656      	mov	r6, sl
 801fb4e:	4621      	mov	r1, r4
 801fb50:	4648      	mov	r0, r9
 801fb52:	f7ff f9c9 	bl	801eee8 <quorem>
 801fb56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fb5a:	f806 8b01 	strb.w	r8, [r6], #1
 801fb5e:	9b00      	ldr	r3, [sp, #0]
 801fb60:	eba6 020a 	sub.w	r2, r6, sl
 801fb64:	4293      	cmp	r3, r2
 801fb66:	ddb3      	ble.n	801fad0 <_dtoa_r+0xad8>
 801fb68:	4649      	mov	r1, r9
 801fb6a:	2300      	movs	r3, #0
 801fb6c:	220a      	movs	r2, #10
 801fb6e:	4658      	mov	r0, fp
 801fb70:	f000 f8b2 	bl	801fcd8 <__multadd>
 801fb74:	4681      	mov	r9, r0
 801fb76:	e7ea      	b.n	801fb4e <_dtoa_r+0xb56>
 801fb78:	08025588 	.word	0x08025588
 801fb7c:	08025523 	.word	0x08025523

0801fb80 <_free_r>:
 801fb80:	b538      	push	{r3, r4, r5, lr}
 801fb82:	4605      	mov	r5, r0
 801fb84:	2900      	cmp	r1, #0
 801fb86:	d041      	beq.n	801fc0c <_free_r+0x8c>
 801fb88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fb8c:	1f0c      	subs	r4, r1, #4
 801fb8e:	2b00      	cmp	r3, #0
 801fb90:	bfb8      	it	lt
 801fb92:	18e4      	addlt	r4, r4, r3
 801fb94:	f7fd fe8a 	bl	801d8ac <__malloc_lock>
 801fb98:	4a1d      	ldr	r2, [pc, #116]	@ (801fc10 <_free_r+0x90>)
 801fb9a:	6813      	ldr	r3, [r2, #0]
 801fb9c:	b933      	cbnz	r3, 801fbac <_free_r+0x2c>
 801fb9e:	6063      	str	r3, [r4, #4]
 801fba0:	6014      	str	r4, [r2, #0]
 801fba2:	4628      	mov	r0, r5
 801fba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fba8:	f7fd be86 	b.w	801d8b8 <__malloc_unlock>
 801fbac:	42a3      	cmp	r3, r4
 801fbae:	d908      	bls.n	801fbc2 <_free_r+0x42>
 801fbb0:	6820      	ldr	r0, [r4, #0]
 801fbb2:	1821      	adds	r1, r4, r0
 801fbb4:	428b      	cmp	r3, r1
 801fbb6:	bf01      	itttt	eq
 801fbb8:	6819      	ldreq	r1, [r3, #0]
 801fbba:	685b      	ldreq	r3, [r3, #4]
 801fbbc:	1809      	addeq	r1, r1, r0
 801fbbe:	6021      	streq	r1, [r4, #0]
 801fbc0:	e7ed      	b.n	801fb9e <_free_r+0x1e>
 801fbc2:	461a      	mov	r2, r3
 801fbc4:	685b      	ldr	r3, [r3, #4]
 801fbc6:	b10b      	cbz	r3, 801fbcc <_free_r+0x4c>
 801fbc8:	42a3      	cmp	r3, r4
 801fbca:	d9fa      	bls.n	801fbc2 <_free_r+0x42>
 801fbcc:	6811      	ldr	r1, [r2, #0]
 801fbce:	1850      	adds	r0, r2, r1
 801fbd0:	42a0      	cmp	r0, r4
 801fbd2:	d10b      	bne.n	801fbec <_free_r+0x6c>
 801fbd4:	6820      	ldr	r0, [r4, #0]
 801fbd6:	4401      	add	r1, r0
 801fbd8:	1850      	adds	r0, r2, r1
 801fbda:	4283      	cmp	r3, r0
 801fbdc:	6011      	str	r1, [r2, #0]
 801fbde:	d1e0      	bne.n	801fba2 <_free_r+0x22>
 801fbe0:	6818      	ldr	r0, [r3, #0]
 801fbe2:	685b      	ldr	r3, [r3, #4]
 801fbe4:	6053      	str	r3, [r2, #4]
 801fbe6:	4408      	add	r0, r1
 801fbe8:	6010      	str	r0, [r2, #0]
 801fbea:	e7da      	b.n	801fba2 <_free_r+0x22>
 801fbec:	d902      	bls.n	801fbf4 <_free_r+0x74>
 801fbee:	230c      	movs	r3, #12
 801fbf0:	602b      	str	r3, [r5, #0]
 801fbf2:	e7d6      	b.n	801fba2 <_free_r+0x22>
 801fbf4:	6820      	ldr	r0, [r4, #0]
 801fbf6:	1821      	adds	r1, r4, r0
 801fbf8:	428b      	cmp	r3, r1
 801fbfa:	bf04      	itt	eq
 801fbfc:	6819      	ldreq	r1, [r3, #0]
 801fbfe:	685b      	ldreq	r3, [r3, #4]
 801fc00:	6063      	str	r3, [r4, #4]
 801fc02:	bf04      	itt	eq
 801fc04:	1809      	addeq	r1, r1, r0
 801fc06:	6021      	streq	r1, [r4, #0]
 801fc08:	6054      	str	r4, [r2, #4]
 801fc0a:	e7ca      	b.n	801fba2 <_free_r+0x22>
 801fc0c:	bd38      	pop	{r3, r4, r5, pc}
 801fc0e:	bf00      	nop
 801fc10:	20003668 	.word	0x20003668

0801fc14 <_Balloc>:
 801fc14:	b570      	push	{r4, r5, r6, lr}
 801fc16:	69c6      	ldr	r6, [r0, #28]
 801fc18:	4604      	mov	r4, r0
 801fc1a:	460d      	mov	r5, r1
 801fc1c:	b976      	cbnz	r6, 801fc3c <_Balloc+0x28>
 801fc1e:	2010      	movs	r0, #16
 801fc20:	f7fd fd9a 	bl	801d758 <malloc>
 801fc24:	4602      	mov	r2, r0
 801fc26:	61e0      	str	r0, [r4, #28]
 801fc28:	b920      	cbnz	r0, 801fc34 <_Balloc+0x20>
 801fc2a:	4b18      	ldr	r3, [pc, #96]	@ (801fc8c <_Balloc+0x78>)
 801fc2c:	4818      	ldr	r0, [pc, #96]	@ (801fc90 <_Balloc+0x7c>)
 801fc2e:	216b      	movs	r1, #107	@ 0x6b
 801fc30:	f7ff f93c 	bl	801eeac <__assert_func>
 801fc34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fc38:	6006      	str	r6, [r0, #0]
 801fc3a:	60c6      	str	r6, [r0, #12]
 801fc3c:	69e6      	ldr	r6, [r4, #28]
 801fc3e:	68f3      	ldr	r3, [r6, #12]
 801fc40:	b183      	cbz	r3, 801fc64 <_Balloc+0x50>
 801fc42:	69e3      	ldr	r3, [r4, #28]
 801fc44:	68db      	ldr	r3, [r3, #12]
 801fc46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fc4a:	b9b8      	cbnz	r0, 801fc7c <_Balloc+0x68>
 801fc4c:	2101      	movs	r1, #1
 801fc4e:	fa01 f605 	lsl.w	r6, r1, r5
 801fc52:	1d72      	adds	r2, r6, #5
 801fc54:	0092      	lsls	r2, r2, #2
 801fc56:	4620      	mov	r0, r4
 801fc58:	f001 fe95 	bl	8021986 <_calloc_r>
 801fc5c:	b160      	cbz	r0, 801fc78 <_Balloc+0x64>
 801fc5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fc62:	e00e      	b.n	801fc82 <_Balloc+0x6e>
 801fc64:	2221      	movs	r2, #33	@ 0x21
 801fc66:	2104      	movs	r1, #4
 801fc68:	4620      	mov	r0, r4
 801fc6a:	f001 fe8c 	bl	8021986 <_calloc_r>
 801fc6e:	69e3      	ldr	r3, [r4, #28]
 801fc70:	60f0      	str	r0, [r6, #12]
 801fc72:	68db      	ldr	r3, [r3, #12]
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	d1e4      	bne.n	801fc42 <_Balloc+0x2e>
 801fc78:	2000      	movs	r0, #0
 801fc7a:	bd70      	pop	{r4, r5, r6, pc}
 801fc7c:	6802      	ldr	r2, [r0, #0]
 801fc7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fc82:	2300      	movs	r3, #0
 801fc84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fc88:	e7f7      	b.n	801fc7a <_Balloc+0x66>
 801fc8a:	bf00      	nop
 801fc8c:	08025476 	.word	0x08025476
 801fc90:	08025599 	.word	0x08025599

0801fc94 <_Bfree>:
 801fc94:	b570      	push	{r4, r5, r6, lr}
 801fc96:	69c6      	ldr	r6, [r0, #28]
 801fc98:	4605      	mov	r5, r0
 801fc9a:	460c      	mov	r4, r1
 801fc9c:	b976      	cbnz	r6, 801fcbc <_Bfree+0x28>
 801fc9e:	2010      	movs	r0, #16
 801fca0:	f7fd fd5a 	bl	801d758 <malloc>
 801fca4:	4602      	mov	r2, r0
 801fca6:	61e8      	str	r0, [r5, #28]
 801fca8:	b920      	cbnz	r0, 801fcb4 <_Bfree+0x20>
 801fcaa:	4b09      	ldr	r3, [pc, #36]	@ (801fcd0 <_Bfree+0x3c>)
 801fcac:	4809      	ldr	r0, [pc, #36]	@ (801fcd4 <_Bfree+0x40>)
 801fcae:	218f      	movs	r1, #143	@ 0x8f
 801fcb0:	f7ff f8fc 	bl	801eeac <__assert_func>
 801fcb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fcb8:	6006      	str	r6, [r0, #0]
 801fcba:	60c6      	str	r6, [r0, #12]
 801fcbc:	b13c      	cbz	r4, 801fcce <_Bfree+0x3a>
 801fcbe:	69eb      	ldr	r3, [r5, #28]
 801fcc0:	6862      	ldr	r2, [r4, #4]
 801fcc2:	68db      	ldr	r3, [r3, #12]
 801fcc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fcc8:	6021      	str	r1, [r4, #0]
 801fcca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fcce:	bd70      	pop	{r4, r5, r6, pc}
 801fcd0:	08025476 	.word	0x08025476
 801fcd4:	08025599 	.word	0x08025599

0801fcd8 <__multadd>:
 801fcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fcdc:	690d      	ldr	r5, [r1, #16]
 801fcde:	4607      	mov	r7, r0
 801fce0:	460c      	mov	r4, r1
 801fce2:	461e      	mov	r6, r3
 801fce4:	f101 0c14 	add.w	ip, r1, #20
 801fce8:	2000      	movs	r0, #0
 801fcea:	f8dc 3000 	ldr.w	r3, [ip]
 801fcee:	b299      	uxth	r1, r3
 801fcf0:	fb02 6101 	mla	r1, r2, r1, r6
 801fcf4:	0c1e      	lsrs	r6, r3, #16
 801fcf6:	0c0b      	lsrs	r3, r1, #16
 801fcf8:	fb02 3306 	mla	r3, r2, r6, r3
 801fcfc:	b289      	uxth	r1, r1
 801fcfe:	3001      	adds	r0, #1
 801fd00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fd04:	4285      	cmp	r5, r0
 801fd06:	f84c 1b04 	str.w	r1, [ip], #4
 801fd0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fd0e:	dcec      	bgt.n	801fcea <__multadd+0x12>
 801fd10:	b30e      	cbz	r6, 801fd56 <__multadd+0x7e>
 801fd12:	68a3      	ldr	r3, [r4, #8]
 801fd14:	42ab      	cmp	r3, r5
 801fd16:	dc19      	bgt.n	801fd4c <__multadd+0x74>
 801fd18:	6861      	ldr	r1, [r4, #4]
 801fd1a:	4638      	mov	r0, r7
 801fd1c:	3101      	adds	r1, #1
 801fd1e:	f7ff ff79 	bl	801fc14 <_Balloc>
 801fd22:	4680      	mov	r8, r0
 801fd24:	b928      	cbnz	r0, 801fd32 <__multadd+0x5a>
 801fd26:	4602      	mov	r2, r0
 801fd28:	4b0c      	ldr	r3, [pc, #48]	@ (801fd5c <__multadd+0x84>)
 801fd2a:	480d      	ldr	r0, [pc, #52]	@ (801fd60 <__multadd+0x88>)
 801fd2c:	21ba      	movs	r1, #186	@ 0xba
 801fd2e:	f7ff f8bd 	bl	801eeac <__assert_func>
 801fd32:	6922      	ldr	r2, [r4, #16]
 801fd34:	3202      	adds	r2, #2
 801fd36:	f104 010c 	add.w	r1, r4, #12
 801fd3a:	0092      	lsls	r2, r2, #2
 801fd3c:	300c      	adds	r0, #12
 801fd3e:	f7ff f8a0 	bl	801ee82 <memcpy>
 801fd42:	4621      	mov	r1, r4
 801fd44:	4638      	mov	r0, r7
 801fd46:	f7ff ffa5 	bl	801fc94 <_Bfree>
 801fd4a:	4644      	mov	r4, r8
 801fd4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fd50:	3501      	adds	r5, #1
 801fd52:	615e      	str	r6, [r3, #20]
 801fd54:	6125      	str	r5, [r4, #16]
 801fd56:	4620      	mov	r0, r4
 801fd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd5c:	08025588 	.word	0x08025588
 801fd60:	08025599 	.word	0x08025599

0801fd64 <__s2b>:
 801fd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fd68:	460c      	mov	r4, r1
 801fd6a:	4615      	mov	r5, r2
 801fd6c:	461f      	mov	r7, r3
 801fd6e:	2209      	movs	r2, #9
 801fd70:	3308      	adds	r3, #8
 801fd72:	4606      	mov	r6, r0
 801fd74:	fb93 f3f2 	sdiv	r3, r3, r2
 801fd78:	2100      	movs	r1, #0
 801fd7a:	2201      	movs	r2, #1
 801fd7c:	429a      	cmp	r2, r3
 801fd7e:	db09      	blt.n	801fd94 <__s2b+0x30>
 801fd80:	4630      	mov	r0, r6
 801fd82:	f7ff ff47 	bl	801fc14 <_Balloc>
 801fd86:	b940      	cbnz	r0, 801fd9a <__s2b+0x36>
 801fd88:	4602      	mov	r2, r0
 801fd8a:	4b19      	ldr	r3, [pc, #100]	@ (801fdf0 <__s2b+0x8c>)
 801fd8c:	4819      	ldr	r0, [pc, #100]	@ (801fdf4 <__s2b+0x90>)
 801fd8e:	21d3      	movs	r1, #211	@ 0xd3
 801fd90:	f7ff f88c 	bl	801eeac <__assert_func>
 801fd94:	0052      	lsls	r2, r2, #1
 801fd96:	3101      	adds	r1, #1
 801fd98:	e7f0      	b.n	801fd7c <__s2b+0x18>
 801fd9a:	9b08      	ldr	r3, [sp, #32]
 801fd9c:	6143      	str	r3, [r0, #20]
 801fd9e:	2d09      	cmp	r5, #9
 801fda0:	f04f 0301 	mov.w	r3, #1
 801fda4:	6103      	str	r3, [r0, #16]
 801fda6:	dd16      	ble.n	801fdd6 <__s2b+0x72>
 801fda8:	f104 0909 	add.w	r9, r4, #9
 801fdac:	46c8      	mov	r8, r9
 801fdae:	442c      	add	r4, r5
 801fdb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801fdb4:	4601      	mov	r1, r0
 801fdb6:	3b30      	subs	r3, #48	@ 0x30
 801fdb8:	220a      	movs	r2, #10
 801fdba:	4630      	mov	r0, r6
 801fdbc:	f7ff ff8c 	bl	801fcd8 <__multadd>
 801fdc0:	45a0      	cmp	r8, r4
 801fdc2:	d1f5      	bne.n	801fdb0 <__s2b+0x4c>
 801fdc4:	f1a5 0408 	sub.w	r4, r5, #8
 801fdc8:	444c      	add	r4, r9
 801fdca:	1b2d      	subs	r5, r5, r4
 801fdcc:	1963      	adds	r3, r4, r5
 801fdce:	42bb      	cmp	r3, r7
 801fdd0:	db04      	blt.n	801fddc <__s2b+0x78>
 801fdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fdd6:	340a      	adds	r4, #10
 801fdd8:	2509      	movs	r5, #9
 801fdda:	e7f6      	b.n	801fdca <__s2b+0x66>
 801fddc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fde0:	4601      	mov	r1, r0
 801fde2:	3b30      	subs	r3, #48	@ 0x30
 801fde4:	220a      	movs	r2, #10
 801fde6:	4630      	mov	r0, r6
 801fde8:	f7ff ff76 	bl	801fcd8 <__multadd>
 801fdec:	e7ee      	b.n	801fdcc <__s2b+0x68>
 801fdee:	bf00      	nop
 801fdf0:	08025588 	.word	0x08025588
 801fdf4:	08025599 	.word	0x08025599

0801fdf8 <__hi0bits>:
 801fdf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801fdfc:	4603      	mov	r3, r0
 801fdfe:	bf36      	itet	cc
 801fe00:	0403      	lslcc	r3, r0, #16
 801fe02:	2000      	movcs	r0, #0
 801fe04:	2010      	movcc	r0, #16
 801fe06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801fe0a:	bf3c      	itt	cc
 801fe0c:	021b      	lslcc	r3, r3, #8
 801fe0e:	3008      	addcc	r0, #8
 801fe10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801fe14:	bf3c      	itt	cc
 801fe16:	011b      	lslcc	r3, r3, #4
 801fe18:	3004      	addcc	r0, #4
 801fe1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fe1e:	bf3c      	itt	cc
 801fe20:	009b      	lslcc	r3, r3, #2
 801fe22:	3002      	addcc	r0, #2
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	db05      	blt.n	801fe34 <__hi0bits+0x3c>
 801fe28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801fe2c:	f100 0001 	add.w	r0, r0, #1
 801fe30:	bf08      	it	eq
 801fe32:	2020      	moveq	r0, #32
 801fe34:	4770      	bx	lr

0801fe36 <__lo0bits>:
 801fe36:	6803      	ldr	r3, [r0, #0]
 801fe38:	4602      	mov	r2, r0
 801fe3a:	f013 0007 	ands.w	r0, r3, #7
 801fe3e:	d00b      	beq.n	801fe58 <__lo0bits+0x22>
 801fe40:	07d9      	lsls	r1, r3, #31
 801fe42:	d421      	bmi.n	801fe88 <__lo0bits+0x52>
 801fe44:	0798      	lsls	r0, r3, #30
 801fe46:	bf49      	itett	mi
 801fe48:	085b      	lsrmi	r3, r3, #1
 801fe4a:	089b      	lsrpl	r3, r3, #2
 801fe4c:	2001      	movmi	r0, #1
 801fe4e:	6013      	strmi	r3, [r2, #0]
 801fe50:	bf5c      	itt	pl
 801fe52:	6013      	strpl	r3, [r2, #0]
 801fe54:	2002      	movpl	r0, #2
 801fe56:	4770      	bx	lr
 801fe58:	b299      	uxth	r1, r3
 801fe5a:	b909      	cbnz	r1, 801fe60 <__lo0bits+0x2a>
 801fe5c:	0c1b      	lsrs	r3, r3, #16
 801fe5e:	2010      	movs	r0, #16
 801fe60:	b2d9      	uxtb	r1, r3
 801fe62:	b909      	cbnz	r1, 801fe68 <__lo0bits+0x32>
 801fe64:	3008      	adds	r0, #8
 801fe66:	0a1b      	lsrs	r3, r3, #8
 801fe68:	0719      	lsls	r1, r3, #28
 801fe6a:	bf04      	itt	eq
 801fe6c:	091b      	lsreq	r3, r3, #4
 801fe6e:	3004      	addeq	r0, #4
 801fe70:	0799      	lsls	r1, r3, #30
 801fe72:	bf04      	itt	eq
 801fe74:	089b      	lsreq	r3, r3, #2
 801fe76:	3002      	addeq	r0, #2
 801fe78:	07d9      	lsls	r1, r3, #31
 801fe7a:	d403      	bmi.n	801fe84 <__lo0bits+0x4e>
 801fe7c:	085b      	lsrs	r3, r3, #1
 801fe7e:	f100 0001 	add.w	r0, r0, #1
 801fe82:	d003      	beq.n	801fe8c <__lo0bits+0x56>
 801fe84:	6013      	str	r3, [r2, #0]
 801fe86:	4770      	bx	lr
 801fe88:	2000      	movs	r0, #0
 801fe8a:	4770      	bx	lr
 801fe8c:	2020      	movs	r0, #32
 801fe8e:	4770      	bx	lr

0801fe90 <__i2b>:
 801fe90:	b510      	push	{r4, lr}
 801fe92:	460c      	mov	r4, r1
 801fe94:	2101      	movs	r1, #1
 801fe96:	f7ff febd 	bl	801fc14 <_Balloc>
 801fe9a:	4602      	mov	r2, r0
 801fe9c:	b928      	cbnz	r0, 801feaa <__i2b+0x1a>
 801fe9e:	4b05      	ldr	r3, [pc, #20]	@ (801feb4 <__i2b+0x24>)
 801fea0:	4805      	ldr	r0, [pc, #20]	@ (801feb8 <__i2b+0x28>)
 801fea2:	f240 1145 	movw	r1, #325	@ 0x145
 801fea6:	f7ff f801 	bl	801eeac <__assert_func>
 801feaa:	2301      	movs	r3, #1
 801feac:	6144      	str	r4, [r0, #20]
 801feae:	6103      	str	r3, [r0, #16]
 801feb0:	bd10      	pop	{r4, pc}
 801feb2:	bf00      	nop
 801feb4:	08025588 	.word	0x08025588
 801feb8:	08025599 	.word	0x08025599

0801febc <__multiply>:
 801febc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fec0:	4614      	mov	r4, r2
 801fec2:	690a      	ldr	r2, [r1, #16]
 801fec4:	6923      	ldr	r3, [r4, #16]
 801fec6:	429a      	cmp	r2, r3
 801fec8:	bfa8      	it	ge
 801feca:	4623      	movge	r3, r4
 801fecc:	460f      	mov	r7, r1
 801fece:	bfa4      	itt	ge
 801fed0:	460c      	movge	r4, r1
 801fed2:	461f      	movge	r7, r3
 801fed4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801fed8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801fedc:	68a3      	ldr	r3, [r4, #8]
 801fede:	6861      	ldr	r1, [r4, #4]
 801fee0:	eb0a 0609 	add.w	r6, sl, r9
 801fee4:	42b3      	cmp	r3, r6
 801fee6:	b085      	sub	sp, #20
 801fee8:	bfb8      	it	lt
 801feea:	3101      	addlt	r1, #1
 801feec:	f7ff fe92 	bl	801fc14 <_Balloc>
 801fef0:	b930      	cbnz	r0, 801ff00 <__multiply+0x44>
 801fef2:	4602      	mov	r2, r0
 801fef4:	4b44      	ldr	r3, [pc, #272]	@ (8020008 <__multiply+0x14c>)
 801fef6:	4845      	ldr	r0, [pc, #276]	@ (802000c <__multiply+0x150>)
 801fef8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801fefc:	f7fe ffd6 	bl	801eeac <__assert_func>
 801ff00:	f100 0514 	add.w	r5, r0, #20
 801ff04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ff08:	462b      	mov	r3, r5
 801ff0a:	2200      	movs	r2, #0
 801ff0c:	4543      	cmp	r3, r8
 801ff0e:	d321      	bcc.n	801ff54 <__multiply+0x98>
 801ff10:	f107 0114 	add.w	r1, r7, #20
 801ff14:	f104 0214 	add.w	r2, r4, #20
 801ff18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ff1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ff20:	9302      	str	r3, [sp, #8]
 801ff22:	1b13      	subs	r3, r2, r4
 801ff24:	3b15      	subs	r3, #21
 801ff26:	f023 0303 	bic.w	r3, r3, #3
 801ff2a:	3304      	adds	r3, #4
 801ff2c:	f104 0715 	add.w	r7, r4, #21
 801ff30:	42ba      	cmp	r2, r7
 801ff32:	bf38      	it	cc
 801ff34:	2304      	movcc	r3, #4
 801ff36:	9301      	str	r3, [sp, #4]
 801ff38:	9b02      	ldr	r3, [sp, #8]
 801ff3a:	9103      	str	r1, [sp, #12]
 801ff3c:	428b      	cmp	r3, r1
 801ff3e:	d80c      	bhi.n	801ff5a <__multiply+0x9e>
 801ff40:	2e00      	cmp	r6, #0
 801ff42:	dd03      	ble.n	801ff4c <__multiply+0x90>
 801ff44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ff48:	2b00      	cmp	r3, #0
 801ff4a:	d05b      	beq.n	8020004 <__multiply+0x148>
 801ff4c:	6106      	str	r6, [r0, #16]
 801ff4e:	b005      	add	sp, #20
 801ff50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff54:	f843 2b04 	str.w	r2, [r3], #4
 801ff58:	e7d8      	b.n	801ff0c <__multiply+0x50>
 801ff5a:	f8b1 a000 	ldrh.w	sl, [r1]
 801ff5e:	f1ba 0f00 	cmp.w	sl, #0
 801ff62:	d024      	beq.n	801ffae <__multiply+0xf2>
 801ff64:	f104 0e14 	add.w	lr, r4, #20
 801ff68:	46a9      	mov	r9, r5
 801ff6a:	f04f 0c00 	mov.w	ip, #0
 801ff6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ff72:	f8d9 3000 	ldr.w	r3, [r9]
 801ff76:	fa1f fb87 	uxth.w	fp, r7
 801ff7a:	b29b      	uxth	r3, r3
 801ff7c:	fb0a 330b 	mla	r3, sl, fp, r3
 801ff80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801ff84:	f8d9 7000 	ldr.w	r7, [r9]
 801ff88:	4463      	add	r3, ip
 801ff8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ff8e:	fb0a c70b 	mla	r7, sl, fp, ip
 801ff92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ff96:	b29b      	uxth	r3, r3
 801ff98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ff9c:	4572      	cmp	r2, lr
 801ff9e:	f849 3b04 	str.w	r3, [r9], #4
 801ffa2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ffa6:	d8e2      	bhi.n	801ff6e <__multiply+0xb2>
 801ffa8:	9b01      	ldr	r3, [sp, #4]
 801ffaa:	f845 c003 	str.w	ip, [r5, r3]
 801ffae:	9b03      	ldr	r3, [sp, #12]
 801ffb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ffb4:	3104      	adds	r1, #4
 801ffb6:	f1b9 0f00 	cmp.w	r9, #0
 801ffba:	d021      	beq.n	8020000 <__multiply+0x144>
 801ffbc:	682b      	ldr	r3, [r5, #0]
 801ffbe:	f104 0c14 	add.w	ip, r4, #20
 801ffc2:	46ae      	mov	lr, r5
 801ffc4:	f04f 0a00 	mov.w	sl, #0
 801ffc8:	f8bc b000 	ldrh.w	fp, [ip]
 801ffcc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ffd0:	fb09 770b 	mla	r7, r9, fp, r7
 801ffd4:	4457      	add	r7, sl
 801ffd6:	b29b      	uxth	r3, r3
 801ffd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ffdc:	f84e 3b04 	str.w	r3, [lr], #4
 801ffe0:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ffe4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ffe8:	f8be 3000 	ldrh.w	r3, [lr]
 801ffec:	fb09 330a 	mla	r3, r9, sl, r3
 801fff0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801fff4:	4562      	cmp	r2, ip
 801fff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fffa:	d8e5      	bhi.n	801ffc8 <__multiply+0x10c>
 801fffc:	9f01      	ldr	r7, [sp, #4]
 801fffe:	51eb      	str	r3, [r5, r7]
 8020000:	3504      	adds	r5, #4
 8020002:	e799      	b.n	801ff38 <__multiply+0x7c>
 8020004:	3e01      	subs	r6, #1
 8020006:	e79b      	b.n	801ff40 <__multiply+0x84>
 8020008:	08025588 	.word	0x08025588
 802000c:	08025599 	.word	0x08025599

08020010 <__pow5mult>:
 8020010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020014:	4615      	mov	r5, r2
 8020016:	f012 0203 	ands.w	r2, r2, #3
 802001a:	4607      	mov	r7, r0
 802001c:	460e      	mov	r6, r1
 802001e:	d007      	beq.n	8020030 <__pow5mult+0x20>
 8020020:	4c25      	ldr	r4, [pc, #148]	@ (80200b8 <__pow5mult+0xa8>)
 8020022:	3a01      	subs	r2, #1
 8020024:	2300      	movs	r3, #0
 8020026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802002a:	f7ff fe55 	bl	801fcd8 <__multadd>
 802002e:	4606      	mov	r6, r0
 8020030:	10ad      	asrs	r5, r5, #2
 8020032:	d03d      	beq.n	80200b0 <__pow5mult+0xa0>
 8020034:	69fc      	ldr	r4, [r7, #28]
 8020036:	b97c      	cbnz	r4, 8020058 <__pow5mult+0x48>
 8020038:	2010      	movs	r0, #16
 802003a:	f7fd fb8d 	bl	801d758 <malloc>
 802003e:	4602      	mov	r2, r0
 8020040:	61f8      	str	r0, [r7, #28]
 8020042:	b928      	cbnz	r0, 8020050 <__pow5mult+0x40>
 8020044:	4b1d      	ldr	r3, [pc, #116]	@ (80200bc <__pow5mult+0xac>)
 8020046:	481e      	ldr	r0, [pc, #120]	@ (80200c0 <__pow5mult+0xb0>)
 8020048:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802004c:	f7fe ff2e 	bl	801eeac <__assert_func>
 8020050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020054:	6004      	str	r4, [r0, #0]
 8020056:	60c4      	str	r4, [r0, #12]
 8020058:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802005c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020060:	b94c      	cbnz	r4, 8020076 <__pow5mult+0x66>
 8020062:	f240 2171 	movw	r1, #625	@ 0x271
 8020066:	4638      	mov	r0, r7
 8020068:	f7ff ff12 	bl	801fe90 <__i2b>
 802006c:	2300      	movs	r3, #0
 802006e:	f8c8 0008 	str.w	r0, [r8, #8]
 8020072:	4604      	mov	r4, r0
 8020074:	6003      	str	r3, [r0, #0]
 8020076:	f04f 0900 	mov.w	r9, #0
 802007a:	07eb      	lsls	r3, r5, #31
 802007c:	d50a      	bpl.n	8020094 <__pow5mult+0x84>
 802007e:	4631      	mov	r1, r6
 8020080:	4622      	mov	r2, r4
 8020082:	4638      	mov	r0, r7
 8020084:	f7ff ff1a 	bl	801febc <__multiply>
 8020088:	4631      	mov	r1, r6
 802008a:	4680      	mov	r8, r0
 802008c:	4638      	mov	r0, r7
 802008e:	f7ff fe01 	bl	801fc94 <_Bfree>
 8020092:	4646      	mov	r6, r8
 8020094:	106d      	asrs	r5, r5, #1
 8020096:	d00b      	beq.n	80200b0 <__pow5mult+0xa0>
 8020098:	6820      	ldr	r0, [r4, #0]
 802009a:	b938      	cbnz	r0, 80200ac <__pow5mult+0x9c>
 802009c:	4622      	mov	r2, r4
 802009e:	4621      	mov	r1, r4
 80200a0:	4638      	mov	r0, r7
 80200a2:	f7ff ff0b 	bl	801febc <__multiply>
 80200a6:	6020      	str	r0, [r4, #0]
 80200a8:	f8c0 9000 	str.w	r9, [r0]
 80200ac:	4604      	mov	r4, r0
 80200ae:	e7e4      	b.n	802007a <__pow5mult+0x6a>
 80200b0:	4630      	mov	r0, r6
 80200b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80200b6:	bf00      	nop
 80200b8:	080255f4 	.word	0x080255f4
 80200bc:	08025476 	.word	0x08025476
 80200c0:	08025599 	.word	0x08025599

080200c4 <__lshift>:
 80200c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80200c8:	460c      	mov	r4, r1
 80200ca:	6849      	ldr	r1, [r1, #4]
 80200cc:	6923      	ldr	r3, [r4, #16]
 80200ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80200d2:	68a3      	ldr	r3, [r4, #8]
 80200d4:	4607      	mov	r7, r0
 80200d6:	4691      	mov	r9, r2
 80200d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80200dc:	f108 0601 	add.w	r6, r8, #1
 80200e0:	42b3      	cmp	r3, r6
 80200e2:	db0b      	blt.n	80200fc <__lshift+0x38>
 80200e4:	4638      	mov	r0, r7
 80200e6:	f7ff fd95 	bl	801fc14 <_Balloc>
 80200ea:	4605      	mov	r5, r0
 80200ec:	b948      	cbnz	r0, 8020102 <__lshift+0x3e>
 80200ee:	4602      	mov	r2, r0
 80200f0:	4b28      	ldr	r3, [pc, #160]	@ (8020194 <__lshift+0xd0>)
 80200f2:	4829      	ldr	r0, [pc, #164]	@ (8020198 <__lshift+0xd4>)
 80200f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80200f8:	f7fe fed8 	bl	801eeac <__assert_func>
 80200fc:	3101      	adds	r1, #1
 80200fe:	005b      	lsls	r3, r3, #1
 8020100:	e7ee      	b.n	80200e0 <__lshift+0x1c>
 8020102:	2300      	movs	r3, #0
 8020104:	f100 0114 	add.w	r1, r0, #20
 8020108:	f100 0210 	add.w	r2, r0, #16
 802010c:	4618      	mov	r0, r3
 802010e:	4553      	cmp	r3, sl
 8020110:	db33      	blt.n	802017a <__lshift+0xb6>
 8020112:	6920      	ldr	r0, [r4, #16]
 8020114:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020118:	f104 0314 	add.w	r3, r4, #20
 802011c:	f019 091f 	ands.w	r9, r9, #31
 8020120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020124:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020128:	d02b      	beq.n	8020182 <__lshift+0xbe>
 802012a:	f1c9 0e20 	rsb	lr, r9, #32
 802012e:	468a      	mov	sl, r1
 8020130:	2200      	movs	r2, #0
 8020132:	6818      	ldr	r0, [r3, #0]
 8020134:	fa00 f009 	lsl.w	r0, r0, r9
 8020138:	4310      	orrs	r0, r2
 802013a:	f84a 0b04 	str.w	r0, [sl], #4
 802013e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020142:	459c      	cmp	ip, r3
 8020144:	fa22 f20e 	lsr.w	r2, r2, lr
 8020148:	d8f3      	bhi.n	8020132 <__lshift+0x6e>
 802014a:	ebac 0304 	sub.w	r3, ip, r4
 802014e:	3b15      	subs	r3, #21
 8020150:	f023 0303 	bic.w	r3, r3, #3
 8020154:	3304      	adds	r3, #4
 8020156:	f104 0015 	add.w	r0, r4, #21
 802015a:	4584      	cmp	ip, r0
 802015c:	bf38      	it	cc
 802015e:	2304      	movcc	r3, #4
 8020160:	50ca      	str	r2, [r1, r3]
 8020162:	b10a      	cbz	r2, 8020168 <__lshift+0xa4>
 8020164:	f108 0602 	add.w	r6, r8, #2
 8020168:	3e01      	subs	r6, #1
 802016a:	4638      	mov	r0, r7
 802016c:	612e      	str	r6, [r5, #16]
 802016e:	4621      	mov	r1, r4
 8020170:	f7ff fd90 	bl	801fc94 <_Bfree>
 8020174:	4628      	mov	r0, r5
 8020176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802017a:	f842 0f04 	str.w	r0, [r2, #4]!
 802017e:	3301      	adds	r3, #1
 8020180:	e7c5      	b.n	802010e <__lshift+0x4a>
 8020182:	3904      	subs	r1, #4
 8020184:	f853 2b04 	ldr.w	r2, [r3], #4
 8020188:	f841 2f04 	str.w	r2, [r1, #4]!
 802018c:	459c      	cmp	ip, r3
 802018e:	d8f9      	bhi.n	8020184 <__lshift+0xc0>
 8020190:	e7ea      	b.n	8020168 <__lshift+0xa4>
 8020192:	bf00      	nop
 8020194:	08025588 	.word	0x08025588
 8020198:	08025599 	.word	0x08025599

0802019c <__mcmp>:
 802019c:	690a      	ldr	r2, [r1, #16]
 802019e:	4603      	mov	r3, r0
 80201a0:	6900      	ldr	r0, [r0, #16]
 80201a2:	1a80      	subs	r0, r0, r2
 80201a4:	b530      	push	{r4, r5, lr}
 80201a6:	d10e      	bne.n	80201c6 <__mcmp+0x2a>
 80201a8:	3314      	adds	r3, #20
 80201aa:	3114      	adds	r1, #20
 80201ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80201b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80201b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80201b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80201bc:	4295      	cmp	r5, r2
 80201be:	d003      	beq.n	80201c8 <__mcmp+0x2c>
 80201c0:	d205      	bcs.n	80201ce <__mcmp+0x32>
 80201c2:	f04f 30ff 	mov.w	r0, #4294967295
 80201c6:	bd30      	pop	{r4, r5, pc}
 80201c8:	42a3      	cmp	r3, r4
 80201ca:	d3f3      	bcc.n	80201b4 <__mcmp+0x18>
 80201cc:	e7fb      	b.n	80201c6 <__mcmp+0x2a>
 80201ce:	2001      	movs	r0, #1
 80201d0:	e7f9      	b.n	80201c6 <__mcmp+0x2a>
	...

080201d4 <__mdiff>:
 80201d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201d8:	4689      	mov	r9, r1
 80201da:	4606      	mov	r6, r0
 80201dc:	4611      	mov	r1, r2
 80201de:	4648      	mov	r0, r9
 80201e0:	4614      	mov	r4, r2
 80201e2:	f7ff ffdb 	bl	802019c <__mcmp>
 80201e6:	1e05      	subs	r5, r0, #0
 80201e8:	d112      	bne.n	8020210 <__mdiff+0x3c>
 80201ea:	4629      	mov	r1, r5
 80201ec:	4630      	mov	r0, r6
 80201ee:	f7ff fd11 	bl	801fc14 <_Balloc>
 80201f2:	4602      	mov	r2, r0
 80201f4:	b928      	cbnz	r0, 8020202 <__mdiff+0x2e>
 80201f6:	4b3f      	ldr	r3, [pc, #252]	@ (80202f4 <__mdiff+0x120>)
 80201f8:	f240 2137 	movw	r1, #567	@ 0x237
 80201fc:	483e      	ldr	r0, [pc, #248]	@ (80202f8 <__mdiff+0x124>)
 80201fe:	f7fe fe55 	bl	801eeac <__assert_func>
 8020202:	2301      	movs	r3, #1
 8020204:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020208:	4610      	mov	r0, r2
 802020a:	b003      	add	sp, #12
 802020c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020210:	bfbc      	itt	lt
 8020212:	464b      	movlt	r3, r9
 8020214:	46a1      	movlt	r9, r4
 8020216:	4630      	mov	r0, r6
 8020218:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802021c:	bfba      	itte	lt
 802021e:	461c      	movlt	r4, r3
 8020220:	2501      	movlt	r5, #1
 8020222:	2500      	movge	r5, #0
 8020224:	f7ff fcf6 	bl	801fc14 <_Balloc>
 8020228:	4602      	mov	r2, r0
 802022a:	b918      	cbnz	r0, 8020234 <__mdiff+0x60>
 802022c:	4b31      	ldr	r3, [pc, #196]	@ (80202f4 <__mdiff+0x120>)
 802022e:	f240 2145 	movw	r1, #581	@ 0x245
 8020232:	e7e3      	b.n	80201fc <__mdiff+0x28>
 8020234:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8020238:	6926      	ldr	r6, [r4, #16]
 802023a:	60c5      	str	r5, [r0, #12]
 802023c:	f109 0310 	add.w	r3, r9, #16
 8020240:	f109 0514 	add.w	r5, r9, #20
 8020244:	f104 0e14 	add.w	lr, r4, #20
 8020248:	f100 0b14 	add.w	fp, r0, #20
 802024c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8020250:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8020254:	9301      	str	r3, [sp, #4]
 8020256:	46d9      	mov	r9, fp
 8020258:	f04f 0c00 	mov.w	ip, #0
 802025c:	9b01      	ldr	r3, [sp, #4]
 802025e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8020262:	f853 af04 	ldr.w	sl, [r3, #4]!
 8020266:	9301      	str	r3, [sp, #4]
 8020268:	fa1f f38a 	uxth.w	r3, sl
 802026c:	4619      	mov	r1, r3
 802026e:	b283      	uxth	r3, r0
 8020270:	1acb      	subs	r3, r1, r3
 8020272:	0c00      	lsrs	r0, r0, #16
 8020274:	4463      	add	r3, ip
 8020276:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802027a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802027e:	b29b      	uxth	r3, r3
 8020280:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8020284:	4576      	cmp	r6, lr
 8020286:	f849 3b04 	str.w	r3, [r9], #4
 802028a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802028e:	d8e5      	bhi.n	802025c <__mdiff+0x88>
 8020290:	1b33      	subs	r3, r6, r4
 8020292:	3b15      	subs	r3, #21
 8020294:	f023 0303 	bic.w	r3, r3, #3
 8020298:	3415      	adds	r4, #21
 802029a:	3304      	adds	r3, #4
 802029c:	42a6      	cmp	r6, r4
 802029e:	bf38      	it	cc
 80202a0:	2304      	movcc	r3, #4
 80202a2:	441d      	add	r5, r3
 80202a4:	445b      	add	r3, fp
 80202a6:	461e      	mov	r6, r3
 80202a8:	462c      	mov	r4, r5
 80202aa:	4544      	cmp	r4, r8
 80202ac:	d30e      	bcc.n	80202cc <__mdiff+0xf8>
 80202ae:	f108 0103 	add.w	r1, r8, #3
 80202b2:	1b49      	subs	r1, r1, r5
 80202b4:	f021 0103 	bic.w	r1, r1, #3
 80202b8:	3d03      	subs	r5, #3
 80202ba:	45a8      	cmp	r8, r5
 80202bc:	bf38      	it	cc
 80202be:	2100      	movcc	r1, #0
 80202c0:	440b      	add	r3, r1
 80202c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80202c6:	b191      	cbz	r1, 80202ee <__mdiff+0x11a>
 80202c8:	6117      	str	r7, [r2, #16]
 80202ca:	e79d      	b.n	8020208 <__mdiff+0x34>
 80202cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80202d0:	46e6      	mov	lr, ip
 80202d2:	0c08      	lsrs	r0, r1, #16
 80202d4:	fa1c fc81 	uxtah	ip, ip, r1
 80202d8:	4471      	add	r1, lr
 80202da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80202de:	b289      	uxth	r1, r1
 80202e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80202e4:	f846 1b04 	str.w	r1, [r6], #4
 80202e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80202ec:	e7dd      	b.n	80202aa <__mdiff+0xd6>
 80202ee:	3f01      	subs	r7, #1
 80202f0:	e7e7      	b.n	80202c2 <__mdiff+0xee>
 80202f2:	bf00      	nop
 80202f4:	08025588 	.word	0x08025588
 80202f8:	08025599 	.word	0x08025599

080202fc <__ulp>:
 80202fc:	b082      	sub	sp, #8
 80202fe:	ed8d 0b00 	vstr	d0, [sp]
 8020302:	9a01      	ldr	r2, [sp, #4]
 8020304:	4b0f      	ldr	r3, [pc, #60]	@ (8020344 <__ulp+0x48>)
 8020306:	4013      	ands	r3, r2
 8020308:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 802030c:	2b00      	cmp	r3, #0
 802030e:	dc08      	bgt.n	8020322 <__ulp+0x26>
 8020310:	425b      	negs	r3, r3
 8020312:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8020316:	ea4f 5223 	mov.w	r2, r3, asr #20
 802031a:	da04      	bge.n	8020326 <__ulp+0x2a>
 802031c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8020320:	4113      	asrs	r3, r2
 8020322:	2200      	movs	r2, #0
 8020324:	e008      	b.n	8020338 <__ulp+0x3c>
 8020326:	f1a2 0314 	sub.w	r3, r2, #20
 802032a:	2b1e      	cmp	r3, #30
 802032c:	bfda      	itte	le
 802032e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8020332:	40da      	lsrle	r2, r3
 8020334:	2201      	movgt	r2, #1
 8020336:	2300      	movs	r3, #0
 8020338:	4619      	mov	r1, r3
 802033a:	4610      	mov	r0, r2
 802033c:	ec41 0b10 	vmov	d0, r0, r1
 8020340:	b002      	add	sp, #8
 8020342:	4770      	bx	lr
 8020344:	7ff00000 	.word	0x7ff00000

08020348 <__b2d>:
 8020348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802034c:	6906      	ldr	r6, [r0, #16]
 802034e:	f100 0814 	add.w	r8, r0, #20
 8020352:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8020356:	1f37      	subs	r7, r6, #4
 8020358:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802035c:	4610      	mov	r0, r2
 802035e:	f7ff fd4b 	bl	801fdf8 <__hi0bits>
 8020362:	f1c0 0320 	rsb	r3, r0, #32
 8020366:	280a      	cmp	r0, #10
 8020368:	600b      	str	r3, [r1, #0]
 802036a:	491b      	ldr	r1, [pc, #108]	@ (80203d8 <__b2d+0x90>)
 802036c:	dc15      	bgt.n	802039a <__b2d+0x52>
 802036e:	f1c0 0c0b 	rsb	ip, r0, #11
 8020372:	fa22 f30c 	lsr.w	r3, r2, ip
 8020376:	45b8      	cmp	r8, r7
 8020378:	ea43 0501 	orr.w	r5, r3, r1
 802037c:	bf34      	ite	cc
 802037e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020382:	2300      	movcs	r3, #0
 8020384:	3015      	adds	r0, #21
 8020386:	fa02 f000 	lsl.w	r0, r2, r0
 802038a:	fa23 f30c 	lsr.w	r3, r3, ip
 802038e:	4303      	orrs	r3, r0
 8020390:	461c      	mov	r4, r3
 8020392:	ec45 4b10 	vmov	d0, r4, r5
 8020396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802039a:	45b8      	cmp	r8, r7
 802039c:	bf3a      	itte	cc
 802039e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80203a2:	f1a6 0708 	subcc.w	r7, r6, #8
 80203a6:	2300      	movcs	r3, #0
 80203a8:	380b      	subs	r0, #11
 80203aa:	d012      	beq.n	80203d2 <__b2d+0x8a>
 80203ac:	f1c0 0120 	rsb	r1, r0, #32
 80203b0:	fa23 f401 	lsr.w	r4, r3, r1
 80203b4:	4082      	lsls	r2, r0
 80203b6:	4322      	orrs	r2, r4
 80203b8:	4547      	cmp	r7, r8
 80203ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80203be:	bf8c      	ite	hi
 80203c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80203c4:	2200      	movls	r2, #0
 80203c6:	4083      	lsls	r3, r0
 80203c8:	40ca      	lsrs	r2, r1
 80203ca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80203ce:	4313      	orrs	r3, r2
 80203d0:	e7de      	b.n	8020390 <__b2d+0x48>
 80203d2:	ea42 0501 	orr.w	r5, r2, r1
 80203d6:	e7db      	b.n	8020390 <__b2d+0x48>
 80203d8:	3ff00000 	.word	0x3ff00000

080203dc <__d2b>:
 80203dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80203e0:	460f      	mov	r7, r1
 80203e2:	2101      	movs	r1, #1
 80203e4:	ec59 8b10 	vmov	r8, r9, d0
 80203e8:	4616      	mov	r6, r2
 80203ea:	f7ff fc13 	bl	801fc14 <_Balloc>
 80203ee:	4604      	mov	r4, r0
 80203f0:	b930      	cbnz	r0, 8020400 <__d2b+0x24>
 80203f2:	4602      	mov	r2, r0
 80203f4:	4b23      	ldr	r3, [pc, #140]	@ (8020484 <__d2b+0xa8>)
 80203f6:	4824      	ldr	r0, [pc, #144]	@ (8020488 <__d2b+0xac>)
 80203f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80203fc:	f7fe fd56 	bl	801eeac <__assert_func>
 8020400:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020408:	b10d      	cbz	r5, 802040e <__d2b+0x32>
 802040a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802040e:	9301      	str	r3, [sp, #4]
 8020410:	f1b8 0300 	subs.w	r3, r8, #0
 8020414:	d023      	beq.n	802045e <__d2b+0x82>
 8020416:	4668      	mov	r0, sp
 8020418:	9300      	str	r3, [sp, #0]
 802041a:	f7ff fd0c 	bl	801fe36 <__lo0bits>
 802041e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8020422:	b1d0      	cbz	r0, 802045a <__d2b+0x7e>
 8020424:	f1c0 0320 	rsb	r3, r0, #32
 8020428:	fa02 f303 	lsl.w	r3, r2, r3
 802042c:	430b      	orrs	r3, r1
 802042e:	40c2      	lsrs	r2, r0
 8020430:	6163      	str	r3, [r4, #20]
 8020432:	9201      	str	r2, [sp, #4]
 8020434:	9b01      	ldr	r3, [sp, #4]
 8020436:	61a3      	str	r3, [r4, #24]
 8020438:	2b00      	cmp	r3, #0
 802043a:	bf0c      	ite	eq
 802043c:	2201      	moveq	r2, #1
 802043e:	2202      	movne	r2, #2
 8020440:	6122      	str	r2, [r4, #16]
 8020442:	b1a5      	cbz	r5, 802046e <__d2b+0x92>
 8020444:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8020448:	4405      	add	r5, r0
 802044a:	603d      	str	r5, [r7, #0]
 802044c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8020450:	6030      	str	r0, [r6, #0]
 8020452:	4620      	mov	r0, r4
 8020454:	b003      	add	sp, #12
 8020456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802045a:	6161      	str	r1, [r4, #20]
 802045c:	e7ea      	b.n	8020434 <__d2b+0x58>
 802045e:	a801      	add	r0, sp, #4
 8020460:	f7ff fce9 	bl	801fe36 <__lo0bits>
 8020464:	9b01      	ldr	r3, [sp, #4]
 8020466:	6163      	str	r3, [r4, #20]
 8020468:	3020      	adds	r0, #32
 802046a:	2201      	movs	r2, #1
 802046c:	e7e8      	b.n	8020440 <__d2b+0x64>
 802046e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020472:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8020476:	6038      	str	r0, [r7, #0]
 8020478:	6918      	ldr	r0, [r3, #16]
 802047a:	f7ff fcbd 	bl	801fdf8 <__hi0bits>
 802047e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020482:	e7e5      	b.n	8020450 <__d2b+0x74>
 8020484:	08025588 	.word	0x08025588
 8020488:	08025599 	.word	0x08025599

0802048c <__ratio>:
 802048c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020490:	b085      	sub	sp, #20
 8020492:	e9cd 1000 	strd	r1, r0, [sp]
 8020496:	a902      	add	r1, sp, #8
 8020498:	f7ff ff56 	bl	8020348 <__b2d>
 802049c:	9800      	ldr	r0, [sp, #0]
 802049e:	a903      	add	r1, sp, #12
 80204a0:	ec55 4b10 	vmov	r4, r5, d0
 80204a4:	f7ff ff50 	bl	8020348 <__b2d>
 80204a8:	9b01      	ldr	r3, [sp, #4]
 80204aa:	6919      	ldr	r1, [r3, #16]
 80204ac:	9b00      	ldr	r3, [sp, #0]
 80204ae:	691b      	ldr	r3, [r3, #16]
 80204b0:	1ac9      	subs	r1, r1, r3
 80204b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80204b6:	1a9b      	subs	r3, r3, r2
 80204b8:	ec5b ab10 	vmov	sl, fp, d0
 80204bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	bfce      	itee	gt
 80204c4:	462a      	movgt	r2, r5
 80204c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80204ca:	465a      	movle	r2, fp
 80204cc:	462f      	mov	r7, r5
 80204ce:	46d9      	mov	r9, fp
 80204d0:	bfcc      	ite	gt
 80204d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80204d6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80204da:	464b      	mov	r3, r9
 80204dc:	4652      	mov	r2, sl
 80204de:	4620      	mov	r0, r4
 80204e0:	4639      	mov	r1, r7
 80204e2:	f7e0 f9cb 	bl	800087c <__aeabi_ddiv>
 80204e6:	ec41 0b10 	vmov	d0, r0, r1
 80204ea:	b005      	add	sp, #20
 80204ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080204f0 <__copybits>:
 80204f0:	3901      	subs	r1, #1
 80204f2:	b570      	push	{r4, r5, r6, lr}
 80204f4:	1149      	asrs	r1, r1, #5
 80204f6:	6914      	ldr	r4, [r2, #16]
 80204f8:	3101      	adds	r1, #1
 80204fa:	f102 0314 	add.w	r3, r2, #20
 80204fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020502:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020506:	1f05      	subs	r5, r0, #4
 8020508:	42a3      	cmp	r3, r4
 802050a:	d30c      	bcc.n	8020526 <__copybits+0x36>
 802050c:	1aa3      	subs	r3, r4, r2
 802050e:	3b11      	subs	r3, #17
 8020510:	f023 0303 	bic.w	r3, r3, #3
 8020514:	3211      	adds	r2, #17
 8020516:	42a2      	cmp	r2, r4
 8020518:	bf88      	it	hi
 802051a:	2300      	movhi	r3, #0
 802051c:	4418      	add	r0, r3
 802051e:	2300      	movs	r3, #0
 8020520:	4288      	cmp	r0, r1
 8020522:	d305      	bcc.n	8020530 <__copybits+0x40>
 8020524:	bd70      	pop	{r4, r5, r6, pc}
 8020526:	f853 6b04 	ldr.w	r6, [r3], #4
 802052a:	f845 6f04 	str.w	r6, [r5, #4]!
 802052e:	e7eb      	b.n	8020508 <__copybits+0x18>
 8020530:	f840 3b04 	str.w	r3, [r0], #4
 8020534:	e7f4      	b.n	8020520 <__copybits+0x30>

08020536 <__any_on>:
 8020536:	f100 0214 	add.w	r2, r0, #20
 802053a:	6900      	ldr	r0, [r0, #16]
 802053c:	114b      	asrs	r3, r1, #5
 802053e:	4298      	cmp	r0, r3
 8020540:	b510      	push	{r4, lr}
 8020542:	db11      	blt.n	8020568 <__any_on+0x32>
 8020544:	dd0a      	ble.n	802055c <__any_on+0x26>
 8020546:	f011 011f 	ands.w	r1, r1, #31
 802054a:	d007      	beq.n	802055c <__any_on+0x26>
 802054c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020550:	fa24 f001 	lsr.w	r0, r4, r1
 8020554:	fa00 f101 	lsl.w	r1, r0, r1
 8020558:	428c      	cmp	r4, r1
 802055a:	d10b      	bne.n	8020574 <__any_on+0x3e>
 802055c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020560:	4293      	cmp	r3, r2
 8020562:	d803      	bhi.n	802056c <__any_on+0x36>
 8020564:	2000      	movs	r0, #0
 8020566:	bd10      	pop	{r4, pc}
 8020568:	4603      	mov	r3, r0
 802056a:	e7f7      	b.n	802055c <__any_on+0x26>
 802056c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020570:	2900      	cmp	r1, #0
 8020572:	d0f5      	beq.n	8020560 <__any_on+0x2a>
 8020574:	2001      	movs	r0, #1
 8020576:	e7f6      	b.n	8020566 <__any_on+0x30>

08020578 <sulp>:
 8020578:	b570      	push	{r4, r5, r6, lr}
 802057a:	4604      	mov	r4, r0
 802057c:	460d      	mov	r5, r1
 802057e:	ec45 4b10 	vmov	d0, r4, r5
 8020582:	4616      	mov	r6, r2
 8020584:	f7ff feba 	bl	80202fc <__ulp>
 8020588:	ec51 0b10 	vmov	r0, r1, d0
 802058c:	b17e      	cbz	r6, 80205ae <sulp+0x36>
 802058e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8020592:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020596:	2b00      	cmp	r3, #0
 8020598:	dd09      	ble.n	80205ae <sulp+0x36>
 802059a:	051b      	lsls	r3, r3, #20
 802059c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80205a0:	2400      	movs	r4, #0
 80205a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80205a6:	4622      	mov	r2, r4
 80205a8:	462b      	mov	r3, r5
 80205aa:	f7e0 f83d 	bl	8000628 <__aeabi_dmul>
 80205ae:	ec41 0b10 	vmov	d0, r0, r1
 80205b2:	bd70      	pop	{r4, r5, r6, pc}
 80205b4:	0000      	movs	r0, r0
	...

080205b8 <_strtod_l>:
 80205b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205bc:	b09f      	sub	sp, #124	@ 0x7c
 80205be:	460c      	mov	r4, r1
 80205c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80205c2:	2200      	movs	r2, #0
 80205c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80205c6:	9005      	str	r0, [sp, #20]
 80205c8:	f04f 0a00 	mov.w	sl, #0
 80205cc:	f04f 0b00 	mov.w	fp, #0
 80205d0:	460a      	mov	r2, r1
 80205d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80205d4:	7811      	ldrb	r1, [r2, #0]
 80205d6:	292b      	cmp	r1, #43	@ 0x2b
 80205d8:	d04a      	beq.n	8020670 <_strtod_l+0xb8>
 80205da:	d838      	bhi.n	802064e <_strtod_l+0x96>
 80205dc:	290d      	cmp	r1, #13
 80205de:	d832      	bhi.n	8020646 <_strtod_l+0x8e>
 80205e0:	2908      	cmp	r1, #8
 80205e2:	d832      	bhi.n	802064a <_strtod_l+0x92>
 80205e4:	2900      	cmp	r1, #0
 80205e6:	d03b      	beq.n	8020660 <_strtod_l+0xa8>
 80205e8:	2200      	movs	r2, #0
 80205ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80205ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80205ee:	782a      	ldrb	r2, [r5, #0]
 80205f0:	2a30      	cmp	r2, #48	@ 0x30
 80205f2:	f040 80b3 	bne.w	802075c <_strtod_l+0x1a4>
 80205f6:	786a      	ldrb	r2, [r5, #1]
 80205f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80205fc:	2a58      	cmp	r2, #88	@ 0x58
 80205fe:	d16e      	bne.n	80206de <_strtod_l+0x126>
 8020600:	9302      	str	r3, [sp, #8]
 8020602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020604:	9301      	str	r3, [sp, #4]
 8020606:	ab1a      	add	r3, sp, #104	@ 0x68
 8020608:	9300      	str	r3, [sp, #0]
 802060a:	4a8e      	ldr	r2, [pc, #568]	@ (8020844 <_strtod_l+0x28c>)
 802060c:	9805      	ldr	r0, [sp, #20]
 802060e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8020610:	a919      	add	r1, sp, #100	@ 0x64
 8020612:	f001 fa33 	bl	8021a7c <__gethex>
 8020616:	f010 060f 	ands.w	r6, r0, #15
 802061a:	4604      	mov	r4, r0
 802061c:	d005      	beq.n	802062a <_strtod_l+0x72>
 802061e:	2e06      	cmp	r6, #6
 8020620:	d128      	bne.n	8020674 <_strtod_l+0xbc>
 8020622:	3501      	adds	r5, #1
 8020624:	2300      	movs	r3, #0
 8020626:	9519      	str	r5, [sp, #100]	@ 0x64
 8020628:	930b      	str	r3, [sp, #44]	@ 0x2c
 802062a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802062c:	2b00      	cmp	r3, #0
 802062e:	f040 858e 	bne.w	802114e <_strtod_l+0xb96>
 8020632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020634:	b1cb      	cbz	r3, 802066a <_strtod_l+0xb2>
 8020636:	4652      	mov	r2, sl
 8020638:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802063c:	ec43 2b10 	vmov	d0, r2, r3
 8020640:	b01f      	add	sp, #124	@ 0x7c
 8020642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020646:	2920      	cmp	r1, #32
 8020648:	d1ce      	bne.n	80205e8 <_strtod_l+0x30>
 802064a:	3201      	adds	r2, #1
 802064c:	e7c1      	b.n	80205d2 <_strtod_l+0x1a>
 802064e:	292d      	cmp	r1, #45	@ 0x2d
 8020650:	d1ca      	bne.n	80205e8 <_strtod_l+0x30>
 8020652:	2101      	movs	r1, #1
 8020654:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020656:	1c51      	adds	r1, r2, #1
 8020658:	9119      	str	r1, [sp, #100]	@ 0x64
 802065a:	7852      	ldrb	r2, [r2, #1]
 802065c:	2a00      	cmp	r2, #0
 802065e:	d1c5      	bne.n	80205ec <_strtod_l+0x34>
 8020660:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020662:	9419      	str	r4, [sp, #100]	@ 0x64
 8020664:	2b00      	cmp	r3, #0
 8020666:	f040 8570 	bne.w	802114a <_strtod_l+0xb92>
 802066a:	4652      	mov	r2, sl
 802066c:	465b      	mov	r3, fp
 802066e:	e7e5      	b.n	802063c <_strtod_l+0x84>
 8020670:	2100      	movs	r1, #0
 8020672:	e7ef      	b.n	8020654 <_strtod_l+0x9c>
 8020674:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020676:	b13a      	cbz	r2, 8020688 <_strtod_l+0xd0>
 8020678:	2135      	movs	r1, #53	@ 0x35
 802067a:	a81c      	add	r0, sp, #112	@ 0x70
 802067c:	f7ff ff38 	bl	80204f0 <__copybits>
 8020680:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020682:	9805      	ldr	r0, [sp, #20]
 8020684:	f7ff fb06 	bl	801fc94 <_Bfree>
 8020688:	3e01      	subs	r6, #1
 802068a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802068c:	2e04      	cmp	r6, #4
 802068e:	d806      	bhi.n	802069e <_strtod_l+0xe6>
 8020690:	e8df f006 	tbb	[pc, r6]
 8020694:	201d0314 	.word	0x201d0314
 8020698:	14          	.byte	0x14
 8020699:	00          	.byte	0x00
 802069a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 802069e:	05e1      	lsls	r1, r4, #23
 80206a0:	bf48      	it	mi
 80206a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80206a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80206aa:	0d1b      	lsrs	r3, r3, #20
 80206ac:	051b      	lsls	r3, r3, #20
 80206ae:	2b00      	cmp	r3, #0
 80206b0:	d1bb      	bne.n	802062a <_strtod_l+0x72>
 80206b2:	f7fe fbb1 	bl	801ee18 <__errno>
 80206b6:	2322      	movs	r3, #34	@ 0x22
 80206b8:	6003      	str	r3, [r0, #0]
 80206ba:	e7b6      	b.n	802062a <_strtod_l+0x72>
 80206bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80206c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80206c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80206c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80206cc:	e7e7      	b.n	802069e <_strtod_l+0xe6>
 80206ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 802084c <_strtod_l+0x294>
 80206d2:	e7e4      	b.n	802069e <_strtod_l+0xe6>
 80206d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80206d8:	f04f 3aff 	mov.w	sl, #4294967295
 80206dc:	e7df      	b.n	802069e <_strtod_l+0xe6>
 80206de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80206e0:	1c5a      	adds	r2, r3, #1
 80206e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80206e4:	785b      	ldrb	r3, [r3, #1]
 80206e6:	2b30      	cmp	r3, #48	@ 0x30
 80206e8:	d0f9      	beq.n	80206de <_strtod_l+0x126>
 80206ea:	2b00      	cmp	r3, #0
 80206ec:	d09d      	beq.n	802062a <_strtod_l+0x72>
 80206ee:	2301      	movs	r3, #1
 80206f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80206f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80206f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80206f6:	2300      	movs	r3, #0
 80206f8:	9308      	str	r3, [sp, #32]
 80206fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80206fc:	461f      	mov	r7, r3
 80206fe:	220a      	movs	r2, #10
 8020700:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8020702:	7805      	ldrb	r5, [r0, #0]
 8020704:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8020708:	b2d9      	uxtb	r1, r3
 802070a:	2909      	cmp	r1, #9
 802070c:	d928      	bls.n	8020760 <_strtod_l+0x1a8>
 802070e:	494e      	ldr	r1, [pc, #312]	@ (8020848 <_strtod_l+0x290>)
 8020710:	2201      	movs	r2, #1
 8020712:	f001 f8f5 	bl	8021900 <strncmp>
 8020716:	2800      	cmp	r0, #0
 8020718:	d032      	beq.n	8020780 <_strtod_l+0x1c8>
 802071a:	2000      	movs	r0, #0
 802071c:	462a      	mov	r2, r5
 802071e:	4681      	mov	r9, r0
 8020720:	463d      	mov	r5, r7
 8020722:	4603      	mov	r3, r0
 8020724:	2a65      	cmp	r2, #101	@ 0x65
 8020726:	d001      	beq.n	802072c <_strtod_l+0x174>
 8020728:	2a45      	cmp	r2, #69	@ 0x45
 802072a:	d114      	bne.n	8020756 <_strtod_l+0x19e>
 802072c:	b91d      	cbnz	r5, 8020736 <_strtod_l+0x17e>
 802072e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020730:	4302      	orrs	r2, r0
 8020732:	d095      	beq.n	8020660 <_strtod_l+0xa8>
 8020734:	2500      	movs	r5, #0
 8020736:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8020738:	1c62      	adds	r2, r4, #1
 802073a:	9219      	str	r2, [sp, #100]	@ 0x64
 802073c:	7862      	ldrb	r2, [r4, #1]
 802073e:	2a2b      	cmp	r2, #43	@ 0x2b
 8020740:	d077      	beq.n	8020832 <_strtod_l+0x27a>
 8020742:	2a2d      	cmp	r2, #45	@ 0x2d
 8020744:	d07b      	beq.n	802083e <_strtod_l+0x286>
 8020746:	f04f 0c00 	mov.w	ip, #0
 802074a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 802074e:	2909      	cmp	r1, #9
 8020750:	f240 8082 	bls.w	8020858 <_strtod_l+0x2a0>
 8020754:	9419      	str	r4, [sp, #100]	@ 0x64
 8020756:	f04f 0800 	mov.w	r8, #0
 802075a:	e0a2      	b.n	80208a2 <_strtod_l+0x2ea>
 802075c:	2300      	movs	r3, #0
 802075e:	e7c7      	b.n	80206f0 <_strtod_l+0x138>
 8020760:	2f08      	cmp	r7, #8
 8020762:	bfd5      	itete	le
 8020764:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8020766:	9908      	ldrgt	r1, [sp, #32]
 8020768:	fb02 3301 	mlale	r3, r2, r1, r3
 802076c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8020770:	f100 0001 	add.w	r0, r0, #1
 8020774:	bfd4      	ite	le
 8020776:	930a      	strle	r3, [sp, #40]	@ 0x28
 8020778:	9308      	strgt	r3, [sp, #32]
 802077a:	3701      	adds	r7, #1
 802077c:	9019      	str	r0, [sp, #100]	@ 0x64
 802077e:	e7bf      	b.n	8020700 <_strtod_l+0x148>
 8020780:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020782:	1c5a      	adds	r2, r3, #1
 8020784:	9219      	str	r2, [sp, #100]	@ 0x64
 8020786:	785a      	ldrb	r2, [r3, #1]
 8020788:	b37f      	cbz	r7, 80207ea <_strtod_l+0x232>
 802078a:	4681      	mov	r9, r0
 802078c:	463d      	mov	r5, r7
 802078e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8020792:	2b09      	cmp	r3, #9
 8020794:	d912      	bls.n	80207bc <_strtod_l+0x204>
 8020796:	2301      	movs	r3, #1
 8020798:	e7c4      	b.n	8020724 <_strtod_l+0x16c>
 802079a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802079c:	1c5a      	adds	r2, r3, #1
 802079e:	9219      	str	r2, [sp, #100]	@ 0x64
 80207a0:	785a      	ldrb	r2, [r3, #1]
 80207a2:	3001      	adds	r0, #1
 80207a4:	2a30      	cmp	r2, #48	@ 0x30
 80207a6:	d0f8      	beq.n	802079a <_strtod_l+0x1e2>
 80207a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80207ac:	2b08      	cmp	r3, #8
 80207ae:	f200 84d3 	bhi.w	8021158 <_strtod_l+0xba0>
 80207b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80207b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80207b6:	4681      	mov	r9, r0
 80207b8:	2000      	movs	r0, #0
 80207ba:	4605      	mov	r5, r0
 80207bc:	3a30      	subs	r2, #48	@ 0x30
 80207be:	f100 0301 	add.w	r3, r0, #1
 80207c2:	d02a      	beq.n	802081a <_strtod_l+0x262>
 80207c4:	4499      	add	r9, r3
 80207c6:	eb00 0c05 	add.w	ip, r0, r5
 80207ca:	462b      	mov	r3, r5
 80207cc:	210a      	movs	r1, #10
 80207ce:	4563      	cmp	r3, ip
 80207d0:	d10d      	bne.n	80207ee <_strtod_l+0x236>
 80207d2:	1c69      	adds	r1, r5, #1
 80207d4:	4401      	add	r1, r0
 80207d6:	4428      	add	r0, r5
 80207d8:	2808      	cmp	r0, #8
 80207da:	dc16      	bgt.n	802080a <_strtod_l+0x252>
 80207dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80207de:	230a      	movs	r3, #10
 80207e0:	fb03 2300 	mla	r3, r3, r0, r2
 80207e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80207e6:	2300      	movs	r3, #0
 80207e8:	e018      	b.n	802081c <_strtod_l+0x264>
 80207ea:	4638      	mov	r0, r7
 80207ec:	e7da      	b.n	80207a4 <_strtod_l+0x1ec>
 80207ee:	2b08      	cmp	r3, #8
 80207f0:	f103 0301 	add.w	r3, r3, #1
 80207f4:	dc03      	bgt.n	80207fe <_strtod_l+0x246>
 80207f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80207f8:	434e      	muls	r6, r1
 80207fa:	960a      	str	r6, [sp, #40]	@ 0x28
 80207fc:	e7e7      	b.n	80207ce <_strtod_l+0x216>
 80207fe:	2b10      	cmp	r3, #16
 8020800:	bfde      	ittt	le
 8020802:	9e08      	ldrle	r6, [sp, #32]
 8020804:	434e      	mulle	r6, r1
 8020806:	9608      	strle	r6, [sp, #32]
 8020808:	e7e1      	b.n	80207ce <_strtod_l+0x216>
 802080a:	280f      	cmp	r0, #15
 802080c:	dceb      	bgt.n	80207e6 <_strtod_l+0x22e>
 802080e:	9808      	ldr	r0, [sp, #32]
 8020810:	230a      	movs	r3, #10
 8020812:	fb03 2300 	mla	r3, r3, r0, r2
 8020816:	9308      	str	r3, [sp, #32]
 8020818:	e7e5      	b.n	80207e6 <_strtod_l+0x22e>
 802081a:	4629      	mov	r1, r5
 802081c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802081e:	1c50      	adds	r0, r2, #1
 8020820:	9019      	str	r0, [sp, #100]	@ 0x64
 8020822:	7852      	ldrb	r2, [r2, #1]
 8020824:	4618      	mov	r0, r3
 8020826:	460d      	mov	r5, r1
 8020828:	e7b1      	b.n	802078e <_strtod_l+0x1d6>
 802082a:	f04f 0900 	mov.w	r9, #0
 802082e:	2301      	movs	r3, #1
 8020830:	e77d      	b.n	802072e <_strtod_l+0x176>
 8020832:	f04f 0c00 	mov.w	ip, #0
 8020836:	1ca2      	adds	r2, r4, #2
 8020838:	9219      	str	r2, [sp, #100]	@ 0x64
 802083a:	78a2      	ldrb	r2, [r4, #2]
 802083c:	e785      	b.n	802074a <_strtod_l+0x192>
 802083e:	f04f 0c01 	mov.w	ip, #1
 8020842:	e7f8      	b.n	8020836 <_strtod_l+0x27e>
 8020844:	08025708 	.word	0x08025708
 8020848:	080256f0 	.word	0x080256f0
 802084c:	7ff00000 	.word	0x7ff00000
 8020850:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020852:	1c51      	adds	r1, r2, #1
 8020854:	9119      	str	r1, [sp, #100]	@ 0x64
 8020856:	7852      	ldrb	r2, [r2, #1]
 8020858:	2a30      	cmp	r2, #48	@ 0x30
 802085a:	d0f9      	beq.n	8020850 <_strtod_l+0x298>
 802085c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8020860:	2908      	cmp	r1, #8
 8020862:	f63f af78 	bhi.w	8020756 <_strtod_l+0x19e>
 8020866:	3a30      	subs	r2, #48	@ 0x30
 8020868:	920e      	str	r2, [sp, #56]	@ 0x38
 802086a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802086c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802086e:	f04f 080a 	mov.w	r8, #10
 8020872:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020874:	1c56      	adds	r6, r2, #1
 8020876:	9619      	str	r6, [sp, #100]	@ 0x64
 8020878:	7852      	ldrb	r2, [r2, #1]
 802087a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 802087e:	f1be 0f09 	cmp.w	lr, #9
 8020882:	d939      	bls.n	80208f8 <_strtod_l+0x340>
 8020884:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020886:	1a76      	subs	r6, r6, r1
 8020888:	2e08      	cmp	r6, #8
 802088a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802088e:	dc03      	bgt.n	8020898 <_strtod_l+0x2e0>
 8020890:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020892:	4588      	cmp	r8, r1
 8020894:	bfa8      	it	ge
 8020896:	4688      	movge	r8, r1
 8020898:	f1bc 0f00 	cmp.w	ip, #0
 802089c:	d001      	beq.n	80208a2 <_strtod_l+0x2ea>
 802089e:	f1c8 0800 	rsb	r8, r8, #0
 80208a2:	2d00      	cmp	r5, #0
 80208a4:	d14e      	bne.n	8020944 <_strtod_l+0x38c>
 80208a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80208a8:	4308      	orrs	r0, r1
 80208aa:	f47f aebe 	bne.w	802062a <_strtod_l+0x72>
 80208ae:	2b00      	cmp	r3, #0
 80208b0:	f47f aed6 	bne.w	8020660 <_strtod_l+0xa8>
 80208b4:	2a69      	cmp	r2, #105	@ 0x69
 80208b6:	d028      	beq.n	802090a <_strtod_l+0x352>
 80208b8:	dc25      	bgt.n	8020906 <_strtod_l+0x34e>
 80208ba:	2a49      	cmp	r2, #73	@ 0x49
 80208bc:	d025      	beq.n	802090a <_strtod_l+0x352>
 80208be:	2a4e      	cmp	r2, #78	@ 0x4e
 80208c0:	f47f aece 	bne.w	8020660 <_strtod_l+0xa8>
 80208c4:	499b      	ldr	r1, [pc, #620]	@ (8020b34 <_strtod_l+0x57c>)
 80208c6:	a819      	add	r0, sp, #100	@ 0x64
 80208c8:	f001 fafa 	bl	8021ec0 <__match>
 80208cc:	2800      	cmp	r0, #0
 80208ce:	f43f aec7 	beq.w	8020660 <_strtod_l+0xa8>
 80208d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80208d4:	781b      	ldrb	r3, [r3, #0]
 80208d6:	2b28      	cmp	r3, #40	@ 0x28
 80208d8:	d12e      	bne.n	8020938 <_strtod_l+0x380>
 80208da:	4997      	ldr	r1, [pc, #604]	@ (8020b38 <_strtod_l+0x580>)
 80208dc:	aa1c      	add	r2, sp, #112	@ 0x70
 80208de:	a819      	add	r0, sp, #100	@ 0x64
 80208e0:	f001 fb02 	bl	8021ee8 <__hexnan>
 80208e4:	2805      	cmp	r0, #5
 80208e6:	d127      	bne.n	8020938 <_strtod_l+0x380>
 80208e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80208ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80208ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80208f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80208f6:	e698      	b.n	802062a <_strtod_l+0x72>
 80208f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80208fa:	fb08 2101 	mla	r1, r8, r1, r2
 80208fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8020902:	920e      	str	r2, [sp, #56]	@ 0x38
 8020904:	e7b5      	b.n	8020872 <_strtod_l+0x2ba>
 8020906:	2a6e      	cmp	r2, #110	@ 0x6e
 8020908:	e7da      	b.n	80208c0 <_strtod_l+0x308>
 802090a:	498c      	ldr	r1, [pc, #560]	@ (8020b3c <_strtod_l+0x584>)
 802090c:	a819      	add	r0, sp, #100	@ 0x64
 802090e:	f001 fad7 	bl	8021ec0 <__match>
 8020912:	2800      	cmp	r0, #0
 8020914:	f43f aea4 	beq.w	8020660 <_strtod_l+0xa8>
 8020918:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802091a:	4989      	ldr	r1, [pc, #548]	@ (8020b40 <_strtod_l+0x588>)
 802091c:	3b01      	subs	r3, #1
 802091e:	a819      	add	r0, sp, #100	@ 0x64
 8020920:	9319      	str	r3, [sp, #100]	@ 0x64
 8020922:	f001 facd 	bl	8021ec0 <__match>
 8020926:	b910      	cbnz	r0, 802092e <_strtod_l+0x376>
 8020928:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802092a:	3301      	adds	r3, #1
 802092c:	9319      	str	r3, [sp, #100]	@ 0x64
 802092e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020b50 <_strtod_l+0x598>
 8020932:	f04f 0a00 	mov.w	sl, #0
 8020936:	e678      	b.n	802062a <_strtod_l+0x72>
 8020938:	4882      	ldr	r0, [pc, #520]	@ (8020b44 <_strtod_l+0x58c>)
 802093a:	f001 f815 	bl	8021968 <nan>
 802093e:	ec5b ab10 	vmov	sl, fp, d0
 8020942:	e672      	b.n	802062a <_strtod_l+0x72>
 8020944:	eba8 0309 	sub.w	r3, r8, r9
 8020948:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802094a:	9309      	str	r3, [sp, #36]	@ 0x24
 802094c:	2f00      	cmp	r7, #0
 802094e:	bf08      	it	eq
 8020950:	462f      	moveq	r7, r5
 8020952:	2d10      	cmp	r5, #16
 8020954:	462c      	mov	r4, r5
 8020956:	bfa8      	it	ge
 8020958:	2410      	movge	r4, #16
 802095a:	f7df fdeb 	bl	8000534 <__aeabi_ui2d>
 802095e:	2d09      	cmp	r5, #9
 8020960:	4682      	mov	sl, r0
 8020962:	468b      	mov	fp, r1
 8020964:	dc13      	bgt.n	802098e <_strtod_l+0x3d6>
 8020966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020968:	2b00      	cmp	r3, #0
 802096a:	f43f ae5e 	beq.w	802062a <_strtod_l+0x72>
 802096e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020970:	dd78      	ble.n	8020a64 <_strtod_l+0x4ac>
 8020972:	2b16      	cmp	r3, #22
 8020974:	dc5f      	bgt.n	8020a36 <_strtod_l+0x47e>
 8020976:	4974      	ldr	r1, [pc, #464]	@ (8020b48 <_strtod_l+0x590>)
 8020978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802097c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020980:	4652      	mov	r2, sl
 8020982:	465b      	mov	r3, fp
 8020984:	f7df fe50 	bl	8000628 <__aeabi_dmul>
 8020988:	4682      	mov	sl, r0
 802098a:	468b      	mov	fp, r1
 802098c:	e64d      	b.n	802062a <_strtod_l+0x72>
 802098e:	4b6e      	ldr	r3, [pc, #440]	@ (8020b48 <_strtod_l+0x590>)
 8020990:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020994:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8020998:	f7df fe46 	bl	8000628 <__aeabi_dmul>
 802099c:	4682      	mov	sl, r0
 802099e:	9808      	ldr	r0, [sp, #32]
 80209a0:	468b      	mov	fp, r1
 80209a2:	f7df fdc7 	bl	8000534 <__aeabi_ui2d>
 80209a6:	4602      	mov	r2, r0
 80209a8:	460b      	mov	r3, r1
 80209aa:	4650      	mov	r0, sl
 80209ac:	4659      	mov	r1, fp
 80209ae:	f7df fc85 	bl	80002bc <__adddf3>
 80209b2:	2d0f      	cmp	r5, #15
 80209b4:	4682      	mov	sl, r0
 80209b6:	468b      	mov	fp, r1
 80209b8:	ddd5      	ble.n	8020966 <_strtod_l+0x3ae>
 80209ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209bc:	1b2c      	subs	r4, r5, r4
 80209be:	441c      	add	r4, r3
 80209c0:	2c00      	cmp	r4, #0
 80209c2:	f340 8096 	ble.w	8020af2 <_strtod_l+0x53a>
 80209c6:	f014 030f 	ands.w	r3, r4, #15
 80209ca:	d00a      	beq.n	80209e2 <_strtod_l+0x42a>
 80209cc:	495e      	ldr	r1, [pc, #376]	@ (8020b48 <_strtod_l+0x590>)
 80209ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80209d2:	4652      	mov	r2, sl
 80209d4:	465b      	mov	r3, fp
 80209d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80209da:	f7df fe25 	bl	8000628 <__aeabi_dmul>
 80209de:	4682      	mov	sl, r0
 80209e0:	468b      	mov	fp, r1
 80209e2:	f034 040f 	bics.w	r4, r4, #15
 80209e6:	d073      	beq.n	8020ad0 <_strtod_l+0x518>
 80209e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80209ec:	dd48      	ble.n	8020a80 <_strtod_l+0x4c8>
 80209ee:	2400      	movs	r4, #0
 80209f0:	46a0      	mov	r8, r4
 80209f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80209f4:	46a1      	mov	r9, r4
 80209f6:	9a05      	ldr	r2, [sp, #20]
 80209f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020b50 <_strtod_l+0x598>
 80209fc:	2322      	movs	r3, #34	@ 0x22
 80209fe:	6013      	str	r3, [r2, #0]
 8020a00:	f04f 0a00 	mov.w	sl, #0
 8020a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a06:	2b00      	cmp	r3, #0
 8020a08:	f43f ae0f 	beq.w	802062a <_strtod_l+0x72>
 8020a0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020a0e:	9805      	ldr	r0, [sp, #20]
 8020a10:	f7ff f940 	bl	801fc94 <_Bfree>
 8020a14:	9805      	ldr	r0, [sp, #20]
 8020a16:	4649      	mov	r1, r9
 8020a18:	f7ff f93c 	bl	801fc94 <_Bfree>
 8020a1c:	9805      	ldr	r0, [sp, #20]
 8020a1e:	4641      	mov	r1, r8
 8020a20:	f7ff f938 	bl	801fc94 <_Bfree>
 8020a24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020a26:	9805      	ldr	r0, [sp, #20]
 8020a28:	f7ff f934 	bl	801fc94 <_Bfree>
 8020a2c:	9805      	ldr	r0, [sp, #20]
 8020a2e:	4621      	mov	r1, r4
 8020a30:	f7ff f930 	bl	801fc94 <_Bfree>
 8020a34:	e5f9      	b.n	802062a <_strtod_l+0x72>
 8020a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8020a3c:	4293      	cmp	r3, r2
 8020a3e:	dbbc      	blt.n	80209ba <_strtod_l+0x402>
 8020a40:	4c41      	ldr	r4, [pc, #260]	@ (8020b48 <_strtod_l+0x590>)
 8020a42:	f1c5 050f 	rsb	r5, r5, #15
 8020a46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020a4a:	4652      	mov	r2, sl
 8020a4c:	465b      	mov	r3, fp
 8020a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a52:	f7df fde9 	bl	8000628 <__aeabi_dmul>
 8020a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a58:	1b5d      	subs	r5, r3, r5
 8020a5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020a5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8020a62:	e78f      	b.n	8020984 <_strtod_l+0x3cc>
 8020a64:	3316      	adds	r3, #22
 8020a66:	dba8      	blt.n	80209ba <_strtod_l+0x402>
 8020a68:	4b37      	ldr	r3, [pc, #220]	@ (8020b48 <_strtod_l+0x590>)
 8020a6a:	eba9 0808 	sub.w	r8, r9, r8
 8020a6e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8020a72:	e9d8 2300 	ldrd	r2, r3, [r8]
 8020a76:	4650      	mov	r0, sl
 8020a78:	4659      	mov	r1, fp
 8020a7a:	f7df feff 	bl	800087c <__aeabi_ddiv>
 8020a7e:	e783      	b.n	8020988 <_strtod_l+0x3d0>
 8020a80:	4b32      	ldr	r3, [pc, #200]	@ (8020b4c <_strtod_l+0x594>)
 8020a82:	9308      	str	r3, [sp, #32]
 8020a84:	2300      	movs	r3, #0
 8020a86:	1124      	asrs	r4, r4, #4
 8020a88:	4650      	mov	r0, sl
 8020a8a:	4659      	mov	r1, fp
 8020a8c:	461e      	mov	r6, r3
 8020a8e:	2c01      	cmp	r4, #1
 8020a90:	dc21      	bgt.n	8020ad6 <_strtod_l+0x51e>
 8020a92:	b10b      	cbz	r3, 8020a98 <_strtod_l+0x4e0>
 8020a94:	4682      	mov	sl, r0
 8020a96:	468b      	mov	fp, r1
 8020a98:	492c      	ldr	r1, [pc, #176]	@ (8020b4c <_strtod_l+0x594>)
 8020a9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8020a9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8020aa2:	4652      	mov	r2, sl
 8020aa4:	465b      	mov	r3, fp
 8020aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020aaa:	f7df fdbd 	bl	8000628 <__aeabi_dmul>
 8020aae:	4b28      	ldr	r3, [pc, #160]	@ (8020b50 <_strtod_l+0x598>)
 8020ab0:	460a      	mov	r2, r1
 8020ab2:	400b      	ands	r3, r1
 8020ab4:	4927      	ldr	r1, [pc, #156]	@ (8020b54 <_strtod_l+0x59c>)
 8020ab6:	428b      	cmp	r3, r1
 8020ab8:	4682      	mov	sl, r0
 8020aba:	d898      	bhi.n	80209ee <_strtod_l+0x436>
 8020abc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8020ac0:	428b      	cmp	r3, r1
 8020ac2:	bf86      	itte	hi
 8020ac4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020b58 <_strtod_l+0x5a0>
 8020ac8:	f04f 3aff 	movhi.w	sl, #4294967295
 8020acc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8020ad0:	2300      	movs	r3, #0
 8020ad2:	9308      	str	r3, [sp, #32]
 8020ad4:	e07a      	b.n	8020bcc <_strtod_l+0x614>
 8020ad6:	07e2      	lsls	r2, r4, #31
 8020ad8:	d505      	bpl.n	8020ae6 <_strtod_l+0x52e>
 8020ada:	9b08      	ldr	r3, [sp, #32]
 8020adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ae0:	f7df fda2 	bl	8000628 <__aeabi_dmul>
 8020ae4:	2301      	movs	r3, #1
 8020ae6:	9a08      	ldr	r2, [sp, #32]
 8020ae8:	3208      	adds	r2, #8
 8020aea:	3601      	adds	r6, #1
 8020aec:	1064      	asrs	r4, r4, #1
 8020aee:	9208      	str	r2, [sp, #32]
 8020af0:	e7cd      	b.n	8020a8e <_strtod_l+0x4d6>
 8020af2:	d0ed      	beq.n	8020ad0 <_strtod_l+0x518>
 8020af4:	4264      	negs	r4, r4
 8020af6:	f014 020f 	ands.w	r2, r4, #15
 8020afa:	d00a      	beq.n	8020b12 <_strtod_l+0x55a>
 8020afc:	4b12      	ldr	r3, [pc, #72]	@ (8020b48 <_strtod_l+0x590>)
 8020afe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020b02:	4650      	mov	r0, sl
 8020b04:	4659      	mov	r1, fp
 8020b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b0a:	f7df feb7 	bl	800087c <__aeabi_ddiv>
 8020b0e:	4682      	mov	sl, r0
 8020b10:	468b      	mov	fp, r1
 8020b12:	1124      	asrs	r4, r4, #4
 8020b14:	d0dc      	beq.n	8020ad0 <_strtod_l+0x518>
 8020b16:	2c1f      	cmp	r4, #31
 8020b18:	dd20      	ble.n	8020b5c <_strtod_l+0x5a4>
 8020b1a:	2400      	movs	r4, #0
 8020b1c:	46a0      	mov	r8, r4
 8020b1e:	940a      	str	r4, [sp, #40]	@ 0x28
 8020b20:	46a1      	mov	r9, r4
 8020b22:	9a05      	ldr	r2, [sp, #20]
 8020b24:	2322      	movs	r3, #34	@ 0x22
 8020b26:	f04f 0a00 	mov.w	sl, #0
 8020b2a:	f04f 0b00 	mov.w	fp, #0
 8020b2e:	6013      	str	r3, [r2, #0]
 8020b30:	e768      	b.n	8020a04 <_strtod_l+0x44c>
 8020b32:	bf00      	nop
 8020b34:	0802544a 	.word	0x0802544a
 8020b38:	080256f4 	.word	0x080256f4
 8020b3c:	08025442 	.word	0x08025442
 8020b40:	08025526 	.word	0x08025526
 8020b44:	08025522 	.word	0x08025522
 8020b48:	08025628 	.word	0x08025628
 8020b4c:	08025600 	.word	0x08025600
 8020b50:	7ff00000 	.word	0x7ff00000
 8020b54:	7ca00000 	.word	0x7ca00000
 8020b58:	7fefffff 	.word	0x7fefffff
 8020b5c:	f014 0310 	ands.w	r3, r4, #16
 8020b60:	bf18      	it	ne
 8020b62:	236a      	movne	r3, #106	@ 0x6a
 8020b64:	4ea9      	ldr	r6, [pc, #676]	@ (8020e0c <_strtod_l+0x854>)
 8020b66:	9308      	str	r3, [sp, #32]
 8020b68:	4650      	mov	r0, sl
 8020b6a:	4659      	mov	r1, fp
 8020b6c:	2300      	movs	r3, #0
 8020b6e:	07e2      	lsls	r2, r4, #31
 8020b70:	d504      	bpl.n	8020b7c <_strtod_l+0x5c4>
 8020b72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020b76:	f7df fd57 	bl	8000628 <__aeabi_dmul>
 8020b7a:	2301      	movs	r3, #1
 8020b7c:	1064      	asrs	r4, r4, #1
 8020b7e:	f106 0608 	add.w	r6, r6, #8
 8020b82:	d1f4      	bne.n	8020b6e <_strtod_l+0x5b6>
 8020b84:	b10b      	cbz	r3, 8020b8a <_strtod_l+0x5d2>
 8020b86:	4682      	mov	sl, r0
 8020b88:	468b      	mov	fp, r1
 8020b8a:	9b08      	ldr	r3, [sp, #32]
 8020b8c:	b1b3      	cbz	r3, 8020bbc <_strtod_l+0x604>
 8020b8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8020b92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8020b96:	2b00      	cmp	r3, #0
 8020b98:	4659      	mov	r1, fp
 8020b9a:	dd0f      	ble.n	8020bbc <_strtod_l+0x604>
 8020b9c:	2b1f      	cmp	r3, #31
 8020b9e:	dd55      	ble.n	8020c4c <_strtod_l+0x694>
 8020ba0:	2b34      	cmp	r3, #52	@ 0x34
 8020ba2:	bfde      	ittt	le
 8020ba4:	f04f 33ff 	movle.w	r3, #4294967295
 8020ba8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8020bac:	4093      	lslle	r3, r2
 8020bae:	f04f 0a00 	mov.w	sl, #0
 8020bb2:	bfcc      	ite	gt
 8020bb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8020bb8:	ea03 0b01 	andle.w	fp, r3, r1
 8020bbc:	2200      	movs	r2, #0
 8020bbe:	2300      	movs	r3, #0
 8020bc0:	4650      	mov	r0, sl
 8020bc2:	4659      	mov	r1, fp
 8020bc4:	f7df ff98 	bl	8000af8 <__aeabi_dcmpeq>
 8020bc8:	2800      	cmp	r0, #0
 8020bca:	d1a6      	bne.n	8020b1a <_strtod_l+0x562>
 8020bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020bce:	9300      	str	r3, [sp, #0]
 8020bd0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020bd2:	9805      	ldr	r0, [sp, #20]
 8020bd4:	462b      	mov	r3, r5
 8020bd6:	463a      	mov	r2, r7
 8020bd8:	f7ff f8c4 	bl	801fd64 <__s2b>
 8020bdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8020bde:	2800      	cmp	r0, #0
 8020be0:	f43f af05 	beq.w	80209ee <_strtod_l+0x436>
 8020be4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020be6:	2a00      	cmp	r2, #0
 8020be8:	eba9 0308 	sub.w	r3, r9, r8
 8020bec:	bfa8      	it	ge
 8020bee:	2300      	movge	r3, #0
 8020bf0:	9312      	str	r3, [sp, #72]	@ 0x48
 8020bf2:	2400      	movs	r4, #0
 8020bf4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8020bf8:	9316      	str	r3, [sp, #88]	@ 0x58
 8020bfa:	46a0      	mov	r8, r4
 8020bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020bfe:	9805      	ldr	r0, [sp, #20]
 8020c00:	6859      	ldr	r1, [r3, #4]
 8020c02:	f7ff f807 	bl	801fc14 <_Balloc>
 8020c06:	4681      	mov	r9, r0
 8020c08:	2800      	cmp	r0, #0
 8020c0a:	f43f aef4 	beq.w	80209f6 <_strtod_l+0x43e>
 8020c0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c10:	691a      	ldr	r2, [r3, #16]
 8020c12:	3202      	adds	r2, #2
 8020c14:	f103 010c 	add.w	r1, r3, #12
 8020c18:	0092      	lsls	r2, r2, #2
 8020c1a:	300c      	adds	r0, #12
 8020c1c:	f7fe f931 	bl	801ee82 <memcpy>
 8020c20:	ec4b ab10 	vmov	d0, sl, fp
 8020c24:	9805      	ldr	r0, [sp, #20]
 8020c26:	aa1c      	add	r2, sp, #112	@ 0x70
 8020c28:	a91b      	add	r1, sp, #108	@ 0x6c
 8020c2a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8020c2e:	f7ff fbd5 	bl	80203dc <__d2b>
 8020c32:	901a      	str	r0, [sp, #104]	@ 0x68
 8020c34:	2800      	cmp	r0, #0
 8020c36:	f43f aede 	beq.w	80209f6 <_strtod_l+0x43e>
 8020c3a:	9805      	ldr	r0, [sp, #20]
 8020c3c:	2101      	movs	r1, #1
 8020c3e:	f7ff f927 	bl	801fe90 <__i2b>
 8020c42:	4680      	mov	r8, r0
 8020c44:	b948      	cbnz	r0, 8020c5a <_strtod_l+0x6a2>
 8020c46:	f04f 0800 	mov.w	r8, #0
 8020c4a:	e6d4      	b.n	80209f6 <_strtod_l+0x43e>
 8020c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8020c50:	fa02 f303 	lsl.w	r3, r2, r3
 8020c54:	ea03 0a0a 	and.w	sl, r3, sl
 8020c58:	e7b0      	b.n	8020bbc <_strtod_l+0x604>
 8020c5a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8020c5c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020c5e:	2d00      	cmp	r5, #0
 8020c60:	bfab      	itete	ge
 8020c62:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8020c64:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8020c66:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020c68:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8020c6a:	bfac      	ite	ge
 8020c6c:	18ef      	addge	r7, r5, r3
 8020c6e:	1b5e      	sublt	r6, r3, r5
 8020c70:	9b08      	ldr	r3, [sp, #32]
 8020c72:	1aed      	subs	r5, r5, r3
 8020c74:	4415      	add	r5, r2
 8020c76:	4b66      	ldr	r3, [pc, #408]	@ (8020e10 <_strtod_l+0x858>)
 8020c78:	3d01      	subs	r5, #1
 8020c7a:	429d      	cmp	r5, r3
 8020c7c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020c80:	da50      	bge.n	8020d24 <_strtod_l+0x76c>
 8020c82:	1b5b      	subs	r3, r3, r5
 8020c84:	2b1f      	cmp	r3, #31
 8020c86:	eba2 0203 	sub.w	r2, r2, r3
 8020c8a:	f04f 0101 	mov.w	r1, #1
 8020c8e:	dc3d      	bgt.n	8020d0c <_strtod_l+0x754>
 8020c90:	fa01 f303 	lsl.w	r3, r1, r3
 8020c94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020c96:	2300      	movs	r3, #0
 8020c98:	9310      	str	r3, [sp, #64]	@ 0x40
 8020c9a:	18bd      	adds	r5, r7, r2
 8020c9c:	9b08      	ldr	r3, [sp, #32]
 8020c9e:	42af      	cmp	r7, r5
 8020ca0:	4416      	add	r6, r2
 8020ca2:	441e      	add	r6, r3
 8020ca4:	463b      	mov	r3, r7
 8020ca6:	bfa8      	it	ge
 8020ca8:	462b      	movge	r3, r5
 8020caa:	42b3      	cmp	r3, r6
 8020cac:	bfa8      	it	ge
 8020cae:	4633      	movge	r3, r6
 8020cb0:	2b00      	cmp	r3, #0
 8020cb2:	bfc2      	ittt	gt
 8020cb4:	1aed      	subgt	r5, r5, r3
 8020cb6:	1af6      	subgt	r6, r6, r3
 8020cb8:	1aff      	subgt	r7, r7, r3
 8020cba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	dd16      	ble.n	8020cee <_strtod_l+0x736>
 8020cc0:	4641      	mov	r1, r8
 8020cc2:	9805      	ldr	r0, [sp, #20]
 8020cc4:	461a      	mov	r2, r3
 8020cc6:	f7ff f9a3 	bl	8020010 <__pow5mult>
 8020cca:	4680      	mov	r8, r0
 8020ccc:	2800      	cmp	r0, #0
 8020cce:	d0ba      	beq.n	8020c46 <_strtod_l+0x68e>
 8020cd0:	4601      	mov	r1, r0
 8020cd2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020cd4:	9805      	ldr	r0, [sp, #20]
 8020cd6:	f7ff f8f1 	bl	801febc <__multiply>
 8020cda:	900e      	str	r0, [sp, #56]	@ 0x38
 8020cdc:	2800      	cmp	r0, #0
 8020cde:	f43f ae8a 	beq.w	80209f6 <_strtod_l+0x43e>
 8020ce2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020ce4:	9805      	ldr	r0, [sp, #20]
 8020ce6:	f7fe ffd5 	bl	801fc94 <_Bfree>
 8020cea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020cec:	931a      	str	r3, [sp, #104]	@ 0x68
 8020cee:	2d00      	cmp	r5, #0
 8020cf0:	dc1d      	bgt.n	8020d2e <_strtod_l+0x776>
 8020cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cf4:	2b00      	cmp	r3, #0
 8020cf6:	dd23      	ble.n	8020d40 <_strtod_l+0x788>
 8020cf8:	4649      	mov	r1, r9
 8020cfa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020cfc:	9805      	ldr	r0, [sp, #20]
 8020cfe:	f7ff f987 	bl	8020010 <__pow5mult>
 8020d02:	4681      	mov	r9, r0
 8020d04:	b9e0      	cbnz	r0, 8020d40 <_strtod_l+0x788>
 8020d06:	f04f 0900 	mov.w	r9, #0
 8020d0a:	e674      	b.n	80209f6 <_strtod_l+0x43e>
 8020d0c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020d10:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8020d14:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020d18:	35e2      	adds	r5, #226	@ 0xe2
 8020d1a:	fa01 f305 	lsl.w	r3, r1, r5
 8020d1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8020d20:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020d22:	e7ba      	b.n	8020c9a <_strtod_l+0x6e2>
 8020d24:	2300      	movs	r3, #0
 8020d26:	9310      	str	r3, [sp, #64]	@ 0x40
 8020d28:	2301      	movs	r3, #1
 8020d2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020d2c:	e7b5      	b.n	8020c9a <_strtod_l+0x6e2>
 8020d2e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020d30:	9805      	ldr	r0, [sp, #20]
 8020d32:	462a      	mov	r2, r5
 8020d34:	f7ff f9c6 	bl	80200c4 <__lshift>
 8020d38:	901a      	str	r0, [sp, #104]	@ 0x68
 8020d3a:	2800      	cmp	r0, #0
 8020d3c:	d1d9      	bne.n	8020cf2 <_strtod_l+0x73a>
 8020d3e:	e65a      	b.n	80209f6 <_strtod_l+0x43e>
 8020d40:	2e00      	cmp	r6, #0
 8020d42:	dd07      	ble.n	8020d54 <_strtod_l+0x79c>
 8020d44:	4649      	mov	r1, r9
 8020d46:	9805      	ldr	r0, [sp, #20]
 8020d48:	4632      	mov	r2, r6
 8020d4a:	f7ff f9bb 	bl	80200c4 <__lshift>
 8020d4e:	4681      	mov	r9, r0
 8020d50:	2800      	cmp	r0, #0
 8020d52:	d0d8      	beq.n	8020d06 <_strtod_l+0x74e>
 8020d54:	2f00      	cmp	r7, #0
 8020d56:	dd08      	ble.n	8020d6a <_strtod_l+0x7b2>
 8020d58:	4641      	mov	r1, r8
 8020d5a:	9805      	ldr	r0, [sp, #20]
 8020d5c:	463a      	mov	r2, r7
 8020d5e:	f7ff f9b1 	bl	80200c4 <__lshift>
 8020d62:	4680      	mov	r8, r0
 8020d64:	2800      	cmp	r0, #0
 8020d66:	f43f ae46 	beq.w	80209f6 <_strtod_l+0x43e>
 8020d6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020d6c:	9805      	ldr	r0, [sp, #20]
 8020d6e:	464a      	mov	r2, r9
 8020d70:	f7ff fa30 	bl	80201d4 <__mdiff>
 8020d74:	4604      	mov	r4, r0
 8020d76:	2800      	cmp	r0, #0
 8020d78:	f43f ae3d 	beq.w	80209f6 <_strtod_l+0x43e>
 8020d7c:	68c3      	ldr	r3, [r0, #12]
 8020d7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020d80:	2300      	movs	r3, #0
 8020d82:	60c3      	str	r3, [r0, #12]
 8020d84:	4641      	mov	r1, r8
 8020d86:	f7ff fa09 	bl	802019c <__mcmp>
 8020d8a:	2800      	cmp	r0, #0
 8020d8c:	da46      	bge.n	8020e1c <_strtod_l+0x864>
 8020d8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020d90:	ea53 030a 	orrs.w	r3, r3, sl
 8020d94:	d16c      	bne.n	8020e70 <_strtod_l+0x8b8>
 8020d96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	d168      	bne.n	8020e70 <_strtod_l+0x8b8>
 8020d9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020da2:	0d1b      	lsrs	r3, r3, #20
 8020da4:	051b      	lsls	r3, r3, #20
 8020da6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020daa:	d961      	bls.n	8020e70 <_strtod_l+0x8b8>
 8020dac:	6963      	ldr	r3, [r4, #20]
 8020dae:	b913      	cbnz	r3, 8020db6 <_strtod_l+0x7fe>
 8020db0:	6923      	ldr	r3, [r4, #16]
 8020db2:	2b01      	cmp	r3, #1
 8020db4:	dd5c      	ble.n	8020e70 <_strtod_l+0x8b8>
 8020db6:	4621      	mov	r1, r4
 8020db8:	2201      	movs	r2, #1
 8020dba:	9805      	ldr	r0, [sp, #20]
 8020dbc:	f7ff f982 	bl	80200c4 <__lshift>
 8020dc0:	4641      	mov	r1, r8
 8020dc2:	4604      	mov	r4, r0
 8020dc4:	f7ff f9ea 	bl	802019c <__mcmp>
 8020dc8:	2800      	cmp	r0, #0
 8020dca:	dd51      	ble.n	8020e70 <_strtod_l+0x8b8>
 8020dcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020dd0:	9a08      	ldr	r2, [sp, #32]
 8020dd2:	0d1b      	lsrs	r3, r3, #20
 8020dd4:	051b      	lsls	r3, r3, #20
 8020dd6:	2a00      	cmp	r2, #0
 8020dd8:	d06b      	beq.n	8020eb2 <_strtod_l+0x8fa>
 8020dda:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020dde:	d868      	bhi.n	8020eb2 <_strtod_l+0x8fa>
 8020de0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8020de4:	f67f ae9d 	bls.w	8020b22 <_strtod_l+0x56a>
 8020de8:	4b0a      	ldr	r3, [pc, #40]	@ (8020e14 <_strtod_l+0x85c>)
 8020dea:	4650      	mov	r0, sl
 8020dec:	4659      	mov	r1, fp
 8020dee:	2200      	movs	r2, #0
 8020df0:	f7df fc1a 	bl	8000628 <__aeabi_dmul>
 8020df4:	4b08      	ldr	r3, [pc, #32]	@ (8020e18 <_strtod_l+0x860>)
 8020df6:	400b      	ands	r3, r1
 8020df8:	4682      	mov	sl, r0
 8020dfa:	468b      	mov	fp, r1
 8020dfc:	2b00      	cmp	r3, #0
 8020dfe:	f47f ae05 	bne.w	8020a0c <_strtod_l+0x454>
 8020e02:	9a05      	ldr	r2, [sp, #20]
 8020e04:	2322      	movs	r3, #34	@ 0x22
 8020e06:	6013      	str	r3, [r2, #0]
 8020e08:	e600      	b.n	8020a0c <_strtod_l+0x454>
 8020e0a:	bf00      	nop
 8020e0c:	08025720 	.word	0x08025720
 8020e10:	fffffc02 	.word	0xfffffc02
 8020e14:	39500000 	.word	0x39500000
 8020e18:	7ff00000 	.word	0x7ff00000
 8020e1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020e20:	d165      	bne.n	8020eee <_strtod_l+0x936>
 8020e22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020e24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020e28:	b35a      	cbz	r2, 8020e82 <_strtod_l+0x8ca>
 8020e2a:	4a9f      	ldr	r2, [pc, #636]	@ (80210a8 <_strtod_l+0xaf0>)
 8020e2c:	4293      	cmp	r3, r2
 8020e2e:	d12b      	bne.n	8020e88 <_strtod_l+0x8d0>
 8020e30:	9b08      	ldr	r3, [sp, #32]
 8020e32:	4651      	mov	r1, sl
 8020e34:	b303      	cbz	r3, 8020e78 <_strtod_l+0x8c0>
 8020e36:	4b9d      	ldr	r3, [pc, #628]	@ (80210ac <_strtod_l+0xaf4>)
 8020e38:	465a      	mov	r2, fp
 8020e3a:	4013      	ands	r3, r2
 8020e3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020e40:	f04f 32ff 	mov.w	r2, #4294967295
 8020e44:	d81b      	bhi.n	8020e7e <_strtod_l+0x8c6>
 8020e46:	0d1b      	lsrs	r3, r3, #20
 8020e48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8020e50:	4299      	cmp	r1, r3
 8020e52:	d119      	bne.n	8020e88 <_strtod_l+0x8d0>
 8020e54:	4b96      	ldr	r3, [pc, #600]	@ (80210b0 <_strtod_l+0xaf8>)
 8020e56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020e58:	429a      	cmp	r2, r3
 8020e5a:	d102      	bne.n	8020e62 <_strtod_l+0x8aa>
 8020e5c:	3101      	adds	r1, #1
 8020e5e:	f43f adca 	beq.w	80209f6 <_strtod_l+0x43e>
 8020e62:	4b92      	ldr	r3, [pc, #584]	@ (80210ac <_strtod_l+0xaf4>)
 8020e64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020e66:	401a      	ands	r2, r3
 8020e68:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8020e6c:	f04f 0a00 	mov.w	sl, #0
 8020e70:	9b08      	ldr	r3, [sp, #32]
 8020e72:	2b00      	cmp	r3, #0
 8020e74:	d1b8      	bne.n	8020de8 <_strtod_l+0x830>
 8020e76:	e5c9      	b.n	8020a0c <_strtod_l+0x454>
 8020e78:	f04f 33ff 	mov.w	r3, #4294967295
 8020e7c:	e7e8      	b.n	8020e50 <_strtod_l+0x898>
 8020e7e:	4613      	mov	r3, r2
 8020e80:	e7e6      	b.n	8020e50 <_strtod_l+0x898>
 8020e82:	ea53 030a 	orrs.w	r3, r3, sl
 8020e86:	d0a1      	beq.n	8020dcc <_strtod_l+0x814>
 8020e88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e8a:	b1db      	cbz	r3, 8020ec4 <_strtod_l+0x90c>
 8020e8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020e8e:	4213      	tst	r3, r2
 8020e90:	d0ee      	beq.n	8020e70 <_strtod_l+0x8b8>
 8020e92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e94:	9a08      	ldr	r2, [sp, #32]
 8020e96:	4650      	mov	r0, sl
 8020e98:	4659      	mov	r1, fp
 8020e9a:	b1bb      	cbz	r3, 8020ecc <_strtod_l+0x914>
 8020e9c:	f7ff fb6c 	bl	8020578 <sulp>
 8020ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020ea4:	ec53 2b10 	vmov	r2, r3, d0
 8020ea8:	f7df fa08 	bl	80002bc <__adddf3>
 8020eac:	4682      	mov	sl, r0
 8020eae:	468b      	mov	fp, r1
 8020eb0:	e7de      	b.n	8020e70 <_strtod_l+0x8b8>
 8020eb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8020eb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020eba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020ebe:	f04f 3aff 	mov.w	sl, #4294967295
 8020ec2:	e7d5      	b.n	8020e70 <_strtod_l+0x8b8>
 8020ec4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020ec6:	ea13 0f0a 	tst.w	r3, sl
 8020eca:	e7e1      	b.n	8020e90 <_strtod_l+0x8d8>
 8020ecc:	f7ff fb54 	bl	8020578 <sulp>
 8020ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020ed4:	ec53 2b10 	vmov	r2, r3, d0
 8020ed8:	f7df f9ee 	bl	80002b8 <__aeabi_dsub>
 8020edc:	2200      	movs	r2, #0
 8020ede:	2300      	movs	r3, #0
 8020ee0:	4682      	mov	sl, r0
 8020ee2:	468b      	mov	fp, r1
 8020ee4:	f7df fe08 	bl	8000af8 <__aeabi_dcmpeq>
 8020ee8:	2800      	cmp	r0, #0
 8020eea:	d0c1      	beq.n	8020e70 <_strtod_l+0x8b8>
 8020eec:	e619      	b.n	8020b22 <_strtod_l+0x56a>
 8020eee:	4641      	mov	r1, r8
 8020ef0:	4620      	mov	r0, r4
 8020ef2:	f7ff facb 	bl	802048c <__ratio>
 8020ef6:	ec57 6b10 	vmov	r6, r7, d0
 8020efa:	2200      	movs	r2, #0
 8020efc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020f00:	4630      	mov	r0, r6
 8020f02:	4639      	mov	r1, r7
 8020f04:	f7df fe0c 	bl	8000b20 <__aeabi_dcmple>
 8020f08:	2800      	cmp	r0, #0
 8020f0a:	d06f      	beq.n	8020fec <_strtod_l+0xa34>
 8020f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	d17a      	bne.n	8021008 <_strtod_l+0xa50>
 8020f12:	f1ba 0f00 	cmp.w	sl, #0
 8020f16:	d158      	bne.n	8020fca <_strtod_l+0xa12>
 8020f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	d15a      	bne.n	8020fd8 <_strtod_l+0xa20>
 8020f22:	4b64      	ldr	r3, [pc, #400]	@ (80210b4 <_strtod_l+0xafc>)
 8020f24:	2200      	movs	r2, #0
 8020f26:	4630      	mov	r0, r6
 8020f28:	4639      	mov	r1, r7
 8020f2a:	f7df fdef 	bl	8000b0c <__aeabi_dcmplt>
 8020f2e:	2800      	cmp	r0, #0
 8020f30:	d159      	bne.n	8020fe6 <_strtod_l+0xa2e>
 8020f32:	4630      	mov	r0, r6
 8020f34:	4639      	mov	r1, r7
 8020f36:	4b60      	ldr	r3, [pc, #384]	@ (80210b8 <_strtod_l+0xb00>)
 8020f38:	2200      	movs	r2, #0
 8020f3a:	f7df fb75 	bl	8000628 <__aeabi_dmul>
 8020f3e:	4606      	mov	r6, r0
 8020f40:	460f      	mov	r7, r1
 8020f42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8020f46:	9606      	str	r6, [sp, #24]
 8020f48:	9307      	str	r3, [sp, #28]
 8020f4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020f4e:	4d57      	ldr	r5, [pc, #348]	@ (80210ac <_strtod_l+0xaf4>)
 8020f50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020f54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f56:	401d      	ands	r5, r3
 8020f58:	4b58      	ldr	r3, [pc, #352]	@ (80210bc <_strtod_l+0xb04>)
 8020f5a:	429d      	cmp	r5, r3
 8020f5c:	f040 80b2 	bne.w	80210c4 <_strtod_l+0xb0c>
 8020f60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8020f66:	ec4b ab10 	vmov	d0, sl, fp
 8020f6a:	f7ff f9c7 	bl	80202fc <__ulp>
 8020f6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020f72:	ec51 0b10 	vmov	r0, r1, d0
 8020f76:	f7df fb57 	bl	8000628 <__aeabi_dmul>
 8020f7a:	4652      	mov	r2, sl
 8020f7c:	465b      	mov	r3, fp
 8020f7e:	f7df f99d 	bl	80002bc <__adddf3>
 8020f82:	460b      	mov	r3, r1
 8020f84:	4949      	ldr	r1, [pc, #292]	@ (80210ac <_strtod_l+0xaf4>)
 8020f86:	4a4e      	ldr	r2, [pc, #312]	@ (80210c0 <_strtod_l+0xb08>)
 8020f88:	4019      	ands	r1, r3
 8020f8a:	4291      	cmp	r1, r2
 8020f8c:	4682      	mov	sl, r0
 8020f8e:	d942      	bls.n	8021016 <_strtod_l+0xa5e>
 8020f90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020f92:	4b47      	ldr	r3, [pc, #284]	@ (80210b0 <_strtod_l+0xaf8>)
 8020f94:	429a      	cmp	r2, r3
 8020f96:	d103      	bne.n	8020fa0 <_strtod_l+0x9e8>
 8020f98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020f9a:	3301      	adds	r3, #1
 8020f9c:	f43f ad2b 	beq.w	80209f6 <_strtod_l+0x43e>
 8020fa0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80210b0 <_strtod_l+0xaf8>
 8020fa4:	f04f 3aff 	mov.w	sl, #4294967295
 8020fa8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020faa:	9805      	ldr	r0, [sp, #20]
 8020fac:	f7fe fe72 	bl	801fc94 <_Bfree>
 8020fb0:	9805      	ldr	r0, [sp, #20]
 8020fb2:	4649      	mov	r1, r9
 8020fb4:	f7fe fe6e 	bl	801fc94 <_Bfree>
 8020fb8:	9805      	ldr	r0, [sp, #20]
 8020fba:	4641      	mov	r1, r8
 8020fbc:	f7fe fe6a 	bl	801fc94 <_Bfree>
 8020fc0:	9805      	ldr	r0, [sp, #20]
 8020fc2:	4621      	mov	r1, r4
 8020fc4:	f7fe fe66 	bl	801fc94 <_Bfree>
 8020fc8:	e618      	b.n	8020bfc <_strtod_l+0x644>
 8020fca:	f1ba 0f01 	cmp.w	sl, #1
 8020fce:	d103      	bne.n	8020fd8 <_strtod_l+0xa20>
 8020fd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	f43f ada5 	beq.w	8020b22 <_strtod_l+0x56a>
 8020fd8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8021088 <_strtod_l+0xad0>
 8020fdc:	4f35      	ldr	r7, [pc, #212]	@ (80210b4 <_strtod_l+0xafc>)
 8020fde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020fe2:	2600      	movs	r6, #0
 8020fe4:	e7b1      	b.n	8020f4a <_strtod_l+0x992>
 8020fe6:	4f34      	ldr	r7, [pc, #208]	@ (80210b8 <_strtod_l+0xb00>)
 8020fe8:	2600      	movs	r6, #0
 8020fea:	e7aa      	b.n	8020f42 <_strtod_l+0x98a>
 8020fec:	4b32      	ldr	r3, [pc, #200]	@ (80210b8 <_strtod_l+0xb00>)
 8020fee:	4630      	mov	r0, r6
 8020ff0:	4639      	mov	r1, r7
 8020ff2:	2200      	movs	r2, #0
 8020ff4:	f7df fb18 	bl	8000628 <__aeabi_dmul>
 8020ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020ffa:	4606      	mov	r6, r0
 8020ffc:	460f      	mov	r7, r1
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	d09f      	beq.n	8020f42 <_strtod_l+0x98a>
 8021002:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8021006:	e7a0      	b.n	8020f4a <_strtod_l+0x992>
 8021008:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8021090 <_strtod_l+0xad8>
 802100c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021010:	ec57 6b17 	vmov	r6, r7, d7
 8021014:	e799      	b.n	8020f4a <_strtod_l+0x992>
 8021016:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802101a:	9b08      	ldr	r3, [sp, #32]
 802101c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8021020:	2b00      	cmp	r3, #0
 8021022:	d1c1      	bne.n	8020fa8 <_strtod_l+0x9f0>
 8021024:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8021028:	0d1b      	lsrs	r3, r3, #20
 802102a:	051b      	lsls	r3, r3, #20
 802102c:	429d      	cmp	r5, r3
 802102e:	d1bb      	bne.n	8020fa8 <_strtod_l+0x9f0>
 8021030:	4630      	mov	r0, r6
 8021032:	4639      	mov	r1, r7
 8021034:	f7df fe58 	bl	8000ce8 <__aeabi_d2lz>
 8021038:	f7df fac8 	bl	80005cc <__aeabi_l2d>
 802103c:	4602      	mov	r2, r0
 802103e:	460b      	mov	r3, r1
 8021040:	4630      	mov	r0, r6
 8021042:	4639      	mov	r1, r7
 8021044:	f7df f938 	bl	80002b8 <__aeabi_dsub>
 8021048:	460b      	mov	r3, r1
 802104a:	4602      	mov	r2, r0
 802104c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8021050:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8021054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021056:	ea46 060a 	orr.w	r6, r6, sl
 802105a:	431e      	orrs	r6, r3
 802105c:	d06f      	beq.n	802113e <_strtod_l+0xb86>
 802105e:	a30e      	add	r3, pc, #56	@ (adr r3, 8021098 <_strtod_l+0xae0>)
 8021060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021064:	f7df fd52 	bl	8000b0c <__aeabi_dcmplt>
 8021068:	2800      	cmp	r0, #0
 802106a:	f47f accf 	bne.w	8020a0c <_strtod_l+0x454>
 802106e:	a30c      	add	r3, pc, #48	@ (adr r3, 80210a0 <_strtod_l+0xae8>)
 8021070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021074:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8021078:	f7df fd66 	bl	8000b48 <__aeabi_dcmpgt>
 802107c:	2800      	cmp	r0, #0
 802107e:	d093      	beq.n	8020fa8 <_strtod_l+0x9f0>
 8021080:	e4c4      	b.n	8020a0c <_strtod_l+0x454>
 8021082:	bf00      	nop
 8021084:	f3af 8000 	nop.w
 8021088:	00000000 	.word	0x00000000
 802108c:	bff00000 	.word	0xbff00000
 8021090:	00000000 	.word	0x00000000
 8021094:	3ff00000 	.word	0x3ff00000
 8021098:	94a03595 	.word	0x94a03595
 802109c:	3fdfffff 	.word	0x3fdfffff
 80210a0:	35afe535 	.word	0x35afe535
 80210a4:	3fe00000 	.word	0x3fe00000
 80210a8:	000fffff 	.word	0x000fffff
 80210ac:	7ff00000 	.word	0x7ff00000
 80210b0:	7fefffff 	.word	0x7fefffff
 80210b4:	3ff00000 	.word	0x3ff00000
 80210b8:	3fe00000 	.word	0x3fe00000
 80210bc:	7fe00000 	.word	0x7fe00000
 80210c0:	7c9fffff 	.word	0x7c9fffff
 80210c4:	9b08      	ldr	r3, [sp, #32]
 80210c6:	b323      	cbz	r3, 8021112 <_strtod_l+0xb5a>
 80210c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80210cc:	d821      	bhi.n	8021112 <_strtod_l+0xb5a>
 80210ce:	a328      	add	r3, pc, #160	@ (adr r3, 8021170 <_strtod_l+0xbb8>)
 80210d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210d4:	4630      	mov	r0, r6
 80210d6:	4639      	mov	r1, r7
 80210d8:	f7df fd22 	bl	8000b20 <__aeabi_dcmple>
 80210dc:	b1a0      	cbz	r0, 8021108 <_strtod_l+0xb50>
 80210de:	4639      	mov	r1, r7
 80210e0:	4630      	mov	r0, r6
 80210e2:	f7df fd79 	bl	8000bd8 <__aeabi_d2uiz>
 80210e6:	2801      	cmp	r0, #1
 80210e8:	bf38      	it	cc
 80210ea:	2001      	movcc	r0, #1
 80210ec:	f7df fa22 	bl	8000534 <__aeabi_ui2d>
 80210f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80210f2:	4606      	mov	r6, r0
 80210f4:	460f      	mov	r7, r1
 80210f6:	b9fb      	cbnz	r3, 8021138 <_strtod_l+0xb80>
 80210f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80210fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80210fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8021100:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8021104:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8021108:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802110a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802110e:	1b5b      	subs	r3, r3, r5
 8021110:	9311      	str	r3, [sp, #68]	@ 0x44
 8021112:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8021116:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802111a:	f7ff f8ef 	bl	80202fc <__ulp>
 802111e:	4650      	mov	r0, sl
 8021120:	ec53 2b10 	vmov	r2, r3, d0
 8021124:	4659      	mov	r1, fp
 8021126:	f7df fa7f 	bl	8000628 <__aeabi_dmul>
 802112a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802112e:	f7df f8c5 	bl	80002bc <__adddf3>
 8021132:	4682      	mov	sl, r0
 8021134:	468b      	mov	fp, r1
 8021136:	e770      	b.n	802101a <_strtod_l+0xa62>
 8021138:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 802113c:	e7e0      	b.n	8021100 <_strtod_l+0xb48>
 802113e:	a30e      	add	r3, pc, #56	@ (adr r3, 8021178 <_strtod_l+0xbc0>)
 8021140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021144:	f7df fce2 	bl	8000b0c <__aeabi_dcmplt>
 8021148:	e798      	b.n	802107c <_strtod_l+0xac4>
 802114a:	2300      	movs	r3, #0
 802114c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802114e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8021150:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021152:	6013      	str	r3, [r2, #0]
 8021154:	f7ff ba6d 	b.w	8020632 <_strtod_l+0x7a>
 8021158:	2a65      	cmp	r2, #101	@ 0x65
 802115a:	f43f ab66 	beq.w	802082a <_strtod_l+0x272>
 802115e:	2a45      	cmp	r2, #69	@ 0x45
 8021160:	f43f ab63 	beq.w	802082a <_strtod_l+0x272>
 8021164:	2301      	movs	r3, #1
 8021166:	f7ff bb9e 	b.w	80208a6 <_strtod_l+0x2ee>
 802116a:	bf00      	nop
 802116c:	f3af 8000 	nop.w
 8021170:	ffc00000 	.word	0xffc00000
 8021174:	41dfffff 	.word	0x41dfffff
 8021178:	94a03595 	.word	0x94a03595
 802117c:	3fcfffff 	.word	0x3fcfffff

08021180 <_strtod_r>:
 8021180:	4b01      	ldr	r3, [pc, #4]	@ (8021188 <_strtod_r+0x8>)
 8021182:	f7ff ba19 	b.w	80205b8 <_strtod_l>
 8021186:	bf00      	nop
 8021188:	20000198 	.word	0x20000198

0802118c <__ssputs_r>:
 802118c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021190:	688e      	ldr	r6, [r1, #8]
 8021192:	461f      	mov	r7, r3
 8021194:	42be      	cmp	r6, r7
 8021196:	680b      	ldr	r3, [r1, #0]
 8021198:	4682      	mov	sl, r0
 802119a:	460c      	mov	r4, r1
 802119c:	4690      	mov	r8, r2
 802119e:	d82d      	bhi.n	80211fc <__ssputs_r+0x70>
 80211a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80211a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80211a8:	d026      	beq.n	80211f8 <__ssputs_r+0x6c>
 80211aa:	6965      	ldr	r5, [r4, #20]
 80211ac:	6909      	ldr	r1, [r1, #16]
 80211ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80211b2:	eba3 0901 	sub.w	r9, r3, r1
 80211b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80211ba:	1c7b      	adds	r3, r7, #1
 80211bc:	444b      	add	r3, r9
 80211be:	106d      	asrs	r5, r5, #1
 80211c0:	429d      	cmp	r5, r3
 80211c2:	bf38      	it	cc
 80211c4:	461d      	movcc	r5, r3
 80211c6:	0553      	lsls	r3, r2, #21
 80211c8:	d527      	bpl.n	802121a <__ssputs_r+0x8e>
 80211ca:	4629      	mov	r1, r5
 80211cc:	f7fc faee 	bl	801d7ac <_malloc_r>
 80211d0:	4606      	mov	r6, r0
 80211d2:	b360      	cbz	r0, 802122e <__ssputs_r+0xa2>
 80211d4:	6921      	ldr	r1, [r4, #16]
 80211d6:	464a      	mov	r2, r9
 80211d8:	f7fd fe53 	bl	801ee82 <memcpy>
 80211dc:	89a3      	ldrh	r3, [r4, #12]
 80211de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80211e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80211e6:	81a3      	strh	r3, [r4, #12]
 80211e8:	6126      	str	r6, [r4, #16]
 80211ea:	6165      	str	r5, [r4, #20]
 80211ec:	444e      	add	r6, r9
 80211ee:	eba5 0509 	sub.w	r5, r5, r9
 80211f2:	6026      	str	r6, [r4, #0]
 80211f4:	60a5      	str	r5, [r4, #8]
 80211f6:	463e      	mov	r6, r7
 80211f8:	42be      	cmp	r6, r7
 80211fa:	d900      	bls.n	80211fe <__ssputs_r+0x72>
 80211fc:	463e      	mov	r6, r7
 80211fe:	6820      	ldr	r0, [r4, #0]
 8021200:	4632      	mov	r2, r6
 8021202:	4641      	mov	r1, r8
 8021204:	f7fd fd0c 	bl	801ec20 <memmove>
 8021208:	68a3      	ldr	r3, [r4, #8]
 802120a:	1b9b      	subs	r3, r3, r6
 802120c:	60a3      	str	r3, [r4, #8]
 802120e:	6823      	ldr	r3, [r4, #0]
 8021210:	4433      	add	r3, r6
 8021212:	6023      	str	r3, [r4, #0]
 8021214:	2000      	movs	r0, #0
 8021216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802121a:	462a      	mov	r2, r5
 802121c:	f000 ff11 	bl	8022042 <_realloc_r>
 8021220:	4606      	mov	r6, r0
 8021222:	2800      	cmp	r0, #0
 8021224:	d1e0      	bne.n	80211e8 <__ssputs_r+0x5c>
 8021226:	6921      	ldr	r1, [r4, #16]
 8021228:	4650      	mov	r0, sl
 802122a:	f7fe fca9 	bl	801fb80 <_free_r>
 802122e:	230c      	movs	r3, #12
 8021230:	f8ca 3000 	str.w	r3, [sl]
 8021234:	89a3      	ldrh	r3, [r4, #12]
 8021236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802123a:	81a3      	strh	r3, [r4, #12]
 802123c:	f04f 30ff 	mov.w	r0, #4294967295
 8021240:	e7e9      	b.n	8021216 <__ssputs_r+0x8a>
	...

08021244 <_svfiprintf_r>:
 8021244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021248:	4698      	mov	r8, r3
 802124a:	898b      	ldrh	r3, [r1, #12]
 802124c:	061b      	lsls	r3, r3, #24
 802124e:	b09d      	sub	sp, #116	@ 0x74
 8021250:	4607      	mov	r7, r0
 8021252:	460d      	mov	r5, r1
 8021254:	4614      	mov	r4, r2
 8021256:	d510      	bpl.n	802127a <_svfiprintf_r+0x36>
 8021258:	690b      	ldr	r3, [r1, #16]
 802125a:	b973      	cbnz	r3, 802127a <_svfiprintf_r+0x36>
 802125c:	2140      	movs	r1, #64	@ 0x40
 802125e:	f7fc faa5 	bl	801d7ac <_malloc_r>
 8021262:	6028      	str	r0, [r5, #0]
 8021264:	6128      	str	r0, [r5, #16]
 8021266:	b930      	cbnz	r0, 8021276 <_svfiprintf_r+0x32>
 8021268:	230c      	movs	r3, #12
 802126a:	603b      	str	r3, [r7, #0]
 802126c:	f04f 30ff 	mov.w	r0, #4294967295
 8021270:	b01d      	add	sp, #116	@ 0x74
 8021272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021276:	2340      	movs	r3, #64	@ 0x40
 8021278:	616b      	str	r3, [r5, #20]
 802127a:	2300      	movs	r3, #0
 802127c:	9309      	str	r3, [sp, #36]	@ 0x24
 802127e:	2320      	movs	r3, #32
 8021280:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021284:	f8cd 800c 	str.w	r8, [sp, #12]
 8021288:	2330      	movs	r3, #48	@ 0x30
 802128a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021428 <_svfiprintf_r+0x1e4>
 802128e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021292:	f04f 0901 	mov.w	r9, #1
 8021296:	4623      	mov	r3, r4
 8021298:	469a      	mov	sl, r3
 802129a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802129e:	b10a      	cbz	r2, 80212a4 <_svfiprintf_r+0x60>
 80212a0:	2a25      	cmp	r2, #37	@ 0x25
 80212a2:	d1f9      	bne.n	8021298 <_svfiprintf_r+0x54>
 80212a4:	ebba 0b04 	subs.w	fp, sl, r4
 80212a8:	d00b      	beq.n	80212c2 <_svfiprintf_r+0x7e>
 80212aa:	465b      	mov	r3, fp
 80212ac:	4622      	mov	r2, r4
 80212ae:	4629      	mov	r1, r5
 80212b0:	4638      	mov	r0, r7
 80212b2:	f7ff ff6b 	bl	802118c <__ssputs_r>
 80212b6:	3001      	adds	r0, #1
 80212b8:	f000 80a7 	beq.w	802140a <_svfiprintf_r+0x1c6>
 80212bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80212be:	445a      	add	r2, fp
 80212c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80212c2:	f89a 3000 	ldrb.w	r3, [sl]
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	f000 809f 	beq.w	802140a <_svfiprintf_r+0x1c6>
 80212cc:	2300      	movs	r3, #0
 80212ce:	f04f 32ff 	mov.w	r2, #4294967295
 80212d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80212d6:	f10a 0a01 	add.w	sl, sl, #1
 80212da:	9304      	str	r3, [sp, #16]
 80212dc:	9307      	str	r3, [sp, #28]
 80212de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80212e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80212e4:	4654      	mov	r4, sl
 80212e6:	2205      	movs	r2, #5
 80212e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80212ec:	484e      	ldr	r0, [pc, #312]	@ (8021428 <_svfiprintf_r+0x1e4>)
 80212ee:	f7de ff87 	bl	8000200 <memchr>
 80212f2:	9a04      	ldr	r2, [sp, #16]
 80212f4:	b9d8      	cbnz	r0, 802132e <_svfiprintf_r+0xea>
 80212f6:	06d0      	lsls	r0, r2, #27
 80212f8:	bf44      	itt	mi
 80212fa:	2320      	movmi	r3, #32
 80212fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021300:	0711      	lsls	r1, r2, #28
 8021302:	bf44      	itt	mi
 8021304:	232b      	movmi	r3, #43	@ 0x2b
 8021306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802130a:	f89a 3000 	ldrb.w	r3, [sl]
 802130e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021310:	d015      	beq.n	802133e <_svfiprintf_r+0xfa>
 8021312:	9a07      	ldr	r2, [sp, #28]
 8021314:	4654      	mov	r4, sl
 8021316:	2000      	movs	r0, #0
 8021318:	f04f 0c0a 	mov.w	ip, #10
 802131c:	4621      	mov	r1, r4
 802131e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021322:	3b30      	subs	r3, #48	@ 0x30
 8021324:	2b09      	cmp	r3, #9
 8021326:	d94b      	bls.n	80213c0 <_svfiprintf_r+0x17c>
 8021328:	b1b0      	cbz	r0, 8021358 <_svfiprintf_r+0x114>
 802132a:	9207      	str	r2, [sp, #28]
 802132c:	e014      	b.n	8021358 <_svfiprintf_r+0x114>
 802132e:	eba0 0308 	sub.w	r3, r0, r8
 8021332:	fa09 f303 	lsl.w	r3, r9, r3
 8021336:	4313      	orrs	r3, r2
 8021338:	9304      	str	r3, [sp, #16]
 802133a:	46a2      	mov	sl, r4
 802133c:	e7d2      	b.n	80212e4 <_svfiprintf_r+0xa0>
 802133e:	9b03      	ldr	r3, [sp, #12]
 8021340:	1d19      	adds	r1, r3, #4
 8021342:	681b      	ldr	r3, [r3, #0]
 8021344:	9103      	str	r1, [sp, #12]
 8021346:	2b00      	cmp	r3, #0
 8021348:	bfbb      	ittet	lt
 802134a:	425b      	neglt	r3, r3
 802134c:	f042 0202 	orrlt.w	r2, r2, #2
 8021350:	9307      	strge	r3, [sp, #28]
 8021352:	9307      	strlt	r3, [sp, #28]
 8021354:	bfb8      	it	lt
 8021356:	9204      	strlt	r2, [sp, #16]
 8021358:	7823      	ldrb	r3, [r4, #0]
 802135a:	2b2e      	cmp	r3, #46	@ 0x2e
 802135c:	d10a      	bne.n	8021374 <_svfiprintf_r+0x130>
 802135e:	7863      	ldrb	r3, [r4, #1]
 8021360:	2b2a      	cmp	r3, #42	@ 0x2a
 8021362:	d132      	bne.n	80213ca <_svfiprintf_r+0x186>
 8021364:	9b03      	ldr	r3, [sp, #12]
 8021366:	1d1a      	adds	r2, r3, #4
 8021368:	681b      	ldr	r3, [r3, #0]
 802136a:	9203      	str	r2, [sp, #12]
 802136c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021370:	3402      	adds	r4, #2
 8021372:	9305      	str	r3, [sp, #20]
 8021374:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021438 <_svfiprintf_r+0x1f4>
 8021378:	7821      	ldrb	r1, [r4, #0]
 802137a:	2203      	movs	r2, #3
 802137c:	4650      	mov	r0, sl
 802137e:	f7de ff3f 	bl	8000200 <memchr>
 8021382:	b138      	cbz	r0, 8021394 <_svfiprintf_r+0x150>
 8021384:	9b04      	ldr	r3, [sp, #16]
 8021386:	eba0 000a 	sub.w	r0, r0, sl
 802138a:	2240      	movs	r2, #64	@ 0x40
 802138c:	4082      	lsls	r2, r0
 802138e:	4313      	orrs	r3, r2
 8021390:	3401      	adds	r4, #1
 8021392:	9304      	str	r3, [sp, #16]
 8021394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021398:	4824      	ldr	r0, [pc, #144]	@ (802142c <_svfiprintf_r+0x1e8>)
 802139a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802139e:	2206      	movs	r2, #6
 80213a0:	f7de ff2e 	bl	8000200 <memchr>
 80213a4:	2800      	cmp	r0, #0
 80213a6:	d036      	beq.n	8021416 <_svfiprintf_r+0x1d2>
 80213a8:	4b21      	ldr	r3, [pc, #132]	@ (8021430 <_svfiprintf_r+0x1ec>)
 80213aa:	bb1b      	cbnz	r3, 80213f4 <_svfiprintf_r+0x1b0>
 80213ac:	9b03      	ldr	r3, [sp, #12]
 80213ae:	3307      	adds	r3, #7
 80213b0:	f023 0307 	bic.w	r3, r3, #7
 80213b4:	3308      	adds	r3, #8
 80213b6:	9303      	str	r3, [sp, #12]
 80213b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213ba:	4433      	add	r3, r6
 80213bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80213be:	e76a      	b.n	8021296 <_svfiprintf_r+0x52>
 80213c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80213c4:	460c      	mov	r4, r1
 80213c6:	2001      	movs	r0, #1
 80213c8:	e7a8      	b.n	802131c <_svfiprintf_r+0xd8>
 80213ca:	2300      	movs	r3, #0
 80213cc:	3401      	adds	r4, #1
 80213ce:	9305      	str	r3, [sp, #20]
 80213d0:	4619      	mov	r1, r3
 80213d2:	f04f 0c0a 	mov.w	ip, #10
 80213d6:	4620      	mov	r0, r4
 80213d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80213dc:	3a30      	subs	r2, #48	@ 0x30
 80213de:	2a09      	cmp	r2, #9
 80213e0:	d903      	bls.n	80213ea <_svfiprintf_r+0x1a6>
 80213e2:	2b00      	cmp	r3, #0
 80213e4:	d0c6      	beq.n	8021374 <_svfiprintf_r+0x130>
 80213e6:	9105      	str	r1, [sp, #20]
 80213e8:	e7c4      	b.n	8021374 <_svfiprintf_r+0x130>
 80213ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80213ee:	4604      	mov	r4, r0
 80213f0:	2301      	movs	r3, #1
 80213f2:	e7f0      	b.n	80213d6 <_svfiprintf_r+0x192>
 80213f4:	ab03      	add	r3, sp, #12
 80213f6:	9300      	str	r3, [sp, #0]
 80213f8:	462a      	mov	r2, r5
 80213fa:	4b0e      	ldr	r3, [pc, #56]	@ (8021434 <_svfiprintf_r+0x1f0>)
 80213fc:	a904      	add	r1, sp, #16
 80213fe:	4638      	mov	r0, r7
 8021400:	f7fc fb86 	bl	801db10 <_printf_float>
 8021404:	1c42      	adds	r2, r0, #1
 8021406:	4606      	mov	r6, r0
 8021408:	d1d6      	bne.n	80213b8 <_svfiprintf_r+0x174>
 802140a:	89ab      	ldrh	r3, [r5, #12]
 802140c:	065b      	lsls	r3, r3, #25
 802140e:	f53f af2d 	bmi.w	802126c <_svfiprintf_r+0x28>
 8021412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021414:	e72c      	b.n	8021270 <_svfiprintf_r+0x2c>
 8021416:	ab03      	add	r3, sp, #12
 8021418:	9300      	str	r3, [sp, #0]
 802141a:	462a      	mov	r2, r5
 802141c:	4b05      	ldr	r3, [pc, #20]	@ (8021434 <_svfiprintf_r+0x1f0>)
 802141e:	a904      	add	r1, sp, #16
 8021420:	4638      	mov	r0, r7
 8021422:	f7fc fe0d 	bl	801e040 <_printf_i>
 8021426:	e7ed      	b.n	8021404 <_svfiprintf_r+0x1c0>
 8021428:	08025748 	.word	0x08025748
 802142c:	08025752 	.word	0x08025752
 8021430:	0801db11 	.word	0x0801db11
 8021434:	0802118d 	.word	0x0802118d
 8021438:	0802574e 	.word	0x0802574e

0802143c <__sfputc_r>:
 802143c:	6893      	ldr	r3, [r2, #8]
 802143e:	3b01      	subs	r3, #1
 8021440:	2b00      	cmp	r3, #0
 8021442:	b410      	push	{r4}
 8021444:	6093      	str	r3, [r2, #8]
 8021446:	da08      	bge.n	802145a <__sfputc_r+0x1e>
 8021448:	6994      	ldr	r4, [r2, #24]
 802144a:	42a3      	cmp	r3, r4
 802144c:	db01      	blt.n	8021452 <__sfputc_r+0x16>
 802144e:	290a      	cmp	r1, #10
 8021450:	d103      	bne.n	802145a <__sfputc_r+0x1e>
 8021452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021456:	f7fd bb4f 	b.w	801eaf8 <__swbuf_r>
 802145a:	6813      	ldr	r3, [r2, #0]
 802145c:	1c58      	adds	r0, r3, #1
 802145e:	6010      	str	r0, [r2, #0]
 8021460:	7019      	strb	r1, [r3, #0]
 8021462:	4608      	mov	r0, r1
 8021464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021468:	4770      	bx	lr

0802146a <__sfputs_r>:
 802146a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802146c:	4606      	mov	r6, r0
 802146e:	460f      	mov	r7, r1
 8021470:	4614      	mov	r4, r2
 8021472:	18d5      	adds	r5, r2, r3
 8021474:	42ac      	cmp	r4, r5
 8021476:	d101      	bne.n	802147c <__sfputs_r+0x12>
 8021478:	2000      	movs	r0, #0
 802147a:	e007      	b.n	802148c <__sfputs_r+0x22>
 802147c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021480:	463a      	mov	r2, r7
 8021482:	4630      	mov	r0, r6
 8021484:	f7ff ffda 	bl	802143c <__sfputc_r>
 8021488:	1c43      	adds	r3, r0, #1
 802148a:	d1f3      	bne.n	8021474 <__sfputs_r+0xa>
 802148c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021490 <_vfiprintf_r>:
 8021490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021494:	460d      	mov	r5, r1
 8021496:	b09d      	sub	sp, #116	@ 0x74
 8021498:	4614      	mov	r4, r2
 802149a:	4698      	mov	r8, r3
 802149c:	4606      	mov	r6, r0
 802149e:	b118      	cbz	r0, 80214a8 <_vfiprintf_r+0x18>
 80214a0:	6a03      	ldr	r3, [r0, #32]
 80214a2:	b90b      	cbnz	r3, 80214a8 <_vfiprintf_r+0x18>
 80214a4:	f7fd f98c 	bl	801e7c0 <__sinit>
 80214a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80214aa:	07d9      	lsls	r1, r3, #31
 80214ac:	d405      	bmi.n	80214ba <_vfiprintf_r+0x2a>
 80214ae:	89ab      	ldrh	r3, [r5, #12]
 80214b0:	059a      	lsls	r2, r3, #22
 80214b2:	d402      	bmi.n	80214ba <_vfiprintf_r+0x2a>
 80214b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80214b6:	f7fd fcda 	bl	801ee6e <__retarget_lock_acquire_recursive>
 80214ba:	89ab      	ldrh	r3, [r5, #12]
 80214bc:	071b      	lsls	r3, r3, #28
 80214be:	d501      	bpl.n	80214c4 <_vfiprintf_r+0x34>
 80214c0:	692b      	ldr	r3, [r5, #16]
 80214c2:	b99b      	cbnz	r3, 80214ec <_vfiprintf_r+0x5c>
 80214c4:	4629      	mov	r1, r5
 80214c6:	4630      	mov	r0, r6
 80214c8:	f7fd fb54 	bl	801eb74 <__swsetup_r>
 80214cc:	b170      	cbz	r0, 80214ec <_vfiprintf_r+0x5c>
 80214ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80214d0:	07dc      	lsls	r4, r3, #31
 80214d2:	d504      	bpl.n	80214de <_vfiprintf_r+0x4e>
 80214d4:	f04f 30ff 	mov.w	r0, #4294967295
 80214d8:	b01d      	add	sp, #116	@ 0x74
 80214da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214de:	89ab      	ldrh	r3, [r5, #12]
 80214e0:	0598      	lsls	r0, r3, #22
 80214e2:	d4f7      	bmi.n	80214d4 <_vfiprintf_r+0x44>
 80214e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80214e6:	f7fd fcc3 	bl	801ee70 <__retarget_lock_release_recursive>
 80214ea:	e7f3      	b.n	80214d4 <_vfiprintf_r+0x44>
 80214ec:	2300      	movs	r3, #0
 80214ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80214f0:	2320      	movs	r3, #32
 80214f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80214f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80214fa:	2330      	movs	r3, #48	@ 0x30
 80214fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80216ac <_vfiprintf_r+0x21c>
 8021500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021504:	f04f 0901 	mov.w	r9, #1
 8021508:	4623      	mov	r3, r4
 802150a:	469a      	mov	sl, r3
 802150c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021510:	b10a      	cbz	r2, 8021516 <_vfiprintf_r+0x86>
 8021512:	2a25      	cmp	r2, #37	@ 0x25
 8021514:	d1f9      	bne.n	802150a <_vfiprintf_r+0x7a>
 8021516:	ebba 0b04 	subs.w	fp, sl, r4
 802151a:	d00b      	beq.n	8021534 <_vfiprintf_r+0xa4>
 802151c:	465b      	mov	r3, fp
 802151e:	4622      	mov	r2, r4
 8021520:	4629      	mov	r1, r5
 8021522:	4630      	mov	r0, r6
 8021524:	f7ff ffa1 	bl	802146a <__sfputs_r>
 8021528:	3001      	adds	r0, #1
 802152a:	f000 80a7 	beq.w	802167c <_vfiprintf_r+0x1ec>
 802152e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021530:	445a      	add	r2, fp
 8021532:	9209      	str	r2, [sp, #36]	@ 0x24
 8021534:	f89a 3000 	ldrb.w	r3, [sl]
 8021538:	2b00      	cmp	r3, #0
 802153a:	f000 809f 	beq.w	802167c <_vfiprintf_r+0x1ec>
 802153e:	2300      	movs	r3, #0
 8021540:	f04f 32ff 	mov.w	r2, #4294967295
 8021544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021548:	f10a 0a01 	add.w	sl, sl, #1
 802154c:	9304      	str	r3, [sp, #16]
 802154e:	9307      	str	r3, [sp, #28]
 8021550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021554:	931a      	str	r3, [sp, #104]	@ 0x68
 8021556:	4654      	mov	r4, sl
 8021558:	2205      	movs	r2, #5
 802155a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802155e:	4853      	ldr	r0, [pc, #332]	@ (80216ac <_vfiprintf_r+0x21c>)
 8021560:	f7de fe4e 	bl	8000200 <memchr>
 8021564:	9a04      	ldr	r2, [sp, #16]
 8021566:	b9d8      	cbnz	r0, 80215a0 <_vfiprintf_r+0x110>
 8021568:	06d1      	lsls	r1, r2, #27
 802156a:	bf44      	itt	mi
 802156c:	2320      	movmi	r3, #32
 802156e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021572:	0713      	lsls	r3, r2, #28
 8021574:	bf44      	itt	mi
 8021576:	232b      	movmi	r3, #43	@ 0x2b
 8021578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802157c:	f89a 3000 	ldrb.w	r3, [sl]
 8021580:	2b2a      	cmp	r3, #42	@ 0x2a
 8021582:	d015      	beq.n	80215b0 <_vfiprintf_r+0x120>
 8021584:	9a07      	ldr	r2, [sp, #28]
 8021586:	4654      	mov	r4, sl
 8021588:	2000      	movs	r0, #0
 802158a:	f04f 0c0a 	mov.w	ip, #10
 802158e:	4621      	mov	r1, r4
 8021590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021594:	3b30      	subs	r3, #48	@ 0x30
 8021596:	2b09      	cmp	r3, #9
 8021598:	d94b      	bls.n	8021632 <_vfiprintf_r+0x1a2>
 802159a:	b1b0      	cbz	r0, 80215ca <_vfiprintf_r+0x13a>
 802159c:	9207      	str	r2, [sp, #28]
 802159e:	e014      	b.n	80215ca <_vfiprintf_r+0x13a>
 80215a0:	eba0 0308 	sub.w	r3, r0, r8
 80215a4:	fa09 f303 	lsl.w	r3, r9, r3
 80215a8:	4313      	orrs	r3, r2
 80215aa:	9304      	str	r3, [sp, #16]
 80215ac:	46a2      	mov	sl, r4
 80215ae:	e7d2      	b.n	8021556 <_vfiprintf_r+0xc6>
 80215b0:	9b03      	ldr	r3, [sp, #12]
 80215b2:	1d19      	adds	r1, r3, #4
 80215b4:	681b      	ldr	r3, [r3, #0]
 80215b6:	9103      	str	r1, [sp, #12]
 80215b8:	2b00      	cmp	r3, #0
 80215ba:	bfbb      	ittet	lt
 80215bc:	425b      	neglt	r3, r3
 80215be:	f042 0202 	orrlt.w	r2, r2, #2
 80215c2:	9307      	strge	r3, [sp, #28]
 80215c4:	9307      	strlt	r3, [sp, #28]
 80215c6:	bfb8      	it	lt
 80215c8:	9204      	strlt	r2, [sp, #16]
 80215ca:	7823      	ldrb	r3, [r4, #0]
 80215cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80215ce:	d10a      	bne.n	80215e6 <_vfiprintf_r+0x156>
 80215d0:	7863      	ldrb	r3, [r4, #1]
 80215d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80215d4:	d132      	bne.n	802163c <_vfiprintf_r+0x1ac>
 80215d6:	9b03      	ldr	r3, [sp, #12]
 80215d8:	1d1a      	adds	r2, r3, #4
 80215da:	681b      	ldr	r3, [r3, #0]
 80215dc:	9203      	str	r2, [sp, #12]
 80215de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80215e2:	3402      	adds	r4, #2
 80215e4:	9305      	str	r3, [sp, #20]
 80215e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80216bc <_vfiprintf_r+0x22c>
 80215ea:	7821      	ldrb	r1, [r4, #0]
 80215ec:	2203      	movs	r2, #3
 80215ee:	4650      	mov	r0, sl
 80215f0:	f7de fe06 	bl	8000200 <memchr>
 80215f4:	b138      	cbz	r0, 8021606 <_vfiprintf_r+0x176>
 80215f6:	9b04      	ldr	r3, [sp, #16]
 80215f8:	eba0 000a 	sub.w	r0, r0, sl
 80215fc:	2240      	movs	r2, #64	@ 0x40
 80215fe:	4082      	lsls	r2, r0
 8021600:	4313      	orrs	r3, r2
 8021602:	3401      	adds	r4, #1
 8021604:	9304      	str	r3, [sp, #16]
 8021606:	f814 1b01 	ldrb.w	r1, [r4], #1
 802160a:	4829      	ldr	r0, [pc, #164]	@ (80216b0 <_vfiprintf_r+0x220>)
 802160c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021610:	2206      	movs	r2, #6
 8021612:	f7de fdf5 	bl	8000200 <memchr>
 8021616:	2800      	cmp	r0, #0
 8021618:	d03f      	beq.n	802169a <_vfiprintf_r+0x20a>
 802161a:	4b26      	ldr	r3, [pc, #152]	@ (80216b4 <_vfiprintf_r+0x224>)
 802161c:	bb1b      	cbnz	r3, 8021666 <_vfiprintf_r+0x1d6>
 802161e:	9b03      	ldr	r3, [sp, #12]
 8021620:	3307      	adds	r3, #7
 8021622:	f023 0307 	bic.w	r3, r3, #7
 8021626:	3308      	adds	r3, #8
 8021628:	9303      	str	r3, [sp, #12]
 802162a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802162c:	443b      	add	r3, r7
 802162e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021630:	e76a      	b.n	8021508 <_vfiprintf_r+0x78>
 8021632:	fb0c 3202 	mla	r2, ip, r2, r3
 8021636:	460c      	mov	r4, r1
 8021638:	2001      	movs	r0, #1
 802163a:	e7a8      	b.n	802158e <_vfiprintf_r+0xfe>
 802163c:	2300      	movs	r3, #0
 802163e:	3401      	adds	r4, #1
 8021640:	9305      	str	r3, [sp, #20]
 8021642:	4619      	mov	r1, r3
 8021644:	f04f 0c0a 	mov.w	ip, #10
 8021648:	4620      	mov	r0, r4
 802164a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802164e:	3a30      	subs	r2, #48	@ 0x30
 8021650:	2a09      	cmp	r2, #9
 8021652:	d903      	bls.n	802165c <_vfiprintf_r+0x1cc>
 8021654:	2b00      	cmp	r3, #0
 8021656:	d0c6      	beq.n	80215e6 <_vfiprintf_r+0x156>
 8021658:	9105      	str	r1, [sp, #20]
 802165a:	e7c4      	b.n	80215e6 <_vfiprintf_r+0x156>
 802165c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021660:	4604      	mov	r4, r0
 8021662:	2301      	movs	r3, #1
 8021664:	e7f0      	b.n	8021648 <_vfiprintf_r+0x1b8>
 8021666:	ab03      	add	r3, sp, #12
 8021668:	9300      	str	r3, [sp, #0]
 802166a:	462a      	mov	r2, r5
 802166c:	4b12      	ldr	r3, [pc, #72]	@ (80216b8 <_vfiprintf_r+0x228>)
 802166e:	a904      	add	r1, sp, #16
 8021670:	4630      	mov	r0, r6
 8021672:	f7fc fa4d 	bl	801db10 <_printf_float>
 8021676:	4607      	mov	r7, r0
 8021678:	1c78      	adds	r0, r7, #1
 802167a:	d1d6      	bne.n	802162a <_vfiprintf_r+0x19a>
 802167c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802167e:	07d9      	lsls	r1, r3, #31
 8021680:	d405      	bmi.n	802168e <_vfiprintf_r+0x1fe>
 8021682:	89ab      	ldrh	r3, [r5, #12]
 8021684:	059a      	lsls	r2, r3, #22
 8021686:	d402      	bmi.n	802168e <_vfiprintf_r+0x1fe>
 8021688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802168a:	f7fd fbf1 	bl	801ee70 <__retarget_lock_release_recursive>
 802168e:	89ab      	ldrh	r3, [r5, #12]
 8021690:	065b      	lsls	r3, r3, #25
 8021692:	f53f af1f 	bmi.w	80214d4 <_vfiprintf_r+0x44>
 8021696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021698:	e71e      	b.n	80214d8 <_vfiprintf_r+0x48>
 802169a:	ab03      	add	r3, sp, #12
 802169c:	9300      	str	r3, [sp, #0]
 802169e:	462a      	mov	r2, r5
 80216a0:	4b05      	ldr	r3, [pc, #20]	@ (80216b8 <_vfiprintf_r+0x228>)
 80216a2:	a904      	add	r1, sp, #16
 80216a4:	4630      	mov	r0, r6
 80216a6:	f7fc fccb 	bl	801e040 <_printf_i>
 80216aa:	e7e4      	b.n	8021676 <_vfiprintf_r+0x1e6>
 80216ac:	08025748 	.word	0x08025748
 80216b0:	08025752 	.word	0x08025752
 80216b4:	0801db11 	.word	0x0801db11
 80216b8:	0802146b 	.word	0x0802146b
 80216bc:	0802574e 	.word	0x0802574e

080216c0 <__sflush_r>:
 80216c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80216c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216c8:	0716      	lsls	r6, r2, #28
 80216ca:	4605      	mov	r5, r0
 80216cc:	460c      	mov	r4, r1
 80216ce:	d454      	bmi.n	802177a <__sflush_r+0xba>
 80216d0:	684b      	ldr	r3, [r1, #4]
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	dc02      	bgt.n	80216dc <__sflush_r+0x1c>
 80216d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80216d8:	2b00      	cmp	r3, #0
 80216da:	dd48      	ble.n	802176e <__sflush_r+0xae>
 80216dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80216de:	2e00      	cmp	r6, #0
 80216e0:	d045      	beq.n	802176e <__sflush_r+0xae>
 80216e2:	2300      	movs	r3, #0
 80216e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80216e8:	682f      	ldr	r7, [r5, #0]
 80216ea:	6a21      	ldr	r1, [r4, #32]
 80216ec:	602b      	str	r3, [r5, #0]
 80216ee:	d030      	beq.n	8021752 <__sflush_r+0x92>
 80216f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80216f2:	89a3      	ldrh	r3, [r4, #12]
 80216f4:	0759      	lsls	r1, r3, #29
 80216f6:	d505      	bpl.n	8021704 <__sflush_r+0x44>
 80216f8:	6863      	ldr	r3, [r4, #4]
 80216fa:	1ad2      	subs	r2, r2, r3
 80216fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80216fe:	b10b      	cbz	r3, 8021704 <__sflush_r+0x44>
 8021700:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021702:	1ad2      	subs	r2, r2, r3
 8021704:	2300      	movs	r3, #0
 8021706:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021708:	6a21      	ldr	r1, [r4, #32]
 802170a:	4628      	mov	r0, r5
 802170c:	47b0      	blx	r6
 802170e:	1c43      	adds	r3, r0, #1
 8021710:	89a3      	ldrh	r3, [r4, #12]
 8021712:	d106      	bne.n	8021722 <__sflush_r+0x62>
 8021714:	6829      	ldr	r1, [r5, #0]
 8021716:	291d      	cmp	r1, #29
 8021718:	d82b      	bhi.n	8021772 <__sflush_r+0xb2>
 802171a:	4a2a      	ldr	r2, [pc, #168]	@ (80217c4 <__sflush_r+0x104>)
 802171c:	410a      	asrs	r2, r1
 802171e:	07d6      	lsls	r6, r2, #31
 8021720:	d427      	bmi.n	8021772 <__sflush_r+0xb2>
 8021722:	2200      	movs	r2, #0
 8021724:	6062      	str	r2, [r4, #4]
 8021726:	04d9      	lsls	r1, r3, #19
 8021728:	6922      	ldr	r2, [r4, #16]
 802172a:	6022      	str	r2, [r4, #0]
 802172c:	d504      	bpl.n	8021738 <__sflush_r+0x78>
 802172e:	1c42      	adds	r2, r0, #1
 8021730:	d101      	bne.n	8021736 <__sflush_r+0x76>
 8021732:	682b      	ldr	r3, [r5, #0]
 8021734:	b903      	cbnz	r3, 8021738 <__sflush_r+0x78>
 8021736:	6560      	str	r0, [r4, #84]	@ 0x54
 8021738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802173a:	602f      	str	r7, [r5, #0]
 802173c:	b1b9      	cbz	r1, 802176e <__sflush_r+0xae>
 802173e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021742:	4299      	cmp	r1, r3
 8021744:	d002      	beq.n	802174c <__sflush_r+0x8c>
 8021746:	4628      	mov	r0, r5
 8021748:	f7fe fa1a 	bl	801fb80 <_free_r>
 802174c:	2300      	movs	r3, #0
 802174e:	6363      	str	r3, [r4, #52]	@ 0x34
 8021750:	e00d      	b.n	802176e <__sflush_r+0xae>
 8021752:	2301      	movs	r3, #1
 8021754:	4628      	mov	r0, r5
 8021756:	47b0      	blx	r6
 8021758:	4602      	mov	r2, r0
 802175a:	1c50      	adds	r0, r2, #1
 802175c:	d1c9      	bne.n	80216f2 <__sflush_r+0x32>
 802175e:	682b      	ldr	r3, [r5, #0]
 8021760:	2b00      	cmp	r3, #0
 8021762:	d0c6      	beq.n	80216f2 <__sflush_r+0x32>
 8021764:	2b1d      	cmp	r3, #29
 8021766:	d001      	beq.n	802176c <__sflush_r+0xac>
 8021768:	2b16      	cmp	r3, #22
 802176a:	d11e      	bne.n	80217aa <__sflush_r+0xea>
 802176c:	602f      	str	r7, [r5, #0]
 802176e:	2000      	movs	r0, #0
 8021770:	e022      	b.n	80217b8 <__sflush_r+0xf8>
 8021772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021776:	b21b      	sxth	r3, r3
 8021778:	e01b      	b.n	80217b2 <__sflush_r+0xf2>
 802177a:	690f      	ldr	r7, [r1, #16]
 802177c:	2f00      	cmp	r7, #0
 802177e:	d0f6      	beq.n	802176e <__sflush_r+0xae>
 8021780:	0793      	lsls	r3, r2, #30
 8021782:	680e      	ldr	r6, [r1, #0]
 8021784:	bf08      	it	eq
 8021786:	694b      	ldreq	r3, [r1, #20]
 8021788:	600f      	str	r7, [r1, #0]
 802178a:	bf18      	it	ne
 802178c:	2300      	movne	r3, #0
 802178e:	eba6 0807 	sub.w	r8, r6, r7
 8021792:	608b      	str	r3, [r1, #8]
 8021794:	f1b8 0f00 	cmp.w	r8, #0
 8021798:	dde9      	ble.n	802176e <__sflush_r+0xae>
 802179a:	6a21      	ldr	r1, [r4, #32]
 802179c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802179e:	4643      	mov	r3, r8
 80217a0:	463a      	mov	r2, r7
 80217a2:	4628      	mov	r0, r5
 80217a4:	47b0      	blx	r6
 80217a6:	2800      	cmp	r0, #0
 80217a8:	dc08      	bgt.n	80217bc <__sflush_r+0xfc>
 80217aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80217b2:	81a3      	strh	r3, [r4, #12]
 80217b4:	f04f 30ff 	mov.w	r0, #4294967295
 80217b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217bc:	4407      	add	r7, r0
 80217be:	eba8 0800 	sub.w	r8, r8, r0
 80217c2:	e7e7      	b.n	8021794 <__sflush_r+0xd4>
 80217c4:	dfbffffe 	.word	0xdfbffffe

080217c8 <_fflush_r>:
 80217c8:	b538      	push	{r3, r4, r5, lr}
 80217ca:	690b      	ldr	r3, [r1, #16]
 80217cc:	4605      	mov	r5, r0
 80217ce:	460c      	mov	r4, r1
 80217d0:	b913      	cbnz	r3, 80217d8 <_fflush_r+0x10>
 80217d2:	2500      	movs	r5, #0
 80217d4:	4628      	mov	r0, r5
 80217d6:	bd38      	pop	{r3, r4, r5, pc}
 80217d8:	b118      	cbz	r0, 80217e2 <_fflush_r+0x1a>
 80217da:	6a03      	ldr	r3, [r0, #32]
 80217dc:	b90b      	cbnz	r3, 80217e2 <_fflush_r+0x1a>
 80217de:	f7fc ffef 	bl	801e7c0 <__sinit>
 80217e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217e6:	2b00      	cmp	r3, #0
 80217e8:	d0f3      	beq.n	80217d2 <_fflush_r+0xa>
 80217ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80217ec:	07d0      	lsls	r0, r2, #31
 80217ee:	d404      	bmi.n	80217fa <_fflush_r+0x32>
 80217f0:	0599      	lsls	r1, r3, #22
 80217f2:	d402      	bmi.n	80217fa <_fflush_r+0x32>
 80217f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80217f6:	f7fd fb3a 	bl	801ee6e <__retarget_lock_acquire_recursive>
 80217fa:	4628      	mov	r0, r5
 80217fc:	4621      	mov	r1, r4
 80217fe:	f7ff ff5f 	bl	80216c0 <__sflush_r>
 8021802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021804:	07da      	lsls	r2, r3, #31
 8021806:	4605      	mov	r5, r0
 8021808:	d4e4      	bmi.n	80217d4 <_fflush_r+0xc>
 802180a:	89a3      	ldrh	r3, [r4, #12]
 802180c:	059b      	lsls	r3, r3, #22
 802180e:	d4e1      	bmi.n	80217d4 <_fflush_r+0xc>
 8021810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021812:	f7fd fb2d 	bl	801ee70 <__retarget_lock_release_recursive>
 8021816:	e7dd      	b.n	80217d4 <_fflush_r+0xc>

08021818 <fiprintf>:
 8021818:	b40e      	push	{r1, r2, r3}
 802181a:	b503      	push	{r0, r1, lr}
 802181c:	4601      	mov	r1, r0
 802181e:	ab03      	add	r3, sp, #12
 8021820:	4805      	ldr	r0, [pc, #20]	@ (8021838 <fiprintf+0x20>)
 8021822:	f853 2b04 	ldr.w	r2, [r3], #4
 8021826:	6800      	ldr	r0, [r0, #0]
 8021828:	9301      	str	r3, [sp, #4]
 802182a:	f7ff fe31 	bl	8021490 <_vfiprintf_r>
 802182e:	b002      	add	sp, #8
 8021830:	f85d eb04 	ldr.w	lr, [sp], #4
 8021834:	b003      	add	sp, #12
 8021836:	4770      	bx	lr
 8021838:	20000148 	.word	0x20000148

0802183c <__swhatbuf_r>:
 802183c:	b570      	push	{r4, r5, r6, lr}
 802183e:	460c      	mov	r4, r1
 8021840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021844:	2900      	cmp	r1, #0
 8021846:	b096      	sub	sp, #88	@ 0x58
 8021848:	4615      	mov	r5, r2
 802184a:	461e      	mov	r6, r3
 802184c:	da0d      	bge.n	802186a <__swhatbuf_r+0x2e>
 802184e:	89a3      	ldrh	r3, [r4, #12]
 8021850:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021854:	f04f 0100 	mov.w	r1, #0
 8021858:	bf14      	ite	ne
 802185a:	2340      	movne	r3, #64	@ 0x40
 802185c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021860:	2000      	movs	r0, #0
 8021862:	6031      	str	r1, [r6, #0]
 8021864:	602b      	str	r3, [r5, #0]
 8021866:	b016      	add	sp, #88	@ 0x58
 8021868:	bd70      	pop	{r4, r5, r6, pc}
 802186a:	466a      	mov	r2, sp
 802186c:	f000 f85a 	bl	8021924 <_fstat_r>
 8021870:	2800      	cmp	r0, #0
 8021872:	dbec      	blt.n	802184e <__swhatbuf_r+0x12>
 8021874:	9901      	ldr	r1, [sp, #4]
 8021876:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802187a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802187e:	4259      	negs	r1, r3
 8021880:	4159      	adcs	r1, r3
 8021882:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021886:	e7eb      	b.n	8021860 <__swhatbuf_r+0x24>

08021888 <__smakebuf_r>:
 8021888:	898b      	ldrh	r3, [r1, #12]
 802188a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802188c:	079d      	lsls	r5, r3, #30
 802188e:	4606      	mov	r6, r0
 8021890:	460c      	mov	r4, r1
 8021892:	d507      	bpl.n	80218a4 <__smakebuf_r+0x1c>
 8021894:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021898:	6023      	str	r3, [r4, #0]
 802189a:	6123      	str	r3, [r4, #16]
 802189c:	2301      	movs	r3, #1
 802189e:	6163      	str	r3, [r4, #20]
 80218a0:	b003      	add	sp, #12
 80218a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80218a4:	ab01      	add	r3, sp, #4
 80218a6:	466a      	mov	r2, sp
 80218a8:	f7ff ffc8 	bl	802183c <__swhatbuf_r>
 80218ac:	9f00      	ldr	r7, [sp, #0]
 80218ae:	4605      	mov	r5, r0
 80218b0:	4639      	mov	r1, r7
 80218b2:	4630      	mov	r0, r6
 80218b4:	f7fb ff7a 	bl	801d7ac <_malloc_r>
 80218b8:	b948      	cbnz	r0, 80218ce <__smakebuf_r+0x46>
 80218ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80218be:	059a      	lsls	r2, r3, #22
 80218c0:	d4ee      	bmi.n	80218a0 <__smakebuf_r+0x18>
 80218c2:	f023 0303 	bic.w	r3, r3, #3
 80218c6:	f043 0302 	orr.w	r3, r3, #2
 80218ca:	81a3      	strh	r3, [r4, #12]
 80218cc:	e7e2      	b.n	8021894 <__smakebuf_r+0xc>
 80218ce:	89a3      	ldrh	r3, [r4, #12]
 80218d0:	6020      	str	r0, [r4, #0]
 80218d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80218d6:	81a3      	strh	r3, [r4, #12]
 80218d8:	9b01      	ldr	r3, [sp, #4]
 80218da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80218de:	b15b      	cbz	r3, 80218f8 <__smakebuf_r+0x70>
 80218e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80218e4:	4630      	mov	r0, r6
 80218e6:	f000 f82f 	bl	8021948 <_isatty_r>
 80218ea:	b128      	cbz	r0, 80218f8 <__smakebuf_r+0x70>
 80218ec:	89a3      	ldrh	r3, [r4, #12]
 80218ee:	f023 0303 	bic.w	r3, r3, #3
 80218f2:	f043 0301 	orr.w	r3, r3, #1
 80218f6:	81a3      	strh	r3, [r4, #12]
 80218f8:	89a3      	ldrh	r3, [r4, #12]
 80218fa:	431d      	orrs	r5, r3
 80218fc:	81a5      	strh	r5, [r4, #12]
 80218fe:	e7cf      	b.n	80218a0 <__smakebuf_r+0x18>

08021900 <strncmp>:
 8021900:	b510      	push	{r4, lr}
 8021902:	b16a      	cbz	r2, 8021920 <strncmp+0x20>
 8021904:	3901      	subs	r1, #1
 8021906:	1884      	adds	r4, r0, r2
 8021908:	f810 2b01 	ldrb.w	r2, [r0], #1
 802190c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021910:	429a      	cmp	r2, r3
 8021912:	d103      	bne.n	802191c <strncmp+0x1c>
 8021914:	42a0      	cmp	r0, r4
 8021916:	d001      	beq.n	802191c <strncmp+0x1c>
 8021918:	2a00      	cmp	r2, #0
 802191a:	d1f5      	bne.n	8021908 <strncmp+0x8>
 802191c:	1ad0      	subs	r0, r2, r3
 802191e:	bd10      	pop	{r4, pc}
 8021920:	4610      	mov	r0, r2
 8021922:	e7fc      	b.n	802191e <strncmp+0x1e>

08021924 <_fstat_r>:
 8021924:	b538      	push	{r3, r4, r5, lr}
 8021926:	4d07      	ldr	r5, [pc, #28]	@ (8021944 <_fstat_r+0x20>)
 8021928:	2300      	movs	r3, #0
 802192a:	4604      	mov	r4, r0
 802192c:	4608      	mov	r0, r1
 802192e:	4611      	mov	r1, r2
 8021930:	602b      	str	r3, [r5, #0]
 8021932:	f7e2 fae1 	bl	8003ef8 <_fstat>
 8021936:	1c43      	adds	r3, r0, #1
 8021938:	d102      	bne.n	8021940 <_fstat_r+0x1c>
 802193a:	682b      	ldr	r3, [r5, #0]
 802193c:	b103      	cbz	r3, 8021940 <_fstat_r+0x1c>
 802193e:	6023      	str	r3, [r4, #0]
 8021940:	bd38      	pop	{r3, r4, r5, pc}
 8021942:	bf00      	nop
 8021944:	200037a8 	.word	0x200037a8

08021948 <_isatty_r>:
 8021948:	b538      	push	{r3, r4, r5, lr}
 802194a:	4d06      	ldr	r5, [pc, #24]	@ (8021964 <_isatty_r+0x1c>)
 802194c:	2300      	movs	r3, #0
 802194e:	4604      	mov	r4, r0
 8021950:	4608      	mov	r0, r1
 8021952:	602b      	str	r3, [r5, #0]
 8021954:	f7e2 fae0 	bl	8003f18 <_isatty>
 8021958:	1c43      	adds	r3, r0, #1
 802195a:	d102      	bne.n	8021962 <_isatty_r+0x1a>
 802195c:	682b      	ldr	r3, [r5, #0]
 802195e:	b103      	cbz	r3, 8021962 <_isatty_r+0x1a>
 8021960:	6023      	str	r3, [r4, #0]
 8021962:	bd38      	pop	{r3, r4, r5, pc}
 8021964:	200037a8 	.word	0x200037a8

08021968 <nan>:
 8021968:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021970 <nan+0x8>
 802196c:	4770      	bx	lr
 802196e:	bf00      	nop
 8021970:	00000000 	.word	0x00000000
 8021974:	7ff80000 	.word	0x7ff80000

08021978 <abort>:
 8021978:	b508      	push	{r3, lr}
 802197a:	2006      	movs	r0, #6
 802197c:	f000 fbc4 	bl	8022108 <raise>
 8021980:	2001      	movs	r0, #1
 8021982:	f7e2 fa69 	bl	8003e58 <_exit>

08021986 <_calloc_r>:
 8021986:	b570      	push	{r4, r5, r6, lr}
 8021988:	fba1 5402 	umull	r5, r4, r1, r2
 802198c:	b93c      	cbnz	r4, 802199e <_calloc_r+0x18>
 802198e:	4629      	mov	r1, r5
 8021990:	f7fb ff0c 	bl	801d7ac <_malloc_r>
 8021994:	4606      	mov	r6, r0
 8021996:	b928      	cbnz	r0, 80219a4 <_calloc_r+0x1e>
 8021998:	2600      	movs	r6, #0
 802199a:	4630      	mov	r0, r6
 802199c:	bd70      	pop	{r4, r5, r6, pc}
 802199e:	220c      	movs	r2, #12
 80219a0:	6002      	str	r2, [r0, #0]
 80219a2:	e7f9      	b.n	8021998 <_calloc_r+0x12>
 80219a4:	462a      	mov	r2, r5
 80219a6:	4621      	mov	r1, r4
 80219a8:	f7fd f954 	bl	801ec54 <memset>
 80219ac:	e7f5      	b.n	802199a <_calloc_r+0x14>

080219ae <rshift>:
 80219ae:	6903      	ldr	r3, [r0, #16]
 80219b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80219b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80219b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80219bc:	f100 0414 	add.w	r4, r0, #20
 80219c0:	dd45      	ble.n	8021a4e <rshift+0xa0>
 80219c2:	f011 011f 	ands.w	r1, r1, #31
 80219c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80219ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80219ce:	d10c      	bne.n	80219ea <rshift+0x3c>
 80219d0:	f100 0710 	add.w	r7, r0, #16
 80219d4:	4629      	mov	r1, r5
 80219d6:	42b1      	cmp	r1, r6
 80219d8:	d334      	bcc.n	8021a44 <rshift+0x96>
 80219da:	1a9b      	subs	r3, r3, r2
 80219dc:	009b      	lsls	r3, r3, #2
 80219de:	1eea      	subs	r2, r5, #3
 80219e0:	4296      	cmp	r6, r2
 80219e2:	bf38      	it	cc
 80219e4:	2300      	movcc	r3, #0
 80219e6:	4423      	add	r3, r4
 80219e8:	e015      	b.n	8021a16 <rshift+0x68>
 80219ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80219ee:	f1c1 0820 	rsb	r8, r1, #32
 80219f2:	40cf      	lsrs	r7, r1
 80219f4:	f105 0e04 	add.w	lr, r5, #4
 80219f8:	46a1      	mov	r9, r4
 80219fa:	4576      	cmp	r6, lr
 80219fc:	46f4      	mov	ip, lr
 80219fe:	d815      	bhi.n	8021a2c <rshift+0x7e>
 8021a00:	1a9a      	subs	r2, r3, r2
 8021a02:	0092      	lsls	r2, r2, #2
 8021a04:	3a04      	subs	r2, #4
 8021a06:	3501      	adds	r5, #1
 8021a08:	42ae      	cmp	r6, r5
 8021a0a:	bf38      	it	cc
 8021a0c:	2200      	movcc	r2, #0
 8021a0e:	18a3      	adds	r3, r4, r2
 8021a10:	50a7      	str	r7, [r4, r2]
 8021a12:	b107      	cbz	r7, 8021a16 <rshift+0x68>
 8021a14:	3304      	adds	r3, #4
 8021a16:	1b1a      	subs	r2, r3, r4
 8021a18:	42a3      	cmp	r3, r4
 8021a1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021a1e:	bf08      	it	eq
 8021a20:	2300      	moveq	r3, #0
 8021a22:	6102      	str	r2, [r0, #16]
 8021a24:	bf08      	it	eq
 8021a26:	6143      	streq	r3, [r0, #20]
 8021a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021a2c:	f8dc c000 	ldr.w	ip, [ip]
 8021a30:	fa0c fc08 	lsl.w	ip, ip, r8
 8021a34:	ea4c 0707 	orr.w	r7, ip, r7
 8021a38:	f849 7b04 	str.w	r7, [r9], #4
 8021a3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021a40:	40cf      	lsrs	r7, r1
 8021a42:	e7da      	b.n	80219fa <rshift+0x4c>
 8021a44:	f851 cb04 	ldr.w	ip, [r1], #4
 8021a48:	f847 cf04 	str.w	ip, [r7, #4]!
 8021a4c:	e7c3      	b.n	80219d6 <rshift+0x28>
 8021a4e:	4623      	mov	r3, r4
 8021a50:	e7e1      	b.n	8021a16 <rshift+0x68>

08021a52 <__hexdig_fun>:
 8021a52:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8021a56:	2b09      	cmp	r3, #9
 8021a58:	d802      	bhi.n	8021a60 <__hexdig_fun+0xe>
 8021a5a:	3820      	subs	r0, #32
 8021a5c:	b2c0      	uxtb	r0, r0
 8021a5e:	4770      	bx	lr
 8021a60:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021a64:	2b05      	cmp	r3, #5
 8021a66:	d801      	bhi.n	8021a6c <__hexdig_fun+0x1a>
 8021a68:	3847      	subs	r0, #71	@ 0x47
 8021a6a:	e7f7      	b.n	8021a5c <__hexdig_fun+0xa>
 8021a6c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021a70:	2b05      	cmp	r3, #5
 8021a72:	d801      	bhi.n	8021a78 <__hexdig_fun+0x26>
 8021a74:	3827      	subs	r0, #39	@ 0x27
 8021a76:	e7f1      	b.n	8021a5c <__hexdig_fun+0xa>
 8021a78:	2000      	movs	r0, #0
 8021a7a:	4770      	bx	lr

08021a7c <__gethex>:
 8021a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a80:	b085      	sub	sp, #20
 8021a82:	468a      	mov	sl, r1
 8021a84:	9302      	str	r3, [sp, #8]
 8021a86:	680b      	ldr	r3, [r1, #0]
 8021a88:	9001      	str	r0, [sp, #4]
 8021a8a:	4690      	mov	r8, r2
 8021a8c:	1c9c      	adds	r4, r3, #2
 8021a8e:	46a1      	mov	r9, r4
 8021a90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8021a94:	2830      	cmp	r0, #48	@ 0x30
 8021a96:	d0fa      	beq.n	8021a8e <__gethex+0x12>
 8021a98:	eba9 0303 	sub.w	r3, r9, r3
 8021a9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8021aa0:	f7ff ffd7 	bl	8021a52 <__hexdig_fun>
 8021aa4:	4605      	mov	r5, r0
 8021aa6:	2800      	cmp	r0, #0
 8021aa8:	d168      	bne.n	8021b7c <__gethex+0x100>
 8021aaa:	49a0      	ldr	r1, [pc, #640]	@ (8021d2c <__gethex+0x2b0>)
 8021aac:	2201      	movs	r2, #1
 8021aae:	4648      	mov	r0, r9
 8021ab0:	f7ff ff26 	bl	8021900 <strncmp>
 8021ab4:	4607      	mov	r7, r0
 8021ab6:	2800      	cmp	r0, #0
 8021ab8:	d167      	bne.n	8021b8a <__gethex+0x10e>
 8021aba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8021abe:	4626      	mov	r6, r4
 8021ac0:	f7ff ffc7 	bl	8021a52 <__hexdig_fun>
 8021ac4:	2800      	cmp	r0, #0
 8021ac6:	d062      	beq.n	8021b8e <__gethex+0x112>
 8021ac8:	4623      	mov	r3, r4
 8021aca:	7818      	ldrb	r0, [r3, #0]
 8021acc:	2830      	cmp	r0, #48	@ 0x30
 8021ace:	4699      	mov	r9, r3
 8021ad0:	f103 0301 	add.w	r3, r3, #1
 8021ad4:	d0f9      	beq.n	8021aca <__gethex+0x4e>
 8021ad6:	f7ff ffbc 	bl	8021a52 <__hexdig_fun>
 8021ada:	fab0 f580 	clz	r5, r0
 8021ade:	096d      	lsrs	r5, r5, #5
 8021ae0:	f04f 0b01 	mov.w	fp, #1
 8021ae4:	464a      	mov	r2, r9
 8021ae6:	4616      	mov	r6, r2
 8021ae8:	3201      	adds	r2, #1
 8021aea:	7830      	ldrb	r0, [r6, #0]
 8021aec:	f7ff ffb1 	bl	8021a52 <__hexdig_fun>
 8021af0:	2800      	cmp	r0, #0
 8021af2:	d1f8      	bne.n	8021ae6 <__gethex+0x6a>
 8021af4:	498d      	ldr	r1, [pc, #564]	@ (8021d2c <__gethex+0x2b0>)
 8021af6:	2201      	movs	r2, #1
 8021af8:	4630      	mov	r0, r6
 8021afa:	f7ff ff01 	bl	8021900 <strncmp>
 8021afe:	2800      	cmp	r0, #0
 8021b00:	d13f      	bne.n	8021b82 <__gethex+0x106>
 8021b02:	b944      	cbnz	r4, 8021b16 <__gethex+0x9a>
 8021b04:	1c74      	adds	r4, r6, #1
 8021b06:	4622      	mov	r2, r4
 8021b08:	4616      	mov	r6, r2
 8021b0a:	3201      	adds	r2, #1
 8021b0c:	7830      	ldrb	r0, [r6, #0]
 8021b0e:	f7ff ffa0 	bl	8021a52 <__hexdig_fun>
 8021b12:	2800      	cmp	r0, #0
 8021b14:	d1f8      	bne.n	8021b08 <__gethex+0x8c>
 8021b16:	1ba4      	subs	r4, r4, r6
 8021b18:	00a7      	lsls	r7, r4, #2
 8021b1a:	7833      	ldrb	r3, [r6, #0]
 8021b1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8021b20:	2b50      	cmp	r3, #80	@ 0x50
 8021b22:	d13e      	bne.n	8021ba2 <__gethex+0x126>
 8021b24:	7873      	ldrb	r3, [r6, #1]
 8021b26:	2b2b      	cmp	r3, #43	@ 0x2b
 8021b28:	d033      	beq.n	8021b92 <__gethex+0x116>
 8021b2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8021b2c:	d034      	beq.n	8021b98 <__gethex+0x11c>
 8021b2e:	1c71      	adds	r1, r6, #1
 8021b30:	2400      	movs	r4, #0
 8021b32:	7808      	ldrb	r0, [r1, #0]
 8021b34:	f7ff ff8d 	bl	8021a52 <__hexdig_fun>
 8021b38:	1e43      	subs	r3, r0, #1
 8021b3a:	b2db      	uxtb	r3, r3
 8021b3c:	2b18      	cmp	r3, #24
 8021b3e:	d830      	bhi.n	8021ba2 <__gethex+0x126>
 8021b40:	f1a0 0210 	sub.w	r2, r0, #16
 8021b44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021b48:	f7ff ff83 	bl	8021a52 <__hexdig_fun>
 8021b4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8021b50:	fa5f fc8c 	uxtb.w	ip, ip
 8021b54:	f1bc 0f18 	cmp.w	ip, #24
 8021b58:	f04f 030a 	mov.w	r3, #10
 8021b5c:	d91e      	bls.n	8021b9c <__gethex+0x120>
 8021b5e:	b104      	cbz	r4, 8021b62 <__gethex+0xe6>
 8021b60:	4252      	negs	r2, r2
 8021b62:	4417      	add	r7, r2
 8021b64:	f8ca 1000 	str.w	r1, [sl]
 8021b68:	b1ed      	cbz	r5, 8021ba6 <__gethex+0x12a>
 8021b6a:	f1bb 0f00 	cmp.w	fp, #0
 8021b6e:	bf0c      	ite	eq
 8021b70:	2506      	moveq	r5, #6
 8021b72:	2500      	movne	r5, #0
 8021b74:	4628      	mov	r0, r5
 8021b76:	b005      	add	sp, #20
 8021b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b7c:	2500      	movs	r5, #0
 8021b7e:	462c      	mov	r4, r5
 8021b80:	e7b0      	b.n	8021ae4 <__gethex+0x68>
 8021b82:	2c00      	cmp	r4, #0
 8021b84:	d1c7      	bne.n	8021b16 <__gethex+0x9a>
 8021b86:	4627      	mov	r7, r4
 8021b88:	e7c7      	b.n	8021b1a <__gethex+0x9e>
 8021b8a:	464e      	mov	r6, r9
 8021b8c:	462f      	mov	r7, r5
 8021b8e:	2501      	movs	r5, #1
 8021b90:	e7c3      	b.n	8021b1a <__gethex+0x9e>
 8021b92:	2400      	movs	r4, #0
 8021b94:	1cb1      	adds	r1, r6, #2
 8021b96:	e7cc      	b.n	8021b32 <__gethex+0xb6>
 8021b98:	2401      	movs	r4, #1
 8021b9a:	e7fb      	b.n	8021b94 <__gethex+0x118>
 8021b9c:	fb03 0002 	mla	r0, r3, r2, r0
 8021ba0:	e7ce      	b.n	8021b40 <__gethex+0xc4>
 8021ba2:	4631      	mov	r1, r6
 8021ba4:	e7de      	b.n	8021b64 <__gethex+0xe8>
 8021ba6:	eba6 0309 	sub.w	r3, r6, r9
 8021baa:	3b01      	subs	r3, #1
 8021bac:	4629      	mov	r1, r5
 8021bae:	2b07      	cmp	r3, #7
 8021bb0:	dc0a      	bgt.n	8021bc8 <__gethex+0x14c>
 8021bb2:	9801      	ldr	r0, [sp, #4]
 8021bb4:	f7fe f82e 	bl	801fc14 <_Balloc>
 8021bb8:	4604      	mov	r4, r0
 8021bba:	b940      	cbnz	r0, 8021bce <__gethex+0x152>
 8021bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8021d30 <__gethex+0x2b4>)
 8021bbe:	4602      	mov	r2, r0
 8021bc0:	21e4      	movs	r1, #228	@ 0xe4
 8021bc2:	485c      	ldr	r0, [pc, #368]	@ (8021d34 <__gethex+0x2b8>)
 8021bc4:	f7fd f972 	bl	801eeac <__assert_func>
 8021bc8:	3101      	adds	r1, #1
 8021bca:	105b      	asrs	r3, r3, #1
 8021bcc:	e7ef      	b.n	8021bae <__gethex+0x132>
 8021bce:	f100 0a14 	add.w	sl, r0, #20
 8021bd2:	2300      	movs	r3, #0
 8021bd4:	4655      	mov	r5, sl
 8021bd6:	469b      	mov	fp, r3
 8021bd8:	45b1      	cmp	r9, r6
 8021bda:	d337      	bcc.n	8021c4c <__gethex+0x1d0>
 8021bdc:	f845 bb04 	str.w	fp, [r5], #4
 8021be0:	eba5 050a 	sub.w	r5, r5, sl
 8021be4:	10ad      	asrs	r5, r5, #2
 8021be6:	6125      	str	r5, [r4, #16]
 8021be8:	4658      	mov	r0, fp
 8021bea:	f7fe f905 	bl	801fdf8 <__hi0bits>
 8021bee:	016d      	lsls	r5, r5, #5
 8021bf0:	f8d8 6000 	ldr.w	r6, [r8]
 8021bf4:	1a2d      	subs	r5, r5, r0
 8021bf6:	42b5      	cmp	r5, r6
 8021bf8:	dd54      	ble.n	8021ca4 <__gethex+0x228>
 8021bfa:	1bad      	subs	r5, r5, r6
 8021bfc:	4629      	mov	r1, r5
 8021bfe:	4620      	mov	r0, r4
 8021c00:	f7fe fc99 	bl	8020536 <__any_on>
 8021c04:	4681      	mov	r9, r0
 8021c06:	b178      	cbz	r0, 8021c28 <__gethex+0x1ac>
 8021c08:	1e6b      	subs	r3, r5, #1
 8021c0a:	1159      	asrs	r1, r3, #5
 8021c0c:	f003 021f 	and.w	r2, r3, #31
 8021c10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8021c14:	f04f 0901 	mov.w	r9, #1
 8021c18:	fa09 f202 	lsl.w	r2, r9, r2
 8021c1c:	420a      	tst	r2, r1
 8021c1e:	d003      	beq.n	8021c28 <__gethex+0x1ac>
 8021c20:	454b      	cmp	r3, r9
 8021c22:	dc36      	bgt.n	8021c92 <__gethex+0x216>
 8021c24:	f04f 0902 	mov.w	r9, #2
 8021c28:	4629      	mov	r1, r5
 8021c2a:	4620      	mov	r0, r4
 8021c2c:	f7ff febf 	bl	80219ae <rshift>
 8021c30:	442f      	add	r7, r5
 8021c32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021c36:	42bb      	cmp	r3, r7
 8021c38:	da42      	bge.n	8021cc0 <__gethex+0x244>
 8021c3a:	9801      	ldr	r0, [sp, #4]
 8021c3c:	4621      	mov	r1, r4
 8021c3e:	f7fe f829 	bl	801fc94 <_Bfree>
 8021c42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021c44:	2300      	movs	r3, #0
 8021c46:	6013      	str	r3, [r2, #0]
 8021c48:	25a3      	movs	r5, #163	@ 0xa3
 8021c4a:	e793      	b.n	8021b74 <__gethex+0xf8>
 8021c4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8021c50:	2a2e      	cmp	r2, #46	@ 0x2e
 8021c52:	d012      	beq.n	8021c7a <__gethex+0x1fe>
 8021c54:	2b20      	cmp	r3, #32
 8021c56:	d104      	bne.n	8021c62 <__gethex+0x1e6>
 8021c58:	f845 bb04 	str.w	fp, [r5], #4
 8021c5c:	f04f 0b00 	mov.w	fp, #0
 8021c60:	465b      	mov	r3, fp
 8021c62:	7830      	ldrb	r0, [r6, #0]
 8021c64:	9303      	str	r3, [sp, #12]
 8021c66:	f7ff fef4 	bl	8021a52 <__hexdig_fun>
 8021c6a:	9b03      	ldr	r3, [sp, #12]
 8021c6c:	f000 000f 	and.w	r0, r0, #15
 8021c70:	4098      	lsls	r0, r3
 8021c72:	ea4b 0b00 	orr.w	fp, fp, r0
 8021c76:	3304      	adds	r3, #4
 8021c78:	e7ae      	b.n	8021bd8 <__gethex+0x15c>
 8021c7a:	45b1      	cmp	r9, r6
 8021c7c:	d8ea      	bhi.n	8021c54 <__gethex+0x1d8>
 8021c7e:	492b      	ldr	r1, [pc, #172]	@ (8021d2c <__gethex+0x2b0>)
 8021c80:	9303      	str	r3, [sp, #12]
 8021c82:	2201      	movs	r2, #1
 8021c84:	4630      	mov	r0, r6
 8021c86:	f7ff fe3b 	bl	8021900 <strncmp>
 8021c8a:	9b03      	ldr	r3, [sp, #12]
 8021c8c:	2800      	cmp	r0, #0
 8021c8e:	d1e1      	bne.n	8021c54 <__gethex+0x1d8>
 8021c90:	e7a2      	b.n	8021bd8 <__gethex+0x15c>
 8021c92:	1ea9      	subs	r1, r5, #2
 8021c94:	4620      	mov	r0, r4
 8021c96:	f7fe fc4e 	bl	8020536 <__any_on>
 8021c9a:	2800      	cmp	r0, #0
 8021c9c:	d0c2      	beq.n	8021c24 <__gethex+0x1a8>
 8021c9e:	f04f 0903 	mov.w	r9, #3
 8021ca2:	e7c1      	b.n	8021c28 <__gethex+0x1ac>
 8021ca4:	da09      	bge.n	8021cba <__gethex+0x23e>
 8021ca6:	1b75      	subs	r5, r6, r5
 8021ca8:	4621      	mov	r1, r4
 8021caa:	9801      	ldr	r0, [sp, #4]
 8021cac:	462a      	mov	r2, r5
 8021cae:	f7fe fa09 	bl	80200c4 <__lshift>
 8021cb2:	1b7f      	subs	r7, r7, r5
 8021cb4:	4604      	mov	r4, r0
 8021cb6:	f100 0a14 	add.w	sl, r0, #20
 8021cba:	f04f 0900 	mov.w	r9, #0
 8021cbe:	e7b8      	b.n	8021c32 <__gethex+0x1b6>
 8021cc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021cc4:	42bd      	cmp	r5, r7
 8021cc6:	dd6f      	ble.n	8021da8 <__gethex+0x32c>
 8021cc8:	1bed      	subs	r5, r5, r7
 8021cca:	42ae      	cmp	r6, r5
 8021ccc:	dc34      	bgt.n	8021d38 <__gethex+0x2bc>
 8021cce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021cd2:	2b02      	cmp	r3, #2
 8021cd4:	d022      	beq.n	8021d1c <__gethex+0x2a0>
 8021cd6:	2b03      	cmp	r3, #3
 8021cd8:	d024      	beq.n	8021d24 <__gethex+0x2a8>
 8021cda:	2b01      	cmp	r3, #1
 8021cdc:	d115      	bne.n	8021d0a <__gethex+0x28e>
 8021cde:	42ae      	cmp	r6, r5
 8021ce0:	d113      	bne.n	8021d0a <__gethex+0x28e>
 8021ce2:	2e01      	cmp	r6, #1
 8021ce4:	d10b      	bne.n	8021cfe <__gethex+0x282>
 8021ce6:	9a02      	ldr	r2, [sp, #8]
 8021ce8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021cec:	6013      	str	r3, [r2, #0]
 8021cee:	2301      	movs	r3, #1
 8021cf0:	6123      	str	r3, [r4, #16]
 8021cf2:	f8ca 3000 	str.w	r3, [sl]
 8021cf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021cf8:	2562      	movs	r5, #98	@ 0x62
 8021cfa:	601c      	str	r4, [r3, #0]
 8021cfc:	e73a      	b.n	8021b74 <__gethex+0xf8>
 8021cfe:	1e71      	subs	r1, r6, #1
 8021d00:	4620      	mov	r0, r4
 8021d02:	f7fe fc18 	bl	8020536 <__any_on>
 8021d06:	2800      	cmp	r0, #0
 8021d08:	d1ed      	bne.n	8021ce6 <__gethex+0x26a>
 8021d0a:	9801      	ldr	r0, [sp, #4]
 8021d0c:	4621      	mov	r1, r4
 8021d0e:	f7fd ffc1 	bl	801fc94 <_Bfree>
 8021d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021d14:	2300      	movs	r3, #0
 8021d16:	6013      	str	r3, [r2, #0]
 8021d18:	2550      	movs	r5, #80	@ 0x50
 8021d1a:	e72b      	b.n	8021b74 <__gethex+0xf8>
 8021d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	d1f3      	bne.n	8021d0a <__gethex+0x28e>
 8021d22:	e7e0      	b.n	8021ce6 <__gethex+0x26a>
 8021d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d1dd      	bne.n	8021ce6 <__gethex+0x26a>
 8021d2a:	e7ee      	b.n	8021d0a <__gethex+0x28e>
 8021d2c:	080256f0 	.word	0x080256f0
 8021d30:	08025588 	.word	0x08025588
 8021d34:	08025761 	.word	0x08025761
 8021d38:	1e6f      	subs	r7, r5, #1
 8021d3a:	f1b9 0f00 	cmp.w	r9, #0
 8021d3e:	d130      	bne.n	8021da2 <__gethex+0x326>
 8021d40:	b127      	cbz	r7, 8021d4c <__gethex+0x2d0>
 8021d42:	4639      	mov	r1, r7
 8021d44:	4620      	mov	r0, r4
 8021d46:	f7fe fbf6 	bl	8020536 <__any_on>
 8021d4a:	4681      	mov	r9, r0
 8021d4c:	117a      	asrs	r2, r7, #5
 8021d4e:	2301      	movs	r3, #1
 8021d50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8021d54:	f007 071f 	and.w	r7, r7, #31
 8021d58:	40bb      	lsls	r3, r7
 8021d5a:	4213      	tst	r3, r2
 8021d5c:	4629      	mov	r1, r5
 8021d5e:	4620      	mov	r0, r4
 8021d60:	bf18      	it	ne
 8021d62:	f049 0902 	orrne.w	r9, r9, #2
 8021d66:	f7ff fe22 	bl	80219ae <rshift>
 8021d6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8021d6e:	1b76      	subs	r6, r6, r5
 8021d70:	2502      	movs	r5, #2
 8021d72:	f1b9 0f00 	cmp.w	r9, #0
 8021d76:	d047      	beq.n	8021e08 <__gethex+0x38c>
 8021d78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021d7c:	2b02      	cmp	r3, #2
 8021d7e:	d015      	beq.n	8021dac <__gethex+0x330>
 8021d80:	2b03      	cmp	r3, #3
 8021d82:	d017      	beq.n	8021db4 <__gethex+0x338>
 8021d84:	2b01      	cmp	r3, #1
 8021d86:	d109      	bne.n	8021d9c <__gethex+0x320>
 8021d88:	f019 0f02 	tst.w	r9, #2
 8021d8c:	d006      	beq.n	8021d9c <__gethex+0x320>
 8021d8e:	f8da 3000 	ldr.w	r3, [sl]
 8021d92:	ea49 0903 	orr.w	r9, r9, r3
 8021d96:	f019 0f01 	tst.w	r9, #1
 8021d9a:	d10e      	bne.n	8021dba <__gethex+0x33e>
 8021d9c:	f045 0510 	orr.w	r5, r5, #16
 8021da0:	e032      	b.n	8021e08 <__gethex+0x38c>
 8021da2:	f04f 0901 	mov.w	r9, #1
 8021da6:	e7d1      	b.n	8021d4c <__gethex+0x2d0>
 8021da8:	2501      	movs	r5, #1
 8021daa:	e7e2      	b.n	8021d72 <__gethex+0x2f6>
 8021dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021dae:	f1c3 0301 	rsb	r3, r3, #1
 8021db2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d0f0      	beq.n	8021d9c <__gethex+0x320>
 8021dba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021dbe:	f104 0314 	add.w	r3, r4, #20
 8021dc2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021dc6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021dca:	f04f 0c00 	mov.w	ip, #0
 8021dce:	4618      	mov	r0, r3
 8021dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8021dd4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021dd8:	d01b      	beq.n	8021e12 <__gethex+0x396>
 8021dda:	3201      	adds	r2, #1
 8021ddc:	6002      	str	r2, [r0, #0]
 8021dde:	2d02      	cmp	r5, #2
 8021de0:	f104 0314 	add.w	r3, r4, #20
 8021de4:	d13c      	bne.n	8021e60 <__gethex+0x3e4>
 8021de6:	f8d8 2000 	ldr.w	r2, [r8]
 8021dea:	3a01      	subs	r2, #1
 8021dec:	42b2      	cmp	r2, r6
 8021dee:	d109      	bne.n	8021e04 <__gethex+0x388>
 8021df0:	1171      	asrs	r1, r6, #5
 8021df2:	2201      	movs	r2, #1
 8021df4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021df8:	f006 061f 	and.w	r6, r6, #31
 8021dfc:	fa02 f606 	lsl.w	r6, r2, r6
 8021e00:	421e      	tst	r6, r3
 8021e02:	d13a      	bne.n	8021e7a <__gethex+0x3fe>
 8021e04:	f045 0520 	orr.w	r5, r5, #32
 8021e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021e0a:	601c      	str	r4, [r3, #0]
 8021e0c:	9b02      	ldr	r3, [sp, #8]
 8021e0e:	601f      	str	r7, [r3, #0]
 8021e10:	e6b0      	b.n	8021b74 <__gethex+0xf8>
 8021e12:	4299      	cmp	r1, r3
 8021e14:	f843 cc04 	str.w	ip, [r3, #-4]
 8021e18:	d8d9      	bhi.n	8021dce <__gethex+0x352>
 8021e1a:	68a3      	ldr	r3, [r4, #8]
 8021e1c:	459b      	cmp	fp, r3
 8021e1e:	db17      	blt.n	8021e50 <__gethex+0x3d4>
 8021e20:	6861      	ldr	r1, [r4, #4]
 8021e22:	9801      	ldr	r0, [sp, #4]
 8021e24:	3101      	adds	r1, #1
 8021e26:	f7fd fef5 	bl	801fc14 <_Balloc>
 8021e2a:	4681      	mov	r9, r0
 8021e2c:	b918      	cbnz	r0, 8021e36 <__gethex+0x3ba>
 8021e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8021e98 <__gethex+0x41c>)
 8021e30:	4602      	mov	r2, r0
 8021e32:	2184      	movs	r1, #132	@ 0x84
 8021e34:	e6c5      	b.n	8021bc2 <__gethex+0x146>
 8021e36:	6922      	ldr	r2, [r4, #16]
 8021e38:	3202      	adds	r2, #2
 8021e3a:	f104 010c 	add.w	r1, r4, #12
 8021e3e:	0092      	lsls	r2, r2, #2
 8021e40:	300c      	adds	r0, #12
 8021e42:	f7fd f81e 	bl	801ee82 <memcpy>
 8021e46:	4621      	mov	r1, r4
 8021e48:	9801      	ldr	r0, [sp, #4]
 8021e4a:	f7fd ff23 	bl	801fc94 <_Bfree>
 8021e4e:	464c      	mov	r4, r9
 8021e50:	6923      	ldr	r3, [r4, #16]
 8021e52:	1c5a      	adds	r2, r3, #1
 8021e54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021e58:	6122      	str	r2, [r4, #16]
 8021e5a:	2201      	movs	r2, #1
 8021e5c:	615a      	str	r2, [r3, #20]
 8021e5e:	e7be      	b.n	8021dde <__gethex+0x362>
 8021e60:	6922      	ldr	r2, [r4, #16]
 8021e62:	455a      	cmp	r2, fp
 8021e64:	dd0b      	ble.n	8021e7e <__gethex+0x402>
 8021e66:	2101      	movs	r1, #1
 8021e68:	4620      	mov	r0, r4
 8021e6a:	f7ff fda0 	bl	80219ae <rshift>
 8021e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021e72:	3701      	adds	r7, #1
 8021e74:	42bb      	cmp	r3, r7
 8021e76:	f6ff aee0 	blt.w	8021c3a <__gethex+0x1be>
 8021e7a:	2501      	movs	r5, #1
 8021e7c:	e7c2      	b.n	8021e04 <__gethex+0x388>
 8021e7e:	f016 061f 	ands.w	r6, r6, #31
 8021e82:	d0fa      	beq.n	8021e7a <__gethex+0x3fe>
 8021e84:	4453      	add	r3, sl
 8021e86:	f1c6 0620 	rsb	r6, r6, #32
 8021e8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021e8e:	f7fd ffb3 	bl	801fdf8 <__hi0bits>
 8021e92:	42b0      	cmp	r0, r6
 8021e94:	dbe7      	blt.n	8021e66 <__gethex+0x3ea>
 8021e96:	e7f0      	b.n	8021e7a <__gethex+0x3fe>
 8021e98:	08025588 	.word	0x08025588

08021e9c <L_shift>:
 8021e9c:	f1c2 0208 	rsb	r2, r2, #8
 8021ea0:	0092      	lsls	r2, r2, #2
 8021ea2:	b570      	push	{r4, r5, r6, lr}
 8021ea4:	f1c2 0620 	rsb	r6, r2, #32
 8021ea8:	6843      	ldr	r3, [r0, #4]
 8021eaa:	6804      	ldr	r4, [r0, #0]
 8021eac:	fa03 f506 	lsl.w	r5, r3, r6
 8021eb0:	432c      	orrs	r4, r5
 8021eb2:	40d3      	lsrs	r3, r2
 8021eb4:	6004      	str	r4, [r0, #0]
 8021eb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8021eba:	4288      	cmp	r0, r1
 8021ebc:	d3f4      	bcc.n	8021ea8 <L_shift+0xc>
 8021ebe:	bd70      	pop	{r4, r5, r6, pc}

08021ec0 <__match>:
 8021ec0:	b530      	push	{r4, r5, lr}
 8021ec2:	6803      	ldr	r3, [r0, #0]
 8021ec4:	3301      	adds	r3, #1
 8021ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021eca:	b914      	cbnz	r4, 8021ed2 <__match+0x12>
 8021ecc:	6003      	str	r3, [r0, #0]
 8021ece:	2001      	movs	r0, #1
 8021ed0:	bd30      	pop	{r4, r5, pc}
 8021ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021ed6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8021eda:	2d19      	cmp	r5, #25
 8021edc:	bf98      	it	ls
 8021ede:	3220      	addls	r2, #32
 8021ee0:	42a2      	cmp	r2, r4
 8021ee2:	d0f0      	beq.n	8021ec6 <__match+0x6>
 8021ee4:	2000      	movs	r0, #0
 8021ee6:	e7f3      	b.n	8021ed0 <__match+0x10>

08021ee8 <__hexnan>:
 8021ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021eec:	680b      	ldr	r3, [r1, #0]
 8021eee:	6801      	ldr	r1, [r0, #0]
 8021ef0:	115e      	asrs	r6, r3, #5
 8021ef2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021ef6:	f013 031f 	ands.w	r3, r3, #31
 8021efa:	b087      	sub	sp, #28
 8021efc:	bf18      	it	ne
 8021efe:	3604      	addne	r6, #4
 8021f00:	2500      	movs	r5, #0
 8021f02:	1f37      	subs	r7, r6, #4
 8021f04:	4682      	mov	sl, r0
 8021f06:	4690      	mov	r8, r2
 8021f08:	9301      	str	r3, [sp, #4]
 8021f0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8021f0e:	46b9      	mov	r9, r7
 8021f10:	463c      	mov	r4, r7
 8021f12:	9502      	str	r5, [sp, #8]
 8021f14:	46ab      	mov	fp, r5
 8021f16:	784a      	ldrb	r2, [r1, #1]
 8021f18:	1c4b      	adds	r3, r1, #1
 8021f1a:	9303      	str	r3, [sp, #12]
 8021f1c:	b342      	cbz	r2, 8021f70 <__hexnan+0x88>
 8021f1e:	4610      	mov	r0, r2
 8021f20:	9105      	str	r1, [sp, #20]
 8021f22:	9204      	str	r2, [sp, #16]
 8021f24:	f7ff fd95 	bl	8021a52 <__hexdig_fun>
 8021f28:	2800      	cmp	r0, #0
 8021f2a:	d151      	bne.n	8021fd0 <__hexnan+0xe8>
 8021f2c:	9a04      	ldr	r2, [sp, #16]
 8021f2e:	9905      	ldr	r1, [sp, #20]
 8021f30:	2a20      	cmp	r2, #32
 8021f32:	d818      	bhi.n	8021f66 <__hexnan+0x7e>
 8021f34:	9b02      	ldr	r3, [sp, #8]
 8021f36:	459b      	cmp	fp, r3
 8021f38:	dd13      	ble.n	8021f62 <__hexnan+0x7a>
 8021f3a:	454c      	cmp	r4, r9
 8021f3c:	d206      	bcs.n	8021f4c <__hexnan+0x64>
 8021f3e:	2d07      	cmp	r5, #7
 8021f40:	dc04      	bgt.n	8021f4c <__hexnan+0x64>
 8021f42:	462a      	mov	r2, r5
 8021f44:	4649      	mov	r1, r9
 8021f46:	4620      	mov	r0, r4
 8021f48:	f7ff ffa8 	bl	8021e9c <L_shift>
 8021f4c:	4544      	cmp	r4, r8
 8021f4e:	d952      	bls.n	8021ff6 <__hexnan+0x10e>
 8021f50:	2300      	movs	r3, #0
 8021f52:	f1a4 0904 	sub.w	r9, r4, #4
 8021f56:	f844 3c04 	str.w	r3, [r4, #-4]
 8021f5a:	f8cd b008 	str.w	fp, [sp, #8]
 8021f5e:	464c      	mov	r4, r9
 8021f60:	461d      	mov	r5, r3
 8021f62:	9903      	ldr	r1, [sp, #12]
 8021f64:	e7d7      	b.n	8021f16 <__hexnan+0x2e>
 8021f66:	2a29      	cmp	r2, #41	@ 0x29
 8021f68:	d157      	bne.n	802201a <__hexnan+0x132>
 8021f6a:	3102      	adds	r1, #2
 8021f6c:	f8ca 1000 	str.w	r1, [sl]
 8021f70:	f1bb 0f00 	cmp.w	fp, #0
 8021f74:	d051      	beq.n	802201a <__hexnan+0x132>
 8021f76:	454c      	cmp	r4, r9
 8021f78:	d206      	bcs.n	8021f88 <__hexnan+0xa0>
 8021f7a:	2d07      	cmp	r5, #7
 8021f7c:	dc04      	bgt.n	8021f88 <__hexnan+0xa0>
 8021f7e:	462a      	mov	r2, r5
 8021f80:	4649      	mov	r1, r9
 8021f82:	4620      	mov	r0, r4
 8021f84:	f7ff ff8a 	bl	8021e9c <L_shift>
 8021f88:	4544      	cmp	r4, r8
 8021f8a:	d936      	bls.n	8021ffa <__hexnan+0x112>
 8021f8c:	f1a8 0204 	sub.w	r2, r8, #4
 8021f90:	4623      	mov	r3, r4
 8021f92:	f853 1b04 	ldr.w	r1, [r3], #4
 8021f96:	f842 1f04 	str.w	r1, [r2, #4]!
 8021f9a:	429f      	cmp	r7, r3
 8021f9c:	d2f9      	bcs.n	8021f92 <__hexnan+0xaa>
 8021f9e:	1b3b      	subs	r3, r7, r4
 8021fa0:	f023 0303 	bic.w	r3, r3, #3
 8021fa4:	3304      	adds	r3, #4
 8021fa6:	3401      	adds	r4, #1
 8021fa8:	3e03      	subs	r6, #3
 8021faa:	42b4      	cmp	r4, r6
 8021fac:	bf88      	it	hi
 8021fae:	2304      	movhi	r3, #4
 8021fb0:	4443      	add	r3, r8
 8021fb2:	2200      	movs	r2, #0
 8021fb4:	f843 2b04 	str.w	r2, [r3], #4
 8021fb8:	429f      	cmp	r7, r3
 8021fba:	d2fb      	bcs.n	8021fb4 <__hexnan+0xcc>
 8021fbc:	683b      	ldr	r3, [r7, #0]
 8021fbe:	b91b      	cbnz	r3, 8021fc8 <__hexnan+0xe0>
 8021fc0:	4547      	cmp	r7, r8
 8021fc2:	d128      	bne.n	8022016 <__hexnan+0x12e>
 8021fc4:	2301      	movs	r3, #1
 8021fc6:	603b      	str	r3, [r7, #0]
 8021fc8:	2005      	movs	r0, #5
 8021fca:	b007      	add	sp, #28
 8021fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fd0:	3501      	adds	r5, #1
 8021fd2:	2d08      	cmp	r5, #8
 8021fd4:	f10b 0b01 	add.w	fp, fp, #1
 8021fd8:	dd06      	ble.n	8021fe8 <__hexnan+0x100>
 8021fda:	4544      	cmp	r4, r8
 8021fdc:	d9c1      	bls.n	8021f62 <__hexnan+0x7a>
 8021fde:	2300      	movs	r3, #0
 8021fe0:	f844 3c04 	str.w	r3, [r4, #-4]
 8021fe4:	2501      	movs	r5, #1
 8021fe6:	3c04      	subs	r4, #4
 8021fe8:	6822      	ldr	r2, [r4, #0]
 8021fea:	f000 000f 	and.w	r0, r0, #15
 8021fee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8021ff2:	6020      	str	r0, [r4, #0]
 8021ff4:	e7b5      	b.n	8021f62 <__hexnan+0x7a>
 8021ff6:	2508      	movs	r5, #8
 8021ff8:	e7b3      	b.n	8021f62 <__hexnan+0x7a>
 8021ffa:	9b01      	ldr	r3, [sp, #4]
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	d0dd      	beq.n	8021fbc <__hexnan+0xd4>
 8022000:	f1c3 0320 	rsb	r3, r3, #32
 8022004:	f04f 32ff 	mov.w	r2, #4294967295
 8022008:	40da      	lsrs	r2, r3
 802200a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802200e:	4013      	ands	r3, r2
 8022010:	f846 3c04 	str.w	r3, [r6, #-4]
 8022014:	e7d2      	b.n	8021fbc <__hexnan+0xd4>
 8022016:	3f04      	subs	r7, #4
 8022018:	e7d0      	b.n	8021fbc <__hexnan+0xd4>
 802201a:	2004      	movs	r0, #4
 802201c:	e7d5      	b.n	8021fca <__hexnan+0xe2>

0802201e <__ascii_mbtowc>:
 802201e:	b082      	sub	sp, #8
 8022020:	b901      	cbnz	r1, 8022024 <__ascii_mbtowc+0x6>
 8022022:	a901      	add	r1, sp, #4
 8022024:	b142      	cbz	r2, 8022038 <__ascii_mbtowc+0x1a>
 8022026:	b14b      	cbz	r3, 802203c <__ascii_mbtowc+0x1e>
 8022028:	7813      	ldrb	r3, [r2, #0]
 802202a:	600b      	str	r3, [r1, #0]
 802202c:	7812      	ldrb	r2, [r2, #0]
 802202e:	1e10      	subs	r0, r2, #0
 8022030:	bf18      	it	ne
 8022032:	2001      	movne	r0, #1
 8022034:	b002      	add	sp, #8
 8022036:	4770      	bx	lr
 8022038:	4610      	mov	r0, r2
 802203a:	e7fb      	b.n	8022034 <__ascii_mbtowc+0x16>
 802203c:	f06f 0001 	mvn.w	r0, #1
 8022040:	e7f8      	b.n	8022034 <__ascii_mbtowc+0x16>

08022042 <_realloc_r>:
 8022042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022046:	4680      	mov	r8, r0
 8022048:	4615      	mov	r5, r2
 802204a:	460c      	mov	r4, r1
 802204c:	b921      	cbnz	r1, 8022058 <_realloc_r+0x16>
 802204e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022052:	4611      	mov	r1, r2
 8022054:	f7fb bbaa 	b.w	801d7ac <_malloc_r>
 8022058:	b92a      	cbnz	r2, 8022066 <_realloc_r+0x24>
 802205a:	f7fd fd91 	bl	801fb80 <_free_r>
 802205e:	2400      	movs	r4, #0
 8022060:	4620      	mov	r0, r4
 8022062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022066:	f000 f86b 	bl	8022140 <_malloc_usable_size_r>
 802206a:	4285      	cmp	r5, r0
 802206c:	4606      	mov	r6, r0
 802206e:	d802      	bhi.n	8022076 <_realloc_r+0x34>
 8022070:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8022074:	d8f4      	bhi.n	8022060 <_realloc_r+0x1e>
 8022076:	4629      	mov	r1, r5
 8022078:	4640      	mov	r0, r8
 802207a:	f7fb fb97 	bl	801d7ac <_malloc_r>
 802207e:	4607      	mov	r7, r0
 8022080:	2800      	cmp	r0, #0
 8022082:	d0ec      	beq.n	802205e <_realloc_r+0x1c>
 8022084:	42b5      	cmp	r5, r6
 8022086:	462a      	mov	r2, r5
 8022088:	4621      	mov	r1, r4
 802208a:	bf28      	it	cs
 802208c:	4632      	movcs	r2, r6
 802208e:	f7fc fef8 	bl	801ee82 <memcpy>
 8022092:	4621      	mov	r1, r4
 8022094:	4640      	mov	r0, r8
 8022096:	f7fd fd73 	bl	801fb80 <_free_r>
 802209a:	463c      	mov	r4, r7
 802209c:	e7e0      	b.n	8022060 <_realloc_r+0x1e>

0802209e <__ascii_wctomb>:
 802209e:	4603      	mov	r3, r0
 80220a0:	4608      	mov	r0, r1
 80220a2:	b141      	cbz	r1, 80220b6 <__ascii_wctomb+0x18>
 80220a4:	2aff      	cmp	r2, #255	@ 0xff
 80220a6:	d904      	bls.n	80220b2 <__ascii_wctomb+0x14>
 80220a8:	228a      	movs	r2, #138	@ 0x8a
 80220aa:	601a      	str	r2, [r3, #0]
 80220ac:	f04f 30ff 	mov.w	r0, #4294967295
 80220b0:	4770      	bx	lr
 80220b2:	700a      	strb	r2, [r1, #0]
 80220b4:	2001      	movs	r0, #1
 80220b6:	4770      	bx	lr

080220b8 <_raise_r>:
 80220b8:	291f      	cmp	r1, #31
 80220ba:	b538      	push	{r3, r4, r5, lr}
 80220bc:	4605      	mov	r5, r0
 80220be:	460c      	mov	r4, r1
 80220c0:	d904      	bls.n	80220cc <_raise_r+0x14>
 80220c2:	2316      	movs	r3, #22
 80220c4:	6003      	str	r3, [r0, #0]
 80220c6:	f04f 30ff 	mov.w	r0, #4294967295
 80220ca:	bd38      	pop	{r3, r4, r5, pc}
 80220cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80220ce:	b112      	cbz	r2, 80220d6 <_raise_r+0x1e>
 80220d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80220d4:	b94b      	cbnz	r3, 80220ea <_raise_r+0x32>
 80220d6:	4628      	mov	r0, r5
 80220d8:	f000 f830 	bl	802213c <_getpid_r>
 80220dc:	4622      	mov	r2, r4
 80220de:	4601      	mov	r1, r0
 80220e0:	4628      	mov	r0, r5
 80220e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80220e6:	f000 b817 	b.w	8022118 <_kill_r>
 80220ea:	2b01      	cmp	r3, #1
 80220ec:	d00a      	beq.n	8022104 <_raise_r+0x4c>
 80220ee:	1c59      	adds	r1, r3, #1
 80220f0:	d103      	bne.n	80220fa <_raise_r+0x42>
 80220f2:	2316      	movs	r3, #22
 80220f4:	6003      	str	r3, [r0, #0]
 80220f6:	2001      	movs	r0, #1
 80220f8:	e7e7      	b.n	80220ca <_raise_r+0x12>
 80220fa:	2100      	movs	r1, #0
 80220fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022100:	4620      	mov	r0, r4
 8022102:	4798      	blx	r3
 8022104:	2000      	movs	r0, #0
 8022106:	e7e0      	b.n	80220ca <_raise_r+0x12>

08022108 <raise>:
 8022108:	4b02      	ldr	r3, [pc, #8]	@ (8022114 <raise+0xc>)
 802210a:	4601      	mov	r1, r0
 802210c:	6818      	ldr	r0, [r3, #0]
 802210e:	f7ff bfd3 	b.w	80220b8 <_raise_r>
 8022112:	bf00      	nop
 8022114:	20000148 	.word	0x20000148

08022118 <_kill_r>:
 8022118:	b538      	push	{r3, r4, r5, lr}
 802211a:	4d07      	ldr	r5, [pc, #28]	@ (8022138 <_kill_r+0x20>)
 802211c:	2300      	movs	r3, #0
 802211e:	4604      	mov	r4, r0
 8022120:	4608      	mov	r0, r1
 8022122:	4611      	mov	r1, r2
 8022124:	602b      	str	r3, [r5, #0]
 8022126:	f7e1 fe87 	bl	8003e38 <_kill>
 802212a:	1c43      	adds	r3, r0, #1
 802212c:	d102      	bne.n	8022134 <_kill_r+0x1c>
 802212e:	682b      	ldr	r3, [r5, #0]
 8022130:	b103      	cbz	r3, 8022134 <_kill_r+0x1c>
 8022132:	6023      	str	r3, [r4, #0]
 8022134:	bd38      	pop	{r3, r4, r5, pc}
 8022136:	bf00      	nop
 8022138:	200037a8 	.word	0x200037a8

0802213c <_getpid_r>:
 802213c:	f7e1 be74 	b.w	8003e28 <_getpid>

08022140 <_malloc_usable_size_r>:
 8022140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022144:	1f18      	subs	r0, r3, #4
 8022146:	2b00      	cmp	r3, #0
 8022148:	bfbc      	itt	lt
 802214a:	580b      	ldrlt	r3, [r1, r0]
 802214c:	18c0      	addlt	r0, r0, r3
 802214e:	4770      	bx	lr

08022150 <_init>:
 8022150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022152:	bf00      	nop
 8022154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022156:	bc08      	pop	{r3}
 8022158:	469e      	mov	lr, r3
 802215a:	4770      	bx	lr

0802215c <_fini>:
 802215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802215e:	bf00      	nop
 8022160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022162:	bc08      	pop	{r3}
 8022164:	469e      	mov	lr, r3
 8022166:	4770      	bx	lr
