
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000000  20000000  080259bc  00000000  2**0
                  ALLOC
  2 .text         00022130  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000036dc  080222d0  080222d0  000232d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080259ac  080259ac  00027304  2**0
                  CONTENTS
  5 .ARM          00000008  080259ac  080259ac  000269ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080259b4  080259b4  00027304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080259b4  080259b4  000269b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080259b8  080259b8  000269b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000304  20000000  080259bc  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000034ac  20000304  08025cc0  00027304  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200037b0  08025cc0  000277b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00027304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003798c  00000000  00000000  00027334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a5e  00000000  00000000  0005ecc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003020  00000000  00000000  00067720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000250a  00000000  00000000  0006a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026549  00000000  00000000  0006cc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004502f  00000000  00000000  00093193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4f9c  00000000  00000000  000d81c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018d15e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dea8  00000000  00000000  0018d1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  0019b04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000304 	.word	0x20000304
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080222b8 	.word	0x080222b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000308 	.word	0x20000308
 80001dc:	080222b8 	.word	0x080222b8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e03d      	b.n	80010a4 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d21b      	bcs.n	8001068 <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	43db      	mvns	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	4002      	ands	r2, r0
 800104c:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4403      	add	r3, r0
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e01a      	b.n	800109e <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	43db      	mvns	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	440b      	add	r3, r1
 8001080:	4002      	ands	r2, r0
 8001082:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4403      	add	r3, r0
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010aa:	d3bd      	bcc.n	8001028 <setSoftPWM+0x14>
		}
	}

}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (blue_led_pwm_val != 0) {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <toggle_blue_led+0x34>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <toggle_blue_led+0x16>
		blue_led_pwm_val = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <toggle_blue_led+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e003      	b.n	80010da <toggle_blue_led+0x1e>
	} else {
		blue_led_pwm_val = 1000;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <toggle_blue_led+0x34>)
 80010d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d8:	801a      	strh	r2, [r3, #0]
	}
	BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <toggle_blue_led+0x34>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <toggle_blue_led+0x38>)
 80010e2:	4619      	mov	r1, r3
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff ff95 	bl	8001014 <setSoftPWM>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200012ca 	.word	0x200012ca
 80010f4:	20000324 	.word	0x20000324

080010f8 <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <pir_interrupt+0x2c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001102:	2101      	movs	r1, #1
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <pir_interrupt+0x30>)
 8001106:	f004 ffd3 	bl	80060b0 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <pir_interrupt+0x34>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 8001116:	e002      	b.n	800111e <pir_interrupt+0x26>
		pir_motion_flag = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <pir_interrupt+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001589 	.word	0x20001589
 8001128:	40020000 	.word	0x40020000
 800112c:	20001588 	.word	0x20001588

08001130 <timer_interrupt>:

void timer_interrupt() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <timer_interrupt+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <timer_interrupt+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <timer_interrupt+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001146:	d302      	bcc.n	800114e <timer_interrupt+0x1e>
		time_keep = 0;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <timer_interrupt+0x2c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 800114e:	f002 ffe3 	bl	8004118 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a02      	ldr	r2, [pc, #8]	@ (8001160 <timer_interrupt+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000157c 	.word	0x2000157c
 8001160:	200017c0 	.word	0x200017c0

08001164 <power_off_detect>:

void power_off_detect() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 8001168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <power_off_detect+0x2c>)
 800116e:	f004 ff9f 	bl	80060b0 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <power_off_detect+0x26>
		_RunTime_Packet.pwr_off_det = 1;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <power_off_detect+0x30>)
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2108      	movs	r1, #8
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <power_off_detect+0x34>)
 8001186:	f004 ffab 	bl	80060e0 <HAL_GPIO_WritePin>
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	20001530 	.word	0x20001530
 8001198:	40020400 	.word	0x40020400

0800119c <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2044      	movs	r0, #68	@ 0x44
 80011c4:	f003 fd8b 	bl	8004cde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011c8:	2044      	movs	r0, #68	@ 0x44
 80011ca:	f003 fda4 	bl	8004d16 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <pwr_off_detected>:

static void pwr_off_detected() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <pwr_off_detected+0x3c>)
 80011e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <pwr_off_detected+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		GREEN_LED_PWM(disable_led);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <pwr_off_detected+0x40>)
 80011f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
		RED_LED_PWM(disable_led);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <pwr_off_detected+0x40>)
 80011fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
		BLUE_LED_PWM(0);
 8001202:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <pwr_off_detected+0x44>)
 8001204:	2100      	movs	r1, #0
 8001206:	2008      	movs	r0, #8
 8001208:	f7ff ff04 	bl	8001014 <setSoftPWM>
		HAL_Delay(3500);
 800120c:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001210:	f002 ff8e 	bl	8004130 <HAL_Delay>

	}
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20001530 	.word	0x20001530
 800121c:	40000400 	.word	0x40000400
 8001220:	20000324 	.word	0x20000324

08001224 <clock_speed_high>:
}

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
//	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f01d fdc0 	bl	801edb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <clock_speed_high+0xd4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <clock_speed_high+0xd4>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <clock_speed_high+0xd4>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <clock_speed_high+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001270:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <clock_speed_high+0xd8>)
 8001272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <clock_speed_high+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001284:	2305      	movs	r3, #5
 8001286:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800129c:	2319      	movs	r3, #25
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80012a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80012aa:	2307      	movs	r3, #7
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fc3c 	bl	8008b30 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <clock_speed_high+0x9e>
		Error_Handler();
 80012be:	f002 f9e1 	bl	8003684 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fe9e 	bl	8009020 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <clock_speed_high+0xca>
		Error_Handler();
 80012ea:	f002 f9cb 	bl	8003684 <Error_Handler>
	}

}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	@ 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <load_param+0xa4>)
 8001308:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8b3 325f 	ldrh.w	r3, [r3, #607]	@ 0x25f
 8001310:	b29b      	uxth	r3, r3
 8001312:	f44f 52c2 	mov.w	r2, #6208	@ 0x1840
 8001316:	4293      	cmp	r3, r2
 8001318:	d118      	bne.n	800134c <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 800131a:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <load_param+0xa8>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f240 2361 	movw	r3, #609	@ 0x261
 8001326:	461a      	mov	r2, r3
 8001328:	f01d fe5d 	bl	801efe6 <memcpy>

		if (strstr(_Flash_Packet.File_Name, "devEUI")) {
 800132c:	491f      	ldr	r1, [pc, #124]	@ (80013ac <load_param+0xac>)
 800132e:	481e      	ldr	r0, [pc, #120]	@ (80013a8 <load_param+0xa8>)
 8001330:	f01d fdb4 	bl	801ee9c <strstr>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d019      	beq.n	800136e <load_param+0x6e>
			sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800133a:	f001 f89d 	bl	8002478 <ver_GetUid>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	491b      	ldr	r1, [pc, #108]	@ (80013b0 <load_param+0xb0>)
 8001344:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <load_param+0xa8>)
 8001346:	f01d fbed 	bl	801eb24 <siprintf>
 800134a:	e010      	b.n	800136e <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 800134c:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <load_param+0xa8>)
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <load_param+0xb4>)
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f240 2361 	movw	r3, #609	@ 0x261
 8001358:	461a      	mov	r2, r3
 800135a:	f01d fe44 	bl	801efe6 <memcpy>
		sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800135e:	f001 f88b 	bl	8002478 <ver_GetUid>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4912      	ldr	r1, [pc, #72]	@ (80013b0 <load_param+0xb0>)
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <load_param+0xa8>)
 800136a:	f01d fbdb 	bl	801eb24 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 800136e:	4912      	ldr	r1, [pc, #72]	@ (80013b8 <load_param+0xb8>)
 8001370:	4812      	ldr	r0, [pc, #72]	@ (80013bc <load_param+0xbc>)
 8001372:	f01d fd93 	bl	801ee9c <strstr>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <load_param+0xc0>)
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001384:	e00a      	b.n	800139c <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001386:	490f      	ldr	r1, [pc, #60]	@ (80013c4 <load_param+0xc4>)
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <load_param+0xbc>)
 800138a:	f01d fd87 	bl	801ee9c <strstr>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <load_param+0xc0>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08060000 	.word	0x08060000
 80013a8:	200012cc 	.word	0x200012cc
 80013ac:	080222d0 	.word	0x080222d0
 80013b0:	080222d8 	.word	0x080222d8
 80013b4:	08024e18 	.word	0x08024e18
 80013b8:	080222dc 	.word	0x080222dc
 80013bc:	20001330 	.word	0x20001330
 80013c0:	20001530 	.word	0x20001530
 80013c4:	080222e4 	.word	0x080222e4

080013c8 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ce:	b672      	cpsid	i
}
 80013d0:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <store_param+0xc0>)
 80013d4:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80013d6:	f004 f963 	bl	80056a0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013da:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <store_param+0xc4>)
 80013dc:	2201      	movs	r2, #1
 80013de:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <store_param+0xc4>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <store_param+0xc4>)
 80013e8:	2210      	movs	r2, #16
 80013ea:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <store_param+0xc4>)
 80013ee:	2220      	movs	r2, #32
 80013f0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <store_param+0xc4>)
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <store_param+0xc4>)
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <store_param+0xc4>)
 8001400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001404:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001406:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <store_param+0xc8>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <store_param+0xc8>)
 800140e:	2202      	movs	r2, #2
 8001410:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <store_param+0xc8>)
 8001414:	2207      	movs	r2, #7
 8001416:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <store_param+0xc8>)
 800141a:	2201      	movs	r2, #1
 800141c:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	481b      	ldr	r0, [pc, #108]	@ (8001490 <store_param+0xc8>)
 8001424:	f004 faba 	bl	800599c <HAL_FLASHEx_Erase>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800142e:	f004 f969 	bl	8005704 <HAL_FLASH_GetError>
 8001432:	4603      	mov	r3, r0
 8001434:	e024      	b.n	8001480 <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <store_param+0xcc>)
 8001438:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <store_param+0xd0>)
 800143c:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800143e:	e016      	b.n	800146e <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 8001440:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	68f9      	ldr	r1, [r7, #12]
 8001448:	2002      	movs	r0, #2
 800144a:	f004 f8d5 	bl	80055f8 <HAL_FLASH_Program>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <store_param+0x9a>

		{
			WrAdr += 4;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3304      	adds	r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3304      	adds	r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	e005      	b.n	800146e <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 8001462:	f004 f93f 	bl	80056e4 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001466:	f004 f94d 	bl	8005704 <HAL_FLASH_GetError>
 800146a:	4603      	mov	r3, r0
 800146c:	e008      	b.n	8001480 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3e4      	bcc.n	8001440 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001476:	f004 f935 	bl	80056e4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800147a:	b662      	cpsie	i
}
 800147c:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800147e:	2300      	movs	r3, #0

}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200012cc 	.word	0x200012cc
 800148c:	40023c00 	.word	0x40023c00
 8001490:	200017dc 	.word	0x200017dc
 8001494:	08060261 	.word	0x08060261
 8001498:	08060000 	.word	0x08060000

0800149c <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	if (save_param) {
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <save_data+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <save_data+0x52>
		if (start_timer) {
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <save_data+0x5c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80014b0:	4812      	ldr	r0, [pc, #72]	@ (80014fc <save_data+0x60>)
 80014b2:	f009 ff1b 	bl	800b2ec <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80014b6:	4811      	ldr	r0, [pc, #68]	@ (80014fc <save_data+0x60>)
 80014b8:	f009 feb6 	bl	800b228 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <save_data+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <save_data+0x5c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <save_data+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014d0:	d30d      	bcc.n	80014ee <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80014d2:	480a      	ldr	r0, [pc, #40]	@ (80014fc <save_data+0x60>)
 80014d4:	f009 ff0a 	bl	800b2ec <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80014d8:	f7ff ff76 	bl	80013c8 <store_param>
			time_keep = 0;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <save_data+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <save_data+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <save_data+0x5c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20001579 	.word	0x20001579
 80014f8:	2000157a 	.word	0x2000157a
 80014fc:	20001984 	.word	0x20001984
 8001500:	2000157c 	.word	0x2000157c

08001504 <init_scd30_i2c>:
	}
	//error = scd4x_stop_periodic_measurement();
}

#elif use_scd30
static void init_scd30_i2c() {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0



	int16_t error = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	80fb      	strh	r3, [r7, #6]
	sensirion_i2c_hal_init();
 800150e:	f013 fd31 	bl	8014f74 <sensirion_i2c_hal_init>


	scd4x_wake_up();
 8001512:	f013 fbb7 	bl	8014c84 <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 8001516:	f013 fb41 	bl	8014b9c <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 800151a:	f013 fb67 	bl	8014bec <scd4x_reinit>
	scd4x_power_down();
 800151e:	f013 fb8b 	bl	8014c38 <scd4x_power_down>


	init_driver(SCD30_I2C_ADDR_61);
 8001522:	2061      	movs	r0, #97	@ 0x61
 8001524:	f012 feb8 	bl	8014298 <init_driver>
	scd30_stop_periodic_measurement();
 8001528:	f012 ff5a 	bl	80143e0 <scd30_stop_periodic_measurement>
scd30_set_measurement_interval(2);
 800152c:	2002      	movs	r0, #2
 800152e:	f012 ff85 	bl	801443c <scd30_set_measurement_interval>
//uint16_t inter;
//scd30_get_measurement_interval(&inter);
	//   scd30_soft_reset();
	uint8_t major = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	717b      	strb	r3, [r7, #5]
	uint8_t minor = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	713b      	strb	r3, [r7, #4]
	error = scd30_read_firmware_version(&major, &minor);
 800153a:	1d3a      	adds	r2, r7, #4
 800153c:	1d7b      	adds	r3, r7, #5
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f013 faad 	bl	8014aa0 <scd30_read_firmware_version>
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <get_scd30_measurement>:

void get_scd30_measurement() {
 8001554:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001558:	b09e      	sub	sp, #120	@ 0x78
 800155a:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 800155c:	2300      	movs	r3, #0
 800155e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 8001562:	2000      	movs	r0, #0
 8001564:	f012 ff04 	bl	8014370 <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001574:	e081      	b.n	800167a <get_scd30_measurement+0x126>
		run_console_co2 = 1;
 8001576:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <get_scd30_measurement+0x14c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
	  if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))//dont give delay when usb connected as we want to service console aswell
 800157c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001580:	4848      	ldr	r0, [pc, #288]	@ (80016a4 <get_scd30_measurement+0x150>)
 8001582:	f004 fd95 	bl	80060b0 <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <get_scd30_measurement+0x3e>
		{
		sensirion_i2c_hal_sleep_usec(1500000);
 800158c:	4846      	ldr	r0, [pc, #280]	@ (80016a8 <get_scd30_measurement+0x154>)
 800158e:	f013 fd67 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
		}
		console_process();
 8001592:	f010 fe71 	bl	8012278 <console_process>
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 8001596:	4a45      	ldr	r2, [pc, #276]	@ (80016ac <get_scd30_measurement+0x158>)
 8001598:	4945      	ldr	r1, [pc, #276]	@ (80016b0 <get_scd30_measurement+0x15c>)
 800159a:	4846      	ldr	r0, [pc, #280]	@ (80016b4 <get_scd30_measurement+0x160>)
 800159c:	f012 fec8 	bl	8014330 <scd30_blocking_read_measurement_data>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 80015a6:	4b44      	ldr	r3, [pc, #272]	@ (80016b8 <get_scd30_measurement+0x164>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d05c      	beq.n	8001668 <get_scd30_measurement+0x114>
			char buf[100];
			if (error) {
 80015ae:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d013      	beq.n	80015de <get_scd30_measurement+0x8a>
				sprintf(buf,
 80015b6:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 80015ba:	463b      	mov	r3, r7
 80015bc:	493f      	ldr	r1, [pc, #252]	@ (80016bc <get_scd30_measurement+0x168>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f01d fab0 	bl	801eb24 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80015c4:	463b      	mov	r3, r7
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fe6a 	bl	80002a0 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4639      	mov	r1, r7
 80015d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d6:	483a      	ldr	r0, [pc, #232]	@ (80016c0 <get_scd30_measurement+0x16c>)
 80015d8:	f00a fe3e 	bl	800c258 <HAL_UART_Transmit>
 80015dc:	e044      	b.n	8001668 <get_scd30_measurement+0x114>
			} else if (_RunTime_Packet.co2 == 0) {
 80015de:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <get_scd30_measurement+0x160>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d111      	bne.n	8001612 <get_scd30_measurement+0xbe>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 80015ee:	463b      	mov	r3, r7
 80015f0:	4934      	ldr	r1, [pc, #208]	@ (80016c4 <get_scd30_measurement+0x170>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f01d fa96 	bl	801eb24 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80015f8:	463b      	mov	r3, r7
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fe50 	bl	80002a0 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	b29a      	uxth	r2, r3
 8001604:	4639      	mov	r1, r7
 8001606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160a:	482d      	ldr	r0, [pc, #180]	@ (80016c0 <get_scd30_measurement+0x16c>)
 800160c:	f00a fe24 	bl	800c258 <HAL_UART_Transmit>
 8001610:	e02a      	b.n	8001668 <get_scd30_measurement+0x114>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001614:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ffae 	bl	8000578 <__aeabi_f2d>
 800161c:	4680      	mov	r8, r0
 800161e:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001622:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ffa7 	bl	8000578 <__aeabi_f2d>
 800162a:	4604      	mov	r4, r0
 800162c:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001630:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffa0 	bl	8000578 <__aeabi_f2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4638      	mov	r0, r7
 800163e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001642:	e9cd 4500 	strd	r4, r5, [sp]
 8001646:	4642      	mov	r2, r8
 8001648:	464b      	mov	r3, r9
 800164a:	491f      	ldr	r1, [pc, #124]	@ (80016c8 <get_scd30_measurement+0x174>)
 800164c:	f01d fa6a 	bl	801eb24 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001650:	463b      	mov	r3, r7
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fe24 	bl	80002a0 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	4639      	mov	r1, r7
 800165e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <get_scd30_measurement+0x16c>)
 8001664:	f00a fdf8 	bl	800c258 <HAL_UART_Transmit>
			}
		}

		led_awake_routine1();
 8001668:	f000 fd3c 	bl	80020e4 <led_awake_routine1>
		console_process();
 800166c:	f010 fe04 	bl	8012278 <console_process>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 8001670:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001674:	3301      	adds	r3, #1
 8001676:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800167a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <get_scd30_measurement+0x178>)
 8001682:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8001686:	b29b      	uxth	r3, r3
 8001688:	429a      	cmp	r2, r3
 800168a:	f4ff af74 	bcc.w	8001576 <get_scd30_measurement+0x22>
	}
	run_console_co2 = 0;
 800168e:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <get_scd30_measurement+0x14c>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]

}
 8001694:	bf00      	nop
 8001696:	3768      	adds	r7, #104	@ 0x68
 8001698:	46bd      	mov	sp, r7
 800169a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800169e:	bf00      	nop
 80016a0:	20000320 	.word	0x20000320
 80016a4:	40020000 	.word	0x40020000
 80016a8:	0016e360 	.word	0x0016e360
 80016ac:	20001538 	.word	0x20001538
 80016b0:	20001534 	.word	0x20001534
 80016b4:	20001530 	.word	0x20001530
 80016b8:	20001578 	.word	0x20001578
 80016bc:	080222ec 	.word	0x080222ec
 80016c0:	20001a74 	.word	0x20001a74
 80016c4:	08022324 	.word	0x08022324
 80016c8:	08022348 	.word	0x08022348
 80016cc:	200012cc 	.word	0x200012cc

080016d0 <get_scd30_measurement_>:

void get_scd30_measurement_()
{
 80016d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016d4:	b09e      	sub	sp, #120	@ 0x78
 80016d6:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 80016de:	2000      	movs	r0, #0
 80016e0:	f012 fe46 	bl	8014370 <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80016f0:	e06f      	b.n	80017d2 <get_scd30_measurement_+0x102>
		//sensirion_i2c_hal_sleep_usec(1500000);
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 80016f2:	4a3f      	ldr	r2, [pc, #252]	@ (80017f0 <get_scd30_measurement_+0x120>)
 80016f4:	493f      	ldr	r1, [pc, #252]	@ (80017f4 <get_scd30_measurement_+0x124>)
 80016f6:	4840      	ldr	r0, [pc, #256]	@ (80017f8 <get_scd30_measurement_+0x128>)
 80016f8:	f012 fe1a 	bl	8014330 <scd30_blocking_read_measurement_data>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 8001702:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <get_scd30_measurement_+0x12c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d05c      	beq.n	80017c4 <get_scd30_measurement_+0xf4>
			char buf[100];
			if (error) {
 800170a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800170e:	2b00      	cmp	r3, #0
 8001710:	d013      	beq.n	800173a <get_scd30_measurement_+0x6a>
				sprintf(buf,
 8001712:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 8001716:	463b      	mov	r3, r7
 8001718:	4939      	ldr	r1, [pc, #228]	@ (8001800 <get_scd30_measurement_+0x130>)
 800171a:	4618      	mov	r0, r3
 800171c:	f01d fa02 	bl	801eb24 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001720:	463b      	mov	r3, r7
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fdbc 	bl	80002a0 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	b29a      	uxth	r2, r3
 800172c:	4639      	mov	r1, r7
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	4834      	ldr	r0, [pc, #208]	@ (8001804 <get_scd30_measurement_+0x134>)
 8001734:	f00a fd90 	bl	800c258 <HAL_UART_Transmit>
 8001738:	e044      	b.n	80017c4 <get_scd30_measurement_+0xf4>
			} else if (_RunTime_Packet.co2 == 0) {
 800173a:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d111      	bne.n	800176e <get_scd30_measurement_+0x9e>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 800174a:	463b      	mov	r3, r7
 800174c:	492e      	ldr	r1, [pc, #184]	@ (8001808 <get_scd30_measurement_+0x138>)
 800174e:	4618      	mov	r0, r3
 8001750:	f01d f9e8 	bl	801eb24 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001754:	463b      	mov	r3, r7
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fda2 	bl	80002a0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	4639      	mov	r1, r7
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	4827      	ldr	r0, [pc, #156]	@ (8001804 <get_scd30_measurement_+0x134>)
 8001768:	f00a fd76 	bl	800c258 <HAL_UART_Transmit>
 800176c:	e02a      	b.n	80017c4 <get_scd30_measurement_+0xf4>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <get_scd30_measurement_+0x128>)
 8001770:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe ff00 	bl	8000578 <__aeabi_f2d>
 8001778:	4680      	mov	r8, r0
 800177a:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800177e:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fef9 	bl	8000578 <__aeabi_f2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800178c:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fef2 	bl	8000578 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4638      	mov	r0, r7
 800179a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800179e:	e9cd 4500 	strd	r4, r5, [sp]
 80017a2:	4642      	mov	r2, r8
 80017a4:	464b      	mov	r3, r9
 80017a6:	4919      	ldr	r1, [pc, #100]	@ (800180c <get_scd30_measurement_+0x13c>)
 80017a8:	f01d f9bc 	bl	801eb24 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80017ac:	463b      	mov	r3, r7
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fd76 	bl	80002a0 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4639      	mov	r1, r7
 80017ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017be:	4811      	ldr	r0, [pc, #68]	@ (8001804 <get_scd30_measurement_+0x134>)
 80017c0:	f00a fd4a 	bl	800c258 <HAL_UART_Transmit>
			}
		}

		led_awake_routine1();
 80017c4:	f000 fc8e 	bl	80020e4 <led_awake_routine1>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80017c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017cc:	3301      	adds	r3, #1
 80017ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <get_scd30_measurement_+0x140>)
 80017da:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80017de:	b29b      	uxth	r3, r3
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d386      	bcc.n	80016f2 <get_scd30_measurement_+0x22>

	}
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3768      	adds	r7, #104	@ 0x68
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f0:	20001538 	.word	0x20001538
 80017f4:	20001534 	.word	0x20001534
 80017f8:	20001530 	.word	0x20001530
 80017fc:	20001578 	.word	0x20001578
 8001800:	080222ec 	.word	0x080222ec
 8001804:	20001a74 	.word	0x20001a74
 8001808:	08022324 	.word	0x08022324
 800180c:	08022348 	.word	0x08022348
 8001810:	200012cc 	.word	0x200012cc

08001814 <init_sps30>:

#endif

static void init_sps30() {
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	@ 0x30
 8001818:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 800181a:	480b      	ldr	r0, [pc, #44]	@ (8001848 <init_sps30+0x34>)
 800181c:	f014 f824 	bl	8015868 <sensirion_sleep_usec>

	sensirion_uart_open();
 8001820:	f013 ff6c 	bl	80156fc <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f014 f93d 	bl	8015aa6 <sps30_read_version>
 800182c:	4603      	mov	r3, r0
 800182e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4618      	mov	r0, r3
 8001836:	f014 f82b 	bl	8015890 <sps30_get_serial>
 800183a:	4603      	mov	r3, r0
 800183c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 800183e:	bf00      	nop
 8001840:	3730      	adds	r7, #48	@ 0x30
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	000f4240 	.word	0x000f4240

0800184c <get_sps30_measurement>:
void get_sps30_measurement() {
 800184c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001850:	b0a0      	sub	sp, #128	@ 0x80
 8001852:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 8001854:	f014 f848 	bl	80158e8 <sps30_start_measurement>
 8001858:	4603      	mov	r3, r0
 800185a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 800185e:	483a      	ldr	r0, [pc, #232]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001860:	f014 f86e 	bl	8015940 <sps30_read_measurement>
 8001864:	4603      	mov	r3, r0
 8001866:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 800186a:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <get_sps30_measurement+0xfc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a37      	ldr	r2, [pc, #220]	@ (800194c <get_sps30_measurement+0x100>)
 8001870:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a35      	ldr	r2, [pc, #212]	@ (800194c <get_sps30_measurement+0x100>)
 8001878:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 800187a:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <get_sps30_measurement+0xfc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4a33      	ldr	r2, [pc, #204]	@ (800194c <get_sps30_measurement+0x100>)
 8001880:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 8001882:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4a31      	ldr	r2, [pc, #196]	@ (800194c <get_sps30_measurement+0x100>)
 8001888:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 800188a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800188e:	2b00      	cmp	r3, #0
 8001890:	db54      	blt.n	800193c <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 8001892:	4b2f      	ldr	r3, [pc, #188]	@ (8001950 <get_sps30_measurement+0x104>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d050      	beq.n	800193c <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 800189a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800189e:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d113      	bne.n	80018d4 <get_sps30_measurement+0x88>
				sprintf(buffer,
 80018ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	463b      	mov	r3, r7
 80018b4:	4927      	ldr	r1, [pc, #156]	@ (8001954 <get_sps30_measurement+0x108>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f01d f934 	bl	801eb24 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80018bc:	463b      	mov	r3, r7
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fcee 	bl	80002a0 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4639      	mov	r1, r7
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	4822      	ldr	r0, [pc, #136]	@ (8001958 <get_sps30_measurement+0x10c>)
 80018d0:	f00a fcc2 	bl	800c258 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe4d 	bl	8000578 <__aeabi_f2d>
 80018de:	4682      	mov	sl, r0
 80018e0:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018e4:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe46 	bl	8000578 <__aeabi_f2d>
 80018ec:	4604      	mov	r4, r0
 80018ee:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe3f 	bl	8000578 <__aeabi_f2d>
 80018fa:	4680      	mov	r8, r0
 80018fc:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001900:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe38 	bl	8000578 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4638      	mov	r0, r7
 800190e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001912:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001916:	e9cd 4500 	strd	r4, r5, [sp]
 800191a:	4652      	mov	r2, sl
 800191c:	465b      	mov	r3, fp
 800191e:	490f      	ldr	r1, [pc, #60]	@ (800195c <get_sps30_measurement+0x110>)
 8001920:	f01d f900 	bl	801eb24 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001924:	463b      	mov	r3, r7
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fcba 	bl	80002a0 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	4639      	mov	r1, r7
 8001932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001936:	4808      	ldr	r0, [pc, #32]	@ (8001958 <get_sps30_measurement+0x10c>)
 8001938:	f00a fc8e 	bl	800c258 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 800193c:	bf00      	nop
 800193e:	3768      	adds	r7, #104	@ 0x68
 8001940:	46bd      	mov	sp, r7
 8001942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001946:	bf00      	nop
 8001948:	20001798 	.word	0x20001798
 800194c:	20001530 	.word	0x20001530
 8001950:	20001578 	.word	0x20001578
 8001954:	0802237c 	.word	0x0802237c
 8001958:	20001a74 	.word	0x20001a74
 800195c:	080223b0 	.word	0x080223b0

08001960 <check_peripheral_error>:
static void check_peripheral_error() {
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	@ 0x38
 8001964:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 8001966:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <check_peripheral_error+0xac>)
 8001968:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <check_peripheral_error+0x1c>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 8001970:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <check_peripheral_error+0xac>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		console_uart_init();
 8001978:	f010 fc96 	bl	80122a8 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <check_peripheral_error+0xac>)
 800197e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001982:	2b00      	cmp	r3, #0
 8001984:	d015      	beq.n	80019b2 <check_peripheral_error+0x52>
		_RunTime_Packet.sps30_uart_error = 0;
 8001986:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <check_peripheral_error+0xac>)
 8001988:	2200      	movs	r2, #0
 800198a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		disable_5v();
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001994:	481e      	ldr	r0, [pc, #120]	@ (8001a10 <check_peripheral_error+0xb0>)
 8001996:	f004 fba3 	bl	80060e0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800199a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800199e:	f002 fbc7 	bl	8004130 <HAL_Delay>
		enable_5v();
 80019a2:	2201      	movs	r2, #1
 80019a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019a8:	4819      	ldr	r0, [pc, #100]	@ (8001a10 <check_peripheral_error+0xb0>)
 80019aa:	f004 fb99 	bl	80060e0 <HAL_GPIO_WritePin>
		init_sps30();
 80019ae:	f7ff ff31 	bl	8001814 <init_sps30>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
	}
#elif use_scd30
	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	2205      	movs	r2, #5
 80019b8:	21c2      	movs	r1, #194	@ 0xc2
 80019ba:	4816      	ldr	r0, [pc, #88]	@ (8001a14 <check_peripheral_error+0xb4>)
 80019bc:	f005 f866 	bl	8006a8c <HAL_I2C_IsDeviceReady>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <check_peripheral_error+0x9a>
			!= HAL_OK) {

		if (debug_scd_pm) {
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <check_peripheral_error+0xb8>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d010      	beq.n	80019f0 <check_peripheral_error+0x90>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4912      	ldr	r1, [pc, #72]	@ (8001a1c <check_peripheral_error+0xbc>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f01d f8a6 	bl	801eb24 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fc60 	bl	80002a0 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	1d39      	adds	r1, r7, #4
 80019e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ea:	480d      	ldr	r0, [pc, #52]	@ (8001a20 <check_peripheral_error+0xc0>)
 80019ec:	f00a fc34 	bl	800c258 <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <check_peripheral_error+0xac>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	{
		_RunTime_Packet.scd4x_i2c_error = 0;
	}
#endif

}
 80019f8:	e003      	b.n	8001a02 <check_peripheral_error+0xa2>
		_RunTime_Packet.scd4x_i2c_error = 0;
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <check_peripheral_error+0xac>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8001a02:	bf00      	nop
 8001a04:	3738      	adds	r7, #56	@ 0x38
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20001530 	.word	0x20001530
 8001a10:	40020400 	.word	0x40020400
 8001a14:	20001838 	.word	0x20001838
 8001a18:	20001578 	.word	0x20001578
 8001a1c:	080223e8 	.word	0x080223e8
 8001a20:	20001a74 	.word	0x20001a74

08001a24 <sensor_calibration>:
static void sensor_calibration() {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <sensor_calibration+0x28>)
 8001a2a:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00a      	beq.n	8001a48 <sensor_calibration+0x24>
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <sensor_calibration+0x28>)
 8001a34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <sensor_calibration+0x28>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		sps30_start_manual_fan_cleaning();
 8001a44:	f014 f81b 	bl	8015a7e <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20001530 	.word	0x20001530

08001a50 <sleep>:
static void sleep() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep

	check_peripheral_error();
 8001a54:	f7ff ff84 	bl	8001960 <check_peripheral_error>
	GREEN_LED_PWM(disable_led);
 8001a58:	4b32      	ldr	r3, [pc, #200]	@ (8001b24 <sleep+0xd4>)
 8001a5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a5e:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 8001a60:	4b30      	ldr	r3, [pc, #192]	@ (8001b24 <sleep+0xd4>)
 8001a62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a66:	639a      	str	r2, [r3, #56]	@ 0x38
	BLUE_LED_PWM(disable_led);
 8001a68:	4a2f      	ldr	r2, [pc, #188]	@ (8001b28 <sleep+0xd8>)
 8001a6a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a6e:	2008      	movs	r0, #8
 8001a70:	f7ff fad0 	bl	8001014 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001a74:	482d      	ldr	r0, [pc, #180]	@ (8001b2c <sleep+0xdc>)
 8001a76:	f002 fc06 	bl	8004286 <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 8001a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7e:	220b      	movs	r2, #11
 8001a80:	492b      	ldr	r1, [pc, #172]	@ (8001b30 <sleep+0xe0>)
 8001a82:	482c      	ldr	r0, [pc, #176]	@ (8001b34 <sleep+0xe4>)
 8001a84:	f00a fbe8 	bl	800c258 <HAL_UART_Transmit>
	disable_5v();
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a8e:	482a      	ldr	r0, [pc, #168]	@ (8001b38 <sleep+0xe8>)
 8001a90:	f004 fb26 	bl	80060e0 <HAL_GPIO_WritePin>
	disable_motion();
 8001a94:	2201      	movs	r2, #1
 8001a96:	2102      	movs	r1, #2
 8001a98:	4828      	ldr	r0, [pc, #160]	@ (8001b3c <sleep+0xec>)
 8001a9a:	f004 fb21 	bl	80060e0 <HAL_GPIO_WritePin>
	scd4x_power_down();
#elif use_scd30
//	scd4x_stop_periodic_measurement();
//	scd4x_power_down();
	//check_peripheral_error() ;
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8001a9e:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <sleep+0xf0>)
 8001aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d106      	bne.n	8001ab6 <sleep+0x66>
	scd30_stop_periodic_measurement();
 8001aa8:	f012 fc9a 	bl	80143e0 <scd30_stop_periodic_measurement>
	scd30_activate_auto_calibration(0);
 8001aac:	2000      	movs	r0, #0
 8001aae:	f012 fdbf 	bl	8014630 <scd30_activate_auto_calibration>
	scd30_soft_reset();
 8001ab2:	f013 f843 	bl	8014b3c <scd30_soft_reset>
	}
#endif
	console_uart_deinit();
 8001ab6:	f010 fbeb 	bl	8012290 <console_uart_deinit>
	sensirion_i2c_hal_free();
 8001aba:	f013 fa8d 	bl	8014fd8 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001abe:	f013 fe5d 	bl	801577c <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001ac2:	f01b f987 	bl	801cdd4 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001ac6:	481f      	ldr	r0, [pc, #124]	@ (8001b44 <sleep+0xf4>)
 8001ac8:	f009 faff 	bl	800b0ca <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8001acc:	481e      	ldr	r0, [pc, #120]	@ (8001b48 <sleep+0xf8>)
 8001ace:	f009 fafc 	bl	800b0ca <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001ad2:	481e      	ldr	r0, [pc, #120]	@ (8001b4c <sleep+0xfc>)
 8001ad4:	f009 faf9 	bl	800b0ca <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 8001ad8:	481d      	ldr	r0, [pc, #116]	@ (8001b50 <sleep+0x100>)
 8001ada:	f003 f9f7 	bl	8004ecc <HAL_DMA_DeInit>
	HAL_SuspendTick();
 8001ade:	f002 fb4b 	bl	8004178 <HAL_SuspendTick>
	gpio_disable();
 8001ae2:	f001 fced 	bl	80034c0 <gpio_disable>
//	   __HAL_RCC_GPIOD_CLK_DISABLE();
//	   __HAL_RCC_GPIOE_CLK_DISABLE();
//	   __HAL_RCC_GPIOH_CLK_DISABLE();

	   /* FLASH Deep Power Down Mode enabled */
	   HAL_PWREx_EnableFlashPowerDown();
 8001ae6:	f007 f80b 	bl	8008b00 <HAL_PWREx_EnableFlashPowerDown>

	//HAL_RCC_DeInit();
	//clock_speed_slow();


	Rtc_Alarm_watchdog();
 8001aea:	f012 f88f 	bl	8013c0c <Rtc_Alarm_watchdog>
	do {
	HAL_IWDG_Refresh(&hiwdg);
 8001aee:	4819      	ldr	r0, [pc, #100]	@ (8001b54 <sleep+0x104>)
 8001af0:	f005 fcc2 	bl	8007478 <HAL_IWDG_Refresh>
	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001af4:	2101      	movs	r1, #1
 8001af6:	2001      	movs	r0, #1
 8001af8:	f006 ffd2 	bl	8008aa0 <HAL_PWR_EnterSTOPMode>
	//HAL_IWDG_Refresh(&hiwdg);
	Rtc_Alarm_watchdog();
 8001afc:	f012 f886 	bl	8013c0c <Rtc_Alarm_watchdog>
	}while(set_alarm_Time == 0 && _RunTime_Packet.pwr_off_det == 0 && _RunTime_Packet.usb_detection == 0);
 8001b00:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <sleep+0x108>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d109      	bne.n	8001b1c <sleep+0xcc>
 8001b08:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <sleep+0xf0>)
 8001b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d104      	bne.n	8001b1c <sleep+0xcc>
 8001b12:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <sleep+0xf0>)
 8001b14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0e8      	beq.n	8001aee <sleep+0x9e>

	Rtc_Alarm_watchdog_disable();
 8001b1c:	f012 f864 	bl	8013be8 <Rtc_Alarm_watchdog_disable>
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40000400 	.word	0x40000400
 8001b28:	20000324 	.word	0x20000324
 8001b2c:	200017f0 	.word	0x200017f0
 8001b30:	08022410 	.word	0x08022410
 8001b34:	20001a74 	.word	0x20001a74
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	20001530 	.word	0x20001530
 8001b44:	2000193c 	.word	0x2000193c
 8001b48:	20001984 	.word	0x20001984
 8001b4c:	200019cc 	.word	0x200019cc
 8001b50:	20001a14 	.word	0x20001a14
 8001b54:	2000188c 	.word	0x2000188c
 8001b58:	20000029 	.word	0x20000029

08001b5c <wakeup>:
static void wakeup() {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_RCC_DeInit();
 8001b60:	f007 fd2c 	bl	80095bc <HAL_RCC_DeInit>
	clock_speed_high();
 8001b64:	f7ff fb5e 	bl	8001224 <clock_speed_high>

	HAL_PWREx_DisableFlashPowerDown();
 8001b68:	f006 ffd6 	bl	8008b18 <HAL_PWREx_DisableFlashPowerDown>
	HAL_ResumeTick();
 8001b6c:	f002 fb14 	bl	8004198 <HAL_ResumeTick>
	gpio_enable();
 8001b70:	f001 fcdc 	bl	800352c <gpio_enable>

	enable_5v();
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b7a:	4838      	ldr	r0, [pc, #224]	@ (8001c5c <wakeup+0x100>)
 8001b7c:	f004 fab0 	bl	80060e0 <HAL_GPIO_WritePin>
	enable_motion();
 8001b80:	2200      	movs	r2, #0
 8001b82:	2102      	movs	r1, #2
 8001b84:	4836      	ldr	r0, [pc, #216]	@ (8001c60 <wakeup+0x104>)
 8001b86:	f004 faab 	bl	80060e0 <HAL_GPIO_WritePin>
	console_uart_init();
 8001b8a:	f010 fb8d 	bl	80122a8 <console_uart_init>

	MX_DMA_Init();
 8001b8e:	f7ff fb05 	bl	800119c <MX_DMA_Init>
	MX_TIM1_Init();
 8001b92:	f001 f8fd 	bl	8002d90 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001b96:	f001 f94b 	bl	8002e30 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001b9a:	f001 f997 	bl	8002ecc <MX_TIM3_Init>

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8001b9e:	f7ff fcb1 	bl	8001504 <init_scd30_i2c>
#endif

	if (Mount_SD("/") == FR_OK) {
 8001ba2:	4830      	ldr	r0, [pc, #192]	@ (8001c64 <wakeup+0x108>)
 8001ba4:	f01a fa3e 	bl	801c024 <Mount_SD>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <wakeup+0x5e>
		Unmount_SD("/");
 8001bae:	482d      	ldr	r0, [pc, #180]	@ (8001c64 <wakeup+0x108>)
 8001bb0:	f01a fa64 	bl	801c07c <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8001bb4:	f01b f920 	bl	801cdf8 <MX_USB_DEVICE_Init>
 8001bb8:	e002      	b.n	8001bc0 <wakeup+0x64>
	} else {
		datawritten = 2;
 8001bba:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <wakeup+0x10c>)
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001bc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bc4:	4826      	ldr	r0, [pc, #152]	@ (8001c60 <wakeup+0x104>)
 8001bc6:	f004 fa73 	bl	80060b0 <HAL_GPIO_ReadPin>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <wakeup+0x7a>
		init_sps30();
 8001bd0:	f7ff fe20 	bl	8001814 <init_sps30>
 8001bd4:	e00f      	b.n	8001bf6 <wakeup+0x9a>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001bd6:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <wakeup+0x110>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_start_timer = 1;
 8001bde:	4b23      	ldr	r3, [pc, #140]	@ (8001c6c <wakeup+0x110>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8001be6:	4b22      	ldr	r3, [pc, #136]	@ (8001c70 <wakeup+0x114>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001bec:	f002 fa94 	bl	8004118 <HAL_GetTick>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a20      	ldr	r2, [pc, #128]	@ (8001c74 <wakeup+0x118>)
 8001bf4:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001bf6:	4820      	ldr	r0, [pc, #128]	@ (8001c78 <wakeup+0x11c>)
 8001bf8:	f009 fabc 	bl	800b174 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001bfc:	491f      	ldr	r1, [pc, #124]	@ (8001c7c <wakeup+0x120>)
 8001bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c02:	4a1f      	ldr	r2, [pc, #124]	@ (8001c80 <wakeup+0x124>)
 8001c04:	481f      	ldr	r0, [pc, #124]	@ (8001c84 <wakeup+0x128>)
 8001c06:	f003 f9bf 	bl	8004f88 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <wakeup+0x11c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <wakeup+0x11c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c18:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001c1a:	4a18      	ldr	r2, [pc, #96]	@ (8001c7c <wakeup+0x120>)
 8001c1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c20:	2008      	movs	r0, #8
 8001c22:	f7ff f9f7 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001c26:	2100      	movs	r1, #0
 8001c28:	4817      	ldr	r0, [pc, #92]	@ (8001c88 <wakeup+0x12c>)
 8001c2a:	f009 fbe7 	bl	800b3fc <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <wakeup+0x130>)
 8001c30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c34:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001c36:	2104      	movs	r1, #4
 8001c38:	4813      	ldr	r0, [pc, #76]	@ (8001c88 <wakeup+0x12c>)
 8001c3a:	f009 fbdf 	bl	800b3fc <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <wakeup+0x130>)
 8001c40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c44:	639a      	str	r2, [r3, #56]	@ 0x38

	pwr_off_detected();
 8001c46:	f7ff fac9 	bl	80011dc <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4e:	220a      	movs	r2, #10
 8001c50:	490f      	ldr	r1, [pc, #60]	@ (8001c90 <wakeup+0x134>)
 8001c52:	4810      	ldr	r0, [pc, #64]	@ (8001c94 <wakeup+0x138>)
 8001c54:	f00a fb00 	bl	800c258 <HAL_UART_Transmit>
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40020000 	.word	0x40020000
 8001c64:	0802241c 	.word	0x0802241c
 8001c68:	20002328 	.word	0x20002328
 8001c6c:	20001530 	.word	0x20001530
 8001c70:	20001584 	.word	0x20001584
 8001c74:	200017c8 	.word	0x200017c8
 8001c78:	2000193c 	.word	0x2000193c
 8001c7c:	20000324 	.word	0x20000324
 8001c80:	40020418 	.word	0x40020418
 8001c84:	20001a14 	.word	0x20001a14
 8001c88:	200019cc 	.word	0x200019cc
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	08022420 	.word	0x08022420
 8001c94:	20001a74 	.word	0x20001a74

08001c98 <green_led_blink>:

static void green_led_blink() {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <green_led_blink+0x4c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001ca2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001ca6:	f002 fa43 	bl	8004130 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <green_led_blink+0x4c>)
 8001cac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cb0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cb2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cb6:	f002 fa3b 	bl	8004130 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <green_led_blink+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cc0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cc4:	f002 fa34 	bl	8004130 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <green_led_blink+0x4c>)
 8001cca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cce:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cd0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cd4:	f002 fa2c 	bl	8004130 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001cd8:	4b02      	ldr	r3, [pc, #8]	@ (8001ce4 <green_led_blink+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40000400 	.word	0x40000400

08001ce8 <led_awake_routine>:

static void led_awake_routine() {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001cec:	4ba6      	ldr	r3, [pc, #664]	@ (8001f88 <led_awake_routine+0x2a0>)
 8001cee:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 8195 	bne.w	8002022 <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001cf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cfc:	48a3      	ldr	r0, [pc, #652]	@ (8001f8c <led_awake_routine+0x2a4>)
 8001cfe:	f004 f9d7 	bl	80060b0 <HAL_GPIO_ReadPin>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d025      	beq.n	8001d54 <led_awake_routine+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001d08:	4b9f      	ldr	r3, [pc, #636]	@ (8001f88 <led_awake_routine+0x2a0>)
 8001d0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d0e:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001f90 <led_awake_routine+0x2a8>
 8001d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	db0d      	blt.n	8001d38 <led_awake_routine+0x50>
				GREEN_LED_PWM(0);
 8001d1c:	4b9d      	ldr	r3, [pc, #628]	@ (8001f94 <led_awake_routine+0x2ac>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d22:	4b9c      	ldr	r3, [pc, #624]	@ (8001f94 <led_awake_routine+0x2ac>)
 8001d24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d28:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d2a:	4a9b      	ldr	r2, [pc, #620]	@ (8001f98 <led_awake_routine+0x2b0>)
 8001d2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d30:	2008      	movs	r0, #8
 8001d32:	f7ff f96f 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001d36:	e196      	b.n	8002066 <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001d38:	4b96      	ldr	r3, [pc, #600]	@ (8001f94 <led_awake_routine+0x2ac>)
 8001d3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d3e:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d40:	4b94      	ldr	r3, [pc, #592]	@ (8001f94 <led_awake_routine+0x2ac>)
 8001d42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d46:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8001d48:	4a93      	ldr	r2, [pc, #588]	@ (8001f98 <led_awake_routine+0x2b0>)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2008      	movs	r0, #8
 8001d4e:	f7ff f961 	bl	8001014 <setSoftPWM>
}
 8001d52:	e188      	b.n	8002066 <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001d54:	4a90      	ldr	r2, [pc, #576]	@ (8001f98 <led_awake_routine+0x2b0>)
 8001d56:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d5a:	2008      	movs	r0, #8
 8001d5c:	f7ff f95a 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001d60:	4b89      	ldr	r3, [pc, #548]	@ (8001f88 <led_awake_routine+0x2a0>)
 8001d62:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d66:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001f90 <led_awake_routine+0x2a8>
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	db38      	blt.n	8001de6 <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001d74:	4b87      	ldr	r3, [pc, #540]	@ (8001f94 <led_awake_routine+0x2ac>)
 8001d76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d7a:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d7c:	4a86      	ldr	r2, [pc, #536]	@ (8001f98 <led_awake_routine+0x2b0>)
 8001d7e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d82:	2008      	movs	r0, #8
 8001d84:	f7ff f946 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001d88:	4b84      	ldr	r3, [pc, #528]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <led_awake_routine+0xbc>
					green_led_pwm_val += 5;
 8001d90:	4b83      	ldr	r3, [pc, #524]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3305      	adds	r3, #5
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	4b80      	ldr	r3, [pc, #512]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	e008      	b.n	8001db6 <led_awake_routine+0xce>
					green_led_pwm_val -= 5;
 8001da4:	4b7e      	ldr	r3, [pc, #504]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b05      	subs	r3, #5
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001db4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001db6:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dc0:	dd03      	ble.n	8001dca <led_awake_routine+0xe2>
					green_led_pwm_flag = 1;
 8001dc2:	4b76      	ldr	r3, [pc, #472]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e007      	b.n	8001dda <led_awake_routine+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8001dca:	4b75      	ldr	r3, [pc, #468]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dc02      	bgt.n	8001dda <led_awake_routine+0xf2>
					green_led_pwm_flag = 0;
 8001dd4:	4b71      	ldr	r3, [pc, #452]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001dda:	4b71      	ldr	r3, [pc, #452]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001ddc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001de0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f94 <led_awake_routine+0x2ac>)
 8001de2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001de4:	e13f      	b.n	8002066 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8001de6:	4b68      	ldr	r3, [pc, #416]	@ (8001f88 <led_awake_routine+0x2a0>)
 8001de8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dec:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	dd42      	ble.n	8001e80 <led_awake_routine+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001dfa:	4b63      	ldr	r3, [pc, #396]	@ (8001f88 <led_awake_routine+0x2a0>)
 8001dfc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e00:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001f90 <led_awake_routine+0x2a8>
 8001e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d838      	bhi.n	8001e80 <led_awake_routine+0x198>
				RED_LED_PWM(disable_led);
 8001e0e:	4b61      	ldr	r3, [pc, #388]	@ (8001f94 <led_awake_routine+0x2ac>)
 8001e10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e14:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001e16:	4a60      	ldr	r2, [pc, #384]	@ (8001f98 <led_awake_routine+0x2b0>)
 8001e18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e1c:	2008      	movs	r0, #8
 8001e1e:	f7ff f8f9 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001e22:	4b5e      	ldr	r3, [pc, #376]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <led_awake_routine+0x156>
					green_led_pwm_val += 5;
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3305      	adds	r3, #5
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	4b59      	ldr	r3, [pc, #356]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	e008      	b.n	8001e50 <led_awake_routine+0x168>
					green_led_pwm_val -= 5;
 8001e3e:	4b58      	ldr	r3, [pc, #352]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b05      	subs	r3, #5
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	4b54      	ldr	r3, [pc, #336]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001e4e:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001e50:	4b53      	ldr	r3, [pc, #332]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e5a:	dd03      	ble.n	8001e64 <led_awake_routine+0x17c>
					green_led_pwm_flag = 1;
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
 8001e62:	e007      	b.n	8001e74 <led_awake_routine+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8001e64:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	dc02      	bgt.n	8001e74 <led_awake_routine+0x18c>
					green_led_pwm_flag = 0;
 8001e6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001e74:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001e76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e7a:	4b46      	ldr	r3, [pc, #280]	@ (8001f94 <led_awake_routine+0x2ac>)
 8001e7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e7e:	e0f2      	b.n	8002066 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001e80:	4b41      	ldr	r3, [pc, #260]	@ (8001f88 <led_awake_routine+0x2a0>)
 8001e82:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e86:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001fa4 <led_awake_routine+0x2bc>
 8001e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	f340 808d 	ble.w	8001fb0 <led_awake_routine+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001e96:	4b3c      	ldr	r3, [pc, #240]	@ (8001f88 <led_awake_routine+0x2a0>)
 8001e98:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e9c:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea8:	f200 8082 	bhi.w	8001fb0 <led_awake_routine+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001eac:	4b3b      	ldr	r3, [pc, #236]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001eae:	781a      	ldrb	r2, [r3, #0]
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa8 <led_awake_routine+0x2c0>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d003      	beq.n	8001ec0 <led_awake_routine+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <led_awake_routine+0x2c0>)
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	4b37      	ldr	r3, [pc, #220]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001ebe:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8001ec0:	4a35      	ldr	r2, [pc, #212]	@ (8001f98 <led_awake_routine+0x2b0>)
 8001ec2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ec6:	2008      	movs	r0, #8
 8001ec8:	f7ff f8a4 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001ecc:	4b33      	ldr	r3, [pc, #204]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <led_awake_routine+0x200>
					green_led_pwm_val += 5;
 8001ed4:	4b32      	ldr	r3, [pc, #200]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3305      	adds	r3, #5
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	e008      	b.n	8001efa <led_awake_routine+0x212>
					green_led_pwm_val -= 5;
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b05      	subs	r3, #5
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001ef8:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001efa:	4b29      	ldr	r3, [pc, #164]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f04:	dd03      	ble.n	8001f0e <led_awake_routine+0x226>
					green_led_pwm_flag = 1;
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e007      	b.n	8001f1e <led_awake_routine+0x236>
				} else if (green_led_pwm_val <= 0) {
 8001f0e:	4b24      	ldr	r3, [pc, #144]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	dc02      	bgt.n	8001f1e <led_awake_routine+0x236>
					green_led_pwm_flag = 0;
 8001f18:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <led_awake_routine+0x2b4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8001f1e:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <led_awake_routine+0x2c0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <led_awake_routine+0x252>
					red_led_pwm_val += 5;
 8001f26:	4b21      	ldr	r3, [pc, #132]	@ (8001fac <led_awake_routine+0x2c4>)
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3305      	adds	r3, #5
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <led_awake_routine+0x2c4>)
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	e008      	b.n	8001f4c <led_awake_routine+0x264>
					red_led_pwm_val -= 5;
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fac <led_awake_routine+0x2c4>)
 8001f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b05      	subs	r3, #5
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	4b18      	ldr	r3, [pc, #96]	@ (8001fac <led_awake_routine+0x2c4>)
 8001f4a:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001f4c:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <led_awake_routine+0x2c4>)
 8001f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f56:	dd03      	ble.n	8001f60 <led_awake_routine+0x278>
					red_led_pwm_flag = 1;
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <led_awake_routine+0x2c0>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e007      	b.n	8001f70 <led_awake_routine+0x288>
				} else if (red_led_pwm_val <= 0) {
 8001f60:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <led_awake_routine+0x2c4>)
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	dc02      	bgt.n	8001f70 <led_awake_routine+0x288>
					red_led_pwm_flag = 0;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <led_awake_routine+0x2c0>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <led_awake_routine+0x2b8>)
 8001f72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <led_awake_routine+0x2ac>)
 8001f78:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <led_awake_routine+0x2c4>)
 8001f7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <led_awake_routine+0x2ac>)
 8001f82:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f84:	e06f      	b.n	8002066 <led_awake_routine+0x37e>
 8001f86:	bf00      	nop
 8001f88:	20001530 	.word	0x20001530
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40833333 	.word	0x40833333
 8001f94:	40000400 	.word	0x40000400
 8001f98:	20000324 	.word	0x20000324
 8001f9c:	200012c4 	.word	0x200012c4
 8001fa0:	200012c6 	.word	0x200012c6
 8001fa4:	40533333 	.word	0x40533333
 8001fa8:	200012c5 	.word	0x200012c5
 8001fac:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800206c <led_awake_routine+0x384>)
 8001fb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fb6:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 8001fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002070 <led_awake_routine+0x388>)
 8001fba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fbe:	2008      	movs	r0, #8
 8001fc0:	f7ff f828 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002074 <led_awake_routine+0x38c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <led_awake_routine+0x2f8>
					red_led_pwm_val += 5;
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8002078 <led_awake_routine+0x390>)
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3305      	adds	r3, #5
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	4b27      	ldr	r3, [pc, #156]	@ (8002078 <led_awake_routine+0x390>)
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	e008      	b.n	8001ff2 <led_awake_routine+0x30a>
					red_led_pwm_val -= 5;
 8001fe0:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <led_awake_routine+0x390>)
 8001fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b05      	subs	r3, #5
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	4b22      	ldr	r3, [pc, #136]	@ (8002078 <led_awake_routine+0x390>)
 8001ff0:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001ff2:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <led_awake_routine+0x390>)
 8001ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ffc:	dd03      	ble.n	8002006 <led_awake_routine+0x31e>
					red_led_pwm_flag = 1;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <led_awake_routine+0x38c>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e007      	b.n	8002016 <led_awake_routine+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8002006:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <led_awake_routine+0x390>)
 8002008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200c:	2b00      	cmp	r3, #0
 800200e:	dc02      	bgt.n	8002016 <led_awake_routine+0x32e>
					red_led_pwm_flag = 0;
 8002010:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <led_awake_routine+0x38c>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <led_awake_routine+0x390>)
 8002018:	f9b3 2000 	ldrsh.w	r2, [r3]
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <led_awake_routine+0x384>)
 800201e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002020:	e021      	b.n	8002066 <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8002022:	4b12      	ldr	r3, [pc, #72]	@ (800206c <led_awake_routine+0x384>)
 8002024:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002028:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 800202a:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <led_awake_routine+0x388>)
 800202c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002030:	2008      	movs	r0, #8
 8002032:	f7fe ffef 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <led_awake_routine+0x390>)
 8002038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002040:	d004      	beq.n	800204c <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <led_awake_routine+0x390>)
 8002044:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002048:	801a      	strh	r2, [r3, #0]
 800204a:	e002      	b.n	8002052 <led_awake_routine+0x36a>
			red_led_pwm_val = 0;
 800204c:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <led_awake_routine+0x390>)
 800204e:	2200      	movs	r2, #0
 8002050:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <led_awake_routine+0x390>)
 8002054:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <led_awake_routine+0x384>)
 800205a:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 800205c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002060:	f002 f866 	bl	8004130 <HAL_Delay>
}
 8002064:	e7ff      	b.n	8002066 <led_awake_routine+0x37e>
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40000400 	.word	0x40000400
 8002070:	20000324 	.word	0x20000324
 8002074:	200012c5 	.word	0x200012c5
 8002078:	200012c8 	.word	0x200012c8

0800207c <blink_red>:

void blink_red() {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <blink_red+0x60>)
 8002082:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002086:	635a      	str	r2, [r3, #52]	@ 0x34
	BLUE_LED_PWM(disable_led);
 8002088:	4a15      	ldr	r2, [pc, #84]	@ (80020e0 <blink_red+0x64>)
 800208a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800208e:	2008      	movs	r0, #8
 8002090:	f7fe ffc0 	bl	8001014 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <blink_red+0x60>)
 8002096:	2200      	movs	r2, #0
 8002098:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 800209a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800209e:	f002 f847 	bl	8004130 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <blink_red+0x60>)
 80020a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020a8:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020ae:	f002 f83f 	bl	8004130 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <blink_red+0x60>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020bc:	f002 f838 	bl	8004130 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <blink_red+0x60>)
 80020c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020c6:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020cc:	f002 f830 	bl	8004130 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 80020d0:	4b02      	ldr	r3, [pc, #8]	@ (80020dc <blink_red+0x60>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40000400 	.word	0x40000400
 80020e0:	20000324 	.word	0x20000324

080020e4 <led_awake_routine1>:

static void led_awake_routine1() {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 80020e8:	4ba6      	ldr	r3, [pc, #664]	@ (8002384 <led_awake_routine1+0x2a0>)
 80020ea:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8195 	bne.w	800241e <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 80020f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020f8:	48a3      	ldr	r0, [pc, #652]	@ (8002388 <led_awake_routine1+0x2a4>)
 80020fa:	f003 ffd9 	bl	80060b0 <HAL_GPIO_ReadPin>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d025      	beq.n	8002150 <led_awake_routine1+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8002104:	4b9f      	ldr	r3, [pc, #636]	@ (8002384 <led_awake_routine1+0x2a0>)
 8002106:	edd3 7a08 	vldr	s15, [r3, #32]
 800210a:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800238c <led_awake_routine1+0x2a8>
 800210e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002116:	db0d      	blt.n	8002134 <led_awake_routine1+0x50>
				GREEN_LED_PWM(0);
 8002118:	4b9d      	ldr	r3, [pc, #628]	@ (8002390 <led_awake_routine1+0x2ac>)
 800211a:	2200      	movs	r2, #0
 800211c:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 800211e:	4b9c      	ldr	r3, [pc, #624]	@ (8002390 <led_awake_routine1+0x2ac>)
 8002120:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002124:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002126:	4a9b      	ldr	r2, [pc, #620]	@ (8002394 <led_awake_routine1+0x2b0>)
 8002128:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800212c:	2008      	movs	r0, #8
 800212e:	f7fe ff71 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8002132:	e196      	b.n	8002462 <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8002134:	4b96      	ldr	r3, [pc, #600]	@ (8002390 <led_awake_routine1+0x2ac>)
 8002136:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 800213c:	4b94      	ldr	r3, [pc, #592]	@ (8002390 <led_awake_routine1+0x2ac>)
 800213e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002142:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8002144:	4a93      	ldr	r2, [pc, #588]	@ (8002394 <led_awake_routine1+0x2b0>)
 8002146:	2100      	movs	r1, #0
 8002148:	2008      	movs	r0, #8
 800214a:	f7fe ff63 	bl	8001014 <setSoftPWM>
}
 800214e:	e188      	b.n	8002462 <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8002150:	4a90      	ldr	r2, [pc, #576]	@ (8002394 <led_awake_routine1+0x2b0>)
 8002152:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002156:	2008      	movs	r0, #8
 8002158:	f7fe ff5c 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 800215c:	4b89      	ldr	r3, [pc, #548]	@ (8002384 <led_awake_routine1+0x2a0>)
 800215e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002162:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800238c <led_awake_routine1+0x2a8>
 8002166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216e:	db38      	blt.n	80021e2 <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 8002170:	4b87      	ldr	r3, [pc, #540]	@ (8002390 <led_awake_routine1+0x2ac>)
 8002172:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002176:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002178:	4a86      	ldr	r2, [pc, #536]	@ (8002394 <led_awake_routine1+0x2b0>)
 800217a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800217e:	2008      	movs	r0, #8
 8002180:	f7fe ff48 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002184:	4b84      	ldr	r3, [pc, #528]	@ (8002398 <led_awake_routine1+0x2b4>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <led_awake_routine1+0xbc>
					green_led_pwm_val += 40;
 800218c:	4b83      	ldr	r3, [pc, #524]	@ (800239c <led_awake_routine1+0x2b8>)
 800218e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002192:	b29b      	uxth	r3, r3
 8002194:	3328      	adds	r3, #40	@ 0x28
 8002196:	b29b      	uxth	r3, r3
 8002198:	b21a      	sxth	r2, r3
 800219a:	4b80      	ldr	r3, [pc, #512]	@ (800239c <led_awake_routine1+0x2b8>)
 800219c:	801a      	strh	r2, [r3, #0]
 800219e:	e008      	b.n	80021b2 <led_awake_routine1+0xce>
					green_led_pwm_val -= 40;
 80021a0:	4b7e      	ldr	r3, [pc, #504]	@ (800239c <led_awake_routine1+0x2b8>)
 80021a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b28      	subs	r3, #40	@ 0x28
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	4b7b      	ldr	r3, [pc, #492]	@ (800239c <led_awake_routine1+0x2b8>)
 80021b0:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80021b2:	4b7a      	ldr	r3, [pc, #488]	@ (800239c <led_awake_routine1+0x2b8>)
 80021b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021bc:	dd03      	ble.n	80021c6 <led_awake_routine1+0xe2>
					green_led_pwm_flag = 1;
 80021be:	4b76      	ldr	r3, [pc, #472]	@ (8002398 <led_awake_routine1+0x2b4>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e007      	b.n	80021d6 <led_awake_routine1+0xf2>
				} else if (green_led_pwm_val <= 0) {
 80021c6:	4b75      	ldr	r3, [pc, #468]	@ (800239c <led_awake_routine1+0x2b8>)
 80021c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	dc02      	bgt.n	80021d6 <led_awake_routine1+0xf2>
					green_led_pwm_flag = 0;
 80021d0:	4b71      	ldr	r3, [pc, #452]	@ (8002398 <led_awake_routine1+0x2b4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80021d6:	4b71      	ldr	r3, [pc, #452]	@ (800239c <led_awake_routine1+0x2b8>)
 80021d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002390 <led_awake_routine1+0x2ac>)
 80021de:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021e0:	e13f      	b.n	8002462 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 80021e2:	4b68      	ldr	r3, [pc, #416]	@ (8002384 <led_awake_routine1+0x2a0>)
 80021e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80021e8:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80021ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	dd42      	ble.n	800227c <led_awake_routine1+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 80021f6:	4b63      	ldr	r3, [pc, #396]	@ (8002384 <led_awake_routine1+0x2a0>)
 80021f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80021fc:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800238c <led_awake_routine1+0x2a8>
 8002200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002208:	d838      	bhi.n	800227c <led_awake_routine1+0x198>
				RED_LED_PWM(disable_led);
 800220a:	4b61      	ldr	r3, [pc, #388]	@ (8002390 <led_awake_routine1+0x2ac>)
 800220c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002210:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002212:	4a60      	ldr	r2, [pc, #384]	@ (8002394 <led_awake_routine1+0x2b0>)
 8002214:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002218:	2008      	movs	r0, #8
 800221a:	f7fe fefb 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 800221e:	4b5e      	ldr	r3, [pc, #376]	@ (8002398 <led_awake_routine1+0x2b4>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <led_awake_routine1+0x156>
					green_led_pwm_val += 40;
 8002226:	4b5d      	ldr	r3, [pc, #372]	@ (800239c <led_awake_routine1+0x2b8>)
 8002228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222c:	b29b      	uxth	r3, r3
 800222e:	3328      	adds	r3, #40	@ 0x28
 8002230:	b29b      	uxth	r3, r3
 8002232:	b21a      	sxth	r2, r3
 8002234:	4b59      	ldr	r3, [pc, #356]	@ (800239c <led_awake_routine1+0x2b8>)
 8002236:	801a      	strh	r2, [r3, #0]
 8002238:	e008      	b.n	800224c <led_awake_routine1+0x168>
					green_led_pwm_val -= 40;
 800223a:	4b58      	ldr	r3, [pc, #352]	@ (800239c <led_awake_routine1+0x2b8>)
 800223c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b28      	subs	r3, #40	@ 0x28
 8002244:	b29b      	uxth	r3, r3
 8002246:	b21a      	sxth	r2, r3
 8002248:	4b54      	ldr	r3, [pc, #336]	@ (800239c <led_awake_routine1+0x2b8>)
 800224a:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 800224c:	4b53      	ldr	r3, [pc, #332]	@ (800239c <led_awake_routine1+0x2b8>)
 800224e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002252:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002256:	dd03      	ble.n	8002260 <led_awake_routine1+0x17c>
					green_led_pwm_flag = 1;
 8002258:	4b4f      	ldr	r3, [pc, #316]	@ (8002398 <led_awake_routine1+0x2b4>)
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e007      	b.n	8002270 <led_awake_routine1+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8002260:	4b4e      	ldr	r3, [pc, #312]	@ (800239c <led_awake_routine1+0x2b8>)
 8002262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002266:	2b00      	cmp	r3, #0
 8002268:	dc02      	bgt.n	8002270 <led_awake_routine1+0x18c>
					green_led_pwm_flag = 0;
 800226a:	4b4b      	ldr	r3, [pc, #300]	@ (8002398 <led_awake_routine1+0x2b4>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002270:	4b4a      	ldr	r3, [pc, #296]	@ (800239c <led_awake_routine1+0x2b8>)
 8002272:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002276:	4b46      	ldr	r3, [pc, #280]	@ (8002390 <led_awake_routine1+0x2ac>)
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34
 800227a:	e0f2      	b.n	8002462 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 800227c:	4b41      	ldr	r3, [pc, #260]	@ (8002384 <led_awake_routine1+0x2a0>)
 800227e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002282:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80023a0 <led_awake_routine1+0x2bc>
 8002286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	f340 808d 	ble.w	80023ac <led_awake_routine1+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8002292:	4b3c      	ldr	r3, [pc, #240]	@ (8002384 <led_awake_routine1+0x2a0>)
 8002294:	edd3 7a08 	vldr	s15, [r3, #32]
 8002298:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 800229c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a4:	f200 8082 	bhi.w	80023ac <led_awake_routine1+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 80022a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002398 <led_awake_routine1+0x2b4>)
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <led_awake_routine1+0x2c0>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d003      	beq.n	80022bc <led_awake_routine1+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 80022b4:	4b3b      	ldr	r3, [pc, #236]	@ (80023a4 <led_awake_routine1+0x2c0>)
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	4b37      	ldr	r3, [pc, #220]	@ (8002398 <led_awake_routine1+0x2b4>)
 80022ba:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 80022bc:	4a35      	ldr	r2, [pc, #212]	@ (8002394 <led_awake_routine1+0x2b0>)
 80022be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022c2:	2008      	movs	r0, #8
 80022c4:	f7fe fea6 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80022c8:	4b33      	ldr	r3, [pc, #204]	@ (8002398 <led_awake_routine1+0x2b4>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <led_awake_routine1+0x200>
					green_led_pwm_val += 40;
 80022d0:	4b32      	ldr	r3, [pc, #200]	@ (800239c <led_awake_routine1+0x2b8>)
 80022d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3328      	adds	r3, #40	@ 0x28
 80022da:	b29b      	uxth	r3, r3
 80022dc:	b21a      	sxth	r2, r3
 80022de:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <led_awake_routine1+0x2b8>)
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	e008      	b.n	80022f6 <led_awake_routine1+0x212>
					green_led_pwm_val -= 40;
 80022e4:	4b2d      	ldr	r3, [pc, #180]	@ (800239c <led_awake_routine1+0x2b8>)
 80022e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b28      	subs	r3, #40	@ 0x28
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	b21a      	sxth	r2, r3
 80022f2:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <led_awake_routine1+0x2b8>)
 80022f4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80022f6:	4b29      	ldr	r3, [pc, #164]	@ (800239c <led_awake_routine1+0x2b8>)
 80022f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002300:	dd03      	ble.n	800230a <led_awake_routine1+0x226>
					green_led_pwm_flag = 1;
 8002302:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <led_awake_routine1+0x2b4>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	e007      	b.n	800231a <led_awake_routine1+0x236>
				} else if (green_led_pwm_val <= 0) {
 800230a:	4b24      	ldr	r3, [pc, #144]	@ (800239c <led_awake_routine1+0x2b8>)
 800230c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002310:	2b00      	cmp	r3, #0
 8002312:	dc02      	bgt.n	800231a <led_awake_routine1+0x236>
					green_led_pwm_flag = 0;
 8002314:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <led_awake_routine1+0x2b4>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 800231a:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <led_awake_routine1+0x2c0>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <led_awake_routine1+0x252>
					red_led_pwm_val += 40;
 8002322:	4b21      	ldr	r3, [pc, #132]	@ (80023a8 <led_awake_routine1+0x2c4>)
 8002324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002328:	b29b      	uxth	r3, r3
 800232a:	3328      	adds	r3, #40	@ 0x28
 800232c:	b29b      	uxth	r3, r3
 800232e:	b21a      	sxth	r2, r3
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <led_awake_routine1+0x2c4>)
 8002332:	801a      	strh	r2, [r3, #0]
 8002334:	e008      	b.n	8002348 <led_awake_routine1+0x264>
					red_led_pwm_val -= 40;
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <led_awake_routine1+0x2c4>)
 8002338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b28      	subs	r3, #40	@ 0x28
 8002340:	b29b      	uxth	r3, r3
 8002342:	b21a      	sxth	r2, r3
 8002344:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <led_awake_routine1+0x2c4>)
 8002346:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002348:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <led_awake_routine1+0x2c4>)
 800234a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002352:	dd03      	ble.n	800235c <led_awake_routine1+0x278>
					red_led_pwm_flag = 1;
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <led_awake_routine1+0x2c0>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e007      	b.n	800236c <led_awake_routine1+0x288>
				} else if (red_led_pwm_val <= 0) {
 800235c:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <led_awake_routine1+0x2c4>)
 800235e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002362:	2b00      	cmp	r3, #0
 8002364:	dc02      	bgt.n	800236c <led_awake_routine1+0x288>
					red_led_pwm_flag = 0;
 8002366:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <led_awake_routine1+0x2c0>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 800236c:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <led_awake_routine1+0x2b8>)
 800236e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002372:	4b07      	ldr	r3, [pc, #28]	@ (8002390 <led_awake_routine1+0x2ac>)
 8002374:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <led_awake_routine1+0x2c4>)
 8002378:	f9b3 2000 	ldrsh.w	r2, [r3]
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <led_awake_routine1+0x2ac>)
 800237e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002380:	e06f      	b.n	8002462 <led_awake_routine1+0x37e>
 8002382:	bf00      	nop
 8002384:	20001530 	.word	0x20001530
 8002388:	40020000 	.word	0x40020000
 800238c:	40833333 	.word	0x40833333
 8002390:	40000400 	.word	0x40000400
 8002394:	20000324 	.word	0x20000324
 8002398:	200012c4 	.word	0x200012c4
 800239c:	200012c6 	.word	0x200012c6
 80023a0:	40533333 	.word	0x40533333
 80023a4:	200012c5 	.word	0x200012c5
 80023a8:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 80023ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002468 <led_awake_routine1+0x384>)
 80023ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023b2:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 80023b4:	4a2d      	ldr	r2, [pc, #180]	@ (800246c <led_awake_routine1+0x388>)
 80023b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023ba:	2008      	movs	r0, #8
 80023bc:	f7fe fe2a 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 80023c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002470 <led_awake_routine1+0x38c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <led_awake_routine1+0x2f8>
					red_led_pwm_val += 40;
 80023c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002474 <led_awake_routine1+0x390>)
 80023ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3328      	adds	r3, #40	@ 0x28
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	4b27      	ldr	r3, [pc, #156]	@ (8002474 <led_awake_routine1+0x390>)
 80023d8:	801a      	strh	r2, [r3, #0]
 80023da:	e008      	b.n	80023ee <led_awake_routine1+0x30a>
					red_led_pwm_val -= 40;
 80023dc:	4b25      	ldr	r3, [pc, #148]	@ (8002474 <led_awake_routine1+0x390>)
 80023de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b28      	subs	r3, #40	@ 0x28
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	4b22      	ldr	r3, [pc, #136]	@ (8002474 <led_awake_routine1+0x390>)
 80023ec:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 80023ee:	4b21      	ldr	r3, [pc, #132]	@ (8002474 <led_awake_routine1+0x390>)
 80023f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023f8:	dd03      	ble.n	8002402 <led_awake_routine1+0x31e>
					red_led_pwm_flag = 1;
 80023fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <led_awake_routine1+0x38c>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e007      	b.n	8002412 <led_awake_routine1+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8002402:	4b1c      	ldr	r3, [pc, #112]	@ (8002474 <led_awake_routine1+0x390>)
 8002404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002408:	2b00      	cmp	r3, #0
 800240a:	dc02      	bgt.n	8002412 <led_awake_routine1+0x32e>
					red_led_pwm_flag = 0;
 800240c:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <led_awake_routine1+0x38c>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002412:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <led_awake_routine1+0x390>)
 8002414:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002418:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <led_awake_routine1+0x384>)
 800241a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800241c:	e021      	b.n	8002462 <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 800241e:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <led_awake_routine1+0x384>)
 8002420:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002424:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 8002426:	4a11      	ldr	r2, [pc, #68]	@ (800246c <led_awake_routine1+0x388>)
 8002428:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800242c:	2008      	movs	r0, #8
 800242e:	f7fe fdf1 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002432:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <led_awake_routine1+0x390>)
 8002434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002438:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800243c:	d004      	beq.n	8002448 <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <led_awake_routine1+0x390>)
 8002440:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	e002      	b.n	800244e <led_awake_routine1+0x36a>
			red_led_pwm_val = 0;
 8002448:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <led_awake_routine1+0x390>)
 800244a:	2200      	movs	r2, #0
 800244c:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <led_awake_routine1+0x390>)
 8002450:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <led_awake_routine1+0x384>)
 8002456:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 8002458:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800245c:	f001 fe68 	bl	8004130 <HAL_Delay>
}
 8002460:	e7ff      	b.n	8002462 <led_awake_routine1+0x37e>
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40000400 	.word	0x40000400
 800246c:	20000324 	.word	0x20000324
 8002470:	200012c5 	.word	0x200012c5
 8002474:	200012c8 	.word	0x200012c8

08002478 <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 800247e:	f001 fea7 	bl	80041d0 <HAL_GetUIDw1>
 8002482:	4603      	mov	r3, r0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8002488:	f001 fea2 	bl	80041d0 <HAL_GetUIDw1>
 800248c:	4603      	mov	r3, r0
 800248e:	4a1d      	ldr	r2, [pc, #116]	@ (8002504 <ver_GetUid+0x8c>)
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8002494:	4c1c      	ldr	r4, [pc, #112]	@ (8002508 <ver_GetUid+0x90>)
 8002496:	f001 fea7 	bl	80041e8 <HAL_GetUIDw2>
 800249a:	4603      	mov	r3, r0
 800249c:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b23      	cmp	r3, #35	@ 0x23
 80024a2:	d909      	bls.n	80024b8 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b3d      	cmp	r3, #61	@ 0x3d
 80024a8:	bf28      	it	cs
 80024aa:	233d      	movcs	r3, #61	@ 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	333d      	adds	r3, #61	@ 0x3d
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <ver_GetUid+0x8c>)
 80024b4:	71da      	strb	r2, [r3, #7]
 80024b6:	e00b      	b.n	80024d0 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b09      	cmp	r3, #9
 80024bc:	d901      	bls.n	80024c2 <ver_GetUid+0x4a>
 80024be:	2241      	movs	r2, #65	@ 0x41
 80024c0:	e000      	b.n	80024c4 <ver_GetUid+0x4c>
 80024c2:	2230      	movs	r2, #48	@ 0x30
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <ver_GetUid+0x8c>)
 80024ce:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 80024d0:	f001 fe72 	bl	80041b8 <HAL_GetUIDw0>
 80024d4:	4603      	mov	r3, r0
 80024d6:	0c1b      	lsrs	r3, r3, #16
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	480b      	ldr	r0, [pc, #44]	@ (800250c <ver_GetUid+0x94>)
 80024de:	f011 fda9 	bl	8014034 <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 80024e2:	f001 fe69 	bl	80041b8 <HAL_GetUIDw0>
 80024e6:	4603      	mov	r3, r0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4619      	mov	r1, r3
 80024ec:	4808      	ldr	r0, [pc, #32]	@ (8002510 <ver_GetUid+0x98>)
 80024ee:	f011 fda1 	bl	8014034 <CharToHexasc>
	sUid[12] = 0;
 80024f2:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <ver_GetUid+0x8c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 80024f8:	4b02      	ldr	r3, [pc, #8]	@ (8002504 <ver_GetUid+0x8c>)
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	bf00      	nop
 8002504:	200017cc 	.word	0x200017cc
 8002508:	200017cf 	.word	0x200017cf
 800250c:	200017d4 	.word	0x200017d4
 8002510:	200017d6 	.word	0x200017d6

08002514 <run_console_from_scd30>:

void run_console_from_scd30()
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0


	if(run_console_co2)
 8002518:	4b04      	ldr	r3, [pc, #16]	@ (800252c <run_console_from_scd30+0x18>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <run_console_from_scd30+0x10>
	{
		console_process();
 8002520:	f00f feaa 	bl	8012278 <console_process>
	}
	led_awake_routine1();
 8002524:	f7ff fdde 	bl	80020e4 <led_awake_routine1>
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000320 	.word	0x20000320

08002530 <app_main>:

void app_main() {
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0

	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 8002536:	2248      	movs	r2, #72	@ 0x48
 8002538:	2100      	movs	r1, #0
 800253a:	489e      	ldr	r0, [pc, #632]	@ (80027b4 <app_main+0x284>)
 800253c:	f01c fc3c 	bl	801edb8 <memset>

	load_param();
 8002540:	f7fe fede 	bl	8001300 <load_param>

	HAL_TIM_Base_Start(&htim1);
 8002544:	489c      	ldr	r0, [pc, #624]	@ (80027b8 <app_main+0x288>)
 8002546:	f008 fe15 	bl	800b174 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 800254a:	499c      	ldr	r1, [pc, #624]	@ (80027bc <app_main+0x28c>)
 800254c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002550:	4a9b      	ldr	r2, [pc, #620]	@ (80027c0 <app_main+0x290>)
 8002552:	489c      	ldr	r0, [pc, #624]	@ (80027c4 <app_main+0x294>)
 8002554:	f002 fd18 	bl	8004f88 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002558:	4b97      	ldr	r3, [pc, #604]	@ (80027b8 <app_main+0x288>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	4b96      	ldr	r3, [pc, #600]	@ (80027b8 <app_main+0x288>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002566:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8002568:	4a94      	ldr	r2, [pc, #592]	@ (80027bc <app_main+0x28c>)
 800256a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800256e:	2008      	movs	r0, #8
 8002570:	f7fe fd50 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8002574:	2100      	movs	r1, #0
 8002576:	4894      	ldr	r0, [pc, #592]	@ (80027c8 <app_main+0x298>)
 8002578:	f008 ff40 	bl	800b3fc <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 800257c:	4b93      	ldr	r3, [pc, #588]	@ (80027cc <app_main+0x29c>)
 800257e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002582:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8002584:	2104      	movs	r1, #4
 8002586:	4890      	ldr	r0, [pc, #576]	@ (80027c8 <app_main+0x298>)
 8002588:	f008 ff38 	bl	800b3fc <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 800258c:	4b8f      	ldr	r3, [pc, #572]	@ (80027cc <app_main+0x29c>)
 800258e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002592:	639a      	str	r2, [r3, #56]	@ 0x38

	if (Mount_SD("/") == FR_OK) {
 8002594:	488e      	ldr	r0, [pc, #568]	@ (80027d0 <app_main+0x2a0>)
 8002596:	f019 fd45 	bl	801c024 <Mount_SD>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <app_main+0x7c>

		Unmount_SD("/");
 80025a0:	488b      	ldr	r0, [pc, #556]	@ (80027d0 <app_main+0x2a0>)
 80025a2:	f019 fd6b 	bl	801c07c <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 80025a6:	f01a fc27 	bl	801cdf8 <MX_USB_DEVICE_Init>
 80025aa:	e002      	b.n	80025b2 <app_main+0x82>

	} else {
		datawritten = 2;
 80025ac:	4b89      	ldr	r3, [pc, #548]	@ (80027d4 <app_main+0x2a4>)
 80025ae:	2202      	movs	r2, #2
 80025b0:	701a      	strb	r2, [r3, #0]
	}
	prev_usb_time_ = HAL_GetTick();
 80025b2:	f001 fdb1 	bl	8004118 <HAL_GetTick>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4a87      	ldr	r2, [pc, #540]	@ (80027d8 <app_main+0x2a8>)
 80025ba:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80025bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025c0:	4886      	ldr	r0, [pc, #536]	@ (80027dc <app_main+0x2ac>)
 80025c2:	f003 fd75 	bl	80060b0 <HAL_GPIO_ReadPin>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <app_main+0xa2>
		init_sps30();
 80025cc:	f7ff f922 	bl	8001814 <init_sps30>
 80025d0:	e016      	b.n	8002600 <app_main+0xd0>
	} else {
		_RunTime_Packet.usb_detection = 0;
 80025d2:	4b78      	ldr	r3, [pc, #480]	@ (80027b4 <app_main+0x284>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_first_start = 1;
 80025da:	4b76      	ldr	r3, [pc, #472]	@ (80027b4 <app_main+0x284>)
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		_RunTime_Packet.usb_active_disable_pm = 1;
 80025e2:	4b74      	ldr	r3, [pc, #464]	@ (80027b4 <app_main+0x284>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		_RunTime_Packet.usb_start_timer = 1;
 80025ea:	4b72      	ldr	r3, [pc, #456]	@ (80027b4 <app_main+0x284>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 80025f2:	4b7b      	ldr	r3, [pc, #492]	@ (80027e0 <app_main+0x2b0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
		_RunTime_Packet.showPrompt = 1;
 80025f8:	4b6e      	ldr	r3, [pc, #440]	@ (80027b4 <app_main+0x284>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	//init_sps30();

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8002600:	f7fe ff80 	bl	8001504 <init_scd30_i2c>
#endif
	console_init();
 8002604:	f00f fe84 	bl	8012310 <console_init>
	Rtc_set_alarm();
 8002608:	f011 fb82 	bl	8013d10 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	2200      	movs	r2, #0
 8002612:	4619      	mov	r1, r3
 8002614:	4873      	ldr	r0, [pc, #460]	@ (80027e4 <app_main+0x2b4>)
 8002616:	f007 fa9e 	bl	8009b56 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_year = sDate.Year;
 800261a:	7ffb      	ldrb	r3, [r7, #31]
 800261c:	461a      	mov	r2, r3
 800261e:	4b65      	ldr	r3, [pc, #404]	@ (80027b4 <app_main+0x284>)
 8002620:	855a      	strh	r2, [r3, #42]	@ 0x2a
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

	//if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	 if ((HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) || (strcmp(_Flash_Packet.filename_with_format,"default") == 0)) //we save this value and dont change it untill and untless RTC data is not lost
 8002622:	2101      	movs	r1, #1
 8002624:	486f      	ldr	r0, [pc, #444]	@ (80027e4 <app_main+0x2b4>)
 8002626:	f007 fd47 	bl	800a0b8 <HAL_RTCEx_BKUPRead>
 800262a:	4603      	mov	r3, r0
 800262c:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8002630:	4293      	cmp	r3, r2
 8002632:	d106      	bne.n	8002642 <app_main+0x112>
 8002634:	496c      	ldr	r1, [pc, #432]	@ (80027e8 <app_main+0x2b8>)
 8002636:	486d      	ldr	r0, [pc, #436]	@ (80027ec <app_main+0x2bc>)
 8002638:	f7fd fdd2 	bl	80001e0 <strcmp>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d112      	bne.n	8002668 <app_main+0x138>
	    {




		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8002642:	496b      	ldr	r1, [pc, #428]	@ (80027f0 <app_main+0x2c0>)
 8002644:	486b      	ldr	r0, [pc, #428]	@ (80027f4 <app_main+0x2c4>)
 8002646:	f01a fb19 	bl	801cc7c <createfile>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <app_main+0x284>)
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				_Flash_Packet.File_Format);


		   HAL_PWR_EnableBkUpAccess();
 8002654:	f006 f9fc 	bl	8008a50 <HAL_PWR_EnableBkUpAccess>
			   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
 8002658:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 800265c:	2101      	movs	r1, #1
 800265e:	4861      	ldr	r0, [pc, #388]	@ (80027e4 <app_main+0x2b4>)
 8002660:	f007 fd10 	bl	800a084 <HAL_RTCEx_BKUPWrite>
			   HAL_PWR_DisableBkUpAccess();
 8002664:	f006 fa08 	bl	8008a78 <HAL_PWR_DisableBkUpAccess>
	// else
	// {
	// 	 _RunTime_Packet.sd_file_creation = -1;
	// }

	green_led_blink();
 8002668:	f7ff fb16 	bl	8001c98 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 800266c:	23c8      	movs	r3, #200	@ 0xc8
 800266e:	2215      	movs	r2, #21
 8002670:	4961      	ldr	r1, [pc, #388]	@ (80027f8 <app_main+0x2c8>)
 8002672:	4862      	ldr	r0, [pc, #392]	@ (80027fc <app_main+0x2cc>)
 8002674:	f009 fdf0 	bl	800c258 <HAL_UART_Transmit>



	while (1) {

		prev_sleep_time = HAL_GetTick();
 8002678:	f001 fd4e 	bl	8004118 <HAL_GetTick>
 800267c:	4603      	mov	r3, r0
 800267e:	4a60      	ldr	r2, [pc, #384]	@ (8002800 <app_main+0x2d0>)
 8002680:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 8002682:	f001 fd49 	bl	8004118 <HAL_GetTick>
 8002686:	4603      	mov	r3, r0
 8002688:	4a5e      	ldr	r2, [pc, #376]	@ (8002804 <app_main+0x2d4>)
 800268a:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 800268c:	4b5e      	ldr	r3, [pc, #376]	@ (8002808 <app_main+0x2d8>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
		pwr_off_detected();
 8002692:	f7fe fda3 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002696:	e179      	b.n	800298c <app_main+0x45c>
		{
			pwr_off_detected();
 8002698:	f7fe fda0 	bl	80011dc <pwr_off_detected>
//
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}
			adc_Measure(&_RunTime_Packet.battery_voltage);
 800269c:	485b      	ldr	r0, [pc, #364]	@ (800280c <app_main+0x2dc>)
 800269e:	f011 fd5f 	bl	8014160 <adc_Measure>
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 80026a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026a6:	484d      	ldr	r0, [pc, #308]	@ (80027dc <app_main+0x2ac>)
 80026a8:	f003 fd02 	bl	80060b0 <HAL_GPIO_ReadPin>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d004      	beq.n	80026bc <app_main+0x18c>
					{
				prev_sleep_time = HAL_GetTick();
 80026b2:	f001 fd31 	bl	8004118 <HAL_GetTick>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4a51      	ldr	r2, [pc, #324]	@ (8002800 <app_main+0x2d0>)
 80026ba:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	2200      	movs	r2, #0
 80026c2:	4619      	mov	r1, r3
 80026c4:	4847      	ldr	r0, [pc, #284]	@ (80027e4 <app_main+0x2b4>)
 80026c6:	f007 f964 	bl	8009992 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	2200      	movs	r2, #0
 80026ce:	4619      	mov	r1, r3
 80026d0:	4844      	ldr	r0, [pc, #272]	@ (80027e4 <app_main+0x2b4>)
 80026d2:	f007 fa40 	bl	8009b56 <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 80026d6:	79ba      	ldrb	r2, [r7, #6]
 80026d8:	4b36      	ldr	r3, [pc, #216]	@ (80027b4 <app_main+0x284>)
 80026da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			_RunTime_Packet.month = sDate.Month;
 80026de:	797a      	ldrb	r2, [r7, #5]
 80026e0:	4b34      	ldr	r3, [pc, #208]	@ (80027b4 <app_main+0x284>)
 80026e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			_RunTime_Packet.year = sDate.Year;
 80026e6:	79fa      	ldrb	r2, [r7, #7]
 80026e8:	4b32      	ldr	r3, [pc, #200]	@ (80027b4 <app_main+0x284>)
 80026ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

			if (_RunTime_Packet.prev_year != sDate.Year) {
 80026ee:	4b31      	ldr	r3, [pc, #196]	@ (80027b4 <app_main+0x284>)
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f2:	79fa      	ldrb	r2, [r7, #7]
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <app_main+0x1d8>
				_RunTime_Packet.year_changed = 1; //this for year now
 80026f8:	4b2e      	ldr	r3, [pc, #184]	@ (80027b4 <app_main+0x284>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				_RunTime_Packet.prev_year = sDate.Year;
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	461a      	mov	r2, r3
 8002704:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <app_main+0x284>)
 8002706:	855a      	strh	r2, [r3, #42]	@ 0x2a
			}

			check_peripheral_error();
 8002708:	f7ff f92a 	bl	8001960 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 800270c:	4b29      	ldr	r3, [pc, #164]	@ (80027b4 <app_main+0x284>)
 800270e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <app_main+0x1f0>
					|| _RunTime_Packet.usb_first_start) {
 8002716:	4b27      	ldr	r3, [pc, #156]	@ (80027b4 <app_main+0x284>)
 8002718:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800271c:	2b00      	cmp	r3, #0
 800271e:	d045      	beq.n	80027ac <app_main+0x27c>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 8002720:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <app_main+0x284>)
 8002722:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <app_main+0x202>
				{

					start_usb_timer = 1;
 800272a:	4b39      	ldr	r3, [pc, #228]	@ (8002810 <app_main+0x2e0>)
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e003      	b.n	800273a <app_main+0x20a>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8002732:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <app_main+0x284>)
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 800273a:	f001 fced 	bl	8004118 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <app_main+0x2a8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	1ad2      	subs	r2, r2, r3
 8002746:	4b33      	ldr	r3, [pc, #204]	@ (8002814 <app_main+0x2e4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d329      	bcc.n	80027a2 <app_main+0x272>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 800274e:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <app_main+0x284>)
 8002750:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d10d      	bne.n	8002776 <app_main+0x246>
							&& _RunTime_Packet.usb_first_start) {
 800275a:	4b16      	ldr	r3, [pc, #88]	@ (80027b4 <app_main+0x284>)
 800275c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <app_main+0x246>
						_RunTime_Packet.sd_file_creation = createfile(
 8002764:	4922      	ldr	r1, [pc, #136]	@ (80027f0 <app_main+0x2c0>)
 8002766:	4823      	ldr	r0, [pc, #140]	@ (80027f4 <app_main+0x2c4>)
 8002768:	f01a fa88 	bl	801cc7c <createfile>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <app_main+0x284>)
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 8002776:	4b0f      	ldr	r3, [pc, #60]	@ (80027b4 <app_main+0x284>)
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
					_RunTime_Packet.usb_detection = 0;
 800277e:	4b0d      	ldr	r3, [pc, #52]	@ (80027b4 <app_main+0x284>)
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					_RunTime_Packet.usb_active_disable_pm = 0;
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <app_main+0x284>)
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
					start_usb_timer = 0;
 800278e:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <app_main+0x2e0>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8002794:	f7ff f83e 	bl	8001814 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 8002798:	f001 fcbe 	bl	8004118 <HAL_GetTick>
 800279c:	4603      	mov	r3, r0
 800279e:	4a19      	ldr	r2, [pc, #100]	@ (8002804 <app_main+0x2d4>)
 80027a0:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 80027a2:	f001 fcb9 	bl	8004118 <HAL_GetTick>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a15      	ldr	r2, [pc, #84]	@ (8002800 <app_main+0x2d0>)
 80027aa:	6013      	str	r3, [r2, #0]
			}

			console_process();
 80027ac:	f00f fd64 	bl	8012278 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80027b0:	e046      	b.n	8002840 <app_main+0x310>
 80027b2:	bf00      	nop
 80027b4:	20001530 	.word	0x20001530
 80027b8:	2000193c 	.word	0x2000193c
 80027bc:	20000324 	.word	0x20000324
 80027c0:	40020418 	.word	0x40020418
 80027c4:	20001a14 	.word	0x20001a14
 80027c8:	200019cc 	.word	0x200019cc
 80027cc:	40000400 	.word	0x40000400
 80027d0:	0802241c 	.word	0x0802241c
 80027d4:	20002328 	.word	0x20002328
 80027d8:	200017c8 	.word	0x200017c8
 80027dc:	40020000 	.word	0x40020000
 80027e0:	20001584 	.word	0x20001584
 80027e4:	20001898 	.word	0x20001898
 80027e8:	0802242c 	.word	0x0802242c
 80027ec:	20001461 	.word	0x20001461
 80027f0:	20001330 	.word	0x20001330
 80027f4:	200012cc 	.word	0x200012cc
 80027f8:	08022434 	.word	0x08022434
 80027fc:	20001a74 	.word	0x20001a74
 8002800:	200017c0 	.word	0x200017c0
 8002804:	200017c4 	.word	0x200017c4
 8002808:	2000000c 	.word	0x2000000c
 800280c:	20001550 	.word	0x20001550
 8002810:	20001580 	.word	0x20001580
 8002814:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 8002818:	f00f fd2e 	bl	8012278 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 800281c:	4b93      	ldr	r3, [pc, #588]	@ (8002a6c <app_main+0x53c>)
 800281e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <app_main+0x2fa>
#ifdef use_scd40x
					get_scd4x_measurement();
#elif use_scd30
					get_scd30_measurement();
 8002826:	f7fe fe95 	bl	8001554 <get_scd30_measurement>
#endif

				}

				get_sps30_measurement();
 800282a:	f7ff f80f 	bl	800184c <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 800282e:	4890      	ldr	r0, [pc, #576]	@ (8002a70 <app_main+0x540>)
 8002830:	f011 fc96 	bl	8014160 <adc_Measure>
				led_awake_routine1();
 8002834:	f7ff fc56 	bl	80020e4 <led_awake_routine1>
				pwr_off_detected();
 8002838:	f7fe fcd0 	bl	80011dc <pwr_off_detected>
				check_peripheral_error();
 800283c:	f7ff f890 	bl	8001960 <check_peripheral_error>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002840:	f001 fc6a 	bl	8004118 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	4b8b      	ldr	r3, [pc, #556]	@ (8002a74 <app_main+0x544>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	1ad2      	subs	r2, r2, r3
 800284c:	4b8a      	ldr	r3, [pc, #552]	@ (8002a78 <app_main+0x548>)
 800284e:	681b      	ldr	r3, [r3, #0]
					&& !_RunTime_Packet.usb_first_start)
 8002850:	429a      	cmp	r2, r3
 8002852:	d809      	bhi.n	8002868 <app_main+0x338>
					&& !_RunTime_Packet.usb_detection
 8002854:	4b85      	ldr	r3, [pc, #532]	@ (8002a6c <app_main+0x53c>)
 8002856:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800285a:	2b00      	cmp	r3, #0
 800285c:	d104      	bne.n	8002868 <app_main+0x338>
					&& !_RunTime_Packet.usb_first_start)
 800285e:	4b83      	ldr	r3, [pc, #524]	@ (8002a6c <app_main+0x53c>)
 8002860:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0d7      	beq.n	8002818 <app_main+0x2e8>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 8002868:	f7ff f8dc 	bl	8001a24 <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 800286c:	4b83      	ldr	r3, [pc, #524]	@ (8002a7c <app_main+0x54c>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d016      	beq.n	80028a2 <app_main+0x372>
 8002874:	4b7d      	ldr	r3, [pc, #500]	@ (8002a6c <app_main+0x53c>)
 8002876:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800287a:	2b00      	cmp	r3, #0
 800287c:	d111      	bne.n	80028a2 <app_main+0x372>
					&& !_RunTime_Packet.usb_first_start
 800287e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a6c <app_main+0x53c>)
 8002880:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10c      	bne.n	80028a2 <app_main+0x372>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 8002888:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800288c:	487c      	ldr	r0, [pc, #496]	@ (8002a80 <app_main+0x550>)
 800288e:	f003 fc0f 	bl	80060b0 <HAL_GPIO_ReadPin>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <app_main+0x372>
				scd4x_stop_periodic_measurement();
#elif use_scd30
				//scd30_stop_periodic_measurement();
#endif

				sps30_stop_measurement();
 8002898:	f013 f83e 	bl	8015918 <sps30_stop_measurement>
				stop_measurement = 0;
 800289c:	4b77      	ldr	r3, [pc, #476]	@ (8002a7c <app_main+0x54c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 80028a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028a6:	4876      	ldr	r0, [pc, #472]	@ (8002a80 <app_main+0x550>)
 80028a8:	f003 fc02 	bl	80060b0 <HAL_GPIO_ReadPin>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d050      	beq.n	8002954 <app_main+0x424>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 80028b2:	4b74      	ldr	r3, [pc, #464]	@ (8002a84 <app_main+0x554>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d04c      	beq.n	8002954 <app_main+0x424>
 80028ba:	4b6c      	ldr	r3, [pc, #432]	@ (8002a6c <app_main+0x53c>)
 80028bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d147      	bne.n	8002954 <app_main+0x424>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.year_changed
 80028c4:	4b69      	ldr	r3, [pc, #420]	@ (8002a6c <app_main+0x53c>)
 80028c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <app_main+0x3be>
						|| _RunTime_Packet.filename_changed
 80028ce:	4b67      	ldr	r3, [pc, #412]	@ (8002a6c <app_main+0x53c>)
 80028d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <app_main+0x3be>
						|| _RunTime_Packet.fileformat_changed
 80028d8:	4b64      	ldr	r3, [pc, #400]	@ (8002a6c <app_main+0x53c>)
 80028da:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <app_main+0x3be>
						|| _RunTime_Packet.sd_file_creation == -1) {
 80028e2:	4b62      	ldr	r3, [pc, #392]	@ (8002a6c <app_main+0x53c>)
 80028e4:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d114      	bne.n	8002918 <app_main+0x3e8>
					_RunTime_Packet.sd_file_creation = createfile(
 80028ee:	4966      	ldr	r1, [pc, #408]	@ (8002a88 <app_main+0x558>)
 80028f0:	4866      	ldr	r0, [pc, #408]	@ (8002a8c <app_main+0x55c>)
 80028f2:	f01a f9c3 	bl	801cc7c <createfile>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b5c      	ldr	r3, [pc, #368]	@ (8002a6c <app_main+0x53c>)
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);

					_RunTime_Packet.year_changed = 0;
 8002900:	4b5a      	ldr	r3, [pc, #360]	@ (8002a6c <app_main+0x53c>)
 8002902:	2200      	movs	r2, #0
 8002904:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					_RunTime_Packet.filename_changed = 0;
 8002908:	4b58      	ldr	r3, [pc, #352]	@ (8002a6c <app_main+0x53c>)
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
					_RunTime_Packet.fileformat_changed = 0;
 8002910:	4b56      	ldr	r3, [pc, #344]	@ (8002a6c <app_main+0x53c>)
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
				}
				if (filesaving_process()) {
 8002918:	f01a f966 	bl	801cbe8 <filesaving_process>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d013      	beq.n	800294a <app_main+0x41a>
					HAL_Delay(1500);
 8002922:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002926:	f001 fc03 	bl	8004130 <HAL_Delay>
					if (filesaving_process()) {
 800292a:	f01a f95d 	bl	801cbe8 <filesaving_process>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <app_main+0x41a>
						HAL_Delay(1500);
 8002934:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002938:	f001 fbfa 	bl	8004130 <HAL_Delay>
						if (filesaving_process()) {
 800293c:	f01a f954 	bl	801cbe8 <filesaving_process>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <app_main+0x41a>
							HAL_NVIC_SystemReset();
 8002946:	f002 fa02 	bl	8004d4e <HAL_NVIC_SystemReset>
						}
					}
				}

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 800294a:	f001 fbe5 	bl	8004118 <HAL_GetTick>
 800294e:	4603      	mov	r3, r0
 8002950:	4a48      	ldr	r2, [pc, #288]	@ (8002a74 <app_main+0x544>)
 8002952:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 8002954:	f011 f9dc 	bl	8013d10 <Rtc_set_alarm>

		//	adc_Measure(&_RunTime_Packet.battery_voltage);
			led_awake_routine();
 8002958:	f7ff f9c6 	bl	8001ce8 <led_awake_routine>
			save_data();
 800295c:	f7fe fd9e 	bl	800149c <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8002960:	2101      	movs	r1, #1
 8002962:	4847      	ldr	r0, [pc, #284]	@ (8002a80 <app_main+0x550>)
 8002964:	f003 fba4 	bl	80060b0 <HAL_GPIO_ReadPin>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d006      	beq.n	800297c <app_main+0x44c>
				_RunTime_Packet.motion_detection = 1;
 800296e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <app_main+0x53c>)
 8002970:	2201      	movs	r2, #1
 8002972:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002974:	4b46      	ldr	r3, [pc, #280]	@ (8002a90 <app_main+0x560>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e005      	b.n	8002988 <app_main+0x458>
			} else {
				_RunTime_Packet.motion_detection = 0;
 800297c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a6c <app_main+0x53c>)
 800297e:	2200      	movs	r2, #0
 8002980:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002982:	4b43      	ldr	r3, [pc, #268]	@ (8002a90 <app_main+0x560>)
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 8002988:	f7fe fc28 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 800298c:	f001 fbc4 	bl	8004118 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	4b40      	ldr	r3, [pc, #256]	@ (8002a94 <app_main+0x564>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1ad2      	subs	r2, r2, r3
 8002998:	4b3f      	ldr	r3, [pc, #252]	@ (8002a98 <app_main+0x568>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	f67f ae7b 	bls.w	8002698 <app_main+0x168>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		//_RunTime_Packet.day_changed ||
		if (_RunTime_Packet.year_changed || _RunTime_Packet.filename_changed
 80029a2:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <app_main+0x53c>)
 80029a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10f      	bne.n	80029cc <app_main+0x49c>
 80029ac:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <app_main+0x53c>)
 80029ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <app_main+0x49c>
				|| _RunTime_Packet.fileformat_changed
 80029b6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <app_main+0x53c>)
 80029b8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <app_main+0x49c>
				|| _RunTime_Packet.sd_file_creation == -1) {
 80029c0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a6c <app_main+0x53c>)
 80029c2:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ca:	d11b      	bne.n	8002a04 <app_main+0x4d4>


			_RunTime_Packet.sd_file_creation = createfile(
 80029cc:	492e      	ldr	r1, [pc, #184]	@ (8002a88 <app_main+0x558>)
 80029ce:	482f      	ldr	r0, [pc, #188]	@ (8002a8c <app_main+0x55c>)
 80029d0:	f01a f954 	bl	801cc7c <createfile>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <app_main+0x53c>)
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);

			_RunTime_Packet.year_changed = 0;
 80029de:	4b23      	ldr	r3, [pc, #140]	@ (8002a6c <app_main+0x53c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			_RunTime_Packet.filename_changed = 0;
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <app_main+0x53c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			_RunTime_Packet.fileformat_changed = 0;
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <app_main+0x53c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			/*be sure to save data before going to sleep*/
			while(save_param)
 80029f6:	e001      	b.n	80029fc <app_main+0x4cc>
			{
				save_data();
 80029f8:	f7fe fd50 	bl	800149c <save_data>
			while(save_param)
 80029fc:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <app_main+0x56c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f9      	bne.n	80029f8 <app_main+0x4c8>
			}
		}



		if (filesaving_process()) {
 8002a04:	f01a f8f0 	bl	801cbe8 <filesaving_process>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d013      	beq.n	8002a36 <app_main+0x506>
			HAL_Delay(1500);
 8002a0e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a12:	f001 fb8d 	bl	8004130 <HAL_Delay>
			if (filesaving_process()) {
 8002a16:	f01a f8e7 	bl	801cbe8 <filesaving_process>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <app_main+0x506>
				HAL_Delay(1500);
 8002a20:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a24:	f001 fb84 	bl	8004130 <HAL_Delay>
				if (filesaving_process()) {
 8002a28:	f01a f8de 	bl	801cbe8 <filesaving_process>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <app_main+0x506>
					HAL_NVIC_SystemReset();
 8002a32:	f002 f98c 	bl	8004d4e <HAL_NVIC_SystemReset>
				}
			}
		}
		prev_sleep_time = HAL_GetTick();
 8002a36:	f001 fb6f 	bl	8004118 <HAL_GetTick>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a15      	ldr	r2, [pc, #84]	@ (8002a94 <app_main+0x564>)
 8002a3e:	6013      	str	r3, [r2, #0]

		while(save_param)
 8002a40:	e001      	b.n	8002a46 <app_main+0x516>
		{
			save_data();
 8002a42:	f7fe fd2b 	bl	800149c <save_data>
		while(save_param)
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <app_main+0x56c>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f9      	bne.n	8002a42 <app_main+0x512>
		}

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin) ) {
 8002a4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a52:	480b      	ldr	r0, [pc, #44]	@ (8002a80 <app_main+0x550>)
 8002a54:	f003 fb2c 	bl	80060b0 <HAL_GPIO_ReadPin>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <app_main+0x536>

			sleep();
 8002a5e:	f7fe fff7 	bl	8001a50 <sleep>
			wakeup();
 8002a62:	f7ff f87b 	bl	8001b5c <wakeup>

		}
		pwr_off_detected();
 8002a66:	f7fe fbb9 	bl	80011dc <pwr_off_detected>
		prev_sleep_time = HAL_GetTick();
 8002a6a:	e605      	b.n	8002678 <app_main+0x148>
 8002a6c:	20001530 	.word	0x20001530
 8002a70:	20001550 	.word	0x20001550
 8002a74:	200017c4 	.word	0x200017c4
 8002a78:	20000004 	.word	0x20000004
 8002a7c:	2000000c 	.word	0x2000000c
 8002a80:	40020000 	.word	0x40020000
 8002a84:	20000029 	.word	0x20000029
 8002a88:	20001330 	.word	0x20001330
 8002a8c:	200012cc 	.word	0x200012cc
 8002a90:	20001589 	.word	0x20001589
 8002a94:	200017c0 	.word	0x200017c0
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20001579 	.word	0x20001579

08002aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aa4:	f001 fad2 	bl	800404c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aa8:	f000 f822 	bl	8002af0 <SystemClock_Config>
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
#endif
  HAL_Delay(1000);
 8002aac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ab0:	f001 fb3e 	bl	8004130 <HAL_Delay>
  MX_GPIO_Init();
 8002ab4:	f000 fb00 	bl	80030b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ab8:	f000 fade 	bl	8003078 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002abc:	f000 f948 	bl	8002d50 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002ac0:	f000 fa86 	bl	8002fd0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002ac4:	f000 f91e 	bl	8002d04 <MX_RTC_Init>
  MX_I2C1_Init();
 8002ac8:	f000 f8d4 	bl	8002c74 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002acc:	f000 f9b0 	bl	8002e30 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002ad0:	f000 faa8 	bl	8003024 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002ad4:	f000 f87c 	bl	8002bd0 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002ad8:	f010 fefc 	bl	80138d4 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002adc:	f000 f958 	bl	8002d90 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002ae0:	f000 f9f4 	bl	8002ecc <MX_TIM3_Init>
  MX_IWDG_Init();
 8002ae4:	f000 f8f4 	bl	8002cd0 <MX_IWDG_Init>

  app_main(); //keep mx_usb_device_init off here
 8002ae8:	f7ff fd22 	bl	8002530 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <main+0x4c>

08002af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b094      	sub	sp, #80	@ 0x50
 8002af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002af6:	f107 0320 	add.w	r3, r7, #32
 8002afa:	2230      	movs	r2, #48	@ 0x30
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f01c f95a 	bl	801edb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc8 <SystemClock_Config+0xd8>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc8 <SystemClock_Config+0xd8>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b24:	4b28      	ldr	r3, [pc, #160]	@ (8002bc8 <SystemClock_Config+0xd8>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b30:	2300      	movs	r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <SystemClock_Config+0xdc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b3c:	4a23      	ldr	r2, [pc, #140]	@ (8002bcc <SystemClock_Config+0xdc>)
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b21      	ldr	r3, [pc, #132]	@ (8002bcc <SystemClock_Config+0xdc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8002b50:	230d      	movs	r3, #13
 8002b52:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b62:	2302      	movs	r3, #2
 8002b64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b6c:	2319      	movs	r3, #25
 8002b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b76:	2304      	movs	r3, #4
 8002b78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b7a:	2307      	movs	r3, #7
 8002b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b7e:	f107 0320 	add.w	r3, r7, #32
 8002b82:	4618      	mov	r0, r3
 8002b84:	f005 ffd4 	bl	8008b30 <HAL_RCC_OscConfig>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002b8e:	f000 fd79 	bl	8003684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b92:	230f      	movs	r3, #15
 8002b94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b96:	2302      	movs	r3, #2
 8002b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ba2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	2102      	movs	r1, #2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f006 fa36 	bl	8009020 <HAL_RCC_ClockConfig>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002bba:	f000 fd63 	bl	8003684 <Error_Handler>
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3750      	adds	r7, #80	@ 0x50
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40007000 	.word	0x40007000

08002bd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002be2:	4b21      	ldr	r3, [pc, #132]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002be4:	4a21      	ldr	r2, [pc, #132]	@ (8002c6c <MX_ADC1_Init+0x9c>)
 8002be6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002be8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002bea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c02:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c0a:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c10:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002c12:	4a17      	ldr	r2, [pc, #92]	@ (8002c70 <MX_ADC1_Init+0xa0>)
 8002c14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c16:	4b14      	ldr	r3, [pc, #80]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002c1c:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c22:	4b11      	ldr	r3, [pc, #68]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c30:	480d      	ldr	r0, [pc, #52]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002c32:	f001 fae5 	bl	8004200 <HAL_ADC_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c3c:	f000 fd22 	bl	8003684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c40:	230a      	movs	r3, #10
 8002c42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c4c:	463b      	mov	r3, r7
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4805      	ldr	r0, [pc, #20]	@ (8002c68 <MX_ADC1_Init+0x98>)
 8002c52:	f001 fccb 	bl	80045ec <HAL_ADC_ConfigChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c5c:	f000 fd12 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	200017f0 	.word	0x200017f0
 8002c6c:	40012000 	.word	0x40012000
 8002c70:	0f000001 	.word	0x0f000001

08002c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c78:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <MX_I2C1_Init+0x50>)
 8002c7a:	4a13      	ldr	r2, [pc, #76]	@ (8002cc8 <MX_I2C1_Init+0x54>)
 8002c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c7e:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <MX_I2C1_Init+0x50>)
 8002c80:	4a12      	ldr	r2, [pc, #72]	@ (8002ccc <MX_I2C1_Init+0x58>)
 8002c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c84:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc4 <MX_I2C1_Init+0x50>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <MX_I2C1_Init+0x50>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <MX_I2C1_Init+0x50>)
 8002c92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <MX_I2C1_Init+0x50>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c9e:	4b09      	ldr	r3, [pc, #36]	@ (8002cc4 <MX_I2C1_Init+0x50>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca4:	4b07      	ldr	r3, [pc, #28]	@ (8002cc4 <MX_I2C1_Init+0x50>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <MX_I2C1_Init+0x50>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cb0:	4804      	ldr	r0, [pc, #16]	@ (8002cc4 <MX_I2C1_Init+0x50>)
 8002cb2:	f003 fa47 	bl	8006144 <HAL_I2C_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cbc:	f000 fce2 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20001838 	.word	0x20001838
 8002cc8:	40005400 	.word	0x40005400
 8002ccc:	000186a0 	.word	0x000186a0

08002cd0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */
  //32sec watchdog period set
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <MX_IWDG_Init+0x2c>)
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <MX_IWDG_Init+0x30>)
 8002cd8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002cda:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <MX_IWDG_Init+0x2c>)
 8002cdc:	2206      	movs	r2, #6
 8002cde:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <MX_IWDG_Init+0x2c>)
 8002ce2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002ce6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002ce8:	4804      	ldr	r0, [pc, #16]	@ (8002cfc <MX_IWDG_Init+0x2c>)
 8002cea:	f004 fb83 	bl	80073f4 <HAL_IWDG_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002cf4:	f000 fcc6 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	2000188c 	.word	0x2000188c
 8002d00:	40003000 	.word	0x40003000

08002d04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d08:	4b0f      	ldr	r3, [pc, #60]	@ (8002d48 <MX_RTC_Init+0x44>)
 8002d0a:	4a10      	ldr	r2, [pc, #64]	@ (8002d4c <MX_RTC_Init+0x48>)
 8002d0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d48 <MX_RTC_Init+0x44>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <MX_RTC_Init+0x44>)
 8002d16:	227f      	movs	r2, #127	@ 0x7f
 8002d18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <MX_RTC_Init+0x44>)
 8002d1c:	22ff      	movs	r2, #255	@ 0xff
 8002d1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d20:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <MX_RTC_Init+0x44>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d26:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <MX_RTC_Init+0x44>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <MX_RTC_Init+0x44>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d32:	4805      	ldr	r0, [pc, #20]	@ (8002d48 <MX_RTC_Init+0x44>)
 8002d34:	f006 fd10 	bl	8009758 <HAL_RTC_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002d3e:	f000 fca1 	bl	8003684 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20001898 	.word	0x20001898
 8002d4c:	40002800 	.word	0x40002800

08002d50 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <MX_SDIO_SD_Init+0x38>)
 8002d56:	4a0d      	ldr	r2, [pc, #52]	@ (8002d8c <MX_SDIO_SD_Init+0x3c>)
 8002d58:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <MX_SDIO_SD_Init+0x38>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <MX_SDIO_SD_Init+0x38>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d66:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <MX_SDIO_SD_Init+0x38>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <MX_SDIO_SD_Init+0x38>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d72:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <MX_SDIO_SD_Init+0x38>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002d78:	4b03      	ldr	r3, [pc, #12]	@ (8002d88 <MX_SDIO_SD_Init+0x38>)
 8002d7a:	2205      	movs	r2, #5
 8002d7c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	200018b8 	.word	0x200018b8
 8002d8c:	40012c00 	.word	0x40012c00

08002d90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da4:	463b      	mov	r3, r7
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dac:	4b1e      	ldr	r3, [pc, #120]	@ (8002e28 <MX_TIM1_Init+0x98>)
 8002dae:	4a1f      	ldr	r2, [pc, #124]	@ (8002e2c <MX_TIM1_Init+0x9c>)
 8002db0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002db2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <MX_TIM1_Init+0x98>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <MX_TIM1_Init+0x98>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e28 <MX_TIM1_Init+0x98>)
 8002dc0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002dc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc6:	4b18      	ldr	r3, [pc, #96]	@ (8002e28 <MX_TIM1_Init+0x98>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dcc:	4b16      	ldr	r3, [pc, #88]	@ (8002e28 <MX_TIM1_Init+0x98>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <MX_TIM1_Init+0x98>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dd8:	4813      	ldr	r0, [pc, #76]	@ (8002e28 <MX_TIM1_Init+0x98>)
 8002dda:	f008 f927 	bl	800b02c <HAL_TIM_Base_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002de4:	f000 fc4e 	bl	8003684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dee:	f107 0308 	add.w	r3, r7, #8
 8002df2:	4619      	mov	r1, r3
 8002df4:	480c      	ldr	r0, [pc, #48]	@ (8002e28 <MX_TIM1_Init+0x98>)
 8002df6:	f008 fd63 	bl	800b8c0 <HAL_TIM_ConfigClockSource>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002e00:	f000 fc40 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e04:	2320      	movs	r3, #32
 8002e06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e0c:	463b      	mov	r3, r7
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4805      	ldr	r0, [pc, #20]	@ (8002e28 <MX_TIM1_Init+0x98>)
 8002e12:	f009 f91d 	bl	800c050 <HAL_TIMEx_MasterConfigSynchronization>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002e1c:	f000 fc32 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e20:	bf00      	nop
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	2000193c 	.word	0x2000193c
 8002e2c:	40010000 	.word	0x40010000

08002e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e44:	463b      	mov	r3, r7
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec8 <MX_TIM2_Init+0x98>)
 8002e4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002e54:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <MX_TIM2_Init+0x98>)
 8002e56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <MX_TIM2_Init+0x98>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002e62:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <MX_TIM2_Init+0x98>)
 8002e64:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8002e68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ec8 <MX_TIM2_Init+0x98>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e70:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <MX_TIM2_Init+0x98>)
 8002e72:	2280      	movs	r2, #128	@ 0x80
 8002e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e76:	4814      	ldr	r0, [pc, #80]	@ (8002ec8 <MX_TIM2_Init+0x98>)
 8002e78:	f008 f8d8 	bl	800b02c <HAL_TIM_Base_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e82:	f000 fbff 	bl	8003684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	4619      	mov	r1, r3
 8002e92:	480d      	ldr	r0, [pc, #52]	@ (8002ec8 <MX_TIM2_Init+0x98>)
 8002e94:	f008 fd14 	bl	800b8c0 <HAL_TIM_ConfigClockSource>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e9e:	f000 fbf1 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eaa:	463b      	mov	r3, r7
 8002eac:	4619      	mov	r1, r3
 8002eae:	4806      	ldr	r0, [pc, #24]	@ (8002ec8 <MX_TIM2_Init+0x98>)
 8002eb0:	f009 f8ce 	bl	800c050 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002eba:	f000 fbe3 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20001984 	.word	0x20001984

08002ecc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	@ 0x38
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee0:	f107 0320 	add.w	r3, r7, #32
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
 8002ef8:	615a      	str	r2, [r3, #20]
 8002efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002efc:	4b32      	ldr	r3, [pc, #200]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002efe:	4a33      	ldr	r2, [pc, #204]	@ (8002fcc <MX_TIM3_Init+0x100>)
 8002f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f02:	4b31      	ldr	r3, [pc, #196]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f08:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002f10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f16:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002f1e:	2280      	movs	r2, #128	@ 0x80
 8002f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f22:	4829      	ldr	r0, [pc, #164]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002f24:	f008 f882 	bl	800b02c <HAL_TIM_Base_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002f2e:	f000 fba9 	bl	8003684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4822      	ldr	r0, [pc, #136]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002f40:	f008 fcbe 	bl	800b8c0 <HAL_TIM_ConfigClockSource>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002f4a:	f000 fb9b 	bl	8003684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f4e:	481e      	ldr	r0, [pc, #120]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002f50:	f008 f9fb 	bl	800b34a <HAL_TIM_PWM_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f5a:	f000 fb93 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f66:	f107 0320 	add.w	r3, r7, #32
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4816      	ldr	r0, [pc, #88]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002f6e:	f009 f86f 	bl	800c050 <HAL_TIMEx_MasterConfigSynchronization>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002f78:	f000 fb84 	bl	8003684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f7c:	2360      	movs	r3, #96	@ 0x60
 8002f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	2200      	movs	r2, #0
 8002f90:	4619      	mov	r1, r3
 8002f92:	480d      	ldr	r0, [pc, #52]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002f94:	f008 fbd2 	bl	800b73c <HAL_TIM_PWM_ConfigChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f9e:	f000 fb71 	bl	8003684 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4807      	ldr	r0, [pc, #28]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002faa:	f008 fbc7 	bl	800b73c <HAL_TIM_PWM_ConfigChannel>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002fb4:	f000 fb66 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fb8:	4803      	ldr	r0, [pc, #12]	@ (8002fc8 <MX_TIM3_Init+0xfc>)
 8002fba:	f000 fd83 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 8002fbe:	bf00      	nop
 8002fc0:	3738      	adds	r7, #56	@ 0x38
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200019cc 	.word	0x200019cc
 8002fcc:	40000400 	.word	0x40000400

08002fd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	@ (800301c <MX_USART1_UART_Init+0x4c>)
 8002fd6:	4a12      	ldr	r2, [pc, #72]	@ (8003020 <MX_USART1_UART_Init+0x50>)
 8002fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <MX_USART1_UART_Init+0x4c>)
 8002fdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <MX_USART1_UART_Init+0x4c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <MX_USART1_UART_Init+0x4c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fee:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <MX_USART1_UART_Init+0x4c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ff4:	4b09      	ldr	r3, [pc, #36]	@ (800301c <MX_USART1_UART_Init+0x4c>)
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffa:	4b08      	ldr	r3, [pc, #32]	@ (800301c <MX_USART1_UART_Init+0x4c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003000:	4b06      	ldr	r3, [pc, #24]	@ (800301c <MX_USART1_UART_Init+0x4c>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003006:	4805      	ldr	r0, [pc, #20]	@ (800301c <MX_USART1_UART_Init+0x4c>)
 8003008:	f009 f8a4 	bl	800c154 <HAL_UART_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003012:	f000 fb37 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20001a74 	.word	0x20001a74
 8003020:	40011000 	.word	0x40011000

08003024 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003028:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <MX_USART2_UART_Init+0x4c>)
 800302a:	4a12      	ldr	r2, [pc, #72]	@ (8003074 <MX_USART2_UART_Init+0x50>)
 800302c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800302e:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <MX_USART2_UART_Init+0x4c>)
 8003030:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003034:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003036:	4b0e      	ldr	r3, [pc, #56]	@ (8003070 <MX_USART2_UART_Init+0x4c>)
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800303c:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <MX_USART2_UART_Init+0x4c>)
 800303e:	2200      	movs	r2, #0
 8003040:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003042:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <MX_USART2_UART_Init+0x4c>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003048:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <MX_USART2_UART_Init+0x4c>)
 800304a:	220c      	movs	r2, #12
 800304c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800304e:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <MX_USART2_UART_Init+0x4c>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <MX_USART2_UART_Init+0x4c>)
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800305a:	4805      	ldr	r0, [pc, #20]	@ (8003070 <MX_USART2_UART_Init+0x4c>)
 800305c:	f009 f87a 	bl	800c154 <HAL_UART_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003066:	f000 fb0d 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20001abc 	.word	0x20001abc
 8003074:	40004400 	.word	0x40004400

08003078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <MX_DMA_Init+0x3c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	4a0b      	ldr	r2, [pc, #44]	@ (80030b4 <MX_DMA_Init+0x3c>)
 8003088:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800308c:	6313      	str	r3, [r2, #48]	@ 0x30
 800308e:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <MX_DMA_Init+0x3c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	2100      	movs	r1, #0
 800309e:	2044      	movs	r0, #68	@ 0x44
 80030a0:	f001 fe1d 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80030a4:	2044      	movs	r0, #68	@ 0x44
 80030a6:	f001 fe36 	bl	8004d16 <HAL_NVIC_EnableIRQ>

}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	@ 0x28
 80030bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	4b71      	ldr	r3, [pc, #452]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	4a70      	ldr	r2, [pc, #448]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030de:	4b6e      	ldr	r3, [pc, #440]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	4a69      	ldr	r2, [pc, #420]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 80030f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fa:	4b67      	ldr	r3, [pc, #412]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	4b63      	ldr	r3, [pc, #396]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	4a62      	ldr	r2, [pc, #392]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6313      	str	r3, [r2, #48]	@ 0x30
 8003116:	4b60      	ldr	r3, [pc, #384]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	4b5c      	ldr	r3, [pc, #368]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	4a5b      	ldr	r2, [pc, #364]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	6313      	str	r3, [r2, #48]	@ 0x30
 8003132:	4b59      	ldr	r3, [pc, #356]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4b55      	ldr	r3, [pc, #340]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	4a54      	ldr	r2, [pc, #336]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	6313      	str	r3, [r2, #48]	@ 0x30
 800314e:	4b52      	ldr	r3, [pc, #328]	@ (8003298 <MX_GPIO_Init+0x1e0>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 800315a:	2200      	movs	r2, #0
 800315c:	2102      	movs	r1, #2
 800315e:	484f      	ldr	r0, [pc, #316]	@ (800329c <MX_GPIO_Init+0x1e4>)
 8003160:	f002 ffbe 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8003164:	2201      	movs	r2, #1
 8003166:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800316a:	484d      	ldr	r0, [pc, #308]	@ (80032a0 <MX_GPIO_Init+0x1e8>)
 800316c:	f002 ffb8 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8003170:	2200      	movs	r2, #0
 8003172:	2108      	movs	r1, #8
 8003174:	484a      	ldr	r0, [pc, #296]	@ (80032a0 <MX_GPIO_Init+0x1e8>)
 8003176:	f002 ffb3 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800317a:	f642 63fe 	movw	r3, #12030	@ 0x2efe
 800317e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003180:	2303      	movs	r3, #3
 8003182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	4619      	mov	r1, r3
 800318e:	4845      	ldr	r0, [pc, #276]	@ (80032a4 <MX_GPIO_Init+0x1ec>)
 8003190:	f002 fd26 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8003194:	2301      	movs	r3, #1
 8003196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	4619      	mov	r1, r3
 80031a6:	483d      	ldr	r0, [pc, #244]	@ (800329c <MX_GPIO_Init+0x1e4>)
 80031a8:	f002 fd1a 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 80031ac:	2302      	movs	r3, #2
 80031ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b0:	2301      	movs	r3, #1
 80031b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b8:	2302      	movs	r3, #2
 80031ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4619      	mov	r1, r3
 80031c2:	4836      	ldr	r0, [pc, #216]	@ (800329c <MX_GPIO_Init+0x1e4>)
 80031c4:	f002 fd0c 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80031c8:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 80031cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ce:	2303      	movs	r3, #3
 80031d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	4619      	mov	r1, r3
 80031dc:	482f      	ldr	r0, [pc, #188]	@ (800329c <MX_GPIO_Init+0x1e4>)
 80031de:	f002 fcff 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80031e2:	f247 4307 	movw	r3, #29703	@ 0x7407
 80031e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031e8:	2303      	movs	r3, #3
 80031ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4619      	mov	r1, r3
 80031f6:	482a      	ldr	r0, [pc, #168]	@ (80032a0 <MX_GPIO_Init+0x1e8>)
 80031f8:	f002 fcf2 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 80031fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003202:	2301      	movs	r3, #1
 8003204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800320a:	2302      	movs	r3, #2
 800320c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	4619      	mov	r1, r3
 8003214:	4822      	ldr	r0, [pc, #136]	@ (80032a0 <MX_GPIO_Init+0x1e8>)
 8003216:	f002 fce3 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800321a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800321e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003220:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003226:	2302      	movs	r3, #2
 8003228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	4619      	mov	r1, r3
 8003230:	481a      	ldr	r0, [pc, #104]	@ (800329c <MX_GPIO_Init+0x1e4>)
 8003232:	f002 fcd5 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8003236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800323a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800323c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003242:	2301      	movs	r3, #1
 8003244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 8003246:	f107 0314 	add.w	r3, r7, #20
 800324a:	4619      	mov	r1, r3
 800324c:	4813      	ldr	r0, [pc, #76]	@ (800329c <MX_GPIO_Init+0x1e4>)
 800324e:	f002 fcc7 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8003252:	2308      	movs	r3, #8
 8003254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003256:	2301      	movs	r3, #1
 8003258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325e:	2300      	movs	r3, #0
 8003260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8003262:	f107 0314 	add.w	r3, r7, #20
 8003266:	4619      	mov	r1, r3
 8003268:	480d      	ldr	r0, [pc, #52]	@ (80032a0 <MX_GPIO_Init+0x1e8>)
 800326a:	f002 fcb9 	bl	8005be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2100      	movs	r1, #0
 8003272:	2017      	movs	r0, #23
 8003274:	f001 fd33 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003278:	2017      	movs	r0, #23
 800327a:	f001 fd4c 	bl	8004d16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2100      	movs	r1, #0
 8003282:	2028      	movs	r0, #40	@ 0x28
 8003284:	f001 fd2b 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003288:	2028      	movs	r0, #40	@ 0x28
 800328a:	f001 fd44 	bl	8004d16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800328e:	bf00      	nop
 8003290:	3728      	adds	r7, #40	@ 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020800 	.word	0x40020800

080032a8 <gpio_analog>:

/* USER CODE BEGIN 4 */

void gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	@ 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	f107 0314 	add.w	r3, r7, #20
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	60da      	str	r2, [r3, #12]
 80032bc:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	4b48      	ldr	r3, [pc, #288]	@ (80033e4 <gpio_analog+0x13c>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a47      	ldr	r2, [pc, #284]	@ (80033e4 <gpio_analog+0x13c>)
 80032c8:	f043 0304 	orr.w	r3, r3, #4
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b45      	ldr	r3, [pc, #276]	@ (80033e4 <gpio_analog+0x13c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4b41      	ldr	r3, [pc, #260]	@ (80033e4 <gpio_analog+0x13c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	4a40      	ldr	r2, [pc, #256]	@ (80033e4 <gpio_analog+0x13c>)
 80032e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ea:	4b3e      	ldr	r3, [pc, #248]	@ (80033e4 <gpio_analog+0x13c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	4b3a      	ldr	r3, [pc, #232]	@ (80033e4 <gpio_analog+0x13c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	4a39      	ldr	r2, [pc, #228]	@ (80033e4 <gpio_analog+0x13c>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6313      	str	r3, [r2, #48]	@ 0x30
 8003306:	4b37      	ldr	r3, [pc, #220]	@ (80033e4 <gpio_analog+0x13c>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	4b33      	ldr	r3, [pc, #204]	@ (80033e4 <gpio_analog+0x13c>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a32      	ldr	r2, [pc, #200]	@ (80033e4 <gpio_analog+0x13c>)
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b30      	ldr	r3, [pc, #192]	@ (80033e4 <gpio_analog+0x13c>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	4b2c      	ldr	r3, [pc, #176]	@ (80033e4 <gpio_analog+0x13c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	4a2b      	ldr	r2, [pc, #172]	@ (80033e4 <gpio_analog+0x13c>)
 8003338:	f043 0308 	orr.w	r3, r3, #8
 800333c:	6313      	str	r3, [r2, #48]	@ 0x30
 800333e:	4b29      	ldr	r3, [pc, #164]	@ (80033e4 <gpio_analog+0x13c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800334a:	2308      	movs	r3, #8
 800334c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800334e:	2303      	movs	r3, #3
 8003350:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003356:	2300      	movs	r3, #0
 8003358:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800335a:	f107 0314 	add.w	r3, r7, #20
 800335e:	4619      	mov	r1, r3
 8003360:	4821      	ldr	r0, [pc, #132]	@ (80033e8 <gpio_analog+0x140>)
 8003362:	f002 fc3d 	bl	8005be0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = EN_5V_Pin;
 8003366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800336a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800336c:	2303      	movs	r3, #3
 800336e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	481a      	ldr	r0, [pc, #104]	@ (80033e8 <gpio_analog+0x140>)
 8003380:	f002 fc2e 	bl	8005be0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : OUT_MOTION_Pin */
	  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8003384:	2301      	movs	r3, #1
 8003386:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003388:	2303      	movs	r3, #3
 800338a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003390:	2300      	movs	r3, #0
 8003392:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4619      	mov	r1, r3
 800339a:	4814      	ldr	r0, [pc, #80]	@ (80033ec <gpio_analog+0x144>)
 800339c:	f002 fc20 	bl	8005be0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : EN_MOTION_Pin */
	  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 80033a0:	2302      	movs	r3, #2
 80033a2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a4:	2303      	movs	r3, #3
 80033a6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2300      	movs	r3, #0
 80033ae:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	4619      	mov	r1, r3
 80033b6:	480d      	ldr	r0, [pc, #52]	@ (80033ec <gpio_analog+0x144>)
 80033b8:	f002 fc12 	bl	8005be0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80033bc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80033c0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033c2:	2303      	movs	r3, #3
 80033c4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	4619      	mov	r1, r3
 80033d4:	4805      	ldr	r0, [pc, #20]	@ (80033ec <gpio_analog+0x144>)
 80033d6:	f002 fc03 	bl	8005be0 <HAL_GPIO_Init>

}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	@ 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020400 	.word	0x40020400
 80033ec:	40020000 	.word	0x40020000

080033f0 <i2c1_gpio_analog>:
void i2c1_gpio_analog()
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 8003404:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003408:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800340a:	2303      	movs	r3, #3
 800340c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	4619      	mov	r1, r3
 800341a:	4803      	ldr	r0, [pc, #12]	@ (8003428 <i2c1_gpio_analog+0x38>)
 800341c:	f002 fbe0 	bl	8005be0 <HAL_GPIO_Init>


}
 8003420:	bf00      	nop
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40020400 	.word	0x40020400

0800342c <uart_gpio_analog>:
void uart_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003440:	23c0      	movs	r3, #192	@ 0xc0
 8003442:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003444:	2303      	movs	r3, #3
 8003446:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	4619      	mov	r1, r3
 8003454:	4809      	ldr	r0, [pc, #36]	@ (800347c <uart_gpio_analog+0x50>)
 8003456:	f002 fbc3 	bl	8005be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 800345a:	230c      	movs	r3, #12
 800345c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800345e:	2303      	movs	r3, #3
 8003460:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4804      	ldr	r0, [pc, #16]	@ (8003480 <uart_gpio_analog+0x54>)
 8003470:	f002 fbb6 	bl	8005be0 <HAL_GPIO_Init>
}
 8003474:	bf00      	nop
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40020400 	.word	0x40020400
 8003480:	40020000 	.word	0x40020000

08003484 <timer_gpio_analog>:
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}
void timer_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003498:	2330      	movs	r3, #48	@ 0x30
 800349a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800349c:	2303      	movs	r3, #3
 800349e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a8:	1d3b      	adds	r3, r7, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4803      	ldr	r0, [pc, #12]	@ (80034bc <timer_gpio_analog+0x38>)
 80034ae:	f002 fb97 	bl	8005be0 <HAL_GPIO_Init>

}
 80034b2:	bf00      	nop
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40020400 	.word	0x40020400

080034c0 <gpio_disable>:



void gpio_disable()
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
	i2c1_gpio_analog();
 80034c6:	f7ff ff93 	bl	80033f0 <i2c1_gpio_analog>
	 uart_gpio_analog();
 80034ca:	f7ff ffaf 	bl	800342c <uart_gpio_analog>
	// usb_gpio_analog();
	 timer_gpio_analog();
 80034ce:	f7ff ffd9 	bl	8003484 <timer_gpio_analog>
	 gpio_analog();
 80034d2:	f7ff fee9 	bl	80032a8 <gpio_analog>

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80034e4:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80034e8:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ea:	2303      	movs	r3, #3
 80034ec:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	480a      	ldr	r0, [pc, #40]	@ (8003524 <gpio_disable+0x64>)
 80034fc:	f002 fb70 	bl	8005be0 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003500:	2304      	movs	r3, #4
 8003502:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003504:	2303      	movs	r3, #3
 8003506:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003510:	1d3b      	adds	r3, r7, #4
 8003512:	4619      	mov	r1, r3
 8003514:	4804      	ldr	r0, [pc, #16]	@ (8003528 <gpio_disable+0x68>)
 8003516:	f002 fb63 	bl	8005be0 <HAL_GPIO_Init>

}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40020800 	.word	0x40020800
 8003528:	40020c00 	.word	0x40020c00

0800352c <gpio_enable>:
void gpio_enable()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8003532:	f7ff fdc1 	bl	80030b8 <MX_GPIO_Init>

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003544:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003548:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354a:	2302      	movs	r3, #2
 800354c:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003552:	2303      	movs	r3, #3
 8003554:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003556:	230c      	movs	r3, #12
 8003558:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	4619      	mov	r1, r3
 800355e:	480b      	ldr	r0, [pc, #44]	@ (800358c <gpio_enable+0x60>)
 8003560:	f002 fb3e 	bl	8005be0 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003564:	2304      	movs	r3, #4
 8003566:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2302      	movs	r3, #2
 800356a:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003570:	2303      	movs	r3, #3
 8003572:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003574:	230c      	movs	r3, #12
 8003576:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4804      	ldr	r0, [pc, #16]	@ (8003590 <gpio_enable+0x64>)
 800357e:	f002 fb2f 	bl	8005be0 <HAL_GPIO_Init>
}
 8003582:	bf00      	nop
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40020800 	.word	0x40020800
 8003590:	40020c00 	.word	0x40020c00

08003594 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 80035a6:	f7fd fdc3 	bl	8001130 <timer_interrupt>
}

}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 80035c4:	f7fd fd98 	bl	80010f8 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ce:	d118      	bne.n	8003602 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        _RunTime_Packet.showPrompt = 1;
 80035d0:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <HAL_GPIO_EXTI_Callback+0x64>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        _RunTime_Packet.usb_detection = 1;
 80035d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <HAL_GPIO_EXTI_Callback+0x64>)
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        _RunTime_Packet.usb_start_timer = 1;
 80035e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <HAL_GPIO_EXTI_Callback+0x64>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        usb_time_keep = 0;
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <HAL_GPIO_EXTI_Callback+0x68>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 80035ee:	f000 fd93 	bl	8004118 <HAL_GetTick>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <HAL_GPIO_EXTI_Callback+0x6c>)
 80035f6:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 80035f8:	f000 fd8e 	bl	8004118 <HAL_GetTick>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4a09      	ldr	r2, [pc, #36]	@ (8003624 <HAL_GPIO_EXTI_Callback+0x70>)
 8003600:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003608:	d101      	bne.n	800360e <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	power_off_detect();
 800360a:	f7fd fdab 	bl	8001164 <power_off_detect>
    }
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20001530 	.word	0x20001530
 800361c:	20001584 	.word	0x20001584
 8003620:	200017c8 	.word	0x200017c8
 8003624:	200017c0 	.word	0x200017c0

08003628 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	RtcInt();
 8003630:	f010 face 	bl	8013bd0 <RtcInt>
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0d      	ldr	r2, [pc, #52]	@ (800367c <HAL_UART_ErrorCallback+0x40>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d106      	bne.n	800365a <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	43d2      	mvns	r2, r2
 8003656:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8003658:	e009      	b.n	800366e <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a08      	ldr	r2, [pc, #32]	@ (8003680 <HAL_UART_ErrorCallback+0x44>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d105      	bne.n	800366e <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	43d2      	mvns	r2, r2
 800366c:	601a      	str	r2, [r3, #0]
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20001a74 	.word	0x20001a74
 8003680:	20001abc 	.word	0x20001abc

08003684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003688:	b672      	cpsid	i
}
 800368a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 800368c:	f001 fb5f 	bl	8004d4e <HAL_NVIC_SystemReset>
  while (1)
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <Error_Handler+0xc>

08003694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	4a0f      	ldr	r2, [pc, #60]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	4a08      	ldr	r2, [pc, #32]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800

080036e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	@ 0x28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a17      	ldr	r2, [pc, #92]	@ (8003760 <HAL_ADC_MspInit+0x7c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d127      	bne.n	8003756 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	4b16      	ldr	r3, [pc, #88]	@ (8003764 <HAL_ADC_MspInit+0x80>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <HAL_ADC_MspInit+0x80>)
 8003710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003714:	6453      	str	r3, [r2, #68]	@ 0x44
 8003716:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <HAL_ADC_MspInit+0x80>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b0f      	ldr	r3, [pc, #60]	@ (8003764 <HAL_ADC_MspInit+0x80>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	4a0e      	ldr	r2, [pc, #56]	@ (8003764 <HAL_ADC_MspInit+0x80>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6313      	str	r3, [r2, #48]	@ 0x30
 8003732:	4b0c      	ldr	r3, [pc, #48]	@ (8003764 <HAL_ADC_MspInit+0x80>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 800373e:	2301      	movs	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003742:	2303      	movs	r3, #3
 8003744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 800374a:	f107 0314 	add.w	r3, r7, #20
 800374e:	4619      	mov	r1, r3
 8003750:	4805      	ldr	r0, [pc, #20]	@ (8003768 <HAL_ADC_MspInit+0x84>)
 8003752:	f002 fa45 	bl	8005be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003756:	bf00      	nop
 8003758:	3728      	adds	r7, #40	@ 0x28
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40012000 	.word	0x40012000
 8003764:	40023800 	.word	0x40023800
 8003768:	40020800 	.word	0x40020800

0800376c <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a08      	ldr	r2, [pc, #32]	@ (800379c <HAL_ADC_MspDeInit+0x30>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d109      	bne.n	8003792 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800377e:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <HAL_ADC_MspDeInit+0x34>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	4a07      	ldr	r2, [pc, #28]	@ (80037a0 <HAL_ADC_MspDeInit+0x34>)
 8003784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003788:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 800378a:	2101      	movs	r1, #1
 800378c:	4805      	ldr	r0, [pc, #20]	@ (80037a4 <HAL_ADC_MspDeInit+0x38>)
 800378e:	f002 fbab 	bl	8005ee8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40012000 	.word	0x40012000
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40020800 	.word	0x40020800

080037a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	@ 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a19      	ldr	r2, [pc, #100]	@ (800382c <HAL_I2C_MspInit+0x84>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d12c      	bne.n	8003824 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	4b18      	ldr	r3, [pc, #96]	@ (8003830 <HAL_I2C_MspInit+0x88>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	4a17      	ldr	r2, [pc, #92]	@ (8003830 <HAL_I2C_MspInit+0x88>)
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037da:	4b15      	ldr	r3, [pc, #84]	@ (8003830 <HAL_I2C_MspInit+0x88>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 80037e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037ec:	2312      	movs	r3, #18
 80037ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f4:	2303      	movs	r3, #3
 80037f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037f8:	2304      	movs	r3, #4
 80037fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fc:	f107 0314 	add.w	r3, r7, #20
 8003800:	4619      	mov	r1, r3
 8003802:	480c      	ldr	r0, [pc, #48]	@ (8003834 <HAL_I2C_MspInit+0x8c>)
 8003804:	f002 f9ec 	bl	8005be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <HAL_I2C_MspInit+0x88>)
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	4a07      	ldr	r2, [pc, #28]	@ (8003830 <HAL_I2C_MspInit+0x88>)
 8003812:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003816:	6413      	str	r3, [r2, #64]	@ 0x40
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <HAL_I2C_MspInit+0x88>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003824:	bf00      	nop
 8003826:	3728      	adds	r7, #40	@ 0x28
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40005400 	.word	0x40005400
 8003830:	40023800 	.word	0x40023800
 8003834:	40020400 	.word	0x40020400

08003838 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0b      	ldr	r2, [pc, #44]	@ (8003874 <HAL_I2C_MspDeInit+0x3c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10f      	bne.n	800386a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800384a:	4b0b      	ldr	r3, [pc, #44]	@ (8003878 <HAL_I2C_MspDeInit+0x40>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	4a0a      	ldr	r2, [pc, #40]	@ (8003878 <HAL_I2C_MspDeInit+0x40>)
 8003850:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003854:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 8003856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800385a:	4808      	ldr	r0, [pc, #32]	@ (800387c <HAL_I2C_MspDeInit+0x44>)
 800385c:	f002 fb44 	bl	8005ee8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8003860:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003864:	4805      	ldr	r0, [pc, #20]	@ (800387c <HAL_I2C_MspDeInit+0x44>)
 8003866:	f002 fb3f 	bl	8005ee8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40005400 	.word	0x40005400
 8003878:	40023800 	.word	0x40023800
 800387c:	40020400 	.word	0x40020400

08003880 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003888:	f107 030c 	add.w	r3, r7, #12
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a10      	ldr	r2, [pc, #64]	@ (80038e0 <HAL_RTC_MspInit+0x60>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d119      	bne.n	80038d6 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038a2:	2302      	movs	r3, #2
 80038a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80038a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038aa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038ac:	f107 030c 	add.w	r3, r7, #12
 80038b0:	4618      	mov	r0, r3
 80038b2:	f005 fd95 	bl	80093e0 <HAL_RCCEx_PeriphCLKConfig>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80038bc:	f7ff fee2 	bl	8003684 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038c0:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <HAL_RTC_MspInit+0x64>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2100      	movs	r1, #0
 80038ca:	2029      	movs	r0, #41	@ 0x29
 80038cc:	f001 fa07 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80038d0:	2029      	movs	r0, #41	@ 0x29
 80038d2:	f001 fa20 	bl	8004d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038d6:	bf00      	nop
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40002800 	.word	0x40002800
 80038e4:	42470e3c 	.word	0x42470e3c

080038e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	@ 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a28      	ldr	r2, [pc, #160]	@ (80039a8 <HAL_SD_MspInit+0xc0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d14a      	bne.n	80039a0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	4b27      	ldr	r3, [pc, #156]	@ (80039ac <HAL_SD_MspInit+0xc4>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	4a26      	ldr	r2, [pc, #152]	@ (80039ac <HAL_SD_MspInit+0xc4>)
 8003914:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003918:	6453      	str	r3, [r2, #68]	@ 0x44
 800391a:	4b24      	ldr	r3, [pc, #144]	@ (80039ac <HAL_SD_MspInit+0xc4>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <HAL_SD_MspInit+0xc4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	4a1f      	ldr	r2, [pc, #124]	@ (80039ac <HAL_SD_MspInit+0xc4>)
 8003930:	f043 0304 	orr.w	r3, r3, #4
 8003934:	6313      	str	r3, [r2, #48]	@ 0x30
 8003936:	4b1d      	ldr	r3, [pc, #116]	@ (80039ac <HAL_SD_MspInit+0xc4>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	4b19      	ldr	r3, [pc, #100]	@ (80039ac <HAL_SD_MspInit+0xc4>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	4a18      	ldr	r2, [pc, #96]	@ (80039ac <HAL_SD_MspInit+0xc4>)
 800394c:	f043 0308 	orr.w	r3, r3, #8
 8003950:	6313      	str	r3, [r2, #48]	@ 0x30
 8003952:	4b16      	ldr	r3, [pc, #88]	@ (80039ac <HAL_SD_MspInit+0xc4>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800395e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	2302      	movs	r3, #2
 8003966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396c:	2303      	movs	r3, #3
 800396e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003970:	230c      	movs	r3, #12
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	4619      	mov	r1, r3
 800397a:	480d      	ldr	r0, [pc, #52]	@ (80039b0 <HAL_SD_MspInit+0xc8>)
 800397c:	f002 f930 	bl	8005be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003980:	2304      	movs	r3, #4
 8003982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398c:	2303      	movs	r3, #3
 800398e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003990:	230c      	movs	r3, #12
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003994:	f107 0314 	add.w	r3, r7, #20
 8003998:	4619      	mov	r1, r3
 800399a:	4806      	ldr	r0, [pc, #24]	@ (80039b4 <HAL_SD_MspInit+0xcc>)
 800399c:	f002 f920 	bl	8005be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80039a0:	bf00      	nop
 80039a2:	3728      	adds	r7, #40	@ 0x28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40020800 	.word	0x40020800
 80039b4:	40020c00 	.word	0x40020c00

080039b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ab0 <HAL_TIM_Base_MspInit+0xf8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d13f      	bne.n	8003a4a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	4b39      	ldr	r3, [pc, #228]	@ (8003ab4 <HAL_TIM_Base_MspInit+0xfc>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	4a38      	ldr	r2, [pc, #224]	@ (8003ab4 <HAL_TIM_Base_MspInit+0xfc>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039da:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <HAL_TIM_Base_MspInit+0xfc>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80039e6:	4b34      	ldr	r3, [pc, #208]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 80039e8:	4a34      	ldr	r2, [pc, #208]	@ (8003abc <HAL_TIM_Base_MspInit+0x104>)
 80039ea:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80039ec:	4b32      	ldr	r3, [pc, #200]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 80039ee:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80039f2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039f4:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 80039f6:	2240      	movs	r2, #64	@ 0x40
 80039f8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80039fa:	4b2f      	ldr	r3, [pc, #188]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003a00:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 8003a02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a06:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a08:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 8003a0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a0e:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a10:	4b29      	ldr	r3, [pc, #164]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 8003a12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a16:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8003a18:	4b27      	ldr	r3, [pc, #156]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 8003a1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a1e:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003a20:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a26:	4b24      	ldr	r3, [pc, #144]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003a2c:	4822      	ldr	r0, [pc, #136]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 8003a2e:	f001 f99f 	bl	8004d70 <HAL_DMA_Init>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003a38:	f7ff fe24 	bl	8003684 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 8003a40:	621a      	str	r2, [r3, #32]
 8003a42:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab8 <HAL_TIM_Base_MspInit+0x100>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a48:	e02e      	b.n	8003aa8 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a52:	d116      	bne.n	8003a82 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	4b16      	ldr	r3, [pc, #88]	@ (8003ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	4a15      	ldr	r2, [pc, #84]	@ (8003ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a64:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a70:	2200      	movs	r2, #0
 8003a72:	2100      	movs	r1, #0
 8003a74:	201c      	movs	r0, #28
 8003a76:	f001 f932 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a7a:	201c      	movs	r0, #28
 8003a7c:	f001 f94b 	bl	8004d16 <HAL_NVIC_EnableIRQ>
}
 8003a80:	e012      	b.n	8003aa8 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x108>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	4b08      	ldr	r3, [pc, #32]	@ (8003ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	4a07      	ldr	r2, [pc, #28]	@ (8003ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a96:	f043 0302 	orr.w	r3, r3, #2
 8003a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a9c:	4b05      	ldr	r3, [pc, #20]	@ (8003ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
}
 8003aa8:	bf00      	nop
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	20001a14 	.word	0x20001a14
 8003abc:	40026488 	.word	0x40026488
 8003ac0:	40000400 	.word	0x40000400

08003ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a12      	ldr	r2, [pc, #72]	@ (8003b2c <HAL_TIM_MspPostInit+0x68>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d11d      	bne.n	8003b22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	4b11      	ldr	r3, [pc, #68]	@ (8003b30 <HAL_TIM_MspPostInit+0x6c>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	4a10      	ldr	r2, [pc, #64]	@ (8003b30 <HAL_TIM_MspPostInit+0x6c>)
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <HAL_TIM_MspPostInit+0x6c>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003b02:	2330      	movs	r3, #48	@ 0x30
 8003b04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	2302      	movs	r3, #2
 8003b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b12:	2302      	movs	r3, #2
 8003b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b16:	f107 030c 	add.w	r3, r7, #12
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4805      	ldr	r0, [pc, #20]	@ (8003b34 <HAL_TIM_MspPostInit+0x70>)
 8003b1e:	f002 f85f 	bl	8005be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b22:	bf00      	nop
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40020400 	.word	0x40020400

08003b38 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a16      	ldr	r2, [pc, #88]	@ (8003ba0 <HAL_TIM_Base_MspDeInit+0x68>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10b      	bne.n	8003b62 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003b4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ba4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 f9b6 	bl	8004ecc <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003b60:	e019      	b.n	8003b96 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b6a:	d109      	bne.n	8003b80 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	4a0c      	ldr	r2, [pc, #48]	@ (8003ba4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003b78:	201c      	movs	r0, #28
 8003b7a:	f001 f8da 	bl	8004d32 <HAL_NVIC_DisableIRQ>
}
 8003b7e:	e00a      	b.n	8003b96 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a08      	ldr	r2, [pc, #32]	@ (8003ba8 <HAL_TIM_Base_MspDeInit+0x70>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d105      	bne.n	8003b96 <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003b8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ba4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b90:	f023 0302 	bic.w	r3, r3, #2
 8003b94:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40000400 	.word	0x40000400

08003bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	@ 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb4:	f107 031c 	add.w	r3, r7, #28
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003cb4 <HAL_UART_MspInit+0x108>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d134      	bne.n	8003c38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	4b39      	ldr	r3, [pc, #228]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	4a38      	ldr	r2, [pc, #224]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003bd8:	f043 0310 	orr.w	r3, r3, #16
 8003bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bde:	4b36      	ldr	r3, [pc, #216]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	4b32      	ldr	r3, [pc, #200]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	4a31      	ldr	r2, [pc, #196]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003c06:	23c0      	movs	r3, #192	@ 0xc0
 8003c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c12:	2303      	movs	r3, #3
 8003c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c16:	2307      	movs	r3, #7
 8003c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1a:	f107 031c 	add.w	r3, r7, #28
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4826      	ldr	r0, [pc, #152]	@ (8003cbc <HAL_UART_MspInit+0x110>)
 8003c22:	f001 ffdd 	bl	8005be0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c26:	2200      	movs	r2, #0
 8003c28:	2100      	movs	r1, #0
 8003c2a:	2025      	movs	r0, #37	@ 0x25
 8003c2c:	f001 f857 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c30:	2025      	movs	r0, #37	@ 0x25
 8003c32:	f001 f870 	bl	8004d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c36:	e038      	b.n	8003caa <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a20      	ldr	r2, [pc, #128]	@ (8003cc0 <HAL_UART_MspInit+0x114>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d133      	bne.n	8003caa <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c52:	4b19      	ldr	r3, [pc, #100]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	4b15      	ldr	r3, [pc, #84]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6e:	4b12      	ldr	r3, [pc, #72]	@ (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c86:	2303      	movs	r3, #3
 8003c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8e:	f107 031c 	add.w	r3, r7, #28
 8003c92:	4619      	mov	r1, r3
 8003c94:	480b      	ldr	r0, [pc, #44]	@ (8003cc4 <HAL_UART_MspInit+0x118>)
 8003c96:	f001 ffa3 	bl	8005be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2026      	movs	r0, #38	@ 0x26
 8003ca0:	f001 f81d 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ca4:	2026      	movs	r0, #38	@ 0x26
 8003ca6:	f001 f836 	bl	8004d16 <HAL_NVIC_EnableIRQ>
}
 8003caa:	bf00      	nop
 8003cac:	3730      	adds	r7, #48	@ 0x30
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40011000 	.word	0x40011000
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40020400 	.word	0x40020400
 8003cc0:	40004400 	.word	0x40004400
 8003cc4:	40020000 	.word	0x40020000

08003cc8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a13      	ldr	r2, [pc, #76]	@ (8003d24 <HAL_UART_MspDeInit+0x5c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10d      	bne.n	8003cf6 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003cda:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <HAL_UART_MspDeInit+0x60>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	4a12      	ldr	r2, [pc, #72]	@ (8003d28 <HAL_UART_MspDeInit+0x60>)
 8003ce0:	f023 0310 	bic.w	r3, r3, #16
 8003ce4:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 8003ce6:	21c0      	movs	r1, #192	@ 0xc0
 8003ce8:	4810      	ldr	r0, [pc, #64]	@ (8003d2c <HAL_UART_MspDeInit+0x64>)
 8003cea:	f002 f8fd 	bl	8005ee8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003cee:	2025      	movs	r0, #37	@ 0x25
 8003cf0:	f001 f81f 	bl	8004d32 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003cf4:	e011      	b.n	8003d1a <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8003d30 <HAL_UART_MspDeInit+0x68>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10c      	bne.n	8003d1a <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003d00:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <HAL_UART_MspDeInit+0x60>)
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	4a08      	ldr	r2, [pc, #32]	@ (8003d28 <HAL_UART_MspDeInit+0x60>)
 8003d06:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003d0a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 8003d0c:	210c      	movs	r1, #12
 8003d0e:	4809      	ldr	r0, [pc, #36]	@ (8003d34 <HAL_UART_MspDeInit+0x6c>)
 8003d10:	f002 f8ea 	bl	8005ee8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003d14:	2026      	movs	r0, #38	@ 0x26
 8003d16:	f001 f80c 	bl	8004d32 <HAL_NVIC_DisableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40011000 	.word	0x40011000
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40020400 	.word	0x40020400
 8003d30:	40004400 	.word	0x40004400
 8003d34:	40020000 	.word	0x40020000

08003d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d3c:	f001 f807 	bl	8004d4e <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d40:	bf00      	nop
 8003d42:	e7fd      	b.n	8003d40 <NMI_Handler+0x8>

08003d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d48:	f001 f801 	bl	8004d4e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <HardFault_Handler+0x8>

08003d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d54:	f000 fffb 	bl	8004d4e <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <MemManage_Handler+0x8>

08003d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d60:	f000 fff5 	bl	8004d4e <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d64:	bf00      	nop
 8003d66:	e7fd      	b.n	8003d64 <BusFault_Handler+0x8>

08003d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d6c:	f000 ffef 	bl	8004d4e <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <UsageFault_Handler+0x8>

08003d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d78:	f000 ffe9 	bl	8004d4e <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d84:	f000 ffe3 	bl	8004d4e <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d90:	f000 ffdd 	bl	8004d4e <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IWDG_Refresh(&hiwdg);
 8003d9c:	4803      	ldr	r0, [pc, #12]	@ (8003dac <SysTick_Handler+0x14>)
 8003d9e:	f003 fb6b 	bl	8007478 <HAL_IWDG_Refresh>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003da2:	f000 f9a5 	bl	80040f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000188c 	.word	0x2000188c

08003db0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8003db4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003db8:	f002 f9ac 	bl	8006114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003dc4:	4802      	ldr	r0, [pc, #8]	@ (8003dd0 <TIM2_IRQHandler+0x10>)
 8003dc6:	f007 fbc9 	bl	800b55c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20001984 	.word	0x20001984

08003dd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003dd8:	4802      	ldr	r0, [pc, #8]	@ (8003de4 <USART1_IRQHandler+0x10>)
 8003dda:	f008 fb4b 	bl	800c474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20001a74 	.word	0x20001a74

08003de8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003dec:	4802      	ldr	r0, [pc, #8]	@ (8003df8 <USART2_IRQHandler+0x10>)
 8003dee:	f008 fb41 	bl	800c474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20001abc 	.word	0x20001abc

08003dfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 8003e00:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003e04:	f002 f986 	bl	8006114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e08:	bf00      	nop
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003e10:	4802      	ldr	r0, [pc, #8]	@ (8003e1c <RTC_Alarm_IRQHandler+0x10>)
 8003e12:	f006 f833 	bl	8009e7c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20001898 	.word	0x20001898

08003e20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e24:	4802      	ldr	r0, [pc, #8]	@ (8003e30 <OTG_FS_IRQHandler+0x10>)
 8003e26:	f003 fcd9 	bl	80077dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20002908 	.word	0x20002908

08003e34 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003e38:	4802      	ldr	r0, [pc, #8]	@ (8003e44 <DMA2_Stream5_IRQHandler+0x10>)
 8003e3a:	f001 f973 	bl	8005124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20001a14 	.word	0x20001a14

08003e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return 1;
 8003e4c:	2301      	movs	r3, #1
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <_kill>:

int _kill(int pid, int sig)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e62:	f01b f88b 	bl	801ef7c <__errno>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2216      	movs	r2, #22
 8003e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_exit>:

void _exit (int status)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ffe7 	bl	8003e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <_exit+0x12>

08003e8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e00a      	b.n	8003eb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ea0:	f3af 8000 	nop.w
 8003ea4:	4601      	mov	r1, r0
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	60ba      	str	r2, [r7, #8]
 8003eac:	b2ca      	uxtb	r2, r1
 8003eae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	dbf0      	blt.n	8003ea0 <_read+0x12>
  }

  return len;
 8003ebe:	687b      	ldr	r3, [r7, #4]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	e009      	b.n	8003eee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	60ba      	str	r2, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3301      	adds	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	dbf1      	blt.n	8003eda <_write+0x12>
  }
  return len;
 8003ef6:	687b      	ldr	r3, [r7, #4]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <_close>:

int _close(int file)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f28:	605a      	str	r2, [r3, #4]
  return 0;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <_isatty>:

int _isatty(int file)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f40:	2301      	movs	r3, #1
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f70:	4a14      	ldr	r2, [pc, #80]	@ (8003fc4 <_sbrk+0x5c>)
 8003f72:	4b15      	ldr	r3, [pc, #84]	@ (8003fc8 <_sbrk+0x60>)
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f7c:	4b13      	ldr	r3, [pc, #76]	@ (8003fcc <_sbrk+0x64>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d102      	bne.n	8003f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f84:	4b11      	ldr	r3, [pc, #68]	@ (8003fcc <_sbrk+0x64>)
 8003f86:	4a12      	ldr	r2, [pc, #72]	@ (8003fd0 <_sbrk+0x68>)
 8003f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f8a:	4b10      	ldr	r3, [pc, #64]	@ (8003fcc <_sbrk+0x64>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d207      	bcs.n	8003fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f98:	f01a fff0 	bl	801ef7c <__errno>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	e009      	b.n	8003fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fa8:	4b08      	ldr	r3, [pc, #32]	@ (8003fcc <_sbrk+0x64>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fae:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <_sbrk+0x64>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	4a05      	ldr	r2, [pc, #20]	@ (8003fcc <_sbrk+0x64>)
 8003fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fba:	68fb      	ldr	r3, [r7, #12]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20018000 	.word	0x20018000
 8003fc8:	00000400 	.word	0x00000400
 8003fcc:	20001b04 	.word	0x20001b04
 8003fd0:	200037b0 	.word	0x200037b0

08003fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fd8:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <SystemInit+0x20>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	4a05      	ldr	r2, [pc, #20]	@ (8003ff4 <SystemInit+0x20>)
 8003fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004030 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ffc:	480d      	ldr	r0, [pc, #52]	@ (8004034 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ffe:	490e      	ldr	r1, [pc, #56]	@ (8004038 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004000:	4a0e      	ldr	r2, [pc, #56]	@ (800403c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004004:	e002      	b.n	800400c <LoopCopyDataInit>

08004006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800400a:	3304      	adds	r3, #4

0800400c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800400c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800400e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004010:	d3f9      	bcc.n	8004006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004012:	4a0b      	ldr	r2, [pc, #44]	@ (8004040 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004014:	4c0b      	ldr	r4, [pc, #44]	@ (8004044 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004018:	e001      	b.n	800401e <LoopFillZerobss>

0800401a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800401a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800401c:	3204      	adds	r2, #4

0800401e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800401e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004020:	d3fb      	bcc.n	800401a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004022:	f7ff ffd7 	bl	8003fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004026:	f01a ffaf 	bl	801ef88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800402a:	f7fe fd39 	bl	8002aa0 <main>
  bx  lr    
 800402e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004030:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004038:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 800403c:	080259bc 	.word	0x080259bc
  ldr r2, =_sbss
 8004040:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8004044:	200037b0 	.word	0x200037b0

08004048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004048:	e7fe      	b.n	8004048 <ADC_IRQHandler>
	...

0800404c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004050:	4b0e      	ldr	r3, [pc, #56]	@ (800408c <HAL_Init+0x40>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0d      	ldr	r2, [pc, #52]	@ (800408c <HAL_Init+0x40>)
 8004056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800405a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800405c:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <HAL_Init+0x40>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0a      	ldr	r2, [pc, #40]	@ (800408c <HAL_Init+0x40>)
 8004062:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004068:	4b08      	ldr	r3, [pc, #32]	@ (800408c <HAL_Init+0x40>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a07      	ldr	r2, [pc, #28]	@ (800408c <HAL_Init+0x40>)
 800406e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004074:	2003      	movs	r0, #3
 8004076:	f000 fe27 	bl	8004cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800407a:	200f      	movs	r0, #15
 800407c:	f000 f808 	bl	8004090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004080:	f7ff fb08 	bl	8003694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00

08004090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004098:	4b12      	ldr	r3, [pc, #72]	@ (80040e4 <HAL_InitTick+0x54>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b12      	ldr	r3, [pc, #72]	@ (80040e8 <HAL_InitTick+0x58>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	4619      	mov	r1, r3
 80040a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fe51 	bl	8004d56 <HAL_SYSTICK_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00e      	b.n	80040dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b0f      	cmp	r3, #15
 80040c2:	d80a      	bhi.n	80040da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040c4:	2200      	movs	r2, #0
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	f000 fe07 	bl	8004cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040d0:	4a06      	ldr	r2, [pc, #24]	@ (80040ec <HAL_InitTick+0x5c>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e000      	b.n	80040dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000010 	.word	0x20000010
 80040e8:	20000018 	.word	0x20000018
 80040ec:	20000014 	.word	0x20000014

080040f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040f4:	4b06      	ldr	r3, [pc, #24]	@ (8004110 <HAL_IncTick+0x20>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <HAL_IncTick+0x24>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4413      	add	r3, r2
 8004100:	4a04      	ldr	r2, [pc, #16]	@ (8004114 <HAL_IncTick+0x24>)
 8004102:	6013      	str	r3, [r2, #0]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000018 	.word	0x20000018
 8004114:	20001b08 	.word	0x20001b08

08004118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return uwTick;
 800411c:	4b03      	ldr	r3, [pc, #12]	@ (800412c <HAL_GetTick+0x14>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20001b08 	.word	0x20001b08

08004130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004138:	f7ff ffee 	bl	8004118 <HAL_GetTick>
 800413c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d005      	beq.n	8004156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800414a:	4b0a      	ldr	r3, [pc, #40]	@ (8004174 <HAL_Delay+0x44>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004156:	bf00      	nop
 8004158:	f7ff ffde 	bl	8004118 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	429a      	cmp	r2, r3
 8004166:	d8f7      	bhi.n	8004158 <HAL_Delay+0x28>
  {
  }
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000018 	.word	0x20000018

08004178 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800417c:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <HAL_SuspendTick+0x1c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a04      	ldr	r2, [pc, #16]	@ (8004194 <HAL_SuspendTick+0x1c>)
 8004182:	f023 0302 	bic.w	r3, r3, #2
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	e000e010 	.word	0xe000e010

08004198 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_ResumeTick+0x1c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_ResumeTick+0x1c>)
 80041a2:	f043 0302 	orr.w	r3, r3, #2
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	e000e010 	.word	0xe000e010

080041b8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80041bc:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <HAL_GetUIDw0+0x14>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	1fff7a10 	.word	0x1fff7a10

080041d0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80041d4:	4b03      	ldr	r3, [pc, #12]	@ (80041e4 <HAL_GetUIDw1+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	1fff7a14 	.word	0x1fff7a14

080041e8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80041ec:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <HAL_GetUIDw2+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	1fff7a18 	.word	0x1fff7a18

08004200 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e033      	b.n	800427e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fa60 	bl	80036e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	d118      	bne.n	8004270 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004246:	f023 0302 	bic.w	r3, r3, #2
 800424a:	f043 0202 	orr.w	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 faec 	bl	8004830 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	f023 0303 	bic.w	r3, r3, #3
 8004266:	f043 0201 	orr.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	641a      	str	r2, [r3, #64]	@ 0x40
 800426e:	e001      	b.n	8004274 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e022      	b.n	80042e2 <HAL_ADC_DeInit+0x5c>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	f043 0202 	orr.w	r2, r3, #2
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <HAL_ADC_DeInit+0x52>

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff fa50 	bl	800376c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_ADC_Start+0x1a>
 8004302:	2302      	movs	r3, #2
 8004304:	e097      	b.n	8004436 <HAL_ADC_Start+0x14a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d018      	beq.n	800434e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800432c:	4b45      	ldr	r3, [pc, #276]	@ (8004444 <HAL_ADC_Start+0x158>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a45      	ldr	r2, [pc, #276]	@ (8004448 <HAL_ADC_Start+0x15c>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0c9a      	lsrs	r2, r3, #18
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004340:	e002      	b.n	8004348 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	3b01      	subs	r3, #1
 8004346:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f9      	bne.n	8004342 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d15f      	bne.n	800441c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004386:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439a:	d106      	bne.n	80043aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a0:	f023 0206 	bic.w	r2, r3, #6
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80043a8:	e002      	b.n	80043b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043b8:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_ADC_Start+0x160>)
 80043ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80043c4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d129      	bne.n	8004434 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	e020      	b.n	8004434 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <HAL_ADC_Start+0x164>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d11b      	bne.n	8004434 <HAL_ADC_Start+0x148>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d114      	bne.n	8004434 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	e00b      	b.n	8004434 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004420:	f043 0210 	orr.w	r2, r3, #16
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000010 	.word	0x20000010
 8004448:	431bde83 	.word	0x431bde83
 800444c:	40012300 	.word	0x40012300
 8004450:	40012000 	.word	0x40012000

08004454 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_ADC_Stop+0x16>
 8004466:	2302      	movs	r3, #2
 8004468:	e021      	b.n	80044ae <HAL_ADC_Stop+0x5a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d109      	bne.n	80044a4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	f043 0201 	orr.w	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d6:	d113      	bne.n	8004500 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044e6:	d10b      	bne.n	8004500 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e063      	b.n	80045c8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004500:	f7ff fe0a 	bl	8004118 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004506:	e021      	b.n	800454c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d01d      	beq.n	800454c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <HAL_ADC_PollForConversion+0x6c>
 8004516:	f7ff fdff 	bl	8004118 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d212      	bcs.n	800454c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b02      	cmp	r3, #2
 8004532:	d00b      	beq.n	800454c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	f043 0204 	orr.w	r2, r3, #4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e03d      	b.n	80045c8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b02      	cmp	r3, #2
 8004558:	d1d6      	bne.n	8004508 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f06f 0212 	mvn.w	r2, #18
 8004562:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d123      	bne.n	80045c6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004582:	2b00      	cmp	r3, #0
 8004584:	d11f      	bne.n	80045c6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004590:	2b00      	cmp	r3, #0
 8004592:	d006      	beq.n	80045a2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d111      	bne.n	80045c6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d105      	bne.n	80045c6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	f043 0201 	orr.w	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x1c>
 8004604:	2302      	movs	r3, #2
 8004606:	e105      	b.n	8004814 <HAL_ADC_ConfigChannel+0x228>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b09      	cmp	r3, #9
 8004616:	d925      	bls.n	8004664 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68d9      	ldr	r1, [r3, #12]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	4613      	mov	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	4413      	add	r3, r2
 800462c:	3b1e      	subs	r3, #30
 800462e:	2207      	movs	r2, #7
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43da      	mvns	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	400a      	ands	r2, r1
 800463c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68d9      	ldr	r1, [r3, #12]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	4618      	mov	r0, r3
 8004650:	4603      	mov	r3, r0
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4403      	add	r3, r0
 8004656:	3b1e      	subs	r3, #30
 8004658:	409a      	lsls	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	e022      	b.n	80046aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6919      	ldr	r1, [r3, #16]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	2207      	movs	r2, #7
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43da      	mvns	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	400a      	ands	r2, r1
 8004686:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6919      	ldr	r1, [r3, #16]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	4618      	mov	r0, r3
 800469a:	4603      	mov	r3, r0
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4403      	add	r3, r0
 80046a0:	409a      	lsls	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d824      	bhi.n	80046fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	3b05      	subs	r3, #5
 80046c4:	221f      	movs	r2, #31
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43da      	mvns	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	400a      	ands	r2, r1
 80046d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	4618      	mov	r0, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	3b05      	subs	r3, #5
 80046ee:	fa00 f203 	lsl.w	r2, r0, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80046fa:	e04c      	b.n	8004796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b0c      	cmp	r3, #12
 8004702:	d824      	bhi.n	800474e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	3b23      	subs	r3, #35	@ 0x23
 8004716:	221f      	movs	r2, #31
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43da      	mvns	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	400a      	ands	r2, r1
 8004724:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	4618      	mov	r0, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	3b23      	subs	r3, #35	@ 0x23
 8004740:	fa00 f203 	lsl.w	r2, r0, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
 800474c:	e023      	b.n	8004796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	3b41      	subs	r3, #65	@ 0x41
 8004760:	221f      	movs	r2, #31
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43da      	mvns	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	400a      	ands	r2, r1
 800476e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	4618      	mov	r0, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	3b41      	subs	r3, #65	@ 0x41
 800478a:	fa00 f203 	lsl.w	r2, r0, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004796:	4b22      	ldr	r3, [pc, #136]	@ (8004820 <HAL_ADC_ConfigChannel+0x234>)
 8004798:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a21      	ldr	r2, [pc, #132]	@ (8004824 <HAL_ADC_ConfigChannel+0x238>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d109      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x1cc>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b12      	cmp	r3, #18
 80047aa:	d105      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a19      	ldr	r2, [pc, #100]	@ (8004824 <HAL_ADC_ConfigChannel+0x238>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d123      	bne.n	800480a <HAL_ADC_ConfigChannel+0x21e>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d003      	beq.n	80047d2 <HAL_ADC_ConfigChannel+0x1e6>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b11      	cmp	r3, #17
 80047d0:	d11b      	bne.n	800480a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d111      	bne.n	800480a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047e6:	4b10      	ldr	r3, [pc, #64]	@ (8004828 <HAL_ADC_ConfigChannel+0x23c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a10      	ldr	r2, [pc, #64]	@ (800482c <HAL_ADC_ConfigChannel+0x240>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	0c9a      	lsrs	r2, r3, #18
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80047fc:	e002      	b.n	8004804 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3b01      	subs	r3, #1
 8004802:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f9      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	40012300 	.word	0x40012300
 8004824:	40012000 	.word	0x40012000
 8004828:	20000010 	.word	0x20000010
 800482c:	431bde83 	.word	0x431bde83

08004830 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004838:	4b79      	ldr	r3, [pc, #484]	@ (8004a20 <ADC_Init+0x1f0>)
 800483a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	431a      	orrs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	021a      	lsls	r2, r3, #8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6899      	ldr	r1, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c2:	4a58      	ldr	r2, [pc, #352]	@ (8004a24 <ADC_Init+0x1f4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d022      	beq.n	800490e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6899      	ldr	r1, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80048f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6899      	ldr	r1, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	e00f      	b.n	800492e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800491c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800492c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0202 	bic.w	r2, r2, #2
 800493c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6899      	ldr	r1, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	7e1b      	ldrb	r3, [r3, #24]
 8004948:	005a      	lsls	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01b      	beq.n	8004994 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800496a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800497a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	3b01      	subs	r3, #1
 8004988:	035a      	lsls	r2, r3, #13
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	e007      	b.n	80049a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80049b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	3b01      	subs	r3, #1
 80049c0:	051a      	lsls	r2, r3, #20
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80049d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6899      	ldr	r1, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80049e6:	025a      	lsls	r2, r3, #9
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6899      	ldr	r1, [r3, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	029a      	lsls	r2, r3, #10
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40012300 	.word	0x40012300
 8004a24:	0f000001 	.word	0x0f000001

08004a28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e031      	b.n	8004aa4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a48:	4b19      	ldr	r3, [pc, #100]	@ (8004ab0 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f023 021f 	bic.w	r2, r3, #31
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40012300 	.word	0x40012300

08004ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ae6:	4a04      	ldr	r2, [pc, #16]	@ (8004af8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	60d3      	str	r3, [r2, #12]
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b00:	4b04      	ldr	r3, [pc, #16]	@ (8004b14 <__NVIC_GetPriorityGrouping+0x18>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	f003 0307 	and.w	r3, r3, #7
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	e000ed00 	.word	0xe000ed00

08004b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	db0b      	blt.n	8004b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	f003 021f 	and.w	r2, r3, #31
 8004b30:	4907      	ldr	r1, [pc, #28]	@ (8004b50 <__NVIC_EnableIRQ+0x38>)
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2001      	movs	r0, #1
 8004b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	e000e100 	.word	0xe000e100

08004b54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	db12      	blt.n	8004b8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	f003 021f 	and.w	r2, r3, #31
 8004b6c:	490a      	ldr	r1, [pc, #40]	@ (8004b98 <__NVIC_DisableIRQ+0x44>)
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	2001      	movs	r0, #1
 8004b76:	fa00 f202 	lsl.w	r2, r0, r2
 8004b7a:	3320      	adds	r3, #32
 8004b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b80:	f3bf 8f4f 	dsb	sy
}
 8004b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b86:	f3bf 8f6f 	isb	sy
}
 8004b8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000e100 	.word	0xe000e100

08004b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	6039      	str	r1, [r7, #0]
 8004ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	db0a      	blt.n	8004bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	490c      	ldr	r1, [pc, #48]	@ (8004be8 <__NVIC_SetPriority+0x4c>)
 8004bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bba:	0112      	lsls	r2, r2, #4
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bc4:	e00a      	b.n	8004bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	4908      	ldr	r1, [pc, #32]	@ (8004bec <__NVIC_SetPriority+0x50>)
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	3b04      	subs	r3, #4
 8004bd4:	0112      	lsls	r2, r2, #4
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	440b      	add	r3, r1
 8004bda:	761a      	strb	r2, [r3, #24]
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	e000e100 	.word	0xe000e100
 8004bec:	e000ed00 	.word	0xe000ed00

08004bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b089      	sub	sp, #36	@ 0x24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f1c3 0307 	rsb	r3, r3, #7
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	bf28      	it	cs
 8004c0e:	2304      	movcs	r3, #4
 8004c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	3304      	adds	r3, #4
 8004c16:	2b06      	cmp	r3, #6
 8004c18:	d902      	bls.n	8004c20 <NVIC_EncodePriority+0x30>
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3b03      	subs	r3, #3
 8004c1e:	e000      	b.n	8004c22 <NVIC_EncodePriority+0x32>
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	401a      	ands	r2, r3
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c38:	f04f 31ff 	mov.w	r1, #4294967295
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c42:	43d9      	mvns	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c48:	4313      	orrs	r3, r2
         );
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3724      	adds	r7, #36	@ 0x24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004c5c:	f3bf 8f4f 	dsb	sy
}
 8004c60:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c62:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <__NVIC_SystemReset+0x24>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c6a:	4904      	ldr	r1, [pc, #16]	@ (8004c7c <__NVIC_SystemReset+0x24>)
 8004c6c:	4b04      	ldr	r3, [pc, #16]	@ (8004c80 <__NVIC_SystemReset+0x28>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c72:	f3bf 8f4f 	dsb	sy
}
 8004c76:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004c78:	bf00      	nop
 8004c7a:	e7fd      	b.n	8004c78 <__NVIC_SystemReset+0x20>
 8004c7c:	e000ed00 	.word	0xe000ed00
 8004c80:	05fa0004 	.word	0x05fa0004

08004c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c94:	d301      	bcc.n	8004c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00f      	b.n	8004cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <SysTick_Config+0x40>)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ca2:	210f      	movs	r1, #15
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	f7ff ff78 	bl	8004b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cac:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <SysTick_Config+0x40>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cb2:	4b04      	ldr	r3, [pc, #16]	@ (8004cc4 <SysTick_Config+0x40>)
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	e000e010 	.word	0xe000e010

08004cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff feef 	bl	8004ab4 <__NVIC_SetPriorityGrouping>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf0:	f7ff ff04 	bl	8004afc <__NVIC_GetPriorityGrouping>
 8004cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	6978      	ldr	r0, [r7, #20]
 8004cfc:	f7ff ff78 	bl	8004bf0 <NVIC_EncodePriority>
 8004d00:	4602      	mov	r2, r0
 8004d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff47 	bl	8004b9c <__NVIC_SetPriority>
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff fef7 	bl	8004b18 <__NVIC_EnableIRQ>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff07 	bl	8004b54 <__NVIC_DisableIRQ>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004d52:	f7ff ff81 	bl	8004c58 <__NVIC_SystemReset>

08004d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ff90 	bl	8004c84 <SysTick_Config>
 8004d64:	4603      	mov	r3, r0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d7c:	f7ff f9cc 	bl	8004118 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e099      	b.n	8004ec0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dac:	e00f      	b.n	8004dce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dae:	f7ff f9b3 	bl	8004118 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	d908      	bls.n	8004dce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e078      	b.n	8004ec0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e8      	bne.n	8004dae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4b38      	ldr	r3, [pc, #224]	@ (8004ec8 <HAL_DMA_Init+0x158>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d107      	bne.n	8004e38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	4313      	orrs	r3, r2
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f023 0307 	bic.w	r3, r3, #7
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d117      	bne.n	8004e92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fb43 	bl	8005500 <DMA_CheckFifoParam>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2240      	movs	r2, #64	@ 0x40
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e016      	b.n	8004ec0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fafa 	bl	8005494 <DMA_CalcBaseAndBitshift>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea8:	223f      	movs	r2, #63	@ 0x3f
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	f010803f 	.word	0xf010803f

08004ecc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e050      	b.n	8004f80 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d101      	bne.n	8004eee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
 8004eec:	e048      	b.n	8004f80 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0201 	bic.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2200      	movs	r2, #0
 8004f24:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2221      	movs	r2, #33	@ 0x21
 8004f2c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fab0 	bl	8005494 <DMA_CalcBaseAndBitshift>
 8004f34:	4603      	mov	r3, r0
 8004f36:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f60:	223f      	movs	r2, #63	@ 0x3f
 8004f62:	409a      	lsls	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_DMA_Start+0x20>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e026      	b.n	8004ff6 <HAL_DMA_Start+0x6e>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d115      	bne.n	8004fe8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fa31 	bl	8005438 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e005      	b.n	8004ff4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800500c:	f7ff f884 	bl	8004118 <HAL_GetTick>
 8005010:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d008      	beq.n	8005030 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2280      	movs	r2, #128	@ 0x80
 8005022:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e052      	b.n	80050d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0216 	bic.w	r2, r2, #22
 800503e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695a      	ldr	r2, [r3, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800504e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d103      	bne.n	8005060 <HAL_DMA_Abort+0x62>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0208 	bic.w	r2, r2, #8
 800506e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005080:	e013      	b.n	80050aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005082:	f7ff f849 	bl	8004118 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b05      	cmp	r3, #5
 800508e:	d90c      	bls.n	80050aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2203      	movs	r2, #3
 800509a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e015      	b.n	80050d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e4      	bne.n	8005082 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050bc:	223f      	movs	r2, #63	@ 0x3f
 80050be:	409a      	lsls	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d004      	beq.n	80050fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2280      	movs	r2, #128	@ 0x80
 80050f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e00c      	b.n	8005116 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2205      	movs	r2, #5
 8005100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005130:	4b8e      	ldr	r3, [pc, #568]	@ (800536c <HAL_DMA_IRQHandler+0x248>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a8e      	ldr	r2, [pc, #568]	@ (8005370 <HAL_DMA_IRQHandler+0x24c>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	0a9b      	lsrs	r3, r3, #10
 800513c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005142:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514e:	2208      	movs	r2, #8
 8005150:	409a      	lsls	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4013      	ands	r3, r2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01a      	beq.n	8005190 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0204 	bic.w	r2, r2, #4
 8005176:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517c:	2208      	movs	r2, #8
 800517e:	409a      	lsls	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005188:	f043 0201 	orr.w	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005194:	2201      	movs	r2, #1
 8005196:	409a      	lsls	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d012      	beq.n	80051c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b2:	2201      	movs	r2, #1
 80051b4:	409a      	lsls	r2, r3
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051be:	f043 0202 	orr.w	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ca:	2204      	movs	r2, #4
 80051cc:	409a      	lsls	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d012      	beq.n	80051fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e8:	2204      	movs	r2, #4
 80051ea:	409a      	lsls	r2, r3
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f4:	f043 0204 	orr.w	r2, r3, #4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005200:	2210      	movs	r2, #16
 8005202:	409a      	lsls	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d043      	beq.n	8005294 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d03c      	beq.n	8005294 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800521e:	2210      	movs	r2, #16
 8005220:	409a      	lsls	r2, r3
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d018      	beq.n	8005266 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d108      	bne.n	8005254 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d024      	beq.n	8005294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
 8005252:	e01f      	b.n	8005294 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01b      	beq.n	8005294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	4798      	blx	r3
 8005264:	e016      	b.n	8005294 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d107      	bne.n	8005284 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0208 	bic.w	r2, r2, #8
 8005282:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005298:	2220      	movs	r2, #32
 800529a:	409a      	lsls	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 808f 	beq.w	80053c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8087 	beq.w	80053c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ba:	2220      	movs	r2, #32
 80052bc:	409a      	lsls	r2, r3
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d136      	bne.n	800533c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0216 	bic.w	r2, r2, #22
 80052dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <HAL_DMA_IRQHandler+0x1da>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0208 	bic.w	r2, r2, #8
 800530c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005312:	223f      	movs	r2, #63	@ 0x3f
 8005314:	409a      	lsls	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532e:	2b00      	cmp	r3, #0
 8005330:	d07e      	beq.n	8005430 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
        }
        return;
 800533a:	e079      	b.n	8005430 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01d      	beq.n	8005386 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10d      	bne.n	8005374 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535c:	2b00      	cmp	r3, #0
 800535e:	d031      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
 8005368:	e02c      	b.n	80053c4 <HAL_DMA_IRQHandler+0x2a0>
 800536a:	bf00      	nop
 800536c:	20000010 	.word	0x20000010
 8005370:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d023      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	4798      	blx	r3
 8005384:	e01e      	b.n	80053c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10f      	bne.n	80053b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0210 	bic.w	r2, r2, #16
 80053a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d032      	beq.n	8005432 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d022      	beq.n	800541e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2205      	movs	r2, #5
 80053dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	3301      	adds	r3, #1
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d307      	bcc.n	800540c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f2      	bne.n	80053f0 <HAL_DMA_IRQHandler+0x2cc>
 800540a:	e000      	b.n	800540e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800540c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
 800542e:	e000      	b.n	8005432 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005430:	bf00      	nop
    }
  }
}
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005454:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d108      	bne.n	8005478 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005476:	e007      	b.n	8005488 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]
}
 8005488:	bf00      	nop
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	3b10      	subs	r3, #16
 80054a4:	4a14      	ldr	r2, [pc, #80]	@ (80054f8 <DMA_CalcBaseAndBitshift+0x64>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	091b      	lsrs	r3, r3, #4
 80054ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054ae:	4a13      	ldr	r2, [pc, #76]	@ (80054fc <DMA_CalcBaseAndBitshift+0x68>)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d909      	bls.n	80054d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054ca:	f023 0303 	bic.w	r3, r3, #3
 80054ce:	1d1a      	adds	r2, r3, #4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80054d4:	e007      	b.n	80054e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	aaaaaaab 	.word	0xaaaaaaab
 80054fc:	08025094 	.word	0x08025094

08005500 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005510:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11f      	bne.n	800555a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d856      	bhi.n	80055ce <DMA_CheckFifoParam+0xce>
 8005520:	a201      	add	r2, pc, #4	@ (adr r2, 8005528 <DMA_CheckFifoParam+0x28>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	08005539 	.word	0x08005539
 800552c:	0800554b 	.word	0x0800554b
 8005530:	08005539 	.word	0x08005539
 8005534:	080055cf 	.word	0x080055cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d046      	beq.n	80055d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005548:	e043      	b.n	80055d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005552:	d140      	bne.n	80055d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005558:	e03d      	b.n	80055d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005562:	d121      	bne.n	80055a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d837      	bhi.n	80055da <DMA_CheckFifoParam+0xda>
 800556a:	a201      	add	r2, pc, #4	@ (adr r2, 8005570 <DMA_CheckFifoParam+0x70>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005581 	.word	0x08005581
 8005574:	08005587 	.word	0x08005587
 8005578:	08005581 	.word	0x08005581
 800557c:	08005599 	.word	0x08005599
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
      break;
 8005584:	e030      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d025      	beq.n	80055de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005596:	e022      	b.n	80055de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055a0:	d11f      	bne.n	80055e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055a6:	e01c      	b.n	80055e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d903      	bls.n	80055b6 <DMA_CheckFifoParam+0xb6>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d003      	beq.n	80055bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055b4:	e018      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ba:	e015      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00e      	beq.n	80055e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
      break;
 80055cc:	e00b      	b.n	80055e6 <DMA_CheckFifoParam+0xe6>
      break;
 80055ce:	bf00      	nop
 80055d0:	e00a      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
      break;
 80055d2:	bf00      	nop
 80055d4:	e008      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
      break;
 80055d6:	bf00      	nop
 80055d8:	e006      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
      break;
 80055da:	bf00      	nop
 80055dc:	e004      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
      break;
 80055de:	bf00      	nop
 80055e0:	e002      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80055e2:	bf00      	nop
 80055e4:	e000      	b.n	80055e8 <DMA_CheckFifoParam+0xe8>
      break;
 80055e6:	bf00      	nop
    }
  } 
  
  return status; 
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop

080055f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800560a:	4b23      	ldr	r3, [pc, #140]	@ (8005698 <HAL_FLASH_Program+0xa0>)
 800560c:	7e1b      	ldrb	r3, [r3, #24]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_FLASH_Program+0x1e>
 8005612:	2302      	movs	r3, #2
 8005614:	e03b      	b.n	800568e <HAL_FLASH_Program+0x96>
 8005616:	4b20      	ldr	r3, [pc, #128]	@ (8005698 <HAL_FLASH_Program+0xa0>)
 8005618:	2201      	movs	r2, #1
 800561a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800561c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005620:	f000 f87c 	bl	800571c <FLASH_WaitForLastOperation>
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005628:	7dfb      	ldrb	r3, [r7, #23]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d12b      	bne.n	8005686 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005634:	783b      	ldrb	r3, [r7, #0]
 8005636:	4619      	mov	r1, r3
 8005638:	68b8      	ldr	r0, [r7, #8]
 800563a:	f000 f927 	bl	800588c <FLASH_Program_Byte>
 800563e:	e016      	b.n	800566e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005646:	883b      	ldrh	r3, [r7, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	68b8      	ldr	r0, [r7, #8]
 800564c:	f000 f8fa 	bl	8005844 <FLASH_Program_HalfWord>
 8005650:	e00d      	b.n	800566e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d105      	bne.n	8005664 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	4619      	mov	r1, r3
 800565c:	68b8      	ldr	r0, [r7, #8]
 800565e:	f000 f8cf 	bl	8005800 <FLASH_Program_Word>
 8005662:	e004      	b.n	800566e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005668:	68b8      	ldr	r0, [r7, #8]
 800566a:	f000 f897 	bl	800579c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800566e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005672:	f000 f853 	bl	800571c <FLASH_WaitForLastOperation>
 8005676:	4603      	mov	r3, r0
 8005678:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800567a:	4b08      	ldr	r3, [pc, #32]	@ (800569c <HAL_FLASH_Program+0xa4>)
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	4a07      	ldr	r2, [pc, #28]	@ (800569c <HAL_FLASH_Program+0xa4>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005686:	4b04      	ldr	r3, [pc, #16]	@ (8005698 <HAL_FLASH_Program+0xa0>)
 8005688:	2200      	movs	r2, #0
 800568a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800568c:	7dfb      	ldrb	r3, [r7, #23]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20001b0c 	.word	0x20001b0c
 800569c:	40023c00 	.word	0x40023c00

080056a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056aa:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <HAL_FLASH_Unlock+0x38>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	da0b      	bge.n	80056ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80056b2:	4b09      	ldr	r3, [pc, #36]	@ (80056d8 <HAL_FLASH_Unlock+0x38>)
 80056b4:	4a09      	ldr	r2, [pc, #36]	@ (80056dc <HAL_FLASH_Unlock+0x3c>)
 80056b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80056b8:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <HAL_FLASH_Unlock+0x38>)
 80056ba:	4a09      	ldr	r2, [pc, #36]	@ (80056e0 <HAL_FLASH_Unlock+0x40>)
 80056bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056be:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <HAL_FLASH_Unlock+0x38>)
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	da01      	bge.n	80056ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80056ca:	79fb      	ldrb	r3, [r7, #7]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	40023c00 	.word	0x40023c00
 80056dc:	45670123 	.word	0x45670123
 80056e0:	cdef89ab 	.word	0xcdef89ab

080056e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80056e8:	4b05      	ldr	r3, [pc, #20]	@ (8005700 <HAL_FLASH_Lock+0x1c>)
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	4a04      	ldr	r2, [pc, #16]	@ (8005700 <HAL_FLASH_Lock+0x1c>)
 80056ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40023c00 	.word	0x40023c00

08005704 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005708:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <HAL_FLASH_GetError+0x14>)
 800570a:	69db      	ldr	r3, [r3, #28]
}  
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20001b0c 	.word	0x20001b0c

0800571c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005728:	4b1a      	ldr	r3, [pc, #104]	@ (8005794 <FLASH_WaitForLastOperation+0x78>)
 800572a:	2200      	movs	r2, #0
 800572c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800572e:	f7fe fcf3 	bl	8004118 <HAL_GetTick>
 8005732:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005734:	e010      	b.n	8005758 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573c:	d00c      	beq.n	8005758 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <FLASH_WaitForLastOperation+0x38>
 8005744:	f7fe fce8 	bl	8004118 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d201      	bcs.n	8005758 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e019      	b.n	800578c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005758:	4b0f      	ldr	r3, [pc, #60]	@ (8005798 <FLASH_WaitForLastOperation+0x7c>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e8      	bne.n	8005736 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005764:	4b0c      	ldr	r3, [pc, #48]	@ (8005798 <FLASH_WaitForLastOperation+0x7c>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005770:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <FLASH_WaitForLastOperation+0x7c>)
 8005772:	2201      	movs	r2, #1
 8005774:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005776:	4b08      	ldr	r3, [pc, #32]	@ (8005798 <FLASH_WaitForLastOperation+0x7c>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005782:	f000 f8a5 	bl	80058d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
  
}  
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20001b0c 	.word	0x20001b0c
 8005798:	40023c00 	.word	0x40023c00

0800579c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057a8:	4b14      	ldr	r3, [pc, #80]	@ (80057fc <FLASH_Program_DoubleWord+0x60>)
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	4a13      	ldr	r2, [pc, #76]	@ (80057fc <FLASH_Program_DoubleWord+0x60>)
 80057ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80057b4:	4b11      	ldr	r3, [pc, #68]	@ (80057fc <FLASH_Program_DoubleWord+0x60>)
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	4a10      	ldr	r2, [pc, #64]	@ (80057fc <FLASH_Program_DoubleWord+0x60>)
 80057ba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80057be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057c0:	4b0e      	ldr	r3, [pc, #56]	@ (80057fc <FLASH_Program_DoubleWord+0x60>)
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	4a0d      	ldr	r2, [pc, #52]	@ (80057fc <FLASH_Program_DoubleWord+0x60>)
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80057d2:	f3bf 8f6f 	isb	sy
}
 80057d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80057d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	000a      	movs	r2, r1
 80057e6:	2300      	movs	r3, #0
 80057e8:	68f9      	ldr	r1, [r7, #12]
 80057ea:	3104      	adds	r1, #4
 80057ec:	4613      	mov	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40023c00 	.word	0x40023c00

08005800 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <FLASH_Program_Word+0x40>)
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	4a0c      	ldr	r2, [pc, #48]	@ (8005840 <FLASH_Program_Word+0x40>)
 8005810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005814:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005816:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <FLASH_Program_Word+0x40>)
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	4a09      	ldr	r2, [pc, #36]	@ (8005840 <FLASH_Program_Word+0x40>)
 800581c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005820:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <FLASH_Program_Word+0x40>)
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	4a06      	ldr	r2, [pc, #24]	@ (8005840 <FLASH_Program_Word+0x40>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	601a      	str	r2, [r3, #0]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	40023c00 	.word	0x40023c00

08005844 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005850:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <FLASH_Program_HalfWord+0x44>)
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	4a0c      	ldr	r2, [pc, #48]	@ (8005888 <FLASH_Program_HalfWord+0x44>)
 8005856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800585a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800585c:	4b0a      	ldr	r3, [pc, #40]	@ (8005888 <FLASH_Program_HalfWord+0x44>)
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	4a09      	ldr	r2, [pc, #36]	@ (8005888 <FLASH_Program_HalfWord+0x44>)
 8005862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005868:	4b07      	ldr	r3, [pc, #28]	@ (8005888 <FLASH_Program_HalfWord+0x44>)
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	4a06      	ldr	r2, [pc, #24]	@ (8005888 <FLASH_Program_HalfWord+0x44>)
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	887a      	ldrh	r2, [r7, #2]
 8005878:	801a      	strh	r2, [r3, #0]
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40023c00 	.word	0x40023c00

0800588c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005898:	4b0c      	ldr	r3, [pc, #48]	@ (80058cc <FLASH_Program_Byte+0x40>)
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	4a0b      	ldr	r2, [pc, #44]	@ (80058cc <FLASH_Program_Byte+0x40>)
 800589e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80058a4:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <FLASH_Program_Byte+0x40>)
 80058a6:	4a09      	ldr	r2, [pc, #36]	@ (80058cc <FLASH_Program_Byte+0x40>)
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80058ac:	4b07      	ldr	r3, [pc, #28]	@ (80058cc <FLASH_Program_Byte+0x40>)
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	4a06      	ldr	r2, [pc, #24]	@ (80058cc <FLASH_Program_Byte+0x40>)
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	78fa      	ldrb	r2, [r7, #3]
 80058bc:	701a      	strb	r2, [r3, #0]
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40023c00 	.word	0x40023c00

080058d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80058d4:	4b2f      	ldr	r3, [pc, #188]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80058e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	f043 0310 	orr.w	r3, r3, #16
 80058e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 80058ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80058ec:	4b29      	ldr	r3, [pc, #164]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 80058ee:	2210      	movs	r2, #16
 80058f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80058f2:	4b28      	ldr	r3, [pc, #160]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80058fe:	4b26      	ldr	r3, [pc, #152]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f043 0308 	orr.w	r3, r3, #8
 8005906:	4a24      	ldr	r2, [pc, #144]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 8005908:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800590a:	4b22      	ldr	r3, [pc, #136]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 800590c:	2220      	movs	r2, #32
 800590e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005910:	4b20      	ldr	r3, [pc, #128]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800591c:	4b1e      	ldr	r3, [pc, #120]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	f043 0304 	orr.w	r3, r3, #4
 8005924:	4a1c      	ldr	r2, [pc, #112]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 8005926:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005928:	4b1a      	ldr	r3, [pc, #104]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 800592a:	2240      	movs	r2, #64	@ 0x40
 800592c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800592e:	4b19      	ldr	r3, [pc, #100]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800593a:	4b17      	ldr	r3, [pc, #92]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	4a15      	ldr	r2, [pc, #84]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 8005944:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005946:	4b13      	ldr	r3, [pc, #76]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 8005948:	2280      	movs	r2, #128	@ 0x80
 800594a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800594c:	4b11      	ldr	r3, [pc, #68]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005958:	4b0f      	ldr	r3, [pc, #60]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	4a0d      	ldr	r2, [pc, #52]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 8005962:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005964:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 8005966:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800596a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800596c:	4b09      	ldr	r3, [pc, #36]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005978:	4b07      	ldr	r3, [pc, #28]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	f043 0320 	orr.w	r3, r3, #32
 8005980:	4a05      	ldr	r2, [pc, #20]	@ (8005998 <FLASH_SetErrorCode+0xc8>)
 8005982:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005984:	4b03      	ldr	r3, [pc, #12]	@ (8005994 <FLASH_SetErrorCode+0xc4>)
 8005986:	2202      	movs	r2, #2
 8005988:	60da      	str	r2, [r3, #12]
  }
}
 800598a:	bf00      	nop
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40023c00 	.word	0x40023c00
 8005998:	20001b0c 	.word	0x20001b0c

0800599c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059ae:	4b31      	ldr	r3, [pc, #196]	@ (8005a74 <HAL_FLASHEx_Erase+0xd8>)
 80059b0:	7e1b      	ldrb	r3, [r3, #24]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_FLASHEx_Erase+0x1e>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e058      	b.n	8005a6c <HAL_FLASHEx_Erase+0xd0>
 80059ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005a74 <HAL_FLASHEx_Erase+0xd8>)
 80059bc:	2201      	movs	r2, #1
 80059be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059c4:	f7ff feaa 	bl	800571c <FLASH_WaitForLastOperation>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d148      	bne.n	8005a64 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	f04f 32ff 	mov.w	r2, #4294967295
 80059d8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d115      	bne.n	8005a0e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f000 f844 	bl	8005a7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059f8:	f7ff fe90 	bl	800571c <FLASH_WaitForLastOperation>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005a00:	4b1d      	ldr	r3, [pc, #116]	@ (8005a78 <HAL_FLASHEx_Erase+0xdc>)
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	4a1c      	ldr	r2, [pc, #112]	@ (8005a78 <HAL_FLASHEx_Erase+0xdc>)
 8005a06:	f023 0304 	bic.w	r3, r3, #4
 8005a0a:	6113      	str	r3, [r2, #16]
 8005a0c:	e028      	b.n	8005a60 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	e01c      	b.n	8005a50 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	68b8      	ldr	r0, [r7, #8]
 8005a20:	f000 f850 	bl	8005ac4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a24:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a28:	f7ff fe78 	bl	800571c <FLASH_WaitForLastOperation>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005a30:	4b11      	ldr	r3, [pc, #68]	@ (8005a78 <HAL_FLASHEx_Erase+0xdc>)
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	4a10      	ldr	r2, [pc, #64]	@ (8005a78 <HAL_FLASHEx_Erase+0xdc>)
 8005a36:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8005a3a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	601a      	str	r2, [r3, #0]
          break;
 8005a48:	e00a      	b.n	8005a60 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60bb      	str	r3, [r7, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	4413      	add	r3, r2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d3da      	bcc.n	8005a16 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a60:	f000 f878 	bl	8005b54 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a64:	4b03      	ldr	r3, [pc, #12]	@ (8005a74 <HAL_FLASHEx_Erase+0xd8>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	761a      	strb	r2, [r3, #24]

  return status;
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20001b0c 	.word	0x20001b0c
 8005a78:	40023c00 	.word	0x40023c00

08005a7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	4603      	mov	r3, r0
 8005a84:	6039      	str	r1, [r7, #0]
 8005a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a88:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <FLASH_MassErase+0x44>)
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ac0 <FLASH_MassErase+0x44>)
 8005a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005a94:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac0 <FLASH_MassErase+0x44>)
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	4a09      	ldr	r2, [pc, #36]	@ (8005ac0 <FLASH_MassErase+0x44>)
 8005a9a:	f043 0304 	orr.w	r3, r3, #4
 8005a9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005aa0:	4b07      	ldr	r3, [pc, #28]	@ (8005ac0 <FLASH_MassErase+0x44>)
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	4a05      	ldr	r2, [pc, #20]	@ (8005ac0 <FLASH_MassErase+0x44>)
 8005aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab0:	6113      	str	r3, [r2, #16]
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40023c00 	.word	0x40023c00

08005ac4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e010      	b.n	8005b02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d103      	bne.n	8005aee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005ae6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	e009      	b.n	8005b02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d103      	bne.n	8005afc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005af4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e002      	b.n	8005b02 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005afc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005b00:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b02:	4b13      	ldr	r3, [pc, #76]	@ (8005b50 <FLASH_Erase_Sector+0x8c>)
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	4a12      	ldr	r2, [pc, #72]	@ (8005b50 <FLASH_Erase_Sector+0x8c>)
 8005b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005b0e:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <FLASH_Erase_Sector+0x8c>)
 8005b10:	691a      	ldr	r2, [r3, #16]
 8005b12:	490f      	ldr	r1, [pc, #60]	@ (8005b50 <FLASH_Erase_Sector+0x8c>)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b50 <FLASH_Erase_Sector+0x8c>)
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b50 <FLASH_Erase_Sector+0x8c>)
 8005b20:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005b26:	4b0a      	ldr	r3, [pc, #40]	@ (8005b50 <FLASH_Erase_Sector+0x8c>)
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	4a07      	ldr	r2, [pc, #28]	@ (8005b50 <FLASH_Erase_Sector+0x8c>)
 8005b32:	f043 0302 	orr.w	r3, r3, #2
 8005b36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005b38:	4b05      	ldr	r3, [pc, #20]	@ (8005b50 <FLASH_Erase_Sector+0x8c>)
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	4a04      	ldr	r2, [pc, #16]	@ (8005b50 <FLASH_Erase_Sector+0x8c>)
 8005b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b42:	6113      	str	r3, [r2, #16]
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	40023c00 	.word	0x40023c00

08005b54 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005b58:	4b20      	ldr	r3, [pc, #128]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d017      	beq.n	8005b94 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b64:	4b1d      	ldr	r3, [pc, #116]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1c      	ldr	r2, [pc, #112]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005b6a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b70:	4b1a      	ldr	r3, [pc, #104]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a19      	ldr	r2, [pc, #100]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005b76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	4b17      	ldr	r3, [pc, #92]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a16      	ldr	r2, [pc, #88]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005b82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b88:	4b14      	ldr	r3, [pc, #80]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a13      	ldr	r2, [pc, #76]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b92:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005b94:	4b11      	ldr	r3, [pc, #68]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d017      	beq.n	8005bd0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005ba6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005baa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005bac:	4b0b      	ldr	r3, [pc, #44]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005bb2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	4b08      	ldr	r3, [pc, #32]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a07      	ldr	r2, [pc, #28]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005bbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bc2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bc4:	4b05      	ldr	r3, [pc, #20]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a04      	ldr	r2, [pc, #16]	@ (8005bdc <FLASH_FlushCaches+0x88>)
 8005bca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bce:	6013      	str	r3, [r2, #0]
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40023c00 	.word	0x40023c00

08005be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b089      	sub	sp, #36	@ 0x24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	e159      	b.n	8005eb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	f040 8148 	bne.w	8005eaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d005      	beq.n	8005c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d130      	bne.n	8005c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	2203      	movs	r2, #3
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	4013      	ands	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c68:	2201      	movs	r2, #1
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4013      	ands	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	091b      	lsrs	r3, r3, #4
 8005c7e:	f003 0201 	and.w	r2, r3, #1
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d017      	beq.n	8005cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	2203      	movs	r2, #3
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d123      	bne.n	8005d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	08da      	lsrs	r2, r3, #3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3208      	adds	r2, #8
 8005ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	220f      	movs	r2, #15
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	08da      	lsrs	r2, r3, #3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3208      	adds	r2, #8
 8005d1e:	69b9      	ldr	r1, [r7, #24]
 8005d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	2203      	movs	r2, #3
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 0203 	and.w	r2, r3, #3
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80a2 	beq.w	8005eaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	4b57      	ldr	r3, [pc, #348]	@ (8005ec8 <HAL_GPIO_Init+0x2e8>)
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6e:	4a56      	ldr	r2, [pc, #344]	@ (8005ec8 <HAL_GPIO_Init+0x2e8>)
 8005d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d76:	4b54      	ldr	r3, [pc, #336]	@ (8005ec8 <HAL_GPIO_Init+0x2e8>)
 8005d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d82:	4a52      	ldr	r2, [pc, #328]	@ (8005ecc <HAL_GPIO_Init+0x2ec>)
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	089b      	lsrs	r3, r3, #2
 8005d88:	3302      	adds	r3, #2
 8005d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	220f      	movs	r2, #15
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4013      	ands	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a49      	ldr	r2, [pc, #292]	@ (8005ed0 <HAL_GPIO_Init+0x2f0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d019      	beq.n	8005de2 <HAL_GPIO_Init+0x202>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a48      	ldr	r2, [pc, #288]	@ (8005ed4 <HAL_GPIO_Init+0x2f4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_GPIO_Init+0x1fe>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a47      	ldr	r2, [pc, #284]	@ (8005ed8 <HAL_GPIO_Init+0x2f8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00d      	beq.n	8005dda <HAL_GPIO_Init+0x1fa>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a46      	ldr	r2, [pc, #280]	@ (8005edc <HAL_GPIO_Init+0x2fc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d007      	beq.n	8005dd6 <HAL_GPIO_Init+0x1f6>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a45      	ldr	r2, [pc, #276]	@ (8005ee0 <HAL_GPIO_Init+0x300>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d101      	bne.n	8005dd2 <HAL_GPIO_Init+0x1f2>
 8005dce:	2304      	movs	r3, #4
 8005dd0:	e008      	b.n	8005de4 <HAL_GPIO_Init+0x204>
 8005dd2:	2307      	movs	r3, #7
 8005dd4:	e006      	b.n	8005de4 <HAL_GPIO_Init+0x204>
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e004      	b.n	8005de4 <HAL_GPIO_Init+0x204>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e002      	b.n	8005de4 <HAL_GPIO_Init+0x204>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <HAL_GPIO_Init+0x204>
 8005de2:	2300      	movs	r3, #0
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	f002 0203 	and.w	r2, r2, #3
 8005dea:	0092      	lsls	r2, r2, #2
 8005dec:	4093      	lsls	r3, r2
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005df4:	4935      	ldr	r1, [pc, #212]	@ (8005ecc <HAL_GPIO_Init+0x2ec>)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	089b      	lsrs	r3, r3, #2
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e02:	4b38      	ldr	r3, [pc, #224]	@ (8005ee4 <HAL_GPIO_Init+0x304>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e26:	4a2f      	ldr	r2, [pc, #188]	@ (8005ee4 <HAL_GPIO_Init+0x304>)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ee4 <HAL_GPIO_Init+0x304>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e50:	4a24      	ldr	r2, [pc, #144]	@ (8005ee4 <HAL_GPIO_Init+0x304>)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e56:	4b23      	ldr	r3, [pc, #140]	@ (8005ee4 <HAL_GPIO_Init+0x304>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee4 <HAL_GPIO_Init+0x304>)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e80:	4b18      	ldr	r3, [pc, #96]	@ (8005ee4 <HAL_GPIO_Init+0x304>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8005ee4 <HAL_GPIO_Init+0x304>)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3301      	adds	r3, #1
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b0f      	cmp	r3, #15
 8005eb4:	f67f aea2 	bls.w	8005bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	3724      	adds	r7, #36	@ 0x24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	40013800 	.word	0x40013800
 8005ed0:	40020000 	.word	0x40020000
 8005ed4:	40020400 	.word	0x40020400
 8005ed8:	40020800 	.word	0x40020800
 8005edc:	40020c00 	.word	0x40020c00
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40013c00 	.word	0x40013c00

08005ee8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e0bb      	b.n	800607c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f04:	2201      	movs	r2, #1
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4013      	ands	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	f040 80ab 	bne.w	8006076 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f20:	4a5c      	ldr	r2, [pc, #368]	@ (8006094 <HAL_GPIO_DeInit+0x1ac>)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	089b      	lsrs	r3, r3, #2
 8005f26:	3302      	adds	r3, #2
 8005f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f2c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	220f      	movs	r2, #15
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a54      	ldr	r2, [pc, #336]	@ (8006098 <HAL_GPIO_DeInit+0x1b0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d019      	beq.n	8005f7e <HAL_GPIO_DeInit+0x96>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a53      	ldr	r2, [pc, #332]	@ (800609c <HAL_GPIO_DeInit+0x1b4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <HAL_GPIO_DeInit+0x92>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a52      	ldr	r2, [pc, #328]	@ (80060a0 <HAL_GPIO_DeInit+0x1b8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00d      	beq.n	8005f76 <HAL_GPIO_DeInit+0x8e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a51      	ldr	r2, [pc, #324]	@ (80060a4 <HAL_GPIO_DeInit+0x1bc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d007      	beq.n	8005f72 <HAL_GPIO_DeInit+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a50      	ldr	r2, [pc, #320]	@ (80060a8 <HAL_GPIO_DeInit+0x1c0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d101      	bne.n	8005f6e <HAL_GPIO_DeInit+0x86>
 8005f6a:	2304      	movs	r3, #4
 8005f6c:	e008      	b.n	8005f80 <HAL_GPIO_DeInit+0x98>
 8005f6e:	2307      	movs	r3, #7
 8005f70:	e006      	b.n	8005f80 <HAL_GPIO_DeInit+0x98>
 8005f72:	2303      	movs	r3, #3
 8005f74:	e004      	b.n	8005f80 <HAL_GPIO_DeInit+0x98>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e002      	b.n	8005f80 <HAL_GPIO_DeInit+0x98>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <HAL_GPIO_DeInit+0x98>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	f002 0203 	and.w	r2, r2, #3
 8005f86:	0092      	lsls	r2, r2, #2
 8005f88:	4093      	lsls	r3, r2
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d132      	bne.n	8005ff6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005f90:	4b46      	ldr	r3, [pc, #280]	@ (80060ac <HAL_GPIO_DeInit+0x1c4>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	43db      	mvns	r3, r3
 8005f98:	4944      	ldr	r1, [pc, #272]	@ (80060ac <HAL_GPIO_DeInit+0x1c4>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005f9e:	4b43      	ldr	r3, [pc, #268]	@ (80060ac <HAL_GPIO_DeInit+0x1c4>)
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	4941      	ldr	r1, [pc, #260]	@ (80060ac <HAL_GPIO_DeInit+0x1c4>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005fac:	4b3f      	ldr	r3, [pc, #252]	@ (80060ac <HAL_GPIO_DeInit+0x1c4>)
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	493d      	ldr	r1, [pc, #244]	@ (80060ac <HAL_GPIO_DeInit+0x1c4>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005fba:	4b3c      	ldr	r3, [pc, #240]	@ (80060ac <HAL_GPIO_DeInit+0x1c4>)
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	493a      	ldr	r1, [pc, #232]	@ (80060ac <HAL_GPIO_DeInit+0x1c4>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	220f      	movs	r2, #15
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8006094 <HAL_GPIO_DeInit+0x1ac>)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	3302      	adds	r3, #2
 8005fe0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	43da      	mvns	r2, r3
 8005fe8:	482a      	ldr	r0, [pc, #168]	@ (8006094 <HAL_GPIO_DeInit+0x1ac>)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	089b      	lsrs	r3, r3, #2
 8005fee:	400a      	ands	r2, r1
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	2103      	movs	r1, #3
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	401a      	ands	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	08da      	lsrs	r2, r3, #3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3208      	adds	r2, #8
 8006014:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	220f      	movs	r2, #15
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	08d2      	lsrs	r2, r2, #3
 800602c:	4019      	ands	r1, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3208      	adds	r2, #8
 8006032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	2103      	movs	r1, #3
 8006040:	fa01 f303 	lsl.w	r3, r1, r3
 8006044:	43db      	mvns	r3, r3
 8006046:	401a      	ands	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	2101      	movs	r1, #1
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	fa01 f303 	lsl.w	r3, r1, r3
 8006058:	43db      	mvns	r3, r3
 800605a:	401a      	ands	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	2103      	movs	r1, #3
 800606a:	fa01 f303 	lsl.w	r3, r1, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	401a      	ands	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3301      	adds	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	f67f af40 	bls.w	8005f04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40013800 	.word	0x40013800
 8006098:	40020000 	.word	0x40020000
 800609c:	40020400 	.word	0x40020400
 80060a0:	40020800 	.word	0x40020800
 80060a4:	40020c00 	.word	0x40020c00
 80060a8:	40021000 	.word	0x40021000
 80060ac:	40013c00 	.word	0x40013c00

080060b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	887b      	ldrh	r3, [r7, #2]
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
 80060cc:	e001      	b.n	80060d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
 80060ec:	4613      	mov	r3, r2
 80060ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060f0:	787b      	ldrb	r3, [r7, #1]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060f6:	887a      	ldrh	r2, [r7, #2]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060fc:	e003      	b.n	8006106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060fe:	887b      	ldrh	r3, [r7, #2]
 8006100:	041a      	lsls	r2, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	619a      	str	r2, [r3, #24]
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800611e:	4b08      	ldr	r3, [pc, #32]	@ (8006140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	4013      	ands	r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d006      	beq.n	8006138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800612a:	4a05      	ldr	r2, [pc, #20]	@ (8006140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	4618      	mov	r0, r3
 8006134:	f7fd fa3e 	bl	80035b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40013c00 	.word	0x40013c00

08006144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e12b      	b.n	80063ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fd fb1c 	bl	80037a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2224      	movs	r2, #36	@ 0x24
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0201 	bic.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061a8:	f003 f8f2 	bl	8009390 <HAL_RCC_GetPCLK1Freq>
 80061ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4a81      	ldr	r2, [pc, #516]	@ (80063b8 <HAL_I2C_Init+0x274>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d807      	bhi.n	80061c8 <HAL_I2C_Init+0x84>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a80      	ldr	r2, [pc, #512]	@ (80063bc <HAL_I2C_Init+0x278>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	bf94      	ite	ls
 80061c0:	2301      	movls	r3, #1
 80061c2:	2300      	movhi	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e006      	b.n	80061d6 <HAL_I2C_Init+0x92>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4a7d      	ldr	r2, [pc, #500]	@ (80063c0 <HAL_I2C_Init+0x27c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	bf94      	ite	ls
 80061d0:	2301      	movls	r3, #1
 80061d2:	2300      	movhi	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e0e7      	b.n	80063ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a78      	ldr	r2, [pc, #480]	@ (80063c4 <HAL_I2C_Init+0x280>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	0c9b      	lsrs	r3, r3, #18
 80061e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4a6a      	ldr	r2, [pc, #424]	@ (80063b8 <HAL_I2C_Init+0x274>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d802      	bhi.n	8006218 <HAL_I2C_Init+0xd4>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	3301      	adds	r3, #1
 8006216:	e009      	b.n	800622c <HAL_I2C_Init+0xe8>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	4a69      	ldr	r2, [pc, #420]	@ (80063c8 <HAL_I2C_Init+0x284>)
 8006224:	fba2 2303 	umull	r2, r3, r2, r3
 8006228:	099b      	lsrs	r3, r3, #6
 800622a:	3301      	adds	r3, #1
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	430b      	orrs	r3, r1
 8006232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800623e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	495c      	ldr	r1, [pc, #368]	@ (80063b8 <HAL_I2C_Init+0x274>)
 8006248:	428b      	cmp	r3, r1
 800624a:	d819      	bhi.n	8006280 <HAL_I2C_Init+0x13c>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	1e59      	subs	r1, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	fbb1 f3f3 	udiv	r3, r1, r3
 800625a:	1c59      	adds	r1, r3, #1
 800625c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006260:	400b      	ands	r3, r1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_I2C_Init+0x138>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1e59      	subs	r1, r3, #1
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	fbb1 f3f3 	udiv	r3, r1, r3
 8006274:	3301      	adds	r3, #1
 8006276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627a:	e051      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 800627c:	2304      	movs	r3, #4
 800627e:	e04f      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d111      	bne.n	80062ac <HAL_I2C_Init+0x168>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	1e58      	subs	r0, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6859      	ldr	r1, [r3, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	440b      	add	r3, r1
 8006296:	fbb0 f3f3 	udiv	r3, r0, r3
 800629a:	3301      	adds	r3, #1
 800629c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e012      	b.n	80062d2 <HAL_I2C_Init+0x18e>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1e58      	subs	r0, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6859      	ldr	r1, [r3, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	0099      	lsls	r1, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	fbb0 f3f3 	udiv	r3, r0, r3
 80062c2:	3301      	adds	r3, #1
 80062c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf0c      	ite	eq
 80062cc:	2301      	moveq	r3, #1
 80062ce:	2300      	movne	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Init+0x196>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e022      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10e      	bne.n	8006300 <HAL_I2C_Init+0x1bc>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1e58      	subs	r0, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6859      	ldr	r1, [r3, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	440b      	add	r3, r1
 80062f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f4:	3301      	adds	r3, #1
 80062f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062fe:	e00f      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1e58      	subs	r0, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6859      	ldr	r1, [r3, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	0099      	lsls	r1, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	fbb0 f3f3 	udiv	r3, r0, r3
 8006316:	3301      	adds	r3, #1
 8006318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800631c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	6809      	ldr	r1, [r1, #0]
 8006324:	4313      	orrs	r3, r2
 8006326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800634e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6911      	ldr	r1, [r2, #16]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68d2      	ldr	r2, [r2, #12]
 800635a:	4311      	orrs	r1, r2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	430b      	orrs	r3, r1
 8006362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	000186a0 	.word	0x000186a0
 80063bc:	001e847f 	.word	0x001e847f
 80063c0:	003d08ff 	.word	0x003d08ff
 80063c4:	431bde83 	.word	0x431bde83
 80063c8:	10624dd3 	.word	0x10624dd3

080063cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e021      	b.n	8006422 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2224      	movs	r2, #36	@ 0x24
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0201 	bic.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fd fa1e 	bl	8003838 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	607a      	str	r2, [r7, #4]
 8006436:	461a      	mov	r2, r3
 8006438:	460b      	mov	r3, r1
 800643a:	817b      	strh	r3, [r7, #10]
 800643c:	4613      	mov	r3, r2
 800643e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006440:	f7fd fe6a 	bl	8004118 <HAL_GetTick>
 8006444:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b20      	cmp	r3, #32
 8006450:	f040 80e0 	bne.w	8006614 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	2319      	movs	r3, #25
 800645a:	2201      	movs	r2, #1
 800645c:	4970      	ldr	r1, [pc, #448]	@ (8006620 <HAL_I2C_Master_Transmit+0x1f4>)
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 fd92 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800646a:	2302      	movs	r3, #2
 800646c:	e0d3      	b.n	8006616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_I2C_Master_Transmit+0x50>
 8006478:	2302      	movs	r3, #2
 800647a:	e0cc      	b.n	8006616 <HAL_I2C_Master_Transmit+0x1ea>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b01      	cmp	r3, #1
 8006490:	d007      	beq.n	80064a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0201 	orr.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2221      	movs	r2, #33	@ 0x21
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2210      	movs	r2, #16
 80064be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	893a      	ldrh	r2, [r7, #8]
 80064d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a50      	ldr	r2, [pc, #320]	@ (8006624 <HAL_I2C_Master_Transmit+0x1f8>)
 80064e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064e4:	8979      	ldrh	r1, [r7, #10]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	6a3a      	ldr	r2, [r7, #32]
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 fbfc 	bl	8006ce8 <I2C_MasterRequestWrite>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e08d      	b.n	8006616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fa:	2300      	movs	r3, #0
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006510:	e066      	b.n	80065e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	6a39      	ldr	r1, [r7, #32]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 fe50 	bl	80071bc <I2C_WaitOnTXEFlagUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00d      	beq.n	800653e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	2b04      	cmp	r3, #4
 8006528:	d107      	bne.n	800653a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006538:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e06b      	b.n	8006616 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b04      	cmp	r3, #4
 800657a:	d11b      	bne.n	80065b4 <HAL_I2C_Master_Transmit+0x188>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006580:	2b00      	cmp	r3, #0
 8006582:	d017      	beq.n	80065b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	6a39      	ldr	r1, [r7, #32]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fe47 	bl	800724c <I2C_WaitOnBTFFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00d      	beq.n	80065e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d107      	bne.n	80065dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e01a      	b.n	8006616 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d194      	bne.n	8006512 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006614:	2302      	movs	r3, #2
  }
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	00100002 	.word	0x00100002
 8006624:	ffff0000 	.word	0xffff0000

08006628 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08c      	sub	sp, #48	@ 0x30
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	461a      	mov	r2, r3
 8006634:	460b      	mov	r3, r1
 8006636:	817b      	strh	r3, [r7, #10]
 8006638:	4613      	mov	r3, r2
 800663a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800663c:	f7fd fd6c 	bl	8004118 <HAL_GetTick>
 8006640:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b20      	cmp	r3, #32
 800664c:	f040 8217 	bne.w	8006a7e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	2319      	movs	r3, #25
 8006656:	2201      	movs	r2, #1
 8006658:	497c      	ldr	r1, [pc, #496]	@ (800684c <HAL_I2C_Master_Receive+0x224>)
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fc94 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006666:	2302      	movs	r3, #2
 8006668:	e20a      	b.n	8006a80 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_I2C_Master_Receive+0x50>
 8006674:	2302      	movs	r3, #2
 8006676:	e203      	b.n	8006a80 <HAL_I2C_Master_Receive+0x458>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b01      	cmp	r3, #1
 800668c:	d007      	beq.n	800669e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0201 	orr.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2222      	movs	r2, #34	@ 0x22
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2210      	movs	r2, #16
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	893a      	ldrh	r2, [r7, #8]
 80066ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4a5c      	ldr	r2, [pc, #368]	@ (8006850 <HAL_I2C_Master_Receive+0x228>)
 80066de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80066e0:	8979      	ldrh	r1, [r7, #10]
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 fb80 	bl	8006dec <I2C_MasterRequestRead>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e1c4      	b.n	8006a80 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d113      	bne.n	8006726 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fe:	2300      	movs	r3, #0
 8006700:	623b      	str	r3, [r7, #32]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	623b      	str	r3, [r7, #32]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	623b      	str	r3, [r7, #32]
 8006712:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e198      	b.n	8006a58 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800672a:	2b01      	cmp	r3, #1
 800672c:	d11b      	bne.n	8006766 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800673c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	61fb      	str	r3, [r7, #28]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e178      	b.n	8006a58 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800676a:	2b02      	cmp	r3, #2
 800676c:	d11b      	bne.n	80067a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800677c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800678c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800678e:	2300      	movs	r3, #0
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	e158      	b.n	8006a58 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80067cc:	e144      	b.n	8006a58 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	f200 80f1 	bhi.w	80069ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d123      	bne.n	8006828 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fd79 	bl	80072dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e145      	b.n	8006a80 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800681c:	b29b      	uxth	r3, r3
 800681e:	3b01      	subs	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006826:	e117      	b.n	8006a58 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682c:	2b02      	cmp	r3, #2
 800682e:	d14e      	bne.n	80068ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006836:	2200      	movs	r2, #0
 8006838:	4906      	ldr	r1, [pc, #24]	@ (8006854 <HAL_I2C_Master_Receive+0x22c>)
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 fba4 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d008      	beq.n	8006858 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e11a      	b.n	8006a80 <HAL_I2C_Master_Receive+0x458>
 800684a:	bf00      	nop
 800684c:	00100002 	.word	0x00100002
 8006850:	ffff0000 	.word	0xffff0000
 8006854:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068cc:	e0c4      	b.n	8006a58 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	2200      	movs	r2, #0
 80068d6:	496c      	ldr	r1, [pc, #432]	@ (8006a88 <HAL_I2C_Master_Receive+0x460>)
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 fb55 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0cb      	b.n	8006a80 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	2200      	movs	r2, #0
 8006932:	4955      	ldr	r1, [pc, #340]	@ (8006a88 <HAL_I2C_Master_Receive+0x460>)
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fb27 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e09d      	b.n	8006a80 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691a      	ldr	r2, [r3, #16]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80069b8:	e04e      	b.n	8006a58 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fc8c 	bl	80072dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e058      	b.n	8006a80 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d124      	bne.n	8006a58 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d107      	bne.n	8006a26 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a24:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f47f aeb6 	bne.w	80067ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e000      	b.n	8006a80 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006a7e:	2302      	movs	r3, #2
  }
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3728      	adds	r7, #40	@ 0x28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	00010004 	.word	0x00010004

08006a8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	@ 0x28
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	607a      	str	r2, [r7, #4]
 8006a96:	603b      	str	r3, [r7, #0]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006a9c:	f7fd fb3c 	bl	8004118 <HAL_GetTick>
 8006aa0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	f040 8111 	bne.w	8006cd6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	2319      	movs	r3, #25
 8006aba:	2201      	movs	r2, #1
 8006abc:	4988      	ldr	r1, [pc, #544]	@ (8006ce0 <HAL_I2C_IsDeviceReady+0x254>)
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 fa62 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
 8006acc:	e104      	b.n	8006cd8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_I2C_IsDeviceReady+0x50>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e0fd      	b.n	8006cd8 <HAL_I2C_IsDeviceReady+0x24c>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d007      	beq.n	8006b02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0201 	orr.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2224      	movs	r2, #36	@ 0x24
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a70      	ldr	r2, [pc, #448]	@ (8006ce4 <HAL_I2C_IsDeviceReady+0x258>)
 8006b24:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fa20 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00d      	beq.n	8006b6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b5c:	d103      	bne.n	8006b66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b64:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e0b6      	b.n	8006cd8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b6a:	897b      	ldrh	r3, [r7, #10]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006b7a:	f7fd facd 	bl	8004118 <HAL_GetTick>
 8006b7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	bf0c      	ite	eq
 8006b8e:	2301      	moveq	r3, #1
 8006b90:	2300      	movne	r3, #0
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba4:	bf0c      	ite	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	2300      	movne	r3, #0
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006bae:	e025      	b.n	8006bfc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006bb0:	f7fd fab2 	bl	8004118 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d302      	bcc.n	8006bc6 <HAL_I2C_IsDeviceReady+0x13a>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	22a0      	movs	r2, #160	@ 0xa0
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	bf0c      	ite	eq
 8006bdc:	2301      	moveq	r3, #1
 8006bde:	2300      	movne	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf2:	bf0c      	ite	eq
 8006bf4:	2301      	moveq	r3, #1
 8006bf6:	2300      	movne	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2ba0      	cmp	r3, #160	@ 0xa0
 8006c06:	d005      	beq.n	8006c14 <HAL_I2C_IsDeviceReady+0x188>
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <HAL_I2C_IsDeviceReady+0x188>
 8006c0e:	7dbb      	ldrb	r3, [r7, #22]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0cd      	beq.n	8006bb0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d129      	bne.n	8006c7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	2319      	movs	r3, #25
 8006c56:	2201      	movs	r2, #1
 8006c58:	4921      	ldr	r1, [pc, #132]	@ (8006ce0 <HAL_I2C_IsDeviceReady+0x254>)
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 f994 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e036      	b.n	8006cd8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e02c      	b.n	8006cd8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	2319      	movs	r3, #25
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	490f      	ldr	r1, [pc, #60]	@ (8006ce0 <HAL_I2C_IsDeviceReady+0x254>)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f970 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e012      	b.n	8006cd8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	f4ff af32 	bcc.w	8006b26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006cd6:	2302      	movs	r3, #2
  }
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3720      	adds	r7, #32
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	00100002 	.word	0x00100002
 8006ce4:	ffff0000 	.word	0xffff0000

08006ce8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	607a      	str	r2, [r7, #4]
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d006      	beq.n	8006d12 <I2C_MasterRequestWrite+0x2a>
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d003      	beq.n	8006d12 <I2C_MasterRequestWrite+0x2a>
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d10:	d108      	bne.n	8006d24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e00b      	b.n	8006d3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d28:	2b12      	cmp	r3, #18
 8006d2a:	d107      	bne.n	8006d3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f91d 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d62:	d103      	bne.n	8006d6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e035      	b.n	8006ddc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d78:	d108      	bne.n	8006d8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d7a:	897b      	ldrh	r3, [r7, #10]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006d88:	611a      	str	r2, [r3, #16]
 8006d8a:	e01b      	b.n	8006dc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d8c:	897b      	ldrh	r3, [r7, #10]
 8006d8e:	11db      	asrs	r3, r3, #7
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f003 0306 	and.w	r3, r3, #6
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f063 030f 	orn	r3, r3, #15
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	490e      	ldr	r1, [pc, #56]	@ (8006de4 <I2C_MasterRequestWrite+0xfc>)
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f966 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e010      	b.n	8006ddc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dba:	897b      	ldrh	r3, [r7, #10]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	4907      	ldr	r1, [pc, #28]	@ (8006de8 <I2C_MasterRequestWrite+0x100>)
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f956 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	00010008 	.word	0x00010008
 8006de8:	00010002 	.word	0x00010002

08006dec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	607a      	str	r2, [r7, #4]
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d006      	beq.n	8006e26 <I2C_MasterRequestRead+0x3a>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d003      	beq.n	8006e26 <I2C_MasterRequestRead+0x3a>
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e24:	d108      	bne.n	8006e38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	e00b      	b.n	8006e50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3c:	2b11      	cmp	r3, #17
 8006e3e:	d107      	bne.n	8006e50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f893 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00d      	beq.n	8006e84 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e76:	d103      	bne.n	8006e80 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e079      	b.n	8006f78 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e8c:	d108      	bne.n	8006ea0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e8e:	897b      	ldrh	r3, [r7, #10]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	611a      	str	r2, [r3, #16]
 8006e9e:	e05f      	b.n	8006f60 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ea0:	897b      	ldrh	r3, [r7, #10]
 8006ea2:	11db      	asrs	r3, r3, #7
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 0306 	and.w	r3, r3, #6
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f063 030f 	orn	r3, r3, #15
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	4930      	ldr	r1, [pc, #192]	@ (8006f80 <I2C_MasterRequestRead+0x194>)
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f8dc 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e054      	b.n	8006f78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ece:	897b      	ldrh	r3, [r7, #10]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4929      	ldr	r1, [pc, #164]	@ (8006f84 <I2C_MasterRequestRead+0x198>)
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f8cc 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e044      	b.n	8006f78 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f12:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f831 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00d      	beq.n	8006f48 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f3a:	d103      	bne.n	8006f44 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f42:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e017      	b.n	8006f78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f48:	897b      	ldrh	r3, [r7, #10]
 8006f4a:	11db      	asrs	r3, r3, #7
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 0306 	and.w	r3, r3, #6
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f063 030e 	orn	r3, r3, #14
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4907      	ldr	r1, [pc, #28]	@ (8006f84 <I2C_MasterRequestRead+0x198>)
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f888 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	00010008 	.word	0x00010008
 8006f84:	00010002 	.word	0x00010002

08006f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f98:	e048      	b.n	800702c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d044      	beq.n	800702c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa2:	f7fd f8b9 	bl	8004118 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d302      	bcc.n	8006fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d139      	bne.n	800702c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	0c1b      	lsrs	r3, r3, #16
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d10d      	bne.n	8006fde <I2C_WaitOnFlagUntilTimeout+0x56>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	43da      	mvns	r2, r3
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	bf0c      	ite	eq
 8006fd4:	2301      	moveq	r3, #1
 8006fd6:	2300      	movne	r3, #0
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	e00c      	b.n	8006ff8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	43da      	mvns	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bf0c      	ite	eq
 8006ff0:	2301      	moveq	r3, #1
 8006ff2:	2300      	movne	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d116      	bne.n	800702c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007018:	f043 0220 	orr.w	r2, r3, #32
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e023      	b.n	8007074 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	0c1b      	lsrs	r3, r3, #16
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b01      	cmp	r3, #1
 8007034:	d10d      	bne.n	8007052 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	43da      	mvns	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4013      	ands	r3, r2
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	bf0c      	ite	eq
 8007048:	2301      	moveq	r3, #1
 800704a:	2300      	movne	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	e00c      	b.n	800706c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	43da      	mvns	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	4013      	ands	r3, r2
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	bf0c      	ite	eq
 8007064:	2301      	moveq	r3, #1
 8007066:	2300      	movne	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	429a      	cmp	r2, r3
 8007070:	d093      	beq.n	8006f9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800708a:	e071      	b.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800709a:	d123      	bne.n	80070e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80070b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	f043 0204 	orr.w	r2, r3, #4
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e067      	b.n	80071b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	d041      	beq.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ec:	f7fd f814 	bl	8004118 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d302      	bcc.n	8007102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d136      	bne.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	d10c      	bne.n	8007126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	43da      	mvns	r2, r3
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4013      	ands	r3, r2
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	bf14      	ite	ne
 800711e:	2301      	movne	r3, #1
 8007120:	2300      	moveq	r3, #0
 8007122:	b2db      	uxtb	r3, r3
 8007124:	e00b      	b.n	800713e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	43da      	mvns	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4013      	ands	r3, r2
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	bf14      	ite	ne
 8007138:	2301      	movne	r3, #1
 800713a:	2300      	moveq	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d016      	beq.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2220      	movs	r2, #32
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715c:	f043 0220 	orr.w	r2, r3, #32
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e021      	b.n	80071b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	0c1b      	lsrs	r3, r3, #16
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b01      	cmp	r3, #1
 8007178:	d10c      	bne.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	43da      	mvns	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	4013      	ands	r3, r2
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	bf14      	ite	ne
 800718c:	2301      	movne	r3, #1
 800718e:	2300      	moveq	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	e00b      	b.n	80071ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	43da      	mvns	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4013      	ands	r3, r2
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	bf14      	ite	ne
 80071a6:	2301      	movne	r3, #1
 80071a8:	2300      	moveq	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f47f af6d 	bne.w	800708c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071c8:	e034      	b.n	8007234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f8e3 	bl	8007396 <I2C_IsAcknowledgeFailed>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e034      	b.n	8007244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e0:	d028      	beq.n	8007234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071e2:	f7fc ff99 	bl	8004118 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d302      	bcc.n	80071f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d11d      	bne.n	8007234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007202:	2b80      	cmp	r3, #128	@ 0x80
 8007204:	d016      	beq.n	8007234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007220:	f043 0220 	orr.w	r2, r3, #32
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e007      	b.n	8007244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800723e:	2b80      	cmp	r3, #128	@ 0x80
 8007240:	d1c3      	bne.n	80071ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007258:	e034      	b.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f89b 	bl	8007396 <I2C_IsAcknowledgeFailed>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e034      	b.n	80072d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d028      	beq.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007272:	f7fc ff51 	bl	8004118 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	d302      	bcc.n	8007288 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11d      	bne.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b04      	cmp	r3, #4
 8007294:	d016      	beq.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b0:	f043 0220 	orr.w	r2, r3, #32
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e007      	b.n	80072d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d1c3      	bne.n	800725a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072e8:	e049      	b.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b10      	cmp	r3, #16
 80072f6:	d119      	bne.n	800732c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0210 	mvn.w	r2, #16
 8007300:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e030      	b.n	800738e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732c:	f7fc fef4 	bl	8004118 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	429a      	cmp	r2, r3
 800733a:	d302      	bcc.n	8007342 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d11d      	bne.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800734c:	2b40      	cmp	r3, #64	@ 0x40
 800734e:	d016      	beq.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736a:	f043 0220 	orr.w	r2, r3, #32
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e007      	b.n	800738e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007388:	2b40      	cmp	r3, #64	@ 0x40
 800738a:	d1ae      	bne.n	80072ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073ac:	d11b      	bne.n	80073e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	f043 0204 	orr.w	r2, r3, #4
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e034      	b.n	8007470 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800740e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007418:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	6852      	ldr	r2, [r2, #4]
 8007422:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	6892      	ldr	r2, [r2, #8]
 800742c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800742e:	f7fc fe73 	bl	8004118 <HAL_GetTick>
 8007432:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007434:	e00f      	b.n	8007456 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007436:	f7fc fe6f 	bl	8004118 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b31      	cmp	r3, #49	@ 0x31
 8007442:	d908      	bls.n	8007456 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e00c      	b.n	8007470 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f003 0303 	and.w	r3, r3, #3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e8      	bne.n	8007436 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800746c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007488:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af02      	add	r7, sp, #8
 800749e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e101      	b.n	80076ae <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f015 fe6b 	bl	801d1a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2203      	movs	r2, #3
 80074ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074d8:	d102      	bne.n	80074e0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f006 fd4e 	bl	800df86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	7c1a      	ldrb	r2, [r3, #16]
 80074f2:	f88d 2000 	strb.w	r2, [sp]
 80074f6:	3304      	adds	r3, #4
 80074f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074fa:	f006 fc2d 	bl	800dd58 <USB_CoreInit>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e0ce      	b.n	80076ae <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2100      	movs	r1, #0
 8007516:	4618      	mov	r0, r3
 8007518:	f006 fd46 	bl	800dfa8 <USB_SetCurrentMode>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2202      	movs	r2, #2
 8007526:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e0bf      	b.n	80076ae <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800752e:	2300      	movs	r3, #0
 8007530:	73fb      	strb	r3, [r7, #15]
 8007532:	e04a      	b.n	80075ca <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007534:	7bfa      	ldrb	r2, [r7, #15]
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	4613      	mov	r3, r2
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	440b      	add	r3, r1
 8007542:	3315      	adds	r3, #21
 8007544:	2201      	movs	r2, #1
 8007546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007548:	7bfa      	ldrb	r2, [r7, #15]
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	4613      	mov	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	440b      	add	r3, r1
 8007556:	3314      	adds	r3, #20
 8007558:	7bfa      	ldrb	r2, [r7, #15]
 800755a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800755c:	7bfa      	ldrb	r2, [r7, #15]
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	b298      	uxth	r0, r3
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	4613      	mov	r3, r2
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	332e      	adds	r3, #46	@ 0x2e
 8007570:	4602      	mov	r2, r0
 8007572:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007574:	7bfa      	ldrb	r2, [r7, #15]
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	4613      	mov	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	3318      	adds	r3, #24
 8007584:	2200      	movs	r2, #0
 8007586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007588:	7bfa      	ldrb	r2, [r7, #15]
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4613      	mov	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	331c      	adds	r3, #28
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800759c:	7bfa      	ldrb	r2, [r7, #15]
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4613      	mov	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	3320      	adds	r3, #32
 80075ac:	2200      	movs	r2, #0
 80075ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80075b0:	7bfa      	ldrb	r2, [r7, #15]
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	4613      	mov	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	3324      	adds	r3, #36	@ 0x24
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	3301      	adds	r3, #1
 80075c8:	73fb      	strb	r3, [r7, #15]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	791b      	ldrb	r3, [r3, #4]
 80075ce:	7bfa      	ldrb	r2, [r7, #15]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d3af      	bcc.n	8007534 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
 80075d8:	e044      	b.n	8007664 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80075da:	7bfa      	ldrb	r2, [r7, #15]
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80075ec:	2200      	movs	r2, #0
 80075ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80075f0:	7bfa      	ldrb	r2, [r7, #15]
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	4613      	mov	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007602:	7bfa      	ldrb	r2, [r7, #15]
 8007604:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007606:	7bfa      	ldrb	r2, [r7, #15]
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	4613      	mov	r3, r2
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	440b      	add	r3, r1
 8007614:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007618:	2200      	movs	r2, #0
 800761a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800761c:	7bfa      	ldrb	r2, [r7, #15]
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	4613      	mov	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007632:	7bfa      	ldrb	r2, [r7, #15]
 8007634:	6879      	ldr	r1, [r7, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	440b      	add	r3, r1
 8007640:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007648:	7bfa      	ldrb	r2, [r7, #15]
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4613      	mov	r3, r2
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	440b      	add	r3, r1
 8007656:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	3301      	adds	r3, #1
 8007662:	73fb      	strb	r3, [r7, #15]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	791b      	ldrb	r3, [r3, #4]
 8007668:	7bfa      	ldrb	r2, [r7, #15]
 800766a:	429a      	cmp	r2, r3
 800766c:	d3b5      	bcc.n	80075da <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7c1a      	ldrb	r2, [r3, #16]
 8007676:	f88d 2000 	strb.w	r2, [sp]
 800767a:	3304      	adds	r3, #4
 800767c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800767e:	f006 fcdf 	bl	800e040 <USB_DevInit>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e00c      	b.n	80076ae <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f007 fd72 	bl	800f190 <USB_DevDisconnect>

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e015      	b.n	80076f4 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2203      	movs	r2, #3
 80076cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f007 fcc5 	bl	800f064 <USB_StopDevice>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e007      	b.n	80076f4 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f015 fdaf 	bl	801d248 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_PCD_Start+0x1c>
 8007714:	2302      	movs	r3, #2
 8007716:	e022      	b.n	800775e <HAL_PCD_Start+0x62>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d009      	beq.n	8007740 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007730:	2b01      	cmp	r3, #1
 8007732:	d105      	bne.n	8007740 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007738:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4618      	mov	r0, r3
 8007746:	f006 fc0d 	bl	800df64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f007 fcfd 	bl	800f14e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_PCD_Stop+0x1c>
 800777e:	2302      	movs	r3, #2
 8007780:	e028      	b.n	80077d4 <HAL_PCD_Stop+0x6e>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f006 fbf9 	bl	800df86 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f007 fcf9 	bl	800f190 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2110      	movs	r1, #16
 80077a4:	4618      	mov	r0, r3
 80077a6:	f006 fdaf 	bl	800e308 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d009      	beq.n	80077ca <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d105      	bne.n	80077ca <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80077dc:	b590      	push	{r4, r7, lr}
 80077de:	b08d      	sub	sp, #52	@ 0x34
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f007 fd80 	bl	800f2f8 <USB_GetMode>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f040 848c 	bne.w	8008118 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f007 fce4 	bl	800f1d2 <USB_ReadInterrupts>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 8482 	beq.w	8008116 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	0a1b      	lsrs	r3, r3, #8
 800781c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f007 fcd1 	bl	800f1d2 <USB_ReadInterrupts>
 8007830:	4603      	mov	r3, r0
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b02      	cmp	r3, #2
 8007838:	d107      	bne.n	800784a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695a      	ldr	r2, [r3, #20]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f002 0202 	and.w	r2, r2, #2
 8007848:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f007 fcbf 	bl	800f1d2 <USB_ReadInterrupts>
 8007854:	4603      	mov	r3, r0
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	2b10      	cmp	r3, #16
 800785c:	d161      	bne.n	8007922 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	699a      	ldr	r2, [r3, #24]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0210 	bic.w	r2, r2, #16
 800786c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	f003 020f 	and.w	r2, r3, #15
 800787a:	4613      	mov	r3, r2
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	4413      	add	r3, r2
 800788a:	3304      	adds	r3, #4
 800788c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	0c5b      	lsrs	r3, r3, #17
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	2b02      	cmp	r3, #2
 8007898:	d124      	bne.n	80078e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d035      	beq.n	8007912 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	091b      	lsrs	r3, r3, #4
 80078ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80078b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	461a      	mov	r2, r3
 80078b8:	6a38      	ldr	r0, [r7, #32]
 80078ba:	f007 faa7 	bl	800ee0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	091b      	lsrs	r3, r3, #4
 80078c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ca:	441a      	add	r2, r3
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	695a      	ldr	r2, [r3, #20]
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	091b      	lsrs	r3, r3, #4
 80078d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078dc:	441a      	add	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	615a      	str	r2, [r3, #20]
 80078e2:	e016      	b.n	8007912 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	0c5b      	lsrs	r3, r3, #17
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	2b06      	cmp	r3, #6
 80078ee:	d110      	bne.n	8007912 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078f6:	2208      	movs	r2, #8
 80078f8:	4619      	mov	r1, r3
 80078fa:	6a38      	ldr	r0, [r7, #32]
 80078fc:	f007 fa86 	bl	800ee0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	091b      	lsrs	r3, r3, #4
 8007908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800790c:	441a      	add	r2, r3
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	699a      	ldr	r2, [r3, #24]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0210 	orr.w	r2, r2, #16
 8007920:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f007 fc53 	bl	800f1d2 <USB_ReadInterrupts>
 800792c:	4603      	mov	r3, r0
 800792e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007932:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007936:	f040 80a7 	bne.w	8007a88 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f007 fc58 	bl	800f1f8 <USB_ReadDevAllOutEpInterrupt>
 8007948:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800794a:	e099      	b.n	8007a80 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800794c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 808e 	beq.w	8007a74 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f007 fc7c 	bl	800f260 <USB_ReadDevOutEPInterrupt>
 8007968:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00c      	beq.n	800798e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007980:	461a      	mov	r2, r3
 8007982:	2301      	movs	r3, #1
 8007984:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007986:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fecf 	bl	800872c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00c      	beq.n	80079b2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a4:	461a      	mov	r2, r3
 80079a6:	2308      	movs	r3, #8
 80079a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80079aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 ffa5 	bl	80088fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d008      	beq.n	80079ce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c8:	461a      	mov	r2, r3
 80079ca:	2310      	movs	r3, #16
 80079cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d030      	beq.n	8007a3a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e0:	2b80      	cmp	r3, #128	@ 0x80
 80079e2:	d109      	bne.n	80079f8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079f6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80079f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079fa:	4613      	mov	r3, r2
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4413      	add	r3, r2
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	78db      	ldrb	r3, [r3, #3]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d108      	bne.n	8007a28 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f015 fce2 	bl	801d3ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a34:	461a      	mov	r2, r3
 8007a36:	2302      	movs	r3, #2
 8007a38:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d008      	beq.n	8007a56 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a50:	461a      	mov	r2, r3
 8007a52:	2320      	movs	r3, #32
 8007a54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a72:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	3301      	adds	r3, #1
 8007a78:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7c:	085b      	lsrs	r3, r3, #1
 8007a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f47f af62 	bne.w	800794c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f007 fba0 	bl	800f1d2 <USB_ReadInterrupts>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a9c:	f040 80db 	bne.w	8007c56 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f007 fbc1 	bl	800f22c <USB_ReadDevAllInEpInterrupt>
 8007aaa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007ab0:	e0cd      	b.n	8007c4e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80c2 	beq.w	8007c42 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f007 fbe7 	bl	800f29c <USB_ReadDevInEPInterrupt>
 8007ace:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d057      	beq.n	8007b8a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	f003 030f 	and.w	r3, r3, #15
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	43db      	mvns	r3, r3
 8007af4:	69f9      	ldr	r1, [r7, #28]
 8007af6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007afa:	4013      	ands	r3, r2
 8007afc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	799b      	ldrb	r3, [r3, #6]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d132      	bne.n	8007b7e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	440b      	add	r3, r1
 8007b26:	3320      	adds	r3, #32
 8007b28:	6819      	ldr	r1, [r3, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b2e:	4613      	mov	r3, r2
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4403      	add	r3, r0
 8007b38:	331c      	adds	r3, #28
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4419      	add	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b42:	4613      	mov	r3, r2
 8007b44:	00db      	lsls	r3, r3, #3
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4403      	add	r3, r0
 8007b4c:	3320      	adds	r3, #32
 8007b4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d113      	bne.n	8007b7e <HAL_PCD_IRQHandler+0x3a2>
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	3324      	adds	r3, #36	@ 0x24
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d108      	bne.n	8007b7e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b76:	461a      	mov	r2, r3
 8007b78:	2101      	movs	r1, #1
 8007b7a:	f007 fbef 	bl	800f35c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f015 fbac 	bl	801d2e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f003 0308 	and.w	r3, r3, #8
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	2308      	movs	r3, #8
 8007ba4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	2310      	movs	r3, #16
 8007bc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d008      	beq.n	8007bde <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd8:	461a      	mov	r2, r3
 8007bda:	2340      	movs	r3, #64	@ 0x40
 8007bdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d023      	beq.n	8007c30 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007be8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bea:	6a38      	ldr	r0, [r7, #32]
 8007bec:	f006 fb8c 	bl	800e308 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	3310      	adds	r3, #16
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	4413      	add	r3, r2
 8007c00:	3304      	adds	r3, #4
 8007c02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	78db      	ldrb	r3, [r3, #3]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d108      	bne.n	8007c1e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f015 fbf9 	bl	801d410 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007c3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fce8 	bl	8008612 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c44:	3301      	adds	r3, #1
 8007c46:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f47f af2e 	bne.w	8007ab2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f007 fab9 	bl	800f1d2 <USB_ReadInterrupts>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c6a:	d122      	bne.n	8007cb2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c7a:	f023 0301 	bic.w	r3, r3, #1
 8007c7e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d108      	bne.n	8007c9c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007c92:	2100      	movs	r1, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fecf 	bl	8008a38 <HAL_PCDEx_LPM_Callback>
 8007c9a:	e002      	b.n	8007ca2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f015 fb97 	bl	801d3d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	695a      	ldr	r2, [r3, #20]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f007 fa8b 	bl	800f1d2 <USB_ReadInterrupts>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cc6:	d112      	bne.n	8007cee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d102      	bne.n	8007cde <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f015 fb53 	bl	801d384 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695a      	ldr	r2, [r3, #20]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007cec:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f007 fa6d 	bl	800f1d2 <USB_ReadInterrupts>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d02:	f040 80b7 	bne.w	8007e74 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d14:	f023 0301 	bic.w	r3, r3, #1
 8007d18:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2110      	movs	r1, #16
 8007d20:	4618      	mov	r0, r3
 8007d22:	f006 faf1 	bl	800e308 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d26:	2300      	movs	r3, #0
 8007d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d2a:	e046      	b.n	8007dba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d3e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d50:	0151      	lsls	r1, r2, #5
 8007d52:	69fa      	ldr	r2, [r7, #28]
 8007d54:	440a      	add	r2, r1
 8007d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d72:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007da4:	0151      	lsls	r1, r2, #5
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	440a      	add	r2, r1
 8007daa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007db2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db6:	3301      	adds	r3, #1
 8007db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	791b      	ldrb	r3, [r3, #4]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d3b2      	bcc.n	8007d2c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dd4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007dd8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7bdb      	ldrb	r3, [r3, #15]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d016      	beq.n	8007e10 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007df2:	f043 030b 	orr.w	r3, r3, #11
 8007df6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e08:	f043 030b 	orr.w	r3, r3, #11
 8007e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e0e:	e015      	b.n	8007e3c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	69fa      	ldr	r2, [r7, #28]
 8007e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007e22:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007e26:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e36:	f043 030b 	orr.w	r3, r3, #11
 8007e3a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e4a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e4e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f007 fa7c 	bl	800f35c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	695a      	ldr	r2, [r3, #20]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007e72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f007 f9aa 	bl	800f1d2 <USB_ReadInterrupts>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e88:	d123      	bne.n	8007ed2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f007 fa40 	bl	800f314 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f006 faae 	bl	800e3fa <USB_GetDevSpeed>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681c      	ldr	r4, [r3, #0]
 8007eaa:	f001 fa65 	bl	8009378 <HAL_RCC_GetHCLKFreq>
 8007eae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f005 ffb2 	bl	800de20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f015 fa38 	bl	801d332 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f007 f97b 	bl	800f1d2 <USB_ReadInterrupts>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	d10a      	bne.n	8007efc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f015 fa15 	bl	801d316 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695a      	ldr	r2, [r3, #20]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f002 0208 	and.w	r2, r2, #8
 8007efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f007 f966 	bl	800f1d2 <USB_ReadInterrupts>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f0c:	2b80      	cmp	r3, #128	@ 0x80
 8007f0e:	d123      	bne.n	8007f58 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f20:	e014      	b.n	8007f4c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f26:	4613      	mov	r3, r2
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d105      	bne.n	8007f46 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fb08 	bl	8008556 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	3301      	adds	r3, #1
 8007f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	791b      	ldrb	r3, [r3, #4]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d3e4      	bcc.n	8007f22 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f007 f938 	bl	800f1d2 <USB_ReadInterrupts>
 8007f62:	4603      	mov	r3, r0
 8007f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f6c:	d13c      	bne.n	8007fe8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f6e:	2301      	movs	r3, #1
 8007f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f72:	e02b      	b.n	8007fcc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	3318      	adds	r3, #24
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d115      	bne.n	8007fc6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007f9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	da12      	bge.n	8007fc6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	440b      	add	r3, r1
 8007fae:	3317      	adds	r3, #23
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fac8 	bl	8008556 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	3301      	adds	r3, #1
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	791b      	ldrb	r3, [r3, #4]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d3cd      	bcc.n	8007f74 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	695a      	ldr	r2, [r3, #20]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f007 f8f0 	bl	800f1d2 <USB_ReadInterrupts>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ff8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ffc:	d156      	bne.n	80080ac <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ffe:	2301      	movs	r3, #1
 8008000:	627b      	str	r3, [r7, #36]	@ 0x24
 8008002:	e045      	b.n	8008090 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008018:	4613      	mov	r3, r2
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	4413      	add	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d12e      	bne.n	800808a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800802c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800802e:	2b00      	cmp	r3, #0
 8008030:	da2b      	bge.n	800808a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800803e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008042:	429a      	cmp	r2, r3
 8008044:	d121      	bne.n	800808a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800804a:	4613      	mov	r3, r2
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	440b      	add	r3, r1
 8008054:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008058:	2201      	movs	r2, #1
 800805a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	69fa      	ldr	r2, [r7, #28]
 800807e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008086:	6053      	str	r3, [r2, #4]
            break;
 8008088:	e008      	b.n	800809c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	3301      	adds	r3, #1
 800808e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	791b      	ldrb	r3, [r3, #4]
 8008094:	461a      	mov	r2, r3
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	4293      	cmp	r3, r2
 800809a:	d3b3      	bcc.n	8008004 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	695a      	ldr	r2, [r3, #20]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80080aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f007 f88e 	bl	800f1d2 <USB_ReadInterrupts>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c0:	d10a      	bne.n	80080d8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f015 f9b6 	bl	801d434 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	695a      	ldr	r2, [r3, #20]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80080d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f007 f878 	bl	800f1d2 <USB_ReadInterrupts>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	d115      	bne.n	8008118 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f015 f9a6 	bl	801d450 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6859      	ldr	r1, [r3, #4]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	430a      	orrs	r2, r1
 8008112:	605a      	str	r2, [r3, #4]
 8008114:	e000      	b.n	8008118 <HAL_PCD_IRQHandler+0x93c>
      return;
 8008116:	bf00      	nop
    }
  }
}
 8008118:	3734      	adds	r7, #52	@ 0x34
 800811a:	46bd      	mov	sp, r7
 800811c:	bd90      	pop	{r4, r7, pc}

0800811e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_PCD_SetAddress+0x1a>
 8008134:	2302      	movs	r3, #2
 8008136:	e012      	b.n	800815e <HAL_PCD_SetAddress+0x40>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	78fa      	ldrb	r2, [r7, #3]
 800814c:	4611      	mov	r1, r2
 800814e:	4618      	mov	r0, r3
 8008150:	f006 ffd7 	bl	800f102 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	4608      	mov	r0, r1
 8008170:	4611      	mov	r1, r2
 8008172:	461a      	mov	r2, r3
 8008174:	4603      	mov	r3, r0
 8008176:	70fb      	strb	r3, [r7, #3]
 8008178:	460b      	mov	r3, r1
 800817a:	803b      	strh	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008188:	2b00      	cmp	r3, #0
 800818a:	da0f      	bge.n	80081ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	f003 020f 	and.w	r2, r3, #15
 8008192:	4613      	mov	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	3310      	adds	r3, #16
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	4413      	add	r3, r2
 80081a0:	3304      	adds	r3, #4
 80081a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	705a      	strb	r2, [r3, #1]
 80081aa:	e00f      	b.n	80081cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	f003 020f 	and.w	r2, r3, #15
 80081b2:	4613      	mov	r3, r2
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	4413      	add	r3, r2
 80081c2:	3304      	adds	r3, #4
 80081c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80081d8:	883a      	ldrh	r2, [r7, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	78ba      	ldrb	r2, [r7, #2]
 80081e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d004      	beq.n	80081f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80081f6:	78bb      	ldrb	r3, [r7, #2]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d102      	bne.n	8008202 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008208:	2b01      	cmp	r3, #1
 800820a:	d101      	bne.n	8008210 <HAL_PCD_EP_Open+0xaa>
 800820c:	2302      	movs	r3, #2
 800820e:	e00e      	b.n	800822e <HAL_PCD_EP_Open+0xc8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68f9      	ldr	r1, [r7, #12]
 800821e:	4618      	mov	r0, r3
 8008220:	f006 f910 	bl	800e444 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800822c:	7afb      	ldrb	r3, [r7, #11]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008246:	2b00      	cmp	r3, #0
 8008248:	da0f      	bge.n	800826a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	f003 020f 	and.w	r2, r3, #15
 8008250:	4613      	mov	r3, r2
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	3310      	adds	r3, #16
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	3304      	adds	r3, #4
 8008260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	705a      	strb	r2, [r3, #1]
 8008268:	e00f      	b.n	800828a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	f003 020f 	and.w	r2, r3, #15
 8008270:	4613      	mov	r3, r2
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	4413      	add	r3, r2
 8008280:	3304      	adds	r3, #4
 8008282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	b2da      	uxtb	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_PCD_EP_Close+0x6e>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e00e      	b.n	80082c2 <HAL_PCD_EP_Close+0x8c>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68f9      	ldr	r1, [r7, #12]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f006 f94e 	bl	800e554 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b086      	sub	sp, #24
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
 80082d6:	460b      	mov	r3, r1
 80082d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	f003 020f 	and.w	r2, r3, #15
 80082e0:	4613      	mov	r3, r2
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	3304      	adds	r3, #4
 80082f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2200      	movs	r2, #0
 8008304:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2200      	movs	r2, #0
 800830a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800830c:	7afb      	ldrb	r3, [r7, #11]
 800830e:	f003 030f 	and.w	r3, r3, #15
 8008312:	b2da      	uxtb	r2, r3
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	799b      	ldrb	r3, [r3, #6]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d102      	bne.n	8008326 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6818      	ldr	r0, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	799b      	ldrb	r3, [r3, #6]
 800832e:	461a      	mov	r2, r3
 8008330:	6979      	ldr	r1, [r7, #20]
 8008332:	f006 f9eb 	bl	800e70c <USB_EPStartXfer>

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	f003 020f 	and.w	r2, r3, #15
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	4613      	mov	r3, r2
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008362:	681b      	ldr	r3, [r3, #0]
}
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	460b      	mov	r3, r1
 800837e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	f003 020f 	and.w	r2, r3, #15
 8008386:	4613      	mov	r3, r2
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	3310      	adds	r3, #16
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4413      	add	r3, r2
 8008394:	3304      	adds	r3, #4
 8008396:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2200      	movs	r2, #0
 80083a8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2201      	movs	r2, #1
 80083ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	799b      	ldrb	r3, [r3, #6]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d102      	bne.n	80083ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	799b      	ldrb	r3, [r3, #6]
 80083d2:	461a      	mov	r2, r3
 80083d4:	6979      	ldr	r1, [r7, #20]
 80083d6:	f006 f999 	bl	800e70c <USB_EPStartXfer>

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	f003 030f 	and.w	r3, r3, #15
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	7912      	ldrb	r2, [r2, #4]
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d901      	bls.n	8008402 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e04f      	b.n	80084a2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008402:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008406:	2b00      	cmp	r3, #0
 8008408:	da0f      	bge.n	800842a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	f003 020f 	and.w	r2, r3, #15
 8008410:	4613      	mov	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	3310      	adds	r3, #16
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	3304      	adds	r3, #4
 8008420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	705a      	strb	r2, [r3, #1]
 8008428:	e00d      	b.n	8008446 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	4613      	mov	r3, r2
 800842e:	00db      	lsls	r3, r3, #3
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	4413      	add	r3, r2
 800843c:	3304      	adds	r3, #4
 800843e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2201      	movs	r2, #1
 800844a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	f003 030f 	and.w	r3, r3, #15
 8008452:	b2da      	uxtb	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_PCD_EP_SetStall+0x82>
 8008462:	2302      	movs	r3, #2
 8008464:	e01d      	b.n	80084a2 <HAL_PCD_EP_SetStall+0xbe>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	4618      	mov	r0, r3
 8008476:	f006 fd21 	bl	800eebc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	7999      	ldrb	r1, [r3, #6]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008492:	461a      	mov	r2, r3
 8008494:	f006 ff62 	bl	800f35c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	7912      	ldrb	r2, [r2, #4]
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d901      	bls.n	80084c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e042      	b.n	800854e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	da0f      	bge.n	80084f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	f003 020f 	and.w	r2, r3, #15
 80084d6:	4613      	mov	r3, r2
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	3310      	adds	r3, #16
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	3304      	adds	r3, #4
 80084e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	705a      	strb	r2, [r3, #1]
 80084ee:	e00f      	b.n	8008510 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	f003 020f 	and.w	r2, r3, #15
 80084f6:	4613      	mov	r3, r2
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	4413      	add	r3, r2
 8008506:	3304      	adds	r3, #4
 8008508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	b2da      	uxtb	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_PCD_EP_ClrStall+0x86>
 800852c:	2302      	movs	r3, #2
 800852e:	e00e      	b.n	800854e <HAL_PCD_EP_ClrStall+0xa4>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68f9      	ldr	r1, [r7, #12]
 800853e:	4618      	mov	r0, r3
 8008540:	f006 fd2a 	bl	800ef98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008566:	2b00      	cmp	r3, #0
 8008568:	da0c      	bge.n	8008584 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800856a:	78fb      	ldrb	r3, [r7, #3]
 800856c:	f003 020f 	and.w	r2, r3, #15
 8008570:	4613      	mov	r3, r2
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	3310      	adds	r3, #16
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	3304      	adds	r3, #4
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e00c      	b.n	800859e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	f003 020f 	and.w	r2, r3, #15
 800858a:	4613      	mov	r3, r2
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	4413      	add	r3, r2
 800859a:	3304      	adds	r3, #4
 800859c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68f9      	ldr	r1, [r7, #12]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f006 fb49 	bl	800ec3c <USB_EPStopXfer>
 80085aa:	4603      	mov	r3, r0
 80085ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80085ae:	7afb      	ldrb	r3, [r7, #11]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_PCD_EP_Flush+0x1a>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e01b      	b.n	800860a <HAL_PCD_EP_Flush+0x52>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80085da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	da09      	bge.n	80085f6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	f003 030f 	and.w	r3, r3, #15
 80085ec:	4619      	mov	r1, r3
 80085ee:	4610      	mov	r0, r2
 80085f0:	f005 fe8a 	bl	800e308 <USB_FlushTxFifo>
 80085f4:	e004      	b.n	8008600 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f005 feb6 	bl	800e36c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b08a      	sub	sp, #40	@ 0x28
 8008616:	af02      	add	r7, sp, #8
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	3310      	adds	r3, #16
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	4413      	add	r3, r2
 8008636:	3304      	adds	r3, #4
 8008638:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	695a      	ldr	r2, [r3, #20]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	429a      	cmp	r2, r3
 8008644:	d901      	bls.n	800864a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e06b      	b.n	8008722 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	691a      	ldr	r2, [r3, #16]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	429a      	cmp	r2, r3
 800865e:	d902      	bls.n	8008666 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	3303      	adds	r3, #3
 800866a:	089b      	lsrs	r3, r3, #2
 800866c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800866e:	e02a      	b.n	80086c6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	691a      	ldr	r2, [r3, #16]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	429a      	cmp	r2, r3
 8008684:	d902      	bls.n	800868c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	3303      	adds	r3, #3
 8008690:	089b      	lsrs	r3, r3, #2
 8008692:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68d9      	ldr	r1, [r3, #12]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	b2da      	uxtb	r2, r3
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	4603      	mov	r3, r0
 80086a8:	6978      	ldr	r0, [r7, #20]
 80086aa:	f006 fb71 	bl	800ed90 <USB_WritePacket>

    ep->xfer_buff  += len;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	441a      	add	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	695a      	ldr	r2, [r3, #20]
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d809      	bhi.n	80086f0 <PCD_WriteEmptyTxFifo+0xde>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	695a      	ldr	r2, [r3, #20]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d203      	bcs.n	80086f0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1bf      	bne.n	8008670 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	691a      	ldr	r2, [r3, #16]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d811      	bhi.n	8008720 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f003 030f 	and.w	r3, r3, #15
 8008702:	2201      	movs	r2, #1
 8008704:	fa02 f303 	lsl.w	r3, r2, r3
 8008708:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	43db      	mvns	r3, r3
 8008716:	6939      	ldr	r1, [r7, #16]
 8008718:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800871c:	4013      	ands	r3, r2
 800871e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3720      	adds	r7, #32
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	333c      	adds	r3, #60	@ 0x3c
 8008744:	3304      	adds	r3, #4
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	4413      	add	r3, r2
 8008752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	799b      	ldrb	r3, [r3, #6]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d17b      	bne.n	800885a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	2b00      	cmp	r3, #0
 800876a:	d015      	beq.n	8008798 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	4a61      	ldr	r2, [pc, #388]	@ (80088f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	f240 80b9 	bls.w	80088e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80b3 	beq.w	80088e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878e:	461a      	mov	r2, r3
 8008790:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008794:	6093      	str	r3, [r2, #8]
 8008796:	e0a7      	b.n	80088e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ae:	461a      	mov	r2, r3
 80087b0:	2320      	movs	r3, #32
 80087b2:	6093      	str	r3, [r2, #8]
 80087b4:	e098      	b.n	80088e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f040 8093 	bne.w	80088e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	4a4b      	ldr	r2, [pc, #300]	@ (80088f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d90f      	bls.n	80087ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e0:	461a      	mov	r2, r3
 80087e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087e6:	6093      	str	r3, [r2, #8]
 80087e8:	e07e      	b.n	80088e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	4613      	mov	r3, r2
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	4413      	add	r3, r2
 80087fc:	3304      	adds	r3, #4
 80087fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6a1a      	ldr	r2, [r3, #32]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	0159      	lsls	r1, r3, #5
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	440b      	add	r3, r1
 800880c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008816:	1ad2      	subs	r2, r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d114      	bne.n	800884c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d109      	bne.n	800883e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008834:	461a      	mov	r2, r3
 8008836:	2101      	movs	r1, #1
 8008838:	f006 fd90 	bl	800f35c <USB_EP0_OutStart>
 800883c:	e006      	b.n	800884c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	441a      	add	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	b2db      	uxtb	r3, r3
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f014 fd2a 	bl	801d2ac <HAL_PCD_DataOutStageCallback>
 8008858:	e046      	b.n	80088e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	4a26      	ldr	r2, [pc, #152]	@ (80088f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d124      	bne.n	80088ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008878:	461a      	mov	r2, r3
 800887a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800887e:	6093      	str	r3, [r2, #8]
 8008880:	e032      	b.n	80088e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f003 0320 	and.w	r3, r3, #32
 8008888:	2b00      	cmp	r3, #0
 800888a:	d008      	beq.n	800889e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008898:	461a      	mov	r2, r3
 800889a:	2320      	movs	r3, #32
 800889c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f014 fd01 	bl	801d2ac <HAL_PCD_DataOutStageCallback>
 80088aa:	e01d      	b.n	80088e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d114      	bne.n	80088dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	4613      	mov	r3, r2
 80088b8:	00db      	lsls	r3, r3, #3
 80088ba:	4413      	add	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	440b      	add	r3, r1
 80088c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d108      	bne.n	80088dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6818      	ldr	r0, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088d4:	461a      	mov	r2, r3
 80088d6:	2100      	movs	r1, #0
 80088d8:	f006 fd40 	bl	800f35c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f014 fce2 	bl	801d2ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3720      	adds	r7, #32
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	4f54300a 	.word	0x4f54300a
 80088f8:	4f54310a 	.word	0x4f54310a

080088fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	333c      	adds	r3, #60	@ 0x3c
 8008914:	3304      	adds	r3, #4
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	4a15      	ldr	r2, [pc, #84]	@ (8008984 <PCD_EP_OutSetupPacket_int+0x88>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d90e      	bls.n	8008950 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008938:	2b00      	cmp	r3, #0
 800893a:	d009      	beq.n	8008950 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008948:	461a      	mov	r2, r3
 800894a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800894e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f014 fc99 	bl	801d288 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4a0a      	ldr	r2, [pc, #40]	@ (8008984 <PCD_EP_OutSetupPacket_int+0x88>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d90c      	bls.n	8008978 <PCD_EP_OutSetupPacket_int+0x7c>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	799b      	ldrb	r3, [r3, #6]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d108      	bne.n	8008978 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008970:	461a      	mov	r2, r3
 8008972:	2101      	movs	r1, #1
 8008974:	f006 fcf2 	bl	800f35c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	4f54300a 	.word	0x4f54300a

08008988 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
 8008994:	4613      	mov	r3, r2
 8008996:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d107      	bne.n	80089b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80089a6:	883b      	ldrh	r3, [r7, #0]
 80089a8:	0419      	lsls	r1, r3, #16
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80089b4:	e028      	b.n	8008a08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089bc:	0c1b      	lsrs	r3, r3, #16
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
 80089c8:	e00d      	b.n	80089e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	3340      	adds	r3, #64	@ 0x40
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	0c1b      	lsrs	r3, r3, #16
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	4413      	add	r3, r2
 80089de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	3301      	adds	r3, #1
 80089e4:	73fb      	strb	r3, [r7, #15]
 80089e6:	7bfa      	ldrb	r2, [r7, #15]
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d3ec      	bcc.n	80089ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80089f0:	883b      	ldrh	r3, [r7, #0]
 80089f2:	0418      	lsls	r0, r3, #16
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6819      	ldr	r1, [r3, #0]
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	4302      	orrs	r2, r0
 8008a00:	3340      	adds	r3, #64	@ 0x40
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	887a      	ldrh	r2, [r7, #2]
 8008a28:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008a56:	4b06      	ldr	r3, [pc, #24]	@ (8008a70 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008a58:	2201      	movs	r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008a5c:	4b05      	ldr	r3, [pc, #20]	@ (8008a74 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008a62:	687b      	ldr	r3, [r7, #4]
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	420e0020 	.word	0x420e0020
 8008a74:	40007000 	.word	0x40007000

08008a78 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008a7e:	4b06      	ldr	r3, [pc, #24]	@ (8008a98 <HAL_PWR_DisableBkUpAccess+0x20>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008a84:	4b05      	ldr	r3, [pc, #20]	@ (8008a9c <HAL_PWR_DisableBkUpAccess+0x24>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008a8a:	687b      	ldr	r3, [r7, #4]
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	420e0020 	.word	0x420e0020
 8008a9c:	40007000 	.word	0x40007000

08008aa0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8008aac:	4b12      	ldr	r3, [pc, #72]	@ (8008af8 <HAL_PWR_EnterSTOPMode+0x58>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f023 0203 	bic.w	r2, r3, #3
 8008ab4:	4910      	ldr	r1, [pc, #64]	@ (8008af8 <HAL_PWR_EnterSTOPMode+0x58>)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008abc:	4b0f      	ldr	r3, [pc, #60]	@ (8008afc <HAL_PWR_EnterSTOPMode+0x5c>)
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8008afc <HAL_PWR_EnterSTOPMode+0x5c>)
 8008ac2:	f043 0304 	orr.w	r3, r3, #4
 8008ac6:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8008ace:	bf30      	wfi
 8008ad0:	e005      	b.n	8008ade <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d001      	beq.n	8008adc <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8008ad8:	bf40      	sev
      __WFE();
 8008ada:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8008adc:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8008ade:	4b07      	ldr	r3, [pc, #28]	@ (8008afc <HAL_PWR_EnterSTOPMode+0x5c>)
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	4a06      	ldr	r2, [pc, #24]	@ (8008afc <HAL_PWR_EnterSTOPMode+0x5c>)
 8008ae4:	f023 0304 	bic.w	r3, r3, #4
 8008ae8:	6113      	str	r3, [r2, #16]
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	40007000 	.word	0x40007000
 8008afc:	e000ed00 	.word	0xe000ed00

08008b00 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8008b04:	4b03      	ldr	r3, [pc, #12]	@ (8008b14 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	601a      	str	r2, [r3, #0]
}
 8008b0a:	bf00      	nop
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	420e0024 	.word	0x420e0024

08008b18 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8008b1c:	4b03      	ldr	r3, [pc, #12]	@ (8008b2c <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
}
 8008b22:	bf00      	nop
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	420e0024 	.word	0x420e0024

08008b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e267      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d075      	beq.n	8008c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b4e:	4b88      	ldr	r3, [pc, #544]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f003 030c 	and.w	r3, r3, #12
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	d00c      	beq.n	8008b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b5a:	4b85      	ldr	r3, [pc, #532]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d112      	bne.n	8008b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b66:	4b82      	ldr	r3, [pc, #520]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b72:	d10b      	bne.n	8008b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b74:	4b7e      	ldr	r3, [pc, #504]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d05b      	beq.n	8008c38 <HAL_RCC_OscConfig+0x108>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d157      	bne.n	8008c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e242      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b94:	d106      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x74>
 8008b96:	4b76      	ldr	r3, [pc, #472]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a75      	ldr	r2, [pc, #468]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	e01d      	b.n	8008be0 <HAL_RCC_OscConfig+0xb0>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bac:	d10c      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x98>
 8008bae:	4b70      	ldr	r3, [pc, #448]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	4b6d      	ldr	r3, [pc, #436]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a6c      	ldr	r2, [pc, #432]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	e00b      	b.n	8008be0 <HAL_RCC_OscConfig+0xb0>
 8008bc8:	4b69      	ldr	r3, [pc, #420]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a68      	ldr	r2, [pc, #416]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bd2:	6013      	str	r3, [r2, #0]
 8008bd4:	4b66      	ldr	r3, [pc, #408]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a65      	ldr	r2, [pc, #404]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d013      	beq.n	8008c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008be8:	f7fb fa96 	bl	8004118 <HAL_GetTick>
 8008bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bee:	e008      	b.n	8008c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bf0:	f7fb fa92 	bl	8004118 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b64      	cmp	r3, #100	@ 0x64
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e207      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c02:	4b5b      	ldr	r3, [pc, #364]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0f0      	beq.n	8008bf0 <HAL_RCC_OscConfig+0xc0>
 8008c0e:	e014      	b.n	8008c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c10:	f7fb fa82 	bl	8004118 <HAL_GetTick>
 8008c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c16:	e008      	b.n	8008c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c18:	f7fb fa7e 	bl	8004118 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b64      	cmp	r3, #100	@ 0x64
 8008c24:	d901      	bls.n	8008c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e1f3      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c2a:	4b51      	ldr	r3, [pc, #324]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1f0      	bne.n	8008c18 <HAL_RCC_OscConfig+0xe8>
 8008c36:	e000      	b.n	8008c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d063      	beq.n	8008d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c46:	4b4a      	ldr	r3, [pc, #296]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f003 030c 	and.w	r3, r3, #12
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00b      	beq.n	8008c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c52:	4b47      	ldr	r3, [pc, #284]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	d11c      	bne.n	8008c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c5e:	4b44      	ldr	r3, [pc, #272]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d116      	bne.n	8008c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c6a:	4b41      	ldr	r3, [pc, #260]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <HAL_RCC_OscConfig+0x152>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d001      	beq.n	8008c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e1c7      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c82:	4b3b      	ldr	r3, [pc, #236]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	00db      	lsls	r3, r3, #3
 8008c90:	4937      	ldr	r1, [pc, #220]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c96:	e03a      	b.n	8008d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d020      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ca0:	4b34      	ldr	r3, [pc, #208]	@ (8008d74 <HAL_RCC_OscConfig+0x244>)
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca6:	f7fb fa37 	bl	8004118 <HAL_GetTick>
 8008caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cac:	e008      	b.n	8008cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cae:	f7fb fa33 	bl	8004118 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d901      	bls.n	8008cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e1a8      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d0f0      	beq.n	8008cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ccc:	4b28      	ldr	r3, [pc, #160]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	4925      	ldr	r1, [pc, #148]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	600b      	str	r3, [r1, #0]
 8008ce0:	e015      	b.n	8008d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ce2:	4b24      	ldr	r3, [pc, #144]	@ (8008d74 <HAL_RCC_OscConfig+0x244>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce8:	f7fb fa16 	bl	8004118 <HAL_GetTick>
 8008cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cee:	e008      	b.n	8008d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cf0:	f7fb fa12 	bl	8004118 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e187      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d02:	4b1b      	ldr	r3, [pc, #108]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1f0      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0308 	and.w	r3, r3, #8
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d036      	beq.n	8008d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d016      	beq.n	8008d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d22:	4b15      	ldr	r3, [pc, #84]	@ (8008d78 <HAL_RCC_OscConfig+0x248>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d28:	f7fb f9f6 	bl	8004118 <HAL_GetTick>
 8008d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d30:	f7fb f9f2 	bl	8004118 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e167      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d42:	4b0b      	ldr	r3, [pc, #44]	@ (8008d70 <HAL_RCC_OscConfig+0x240>)
 8008d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0f0      	beq.n	8008d30 <HAL_RCC_OscConfig+0x200>
 8008d4e:	e01b      	b.n	8008d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d50:	4b09      	ldr	r3, [pc, #36]	@ (8008d78 <HAL_RCC_OscConfig+0x248>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d56:	f7fb f9df 	bl	8004118 <HAL_GetTick>
 8008d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d5c:	e00e      	b.n	8008d7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d5e:	f7fb f9db 	bl	8004118 <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d907      	bls.n	8008d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e150      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
 8008d70:	40023800 	.word	0x40023800
 8008d74:	42470000 	.word	0x42470000
 8008d78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d7c:	4b88      	ldr	r3, [pc, #544]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d80:	f003 0302 	and.w	r3, r3, #2
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1ea      	bne.n	8008d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0304 	and.w	r3, r3, #4
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 8097 	beq.w	8008ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d96:	2300      	movs	r3, #0
 8008d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d9a:	4b81      	ldr	r3, [pc, #516]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10f      	bne.n	8008dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008da6:	2300      	movs	r3, #0
 8008da8:	60bb      	str	r3, [r7, #8]
 8008daa:	4b7d      	ldr	r3, [pc, #500]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dae:	4a7c      	ldr	r2, [pc, #496]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8008db6:	4b7a      	ldr	r3, [pc, #488]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dbe:	60bb      	str	r3, [r7, #8]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dc6:	4b77      	ldr	r3, [pc, #476]	@ (8008fa4 <HAL_RCC_OscConfig+0x474>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d118      	bne.n	8008e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dd2:	4b74      	ldr	r3, [pc, #464]	@ (8008fa4 <HAL_RCC_OscConfig+0x474>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a73      	ldr	r2, [pc, #460]	@ (8008fa4 <HAL_RCC_OscConfig+0x474>)
 8008dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dde:	f7fb f99b 	bl	8004118 <HAL_GetTick>
 8008de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008de4:	e008      	b.n	8008df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008de6:	f7fb f997 	bl	8004118 <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d901      	bls.n	8008df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e10c      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df8:	4b6a      	ldr	r3, [pc, #424]	@ (8008fa4 <HAL_RCC_OscConfig+0x474>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0f0      	beq.n	8008de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d106      	bne.n	8008e1a <HAL_RCC_OscConfig+0x2ea>
 8008e0c:	4b64      	ldr	r3, [pc, #400]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e10:	4a63      	ldr	r2, [pc, #396]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e12:	f043 0301 	orr.w	r3, r3, #1
 8008e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e18:	e01c      	b.n	8008e54 <HAL_RCC_OscConfig+0x324>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	2b05      	cmp	r3, #5
 8008e20:	d10c      	bne.n	8008e3c <HAL_RCC_OscConfig+0x30c>
 8008e22:	4b5f      	ldr	r3, [pc, #380]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e26:	4a5e      	ldr	r2, [pc, #376]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e28:	f043 0304 	orr.w	r3, r3, #4
 8008e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e32:	4a5b      	ldr	r2, [pc, #364]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e34:	f043 0301 	orr.w	r3, r3, #1
 8008e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e3a:	e00b      	b.n	8008e54 <HAL_RCC_OscConfig+0x324>
 8008e3c:	4b58      	ldr	r3, [pc, #352]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e40:	4a57      	ldr	r2, [pc, #348]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e42:	f023 0301 	bic.w	r3, r3, #1
 8008e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e48:	4b55      	ldr	r3, [pc, #340]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e4c:	4a54      	ldr	r2, [pc, #336]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e4e:	f023 0304 	bic.w	r3, r3, #4
 8008e52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d015      	beq.n	8008e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e5c:	f7fb f95c 	bl	8004118 <HAL_GetTick>
 8008e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e62:	e00a      	b.n	8008e7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e64:	f7fb f958 	bl	8004118 <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d901      	bls.n	8008e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e0cb      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e7a:	4b49      	ldr	r3, [pc, #292]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0ee      	beq.n	8008e64 <HAL_RCC_OscConfig+0x334>
 8008e86:	e014      	b.n	8008eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e88:	f7fb f946 	bl	8004118 <HAL_GetTick>
 8008e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e8e:	e00a      	b.n	8008ea6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e90:	f7fb f942 	bl	8004118 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d901      	bls.n	8008ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e0b5      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1ee      	bne.n	8008e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d105      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eb8:	4b39      	ldr	r3, [pc, #228]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebc:	4a38      	ldr	r2, [pc, #224]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ec2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 80a1 	beq.w	8009010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ece:	4b34      	ldr	r3, [pc, #208]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f003 030c 	and.w	r3, r3, #12
 8008ed6:	2b08      	cmp	r3, #8
 8008ed8:	d05c      	beq.n	8008f94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d141      	bne.n	8008f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ee2:	4b31      	ldr	r3, [pc, #196]	@ (8008fa8 <HAL_RCC_OscConfig+0x478>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ee8:	f7fb f916 	bl	8004118 <HAL_GetTick>
 8008eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eee:	e008      	b.n	8008f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ef0:	f7fb f912 	bl	8004118 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e087      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f02:	4b27      	ldr	r3, [pc, #156]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f0      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	69da      	ldr	r2, [r3, #28]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1c:	019b      	lsls	r3, r3, #6
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f24:	085b      	lsrs	r3, r3, #1
 8008f26:	3b01      	subs	r3, #1
 8008f28:	041b      	lsls	r3, r3, #16
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f30:	061b      	lsls	r3, r3, #24
 8008f32:	491b      	ldr	r1, [pc, #108]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f38:	4b1b      	ldr	r3, [pc, #108]	@ (8008fa8 <HAL_RCC_OscConfig+0x478>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f3e:	f7fb f8eb 	bl	8004118 <HAL_GetTick>
 8008f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f44:	e008      	b.n	8008f58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f46:	f7fb f8e7 	bl	8004118 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d901      	bls.n	8008f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e05c      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f58:	4b11      	ldr	r3, [pc, #68]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d0f0      	beq.n	8008f46 <HAL_RCC_OscConfig+0x416>
 8008f64:	e054      	b.n	8009010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f66:	4b10      	ldr	r3, [pc, #64]	@ (8008fa8 <HAL_RCC_OscConfig+0x478>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f6c:	f7fb f8d4 	bl	8004118 <HAL_GetTick>
 8008f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f74:	f7fb f8d0 	bl	8004118 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e045      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f86:	4b06      	ldr	r3, [pc, #24]	@ (8008fa0 <HAL_RCC_OscConfig+0x470>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f0      	bne.n	8008f74 <HAL_RCC_OscConfig+0x444>
 8008f92:	e03d      	b.n	8009010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d107      	bne.n	8008fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e038      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
 8008fa0:	40023800 	.word	0x40023800
 8008fa4:	40007000 	.word	0x40007000
 8008fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fac:	4b1b      	ldr	r3, [pc, #108]	@ (800901c <HAL_RCC_OscConfig+0x4ec>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d028      	beq.n	800900c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d121      	bne.n	800900c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d11a      	bne.n	800900c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008fdc:	4013      	ands	r3, r2
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d111      	bne.n	800900c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff2:	085b      	lsrs	r3, r3, #1
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d107      	bne.n	800900c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009008:	429a      	cmp	r2, r3
 800900a:	d001      	beq.n	8009010 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e000      	b.n	8009012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	40023800 	.word	0x40023800

08009020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e0cc      	b.n	80091ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009034:	4b68      	ldr	r3, [pc, #416]	@ (80091d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d90c      	bls.n	800905c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009042:	4b65      	ldr	r3, [pc, #404]	@ (80091d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	b2d2      	uxtb	r2, r2
 8009048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800904a:	4b63      	ldr	r3, [pc, #396]	@ (80091d8 <HAL_RCC_ClockConfig+0x1b8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	429a      	cmp	r2, r3
 8009056:	d001      	beq.n	800905c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e0b8      	b.n	80091ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0302 	and.w	r3, r3, #2
 8009064:	2b00      	cmp	r3, #0
 8009066:	d020      	beq.n	80090aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d005      	beq.n	8009080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009074:	4b59      	ldr	r3, [pc, #356]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	4a58      	ldr	r2, [pc, #352]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 800907a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800907e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0308 	and.w	r3, r3, #8
 8009088:	2b00      	cmp	r3, #0
 800908a:	d005      	beq.n	8009098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800908c:	4b53      	ldr	r3, [pc, #332]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	4a52      	ldr	r2, [pc, #328]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 8009092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009098:	4b50      	ldr	r3, [pc, #320]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	494d      	ldr	r1, [pc, #308]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d044      	beq.n	8009140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d107      	bne.n	80090ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090be:	4b47      	ldr	r3, [pc, #284]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d119      	bne.n	80090fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e07f      	b.n	80091ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d003      	beq.n	80090de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d107      	bne.n	80090ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090de:	4b3f      	ldr	r3, [pc, #252]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d109      	bne.n	80090fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e06f      	b.n	80091ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090ee:	4b3b      	ldr	r3, [pc, #236]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e067      	b.n	80091ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090fe:	4b37      	ldr	r3, [pc, #220]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f023 0203 	bic.w	r2, r3, #3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	4934      	ldr	r1, [pc, #208]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 800910c:	4313      	orrs	r3, r2
 800910e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009110:	f7fb f802 	bl	8004118 <HAL_GetTick>
 8009114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009116:	e00a      	b.n	800912e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009118:	f7fa fffe 	bl	8004118 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009126:	4293      	cmp	r3, r2
 8009128:	d901      	bls.n	800912e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e04f      	b.n	80091ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800912e:	4b2b      	ldr	r3, [pc, #172]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 020c 	and.w	r2, r3, #12
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	429a      	cmp	r2, r3
 800913e:	d1eb      	bne.n	8009118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009140:	4b25      	ldr	r3, [pc, #148]	@ (80091d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0307 	and.w	r3, r3, #7
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	429a      	cmp	r2, r3
 800914c:	d20c      	bcs.n	8009168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800914e:	4b22      	ldr	r3, [pc, #136]	@ (80091d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009156:	4b20      	ldr	r3, [pc, #128]	@ (80091d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	429a      	cmp	r2, r3
 8009162:	d001      	beq.n	8009168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e032      	b.n	80091ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0304 	and.w	r3, r3, #4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d008      	beq.n	8009186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009174:	4b19      	ldr	r3, [pc, #100]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	4916      	ldr	r1, [pc, #88]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 8009182:	4313      	orrs	r3, r2
 8009184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0308 	and.w	r3, r3, #8
 800918e:	2b00      	cmp	r3, #0
 8009190:	d009      	beq.n	80091a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009192:	4b12      	ldr	r3, [pc, #72]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	490e      	ldr	r1, [pc, #56]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091a6:	f000 f821 	bl	80091ec <HAL_RCC_GetSysClockFreq>
 80091aa:	4602      	mov	r2, r0
 80091ac:	4b0b      	ldr	r3, [pc, #44]	@ (80091dc <HAL_RCC_ClockConfig+0x1bc>)
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	091b      	lsrs	r3, r3, #4
 80091b2:	f003 030f 	and.w	r3, r3, #15
 80091b6:	490a      	ldr	r1, [pc, #40]	@ (80091e0 <HAL_RCC_ClockConfig+0x1c0>)
 80091b8:	5ccb      	ldrb	r3, [r1, r3]
 80091ba:	fa22 f303 	lsr.w	r3, r2, r3
 80091be:	4a09      	ldr	r2, [pc, #36]	@ (80091e4 <HAL_RCC_ClockConfig+0x1c4>)
 80091c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091c2:	4b09      	ldr	r3, [pc, #36]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fa ff62 	bl	8004090 <HAL_InitTick>

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	40023c00 	.word	0x40023c00
 80091dc:	40023800 	.word	0x40023800
 80091e0:	0802507c 	.word	0x0802507c
 80091e4:	20000010 	.word	0x20000010
 80091e8:	20000014 	.word	0x20000014

080091ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091f0:	b090      	sub	sp, #64	@ 0x40
 80091f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f8:	2300      	movs	r3, #0
 80091fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091fc:	2300      	movs	r3, #0
 80091fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009204:	4b59      	ldr	r3, [pc, #356]	@ (800936c <HAL_RCC_GetSysClockFreq+0x180>)
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f003 030c 	and.w	r3, r3, #12
 800920c:	2b08      	cmp	r3, #8
 800920e:	d00d      	beq.n	800922c <HAL_RCC_GetSysClockFreq+0x40>
 8009210:	2b08      	cmp	r3, #8
 8009212:	f200 80a1 	bhi.w	8009358 <HAL_RCC_GetSysClockFreq+0x16c>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <HAL_RCC_GetSysClockFreq+0x34>
 800921a:	2b04      	cmp	r3, #4
 800921c:	d003      	beq.n	8009226 <HAL_RCC_GetSysClockFreq+0x3a>
 800921e:	e09b      	b.n	8009358 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009220:	4b53      	ldr	r3, [pc, #332]	@ (8009370 <HAL_RCC_GetSysClockFreq+0x184>)
 8009222:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009224:	e09b      	b.n	800935e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009226:	4b53      	ldr	r3, [pc, #332]	@ (8009374 <HAL_RCC_GetSysClockFreq+0x188>)
 8009228:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800922a:	e098      	b.n	800935e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800922c:	4b4f      	ldr	r3, [pc, #316]	@ (800936c <HAL_RCC_GetSysClockFreq+0x180>)
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009234:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009236:	4b4d      	ldr	r3, [pc, #308]	@ (800936c <HAL_RCC_GetSysClockFreq+0x180>)
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d028      	beq.n	8009294 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009242:	4b4a      	ldr	r3, [pc, #296]	@ (800936c <HAL_RCC_GetSysClockFreq+0x180>)
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	099b      	lsrs	r3, r3, #6
 8009248:	2200      	movs	r2, #0
 800924a:	623b      	str	r3, [r7, #32]
 800924c:	627a      	str	r2, [r7, #36]	@ 0x24
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009254:	2100      	movs	r1, #0
 8009256:	4b47      	ldr	r3, [pc, #284]	@ (8009374 <HAL_RCC_GetSysClockFreq+0x188>)
 8009258:	fb03 f201 	mul.w	r2, r3, r1
 800925c:	2300      	movs	r3, #0
 800925e:	fb00 f303 	mul.w	r3, r0, r3
 8009262:	4413      	add	r3, r2
 8009264:	4a43      	ldr	r2, [pc, #268]	@ (8009374 <HAL_RCC_GetSysClockFreq+0x188>)
 8009266:	fba0 1202 	umull	r1, r2, r0, r2
 800926a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800926c:	460a      	mov	r2, r1
 800926e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009272:	4413      	add	r3, r2
 8009274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009278:	2200      	movs	r2, #0
 800927a:	61bb      	str	r3, [r7, #24]
 800927c:	61fa      	str	r2, [r7, #28]
 800927e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009282:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009286:	f7f7 fd17 	bl	8000cb8 <__aeabi_uldivmod>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4613      	mov	r3, r2
 8009290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009292:	e053      	b.n	800933c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009294:	4b35      	ldr	r3, [pc, #212]	@ (800936c <HAL_RCC_GetSysClockFreq+0x180>)
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	099b      	lsrs	r3, r3, #6
 800929a:	2200      	movs	r2, #0
 800929c:	613b      	str	r3, [r7, #16]
 800929e:	617a      	str	r2, [r7, #20]
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80092a6:	f04f 0b00 	mov.w	fp, #0
 80092aa:	4652      	mov	r2, sl
 80092ac:	465b      	mov	r3, fp
 80092ae:	f04f 0000 	mov.w	r0, #0
 80092b2:	f04f 0100 	mov.w	r1, #0
 80092b6:	0159      	lsls	r1, r3, #5
 80092b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092bc:	0150      	lsls	r0, r2, #5
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	ebb2 080a 	subs.w	r8, r2, sl
 80092c6:	eb63 090b 	sbc.w	r9, r3, fp
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	f04f 0300 	mov.w	r3, #0
 80092d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80092d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80092da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80092de:	ebb2 0408 	subs.w	r4, r2, r8
 80092e2:	eb63 0509 	sbc.w	r5, r3, r9
 80092e6:	f04f 0200 	mov.w	r2, #0
 80092ea:	f04f 0300 	mov.w	r3, #0
 80092ee:	00eb      	lsls	r3, r5, #3
 80092f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092f4:	00e2      	lsls	r2, r4, #3
 80092f6:	4614      	mov	r4, r2
 80092f8:	461d      	mov	r5, r3
 80092fa:	eb14 030a 	adds.w	r3, r4, sl
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	eb45 030b 	adc.w	r3, r5, fp
 8009304:	607b      	str	r3, [r7, #4]
 8009306:	f04f 0200 	mov.w	r2, #0
 800930a:	f04f 0300 	mov.w	r3, #0
 800930e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009312:	4629      	mov	r1, r5
 8009314:	028b      	lsls	r3, r1, #10
 8009316:	4621      	mov	r1, r4
 8009318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800931c:	4621      	mov	r1, r4
 800931e:	028a      	lsls	r2, r1, #10
 8009320:	4610      	mov	r0, r2
 8009322:	4619      	mov	r1, r3
 8009324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009326:	2200      	movs	r2, #0
 8009328:	60bb      	str	r3, [r7, #8]
 800932a:	60fa      	str	r2, [r7, #12]
 800932c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009330:	f7f7 fcc2 	bl	8000cb8 <__aeabi_uldivmod>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4613      	mov	r3, r2
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800933c:	4b0b      	ldr	r3, [pc, #44]	@ (800936c <HAL_RCC_GetSysClockFreq+0x180>)
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	0c1b      	lsrs	r3, r3, #16
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	3301      	adds	r3, #1
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800934c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	fbb2 f3f3 	udiv	r3, r2, r3
 8009354:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009356:	e002      	b.n	800935e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009358:	4b05      	ldr	r3, [pc, #20]	@ (8009370 <HAL_RCC_GetSysClockFreq+0x184>)
 800935a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800935c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800935e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009360:	4618      	mov	r0, r3
 8009362:	3740      	adds	r7, #64	@ 0x40
 8009364:	46bd      	mov	sp, r7
 8009366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800936a:	bf00      	nop
 800936c:	40023800 	.word	0x40023800
 8009370:	00f42400 	.word	0x00f42400
 8009374:	017d7840 	.word	0x017d7840

08009378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009378:	b480      	push	{r7}
 800937a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800937c:	4b03      	ldr	r3, [pc, #12]	@ (800938c <HAL_RCC_GetHCLKFreq+0x14>)
 800937e:	681b      	ldr	r3, [r3, #0]
}
 8009380:	4618      	mov	r0, r3
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20000010 	.word	0x20000010

08009390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009394:	f7ff fff0 	bl	8009378 <HAL_RCC_GetHCLKFreq>
 8009398:	4602      	mov	r2, r0
 800939a:	4b05      	ldr	r3, [pc, #20]	@ (80093b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	0a9b      	lsrs	r3, r3, #10
 80093a0:	f003 0307 	and.w	r3, r3, #7
 80093a4:	4903      	ldr	r1, [pc, #12]	@ (80093b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093a6:	5ccb      	ldrb	r3, [r1, r3]
 80093a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	40023800 	.word	0x40023800
 80093b4:	0802508c 	.word	0x0802508c

080093b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093bc:	f7ff ffdc 	bl	8009378 <HAL_RCC_GetHCLKFreq>
 80093c0:	4602      	mov	r2, r0
 80093c2:	4b05      	ldr	r3, [pc, #20]	@ (80093d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	0b5b      	lsrs	r3, r3, #13
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	4903      	ldr	r1, [pc, #12]	@ (80093dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80093ce:	5ccb      	ldrb	r3, [r1, r3]
 80093d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	40023800 	.word	0x40023800
 80093dc:	0802508c 	.word	0x0802508c

080093e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d105      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009404:	2b00      	cmp	r3, #0
 8009406:	d035      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009408:	4b67      	ldr	r3, [pc, #412]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800940a:	2200      	movs	r2, #0
 800940c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800940e:	f7fa fe83 	bl	8004118 <HAL_GetTick>
 8009412:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009414:	e008      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009416:	f7fa fe7f 	bl	8004118 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	2b02      	cmp	r3, #2
 8009422:	d901      	bls.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e0ba      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009428:	4b60      	ldr	r3, [pc, #384]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1f0      	bne.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	019a      	lsls	r2, r3, #6
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	071b      	lsls	r3, r3, #28
 8009440:	495a      	ldr	r1, [pc, #360]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009442:	4313      	orrs	r3, r2
 8009444:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009448:	4b57      	ldr	r3, [pc, #348]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800944a:	2201      	movs	r2, #1
 800944c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800944e:	f7fa fe63 	bl	8004118 <HAL_GetTick>
 8009452:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009454:	e008      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009456:	f7fa fe5f 	bl	8004118 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	2b02      	cmp	r3, #2
 8009462:	d901      	bls.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e09a      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009468:	4b50      	ldr	r3, [pc, #320]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0f0      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 8083 	beq.w	8009588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	4b49      	ldr	r3, [pc, #292]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948a:	4a48      	ldr	r2, [pc, #288]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800948c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009490:	6413      	str	r3, [r2, #64]	@ 0x40
 8009492:	4b46      	ldr	r3, [pc, #280]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800949e:	4b44      	ldr	r3, [pc, #272]	@ (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a43      	ldr	r2, [pc, #268]	@ (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094aa:	f7fa fe35 	bl	8004118 <HAL_GetTick>
 80094ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094b0:	e008      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80094b2:	f7fa fe31 	bl	8004118 <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d901      	bls.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e06c      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094c4:	4b3a      	ldr	r3, [pc, #232]	@ (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0f0      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80094d0:	4b36      	ldr	r3, [pc, #216]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d02f      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d028      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094ee:	4b2f      	ldr	r3, [pc, #188]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80094f8:	4b2e      	ldr	r3, [pc, #184]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094fa:	2201      	movs	r2, #1
 80094fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80094fe:	4b2d      	ldr	r3, [pc, #180]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009504:	4a29      	ldr	r2, [pc, #164]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800950a:	4b28      	ldr	r3, [pc, #160]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800950c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b01      	cmp	r3, #1
 8009514:	d114      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009516:	f7fa fdff 	bl	8004118 <HAL_GetTick>
 800951a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800951c:	e00a      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800951e:	f7fa fdfb 	bl	8004118 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800952c:	4293      	cmp	r3, r2
 800952e:	d901      	bls.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e034      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009534:	4b1d      	ldr	r3, [pc, #116]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0ee      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009548:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800954c:	d10d      	bne.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800954e:	4b17      	ldr	r3, [pc, #92]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800955e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009562:	4912      	ldr	r1, [pc, #72]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009564:	4313      	orrs	r3, r2
 8009566:	608b      	str	r3, [r1, #8]
 8009568:	e005      	b.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800956a:	4b10      	ldr	r3, [pc, #64]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	4a0f      	ldr	r2, [pc, #60]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009570:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009574:	6093      	str	r3, [r2, #8]
 8009576:	4b0d      	ldr	r3, [pc, #52]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009578:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009582:	490a      	ldr	r1, [pc, #40]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009584:	4313      	orrs	r3, r2
 8009586:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0308 	and.w	r3, r3, #8
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7c1a      	ldrb	r2, [r3, #16]
 8009598:	4b07      	ldr	r3, [pc, #28]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800959a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	42470068 	.word	0x42470068
 80095ac:	40023800 	.word	0x40023800
 80095b0:	40007000 	.word	0x40007000
 80095b4:	42470e40 	.word	0x42470e40
 80095b8:	424711e0 	.word	0x424711e0

080095bc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80095c2:	f7fa fda9 	bl	8004118 <HAL_GetTick>
 80095c6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80095c8:	4b5d      	ldr	r3, [pc, #372]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a5c      	ldr	r2, [pc, #368]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80095ce:	f043 0301 	orr.w	r3, r3, #1
 80095d2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80095d4:	e008      	b.n	80095e8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095d6:	f7fa fd9f 	bl	8004118 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d901      	bls.n	80095e8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e0a7      	b.n	8009738 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80095e8:	4b55      	ldr	r3, [pc, #340]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 0302 	and.w	r3, r3, #2
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0f0      	beq.n	80095d6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80095f4:	4b52      	ldr	r3, [pc, #328]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a51      	ldr	r2, [pc, #324]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80095fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009600:	f7fa fd8a 	bl	8004118 <HAL_GetTick>
 8009604:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8009606:	4b4e      	ldr	r3, [pc, #312]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 8009608:	2200      	movs	r2, #0
 800960a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800960c:	e00a      	b.n	8009624 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800960e:	f7fa fd83 	bl	8004118 <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800961c:	4293      	cmp	r3, r2
 800961e:	d901      	bls.n	8009624 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e089      	b.n	8009738 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009624:	4b46      	ldr	r3, [pc, #280]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f003 030c 	and.w	r3, r3, #12
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1ee      	bne.n	800960e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009630:	f7fa fd72 	bl	8004118 <HAL_GetTick>
 8009634:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8009636:	4b42      	ldr	r3, [pc, #264]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a41      	ldr	r2, [pc, #260]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 800963c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8009640:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009642:	e008      	b.n	8009656 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009644:	f7fa fd68 	bl	8004118 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	2b64      	cmp	r3, #100	@ 0x64
 8009650:	d901      	bls.n	8009656 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	e070      	b.n	8009738 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009656:	4b3a      	ldr	r3, [pc, #232]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1f0      	bne.n	8009644 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009662:	f7fa fd59 	bl	8004118 <HAL_GetTick>
 8009666:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009668:	4b35      	ldr	r3, [pc, #212]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a34      	ldr	r2, [pc, #208]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 800966e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009672:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009674:	e008      	b.n	8009688 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009676:	f7fa fd4f 	bl	8004118 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	2b02      	cmp	r3, #2
 8009682:	d901      	bls.n	8009688 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e057      	b.n	8009738 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009688:	4b2d      	ldr	r3, [pc, #180]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1f0      	bne.n	8009676 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009694:	f7fa fd40 	bl	8004118 <HAL_GetTick>
 8009698:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800969a:	4b29      	ldr	r3, [pc, #164]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a28      	ldr	r2, [pc, #160]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096a4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80096a6:	e008      	b.n	80096ba <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80096a8:	f7fa fd36 	bl	8004118 <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d901      	bls.n	80096ba <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e03e      	b.n	8009738 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80096ba:	4b21      	ldr	r3, [pc, #132]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1f0      	bne.n	80096a8 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80096c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096c8:	4a1e      	ldr	r2, [pc, #120]	@ (8009744 <HAL_RCC_DeInit+0x188>)
 80096ca:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80096cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096ce:	4a1e      	ldr	r2, [pc, #120]	@ (8009748 <HAL_RCC_DeInit+0x18c>)
 80096d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80096d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	4a19      	ldr	r2, [pc, #100]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096da:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80096de:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80096e0:	4b17      	ldr	r3, [pc, #92]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	4a16      	ldr	r2, [pc, #88]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096ea:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80096ec:	4b14      	ldr	r3, [pc, #80]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	4a13      	ldr	r2, [pc, #76]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096f2:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 80096f6:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80096f8:	4b11      	ldr	r3, [pc, #68]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	4a10      	ldr	r2, [pc, #64]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 80096fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009702:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8009704:	4b0e      	ldr	r3, [pc, #56]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 8009706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009708:	4a0d      	ldr	r2, [pc, #52]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 800970a:	f023 0301 	bic.w	r3, r3, #1
 800970e:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8009710:	4b0b      	ldr	r3, [pc, #44]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 8009712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009714:	4a0a      	ldr	r2, [pc, #40]	@ (8009740 <HAL_RCC_DeInit+0x184>)
 8009716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800971a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800971c:	4b0b      	ldr	r3, [pc, #44]	@ (800974c <HAL_RCC_DeInit+0x190>)
 800971e:	4a0c      	ldr	r2, [pc, #48]	@ (8009750 <HAL_RCC_DeInit+0x194>)
 8009720:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8009722:	4b0c      	ldr	r3, [pc, #48]	@ (8009754 <HAL_RCC_DeInit+0x198>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4618      	mov	r0, r3
 8009728:	f7fa fcb2 	bl	8004090 <HAL_InitTick>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8009736:	2300      	movs	r3, #0
  }
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	40023800 	.word	0x40023800
 8009744:	04003010 	.word	0x04003010
 8009748:	20003000 	.word	0x20003000
 800974c:	20000010 	.word	0x20000010
 8009750:	00f42400 	.word	0x00f42400
 8009754:	20000014 	.word	0x20000014

08009758 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e073      	b.n	8009856 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	7f5b      	ldrb	r3, [r3, #29]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d105      	bne.n	8009784 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7fa f87e 	bl	8003880 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f003 0310 	and.w	r3, r3, #16
 8009794:	2b10      	cmp	r3, #16
 8009796:	d055      	beq.n	8009844 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	22ca      	movs	r2, #202	@ 0xca
 800979e:	625a      	str	r2, [r3, #36]	@ 0x24
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2253      	movs	r2, #83	@ 0x53
 80097a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fbd3 	bl	8009f54 <RTC_EnterInitMode>
 80097ae:	4603      	mov	r3, r0
 80097b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d12c      	bne.n	8009812 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	6812      	ldr	r2, [r2, #0]
 80097c2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80097c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097ca:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6899      	ldr	r1, [r3, #8]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685a      	ldr	r2, [r3, #4]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	431a      	orrs	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	431a      	orrs	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	68d2      	ldr	r2, [r2, #12]
 80097f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6919      	ldr	r1, [r3, #16]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	041a      	lsls	r2, r3, #16
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fbda 	bl	8009fc2 <RTC_ExitInitMode>
 800980e:	4603      	mov	r3, r0
 8009810:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009812:	7bfb      	ldrb	r3, [r7, #15]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d110      	bne.n	800983a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009826:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	699a      	ldr	r2, [r3, #24]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	22ff      	movs	r2, #255	@ 0xff
 8009840:	625a      	str	r2, [r3, #36]	@ 0x24
 8009842:	e001      	b.n	8009848 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d102      	bne.n	8009854 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009854:	7bfb      	ldrb	r3, [r7, #15]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800985e:	b590      	push	{r4, r7, lr}
 8009860:	b087      	sub	sp, #28
 8009862:	af00      	add	r7, sp, #0
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	60b9      	str	r1, [r7, #8]
 8009868:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	7f1b      	ldrb	r3, [r3, #28]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d101      	bne.n	800987a <HAL_RTC_SetTime+0x1c>
 8009876:	2302      	movs	r3, #2
 8009878:	e087      	b.n	800998a <HAL_RTC_SetTime+0x12c>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2201      	movs	r2, #1
 800987e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2202      	movs	r2, #2
 8009884:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d126      	bne.n	80098da <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009896:	2b00      	cmp	r3, #0
 8009898:	d102      	bne.n	80098a0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2200      	movs	r2, #0
 800989e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 fbb1 	bl	800a00c <RTC_ByteToBcd2>
 80098aa:	4603      	mov	r3, r0
 80098ac:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	785b      	ldrb	r3, [r3, #1]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 fbaa 	bl	800a00c <RTC_ByteToBcd2>
 80098b8:	4603      	mov	r3, r0
 80098ba:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098bc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	789b      	ldrb	r3, [r3, #2]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 fba2 	bl	800a00c <RTC_ByteToBcd2>
 80098c8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098ca:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	78db      	ldrb	r3, [r3, #3]
 80098d2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098d4:	4313      	orrs	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	e018      	b.n	800990c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2200      	movs	r2, #0
 80098ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	785b      	ldrb	r3, [r3, #1]
 80098f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098fa:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009900:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	78db      	ldrb	r3, [r3, #3]
 8009906:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009908:	4313      	orrs	r3, r2
 800990a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	22ca      	movs	r2, #202	@ 0xca
 8009912:	625a      	str	r2, [r3, #36]	@ 0x24
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2253      	movs	r2, #83	@ 0x53
 800991a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f000 fb19 	bl	8009f54 <RTC_EnterInitMode>
 8009922:	4603      	mov	r3, r0
 8009924:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009926:	7cfb      	ldrb	r3, [r7, #19]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d120      	bne.n	800996e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009936:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800993a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689a      	ldr	r2, [r3, #8]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800994a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6899      	ldr	r1, [r3, #8]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	431a      	orrs	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	430a      	orrs	r2, r1
 8009962:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f000 fb2c 	bl	8009fc2 <RTC_ExitInitMode>
 800996a:	4603      	mov	r3, r0
 800996c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800996e:	7cfb      	ldrb	r3, [r7, #19]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	22ff      	movs	r2, #255	@ 0xff
 8009980:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	771a      	strb	r2, [r3, #28]

  return status;
 8009988:	7cfb      	ldrb	r3, [r7, #19]
}
 800998a:	4618      	mov	r0, r3
 800998c:	371c      	adds	r7, #28
 800998e:	46bd      	mov	sp, r7
 8009990:	bd90      	pop	{r4, r7, pc}

08009992 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b086      	sub	sp, #24
 8009996:	af00      	add	r7, sp, #0
 8009998:	60f8      	str	r0, [r7, #12]
 800999a:	60b9      	str	r1, [r7, #8]
 800999c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80099c4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80099c8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	0c1b      	lsrs	r3, r3, #16
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	0a1b      	lsrs	r3, r3, #8
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	0d9b      	lsrs	r3, r3, #22
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d11a      	bne.n	8009a44 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fb18 	bl	800a048 <RTC_Bcd2ToByte>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	785b      	ldrb	r3, [r3, #1]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 fb0f 	bl	800a048 <RTC_Bcd2ToByte>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	789b      	ldrb	r3, [r3, #2]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fb06 	bl	800a048 <RTC_Bcd2ToByte>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	461a      	mov	r2, r3
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a4e:	b590      	push	{r4, r7, lr}
 8009a50:	b087      	sub	sp, #28
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	7f1b      	ldrb	r3, [r3, #28]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d101      	bne.n	8009a6a <HAL_RTC_SetDate+0x1c>
 8009a66:	2302      	movs	r3, #2
 8009a68:	e071      	b.n	8009b4e <HAL_RTC_SetDate+0x100>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2202      	movs	r2, #2
 8009a74:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10e      	bne.n	8009a9a <HAL_RTC_SetDate+0x4c>
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	785b      	ldrb	r3, [r3, #1]
 8009a80:	f003 0310 	and.w	r3, r3, #16
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d008      	beq.n	8009a9a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	785b      	ldrb	r3, [r3, #1]
 8009a8c:	f023 0310 	bic.w	r3, r3, #16
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	330a      	adds	r3, #10
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d11c      	bne.n	8009ada <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	78db      	ldrb	r3, [r3, #3]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fab1 	bl	800a00c <RTC_ByteToBcd2>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	785b      	ldrb	r3, [r3, #1]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 faaa 	bl	800a00c <RTC_ByteToBcd2>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009abc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	789b      	ldrb	r3, [r3, #2]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 faa2 	bl	800a00c <RTC_ByteToBcd2>
 8009ac8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009aca:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	e00e      	b.n	8009af8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	78db      	ldrb	r3, [r3, #3]
 8009ade:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	785b      	ldrb	r3, [r3, #1]
 8009ae4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ae6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009aec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009af4:	4313      	orrs	r3, r2
 8009af6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	22ca      	movs	r2, #202	@ 0xca
 8009afe:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2253      	movs	r2, #83	@ 0x53
 8009b06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fa23 	bl	8009f54 <RTC_EnterInitMode>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009b12:	7cfb      	ldrb	r3, [r7, #19]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10c      	bne.n	8009b32 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009b22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b26:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 fa4a 	bl	8009fc2 <RTC_ExitInitMode>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009b32:	7cfb      	ldrb	r3, [r7, #19]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d102      	bne.n	8009b3e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	22ff      	movs	r2, #255	@ 0xff
 8009b44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	771a      	strb	r2, [r3, #28]

  return status;
 8009b4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd90      	pop	{r4, r7, pc}

08009b56 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b086      	sub	sp, #24
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009b70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b74:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	0c1b      	lsrs	r3, r3, #16
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	0a1b      	lsrs	r3, r3, #8
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	f003 031f 	and.w	r3, r3, #31
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	0b5b      	lsrs	r3, r3, #13
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	f003 0307 	and.w	r3, r3, #7
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d11a      	bne.n	8009bea <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	78db      	ldrb	r3, [r3, #3]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fa45 	bl	800a048 <RTC_Bcd2ToByte>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	785b      	ldrb	r3, [r3, #1]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 fa3c 	bl	800a048 <RTC_Bcd2ToByte>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	789b      	ldrb	r3, [r3, #2]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fa33 	bl	800a048 <RTC_Bcd2ToByte>
 8009be2:	4603      	mov	r3, r0
 8009be4:	461a      	mov	r2, r3
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009bf4:	b590      	push	{r4, r7, lr}
 8009bf6:	b089      	sub	sp, #36	@ 0x24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009c00:	4b9b      	ldr	r3, [pc, #620]	@ (8009e70 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a9b      	ldr	r2, [pc, #620]	@ (8009e74 <HAL_RTC_SetAlarm_IT+0x280>)
 8009c06:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0a:	0adb      	lsrs	r3, r3, #11
 8009c0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009c10:	fb02 f303 	mul.w	r3, r2, r3
 8009c14:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8009c16:	2300      	movs	r3, #0
 8009c18:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	7f1b      	ldrb	r3, [r3, #28]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d101      	bne.n	8009c2a <HAL_RTC_SetAlarm_IT+0x36>
 8009c26:	2302      	movs	r3, #2
 8009c28:	e11e      	b.n	8009e68 <HAL_RTC_SetAlarm_IT+0x274>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2202      	movs	r2, #2
 8009c34:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d137      	bne.n	8009cac <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d102      	bne.n	8009c50 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 f9d9 	bl	800a00c <RTC_ByteToBcd2>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	785b      	ldrb	r3, [r3, #1]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f9d2 	bl	800a00c <RTC_ByteToBcd2>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c6c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	789b      	ldrb	r3, [r3, #2]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 f9ca 	bl	800a00c <RTC_ByteToBcd2>
 8009c78:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c7a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	78db      	ldrb	r3, [r3, #3]
 8009c82:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c84:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f000 f9bc 	bl	800a00c <RTC_ByteToBcd2>
 8009c94:	4603      	mov	r3, r0
 8009c96:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c98:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009ca0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	61fb      	str	r3, [r7, #28]
 8009caa:	e023      	b.n	8009cf4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d102      	bne.n	8009cc0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	785b      	ldrb	r3, [r3, #1]
 8009cca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009ccc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009cd2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	78db      	ldrb	r3, [r3, #3]
 8009cd8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cda:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ce2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009ce4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009cea:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	22ca      	movs	r2, #202	@ 0xca
 8009d06:	625a      	str	r2, [r3, #36]	@ 0x24
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2253      	movs	r2, #83	@ 0x53
 8009d0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d18:	d142      	bne.n	8009da0 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d28:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009d3a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10b      	bne.n	8009d60 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	22ff      	movs	r2, #255	@ 0xff
 8009d4e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2203      	movs	r2, #3
 8009d54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e083      	b.n	8009e68 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0e6      	beq.n	8009d3c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69fa      	ldr	r2, [r7, #28]
 8009d74:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689a      	ldr	r2, [r3, #8]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d8c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d9c:	609a      	str	r2, [r3, #8]
 8009d9e:	e04c      	b.n	8009e3a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689a      	ldr	r2, [r3, #8]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009dae:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009dc0:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8009e70 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8009e74 <HAL_RTC_SetAlarm_IT+0x280>)
 8009dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dcc:	0adb      	lsrs	r3, r3, #11
 8009dce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009dd2:	fb02 f303 	mul.w	r3, r2, r3
 8009dd6:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10b      	bne.n	8009dfc <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	22ff      	movs	r2, #255	@ 0xff
 8009dea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2203      	movs	r2, #3
 8009df0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	e035      	b.n	8009e68 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f003 0302 	and.w	r3, r3, #2
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0e6      	beq.n	8009dd8 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	69fa      	ldr	r2, [r7, #28]
 8009e10:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69ba      	ldr	r2, [r7, #24]
 8009e18:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689a      	ldr	r2, [r3, #8]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e28:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	689a      	ldr	r2, [r3, #8]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009e38:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e78 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8009e78 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e44:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009e46:	4b0c      	ldr	r3, [pc, #48]	@ (8009e78 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8009e78 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e50:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	22ff      	movs	r2, #255	@ 0xff
 8009e58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3724      	adds	r7, #36	@ 0x24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd90      	pop	{r4, r7, pc}
 8009e70:	20000010 	.word	0x20000010
 8009e74:	10624dd3 	.word	0x10624dd3
 8009e78:	40013c00 	.word	0x40013c00

08009e7c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009e84:	4b1f      	ldr	r3, [pc, #124]	@ (8009f04 <HAL_RTC_AlarmIRQHandler+0x88>)
 8009e86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009e8a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d012      	beq.n	8009ec0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009eb8:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7f9 fbb4 	bl	8003628 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d012      	beq.n	8009ef4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009eec:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f8fa 	bl	800a0e8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	775a      	strb	r2, [r3, #29]
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	40013c00 	.word	0x40013c00

08009f08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a0d      	ldr	r2, [pc, #52]	@ (8009f50 <HAL_RTC_WaitForSynchro+0x48>)
 8009f1a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f1c:	f7fa f8fc 	bl	8004118 <HAL_GetTick>
 8009f20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f22:	e009      	b.n	8009f38 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f24:	f7fa f8f8 	bl	8004118 <HAL_GetTick>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f32:	d901      	bls.n	8009f38 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e007      	b.n	8009f48 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0ee      	beq.n	8009f24 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	00013f5f 	.word	0x00013f5f

08009f54 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d122      	bne.n	8009fb8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68da      	ldr	r2, [r3, #12]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009f80:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f82:	f7fa f8c9 	bl	8004118 <HAL_GetTick>
 8009f86:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f88:	e00c      	b.n	8009fa4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f8a:	f7fa f8c5 	bl	8004118 <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f98:	d904      	bls.n	8009fa4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2204      	movs	r2, #4
 8009f9e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d102      	bne.n	8009fb8 <RTC_EnterInitMode+0x64>
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d1e8      	bne.n	8009f8a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68da      	ldr	r2, [r3, #12]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fdc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	f003 0320 	and.w	r3, r3, #32
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff ff8b 	bl	8009f08 <HAL_RTC_WaitForSynchro>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d004      	beq.n	800a002 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2204      	movs	r2, #4
 8009ffc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a002:	7bfb      	ldrb	r3, [r7, #15]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a01a:	e005      	b.n	800a028 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	3b0a      	subs	r3, #10
 800a026:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	2b09      	cmp	r3, #9
 800a02c:	d8f6      	bhi.n	800a01c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	b2db      	uxtb	r3, r3
 800a032:	011b      	lsls	r3, r3, #4
 800a034:	b2da      	uxtb	r2, r3
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	4313      	orrs	r3, r2
 800a03a:	b2db      	uxtb	r3, r3
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800a056:	79fb      	ldrb	r3, [r7, #7]
 800a058:	091b      	lsrs	r3, r3, #4
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	461a      	mov	r2, r3
 800a05e:	4613      	mov	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4413      	add	r3, r2
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	f003 030f 	and.w	r3, r3, #15
 800a072:	b2db      	uxtb	r3, r3
 800a074:	4413      	add	r3, r2
 800a076:	b2db      	uxtb	r3, r3
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3350      	adds	r3, #80	@ 0x50
 800a09a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	601a      	str	r2, [r3, #0]
}
 800a0ac:	bf00      	nop
 800a0ae:	371c      	adds	r7, #28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3350      	adds	r3, #80	@ 0x50
 800a0cc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e022      	b.n	800a154 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d105      	bne.n	800a126 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7f9 fbe1 	bl	80038e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2203      	movs	r2, #3
 800a12a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f814 	bl	800a15c <HAL_SD_InitCard>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e00a      	b.n	800a154 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a15c:	b5b0      	push	{r4, r5, r7, lr}
 800a15e:	b08e      	sub	sp, #56	@ 0x38
 800a160:	af04      	add	r7, sp, #16
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a164:	2300      	movs	r3, #0
 800a166:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a168:	2300      	movs	r3, #0
 800a16a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a16c:	2300      	movs	r3, #0
 800a16e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a170:	2300      	movs	r3, #0
 800a172:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a174:	2300      	movs	r3, #0
 800a176:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a178:	2376      	movs	r3, #118	@ 0x76
 800a17a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681d      	ldr	r5, [r3, #0]
 800a180:	466c      	mov	r4, sp
 800a182:	f107 0314 	add.w	r3, r7, #20
 800a186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a18a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a18e:	f107 0308 	add.w	r3, r7, #8
 800a192:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a194:	4628      	mov	r0, r5
 800a196:	f003 f8ad 	bl	800d2f4 <SDIO_Init>
 800a19a:	4603      	mov	r3, r0
 800a19c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e04f      	b.n	800a24c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a1ac:	4b29      	ldr	r3, [pc, #164]	@ (800a254 <HAL_SD_InitCard+0xf8>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f003 f8e5 	bl	800d386 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a1bc:	4b25      	ldr	r3, [pc, #148]	@ (800a254 <HAL_SD_InitCard+0xf8>)
 800a1be:	2201      	movs	r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a1c2:	2002      	movs	r0, #2
 800a1c4:	f7f9 ffb4 	bl	8004130 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fe79 	bl	800aec0 <SD_PowerON>
 800a1ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00b      	beq.n	800a1ee <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e02e      	b.n	800a24c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fd98 	bl	800ad24 <SD_InitCard>
 800a1f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00b      	beq.n	800a214 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	431a      	orrs	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e01b      	b.n	800a24c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a21c:	4618      	mov	r0, r3
 800a21e:	f003 f944 	bl	800d4aa <SDMMC_CmdBlockLength>
 800a222:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00f      	beq.n	800a24a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a0a      	ldr	r2, [pc, #40]	@ (800a258 <HAL_SD_InitCard+0xfc>)
 800a230:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	431a      	orrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3728      	adds	r7, #40	@ 0x28
 800a250:	46bd      	mov	sp, r7
 800a252:	bdb0      	pop	{r4, r5, r7, pc}
 800a254:	422580a0 	.word	0x422580a0
 800a258:	004005ff 	.word	0x004005ff

0800a25c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b092      	sub	sp, #72	@ 0x48
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a26a:	f7f9 ff55 	bl	8004118 <HAL_GetTick>
 800a26e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d107      	bne.n	800a28e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a282:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e1c5      	b.n	800a61a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b01      	cmp	r3, #1
 800a298:	f040 81b8 	bne.w	800a60c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	441a      	add	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d907      	bls.n	800a2c0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e1ac      	b.n	800a61a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2203      	movs	r2, #3
 800a2c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d002      	beq.n	800a2de <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2da:	025b      	lsls	r3, r3, #9
 800a2dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2de:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	025b      	lsls	r3, r3, #9
 800a2e8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a2ea:	2390      	movs	r3, #144	@ 0x90
 800a2ec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f107 0214 	add.w	r2, r7, #20
 800a302:	4611      	mov	r1, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f003 f8a4 	bl	800d452 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d90a      	bls.n	800a326 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2202      	movs	r2, #2
 800a314:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a31c:	4618      	mov	r0, r3
 800a31e:	f003 f908 	bl	800d532 <SDMMC_CmdReadMultiBlock>
 800a322:	6478      	str	r0, [r7, #68]	@ 0x44
 800a324:	e009      	b.n	800a33a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2201      	movs	r2, #1
 800a32a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a332:	4618      	mov	r0, r3
 800a334:	f003 f8db 	bl	800d4ee <SDMMC_CmdReadSingleBlock>
 800a338:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a33a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d012      	beq.n	800a366 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a7e      	ldr	r2, [pc, #504]	@ (800a540 <HAL_SD_ReadBlocks+0x2e4>)
 800a346:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a34c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a34e:	431a      	orrs	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e159      	b.n	800a61a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a36a:	e061      	b.n	800a430 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d03c      	beq.n	800a3f4 <HAL_SD_ReadBlocks+0x198>
 800a37a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d039      	beq.n	800a3f4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a380:	2300      	movs	r3, #0
 800a382:	643b      	str	r3, [r7, #64]	@ 0x40
 800a384:	e033      	b.n	800a3ee <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f002 ffdd 	bl	800d34a <SDIO_ReadFIFO>
 800a390:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a394:	b2da      	uxtb	r2, r3
 800a396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a398:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a39c:	3301      	adds	r3, #1
 800a39e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a8:	0a1b      	lsrs	r3, r3, #8
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3be:	0c1b      	lsrs	r3, r3, #16
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d4:	0e1b      	lsrs	r3, r3, #24
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3de:	3301      	adds	r3, #1
 800a3e0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800a3e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3f0:	2b07      	cmp	r3, #7
 800a3f2:	d9c8      	bls.n	800a386 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a3f4:	f7f9 fe90 	bl	8004118 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a400:	429a      	cmp	r2, r3
 800a402:	d902      	bls.n	800a40a <HAL_SD_ReadBlocks+0x1ae>
 800a404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a406:	2b00      	cmp	r3, #0
 800a408:	d112      	bne.n	800a430 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a4c      	ldr	r2, [pc, #304]	@ (800a540 <HAL_SD_ReadBlocks+0x2e4>)
 800a410:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a416:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e0f4      	b.n	800a61a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a436:	f240 332a 	movw	r3, #810	@ 0x32a
 800a43a:	4013      	ands	r3, r2
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d095      	beq.n	800a36c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d022      	beq.n	800a494 <HAL_SD_ReadBlocks+0x238>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d91f      	bls.n	800a494 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d01b      	beq.n	800a494 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4618      	mov	r0, r3
 800a462:	f003 f8cd 	bl	800d600 <SDMMC_CmdStopTransfer>
 800a466:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d012      	beq.n	800a494 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a33      	ldr	r2, [pc, #204]	@ (800a540 <HAL_SD_ReadBlocks+0x2e4>)
 800a474:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a47a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a47c:	431a      	orrs	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2201      	movs	r2, #1
 800a486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e0c2      	b.n	800a61a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a49a:	f003 0308 	and.w	r3, r3, #8
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d106      	bne.n	800a4b0 <HAL_SD_ReadBlocks+0x254>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d012      	beq.n	800a4d6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a22      	ldr	r2, [pc, #136]	@ (800a540 <HAL_SD_ReadBlocks+0x2e4>)
 800a4b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4bc:	f043 0208 	orr.w	r2, r3, #8
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e0a1      	b.n	800a61a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4dc:	f003 0302 	and.w	r3, r3, #2
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d012      	beq.n	800a50a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a15      	ldr	r2, [pc, #84]	@ (800a540 <HAL_SD_ReadBlocks+0x2e4>)
 800a4ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f0:	f043 0202 	orr.w	r2, r3, #2
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	e087      	b.n	800a61a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a510:	f003 0320 	and.w	r3, r3, #32
 800a514:	2b00      	cmp	r3, #0
 800a516:	d064      	beq.n	800a5e2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a08      	ldr	r2, [pc, #32]	@ (800a540 <HAL_SD_ReadBlocks+0x2e4>)
 800a51e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a524:	f043 0220 	orr.w	r2, r3, #32
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e06d      	b.n	800a61a <HAL_SD_ReadBlocks+0x3be>
 800a53e:	bf00      	nop
 800a540:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4618      	mov	r0, r3
 800a54a:	f002 fefe 	bl	800d34a <SDIO_ReadFIFO>
 800a54e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800a550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a552:	b2da      	uxtb	r2, r3
 800a554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a556:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55a:	3301      	adds	r3, #1
 800a55c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a560:	3b01      	subs	r3, #1
 800a562:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a566:	0a1b      	lsrs	r3, r3, #8
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a56c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a570:	3301      	adds	r3, #1
 800a572:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a576:	3b01      	subs	r3, #1
 800a578:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	0c1b      	lsrs	r3, r3, #16
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a582:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a586:	3301      	adds	r3, #1
 800a588:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a58a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a58c:	3b01      	subs	r3, #1
 800a58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a592:	0e1b      	lsrs	r3, r3, #24
 800a594:	b2da      	uxtb	r2, r3
 800a596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a598:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a59a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59c:	3301      	adds	r3, #1
 800a59e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a5a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a5a6:	f7f9 fdb7 	bl	8004118 <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d902      	bls.n	800a5bc <HAL_SD_ReadBlocks+0x360>
 800a5b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d112      	bne.n	800a5e2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a18      	ldr	r2, [pc, #96]	@ (800a624 <HAL_SD_ReadBlocks+0x3c8>)
 800a5c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e01b      	b.n	800a61a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <HAL_SD_ReadBlocks+0x39a>
 800a5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1a6      	bne.n	800a544 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a5fe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	e006      	b.n	800a61a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a610:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
  }
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3748      	adds	r7, #72	@ 0x48
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	004005ff 	.word	0x004005ff

0800a628 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b092      	sub	sp, #72	@ 0x48
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a636:	f7f9 fd6f 	bl	8004118 <HAL_GetTick>
 800a63a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d107      	bne.n	800a65a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a64e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e16d      	b.n	800a936 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b01      	cmp	r3, #1
 800a664:	f040 8160 	bne.w	800a928 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a66e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	441a      	add	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a678:	429a      	cmp	r2, r3
 800a67a:	d907      	bls.n	800a68c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a680:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e154      	b.n	800a936 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2203      	movs	r2, #3
 800a690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2200      	movs	r2, #0
 800a69a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d002      	beq.n	800a6aa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a6:	025b      	lsls	r3, r3, #9
 800a6a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	025b      	lsls	r3, r3, #9
 800a6b4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a6b6:	2390      	movs	r3, #144	@ 0x90
 800a6b8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f107 0218 	add.w	r2, r7, #24
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f002 febe 	bl	800d452 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d90a      	bls.n	800a6f2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f002 ff66 	bl	800d5ba <SDMMC_CmdWriteMultiBlock>
 800a6ee:	6478      	str	r0, [r7, #68]	@ 0x44
 800a6f0:	e009      	b.n	800a706 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2210      	movs	r2, #16
 800a6f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6fe:	4618      	mov	r0, r3
 800a700:	f002 ff39 	bl	800d576 <SDMMC_CmdWriteSingleBlock>
 800a704:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d012      	beq.n	800a732 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a8b      	ldr	r2, [pc, #556]	@ (800a940 <HAL_SD_WriteBlocks+0x318>)
 800a712:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a71a:	431a      	orrs	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e101      	b.n	800a936 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a736:	e065      	b.n	800a804 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a73e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a742:	2b00      	cmp	r3, #0
 800a744:	d040      	beq.n	800a7c8 <HAL_SD_WriteBlocks+0x1a0>
 800a746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d03d      	beq.n	800a7c8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a74c:	2300      	movs	r3, #0
 800a74e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a750:	e037      	b.n	800a7c2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75a:	3301      	adds	r3, #1
 800a75c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a760:	3b01      	subs	r3, #1
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	021a      	lsls	r2, r3, #8
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a772:	3301      	adds	r3, #1
 800a774:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a778:	3b01      	subs	r3, #1
 800a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	041a      	lsls	r2, r3, #16
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	4313      	orrs	r3, r2
 800a786:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78a:	3301      	adds	r3, #1
 800a78c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a790:	3b01      	subs	r3, #1
 800a792:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	061a      	lsls	r2, r3, #24
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f107 0214 	add.w	r2, r7, #20
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f002 fdd4 	bl	800d364 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a7bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7be:	3301      	adds	r3, #1
 800a7c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c4:	2b07      	cmp	r3, #7
 800a7c6:	d9c4      	bls.n	800a752 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a7c8:	f7f9 fca6 	bl	8004118 <HAL_GetTick>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d902      	bls.n	800a7de <HAL_SD_WriteBlocks+0x1b6>
 800a7d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d112      	bne.n	800a804 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a57      	ldr	r2, [pc, #348]	@ (800a940 <HAL_SD_WriteBlocks+0x318>)
 800a7e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7ec:	431a      	orrs	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a800:	2303      	movs	r3, #3
 800a802:	e098      	b.n	800a936 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a80a:	f240 331a 	movw	r3, #794	@ 0x31a
 800a80e:	4013      	ands	r3, r2
 800a810:	2b00      	cmp	r3, #0
 800a812:	d091      	beq.n	800a738 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a81a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d022      	beq.n	800a868 <HAL_SD_WriteBlocks+0x240>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d91f      	bls.n	800a868 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	d01b      	beq.n	800a868 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4618      	mov	r0, r3
 800a836:	f002 fee3 	bl	800d600 <SDMMC_CmdStopTransfer>
 800a83a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a83c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d012      	beq.n	800a868 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a3e      	ldr	r2, [pc, #248]	@ (800a940 <HAL_SD_WriteBlocks+0x318>)
 800a848:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a84e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a850:	431a      	orrs	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e066      	b.n	800a936 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a86e:	f003 0308 	and.w	r3, r3, #8
 800a872:	2b00      	cmp	r3, #0
 800a874:	d106      	bne.n	800a884 <HAL_SD_WriteBlocks+0x25c>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a87c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a880:	2b00      	cmp	r3, #0
 800a882:	d012      	beq.n	800a8aa <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a2d      	ldr	r2, [pc, #180]	@ (800a940 <HAL_SD_WriteBlocks+0x318>)
 800a88a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a890:	f043 0208 	orr.w	r2, r3, #8
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e045      	b.n	800a936 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d012      	beq.n	800a8de <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a20      	ldr	r2, [pc, #128]	@ (800a940 <HAL_SD_WriteBlocks+0x318>)
 800a8be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c4:	f043 0202 	orr.w	r2, r3, #2
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e02b      	b.n	800a936 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8e4:	f003 0310 	and.w	r3, r3, #16
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d012      	beq.n	800a912 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a13      	ldr	r2, [pc, #76]	@ (800a940 <HAL_SD_WriteBlocks+0x318>)
 800a8f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f8:	f043 0210 	orr.w	r2, r3, #16
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e011      	b.n	800a936 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a91a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	e006      	b.n	800a936 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a92c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
  }
}
 800a936:	4618      	mov	r0, r3
 800a938:	3748      	adds	r7, #72	@ 0x48
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	004005ff 	.word	0x004005ff

0800a944 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a952:	0f9b      	lsrs	r3, r3, #30
 800a954:	b2da      	uxtb	r2, r3
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a95e:	0e9b      	lsrs	r3, r3, #26
 800a960:	b2db      	uxtb	r3, r3
 800a962:	f003 030f 	and.w	r3, r3, #15
 800a966:	b2da      	uxtb	r2, r3
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a970:	0e1b      	lsrs	r3, r3, #24
 800a972:	b2db      	uxtb	r3, r3
 800a974:	f003 0303 	and.w	r3, r3, #3
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a982:	0c1b      	lsrs	r3, r3, #16
 800a984:	b2da      	uxtb	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a98e:	0a1b      	lsrs	r3, r3, #8
 800a990:	b2da      	uxtb	r2, r3
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9a4:	0d1b      	lsrs	r3, r3, #20
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9b0:	0c1b      	lsrs	r3, r3, #16
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	f003 030f 	and.w	r3, r3, #15
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9c2:	0bdb      	lsrs	r3, r3, #15
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9d4:	0b9b      	lsrs	r3, r3, #14
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9e6:	0b5b      	lsrs	r3, r3, #13
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9f8:	0b1b      	lsrs	r3, r3, #12
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d163      	bne.n	800aadc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa18:	009a      	lsls	r2, r3, #2
 800aa1a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aa1e:	4013      	ands	r3, r2
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800aa24:	0f92      	lsrs	r2, r2, #30
 800aa26:	431a      	orrs	r2, r3
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa30:	0edb      	lsrs	r3, r3, #27
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	f003 0307 	and.w	r3, r3, #7
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa42:	0e1b      	lsrs	r3, r3, #24
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa54:	0d5b      	lsrs	r3, r3, #21
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	f003 0307 	and.w	r3, r3, #7
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa66:	0c9b      	lsrs	r3, r3, #18
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa78:	0bdb      	lsrs	r3, r3, #15
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	f003 0307 	and.w	r3, r3, #7
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	7e1b      	ldrb	r3, [r3, #24]
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	f003 0307 	and.w	r3, r3, #7
 800aa9a:	3302      	adds	r3, #2
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800aaa6:	fb03 f202 	mul.w	r2, r3, r2
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	7a1b      	ldrb	r3, [r3, #8]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	f003 030f 	and.w	r3, r3, #15
 800aab8:	2201      	movs	r2, #1
 800aaba:	409a      	lsls	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800aac8:	0a52      	lsrs	r2, r2, #9
 800aaca:	fb03 f202 	mul.w	r2, r3, r2
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aad8:	661a      	str	r2, [r3, #96]	@ 0x60
 800aada:	e031      	b.n	800ab40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d11d      	bne.n	800ab20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aae8:	041b      	lsls	r3, r3, #16
 800aaea:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaf2:	0c1b      	lsrs	r3, r3, #16
 800aaf4:	431a      	orrs	r2, r3
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	3301      	adds	r3, #1
 800ab00:	029a      	lsls	r2, r3, #10
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab14:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	661a      	str	r2, [r3, #96]	@ 0x60
 800ab1e:	e00f      	b.n	800ab40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a58      	ldr	r2, [pc, #352]	@ (800ac88 <HAL_SD_GetCardCSD+0x344>)
 800ab26:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e09d      	b.n	800ac7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab44:	0b9b      	lsrs	r3, r3, #14
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab56:	09db      	lsrs	r3, r3, #7
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab78:	0fdb      	lsrs	r3, r3, #31
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab84:	0f5b      	lsrs	r3, r3, #29
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	f003 0303 	and.w	r3, r3, #3
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab96:	0e9b      	lsrs	r3, r3, #26
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	f003 0307 	and.w	r3, r3, #7
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aba8:	0d9b      	lsrs	r3, r3, #22
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	f003 030f 	and.w	r3, r3, #15
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abba:	0d5b      	lsrs	r3, r3, #21
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	b2da      	uxtb	r2, r3
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abd6:	0c1b      	lsrs	r3, r3, #16
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abea:	0bdb      	lsrs	r3, r3, #15
 800abec:	b2db      	uxtb	r3, r3
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abfe:	0b9b      	lsrs	r3, r3, #14
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac12:	0b5b      	lsrs	r3, r3, #13
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac26:	0b1b      	lsrs	r3, r3, #12
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac3a:	0a9b      	lsrs	r3, r3, #10
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac4e:	0a1b      	lsrs	r3, r3, #8
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac62:	085b      	lsrs	r3, r3, #1
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	004005ff 	.word	0x004005ff

0800ac8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800acf0:	f107 030c 	add.w	r3, r7, #12
 800acf4:	4619      	mov	r1, r3
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f970 	bl	800afdc <SD_SendStatus>
 800acfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	431a      	orrs	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	0a5b      	lsrs	r3, r3, #9
 800ad14:	f003 030f 	and.w	r3, r3, #15
 800ad18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ad1a:	693b      	ldr	r3, [r7, #16]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad24:	b5b0      	push	{r4, r5, r7, lr}
 800ad26:	b094      	sub	sp, #80	@ 0x50
 800ad28:	af04      	add	r7, sp, #16
 800ad2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f002 fb34 	bl	800d3a2 <SDIO_GetPowerState>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d102      	bne.n	800ad46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad40:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ad44:	e0b8      	b.n	800aeb8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	d02f      	beq.n	800adae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f002 fd1b 	bl	800d78e <SDMMC_CmdSendCID>
 800ad58:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <SD_InitCard+0x40>
    {
      return errorstate;
 800ad60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad62:	e0a9      	b.n	800aeb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2100      	movs	r1, #0
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f002 fb5e 	bl	800d42c <SDIO_GetResponse>
 800ad70:	4602      	mov	r2, r0
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2104      	movs	r1, #4
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f002 fb55 	bl	800d42c <SDIO_GetResponse>
 800ad82:	4602      	mov	r2, r0
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2108      	movs	r1, #8
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f002 fb4c 	bl	800d42c <SDIO_GetResponse>
 800ad94:	4602      	mov	r2, r0
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	210c      	movs	r1, #12
 800ada0:	4618      	mov	r0, r3
 800ada2:	f002 fb43 	bl	800d42c <SDIO_GetResponse>
 800ada6:	4602      	mov	r2, r0
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d00d      	beq.n	800add2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f107 020e 	add.w	r2, r7, #14
 800adbe:	4611      	mov	r1, r2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f002 fd21 	bl	800d808 <SDMMC_CmdSetRelAdd>
 800adc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <SD_InitCard+0xae>
    {
      return errorstate;
 800adce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800add0:	e072      	b.n	800aeb8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800add6:	2b03      	cmp	r3, #3
 800add8:	d036      	beq.n	800ae48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800adda:	89fb      	ldrh	r3, [r7, #14]
 800addc:	461a      	mov	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adea:	041b      	lsls	r3, r3, #16
 800adec:	4619      	mov	r1, r3
 800adee:	4610      	mov	r0, r2
 800adf0:	f002 fceb 	bl	800d7ca <SDMMC_CmdSendCSD>
 800adf4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <SD_InitCard+0xdc>
    {
      return errorstate;
 800adfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfe:	e05b      	b.n	800aeb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2100      	movs	r1, #0
 800ae06:	4618      	mov	r0, r3
 800ae08:	f002 fb10 	bl	800d42c <SDIO_GetResponse>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2104      	movs	r1, #4
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f002 fb07 	bl	800d42c <SDIO_GetResponse>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2108      	movs	r1, #8
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f002 fafe 	bl	800d42c <SDIO_GetResponse>
 800ae30:	4602      	mov	r2, r0
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	210c      	movs	r1, #12
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f002 faf5 	bl	800d42c <SDIO_GetResponse>
 800ae42:	4602      	mov	r2, r0
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2104      	movs	r1, #4
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f002 faec 	bl	800d42c <SDIO_GetResponse>
 800ae54:	4603      	mov	r3, r0
 800ae56:	0d1a      	lsrs	r2, r3, #20
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae5c:	f107 0310 	add.w	r3, r7, #16
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff fd6e 	bl	800a944 <HAL_SD_GetCardCSD>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d002      	beq.n	800ae74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae6e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae72:	e021      	b.n	800aeb8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6819      	ldr	r1, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae7c:	041b      	lsls	r3, r3, #16
 800ae7e:	2200      	movs	r2, #0
 800ae80:	461c      	mov	r4, r3
 800ae82:	4615      	mov	r5, r2
 800ae84:	4622      	mov	r2, r4
 800ae86:	462b      	mov	r3, r5
 800ae88:	4608      	mov	r0, r1
 800ae8a:	f002 fbdb 	bl	800d644 <SDMMC_CmdSelDesel>
 800ae8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <SD_InitCard+0x176>
  {
    return errorstate;
 800ae96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae98:	e00e      	b.n	800aeb8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681d      	ldr	r5, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	466c      	mov	r4, sp
 800aea2:	f103 0210 	add.w	r2, r3, #16
 800aea6:	ca07      	ldmia	r2, {r0, r1, r2}
 800aea8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aeac:	3304      	adds	r3, #4
 800aeae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f002 fa1f 	bl	800d2f4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3740      	adds	r7, #64	@ 0x40
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bdb0      	pop	{r4, r5, r7, pc}

0800aec0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aec8:	2300      	movs	r3, #0
 800aeca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aecc:	2300      	movs	r3, #0
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	2300      	movs	r3, #0
 800aed2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f002 fbd6 	bl	800d68a <SDMMC_CmdGoIdleState>
 800aede:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <SD_PowerON+0x2a>
  {
    return errorstate;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	e072      	b.n	800afd0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f002 fbe9 	bl	800d6c6 <SDMMC_CmdOperCond>
 800aef4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00d      	beq.n	800af18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4618      	mov	r0, r3
 800af08:	f002 fbbf 	bl	800d68a <SDMMC_CmdGoIdleState>
 800af0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d004      	beq.n	800af1e <SD_PowerON+0x5e>
    {
      return errorstate;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	e05b      	b.n	800afd0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af22:	2b01      	cmp	r3, #1
 800af24:	d137      	bne.n	800af96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2100      	movs	r1, #0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f002 fbe9 	bl	800d704 <SDMMC_CmdAppCommand>
 800af32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d02d      	beq.n	800af96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af3e:	e047      	b.n	800afd0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2100      	movs	r1, #0
 800af46:	4618      	mov	r0, r3
 800af48:	f002 fbdc 	bl	800d704 <SDMMC_CmdAppCommand>
 800af4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d001      	beq.n	800af58 <SD_PowerON+0x98>
    {
      return errorstate;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	e03b      	b.n	800afd0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	491e      	ldr	r1, [pc, #120]	@ (800afd8 <SD_PowerON+0x118>)
 800af5e:	4618      	mov	r0, r3
 800af60:	f002 fbf2 	bl	800d748 <SDMMC_CmdAppOperCommand>
 800af64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af6c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af70:	e02e      	b.n	800afd0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2100      	movs	r1, #0
 800af78:	4618      	mov	r0, r3
 800af7a:	f002 fa57 	bl	800d42c <SDIO_GetResponse>
 800af7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	0fdb      	lsrs	r3, r3, #31
 800af84:	2b01      	cmp	r3, #1
 800af86:	d101      	bne.n	800af8c <SD_PowerON+0xcc>
 800af88:	2301      	movs	r3, #1
 800af8a:	e000      	b.n	800af8e <SD_PowerON+0xce>
 800af8c:	2300      	movs	r3, #0
 800af8e:	613b      	str	r3, [r7, #16]

    count++;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	3301      	adds	r3, #1
 800af94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d802      	bhi.n	800afa6 <SD_PowerON+0xe6>
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0cc      	beq.n	800af40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800afac:	4293      	cmp	r3, r2
 800afae:	d902      	bls.n	800afb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800afb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800afb4:	e00c      	b.n	800afd0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d003      	beq.n	800afc8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	645a      	str	r2, [r3, #68]	@ 0x44
 800afc6:	e002      	b.n	800afce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3718      	adds	r7, #24
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	c1100000 	.word	0xc1100000

0800afdc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d102      	bne.n	800aff2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800afec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aff0:	e018      	b.n	800b024 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800affa:	041b      	lsls	r3, r3, #16
 800affc:	4619      	mov	r1, r3
 800affe:	4610      	mov	r0, r2
 800b000:	f002 fc23 	bl	800d84a <SDMMC_CmdSendStatus>
 800b004:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	e009      	b.n	800b024 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2100      	movs	r1, #0
 800b016:	4618      	mov	r0, r3
 800b018:	f002 fa08 	bl	800d42c <SDIO_GetResponse>
 800b01c:	4602      	mov	r2, r0
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d101      	bne.n	800b03e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e041      	b.n	800b0c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	d106      	bne.n	800b058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7f8 fcb0 	bl	80039b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2202      	movs	r2, #2
 800b05c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3304      	adds	r3, #4
 800b068:	4619      	mov	r1, r3
 800b06a:	4610      	mov	r0, r2
 800b06c:	f000 fd18 	bl	800baa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3708      	adds	r7, #8
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b082      	sub	sp, #8
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2202      	movs	r2, #2
 800b0d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	6a1a      	ldr	r2, [r3, #32]
 800b0e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10f      	bne.n	800b10a <HAL_TIM_Base_DeInit+0x40>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6a1a      	ldr	r2, [r3, #32]
 800b0f0:	f240 4344 	movw	r3, #1092	@ 0x444
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d107      	bne.n	800b10a <HAL_TIM_Base_DeInit+0x40>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f022 0201 	bic.w	r2, r2, #1
 800b108:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7f8 fd14 	bl	8003b38 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b182:	b2db      	uxtb	r3, r3
 800b184:	2b01      	cmp	r3, #1
 800b186:	d001      	beq.n	800b18c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	e03c      	b.n	800b206 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a1e      	ldr	r2, [pc, #120]	@ (800b214 <HAL_TIM_Base_Start+0xa0>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d018      	beq.n	800b1d0 <HAL_TIM_Base_Start+0x5c>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1a6:	d013      	beq.n	800b1d0 <HAL_TIM_Base_Start+0x5c>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a1a      	ldr	r2, [pc, #104]	@ (800b218 <HAL_TIM_Base_Start+0xa4>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d00e      	beq.n	800b1d0 <HAL_TIM_Base_Start+0x5c>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a19      	ldr	r2, [pc, #100]	@ (800b21c <HAL_TIM_Base_Start+0xa8>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d009      	beq.n	800b1d0 <HAL_TIM_Base_Start+0x5c>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a17      	ldr	r2, [pc, #92]	@ (800b220 <HAL_TIM_Base_Start+0xac>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d004      	beq.n	800b1d0 <HAL_TIM_Base_Start+0x5c>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a16      	ldr	r2, [pc, #88]	@ (800b224 <HAL_TIM_Base_Start+0xb0>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d111      	bne.n	800b1f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	f003 0307 	and.w	r3, r3, #7
 800b1da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2b06      	cmp	r3, #6
 800b1e0:	d010      	beq.n	800b204 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f042 0201 	orr.w	r2, r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1f2:	e007      	b.n	800b204 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f042 0201 	orr.w	r2, r2, #1
 800b202:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	40010000 	.word	0x40010000
 800b218:	40000400 	.word	0x40000400
 800b21c:	40000800 	.word	0x40000800
 800b220:	40000c00 	.word	0x40000c00
 800b224:	40014000 	.word	0x40014000

0800b228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d001      	beq.n	800b240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e044      	b.n	800b2ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2202      	movs	r2, #2
 800b244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f042 0201 	orr.w	r2, r2, #1
 800b256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a1e      	ldr	r2, [pc, #120]	@ (800b2d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d018      	beq.n	800b294 <HAL_TIM_Base_Start_IT+0x6c>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b26a:	d013      	beq.n	800b294 <HAL_TIM_Base_Start_IT+0x6c>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a1a      	ldr	r2, [pc, #104]	@ (800b2dc <HAL_TIM_Base_Start_IT+0xb4>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00e      	beq.n	800b294 <HAL_TIM_Base_Start_IT+0x6c>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a19      	ldr	r2, [pc, #100]	@ (800b2e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d009      	beq.n	800b294 <HAL_TIM_Base_Start_IT+0x6c>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a17      	ldr	r2, [pc, #92]	@ (800b2e4 <HAL_TIM_Base_Start_IT+0xbc>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d004      	beq.n	800b294 <HAL_TIM_Base_Start_IT+0x6c>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a16      	ldr	r2, [pc, #88]	@ (800b2e8 <HAL_TIM_Base_Start_IT+0xc0>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d111      	bne.n	800b2b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f003 0307 	and.w	r3, r3, #7
 800b29e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b06      	cmp	r3, #6
 800b2a4:	d010      	beq.n	800b2c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f042 0201 	orr.w	r2, r2, #1
 800b2b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b6:	e007      	b.n	800b2c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0201 	orr.w	r2, r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	40010000 	.word	0x40010000
 800b2dc:	40000400 	.word	0x40000400
 800b2e0:	40000800 	.word	0x40000800
 800b2e4:	40000c00 	.word	0x40000c00
 800b2e8:	40014000 	.word	0x40014000

0800b2ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68da      	ldr	r2, [r3, #12]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f022 0201 	bic.w	r2, r2, #1
 800b302:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6a1a      	ldr	r2, [r3, #32]
 800b30a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b30e:	4013      	ands	r3, r2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10f      	bne.n	800b334 <HAL_TIM_Base_Stop_IT+0x48>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6a1a      	ldr	r2, [r3, #32]
 800b31a:	f240 4344 	movw	r3, #1092	@ 0x444
 800b31e:	4013      	ands	r3, r2
 800b320:	2b00      	cmp	r3, #0
 800b322:	d107      	bne.n	800b334 <HAL_TIM_Base_Stop_IT+0x48>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f022 0201 	bic.w	r2, r2, #1
 800b332:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b082      	sub	sp, #8
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e041      	b.n	800b3e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d106      	bne.n	800b376 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f839 	bl	800b3e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2202      	movs	r2, #2
 800b37a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	3304      	adds	r3, #4
 800b386:	4619      	mov	r1, r3
 800b388:	4610      	mov	r0, r2
 800b38a:	f000 fb89 	bl	800baa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d109      	bne.n	800b420 <HAL_TIM_PWM_Start+0x24>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b01      	cmp	r3, #1
 800b416:	bf14      	ite	ne
 800b418:	2301      	movne	r3, #1
 800b41a:	2300      	moveq	r3, #0
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	e022      	b.n	800b466 <HAL_TIM_PWM_Start+0x6a>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	2b04      	cmp	r3, #4
 800b424:	d109      	bne.n	800b43a <HAL_TIM_PWM_Start+0x3e>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b01      	cmp	r3, #1
 800b430:	bf14      	ite	ne
 800b432:	2301      	movne	r3, #1
 800b434:	2300      	moveq	r3, #0
 800b436:	b2db      	uxtb	r3, r3
 800b438:	e015      	b.n	800b466 <HAL_TIM_PWM_Start+0x6a>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b08      	cmp	r3, #8
 800b43e:	d109      	bne.n	800b454 <HAL_TIM_PWM_Start+0x58>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b01      	cmp	r3, #1
 800b44a:	bf14      	ite	ne
 800b44c:	2301      	movne	r3, #1
 800b44e:	2300      	moveq	r3, #0
 800b450:	b2db      	uxtb	r3, r3
 800b452:	e008      	b.n	800b466 <HAL_TIM_PWM_Start+0x6a>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	bf14      	ite	ne
 800b460:	2301      	movne	r3, #1
 800b462:	2300      	moveq	r3, #0
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d001      	beq.n	800b46e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e068      	b.n	800b540 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d104      	bne.n	800b47e <HAL_TIM_PWM_Start+0x82>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b47c:	e013      	b.n	800b4a6 <HAL_TIM_PWM_Start+0xaa>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2b04      	cmp	r3, #4
 800b482:	d104      	bne.n	800b48e <HAL_TIM_PWM_Start+0x92>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b48c:	e00b      	b.n	800b4a6 <HAL_TIM_PWM_Start+0xaa>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b08      	cmp	r3, #8
 800b492:	d104      	bne.n	800b49e <HAL_TIM_PWM_Start+0xa2>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2202      	movs	r2, #2
 800b498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b49c:	e003      	b.n	800b4a6 <HAL_TIM_PWM_Start+0xaa>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 fda8 	bl	800c004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a23      	ldr	r2, [pc, #140]	@ (800b548 <HAL_TIM_PWM_Start+0x14c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d107      	bne.n	800b4ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b4cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a1d      	ldr	r2, [pc, #116]	@ (800b548 <HAL_TIM_PWM_Start+0x14c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d018      	beq.n	800b50a <HAL_TIM_PWM_Start+0x10e>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e0:	d013      	beq.n	800b50a <HAL_TIM_PWM_Start+0x10e>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a19      	ldr	r2, [pc, #100]	@ (800b54c <HAL_TIM_PWM_Start+0x150>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d00e      	beq.n	800b50a <HAL_TIM_PWM_Start+0x10e>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a17      	ldr	r2, [pc, #92]	@ (800b550 <HAL_TIM_PWM_Start+0x154>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d009      	beq.n	800b50a <HAL_TIM_PWM_Start+0x10e>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a16      	ldr	r2, [pc, #88]	@ (800b554 <HAL_TIM_PWM_Start+0x158>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d004      	beq.n	800b50a <HAL_TIM_PWM_Start+0x10e>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a14      	ldr	r2, [pc, #80]	@ (800b558 <HAL_TIM_PWM_Start+0x15c>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d111      	bne.n	800b52e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f003 0307 	and.w	r3, r3, #7
 800b514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2b06      	cmp	r3, #6
 800b51a:	d010      	beq.n	800b53e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f042 0201 	orr.w	r2, r2, #1
 800b52a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b52c:	e007      	b.n	800b53e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f042 0201 	orr.w	r2, r2, #1
 800b53c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	40010000 	.word	0x40010000
 800b54c:	40000400 	.word	0x40000400
 800b550:	40000800 	.word	0x40000800
 800b554:	40000c00 	.word	0x40000c00
 800b558:	40014000 	.word	0x40014000

0800b55c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	f003 0302 	and.w	r3, r3, #2
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d020      	beq.n	800b5c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f003 0302 	and.w	r3, r3, #2
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01b      	beq.n	800b5c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f06f 0202 	mvn.w	r2, #2
 800b590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fa5b 	bl	800ba62 <HAL_TIM_IC_CaptureCallback>
 800b5ac:	e005      	b.n	800b5ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa4d 	bl	800ba4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fa5e 	bl	800ba76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f003 0304 	and.w	r3, r3, #4
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d020      	beq.n	800b60c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f003 0304 	and.w	r3, r3, #4
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d01b      	beq.n	800b60c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f06f 0204 	mvn.w	r2, #4
 800b5dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fa35 	bl	800ba62 <HAL_TIM_IC_CaptureCallback>
 800b5f8:	e005      	b.n	800b606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fa27 	bl	800ba4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fa38 	bl	800ba76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f003 0308 	and.w	r3, r3, #8
 800b612:	2b00      	cmp	r3, #0
 800b614:	d020      	beq.n	800b658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f003 0308 	and.w	r3, r3, #8
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d01b      	beq.n	800b658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f06f 0208 	mvn.w	r2, #8
 800b628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2204      	movs	r2, #4
 800b62e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	f003 0303 	and.w	r3, r3, #3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fa0f 	bl	800ba62 <HAL_TIM_IC_CaptureCallback>
 800b644:	e005      	b.n	800b652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fa01 	bl	800ba4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fa12 	bl	800ba76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	f003 0310 	and.w	r3, r3, #16
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d020      	beq.n	800b6a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f003 0310 	and.w	r3, r3, #16
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d01b      	beq.n	800b6a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f06f 0210 	mvn.w	r2, #16
 800b674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2208      	movs	r2, #8
 800b67a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	69db      	ldr	r3, [r3, #28]
 800b682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f9e9 	bl	800ba62 <HAL_TIM_IC_CaptureCallback>
 800b690:	e005      	b.n	800b69e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f9db 	bl	800ba4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f9ec 	bl	800ba76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00c      	beq.n	800b6c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d007      	beq.n	800b6c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f06f 0201 	mvn.w	r2, #1
 800b6c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7f7 ff66 	bl	8003594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00c      	beq.n	800b6ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d007      	beq.n	800b6ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b6e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fd2a 	bl	800c140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00c      	beq.n	800b710 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d007      	beq.n	800b710 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f9bd 	bl	800ba8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	f003 0320 	and.w	r3, r3, #32
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00c      	beq.n	800b734 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f003 0320 	and.w	r3, r3, #32
 800b720:	2b00      	cmp	r3, #0
 800b722:	d007      	beq.n	800b734 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f06f 0220 	mvn.w	r2, #32
 800b72c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fcfc 	bl	800c12c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b734:	bf00      	nop
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b752:	2b01      	cmp	r3, #1
 800b754:	d101      	bne.n	800b75a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b756:	2302      	movs	r3, #2
 800b758:	e0ae      	b.n	800b8b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b0c      	cmp	r3, #12
 800b766:	f200 809f 	bhi.w	800b8a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b76a:	a201      	add	r2, pc, #4	@ (adr r2, 800b770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b770:	0800b7a5 	.word	0x0800b7a5
 800b774:	0800b8a9 	.word	0x0800b8a9
 800b778:	0800b8a9 	.word	0x0800b8a9
 800b77c:	0800b8a9 	.word	0x0800b8a9
 800b780:	0800b7e5 	.word	0x0800b7e5
 800b784:	0800b8a9 	.word	0x0800b8a9
 800b788:	0800b8a9 	.word	0x0800b8a9
 800b78c:	0800b8a9 	.word	0x0800b8a9
 800b790:	0800b827 	.word	0x0800b827
 800b794:	0800b8a9 	.word	0x0800b8a9
 800b798:	0800b8a9 	.word	0x0800b8a9
 800b79c:	0800b8a9 	.word	0x0800b8a9
 800b7a0:	0800b867 	.word	0x0800b867
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 fa04 	bl	800bbb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	699a      	ldr	r2, [r3, #24]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f042 0208 	orr.w	r2, r2, #8
 800b7be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f022 0204 	bic.w	r2, r2, #4
 800b7ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6999      	ldr	r1, [r3, #24]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	691a      	ldr	r2, [r3, #16]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	430a      	orrs	r2, r1
 800b7e0:	619a      	str	r2, [r3, #24]
      break;
 800b7e2:	e064      	b.n	800b8ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68b9      	ldr	r1, [r7, #8]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 fa4a 	bl	800bc84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	699a      	ldr	r2, [r3, #24]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	699a      	ldr	r2, [r3, #24]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b80e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6999      	ldr	r1, [r3, #24]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	021a      	lsls	r2, r3, #8
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	619a      	str	r2, [r3, #24]
      break;
 800b824:	e043      	b.n	800b8ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68b9      	ldr	r1, [r7, #8]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fa95 	bl	800bd5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	69da      	ldr	r2, [r3, #28]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f042 0208 	orr.w	r2, r2, #8
 800b840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	69da      	ldr	r2, [r3, #28]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f022 0204 	bic.w	r2, r2, #4
 800b850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	69d9      	ldr	r1, [r3, #28]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	691a      	ldr	r2, [r3, #16]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	61da      	str	r2, [r3, #28]
      break;
 800b864:	e023      	b.n	800b8ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	68b9      	ldr	r1, [r7, #8]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 fadf 	bl	800be30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69da      	ldr	r2, [r3, #28]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69da      	ldr	r2, [r3, #28]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	69d9      	ldr	r1, [r3, #28]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	021a      	lsls	r2, r3, #8
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	61da      	str	r2, [r3, #28]
      break;
 800b8a6:	e002      	b.n	800b8ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b8ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d101      	bne.n	800b8dc <HAL_TIM_ConfigClockSource+0x1c>
 800b8d8:	2302      	movs	r3, #2
 800b8da:	e0b4      	b.n	800ba46 <HAL_TIM_ConfigClockSource+0x186>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b8fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b902:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b914:	d03e      	beq.n	800b994 <HAL_TIM_ConfigClockSource+0xd4>
 800b916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b91a:	f200 8087 	bhi.w	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b91e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b922:	f000 8086 	beq.w	800ba32 <HAL_TIM_ConfigClockSource+0x172>
 800b926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b92a:	d87f      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b92c:	2b70      	cmp	r3, #112	@ 0x70
 800b92e:	d01a      	beq.n	800b966 <HAL_TIM_ConfigClockSource+0xa6>
 800b930:	2b70      	cmp	r3, #112	@ 0x70
 800b932:	d87b      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b934:	2b60      	cmp	r3, #96	@ 0x60
 800b936:	d050      	beq.n	800b9da <HAL_TIM_ConfigClockSource+0x11a>
 800b938:	2b60      	cmp	r3, #96	@ 0x60
 800b93a:	d877      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b93c:	2b50      	cmp	r3, #80	@ 0x50
 800b93e:	d03c      	beq.n	800b9ba <HAL_TIM_ConfigClockSource+0xfa>
 800b940:	2b50      	cmp	r3, #80	@ 0x50
 800b942:	d873      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b944:	2b40      	cmp	r3, #64	@ 0x40
 800b946:	d058      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x13a>
 800b948:	2b40      	cmp	r3, #64	@ 0x40
 800b94a:	d86f      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b94c:	2b30      	cmp	r3, #48	@ 0x30
 800b94e:	d064      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15a>
 800b950:	2b30      	cmp	r3, #48	@ 0x30
 800b952:	d86b      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b954:	2b20      	cmp	r3, #32
 800b956:	d060      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15a>
 800b958:	2b20      	cmp	r3, #32
 800b95a:	d867      	bhi.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d05c      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15a>
 800b960:	2b10      	cmp	r3, #16
 800b962:	d05a      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0x15a>
 800b964:	e062      	b.n	800ba2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b976:	f000 fb25 	bl	800bfc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b988:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	609a      	str	r2, [r3, #8]
      break;
 800b992:	e04f      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b9a4:	f000 fb0e 	bl	800bfc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	689a      	ldr	r2, [r3, #8]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b9b6:	609a      	str	r2, [r3, #8]
      break;
 800b9b8:	e03c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f000 fa82 	bl	800bed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2150      	movs	r1, #80	@ 0x50
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 fadb 	bl	800bf8e <TIM_ITRx_SetConfig>
      break;
 800b9d8:	e02c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	f000 faa1 	bl	800bf2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2160      	movs	r1, #96	@ 0x60
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 facb 	bl	800bf8e <TIM_ITRx_SetConfig>
      break;
 800b9f8:	e01c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba06:	461a      	mov	r2, r3
 800ba08:	f000 fa62 	bl	800bed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2140      	movs	r1, #64	@ 0x40
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 fabb 	bl	800bf8e <TIM_ITRx_SetConfig>
      break;
 800ba18:	e00c      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4619      	mov	r1, r3
 800ba24:	4610      	mov	r0, r2
 800ba26:	f000 fab2 	bl	800bf8e <TIM_ITRx_SetConfig>
      break;
 800ba2a:	e003      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba30:	e000      	b.n	800ba34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba6a:	bf00      	nop
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b083      	sub	sp, #12
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba7e:	bf00      	nop
 800ba80:	370c      	adds	r7, #12
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b083      	sub	sp, #12
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba92:	bf00      	nop
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
	...

0800baa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a3a      	ldr	r2, [pc, #232]	@ (800bb9c <TIM_Base_SetConfig+0xfc>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d00f      	beq.n	800bad8 <TIM_Base_SetConfig+0x38>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800babe:	d00b      	beq.n	800bad8 <TIM_Base_SetConfig+0x38>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a37      	ldr	r2, [pc, #220]	@ (800bba0 <TIM_Base_SetConfig+0x100>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d007      	beq.n	800bad8 <TIM_Base_SetConfig+0x38>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4a36      	ldr	r2, [pc, #216]	@ (800bba4 <TIM_Base_SetConfig+0x104>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d003      	beq.n	800bad8 <TIM_Base_SetConfig+0x38>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4a35      	ldr	r2, [pc, #212]	@ (800bba8 <TIM_Base_SetConfig+0x108>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d108      	bne.n	800baea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a2b      	ldr	r2, [pc, #172]	@ (800bb9c <TIM_Base_SetConfig+0xfc>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d01b      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baf8:	d017      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a28      	ldr	r2, [pc, #160]	@ (800bba0 <TIM_Base_SetConfig+0x100>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d013      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a27      	ldr	r2, [pc, #156]	@ (800bba4 <TIM_Base_SetConfig+0x104>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d00f      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a26      	ldr	r2, [pc, #152]	@ (800bba8 <TIM_Base_SetConfig+0x108>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d00b      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a25      	ldr	r2, [pc, #148]	@ (800bbac <TIM_Base_SetConfig+0x10c>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d007      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a24      	ldr	r2, [pc, #144]	@ (800bbb0 <TIM_Base_SetConfig+0x110>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d003      	beq.n	800bb2a <TIM_Base_SetConfig+0x8a>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a23      	ldr	r2, [pc, #140]	@ (800bbb4 <TIM_Base_SetConfig+0x114>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d108      	bne.n	800bb3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	695b      	ldr	r3, [r3, #20]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	689a      	ldr	r2, [r3, #8]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a0e      	ldr	r2, [pc, #56]	@ (800bb9c <TIM_Base_SetConfig+0xfc>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d103      	bne.n	800bb70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	691a      	ldr	r2, [r3, #16]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	f003 0301 	and.w	r3, r3, #1
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d105      	bne.n	800bb8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	f023 0201 	bic.w	r2, r3, #1
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	611a      	str	r2, [r3, #16]
  }
}
 800bb8e:	bf00      	nop
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	40010000 	.word	0x40010000
 800bba0:	40000400 	.word	0x40000400
 800bba4:	40000800 	.word	0x40000800
 800bba8:	40000c00 	.word	0x40000c00
 800bbac:	40014000 	.word	0x40014000
 800bbb0:	40014400 	.word	0x40014400
 800bbb4:	40014800 	.word	0x40014800

0800bbb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b087      	sub	sp, #28
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a1b      	ldr	r3, [r3, #32]
 800bbcc:	f023 0201 	bic.w	r2, r3, #1
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f023 0303 	bic.w	r3, r3, #3
 800bbee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	f023 0302 	bic.w	r3, r3, #2
 800bc00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a1c      	ldr	r2, [pc, #112]	@ (800bc80 <TIM_OC1_SetConfig+0xc8>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d10c      	bne.n	800bc2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	f023 0308 	bic.w	r3, r3, #8
 800bc1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f023 0304 	bic.w	r3, r3, #4
 800bc2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a13      	ldr	r2, [pc, #76]	@ (800bc80 <TIM_OC1_SetConfig+0xc8>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d111      	bne.n	800bc5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	693a      	ldr	r2, [r7, #16]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	621a      	str	r2, [r3, #32]
}
 800bc74:	bf00      	nop
 800bc76:	371c      	adds	r7, #28
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	40010000 	.word	0x40010000

0800bc84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a1b      	ldr	r3, [r3, #32]
 800bc98:	f023 0210 	bic.w	r2, r3, #16
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	021b      	lsls	r3, r3, #8
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	f023 0320 	bic.w	r3, r3, #32
 800bcce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	011b      	lsls	r3, r3, #4
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a1e      	ldr	r2, [pc, #120]	@ (800bd58 <TIM_OC2_SetConfig+0xd4>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d10d      	bne.n	800bd00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	011b      	lsls	r3, r3, #4
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a15      	ldr	r2, [pc, #84]	@ (800bd58 <TIM_OC2_SetConfig+0xd4>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d113      	bne.n	800bd30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	693a      	ldr	r2, [r7, #16]
 800bd34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	621a      	str	r2, [r3, #32]
}
 800bd4a:	bf00      	nop
 800bd4c:	371c      	adds	r7, #28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	40010000 	.word	0x40010000

0800bd5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	69db      	ldr	r3, [r3, #28]
 800bd82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f023 0303 	bic.w	r3, r3, #3
 800bd92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bda4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	021b      	lsls	r3, r3, #8
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a1d      	ldr	r2, [pc, #116]	@ (800be2c <TIM_OC3_SetConfig+0xd0>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d10d      	bne.n	800bdd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	021b      	lsls	r3, r3, #8
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bdd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a14      	ldr	r2, [pc, #80]	@ (800be2c <TIM_OC3_SetConfig+0xd0>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d113      	bne.n	800be06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bde4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bdec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	011b      	lsls	r3, r3, #4
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	011b      	lsls	r3, r3, #4
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	4313      	orrs	r3, r2
 800be04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	621a      	str	r2, [r3, #32]
}
 800be20:	bf00      	nop
 800be22:	371c      	adds	r7, #28
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	40010000 	.word	0x40010000

0800be30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	69db      	ldr	r3, [r3, #28]
 800be56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	021b      	lsls	r3, r3, #8
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4313      	orrs	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	031b      	lsls	r3, r3, #12
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	4313      	orrs	r3, r2
 800be86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a10      	ldr	r2, [pc, #64]	@ (800becc <TIM_OC4_SetConfig+0x9c>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d109      	bne.n	800bea4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	019b      	lsls	r3, r3, #6
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	621a      	str	r2, [r3, #32]
}
 800bebe:	bf00      	nop
 800bec0:	371c      	adds	r7, #28
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	40010000 	.word	0x40010000

0800bed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	f023 0201 	bic.w	r2, r3, #1
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	699b      	ldr	r3, [r3, #24]
 800bef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800befa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	011b      	lsls	r3, r3, #4
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	f023 030a 	bic.w	r3, r3, #10
 800bf0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf0e:	697a      	ldr	r2, [r7, #20]
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	621a      	str	r2, [r3, #32]
}
 800bf22:	bf00      	nop
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b087      	sub	sp, #28
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	60f8      	str	r0, [r7, #12]
 800bf36:	60b9      	str	r1, [r7, #8]
 800bf38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6a1b      	ldr	r3, [r3, #32]
 800bf44:	f023 0210 	bic.w	r2, r3, #16
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	031b      	lsls	r3, r3, #12
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	011b      	lsls	r3, r3, #4
 800bf70:	697a      	ldr	r2, [r7, #20]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	693a      	ldr	r2, [r7, #16]
 800bf7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	621a      	str	r2, [r3, #32]
}
 800bf82:	bf00      	nop
 800bf84:	371c      	adds	r7, #28
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	b085      	sub	sp, #20
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	f043 0307 	orr.w	r3, r3, #7
 800bfb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	609a      	str	r2, [r3, #8]
}
 800bfb8:	bf00      	nop
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	021a      	lsls	r2, r3, #8
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	431a      	orrs	r2, r3
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	609a      	str	r2, [r3, #8]
}
 800bff8:	bf00      	nop
 800bffa:	371c      	adds	r7, #28
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c004:	b480      	push	{r7}
 800c006:	b087      	sub	sp, #28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	f003 031f 	and.w	r3, r3, #31
 800c016:	2201      	movs	r2, #1
 800c018:	fa02 f303 	lsl.w	r3, r2, r3
 800c01c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6a1a      	ldr	r2, [r3, #32]
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	43db      	mvns	r3, r3
 800c026:	401a      	ands	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6a1a      	ldr	r2, [r3, #32]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	f003 031f 	and.w	r3, r3, #31
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	fa01 f303 	lsl.w	r3, r1, r3
 800c03c:	431a      	orrs	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	621a      	str	r2, [r3, #32]
}
 800c042:	bf00      	nop
 800c044:	371c      	adds	r7, #28
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
	...

0800c050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c060:	2b01      	cmp	r3, #1
 800c062:	d101      	bne.n	800c068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c064:	2302      	movs	r3, #2
 800c066:	e050      	b.n	800c10a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2202      	movs	r2, #2
 800c074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c08e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	4313      	orrs	r3, r2
 800c098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a1c      	ldr	r2, [pc, #112]	@ (800c118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d018      	beq.n	800c0de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b4:	d013      	beq.n	800c0de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a18      	ldr	r2, [pc, #96]	@ (800c11c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d00e      	beq.n	800c0de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a16      	ldr	r2, [pc, #88]	@ (800c120 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d009      	beq.n	800c0de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a15      	ldr	r2, [pc, #84]	@ (800c124 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d004      	beq.n	800c0de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a13      	ldr	r2, [pc, #76]	@ (800c128 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d10c      	bne.n	800c0f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	40010000 	.word	0x40010000
 800c11c:	40000400 	.word	0x40000400
 800c120:	40000800 	.word	0x40000800
 800c124:	40000c00 	.word	0x40000c00
 800c128:	40014000 	.word	0x40014000

0800c12c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c134:	bf00      	nop
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	e042      	b.n	800c1ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7f7 fd16 	bl	8003bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2224      	movs	r2, #36	@ 0x24
 800c184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68da      	ldr	r2, [r3, #12]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fe37 	bl	800ce0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	691a      	ldr	r2, [r3, #16]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c1ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	695a      	ldr	r2, [r3, #20]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68da      	ldr	r2, [r3, #12]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c1cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2220      	movs	r2, #32
 800c1d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2220      	movs	r2, #32
 800c1e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	e024      	b.n	800c250 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2224      	movs	r2, #36	@ 0x24
 800c20a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68da      	ldr	r2, [r3, #12]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c21c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7f7 fd52 	bl	8003cc8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2200      	movs	r2, #0
 800c23e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08a      	sub	sp, #40	@ 0x28
 800c25c:	af02      	add	r7, sp, #8
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	603b      	str	r3, [r7, #0]
 800c264:	4613      	mov	r3, r2
 800c266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c268:	2300      	movs	r3, #0
 800c26a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c272:	b2db      	uxtb	r3, r3
 800c274:	2b20      	cmp	r3, #32
 800c276:	d175      	bne.n	800c364 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <HAL_UART_Transmit+0x2c>
 800c27e:	88fb      	ldrh	r3, [r7, #6]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d101      	bne.n	800c288 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	e06e      	b.n	800c366 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2221      	movs	r2, #33	@ 0x21
 800c292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c296:	f7f7 ff3f 	bl	8004118 <HAL_GetTick>
 800c29a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	88fa      	ldrh	r2, [r7, #6]
 800c2a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	88fa      	ldrh	r2, [r7, #6]
 800c2a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2b0:	d108      	bne.n	800c2c4 <HAL_UART_Transmit+0x6c>
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d104      	bne.n	800c2c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	61bb      	str	r3, [r7, #24]
 800c2c2:	e003      	b.n	800c2cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c2cc:	e02e      	b.n	800c32c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	2180      	movs	r1, #128	@ 0x80
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f000 fb67 	bl	800c9ac <UART_WaitOnFlagUntilTimeout>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d005      	beq.n	800c2f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2220      	movs	r2, #32
 800c2e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e03a      	b.n	800c366 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10b      	bne.n	800c30e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	881b      	ldrh	r3, [r3, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c304:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	3302      	adds	r3, #2
 800c30a:	61bb      	str	r3, [r7, #24]
 800c30c:	e007      	b.n	800c31e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	781a      	ldrb	r2, [r3, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	3301      	adds	r3, #1
 800c31c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c322:	b29b      	uxth	r3, r3
 800c324:	3b01      	subs	r3, #1
 800c326:	b29a      	uxth	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c330:	b29b      	uxth	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1cb      	bne.n	800c2ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	2200      	movs	r2, #0
 800c33e:	2140      	movs	r1, #64	@ 0x40
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f000 fb33 	bl	800c9ac <UART_WaitOnFlagUntilTimeout>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d005      	beq.n	800c358 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2220      	movs	r2, #32
 800c350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c354:	2303      	movs	r3, #3
 800c356:	e006      	b.n	800c366 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2220      	movs	r2, #32
 800c35c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c360:	2300      	movs	r3, #0
 800c362:	e000      	b.n	800c366 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c364:	2302      	movs	r3, #2
  }
}
 800c366:	4618      	mov	r0, r3
 800c368:	3720      	adds	r7, #32
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	60b9      	str	r1, [r7, #8]
 800c378:	4613      	mov	r3, r2
 800c37a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c382:	b2db      	uxtb	r3, r3
 800c384:	2b20      	cmp	r3, #32
 800c386:	d112      	bne.n	800c3ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d002      	beq.n	800c394 <HAL_UART_Receive_IT+0x26>
 800c38e:	88fb      	ldrh	r3, [r7, #6]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e00b      	b.n	800c3b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c39e:	88fb      	ldrh	r3, [r7, #6]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	68b9      	ldr	r1, [r7, #8]
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f000 fb5a 	bl	800ca5e <UART_Start_Receive_IT>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	e000      	b.n	800c3b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c3ae:	2302      	movs	r3, #2
  }
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08c      	sub	sp, #48	@ 0x30
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b20      	cmp	r3, #32
 800c3d0:	d14a      	bne.n	800c468 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d002      	beq.n	800c3de <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800c3d8:	88fb      	ldrh	r3, [r7, #6]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e043      	b.n	800c46a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800c3ee:	88fb      	ldrh	r3, [r7, #6]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	68b9      	ldr	r1, [r7, #8]
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 fb32 	bl	800ca5e <UART_Start_Receive_IT>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c400:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c404:	2b00      	cmp	r3, #0
 800c406:	d12c      	bne.n	800c462 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d125      	bne.n	800c45c <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c410:	2300      	movs	r3, #0
 800c412:	613b      	str	r3, [r7, #16]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	613b      	str	r3, [r7, #16]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	613b      	str	r3, [r7, #16]
 800c424:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	330c      	adds	r3, #12
 800c42c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	e853 3f00 	ldrex	r3, [r3]
 800c434:	617b      	str	r3, [r7, #20]
   return(result);
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f043 0310 	orr.w	r3, r3, #16
 800c43c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	330c      	adds	r3, #12
 800c444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c446:	627a      	str	r2, [r7, #36]	@ 0x24
 800c448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44a:	6a39      	ldr	r1, [r7, #32]
 800c44c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c44e:	e841 2300 	strex	r3, r2, [r1]
 800c452:	61fb      	str	r3, [r7, #28]
   return(result);
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1e5      	bne.n	800c426 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800c45a:	e002      	b.n	800c462 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c462:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c466:	e000      	b.n	800c46a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800c468:	2302      	movs	r3, #2
  }
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3730      	adds	r7, #48	@ 0x30
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
	...

0800c474 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b0ba      	sub	sp, #232	@ 0xe8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c49a:	2300      	movs	r3, #0
 800c49c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4aa:	f003 030f 	and.w	r3, r3, #15
 800c4ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c4b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10f      	bne.n	800c4da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4be:	f003 0320 	and.w	r3, r3, #32
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d009      	beq.n	800c4da <HAL_UART_IRQHandler+0x66>
 800c4c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4ca:	f003 0320 	and.w	r3, r3, #32
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fbdc 	bl	800cc90 <UART_Receive_IT>
      return;
 800c4d8:	e25b      	b.n	800c992 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c4da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f000 80de 	beq.w	800c6a0 <HAL_UART_IRQHandler+0x22c>
 800c4e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4e8:	f003 0301 	and.w	r3, r3, #1
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d106      	bne.n	800c4fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 80d1 	beq.w	800c6a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00b      	beq.n	800c522 <HAL_UART_IRQHandler+0xae>
 800c50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c50e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c512:	2b00      	cmp	r3, #0
 800c514:	d005      	beq.n	800c522 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c51a:	f043 0201 	orr.w	r2, r3, #1
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c526:	f003 0304 	and.w	r3, r3, #4
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00b      	beq.n	800c546 <HAL_UART_IRQHandler+0xd2>
 800c52e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c532:	f003 0301 	and.w	r3, r3, #1
 800c536:	2b00      	cmp	r3, #0
 800c538:	d005      	beq.n	800c546 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c53e:	f043 0202 	orr.w	r2, r3, #2
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c54a:	f003 0302 	and.w	r3, r3, #2
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00b      	beq.n	800c56a <HAL_UART_IRQHandler+0xf6>
 800c552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c556:	f003 0301 	and.w	r3, r3, #1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d005      	beq.n	800c56a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c562:	f043 0204 	orr.w	r2, r3, #4
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c56e:	f003 0308 	and.w	r3, r3, #8
 800c572:	2b00      	cmp	r3, #0
 800c574:	d011      	beq.n	800c59a <HAL_UART_IRQHandler+0x126>
 800c576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c57a:	f003 0320 	and.w	r3, r3, #32
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d105      	bne.n	800c58e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c586:	f003 0301 	and.w	r3, r3, #1
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d005      	beq.n	800c59a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c592:	f043 0208 	orr.w	r2, r3, #8
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 81f2 	beq.w	800c988 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5a8:	f003 0320 	and.w	r3, r3, #32
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d008      	beq.n	800c5c2 <HAL_UART_IRQHandler+0x14e>
 800c5b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5b4:	f003 0320 	and.w	r3, r3, #32
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fb67 	bl	800cc90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	695b      	ldr	r3, [r3, #20]
 800c5c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5cc:	2b40      	cmp	r3, #64	@ 0x40
 800c5ce:	bf0c      	ite	eq
 800c5d0:	2301      	moveq	r3, #1
 800c5d2:	2300      	movne	r3, #0
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5de:	f003 0308 	and.w	r3, r3, #8
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d103      	bne.n	800c5ee <HAL_UART_IRQHandler+0x17a>
 800c5e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d04f      	beq.n	800c68e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fa6f 	bl	800cad2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5fe:	2b40      	cmp	r3, #64	@ 0x40
 800c600:	d141      	bne.n	800c686 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	3314      	adds	r3, #20
 800c608:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c610:	e853 3f00 	ldrex	r3, [r3]
 800c614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c61c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	3314      	adds	r3, #20
 800c62a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c62e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c632:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c636:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c63a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c63e:	e841 2300 	strex	r3, r2, [r1]
 800c642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1d9      	bne.n	800c602 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c652:	2b00      	cmp	r3, #0
 800c654:	d013      	beq.n	800c67e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c65a:	4a7e      	ldr	r2, [pc, #504]	@ (800c854 <HAL_UART_IRQHandler+0x3e0>)
 800c65c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c662:	4618      	mov	r0, r3
 800c664:	f7f8 fd3b 	bl	80050de <HAL_DMA_Abort_IT>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d016      	beq.n	800c69c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c678:	4610      	mov	r0, r2
 800c67a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c67c:	e00e      	b.n	800c69c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7f6 ffdc 	bl	800363c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c684:	e00a      	b.n	800c69c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7f6 ffd8 	bl	800363c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c68c:	e006      	b.n	800c69c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7f6 ffd4 	bl	800363c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c69a:	e175      	b.n	800c988 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c69c:	bf00      	nop
    return;
 800c69e:	e173      	b.n	800c988 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	f040 814f 	bne.w	800c948 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6ae:	f003 0310 	and.w	r3, r3, #16
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 8148 	beq.w	800c948 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6bc:	f003 0310 	and.w	r3, r3, #16
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f000 8141 	beq.w	800c948 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60bb      	str	r3, [r7, #8]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	60bb      	str	r3, [r7, #8]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	60bb      	str	r3, [r7, #8]
 800c6da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	695b      	ldr	r3, [r3, #20]
 800c6e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6e6:	2b40      	cmp	r3, #64	@ 0x40
 800c6e8:	f040 80b6 	bne.w	800c858 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f000 8145 	beq.w	800c98c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c70a:	429a      	cmp	r2, r3
 800c70c:	f080 813e 	bcs.w	800c98c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c716:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c71c:	69db      	ldr	r3, [r3, #28]
 800c71e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c722:	f000 8088 	beq.w	800c836 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	330c      	adds	r3, #12
 800c72c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c730:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c734:	e853 3f00 	ldrex	r3, [r3]
 800c738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c73c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c744:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	330c      	adds	r3, #12
 800c74e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c752:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c756:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c75e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c762:	e841 2300 	strex	r3, r2, [r1]
 800c766:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c76a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1d9      	bne.n	800c726 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3314      	adds	r3, #20
 800c778:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c77c:	e853 3f00 	ldrex	r3, [r3]
 800c780:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c782:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c784:	f023 0301 	bic.w	r3, r3, #1
 800c788:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	3314      	adds	r3, #20
 800c792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c796:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c79a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c79e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c7a2:	e841 2300 	strex	r3, r2, [r1]
 800c7a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c7a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1e1      	bne.n	800c772 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3314      	adds	r3, #20
 800c7b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7b8:	e853 3f00 	ldrex	r3, [r3]
 800c7bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c7be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3314      	adds	r3, #20
 800c7ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c7d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7da:	e841 2300 	strex	r3, r2, [r1]
 800c7de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1e3      	bne.n	800c7ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2220      	movs	r2, #32
 800c7ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	330c      	adds	r3, #12
 800c7fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7fe:	e853 3f00 	ldrex	r3, [r3]
 800c802:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c806:	f023 0310 	bic.w	r3, r3, #16
 800c80a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	330c      	adds	r3, #12
 800c814:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c818:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c81a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c81e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c820:	e841 2300 	strex	r3, r2, [r1]
 800c824:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d1e3      	bne.n	800c7f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c830:	4618      	mov	r0, r3
 800c832:	f7f8 fbe4 	bl	8004ffe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2202      	movs	r2, #2
 800c83a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c844:	b29b      	uxth	r3, r3
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	b29b      	uxth	r3, r3
 800c84a:	4619      	mov	r1, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f008 ffbf 	bl	80157d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c852:	e09b      	b.n	800c98c <HAL_UART_IRQHandler+0x518>
 800c854:	0800cb99 	.word	0x0800cb99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c860:	b29b      	uxth	r3, r3
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 808e 	beq.w	800c990 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c874:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 8089 	beq.w	800c990 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	330c      	adds	r3, #12
 800c884:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c888:	e853 3f00 	ldrex	r3, [r3]
 800c88c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c890:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c894:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	330c      	adds	r3, #12
 800c89e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c8a2:	647a      	str	r2, [r7, #68]	@ 0x44
 800c8a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c8a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8aa:	e841 2300 	strex	r3, r2, [r1]
 800c8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c8b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1e3      	bne.n	800c87e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	3314      	adds	r3, #20
 800c8bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	623b      	str	r3, [r7, #32]
   return(result);
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	f023 0301 	bic.w	r3, r3, #1
 800c8cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	3314      	adds	r3, #20
 800c8d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c8da:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8e2:	e841 2300 	strex	r3, r2, [r1]
 800c8e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1e3      	bne.n	800c8b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2220      	movs	r2, #32
 800c8f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	330c      	adds	r3, #12
 800c902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	e853 3f00 	ldrex	r3, [r3]
 800c90a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f023 0310 	bic.w	r3, r3, #16
 800c912:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	330c      	adds	r3, #12
 800c91c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c920:	61fa      	str	r2, [r7, #28]
 800c922:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c924:	69b9      	ldr	r1, [r7, #24]
 800c926:	69fa      	ldr	r2, [r7, #28]
 800c928:	e841 2300 	strex	r3, r2, [r1]
 800c92c:	617b      	str	r3, [r7, #20]
   return(result);
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e3      	bne.n	800c8fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2202      	movs	r2, #2
 800c938:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c93a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f008 ff45 	bl	80157d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c946:	e023      	b.n	800c990 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c94c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c950:	2b00      	cmp	r3, #0
 800c952:	d009      	beq.n	800c968 <HAL_UART_IRQHandler+0x4f4>
 800c954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 f92d 	bl	800cbc0 <UART_Transmit_IT>
    return;
 800c966:	e014      	b.n	800c992 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00e      	beq.n	800c992 <HAL_UART_IRQHandler+0x51e>
 800c974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d008      	beq.n	800c992 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 f96d 	bl	800cc60 <UART_EndTransmit_IT>
    return;
 800c986:	e004      	b.n	800c992 <HAL_UART_IRQHandler+0x51e>
    return;
 800c988:	bf00      	nop
 800c98a:	e002      	b.n	800c992 <HAL_UART_IRQHandler+0x51e>
      return;
 800c98c:	bf00      	nop
 800c98e:	e000      	b.n	800c992 <HAL_UART_IRQHandler+0x51e>
      return;
 800c990:	bf00      	nop
  }
}
 800c992:	37e8      	adds	r7, #232	@ 0xe8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	603b      	str	r3, [r7, #0]
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9bc:	e03b      	b.n	800ca36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c4:	d037      	beq.n	800ca36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9c6:	f7f7 fba7 	bl	8004118 <HAL_GetTick>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	6a3a      	ldr	r2, [r7, #32]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d302      	bcc.n	800c9dc <UART_WaitOnFlagUntilTimeout+0x30>
 800c9d6:	6a3b      	ldr	r3, [r7, #32]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	e03a      	b.n	800ca56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	f003 0304 	and.w	r3, r3, #4
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d023      	beq.n	800ca36 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	2b80      	cmp	r3, #128	@ 0x80
 800c9f2:	d020      	beq.n	800ca36 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	2b40      	cmp	r3, #64	@ 0x40
 800c9f8:	d01d      	beq.n	800ca36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f003 0308 	and.w	r3, r3, #8
 800ca04:	2b08      	cmp	r3, #8
 800ca06:	d116      	bne.n	800ca36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ca08:	2300      	movs	r3, #0
 800ca0a:	617b      	str	r3, [r7, #20]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	617b      	str	r3, [r7, #20]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	617b      	str	r3, [r7, #20]
 800ca1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f000 f857 	bl	800cad2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2208      	movs	r2, #8
 800ca28:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	e00f      	b.n	800ca56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	4013      	ands	r3, r2
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	bf0c      	ite	eq
 800ca46:	2301      	moveq	r3, #1
 800ca48:	2300      	movne	r3, #0
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	79fb      	ldrb	r3, [r7, #7]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d0b4      	beq.n	800c9be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b085      	sub	sp, #20
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	88fa      	ldrh	r2, [r7, #6]
 800ca76:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	88fa      	ldrh	r2, [r7, #6]
 800ca7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2222      	movs	r2, #34	@ 0x22
 800ca88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d007      	beq.n	800caa4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68da      	ldr	r2, [r3, #12]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800caa2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	695a      	ldr	r2, [r3, #20]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f042 0201 	orr.w	r2, r2, #1
 800cab2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68da      	ldr	r2, [r3, #12]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f042 0220 	orr.w	r2, r2, #32
 800cac2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3714      	adds	r7, #20
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr

0800cad2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cad2:	b480      	push	{r7}
 800cad4:	b095      	sub	sp, #84	@ 0x54
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	330c      	adds	r3, #12
 800cae0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae4:	e853 3f00 	ldrex	r3, [r3]
 800cae8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800caea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800caf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	330c      	adds	r3, #12
 800caf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cafa:	643a      	str	r2, [r7, #64]	@ 0x40
 800cafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb02:	e841 2300 	strex	r3, r2, [r1]
 800cb06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1e5      	bne.n	800cada <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	3314      	adds	r3, #20
 800cb14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	e853 3f00 	ldrex	r3, [r3]
 800cb1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	f023 0301 	bic.w	r3, r3, #1
 800cb24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3314      	adds	r3, #20
 800cb2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb36:	e841 2300 	strex	r3, r2, [r1]
 800cb3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1e5      	bne.n	800cb0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d119      	bne.n	800cb7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	330c      	adds	r3, #12
 800cb50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	e853 3f00 	ldrex	r3, [r3]
 800cb58:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	f023 0310 	bic.w	r3, r3, #16
 800cb60:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	330c      	adds	r3, #12
 800cb68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb6a:	61ba      	str	r2, [r7, #24]
 800cb6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb6e:	6979      	ldr	r1, [r7, #20]
 800cb70:	69ba      	ldr	r2, [r7, #24]
 800cb72:	e841 2300 	strex	r3, r2, [r1]
 800cb76:	613b      	str	r3, [r7, #16]
   return(result);
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1e5      	bne.n	800cb4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2220      	movs	r2, #32
 800cb82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cb8c:	bf00      	nop
 800cb8e:	3754      	adds	r7, #84	@ 0x54
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f7f6 fd42 	bl	800363c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbb8:	bf00      	nop
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b21      	cmp	r3, #33	@ 0x21
 800cbd2:	d13e      	bne.n	800cc52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbdc:	d114      	bne.n	800cc08 <UART_Transmit_IT+0x48>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d110      	bne.n	800cc08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a1b      	ldr	r3, [r3, #32]
 800cbea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	881b      	ldrh	r3, [r3, #0]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a1b      	ldr	r3, [r3, #32]
 800cc00:	1c9a      	adds	r2, r3, #2
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	621a      	str	r2, [r3, #32]
 800cc06:	e008      	b.n	800cc1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
 800cc0c:	1c59      	adds	r1, r3, #1
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	6211      	str	r1, [r2, #32]
 800cc12:	781a      	ldrb	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	3b01      	subs	r3, #1
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	4619      	mov	r1, r3
 800cc28:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d10f      	bne.n	800cc4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68da      	ldr	r2, [r3, #12]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	68da      	ldr	r2, [r3, #12]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	e000      	b.n	800cc54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc52:	2302      	movs	r3, #2
  }
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3714      	adds	r7, #20
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68da      	ldr	r2, [r3, #12]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cc76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2220      	movs	r2, #32
 800cc7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff fe89 	bl	800c998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cc86:	2300      	movs	r3, #0
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08c      	sub	sp, #48	@ 0x30
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b22      	cmp	r3, #34	@ 0x22
 800cca2:	f040 80ae 	bne.w	800ce02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccae:	d117      	bne.n	800cce0 <UART_Receive_IT+0x50>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d113      	bne.n	800cce0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd8:	1c9a      	adds	r2, r3, #2
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	629a      	str	r2, [r3, #40]	@ 0x28
 800ccde:	e026      	b.n	800cd2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cce6:	2300      	movs	r3, #0
 800cce8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccf2:	d007      	beq.n	800cd04 <UART_Receive_IT+0x74>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10a      	bne.n	800cd12 <UART_Receive_IT+0x82>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d106      	bne.n	800cd12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd0e:	701a      	strb	r2, [r3, #0]
 800cd10:	e008      	b.n	800cd24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	3b01      	subs	r3, #1
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d15d      	bne.n	800cdfe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68da      	ldr	r2, [r3, #12]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f022 0220 	bic.w	r2, r2, #32
 800cd50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	68da      	ldr	r2, [r3, #12]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	695a      	ldr	r2, [r3, #20]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f022 0201 	bic.w	r2, r2, #1
 800cd70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2220      	movs	r2, #32
 800cd76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d135      	bne.n	800cdf4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	330c      	adds	r3, #12
 800cd94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	e853 3f00 	ldrex	r3, [r3]
 800cd9c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	f023 0310 	bic.w	r3, r3, #16
 800cda4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	330c      	adds	r3, #12
 800cdac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdae:	623a      	str	r2, [r7, #32]
 800cdb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb2:	69f9      	ldr	r1, [r7, #28]
 800cdb4:	6a3a      	ldr	r2, [r7, #32]
 800cdb6:	e841 2300 	strex	r3, r2, [r1]
 800cdba:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1e5      	bne.n	800cd8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f003 0310 	and.w	r3, r3, #16
 800cdcc:	2b10      	cmp	r3, #16
 800cdce:	d10a      	bne.n	800cde6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	60fb      	str	r3, [r7, #12]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	60fb      	str	r3, [r7, #12]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cdea:	4619      	mov	r1, r3
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f008 fcef 	bl	80157d0 <HAL_UARTEx_RxEventCallback>
 800cdf2:	e002      	b.n	800cdfa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f002 fb41 	bl	800f47c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	e002      	b.n	800ce04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	e000      	b.n	800ce04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ce02:	2302      	movs	r3, #2
  }
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3730      	adds	r7, #48	@ 0x30
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce10:	b0c0      	sub	sp, #256	@ 0x100
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ce24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce28:	68d9      	ldr	r1, [r3, #12]
 800ce2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	ea40 0301 	orr.w	r3, r0, r1
 800ce34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce3a:	689a      	ldr	r2, [r3, #8]
 800ce3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce40:	691b      	ldr	r3, [r3, #16]
 800ce42:	431a      	orrs	r2, r3
 800ce44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce48:	695b      	ldr	r3, [r3, #20]
 800ce4a:	431a      	orrs	r2, r3
 800ce4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce50:	69db      	ldr	r3, [r3, #28]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ce64:	f021 010c 	bic.w	r1, r1, #12
 800ce68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ce72:	430b      	orrs	r3, r1
 800ce74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	695b      	ldr	r3, [r3, #20]
 800ce7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ce82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce86:	6999      	ldr	r1, [r3, #24]
 800ce88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	ea40 0301 	orr.w	r3, r0, r1
 800ce92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	4b8f      	ldr	r3, [pc, #572]	@ (800d0d8 <UART_SetConfig+0x2cc>)
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d005      	beq.n	800ceac <UART_SetConfig+0xa0>
 800cea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	4b8d      	ldr	r3, [pc, #564]	@ (800d0dc <UART_SetConfig+0x2d0>)
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d104      	bne.n	800ceb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ceac:	f7fc fa84 	bl	80093b8 <HAL_RCC_GetPCLK2Freq>
 800ceb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ceb4:	e003      	b.n	800cebe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ceb6:	f7fc fa6b 	bl	8009390 <HAL_RCC_GetPCLK1Freq>
 800ceba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cec2:	69db      	ldr	r3, [r3, #28]
 800cec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cec8:	f040 810c 	bne.w	800d0e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ced0:	2200      	movs	r2, #0
 800ced2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ced6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ceda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cede:	4622      	mov	r2, r4
 800cee0:	462b      	mov	r3, r5
 800cee2:	1891      	adds	r1, r2, r2
 800cee4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cee6:	415b      	adcs	r3, r3
 800cee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ceea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ceee:	4621      	mov	r1, r4
 800cef0:	eb12 0801 	adds.w	r8, r2, r1
 800cef4:	4629      	mov	r1, r5
 800cef6:	eb43 0901 	adc.w	r9, r3, r1
 800cefa:	f04f 0200 	mov.w	r2, #0
 800cefe:	f04f 0300 	mov.w	r3, #0
 800cf02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf0e:	4690      	mov	r8, r2
 800cf10:	4699      	mov	r9, r3
 800cf12:	4623      	mov	r3, r4
 800cf14:	eb18 0303 	adds.w	r3, r8, r3
 800cf18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cf1c:	462b      	mov	r3, r5
 800cf1e:	eb49 0303 	adc.w	r3, r9, r3
 800cf22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cf36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	18db      	adds	r3, r3, r3
 800cf3e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf40:	4613      	mov	r3, r2
 800cf42:	eb42 0303 	adc.w	r3, r2, r3
 800cf46:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cf4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cf50:	f7f3 feb2 	bl	8000cb8 <__aeabi_uldivmod>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4b61      	ldr	r3, [pc, #388]	@ (800d0e0 <UART_SetConfig+0x2d4>)
 800cf5a:	fba3 2302 	umull	r2, r3, r3, r2
 800cf5e:	095b      	lsrs	r3, r3, #5
 800cf60:	011c      	lsls	r4, r3, #4
 800cf62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf66:	2200      	movs	r2, #0
 800cf68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cf70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cf74:	4642      	mov	r2, r8
 800cf76:	464b      	mov	r3, r9
 800cf78:	1891      	adds	r1, r2, r2
 800cf7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cf7c:	415b      	adcs	r3, r3
 800cf7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cf84:	4641      	mov	r1, r8
 800cf86:	eb12 0a01 	adds.w	sl, r2, r1
 800cf8a:	4649      	mov	r1, r9
 800cf8c:	eb43 0b01 	adc.w	fp, r3, r1
 800cf90:	f04f 0200 	mov.w	r2, #0
 800cf94:	f04f 0300 	mov.w	r3, #0
 800cf98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cfa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfa4:	4692      	mov	sl, r2
 800cfa6:	469b      	mov	fp, r3
 800cfa8:	4643      	mov	r3, r8
 800cfaa:	eb1a 0303 	adds.w	r3, sl, r3
 800cfae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cfb2:	464b      	mov	r3, r9
 800cfb4:	eb4b 0303 	adc.w	r3, fp, r3
 800cfb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cfbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cfc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cfcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	18db      	adds	r3, r3, r3
 800cfd4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	eb42 0303 	adc.w	r3, r2, r3
 800cfdc:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cfe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cfe6:	f7f3 fe67 	bl	8000cb8 <__aeabi_uldivmod>
 800cfea:	4602      	mov	r2, r0
 800cfec:	460b      	mov	r3, r1
 800cfee:	4611      	mov	r1, r2
 800cff0:	4b3b      	ldr	r3, [pc, #236]	@ (800d0e0 <UART_SetConfig+0x2d4>)
 800cff2:	fba3 2301 	umull	r2, r3, r3, r1
 800cff6:	095b      	lsrs	r3, r3, #5
 800cff8:	2264      	movs	r2, #100	@ 0x64
 800cffa:	fb02 f303 	mul.w	r3, r2, r3
 800cffe:	1acb      	subs	r3, r1, r3
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d006:	4b36      	ldr	r3, [pc, #216]	@ (800d0e0 <UART_SetConfig+0x2d4>)
 800d008:	fba3 2302 	umull	r2, r3, r3, r2
 800d00c:	095b      	lsrs	r3, r3, #5
 800d00e:	005b      	lsls	r3, r3, #1
 800d010:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d014:	441c      	add	r4, r3
 800d016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d020:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d024:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d028:	4642      	mov	r2, r8
 800d02a:	464b      	mov	r3, r9
 800d02c:	1891      	adds	r1, r2, r2
 800d02e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d030:	415b      	adcs	r3, r3
 800d032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d038:	4641      	mov	r1, r8
 800d03a:	1851      	adds	r1, r2, r1
 800d03c:	6339      	str	r1, [r7, #48]	@ 0x30
 800d03e:	4649      	mov	r1, r9
 800d040:	414b      	adcs	r3, r1
 800d042:	637b      	str	r3, [r7, #52]	@ 0x34
 800d044:	f04f 0200 	mov.w	r2, #0
 800d048:	f04f 0300 	mov.w	r3, #0
 800d04c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d050:	4659      	mov	r1, fp
 800d052:	00cb      	lsls	r3, r1, #3
 800d054:	4651      	mov	r1, sl
 800d056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d05a:	4651      	mov	r1, sl
 800d05c:	00ca      	lsls	r2, r1, #3
 800d05e:	4610      	mov	r0, r2
 800d060:	4619      	mov	r1, r3
 800d062:	4603      	mov	r3, r0
 800d064:	4642      	mov	r2, r8
 800d066:	189b      	adds	r3, r3, r2
 800d068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d06c:	464b      	mov	r3, r9
 800d06e:	460a      	mov	r2, r1
 800d070:	eb42 0303 	adc.w	r3, r2, r3
 800d074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d084:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d08c:	460b      	mov	r3, r1
 800d08e:	18db      	adds	r3, r3, r3
 800d090:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d092:	4613      	mov	r3, r2
 800d094:	eb42 0303 	adc.w	r3, r2, r3
 800d098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d09a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d09e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d0a2:	f7f3 fe09 	bl	8000cb8 <__aeabi_uldivmod>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d0e0 <UART_SetConfig+0x2d4>)
 800d0ac:	fba3 1302 	umull	r1, r3, r3, r2
 800d0b0:	095b      	lsrs	r3, r3, #5
 800d0b2:	2164      	movs	r1, #100	@ 0x64
 800d0b4:	fb01 f303 	mul.w	r3, r1, r3
 800d0b8:	1ad3      	subs	r3, r2, r3
 800d0ba:	00db      	lsls	r3, r3, #3
 800d0bc:	3332      	adds	r3, #50	@ 0x32
 800d0be:	4a08      	ldr	r2, [pc, #32]	@ (800d0e0 <UART_SetConfig+0x2d4>)
 800d0c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0c4:	095b      	lsrs	r3, r3, #5
 800d0c6:	f003 0207 	and.w	r2, r3, #7
 800d0ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4422      	add	r2, r4
 800d0d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0d4:	e106      	b.n	800d2e4 <UART_SetConfig+0x4d8>
 800d0d6:	bf00      	nop
 800d0d8:	40011000 	.word	0x40011000
 800d0dc:	40011400 	.word	0x40011400
 800d0e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d0f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d0f6:	4642      	mov	r2, r8
 800d0f8:	464b      	mov	r3, r9
 800d0fa:	1891      	adds	r1, r2, r2
 800d0fc:	6239      	str	r1, [r7, #32]
 800d0fe:	415b      	adcs	r3, r3
 800d100:	627b      	str	r3, [r7, #36]	@ 0x24
 800d102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d106:	4641      	mov	r1, r8
 800d108:	1854      	adds	r4, r2, r1
 800d10a:	4649      	mov	r1, r9
 800d10c:	eb43 0501 	adc.w	r5, r3, r1
 800d110:	f04f 0200 	mov.w	r2, #0
 800d114:	f04f 0300 	mov.w	r3, #0
 800d118:	00eb      	lsls	r3, r5, #3
 800d11a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d11e:	00e2      	lsls	r2, r4, #3
 800d120:	4614      	mov	r4, r2
 800d122:	461d      	mov	r5, r3
 800d124:	4643      	mov	r3, r8
 800d126:	18e3      	adds	r3, r4, r3
 800d128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d12c:	464b      	mov	r3, r9
 800d12e:	eb45 0303 	adc.w	r3, r5, r3
 800d132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d142:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d146:	f04f 0200 	mov.w	r2, #0
 800d14a:	f04f 0300 	mov.w	r3, #0
 800d14e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d152:	4629      	mov	r1, r5
 800d154:	008b      	lsls	r3, r1, #2
 800d156:	4621      	mov	r1, r4
 800d158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d15c:	4621      	mov	r1, r4
 800d15e:	008a      	lsls	r2, r1, #2
 800d160:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d164:	f7f3 fda8 	bl	8000cb8 <__aeabi_uldivmod>
 800d168:	4602      	mov	r2, r0
 800d16a:	460b      	mov	r3, r1
 800d16c:	4b60      	ldr	r3, [pc, #384]	@ (800d2f0 <UART_SetConfig+0x4e4>)
 800d16e:	fba3 2302 	umull	r2, r3, r3, r2
 800d172:	095b      	lsrs	r3, r3, #5
 800d174:	011c      	lsls	r4, r3, #4
 800d176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d17a:	2200      	movs	r2, #0
 800d17c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d180:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d188:	4642      	mov	r2, r8
 800d18a:	464b      	mov	r3, r9
 800d18c:	1891      	adds	r1, r2, r2
 800d18e:	61b9      	str	r1, [r7, #24]
 800d190:	415b      	adcs	r3, r3
 800d192:	61fb      	str	r3, [r7, #28]
 800d194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d198:	4641      	mov	r1, r8
 800d19a:	1851      	adds	r1, r2, r1
 800d19c:	6139      	str	r1, [r7, #16]
 800d19e:	4649      	mov	r1, r9
 800d1a0:	414b      	adcs	r3, r1
 800d1a2:	617b      	str	r3, [r7, #20]
 800d1a4:	f04f 0200 	mov.w	r2, #0
 800d1a8:	f04f 0300 	mov.w	r3, #0
 800d1ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1b0:	4659      	mov	r1, fp
 800d1b2:	00cb      	lsls	r3, r1, #3
 800d1b4:	4651      	mov	r1, sl
 800d1b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1ba:	4651      	mov	r1, sl
 800d1bc:	00ca      	lsls	r2, r1, #3
 800d1be:	4610      	mov	r0, r2
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	4642      	mov	r2, r8
 800d1c6:	189b      	adds	r3, r3, r2
 800d1c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d1cc:	464b      	mov	r3, r9
 800d1ce:	460a      	mov	r2, r1
 800d1d0:	eb42 0303 	adc.w	r3, r2, r3
 800d1d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d1e4:	f04f 0200 	mov.w	r2, #0
 800d1e8:	f04f 0300 	mov.w	r3, #0
 800d1ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	008b      	lsls	r3, r1, #2
 800d1f4:	4641      	mov	r1, r8
 800d1f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1fa:	4641      	mov	r1, r8
 800d1fc:	008a      	lsls	r2, r1, #2
 800d1fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d202:	f7f3 fd59 	bl	8000cb8 <__aeabi_uldivmod>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4611      	mov	r1, r2
 800d20c:	4b38      	ldr	r3, [pc, #224]	@ (800d2f0 <UART_SetConfig+0x4e4>)
 800d20e:	fba3 2301 	umull	r2, r3, r3, r1
 800d212:	095b      	lsrs	r3, r3, #5
 800d214:	2264      	movs	r2, #100	@ 0x64
 800d216:	fb02 f303 	mul.w	r3, r2, r3
 800d21a:	1acb      	subs	r3, r1, r3
 800d21c:	011b      	lsls	r3, r3, #4
 800d21e:	3332      	adds	r3, #50	@ 0x32
 800d220:	4a33      	ldr	r2, [pc, #204]	@ (800d2f0 <UART_SetConfig+0x4e4>)
 800d222:	fba2 2303 	umull	r2, r3, r2, r3
 800d226:	095b      	lsrs	r3, r3, #5
 800d228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d22c:	441c      	add	r4, r3
 800d22e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d232:	2200      	movs	r2, #0
 800d234:	673b      	str	r3, [r7, #112]	@ 0x70
 800d236:	677a      	str	r2, [r7, #116]	@ 0x74
 800d238:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d23c:	4642      	mov	r2, r8
 800d23e:	464b      	mov	r3, r9
 800d240:	1891      	adds	r1, r2, r2
 800d242:	60b9      	str	r1, [r7, #8]
 800d244:	415b      	adcs	r3, r3
 800d246:	60fb      	str	r3, [r7, #12]
 800d248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d24c:	4641      	mov	r1, r8
 800d24e:	1851      	adds	r1, r2, r1
 800d250:	6039      	str	r1, [r7, #0]
 800d252:	4649      	mov	r1, r9
 800d254:	414b      	adcs	r3, r1
 800d256:	607b      	str	r3, [r7, #4]
 800d258:	f04f 0200 	mov.w	r2, #0
 800d25c:	f04f 0300 	mov.w	r3, #0
 800d260:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d264:	4659      	mov	r1, fp
 800d266:	00cb      	lsls	r3, r1, #3
 800d268:	4651      	mov	r1, sl
 800d26a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d26e:	4651      	mov	r1, sl
 800d270:	00ca      	lsls	r2, r1, #3
 800d272:	4610      	mov	r0, r2
 800d274:	4619      	mov	r1, r3
 800d276:	4603      	mov	r3, r0
 800d278:	4642      	mov	r2, r8
 800d27a:	189b      	adds	r3, r3, r2
 800d27c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d27e:	464b      	mov	r3, r9
 800d280:	460a      	mov	r2, r1
 800d282:	eb42 0303 	adc.w	r3, r2, r3
 800d286:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	663b      	str	r3, [r7, #96]	@ 0x60
 800d292:	667a      	str	r2, [r7, #100]	@ 0x64
 800d294:	f04f 0200 	mov.w	r2, #0
 800d298:	f04f 0300 	mov.w	r3, #0
 800d29c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d2a0:	4649      	mov	r1, r9
 800d2a2:	008b      	lsls	r3, r1, #2
 800d2a4:	4641      	mov	r1, r8
 800d2a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2aa:	4641      	mov	r1, r8
 800d2ac:	008a      	lsls	r2, r1, #2
 800d2ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d2b2:	f7f3 fd01 	bl	8000cb8 <__aeabi_uldivmod>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d2f0 <UART_SetConfig+0x4e4>)
 800d2bc:	fba3 1302 	umull	r1, r3, r3, r2
 800d2c0:	095b      	lsrs	r3, r3, #5
 800d2c2:	2164      	movs	r1, #100	@ 0x64
 800d2c4:	fb01 f303 	mul.w	r3, r1, r3
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	011b      	lsls	r3, r3, #4
 800d2cc:	3332      	adds	r3, #50	@ 0x32
 800d2ce:	4a08      	ldr	r2, [pc, #32]	@ (800d2f0 <UART_SetConfig+0x4e4>)
 800d2d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d2d4:	095b      	lsrs	r3, r3, #5
 800d2d6:	f003 020f 	and.w	r2, r3, #15
 800d2da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4422      	add	r2, r4
 800d2e2:	609a      	str	r2, [r3, #8]
}
 800d2e4:	bf00      	nop
 800d2e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2f0:	51eb851f 	.word	0x51eb851f

0800d2f4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d2f4:	b084      	sub	sp, #16
 800d2f6:	b480      	push	{r7}
 800d2f8:	b085      	sub	sp, #20
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
 800d2fe:	f107 001c 	add.w	r0, r7, #28
 800d302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d306:	2300      	movs	r3, #0
 800d308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d30a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d30c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d30e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d312:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d316:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d31a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d31e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	4313      	orrs	r3, r2
 800d324:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800d32e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	431a      	orrs	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3714      	adds	r7, #20
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	b004      	add	sp, #16
 800d348:	4770      	bx	lr

0800d34a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d34a:	b480      	push	{r7}
 800d34c:	b083      	sub	sp, #12
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d358:	4618      	mov	r0, r3
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	370c      	adds	r7, #12
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d386:	b480      	push	{r7}
 800d388:	b083      	sub	sp, #12
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2203      	movs	r2, #3
 800d392:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	370c      	adds	r7, #12
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr

0800d3a2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d3a2:	b480      	push	{r7}
 800d3a4:	b083      	sub	sp, #12
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f003 0303 	and.w	r3, r3, #3
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	370c      	adds	r7, #12
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b085      	sub	sp, #20
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3dc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d3e2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d3e8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d3f8:	f023 030f 	bic.w	r3, r3, #15
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	431a      	orrs	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d412:	b480      	push	{r7}
 800d414:	b083      	sub	sp, #12
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	b2db      	uxtb	r3, r3
}
 800d420:	4618      	mov	r0, r3
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	3314      	adds	r3, #20
 800d43a:	461a      	mov	r2, r3
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	4413      	add	r3, r2
 800d440:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
}  
 800d446:	4618      	mov	r0, r3
 800d448:	3714      	adds	r7, #20
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d452:	b480      	push	{r7}
 800d454:	b085      	sub	sp, #20
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	685a      	ldr	r2, [r3, #4]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d478:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d47e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d484:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d486:	68fa      	ldr	r2, [r7, #12]
 800d488:	4313      	orrs	r3, r2
 800d48a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d490:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	431a      	orrs	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d49c:	2300      	movs	r3, #0

}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3714      	adds	r7, #20
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr

0800d4aa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b088      	sub	sp, #32
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
 800d4b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d4b8:	2310      	movs	r3, #16
 800d4ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4bc:	2340      	movs	r3, #64	@ 0x40
 800d4be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4ca:	f107 0308 	add.w	r3, r7, #8
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7ff ff74 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d4d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4da:	2110      	movs	r1, #16
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f9d7 	bl	800d890 <SDMMC_GetCmdResp1>
 800d4e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4e4:	69fb      	ldr	r3, [r7, #28]
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3720      	adds	r7, #32
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b088      	sub	sp, #32
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
 800d4f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d4fc:	2311      	movs	r3, #17
 800d4fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d500:	2340      	movs	r3, #64	@ 0x40
 800d502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d504:	2300      	movs	r3, #0
 800d506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d50c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d50e:	f107 0308 	add.w	r3, r7, #8
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7ff ff52 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d51a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d51e:	2111      	movs	r1, #17
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 f9b5 	bl	800d890 <SDMMC_GetCmdResp1>
 800d526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d528:	69fb      	ldr	r3, [r7, #28]
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3720      	adds	r7, #32
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d532:	b580      	push	{r7, lr}
 800d534:	b088      	sub	sp, #32
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d540:	2312      	movs	r3, #18
 800d542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d544:	2340      	movs	r3, #64	@ 0x40
 800d546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d548:	2300      	movs	r3, #0
 800d54a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d54c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d550:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d552:	f107 0308 	add.w	r3, r7, #8
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7ff ff30 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d55e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d562:	2112      	movs	r1, #18
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f993 	bl	800d890 <SDMMC_GetCmdResp1>
 800d56a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d56c:	69fb      	ldr	r3, [r7, #28]
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3720      	adds	r7, #32
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b088      	sub	sp, #32
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
 800d57e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d584:	2318      	movs	r3, #24
 800d586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d588:	2340      	movs	r3, #64	@ 0x40
 800d58a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d58c:	2300      	movs	r3, #0
 800d58e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d594:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d596:	f107 0308 	add.w	r3, r7, #8
 800d59a:	4619      	mov	r1, r3
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7ff ff0e 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d5a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5a6:	2118      	movs	r1, #24
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 f971 	bl	800d890 <SDMMC_GetCmdResp1>
 800d5ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5b0:	69fb      	ldr	r3, [r7, #28]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3720      	adds	r7, #32
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b088      	sub	sp, #32
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d5c8:	2319      	movs	r3, #25
 800d5ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5cc:	2340      	movs	r3, #64	@ 0x40
 800d5ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5da:	f107 0308 	add.w	r3, r7, #8
 800d5de:	4619      	mov	r1, r3
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff feec 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d5e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5ea:	2119      	movs	r1, #25
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f94f 	bl	800d890 <SDMMC_GetCmdResp1>
 800d5f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5f4:	69fb      	ldr	r3, [r7, #28]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3720      	adds	r7, #32
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
	...

0800d600 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b088      	sub	sp, #32
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d608:	2300      	movs	r3, #0
 800d60a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d60c:	230c      	movs	r3, #12
 800d60e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d610:	2340      	movs	r3, #64	@ 0x40
 800d612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d614:	2300      	movs	r3, #0
 800d616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d61c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d61e:	f107 0308 	add.w	r3, r7, #8
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f7ff feca 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d62a:	4a05      	ldr	r2, [pc, #20]	@ (800d640 <SDMMC_CmdStopTransfer+0x40>)
 800d62c:	210c      	movs	r1, #12
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 f92e 	bl	800d890 <SDMMC_GetCmdResp1>
 800d634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d636:	69fb      	ldr	r3, [r7, #28]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3720      	adds	r7, #32
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	05f5e100 	.word	0x05f5e100

0800d644 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b08a      	sub	sp, #40	@ 0x28
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d654:	2307      	movs	r3, #7
 800d656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d658:	2340      	movs	r3, #64	@ 0x40
 800d65a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d65c:	2300      	movs	r3, #0
 800d65e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d664:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d666:	f107 0310 	add.w	r3, r7, #16
 800d66a:	4619      	mov	r1, r3
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	f7ff fea6 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d672:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d676:	2107      	movs	r1, #7
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f000 f909 	bl	800d890 <SDMMC_GetCmdResp1>
 800d67e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d682:	4618      	mov	r0, r3
 800d684:	3728      	adds	r7, #40	@ 0x28
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b088      	sub	sp, #32
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d692:	2300      	movs	r3, #0
 800d694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d696:	2300      	movs	r3, #0
 800d698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d69a:	2300      	movs	r3, #0
 800d69c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6a8:	f107 0308 	add.w	r3, r7, #8
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff fe85 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fb23 	bl	800dd00 <SDMMC_GetCmdError>
 800d6ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6bc:	69fb      	ldr	r3, [r7, #28]
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3720      	adds	r7, #32
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b088      	sub	sp, #32
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6ce:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d6d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6d4:	2308      	movs	r3, #8
 800d6d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6d8:	2340      	movs	r3, #64	@ 0x40
 800d6da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6e6:	f107 0308 	add.w	r3, r7, #8
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f7ff fe66 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fab6 	bl	800dc64 <SDMMC_GetCmdResp7>
 800d6f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6fa:	69fb      	ldr	r3, [r7, #28]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3720      	adds	r7, #32
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b088      	sub	sp, #32
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d712:	2337      	movs	r3, #55	@ 0x37
 800d714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d716:	2340      	movs	r3, #64	@ 0x40
 800d718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d71a:	2300      	movs	r3, #0
 800d71c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d71e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d722:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d724:	f107 0308 	add.w	r3, r7, #8
 800d728:	4619      	mov	r1, r3
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff fe47 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d730:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d734:	2137      	movs	r1, #55	@ 0x37
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f8aa 	bl	800d890 <SDMMC_GetCmdResp1>
 800d73c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d73e:	69fb      	ldr	r3, [r7, #28]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3720      	adds	r7, #32
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d758:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d75c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d75e:	2329      	movs	r3, #41	@ 0x29
 800d760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d762:	2340      	movs	r3, #64	@ 0x40
 800d764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d766:	2300      	movs	r3, #0
 800d768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d76a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d76e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d770:	f107 0308 	add.w	r3, r7, #8
 800d774:	4619      	mov	r1, r3
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f7ff fe21 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f9bd 	bl	800dafc <SDMMC_GetCmdResp3>
 800d782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d784:	69fb      	ldr	r3, [r7, #28]
}
 800d786:	4618      	mov	r0, r3
 800d788:	3720      	adds	r7, #32
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b088      	sub	sp, #32
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d796:	2300      	movs	r3, #0
 800d798:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d79a:	2302      	movs	r3, #2
 800d79c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d79e:	23c0      	movs	r3, #192	@ 0xc0
 800d7a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7ac:	f107 0308 	add.w	r3, r7, #8
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff fe03 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 f957 	bl	800da6c <SDMMC_GetCmdResp2>
 800d7be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7c0:	69fb      	ldr	r3, [r7, #28]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3720      	adds	r7, #32
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b088      	sub	sp, #32
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d7d8:	2309      	movs	r3, #9
 800d7da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d7dc:	23c0      	movs	r3, #192	@ 0xc0
 800d7de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7ea:	f107 0308 	add.w	r3, r7, #8
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7ff fde4 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f938 	bl	800da6c <SDMMC_GetCmdResp2>
 800d7fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7fe:	69fb      	ldr	r3, [r7, #28]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3720      	adds	r7, #32
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b088      	sub	sp, #32
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d812:	2300      	movs	r3, #0
 800d814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d816:	2303      	movs	r3, #3
 800d818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d81a:	2340      	movs	r3, #64	@ 0x40
 800d81c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d81e:	2300      	movs	r3, #0
 800d820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d826:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d828:	f107 0308 	add.w	r3, r7, #8
 800d82c:	4619      	mov	r1, r3
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7ff fdc5 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d834:	683a      	ldr	r2, [r7, #0]
 800d836:	2103      	movs	r1, #3
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 f99d 	bl	800db78 <SDMMC_GetCmdResp6>
 800d83e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d840:	69fb      	ldr	r3, [r7, #28]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3720      	adds	r7, #32
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b088      	sub	sp, #32
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d858:	230d      	movs	r3, #13
 800d85a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d85c:	2340      	movs	r3, #64	@ 0x40
 800d85e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d860:	2300      	movs	r3, #0
 800d862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d868:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d86a:	f107 0308 	add.w	r3, r7, #8
 800d86e:	4619      	mov	r1, r3
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f7ff fda4 	bl	800d3be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d87a:	210d      	movs	r1, #13
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 f807 	bl	800d890 <SDMMC_GetCmdResp1>
 800d882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d884:	69fb      	ldr	r3, [r7, #28]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3720      	adds	r7, #32
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
	...

0800d890 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b088      	sub	sp, #32
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	460b      	mov	r3, r1
 800d89a:	607a      	str	r2, [r7, #4]
 800d89c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d89e:	4b70      	ldr	r3, [pc, #448]	@ (800da60 <SDMMC_GetCmdResp1+0x1d0>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a70      	ldr	r2, [pc, #448]	@ (800da64 <SDMMC_GetCmdResp1+0x1d4>)
 800d8a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d8a8:	0a5a      	lsrs	r2, r3, #9
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	fb02 f303 	mul.w	r3, r2, r3
 800d8b0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	1e5a      	subs	r2, r3, #1
 800d8b6:	61fa      	str	r2, [r7, #28]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d102      	bne.n	800d8c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8c0:	e0c9      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8c6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d0ef      	beq.n	800d8b2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1ea      	bne.n	800d8b2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8e0:	f003 0304 	and.w	r3, r3, #4
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d004      	beq.n	800d8f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2204      	movs	r2, #4
 800d8ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8ee:	2304      	movs	r3, #4
 800d8f0:	e0b1      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8f6:	f003 0301 	and.w	r3, r3, #1
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d004      	beq.n	800d908 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2201      	movs	r2, #1
 800d902:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d904:	2301      	movs	r3, #1
 800d906:	e0a6      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	22c5      	movs	r2, #197	@ 0xc5
 800d90c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f7ff fd7f 	bl	800d412 <SDIO_GetCommandResponse>
 800d914:	4603      	mov	r3, r0
 800d916:	461a      	mov	r2, r3
 800d918:	7afb      	ldrb	r3, [r7, #11]
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d001      	beq.n	800d922 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d91e:	2301      	movs	r3, #1
 800d920:	e099      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d922:	2100      	movs	r1, #0
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f7ff fd81 	bl	800d42c <SDIO_GetResponse>
 800d92a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d92c:	697a      	ldr	r2, [r7, #20]
 800d92e:	4b4e      	ldr	r3, [pc, #312]	@ (800da68 <SDMMC_GetCmdResp1+0x1d8>)
 800d930:	4013      	ands	r3, r2
 800d932:	2b00      	cmp	r3, #0
 800d934:	d101      	bne.n	800d93a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d936:	2300      	movs	r3, #0
 800d938:	e08d      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	da02      	bge.n	800d946 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d940:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d944:	e087      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d001      	beq.n	800d954 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d950:	2340      	movs	r3, #64	@ 0x40
 800d952:	e080      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d001      	beq.n	800d962 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d95e:	2380      	movs	r3, #128	@ 0x80
 800d960:	e079      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d96c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d970:	e071      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d002      	beq.n	800d982 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d97c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d980:	e069      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d002      	beq.n	800d992 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d98c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d990:	e061      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d99c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d9a0:	e059      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d002      	beq.n	800d9b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d9ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d9b0:	e051      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d9bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d9c0:	e049      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d002      	beq.n	800d9d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d9cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d9d0:	e041      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d9dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9e0:	e039      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d9ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d9f0:	e031      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d9fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800da00:	e029      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800da0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800da10:	e021      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800da1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800da20:	e019      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da2c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800da30:	e011      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800da3c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800da40:	e009      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f003 0308 	and.w	r3, r3, #8
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da4c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800da50:	e001      	b.n	800da56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800da56:	4618      	mov	r0, r3
 800da58:	3720      	adds	r7, #32
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	20000010 	.word	0x20000010
 800da64:	10624dd3 	.word	0x10624dd3
 800da68:	fdffe008 	.word	0xfdffe008

0800da6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b085      	sub	sp, #20
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da74:	4b1f      	ldr	r3, [pc, #124]	@ (800daf4 <SDMMC_GetCmdResp2+0x88>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a1f      	ldr	r2, [pc, #124]	@ (800daf8 <SDMMC_GetCmdResp2+0x8c>)
 800da7a:	fba2 2303 	umull	r2, r3, r2, r3
 800da7e:	0a5b      	lsrs	r3, r3, #9
 800da80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da84:	fb02 f303 	mul.w	r3, r2, r3
 800da88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	1e5a      	subs	r2, r3, #1
 800da8e:	60fa      	str	r2, [r7, #12]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d102      	bne.n	800da9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da98:	e026      	b.n	800dae8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d0ef      	beq.n	800da8a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d1ea      	bne.n	800da8a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dab8:	f003 0304 	and.w	r3, r3, #4
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d004      	beq.n	800daca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2204      	movs	r2, #4
 800dac4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dac6:	2304      	movs	r3, #4
 800dac8:	e00e      	b.n	800dae8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d004      	beq.n	800dae0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2201      	movs	r2, #1
 800dada:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dadc:	2301      	movs	r3, #1
 800dade:	e003      	b.n	800dae8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	22c5      	movs	r2, #197	@ 0xc5
 800dae4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3714      	adds	r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr
 800daf4:	20000010 	.word	0x20000010
 800daf8:	10624dd3 	.word	0x10624dd3

0800dafc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db04:	4b1a      	ldr	r3, [pc, #104]	@ (800db70 <SDMMC_GetCmdResp3+0x74>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a1a      	ldr	r2, [pc, #104]	@ (800db74 <SDMMC_GetCmdResp3+0x78>)
 800db0a:	fba2 2303 	umull	r2, r3, r2, r3
 800db0e:	0a5b      	lsrs	r3, r3, #9
 800db10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db14:	fb02 f303 	mul.w	r3, r2, r3
 800db18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	1e5a      	subs	r2, r3, #1
 800db1e:	60fa      	str	r2, [r7, #12]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d102      	bne.n	800db2a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db28:	e01b      	b.n	800db62 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db36:	2b00      	cmp	r3, #0
 800db38:	d0ef      	beq.n	800db1a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1ea      	bne.n	800db1a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d004      	beq.n	800db5a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2204      	movs	r2, #4
 800db54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db56:	2304      	movs	r3, #4
 800db58:	e003      	b.n	800db62 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	22c5      	movs	r2, #197	@ 0xc5
 800db5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3714      	adds	r7, #20
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	20000010 	.word	0x20000010
 800db74:	10624dd3 	.word	0x10624dd3

0800db78 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b088      	sub	sp, #32
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	460b      	mov	r3, r1
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db86:	4b35      	ldr	r3, [pc, #212]	@ (800dc5c <SDMMC_GetCmdResp6+0xe4>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a35      	ldr	r2, [pc, #212]	@ (800dc60 <SDMMC_GetCmdResp6+0xe8>)
 800db8c:	fba2 2303 	umull	r2, r3, r2, r3
 800db90:	0a5b      	lsrs	r3, r3, #9
 800db92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db96:	fb02 f303 	mul.w	r3, r2, r3
 800db9a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	1e5a      	subs	r2, r3, #1
 800dba0:	61fa      	str	r2, [r7, #28]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d102      	bne.n	800dbac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dba6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbaa:	e052      	b.n	800dc52 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbb0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0ef      	beq.n	800db9c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1ea      	bne.n	800db9c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbca:	f003 0304 	and.w	r3, r3, #4
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d004      	beq.n	800dbdc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2204      	movs	r2, #4
 800dbd6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbd8:	2304      	movs	r3, #4
 800dbda:	e03a      	b.n	800dc52 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbe0:	f003 0301 	and.w	r3, r3, #1
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d004      	beq.n	800dbf2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2201      	movs	r2, #1
 800dbec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e02f      	b.n	800dc52 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f7ff fc0d 	bl	800d412 <SDIO_GetCommandResponse>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	7afb      	ldrb	r3, [r7, #11]
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d001      	beq.n	800dc06 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc02:	2301      	movs	r3, #1
 800dc04:	e025      	b.n	800dc52 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	22c5      	movs	r2, #197	@ 0xc5
 800dc0a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f7ff fc0c 	bl	800d42c <SDIO_GetResponse>
 800dc14:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d106      	bne.n	800dc2e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	0c1b      	lsrs	r3, r3, #16
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e011      	b.n	800dc52 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d002      	beq.n	800dc3e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dc3c:	e009      	b.n	800dc52 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d002      	beq.n	800dc4e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc4c:	e001      	b.n	800dc52 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3720      	adds	r7, #32
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	20000010 	.word	0x20000010
 800dc60:	10624dd3 	.word	0x10624dd3

0800dc64 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc6c:	4b22      	ldr	r3, [pc, #136]	@ (800dcf8 <SDMMC_GetCmdResp7+0x94>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a22      	ldr	r2, [pc, #136]	@ (800dcfc <SDMMC_GetCmdResp7+0x98>)
 800dc72:	fba2 2303 	umull	r2, r3, r2, r3
 800dc76:	0a5b      	lsrs	r3, r3, #9
 800dc78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc7c:	fb02 f303 	mul.w	r3, r2, r3
 800dc80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	1e5a      	subs	r2, r3, #1
 800dc86:	60fa      	str	r2, [r7, #12]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d102      	bne.n	800dc92 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc90:	e02c      	b.n	800dcec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d0ef      	beq.n	800dc82 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1ea      	bne.n	800dc82 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcb0:	f003 0304 	and.w	r3, r3, #4
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d004      	beq.n	800dcc2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2204      	movs	r2, #4
 800dcbc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcbe:	2304      	movs	r3, #4
 800dcc0:	e014      	b.n	800dcec <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcc6:	f003 0301 	and.w	r3, r3, #1
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d004      	beq.n	800dcd8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e009      	b.n	800dcec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d002      	beq.n	800dcea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2240      	movs	r2, #64	@ 0x40
 800dce8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dcea:	2300      	movs	r3, #0
  
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3714      	adds	r7, #20
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr
 800dcf8:	20000010 	.word	0x20000010
 800dcfc:	10624dd3 	.word	0x10624dd3

0800dd00 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd08:	4b11      	ldr	r3, [pc, #68]	@ (800dd50 <SDMMC_GetCmdError+0x50>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a11      	ldr	r2, [pc, #68]	@ (800dd54 <SDMMC_GetCmdError+0x54>)
 800dd0e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd12:	0a5b      	lsrs	r3, r3, #9
 800dd14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd18:	fb02 f303 	mul.w	r3, r2, r3
 800dd1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	1e5a      	subs	r2, r3, #1
 800dd22:	60fa      	str	r2, [r7, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d102      	bne.n	800dd2e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd2c:	e009      	b.n	800dd42 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d0f1      	beq.n	800dd1e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	22c5      	movs	r2, #197	@ 0xc5
 800dd3e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	20000010 	.word	0x20000010
 800dd54:	10624dd3 	.word	0x10624dd3

0800dd58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd58:	b084      	sub	sp, #16
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b084      	sub	sp, #16
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	f107 001c 	add.w	r0, r7, #28
 800dd66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd6a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d123      	bne.n	800ddba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800dd86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d105      	bne.n	800ddae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f001 fb32 	bl	800f418 <USB_CoreReset>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	73fb      	strb	r3, [r7, #15]
 800ddb8:	e01b      	b.n	800ddf2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f001 fb26 	bl	800f418 <USB_CoreReset>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ddd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d106      	bne.n	800dde6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dddc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	639a      	str	r2, [r3, #56]	@ 0x38
 800dde4:	e005      	b.n	800ddf2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ddf2:	7fbb      	ldrb	r3, [r7, #30]
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d10b      	bne.n	800de10 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	f043 0206 	orr.w	r2, r3, #6
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	f043 0220 	orr.w	r2, r3, #32
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800de10:	7bfb      	ldrb	r3, [r7, #15]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de1c:	b004      	add	sp, #16
 800de1e:	4770      	bx	lr

0800de20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	4613      	mov	r3, r2
 800de2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800de2e:	79fb      	ldrb	r3, [r7, #7]
 800de30:	2b02      	cmp	r3, #2
 800de32:	d165      	bne.n	800df00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	4a41      	ldr	r2, [pc, #260]	@ (800df3c <USB_SetTurnaroundTime+0x11c>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d906      	bls.n	800de4a <USB_SetTurnaroundTime+0x2a>
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	4a40      	ldr	r2, [pc, #256]	@ (800df40 <USB_SetTurnaroundTime+0x120>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d202      	bcs.n	800de4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800de44:	230f      	movs	r3, #15
 800de46:	617b      	str	r3, [r7, #20]
 800de48:	e062      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	4a3c      	ldr	r2, [pc, #240]	@ (800df40 <USB_SetTurnaroundTime+0x120>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d306      	bcc.n	800de60 <USB_SetTurnaroundTime+0x40>
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	4a3b      	ldr	r2, [pc, #236]	@ (800df44 <USB_SetTurnaroundTime+0x124>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d202      	bcs.n	800de60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800de5a:	230e      	movs	r3, #14
 800de5c:	617b      	str	r3, [r7, #20]
 800de5e:	e057      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	4a38      	ldr	r2, [pc, #224]	@ (800df44 <USB_SetTurnaroundTime+0x124>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d306      	bcc.n	800de76 <USB_SetTurnaroundTime+0x56>
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	4a37      	ldr	r2, [pc, #220]	@ (800df48 <USB_SetTurnaroundTime+0x128>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d202      	bcs.n	800de76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800de70:	230d      	movs	r3, #13
 800de72:	617b      	str	r3, [r7, #20]
 800de74:	e04c      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	4a33      	ldr	r2, [pc, #204]	@ (800df48 <USB_SetTurnaroundTime+0x128>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d306      	bcc.n	800de8c <USB_SetTurnaroundTime+0x6c>
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	4a32      	ldr	r2, [pc, #200]	@ (800df4c <USB_SetTurnaroundTime+0x12c>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d802      	bhi.n	800de8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800de86:	230c      	movs	r3, #12
 800de88:	617b      	str	r3, [r7, #20]
 800de8a:	e041      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	4a2f      	ldr	r2, [pc, #188]	@ (800df4c <USB_SetTurnaroundTime+0x12c>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d906      	bls.n	800dea2 <USB_SetTurnaroundTime+0x82>
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	4a2e      	ldr	r2, [pc, #184]	@ (800df50 <USB_SetTurnaroundTime+0x130>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d802      	bhi.n	800dea2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800de9c:	230b      	movs	r3, #11
 800de9e:	617b      	str	r3, [r7, #20]
 800dea0:	e036      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	4a2a      	ldr	r2, [pc, #168]	@ (800df50 <USB_SetTurnaroundTime+0x130>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d906      	bls.n	800deb8 <USB_SetTurnaroundTime+0x98>
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	4a29      	ldr	r2, [pc, #164]	@ (800df54 <USB_SetTurnaroundTime+0x134>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d802      	bhi.n	800deb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800deb2:	230a      	movs	r3, #10
 800deb4:	617b      	str	r3, [r7, #20]
 800deb6:	e02b      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	4a26      	ldr	r2, [pc, #152]	@ (800df54 <USB_SetTurnaroundTime+0x134>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d906      	bls.n	800dece <USB_SetTurnaroundTime+0xae>
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	4a25      	ldr	r2, [pc, #148]	@ (800df58 <USB_SetTurnaroundTime+0x138>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d202      	bcs.n	800dece <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dec8:	2309      	movs	r3, #9
 800deca:	617b      	str	r3, [r7, #20]
 800decc:	e020      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	4a21      	ldr	r2, [pc, #132]	@ (800df58 <USB_SetTurnaroundTime+0x138>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d306      	bcc.n	800dee4 <USB_SetTurnaroundTime+0xc4>
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	4a20      	ldr	r2, [pc, #128]	@ (800df5c <USB_SetTurnaroundTime+0x13c>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d802      	bhi.n	800dee4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dede:	2308      	movs	r3, #8
 800dee0:	617b      	str	r3, [r7, #20]
 800dee2:	e015      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	4a1d      	ldr	r2, [pc, #116]	@ (800df5c <USB_SetTurnaroundTime+0x13c>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d906      	bls.n	800defa <USB_SetTurnaroundTime+0xda>
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	4a1c      	ldr	r2, [pc, #112]	@ (800df60 <USB_SetTurnaroundTime+0x140>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d202      	bcs.n	800defa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800def4:	2307      	movs	r3, #7
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	e00a      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800defa:	2306      	movs	r3, #6
 800defc:	617b      	str	r3, [r7, #20]
 800defe:	e007      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800df00:	79fb      	ldrb	r3, [r7, #7]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d102      	bne.n	800df0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800df06:	2309      	movs	r3, #9
 800df08:	617b      	str	r3, [r7, #20]
 800df0a:	e001      	b.n	800df10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800df0c:	2309      	movs	r3, #9
 800df0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	68da      	ldr	r2, [r3, #12]
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	029b      	lsls	r3, r3, #10
 800df24:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800df28:	431a      	orrs	r2, r3
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	371c      	adds	r7, #28
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	00d8acbf 	.word	0x00d8acbf
 800df40:	00e4e1c0 	.word	0x00e4e1c0
 800df44:	00f42400 	.word	0x00f42400
 800df48:	01067380 	.word	0x01067380
 800df4c:	011a499f 	.word	0x011a499f
 800df50:	01312cff 	.word	0x01312cff
 800df54:	014ca43f 	.word	0x014ca43f
 800df58:	016e3600 	.word	0x016e3600
 800df5c:	01a6ab1f 	.word	0x01a6ab1f
 800df60:	01e84800 	.word	0x01e84800

0800df64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	f043 0201 	orr.w	r2, r3, #1
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df86:	b480      	push	{r7}
 800df88:	b083      	sub	sp, #12
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	f023 0201 	bic.w	r2, r3, #1
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dfc4:	78fb      	ldrb	r3, [r7, #3]
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d115      	bne.n	800dff6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dfd6:	200a      	movs	r0, #10
 800dfd8:	f7f6 f8aa 	bl	8004130 <HAL_Delay>
      ms += 10U;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	330a      	adds	r3, #10
 800dfe0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f001 f988 	bl	800f2f8 <USB_GetMode>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d01e      	beq.n	800e02c <USB_SetCurrentMode+0x84>
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2bc7      	cmp	r3, #199	@ 0xc7
 800dff2:	d9f0      	bls.n	800dfd6 <USB_SetCurrentMode+0x2e>
 800dff4:	e01a      	b.n	800e02c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dff6:	78fb      	ldrb	r3, [r7, #3]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d115      	bne.n	800e028 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e008:	200a      	movs	r0, #10
 800e00a:	f7f6 f891 	bl	8004130 <HAL_Delay>
      ms += 10U;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	330a      	adds	r3, #10
 800e012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f001 f96f 	bl	800f2f8 <USB_GetMode>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d005      	beq.n	800e02c <USB_SetCurrentMode+0x84>
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2bc7      	cmp	r3, #199	@ 0xc7
 800e024:	d9f0      	bls.n	800e008 <USB_SetCurrentMode+0x60>
 800e026:	e001      	b.n	800e02c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e028:	2301      	movs	r3, #1
 800e02a:	e005      	b.n	800e038 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2bc8      	cmp	r3, #200	@ 0xc8
 800e030:	d101      	bne.n	800e036 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e032:	2301      	movs	r3, #1
 800e034:	e000      	b.n	800e038 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e040:	b084      	sub	sp, #16
 800e042:	b580      	push	{r7, lr}
 800e044:	b086      	sub	sp, #24
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e04e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e05a:	2300      	movs	r3, #0
 800e05c:	613b      	str	r3, [r7, #16]
 800e05e:	e009      	b.n	800e074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	3340      	adds	r3, #64	@ 0x40
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	2200      	movs	r2, #0
 800e06c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	3301      	adds	r3, #1
 800e072:	613b      	str	r3, [r7, #16]
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	2b0e      	cmp	r3, #14
 800e078:	d9f2      	bls.n	800e060 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e07a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d11c      	bne.n	800e0bc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	68fa      	ldr	r2, [r7, #12]
 800e08c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e090:	f043 0302 	orr.w	r3, r3, #2
 800e094:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e09a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0a6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0b2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	639a      	str	r2, [r3, #56]	@ 0x38
 800e0ba:	e00b      	b.n	800e0d4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0c0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0cc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e0da:	461a      	mov	r2, r3
 800e0dc:	2300      	movs	r3, #0
 800e0de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e0e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d10d      	bne.n	800e104 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d104      	bne.n	800e0fa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 f968 	bl	800e3c8 <USB_SetDevSpeed>
 800e0f8:	e008      	b.n	800e10c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 f963 	bl	800e3c8 <USB_SetDevSpeed>
 800e102:	e003      	b.n	800e10c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e104:	2103      	movs	r1, #3
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 f95e 	bl	800e3c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e10c:	2110      	movs	r1, #16
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 f8fa 	bl	800e308 <USB_FlushTxFifo>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d001      	beq.n	800e11e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800e11a:	2301      	movs	r3, #1
 800e11c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f924 	bl	800e36c <USB_FlushRxFifo>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800e12a:	2301      	movs	r3, #1
 800e12c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e134:	461a      	mov	r2, r3
 800e136:	2300      	movs	r3, #0
 800e138:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e140:	461a      	mov	r2, r3
 800e142:	2300      	movs	r3, #0
 800e144:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e14c:	461a      	mov	r2, r3
 800e14e:	2300      	movs	r3, #0
 800e150:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e152:	2300      	movs	r3, #0
 800e154:	613b      	str	r3, [r7, #16]
 800e156:	e043      	b.n	800e1e0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	015a      	lsls	r2, r3, #5
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	4413      	add	r3, r2
 800e160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e16a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e16e:	d118      	bne.n	800e1a2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d10a      	bne.n	800e18c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	015a      	lsls	r2, r3, #5
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	4413      	add	r3, r2
 800e17e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e182:	461a      	mov	r2, r3
 800e184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e188:	6013      	str	r3, [r2, #0]
 800e18a:	e013      	b.n	800e1b4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	015a      	lsls	r2, r3, #5
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	4413      	add	r3, r2
 800e194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e198:	461a      	mov	r2, r3
 800e19a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	e008      	b.n	800e1b4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	015a      	lsls	r2, r3, #5
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	015a      	lsls	r2, r3, #5
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	015a      	lsls	r2, r3, #5
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e1d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	3301      	adds	r3, #1
 800e1de:	613b      	str	r3, [r7, #16]
 800e1e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d3b5      	bcc.n	800e158 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	613b      	str	r3, [r7, #16]
 800e1f0:	e043      	b.n	800e27a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	015a      	lsls	r2, r3, #5
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e204:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e208:	d118      	bne.n	800e23c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10a      	bne.n	800e226 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	015a      	lsls	r2, r3, #5
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	4413      	add	r3, r2
 800e218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e21c:	461a      	mov	r2, r3
 800e21e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	e013      	b.n	800e24e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	015a      	lsls	r2, r3, #5
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	4413      	add	r3, r2
 800e22e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e232:	461a      	mov	r2, r3
 800e234:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e238:	6013      	str	r3, [r2, #0]
 800e23a:	e008      	b.n	800e24e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	015a      	lsls	r2, r3, #5
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	4413      	add	r3, r2
 800e244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e248:	461a      	mov	r2, r3
 800e24a:	2300      	movs	r3, #0
 800e24c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	015a      	lsls	r2, r3, #5
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	4413      	add	r3, r2
 800e256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e25a:	461a      	mov	r2, r3
 800e25c:	2300      	movs	r3, #0
 800e25e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	015a      	lsls	r2, r3, #5
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	4413      	add	r3, r2
 800e268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e26c:	461a      	mov	r2, r3
 800e26e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e272:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	3301      	adds	r3, #1
 800e278:	613b      	str	r3, [r7, #16]
 800e27a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e27e:	461a      	mov	r2, r3
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	4293      	cmp	r3, r2
 800e284:	d3b5      	bcc.n	800e1f2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e298:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2200      	movs	r2, #0
 800e29e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e2a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e2a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d105      	bne.n	800e2bc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	f043 0210 	orr.w	r2, r3, #16
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	699a      	ldr	r2, [r3, #24]
 800e2c0:	4b10      	ldr	r3, [pc, #64]	@ (800e304 <USB_DevInit+0x2c4>)
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e2c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d005      	beq.n	800e2dc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	699b      	ldr	r3, [r3, #24]
 800e2d4:	f043 0208 	orr.w	r2, r3, #8
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e2dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d107      	bne.n	800e2f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2ec:	f043 0304 	orr.w	r3, r3, #4
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3718      	adds	r7, #24
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e300:	b004      	add	sp, #16
 800e302:	4770      	bx	lr
 800e304:	803c3800 	.word	0x803c3800

0800e308 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e312:	2300      	movs	r3, #0
 800e314:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	3301      	adds	r3, #1
 800e31a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e322:	d901      	bls.n	800e328 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e324:	2303      	movs	r3, #3
 800e326:	e01b      	b.n	800e360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	daf2      	bge.n	800e316 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e330:	2300      	movs	r3, #0
 800e332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	019b      	lsls	r3, r3, #6
 800e338:	f043 0220 	orr.w	r2, r3, #32
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	3301      	adds	r3, #1
 800e344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e34c:	d901      	bls.n	800e352 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e34e:	2303      	movs	r3, #3
 800e350:	e006      	b.n	800e360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	691b      	ldr	r3, [r3, #16]
 800e356:	f003 0320 	and.w	r3, r3, #32
 800e35a:	2b20      	cmp	r3, #32
 800e35c:	d0f0      	beq.n	800e340 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	4618      	mov	r0, r3
 800e362:	3714      	adds	r7, #20
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e374:	2300      	movs	r3, #0
 800e376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3301      	adds	r3, #1
 800e37c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e384:	d901      	bls.n	800e38a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e386:	2303      	movs	r3, #3
 800e388:	e018      	b.n	800e3bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	daf2      	bge.n	800e378 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e392:	2300      	movs	r3, #0
 800e394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2210      	movs	r2, #16
 800e39a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e3a8:	d901      	bls.n	800e3ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	e006      	b.n	800e3bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	691b      	ldr	r3, [r3, #16]
 800e3b2:	f003 0310 	and.w	r3, r3, #16
 800e3b6:	2b10      	cmp	r3, #16
 800e3b8:	d0f0      	beq.n	800e39c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e3ba:	2300      	movs	r3, #0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3714      	adds	r7, #20
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	78fb      	ldrb	r3, [r7, #3]
 800e3e2:	68f9      	ldr	r1, [r7, #12]
 800e3e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3714      	adds	r7, #20
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr

0800e3fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e3fa:	b480      	push	{r7}
 800e3fc:	b087      	sub	sp, #28
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	f003 0306 	and.w	r3, r3, #6
 800e412:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d102      	bne.n	800e420 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e41a:	2300      	movs	r3, #0
 800e41c:	75fb      	strb	r3, [r7, #23]
 800e41e:	e00a      	b.n	800e436 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2b02      	cmp	r3, #2
 800e424:	d002      	beq.n	800e42c <USB_GetDevSpeed+0x32>
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2b06      	cmp	r3, #6
 800e42a:	d102      	bne.n	800e432 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e42c:	2302      	movs	r3, #2
 800e42e:	75fb      	strb	r3, [r7, #23]
 800e430:	e001      	b.n	800e436 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e432:	230f      	movs	r3, #15
 800e434:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e436:	7dfb      	ldrb	r3, [r7, #23]
}
 800e438:	4618      	mov	r0, r3
 800e43a:	371c      	adds	r7, #28
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e444:	b480      	push	{r7}
 800e446:	b085      	sub	sp, #20
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	785b      	ldrb	r3, [r3, #1]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d13a      	bne.n	800e4d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e466:	69da      	ldr	r2, [r3, #28]
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	f003 030f 	and.w	r3, r3, #15
 800e470:	2101      	movs	r1, #1
 800e472:	fa01 f303 	lsl.w	r3, r1, r3
 800e476:	b29b      	uxth	r3, r3
 800e478:	68f9      	ldr	r1, [r7, #12]
 800e47a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e47e:	4313      	orrs	r3, r2
 800e480:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	015a      	lsls	r2, r3, #5
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	4413      	add	r3, r2
 800e48a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e494:	2b00      	cmp	r3, #0
 800e496:	d155      	bne.n	800e544 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	015a      	lsls	r2, r3, #5
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	4413      	add	r3, r2
 800e4a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	791b      	ldrb	r3, [r3, #4]
 800e4b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	059b      	lsls	r3, r3, #22
 800e4ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4bc:	4313      	orrs	r3, r2
 800e4be:	68ba      	ldr	r2, [r7, #8]
 800e4c0:	0151      	lsls	r1, r2, #5
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	440a      	add	r2, r1
 800e4c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4d2:	6013      	str	r3, [r2, #0]
 800e4d4:	e036      	b.n	800e544 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4dc:	69da      	ldr	r2, [r3, #28]
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	f003 030f 	and.w	r3, r3, #15
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	fa01 f303 	lsl.w	r3, r1, r3
 800e4ec:	041b      	lsls	r3, r3, #16
 800e4ee:	68f9      	ldr	r1, [r7, #12]
 800e4f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4f4:	4313      	orrs	r3, r2
 800e4f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	015a      	lsls	r2, r3, #5
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4413      	add	r3, r2
 800e500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d11a      	bne.n	800e544 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	015a      	lsls	r2, r3, #5
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	4413      	add	r3, r2
 800e516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	791b      	ldrb	r3, [r3, #4]
 800e528:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e52a:	430b      	orrs	r3, r1
 800e52c:	4313      	orrs	r3, r2
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	0151      	lsls	r1, r2, #5
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	440a      	add	r2, r1
 800e536:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e53a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e53e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e542:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e544:	2300      	movs	r3, #0
}
 800e546:	4618      	mov	r0, r3
 800e548:	3714      	adds	r7, #20
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr
	...

0800e554 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	785b      	ldrb	r3, [r3, #1]
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d161      	bne.n	800e634 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	015a      	lsls	r2, r3, #5
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	4413      	add	r3, r2
 800e578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e582:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e586:	d11f      	bne.n	800e5c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	015a      	lsls	r2, r3, #5
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	4413      	add	r3, r2
 800e590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	0151      	lsls	r1, r2, #5
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	440a      	add	r2, r1
 800e59e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e5a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	015a      	lsls	r2, r3, #5
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	68ba      	ldr	r2, [r7, #8]
 800e5b8:	0151      	lsls	r1, r2, #5
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	440a      	add	r2, r1
 800e5be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e5c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	f003 030f 	and.w	r3, r3, #15
 800e5d8:	2101      	movs	r1, #1
 800e5da:	fa01 f303 	lsl.w	r3, r1, r3
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	43db      	mvns	r3, r3
 800e5e2:	68f9      	ldr	r1, [r7, #12]
 800e5e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5e8:	4013      	ands	r3, r2
 800e5ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5f2:	69da      	ldr	r2, [r3, #28]
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	f003 030f 	and.w	r3, r3, #15
 800e5fc:	2101      	movs	r1, #1
 800e5fe:	fa01 f303 	lsl.w	r3, r1, r3
 800e602:	b29b      	uxth	r3, r3
 800e604:	43db      	mvns	r3, r3
 800e606:	68f9      	ldr	r1, [r7, #12]
 800e608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e60c:	4013      	ands	r3, r2
 800e60e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	015a      	lsls	r2, r3, #5
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	4413      	add	r3, r2
 800e618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	0159      	lsls	r1, r3, #5
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	440b      	add	r3, r1
 800e626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e62a:	4619      	mov	r1, r3
 800e62c:	4b35      	ldr	r3, [pc, #212]	@ (800e704 <USB_DeactivateEndpoint+0x1b0>)
 800e62e:	4013      	ands	r3, r2
 800e630:	600b      	str	r3, [r1, #0]
 800e632:	e060      	b.n	800e6f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	015a      	lsls	r2, r3, #5
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	4413      	add	r3, r2
 800e63c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e646:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e64a:	d11f      	bne.n	800e68c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	015a      	lsls	r2, r3, #5
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	4413      	add	r3, r2
 800e654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	0151      	lsls	r1, r2, #5
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	440a      	add	r2, r1
 800e662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e666:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e66a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	015a      	lsls	r2, r3, #5
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	4413      	add	r3, r2
 800e674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	68ba      	ldr	r2, [r7, #8]
 800e67c:	0151      	lsls	r1, r2, #5
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	440a      	add	r2, r1
 800e682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e686:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e68a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	f003 030f 	and.w	r3, r3, #15
 800e69c:	2101      	movs	r1, #1
 800e69e:	fa01 f303 	lsl.w	r3, r1, r3
 800e6a2:	041b      	lsls	r3, r3, #16
 800e6a4:	43db      	mvns	r3, r3
 800e6a6:	68f9      	ldr	r1, [r7, #12]
 800e6a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6b6:	69da      	ldr	r2, [r3, #28]
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	f003 030f 	and.w	r3, r3, #15
 800e6c0:	2101      	movs	r1, #1
 800e6c2:	fa01 f303 	lsl.w	r3, r1, r3
 800e6c6:	041b      	lsls	r3, r3, #16
 800e6c8:	43db      	mvns	r3, r3
 800e6ca:	68f9      	ldr	r1, [r7, #12]
 800e6cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6d0:	4013      	ands	r3, r2
 800e6d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	015a      	lsls	r2, r3, #5
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	4413      	add	r3, r2
 800e6dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	0159      	lsls	r1, r3, #5
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	440b      	add	r3, r1
 800e6ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	4b05      	ldr	r3, [pc, #20]	@ (800e708 <USB_DeactivateEndpoint+0x1b4>)
 800e6f2:	4013      	ands	r3, r2
 800e6f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3714      	adds	r7, #20
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr
 800e704:	ec337800 	.word	0xec337800
 800e708:	eff37800 	.word	0xeff37800

0800e70c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08a      	sub	sp, #40	@ 0x28
 800e710:	af02      	add	r7, sp, #8
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	4613      	mov	r3, r2
 800e718:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	785b      	ldrb	r3, [r3, #1]
 800e728:	2b01      	cmp	r3, #1
 800e72a:	f040 817a 	bne.w	800ea22 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	691b      	ldr	r3, [r3, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d132      	bne.n	800e79c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	015a      	lsls	r2, r3, #5
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	4413      	add	r3, r2
 800e73e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e742:	691b      	ldr	r3, [r3, #16]
 800e744:	69ba      	ldr	r2, [r7, #24]
 800e746:	0151      	lsls	r1, r2, #5
 800e748:	69fa      	ldr	r2, [r7, #28]
 800e74a:	440a      	add	r2, r1
 800e74c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e750:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e754:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	015a      	lsls	r2, r3, #5
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	4413      	add	r3, r2
 800e762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e766:	691b      	ldr	r3, [r3, #16]
 800e768:	69ba      	ldr	r2, [r7, #24]
 800e76a:	0151      	lsls	r1, r2, #5
 800e76c:	69fa      	ldr	r2, [r7, #28]
 800e76e:	440a      	add	r2, r1
 800e770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e774:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	015a      	lsls	r2, r3, #5
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	4413      	add	r3, r2
 800e782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e786:	691b      	ldr	r3, [r3, #16]
 800e788:	69ba      	ldr	r2, [r7, #24]
 800e78a:	0151      	lsls	r1, r2, #5
 800e78c:	69fa      	ldr	r2, [r7, #28]
 800e78e:	440a      	add	r2, r1
 800e790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e794:	0cdb      	lsrs	r3, r3, #19
 800e796:	04db      	lsls	r3, r3, #19
 800e798:	6113      	str	r3, [r2, #16]
 800e79a:	e092      	b.n	800e8c2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	015a      	lsls	r2, r3, #5
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	4413      	add	r3, r2
 800e7a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7a8:	691b      	ldr	r3, [r3, #16]
 800e7aa:	69ba      	ldr	r2, [r7, #24]
 800e7ac:	0151      	lsls	r1, r2, #5
 800e7ae:	69fa      	ldr	r2, [r7, #28]
 800e7b0:	440a      	add	r2, r1
 800e7b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7b6:	0cdb      	lsrs	r3, r3, #19
 800e7b8:	04db      	lsls	r3, r3, #19
 800e7ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	015a      	lsls	r2, r3, #5
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	4413      	add	r3, r2
 800e7c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7c8:	691b      	ldr	r3, [r3, #16]
 800e7ca:	69ba      	ldr	r2, [r7, #24]
 800e7cc:	0151      	lsls	r1, r2, #5
 800e7ce:	69fa      	ldr	r2, [r7, #28]
 800e7d0:	440a      	add	r2, r1
 800e7d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e7da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e7de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d11a      	bne.n	800e81c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	691a      	ldr	r2, [r3, #16]
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d903      	bls.n	800e7fa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	689a      	ldr	r2, [r3, #8]
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	015a      	lsls	r2, r3, #5
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	4413      	add	r3, r2
 800e802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	69ba      	ldr	r2, [r7, #24]
 800e80a:	0151      	lsls	r1, r2, #5
 800e80c:	69fa      	ldr	r2, [r7, #28]
 800e80e:	440a      	add	r2, r1
 800e810:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e814:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e818:	6113      	str	r3, [r2, #16]
 800e81a:	e01b      	b.n	800e854 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	015a      	lsls	r2, r3, #5
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	4413      	add	r3, r2
 800e824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e828:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	6919      	ldr	r1, [r3, #16]
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	689b      	ldr	r3, [r3, #8]
 800e832:	440b      	add	r3, r1
 800e834:	1e59      	subs	r1, r3, #1
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e83e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e840:	4ba2      	ldr	r3, [pc, #648]	@ (800eacc <USB_EPStartXfer+0x3c0>)
 800e842:	400b      	ands	r3, r1
 800e844:	69b9      	ldr	r1, [r7, #24]
 800e846:	0148      	lsls	r0, r1, #5
 800e848:	69f9      	ldr	r1, [r7, #28]
 800e84a:	4401      	add	r1, r0
 800e84c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e850:	4313      	orrs	r3, r2
 800e852:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	015a      	lsls	r2, r3, #5
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	4413      	add	r3, r2
 800e85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e860:	691a      	ldr	r2, [r3, #16]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	691b      	ldr	r3, [r3, #16]
 800e866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e86a:	69b9      	ldr	r1, [r7, #24]
 800e86c:	0148      	lsls	r0, r1, #5
 800e86e:	69f9      	ldr	r1, [r7, #28]
 800e870:	4401      	add	r1, r0
 800e872:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e876:	4313      	orrs	r3, r2
 800e878:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	791b      	ldrb	r3, [r3, #4]
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d11f      	bne.n	800e8c2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	015a      	lsls	r2, r3, #5
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	4413      	add	r3, r2
 800e88a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	69ba      	ldr	r2, [r7, #24]
 800e892:	0151      	lsls	r1, r2, #5
 800e894:	69fa      	ldr	r2, [r7, #28]
 800e896:	440a      	add	r2, r1
 800e898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e89c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e8a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	015a      	lsls	r2, r3, #5
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8ae:	691b      	ldr	r3, [r3, #16]
 800e8b0:	69ba      	ldr	r2, [r7, #24]
 800e8b2:	0151      	lsls	r1, r2, #5
 800e8b4:	69fa      	ldr	r2, [r7, #28]
 800e8b6:	440a      	add	r2, r1
 800e8b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e8c2:	79fb      	ldrb	r3, [r7, #7]
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d14b      	bne.n	800e960 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	69db      	ldr	r3, [r3, #28]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d009      	beq.n	800e8e4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	015a      	lsls	r2, r3, #5
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8dc:	461a      	mov	r2, r3
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	69db      	ldr	r3, [r3, #28]
 800e8e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	791b      	ldrb	r3, [r3, #4]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d128      	bne.n	800e93e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d110      	bne.n	800e91e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	015a      	lsls	r2, r3, #5
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	4413      	add	r3, r2
 800e904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	69ba      	ldr	r2, [r7, #24]
 800e90c:	0151      	lsls	r1, r2, #5
 800e90e:	69fa      	ldr	r2, [r7, #28]
 800e910:	440a      	add	r2, r1
 800e912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e916:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e91a:	6013      	str	r3, [r2, #0]
 800e91c:	e00f      	b.n	800e93e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	015a      	lsls	r2, r3, #5
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	4413      	add	r3, r2
 800e926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	69ba      	ldr	r2, [r7, #24]
 800e92e:	0151      	lsls	r1, r2, #5
 800e930:	69fa      	ldr	r2, [r7, #28]
 800e932:	440a      	add	r2, r1
 800e934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e93c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	015a      	lsls	r2, r3, #5
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	4413      	add	r3, r2
 800e946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	69ba      	ldr	r2, [r7, #24]
 800e94e:	0151      	lsls	r1, r2, #5
 800e950:	69fa      	ldr	r2, [r7, #28]
 800e952:	440a      	add	r2, r1
 800e954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e958:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e95c:	6013      	str	r3, [r2, #0]
 800e95e:	e165      	b.n	800ec2c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	015a      	lsls	r2, r3, #5
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	4413      	add	r3, r2
 800e968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	69ba      	ldr	r2, [r7, #24]
 800e970:	0151      	lsls	r1, r2, #5
 800e972:	69fa      	ldr	r2, [r7, #28]
 800e974:	440a      	add	r2, r1
 800e976:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e97a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e97e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	791b      	ldrb	r3, [r3, #4]
 800e984:	2b01      	cmp	r3, #1
 800e986:	d015      	beq.n	800e9b4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f000 814d 	beq.w	800ec2c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	f003 030f 	and.w	r3, r3, #15
 800e9a2:	2101      	movs	r1, #1
 800e9a4:	fa01 f303 	lsl.w	r3, r1, r3
 800e9a8:	69f9      	ldr	r1, [r7, #28]
 800e9aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	634b      	str	r3, [r1, #52]	@ 0x34
 800e9b2:	e13b      	b.n	800ec2c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d110      	bne.n	800e9e6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	015a      	lsls	r2, r3, #5
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	69ba      	ldr	r2, [r7, #24]
 800e9d4:	0151      	lsls	r1, r2, #5
 800e9d6:	69fa      	ldr	r2, [r7, #28]
 800e9d8:	440a      	add	r2, r1
 800e9da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e9e2:	6013      	str	r3, [r2, #0]
 800e9e4:	e00f      	b.n	800ea06 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	015a      	lsls	r2, r3, #5
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	4413      	add	r3, r2
 800e9ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	69ba      	ldr	r2, [r7, #24]
 800e9f6:	0151      	lsls	r1, r2, #5
 800e9f8:	69fa      	ldr	r2, [r7, #28]
 800e9fa:	440a      	add	r2, r1
 800e9fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	68d9      	ldr	r1, [r3, #12]
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	781a      	ldrb	r2, [r3, #0]
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	691b      	ldr	r3, [r3, #16]
 800ea12:	b298      	uxth	r0, r3
 800ea14:	79fb      	ldrb	r3, [r7, #7]
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	4603      	mov	r3, r0
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f000 f9b8 	bl	800ed90 <USB_WritePacket>
 800ea20:	e104      	b.n	800ec2c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	015a      	lsls	r2, r3, #5
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	4413      	add	r3, r2
 800ea2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea2e:	691b      	ldr	r3, [r3, #16]
 800ea30:	69ba      	ldr	r2, [r7, #24]
 800ea32:	0151      	lsls	r1, r2, #5
 800ea34:	69fa      	ldr	r2, [r7, #28]
 800ea36:	440a      	add	r2, r1
 800ea38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea3c:	0cdb      	lsrs	r3, r3, #19
 800ea3e:	04db      	lsls	r3, r3, #19
 800ea40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	015a      	lsls	r2, r3, #5
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	4413      	add	r3, r2
 800ea4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea4e:	691b      	ldr	r3, [r3, #16]
 800ea50:	69ba      	ldr	r2, [r7, #24]
 800ea52:	0151      	lsls	r1, r2, #5
 800ea54:	69fa      	ldr	r2, [r7, #28]
 800ea56:	440a      	add	r2, r1
 800ea58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea5c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ea60:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ea64:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d131      	bne.n	800ead0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d003      	beq.n	800ea7c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	689a      	ldr	r2, [r3, #8]
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	689a      	ldr	r2, [r3, #8]
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	015a      	lsls	r2, r3, #5
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea90:	691a      	ldr	r2, [r3, #16]
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	6a1b      	ldr	r3, [r3, #32]
 800ea96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea9a:	69b9      	ldr	r1, [r7, #24]
 800ea9c:	0148      	lsls	r0, r1, #5
 800ea9e:	69f9      	ldr	r1, [r7, #28]
 800eaa0:	4401      	add	r1, r0
 800eaa2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	015a      	lsls	r2, r3, #5
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	4413      	add	r3, r2
 800eab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	69ba      	ldr	r2, [r7, #24]
 800eaba:	0151      	lsls	r1, r2, #5
 800eabc:	69fa      	ldr	r2, [r7, #28]
 800eabe:	440a      	add	r2, r1
 800eac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eac4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eac8:	6113      	str	r3, [r2, #16]
 800eaca:	e061      	b.n	800eb90 <USB_EPStartXfer+0x484>
 800eacc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	691b      	ldr	r3, [r3, #16]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d123      	bne.n	800eb20 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	015a      	lsls	r2, r3, #5
 800eadc:	69fb      	ldr	r3, [r7, #28]
 800eade:	4413      	add	r3, r2
 800eae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eae4:	691a      	ldr	r2, [r3, #16]
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eaee:	69b9      	ldr	r1, [r7, #24]
 800eaf0:	0148      	lsls	r0, r1, #5
 800eaf2:	69f9      	ldr	r1, [r7, #28]
 800eaf4:	4401      	add	r1, r0
 800eaf6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eafa:	4313      	orrs	r3, r2
 800eafc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eafe:	69bb      	ldr	r3, [r7, #24]
 800eb00:	015a      	lsls	r2, r3, #5
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	4413      	add	r3, r2
 800eb06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb0a:	691b      	ldr	r3, [r3, #16]
 800eb0c:	69ba      	ldr	r2, [r7, #24]
 800eb0e:	0151      	lsls	r1, r2, #5
 800eb10:	69fa      	ldr	r2, [r7, #28]
 800eb12:	440a      	add	r2, r1
 800eb14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb1c:	6113      	str	r3, [r2, #16]
 800eb1e:	e037      	b.n	800eb90 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	691a      	ldr	r2, [r3, #16]
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	4413      	add	r3, r2
 800eb2a:	1e5a      	subs	r2, r3, #1
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb34:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	8afa      	ldrh	r2, [r7, #22]
 800eb3c:	fb03 f202 	mul.w	r2, r3, r2
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	015a      	lsls	r2, r3, #5
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb50:	691a      	ldr	r2, [r3, #16]
 800eb52:	8afb      	ldrh	r3, [r7, #22]
 800eb54:	04d9      	lsls	r1, r3, #19
 800eb56:	4b38      	ldr	r3, [pc, #224]	@ (800ec38 <USB_EPStartXfer+0x52c>)
 800eb58:	400b      	ands	r3, r1
 800eb5a:	69b9      	ldr	r1, [r7, #24]
 800eb5c:	0148      	lsls	r0, r1, #5
 800eb5e:	69f9      	ldr	r1, [r7, #28]
 800eb60:	4401      	add	r1, r0
 800eb62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb66:	4313      	orrs	r3, r2
 800eb68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	015a      	lsls	r2, r3, #5
 800eb6e:	69fb      	ldr	r3, [r7, #28]
 800eb70:	4413      	add	r3, r2
 800eb72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb76:	691a      	ldr	r2, [r3, #16]
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	6a1b      	ldr	r3, [r3, #32]
 800eb7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb80:	69b9      	ldr	r1, [r7, #24]
 800eb82:	0148      	lsls	r0, r1, #5
 800eb84:	69f9      	ldr	r1, [r7, #28]
 800eb86:	4401      	add	r1, r0
 800eb88:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800eb90:	79fb      	ldrb	r3, [r7, #7]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d10d      	bne.n	800ebb2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d009      	beq.n	800ebb2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	68d9      	ldr	r1, [r3, #12]
 800eba2:	69bb      	ldr	r3, [r7, #24]
 800eba4:	015a      	lsls	r2, r3, #5
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	4413      	add	r3, r2
 800ebaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebae:	460a      	mov	r2, r1
 800ebb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	791b      	ldrb	r3, [r3, #4]
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d128      	bne.n	800ec0c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d110      	bne.n	800ebec <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	015a      	lsls	r2, r3, #5
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	69ba      	ldr	r2, [r7, #24]
 800ebda:	0151      	lsls	r1, r2, #5
 800ebdc:	69fa      	ldr	r2, [r7, #28]
 800ebde:	440a      	add	r2, r1
 800ebe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebe4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ebe8:	6013      	str	r3, [r2, #0]
 800ebea:	e00f      	b.n	800ec0c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	015a      	lsls	r2, r3, #5
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	69ba      	ldr	r2, [r7, #24]
 800ebfc:	0151      	lsls	r1, r2, #5
 800ebfe:	69fa      	ldr	r2, [r7, #28]
 800ec00:	440a      	add	r2, r1
 800ec02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	015a      	lsls	r2, r3, #5
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	4413      	add	r3, r2
 800ec14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	69ba      	ldr	r2, [r7, #24]
 800ec1c:	0151      	lsls	r1, r2, #5
 800ec1e:	69fa      	ldr	r2, [r7, #28]
 800ec20:	440a      	add	r2, r1
 800ec22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec26:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ec2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3720      	adds	r7, #32
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	1ff80000 	.word	0x1ff80000

0800ec3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b087      	sub	sp, #28
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ec46:	2300      	movs	r3, #0
 800ec48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	785b      	ldrb	r3, [r3, #1]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d14a      	bne.n	800ecf0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	015a      	lsls	r2, r3, #5
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	4413      	add	r3, r2
 800ec64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec72:	f040 8086 	bne.w	800ed82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	015a      	lsls	r2, r3, #5
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	4413      	add	r3, r2
 800ec80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	683a      	ldr	r2, [r7, #0]
 800ec88:	7812      	ldrb	r2, [r2, #0]
 800ec8a:	0151      	lsls	r1, r2, #5
 800ec8c:	693a      	ldr	r2, [r7, #16]
 800ec8e:	440a      	add	r2, r1
 800ec90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	015a      	lsls	r2, r3, #5
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	4413      	add	r3, r2
 800eca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	683a      	ldr	r2, [r7, #0]
 800ecac:	7812      	ldrb	r2, [r2, #0]
 800ecae:	0151      	lsls	r1, r2, #5
 800ecb0:	693a      	ldr	r2, [r7, #16]
 800ecb2:	440a      	add	r2, r1
 800ecb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ecb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ecbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d902      	bls.n	800ecd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	75fb      	strb	r3, [r7, #23]
          break;
 800ecd2:	e056      	b.n	800ed82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	015a      	lsls	r2, r3, #5
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	4413      	add	r3, r2
 800ecde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ece8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecec:	d0e7      	beq.n	800ecbe <USB_EPStopXfer+0x82>
 800ecee:	e048      	b.n	800ed82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	015a      	lsls	r2, r3, #5
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	4413      	add	r3, r2
 800ecfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed08:	d13b      	bne.n	800ed82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	015a      	lsls	r2, r3, #5
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	4413      	add	r3, r2
 800ed14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	683a      	ldr	r2, [r7, #0]
 800ed1c:	7812      	ldrb	r2, [r2, #0]
 800ed1e:	0151      	lsls	r1, r2, #5
 800ed20:	693a      	ldr	r2, [r7, #16]
 800ed22:	440a      	add	r2, r1
 800ed24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ed2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	015a      	lsls	r2, r3, #5
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	4413      	add	r3, r2
 800ed38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	683a      	ldr	r2, [r7, #0]
 800ed40:	7812      	ldrb	r2, [r2, #0]
 800ed42:	0151      	lsls	r1, r2, #5
 800ed44:	693a      	ldr	r2, [r7, #16]
 800ed46:	440a      	add	r2, r1
 800ed48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	3301      	adds	r3, #1
 800ed56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d902      	bls.n	800ed68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ed62:	2301      	movs	r3, #1
 800ed64:	75fb      	strb	r3, [r7, #23]
          break;
 800ed66:	e00c      	b.n	800ed82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	015a      	lsls	r2, r3, #5
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	4413      	add	r3, r2
 800ed72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed80:	d0e7      	beq.n	800ed52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ed82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	371c      	adds	r7, #28
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b089      	sub	sp, #36	@ 0x24
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	4611      	mov	r1, r2
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	460b      	mov	r3, r1
 800eda0:	71fb      	strb	r3, [r7, #7]
 800eda2:	4613      	mov	r3, r2
 800eda4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800edae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d123      	bne.n	800edfe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800edb6:	88bb      	ldrh	r3, [r7, #4]
 800edb8:	3303      	adds	r3, #3
 800edba:	089b      	lsrs	r3, r3, #2
 800edbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800edbe:	2300      	movs	r3, #0
 800edc0:	61bb      	str	r3, [r7, #24]
 800edc2:	e018      	b.n	800edf6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800edc4:	79fb      	ldrb	r3, [r7, #7]
 800edc6:	031a      	lsls	r2, r3, #12
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	4413      	add	r3, r2
 800edcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800edd0:	461a      	mov	r2, r3
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	3301      	adds	r3, #1
 800eddc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	3301      	adds	r3, #1
 800ede2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	3301      	adds	r3, #1
 800ede8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edea:	69fb      	ldr	r3, [r7, #28]
 800edec:	3301      	adds	r3, #1
 800edee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	3301      	adds	r3, #1
 800edf4:	61bb      	str	r3, [r7, #24]
 800edf6:	69ba      	ldr	r2, [r7, #24]
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d3e2      	bcc.n	800edc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3724      	adds	r7, #36	@ 0x24
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b08b      	sub	sp, #44	@ 0x2c
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	4613      	mov	r3, r2
 800ee18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ee22:	88fb      	ldrh	r3, [r7, #6]
 800ee24:	089b      	lsrs	r3, r3, #2
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ee2a:	88fb      	ldrh	r3, [r7, #6]
 800ee2c:	f003 0303 	and.w	r3, r3, #3
 800ee30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ee32:	2300      	movs	r3, #0
 800ee34:	623b      	str	r3, [r7, #32]
 800ee36:	e014      	b.n	800ee62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee42:	601a      	str	r2, [r3, #0]
    pDest++;
 800ee44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee46:	3301      	adds	r3, #1
 800ee48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee52:	3301      	adds	r3, #1
 800ee54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee58:	3301      	adds	r3, #1
 800ee5a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ee5c:	6a3b      	ldr	r3, [r7, #32]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	623b      	str	r3, [r7, #32]
 800ee62:	6a3a      	ldr	r2, [r7, #32]
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d3e6      	bcc.n	800ee38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ee6a:	8bfb      	ldrh	r3, [r7, #30]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d01e      	beq.n	800eeae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ee70:	2300      	movs	r3, #0
 800ee72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	f107 0310 	add.w	r3, r7, #16
 800ee80:	6812      	ldr	r2, [r2, #0]
 800ee82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ee84:	693a      	ldr	r2, [r7, #16]
 800ee86:	6a3b      	ldr	r3, [r7, #32]
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	00db      	lsls	r3, r3, #3
 800ee8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ee90:	b2da      	uxtb	r2, r3
 800ee92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee94:	701a      	strb	r2, [r3, #0]
      i++;
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ee9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9e:	3301      	adds	r3, #1
 800eea0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800eea2:	8bfb      	ldrh	r3, [r7, #30]
 800eea4:	3b01      	subs	r3, #1
 800eea6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800eea8:	8bfb      	ldrh	r3, [r7, #30]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d1ea      	bne.n	800ee84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800eeae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	372c      	adds	r7, #44	@ 0x2c
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	785b      	ldrb	r3, [r3, #1]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d12c      	bne.n	800ef32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	015a      	lsls	r2, r3, #5
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	4413      	add	r3, r2
 800eee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	db12      	blt.n	800ef10 <USB_EPSetStall+0x54>
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d00f      	beq.n	800ef10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	015a      	lsls	r2, r3, #5
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	4413      	add	r3, r2
 800eef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	68ba      	ldr	r2, [r7, #8]
 800ef00:	0151      	lsls	r1, r2, #5
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	440a      	add	r2, r1
 800ef06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	015a      	lsls	r2, r3, #5
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	4413      	add	r3, r2
 800ef18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	68ba      	ldr	r2, [r7, #8]
 800ef20:	0151      	lsls	r1, r2, #5
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	440a      	add	r2, r1
 800ef26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef2e:	6013      	str	r3, [r2, #0]
 800ef30:	e02b      	b.n	800ef8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	015a      	lsls	r2, r3, #5
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	4413      	add	r3, r2
 800ef3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	db12      	blt.n	800ef6a <USB_EPSetStall+0xae>
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00f      	beq.n	800ef6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	015a      	lsls	r2, r3, #5
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	4413      	add	r3, r2
 800ef52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	68ba      	ldr	r2, [r7, #8]
 800ef5a:	0151      	lsls	r1, r2, #5
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	440a      	add	r2, r1
 800ef60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	015a      	lsls	r2, r3, #5
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	4413      	add	r3, r2
 800ef72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	68ba      	ldr	r2, [r7, #8]
 800ef7a:	0151      	lsls	r1, r2, #5
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	440a      	add	r2, r1
 800ef80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	785b      	ldrb	r3, [r3, #1]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d128      	bne.n	800f006 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	015a      	lsls	r2, r3, #5
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	4413      	add	r3, r2
 800efbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	68ba      	ldr	r2, [r7, #8]
 800efc4:	0151      	lsls	r1, r2, #5
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	440a      	add	r2, r1
 800efca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800efd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	791b      	ldrb	r3, [r3, #4]
 800efd8:	2b03      	cmp	r3, #3
 800efda:	d003      	beq.n	800efe4 <USB_EPClearStall+0x4c>
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	791b      	ldrb	r3, [r3, #4]
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	d138      	bne.n	800f056 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	015a      	lsls	r2, r3, #5
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	4413      	add	r3, r2
 800efec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68ba      	ldr	r2, [r7, #8]
 800eff4:	0151      	lsls	r1, r2, #5
 800eff6:	68fa      	ldr	r2, [r7, #12]
 800eff8:	440a      	add	r2, r1
 800effa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800effe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f002:	6013      	str	r3, [r2, #0]
 800f004:	e027      	b.n	800f056 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	015a      	lsls	r2, r3, #5
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	4413      	add	r3, r2
 800f00e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	68ba      	ldr	r2, [r7, #8]
 800f016:	0151      	lsls	r1, r2, #5
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	440a      	add	r2, r1
 800f01c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f020:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f024:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	791b      	ldrb	r3, [r3, #4]
 800f02a:	2b03      	cmp	r3, #3
 800f02c:	d003      	beq.n	800f036 <USB_EPClearStall+0x9e>
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	791b      	ldrb	r3, [r3, #4]
 800f032:	2b02      	cmp	r3, #2
 800f034:	d10f      	bne.n	800f056 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	015a      	lsls	r2, r3, #5
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	4413      	add	r3, r2
 800f03e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	0151      	lsls	r1, r2, #5
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	440a      	add	r2, r1
 800f04c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f054:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3714      	adds	r7, #20
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800f070:	2300      	movs	r3, #0
 800f072:	617b      	str	r3, [r7, #20]
 800f074:	e016      	b.n	800f0a4 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	015a      	lsls	r2, r3, #5
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	4413      	add	r3, r2
 800f07e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f082:	461a      	mov	r2, r3
 800f084:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f088:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	015a      	lsls	r2, r3, #5
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	4413      	add	r3, r2
 800f092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f096:	461a      	mov	r2, r3
 800f098:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f09c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	617b      	str	r3, [r7, #20]
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	2b0e      	cmp	r3, #14
 800f0a8:	d9e5      	bls.n	800f076 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0bc:	461a      	mov	r2, r3
 800f0be:	2300      	movs	r3, #0
 800f0c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f7ff f94c 	bl	800e36c <USB_FlushRxFifo>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d001      	beq.n	800f0e2 <USB_StopDevice+0x7e>
  {
    return ret;
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
 800f0e0:	e00b      	b.n	800f0fa <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800f0e2:	2110      	movs	r1, #16
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff f90f 	bl	800e308 <USB_FlushTxFifo>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f0ee:	7bfb      	ldrb	r3, [r7, #15]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d001      	beq.n	800f0f8 <USB_StopDevice+0x94>
  {
    return ret;
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
 800f0f6:	e000      	b.n	800f0fa <USB_StopDevice+0x96>
  }

  return ret;
 800f0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3718      	adds	r7, #24
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f102:	b480      	push	{r7}
 800f104:	b085      	sub	sp, #20
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	460b      	mov	r3, r1
 800f10c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f120:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f124:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	78fb      	ldrb	r3, [r7, #3]
 800f130:	011b      	lsls	r3, r3, #4
 800f132:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f136:	68f9      	ldr	r1, [r7, #12]
 800f138:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f13c:	4313      	orrs	r3, r2
 800f13e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3714      	adds	r7, #20
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr

0800f14e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f14e:	b480      	push	{r7}
 800f150:	b085      	sub	sp, #20
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	68fa      	ldr	r2, [r7, #12]
 800f164:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f168:	f023 0303 	bic.w	r3, r3, #3
 800f16c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f17c:	f023 0302 	bic.w	r3, r3, #2
 800f180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f182:	2300      	movs	r3, #0
}
 800f184:	4618      	mov	r0, r3
 800f186:	3714      	adds	r7, #20
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f190:	b480      	push	{r7}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f1aa:	f023 0303 	bic.w	r3, r3, #3
 800f1ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	68fa      	ldr	r2, [r7, #12]
 800f1ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1be:	f043 0302 	orr.w	r3, r3, #2
 800f1c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1c4:	2300      	movs	r3, #0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3714      	adds	r7, #20
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f1d2:	b480      	push	{r7}
 800f1d4:	b085      	sub	sp, #20
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	695b      	ldr	r3, [r3, #20]
 800f1de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	699b      	ldr	r3, [r3, #24]
 800f1e4:	68fa      	ldr	r2, [r7, #12]
 800f1e6:	4013      	ands	r3, r2
 800f1e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3714      	adds	r7, #20
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr

0800f1f8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f20a:	699b      	ldr	r3, [r3, #24]
 800f20c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f214:	69db      	ldr	r3, [r3, #28]
 800f216:	68ba      	ldr	r2, [r7, #8]
 800f218:	4013      	ands	r3, r2
 800f21a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	0c1b      	lsrs	r3, r3, #16
}
 800f220:	4618      	mov	r0, r3
 800f222:	3714      	adds	r7, #20
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr

0800f22c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b085      	sub	sp, #20
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f23e:	699b      	ldr	r3, [r3, #24]
 800f240:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f248:	69db      	ldr	r3, [r3, #28]
 800f24a:	68ba      	ldr	r2, [r7, #8]
 800f24c:	4013      	ands	r3, r2
 800f24e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	b29b      	uxth	r3, r3
}
 800f254:	4618      	mov	r0, r3
 800f256:	3714      	adds	r7, #20
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr

0800f260 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f260:	b480      	push	{r7}
 800f262:	b085      	sub	sp, #20
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	460b      	mov	r3, r1
 800f26a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f270:	78fb      	ldrb	r3, [r7, #3]
 800f272:	015a      	lsls	r2, r3, #5
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	4413      	add	r3, r2
 800f278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f286:	695b      	ldr	r3, [r3, #20]
 800f288:	68ba      	ldr	r2, [r7, #8]
 800f28a:	4013      	ands	r3, r2
 800f28c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f28e:	68bb      	ldr	r3, [r7, #8]
}
 800f290:	4618      	mov	r0, r3
 800f292:	3714      	adds	r7, #20
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b087      	sub	sp, #28
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2be:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2c0:	78fb      	ldrb	r3, [r7, #3]
 800f2c2:	f003 030f 	and.w	r3, r3, #15
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f2cc:	01db      	lsls	r3, r3, #7
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	693a      	ldr	r2, [r7, #16]
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2d6:	78fb      	ldrb	r3, [r7, #3]
 800f2d8:	015a      	lsls	r2, r3, #5
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	4413      	add	r3, r2
 800f2de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	693a      	ldr	r2, [r7, #16]
 800f2e6:	4013      	ands	r3, r2
 800f2e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2ea:	68bb      	ldr	r3, [r7, #8]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	371c      	adds	r7, #28
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	695b      	ldr	r3, [r3, #20]
 800f304:	f003 0301 	and.w	r3, r3, #1
}
 800f308:	4618      	mov	r0, r3
 800f30a:	370c      	adds	r7, #12
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f32e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f332:	f023 0307 	bic.w	r3, r3, #7
 800f336:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	68fa      	ldr	r2, [r7, #12]
 800f342:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f34a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f34c:	2300      	movs	r3, #0
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3714      	adds	r7, #20
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr
	...

0800f35c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b087      	sub	sp, #28
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	460b      	mov	r3, r1
 800f366:	607a      	str	r2, [r7, #4]
 800f368:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	333c      	adds	r3, #60	@ 0x3c
 800f372:	3304      	adds	r3, #4
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	4a26      	ldr	r2, [pc, #152]	@ (800f414 <USB_EP0_OutStart+0xb8>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d90a      	bls.n	800f396 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f38c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f390:	d101      	bne.n	800f396 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f392:	2300      	movs	r3, #0
 800f394:	e037      	b.n	800f406 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f39c:	461a      	mov	r2, r3
 800f39e:	2300      	movs	r3, #0
 800f3a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3a8:	691b      	ldr	r3, [r3, #16]
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f3b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3bc:	691b      	ldr	r3, [r3, #16]
 800f3be:	697a      	ldr	r2, [r7, #20]
 800f3c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3c4:	f043 0318 	orr.w	r3, r3, #24
 800f3c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3d0:	691b      	ldr	r3, [r3, #16]
 800f3d2:	697a      	ldr	r2, [r7, #20]
 800f3d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3d8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f3dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f3de:	7afb      	ldrb	r3, [r7, #11]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d10f      	bne.n	800f404 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	697a      	ldr	r2, [r7, #20]
 800f3fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3fe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f404:	2300      	movs	r3, #0
}
 800f406:	4618      	mov	r0, r3
 800f408:	371c      	adds	r7, #28
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	4f54300a 	.word	0x4f54300a

0800f418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f420:	2300      	movs	r3, #0
 800f422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	3301      	adds	r3, #1
 800f428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f430:	d901      	bls.n	800f436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f432:	2303      	movs	r3, #3
 800f434:	e01b      	b.n	800f46e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	691b      	ldr	r3, [r3, #16]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	daf2      	bge.n	800f424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f43e:	2300      	movs	r3, #0
 800f440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	f043 0201 	orr.w	r2, r3, #1
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	3301      	adds	r3, #1
 800f452:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f45a:	d901      	bls.n	800f460 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f45c:	2303      	movs	r3, #3
 800f45e:	e006      	b.n	800f46e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	f003 0301 	and.w	r3, r3, #1
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d0f0      	beq.n	800f44e <USB_CoreReset+0x36>

  return HAL_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3714      	adds	r7, #20
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
	...

0800f47c <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time = 0;
uint8_t invoke_date = 0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4a13      	ldr	r2, [pc, #76]	@ (800f4d4 <HAL_UART_RxCpltCallback+0x58>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d11f      	bne.n	800f4cc <HAL_UART_RxCpltCallback+0x50>
 800f48c:	4b12      	ldr	r3, [pc, #72]	@ (800f4d8 <HAL_UART_RxCpltCallback+0x5c>)
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d01b      	beq.n	800f4cc <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800f494:	2201      	movs	r2, #1
 800f496:	4911      	ldr	r1, [pc, #68]	@ (800f4dc <HAL_UART_RxCpltCallback+0x60>)
 800f498:	480e      	ldr	r0, [pc, #56]	@ (800f4d4 <HAL_UART_RxCpltCallback+0x58>)
 800f49a:	f7fc ff68 	bl	800c36e <HAL_UART_Receive_IT>
		UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800f49e:	4b10      	ldr	r3, [pc, #64]	@ (800f4e0 <HAL_UART_RxCpltCallback+0x64>)
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d10a      	bne.n	800f4bc <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800f4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f4dc <HAL_UART_RxCpltCallback+0x60>)
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800f4ac:	4b0d      	ldr	r3, [pc, #52]	@ (800f4e4 <HAL_UART_RxCpltCallback+0x68>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	7bfa      	ldrb	r2, [r7, #15]
 800f4b2:	4611      	mov	r1, r2
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f003 f853 	bl	8012560 <embeddedCliReceiveChar>
 800f4ba:	e002      	b.n	800f4c2 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800f4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f4e8 <HAL_UART_RxCpltCallback+0x6c>)
 800f4be:	2201      	movs	r2, #1
 800f4c0:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800f4c2:	f7f4 fe29 	bl	8004118 <HAL_GetTick>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	4a08      	ldr	r2, [pc, #32]	@ (800f4ec <HAL_UART_RxCpltCallback+0x70>)
 800f4ca:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800f4cc:	bf00      	nop
 800f4ce:	3710      	adds	r7, #16
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	20001a74 	.word	0x20001a74
 800f4d8:	20001b39 	.word	0x20001b39
 800f4dc:	20001b38 	.word	0x20001b38
 800f4e0:	20001b3a 	.word	0x20001b3a
 800f4e4:	20001b2c 	.word	0x20001b2c
 800f4e8:	20001b3b 	.word	0x20001b3b
 800f4ec:	200017c0 	.word	0x200017c0

0800f4f0 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800f4fc:	78fb      	ldrb	r3, [r7, #3]
 800f4fe:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800f500:	f107 010f 	add.w	r1, r7, #15
 800f504:	2364      	movs	r3, #100	@ 0x64
 800f506:	2201      	movs	r2, #1
 800f508:	4803      	ldr	r0, [pc, #12]	@ (800f518 <writeCharToCli+0x28>)
 800f50a:	f7fc fea5 	bl	800c258 <HAL_UART_Transmit>
}
 800f50e:	bf00      	nop
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	20001a74 	.word	0x20001a74

0800f51c <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800f51c:	b40e      	push	{r1, r2, r3}
 800f51e:	b580      	push	{r7, lr}
 800f520:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800f524:	af00      	add	r7, sp, #0
 800f526:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f52a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f52e:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800f530:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800f534:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f538:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f53c:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800f53e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f542:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f546:	f107 000c 	add.w	r0, r7, #12
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 800f550:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f554:	f00f fb74 	bl	801ec40 <vsniprintf>
 800f558:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800f55c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f560:	2b00      	cmp	r3, #0
 800f562:	da08      	bge.n	800f576 <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800f564:	4b0c      	ldr	r3, [pc, #48]	@ (800f598 <cli_printf+0x7c>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	221d      	movs	r2, #29
 800f56c:	2101      	movs	r1, #1
 800f56e:	480b      	ldr	r0, [pc, #44]	@ (800f59c <cli_printf+0x80>)
 800f570:	f00f fa5a 	bl	801ea28 <fwrite>
 800f574:	e009      	b.n	800f58a <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800f576:	f107 020c 	add.w	r2, r7, #12
 800f57a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f57e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f582:	4611      	mov	r1, r2
 800f584:	6818      	ldr	r0, [r3, #0]
 800f586:	f003 f8d1 	bl	801272c <embeddedCliPrint>
}
 800f58a:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 800f58e:	46bd      	mov	sp, r7
 800f590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f594:	b003      	add	sp, #12
 800f596:	4770      	bx	lr
 800f598:	20000148 	.word	0x20000148
 800f59c:	0802244c 	.word	0x0802244c

0800f5a0 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b088      	sub	sp, #32
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	61fb      	str	r3, [r7, #28]
	int i, j;
	prev_max_wait_time = HAL_GetTick();
 800f5b0:	f7f4 fdb2 	bl	8004118 <HAL_GetTick>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	4a5f      	ldr	r2, [pc, #380]	@ (800f734 <receiveString+0x194>)
 800f5b8:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800f5ba:	4b5f      	ldr	r3, [pc, #380]	@ (800f738 <receiveString+0x198>)
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	f000 80a0 	beq.w	800f704 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800f5c4:	4b5d      	ldr	r3, [pc, #372]	@ (800f73c <receiveString+0x19c>)
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	2b0d      	cmp	r3, #13
 800f5ca:	d004      	beq.n	800f5d6 <receiveString+0x36>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	3b01      	subs	r3, #1
 800f5d0:	69fa      	ldr	r2, [r7, #28]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d164      	bne.n	800f6a0 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	4413      	add	r3, r2
 800f5dc:	2200      	movs	r2, #0
 800f5de:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800f5e0:	4b55      	ldr	r3, [pc, #340]	@ (800f738 <receiveString+0x198>)
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				//Iterating each character and removing non alphabetical characters.
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	61bb      	str	r3, [r7, #24]
 800f5ea:	e052      	b.n	800f692 <receiveString+0xf2>
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
							|| buffer[i] == '_' || buffer[i] == ':'
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
							|| buffer[i] == '\0')) {
						for (j = i; buffer[j] != '\0'; ++j) {
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	617b      	str	r3, [r7, #20]
 800f5f0:	e00b      	b.n	800f60a <receiveString+0x6a>
							buffer[j] = buffer[j + 1];
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	441a      	add	r2, r3
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	68b9      	ldr	r1, [r7, #8]
 800f5fe:	440b      	add	r3, r1
 800f600:	7812      	ldrb	r2, [r2, #0]
 800f602:	701a      	strb	r2, [r3, #0]
						for (j = i; buffer[j] != '\0'; ++j) {
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	3301      	adds	r3, #1
 800f608:	617b      	str	r3, [r7, #20]
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	68ba      	ldr	r2, [r7, #8]
 800f60e:	4413      	add	r3, r2
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d1ed      	bne.n	800f5f2 <receiveString+0x52>
						}
						buffer[j] = '\0';
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	68ba      	ldr	r2, [r7, #8]
 800f61a:	4413      	add	r3, r2
 800f61c:	2200      	movs	r2, #0
 800f61e:	701a      	strb	r2, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f620:	69bb      	ldr	r3, [r7, #24]
 800f622:	68ba      	ldr	r2, [r7, #8]
 800f624:	4413      	add	r3, r2
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	2b60      	cmp	r3, #96	@ 0x60
 800f62a:	d905      	bls.n	800f638 <receiveString+0x98>
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	68ba      	ldr	r2, [r7, #8]
 800f630:	4413      	add	r3, r2
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	2b7a      	cmp	r3, #122	@ 0x7a
 800f636:	d929      	bls.n	800f68c <receiveString+0xec>
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800f638:	69bb      	ldr	r3, [r7, #24]
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	4413      	add	r3, r2
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	2b40      	cmp	r3, #64	@ 0x40
 800f642:	d905      	bls.n	800f650 <receiveString+0xb0>
 800f644:	69bb      	ldr	r3, [r7, #24]
 800f646:	68ba      	ldr	r2, [r7, #8]
 800f648:	4413      	add	r3, r2
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	2b5a      	cmp	r3, #90	@ 0x5a
 800f64e:	d91d      	bls.n	800f68c <receiveString+0xec>
							|| buffer[i] == '_' || buffer[i] == ':'
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	4413      	add	r3, r2
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2b5f      	cmp	r3, #95	@ 0x5f
 800f65a:	d017      	beq.n	800f68c <receiveString+0xec>
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	4413      	add	r3, r2
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	2b3a      	cmp	r3, #58	@ 0x3a
 800f666:	d011      	beq.n	800f68c <receiveString+0xec>
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	68ba      	ldr	r2, [r7, #8]
 800f66c:	4413      	add	r3, r2
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	2b2f      	cmp	r3, #47	@ 0x2f
 800f672:	d905      	bls.n	800f680 <receiveString+0xe0>
 800f674:	69bb      	ldr	r3, [r7, #24]
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	4413      	add	r3, r2
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	2b39      	cmp	r3, #57	@ 0x39
 800f67e:	d905      	bls.n	800f68c <receiveString+0xec>
							|| buffer[i] == '\0')) {
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	68ba      	ldr	r2, [r7, #8]
 800f684:	4413      	add	r3, r2
 800f686:	781b      	ldrb	r3, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d1af      	bne.n	800f5ec <receiveString+0x4c>
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	3301      	adds	r3, #1
 800f690:	61bb      	str	r3, [r7, #24]
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	68ba      	ldr	r2, [r7, #8]
 800f696:	4413      	add	r3, r2
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d1c0      	bne.n	800f620 <receiveString+0x80>
					}
				}
				break;
 800f69e:	e044      	b.n	800f72a <receiveString+0x18a>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b'
 800f6a0:	4b26      	ldr	r3, [pc, #152]	@ (800f73c <receiveString+0x19c>)
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	2b08      	cmp	r3, #8
 800f6a6:	d003      	beq.n	800f6b0 <receiveString+0x110>
						|| UART_CLI_rxBuffer[0] == 0x7F)) {
 800f6a8:	4b24      	ldr	r3, [pc, #144]	@ (800f73c <receiveString+0x19c>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6ae:	d117      	bne.n	800f6e0 <receiveString+0x140>
					cli->writeChar(cli, '\b');
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2108      	movs	r1, #8
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	4798      	blx	r3
					cli->writeChar(cli, ' ');
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2120      	movs	r1, #32
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	4798      	blx	r3
					cli->writeChar(cli, '\b');
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2108      	movs	r1, #8
 800f6ca:	68f8      	ldr	r0, [r7, #12]
 800f6cc:	4798      	blx	r3
					--index;
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	61fb      	str	r3, [r7, #28]
					buffer[index] = '\0';
 800f6d4:	68ba      	ldr	r2, [r7, #8]
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	4413      	add	r3, r2
 800f6da:	2200      	movs	r2, #0
 800f6dc:	701a      	strb	r2, [r3, #0]
 800f6de:	e00e      	b.n	800f6fe <receiveString+0x15e>
				} else {
					buffer[index++] = UART_CLI_rxBuffer[0];
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	1c5a      	adds	r2, r3, #1
 800f6e4:	61fa      	str	r2, [r7, #28]
 800f6e6:	68ba      	ldr	r2, [r7, #8]
 800f6e8:	4413      	add	r3, r2
 800f6ea:	4a14      	ldr	r2, [pc, #80]	@ (800f73c <receiveString+0x19c>)
 800f6ec:	7812      	ldrb	r2, [r2, #0]
 800f6ee:	701a      	strb	r2, [r3, #0]
					cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a11      	ldr	r2, [pc, #68]	@ (800f73c <receiveString+0x19c>)
 800f6f6:	7812      	ldrb	r2, [r2, #0]
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800f6fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f738 <receiveString+0x198>)
 800f700:	2200      	movs	r2, #0
 800f702:	701a      	strb	r2, [r3, #0]
		}

		//incase no usb then also break it
		if ((HAL_GetTick() - prev_max_wait_time > max_wait_time) || !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 800f704:	f7f4 fd08 	bl	8004118 <HAL_GetTick>
 800f708:	4602      	mov	r2, r0
 800f70a:	4b0a      	ldr	r3, [pc, #40]	@ (800f734 <receiveString+0x194>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	1ad2      	subs	r2, r2, r3
 800f710:	4b0b      	ldr	r3, [pc, #44]	@ (800f740 <receiveString+0x1a0>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	429a      	cmp	r2, r3
 800f716:	d808      	bhi.n	800f72a <receiveString+0x18a>
 800f718:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f71c:	4809      	ldr	r0, [pc, #36]	@ (800f744 <receiveString+0x1a4>)
 800f71e:	f7f6 fcc7 	bl	80060b0 <HAL_GPIO_ReadPin>
 800f722:	4603      	mov	r3, r0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d000      	beq.n	800f72a <receiveString+0x18a>
		if (flag_cli) {
 800f728:	e747      	b.n	800f5ba <receiveString+0x1a>
			//we break the loop if time goes above 5min
			break;
		}

	}
}
 800f72a:	bf00      	nop
 800f72c:	3720      	adds	r7, #32
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	20001b30 	.word	0x20001b30
 800f738:	20001b3b 	.word	0x20001b3b
 800f73c:	20001b38 	.word	0x20001b38
 800f740:	2000001c 	.word	0x2000001c
 800f744:	40020000 	.word	0x40020000

0800f748 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f754:	4903      	ldr	r1, [pc, #12]	@ (800f764 <onClearCLI+0x1c>)
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f7ff fee0 	bl	800f51c <cli_printf>
}
 800f75c:	bf00      	nop
 800f75e:	3710      	adds	r7, #16
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	0802246c 	.word	0x0802246c

0800f768 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f768:	b580      	push	{r7, lr}
 800f76a:	b092      	sub	sp, #72	@ 0x48
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f774:	4b24      	ldr	r3, [pc, #144]	@ (800f808 <debug_scd4x_PM25+0xa0>)
 800f776:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to enable debug for scd4x and PM y/n?");
 800f778:	4924      	ldr	r1, [pc, #144]	@ (800f80c <debug_scd4x_PM25+0xa4>)
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f7ff fece 	bl	800f51c <cli_printf>

	cli_other = 1;
 800f780:	4b23      	ldr	r3, [pc, #140]	@ (800f810 <debug_scd4x_PM25+0xa8>)
 800f782:	2201      	movs	r2, #1
 800f784:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f786:	4b23      	ldr	r3, [pc, #140]	@ (800f814 <debug_scd4x_PM25+0xac>)
 800f788:	2200      	movs	r2, #0
 800f78a:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f78c:	f107 0310 	add.w	r3, r7, #16
 800f790:	2232      	movs	r2, #50	@ 0x32
 800f792:	4619      	mov	r1, r3
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f7ff ff03 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f79a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f79c:	f7f0 fd80 	bl	80002a0 <strlen>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f7a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f7aa:	481b      	ldr	r0, [pc, #108]	@ (800f818 <debug_scd4x_PM25+0xb0>)
 800f7ac:	f7fc fd54 	bl	800c258 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800f7b0:	f107 0310 	add.w	r3, r7, #16
 800f7b4:	2179      	movs	r1, #121	@ 0x79
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f00f fb06 	bl	801edc8 <strchr>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d007      	beq.n	800f7d2 <debug_scd4x_PM25+0x6a>
		debug_scd_pm = 1;
 800f7c2:	4b16      	ldr	r3, [pc, #88]	@ (800f81c <debug_scd4x_PM25+0xb4>)
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug enabled");
 800f7c8:	4915      	ldr	r1, [pc, #84]	@ (800f820 <debug_scd4x_PM25+0xb8>)
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f7ff fea6 	bl	800f51c <cli_printf>
 800f7d0:	e00f      	b.n	800f7f2 <debug_scd4x_PM25+0x8a>
	} else if (strstr(buffer, "n")) {
 800f7d2:	f107 0310 	add.w	r3, r7, #16
 800f7d6:	216e      	movs	r1, #110	@ 0x6e
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f00f faf5 	bl	801edc8 <strchr>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d006      	beq.n	800f7f2 <debug_scd4x_PM25+0x8a>
		debug_scd_pm = 0;
 800f7e4:	4b0d      	ldr	r3, [pc, #52]	@ (800f81c <debug_scd4x_PM25+0xb4>)
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug disabled");
 800f7ea:	490e      	ldr	r1, [pc, #56]	@ (800f824 <debug_scd4x_PM25+0xbc>)
 800f7ec:	68f8      	ldr	r0, [r7, #12]
 800f7ee:	f7ff fe95 	bl	800f51c <cli_printf>
	}

	flag_cli = 0;
 800f7f2:	4b08      	ldr	r3, [pc, #32]	@ (800f814 <debug_scd4x_PM25+0xac>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f7f8:	4b05      	ldr	r3, [pc, #20]	@ (800f810 <debug_scd4x_PM25+0xa8>)
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	701a      	strb	r2, [r3, #0]
}
 800f7fe:	bf00      	nop
 800f800:	3748      	adds	r7, #72	@ 0x48
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	08022474 	.word	0x08022474
 800f80c:	08022478 	.word	0x08022478
 800f810:	20001b3a 	.word	0x20001b3a
 800f814:	20001b3b 	.word	0x20001b3b
 800f818:	20001a74 	.word	0x20001a74
 800f81c:	20001578 	.word	0x20001578
 800f820:	080224ac 	.word	0x080224ac
 800f824:	080224bc 	.word	0x080224bc

0800f828 <DeviceSignature>:

void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli, "Device ID/Signature: %s.", ver_GetUid());
 800f834:	f7f2 fe20 	bl	8002478 <ver_GetUid>
 800f838:	4603      	mov	r3, r0
 800f83a:	461a      	mov	r2, r3
 800f83c:	4903      	ldr	r1, [pc, #12]	@ (800f84c <DeviceSignature+0x24>)
 800f83e:	68f8      	ldr	r0, [r7, #12]
 800f840:	f7ff fe6c 	bl	800f51c <cli_printf>
}
 800f844:	bf00      	nop
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	080224cc 	.word	0x080224cc

0800f850 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f850:	b580      	push	{r7, lr}
 800f852:	b092      	sub	sp, #72	@ 0x48
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f85c:	4b2d      	ldr	r3, [pc, #180]	@ (800f914 <SetID+0xc4>)
 800f85e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f860:	492d      	ldr	r1, [pc, #180]	@ (800f918 <SetID+0xc8>)
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f7ff fe5a 	bl	800f51c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f868:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f86a:	f7f0 fd19 	bl	80002a0 <strlen>
 800f86e:	4603      	mov	r3, r0
 800f870:	b29a      	uxth	r2, r3
 800f872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f876:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f878:	4828      	ldr	r0, [pc, #160]	@ (800f91c <SetID+0xcc>)
 800f87a:	f7fc fced 	bl	800c258 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the ID. Keep ID below 30 characters");
 800f87e:	4928      	ldr	r1, [pc, #160]	@ (800f920 <SetID+0xd0>)
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f7ff fe4b 	bl	800f51c <cli_printf>
	cli_other = 1;
 800f886:	4b27      	ldr	r3, [pc, #156]	@ (800f924 <SetID+0xd4>)
 800f888:	2201      	movs	r2, #1
 800f88a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f88c:	4b26      	ldr	r3, [pc, #152]	@ (800f928 <SetID+0xd8>)
 800f88e:	2200      	movs	r2, #0
 800f890:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f892:	f107 0310 	add.w	r3, r7, #16
 800f896:	2232      	movs	r2, #50	@ 0x32
 800f898:	4619      	mov	r1, r3
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f7ff fe80 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f8a0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f8a2:	f7f0 fcfd 	bl	80002a0 <strlen>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	b29a      	uxth	r2, r3
 800f8aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f8ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f8b0:	481a      	ldr	r0, [pc, #104]	@ (800f91c <SetID+0xcc>)
 800f8b2:	f7fc fcd1 	bl	800c258 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f8b6:	f107 0310 	add.w	r3, r7, #16
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7f0 fcf0 	bl	80002a0 <strlen>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 30) {
 800f8c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f8ca:	2b1d      	cmp	r3, #29
 800f8cc:	d814      	bhi.n	800f8f8 <SetID+0xa8>
		if (buffer[0] != '\0') {
 800f8ce:	7c3b      	ldrb	r3, [r7, #16]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d015      	beq.n	800f900 <SetID+0xb0>
			if (buffer !=  NULL) {
				strcpy(_Flash_Packet.id, buffer);
 800f8d4:	f107 0310 	add.w	r3, r7, #16
 800f8d8:	4619      	mov	r1, r3
 800f8da:	4814      	ldr	r0, [pc, #80]	@ (800f92c <SetID+0xdc>)
 800f8dc:	f00f fb7b 	bl	801efd6 <strcpy>
				set_param_flags();
 800f8e0:	4b13      	ldr	r3, [pc, #76]	@ (800f930 <SetID+0xe0>)
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	701a      	strb	r2, [r3, #0]
 800f8e6:	4b13      	ldr	r3, [pc, #76]	@ (800f934 <SetID+0xe4>)
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "ID is set to: %s", _Flash_Packet.id);
 800f8ec:	4a0f      	ldr	r2, [pc, #60]	@ (800f92c <SetID+0xdc>)
 800f8ee:	4912      	ldr	r1, [pc, #72]	@ (800f938 <SetID+0xe8>)
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f7ff fe13 	bl	800f51c <cli_printf>
 800f8f6:	e003      	b.n	800f900 <SetID+0xb0>
			}
		}
	} else {
		cli_printf(cli, "ID is too long");
 800f8f8:	4910      	ldr	r1, [pc, #64]	@ (800f93c <SetID+0xec>)
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f7ff fe0e 	bl	800f51c <cli_printf>
	}

	flag_cli = 0;
 800f900:	4b09      	ldr	r3, [pc, #36]	@ (800f928 <SetID+0xd8>)
 800f902:	2200      	movs	r2, #0
 800f904:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f906:	4b07      	ldr	r3, [pc, #28]	@ (800f924 <SetID+0xd4>)
 800f908:	2200      	movs	r2, #0
 800f90a:	701a      	strb	r2, [r3, #0]

}
 800f90c:	bf00      	nop
 800f90e:	3748      	adds	r7, #72	@ 0x48
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	08022474 	.word	0x08022474
 800f918:	080224e8 	.word	0x080224e8
 800f91c:	20001a74 	.word	0x20001a74
 800f920:	08022520 	.word	0x08022520
 800f924:	20001b3a 	.word	0x20001b3a
 800f928:	20001b3b 	.word	0x20001b3b
 800f92c:	20001399 	.word	0x20001399
 800f930:	20001579 	.word	0x20001579
 800f934:	2000157a 	.word	0x2000157a
 800f938:	08022548 	.word	0x08022548
 800f93c:	0802255c 	.word	0x0802255c

0800f940 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f940:	b580      	push	{r7, lr}
 800f942:	b092      	sub	sp, #72	@ 0x48
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f94c:	4b2d      	ldr	r3, [pc, #180]	@ (800fa04 <SetLocation+0xc4>)
 800f94e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f950:	492d      	ldr	r1, [pc, #180]	@ (800fa08 <SetLocation+0xc8>)
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f7ff fde2 	bl	800f51c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f958:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f95a:	f7f0 fca1 	bl	80002a0 <strlen>
 800f95e:	4603      	mov	r3, r0
 800f960:	b29a      	uxth	r2, r3
 800f962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f966:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f968:	4828      	ldr	r0, [pc, #160]	@ (800fa0c <SetLocation+0xcc>)
 800f96a:	f7fc fc75 	bl	800c258 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the Location. Keep Location below 15 characters");
 800f96e:	4928      	ldr	r1, [pc, #160]	@ (800fa10 <SetLocation+0xd0>)
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f7ff fdd3 	bl	800f51c <cli_printf>
	cli_other = 1;
 800f976:	4b27      	ldr	r3, [pc, #156]	@ (800fa14 <SetLocation+0xd4>)
 800f978:	2201      	movs	r2, #1
 800f97a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f97c:	4b26      	ldr	r3, [pc, #152]	@ (800fa18 <SetLocation+0xd8>)
 800f97e:	2200      	movs	r2, #0
 800f980:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f982:	f107 0310 	add.w	r3, r7, #16
 800f986:	2232      	movs	r2, #50	@ 0x32
 800f988:	4619      	mov	r1, r3
 800f98a:	68f8      	ldr	r0, [r7, #12]
 800f98c:	f7ff fe08 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f990:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f992:	f7f0 fc85 	bl	80002a0 <strlen>
 800f996:	4603      	mov	r3, r0
 800f998:	b29a      	uxth	r2, r3
 800f99a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f99e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f9a0:	481a      	ldr	r0, [pc, #104]	@ (800fa0c <SetLocation+0xcc>)
 800f9a2:	f7fc fc59 	bl	800c258 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f9a6:	f107 0310 	add.w	r3, r7, #16
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7f0 fc78 	bl	80002a0 <strlen>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f9b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f9ba:	2b0e      	cmp	r3, #14
 800f9bc:	d814      	bhi.n	800f9e8 <SetLocation+0xa8>
		if (buffer[0] != '\0') {
 800f9be:	7c3b      	ldrb	r3, [r7, #16]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d015      	beq.n	800f9f0 <SetLocation+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.location, buffer);
 800f9c4:	f107 0310 	add.w	r3, r7, #16
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	4814      	ldr	r0, [pc, #80]	@ (800fa1c <SetLocation+0xdc>)
 800f9cc:	f00f fb03 	bl	801efd6 <strcpy>
				set_param_flags();
 800f9d0:	4b13      	ldr	r3, [pc, #76]	@ (800fa20 <SetLocation+0xe0>)
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	701a      	strb	r2, [r3, #0]
 800f9d6:	4b13      	ldr	r3, [pc, #76]	@ (800fa24 <SetLocation+0xe4>)
 800f9d8:	2201      	movs	r2, #1
 800f9da:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "Location is set to: %s",
 800f9dc:	4a0f      	ldr	r2, [pc, #60]	@ (800fa1c <SetLocation+0xdc>)
 800f9de:	4912      	ldr	r1, [pc, #72]	@ (800fa28 <SetLocation+0xe8>)
 800f9e0:	68f8      	ldr	r0, [r7, #12]
 800f9e2:	f7ff fd9b 	bl	800f51c <cli_printf>
 800f9e6:	e003      	b.n	800f9f0 <SetLocation+0xb0>
						_Flash_Packet.location);
			}
		}
	} else {
		cli_printf(cli, "Location is too long");
 800f9e8:	4910      	ldr	r1, [pc, #64]	@ (800fa2c <SetLocation+0xec>)
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f7ff fd96 	bl	800f51c <cli_printf>
	}

	flag_cli = 0;
 800f9f0:	4b09      	ldr	r3, [pc, #36]	@ (800fa18 <SetLocation+0xd8>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f9f6:	4b07      	ldr	r3, [pc, #28]	@ (800fa14 <SetLocation+0xd4>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	701a      	strb	r2, [r3, #0]

}
 800f9fc:	bf00      	nop
 800f9fe:	3748      	adds	r7, #72	@ 0x48
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	08022474 	.word	0x08022474
 800fa08:	080224e8 	.word	0x080224e8
 800fa0c:	20001a74 	.word	0x20001a74
 800fa10:	0802256c 	.word	0x0802256c
 800fa14:	20001b3a 	.word	0x20001b3a
 800fa18:	20001b3b 	.word	0x20001b3b
 800fa1c:	200013cb 	.word	0x200013cb
 800fa20:	20001579 	.word	0x20001579
 800fa24:	2000157a 	.word	0x2000157a
 800fa28:	080225a0 	.word	0x080225a0
 800fa2c:	080225b8 	.word	0x080225b8

0800fa30 <Setgroup>:
	flag_cli = 0;
	cli_other = 0;

}

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b092      	sub	sp, #72	@ 0x48
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800fa3c:	4b2d      	ldr	r3, [pc, #180]	@ (800faf4 <Setgroup+0xc4>)
 800fa3e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fa40:	492d      	ldr	r1, [pc, #180]	@ (800faf8 <Setgroup+0xc8>)
 800fa42:	68f8      	ldr	r0, [r7, #12]
 800fa44:	f7ff fd6a 	bl	800f51c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa48:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa4a:	f7f0 fc29 	bl	80002a0 <strlen>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa58:	4828      	ldr	r0, [pc, #160]	@ (800fafc <Setgroup+0xcc>)
 800fa5a:	f7fc fbfd 	bl	800c258 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the group. Keep name below 15 characters");
 800fa5e:	4928      	ldr	r1, [pc, #160]	@ (800fb00 <Setgroup+0xd0>)
 800fa60:	68f8      	ldr	r0, [r7, #12]
 800fa62:	f7ff fd5b 	bl	800f51c <cli_printf>
	cli_other = 1;
 800fa66:	4b27      	ldr	r3, [pc, #156]	@ (800fb04 <Setgroup+0xd4>)
 800fa68:	2201      	movs	r2, #1
 800fa6a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fa6c:	4b26      	ldr	r3, [pc, #152]	@ (800fb08 <Setgroup+0xd8>)
 800fa6e:	2200      	movs	r2, #0
 800fa70:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fa72:	f107 0310 	add.w	r3, r7, #16
 800fa76:	2232      	movs	r2, #50	@ 0x32
 800fa78:	4619      	mov	r1, r3
 800fa7a:	68f8      	ldr	r0, [r7, #12]
 800fa7c:	f7ff fd90 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa82:	f7f0 fc0d 	bl	80002a0 <strlen>
 800fa86:	4603      	mov	r3, r0
 800fa88:	b29a      	uxth	r2, r3
 800fa8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa90:	481a      	ldr	r0, [pc, #104]	@ (800fafc <Setgroup+0xcc>)
 800fa92:	f7fc fbe1 	bl	800c258 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800fa96:	f107 0310 	add.w	r3, r7, #16
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7f0 fc00 	bl	80002a0 <strlen>
 800faa0:	4603      	mov	r3, r0
 800faa2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800faa6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800faaa:	2b0e      	cmp	r3, #14
 800faac:	d814      	bhi.n	800fad8 <Setgroup+0xa8>
		if (buffer[0] != '\0') {
 800faae:	7c3b      	ldrb	r3, [r7, #16]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d015      	beq.n	800fae0 <Setgroup+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.group, buffer);
 800fab4:	f107 0310 	add.w	r3, r7, #16
 800fab8:	4619      	mov	r1, r3
 800faba:	4814      	ldr	r0, [pc, #80]	@ (800fb0c <Setgroup+0xdc>)
 800fabc:	f00f fa8b 	bl	801efd6 <strcpy>
				set_param_flags();
 800fac0:	4b13      	ldr	r3, [pc, #76]	@ (800fb10 <Setgroup+0xe0>)
 800fac2:	2201      	movs	r2, #1
 800fac4:	701a      	strb	r2, [r3, #0]
 800fac6:	4b13      	ldr	r3, [pc, #76]	@ (800fb14 <Setgroup+0xe4>)
 800fac8:	2201      	movs	r2, #1
 800faca:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "group is set to: %s", _Flash_Packet.group);
 800facc:	4a0f      	ldr	r2, [pc, #60]	@ (800fb0c <Setgroup+0xdc>)
 800face:	4912      	ldr	r1, [pc, #72]	@ (800fb18 <Setgroup+0xe8>)
 800fad0:	68f8      	ldr	r0, [r7, #12]
 800fad2:	f7ff fd23 	bl	800f51c <cli_printf>
 800fad6:	e003      	b.n	800fae0 <Setgroup+0xb0>
			}
		}
	} else {
		cli_printf(cli, "group is too long");
 800fad8:	4910      	ldr	r1, [pc, #64]	@ (800fb1c <Setgroup+0xec>)
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f7ff fd1e 	bl	800f51c <cli_printf>
	}

	flag_cli = 0;
 800fae0:	4b09      	ldr	r3, [pc, #36]	@ (800fb08 <Setgroup+0xd8>)
 800fae2:	2200      	movs	r2, #0
 800fae4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fae6:	4b07      	ldr	r3, [pc, #28]	@ (800fb04 <Setgroup+0xd4>)
 800fae8:	2200      	movs	r2, #0
 800faea:	701a      	strb	r2, [r3, #0]

}
 800faec:	bf00      	nop
 800faee:	3748      	adds	r7, #72	@ 0x48
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	08022474 	.word	0x08022474
 800faf8:	080224e8 	.word	0x080224e8
 800fafc:	20001a74 	.word	0x20001a74
 800fb00:	08022624 	.word	0x08022624
 800fb04:	20001b3a 	.word	0x20001b3a
 800fb08:	20001b3b 	.word	0x20001b3b
 800fb0c:	2000142f 	.word	0x2000142f
 800fb10:	20001579 	.word	0x20001579
 800fb14:	2000157a 	.word	0x2000157a
 800fb18:	08022654 	.word	0x08022654
 800fb1c:	08022668 	.word	0x08022668

0800fb20 <GetID>:

void GetID(EmbeddedCli *cli, char *args, void *context) {
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "ID: %s", _Flash_Packet.id);
 800fb2c:	4a04      	ldr	r2, [pc, #16]	@ (800fb40 <GetID+0x20>)
 800fb2e:	4905      	ldr	r1, [pc, #20]	@ (800fb44 <GetID+0x24>)
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f7ff fcf3 	bl	800f51c <cli_printf>
}
 800fb36:	bf00      	nop
 800fb38:	3710      	adds	r7, #16
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	20001399 	.word	0x20001399
 800fb44:	0802267c 	.word	0x0802267c

0800fb48 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
 800fb52:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Location: %s", _Flash_Packet.location);
 800fb54:	4a04      	ldr	r2, [pc, #16]	@ (800fb68 <GetLocation+0x20>)
 800fb56:	4905      	ldr	r1, [pc, #20]	@ (800fb6c <GetLocation+0x24>)
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f7ff fcdf 	bl	800f51c <cli_printf>

}
 800fb5e:	bf00      	nop
 800fb60:	3710      	adds	r7, #16
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	200013cb 	.word	0x200013cb
 800fb6c:	08022684 	.word	0x08022684

0800fb70 <Getgroup>:
void Getname(EmbeddedCli *cli, char *args, void *context) {
	cli_printf(cli, "Name: %s", _Flash_Packet.name);

}

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Group: %s", _Flash_Packet.group);
 800fb7c:	4a04      	ldr	r2, [pc, #16]	@ (800fb90 <Getgroup+0x20>)
 800fb7e:	4905      	ldr	r1, [pc, #20]	@ (800fb94 <Getgroup+0x24>)
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f7ff fccb 	bl	800f51c <cli_printf>

}
 800fb86:	bf00      	nop
 800fb88:	3710      	adds	r7, #16
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	2000142f 	.word	0x2000142f
 800fb94:	080226a0 	.word	0x080226a0

0800fb98 <SetDate>:

void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b09a      	sub	sp, #104	@ 0x68
 800fb9c:	af02      	add	r7, sp, #8
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fba4:	4b26      	ldr	r3, [pc, #152]	@ (800fc40 <SetDate+0xa8>)
 800fba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fba8:	4926      	ldr	r1, [pc, #152]	@ (800fc44 <SetDate+0xac>)
 800fbaa:	68f8      	ldr	r0, [r7, #12]
 800fbac:	f7ff fcb6 	bl	800f51c <cli_printf>
			"Set date in following format: day:month:year eg:(15:1:23).");
	cli_other = 1;
 800fbb0:	4b25      	ldr	r3, [pc, #148]	@ (800fc48 <SetDate+0xb0>)
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fbb6:	4b25      	ldr	r3, [pc, #148]	@ (800fc4c <SetDate+0xb4>)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fbbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fbc0:	2232      	movs	r2, #50	@ 0x32
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f7ff fceb 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fbca:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fbcc:	f7f0 fb68 	bl	80002a0 <strlen>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbd8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fbda:	481d      	ldr	r0, [pc, #116]	@ (800fc50 <SetDate+0xb8>)
 800fbdc:	f7fc fb3c 	bl	800c258 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fbe0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d004      	beq.n	800fbf2 <SetDate+0x5a>
		Set_Date(buffer);
 800fbe8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fbec:	4618      	mov	r0, r3
 800fbee:	f004 f869 	bl	8013cc4 <Set_Date>
	}
	flag_cli = 0;
 800fbf2:	4b16      	ldr	r3, [pc, #88]	@ (800fc4c <SetDate+0xb4>)
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fbf8:	4b13      	ldr	r3, [pc, #76]	@ (800fc48 <SetDate+0xb0>)
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fbfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc02:	2200      	movs	r2, #0
 800fc04:	4619      	mov	r1, r3
 800fc06:	4813      	ldr	r0, [pc, #76]	@ (800fc54 <SetDate+0xbc>)
 800fc08:	f7f9 ffa5 	bl	8009b56 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fc0c:	f107 0310 	add.w	r3, r7, #16
 800fc10:	2200      	movs	r2, #0
 800fc12:	4619      	mov	r1, r3
 800fc14:	480f      	ldr	r0, [pc, #60]	@ (800fc54 <SetDate+0xbc>)
 800fc16:	f7f9 febc 	bl	8009992 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fc1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fc1e:	461a      	mov	r2, r3
 800fc20:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fc24:	4619      	mov	r1, r3
			gDate.Year);
 800fc26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fc2a:	9300      	str	r3, [sp, #0]
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	490a      	ldr	r1, [pc, #40]	@ (800fc58 <SetDate+0xc0>)
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f7ff fc73 	bl	800f51c <cli_printf>

}
 800fc36:	bf00      	nop
 800fc38:	3760      	adds	r7, #96	@ 0x60
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	08022474 	.word	0x08022474
 800fc44:	080226ac 	.word	0x080226ac
 800fc48:	20001b3a 	.word	0x20001b3a
 800fc4c:	20001b3b 	.word	0x20001b3b
 800fc50:	20001a74 	.word	0x20001a74
 800fc54:	20001898 	.word	0x20001898
 800fc58:	080226e8 	.word	0x080226e8

0800fc5c <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b09a      	sub	sp, #104	@ 0x68
 800fc60:	af02      	add	r7, sp, #8
 800fc62:	60f8      	str	r0, [r7, #12]
 800fc64:	60b9      	str	r1, [r7, #8]
 800fc66:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fc68:	4b26      	ldr	r3, [pc, #152]	@ (800fd04 <SetTime+0xa8>)
 800fc6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fc6c:	4926      	ldr	r1, [pc, #152]	@ (800fd08 <SetTime+0xac>)
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f7ff fc54 	bl	800f51c <cli_printf>
			"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
	cli_other = 1;
 800fc74:	4b25      	ldr	r3, [pc, #148]	@ (800fd0c <SetTime+0xb0>)
 800fc76:	2201      	movs	r2, #1
 800fc78:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fc7a:	4b25      	ldr	r3, [pc, #148]	@ (800fd10 <SetTime+0xb4>)
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fc80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc84:	2232      	movs	r2, #50	@ 0x32
 800fc86:	4619      	mov	r1, r3
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	f7ff fc89 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fc8e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fc90:	f7f0 fb06 	bl	80002a0 <strlen>
 800fc94:	4603      	mov	r3, r0
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc9c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fc9e:	481d      	ldr	r0, [pc, #116]	@ (800fd14 <SetTime+0xb8>)
 800fca0:	f7fc fada 	bl	800c258 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fca4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d004      	beq.n	800fcb6 <SetTime+0x5a>
		Set_Time(buffer);
 800fcac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f004 f8c5 	bl	8013e40 <Set_Time>
	}
	flag_cli = 0;
 800fcb6:	4b16      	ldr	r3, [pc, #88]	@ (800fd10 <SetTime+0xb4>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fcbc:	4b13      	ldr	r3, [pc, #76]	@ (800fd0c <SetTime+0xb0>)
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800fcc2:	4b15      	ldr	r3, [pc, #84]	@ (800fd18 <SetTime+0xbc>)
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fcc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fccc:	2200      	movs	r2, #0
 800fcce:	4619      	mov	r1, r3
 800fcd0:	4812      	ldr	r0, [pc, #72]	@ (800fd1c <SetTime+0xc0>)
 800fcd2:	f7f9 ff40 	bl	8009b56 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fcd6:	f107 0310 	add.w	r3, r7, #16
 800fcda:	2200      	movs	r2, #0
 800fcdc:	4619      	mov	r1, r3
 800fcde:	480f      	ldr	r0, [pc, #60]	@ (800fd1c <SetTime+0xc0>)
 800fce0:	f7f9 fe57 	bl	8009992 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fce4:	7c3b      	ldrb	r3, [r7, #16]
 800fce6:	461a      	mov	r2, r3
 800fce8:	7c7b      	ldrb	r3, [r7, #17]
 800fcea:	4619      	mov	r1, r3
			gTime.Seconds);
 800fcec:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fcee:	9300      	str	r3, [sp, #0]
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	490b      	ldr	r1, [pc, #44]	@ (800fd20 <SetTime+0xc4>)
 800fcf4:	68f8      	ldr	r0, [r7, #12]
 800fcf6:	f7ff fc11 	bl	800f51c <cli_printf>

}
 800fcfa:	bf00      	nop
 800fcfc:	3760      	adds	r7, #96	@ 0x60
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	08022474 	.word	0x08022474
 800fd08:	08022704 	.word	0x08022704
 800fd0c:	20001b3a 	.word	0x20001b3a
 800fd10:	20001b3b 	.word	0x20001b3b
 800fd14:	20001a74 	.word	0x20001a74
 800fd18:	20000029 	.word	0x20000029
 800fd1c:	20001898 	.word	0x20001898
 800fd20:	08022748 	.word	0x08022748

0800fd24 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b08c      	sub	sp, #48	@ 0x30
 800fd28:	af02      	add	r7, sp, #8
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fd30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd34:	2200      	movs	r2, #0
 800fd36:	4619      	mov	r1, r3
 800fd38:	480f      	ldr	r0, [pc, #60]	@ (800fd78 <GetDate+0x54>)
 800fd3a:	f7f9 ff0c 	bl	8009b56 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd3e:	f107 0310 	add.w	r3, r7, #16
 800fd42:	2200      	movs	r2, #0
 800fd44:	4619      	mov	r1, r3
 800fd46:	480c      	ldr	r0, [pc, #48]	@ (800fd78 <GetDate+0x54>)
 800fd48:	f7f9 fe23 	bl	8009992 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d.%02d.%02d", gDate.Date, gDate.Month, gDate.Year);
 800fd4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fd50:	461a      	mov	r2, r3
 800fd52:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fd56:	4619      	mov	r1, r3
 800fd58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	460b      	mov	r3, r1
 800fd60:	4906      	ldr	r1, [pc, #24]	@ (800fd7c <GetDate+0x58>)
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f7ff fbda 	bl	800f51c <cli_printf>
	HAL_Delay(100);
 800fd68:	2064      	movs	r0, #100	@ 0x64
 800fd6a:	f7f4 f9e1 	bl	8004130 <HAL_Delay>
}
 800fd6e:	bf00      	nop
 800fd70:	3728      	adds	r7, #40	@ 0x28
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	20001898 	.word	0x20001898
 800fd7c:	08022764 	.word	0x08022764

0800fd80 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b08c      	sub	sp, #48	@ 0x30
 800fd84:	af02      	add	r7, sp, #8
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fd8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd90:	2200      	movs	r2, #0
 800fd92:	4619      	mov	r1, r3
 800fd94:	480d      	ldr	r0, [pc, #52]	@ (800fdcc <GetTime+0x4c>)
 800fd96:	f7f9 fede 	bl	8009b56 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd9a:	f107 0310 	add.w	r3, r7, #16
 800fd9e:	2200      	movs	r2, #0
 800fda0:	4619      	mov	r1, r3
 800fda2:	480a      	ldr	r0, [pc, #40]	@ (800fdcc <GetTime+0x4c>)
 800fda4:	f7f9 fdf5 	bl	8009992 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fda8:	7c3b      	ldrb	r3, [r7, #16]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	7c7b      	ldrb	r3, [r7, #17]
 800fdae:	4619      	mov	r1, r3
			gTime.Seconds);
 800fdb0:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	4906      	ldr	r1, [pc, #24]	@ (800fdd0 <GetTime+0x50>)
 800fdb8:	68f8      	ldr	r0, [r7, #12]
 800fdba:	f7ff fbaf 	bl	800f51c <cli_printf>
	HAL_Delay(100);
 800fdbe:	2064      	movs	r0, #100	@ 0x64
 800fdc0:	f7f4 f9b6 	bl	8004130 <HAL_Delay>
}
 800fdc4:	bf00      	nop
 800fdc6:	3728      	adds	r7, #40	@ 0x28
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	20001898 	.word	0x20001898
 800fdd0:	08022774 	.word	0x08022774

0800fdd4 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b092      	sub	sp, #72	@ 0x48
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fde0:	4b54      	ldr	r3, [pc, #336]	@ (800ff34 <SetInterval+0x160>)
 800fde2:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fde4:	4954      	ldr	r1, [pc, #336]	@ (800ff38 <SetInterval+0x164>)
 800fde6:	68f8      	ldr	r0, [r7, #12]
 800fde8:	f7ff fb98 	bl	800f51c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fdec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fdee:	f7f0 fa57 	bl	80002a0 <strlen>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fdfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fdfc:	484f      	ldr	r0, [pc, #316]	@ (800ff3c <SetInterval+0x168>)
 800fdfe:	f7fc fa2b 	bl	800c258 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter 1 for 5min.");
 800fe02:	494f      	ldr	r1, [pc, #316]	@ (800ff40 <SetInterval+0x16c>)
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f7ff fb89 	bl	800f51c <cli_printf>
	cli_printf(cli, "Enter 2 for 15min.");
 800fe0a:	494e      	ldr	r1, [pc, #312]	@ (800ff44 <SetInterval+0x170>)
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f7ff fb85 	bl	800f51c <cli_printf>
	cli_printf(cli, "Enter 3 for 60min.");
 800fe12:	494d      	ldr	r1, [pc, #308]	@ (800ff48 <SetInterval+0x174>)
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f7ff fb81 	bl	800f51c <cli_printf>
	cli_printf(cli,
 800fe1a:	494c      	ldr	r1, [pc, #304]	@ (800ff4c <SetInterval+0x178>)
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f7ff fb7d 	bl	800f51c <cli_printf>
			"Disclaimer: The battery life will be reduced if interval is reduced.");
	cli_other = 1;
 800fe22:	4b4b      	ldr	r3, [pc, #300]	@ (800ff50 <SetInterval+0x17c>)
 800fe24:	2201      	movs	r2, #1
 800fe26:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fe28:	4b4a      	ldr	r3, [pc, #296]	@ (800ff54 <SetInterval+0x180>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fe2e:	f107 0310 	add.w	r3, r7, #16
 800fe32:	2232      	movs	r2, #50	@ 0x32
 800fe34:	4619      	mov	r1, r3
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f7ff fbb2 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fe3c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fe3e:	f7f0 fa2f 	bl	80002a0 <strlen>
 800fe42:	4603      	mov	r3, r0
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe4c:	483b      	ldr	r0, [pc, #236]	@ (800ff3c <SetInterval+0x168>)
 800fe4e:	f7fc fa03 	bl	800c258 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800fe52:	f107 0310 	add.w	r3, r7, #16
 800fe56:	2131      	movs	r1, #49	@ 0x31
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f00e ffb5 	bl	801edc8 <strchr>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d015      	beq.n	800fe90 <SetInterval+0xbc>
		_Flash_Packet.Time_Interval = 5;
 800fe64:	4b3c      	ldr	r3, [pc, #240]	@ (800ff58 <SetInterval+0x184>)
 800fe66:	2200      	movs	r2, #0
 800fe68:	f042 0205 	orr.w	r2, r2, #5
 800fe6c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fe70:	2200      	movs	r2, #0
 800fe72:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fe76:	2200      	movs	r2, #0
 800fe78:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fe82:	4b36      	ldr	r3, [pc, #216]	@ (800ff5c <SetInterval+0x188>)
 800fe84:	2201      	movs	r2, #1
 800fe86:	701a      	strb	r2, [r3, #0]
 800fe88:	4b35      	ldr	r3, [pc, #212]	@ (800ff60 <SetInterval+0x18c>)
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	701a      	strb	r2, [r3, #0]
 800fe8e:	e03c      	b.n	800ff0a <SetInterval+0x136>
	} else if (strstr(buffer, "2")) {
 800fe90:	f107 0310 	add.w	r3, r7, #16
 800fe94:	2132      	movs	r1, #50	@ 0x32
 800fe96:	4618      	mov	r0, r3
 800fe98:	f00e ff96 	bl	801edc8 <strchr>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d015      	beq.n	800fece <SetInterval+0xfa>
		_Flash_Packet.Time_Interval = 15;
 800fea2:	4b2d      	ldr	r3, [pc, #180]	@ (800ff58 <SetInterval+0x184>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	f042 020f 	orr.w	r2, r2, #15
 800feaa:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800feae:	2200      	movs	r2, #0
 800feb0:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800feb4:	2200      	movs	r2, #0
 800feb6:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800feba:	2200      	movs	r2, #0
 800febc:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fec0:	4b26      	ldr	r3, [pc, #152]	@ (800ff5c <SetInterval+0x188>)
 800fec2:	2201      	movs	r2, #1
 800fec4:	701a      	strb	r2, [r3, #0]
 800fec6:	4b26      	ldr	r3, [pc, #152]	@ (800ff60 <SetInterval+0x18c>)
 800fec8:	2201      	movs	r2, #1
 800feca:	701a      	strb	r2, [r3, #0]
 800fecc:	e01d      	b.n	800ff0a <SetInterval+0x136>
	} else if (strstr(buffer, "3")) {
 800fece:	f107 0310 	add.w	r3, r7, #16
 800fed2:	2133      	movs	r1, #51	@ 0x33
 800fed4:	4618      	mov	r0, r3
 800fed6:	f00e ff77 	bl	801edc8 <strchr>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d014      	beq.n	800ff0a <SetInterval+0x136>
		_Flash_Packet.Time_Interval = 60;
 800fee0:	4b1d      	ldr	r3, [pc, #116]	@ (800ff58 <SetInterval+0x184>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	f042 023c 	orr.w	r2, r2, #60	@ 0x3c
 800fee8:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800feec:	2200      	movs	r2, #0
 800feee:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fef2:	2200      	movs	r2, #0
 800fef4:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fef8:	2200      	movs	r2, #0
 800fefa:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fefe:	4b17      	ldr	r3, [pc, #92]	@ (800ff5c <SetInterval+0x188>)
 800ff00:	2201      	movs	r2, #1
 800ff02:	701a      	strb	r2, [r3, #0]
 800ff04:	4b16      	ldr	r3, [pc, #88]	@ (800ff60 <SetInterval+0x18c>)
 800ff06:	2201      	movs	r2, #1
 800ff08:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800ff0a:	4b12      	ldr	r3, [pc, #72]	@ (800ff54 <SetInterval+0x180>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ff10:	4b0f      	ldr	r3, [pc, #60]	@ (800ff50 <SetInterval+0x17c>)
 800ff12:	2200      	movs	r2, #0
 800ff14:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "Interval is set to: %ldmin", _Flash_Packet.Time_Interval);
 800ff16:	4b10      	ldr	r3, [pc, #64]	@ (800ff58 <SetInterval+0x184>)
 800ff18:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	4911      	ldr	r1, [pc, #68]	@ (800ff64 <SetInterval+0x190>)
 800ff20:	68f8      	ldr	r0, [r7, #12]
 800ff22:	f7ff fafb 	bl	800f51c <cli_printf>
	set_alarm_Time = 1;
 800ff26:	4b10      	ldr	r3, [pc, #64]	@ (800ff68 <SetInterval+0x194>)
 800ff28:	2201      	movs	r2, #1
 800ff2a:	701a      	strb	r2, [r3, #0]
}
 800ff2c:	bf00      	nop
 800ff2e:	3748      	adds	r7, #72	@ 0x48
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}
 800ff34:	08022474 	.word	0x08022474
 800ff38:	080224e8 	.word	0x080224e8
 800ff3c:	20001a74 	.word	0x20001a74
 800ff40:	08022784 	.word	0x08022784
 800ff44:	08022798 	.word	0x08022798
 800ff48:	080227ac 	.word	0x080227ac
 800ff4c:	080227c0 	.word	0x080227c0
 800ff50:	20001b3a 	.word	0x20001b3a
 800ff54:	20001b3b 	.word	0x20001b3b
 800ff58:	200012cc 	.word	0x200012cc
 800ff5c:	20001579 	.word	0x20001579
 800ff60:	2000157a 	.word	0x2000157a
 800ff64:	08022808 	.word	0x08022808
 800ff68:	20000029 	.word	0x20000029

0800ff6c <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b084      	sub	sp, #16
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Interval is Set to: %ldmin", _Flash_Packet.Time_Interval);
 800ff78:	4b05      	ldr	r3, [pc, #20]	@ (800ff90 <GetInterval+0x24>)
 800ff7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ff7e:	461a      	mov	r2, r3
 800ff80:	4904      	ldr	r1, [pc, #16]	@ (800ff94 <GetInterval+0x28>)
 800ff82:	68f8      	ldr	r0, [r7, #12]
 800ff84:	f7ff faca 	bl	800f51c <cli_printf>

}
 800ff88:	bf00      	nop
 800ff8a:	3710      	adds	r7, #16
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}
 800ff90:	200012cc 	.word	0x200012cc
 800ff94:	08022824 	.word	0x08022824

0800ff98 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b09a      	sub	sp, #104	@ 0x68
 800ff9c:	af02      	add	r7, sp, #8
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800ffa4:	4b40      	ldr	r3, [pc, #256]	@ (80100a8 <SetFilename+0x110>)
 800ffa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800ffa8:	4940      	ldr	r1, [pc, #256]	@ (80100ac <SetFilename+0x114>)
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	f7ff fab6 	bl	800f51c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ffb0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ffb2:	f7f0 f975 	bl	80002a0 <strlen>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffbe:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ffc0:	483b      	ldr	r0, [pc, #236]	@ (80100b0 <SetFilename+0x118>)
 800ffc2:	f7fc f949 	bl	800c258 <HAL_UART_Transmit>
			1000);
	cli_printf(cli,
 800ffc6:	493b      	ldr	r1, [pc, #236]	@ (80100b4 <SetFilename+0x11c>)
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f7ff faa7 	bl	800f51c <cli_printf>
			"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
	cli_printf(cli,
 800ffce:	493a      	ldr	r1, [pc, #232]	@ (80100b8 <SetFilename+0x120>)
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	f7ff faa3 	bl	800f51c <cli_printf>
			"If any special characters they will be omitted automatically.");

	cli_other = 1;
 800ffd6:	4b39      	ldr	r3, [pc, #228]	@ (80100bc <SetFilename+0x124>)
 800ffd8:	2201      	movs	r2, #1
 800ffda:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ffdc:	4b38      	ldr	r3, [pc, #224]	@ (80100c0 <SetFilename+0x128>)
 800ffde:	2200      	movs	r2, #0
 800ffe0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800ffe2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ffe6:	2232      	movs	r2, #50	@ 0x32
 800ffe8:	4619      	mov	r1, r3
 800ffea:	68f8      	ldr	r0, [r7, #12]
 800ffec:	f7ff fad8 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fff0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fff2:	f7f0 f955 	bl	80002a0 <strlen>
 800fff6:	4603      	mov	r3, r0
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fffe:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8010000:	482b      	ldr	r0, [pc, #172]	@ (80100b0 <SetFilename+0x118>)
 8010002:	f7fc f929 	bl	800c258 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 8010006:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801000a:	4618      	mov	r0, r3
 801000c:	f7f0 f948 	bl	80002a0 <strlen>
 8010010:	4603      	mov	r3, r0
 8010012:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (len < 20) {
 8010016:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801001a:	2b13      	cmp	r3, #19
 801001c:	d836      	bhi.n	801008c <SetFilename+0xf4>
		if (buffer[0] != '\0') {
 801001e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010022:	2b00      	cmp	r3, #0
 8010024:	d036      	beq.n	8010094 <SetFilename+0xfc>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.File_Name, buffer);
 8010026:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801002a:	4619      	mov	r1, r3
 801002c:	4825      	ldr	r0, [pc, #148]	@ (80100c4 <SetFilename+0x12c>)
 801002e:	f00e ffd2 	bl	801efd6 <strcpy>
				set_param_flags();
 8010032:	4b25      	ldr	r3, [pc, #148]	@ (80100c8 <SetFilename+0x130>)
 8010034:	2201      	movs	r2, #1
 8010036:	701a      	strb	r2, [r3, #0]
 8010038:	4b24      	ldr	r3, [pc, #144]	@ (80100cc <SetFilename+0x134>)
 801003a:	2201      	movs	r2, #1
 801003c:	701a      	strb	r2, [r3, #0]
				_RunTime_Packet.filename_changed = 1;
 801003e:	4b24      	ldr	r3, [pc, #144]	@ (80100d0 <SetFilename+0x138>)
 8010040:	2201      	movs	r2, #1
 8010042:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				cli_printf(cli, "Filename is set to: %s",
 8010046:	4a1f      	ldr	r2, [pc, #124]	@ (80100c4 <SetFilename+0x12c>)
 8010048:	4922      	ldr	r1, [pc, #136]	@ (80100d4 <SetFilename+0x13c>)
 801004a:	68f8      	ldr	r0, [r7, #12]
 801004c:	f7ff fa66 	bl	800f51c <cli_printf>
						_Flash_Packet.File_Name);

				RTC_DateTypeDef sDate;
				HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8010050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010054:	2200      	movs	r2, #0
 8010056:	4619      	mov	r1, r3
 8010058:	481f      	ldr	r0, [pc, #124]	@ (80100d8 <SetFilename+0x140>)
 801005a:	f7f9 fd7c 	bl	8009b56 <HAL_RTC_GetDate>
				RTC_TimeTypeDef sTime;
				HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801005e:	f107 0310 	add.w	r3, r7, #16
 8010062:	2200      	movs	r2, #0
 8010064:	4619      	mov	r1, r3
 8010066:	481c      	ldr	r0, [pc, #112]	@ (80100d8 <SetFilename+0x140>)
 8010068:	f7f9 fc93 	bl	8009992 <HAL_RTC_GetTime>


				sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", _Flash_Packet.File_Name, sDate.Year,sDate.Month, sDate.Date);
 801006c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010070:	4619      	mov	r1, r3
 8010072:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010076:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801007a:	9201      	str	r2, [sp, #4]
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	460b      	mov	r3, r1
 8010080:	4a10      	ldr	r2, [pc, #64]	@ (80100c4 <SetFilename+0x12c>)
 8010082:	4916      	ldr	r1, [pc, #88]	@ (80100dc <SetFilename+0x144>)
 8010084:	4816      	ldr	r0, [pc, #88]	@ (80100e0 <SetFilename+0x148>)
 8010086:	f00e fd4d 	bl	801eb24 <siprintf>
 801008a:	e003      	b.n	8010094 <SetFilename+0xfc>
			}
		}
	} else {
		cli_printf(cli, "Filename is too long");
 801008c:	4915      	ldr	r1, [pc, #84]	@ (80100e4 <SetFilename+0x14c>)
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f7ff fa44 	bl	800f51c <cli_printf>
	}

	flag_cli = 0;
 8010094:	4b0a      	ldr	r3, [pc, #40]	@ (80100c0 <SetFilename+0x128>)
 8010096:	2200      	movs	r2, #0
 8010098:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801009a:	4b08      	ldr	r3, [pc, #32]	@ (80100bc <SetFilename+0x124>)
 801009c:	2200      	movs	r2, #0
 801009e:	701a      	strb	r2, [r3, #0]

}
 80100a0:	bf00      	nop
 80100a2:	3760      	adds	r7, #96	@ 0x60
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	08022474 	.word	0x08022474
 80100ac:	080224e8 	.word	0x080224e8
 80100b0:	20001a74 	.word	0x20001a74
 80100b4:	08022840 	.word	0x08022840
 80100b8:	080228b4 	.word	0x080228b4
 80100bc:	20001b3a 	.word	0x20001b3a
 80100c0:	20001b3b 	.word	0x20001b3b
 80100c4:	200012cc 	.word	0x200012cc
 80100c8:	20001579 	.word	0x20001579
 80100cc:	2000157a 	.word	0x2000157a
 80100d0:	20001530 	.word	0x20001530
 80100d4:	080228f4 	.word	0x080228f4
 80100d8:	20001898 	.word	0x20001898
 80100dc:	0802290c 	.word	0x0802290c
 80100e0:	200014c5 	.word	0x200014c5
 80100e4:	08022920 	.word	0x08022920

080100e8 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Filename is set to: %s", _Flash_Packet.filename_ver_date);
 80100f4:	4a04      	ldr	r2, [pc, #16]	@ (8010108 <GetFilename+0x20>)
 80100f6:	4905      	ldr	r1, [pc, #20]	@ (801010c <GetFilename+0x24>)
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f7ff fa0f 	bl	800f51c <cli_printf>

}
 80100fe:	bf00      	nop
 8010100:	3710      	adds	r7, #16
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	200014c5 	.word	0x200014c5
 801010c:	080228f4 	.word	0x080228f4

08010110 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 8010110:	b580      	push	{r7, lr}
 8010112:	b092      	sub	sp, #72	@ 0x48
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 801011c:	4b41      	ldr	r3, [pc, #260]	@ (8010224 <SetFileformat+0x114>)
 801011e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010120:	4941      	ldr	r1, [pc, #260]	@ (8010228 <SetFileformat+0x118>)
 8010122:	68f8      	ldr	r0, [r7, #12]
 8010124:	f7ff f9fa 	bl	800f51c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010128:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801012a:	f7f0 f8b9 	bl	80002a0 <strlen>
 801012e:	4603      	mov	r3, r0
 8010130:	b29a      	uxth	r2, r3
 8010132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010136:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010138:	483c      	ldr	r0, [pc, #240]	@ (801022c <SetFileformat+0x11c>)
 801013a:	f7fc f88d 	bl	800c258 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Following file formats are allowed:");
 801013e:	493c      	ldr	r1, [pc, #240]	@ (8010230 <SetFileformat+0x120>)
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f7ff f9eb 	bl	800f51c <cli_printf>
	cli_printf(cli, "1. (.csv)");
 8010146:	493b      	ldr	r1, [pc, #236]	@ (8010234 <SetFileformat+0x124>)
 8010148:	68f8      	ldr	r0, [r7, #12]
 801014a:	f7ff f9e7 	bl	800f51c <cli_printf>
	cli_printf(cli, "2. (.json)");
 801014e:	493a      	ldr	r1, [pc, #232]	@ (8010238 <SetFileformat+0x128>)
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f7ff f9e3 	bl	800f51c <cli_printf>
	cli_printf(cli, "Enter the number to select your desired format");
 8010156:	4939      	ldr	r1, [pc, #228]	@ (801023c <SetFileformat+0x12c>)
 8010158:	68f8      	ldr	r0, [r7, #12]
 801015a:	f7ff f9df 	bl	800f51c <cli_printf>

	cli_other = 1;
 801015e:	4b38      	ldr	r3, [pc, #224]	@ (8010240 <SetFileformat+0x130>)
 8010160:	2201      	movs	r2, #1
 8010162:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010164:	4b37      	ldr	r3, [pc, #220]	@ (8010244 <SetFileformat+0x134>)
 8010166:	2200      	movs	r2, #0
 8010168:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 801016a:	f107 0310 	add.w	r3, r7, #16
 801016e:	2232      	movs	r2, #50	@ 0x32
 8010170:	4619      	mov	r1, r3
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f7ff fa14 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010178:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801017a:	f7f0 f891 	bl	80002a0 <strlen>
 801017e:	4603      	mov	r3, r0
 8010180:	b29a      	uxth	r2, r3
 8010182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010186:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010188:	4828      	ldr	r0, [pc, #160]	@ (801022c <SetFileformat+0x11c>)
 801018a:	f7fc f865 	bl	800c258 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 801018e:	f107 0310 	add.w	r3, r7, #16
 8010192:	2131      	movs	r1, #49	@ 0x31
 8010194:	4618      	mov	r0, r3
 8010196:	f00e fe17 	bl	801edc8 <strchr>
 801019a:	4603      	mov	r3, r0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d014      	beq.n	80101ca <SetFileformat+0xba>
		strcpy(_Flash_Packet.File_Format, ".CSV");
 80101a0:	4b29      	ldr	r3, [pc, #164]	@ (8010248 <SetFileformat+0x138>)
 80101a2:	4a2a      	ldr	r2, [pc, #168]	@ (801024c <SetFileformat+0x13c>)
 80101a4:	6810      	ldr	r0, [r2, #0]
 80101a6:	6018      	str	r0, [r3, #0]
 80101a8:	7912      	ldrb	r2, [r2, #4]
 80101aa:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 80101ac:	4b28      	ldr	r3, [pc, #160]	@ (8010250 <SetFileformat+0x140>)
 80101ae:	2201      	movs	r2, #1
 80101b0:	701a      	strb	r2, [r3, #0]
 80101b2:	4b28      	ldr	r3, [pc, #160]	@ (8010254 <SetFileformat+0x144>)
 80101b4:	2201      	movs	r2, #1
 80101b6:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 80101b8:	4b27      	ldr	r3, [pc, #156]	@ (8010258 <SetFileformat+0x148>)
 80101ba:	2201      	movs	r2, #1
 80101bc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 1;
 80101c0:	4b25      	ldr	r3, [pc, #148]	@ (8010258 <SetFileformat+0x148>)
 80101c2:	2201      	movs	r2, #1
 80101c4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80101c8:	e01c      	b.n	8010204 <SetFileformat+0xf4>
	} else if (strstr(buffer, "2")) {
 80101ca:	f107 0310 	add.w	r3, r7, #16
 80101ce:	2132      	movs	r1, #50	@ 0x32
 80101d0:	4618      	mov	r0, r3
 80101d2:	f00e fdf9 	bl	801edc8 <strchr>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d013      	beq.n	8010204 <SetFileformat+0xf4>
		strcpy(_Flash_Packet.File_Format, ".JSON");
 80101dc:	4b1a      	ldr	r3, [pc, #104]	@ (8010248 <SetFileformat+0x138>)
 80101de:	4a1f      	ldr	r2, [pc, #124]	@ (801025c <SetFileformat+0x14c>)
 80101e0:	6810      	ldr	r0, [r2, #0]
 80101e2:	6018      	str	r0, [r3, #0]
 80101e4:	8892      	ldrh	r2, [r2, #4]
 80101e6:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 80101e8:	4b19      	ldr	r3, [pc, #100]	@ (8010250 <SetFileformat+0x140>)
 80101ea:	2201      	movs	r2, #1
 80101ec:	701a      	strb	r2, [r3, #0]
 80101ee:	4b19      	ldr	r3, [pc, #100]	@ (8010254 <SetFileformat+0x144>)
 80101f0:	2201      	movs	r2, #1
 80101f2:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 80101f4:	4b18      	ldr	r3, [pc, #96]	@ (8010258 <SetFileformat+0x148>)
 80101f6:	2201      	movs	r2, #1
 80101f8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 0;
 80101fc:	4b16      	ldr	r3, [pc, #88]	@ (8010258 <SetFileformat+0x148>)
 80101fe:	2200      	movs	r2, #0
 8010200:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	}

	flag_cli = 0;
 8010204:	4b0f      	ldr	r3, [pc, #60]	@ (8010244 <SetFileformat+0x134>)
 8010206:	2200      	movs	r2, #0
 8010208:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801020a:	4b0d      	ldr	r3, [pc, #52]	@ (8010240 <SetFileformat+0x130>)
 801020c:	2200      	movs	r2, #0
 801020e:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 8010210:	4a0d      	ldr	r2, [pc, #52]	@ (8010248 <SetFileformat+0x138>)
 8010212:	4913      	ldr	r1, [pc, #76]	@ (8010260 <SetFileformat+0x150>)
 8010214:	68f8      	ldr	r0, [r7, #12]
 8010216:	f7ff f981 	bl	800f51c <cli_printf>

}
 801021a:	bf00      	nop
 801021c:	3748      	adds	r7, #72	@ 0x48
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	08022474 	.word	0x08022474
 8010228:	080224e8 	.word	0x080224e8
 801022c:	20001a74 	.word	0x20001a74
 8010230:	08022938 	.word	0x08022938
 8010234:	0802295c 	.word	0x0802295c
 8010238:	08022968 	.word	0x08022968
 801023c:	08022974 	.word	0x08022974
 8010240:	20001b3a 	.word	0x20001b3a
 8010244:	20001b3b 	.word	0x20001b3b
 8010248:	20001330 	.word	0x20001330
 801024c:	080229a4 	.word	0x080229a4
 8010250:	20001579 	.word	0x20001579
 8010254:	2000157a 	.word	0x2000157a
 8010258:	20001530 	.word	0x20001530
 801025c:	080229ac 	.word	0x080229ac
 8010260:	080229b4 	.word	0x080229b4

08010264 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 8010270:	4a04      	ldr	r2, [pc, #16]	@ (8010284 <GetFileformat+0x20>)
 8010272:	4905      	ldr	r1, [pc, #20]	@ (8010288 <GetFileformat+0x24>)
 8010274:	68f8      	ldr	r0, [r7, #12]
 8010276:	f7ff f951 	bl	800f51c <cli_printf>

}
 801027a:	bf00      	nop
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	20001330 	.word	0x20001330
 8010288:	080229b4 	.word	0x080229b4

0801028c <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 801028c:	b580      	push	{r7, lr}
 801028e:	b096      	sub	sp, #88	@ 0x58
 8010290:	af00      	add	r7, sp, #0
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 8010298:	4b48      	ldr	r3, [pc, #288]	@ (80103bc <fanclean+0x130>)
 801029a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int counter = 0;
 801029c:	2300      	movs	r3, #0
 801029e:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 80102a0:	4b47      	ldr	r3, [pc, #284]	@ (80103c0 <fanclean+0x134>)
 80102a2:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 80102a4:	2300      	movs	r3, #0
 80102a6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_printf(cli,
 80102aa:	4946      	ldr	r1, [pc, #280]	@ (80103c4 <fanclean+0x138>)
 80102ac:	68f8      	ldr	r0, [r7, #12]
 80102ae:	f7ff f935 	bl	800f51c <cli_printf>
			"Do you want to initiate particle sensor fan-cleaning? y/n?");

	cli_other = 1;
 80102b2:	4b45      	ldr	r3, [pc, #276]	@ (80103c8 <fanclean+0x13c>)
 80102b4:	2201      	movs	r2, #1
 80102b6:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 80102b8:	4b44      	ldr	r3, [pc, #272]	@ (80103cc <fanclean+0x140>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 80102be:	f107 0314 	add.w	r3, r7, #20
 80102c2:	2232      	movs	r2, #50	@ 0x32
 80102c4:	4619      	mov	r1, r3
 80102c6:	68f8      	ldr	r0, [r7, #12]
 80102c8:	f7ff f96a 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80102cc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80102ce:	f7ef ffe7 	bl	80002a0 <strlen>
 80102d2:	4603      	mov	r3, r0
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80102da:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80102dc:	483c      	ldr	r0, [pc, #240]	@ (80103d0 <fanclean+0x144>)
 80102de:	f7fb ffbb 	bl	800c258 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "n")) {
 80102e2:	f107 0314 	add.w	r3, r7, #20
 80102e6:	216e      	movs	r1, #110	@ 0x6e
 80102e8:	4618      	mov	r0, r3
 80102ea:	f00e fd6d 	bl	801edc8 <strchr>
 80102ee:	4603      	mov	r3, r0
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00f      	beq.n	8010314 <fanclean+0x88>
		_Flash_Packet.Calibration_Status = 0;
 80102f4:	4b37      	ldr	r3, [pc, #220]	@ (80103d4 <fanclean+0x148>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
		_RunTime_Packet.PM_calibration = 1;
 80102fc:	4b36      	ldr	r3, [pc, #216]	@ (80103d8 <fanclean+0x14c>)
 80102fe:	2201      	movs	r2, #1
 8010300:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		cli_printf(cli, "Particle sensor fan-cleaning aborted.");
 8010304:	4935      	ldr	r1, [pc, #212]	@ (80103dc <fanclean+0x150>)
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f7ff f908 	bl	800f51c <cli_printf>
		//set_param_flags();
		do_Calibration = 0;
 801030c:	2300      	movs	r3, #0
 801030e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010312:	e00f      	b.n	8010334 <fanclean+0xa8>
	} else if (strstr(buffer, "y")) {
 8010314:	f107 0314 	add.w	r3, r7, #20
 8010318:	2179      	movs	r1, #121	@ 0x79
 801031a:	4618      	mov	r0, r3
 801031c:	f00e fd54 	bl	801edc8 <strchr>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d006      	beq.n	8010334 <fanclean+0xa8>
		_RunTime_Packet.PM_calibration = 0;
 8010326:	4b2c      	ldr	r3, [pc, #176]	@ (80103d8 <fanclean+0x14c>)
 8010328:	2200      	movs	r2, #0
 801032a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		do_Calibration = 1;
 801032e:	2301      	movs	r3, #1
 8010330:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 8010334:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8010338:	2b01      	cmp	r3, #1
 801033a:	d135      	bne.n	80103a8 <fanclean+0x11c>

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801033c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801033e:	f7ef ffaf 	bl	80002a0 <strlen>
 8010342:	4603      	mov	r3, r0
 8010344:	b29a      	uxth	r2, r3
 8010346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801034a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801034c:	4820      	ldr	r0, [pc, #128]	@ (80103d0 <fanclean+0x144>)
 801034e:	f7fb ff83 	bl	800c258 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Particle sensor fan-cleaning initiated, please wait.");
 8010352:	4923      	ldr	r1, [pc, #140]	@ (80103e0 <fanclean+0x154>)
 8010354:	68f8      	ldr	r0, [r7, #12]
 8010356:	f7ff f8e1 	bl	800f51c <cli_printf>
		while (counter < 8) {
 801035a:	e013      	b.n	8010384 <fanclean+0xf8>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 801035c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801035e:	f7ef ff9f 	bl	80002a0 <strlen>
 8010362:	4603      	mov	r3, r0
 8010364:	b29a      	uxth	r2, r3
 8010366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801036a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801036c:	4818      	ldr	r0, [pc, #96]	@ (80103d0 <fanclean+0x144>)
 801036e:	f7fb ff73 	bl	800c258 <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 8010372:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8010376:	f7f3 fedb 	bl	8004130 <HAL_Delay>
			toggle_blue_led();
 801037a:	f7f0 fe9f 	bl	80010bc <toggle_blue_led>
			counter++;
 801037e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010380:	3301      	adds	r3, #1
 8010382:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 8010384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010386:	2b07      	cmp	r3, #7
 8010388:	dde8      	ble.n	801035c <fanclean+0xd0>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801038a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801038c:	f7ef ff88 	bl	80002a0 <strlen>
 8010390:	4603      	mov	r3, r0
 8010392:	b29a      	uxth	r2, r3
 8010394:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010398:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801039a:	480d      	ldr	r0, [pc, #52]	@ (80103d0 <fanclean+0x144>)
 801039c:	f7fb ff5c 	bl	800c258 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "fan-cleaning done.");
 80103a0:	4910      	ldr	r1, [pc, #64]	@ (80103e4 <fanclean+0x158>)
 80103a2:	68f8      	ldr	r0, [r7, #12]
 80103a4:	f7ff f8ba 	bl	800f51c <cli_printf>

	}

	flag_cli = 0;
 80103a8:	4b08      	ldr	r3, [pc, #32]	@ (80103cc <fanclean+0x140>)
 80103aa:	2200      	movs	r2, #0
 80103ac:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80103ae:	4b06      	ldr	r3, [pc, #24]	@ (80103c8 <fanclean+0x13c>)
 80103b0:	2200      	movs	r2, #0
 80103b2:	701a      	strb	r2, [r3, #0]
}
 80103b4:	bf00      	nop
 80103b6:	3758      	adds	r7, #88	@ 0x58
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	08022474 	.word	0x08022474
 80103c0:	080229d0 	.word	0x080229d0
 80103c4:	080229dc 	.word	0x080229dc
 80103c8:	20001b3a 	.word	0x20001b3a
 80103cc:	20001b3b 	.word	0x20001b3b
 80103d0:	20001a74 	.word	0x20001a74
 80103d4:	200012cc 	.word	0x200012cc
 80103d8:	20001530 	.word	0x20001530
 80103dc:	08022a18 	.word	0x08022a18
 80103e0:	08022a40 	.word	0x08022a40
 80103e4:	08022a78 	.word	0x08022a78

080103e8 <co2calibrate>:

void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b096      	sub	sp, #88	@ 0x58
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 80103f4:	4b55      	ldr	r3, [pc, #340]	@ (801054c <co2calibrate+0x164>)
 80103f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 80103f8:	2300      	movs	r3, #0
 80103fa:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 80103fc:	4b54      	ldr	r3, [pc, #336]	@ (8010550 <co2calibrate+0x168>)
 80103fe:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010400:	2300      	movs	r3, #0
 8010402:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	cli_other = 1;
 8010406:	4b53      	ldr	r3, [pc, #332]	@ (8010554 <co2calibrate+0x16c>)
 8010408:	2201      	movs	r2, #1
 801040a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 801040c:	4b52      	ldr	r3, [pc, #328]	@ (8010558 <co2calibrate+0x170>)
 801040e:	2200      	movs	r2, #0
 8010410:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 8010412:	f107 0310 	add.w	r3, r7, #16
 8010416:	2232      	movs	r2, #50	@ 0x32
 8010418:	2100      	movs	r1, #0
 801041a:	4618      	mov	r0, r3
 801041c:	f00e fccc 	bl	801edb8 <memset>
	cli_printf(cli,
 8010420:	494e      	ldr	r1, [pc, #312]	@ (801055c <co2calibrate+0x174>)
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f7ff f87a 	bl	800f51c <cli_printf>
			"To calibrate Co2 sensor, please provide Co2 concentration value.");
	cli_printf(cli,
 8010428:	494d      	ldr	r1, [pc, #308]	@ (8010560 <co2calibrate+0x178>)
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f7ff f876 	bl	800f51c <cli_printf>
			"If Co2 concentration is unknown then just press enter to cancel the calibration.");

	receiveString(cli, buffer, sizeof(buffer));
 8010430:	f107 0310 	add.w	r3, r7, #16
 8010434:	2232      	movs	r2, #50	@ 0x32
 8010436:	4619      	mov	r1, r3
 8010438:	68f8      	ldr	r0, [r7, #12]
 801043a:	f7ff f8b1 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801043e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010440:	f7ef ff2e 	bl	80002a0 <strlen>
 8010444:	4603      	mov	r3, r0
 8010446:	b29a      	uxth	r2, r3
 8010448:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801044c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801044e:	4845      	ldr	r0, [pc, #276]	@ (8010564 <co2calibrate+0x17c>)
 8010450:	f7fb ff02 	bl	800c258 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8010454:	7c3b      	ldrb	r3, [r7, #16]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d01e      	beq.n	8010498 <co2calibrate+0xb0>
		_RunTime_Packet.CO2_calibration = 1;
 801045a:	4b43      	ldr	r3, [pc, #268]	@ (8010568 <co2calibrate+0x180>)
 801045c:	2201      	movs	r2, #1
 801045e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

		val = atoi(buffer);
 8010462:	f107 0310 	add.w	r3, r7, #16
 8010466:	4618      	mov	r0, r3
 8010468:	f00d fa24 	bl	801d8b4 <atoi>
 801046c:	4603      	mov	r3, r0
 801046e:	647b      	str	r3, [r7, #68]	@ 0x44

		if (val < 65535) {
 8010470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010472:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010476:	4293      	cmp	r3, r2
 8010478:	d803      	bhi.n	8010482 <co2calibrate+0x9a>
			_RunTime_Packet._target_co2_concentration = val;
 801047a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801047c:	b29a      	uxth	r2, r3
 801047e:	4b3a      	ldr	r3, [pc, #232]	@ (8010568 <co2calibrate+0x180>)
 8010480:	879a      	strh	r2, [r3, #60]	@ 0x3c
		}

		cli_printf(cli,
				"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
				_RunTime_Packet._target_co2_concentration);
 8010482:	4b39      	ldr	r3, [pc, #228]	@ (8010568 <co2calibrate+0x180>)
 8010484:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
		cli_printf(cli,
 8010486:	461a      	mov	r2, r3
 8010488:	4938      	ldr	r1, [pc, #224]	@ (801056c <co2calibrate+0x184>)
 801048a:	68f8      	ldr	r0, [r7, #12]
 801048c:	f7ff f846 	bl	800f51c <cli_printf>
		do_Calibration = 1;
 8010490:	2301      	movs	r3, #1
 8010492:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010496:	e00a      	b.n	80104ae <co2calibrate+0xc6>
	} else {
		cli_printf(cli, "Co2 sensor Calibration aborted.");
 8010498:	4935      	ldr	r1, [pc, #212]	@ (8010570 <co2calibrate+0x188>)
 801049a:	68f8      	ldr	r0, [r7, #12]
 801049c:	f7ff f83e 	bl	800f51c <cli_printf>
		_RunTime_Packet.CO2_calibration = 0;
 80104a0:	4b31      	ldr	r3, [pc, #196]	@ (8010568 <co2calibrate+0x180>)
 80104a2:	2200      	movs	r2, #0
 80104a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		do_Calibration = 0;
 80104a8:	2300      	movs	r3, #0
 80104aa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 80104ae:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d13f      	bne.n	8010536 <co2calibrate+0x14e>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80104b6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80104b8:	f7ef fef2 	bl	80002a0 <strlen>
 80104bc:	4603      	mov	r3, r0
 80104be:	b29a      	uxth	r2, r3
 80104c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104c4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80104c6:	4827      	ldr	r0, [pc, #156]	@ (8010564 <co2calibrate+0x17c>)
 80104c8:	f7fb fec6 	bl	800c258 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Co2 is calibrating, please wait.");
 80104cc:	4929      	ldr	r1, [pc, #164]	@ (8010574 <co2calibrate+0x18c>)
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	f7ff f824 	bl	800f51c <cli_printf>
		if (!_RunTime_Packet.scd4x_i2c_error) {
 80104d4:	4b24      	ldr	r3, [pc, #144]	@ (8010568 <co2calibrate+0x180>)
 80104d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d119      	bne.n	8010512 <co2calibrate+0x12a>
#ifdef use_scd40x
			scd4x_perform_forced_recalibration(
					_RunTime_Packet._target_co2_concentration,
					&_RunTime_Packet._frc_correction);
#elif use_scd30
		scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 80104de:	4b22      	ldr	r3, [pc, #136]	@ (8010568 <co2calibrate+0x180>)
 80104e0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80104e2:	4618      	mov	r0, r3
 80104e4:	f004 f932 	bl	801474c <scd30_force_recalibration>
#endif
		}
		while (counter < 8) {
 80104e8:	e013      	b.n	8010512 <co2calibrate+0x12a>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 80104ea:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80104ec:	f7ef fed8 	bl	80002a0 <strlen>
 80104f0:	4603      	mov	r3, r0
 80104f2:	b29a      	uxth	r2, r3
 80104f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104f8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80104fa:	481a      	ldr	r0, [pc, #104]	@ (8010564 <co2calibrate+0x17c>)
 80104fc:	f7fb feac 	bl	800c258 <HAL_UART_Transmit>
					1000);
			HAL_Delay(1000);
 8010500:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010504:	f7f3 fe14 	bl	8004130 <HAL_Delay>
			toggle_blue_led();
 8010508:	f7f0 fdd8 	bl	80010bc <toggle_blue_led>
			counter++;
 801050c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801050e:	3301      	adds	r3, #1
 8010510:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 8010512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010514:	2b07      	cmp	r3, #7
 8010516:	dde8      	ble.n	80104ea <co2calibrate+0x102>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010518:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801051a:	f7ef fec1 	bl	80002a0 <strlen>
 801051e:	4603      	mov	r3, r0
 8010520:	b29a      	uxth	r2, r3
 8010522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010526:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010528:	480e      	ldr	r0, [pc, #56]	@ (8010564 <co2calibrate+0x17c>)
 801052a:	f7fb fe95 	bl	800c258 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Sensor calibration done.");
 801052e:	4912      	ldr	r1, [pc, #72]	@ (8010578 <co2calibrate+0x190>)
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	f7fe fff3 	bl	800f51c <cli_printf>
	}

	flag_cli = 0;
 8010536:	4b08      	ldr	r3, [pc, #32]	@ (8010558 <co2calibrate+0x170>)
 8010538:	2200      	movs	r2, #0
 801053a:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801053c:	4b05      	ldr	r3, [pc, #20]	@ (8010554 <co2calibrate+0x16c>)
 801053e:	2200      	movs	r2, #0
 8010540:	701a      	strb	r2, [r3, #0]
}
 8010542:	bf00      	nop
 8010544:	3758      	adds	r7, #88	@ 0x58
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	08022474 	.word	0x08022474
 8010550:	080229d0 	.word	0x080229d0
 8010554:	20001b3a 	.word	0x20001b3a
 8010558:	20001b3b 	.word	0x20001b3b
 801055c:	08022a8c 	.word	0x08022a8c
 8010560:	08022ad0 	.word	0x08022ad0
 8010564:	20001a74 	.word	0x20001a74
 8010568:	20001530 	.word	0x20001530
 801056c:	08022b24 	.word	0x08022b24
 8010570:	08022b74 	.word	0x08022b74
 8010574:	08022b94 	.word	0x08022b94
 8010578:	08022bb8 	.word	0x08022bb8

0801057c <statco2calibrate>:


void statco2calibrate(EmbeddedCli *cli, char *args, void *context)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b08a      	sub	sp, #40	@ 0x28
 8010580:	af00      	add	r7, sp, #0
 8010582:	60f8      	str	r0, [r7, #12]
 8010584:	60b9      	str	r1, [r7, #8]
 8010586:	607a      	str	r2, [r7, #4]

	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_force_recalibration_status(&calib_val);
 8010588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801058c:	4618      	mov	r0, r3
 801058e:	f004 f91b 	bl	80147c8 <scd30_get_force_recalibration_status>
 8010592:	4603      	mov	r3, r0
 8010594:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 8010596:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801059a:	2b00      	cmp	r3, #0
 801059c:	d107      	bne.n	80105ae <statco2calibrate+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 801059e:	f107 0310 	add.w	r3, r7, #16
 80105a2:	4a0f      	ldr	r2, [pc, #60]	@ (80105e0 <statco2calibrate+0x64>)
 80105a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105a8:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80105ac:	e007      	b.n	80105be <statco2calibrate+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 80105ae:	f107 0310 	add.w	r3, r7, #16
 80105b2:	4a0c      	ldr	r2, [pc, #48]	@ (80105e4 <statco2calibrate+0x68>)
 80105b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105b8:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80105bc:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 80105be:	f107 0310 	add.w	r3, r7, #16
 80105c2:	461a      	mov	r2, r3
 80105c4:	4908      	ldr	r1, [pc, #32]	@ (80105e8 <statco2calibrate+0x6c>)
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f7fe ffa8 	bl	800f51c <cli_printf>
	cli_printf(cli, "Calibration Value: %d",calib_val);
 80105cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105ce:	461a      	mov	r2, r3
 80105d0:	4906      	ldr	r1, [pc, #24]	@ (80105ec <statco2calibrate+0x70>)
 80105d2:	68f8      	ldr	r0, [r7, #12]
 80105d4:	f7fe ffa2 	bl	800f51c <cli_printf>



}
 80105d8:	bf00      	nop
 80105da:	3728      	adds	r7, #40	@ 0x28
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}
 80105e0:	08022bd4 	.word	0x08022bd4
 80105e4:	08022bdc 	.word	0x08022bdc
 80105e8:	08022be4 	.word	0x08022be4
 80105ec:	08022bfc 	.word	0x08022bfc

080105f0 <co2_auto_calibration>:


void co2_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b094      	sub	sp, #80	@ 0x50
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	60b9      	str	r1, [r7, #8]
 80105fa:	607a      	str	r2, [r7, #4]

	uint16_t calib;
	const char *newLine = "\r\n";
 80105fc:	4b28      	ldr	r3, [pc, #160]	@ (80106a0 <co2_auto_calibration+0xb0>)
 80105fe:	64bb      	str	r3, [r7, #72]	@ 0x48
		cli_printf(cli, "Enter \"y\" to enable auto calibration!");
 8010600:	4928      	ldr	r1, [pc, #160]	@ (80106a4 <co2_auto_calibration+0xb4>)
 8010602:	68f8      	ldr	r0, [r7, #12]
 8010604:	f7fe ff8a 	bl	800f51c <cli_printf>
		cli_printf(cli, "Enter \"n\" to disable auto calibration!");
 8010608:	4927      	ldr	r1, [pc, #156]	@ (80106a8 <co2_auto_calibration+0xb8>)
 801060a:	68f8      	ldr	r0, [r7, #12]
 801060c:	f7fe ff86 	bl	800f51c <cli_printf>



		cli_other = 1;
 8010610:	4b26      	ldr	r3, [pc, #152]	@ (80106ac <co2_auto_calibration+0xbc>)
 8010612:	2201      	movs	r2, #1
 8010614:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010616:	4b26      	ldr	r3, [pc, #152]	@ (80106b0 <co2_auto_calibration+0xc0>)
 8010618:	2200      	movs	r2, #0
 801061a:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli, buffer, sizeof(buffer));
 801061c:	f107 0314 	add.w	r3, r7, #20
 8010620:	2232      	movs	r2, #50	@ 0x32
 8010622:	4619      	mov	r1, r3
 8010624:	68f8      	ldr	r0, [r7, #12]
 8010626:	f7fe ffbb 	bl	800f5a0 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801062a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801062c:	f7ef fe38 	bl	80002a0 <strlen>
 8010630:	4603      	mov	r3, r0
 8010632:	b29a      	uxth	r2, r3
 8010634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010638:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801063a:	481e      	ldr	r0, [pc, #120]	@ (80106b4 <co2_auto_calibration+0xc4>)
 801063c:	f7fb fe0c 	bl	800c258 <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010640:	f107 0314 	add.w	r3, r7, #20
 8010644:	2179      	movs	r1, #121	@ 0x79
 8010646:	4618      	mov	r0, r3
 8010648:	f00e fbbe 	bl	801edc8 <strchr>
 801064c:	4603      	mov	r3, r0
 801064e:	2b00      	cmp	r3, #0
 8010650:	d007      	beq.n	8010662 <co2_auto_calibration+0x72>
			calib = 1;
 8010652:	2301      	movs	r3, #1
 8010654:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

			cli_printf(cli, "Auto calibration enabled");
 8010658:	4917      	ldr	r1, [pc, #92]	@ (80106b8 <co2_auto_calibration+0xc8>)
 801065a:	68f8      	ldr	r0, [r7, #12]
 801065c:	f7fe ff5e 	bl	800f51c <cli_printf>
 8010660:	e00f      	b.n	8010682 <co2_auto_calibration+0x92>
		} else if (strstr(buffer, "n")) {
 8010662:	f107 0314 	add.w	r3, r7, #20
 8010666:	216e      	movs	r1, #110	@ 0x6e
 8010668:	4618      	mov	r0, r3
 801066a:	f00e fbad 	bl	801edc8 <strchr>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d006      	beq.n	8010682 <co2_auto_calibration+0x92>
			calib = 0;
 8010674:	2300      	movs	r3, #0
 8010676:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			cli_printf(cli, "Auto calibration disabled");
 801067a:	4910      	ldr	r1, [pc, #64]	@ (80106bc <co2_auto_calibration+0xcc>)
 801067c:	68f8      	ldr	r0, [r7, #12]
 801067e:	f7fe ff4d 	bl	800f51c <cli_printf>
		}

		flag_cli = 0;
 8010682:	4b0b      	ldr	r3, [pc, #44]	@ (80106b0 <co2_auto_calibration+0xc0>)
 8010684:	2200      	movs	r2, #0
 8010686:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010688:	4b08      	ldr	r3, [pc, #32]	@ (80106ac <co2_auto_calibration+0xbc>)
 801068a:	2200      	movs	r2, #0
 801068c:	701a      	strb	r2, [r3, #0]



	scd30_activate_auto_calibration(calib);
 801068e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010692:	4618      	mov	r0, r3
 8010694:	f003 ffcc 	bl	8014630 <scd30_activate_auto_calibration>
}
 8010698:	bf00      	nop
 801069a:	3750      	adds	r7, #80	@ 0x50
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	08022474 	.word	0x08022474
 80106a4:	08022c14 	.word	0x08022c14
 80106a8:	08022c3c 	.word	0x08022c3c
 80106ac:	20001b3a 	.word	0x20001b3a
 80106b0:	20001b3b 	.word	0x20001b3b
 80106b4:	20001a74 	.word	0x20001a74
 80106b8:	08022c64 	.word	0x08022c64
 80106bc:	08022c80 	.word	0x08022c80

080106c0 <get_auto_calibration>:


void get_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b08a      	sub	sp, #40	@ 0x28
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_auto_calibration_status(&calib_val);
 80106cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80106d0:	4618      	mov	r0, r3
 80106d2:	f003 ffeb 	bl	80146ac <scd30_get_auto_calibration_status>
 80106d6:	4603      	mov	r3, r0
 80106d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 80106da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d107      	bne.n	80106f2 <get_auto_calibration+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 80106e2:	f107 0310 	add.w	r3, r7, #16
 80106e6:	4a0f      	ldr	r2, [pc, #60]	@ (8010724 <get_auto_calibration+0x64>)
 80106e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106ec:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80106f0:	e007      	b.n	8010702 <get_auto_calibration+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 80106f2:	f107 0310 	add.w	r3, r7, #16
 80106f6:	4a0c      	ldr	r2, [pc, #48]	@ (8010728 <get_auto_calibration+0x68>)
 80106f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106fc:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8010700:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 8010702:	f107 0310 	add.w	r3, r7, #16
 8010706:	461a      	mov	r2, r3
 8010708:	4908      	ldr	r1, [pc, #32]	@ (801072c <get_auto_calibration+0x6c>)
 801070a:	68f8      	ldr	r0, [r7, #12]
 801070c:	f7fe ff06 	bl	800f51c <cli_printf>
	cli_printf(cli, "Auto calibration active status: %d",calib_val);
 8010710:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010712:	461a      	mov	r2, r3
 8010714:	4906      	ldr	r1, [pc, #24]	@ (8010730 <get_auto_calibration+0x70>)
 8010716:	68f8      	ldr	r0, [r7, #12]
 8010718:	f7fe ff00 	bl	800f51c <cli_printf>
}
 801071c:	bf00      	nop
 801071e:	3728      	adds	r7, #40	@ 0x28
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	08022bd4 	.word	0x08022bd4
 8010728:	08022bdc 	.word	0x08022bdc
 801072c:	08022be4 	.word	0x08022be4
 8010730:	08022c9c 	.word	0x08022c9c

08010734 <set_co2_temp_offset>:

void set_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b096      	sub	sp, #88	@ 0x58
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010740:	4b53      	ldr	r3, [pc, #332]	@ (8010890 <set_co2_temp_offset+0x15c>)
 8010742:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010744:	2300      	movs	r3, #0
 8010746:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010748:	4b52      	ldr	r3, [pc, #328]	@ (8010894 <set_co2_temp_offset+0x160>)
 801074a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 801074c:	2300      	movs	r3, #0
 801074e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 8010752:	4b51      	ldr	r3, [pc, #324]	@ (8010898 <set_co2_temp_offset+0x164>)
 8010754:	2201      	movs	r2, #1
 8010756:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010758:	4b50      	ldr	r3, [pc, #320]	@ (801089c <set_co2_temp_offset+0x168>)
 801075a:	2200      	movs	r2, #0
 801075c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 801075e:	f107 0310 	add.w	r3, r7, #16
 8010762:	2232      	movs	r2, #50	@ 0x32
 8010764:	2100      	movs	r1, #0
 8010766:	4618      	mov	r0, r3
 8010768:	f00e fb26 	bl	801edb8 <memset>
		cli_printf(cli,
 801076c:	494c      	ldr	r1, [pc, #304]	@ (80108a0 <set_co2_temp_offset+0x16c>)
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f7fe fed4 	bl	800f51c <cli_printf>
				"To calibrate Co2 sensor Temperature offset, please provide value.");
		cli_printf(cli,
 8010774:	494b      	ldr	r1, [pc, #300]	@ (80108a4 <set_co2_temp_offset+0x170>)
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	f7fe fed0 	bl	800f51c <cli_printf>
				"If temperature offset is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 801077c:	f107 0310 	add.w	r3, r7, #16
 8010780:	2232      	movs	r2, #50	@ 0x32
 8010782:	4619      	mov	r1, r3
 8010784:	68f8      	ldr	r0, [r7, #12]
 8010786:	f7fe ff0b 	bl	800f5a0 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801078a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801078c:	f7ef fd88 	bl	80002a0 <strlen>
 8010790:	4603      	mov	r3, r0
 8010792:	b29a      	uxth	r2, r3
 8010794:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010798:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801079a:	4843      	ldr	r0, [pc, #268]	@ (80108a8 <set_co2_temp_offset+0x174>)
 801079c:	f7fb fd5c 	bl	800c258 <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 80107a0:	7c3b      	ldrb	r3, [r7, #16]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d01e      	beq.n	80107e4 <set_co2_temp_offset+0xb0>
			_RunTime_Packet.temp_offset = 1;
 80107a6:	4b41      	ldr	r3, [pc, #260]	@ (80108ac <set_co2_temp_offset+0x178>)
 80107a8:	2201      	movs	r2, #1
 80107aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 80107ae:	f107 0310 	add.w	r3, r7, #16
 80107b2:	4618      	mov	r0, r3
 80107b4:	f00d f87e 	bl	801d8b4 <atoi>
 80107b8:	4603      	mov	r3, r0
 80107ba:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 80107bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d803      	bhi.n	80107ce <set_co2_temp_offset+0x9a>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 80107c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107c8:	b29a      	uxth	r2, r3
 80107ca:	4b38      	ldr	r3, [pc, #224]	@ (80108ac <set_co2_temp_offset+0x178>)
 80107cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor temperature offset is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 80107ce:	4b37      	ldr	r3, [pc, #220]	@ (80108ac <set_co2_temp_offset+0x178>)
 80107d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 80107d2:	461a      	mov	r2, r3
 80107d4:	4936      	ldr	r1, [pc, #216]	@ (80108b0 <set_co2_temp_offset+0x17c>)
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f7fe fea0 	bl	800f51c <cli_printf>

			do_Calibration = 1;
 80107dc:	2301      	movs	r3, #1
 80107de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80107e2:	e006      	b.n	80107f2 <set_co2_temp_offset+0xbe>
		} else {
			cli_printf(cli, "Co2 sensor Temperature Offset aborted.");
 80107e4:	4933      	ldr	r1, [pc, #204]	@ (80108b4 <set_co2_temp_offset+0x180>)
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f7fe fe98 	bl	800f51c <cli_printf>
			do_Calibration = 0;
 80107ec:	2300      	movs	r3, #0
 80107ee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 80107f2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d13f      	bne.n	801087a <set_co2_temp_offset+0x146>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80107fa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80107fc:	f7ef fd50 	bl	80002a0 <strlen>
 8010800:	4603      	mov	r3, r0
 8010802:	b29a      	uxth	r2, r3
 8010804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010808:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801080a:	4827      	ldr	r0, [pc, #156]	@ (80108a8 <set_co2_temp_offset+0x174>)
 801080c:	f7fb fd24 	bl	800c258 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating temperature offset, please wait.");
 8010810:	4929      	ldr	r1, [pc, #164]	@ (80108b8 <set_co2_temp_offset+0x184>)
 8010812:	68f8      	ldr	r0, [r7, #12]
 8010814:	f7fe fe82 	bl	800f51c <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010818:	4b24      	ldr	r3, [pc, #144]	@ (80108ac <set_co2_temp_offset+0x178>)
 801081a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801081e:	2b00      	cmp	r3, #0
 8010820:	d119      	bne.n	8010856 <set_co2_temp_offset+0x122>


				scd30_set_temperature_offset(_RunTime_Packet._tempOffset_co2_concentration);
 8010822:	4b22      	ldr	r3, [pc, #136]	@ (80108ac <set_co2_temp_offset+0x178>)
 8010824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010826:	4618      	mov	r0, r3
 8010828:	f004 f81e 	bl	8014868 <scd30_set_temperature_offset>

			}
			while (counter < 8) {
 801082c:	e013      	b.n	8010856 <set_co2_temp_offset+0x122>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 801082e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010830:	f7ef fd36 	bl	80002a0 <strlen>
 8010834:	4603      	mov	r3, r0
 8010836:	b29a      	uxth	r2, r3
 8010838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801083c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801083e:	481a      	ldr	r0, [pc, #104]	@ (80108a8 <set_co2_temp_offset+0x174>)
 8010840:	f7fb fd0a 	bl	800c258 <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010844:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010848:	f7f3 fc72 	bl	8004130 <HAL_Delay>
				toggle_blue_led();
 801084c:	f7f0 fc36 	bl	80010bc <toggle_blue_led>
				counter++;
 8010850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010852:	3301      	adds	r3, #1
 8010854:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 8010856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010858:	2b07      	cmp	r3, #7
 801085a:	dde8      	ble.n	801082e <set_co2_temp_offset+0xfa>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801085c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801085e:	f7ef fd1f 	bl	80002a0 <strlen>
 8010862:	4603      	mov	r3, r0
 8010864:	b29a      	uxth	r2, r3
 8010866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801086a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801086c:	480e      	ldr	r0, [pc, #56]	@ (80108a8 <set_co2_temp_offset+0x174>)
 801086e:	f7fb fcf3 	bl	800c258 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 8010872:	4912      	ldr	r1, [pc, #72]	@ (80108bc <set_co2_temp_offset+0x188>)
 8010874:	68f8      	ldr	r0, [r7, #12]
 8010876:	f7fe fe51 	bl	800f51c <cli_printf>
		}

		flag_cli = 0;
 801087a:	4b08      	ldr	r3, [pc, #32]	@ (801089c <set_co2_temp_offset+0x168>)
 801087c:	2200      	movs	r2, #0
 801087e:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010880:	4b05      	ldr	r3, [pc, #20]	@ (8010898 <set_co2_temp_offset+0x164>)
 8010882:	2200      	movs	r2, #0
 8010884:	701a      	strb	r2, [r3, #0]
}
 8010886:	bf00      	nop
 8010888:	3758      	adds	r7, #88	@ 0x58
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	08022474 	.word	0x08022474
 8010894:	080229d0 	.word	0x080229d0
 8010898:	20001b3a 	.word	0x20001b3a
 801089c:	20001b3b 	.word	0x20001b3b
 80108a0:	08022cc0 	.word	0x08022cc0
 80108a4:	08022d04 	.word	0x08022d04
 80108a8:	20001a74 	.word	0x20001a74
 80108ac:	20001530 	.word	0x20001530
 80108b0:	08022d48 	.word	0x08022d48
 80108b4:	08022d8c 	.word	0x08022d8c
 80108b8:	08022db4 	.word	0x08022db4
 80108bc:	08022bb8 	.word	0x08022bb8

080108c0 <get_co2_temp_offset>:

void get_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b08a      	sub	sp, #40	@ 0x28
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_temperature_offset(&calib_val);
 80108cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80108d0:	4618      	mov	r0, r3
 80108d2:	f004 f807 	bl	80148e4 <scd30_get_temperature_offset>
 80108d6:	4603      	mov	r3, r0
 80108d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 80108da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d107      	bne.n	80108f2 <get_co2_temp_offset+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 80108e2:	f107 0310 	add.w	r3, r7, #16
 80108e6:	4a0f      	ldr	r2, [pc, #60]	@ (8010924 <get_co2_temp_offset+0x64>)
 80108e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108ec:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80108f0:	e007      	b.n	8010902 <get_co2_temp_offset+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 80108f2:	f107 0310 	add.w	r3, r7, #16
 80108f6:	4a0c      	ldr	r2, [pc, #48]	@ (8010928 <get_co2_temp_offset+0x68>)
 80108f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108fc:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010900:	bf00      	nop
		}
		}

		cli_printf(cli, "Temperature Offset Status: %s",status);
 8010902:	f107 0310 	add.w	r3, r7, #16
 8010906:	461a      	mov	r2, r3
 8010908:	4908      	ldr	r1, [pc, #32]	@ (801092c <get_co2_temp_offset+0x6c>)
 801090a:	68f8      	ldr	r0, [r7, #12]
 801090c:	f7fe fe06 	bl	800f51c <cli_printf>
		cli_printf(cli, "Temperature Offset Value: %d",calib_val);
 8010910:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010912:	461a      	mov	r2, r3
 8010914:	4906      	ldr	r1, [pc, #24]	@ (8010930 <get_co2_temp_offset+0x70>)
 8010916:	68f8      	ldr	r0, [r7, #12]
 8010918:	f7fe fe00 	bl	800f51c <cli_printf>
}
 801091c:	bf00      	nop
 801091e:	3728      	adds	r7, #40	@ 0x28
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	08022bd4 	.word	0x08022bd4
 8010928:	08022bdc 	.word	0x08022bdc
 801092c:	08022de8 	.word	0x08022de8
 8010930:	08022e08 	.word	0x08022e08

08010934 <set_co2_altitude_compensation>:

void set_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b096      	sub	sp, #88	@ 0x58
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010940:	4b53      	ldr	r3, [pc, #332]	@ (8010a90 <set_co2_altitude_compensation+0x15c>)
 8010942:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010944:	2300      	movs	r3, #0
 8010946:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010948:	4b52      	ldr	r3, [pc, #328]	@ (8010a94 <set_co2_altitude_compensation+0x160>)
 801094a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 801094c:	2300      	movs	r3, #0
 801094e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 8010952:	4b51      	ldr	r3, [pc, #324]	@ (8010a98 <set_co2_altitude_compensation+0x164>)
 8010954:	2201      	movs	r2, #1
 8010956:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010958:	4b50      	ldr	r3, [pc, #320]	@ (8010a9c <set_co2_altitude_compensation+0x168>)
 801095a:	2200      	movs	r2, #0
 801095c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 801095e:	f107 0310 	add.w	r3, r7, #16
 8010962:	2232      	movs	r2, #50	@ 0x32
 8010964:	2100      	movs	r1, #0
 8010966:	4618      	mov	r0, r3
 8010968:	f00e fa26 	bl	801edb8 <memset>
		cli_printf(cli,
 801096c:	494c      	ldr	r1, [pc, #304]	@ (8010aa0 <set_co2_altitude_compensation+0x16c>)
 801096e:	68f8      	ldr	r0, [r7, #12]
 8010970:	f7fe fdd4 	bl	800f51c <cli_printf>
				"To calibrate Co2 sensor Altitude compensation, please provide value.");
		cli_printf(cli,
 8010974:	494b      	ldr	r1, [pc, #300]	@ (8010aa4 <set_co2_altitude_compensation+0x170>)
 8010976:	68f8      	ldr	r0, [r7, #12]
 8010978:	f7fe fdd0 	bl	800f51c <cli_printf>
				"If Altitude compensation is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 801097c:	f107 0310 	add.w	r3, r7, #16
 8010980:	2232      	movs	r2, #50	@ 0x32
 8010982:	4619      	mov	r1, r3
 8010984:	68f8      	ldr	r0, [r7, #12]
 8010986:	f7fe fe0b 	bl	800f5a0 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801098a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801098c:	f7ef fc88 	bl	80002a0 <strlen>
 8010990:	4603      	mov	r3, r0
 8010992:	b29a      	uxth	r2, r3
 8010994:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010998:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801099a:	4843      	ldr	r0, [pc, #268]	@ (8010aa8 <set_co2_altitude_compensation+0x174>)
 801099c:	f7fb fc5c 	bl	800c258 <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 80109a0:	7c3b      	ldrb	r3, [r7, #16]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d01e      	beq.n	80109e4 <set_co2_altitude_compensation+0xb0>
			_RunTime_Packet.temp_offset = 1;
 80109a6:	4b41      	ldr	r3, [pc, #260]	@ (8010aac <set_co2_altitude_compensation+0x178>)
 80109a8:	2201      	movs	r2, #1
 80109aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 80109ae:	f107 0310 	add.w	r3, r7, #16
 80109b2:	4618      	mov	r0, r3
 80109b4:	f00c ff7e 	bl	801d8b4 <atoi>
 80109b8:	4603      	mov	r3, r0
 80109ba:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 80109bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d803      	bhi.n	80109ce <set_co2_altitude_compensation+0x9a>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 80109c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	4b38      	ldr	r3, [pc, #224]	@ (8010aac <set_co2_altitude_compensation+0x178>)
 80109cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor Altitude compensation is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 80109ce:	4b37      	ldr	r3, [pc, #220]	@ (8010aac <set_co2_altitude_compensation+0x178>)
 80109d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 80109d2:	461a      	mov	r2, r3
 80109d4:	4936      	ldr	r1, [pc, #216]	@ (8010ab0 <set_co2_altitude_compensation+0x17c>)
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f7fe fda0 	bl	800f51c <cli_printf>

			do_Calibration = 1;
 80109dc:	2301      	movs	r3, #1
 80109de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80109e2:	e006      	b.n	80109f2 <set_co2_altitude_compensation+0xbe>
		} else {
			cli_printf(cli, "Co2 sensor Altitude compensation aborted.");
 80109e4:	4933      	ldr	r1, [pc, #204]	@ (8010ab4 <set_co2_altitude_compensation+0x180>)
 80109e6:	68f8      	ldr	r0, [r7, #12]
 80109e8:	f7fe fd98 	bl	800f51c <cli_printf>
			do_Calibration = 0;
 80109ec:	2300      	movs	r3, #0
 80109ee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 80109f2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d13f      	bne.n	8010a7a <set_co2_altitude_compensation+0x146>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80109fa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80109fc:	f7ef fc50 	bl	80002a0 <strlen>
 8010a00:	4603      	mov	r3, r0
 8010a02:	b29a      	uxth	r2, r3
 8010a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a08:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010a0a:	4827      	ldr	r0, [pc, #156]	@ (8010aa8 <set_co2_altitude_compensation+0x174>)
 8010a0c:	f7fb fc24 	bl	800c258 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating Altitude compensation, please wait.");
 8010a10:	4929      	ldr	r1, [pc, #164]	@ (8010ab8 <set_co2_altitude_compensation+0x184>)
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f7fe fd82 	bl	800f51c <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010a18:	4b24      	ldr	r3, [pc, #144]	@ (8010aac <set_co2_altitude_compensation+0x178>)
 8010a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d119      	bne.n	8010a56 <set_co2_altitude_compensation+0x122>


				scd30_set_altitude_compensation(_RunTime_Packet._tempOffset_co2_concentration);
 8010a22:	4b22      	ldr	r3, [pc, #136]	@ (8010aac <set_co2_altitude_compensation+0x178>)
 8010a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a26:	4618      	mov	r0, r3
 8010a28:	f003 fffc 	bl	8014a24 <scd30_set_altitude_compensation>

			}
			while (counter < 8) {
 8010a2c:	e013      	b.n	8010a56 <set_co2_altitude_compensation+0x122>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010a2e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010a30:	f7ef fc36 	bl	80002a0 <strlen>
 8010a34:	4603      	mov	r3, r0
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a3c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010a3e:	481a      	ldr	r0, [pc, #104]	@ (8010aa8 <set_co2_altitude_compensation+0x174>)
 8010a40:	f7fb fc0a 	bl	800c258 <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010a44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010a48:	f7f3 fb72 	bl	8004130 <HAL_Delay>
				toggle_blue_led();
 8010a4c:	f7f0 fb36 	bl	80010bc <toggle_blue_led>
				counter++;
 8010a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a52:	3301      	adds	r3, #1
 8010a54:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 8010a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a58:	2b07      	cmp	r3, #7
 8010a5a:	dde8      	ble.n	8010a2e <set_co2_altitude_compensation+0xfa>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010a5c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010a5e:	f7ef fc1f 	bl	80002a0 <strlen>
 8010a62:	4603      	mov	r3, r0
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a6a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010a6c:	480e      	ldr	r0, [pc, #56]	@ (8010aa8 <set_co2_altitude_compensation+0x174>)
 8010a6e:	f7fb fbf3 	bl	800c258 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 8010a72:	4912      	ldr	r1, [pc, #72]	@ (8010abc <set_co2_altitude_compensation+0x188>)
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f7fe fd51 	bl	800f51c <cli_printf>
		}

		flag_cli = 0;
 8010a7a:	4b08      	ldr	r3, [pc, #32]	@ (8010a9c <set_co2_altitude_compensation+0x168>)
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010a80:	4b05      	ldr	r3, [pc, #20]	@ (8010a98 <set_co2_altitude_compensation+0x164>)
 8010a82:	2200      	movs	r2, #0
 8010a84:	701a      	strb	r2, [r3, #0]
}
 8010a86:	bf00      	nop
 8010a88:	3758      	adds	r7, #88	@ 0x58
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	08022474 	.word	0x08022474
 8010a94:	080229d0 	.word	0x080229d0
 8010a98:	20001b3a 	.word	0x20001b3a
 8010a9c:	20001b3b 	.word	0x20001b3b
 8010aa0:	08022e28 	.word	0x08022e28
 8010aa4:	08022e70 	.word	0x08022e70
 8010aa8:	20001a74 	.word	0x20001a74
 8010aac:	20001530 	.word	0x20001530
 8010ab0:	08022eb8 	.word	0x08022eb8
 8010ab4:	08022efc 	.word	0x08022efc
 8010ab8:	08022f28 	.word	0x08022f28
 8010abc:	08022bb8 	.word	0x08022bb8

08010ac0 <get_co2_altitude_compensation>:

void get_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b08a      	sub	sp, #40	@ 0x28
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	60f8      	str	r0, [r7, #12]
 8010ac8:	60b9      	str	r1, [r7, #8]
 8010aca:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_altitude_compensation(&calib_val);
 8010acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f003 ff57 	bl	8014984 <scd30_get_altitude_compensation>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 8010ada:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d107      	bne.n	8010af2 <get_co2_altitude_compensation+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 8010ae2:	f107 0310 	add.w	r3, r7, #16
 8010ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8010b24 <get_co2_altitude_compensation+0x64>)
 8010ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010aec:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010af0:	e007      	b.n	8010b02 <get_co2_altitude_compensation+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 8010af2:	f107 0310 	add.w	r3, r7, #16
 8010af6:	4a0c      	ldr	r2, [pc, #48]	@ (8010b28 <get_co2_altitude_compensation+0x68>)
 8010af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010afc:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010b00:	bf00      	nop
		}
		}

		cli_printf(cli, "Altitude_compensation Status: %s",status);
 8010b02:	f107 0310 	add.w	r3, r7, #16
 8010b06:	461a      	mov	r2, r3
 8010b08:	4908      	ldr	r1, [pc, #32]	@ (8010b2c <get_co2_altitude_compensation+0x6c>)
 8010b0a:	68f8      	ldr	r0, [r7, #12]
 8010b0c:	f7fe fd06 	bl	800f51c <cli_printf>
		cli_printf(cli, "Altitude_compensation Value: %d",calib_val);
 8010b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b12:	461a      	mov	r2, r3
 8010b14:	4906      	ldr	r1, [pc, #24]	@ (8010b30 <get_co2_altitude_compensation+0x70>)
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f7fe fd00 	bl	800f51c <cli_printf>
}
 8010b1c:	bf00      	nop
 8010b1e:	3728      	adds	r7, #40	@ 0x28
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	08022bd4 	.word	0x08022bd4
 8010b28:	08022bdc 	.word	0x08022bdc
 8010b2c:	08022f60 	.word	0x08022f60
 8010b30:	08022f84 	.word	0x08022f84

08010b34 <run_co2_calibration_routine>:


void run_co2_calibration_routine(EmbeddedCli *cli, char *args, void *context)
{
 8010b34:	b590      	push	{r4, r7, lr}
 8010b36:	b0a7      	sub	sp, #156	@ 0x9c
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	607a      	str	r2, [r7, #4]
	uint32_t maxTime = 120000;
 8010b40:	4bb1      	ldr	r3, [pc, #708]	@ (8010e08 <run_co2_calibration_routine+0x2d4>)
 8010b42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	uint32_t prev_maxTime =  HAL_GetTick();
 8010b46:	f7f3 fae7 	bl	8004118 <HAL_GetTick>
 8010b4a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	uint32_t cur_tick = 0;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const char *newLine = "\r\n";
 8010b54:	4bad      	ldr	r3, [pc, #692]	@ (8010e0c <run_co2_calibration_routine+0x2d8>)
 8010b56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	uint32_t val;
	int counter = 0;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const char *dot = "........";
 8010b60:	4bab      	ldr	r3, [pc, #684]	@ (8010e10 <run_co2_calibration_routine+0x2dc>)
 8010b62:	67fb      	str	r3, [r7, #124]	@ 0x7c
	char progressbar_buf[50] = "ProgressBar: ";
 8010b64:	4aab      	ldr	r2, [pc, #684]	@ (8010e14 <run_co2_calibration_routine+0x2e0>)
 8010b66:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010b6a:	4614      	mov	r4, r2
 8010b6c:	6820      	ldr	r0, [r4, #0]
 8010b6e:	6861      	ldr	r1, [r4, #4]
 8010b70:	68a2      	ldr	r2, [r4, #8]
 8010b72:	c307      	stmia	r3!, {r0, r1, r2}
 8010b74:	89a2      	ldrh	r2, [r4, #12]
 8010b76:	801a      	strh	r2, [r3, #0]
 8010b78:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 8010b7c:	2224      	movs	r2, #36	@ 0x24
 8010b7e:	2100      	movs	r1, #0
 8010b80:	4618      	mov	r0, r3
 8010b82:	f00e f919 	bl	801edb8 <memset>
	uint8_t calib = 0;
 8010b86:	2300      	movs	r3, #0
 8010b88:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	uint8_t do_Calibration = 0;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	cli_other = 1;
 8010b92:	4ba1      	ldr	r3, [pc, #644]	@ (8010e18 <run_co2_calibration_routine+0x2e4>)
 8010b94:	2201      	movs	r2, #1
 8010b96:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010b98:	4ba0      	ldr	r3, [pc, #640]	@ (8010e1c <run_co2_calibration_routine+0x2e8>)
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 8010b9e:	f107 0310 	add.w	r3, r7, #16
 8010ba2:	2232      	movs	r2, #50	@ 0x32
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f00e f906 	bl	801edb8 <memset>

		     cli_printf(cli,"");
 8010bac:	499c      	ldr	r1, [pc, #624]	@ (8010e20 <run_co2_calibration_routine+0x2ec>)
 8010bae:	68f8      	ldr	r0, [r7, #12]
 8010bb0:	f7fe fcb4 	bl	800f51c <cli_printf>
				cli_printf(cli,"It takes about 2-3min to run complete routine. ");
 8010bb4:	499b      	ldr	r1, [pc, #620]	@ (8010e24 <run_co2_calibration_routine+0x2f0>)
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f7fe fcb0 	bl	800f51c <cli_printf>
				cli_printf(cli,"once this routine is activated it cant be canceled. ");
 8010bbc:	499a      	ldr	r1, [pc, #616]	@ (8010e28 <run_co2_calibration_routine+0x2f4>)
 8010bbe:	68f8      	ldr	r0, [r7, #12]
 8010bc0:	f7fe fcac 	bl	800f51c <cli_printf>
				cli_printf(cli,"Do you want to run calibration routine y/n?. ");
 8010bc4:	4999      	ldr	r1, [pc, #612]	@ (8010e2c <run_co2_calibration_routine+0x2f8>)
 8010bc6:	68f8      	ldr	r0, [r7, #12]
 8010bc8:	f7fe fca8 	bl	800f51c <cli_printf>

		receiveString(cli, buffer, sizeof(buffer));
 8010bcc:	f107 0310 	add.w	r3, r7, #16
 8010bd0:	2232      	movs	r2, #50	@ 0x32
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	f7fe fce3 	bl	800f5a0 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010bda:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010bde:	f7ef fb5f 	bl	80002a0 <strlen>
 8010be2:	4603      	mov	r3, r0
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010bea:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010bee:	4890      	ldr	r0, [pc, #576]	@ (8010e30 <run_co2_calibration_routine+0x2fc>)
 8010bf0:	f7fb fb32 	bl	800c258 <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010bf4:	f107 0310 	add.w	r3, r7, #16
 8010bf8:	2179      	movs	r1, #121	@ 0x79
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f00e f8e4 	bl	801edc8 <strchr>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d007      	beq.n	8010c16 <run_co2_calibration_routine+0xe2>
			calib = 1;
 8010c06:	2301      	movs	r3, #1
 8010c08:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

			cli_printf(cli, "Calibration routine running");
 8010c0c:	4989      	ldr	r1, [pc, #548]	@ (8010e34 <run_co2_calibration_routine+0x300>)
 8010c0e:	68f8      	ldr	r0, [r7, #12]
 8010c10:	f7fe fc84 	bl	800f51c <cli_printf>
 8010c14:	e00f      	b.n	8010c36 <run_co2_calibration_routine+0x102>
		} else if (strstr(buffer, "n")) {
 8010c16:	f107 0310 	add.w	r3, r7, #16
 8010c1a:	216e      	movs	r1, #110	@ 0x6e
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f00e f8d3 	bl	801edc8 <strchr>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d006      	beq.n	8010c36 <run_co2_calibration_routine+0x102>
			calib = 0;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			cli_printf(cli, "Calibration routine aborted");
 8010c2e:	4982      	ldr	r1, [pc, #520]	@ (8010e38 <run_co2_calibration_routine+0x304>)
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	f7fe fc73 	bl	800f51c <cli_printf>
		}


		if(calib)
 8010c36:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	f000 8141 	beq.w	8010ec2 <run_co2_calibration_routine+0x38e>
		{
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010c40:	4b7e      	ldr	r3, [pc, #504]	@ (8010e3c <run_co2_calibration_routine+0x308>)
 8010c42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d102      	bne.n	8010c50 <run_co2_calibration_routine+0x11c>
				scd30_start_periodic_measurement(0);
 8010c4a:	2000      	movs	r0, #0
 8010c4c:	f003 fb90 	bl	8014370 <scd30_start_periodic_measurement>
			}
			cli_printf(cli,"");
 8010c50:	4973      	ldr	r1, [pc, #460]	@ (8010e20 <run_co2_calibration_routine+0x2ec>)
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f7fe fc62 	bl	800f51c <cli_printf>
			cli_printf(cli,"GuideLines");
 8010c58:	4979      	ldr	r1, [pc, #484]	@ (8010e40 <run_co2_calibration_routine+0x30c>)
 8010c5a:	68f8      	ldr	r0, [r7, #12]
 8010c5c:	f7fe fc5e 	bl	800f51c <cli_printf>
			cli_printf(cli,"");
 8010c60:	496f      	ldr	r1, [pc, #444]	@ (8010e20 <run_co2_calibration_routine+0x2ec>)
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f7fe fc5a 	bl	800f51c <cli_printf>
			cli_printf(cli,"1)Donot remove USB, otherwise calibrations will be canceled. ");
 8010c68:	4976      	ldr	r1, [pc, #472]	@ (8010e44 <run_co2_calibration_routine+0x310>)
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f7fe fc56 	bl	800f51c <cli_printf>
			cli_printf(cli,"2)Expose the sensor to a controlled environment with a known value of Co2. ");
 8010c70:	4975      	ldr	r1, [pc, #468]	@ (8010e48 <run_co2_calibration_routine+0x314>)
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	f7fe fc52 	bl	800f51c <cli_printf>
			cli_printf(cli,"3)After 2min, apply known value of Co2. ");
 8010c78:	4974      	ldr	r1, [pc, #464]	@ (8010e4c <run_co2_calibration_routine+0x318>)
 8010c7a:	68f8      	ldr	r0, [r7, #12]
 8010c7c:	f7fe fc4e 	bl	800f51c <cli_printf>
			cli_printf(cli,"4)Calibration routine finished. ");
 8010c80:	4973      	ldr	r1, [pc, #460]	@ (8010e50 <run_co2_calibration_routine+0x31c>)
 8010c82:	68f8      	ldr	r0, [r7, #12]
 8010c84:	f7fe fc4a 	bl	800f51c <cli_printf>
			memset(buffer, '\0', sizeof(buffer));
 8010c88:	f107 0310 	add.w	r3, r7, #16
 8010c8c:	2232      	movs	r2, #50	@ 0x32
 8010c8e:	2100      	movs	r1, #0
 8010c90:	4618      	mov	r0, r3
 8010c92:	f00e f891 	bl	801edb8 <memset>

			 prev_maxTime =  HAL_GetTick();
 8010c96:	f7f3 fa3f 	bl	8004118 <HAL_GetTick>
 8010c9a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
				cur_tick = HAL_GetTick();
 8010c9e:	f7f3 fa3b 	bl	8004118 <HAL_GetTick>
 8010ca2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				cli_printf(cli,"");
 8010ca6:	495e      	ldr	r1, [pc, #376]	@ (8010e20 <run_co2_calibration_routine+0x2ec>)
 8010ca8:	68f8      	ldr	r0, [r7, #12]
 8010caa:	f7fe fc37 	bl	800f51c <cli_printf>
				cli_printf(cli,"");
 8010cae:	495c      	ldr	r1, [pc, #368]	@ (8010e20 <run_co2_calibration_routine+0x2ec>)
 8010cb0:	68f8      	ldr	r0, [r7, #12]
 8010cb2:	f7fe fc33 	bl	800f51c <cli_printf>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) progressbar_buf, strlen(progressbar_buf),
 8010cb6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7ef faf0 	bl	80002a0 <strlen>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	b29a      	uxth	r2, r3
 8010cc4:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8010cc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010ccc:	4858      	ldr	r0, [pc, #352]	@ (8010e30 <run_co2_calibration_routine+0x2fc>)
 8010cce:	f7fb fac3 	bl	800c258 <HAL_UART_Transmit>
									1000);
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010cd2:	e01e      	b.n	8010d12 <run_co2_calibration_routine+0x1de>

					if ((HAL_GetTick() - cur_tick > 5000)) {
 8010cd4:	f7f3 fa20 	bl	8004118 <HAL_GetTick>
 8010cd8:	4602      	mov	r2, r0
 8010cda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010cde:	1ad3      	subs	r3, r2, r3
 8010ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d90a      	bls.n	8010cfe <run_co2_calibration_routine+0x1ca>


							HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*)"##", 2,
 8010ce8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010cec:	2202      	movs	r2, #2
 8010cee:	4959      	ldr	r1, [pc, #356]	@ (8010e54 <run_co2_calibration_routine+0x320>)
 8010cf0:	484f      	ldr	r0, [pc, #316]	@ (8010e30 <run_co2_calibration_routine+0x2fc>)
 8010cf2:	f7fb fab1 	bl	800c258 <HAL_UART_Transmit>
									1000);
							cur_tick = HAL_GetTick();
 8010cf6:	f7f3 fa0f 	bl	8004118 <HAL_GetTick>
 8010cfa:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
						}

			        if ((HAL_GetTick() - prev_maxTime > maxTime)) {
 8010cfe:	f7f3 fa0b 	bl	8004118 <HAL_GetTick>
 8010d02:	4602      	mov	r2, r0
 8010d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010d08:	1ad3      	subs	r3, r2, r3
 8010d0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d308      	bcc.n	8010d24 <run_co2_calibration_routine+0x1f0>
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010d12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010d16:	4850      	ldr	r0, [pc, #320]	@ (8010e58 <run_co2_calibration_routine+0x324>)
 8010d18:	f7f5 f9ca 	bl	80060b0 <HAL_GPIO_ReadPin>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d1d8      	bne.n	8010cd4 <run_co2_calibration_routine+0x1a0>
 8010d22:	e000      	b.n	8010d26 <run_co2_calibration_routine+0x1f2>
					//we break the loop if time goes above 5min
					break;
 8010d24:	bf00      	nop
				}

			}

			 cli_printf(cli,"");
 8010d26:	493e      	ldr	r1, [pc, #248]	@ (8010e20 <run_co2_calibration_routine+0x2ec>)
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f7fe fbf7 	bl	800f51c <cli_printf>
			 cli_printf(cli,"");
 8010d2e:	493c      	ldr	r1, [pc, #240]	@ (8010e20 <run_co2_calibration_routine+0x2ec>)
 8010d30:	68f8      	ldr	r0, [r7, #12]
 8010d32:	f7fe fbf3 	bl	800f51c <cli_printf>
			 cli_printf(cli,"");
 8010d36:	493a      	ldr	r1, [pc, #232]	@ (8010e20 <run_co2_calibration_routine+0x2ec>)
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	f7fe fbef 	bl	800f51c <cli_printf>
			 cli_printf(cli,"Enter Known Co2 reference value!");
 8010d3e:	4947      	ldr	r1, [pc, #284]	@ (8010e5c <run_co2_calibration_routine+0x328>)
 8010d40:	68f8      	ldr	r0, [r7, #12]
 8010d42:	f7fe fbeb 	bl	800f51c <cli_printf>

				receiveString(cli, buffer, sizeof(buffer));
 8010d46:	f107 0310 	add.w	r3, r7, #16
 8010d4a:	2232      	movs	r2, #50	@ 0x32
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f7fe fc26 	bl	800f5a0 <receiveString>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010d54:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010d58:	f7ef faa2 	bl	80002a0 <strlen>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d64:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010d68:	4831      	ldr	r0, [pc, #196]	@ (8010e30 <run_co2_calibration_routine+0x2fc>)
 8010d6a:	f7fb fa75 	bl	800c258 <HAL_UART_Transmit>
						1000);

				if (buffer[0] != '\0') {
 8010d6e:	7c3b      	ldrb	r3, [r7, #16]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d01e      	beq.n	8010db2 <run_co2_calibration_routine+0x27e>
					_RunTime_Packet.CO2_calibration = 1;
 8010d74:	4b31      	ldr	r3, [pc, #196]	@ (8010e3c <run_co2_calibration_routine+0x308>)
 8010d76:	2201      	movs	r2, #1
 8010d78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

					val = atoi(buffer);
 8010d7c:	f107 0310 	add.w	r3, r7, #16
 8010d80:	4618      	mov	r0, r3
 8010d82:	f00c fd97 	bl	801d8b4 <atoi>
 8010d86:	4603      	mov	r3, r0
 8010d88:	67bb      	str	r3, [r7, #120]	@ 0x78

					if (val < 65535) {
 8010d8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d8c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010d90:	4293      	cmp	r3, r2
 8010d92:	d803      	bhi.n	8010d9c <run_co2_calibration_routine+0x268>
						_RunTime_Packet._target_co2_concentration = val;
 8010d94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d96:	b29a      	uxth	r2, r3
 8010d98:	4b28      	ldr	r3, [pc, #160]	@ (8010e3c <run_co2_calibration_routine+0x308>)
 8010d9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
					}

					cli_printf(cli,
							"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
							_RunTime_Packet._target_co2_concentration);
 8010d9c:	4b27      	ldr	r3, [pc, #156]	@ (8010e3c <run_co2_calibration_routine+0x308>)
 8010d9e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
					cli_printf(cli,
 8010da0:	461a      	mov	r2, r3
 8010da2:	492f      	ldr	r1, [pc, #188]	@ (8010e60 <run_co2_calibration_routine+0x32c>)
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	f7fe fbb9 	bl	800f51c <cli_printf>
					do_Calibration = 1;
 8010daa:	2301      	movs	r3, #1
 8010dac:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8010db0:	e00a      	b.n	8010dc8 <run_co2_calibration_routine+0x294>
				} else {
					cli_printf(cli, "Co2 sensor Calibration aborted. No value provided");
 8010db2:	492c      	ldr	r1, [pc, #176]	@ (8010e64 <run_co2_calibration_routine+0x330>)
 8010db4:	68f8      	ldr	r0, [r7, #12]
 8010db6:	f7fe fbb1 	bl	800f51c <cli_printf>
					_RunTime_Packet.CO2_calibration = 0;
 8010dba:	4b20      	ldr	r3, [pc, #128]	@ (8010e3c <run_co2_calibration_routine+0x308>)
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
					do_Calibration = 0;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
				}

				if (do_Calibration == 1) {
 8010dc8:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d178      	bne.n	8010ec2 <run_co2_calibration_routine+0x38e>
					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010dd0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010dd4:	f7ef fa64 	bl	80002a0 <strlen>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	b29a      	uxth	r2, r3
 8010ddc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010de0:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010de4:	4812      	ldr	r0, [pc, #72]	@ (8010e30 <run_co2_calibration_routine+0x2fc>)
 8010de6:	f7fb fa37 	bl	800c258 <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Co2 is calibrating, please wait.");
 8010dea:	491f      	ldr	r1, [pc, #124]	@ (8010e68 <run_co2_calibration_routine+0x334>)
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f7fe fb95 	bl	800f51c <cli_printf>
					if (!_RunTime_Packet.scd4x_i2c_error) {
 8010df2:	4b12      	ldr	r3, [pc, #72]	@ (8010e3c <run_co2_calibration_routine+0x308>)
 8010df4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d14d      	bne.n	8010e98 <run_co2_calibration_routine+0x364>
			#ifdef use_scd40x
						scd4x_perform_forced_recalibration(
								_RunTime_Packet._target_co2_concentration,
								&_RunTime_Packet._frc_correction);
			#elif use_scd30
					scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 8010dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8010e3c <run_co2_calibration_routine+0x308>)
 8010dfe:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8010e00:	4618      	mov	r0, r3
 8010e02:	f003 fca3 	bl	801474c <scd30_force_recalibration>
			#endif
					}
					while (counter < 8) {
 8010e06:	e047      	b.n	8010e98 <run_co2_calibration_routine+0x364>
 8010e08:	0001d4c0 	.word	0x0001d4c0
 8010e0c:	08022474 	.word	0x08022474
 8010e10:	080229d0 	.word	0x080229d0
 8010e14:	080231bc 	.word	0x080231bc
 8010e18:	20001b3a 	.word	0x20001b3a
 8010e1c:	20001b3b 	.word	0x20001b3b
 8010e20:	08022fa4 	.word	0x08022fa4
 8010e24:	08022fa8 	.word	0x08022fa8
 8010e28:	08022fd8 	.word	0x08022fd8
 8010e2c:	08023010 	.word	0x08023010
 8010e30:	20001a74 	.word	0x20001a74
 8010e34:	08023040 	.word	0x08023040
 8010e38:	0802305c 	.word	0x0802305c
 8010e3c:	20001530 	.word	0x20001530
 8010e40:	08023078 	.word	0x08023078
 8010e44:	08023084 	.word	0x08023084
 8010e48:	080230c4 	.word	0x080230c4
 8010e4c:	08023110 	.word	0x08023110
 8010e50:	0802313c 	.word	0x0802313c
 8010e54:	08023160 	.word	0x08023160
 8010e58:	40020000 	.word	0x40020000
 8010e5c:	08023164 	.word	0x08023164
 8010e60:	08022b24 	.word	0x08022b24
 8010e64:	08023188 	.word	0x08023188
 8010e68:	08022b94 	.word	0x08022b94
						HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010e6c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8010e6e:	f7ef fa17 	bl	80002a0 <strlen>
 8010e72:	4603      	mov	r3, r0
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010e7c:	4816      	ldr	r0, [pc, #88]	@ (8010ed8 <run_co2_calibration_routine+0x3a4>)
 8010e7e:	f7fb f9eb 	bl	800c258 <HAL_UART_Transmit>
								1000);
						HAL_Delay(1000);
 8010e82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010e86:	f7f3 f953 	bl	8004130 <HAL_Delay>
						toggle_blue_led();
 8010e8a:	f7f0 f917 	bl	80010bc <toggle_blue_led>
						counter++;
 8010e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010e92:	3301      	adds	r3, #1
 8010e94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
					while (counter < 8) {
 8010e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010e9c:	2b07      	cmp	r3, #7
 8010e9e:	dde5      	ble.n	8010e6c <run_co2_calibration_routine+0x338>
					}

					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010ea0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010ea4:	f7ef f9fc 	bl	80002a0 <strlen>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010eb0:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010eb4:	4808      	ldr	r0, [pc, #32]	@ (8010ed8 <run_co2_calibration_routine+0x3a4>)
 8010eb6:	f7fb f9cf 	bl	800c258 <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Sensor calibration done.");
 8010eba:	4908      	ldr	r1, [pc, #32]	@ (8010edc <run_co2_calibration_routine+0x3a8>)
 8010ebc:	68f8      	ldr	r0, [r7, #12]
 8010ebe:	f7fe fb2d 	bl	800f51c <cli_printf>
		}




		flag_cli = 0;
 8010ec2:	4b07      	ldr	r3, [pc, #28]	@ (8010ee0 <run_co2_calibration_routine+0x3ac>)
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	701a      	strb	r2, [r3, #0]
			cli_other = 0;
 8010ec8:	4b06      	ldr	r3, [pc, #24]	@ (8010ee4 <run_co2_calibration_routine+0x3b0>)
 8010eca:	2200      	movs	r2, #0
 8010ecc:	701a      	strb	r2, [r3, #0]

}
 8010ece:	bf00      	nop
 8010ed0:	379c      	adds	r7, #156	@ 0x9c
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd90      	pop	{r4, r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	20001a74 	.word	0x20001a74
 8010edc:	08022bb8 	.word	0x08022bb8
 8010ee0:	20001b3b 	.word	0x20001b3b
 8010ee4:	20001b3a 	.word	0x20001b3a

08010ee8 <set_co2_samples>:


void set_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b092      	sub	sp, #72	@ 0x48
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010ef4:	4b35      	ldr	r3, [pc, #212]	@ (8010fcc <set_co2_samples+0xe4>)
 8010ef6:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010ef8:	4935      	ldr	r1, [pc, #212]	@ (8010fd0 <set_co2_samples+0xe8>)
 8010efa:	68f8      	ldr	r0, [r7, #12]
 8010efc:	f7fe fb0e 	bl	800f51c <cli_printf>
	cli_printf(cli, "Disclaimer: Increase in Samples number also reduces battery life.");
 8010f00:	4934      	ldr	r1, [pc, #208]	@ (8010fd4 <set_co2_samples+0xec>)
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f7fe fb0a 	bl	800f51c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010f08:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010f0a:	f7ef f9c9 	bl	80002a0 <strlen>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010f18:	482f      	ldr	r0, [pc, #188]	@ (8010fd8 <set_co2_samples+0xf0>)
 8010f1a:	f7fb f99d 	bl	800c258 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter the number of Samples: ");
 8010f1e:	492f      	ldr	r1, [pc, #188]	@ (8010fdc <set_co2_samples+0xf4>)
 8010f20:	68f8      	ldr	r0, [r7, #12]
 8010f22:	f7fe fafb 	bl	800f51c <cli_printf>

	uint16_t val;
	cli_other = 1;
 8010f26:	4b2e      	ldr	r3, [pc, #184]	@ (8010fe0 <set_co2_samples+0xf8>)
 8010f28:	2201      	movs	r2, #1
 8010f2a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8010fe4 <set_co2_samples+0xfc>)
 8010f2e:	2200      	movs	r2, #0
 8010f30:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 8010f32:	f107 0310 	add.w	r3, r7, #16
 8010f36:	2232      	movs	r2, #50	@ 0x32
 8010f38:	2100      	movs	r1, #0
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f00d ff3c 	bl	801edb8 <memset>
	receiveString(cli, buffer, sizeof(buffer));
 8010f40:	f107 0310 	add.w	r3, r7, #16
 8010f44:	2232      	movs	r2, #50	@ 0x32
 8010f46:	4619      	mov	r1, r3
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	f7fe fb29 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010f4e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010f50:	f7ef f9a6 	bl	80002a0 <strlen>
 8010f54:	4603      	mov	r3, r0
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010f5e:	481e      	ldr	r0, [pc, #120]	@ (8010fd8 <set_co2_samples+0xf0>)
 8010f60:	f7fb f97a 	bl	800c258 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8010f64:	7c3b      	ldrb	r3, [r7, #16]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d022      	beq.n	8010fb0 <set_co2_samples+0xc8>

		val = atoi(buffer);
 8010f6a:	f107 0310 	add.w	r3, r7, #16
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f00c fca0 	bl	801d8b4 <atoi>
 8010f74:	4603      	mov	r3, r0
 8010f76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

			if (val < 65535) {
 8010f7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d004      	beq.n	8010f90 <set_co2_samples+0xa8>
				_Flash_Packet.co2_samples = val;
 8010f86:	4b18      	ldr	r3, [pc, #96]	@ (8010fe8 <set_co2_samples+0x100>)
 8010f88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f8c:	f8a3 225d 	strh.w	r2, [r3, #605]	@ 0x25d
			}

		cli_printf(cli, "Samples: %d", _Flash_Packet.co2_samples);
 8010f90:	4b15      	ldr	r3, [pc, #84]	@ (8010fe8 <set_co2_samples+0x100>)
 8010f92:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8010f96:	b29b      	uxth	r3, r3
 8010f98:	461a      	mov	r2, r3
 8010f9a:	4914      	ldr	r1, [pc, #80]	@ (8010fec <set_co2_samples+0x104>)
 8010f9c:	68f8      	ldr	r0, [r7, #12]
 8010f9e:	f7fe fabd 	bl	800f51c <cli_printf>
		set_param_flags();
 8010fa2:	4b13      	ldr	r3, [pc, #76]	@ (8010ff0 <set_co2_samples+0x108>)
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	701a      	strb	r2, [r3, #0]
 8010fa8:	4b12      	ldr	r3, [pc, #72]	@ (8010ff4 <set_co2_samples+0x10c>)
 8010faa:	2201      	movs	r2, #1
 8010fac:	701a      	strb	r2, [r3, #0]
 8010fae:	e003      	b.n	8010fb8 <set_co2_samples+0xd0>
	}
	else
	{
		cli_printf(cli, "No Value provided, operation aborted!");
 8010fb0:	4911      	ldr	r1, [pc, #68]	@ (8010ff8 <set_co2_samples+0x110>)
 8010fb2:	68f8      	ldr	r0, [r7, #12]
 8010fb4:	f7fe fab2 	bl	800f51c <cli_printf>
	}

	flag_cli = 0;
 8010fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8010fe4 <set_co2_samples+0xfc>)
 8010fba:	2200      	movs	r2, #0
 8010fbc:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010fbe:	4b08      	ldr	r3, [pc, #32]	@ (8010fe0 <set_co2_samples+0xf8>)
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	701a      	strb	r2, [r3, #0]

}
 8010fc4:	bf00      	nop
 8010fc6:	3748      	adds	r7, #72	@ 0x48
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	08022474 	.word	0x08022474
 8010fd0:	080224e8 	.word	0x080224e8
 8010fd4:	080231cc 	.word	0x080231cc
 8010fd8:	20001a74 	.word	0x20001a74
 8010fdc:	08023210 	.word	0x08023210
 8010fe0:	20001b3a 	.word	0x20001b3a
 8010fe4:	20001b3b 	.word	0x20001b3b
 8010fe8:	200012cc 	.word	0x200012cc
 8010fec:	08023230 	.word	0x08023230
 8010ff0:	20001579 	.word	0x20001579
 8010ff4:	2000157a 	.word	0x2000157a
 8010ff8:	0802323c 	.word	0x0802323c

08010ffc <get_co2_samples>:

void get_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	60f8      	str	r0, [r7, #12]
 8011004:	60b9      	str	r1, [r7, #8]
 8011006:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Co2 Samples: %d", _Flash_Packet.co2_samples);
 8011008:	4b06      	ldr	r3, [pc, #24]	@ (8011024 <get_co2_samples+0x28>)
 801100a:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 801100e:	b29b      	uxth	r3, r3
 8011010:	461a      	mov	r2, r3
 8011012:	4905      	ldr	r1, [pc, #20]	@ (8011028 <get_co2_samples+0x2c>)
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f7fe fa81 	bl	800f51c <cli_printf>
}
 801101a:	bf00      	nop
 801101c:	3710      	adds	r7, #16
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	200012cc 	.word	0x200012cc
 8011028:	08023264 	.word	0x08023264

0801102c <SystemRestart>:


void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 801102c:	b580      	push	{r7, lr}
 801102e:	b092      	sub	sp, #72	@ 0x48
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8011038:	4b22      	ldr	r3, [pc, #136]	@ (80110c4 <SystemRestart+0x98>)
 801103a:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to restart the device y/n?");
 801103c:	4922      	ldr	r1, [pc, #136]	@ (80110c8 <SystemRestart+0x9c>)
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f7fe fa6c 	bl	800f51c <cli_printf>

	cli_other = 1;
 8011044:	4b21      	ldr	r3, [pc, #132]	@ (80110cc <SystemRestart+0xa0>)
 8011046:	2201      	movs	r2, #1
 8011048:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 801104a:	4b21      	ldr	r3, [pc, #132]	@ (80110d0 <SystemRestart+0xa4>)
 801104c:	2200      	movs	r2, #0
 801104e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 8011050:	f107 0310 	add.w	r3, r7, #16
 8011054:	2232      	movs	r2, #50	@ 0x32
 8011056:	4619      	mov	r1, r3
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f7fe faa1 	bl	800f5a0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801105e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011060:	f7ef f91e 	bl	80002a0 <strlen>
 8011064:	4603      	mov	r3, r0
 8011066:	b29a      	uxth	r2, r3
 8011068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801106c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801106e:	4819      	ldr	r0, [pc, #100]	@ (80110d4 <SystemRestart+0xa8>)
 8011070:	f7fb f8f2 	bl	800c258 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 8011074:	f107 0310 	add.w	r3, r7, #16
 8011078:	2179      	movs	r1, #121	@ 0x79
 801107a:	4618      	mov	r0, r3
 801107c:	f00d fea4 	bl	801edc8 <strchr>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d006      	beq.n	8011094 <SystemRestart+0x68>
		cli_printf(cli, "Device is going to restart.");
 8011086:	4914      	ldr	r1, [pc, #80]	@ (80110d8 <SystemRestart+0xac>)
 8011088:	68f8      	ldr	r0, [r7, #12]
 801108a:	f7fe fa47 	bl	800f51c <cli_printf>
		HAL_NVIC_SystemReset();
 801108e:	f7f3 fe5e 	bl	8004d4e <HAL_NVIC_SystemReset>
 8011092:	e00c      	b.n	80110ae <SystemRestart+0x82>
	} else if (strstr(buffer, "n")) {
 8011094:	f107 0310 	add.w	r3, r7, #16
 8011098:	216e      	movs	r1, #110	@ 0x6e
 801109a:	4618      	mov	r0, r3
 801109c:	f00d fe94 	bl	801edc8 <strchr>
 80110a0:	4603      	mov	r3, r0
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d003      	beq.n	80110ae <SystemRestart+0x82>
		cli_printf(cli, "Device restart aborted.");
 80110a6:	490d      	ldr	r1, [pc, #52]	@ (80110dc <SystemRestart+0xb0>)
 80110a8:	68f8      	ldr	r0, [r7, #12]
 80110aa:	f7fe fa37 	bl	800f51c <cli_printf>
	}

	flag_cli = 0;
 80110ae:	4b08      	ldr	r3, [pc, #32]	@ (80110d0 <SystemRestart+0xa4>)
 80110b0:	2200      	movs	r2, #0
 80110b2:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80110b4:	4b05      	ldr	r3, [pc, #20]	@ (80110cc <SystemRestart+0xa0>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	701a      	strb	r2, [r3, #0]
}
 80110ba:	bf00      	nop
 80110bc:	3748      	adds	r7, #72	@ 0x48
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	08022474 	.word	0x08022474
 80110c8:	08023274 	.word	0x08023274
 80110cc:	20001b3a 	.word	0x20001b3a
 80110d0:	20001b3b 	.word	0x20001b3b
 80110d4:	20001a74 	.word	0x20001a74
 80110d8:	0802329c 	.word	0x0802329c
 80110dc:	080232b8 	.word	0x080232b8

080110e0 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 80110ec:	4b0a      	ldr	r3, [pc, #40]	@ (8011118 <Co2Level+0x38>)
 80110ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d101      	bne.n	80110fa <Co2Level+0x1a>


#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 80110f6:	f7f0 faeb 	bl	80016d0 <get_scd30_measurement_>
#endif
	}
#ifdef use_scd40x
	cli_printf(cli, "Co2 Value: %d", _RunTime_Packet.co2);
#elif use_scd30
	cli_printf(cli, "Co2 Value: %.2f", _RunTime_Packet.co2);
 80110fa:	4b07      	ldr	r3, [pc, #28]	@ (8011118 <Co2Level+0x38>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	4618      	mov	r0, r3
 8011100:	f7ef fa3a 	bl	8000578 <__aeabi_f2d>
 8011104:	4602      	mov	r2, r0
 8011106:	460b      	mov	r3, r1
 8011108:	4904      	ldr	r1, [pc, #16]	@ (801111c <Co2Level+0x3c>)
 801110a:	68f8      	ldr	r0, [r7, #12]
 801110c:	f7fe fa06 	bl	800f51c <cli_printf>
#endif
}
 8011110:	bf00      	nop
 8011112:	3710      	adds	r7, #16
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	20001530 	.word	0x20001530
 801111c:	080232d0 	.word	0x080232d0

08011120 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 801112c:	4b0a      	ldr	r3, [pc, #40]	@ (8011158 <TempLevel+0x38>)
 801112e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011132:	2b00      	cmp	r3, #0
 8011134:	d101      	bne.n	801113a <TempLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 8011136:	f7f0 facb 	bl	80016d0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Temperature Value: %dC ", _RunTime_Packet.temperature);
#elif use_scd30
	cli_printf(cli, "Temperature Value: %.2fC ", _RunTime_Packet.temperature);
 801113a:	4b07      	ldr	r3, [pc, #28]	@ (8011158 <TempLevel+0x38>)
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	4618      	mov	r0, r3
 8011140:	f7ef fa1a 	bl	8000578 <__aeabi_f2d>
 8011144:	4602      	mov	r2, r0
 8011146:	460b      	mov	r3, r1
 8011148:	4904      	ldr	r1, [pc, #16]	@ (801115c <TempLevel+0x3c>)
 801114a:	68f8      	ldr	r0, [r7, #12]
 801114c:	f7fe f9e6 	bl	800f51c <cli_printf>
#endif
}
 8011150:	bf00      	nop
 8011152:	3710      	adds	r7, #16
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	20001530 	.word	0x20001530
 801115c:	080232e0 	.word	0x080232e0

08011160 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 801116c:	4b0a      	ldr	r3, [pc, #40]	@ (8011198 <HumidLevel+0x38>)
 801116e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011172:	2b00      	cmp	r3, #0
 8011174:	d101      	bne.n	801117a <HumidLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 8011176:	f7f0 faab 	bl	80016d0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Humidity Value: %d ", _RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, "Humidity Value: %.2f ", _RunTime_Packet.humidity);
 801117a:	4b07      	ldr	r3, [pc, #28]	@ (8011198 <HumidLevel+0x38>)
 801117c:	689b      	ldr	r3, [r3, #8]
 801117e:	4618      	mov	r0, r3
 8011180:	f7ef f9fa 	bl	8000578 <__aeabi_f2d>
 8011184:	4602      	mov	r2, r0
 8011186:	460b      	mov	r3, r1
 8011188:	4904      	ldr	r1, [pc, #16]	@ (801119c <HumidLevel+0x3c>)
 801118a:	68f8      	ldr	r0, [r7, #12]
 801118c:	f7fe f9c6 	bl	800f51c <cli_printf>
#endif
}
 8011190:	bf00      	nop
 8011192:	3710      	adds	r7, #16
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}
 8011198:	20001530 	.word	0x20001530
 801119c:	080232fc 	.word	0x080232fc

080111a0 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "For 10seconds system will poll here to detect motion.");
 80111ac:	491f      	ldr	r1, [pc, #124]	@ (801122c <MotionDetection+0x8c>)
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	f7fe f9b4 	bl	800f51c <cli_printf>
	HAL_Delay(2000);
 80111b4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80111b8:	f7f2 ffba 	bl	8004130 <HAL_Delay>
	prev_max_wait_time_motion = HAL_GetTick();
 80111bc:	f7f2 ffac 	bl	8004118 <HAL_GetTick>
 80111c0:	4603      	mov	r3, r0
 80111c2:	4a1b      	ldr	r2, [pc, #108]	@ (8011230 <MotionDetection+0x90>)
 80111c4:	6013      	str	r3, [r2, #0]
	prev_motion = 0;
 80111c6:	4b1b      	ldr	r3, [pc, #108]	@ (8011234 <MotionDetection+0x94>)
 80111c8:	2200      	movs	r2, #0
 80111ca:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80111cc:	e01c      	b.n	8011208 <MotionDetection+0x68>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80111ce:	2101      	movs	r1, #1
 80111d0:	4819      	ldr	r0, [pc, #100]	@ (8011238 <MotionDetection+0x98>)
 80111d2:	f7f4 ff6d 	bl	80060b0 <HAL_GPIO_ReadPin>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d003      	beq.n	80111e4 <MotionDetection+0x44>
			_RunTime_Packet.motion_detection = 1;
 80111dc:	4b17      	ldr	r3, [pc, #92]	@ (801123c <MotionDetection+0x9c>)
 80111de:	2201      	movs	r2, #1
 80111e0:	731a      	strb	r2, [r3, #12]
 80111e2:	e002      	b.n	80111ea <MotionDetection+0x4a>
			//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
		} else {
			_RunTime_Packet.motion_detection = 0;
 80111e4:	4b15      	ldr	r3, [pc, #84]	@ (801123c <MotionDetection+0x9c>)
 80111e6:	2200      	movs	r2, #0
 80111e8:	731a      	strb	r2, [r3, #12]

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
		cli_printf(cli, "PIR Motion: %s\r\n",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80111ea:	4b14      	ldr	r3, [pc, #80]	@ (801123c <MotionDetection+0x9c>)
 80111ec:	7b1b      	ldrb	r3, [r3, #12]
		cli_printf(cli, "PIR Motion: %s\r\n",
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d101      	bne.n	80111f6 <MotionDetection+0x56>
 80111f2:	4b13      	ldr	r3, [pc, #76]	@ (8011240 <MotionDetection+0xa0>)
 80111f4:	e000      	b.n	80111f8 <MotionDetection+0x58>
 80111f6:	4b13      	ldr	r3, [pc, #76]	@ (8011244 <MotionDetection+0xa4>)
 80111f8:	461a      	mov	r2, r3
 80111fa:	4913      	ldr	r1, [pc, #76]	@ (8011248 <MotionDetection+0xa8>)
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f7fe f98d 	bl	800f51c <cli_printf>
//	         	}
		HAL_Delay(100);
 8011202:	2064      	movs	r0, #100	@ 0x64
 8011204:	f7f2 ff94 	bl	8004130 <HAL_Delay>
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 8011208:	f7f2 ff86 	bl	8004118 <HAL_GetTick>
 801120c:	4602      	mov	r2, r0
 801120e:	4b08      	ldr	r3, [pc, #32]	@ (8011230 <MotionDetection+0x90>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	1ad2      	subs	r2, r2, r3
 8011214:	4b0d      	ldr	r3, [pc, #52]	@ (801124c <MotionDetection+0xac>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	429a      	cmp	r2, r3
 801121a:	d3d8      	bcc.n	80111ce <MotionDetection+0x2e>
//}
//

	}

	cli_printf(cli, "Session ended");
 801121c:	490c      	ldr	r1, [pc, #48]	@ (8011250 <MotionDetection+0xb0>)
 801121e:	68f8      	ldr	r0, [r7, #12]
 8011220:	f7fe f97c 	bl	800f51c <cli_printf>

}
 8011224:	bf00      	nop
 8011226:	3710      	adds	r7, #16
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	08023314 	.word	0x08023314
 8011230:	20001b34 	.word	0x20001b34
 8011234:	20001b3c 	.word	0x20001b3c
 8011238:	40020000 	.word	0x40020000
 801123c:	20001530 	.word	0x20001530
 8011240:	0802334c 	.word	0x0802334c
 8011244:	08023354 	.word	0x08023354
 8011248:	0802335c 	.word	0x0802335c
 801124c:	20000020 	.word	0x20000020
 8011250:	08023370 	.word	0x08023370

08011254 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "AirQuality Measured Values:");
 8011260:	4922      	ldr	r1, [pc, #136]	@ (80112ec <AirQuality+0x98>)
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f7fe f95a 	bl	800f51c <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 8011268:	4b21      	ldr	r3, [pc, #132]	@ (80112f0 <AirQuality+0x9c>)
 801126a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801126e:	2b00      	cmp	r3, #0
 8011270:	d104      	bne.n	801127c <AirQuality+0x28>
 8011272:	4b1f      	ldr	r3, [pc, #124]	@ (80112f0 <AirQuality+0x9c>)
 8011274:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011278:	2b00      	cmp	r3, #0
 801127a:	d004      	beq.n	8011286 <AirQuality+0x32>
		cli_printf(cli, "Calculating, try again later");
 801127c:	491d      	ldr	r1, [pc, #116]	@ (80112f4 <AirQuality+0xa0>)
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f7fe f94c 	bl	800f51c <cli_printf>
 8011284:	e02e      	b.n	80112e4 <AirQuality+0x90>
	} else {

		get_sps30_measurement();
 8011286:	f7f0 fae1 	bl	800184c <get_sps30_measurement>
		cli_printf(cli, "%0.2f pm1.0", _RunTime_Packet.pm1_0);
 801128a:	4b19      	ldr	r3, [pc, #100]	@ (80112f0 <AirQuality+0x9c>)
 801128c:	691b      	ldr	r3, [r3, #16]
 801128e:	4618      	mov	r0, r3
 8011290:	f7ef f972 	bl	8000578 <__aeabi_f2d>
 8011294:	4602      	mov	r2, r0
 8011296:	460b      	mov	r3, r1
 8011298:	4917      	ldr	r1, [pc, #92]	@ (80112f8 <AirQuality+0xa4>)
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	f7fe f93e 	bl	800f51c <cli_printf>
		cli_printf(cli, "%0.2f pm2.5 ", _RunTime_Packet.pm2_5);
 80112a0:	4b13      	ldr	r3, [pc, #76]	@ (80112f0 <AirQuality+0x9c>)
 80112a2:	695b      	ldr	r3, [r3, #20]
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ef f967 	bl	8000578 <__aeabi_f2d>
 80112aa:	4602      	mov	r2, r0
 80112ac:	460b      	mov	r3, r1
 80112ae:	4913      	ldr	r1, [pc, #76]	@ (80112fc <AirQuality+0xa8>)
 80112b0:	68f8      	ldr	r0, [r7, #12]
 80112b2:	f7fe f933 	bl	800f51c <cli_printf>
		cli_printf(cli, "%0.2f pm4.0 ", _RunTime_Packet.pm4_0);
 80112b6:	4b0e      	ldr	r3, [pc, #56]	@ (80112f0 <AirQuality+0x9c>)
 80112b8:	699b      	ldr	r3, [r3, #24]
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7ef f95c 	bl	8000578 <__aeabi_f2d>
 80112c0:	4602      	mov	r2, r0
 80112c2:	460b      	mov	r3, r1
 80112c4:	490e      	ldr	r1, [pc, #56]	@ (8011300 <AirQuality+0xac>)
 80112c6:	68f8      	ldr	r0, [r7, #12]
 80112c8:	f7fe f928 	bl	800f51c <cli_printf>
		cli_printf(cli, "%0.2f pm10.0", _RunTime_Packet.pm10_0);
 80112cc:	4b08      	ldr	r3, [pc, #32]	@ (80112f0 <AirQuality+0x9c>)
 80112ce:	69db      	ldr	r3, [r3, #28]
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7ef f951 	bl	8000578 <__aeabi_f2d>
 80112d6:	4602      	mov	r2, r0
 80112d8:	460b      	mov	r3, r1
 80112da:	490a      	ldr	r1, [pc, #40]	@ (8011304 <AirQuality+0xb0>)
 80112dc:	68f8      	ldr	r0, [r7, #12]
 80112de:	f7fe f91d 	bl	800f51c <cli_printf>
	}

}
 80112e2:	bf00      	nop
 80112e4:	bf00      	nop
 80112e6:	3710      	adds	r7, #16
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	08023380 	.word	0x08023380
 80112f0:	20001530 	.word	0x20001530
 80112f4:	0802339c 	.word	0x0802339c
 80112f8:	080233bc 	.word	0x080233bc
 80112fc:	080233c8 	.word	0x080233c8
 8011300:	080233d8 	.word	0x080233d8
 8011304:	080233e8 	.word	0x080233e8

08011308 <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8011314:	4808      	ldr	r0, [pc, #32]	@ (8011338 <BattVolt+0x30>)
 8011316:	f002 ff23 	bl	8014160 <adc_Measure>
	cli_printf(cli, "Battery voltage: %0.2f", _RunTime_Packet.battery_voltage);
 801131a:	4b08      	ldr	r3, [pc, #32]	@ (801133c <BattVolt+0x34>)
 801131c:	6a1b      	ldr	r3, [r3, #32]
 801131e:	4618      	mov	r0, r3
 8011320:	f7ef f92a 	bl	8000578 <__aeabi_f2d>
 8011324:	4602      	mov	r2, r0
 8011326:	460b      	mov	r3, r1
 8011328:	4905      	ldr	r1, [pc, #20]	@ (8011340 <BattVolt+0x38>)
 801132a:	68f8      	ldr	r0, [r7, #12]
 801132c:	f7fe f8f6 	bl	800f51c <cli_printf>

}
 8011330:	bf00      	nop
 8011332:	3710      	adds	r7, #16
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	20001550 	.word	0x20001550
 801133c:	20001530 	.word	0x20001530
 8011340:	080233f8 	.word	0x080233f8

08011344 <port>:

void port(EmbeddedCli *cli, char *args, void *context) {
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Auxiliary port value measured(inactive)");
 8011350:	4903      	ldr	r1, [pc, #12]	@ (8011360 <port+0x1c>)
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f7fe f8e2 	bl	800f51c <cli_printf>
}
 8011358:	bf00      	nop
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	08023410 	.word	0x08023410

08011364 <showall>:

void showall(EmbeddedCli *cli, char *args, void *context) {
 8011364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011366:	b0bb      	sub	sp, #236	@ 0xec
 8011368:	af06      	add	r7, sp, #24
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	607a      	str	r2, [r7, #4]
	char buff_pm[20];
	char buff_filewritten[50];

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 8011370:	4bb9      	ldr	r3, [pc, #740]	@ (8011658 <showall+0x2f4>)
 8011372:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011376:	2b00      	cmp	r3, #0
 8011378:	d104      	bne.n	8011384 <showall+0x20>
 801137a:	4bb7      	ldr	r3, [pc, #732]	@ (8011658 <showall+0x2f4>)
 801137c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011380:	2b00      	cmp	r3, #0
 8011382:	d006      	beq.n	8011392 <showall+0x2e>
		sprintf(buff_pm, "Calculating");
 8011384:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8011388:	49b4      	ldr	r1, [pc, #720]	@ (801165c <showall+0x2f8>)
 801138a:	4618      	mov	r0, r3
 801138c:	f00d fbca 	bl	801eb24 <siprintf>
 8011390:	e00d      	b.n	80113ae <showall+0x4a>
	} else {

		get_sps30_measurement();
 8011392:	f7f0 fa5b 	bl	800184c <get_sps30_measurement>
		sprintf(buff_pm, "%0.2f", _RunTime_Packet.pm2_5);
 8011396:	4bb0      	ldr	r3, [pc, #704]	@ (8011658 <showall+0x2f4>)
 8011398:	695b      	ldr	r3, [r3, #20]
 801139a:	4618      	mov	r0, r3
 801139c:	f7ef f8ec 	bl	8000578 <__aeabi_f2d>
 80113a0:	4602      	mov	r2, r0
 80113a2:	460b      	mov	r3, r1
 80113a4:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 80113a8:	49ad      	ldr	r1, [pc, #692]	@ (8011660 <showall+0x2fc>)
 80113aa:	f00d fbbb 	bl	801eb24 <siprintf>

	}
	adc_Measure(&_RunTime_Packet.battery_voltage);
 80113ae:	48ad      	ldr	r0, [pc, #692]	@ (8011664 <showall+0x300>)
 80113b0:	f002 fed6 	bl	8014160 <adc_Measure>
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80113b4:	2101      	movs	r1, #1
 80113b6:	48ac      	ldr	r0, [pc, #688]	@ (8011668 <showall+0x304>)
 80113b8:	f7f4 fe7a 	bl	80060b0 <HAL_GPIO_ReadPin>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d003      	beq.n	80113ca <showall+0x66>
		_RunTime_Packet.motion_detection = 1;
 80113c2:	4ba5      	ldr	r3, [pc, #660]	@ (8011658 <showall+0x2f4>)
 80113c4:	2201      	movs	r2, #1
 80113c6:	731a      	strb	r2, [r3, #12]
 80113c8:	e002      	b.n	80113d0 <showall+0x6c>
	} else {
		_RunTime_Packet.motion_detection = 0;
 80113ca:	4ba3      	ldr	r3, [pc, #652]	@ (8011658 <showall+0x2f4>)
 80113cc:	2200      	movs	r2, #0
 80113ce:	731a      	strb	r2, [r3, #12]
	}

	char co2_Sensor_stat[30] = "ERROR";
 80113d0:	4aa6      	ldr	r2, [pc, #664]	@ (801166c <showall+0x308>)
 80113d2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80113d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113da:	6018      	str	r0, [r3, #0]
 80113dc:	3304      	adds	r3, #4
 80113de:	8019      	strh	r1, [r3, #0]
 80113e0:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80113e4:	2200      	movs	r2, #0
 80113e6:	601a      	str	r2, [r3, #0]
 80113e8:	605a      	str	r2, [r3, #4]
 80113ea:	609a      	str	r2, [r3, #8]
 80113ec:	60da      	str	r2, [r3, #12]
 80113ee:	611a      	str	r2, [r3, #16]
 80113f0:	615a      	str	r2, [r3, #20]

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 80113f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113f6:	2205      	movs	r2, #5
 80113f8:	21c2      	movs	r1, #194	@ 0xc2
 80113fa:	489d      	ldr	r0, [pc, #628]	@ (8011670 <showall+0x30c>)
 80113fc:	f7f5 fb46 	bl	8006a8c <HAL_I2C_IsDeviceReady>
 8011400:	4603      	mov	r3, r0
 8011402:	2b00      	cmp	r3, #0
 8011404:	d01c      	beq.n	8011440 <showall+0xdc>
			!= HAL_OK) {

		if (debug_scd_pm) {
 8011406:	4b9b      	ldr	r3, [pc, #620]	@ (8011674 <showall+0x310>)
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d013      	beq.n	8011436 <showall+0xd2>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 801140e:	f107 0314 	add.w	r3, r7, #20
 8011412:	4999      	ldr	r1, [pc, #612]	@ (8011678 <showall+0x314>)
 8011414:	4618      	mov	r0, r3
 8011416:	f00d fb85 	bl	801eb24 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 801141a:	f107 0314 	add.w	r3, r7, #20
 801141e:	4618      	mov	r0, r3
 8011420:	f7ee ff3e 	bl	80002a0 <strlen>
 8011424:	4603      	mov	r3, r0
 8011426:	b29a      	uxth	r2, r3
 8011428:	f107 0114 	add.w	r1, r7, #20
 801142c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011430:	4892      	ldr	r0, [pc, #584]	@ (801167c <showall+0x318>)
 8011432:	f7fa ff11 	bl	800c258 <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 8011436:	4b88      	ldr	r3, [pc, #544]	@ (8011658 <showall+0x2f4>)
 8011438:	2201      	movs	r2, #1
 801143a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801143e:	e003      	b.n	8011448 <showall+0xe4>
	}
	else
	{
		_RunTime_Packet.scd4x_i2c_error = 0;
 8011440:	4b85      	ldr	r3, [pc, #532]	@ (8011658 <showall+0x2f4>)
 8011442:	2200      	movs	r2, #0
 8011444:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011448:	4b83      	ldr	r3, [pc, #524]	@ (8011658 <showall+0x2f4>)
 801144a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801144e:	2b00      	cmp	r3, #0
 8011450:	d10a      	bne.n	8011468 <showall+0x104>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	//get_scd30_measurement();
#endif
		strcpy(co2_Sensor_stat,"ACTIVE");
 8011452:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011456:	4a8a      	ldr	r2, [pc, #552]	@ (8011680 <showall+0x31c>)
 8011458:	e892 0003 	ldmia.w	r2, {r0, r1}
 801145c:	6018      	str	r0, [r3, #0]
 801145e:	3304      	adds	r3, #4
 8011460:	8019      	strh	r1, [r3, #0]
 8011462:	3302      	adds	r3, #2
 8011464:	0c0a      	lsrs	r2, r1, #16
 8011466:	701a      	strb	r2, [r3, #0]
	}


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 8011468:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801146c:	2200      	movs	r2, #0
 801146e:	4619      	mov	r1, r3
 8011470:	4884      	ldr	r0, [pc, #528]	@ (8011684 <showall+0x320>)
 8011472:	f7f8 fb70 	bl	8009b56 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8011476:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801147a:	2200      	movs	r2, #0
 801147c:	4619      	mov	r1, r3
 801147e:	4881      	ldr	r0, [pc, #516]	@ (8011684 <showall+0x320>)
 8011480:	f7f8 fa87 	bl	8009992 <HAL_RTC_GetTime>

	if (datawritten == 0) {
 8011484:	4b80      	ldr	r3, [pc, #512]	@ (8011688 <showall+0x324>)
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d106      	bne.n	801149a <showall+0x136>

		sprintf(buff_filewritten, "Data not written yet");
 801148c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011490:	497e      	ldr	r1, [pc, #504]	@ (801168c <showall+0x328>)
 8011492:	4618      	mov	r0, r3
 8011494:	f00d fb46 	bl	801eb24 <siprintf>
 8011498:	e014      	b.n	80114c4 <showall+0x160>

	} else if (datawritten == 1) {
 801149a:	4b7b      	ldr	r3, [pc, #492]	@ (8011688 <showall+0x324>)
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d106      	bne.n	80114b0 <showall+0x14c>
		sprintf(buff_filewritten, " **SUCCESSFUL** ");
 80114a2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80114a6:	497a      	ldr	r1, [pc, #488]	@ (8011690 <showall+0x32c>)
 80114a8:	4618      	mov	r0, r3
 80114aa:	f00d fb3b 	bl	801eb24 <siprintf>
 80114ae:	e009      	b.n	80114c4 <showall+0x160>
	} else if (datawritten == 2) {
 80114b0:	4b75      	ldr	r3, [pc, #468]	@ (8011688 <showall+0x324>)
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	2b02      	cmp	r3, #2
 80114b6:	d105      	bne.n	80114c4 <showall+0x160>

		sprintf(buff_filewritten, " **FAILED** ");
 80114b8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80114bc:	4975      	ldr	r1, [pc, #468]	@ (8011694 <showall+0x330>)
 80114be:	4618      	mov	r0, r3
 80114c0:	f00d fb30 	bl	801eb24 <siprintf>
	}
	uint16_t calib_val = 0;
 80114c4:	2300      	movs	r3, #0
 80114c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint16_t calib_stat = 0;
 80114ca:	2300      	movs	r3, #0
 80114cc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint16_t temp_offset = 0;
 80114d0:	2300      	movs	r3, #0
 80114d2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint16_t altitude_comp = 0;
 80114d6:	2300      	movs	r3, #0
 80114d8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	if (!_RunTime_Packet.scd4x_i2c_error) {
 80114dc:	4b5e      	ldr	r3, [pc, #376]	@ (8011658 <showall+0x2f4>)
 80114de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d113      	bne.n	801150e <showall+0x1aa>
	scd30_get_force_recalibration_status(&calib_val);
 80114e6:	f107 034e 	add.w	r3, r7, #78	@ 0x4e
 80114ea:	4618      	mov	r0, r3
 80114ec:	f003 f96c 	bl	80147c8 <scd30_get_force_recalibration_status>
	scd30_get_auto_calibration_status(&calib_stat);
 80114f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80114f4:	4618      	mov	r0, r3
 80114f6:	f003 f8d9 	bl	80146ac <scd30_get_auto_calibration_status>
	scd30_get_altitude_compensation(&altitude_comp);
 80114fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80114fe:	4618      	mov	r0, r3
 8011500:	f003 fa40 	bl	8014984 <scd30_get_altitude_compensation>
	scd30_get_temperature_offset(&temp_offset);
 8011504:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8011508:	4618      	mov	r0, r3
 801150a:	f003 f9eb 	bl	80148e4 <scd30_get_temperature_offset>
	}


	cli_printf(cli, "");
 801150e:	4962      	ldr	r1, [pc, #392]	@ (8011698 <showall+0x334>)
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f7fe f803 	bl	800f51c <cli_printf>
	cli_printf(cli, "");
 8011516:	4960      	ldr	r1, [pc, #384]	@ (8011698 <showall+0x334>)
 8011518:	68f8      	ldr	r0, [r7, #12]
 801151a:	f7fd ffff 	bl	800f51c <cli_printf>
	cli_printf(cli, "");
 801151e:	495e      	ldr	r1, [pc, #376]	@ (8011698 <showall+0x334>)
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f7fd fffb 	bl	800f51c <cli_printf>

	cli_printf(cli, " *devEUI           | %s                       ",
 8011526:	f7f0 ffa7 	bl	8002478 <ver_GetUid>
 801152a:	4603      	mov	r3, r0
 801152c:	461a      	mov	r2, r3
 801152e:	495b      	ldr	r1, [pc, #364]	@ (801169c <showall+0x338>)
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	f7fd fff3 	bl	800f51c <cli_printf>
			ver_GetUid());
	cli_printf(cli, " *Id               | %s                       ",
 8011536:	4a5a      	ldr	r2, [pc, #360]	@ (80116a0 <showall+0x33c>)
 8011538:	495a      	ldr	r1, [pc, #360]	@ (80116a4 <showall+0x340>)
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f7fd ffee 	bl	800f51c <cli_printf>
			_Flash_Packet.id);
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8011540:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 8011544:	461a      	mov	r2, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8011546:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 801154a:	4619      	mov	r1, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 801154c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 8011550:	9300      	str	r3, [sp, #0]
 8011552:	460b      	mov	r3, r1
 8011554:	4954      	ldr	r1, [pc, #336]	@ (80116a8 <showall+0x344>)
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f7fd ffe0 	bl	800f51c <cli_printf>
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
			gDate.Date, gDate.Month, gDate.Year);
 801155c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8011560:	461a      	mov	r2, r3
			gDate.Date, gDate.Month, gDate.Year);
 8011562:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8011566:	4619      	mov	r1, r3
			gDate.Date, gDate.Month, gDate.Year);
 8011568:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 801156c:	9300      	str	r3, [sp, #0]
 801156e:	460b      	mov	r3, r1
 8011570:	494e      	ldr	r1, [pc, #312]	@ (80116ac <showall+0x348>)
 8011572:	68f8      	ldr	r0, [r7, #12]
 8011574:	f7fd ffd2 	bl	800f51c <cli_printf>
	cli_printf(cli, " *Location         | %s                       ",
 8011578:	4a4d      	ldr	r2, [pc, #308]	@ (80116b0 <showall+0x34c>)
 801157a:	494e      	ldr	r1, [pc, #312]	@ (80116b4 <showall+0x350>)
 801157c:	68f8      	ldr	r0, [r7, #12]
 801157e:	f7fd ffcd 	bl	800f51c <cli_printf>
			_Flash_Packet.location);
	cli_printf(cli, " *Filename         | %s                       ",
 8011582:	4a4d      	ldr	r2, [pc, #308]	@ (80116b8 <showall+0x354>)
 8011584:	494d      	ldr	r1, [pc, #308]	@ (80116bc <showall+0x358>)
 8011586:	68f8      	ldr	r0, [r7, #12]
 8011588:	f7fd ffc8 	bl	800f51c <cli_printf>
			_Flash_Packet.filename_ver_date);
	cli_printf(cli, " *Fileformat       | %s                       ",
 801158c:	4a4c      	ldr	r2, [pc, #304]	@ (80116c0 <showall+0x35c>)
 801158e:	494d      	ldr	r1, [pc, #308]	@ (80116c4 <showall+0x360>)
 8011590:	68f8      	ldr	r0, [r7, #12]
 8011592:	f7fd ffc3 	bl	800f51c <cli_printf>
			_Flash_Packet.File_Format);
	cli_printf(cli, " *Group            | %s                       ",
 8011596:	4a4c      	ldr	r2, [pc, #304]	@ (80116c8 <showall+0x364>)
 8011598:	494c      	ldr	r1, [pc, #304]	@ (80116cc <showall+0x368>)
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f7fd ffbe 	bl	800f51c <cli_printf>
			_Flash_Packet.group);
	cli_printf(cli, " *Interval         | %dmin                       ",
 80115a0:	4b4b      	ldr	r3, [pc, #300]	@ (80116d0 <showall+0x36c>)
 80115a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80115a6:	461a      	mov	r2, r3
 80115a8:	494a      	ldr	r1, [pc, #296]	@ (80116d4 <showall+0x370>)
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	f7fd ffb6 	bl	800f51c <cli_printf>
			_Flash_Packet.Time_Interval);
	cli_printf(cli, " *Co2 sensor status| %s                       ",
 80115b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80115b4:	461a      	mov	r2, r3
 80115b6:	4948      	ldr	r1, [pc, #288]	@ (80116d8 <showall+0x374>)
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f7fd ffaf 	bl	800f51c <cli_printf>
			co2_Sensor_stat);
	cli_printf(cli, " *Calibration Value| %d                       ",
 80115be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80115c2:	461a      	mov	r2, r3
 80115c4:	4945      	ldr	r1, [pc, #276]	@ (80116dc <showall+0x378>)
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	f7fd ffa8 	bl	800f51c <cli_printf>
			calib_val);
	cli_printf(cli, " *Auto calibration | %d                       ",
 80115cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80115d0:	461a      	mov	r2, r3
 80115d2:	4943      	ldr	r1, [pc, #268]	@ (80116e0 <showall+0x37c>)
 80115d4:	68f8      	ldr	r0, [r7, #12]
 80115d6:	f7fd ffa1 	bl	800f51c <cli_printf>
			calib_stat);
	cli_printf(cli, " *Temp offset      | %d                       ",
 80115da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80115de:	461a      	mov	r2, r3
 80115e0:	4940      	ldr	r1, [pc, #256]	@ (80116e4 <showall+0x380>)
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f7fd ff9a 	bl	800f51c <cli_printf>
			temp_offset);
	cli_printf(cli, " *Altitude Comp    | %d                       ",
 80115e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80115ec:	461a      	mov	r2, r3
 80115ee:	493e      	ldr	r1, [pc, #248]	@ (80116e8 <showall+0x384>)
 80115f0:	68f8      	ldr	r0, [r7, #12]
 80115f2:	f7fd ff93 	bl	800f51c <cli_printf>
			altitude_comp);
	cli_printf(cli, " *Co2 Samples      | %d                       ",
			_Flash_Packet.co2_samples);
 80115f6:	4b36      	ldr	r3, [pc, #216]	@ (80116d0 <showall+0x36c>)
 80115f8:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80115fc:	b29b      	uxth	r3, r3
	cli_printf(cli, " *Co2 Samples      | %d                       ",
 80115fe:	461a      	mov	r2, r3
 8011600:	493a      	ldr	r1, [pc, #232]	@ (80116ec <showall+0x388>)
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	f7fd ff8a 	bl	800f51c <cli_printf>
			_RunTime_Packet.temperature);
	cli_printf(cli, " *Humidity         | %d%%                     ",
			_RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, " *Co2              | %.2f                       ",
			_RunTime_Packet.co2);
 8011608:	4b13      	ldr	r3, [pc, #76]	@ (8011658 <showall+0x2f4>)
 801160a:	681b      	ldr	r3, [r3, #0]
	cli_printf(cli, " *Co2              | %.2f                       ",
 801160c:	4618      	mov	r0, r3
 801160e:	f7ee ffb3 	bl	8000578 <__aeabi_f2d>
 8011612:	4602      	mov	r2, r0
 8011614:	460b      	mov	r3, r1
 8011616:	4936      	ldr	r1, [pc, #216]	@ (80116f0 <showall+0x38c>)
 8011618:	68f8      	ldr	r0, [r7, #12]
 801161a:	f7fd ff7f 	bl	800f51c <cli_printf>
	cli_printf(cli, " *Temperature      | %.2fC                      ",
			_RunTime_Packet.temperature);
 801161e:	4b0e      	ldr	r3, [pc, #56]	@ (8011658 <showall+0x2f4>)
 8011620:	685b      	ldr	r3, [r3, #4]
	cli_printf(cli, " *Temperature      | %.2fC                      ",
 8011622:	4618      	mov	r0, r3
 8011624:	f7ee ffa8 	bl	8000578 <__aeabi_f2d>
 8011628:	4602      	mov	r2, r0
 801162a:	460b      	mov	r3, r1
 801162c:	4931      	ldr	r1, [pc, #196]	@ (80116f4 <showall+0x390>)
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f7fd ff74 	bl	800f51c <cli_printf>
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
			_RunTime_Packet.humidity);
 8011634:	4b08      	ldr	r3, [pc, #32]	@ (8011658 <showall+0x2f4>)
 8011636:	689b      	ldr	r3, [r3, #8]
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
 8011638:	4618      	mov	r0, r3
 801163a:	f7ee ff9d 	bl	8000578 <__aeabi_f2d>
 801163e:	4602      	mov	r2, r0
 8011640:	460b      	mov	r3, r1
 8011642:	492d      	ldr	r1, [pc, #180]	@ (80116f8 <showall+0x394>)
 8011644:	68f8      	ldr	r0, [r7, #12]
 8011646:	f7fd ff69 	bl	800f51c <cli_printf>
#endif

	cli_printf(cli, " *PIR              | %s                       ",
			_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801164a:	4b03      	ldr	r3, [pc, #12]	@ (8011658 <showall+0x2f4>)
 801164c:	7b1b      	ldrb	r3, [r3, #12]
	cli_printf(cli, " *PIR              | %s                       ",
 801164e:	2b01      	cmp	r3, #1
 8011650:	d156      	bne.n	8011700 <showall+0x39c>
 8011652:	4b2a      	ldr	r3, [pc, #168]	@ (80116fc <showall+0x398>)
 8011654:	e055      	b.n	8011702 <showall+0x39e>
 8011656:	bf00      	nop
 8011658:	20001530 	.word	0x20001530
 801165c:	08023438 	.word	0x08023438
 8011660:	08023444 	.word	0x08023444
 8011664:	20001550 	.word	0x20001550
 8011668:	40020000 	.word	0x40020000
 801166c:	08023980 	.word	0x08023980
 8011670:	20001838 	.word	0x20001838
 8011674:	20001578 	.word	0x20001578
 8011678:	0802344c 	.word	0x0802344c
 801167c:	20001a74 	.word	0x20001a74
 8011680:	08023474 	.word	0x08023474
 8011684:	20001898 	.word	0x20001898
 8011688:	20002328 	.word	0x20002328
 801168c:	0802347c 	.word	0x0802347c
 8011690:	08023494 	.word	0x08023494
 8011694:	080234a8 	.word	0x080234a8
 8011698:	08022fa4 	.word	0x08022fa4
 801169c:	080234b8 	.word	0x080234b8
 80116a0:	20001399 	.word	0x20001399
 80116a4:	080234e8 	.word	0x080234e8
 80116a8:	08023518 	.word	0x08023518
 80116ac:	08023548 	.word	0x08023548
 80116b0:	200013cb 	.word	0x200013cb
 80116b4:	08023578 	.word	0x08023578
 80116b8:	200014c5 	.word	0x200014c5
 80116bc:	080235a8 	.word	0x080235a8
 80116c0:	20001330 	.word	0x20001330
 80116c4:	080235d8 	.word	0x080235d8
 80116c8:	2000142f 	.word	0x2000142f
 80116cc:	08023608 	.word	0x08023608
 80116d0:	200012cc 	.word	0x200012cc
 80116d4:	08023638 	.word	0x08023638
 80116d8:	0802366c 	.word	0x0802366c
 80116dc:	0802369c 	.word	0x0802369c
 80116e0:	080236cc 	.word	0x080236cc
 80116e4:	080236fc 	.word	0x080236fc
 80116e8:	0802372c 	.word	0x0802372c
 80116ec:	0802375c 	.word	0x0802375c
 80116f0:	0802378c 	.word	0x0802378c
 80116f4:	080237c0 	.word	0x080237c0
 80116f8:	080237f4 	.word	0x080237f4
 80116fc:	0802334c 	.word	0x0802334c
 8011700:	4b28      	ldr	r3, [pc, #160]	@ (80117a4 <showall+0x440>)
 8011702:	461a      	mov	r2, r3
 8011704:	4928      	ldr	r1, [pc, #160]	@ (80117a8 <showall+0x444>)
 8011706:	68f8      	ldr	r0, [r7, #12]
 8011708:	f7fd ff08 	bl	800f51c <cli_printf>
	cli_printf(cli, " *Pm2.5            | %s                       ", buff_pm);
 801170c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8011710:	461a      	mov	r2, r3
 8011712:	4926      	ldr	r1, [pc, #152]	@ (80117ac <showall+0x448>)
 8011714:	68f8      	ldr	r0, [r7, #12]
 8011716:	f7fd ff01 	bl	800f51c <cli_printf>
	cli_printf(cli, " *Port             | Inactive                 ");
 801171a:	4925      	ldr	r1, [pc, #148]	@ (80117b0 <showall+0x44c>)
 801171c:	68f8      	ldr	r0, [r7, #12]
 801171e:	f7fd fefd 	bl	800f51c <cli_printf>
	cli_printf(cli, " *Battery          | %0.2f                    ",
			_RunTime_Packet.battery_voltage);
 8011722:	4b24      	ldr	r3, [pc, #144]	@ (80117b4 <showall+0x450>)
 8011724:	6a1b      	ldr	r3, [r3, #32]
	cli_printf(cli, " *Battery          | %0.2f                    ",
 8011726:	4618      	mov	r0, r3
 8011728:	f7ee ff26 	bl	8000578 <__aeabi_f2d>
 801172c:	4602      	mov	r2, r0
 801172e:	460b      	mov	r3, r1
 8011730:	4921      	ldr	r1, [pc, #132]	@ (80117b8 <showall+0x454>)
 8011732:	68f8      	ldr	r0, [r7, #12]
 8011734:	f7fd fef2 	bl	800f51c <cli_printf>
	cli_printf(cli, " *Last_Packet      | [Date:%02d.%02d.%02d] [Time: %02d:%02d:%02d] [Filename: %s] [Packet Status: %s]",
 8011738:	4b20      	ldr	r3, [pc, #128]	@ (80117bc <showall+0x458>)
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	461d      	mov	r5, r3
 801173e:	4b20      	ldr	r3, [pc, #128]	@ (80117c0 <showall+0x45c>)
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	461e      	mov	r6, r3
 8011744:	4b1f      	ldr	r3, [pc, #124]	@ (80117c4 <showall+0x460>)
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	461a      	mov	r2, r3
 801174a:	4b1f      	ldr	r3, [pc, #124]	@ (80117c8 <showall+0x464>)
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	4619      	mov	r1, r3
 8011750:	4b1e      	ldr	r3, [pc, #120]	@ (80117cc <showall+0x468>)
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	4618      	mov	r0, r3
 8011756:	4b1e      	ldr	r3, [pc, #120]	@ (80117d0 <showall+0x46c>)
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	461c      	mov	r4, r3
 801175c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011760:	9305      	str	r3, [sp, #20]
 8011762:	4b1c      	ldr	r3, [pc, #112]	@ (80117d4 <showall+0x470>)
 8011764:	9304      	str	r3, [sp, #16]
 8011766:	9403      	str	r4, [sp, #12]
 8011768:	9002      	str	r0, [sp, #8]
 801176a:	9101      	str	r1, [sp, #4]
 801176c:	9200      	str	r2, [sp, #0]
 801176e:	4633      	mov	r3, r6
 8011770:	462a      	mov	r2, r5
 8011772:	4919      	ldr	r1, [pc, #100]	@ (80117d8 <showall+0x474>)
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f7fd fed1 	bl	800f51c <cli_printf>
			fileWrite_day, fileWrite_month, fileWrite_year, fileWrite_hour,
			fileWrite_min, fileWrite_sec, _Flash_Packet.filename_ver_date,
			buff_filewritten);
	cli_printf(cli, " *Scheduled_Packet | [Time: %s]               ",
 801177a:	4a18      	ldr	r2, [pc, #96]	@ (80117dc <showall+0x478>)
 801177c:	4918      	ldr	r1, [pc, #96]	@ (80117e0 <showall+0x47c>)
 801177e:	68f8      	ldr	r0, [r7, #12]
 8011780:	f7fd fecc 	bl	800f51c <cli_printf>
			scheduled_packet);

	cli_printf(cli, "");
 8011784:	4917      	ldr	r1, [pc, #92]	@ (80117e4 <showall+0x480>)
 8011786:	68f8      	ldr	r0, [r7, #12]
 8011788:	f7fd fec8 	bl	800f51c <cli_printf>
	cli_printf(cli, "");
 801178c:	4915      	ldr	r1, [pc, #84]	@ (80117e4 <showall+0x480>)
 801178e:	68f8      	ldr	r0, [r7, #12]
 8011790:	f7fd fec4 	bl	800f51c <cli_printf>
	cli_printf(cli, "");
 8011794:	4913      	ldr	r1, [pc, #76]	@ (80117e4 <showall+0x480>)
 8011796:	68f8      	ldr	r0, [r7, #12]
 8011798:	f7fd fec0 	bl	800f51c <cli_printf>
}
 801179c:	bf00      	nop
 801179e:	37d4      	adds	r7, #212	@ 0xd4
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117a4:	08023354 	.word	0x08023354
 80117a8:	08023828 	.word	0x08023828
 80117ac:	08023858 	.word	0x08023858
 80117b0:	08023888 	.word	0x08023888
 80117b4:	20001530 	.word	0x20001530
 80117b8:	080238b8 	.word	0x080238b8
 80117bc:	20002322 	.word	0x20002322
 80117c0:	20002323 	.word	0x20002323
 80117c4:	20002324 	.word	0x20002324
 80117c8:	20002325 	.word	0x20002325
 80117cc:	20002326 	.word	0x20002326
 80117d0:	20002327 	.word	0x20002327
 80117d4:	200014c5 	.word	0x200014c5
 80117d8:	080238e8 	.word	0x080238e8
 80117dc:	2000002c 	.word	0x2000002c
 80117e0:	08023950 	.word	0x08023950
 80117e4:	08022fa4 	.word	0x08022fa4

080117e8 <systemversion>:

void systemversion(EmbeddedCli *cli, char *args, void *context) {
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b084      	sub	sp, #16
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	60f8      	str	r0, [r7, #12]
 80117f0:	60b9      	str	r1, [r7, #8]
 80117f2:	607a      	str	r2, [r7, #4]


	cli_printf(cli, "");
 80117f4:	4911      	ldr	r1, [pc, #68]	@ (801183c <systemversion+0x54>)
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	f7fd fe90 	bl	800f51c <cli_printf>
		cli_printf(cli, "");
 80117fc:	490f      	ldr	r1, [pc, #60]	@ (801183c <systemversion+0x54>)
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f7fd fe8c 	bl	800f51c <cli_printf>
		cli_printf(cli, "");
 8011804:	490d      	ldr	r1, [pc, #52]	@ (801183c <systemversion+0x54>)
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f7fd fe88 	bl	800f51c <cli_printf>

		cli_printf(cli, " *Hardware | TF410 Version 1.3                       ");
 801180c:	490c      	ldr	r1, [pc, #48]	@ (8011840 <systemversion+0x58>)
 801180e:	68f8      	ldr	r0, [r7, #12]
 8011810:	f7fd fe84 	bl	800f51c <cli_printf>
		cli_printf(cli, " *Software | TF410 Version 1.5                       ");
 8011814:	490b      	ldr	r1, [pc, #44]	@ (8011844 <systemversion+0x5c>)
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f7fd fe80 	bl	800f51c <cli_printf>

		cli_printf(cli, "");
 801181c:	4907      	ldr	r1, [pc, #28]	@ (801183c <systemversion+0x54>)
 801181e:	68f8      	ldr	r0, [r7, #12]
 8011820:	f7fd fe7c 	bl	800f51c <cli_printf>
			cli_printf(cli, "");
 8011824:	4905      	ldr	r1, [pc, #20]	@ (801183c <systemversion+0x54>)
 8011826:	68f8      	ldr	r0, [r7, #12]
 8011828:	f7fd fe78 	bl	800f51c <cli_printf>
			cli_printf(cli, "");
 801182c:	4903      	ldr	r1, [pc, #12]	@ (801183c <systemversion+0x54>)
 801182e:	68f8      	ldr	r0, [r7, #12]
 8011830:	f7fd fe74 	bl	800f51c <cli_printf>

}
 8011834:	bf00      	nop
 8011836:	3710      	adds	r7, #16
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	08022fa4 	.word	0x08022fa4
 8011840:	080239a0 	.word	0x080239a0
 8011844:	080239d8 	.word	0x080239d8

08011848 <aboutDev>:

void aboutDev(EmbeddedCli *cli, char *args, void *context)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	607a      	str	r2, [r7, #4]
	  cli_printf(cli, "");
 8011854:	4917      	ldr	r1, [pc, #92]	@ (80118b4 <aboutDev+0x6c>)
 8011856:	68f8      	ldr	r0, [r7, #12]
 8011858:	f7fd fe60 	bl	800f51c <cli_printf>
	cli_printf(cli, "");
 801185c:	4915      	ldr	r1, [pc, #84]	@ (80118b4 <aboutDev+0x6c>)
 801185e:	68f8      	ldr	r0, [r7, #12]
 8011860:	f7fd fe5c 	bl	800f51c <cli_printf>
	cli_printf(cli, "This product is powered by BuildUp! "); //TM 0x99
 8011864:	4914      	ldr	r1, [pc, #80]	@ (80118b8 <aboutDev+0x70>)
 8011866:	68f8      	ldr	r0, [r7, #12]
 8011868:	f7fd fe58 	bl	800f51c <cli_printf>
	cli_printf(cli, "");
 801186c:	4911      	ldr	r1, [pc, #68]	@ (80118b4 <aboutDev+0x6c>)
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	f7fd fe54 	bl	800f51c <cli_printf>
	cli_printf(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8011874:	4911      	ldr	r1, [pc, #68]	@ (80118bc <aboutDev+0x74>)
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f7fd fe50 	bl	800f51c <cli_printf>
	cli_printf(cli, "");
 801187c:	490d      	ldr	r1, [pc, #52]	@ (80118b4 <aboutDev+0x6c>)
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f7fd fe4c 	bl	800f51c <cli_printf>
	cli_printf(cli, "Montreal, Canada");
 8011884:	490e      	ldr	r1, [pc, #56]	@ (80118c0 <aboutDev+0x78>)
 8011886:	68f8      	ldr	r0, [r7, #12]
 8011888:	f7fd fe48 	bl	800f51c <cli_printf>
	cli_printf(cli, "");
 801188c:	4909      	ldr	r1, [pc, #36]	@ (80118b4 <aboutDev+0x6c>)
 801188e:	68f8      	ldr	r0, [r7, #12]
 8011890:	f7fd fe44 	bl	800f51c <cli_printf>
	cli_printf(cli, "https://thingsfactory.com");
 8011894:	490b      	ldr	r1, [pc, #44]	@ (80118c4 <aboutDev+0x7c>)
 8011896:	68f8      	ldr	r0, [r7, #12]
 8011898:	f7fd fe40 	bl	800f51c <cli_printf>
	cli_printf(cli, "");
 801189c:	4905      	ldr	r1, [pc, #20]	@ (80118b4 <aboutDev+0x6c>)
 801189e:	68f8      	ldr	r0, [r7, #12]
 80118a0:	f7fd fe3c 	bl	800f51c <cli_printf>
	cli_printf(cli, "");
 80118a4:	4903      	ldr	r1, [pc, #12]	@ (80118b4 <aboutDev+0x6c>)
 80118a6:	68f8      	ldr	r0, [r7, #12]
 80118a8:	f7fd fe38 	bl	800f51c <cli_printf>
}
 80118ac:	bf00      	nop
 80118ae:	3710      	adds	r7, #16
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	08022fa4 	.word	0x08022fa4
 80118b8:	08023a10 	.word	0x08023a10
 80118bc:	08023a38 	.word	0x08023a38
 80118c0:	08023a60 	.word	0x08023a60
 80118c4:	08023a74 	.word	0x08023a74

080118c8 <initializeEmbeddedCli>:
/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 80118c8:	b5b0      	push	{r4, r5, r7, lr}
 80118ca:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 80118ce:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 80118d0:	f000 fe3b 	bl	801254a <embeddedCliNewDefault>
 80118d4:	4603      	mov	r3, r0
 80118d6:	4aa9      	ldr	r2, [pc, #676]	@ (8011b7c <initializeEmbeddedCli+0x2b4>)
 80118d8:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 80118da:	4ba9      	ldr	r3, [pc, #676]	@ (8011b80 <initializeEmbeddedCli+0x2b8>)
 80118dc:	f507 744d 	add.w	r4, r7, #820	@ 0x334
 80118e0:	461d      	mov	r5, r3
 80118e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118e6:	682b      	ldr	r3, [r5, #0]
 80118e8:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 80118ea:	4ba6      	ldr	r3, [pc, #664]	@ (8011b84 <initializeEmbeddedCli+0x2bc>)
 80118ec:	f507 7448 	add.w	r4, r7, #800	@ 0x320
 80118f0:	461d      	mov	r5, r3
 80118f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118f6:	682b      	ldr	r3, [r5, #0]
 80118f8:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor",
			.tokenizeArgs = true, .context = NULL, .binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature",
 80118fa:	4ba3      	ldr	r3, [pc, #652]	@ (8011b88 <initializeEmbeddedCli+0x2c0>)
 80118fc:	f507 7443 	add.w	r4, r7, #780	@ 0x30c
 8011900:	461d      	mov	r5, r3
 8011902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011906:	682b      	ldr	r3, [r5, #0]
 8011908:	6023      	str	r3, [r4, #0]
			.help = "Unique device identifier(from STM32 electronic signature)",
			.tokenizeArgs = true, .context = NULL, .binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 801190a:	4ba0      	ldr	r3, [pc, #640]	@ (8011b8c <initializeEmbeddedCli+0x2c4>)
 801190c:	f507 743e 	add.w	r4, r7, #760	@ 0x2f8
 8011910:	461d      	mov	r5, r3
 8011912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011916:	682b      	ldr	r3, [r5, #0]
 8011918:	6023      	str	r3, [r4, #0]
			"Asset number assigned to the device", .tokenizeArgs = true,
			.context = NULL, .binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 801191a:	4b9d      	ldr	r3, [pc, #628]	@ (8011b90 <initializeEmbeddedCli+0x2c8>)
 801191c:	f507 7439 	add.w	r4, r7, #740	@ 0x2e4
 8011920:	461d      	mov	r5, r3
 8011922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011926:	682b      	ldr	r3, [r5, #0]
 8011928:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Set_name = { .name = "set-name", .help =
//				"Optional field to assign name to the device", .tokenizeArgs = true, .context = NULL,
//				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 801192a:	4b9a      	ldr	r3, [pc, #616]	@ (8011b94 <initializeEmbeddedCli+0x2cc>)
 801192c:	f507 7434 	add.w	r4, r7, #720	@ 0x2d0
 8011930:	461d      	mov	r5, r3
 8011932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011936:	682b      	ldr	r3, [r5, #0]
 8011938:	6023      	str	r3, [r4, #0]
			"Optional field to assign group to the device",
			.tokenizeArgs = true, .context = NULL, .binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help = "gets ID",
 801193a:	4b97      	ldr	r3, [pc, #604]	@ (8011b98 <initializeEmbeddedCli+0x2d0>)
 801193c:	f507 742f 	add.w	r4, r7, #700	@ 0x2bc
 8011940:	461d      	mov	r5, r3
 8011942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011946:	682b      	ldr	r3, [r5, #0]
 8011948:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 801194a:	4b94      	ldr	r3, [pc, #592]	@ (8011b9c <initializeEmbeddedCli+0x2d4>)
 801194c:	f507 742a 	add.w	r4, r7, #680	@ 0x2a8
 8011950:	461d      	mov	r5, r3
 8011952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011956:	682b      	ldr	r3, [r5, #0]
 8011958:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Get_name = { .name = "get-name", .help =
//				"gets name", .tokenizeArgs = true, .context = NULL,
//				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help = "gets group",
 801195a:	4b91      	ldr	r3, [pc, #580]	@ (8011ba0 <initializeEmbeddedCli+0x2d8>)
 801195c:	f507 7425 	add.w	r4, r7, #660	@ 0x294
 8011960:	461d      	mov	r5, r3
 8011962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011966:	682b      	ldr	r3, [r5, #0]
 8011968:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 801196a:	4b8e      	ldr	r3, [pc, #568]	@ (8011ba4 <initializeEmbeddedCli+0x2dc>)
 801196c:	f507 7420 	add.w	r4, r7, #640	@ 0x280
 8011970:	461d      	mov	r5, r3
 8011972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011976:	682b      	ldr	r3, [r5, #0]
 8011978:	6023      	str	r3, [r4, #0]
			"In day:month:year", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help = "In hh:mm:ss",
 801197a:	4b8b      	ldr	r3, [pc, #556]	@ (8011ba8 <initializeEmbeddedCli+0x2e0>)
 801197c:	f507 741b 	add.w	r4, r7, #620	@ 0x26c
 8011980:	461d      	mov	r5, r3
 8011982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011986:	682b      	ldr	r3, [r5, #0]
 8011988:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 801198a:	4b88      	ldr	r3, [pc, #544]	@ (8011bac <initializeEmbeddedCli+0x2e4>)
 801198c:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8011990:	461d      	mov	r5, r3
 8011992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011996:	682b      	ldr	r3, [r5, #0]
 8011998:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 801199a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801199e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80119a2:	4a83      	ldr	r2, [pc, #524]	@ (8011bb0 <initializeEmbeddedCli+0x2e8>)
 80119a4:	461c      	mov	r4, r3
 80119a6:	4615      	mov	r5, r2
 80119a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119ac:	682b      	ldr	r3, [r5, #0]
 80119ae:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 80119b0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80119b8:	4a7e      	ldr	r2, [pc, #504]	@ (8011bb4 <initializeEmbeddedCli+0x2ec>)
 80119ba:	461c      	mov	r4, r3
 80119bc:	4615      	mov	r5, r2
 80119be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119c2:	682b      	ldr	r3, [r5, #0]
 80119c4:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true,
			.context = NULL, .binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 80119c6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80119ce:	4a7a      	ldr	r2, [pc, #488]	@ (8011bb8 <initializeEmbeddedCli+0x2f0>)
 80119d0:	461c      	mov	r4, r3
 80119d2:	4615      	mov	r5, r2
 80119d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119d8:	682b      	ldr	r3, [r5, #0]
 80119da:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };

	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 80119dc:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80119e4:	4a75      	ldr	r2, [pc, #468]	@ (8011bbc <initializeEmbeddedCli+0x2f4>)
 80119e6:	461c      	mov	r4, r3
 80119e8:	4615      	mov	r5, r2
 80119ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119ee:	682b      	ldr	r3, [r5, #0]
 80119f0:	6023      	str	r3, [r4, #0]
			"Filename prefix as in \"value+date\" in file naming convention",
			.tokenizeArgs = true, .context = NULL, .binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 80119f2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119f6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80119fa:	4a71      	ldr	r2, [pc, #452]	@ (8011bc0 <initializeEmbeddedCli+0x2f8>)
 80119fc:	461c      	mov	r4, r3
 80119fe:	4615      	mov	r5, r2
 8011a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a04:	682b      	ldr	r3, [r5, #0]
 8011a06:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL, .binding =
			GetFilename };

	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 8011a08:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a0c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011a10:	4a6c      	ldr	r2, [pc, #432]	@ (8011bc4 <initializeEmbeddedCli+0x2fc>)
 8011a12:	461c      	mov	r4, r3
 8011a14:	4615      	mov	r5, r2
 8011a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a1a:	682b      	ldr	r3, [r5, #0]
 8011a1c:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 8011a1e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a22:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011a26:	4a68      	ldr	r2, [pc, #416]	@ (8011bc8 <initializeEmbeddedCli+0x300>)
 8011a28:	461c      	mov	r4, r3
 8011a2a:	4615      	mov	r5, r2
 8011a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a30:	682b      	ldr	r3, [r5, #0]
 8011a32:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL, .binding =
			GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 8011a34:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a38:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011a3c:	4a63      	ldr	r2, [pc, #396]	@ (8011bcc <initializeEmbeddedCli+0x304>)
 8011a3e:	461c      	mov	r4, r3
 8011a40:	4615      	mov	r5, r2
 8011a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a46:	682b      	ldr	r3, [r5, #0]
 8011a48:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context =
			NULL, .binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-force-calibration", .help =
 8011a4a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a4e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8011a52:	4a5f      	ldr	r2, [pc, #380]	@ (8011bd0 <initializeEmbeddedCli+0x308>)
 8011a54:	461c      	mov	r4, r3
 8011a56:	4615      	mov	r5, r2
 8011a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a5c:	682b      	ldr	r3, [r5, #0]
 8011a5e:	6023      	str	r3, [r4, #0]
			"Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding getCo2_Calibration = { .name = "get-co2-force-calibration-status", .help =
 8011a60:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a64:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8011a68:	4a5a      	ldr	r2, [pc, #360]	@ (8011bd4 <initializeEmbeddedCli+0x30c>)
 8011a6a:	461c      	mov	r4, r3
 8011a6c:	4615      	mov	r5, r2
 8011a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a72:	682b      	ldr	r3, [r5, #0]
 8011a74:	6023      	str	r3, [r4, #0]
			"Get status of Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = statco2calibrate };


	CliCommandBinding Co2_AutoCalibration = { .name = "co2-auto-calibration", .help =
 8011a76:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a7a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011a7e:	4a56      	ldr	r2, [pc, #344]	@ (8011bd8 <initializeEmbeddedCli+0x310>)
 8011a80:	461c      	mov	r4, r3
 8011a82:	4615      	mov	r5, r2
 8011a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a88:	682b      	ldr	r3, [r5, #0]
 8011a8a:	6023      	str	r3, [r4, #0]
			"Enable/Disable auto calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2_auto_calibration };


	CliCommandBinding getCo2_AutoCalibration = { .name = "get-co2-auto-calibration", .help =
 8011a8c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a90:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011a94:	4a51      	ldr	r2, [pc, #324]	@ (8011bdc <initializeEmbeddedCli+0x314>)
 8011a96:	461c      	mov	r4, r3
 8011a98:	4615      	mov	r5, r2
 8011a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a9e:	682b      	ldr	r3, [r5, #0]
 8011aa0:	6023      	str	r3, [r4, #0]
			"Get Co2 sensor auto calibration status ", .tokenizeArgs = true, .context = NULL,
			.binding = get_auto_calibration };

	CliCommandBinding Co2_Tempoffset = { .name = "set-co2-temp-offset", .help =
 8011aa2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011aa6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8011aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8011be0 <initializeEmbeddedCli+0x318>)
 8011aac:	461c      	mov	r4, r3
 8011aae:	4615      	mov	r5, r2
 8011ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ab4:	682b      	ldr	r3, [r5, #0]
 8011ab6:	6023      	str	r3, [r4, #0]
			"Set temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_temp_offset };

	CliCommandBinding getCo2_Tempoffset = { .name = "get-co2-temp-offset", .help =
 8011ab8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011abc:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8011ac0:	4a48      	ldr	r2, [pc, #288]	@ (8011be4 <initializeEmbeddedCli+0x31c>)
 8011ac2:	461c      	mov	r4, r3
 8011ac4:	4615      	mov	r5, r2
 8011ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011aca:	682b      	ldr	r3, [r5, #0]
 8011acc:	6023      	str	r3, [r4, #0]
			"Get temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_temp_offset };

	CliCommandBinding Co2_altitudecompsentation = { .name = "set-co2-altitude-comp", .help =
 8011ace:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ad2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011ad6:	4a44      	ldr	r2, [pc, #272]	@ (8011be8 <initializeEmbeddedCli+0x320>)
 8011ad8:	461c      	mov	r4, r3
 8011ada:	4615      	mov	r5, r2
 8011adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ae0:	682b      	ldr	r3, [r5, #0]
 8011ae2:	6023      	str	r3, [r4, #0]
			"Set altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_altitude_compensation };

	CliCommandBinding getCo2_altitudecompsentation = { .name = "get-co2-altitude-comp", .help =
 8011ae4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ae8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8011aec:	4a3f      	ldr	r2, [pc, #252]	@ (8011bec <initializeEmbeddedCli+0x324>)
 8011aee:	461c      	mov	r4, r3
 8011af0:	4615      	mov	r5, r2
 8011af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011af6:	682b      	ldr	r3, [r5, #0]
 8011af8:	6023      	str	r3, [r4, #0]
			"Get altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_altitude_compensation };

	CliCommandBinding Co2_Calibration_program = { .name = "run-co2-calib-prog", .help =
 8011afa:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011afe:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8011b02:	4a3b      	ldr	r2, [pc, #236]	@ (8011bf0 <initializeEmbeddedCli+0x328>)
 8011b04:	461c      	mov	r4, r3
 8011b06:	4615      	mov	r5, r2
 8011b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b0c:	682b      	ldr	r3, [r5, #0]
 8011b0e:	6023      	str	r3, [r4, #0]
			"Run Co2 sensor calibration program", .tokenizeArgs = true, .context = NULL,
			.binding = run_co2_calibration_routine };

	CliCommandBinding set_Co2_samples= { .name = "set-co2-samples", .help =
 8011b10:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b14:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8011b18:	4a36      	ldr	r2, [pc, #216]	@ (8011bf4 <initializeEmbeddedCli+0x32c>)
 8011b1a:	461c      	mov	r4, r3
 8011b1c:	4615      	mov	r5, r2
 8011b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b22:	682b      	ldr	r3, [r5, #0]
 8011b24:	6023      	str	r3, [r4, #0]
			"Set how much samples you want Co2 sensor to take", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_samples };

	CliCommandBinding get_Co2_samples= { .name = "get-co2-samples", .help =
 8011b26:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b2a:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8011b2e:	4a32      	ldr	r2, [pc, #200]	@ (8011bf8 <initializeEmbeddedCli+0x330>)
 8011b30:	461c      	mov	r4, r3
 8011b32:	4615      	mov	r5, r2
 8011b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b38:	682b      	ldr	r3, [r5, #0]
 8011b3a:	6023      	str	r3, [r4, #0]
			"Get Co2 samples", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_samples };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 8011b3c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b40:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8011b44:	4a2d      	ldr	r2, [pc, #180]	@ (8011bfc <initializeEmbeddedCli+0x334>)
 8011b46:	461c      	mov	r4, r3
 8011b48:	4615      	mov	r5, r2
 8011b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b4e:	682b      	ldr	r3, [r5, #0]
 8011b50:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 8011b52:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b56:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8011b5a:	4a29      	ldr	r2, [pc, #164]	@ (8011c00 <initializeEmbeddedCli+0x338>)
 8011b5c:	461c      	mov	r4, r3
 8011b5e:	4615      	mov	r5, r2
 8011b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b64:	682b      	ldr	r3, [r5, #0]
 8011b66:	6023      	str	r3, [r4, #0]
			"Co2 measured in ppm", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8011b68:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b6c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8011b70:	4a24      	ldr	r2, [pc, #144]	@ (8011c04 <initializeEmbeddedCli+0x33c>)
 8011b72:	461c      	mov	r4, r3
 8011b74:	4615      	mov	r5, r2
 8011b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b7a:	e045      	b.n	8011c08 <initializeEmbeddedCli+0x340>
 8011b7c:	20001b2c 	.word	0x20001b2c
 8011b80:	08023aac 	.word	0x08023aac
 8011b84:	08023b00 	.word	0x08023b00
 8011b88:	08023b68 	.word	0x08023b68
 8011b8c:	08023ba8 	.word	0x08023ba8
 8011b90:	08023c08 	.word	0x08023c08
 8011b94:	08023c58 	.word	0x08023c58
 8011b98:	08023c7c 	.word	0x08023c7c
 8011b9c:	08023cb0 	.word	0x08023cb0
 8011ba0:	08023cdc 	.word	0x08023cdc
 8011ba4:	08023d10 	.word	0x08023d10
 8011ba8:	08023d3c 	.word	0x08023d3c
 8011bac:	08023d70 	.word	0x08023d70
 8011bb0:	08023da4 	.word	0x08023da4
 8011bb4:	08023df0 	.word	0x08023df0
 8011bb8:	08023e28 	.word	0x08023e28
 8011bbc:	08023e8c 	.word	0x08023e8c
 8011bc0:	08023ec0 	.word	0x08023ec0
 8011bc4:	08023efc 	.word	0x08023efc
 8011bc8:	08023f30 	.word	0x08023f30
 8011bcc:	08023f70 	.word	0x08023f70
 8011bd0:	08023fbc 	.word	0x08023fbc
 8011bd4:	08024024 	.word	0x08024024
 8011bd8:	08024080 	.word	0x08024080
 8011bdc:	080240d8 	.word	0x080240d8
 8011be0:	08024128 	.word	0x08024128
 8011be4:	08024178 	.word	0x08024178
 8011be8:	080241cc 	.word	0x080241cc
 8011bec:	08024220 	.word	0x08024220
 8011bf0:	0802426c 	.word	0x0802426c
 8011bf4:	080242c4 	.word	0x080242c4
 8011bf8:	080242f8 	.word	0x080242f8
 8011bfc:	08024330 	.word	0x08024330
 8011c00:	08024364 	.word	0x08024364
 8011c04:	080243ac 	.word	0x080243ac
 8011c08:	682b      	ldr	r3, [r5, #0]
 8011c0a:	6023      	str	r3, [r4, #0]
			"Temperature measured in Celsius", .tokenizeArgs = true, .context =
			NULL, .binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 8011c0c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c10:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8011c14:	4acb      	ldr	r2, [pc, #812]	@ (8011f44 <initializeEmbeddedCli+0x67c>)
 8011c16:	461c      	mov	r4, r3
 8011c18:	4615      	mov	r5, r2
 8011c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c1e:	682b      	ldr	r3, [r5, #0]
 8011c20:	6023      	str	r3, [r4, #0]
			"Humidity measured in % of relative", .tokenizeArgs = true,
			.context = NULL, .binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 8011c22:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c26:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8011c2a:	4ac7      	ldr	r2, [pc, #796]	@ (8011f48 <initializeEmbeddedCli+0x680>)
 8011c2c:	461c      	mov	r4, r3
 8011c2e:	4615      	mov	r5, r2
 8011c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c34:	682b      	ldr	r3, [r5, #0]
 8011c36:	6023      	str	r3, [r4, #0]
			"Movement detected - yes or no", .tokenizeArgs = true, .context =
			NULL, .binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 8011c38:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c3c:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8011c40:	4ac2      	ldr	r2, [pc, #776]	@ (8011f4c <initializeEmbeddedCli+0x684>)
 8011c42:	461c      	mov	r4, r3
 8011c44:	4615      	mov	r5, r2
 8011c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c4a:	682b      	ldr	r3, [r5, #0]
 8011c4c:	6023      	str	r3, [r4, #0]
			"Check air quality level", .tokenizeArgs = true, .context = NULL,
			.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 8011c4e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c52:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8011c56:	4abe      	ldr	r2, [pc, #760]	@ (8011f50 <initializeEmbeddedCli+0x688>)
 8011c58:	461c      	mov	r4, r3
 8011c5a:	4615      	mov	r5, r2
 8011c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c60:	682b      	ldr	r3, [r5, #0]
 8011c62:	6023      	str	r3, [r4, #0]
			"Measure voltage from 4.17v(Full Charge) to 3.0v(Battery Low)",
			.tokenizeArgs = true, .context = NULL, .binding = BattVolt };

	CliCommandBinding _port = { .name = "port", .help = "Inactive field",
 8011c64:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c68:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8011c6c:	4ab9      	ldr	r2, [pc, #740]	@ (8011f54 <initializeEmbeddedCli+0x68c>)
 8011c6e:	461c      	mov	r4, r3
 8011c70:	4615      	mov	r5, r2
 8011c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c76:	682b      	ldr	r3, [r5, #0]
 8011c78:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = port };

	CliCommandBinding _showall = { .name = "show-all", .help =
 8011c7a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c7e:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8011c82:	4ab5      	ldr	r2, [pc, #724]	@ (8011f58 <initializeEmbeddedCli+0x690>)
 8011c84:	461c      	mov	r4, r3
 8011c86:	4615      	mov	r5, r2
 8011c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c8c:	682b      	ldr	r3, [r5, #0]
 8011c8e:	6023      	str	r3, [r4, #0]
			"Shows all parameters", .tokenizeArgs = true, .context = NULL,
			.binding = showall };

	CliCommandBinding getversion = { .name = "get-version", .help =
 8011c90:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c94:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8011c98:	4ab0      	ldr	r2, [pc, #704]	@ (8011f5c <initializeEmbeddedCli+0x694>)
 8011c9a:	461c      	mov	r4, r3
 8011c9c:	4615      	mov	r5, r2
 8011c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ca2:	682b      	ldr	r3, [r5, #0]
 8011ca4:	6023      	str	r3, [r4, #0]
				"Shows hardware and software version", .tokenizeArgs = true, .context = NULL,
				.binding = systemversion };

	CliCommandBinding aboutdev = { .name = "about", .help =
 8011ca6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011caa:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8011cae:	4aac      	ldr	r2, [pc, #688]	@ (8011f60 <initializeEmbeddedCli+0x698>)
 8011cb0:	461c      	mov	r4, r3
 8011cb2:	4615      	mov	r5, r2
 8011cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cb8:	682b      	ldr	r3, [r5, #0]
 8011cba:	6023      	str	r3, [r4, #0]
				"Information about device", .tokenizeArgs = true, .context = NULL,
				.binding = aboutDev };

	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8011cbc:	4ba9      	ldr	r3, [pc, #676]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011cbe:	681c      	ldr	r4, [r3, #0]
 8011cc0:	466a      	mov	r2, sp
 8011cc2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8011cc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cca:	e882 0003 	stmia.w	r2, {r0, r1}
 8011cce:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8011cd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f000 fcf6 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8011cda:	4ba2      	ldr	r3, [pc, #648]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011cdc:	681c      	ldr	r4, [r3, #0]
 8011cde:	466a      	mov	r2, sp
 8011ce0:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 8011ce4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ce8:	e882 0003 	stmia.w	r2, {r0, r1}
 8011cec:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8011cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f000 fce7 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 8011cf8:	4b9a      	ldr	r3, [pc, #616]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011cfa:	681c      	ldr	r4, [r3, #0]
 8011cfc:	466a      	mov	r2, sp
 8011cfe:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8011d02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d06:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d0a:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8011d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d10:	4620      	mov	r0, r4
 8011d12:	f000 fcd8 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8011d16:	4b93      	ldr	r3, [pc, #588]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011d18:	681c      	ldr	r4, [r3, #0]
 8011d1a:	466a      	mov	r2, sp
 8011d1c:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 8011d20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d24:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d28:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8011d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d2e:	4620      	mov	r0, r4
 8011d30:	f000 fcc9 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 8011d34:	4b8b      	ldr	r3, [pc, #556]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011d36:	681c      	ldr	r4, [r3, #0]
 8011d38:	466a      	mov	r2, sp
 8011d3a:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8011d3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d42:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d46:	f507 7339 	add.w	r3, r7, #740	@ 0x2e4
 8011d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f000 fcba 	bl	80126c6 <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Set_name);
	embeddedCliAddBinding(cli, Set_group);
 8011d52:	4b84      	ldr	r3, [pc, #528]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011d54:	681c      	ldr	r4, [r3, #0]
 8011d56:	466a      	mov	r2, sp
 8011d58:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8011d5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d60:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d64:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8011d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f000 fcab 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 8011d70:	4b7c      	ldr	r3, [pc, #496]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011d72:	681c      	ldr	r4, [r3, #0]
 8011d74:	466a      	mov	r2, sp
 8011d76:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8011d7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d7e:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d82:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8011d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f000 fc9c 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8011d8e:	4b75      	ldr	r3, [pc, #468]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011d90:	681c      	ldr	r4, [r3, #0]
 8011d92:	466a      	mov	r2, sp
 8011d94:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 8011d98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d9c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011da0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8011da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011da6:	4620      	mov	r0, r4
 8011da8:	f000 fc8d 	bl	80126c6 <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Get_name);
	embeddedCliAddBinding(cli, Get_group);
 8011dac:	4b6d      	ldr	r3, [pc, #436]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011dae:	681c      	ldr	r4, [r3, #0]
 8011db0:	466a      	mov	r2, sp
 8011db2:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8011db6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011dba:	e882 0003 	stmia.w	r2, {r0, r1}
 8011dbe:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 8011dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	f000 fc7e 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 8011dca:	4b66      	ldr	r3, [pc, #408]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011dcc:	681c      	ldr	r4, [r3, #0]
 8011dce:	466a      	mov	r2, sp
 8011dd0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8011dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011dd8:	e882 0003 	stmia.w	r2, {r0, r1}
 8011ddc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8011de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011de2:	4620      	mov	r0, r4
 8011de4:	f000 fc6f 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 8011de8:	4b5e      	ldr	r3, [pc, #376]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011dea:	681c      	ldr	r4, [r3, #0]
 8011dec:	466a      	mov	r2, sp
 8011dee:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8011df2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011df6:	e882 0003 	stmia.w	r2, {r0, r1}
 8011dfa:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8011dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e00:	4620      	mov	r0, r4
 8011e02:	f000 fc60 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 8011e06:	4b57      	ldr	r3, [pc, #348]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011e08:	681c      	ldr	r4, [r3, #0]
 8011e0a:	466a      	mov	r2, sp
 8011e0c:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8011e10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e14:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e18:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8011e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f000 fc51 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8011e24:	4b4f      	ldr	r3, [pc, #316]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011e26:	681c      	ldr	r4, [r3, #0]
 8011e28:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011e30:	466d      	mov	r5, sp
 8011e32:	f103 020c 	add.w	r2, r3, #12
 8011e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e40:	4620      	mov	r0, r4
 8011e42:	f000 fc40 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8011e46:	4b47      	ldr	r3, [pc, #284]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011e48:	681c      	ldr	r4, [r3, #0]
 8011e4a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011e52:	466d      	mov	r5, sp
 8011e54:	f103 020c 	add.w	r2, r3, #12
 8011e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e62:	4620      	mov	r0, r4
 8011e64:	f000 fc2f 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8011e68:	4b3e      	ldr	r3, [pc, #248]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011e6a:	681c      	ldr	r4, [r3, #0]
 8011e6c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e74:	466d      	mov	r5, sp
 8011e76:	f103 020c 	add.w	r2, r3, #12
 8011e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e84:	4620      	mov	r0, r4
 8011e86:	f000 fc1e 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8011e8a:	4b36      	ldr	r3, [pc, #216]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011e8c:	681c      	ldr	r4, [r3, #0]
 8011e8e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e92:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8011e96:	466d      	mov	r5, sp
 8011e98:	f103 020c 	add.w	r2, r3, #12
 8011e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ea0:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f000 fc0d 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8011eac:	4b2d      	ldr	r3, [pc, #180]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011eae:	681c      	ldr	r4, [r3, #0]
 8011eb0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011eb4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8011eb8:	466d      	mov	r5, sp
 8011eba:	f103 020c 	add.w	r2, r3, #12
 8011ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ec2:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ec8:	4620      	mov	r0, r4
 8011eca:	f000 fbfc 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8011ece:	4b25      	ldr	r3, [pc, #148]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011ed0:	681c      	ldr	r4, [r3, #0]
 8011ed2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ed6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011eda:	466d      	mov	r5, sp
 8011edc:	f103 020c 	add.w	r2, r3, #12
 8011ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011eea:	4620      	mov	r0, r4
 8011eec:	f000 fbeb 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8011ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011ef2:	681c      	ldr	r4, [r3, #0]
 8011ef4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ef8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011efc:	466d      	mov	r5, sp
 8011efe:	f103 020c 	add.w	r2, r3, #12
 8011f02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f06:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	f000 fbda 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 8011f12:	4b14      	ldr	r3, [pc, #80]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011f14:	681c      	ldr	r4, [r3, #0]
 8011f16:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f1a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011f1e:	466d      	mov	r5, sp
 8011f20:	f103 020c 	add.w	r2, r3, #12
 8011f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f28:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f000 fbc9 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8011f34:	4b0b      	ldr	r3, [pc, #44]	@ (8011f64 <initializeEmbeddedCli+0x69c>)
 8011f36:	681c      	ldr	r4, [r3, #0]
 8011f38:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f3c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8011f40:	e012      	b.n	8011f68 <initializeEmbeddedCli+0x6a0>
 8011f42:	bf00      	nop
 8011f44:	080243f4 	.word	0x080243f4
 8011f48:	0802443c 	.word	0x0802443c
 8011f4c:	08024474 	.word	0x08024474
 8011f50:	080244d8 	.word	0x080244d8
 8011f54:	08024504 	.word	0x08024504
 8011f58:	0802453c 	.word	0x0802453c
 8011f5c:	08024580 	.word	0x08024580
 8011f60:	080245b8 	.word	0x080245b8
 8011f64:	20001b2c 	.word	0x20001b2c
 8011f68:	466d      	mov	r5, sp
 8011f6a:	f103 020c 	add.w	r2, r3, #12
 8011f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f72:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f000 fba4 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Calibration);
 8011f7e:	4bba      	ldr	r3, [pc, #744]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 8011f80:	681c      	ldr	r4, [r3, #0]
 8011f82:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f86:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8011f8a:	466d      	mov	r5, sp
 8011f8c:	f103 020c 	add.w	r2, r3, #12
 8011f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f94:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	f000 fb93 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_AutoCalibration);
 8011fa0:	4bb1      	ldr	r3, [pc, #708]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 8011fa2:	681c      	ldr	r4, [r3, #0]
 8011fa4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fa8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011fac:	466d      	mov	r5, sp
 8011fae:	f103 020c 	add.w	r2, r3, #12
 8011fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	f000 fb82 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_AutoCalibration);
 8011fc2:	4ba9      	ldr	r3, [pc, #676]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 8011fc4:	681c      	ldr	r4, [r3, #0]
 8011fc6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011fce:	466d      	mov	r5, sp
 8011fd0:	f103 020c 	add.w	r2, r3, #12
 8011fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f000 fb71 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Tempoffset);
 8011fe4:	4ba0      	ldr	r3, [pc, #640]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 8011fe6:	681c      	ldr	r4, [r3, #0]
 8011fe8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fec:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8011ff0:	466d      	mov	r5, sp
 8011ff2:	f103 020c 	add.w	r2, r3, #12
 8011ff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ffa:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012000:	4620      	mov	r0, r4
 8012002:	f000 fb60 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Tempoffset);
 8012006:	4b98      	ldr	r3, [pc, #608]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 8012008:	681c      	ldr	r4, [r3, #0]
 801200a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801200e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8012012:	466d      	mov	r5, sp
 8012014:	f103 020c 	add.w	r2, r3, #12
 8012018:	e892 0003 	ldmia.w	r2, {r0, r1}
 801201c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012022:	4620      	mov	r0, r4
 8012024:	f000 fb4f 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_altitudecompsentation);
 8012028:	4b8f      	ldr	r3, [pc, #572]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 801202a:	681c      	ldr	r4, [r3, #0]
 801202c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012030:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8012034:	466d      	mov	r5, sp
 8012036:	f103 020c 	add.w	r2, r3, #12
 801203a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801203e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012044:	4620      	mov	r0, r4
 8012046:	f000 fb3e 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_altitudecompsentation);
 801204a:	4b87      	ldr	r3, [pc, #540]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 801204c:	681c      	ldr	r4, [r3, #0]
 801204e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012052:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8012056:	466d      	mov	r5, sp
 8012058:	f103 020c 	add.w	r2, r3, #12
 801205c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012060:	e885 0003 	stmia.w	r5, {r0, r1}
 8012064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012066:	4620      	mov	r0, r4
 8012068:	f000 fb2d 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration_program);
 801206c:	4b7e      	ldr	r3, [pc, #504]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 801206e:	681c      	ldr	r4, [r3, #0]
 8012070:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012074:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8012078:	466d      	mov	r5, sp
 801207a:	f103 020c 	add.w	r2, r3, #12
 801207e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012082:	e885 0003 	stmia.w	r5, {r0, r1}
 8012086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012088:	4620      	mov	r0, r4
 801208a:	f000 fb1c 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, set_Co2_samples);
 801208e:	4b76      	ldr	r3, [pc, #472]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 8012090:	681c      	ldr	r4, [r3, #0]
 8012092:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012096:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 801209a:	466d      	mov	r5, sp
 801209c:	f103 020c 	add.w	r2, r3, #12
 80120a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80120a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120aa:	4620      	mov	r0, r4
 80120ac:	f000 fb0b 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, get_Co2_samples);
 80120b0:	4b6d      	ldr	r3, [pc, #436]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 80120b2:	681c      	ldr	r4, [r3, #0]
 80120b4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120b8:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80120bc:	466d      	mov	r5, sp
 80120be:	f103 020c 	add.w	r2, r3, #12
 80120c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80120ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120cc:	4620      	mov	r0, r4
 80120ce:	f000 fafa 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 80120d2:	4b65      	ldr	r3, [pc, #404]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 80120d4:	681c      	ldr	r4, [r3, #0]
 80120d6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120da:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80120de:	466d      	mov	r5, sp
 80120e0:	f103 020c 	add.w	r2, r3, #12
 80120e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80120ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120ee:	4620      	mov	r0, r4
 80120f0:	f000 fae9 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 80120f4:	4b5c      	ldr	r3, [pc, #368]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 80120f6:	681c      	ldr	r4, [r3, #0]
 80120f8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120fc:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8012100:	466d      	mov	r5, sp
 8012102:	f103 020c 	add.w	r2, r3, #12
 8012106:	e892 0003 	ldmia.w	r2, {r0, r1}
 801210a:	e885 0003 	stmia.w	r5, {r0, r1}
 801210e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012110:	4620      	mov	r0, r4
 8012112:	f000 fad8 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 8012116:	4b54      	ldr	r3, [pc, #336]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 8012118:	681c      	ldr	r4, [r3, #0]
 801211a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801211e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8012122:	466d      	mov	r5, sp
 8012124:	f103 020c 	add.w	r2, r3, #12
 8012128:	e892 0003 	ldmia.w	r2, {r0, r1}
 801212c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012132:	4620      	mov	r0, r4
 8012134:	f000 fac7 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8012138:	4b4b      	ldr	r3, [pc, #300]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 801213a:	681c      	ldr	r4, [r3, #0]
 801213c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012140:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8012144:	466d      	mov	r5, sp
 8012146:	f103 020c 	add.w	r2, r3, #12
 801214a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801214e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012154:	4620      	mov	r0, r4
 8012156:	f000 fab6 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 801215a:	4b43      	ldr	r3, [pc, #268]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 801215c:	681c      	ldr	r4, [r3, #0]
 801215e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012162:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8012166:	466d      	mov	r5, sp
 8012168:	f103 020c 	add.w	r2, r3, #12
 801216c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012170:	e885 0003 	stmia.w	r5, {r0, r1}
 8012174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012176:	4620      	mov	r0, r4
 8012178:	f000 faa5 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 801217c:	4b3a      	ldr	r3, [pc, #232]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 801217e:	681c      	ldr	r4, [r3, #0]
 8012180:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012184:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8012188:	466d      	mov	r5, sp
 801218a:	f103 020c 	add.w	r2, r3, #12
 801218e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012192:	e885 0003 	stmia.w	r5, {r0, r1}
 8012196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012198:	4620      	mov	r0, r4
 801219a:	f000 fa94 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 801219e:	4b32      	ldr	r3, [pc, #200]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 80121a0:	681c      	ldr	r4, [r3, #0]
 80121a2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121a6:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 80121aa:	466d      	mov	r5, sp
 80121ac:	f103 020c 	add.w	r2, r3, #12
 80121b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80121b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121ba:	4620      	mov	r0, r4
 80121bc:	f000 fa83 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _port);
 80121c0:	4b29      	ldr	r3, [pc, #164]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 80121c2:	681c      	ldr	r4, [r3, #0]
 80121c4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121c8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80121cc:	466d      	mov	r5, sp
 80121ce:	f103 020c 	add.w	r2, r3, #12
 80121d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80121da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121dc:	4620      	mov	r0, r4
 80121de:	f000 fa72 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _showall);
 80121e2:	4b21      	ldr	r3, [pc, #132]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 80121e4:	681c      	ldr	r4, [r3, #0]
 80121e6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121ea:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80121ee:	466d      	mov	r5, sp
 80121f0:	f103 020c 	add.w	r2, r3, #12
 80121f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80121fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121fe:	4620      	mov	r0, r4
 8012200:	f000 fa61 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getversion);
 8012204:	4b18      	ldr	r3, [pc, #96]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 8012206:	681c      	ldr	r4, [r3, #0]
 8012208:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801220c:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8012210:	466d      	mov	r5, sp
 8012212:	f103 020c 	add.w	r2, r3, #12
 8012216:	e892 0003 	ldmia.w	r2, {r0, r1}
 801221a:	e885 0003 	stmia.w	r5, {r0, r1}
 801221e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012220:	4620      	mov	r0, r4
 8012222:	f000 fa50 	bl	80126c6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, aboutdev);
 8012226:	4b10      	ldr	r3, [pc, #64]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 8012228:	681c      	ldr	r4, [r3, #0]
 801222a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801222e:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8012232:	466d      	mov	r5, sp
 8012234:	f103 020c 	add.w	r2, r3, #12
 8012238:	e892 0003 	ldmia.w	r2, {r0, r1}
 801223c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012240:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012242:	4620      	mov	r0, r4
 8012244:	f000 fa3f 	bl	80126c6 <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 8012248:	4b07      	ldr	r3, [pc, #28]	@ (8012268 <initializeEmbeddedCli+0x9a0>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	4a07      	ldr	r2, [pc, #28]	@ (801226c <initializeEmbeddedCli+0x9a4>)
 801224e:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 8012250:	4b07      	ldr	r3, [pc, #28]	@ (8012270 <initializeEmbeddedCli+0x9a8>)
 8012252:	2201      	movs	r2, #1
 8012254:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8012256:	4b07      	ldr	r3, [pc, #28]	@ (8012274 <initializeEmbeddedCli+0x9ac>)
 8012258:	2200      	movs	r2, #0
 801225a:	701a      	strb	r2, [r3, #0]
}
 801225c:	bf00      	nop
 801225e:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8012262:	46bd      	mov	sp, r7
 8012264:	bdb0      	pop	{r4, r5, r7, pc}
 8012266:	bf00      	nop
 8012268:	20001b2c 	.word	0x20001b2c
 801226c:	0800f4f1 	.word	0x0800f4f1
 8012270:	20001b39 	.word	0x20001b39
 8012274:	20001b3a 	.word	0x20001b3a

08012278 <console_process>:

void console_process(void) {
 8012278:	b580      	push	{r7, lr}
 801227a:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 801227c:	4b03      	ldr	r3, [pc, #12]	@ (801228c <console_process+0x14>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4618      	mov	r0, r3
 8012282:	f000 f990 	bl	80125a6 <embeddedCliProcess>
}
 8012286:	bf00      	nop
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	20001b2c 	.word	0x20001b2c

08012290 <console_uart_deinit>:

void console_uart_deinit() {
 8012290:	b580      	push	{r7, lr}
 8012292:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8012294:	4803      	ldr	r0, [pc, #12]	@ (80122a4 <console_uart_deinit+0x14>)
 8012296:	f7f9 ffad 	bl	800c1f4 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 801229a:	4802      	ldr	r0, [pc, #8]	@ (80122a4 <console_uart_deinit+0x14>)
 801229c:	f7f1 fd14 	bl	8003cc8 <HAL_UART_MspDeInit>
}
 80122a0:	bf00      	nop
 80122a2:	bd80      	pop	{r7, pc}
 80122a4:	20001a74 	.word	0x20001a74

080122a8 <console_uart_init>:
void console_uart_init() {
 80122a8:	b580      	push	{r7, lr}
 80122aa:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80122ac:	4815      	ldr	r0, [pc, #84]	@ (8012304 <console_uart_init+0x5c>)
 80122ae:	f7f9 ffa1 	bl	800c1f4 <HAL_UART_DeInit>
	huart1.Instance = USART1;
 80122b2:	4b14      	ldr	r3, [pc, #80]	@ (8012304 <console_uart_init+0x5c>)
 80122b4:	4a14      	ldr	r2, [pc, #80]	@ (8012308 <console_uart_init+0x60>)
 80122b6:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80122b8:	4b12      	ldr	r3, [pc, #72]	@ (8012304 <console_uart_init+0x5c>)
 80122ba:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80122be:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80122c0:	4b10      	ldr	r3, [pc, #64]	@ (8012304 <console_uart_init+0x5c>)
 80122c2:	2200      	movs	r2, #0
 80122c4:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80122c6:	4b0f      	ldr	r3, [pc, #60]	@ (8012304 <console_uart_init+0x5c>)
 80122c8:	2200      	movs	r2, #0
 80122ca:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80122cc:	4b0d      	ldr	r3, [pc, #52]	@ (8012304 <console_uart_init+0x5c>)
 80122ce:	2200      	movs	r2, #0
 80122d0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80122d2:	4b0c      	ldr	r3, [pc, #48]	@ (8012304 <console_uart_init+0x5c>)
 80122d4:	220c      	movs	r2, #12
 80122d6:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80122d8:	4b0a      	ldr	r3, [pc, #40]	@ (8012304 <console_uart_init+0x5c>)
 80122da:	2200      	movs	r2, #0
 80122dc:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80122de:	4b09      	ldr	r3, [pc, #36]	@ (8012304 <console_uart_init+0x5c>)
 80122e0:	2200      	movs	r2, #0
 80122e2:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80122e4:	4807      	ldr	r0, [pc, #28]	@ (8012304 <console_uart_init+0x5c>)
 80122e6:	f7f9 ff35 	bl	800c154 <HAL_UART_Init>
 80122ea:	4603      	mov	r3, r0
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d001      	beq.n	80122f4 <console_uart_init+0x4c>
		Error_Handler();
 80122f0:	f7f1 f9c8 	bl	8003684 <Error_Handler>
	}
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 80122f4:	2201      	movs	r2, #1
 80122f6:	4905      	ldr	r1, [pc, #20]	@ (801230c <console_uart_init+0x64>)
 80122f8:	4802      	ldr	r0, [pc, #8]	@ (8012304 <console_uart_init+0x5c>)
 80122fa:	f7fa f838 	bl	800c36e <HAL_UART_Receive_IT>
}
 80122fe:	bf00      	nop
 8012300:	bd80      	pop	{r7, pc}
 8012302:	bf00      	nop
 8012304:	20001a74 	.word	0x20001a74
 8012308:	40011000 	.word	0x40011000
 801230c:	20001b38 	.word	0x20001b38

08012310 <console_init>:

void console_init(void) {
 8012310:	b580      	push	{r7, lr}
 8012312:	af00      	add	r7, sp, #0
	console_uart_init();
 8012314:	f7ff ffc8 	bl	80122a8 <console_uart_init>
	initializeEmbeddedCli();
 8012318:	f7ff fad6 	bl	80118c8 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 801231c:	2201      	movs	r2, #1
 801231e:	4903      	ldr	r1, [pc, #12]	@ (801232c <console_init+0x1c>)
 8012320:	4803      	ldr	r0, [pc, #12]	@ (8012330 <console_init+0x20>)
 8012322:	f7fa f824 	bl	800c36e <HAL_UART_Receive_IT>
}
 8012326:	bf00      	nop
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	20001b38 	.word	0x20001b38
 8012330:	20001a74 	.word	0x20001a74

08012334 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8012334:	b480      	push	{r7}
 8012336:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8012338:	4b0e      	ldr	r3, [pc, #56]	@ (8012374 <embeddedCliDefaultConfig+0x40>)
 801233a:	2240      	movs	r2, #64	@ 0x40
 801233c:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 801233e:	4b0d      	ldr	r3, [pc, #52]	@ (8012374 <embeddedCliDefaultConfig+0x40>)
 8012340:	2240      	movs	r2, #64	@ 0x40
 8012342:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8012344:	4b0b      	ldr	r3, [pc, #44]	@ (8012374 <embeddedCliDefaultConfig+0x40>)
 8012346:	2280      	movs	r2, #128	@ 0x80
 8012348:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 801234a:	4b0a      	ldr	r3, [pc, #40]	@ (8012374 <embeddedCliDefaultConfig+0x40>)
 801234c:	2200      	movs	r2, #0
 801234e:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8012350:	4b08      	ldr	r3, [pc, #32]	@ (8012374 <embeddedCliDefaultConfig+0x40>)
 8012352:	2200      	movs	r2, #0
 8012354:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 70;
 8012356:	4b07      	ldr	r3, [pc, #28]	@ (8012374 <embeddedCliDefaultConfig+0x40>)
 8012358:	2246      	movs	r2, #70	@ 0x46
 801235a:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 801235c:	4b05      	ldr	r3, [pc, #20]	@ (8012374 <embeddedCliDefaultConfig+0x40>)
 801235e:	2201      	movs	r2, #1
 8012360:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8012362:	4b04      	ldr	r3, [pc, #16]	@ (8012374 <embeddedCliDefaultConfig+0x40>)
 8012364:	4a04      	ldr	r2, [pc, #16]	@ (8012378 <embeddedCliDefaultConfig+0x44>)
 8012366:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8012368:	4b02      	ldr	r3, [pc, #8]	@ (8012374 <embeddedCliDefaultConfig+0x40>)
}
 801236a:	4618      	mov	r0, r3
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr
 8012374:	20001b40 	.word	0x20001b40
 8012378:	080245d0 	.word	0x080245d0

0801237c <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 801237c:	b480      	push	{r7}
 801237e:	b085      	sub	sp, #20
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	895b      	ldrh	r3, [r3, #10]
 8012388:	2201      	movs	r2, #1
 801238a:	4413      	add	r3, r2
 801238c:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	889b      	ldrh	r3, [r3, #4]
 8012392:	3303      	adds	r3, #3
 8012394:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	88db      	ldrh	r3, [r3, #6]
 801239a:	3303      	adds	r3, #3
 801239c:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 801239e:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	891b      	ldrh	r3, [r3, #8]
 80123a4:	3303      	adds	r3, #3
 80123a6:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80123a8:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80123aa:	89fa      	ldrh	r2, [r7, #14]
 80123ac:	4613      	mov	r3, r2
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	4413      	add	r3, r2
 80123b2:	009b      	lsls	r3, r3, #2
 80123b4:	3303      	adds	r3, #3
 80123b6:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80123b8:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 80123ba:	89fb      	ldrh	r3, [r7, #14]
 80123bc:	3303      	adds	r3, #3
 80123be:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80123c0:	4413      	add	r3, r2
 80123c2:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	009b      	lsls	r3, r3, #2
 80123c8:	b29b      	uxth	r3, r3
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3714      	adds	r7, #20
 80123ce:	46bd      	mov	sp, r7
 80123d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d4:	4770      	bx	lr

080123d6 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 80123d6:	b580      	push	{r7, lr}
 80123d8:	b088      	sub	sp, #32
 80123da:	af00      	add	r7, sp, #0
 80123dc:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 80123de:	2300      	movs	r3, #0
 80123e0:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	895b      	ldrh	r3, [r3, #10]
 80123e6:	2201      	movs	r2, #1
 80123e8:	4413      	add	r3, r2
 80123ea:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f7ff ffc5 	bl	801237c <embeddedCliRequiredSize>
 80123f2:	4603      	mov	r3, r0
 80123f4:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 80123f6:	2300      	movs	r3, #0
 80123f8:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	68db      	ldr	r3, [r3, #12]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d10f      	bne.n	8012422 <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 8012402:	6938      	ldr	r0, [r7, #16]
 8012404:	f00b fa5a 	bl	801d8bc <malloc>
 8012408:	4603      	mov	r3, r0
 801240a:	461a      	mov	r2, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	68db      	ldr	r3, [r3, #12]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d101      	bne.n	801241c <embeddedCliNew+0x46>
            return NULL;
 8012418:	2300      	movs	r3, #0
 801241a:	e092      	b.n	8012542 <embeddedCliNew+0x16c>
        allocated = true;
 801241c:	2301      	movs	r3, #1
 801241e:	77fb      	strb	r3, [r7, #31]
 8012420:	e007      	b.n	8012432 <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	8a1b      	ldrh	r3, [r3, #16]
 8012426:	461a      	mov	r2, r3
 8012428:	693b      	ldr	r3, [r7, #16]
 801242a:	4293      	cmp	r3, r2
 801242c:	d901      	bls.n	8012432 <embeddedCliNew+0x5c>
        return NULL;
 801242e:	2300      	movs	r3, #0
 8012430:	e087      	b.n	8012542 <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8012438:	693a      	ldr	r2, [r7, #16]
 801243a:	2100      	movs	r1, #0
 801243c:	68f8      	ldr	r0, [r7, #12]
 801243e:	f00c fcbb 	bl	801edb8 <memset>

    cli = (EmbeddedCli *) buf;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	3310      	adds	r3, #16
 801244a:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	68fa      	ldr	r2, [r7, #12]
 8012450:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	3334      	adds	r3, #52	@ 0x34
 8012456:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8012458:	69bb      	ldr	r3, [r7, #24]
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	889b      	ldrh	r3, [r3, #4]
 8012468:	3303      	adds	r3, #3
 801246a:	f023 0303 	bic.w	r3, r3, #3
 801246e:	68fa      	ldr	r2, [r7, #12]
 8012470:	4413      	add	r3, r2
 8012472:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	68fa      	ldr	r2, [r7, #12]
 8012478:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	88db      	ldrh	r3, [r3, #6]
 801247e:	3303      	adds	r3, #3
 8012480:	f023 0303 	bic.w	r3, r3, #3
 8012484:	68fa      	ldr	r2, [r7, #12]
 8012486:	4413      	add	r3, r2
 8012488:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 801248a:	68bb      	ldr	r3, [r7, #8]
 801248c:	68fa      	ldr	r2, [r7, #12]
 801248e:	625a      	str	r2, [r3, #36]	@ 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 8012490:	8afa      	ldrh	r2, [r7, #22]
 8012492:	4613      	mov	r3, r2
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	4413      	add	r3, r2
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	3303      	adds	r3, #3
 801249c:	f023 0303 	bic.w	r3, r3, #3
 80124a0:	68fa      	ldr	r2, [r7, #12]
 80124a2:	4413      	add	r3, r2
 80124a4:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	68fa      	ldr	r2, [r7, #12]
 80124aa:	629a      	str	r2, [r3, #40]	@ 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 80124ac:	8afb      	ldrh	r3, [r7, #22]
 80124ae:	3303      	adds	r3, #3
 80124b0:	f023 0303 	bic.w	r3, r3, #3
 80124b4:	68fa      	ldr	r2, [r7, #12]
 80124b6:	4413      	add	r3, r2
 80124b8:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	68fa      	ldr	r2, [r7, #12]
 80124be:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	891a      	ldrh	r2, [r3, #8]
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	811a      	strh	r2, [r3, #8]

    if (allocated)
 80124c8:	7ffb      	ldrb	r3, [r7, #31]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d008      	beq.n	80124e0 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80124d4:	f043 0304 	orr.w	r3, r3, #4
 80124d8:	b2da      	uxtb	r2, r3
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	7c9b      	ldrb	r3, [r3, #18]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d008      	beq.n	80124fa <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80124ee:	f043 0320 	orr.w	r3, r3, #32
 80124f2:	b2da      	uxtb	r2, r3
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	889a      	ldrh	r2, [r3, #4]
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	2200      	movs	r2, #0
 8012506:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	2200      	movs	r2, #0
 801250c:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	88da      	ldrh	r2, [r3, #6]
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->bindingsCount = 0;
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	2200      	movs	r2, #0
 801251a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	895b      	ldrh	r3, [r3, #10]
 8012520:	2201      	movs	r2, #1
 8012522:	4413      	add	r3, r2
 8012524:	b29a      	uxth	r2, r3
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	85da      	strh	r2, [r3, #46]	@ 0x2e
    impl->lastChar = '\0';
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	2200      	movs	r2, #0
 801252e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 801253a:	69b8      	ldr	r0, [r7, #24]
 801253c:	f000 fc5e 	bl	8012dfc <initInternalBindings>

    return cli;
 8012540:	69bb      	ldr	r3, [r7, #24]
}
 8012542:	4618      	mov	r0, r3
 8012544:	3720      	adds	r7, #32
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}

0801254a <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 801254a:	b580      	push	{r7, lr}
 801254c:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 801254e:	f7ff fef1 	bl	8012334 <embeddedCliDefaultConfig>
 8012552:	4603      	mov	r3, r0
 8012554:	4618      	mov	r0, r3
 8012556:	f7ff ff3e 	bl	80123d6 <embeddedCliNew>
 801255a:	4603      	mov	r3, r0
}
 801255c:	4618      	mov	r0, r3
 801255e:	bd80      	pop	{r7, pc}

08012560 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8012560:	b580      	push	{r7, lr}
 8012562:	b084      	sub	sp, #16
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	460b      	mov	r3, r1
 801256a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	3310      	adds	r3, #16
 8012576:	78fa      	ldrb	r2, [r7, #3]
 8012578:	4611      	mov	r1, r2
 801257a:	4618      	mov	r0, r3
 801257c:	f001 f865 	bl	801364a <fifoBufPush>
 8012580:	4603      	mov	r3, r0
 8012582:	f083 0301 	eor.w	r3, r3, #1
 8012586:	b2db      	uxtb	r3, r3
 8012588:	2b00      	cmp	r3, #0
 801258a:	d008      	beq.n	801259e <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012592:	f043 0301 	orr.w	r3, r3, #1
 8012596:	b2da      	uxtb	r2, r3
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 801259e:	bf00      	nop
 80125a0:	3710      	adds	r7, #16
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b084      	sub	sp, #16
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	f000 8083 	beq.w	80126be <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	68db      	ldr	r3, [r3, #12]
 80125bc:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125c4:	f003 0302 	and.w	r3, r3, #2
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d155      	bne.n	8012678 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125d2:	f043 0302 	orr.w	r3, r3, #2
 80125d6:	b2da      	uxtb	r2, r3
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	4619      	mov	r1, r3
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f000 ff8f 	bl	8013508 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 80125ea:	e045      	b.n	8012678 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	3310      	adds	r3, #16
 80125f0:	4618      	mov	r0, r3
 80125f2:	f001 f802 	bl	80135fa <fifoBufPop>
 80125f6:	4603      	mov	r3, r0
 80125f8:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012600:	f003 0308 	and.w	r3, r3, #8
 8012604:	2b00      	cmp	r3, #0
 8012606:	d005      	beq.n	8012614 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8012608:	7afb      	ldrb	r3, [r7, #11]
 801260a:	4619      	mov	r1, r3
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f000 fa17 	bl	8012a40 <onEscapedInput>
 8012612:	e02a      	b.n	801266a <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801261a:	2b1b      	cmp	r3, #27
 801261c:	d10c      	bne.n	8012638 <embeddedCliProcess+0x92>
 801261e:	7afb      	ldrb	r3, [r7, #11]
 8012620:	2b5b      	cmp	r3, #91	@ 0x5b
 8012622:	d109      	bne.n	8012638 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801262a:	f043 0308 	orr.w	r3, r3, #8
 801262e:	b2da      	uxtb	r2, r3
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012636:	e018      	b.n	801266a <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8012638:	7afb      	ldrb	r3, [r7, #11]
 801263a:	4618      	mov	r0, r3
 801263c:	f000 ff85 	bl	801354a <isControlChar>
 8012640:	4603      	mov	r3, r0
 8012642:	2b00      	cmp	r3, #0
 8012644:	d005      	beq.n	8012652 <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8012646:	7afb      	ldrb	r3, [r7, #11]
 8012648:	4619      	mov	r1, r3
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f000 fa54 	bl	8012af8 <onControlInput>
 8012650:	e00b      	b.n	801266a <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 8012652:	7afb      	ldrb	r3, [r7, #11]
 8012654:	4618      	mov	r0, r3
 8012656:	f000 ff98 	bl	801358a <isDisplayableChar>
 801265a:	4603      	mov	r3, r0
 801265c:	2b00      	cmp	r3, #0
 801265e:	d004      	beq.n	801266a <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8012660:	7afb      	ldrb	r3, [r7, #11]
 8012662:	4619      	mov	r1, r3
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f000 fa17 	bl	8012a98 <onCharInput>
        }

        printLiveAutocompletion(cli);
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f000 fe35 	bl	80132da <printLiveAutocompletion>

        impl->lastChar = c;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	7afa      	ldrb	r2, [r7, #11]
 8012674:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	3310      	adds	r3, #16
 801267c:	4618      	mov	r0, r3
 801267e:	f000 ff9b 	bl	80135b8 <fifoBufAvailable>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	d1b1      	bne.n	80125ec <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801268e:	f003 0301 	and.w	r3, r3, #1
 8012692:	2b00      	cmp	r3, #0
 8012694:	d014      	beq.n	80126c0 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	2200      	movs	r2, #0
 801269a:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	69db      	ldr	r3, [r3, #28]
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	8c12      	ldrh	r2, [r2, #32]
 80126a4:	4413      	add	r3, r2
 80126a6:	2200      	movs	r2, #0
 80126a8:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80126b0:	f023 0301 	bic.w	r3, r3, #1
 80126b4:	b2da      	uxtb	r2, r3
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80126bc:	e000      	b.n	80126c0 <embeddedCliProcess+0x11a>
        return;
 80126be:	bf00      	nop
    }
}
 80126c0:	3710      	adds	r7, #16
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 80126c6:	b084      	sub	sp, #16
 80126c8:	b4b0      	push	{r4, r5, r7}
 80126ca:	b085      	sub	sp, #20
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80126d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	68db      	ldr	r3, [r3, #12]
 80126dc:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d101      	bne.n	80126ee <embeddedCliAddBinding+0x28>
        return false;
 80126ea:	2300      	movs	r3, #0
 80126ec:	e017      	b.n	801271e <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80126f6:	4619      	mov	r1, r3
 80126f8:	460b      	mov	r3, r1
 80126fa:	009b      	lsls	r3, r3, #2
 80126fc:	440b      	add	r3, r1
 80126fe:	009b      	lsls	r3, r3, #2
 8012700:	4413      	add	r3, r2
 8012702:	461d      	mov	r5, r3
 8012704:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8012708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801270a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801270c:	6823      	ldr	r3, [r4, #0]
 801270e:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012714:	3301      	adds	r3, #1
 8012716:	b29a      	uxth	r2, r3
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    return true;
 801271c:	2301      	movs	r3, #1
}
 801271e:	4618      	mov	r0, r3
 8012720:	3714      	adds	r7, #20
 8012722:	46bd      	mov	sp, r7
 8012724:	bcb0      	pop	{r4, r5, r7}
 8012726:	b004      	add	sp, #16
 8012728:	4770      	bx	lr
	...

0801272c <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d031      	beq.n	80127a2 <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	68db      	ldr	r3, [r3, #12]
 8012742:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801274a:	f003 0310 	and.w	r3, r3, #16
 801274e:	2b00      	cmp	r3, #0
 8012750:	d102      	bne.n	8012758 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f000 fea6 	bl	80134a4 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8012758:	6839      	ldr	r1, [r7, #0]
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f000 fed4 	bl	8013508 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8012760:	4b12      	ldr	r3, [pc, #72]	@ (80127ac <embeddedCliPrint+0x80>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	4619      	mov	r1, r3
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f000 fece 	bl	8013508 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012772:	f003 0310 	and.w	r3, r3, #16
 8012776:	2b00      	cmp	r3, #0
 8012778:	d114      	bne.n	80127a4 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	4619      	mov	r1, r3
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 fec1 	bl	8013508 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	69db      	ldr	r3, [r3, #28]
 801278a:	4619      	mov	r1, r3
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f000 febb 	bl	8013508 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	8c1a      	ldrh	r2, [r3, #32]
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	861a      	strh	r2, [r3, #48]	@ 0x30

        printLiveAutocompletion(cli);
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f000 fd9d 	bl	80132da <printLiveAutocompletion>
 80127a0:	e000      	b.n	80127a4 <embeddedCliPrint+0x78>
        return;
 80127a2:	bf00      	nop
    }
}
 80127a4:	3710      	adds	r7, #16
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	20000024 	.word	0x20000024

080127b0 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b088      	sub	sp, #32
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d066      	beq.n	801288c <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 80127be:	4b35      	ldr	r3, [pc, #212]	@ (8012894 <embeddedCliTokenizeArgs+0xe4>)
 80127c0:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 80127c2:	2300      	movs	r3, #0
 80127c4:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 80127c6:	2300      	movs	r3, #0
 80127c8:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 80127ca:	2300      	movs	r3, #0
 80127cc:	61bb      	str	r3, [r7, #24]

    int i = 0;
 80127ce:	2300      	movs	r3, #0
 80127d0:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 80127d2:	e047      	b.n	8012864 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	3301      	adds	r3, #1
 80127d8:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 80127da:	7fbb      	ldrb	r3, [r7, #30]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d002      	beq.n	80127e6 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 80127e0:	2300      	movs	r3, #0
 80127e2:	77bb      	strb	r3, [r7, #30]
 80127e4:	e029      	b.n	801283a <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 80127e6:	7cfb      	ldrb	r3, [r7, #19]
 80127e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80127ea:	d102      	bne.n	80127f2 <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 80127ec:	2301      	movs	r3, #1
 80127ee:	77bb      	strb	r3, [r7, #30]
            continue;
 80127f0:	e038      	b.n	8012864 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 80127f2:	7cfb      	ldrb	r3, [r7, #19]
 80127f4:	2b22      	cmp	r3, #34	@ 0x22
 80127f6:	d110      	bne.n	801281a <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 80127f8:	7ffb      	ldrb	r3, [r7, #31]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	bf14      	ite	ne
 80127fe:	2301      	movne	r3, #1
 8012800:	2300      	moveq	r3, #0
 8012802:	b2db      	uxtb	r3, r3
 8012804:	f083 0301 	eor.w	r3, r3, #1
 8012808:	b2db      	uxtb	r3, r3
 801280a:	77fb      	strb	r3, [r7, #31]
 801280c:	7ffb      	ldrb	r3, [r7, #31]
 801280e:	f003 0301 	and.w	r3, r3, #1
 8012812:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8012814:	2300      	movs	r3, #0
 8012816:	74fb      	strb	r3, [r7, #19]
 8012818:	e00f      	b.n	801283a <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 801281a:	7ffb      	ldrb	r3, [r7, #31]
 801281c:	f083 0301 	eor.w	r3, r3, #1
 8012820:	b2db      	uxtb	r3, r3
 8012822:	2b00      	cmp	r3, #0
 8012824:	d009      	beq.n	801283a <embeddedCliTokenizeArgs+0x8a>
 8012826:	7cfb      	ldrb	r3, [r7, #19]
 8012828:	4619      	mov	r1, r3
 801282a:	68f8      	ldr	r0, [r7, #12]
 801282c:	f00c facc 	bl	801edc8 <strchr>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d001      	beq.n	801283a <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8012836:	2300      	movs	r3, #0
 8012838:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 801283a:	7cfb      	ldrb	r3, [r7, #19]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d109      	bne.n	8012854 <embeddedCliTokenizeArgs+0xa4>
 8012840:	69bb      	ldr	r3, [r7, #24]
 8012842:	2b00      	cmp	r3, #0
 8012844:	dd0e      	ble.n	8012864 <embeddedCliTokenizeArgs+0xb4>
 8012846:	69bb      	ldr	r3, [r7, #24]
 8012848:	3b01      	subs	r3, #1
 801284a:	687a      	ldr	r2, [r7, #4]
 801284c:	4413      	add	r3, r2
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d007      	beq.n	8012864 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8012854:	69bb      	ldr	r3, [r7, #24]
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	4413      	add	r3, r2
 801285a:	7cfa      	ldrb	r2, [r7, #19]
 801285c:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	3301      	adds	r3, #1
 8012862:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	4413      	add	r3, r2
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	74fb      	strb	r3, [r7, #19]
 801286e:	7cfb      	ldrb	r3, [r7, #19]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d1af      	bne.n	80127d4 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8012874:	69bb      	ldr	r3, [r7, #24]
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	4413      	add	r3, r2
 801287a:	2200      	movs	r2, #0
 801287c:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	3301      	adds	r3, #1
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	4413      	add	r3, r2
 8012886:	2200      	movs	r2, #0
 8012888:	701a      	strb	r2, [r3, #0]
 801288a:	e000      	b.n	801288e <embeddedCliTokenizeArgs+0xde>
        return;
 801288c:	bf00      	nop
}
 801288e:	3720      	adds	r7, #32
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	080245d4 	.word	0x080245d4

08012898 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	460b      	mov	r3, r1
 80128a2:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80128a4:	887b      	ldrh	r3, [r7, #2]
 80128a6:	4619      	mov	r1, r3
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f000 ffd5 	bl	8013858 <getTokenPosition>
 80128ae:	4603      	mov	r3, r0
 80128b0:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80128b2:	89fb      	ldrh	r3, [r7, #14]
 80128b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80128b8:	4293      	cmp	r3, r2
 80128ba:	d003      	beq.n	80128c4 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 80128bc:	89fb      	ldrh	r3, [r7, #14]
 80128be:	687a      	ldr	r2, [r7, #4]
 80128c0:	4413      	add	r3, r2
 80128c2:	e000      	b.n	80128c6 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 80128c4:	2300      	movs	r3, #0
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3710      	adds	r7, #16
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}

080128ce <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b084      	sub	sp, #16
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
 80128d6:	460b      	mov	r3, r1
 80128d8:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80128da:	887b      	ldrh	r3, [r7, #2]
 80128dc:	4619      	mov	r1, r3
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f000 ffba 	bl	8013858 <getTokenPosition>
 80128e4:	4603      	mov	r3, r0
 80128e6:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80128e8:	89fb      	ldrh	r3, [r7, #14]
 80128ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d003      	beq.n	80128fa <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 80128f2:	89fb      	ldrh	r3, [r7, #14]
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	4413      	add	r3, r2
 80128f8:	e000      	b.n	80128fc <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 80128fa:	2300      	movs	r3, #0
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3710      	adds	r7, #16
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8012904:	b480      	push	{r7}
 8012906:	b085      	sub	sp, #20
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d003      	beq.n	801291a <embeddedCliGetTokenCount+0x16>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d101      	bne.n	801291e <embeddedCliGetTokenCount+0x1a>
        return 0;
 801291a:	2300      	movs	r3, #0
 801291c:	e019      	b.n	8012952 <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 801291e:	2300      	movs	r3, #0
 8012920:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8012922:	2301      	movs	r3, #1
 8012924:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	4413      	add	r3, r2
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d109      	bne.n	8012946 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	3301      	adds	r3, #1
 8012936:	687a      	ldr	r2, [r7, #4]
 8012938:	4413      	add	r3, r2
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d006      	beq.n	801294e <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8012940:	897b      	ldrh	r3, [r7, #10]
 8012942:	3301      	adds	r3, #1
 8012944:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	3301      	adds	r3, #1
 801294a:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 801294c:	e7eb      	b.n	8012926 <embeddedCliGetTokenCount+0x22>
                break;
 801294e:	bf00      	nop
    }

    return tokenCount;
 8012950:	897b      	ldrh	r3, [r7, #10]
}
 8012952:	4618      	mov	r0, r3
 8012954:	3714      	adds	r7, #20
 8012956:	46bd      	mov	sp, r7
 8012958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295c:	4770      	bx	lr
	...

08012960 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	460b      	mov	r3, r1
 801296a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 8012972:	693b      	ldr	r3, [r7, #16]
 8012974:	899b      	ldrh	r3, [r3, #12]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d05c      	beq.n	8012a34 <navigateHistory+0xd4>
 801297a:	78fb      	ldrb	r3, [r7, #3]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d005      	beq.n	801298c <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	895a      	ldrh	r2, [r3, #10]
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	899b      	ldrh	r3, [r3, #12]
 8012988:	429a      	cmp	r2, r3
 801298a:	d053      	beq.n	8012a34 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 801298c:	78fb      	ldrb	r3, [r7, #3]
 801298e:	f083 0301 	eor.w	r3, r3, #1
 8012992:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8012994:	2b00      	cmp	r3, #0
 8012996:	d003      	beq.n	80129a0 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	895b      	ldrh	r3, [r3, #10]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d049      	beq.n	8012a34 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f000 fd7f 	bl	80134a4 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4619      	mov	r1, r3
 80129ac:	6878      	ldr	r0, [r7, #4]
 80129ae:	f000 fdab 	bl	8013508 <writeToOutput>

    if (navigateUp)
 80129b2:	78fb      	ldrb	r3, [r7, #3]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d006      	beq.n	80129c6 <navigateHistory+0x66>
        ++impl->history.current;
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	895b      	ldrh	r3, [r3, #10]
 80129bc:	3301      	adds	r3, #1
 80129be:	b29a      	uxth	r2, r3
 80129c0:	693b      	ldr	r3, [r7, #16]
 80129c2:	815a      	strh	r2, [r3, #10]
 80129c4:	e005      	b.n	80129d2 <navigateHistory+0x72>
    else
        --impl->history.current;
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	895b      	ldrh	r3, [r3, #10]
 80129ca:	3b01      	subs	r3, #1
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	1d1a      	adds	r2, r3, #4
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	895b      	ldrh	r3, [r3, #10]
 80129da:	4619      	mov	r1, r3
 80129dc:	4610      	mov	r0, r2
 80129de:	f000 fec2 	bl	8013766 <historyGet>
 80129e2:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d101      	bne.n	80129ee <navigateHistory+0x8e>
        item = "";
 80129ea:	4b14      	ldr	r3, [pc, #80]	@ (8012a3c <navigateHistory+0xdc>)
 80129ec:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 80129ee:	6978      	ldr	r0, [r7, #20]
 80129f0:	f7ed fc56 	bl	80002a0 <strlen>
 80129f4:	4603      	mov	r3, r0
 80129f6:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	69db      	ldr	r3, [r3, #28]
 80129fc:	89fa      	ldrh	r2, [r7, #14]
 80129fe:	6979      	ldr	r1, [r7, #20]
 8012a00:	4618      	mov	r0, r3
 8012a02:	f00c faf0 	bl	801efe6 <memcpy>
    impl->cmdBuffer[len] = '\0';
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	69da      	ldr	r2, [r3, #28]
 8012a0a:	89fb      	ldrh	r3, [r7, #14]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	2200      	movs	r2, #0
 8012a10:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	89fa      	ldrh	r2, [r7, #14]
 8012a16:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	69db      	ldr	r3, [r3, #28]
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f000 fd72 	bl	8013508 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	8c1a      	ldrh	r2, [r3, #32]
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	861a      	strh	r2, [r3, #48]	@ 0x30

    printLiveAutocompletion(cli);
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f000 fc54 	bl	80132da <printLiveAutocompletion>
 8012a32:	e000      	b.n	8012a36 <navigateHistory+0xd6>
        return;
 8012a34:	bf00      	nop
}
 8012a36:	3718      	adds	r7, #24
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	080245d8 	.word	0x080245d8

08012a40 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	460b      	mov	r3, r1
 8012a4a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8012a52:	78fb      	ldrb	r3, [r7, #3]
 8012a54:	2b3f      	cmp	r3, #63	@ 0x3f
 8012a56:	d91b      	bls.n	8012a90 <onEscapedInput+0x50>
 8012a58:	78fb      	ldrb	r3, [r7, #3]
 8012a5a:	2b7e      	cmp	r3, #126	@ 0x7e
 8012a5c:	d818      	bhi.n	8012a90 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012a64:	f023 0308 	bic.w	r3, r3, #8
 8012a68:	b2da      	uxtb	r2, r3
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8012a70:	78fb      	ldrb	r3, [r7, #3]
 8012a72:	2b41      	cmp	r3, #65	@ 0x41
 8012a74:	d002      	beq.n	8012a7c <onEscapedInput+0x3c>
 8012a76:	78fb      	ldrb	r3, [r7, #3]
 8012a78:	2b42      	cmp	r3, #66	@ 0x42
 8012a7a:	d109      	bne.n	8012a90 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8012a7c:	78fb      	ldrb	r3, [r7, #3]
 8012a7e:	2b41      	cmp	r3, #65	@ 0x41
 8012a80:	bf0c      	ite	eq
 8012a82:	2301      	moveq	r3, #1
 8012a84:	2300      	movne	r3, #0
 8012a86:	b2db      	uxtb	r3, r3
 8012a88:	4619      	mov	r1, r3
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f7ff ff68 	bl	8012960 <navigateHistory>
        }
    }
}
 8012a90:	bf00      	nop
 8012a92:	3710      	adds	r7, #16
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b084      	sub	sp, #16
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	460b      	mov	r3, r1
 8012aa2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	68db      	ldr	r3, [r3, #12]
 8012aa8:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	8c1b      	ldrh	r3, [r3, #32]
 8012aae:	3302      	adds	r3, #2
 8012ab0:	68fa      	ldr	r2, [r7, #12]
 8012ab2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8012ab4:	4293      	cmp	r3, r2
 8012ab6:	da1a      	bge.n	8012aee <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	69db      	ldr	r3, [r3, #28]
 8012abc:	68fa      	ldr	r2, [r7, #12]
 8012abe:	8c12      	ldrh	r2, [r2, #32]
 8012ac0:	4413      	add	r3, r2
 8012ac2:	78fa      	ldrb	r2, [r7, #3]
 8012ac4:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	8c1b      	ldrh	r3, [r3, #32]
 8012aca:	3301      	adds	r3, #1
 8012acc:	b29a      	uxth	r2, r3
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	69db      	ldr	r3, [r3, #28]
 8012ad6:	68fa      	ldr	r2, [r7, #12]
 8012ad8:	8c12      	ldrh	r2, [r2, #32]
 8012ada:	4413      	add	r3, r2
 8012adc:	2200      	movs	r2, #0
 8012ade:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	78fa      	ldrb	r2, [r7, #3]
 8012ae6:	4611      	mov	r1, r2
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	4798      	blx	r3
 8012aec:	e000      	b.n	8012af0 <onCharInput+0x58>
        return;
 8012aee:	bf00      	nop
}
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
	...

08012af8 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b084      	sub	sp, #16
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	460b      	mov	r3, r1
 8012b02:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012b10:	2b0d      	cmp	r3, #13
 8012b12:	d102      	bne.n	8012b1a <onControlInput+0x22>
 8012b14:	78fb      	ldrb	r3, [r7, #3]
 8012b16:	2b0a      	cmp	r3, #10
 8012b18:	d062      	beq.n	8012be0 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012b20:	2b0a      	cmp	r3, #10
 8012b22:	d102      	bne.n	8012b2a <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8012b24:	78fb      	ldrb	r3, [r7, #3]
 8012b26:	2b0d      	cmp	r3, #13
 8012b28:	d05a      	beq.n	8012be0 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8012b2a:	78fb      	ldrb	r3, [r7, #3]
 8012b2c:	2b0d      	cmp	r3, #13
 8012b2e:	d002      	beq.n	8012b36 <onControlInput+0x3e>
 8012b30:	78fb      	ldrb	r3, [r7, #3]
 8012b32:	2b0a      	cmp	r3, #10
 8012b34:	d126      	bne.n	8012b84 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f000 fc2a 	bl	8013390 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8012b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8012be8 <onControlInput+0xf0>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4619      	mov	r1, r3
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f000 fce0 	bl	8013508 <writeToOutput>

        if (impl->cmdSize > 0)
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	8c1b      	ldrh	r3, [r3, #32]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d002      	beq.n	8012b56 <onControlInput+0x5e>
            parseCommand(cli);
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f000 f84b 	bl	8012bec <parseCommand>
        impl->cmdSize = 0;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	69db      	ldr	r3, [r3, #28]
 8012b60:	68fa      	ldr	r2, [r7, #12]
 8012b62:	8c12      	ldrh	r2, [r2, #32]
 8012b64:	4413      	add	r3, r2
 8012b66:	2200      	movs	r2, #0
 8012b68:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2200      	movs	r2, #0
 8012b74:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f000 fcc3 	bl	8013508 <writeToOutput>
 8012b82:	e02e      	b.n	8012be2 <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8012b84:	78fb      	ldrb	r3, [r7, #3]
 8012b86:	2b08      	cmp	r3, #8
 8012b88:	d002      	beq.n	8012b90 <onControlInput+0x98>
 8012b8a:	78fb      	ldrb	r3, [r7, #3]
 8012b8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8012b8e:	d120      	bne.n	8012bd2 <onControlInput+0xda>
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	8c1b      	ldrh	r3, [r3, #32]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d01c      	beq.n	8012bd2 <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	2108      	movs	r1, #8
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	2120      	movs	r1, #32
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2108      	movs	r1, #8
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	8c1b      	ldrh	r3, [r3, #32]
 8012bba:	3b01      	subs	r3, #1
 8012bbc:	b29a      	uxth	r2, r3
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	69db      	ldr	r3, [r3, #28]
 8012bc6:	68fa      	ldr	r2, [r7, #12]
 8012bc8:	8c12      	ldrh	r2, [r2, #32]
 8012bca:	4413      	add	r3, r2
 8012bcc:	2200      	movs	r2, #0
 8012bce:	701a      	strb	r2, [r3, #0]
 8012bd0:	e007      	b.n	8012be2 <onControlInput+0xea>
    } else if (c == '\t') {
 8012bd2:	78fb      	ldrb	r3, [r7, #3]
 8012bd4:	2b09      	cmp	r3, #9
 8012bd6:	d104      	bne.n	8012be2 <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f000 fbd9 	bl	8013390 <onAutocompleteRequest>
 8012bde:	e000      	b.n	8012be2 <onControlInput+0xea>
        return;
 8012be0:	bf00      	nop
    }

}
 8012be2:	3710      	adds	r7, #16
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	20000024 	.word	0x20000024

08012bec <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8012bec:	b590      	push	{r4, r7, lr}
 8012bee:	b08f      	sub	sp, #60	@ 0x3c
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8012c00:	2300      	movs	r3, #0
 8012c02:	633b      	str	r3, [r7, #48]	@ 0x30
 8012c04:	e00d      	b.n	8012c22 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	69da      	ldr	r2, [r3, #28]
 8012c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c0c:	4413      	add	r3, r2
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	2b20      	cmp	r3, #32
 8012c12:	d003      	beq.n	8012c1c <parseCommand+0x30>
            isEmpty = false;
 8012c14:	2300      	movs	r3, #0
 8012c16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8012c1a:	e008      	b.n	8012c2e <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c1e:	3301      	adds	r3, #1
 8012c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	8c1b      	ldrh	r3, [r3, #32]
 8012c26:	461a      	mov	r2, r3
 8012c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	dbeb      	blt.n	8012c06 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8012c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	f040 80dc 	bne.w	8012df0 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8012c38:	69bb      	ldr	r3, [r7, #24]
 8012c3a:	1d1a      	adds	r2, r3, #4
 8012c3c:	69bb      	ldr	r3, [r7, #24]
 8012c3e:	69db      	ldr	r3, [r3, #28]
 8012c40:	4619      	mov	r1, r3
 8012c42:	4610      	mov	r0, r2
 8012c44:	f000 fd2b 	bl	801369e <historyPut>

    char *cmdName = NULL;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8012c50:	2300      	movs	r3, #0
 8012c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012c56:	2300      	movs	r3, #0
 8012c58:	623b      	str	r3, [r7, #32]
 8012c5a:	e030      	b.n	8012cbe <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8012c5c:	69bb      	ldr	r3, [r7, #24]
 8012c5e:	69da      	ldr	r2, [r3, #28]
 8012c60:	6a3b      	ldr	r3, [r7, #32]
 8012c62:	4413      	add	r3, r2
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8012c68:	7dfb      	ldrb	r3, [r7, #23]
 8012c6a:	2b20      	cmp	r3, #32
 8012c6c:	d10f      	bne.n	8012c8e <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8012c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d105      	bne.n	8012c80 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8012c74:	69bb      	ldr	r3, [r7, #24]
 8012c76:	69da      	ldr	r2, [r3, #28]
 8012c78:	6a3b      	ldr	r3, [r7, #32]
 8012c7a:	4413      	add	r3, r2
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8012c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d018      	beq.n	8012cb8 <parseCommand+0xcc>
                nameFinished = true;
 8012c86:	2301      	movs	r3, #1
 8012c88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c8c:	e014      	b.n	8012cb8 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8012c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d105      	bne.n	8012ca0 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8012c94:	69bb      	ldr	r3, [r7, #24]
 8012c96:	69da      	ldr	r2, [r3, #28]
 8012c98:	6a3b      	ldr	r3, [r7, #32]
 8012c9a:	4413      	add	r3, r2
 8012c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c9e:	e00b      	b.n	8012cb8 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8012ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d108      	bne.n	8012cb8 <parseCommand+0xcc>
 8012ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d004      	beq.n	8012cb8 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8012cae:	69bb      	ldr	r3, [r7, #24]
 8012cb0:	69da      	ldr	r2, [r3, #28]
 8012cb2:	6a3b      	ldr	r3, [r7, #32]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012cb8:	6a3b      	ldr	r3, [r7, #32]
 8012cba:	3301      	adds	r3, #1
 8012cbc:	623b      	str	r3, [r7, #32]
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	8c1b      	ldrh	r3, [r3, #32]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	6a3b      	ldr	r3, [r7, #32]
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	dbc8      	blt.n	8012c5c <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	69da      	ldr	r2, [r3, #28]
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	8c1b      	ldrh	r3, [r3, #32]
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	4413      	add	r3, r2
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8012cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	f000 8089 	beq.w	8012df4 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	61fb      	str	r3, [r7, #28]
 8012ce6:	e054      	b.n	8012d92 <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8012ce8:	69bb      	ldr	r3, [r7, #24]
 8012cea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012cec:	69fa      	ldr	r2, [r7, #28]
 8012cee:	4613      	mov	r3, r2
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	4413      	add	r3, r2
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	440b      	add	r3, r1
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012cfe:	f7ed fa6f 	bl	80001e0 <strcmp>
 8012d02:	4603      	mov	r3, r0
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d141      	bne.n	8012d8c <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d0c:	69fa      	ldr	r2, [r7, #28]
 8012d0e:	4613      	mov	r3, r2
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	4413      	add	r3, r2
 8012d14:	009b      	lsls	r3, r3, #2
 8012d16:	440b      	add	r3, r1
 8012d18:	691b      	ldr	r3, [r3, #16]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d040      	beq.n	8012da0 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d22:	69fa      	ldr	r2, [r7, #28]
 8012d24:	4613      	mov	r3, r2
 8012d26:	009b      	lsls	r3, r3, #2
 8012d28:	4413      	add	r3, r2
 8012d2a:	009b      	lsls	r3, r3, #2
 8012d2c:	440b      	add	r3, r1
 8012d2e:	7a1b      	ldrb	r3, [r3, #8]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d002      	beq.n	8012d3a <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8012d34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d36:	f7ff fd3b 	bl	80127b0 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012d40:	f043 0310 	orr.w	r3, r3, #16
 8012d44:	b2da      	uxtb	r2, r3
 8012d46:	69bb      	ldr	r3, [r7, #24]
 8012d48:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d50:	69fa      	ldr	r2, [r7, #28]
 8012d52:	4613      	mov	r3, r2
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	4413      	add	r3, r2
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	440b      	add	r3, r1
 8012d5c:	691c      	ldr	r4, [r3, #16]
 8012d5e:	69bb      	ldr	r3, [r7, #24]
 8012d60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d62:	69fa      	ldr	r2, [r7, #28]
 8012d64:	4613      	mov	r3, r2
 8012d66:	009b      	lsls	r3, r3, #2
 8012d68:	4413      	add	r3, r2
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	440b      	add	r3, r1
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	461a      	mov	r2, r3
 8012d72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012d78:	69bb      	ldr	r3, [r7, #24]
 8012d7a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012d7e:	f023 0310 	bic.w	r3, r3, #16
 8012d82:	b2da      	uxtb	r2, r3
 8012d84:	69bb      	ldr	r3, [r7, #24]
 8012d86:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8012d8a:	e034      	b.n	8012df6 <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	3301      	adds	r3, #1
 8012d90:	61fb      	str	r3, [r7, #28]
 8012d92:	69bb      	ldr	r3, [r7, #24]
 8012d94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012d96:	461a      	mov	r2, r3
 8012d98:	69fb      	ldr	r3, [r7, #28]
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	dba4      	blt.n	8012ce8 <parseCommand+0xfc>
 8012d9e:	e000      	b.n	8012da2 <parseCommand+0x1b6>
                break;
 8012da0:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d01d      	beq.n	8012de6 <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8012daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dac:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8012dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012db0:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012db8:	f043 0310 	orr.w	r3, r3, #16
 8012dbc:	b2da      	uxtb	r2, r3
 8012dbe:	69bb      	ldr	r3, [r7, #24]
 8012dc0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	f107 020c 	add.w	r2, r7, #12
 8012dcc:	4611      	mov	r1, r2
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012dd8:	f023 0310 	bic.w	r3, r3, #16
 8012ddc:	b2da      	uxtb	r2, r3
 8012dde:	69bb      	ldr	r3, [r7, #24]
 8012de0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012de4:	e007      	b.n	8012df6 <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8012de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f000 f997 	bl	801311c <onUnknownCommand>
 8012dee:	e002      	b.n	8012df6 <parseCommand+0x20a>
        return;
 8012df0:	bf00      	nop
 8012df2:	e000      	b.n	8012df6 <parseCommand+0x20a>
        return;
 8012df4:	bf00      	nop
    }
}
 8012df6:	373c      	adds	r7, #60	@ 0x3c
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd90      	pop	{r4, r7, pc}

08012dfc <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8012dfc:	b5b0      	push	{r4, r5, r7, lr}
 8012dfe:	b08a      	sub	sp, #40	@ 0x28
 8012e00:	af02      	add	r7, sp, #8
 8012e02:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8012e04:	4b0c      	ldr	r3, [pc, #48]	@ (8012e38 <initInternalBindings+0x3c>)
 8012e06:	f107 040c 	add.w	r4, r7, #12
 8012e0a:	461d      	mov	r5, r3
 8012e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e10:	682b      	ldr	r3, [r5, #0]
 8012e12:	6023      	str	r3, [r4, #0]
//            "Print list of commands",
//            true,
//            NULL,
//            onHelp
//    };
    embeddedCliAddBinding(cli, b);
 8012e14:	466a      	mov	r2, sp
 8012e16:	f107 0318 	add.w	r3, r7, #24
 8012e1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e1e:	e882 0003 	stmia.w	r2, {r0, r1}
 8012e22:	f107 030c 	add.w	r3, r7, #12
 8012e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f7ff fc4c 	bl	80126c6 <embeddedCliAddBinding>
//    embeddedCliAddBinding(cli, _b);
}
 8012e2e:	bf00      	nop
 8012e30:	3720      	adds	r7, #32
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bdb0      	pop	{r4, r5, r7, pc}
 8012e36:	bf00      	nop
 8012e38:	080245fc 	.word	0x080245fc

08012e3c <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b08c      	sub	sp, #48	@ 0x30
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	68db      	ldr	r3, [r3, #12]
 8012e4c:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d10a      	bne.n	8012e6c <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8012e56:	49a5      	ldr	r1, [pc, #660]	@ (80130ec <onHelp+0x2b0>)
 8012e58:	68f8      	ldr	r0, [r7, #12]
 8012e5a:	f000 fb55 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e5e:	4ba4      	ldr	r3, [pc, #656]	@ (80130f0 <onHelp+0x2b4>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	4619      	mov	r1, r3
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f000 fb4f 	bl	8013508 <writeToOutput>
        return;
 8012e6a:	e13b      	b.n	80130e4 <onHelp+0x2a8>
    }

    if(_RunTime_Packet.showPrompt )
 8012e6c:	4ba1      	ldr	r3, [pc, #644]	@ (80130f4 <onHelp+0x2b8>)
 8012e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d03d      	beq.n	8012ef2 <onHelp+0xb6>
    {
    	_RunTime_Packet.showPrompt  = 0;
 8012e76:	4b9f      	ldr	r3, [pc, #636]	@ (80130f4 <onHelp+0x2b8>)
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        writeToOutput(cli, lineBreak);
 8012e7e:	4b9c      	ldr	r3, [pc, #624]	@ (80130f0 <onHelp+0x2b4>)
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	4619      	mov	r1, r3
 8012e84:	68f8      	ldr	r0, [r7, #12]
 8012e86:	f000 fb3f 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e8a:	4b99      	ldr	r3, [pc, #612]	@ (80130f0 <onHelp+0x2b4>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	4619      	mov	r1, r3
 8012e90:	68f8      	ldr	r0, [r7, #12]
 8012e92:	f000 fb39 	bl	8013508 <writeToOutput>
		writeToOutput(cli, "This product is powered by BuildUp! "); //TM 0x99
 8012e96:	4998      	ldr	r1, [pc, #608]	@ (80130f8 <onHelp+0x2bc>)
 8012e98:	68f8      	ldr	r0, [r7, #12]
 8012e9a:	f000 fb35 	bl	8013508 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8012e9e:	4b94      	ldr	r3, [pc, #592]	@ (80130f0 <onHelp+0x2b4>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	68f8      	ldr	r0, [r7, #12]
 8012ea6:	f000 fb2f 	bl	8013508 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8012eaa:	4994      	ldr	r1, [pc, #592]	@ (80130fc <onHelp+0x2c0>)
 8012eac:	68f8      	ldr	r0, [r7, #12]
 8012eae:	f000 fb2b 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012eb2:	4b8f      	ldr	r3, [pc, #572]	@ (80130f0 <onHelp+0x2b4>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	68f8      	ldr	r0, [r7, #12]
 8012eba:	f000 fb25 	bl	8013508 <writeToOutput>
        writeToOutput(cli, "Montreal, Canada");
 8012ebe:	4990      	ldr	r1, [pc, #576]	@ (8013100 <onHelp+0x2c4>)
 8012ec0:	68f8      	ldr	r0, [r7, #12]
 8012ec2:	f000 fb21 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012ec6:	4b8a      	ldr	r3, [pc, #552]	@ (80130f0 <onHelp+0x2b4>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	4619      	mov	r1, r3
 8012ecc:	68f8      	ldr	r0, [r7, #12]
 8012ece:	f000 fb1b 	bl	8013508 <writeToOutput>
        writeToOutput(cli, "https://thingsfactory.com");
 8012ed2:	498c      	ldr	r1, [pc, #560]	@ (8013104 <onHelp+0x2c8>)
 8012ed4:	68f8      	ldr	r0, [r7, #12]
 8012ed6:	f000 fb17 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012eda:	4b85      	ldr	r3, [pc, #532]	@ (80130f0 <onHelp+0x2b4>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	4619      	mov	r1, r3
 8012ee0:	68f8      	ldr	r0, [r7, #12]
 8012ee2:	f000 fb11 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012ee6:	4b82      	ldr	r3, [pc, #520]	@ (80130f0 <onHelp+0x2b4>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4619      	mov	r1, r3
 8012eec:	68f8      	ldr	r0, [r7, #12]
 8012eee:	f000 fb0b 	bl	8013508 <writeToOutput>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8012ef2:	68b8      	ldr	r0, [r7, #8]
 8012ef4:	f7ff fd06 	bl	8012904 <embeddedCliGetTokenCount>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8012efc:	8b7b      	ldrh	r3, [r7, #26]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d176      	bne.n	8012ff0 <onHelp+0x1b4>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012f02:	2300      	movs	r3, #0
 8012f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f06:	e03c      	b.n	8012f82 <onHelp+0x146>
            writeToOutput(cli, " * ");
 8012f08:	497f      	ldr	r1, [pc, #508]	@ (8013108 <onHelp+0x2cc>)
 8012f0a:	68f8      	ldr	r0, [r7, #12]
 8012f0c:	f000 fafc 	bl	8013508 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8012f10:	69fb      	ldr	r3, [r7, #28]
 8012f12:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f16:	4613      	mov	r3, r2
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	4413      	add	r3, r2
 8012f1c:	009b      	lsls	r3, r3, #2
 8012f1e:	440b      	add	r3, r1
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	4619      	mov	r1, r3
 8012f24:	68f8      	ldr	r0, [r7, #12]
 8012f26:	f000 faef 	bl	8013508 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8012f2a:	4b71      	ldr	r3, [pc, #452]	@ (80130f0 <onHelp+0x2b4>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	4619      	mov	r1, r3
 8012f30:	68f8      	ldr	r0, [r7, #12]
 8012f32:	f000 fae9 	bl	8013508 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f3c:	4613      	mov	r3, r2
 8012f3e:	009b      	lsls	r3, r3, #2
 8012f40:	4413      	add	r3, r2
 8012f42:	009b      	lsls	r3, r3, #2
 8012f44:	440b      	add	r3, r1
 8012f46:	685b      	ldr	r3, [r3, #4]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d017      	beq.n	8012f7c <onHelp+0x140>
                cli->writeChar(cli, '\t');
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	2109      	movs	r1, #9
 8012f52:	68f8      	ldr	r0, [r7, #12]
 8012f54:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	009b      	lsls	r3, r3, #2
 8012f60:	4413      	add	r3, r2
 8012f62:	009b      	lsls	r3, r3, #2
 8012f64:	440b      	add	r3, r1
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	4619      	mov	r1, r3
 8012f6a:	68f8      	ldr	r0, [r7, #12]
 8012f6c:	f000 facc 	bl	8013508 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8012f70:	4b5f      	ldr	r3, [pc, #380]	@ (80130f0 <onHelp+0x2b4>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	4619      	mov	r1, r3
 8012f76:	68f8      	ldr	r0, [r7, #12]
 8012f78:	f000 fac6 	bl	8013508 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7e:	3301      	adds	r3, #1
 8012f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f82:	69fb      	ldr	r3, [r7, #28]
 8012f84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012f86:	461a      	mov	r2, r3
 8012f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	dbbc      	blt.n	8012f08 <onHelp+0xcc>
            }
        }

        writeToOutput(cli, lineBreak);
 8012f8e:	4b58      	ldr	r3, [pc, #352]	@ (80130f0 <onHelp+0x2b4>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	4619      	mov	r1, r3
 8012f94:	68f8      	ldr	r0, [r7, #12]
 8012f96:	f000 fab7 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f9a:	4b55      	ldr	r3, [pc, #340]	@ (80130f0 <onHelp+0x2b4>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	68f8      	ldr	r0, [r7, #12]
 8012fa2:	f000 fab1 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012fa6:	4b52      	ldr	r3, [pc, #328]	@ (80130f0 <onHelp+0x2b4>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	4619      	mov	r1, r3
 8012fac:	68f8      	ldr	r0, [r7, #12]
 8012fae:	f000 faab 	bl	8013508 <writeToOutput>
		writeToOutput(cli, "BuildUp! Edge C02 Data Logger "); //TM 0x99
 8012fb2:	4956      	ldr	r1, [pc, #344]	@ (801310c <onHelp+0x2d0>)
 8012fb4:	68f8      	ldr	r0, [r7, #12]
 8012fb6:	f000 faa7 	bl	8013508 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8012fba:	4b4d      	ldr	r3, [pc, #308]	@ (80130f0 <onHelp+0x2b4>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f000 faa1 	bl	8013508 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Co. Montreal Canada "); //copyright 0xA9
 8012fc6:	4952      	ldr	r1, [pc, #328]	@ (8013110 <onHelp+0x2d4>)
 8012fc8:	68f8      	ldr	r0, [r7, #12]
 8012fca:	f000 fa9d 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012fce:	4b48      	ldr	r3, [pc, #288]	@ (80130f0 <onHelp+0x2b4>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	68f8      	ldr	r0, [r7, #12]
 8012fd6:	f000 fa97 	bl	8013508 <writeToOutput>
        writeToOutput(cli, "thingsfactory.com");
 8012fda:	494e      	ldr	r1, [pc, #312]	@ (8013114 <onHelp+0x2d8>)
 8012fdc:	68f8      	ldr	r0, [r7, #12]
 8012fde:	f000 fa93 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012fe2:	4b43      	ldr	r3, [pc, #268]	@ (80130f0 <onHelp+0x2b4>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	68f8      	ldr	r0, [r7, #12]
 8012fea:	f000 fa8d 	bl	8013508 <writeToOutput>
 8012fee:	e079      	b.n	80130e4 <onHelp+0x2a8>



    } else if (tokenCount == 1) {
 8012ff0:	8b7b      	ldrh	r3, [r7, #26]
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	d16c      	bne.n	80130d0 <onHelp+0x294>
        // try find command
        const char *helpStr = NULL;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8012ffa:	2101      	movs	r1, #1
 8012ffc:	68b8      	ldr	r0, [r7, #8]
 8012ffe:	f7ff fc4b 	bl	8012898 <embeddedCliGetToken>
 8013002:	6178      	str	r0, [r7, #20]
        bool found = false;
 8013004:	2300      	movs	r3, #0
 8013006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 801300a:	2300      	movs	r3, #0
 801300c:	623b      	str	r3, [r7, #32]
 801300e:	e020      	b.n	8013052 <onHelp+0x216>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8013010:	69fb      	ldr	r3, [r7, #28]
 8013012:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013014:	6a3a      	ldr	r2, [r7, #32]
 8013016:	4613      	mov	r3, r2
 8013018:	009b      	lsls	r3, r3, #2
 801301a:	4413      	add	r3, r2
 801301c:	009b      	lsls	r3, r3, #2
 801301e:	440b      	add	r3, r1
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	6979      	ldr	r1, [r7, #20]
 8013024:	4618      	mov	r0, r3
 8013026:	f7ed f8db 	bl	80001e0 <strcmp>
 801302a:	4603      	mov	r3, r0
 801302c:	2b00      	cmp	r3, #0
 801302e:	d10d      	bne.n	801304c <onHelp+0x210>
                helpStr = impl->bindings[i].help;
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013034:	6a3a      	ldr	r2, [r7, #32]
 8013036:	4613      	mov	r3, r2
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	4413      	add	r3, r2
 801303c:	009b      	lsls	r3, r3, #2
 801303e:	440b      	add	r3, r1
 8013040:	685b      	ldr	r3, [r3, #4]
 8013042:	62bb      	str	r3, [r7, #40]	@ 0x28
                found = true;
 8013044:	2301      	movs	r3, #1
 8013046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 801304a:	e008      	b.n	801305e <onHelp+0x222>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 801304c:	6a3b      	ldr	r3, [r7, #32]
 801304e:	3301      	adds	r3, #1
 8013050:	623b      	str	r3, [r7, #32]
 8013052:	69fb      	ldr	r3, [r7, #28]
 8013054:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013056:	461a      	mov	r2, r3
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	4293      	cmp	r3, r2
 801305c:	dbd8      	blt.n	8013010 <onHelp+0x1d4>
            }
        }
        if (found && helpStr != NULL) {
 801305e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013062:	2b00      	cmp	r3, #0
 8013064:	d020      	beq.n	80130a8 <onHelp+0x26c>
 8013066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013068:	2b00      	cmp	r3, #0
 801306a:	d01d      	beq.n	80130a8 <onHelp+0x26c>
            writeToOutput(cli, " * ");
 801306c:	4926      	ldr	r1, [pc, #152]	@ (8013108 <onHelp+0x2cc>)
 801306e:	68f8      	ldr	r0, [r7, #12]
 8013070:	f000 fa4a 	bl	8013508 <writeToOutput>
            writeToOutput(cli, cmdName);
 8013074:	6979      	ldr	r1, [r7, #20]
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	f000 fa46 	bl	8013508 <writeToOutput>
            writeToOutput(cli, lineBreak);
 801307c:	4b1c      	ldr	r3, [pc, #112]	@ (80130f0 <onHelp+0x2b4>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	4619      	mov	r1, r3
 8013082:	68f8      	ldr	r0, [r7, #12]
 8013084:	f000 fa40 	bl	8013508 <writeToOutput>
            cli->writeChar(cli, '\t');
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	2109      	movs	r1, #9
 801308e:	68f8      	ldr	r0, [r7, #12]
 8013090:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8013092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013094:	68f8      	ldr	r0, [r7, #12]
 8013096:	f000 fa37 	bl	8013508 <writeToOutput>
            writeToOutput(cli, lineBreak);
 801309a:	4b15      	ldr	r3, [pc, #84]	@ (80130f0 <onHelp+0x2b4>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	4619      	mov	r1, r3
 80130a0:	68f8      	ldr	r0, [r7, #12]
 80130a2:	f000 fa31 	bl	8013508 <writeToOutput>
 80130a6:	e01d      	b.n	80130e4 <onHelp+0x2a8>
        } else if (found) {
 80130a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00a      	beq.n	80130c6 <onHelp+0x28a>
            writeToOutput(cli, "Help is not available");
 80130b0:	490e      	ldr	r1, [pc, #56]	@ (80130ec <onHelp+0x2b0>)
 80130b2:	68f8      	ldr	r0, [r7, #12]
 80130b4:	f000 fa28 	bl	8013508 <writeToOutput>
            writeToOutput(cli, lineBreak);
 80130b8:	4b0d      	ldr	r3, [pc, #52]	@ (80130f0 <onHelp+0x2b4>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	4619      	mov	r1, r3
 80130be:	68f8      	ldr	r0, [r7, #12]
 80130c0:	f000 fa22 	bl	8013508 <writeToOutput>
 80130c4:	e00e      	b.n	80130e4 <onHelp+0x2a8>
        } else {
            onUnknownCommand(cli, cmdName);
 80130c6:	6979      	ldr	r1, [r7, #20]
 80130c8:	68f8      	ldr	r0, [r7, #12]
 80130ca:	f000 f827 	bl	801311c <onUnknownCommand>
 80130ce:	e009      	b.n	80130e4 <onHelp+0x2a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 80130d0:	4911      	ldr	r1, [pc, #68]	@ (8013118 <onHelp+0x2dc>)
 80130d2:	68f8      	ldr	r0, [r7, #12]
 80130d4:	f000 fa18 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80130d8:	4b05      	ldr	r3, [pc, #20]	@ (80130f0 <onHelp+0x2b4>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	4619      	mov	r1, r3
 80130de:	68f8      	ldr	r0, [r7, #12]
 80130e0:	f000 fa12 	bl	8013508 <writeToOutput>
    }
}
 80130e4:	3730      	adds	r7, #48	@ 0x30
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}
 80130ea:	bf00      	nop
 80130ec:	08024610 	.word	0x08024610
 80130f0:	20000024 	.word	0x20000024
 80130f4:	20001530 	.word	0x20001530
 80130f8:	08024628 	.word	0x08024628
 80130fc:	08024650 	.word	0x08024650
 8013100:	08024678 	.word	0x08024678
 8013104:	0802468c 	.word	0x0802468c
 8013108:	080246a8 	.word	0x080246a8
 801310c:	080246ac 	.word	0x080246ac
 8013110:	080246cc 	.word	0x080246cc
 8013114:	080246f0 	.word	0x080246f0
 8013118:	08024704 	.word	0x08024704

0801311c <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8013126:	490b      	ldr	r1, [pc, #44]	@ (8013154 <onUnknownCommand+0x38>)
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f000 f9ed 	bl	8013508 <writeToOutput>
    writeToOutput(cli, name);
 801312e:	6839      	ldr	r1, [r7, #0]
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f000 f9e9 	bl	8013508 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8013136:	4908      	ldr	r1, [pc, #32]	@ (8013158 <onUnknownCommand+0x3c>)
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 f9e5 	bl	8013508 <writeToOutput>
    writeToOutput(cli, lineBreak);
 801313e:	4b07      	ldr	r3, [pc, #28]	@ (801315c <onUnknownCommand+0x40>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	4619      	mov	r1, r3
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f000 f9df 	bl	8013508 <writeToOutput>
}
 801314a:	bf00      	nop
 801314c:	3708      	adds	r7, #8
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	08024734 	.word	0x08024734
 8013158:	08024748 	.word	0x08024748
 801315c:	20000024 	.word	0x20000024

08013160 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8013160:	b580      	push	{r7, lr}
 8013162:	b08e      	sub	sp, #56	@ 0x38
 8013164:	af00      	add	r7, sp, #0
 8013166:	60f8      	str	r0, [r7, #12]
 8013168:	60b9      	str	r1, [r7, #8]
 801316a:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 801316c:	2300      	movs	r3, #0
 801316e:	613b      	str	r3, [r7, #16]
 8013170:	2300      	movs	r3, #0
 8013172:	82bb      	strh	r3, [r7, #20]
 8013174:	2300      	movs	r3, #0
 8013176:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7ed f891 	bl	80002a0 <strlen>
 801317e:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8013186:	6a3b      	ldr	r3, [r7, #32]
 8013188:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801318a:	2b00      	cmp	r3, #0
 801318c:	d002      	beq.n	8013194 <getAutocompletedCommand+0x34>
 801318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013190:	2b00      	cmp	r3, #0
 8013192:	d108      	bne.n	80131a6 <getAutocompletedCommand+0x46>
        return cmd;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	461a      	mov	r2, r3
 8013198:	f107 0310 	add.w	r3, r7, #16
 801319c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80131a0:	e882 0003 	stmia.w	r2, {r0, r1}
 80131a4:	e095      	b.n	80132d2 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 80131a6:	2300      	movs	r3, #0
 80131a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80131aa:	e083      	b.n	80132b4 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 80131ac:	6a3b      	ldr	r3, [r7, #32]
 80131ae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80131b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80131b2:	4613      	mov	r3, r2
 80131b4:	009b      	lsls	r3, r3, #2
 80131b6:	4413      	add	r3, r2
 80131b8:	009b      	lsls	r3, r3, #2
 80131ba:	440b      	add	r3, r1
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 80131c0:	69f8      	ldr	r0, [r7, #28]
 80131c2:	f7ed f86d 	bl	80002a0 <strlen>
 80131c6:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 80131c8:	6a3b      	ldr	r3, [r7, #32]
 80131ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80131cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131ce:	4413      	add	r3, r2
 80131d0:	781a      	ldrb	r2, [r3, #0]
 80131d2:	6a3b      	ldr	r3, [r7, #32]
 80131d4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80131d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131d8:	440b      	add	r3, r1
 80131da:	f022 0201 	bic.w	r2, r2, #1
 80131de:	b2d2      	uxtb	r2, r2
 80131e0:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 80131e2:	69ba      	ldr	r2, [r7, #24]
 80131e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d35e      	bcc.n	80132a8 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 80131ea:	2301      	movs	r3, #1
 80131ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 80131f0:	2300      	movs	r3, #0
 80131f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80131f4:	e010      	b.n	8013218 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 80131f6:	687a      	ldr	r2, [r7, #4]
 80131f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131fa:	4413      	add	r3, r2
 80131fc:	781a      	ldrb	r2, [r3, #0]
 80131fe:	69f9      	ldr	r1, [r7, #28]
 8013200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013202:	440b      	add	r3, r1
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	429a      	cmp	r2, r3
 8013208:	d003      	beq.n	8013212 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 801320a:	2300      	movs	r3, #0
 801320c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8013210:	e006      	b.n	8013220 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8013212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013214:	3301      	adds	r3, #1
 8013216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801321c:	429a      	cmp	r2, r3
 801321e:	d3ea      	bcc.n	80131f6 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8013220:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013224:	f083 0301 	eor.w	r3, r3, #1
 8013228:	b2db      	uxtb	r3, r3
 801322a:	2b00      	cmp	r3, #0
 801322c:	d13e      	bne.n	80132ac <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 801322e:	6a3b      	ldr	r3, [r7, #32]
 8013230:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013234:	4413      	add	r3, r2
 8013236:	781a      	ldrb	r2, [r3, #0]
 8013238:	6a3b      	ldr	r3, [r7, #32]
 801323a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801323c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801323e:	440b      	add	r3, r1
 8013240:	f042 0201 	orr.w	r2, r2, #1
 8013244:	b2d2      	uxtb	r2, r2
 8013246:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8013248:	8afb      	ldrh	r3, [r7, #22]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d004      	beq.n	8013258 <getAutocompletedCommand+0xf8>
 801324e:	8abb      	ldrh	r3, [r7, #20]
 8013250:	461a      	mov	r2, r3
 8013252:	69bb      	ldr	r3, [r7, #24]
 8013254:	4293      	cmp	r3, r2
 8013256:	d202      	bcs.n	801325e <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8013258:	69bb      	ldr	r3, [r7, #24]
 801325a:	b29b      	uxth	r3, r3
 801325c:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 801325e:	8afb      	ldrh	r3, [r7, #22]
 8013260:	3301      	adds	r3, #1
 8013262:	b29b      	uxth	r3, r3
 8013264:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8013266:	8afb      	ldrh	r3, [r7, #22]
 8013268:	2b01      	cmp	r3, #1
 801326a:	d102      	bne.n	8013272 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	613b      	str	r3, [r7, #16]
            continue;
 8013270:	e01d      	b.n	80132ae <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8013272:	6a3b      	ldr	r3, [r7, #32]
 8013274:	8c1b      	ldrh	r3, [r3, #32]
 8013276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013278:	e010      	b.n	801329c <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 801327a:	693a      	ldr	r2, [r7, #16]
 801327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801327e:	4413      	add	r3, r2
 8013280:	781a      	ldrb	r2, [r3, #0]
 8013282:	69f9      	ldr	r1, [r7, #28]
 8013284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013286:	440b      	add	r3, r1
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	429a      	cmp	r2, r3
 801328c:	d003      	beq.n	8013296 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 801328e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013290:	b29b      	uxth	r3, r3
 8013292:	82bb      	strh	r3, [r7, #20]
                break;
 8013294:	e00b      	b.n	80132ae <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8013296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013298:	3301      	adds	r3, #1
 801329a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801329c:	8abb      	ldrh	r3, [r7, #20]
 801329e:	461a      	mov	r2, r3
 80132a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132a2:	4293      	cmp	r3, r2
 80132a4:	d3e9      	bcc.n	801327a <getAutocompletedCommand+0x11a>
 80132a6:	e002      	b.n	80132ae <getAutocompletedCommand+0x14e>
            continue;
 80132a8:	bf00      	nop
 80132aa:	e000      	b.n	80132ae <getAutocompletedCommand+0x14e>
            continue;
 80132ac:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80132ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132b0:	3301      	adds	r3, #1
 80132b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80132b4:	6a3b      	ldr	r3, [r7, #32]
 80132b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80132b8:	461a      	mov	r2, r3
 80132ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132bc:	4293      	cmp	r3, r2
 80132be:	f6ff af75 	blt.w	80131ac <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	461a      	mov	r2, r3
 80132c6:	f107 0310 	add.w	r3, r7, #16
 80132ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80132ce:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80132d2:	68f8      	ldr	r0, [r7, #12]
 80132d4:	3738      	adds	r7, #56	@ 0x38
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}

080132da <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 80132da:	b580      	push	{r7, lr}
 80132dc:	b088      	sub	sp, #32
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	68db      	ldr	r3, [r3, #12]
 80132e6:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 80132e8:	697b      	ldr	r3, [r7, #20]
 80132ea:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80132ee:	f003 0320 	and.w	r3, r3, #32
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d048      	beq.n	8013388 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	69da      	ldr	r2, [r3, #28]
 80132fa:	f107 030c 	add.w	r3, r7, #12
 80132fe:	6879      	ldr	r1, [r7, #4]
 8013300:	4618      	mov	r0, r3
 8013302:	f7ff ff2d 	bl	8013160 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8013306:	8a7b      	ldrh	r3, [r7, #18]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d102      	bne.n	8013312 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	8c1b      	ldrh	r3, [r3, #32]
 8013310:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	8c1b      	ldrh	r3, [r3, #32]
 8013316:	61fb      	str	r3, [r7, #28]
 8013318:	e00b      	b.n	8013332 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	68f9      	ldr	r1, [r7, #12]
 8013320:	69fa      	ldr	r2, [r7, #28]
 8013322:	440a      	add	r2, r1
 8013324:	7812      	ldrb	r2, [r2, #0]
 8013326:	4611      	mov	r1, r2
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 801332c:	69fb      	ldr	r3, [r7, #28]
 801332e:	3301      	adds	r3, #1
 8013330:	61fb      	str	r3, [r7, #28]
 8013332:	8a3b      	ldrh	r3, [r7, #16]
 8013334:	461a      	mov	r2, r3
 8013336:	69fb      	ldr	r3, [r7, #28]
 8013338:	4293      	cmp	r3, r2
 801333a:	d3ee      	bcc.n	801331a <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 801333c:	8a3b      	ldrh	r3, [r7, #16]
 801333e:	61bb      	str	r3, [r7, #24]
 8013340:	e007      	b.n	8013352 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	2120      	movs	r1, #32
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	3301      	adds	r3, #1
 8013350:	61bb      	str	r3, [r7, #24]
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8013356:	461a      	mov	r2, r3
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	4293      	cmp	r3, r2
 801335c:	d3f1      	bcc.n	8013342 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 801335e:	8a3a      	ldrh	r2, [r7, #16]
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	861a      	strh	r2, [r3, #48]	@ 0x30
    cli->writeChar(cli, '\r');
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	210d      	movs	r1, #13
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	4619      	mov	r1, r3
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f000 f8c7 	bl	8013508 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	69db      	ldr	r3, [r3, #28]
 801337e:	4619      	mov	r1, r3
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f000 f8c1 	bl	8013508 <writeToOutput>
 8013386:	e000      	b.n	801338a <printLiveAutocompletion+0xb0>
        return;
 8013388:	bf00      	nop
}
 801338a:	3720      	adds	r7, #32
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}

08013390 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8013390:	b580      	push	{r7, lr}
 8013392:	b088      	sub	sp, #32
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	68db      	ldr	r3, [r3, #12]
 801339c:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 801339e:	69bb      	ldr	r3, [r7, #24]
 80133a0:	69da      	ldr	r2, [r3, #28]
 80133a2:	f107 030c 	add.w	r3, r7, #12
 80133a6:	6879      	ldr	r1, [r7, #4]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7ff fed9 	bl	8013160 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 80133ae:	8a7b      	ldrh	r3, [r7, #18]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d071      	beq.n	8013498 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 80133b4:	8a7b      	ldrh	r3, [r7, #18]
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d004      	beq.n	80133c4 <onAutocompleteRequest+0x34>
 80133ba:	8a3a      	ldrh	r2, [r7, #16]
 80133bc:	69bb      	ldr	r3, [r7, #24]
 80133be:	8c1b      	ldrh	r3, [r3, #32]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d92a      	bls.n	801341a <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 80133c4:	69bb      	ldr	r3, [r7, #24]
 80133c6:	69db      	ldr	r3, [r3, #28]
 80133c8:	68f9      	ldr	r1, [r7, #12]
 80133ca:	8a3a      	ldrh	r2, [r7, #16]
 80133cc:	4618      	mov	r0, r3
 80133ce:	f00b fe0a 	bl	801efe6 <memcpy>
        if (cmd.candidateCount == 1) {
 80133d2:	8a7b      	ldrh	r3, [r7, #18]
 80133d4:	2b01      	cmp	r3, #1
 80133d6:	d109      	bne.n	80133ec <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 80133d8:	69bb      	ldr	r3, [r7, #24]
 80133da:	69db      	ldr	r3, [r3, #28]
 80133dc:	8a3a      	ldrh	r2, [r7, #16]
 80133de:	4413      	add	r3, r2
 80133e0:	2220      	movs	r2, #32
 80133e2:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 80133e4:	8a3b      	ldrh	r3, [r7, #16]
 80133e6:	3301      	adds	r3, #1
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 80133ec:	69bb      	ldr	r3, [r7, #24]
 80133ee:	69db      	ldr	r3, [r3, #28]
 80133f0:	8a3a      	ldrh	r2, [r7, #16]
 80133f2:	4413      	add	r3, r2
 80133f4:	2200      	movs	r2, #0
 80133f6:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 80133f8:	69bb      	ldr	r3, [r7, #24]
 80133fa:	69db      	ldr	r3, [r3, #28]
 80133fc:	69ba      	ldr	r2, [r7, #24]
 80133fe:	8c12      	ldrh	r2, [r2, #32]
 8013400:	4413      	add	r3, r2
 8013402:	4619      	mov	r1, r3
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f000 f87f 	bl	8013508 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 801340a:	8a3a      	ldrh	r2, [r7, #16]
 801340c:	69bb      	ldr	r3, [r7, #24]
 801340e:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	8c1a      	ldrh	r2, [r3, #32]
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	861a      	strh	r2, [r3, #48]	@ 0x30
        return;
 8013418:	e03f      	b.n	801349a <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 801341a:	6878      	ldr	r0, [r7, #4]
 801341c:	f000 f842 	bl	80134a4 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013420:	2300      	movs	r3, #0
 8013422:	61fb      	str	r3, [r7, #28]
 8013424:	e021      	b.n	801346a <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8013426:	69bb      	ldr	r3, [r7, #24]
 8013428:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801342a:	69fb      	ldr	r3, [r7, #28]
 801342c:	4413      	add	r3, r2
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	f003 0301 	and.w	r3, r3, #1
 8013434:	2b00      	cmp	r3, #0
 8013436:	d014      	beq.n	8013462 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8013438:	69bb      	ldr	r3, [r7, #24]
 801343a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801343c:	69fa      	ldr	r2, [r7, #28]
 801343e:	4613      	mov	r3, r2
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	4413      	add	r3, r2
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	440b      	add	r3, r1
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 801344c:	6979      	ldr	r1, [r7, #20]
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f000 f85a 	bl	8013508 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8013454:	4b12      	ldr	r3, [pc, #72]	@ (80134a0 <onAutocompleteRequest+0x110>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	4619      	mov	r1, r3
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f000 f854 	bl	8013508 <writeToOutput>
 8013460:	e000      	b.n	8013464 <onAutocompleteRequest+0xd4>
            continue;
 8013462:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013464:	69fb      	ldr	r3, [r7, #28]
 8013466:	3301      	adds	r3, #1
 8013468:	61fb      	str	r3, [r7, #28]
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801346e:	461a      	mov	r2, r3
 8013470:	69fb      	ldr	r3, [r7, #28]
 8013472:	4293      	cmp	r3, r2
 8013474:	dbd7      	blt.n	8013426 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	4619      	mov	r1, r3
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f000 f843 	bl	8013508 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	69db      	ldr	r3, [r3, #28]
 8013486:	4619      	mov	r1, r3
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f000 f83d 	bl	8013508 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	8c1a      	ldrh	r2, [r3, #32]
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013496:	e000      	b.n	801349a <onAutocompleteRequest+0x10a>
        return;
 8013498:	bf00      	nop
}
 801349a:	3720      	adds	r7, #32
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	20000024 	.word	0x20000024

080134a4 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 80134a4:	b590      	push	{r4, r7, lr}
 80134a6:	b087      	sub	sp, #28
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80134b6:	461c      	mov	r4, r3
 80134b8:	693b      	ldr	r3, [r7, #16]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ec feef 	bl	80002a0 <strlen>
 80134c2:	4603      	mov	r3, r0
 80134c4:	4423      	add	r3, r4
 80134c6:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	210d      	movs	r1, #13
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80134d2:	2300      	movs	r3, #0
 80134d4:	617b      	str	r3, [r7, #20]
 80134d6:	e007      	b.n	80134e8 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	2120      	movs	r1, #32
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	3301      	adds	r3, #1
 80134e6:	617b      	str	r3, [r7, #20]
 80134e8:	697a      	ldr	r2, [r7, #20]
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	429a      	cmp	r2, r3
 80134ee:	d3f3      	bcc.n	80134d8 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	210d      	movs	r1, #13
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	4798      	blx	r3
    impl->inputLineLength = 0;
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	2200      	movs	r2, #0
 80134fe:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 8013500:	bf00      	nop
 8013502:	371c      	adds	r7, #28
 8013504:	46bd      	mov	sp, r7
 8013506:	bd90      	pop	{r4, r7, pc}

08013508 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8013508:	b580      	push	{r7, lr}
 801350a:	b084      	sub	sp, #16
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8013512:	6838      	ldr	r0, [r7, #0]
 8013514:	f7ec fec4 	bl	80002a0 <strlen>
 8013518:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 801351a:	2300      	movs	r3, #0
 801351c:	60fb      	str	r3, [r7, #12]
 801351e:	e00b      	b.n	8013538 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	6839      	ldr	r1, [r7, #0]
 8013526:	68fa      	ldr	r2, [r7, #12]
 8013528:	440a      	add	r2, r1
 801352a:	7812      	ldrb	r2, [r2, #0]
 801352c:	4611      	mov	r1, r2
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	3301      	adds	r3, #1
 8013536:	60fb      	str	r3, [r7, #12]
 8013538:	68fa      	ldr	r2, [r7, #12]
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	429a      	cmp	r2, r3
 801353e:	d3ef      	bcc.n	8013520 <writeToOutput+0x18>
    }
}
 8013540:	bf00      	nop
 8013542:	bf00      	nop
 8013544:	3710      	adds	r7, #16
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}

0801354a <isControlChar>:

static bool isControlChar(char c) {
 801354a:	b480      	push	{r7}
 801354c:	b083      	sub	sp, #12
 801354e:	af00      	add	r7, sp, #0
 8013550:	4603      	mov	r3, r0
 8013552:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8013554:	79fb      	ldrb	r3, [r7, #7]
 8013556:	2b0d      	cmp	r3, #13
 8013558:	d00b      	beq.n	8013572 <isControlChar+0x28>
 801355a:	79fb      	ldrb	r3, [r7, #7]
 801355c:	2b0a      	cmp	r3, #10
 801355e:	d008      	beq.n	8013572 <isControlChar+0x28>
 8013560:	79fb      	ldrb	r3, [r7, #7]
 8013562:	2b08      	cmp	r3, #8
 8013564:	d005      	beq.n	8013572 <isControlChar+0x28>
 8013566:	79fb      	ldrb	r3, [r7, #7]
 8013568:	2b09      	cmp	r3, #9
 801356a:	d002      	beq.n	8013572 <isControlChar+0x28>
 801356c:	79fb      	ldrb	r3, [r7, #7]
 801356e:	2b7f      	cmp	r3, #127	@ 0x7f
 8013570:	d101      	bne.n	8013576 <isControlChar+0x2c>
 8013572:	2301      	movs	r3, #1
 8013574:	e000      	b.n	8013578 <isControlChar+0x2e>
 8013576:	2300      	movs	r3, #0
 8013578:	f003 0301 	and.w	r3, r3, #1
 801357c:	b2db      	uxtb	r3, r3
}
 801357e:	4618      	mov	r0, r3
 8013580:	370c      	adds	r7, #12
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr

0801358a <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 801358a:	b480      	push	{r7}
 801358c:	b083      	sub	sp, #12
 801358e:	af00      	add	r7, sp, #0
 8013590:	4603      	mov	r3, r0
 8013592:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8013594:	79fb      	ldrb	r3, [r7, #7]
 8013596:	2b1f      	cmp	r3, #31
 8013598:	d904      	bls.n	80135a4 <isDisplayableChar+0x1a>
 801359a:	79fb      	ldrb	r3, [r7, #7]
 801359c:	2b7e      	cmp	r3, #126	@ 0x7e
 801359e:	d801      	bhi.n	80135a4 <isDisplayableChar+0x1a>
 80135a0:	2301      	movs	r3, #1
 80135a2:	e000      	b.n	80135a6 <isDisplayableChar+0x1c>
 80135a4:	2300      	movs	r3, #0
 80135a6:	f003 0301 	and.w	r3, r3, #1
 80135aa:	b2db      	uxtb	r3, r3
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	370c      	adds	r7, #12
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr

080135b8 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 80135b8:	b480      	push	{r7}
 80135ba:	b083      	sub	sp, #12
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	88da      	ldrh	r2, [r3, #6]
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	889b      	ldrh	r3, [r3, #4]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d306      	bcc.n	80135da <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	88da      	ldrh	r2, [r3, #6]
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	889b      	ldrh	r3, [r3, #4]
 80135d4:	1ad3      	subs	r3, r2, r3
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	e009      	b.n	80135ee <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	891a      	ldrh	r2, [r3, #8]
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	889b      	ldrh	r3, [r3, #4]
 80135e2:	1ad3      	subs	r3, r2, r3
 80135e4:	b29a      	uxth	r2, r3
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	88db      	ldrh	r3, [r3, #6]
 80135ea:	4413      	add	r3, r2
 80135ec:	b29b      	uxth	r3, r3
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	370c      	adds	r7, #12
 80135f2:	46bd      	mov	sp, r7
 80135f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f8:	4770      	bx	lr

080135fa <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 80135fa:	b480      	push	{r7}
 80135fc:	b085      	sub	sp, #20
 80135fe:	af00      	add	r7, sp, #0
 8013600:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8013602:	2300      	movs	r3, #0
 8013604:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	889a      	ldrh	r2, [r3, #4]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	88db      	ldrh	r3, [r3, #6]
 801360e:	429a      	cmp	r2, r3
 8013610:	d014      	beq.n	801363c <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	8892      	ldrh	r2, [r2, #4]
 801361a:	4413      	add	r3, r2
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	889b      	ldrh	r3, [r3, #4]
 8013624:	3301      	adds	r3, #1
 8013626:	b29b      	uxth	r3, r3
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	8912      	ldrh	r2, [r2, #8]
 801362c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013630:	fb01 f202 	mul.w	r2, r1, r2
 8013634:	1a9b      	subs	r3, r3, r2
 8013636:	b29a      	uxth	r2, r3
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	809a      	strh	r2, [r3, #4]
    }
    return a;
 801363c:	7bfb      	ldrb	r3, [r7, #15]
}
 801363e:	4618      	mov	r0, r3
 8013640:	3714      	adds	r7, #20
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr

0801364a <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 801364a:	b480      	push	{r7}
 801364c:	b085      	sub	sp, #20
 801364e:	af00      	add	r7, sp, #0
 8013650:	6078      	str	r0, [r7, #4]
 8013652:	460b      	mov	r3, r1
 8013654:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	88db      	ldrh	r3, [r3, #6]
 801365a:	3301      	adds	r3, #1
 801365c:	b29b      	uxth	r3, r3
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	8912      	ldrh	r2, [r2, #8]
 8013662:	fbb3 f1f2 	udiv	r1, r3, r2
 8013666:	fb01 f202 	mul.w	r2, r1, r2
 801366a:	1a9b      	subs	r3, r3, r2
 801366c:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	889b      	ldrh	r3, [r3, #4]
 8013672:	89fa      	ldrh	r2, [r7, #14]
 8013674:	429a      	cmp	r2, r3
 8013676:	d00b      	beq.n	8013690 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	687a      	ldr	r2, [r7, #4]
 801367e:	88d2      	ldrh	r2, [r2, #6]
 8013680:	4413      	add	r3, r2
 8013682:	78fa      	ldrb	r2, [r7, #3]
 8013684:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	89fa      	ldrh	r2, [r7, #14]
 801368a:	80da      	strh	r2, [r3, #6]
        return true;
 801368c:	2301      	movs	r3, #1
 801368e:	e000      	b.n	8013692 <fifoBufPush+0x48>
    }
    return false;
 8013690:	2300      	movs	r3, #0
}
 8013692:	4618      	mov	r0, r3
 8013694:	3714      	adds	r7, #20
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr

0801369e <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 801369e:	b580      	push	{r7, lr}
 80136a0:	b088      	sub	sp, #32
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	6078      	str	r0, [r7, #4]
 80136a6:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80136a8:	6838      	ldr	r0, [r7, #0]
 80136aa:	f7ec fdf9 	bl	80002a0 <strlen>
 80136ae:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	889b      	ldrh	r3, [r3, #4]
 80136b4:	461a      	mov	r2, r3
 80136b6:	69bb      	ldr	r3, [r7, #24]
 80136b8:	3301      	adds	r3, #1
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d201      	bcs.n	80136c2 <historyPut+0x24>
        return false;
 80136be:	2300      	movs	r3, #0
 80136c0:	e04d      	b.n	801375e <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 80136c2:	6839      	ldr	r1, [r7, #0]
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f000 f86a 	bl	801379e <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 80136ca:	e024      	b.n	8013716 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	891b      	ldrh	r3, [r3, #8]
 80136d0:	4619      	mov	r1, r3
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f000 f847 	bl	8013766 <historyGet>
 80136d8:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 80136da:	6978      	ldr	r0, [r7, #20]
 80136dc:	f7ec fde0 	bl	80002a0 <strlen>
 80136e0:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	697a      	ldr	r2, [r7, #20]
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	461a      	mov	r2, r3
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	4413      	add	r3, r2
 80136f0:	3301      	adds	r3, #1
 80136f2:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	889b      	ldrh	r3, [r3, #4]
 80136f8:	461a      	mov	r2, r3
 80136fa:	69fb      	ldr	r3, [r7, #28]
 80136fc:	1ad3      	subs	r3, r2, r3
 80136fe:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	3301      	adds	r3, #1
 8013704:	68fa      	ldr	r2, [r7, #12]
 8013706:	429a      	cmp	r2, r3
 8013708:	d20a      	bcs.n	8013720 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	891b      	ldrh	r3, [r3, #8]
 801370e:	3b01      	subs	r3, #1
 8013710:	b29a      	uxth	r2, r3
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	891b      	ldrh	r3, [r3, #8]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d1d6      	bne.n	80136cc <historyPut+0x2e>
 801371e:	e000      	b.n	8013722 <historyPut+0x84>
            break;
 8013720:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	891b      	ldrh	r3, [r3, #8]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d00a      	beq.n	8013740 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681a      	ldr	r2, [r3, #0]
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	3301      	adds	r3, #1
 8013732:	18d0      	adds	r0, r2, r3
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	69fa      	ldr	r2, [r7, #28]
 801373a:	4619      	mov	r1, r3
 801373c:	f00b fb22 	bl	801ed84 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6818      	ldr	r0, [r3, #0]
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	3301      	adds	r3, #1
 8013748:	461a      	mov	r2, r3
 801374a:	6839      	ldr	r1, [r7, #0]
 801374c:	f00b fc4b 	bl	801efe6 <memcpy>
    ++history->itemsCount;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	891b      	ldrh	r3, [r3, #8]
 8013754:	3301      	adds	r3, #1
 8013756:	b29a      	uxth	r2, r3
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	811a      	strh	r2, [r3, #8]

    return true;
 801375c:	2301      	movs	r3, #1
}
 801375e:	4618      	mov	r0, r3
 8013760:	3720      	adds	r7, #32
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}

08013766 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8013766:	b580      	push	{r7, lr}
 8013768:	b082      	sub	sp, #8
 801376a:	af00      	add	r7, sp, #0
 801376c:	6078      	str	r0, [r7, #4]
 801376e:	460b      	mov	r3, r1
 8013770:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8013772:	887b      	ldrh	r3, [r7, #2]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d004      	beq.n	8013782 <historyGet+0x1c>
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	891b      	ldrh	r3, [r3, #8]
 801377c:	887a      	ldrh	r2, [r7, #2]
 801377e:	429a      	cmp	r2, r3
 8013780:	d901      	bls.n	8013786 <historyGet+0x20>
        return NULL;
 8013782:	2300      	movs	r3, #0
 8013784:	e007      	b.n	8013796 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	887a      	ldrh	r2, [r7, #2]
 801378c:	4611      	mov	r1, r2
 801378e:	4618      	mov	r0, r3
 8013790:	f7ff f882 	bl	8012898 <embeddedCliGetToken>
 8013794:	4603      	mov	r3, r0
}
 8013796:	4618      	mov	r0, r3
 8013798:	3708      	adds	r7, #8
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}

0801379e <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 801379e:	b580      	push	{r7, lr}
 80137a0:	b086      	sub	sp, #24
 80137a2:	af00      	add	r7, sp, #0
 80137a4:	6078      	str	r0, [r7, #4]
 80137a6:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d04c      	beq.n	8013848 <historyRemove+0xaa>
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	891b      	ldrh	r3, [r3, #8]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d048      	beq.n	8013848 <historyRemove+0xaa>
        return;
    char *item = NULL;
 80137b6:	2300      	movs	r3, #0
 80137b8:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80137ba:	2301      	movs	r3, #1
 80137bc:	827b      	strh	r3, [r7, #18]
 80137be:	e013      	b.n	80137e8 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	8a7a      	ldrh	r2, [r7, #18]
 80137c6:	4611      	mov	r1, r2
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7ff f880 	bl	80128ce <embeddedCliGetTokenVariable>
 80137ce:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 80137d0:	6839      	ldr	r1, [r7, #0]
 80137d2:	6978      	ldr	r0, [r7, #20]
 80137d4:	f7ec fd04 	bl	80001e0 <strcmp>
 80137d8:	4603      	mov	r3, r0
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d00a      	beq.n	80137f4 <historyRemove+0x56>
            break;
        }
        item = NULL;
 80137de:	2300      	movs	r3, #0
 80137e0:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80137e2:	8a7b      	ldrh	r3, [r7, #18]
 80137e4:	3301      	adds	r3, #1
 80137e6:	827b      	strh	r3, [r7, #18]
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	891b      	ldrh	r3, [r3, #8]
 80137ec:	8a7a      	ldrh	r2, [r7, #18]
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d9e6      	bls.n	80137c0 <historyRemove+0x22>
 80137f2:	e000      	b.n	80137f6 <historyRemove+0x58>
            break;
 80137f4:	bf00      	nop
    }
    if (item == NULL)
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d027      	beq.n	801384c <historyRemove+0xae>
        return;

    --history->itemsCount;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	891b      	ldrh	r3, [r3, #8]
 8013800:	3b01      	subs	r3, #1
 8013802:	b29a      	uxth	r2, r3
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8013808:	8a7a      	ldrh	r2, [r7, #18]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	891b      	ldrh	r3, [r3, #8]
 801380e:	3301      	adds	r3, #1
 8013810:	429a      	cmp	r2, r3
 8013812:	d01d      	beq.n	8013850 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8013814:	6978      	ldr	r0, [r7, #20]
 8013816:	f7ec fd43 	bl	80002a0 <strlen>
 801381a:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	889b      	ldrh	r3, [r3, #4]
 8013820:	4619      	mov	r1, r3
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	3301      	adds	r3, #1
 8013826:	697a      	ldr	r2, [r7, #20]
 8013828:	441a      	add	r2, r3
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	1ad3      	subs	r3, r2, r3
 8013830:	1acb      	subs	r3, r1, r3
 8013832:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	3301      	adds	r3, #1
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	4413      	add	r3, r2
 801383c:	68ba      	ldr	r2, [r7, #8]
 801383e:	4619      	mov	r1, r3
 8013840:	6978      	ldr	r0, [r7, #20]
 8013842:	f00b fa9f 	bl	801ed84 <memmove>
 8013846:	e004      	b.n	8013852 <historyRemove+0xb4>
        return;
 8013848:	bf00      	nop
 801384a:	e002      	b.n	8013852 <historyRemove+0xb4>
        return;
 801384c:	bf00      	nop
 801384e:	e000      	b.n	8013852 <historyRemove+0xb4>
        return;
 8013850:	bf00      	nop
}
 8013852:	3718      	adds	r7, #24
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8013858:	b480      	push	{r7}
 801385a:	b085      	sub	sp, #20
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	460b      	mov	r3, r1
 8013862:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d002      	beq.n	8013870 <getTokenPosition+0x18>
 801386a:	887b      	ldrh	r3, [r7, #2]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d102      	bne.n	8013876 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8013870:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013874:	e028      	b.n	80138c8 <getTokenPosition+0x70>
    uint16_t i = 0;
 8013876:	2300      	movs	r3, #0
 8013878:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 801387a:	2301      	movs	r3, #1
 801387c:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 801387e:	89ba      	ldrh	r2, [r7, #12]
 8013880:	887b      	ldrh	r3, [r7, #2]
 8013882:	429a      	cmp	r2, r3
 8013884:	d013      	beq.n	80138ae <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8013886:	89fb      	ldrh	r3, [r7, #14]
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	4413      	add	r3, r2
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d109      	bne.n	80138a6 <getTokenPosition+0x4e>
            ++tokenCount;
 8013892:	89bb      	ldrh	r3, [r7, #12]
 8013894:	3301      	adds	r3, #1
 8013896:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8013898:	89fb      	ldrh	r3, [r7, #14]
 801389a:	3301      	adds	r3, #1
 801389c:	687a      	ldr	r2, [r7, #4]
 801389e:	4413      	add	r3, r2
 80138a0:	781b      	ldrb	r3, [r3, #0]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d005      	beq.n	80138b2 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 80138a6:	89fb      	ldrh	r3, [r7, #14]
 80138a8:	3301      	adds	r3, #1
 80138aa:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 80138ac:	e7e7      	b.n	801387e <getTokenPosition+0x26>
            break;
 80138ae:	bf00      	nop
 80138b0:	e000      	b.n	80138b4 <getTokenPosition+0x5c>
                break;
 80138b2:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 80138b4:	89fb      	ldrh	r3, [r7, #14]
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	4413      	add	r3, r2
 80138ba:	781b      	ldrb	r3, [r3, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d001      	beq.n	80138c4 <getTokenPosition+0x6c>
        return i;
 80138c0:	89fb      	ldrh	r3, [r7, #14]
 80138c2:	e001      	b.n	80138c8 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 80138c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3714      	adds	r7, #20
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr

080138d4 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80138d8:	4904      	ldr	r1, [pc, #16]	@ (80138ec <MX_FATFS_Init+0x18>)
 80138da:	4805      	ldr	r0, [pc, #20]	@ (80138f0 <MX_FATFS_Init+0x1c>)
 80138dc:	f008 facc 	bl	801be78 <FATFS_LinkDriver>
 80138e0:	4603      	mov	r3, r0
 80138e2:	461a      	mov	r2, r3
 80138e4:	4b03      	ldr	r3, [pc, #12]	@ (80138f4 <MX_FATFS_Init+0x20>)
 80138e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80138e8:	bf00      	nop
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	20001b58 	.word	0x20001b58
 80138f0:	0802509c 	.word	0x0802509c
 80138f4:	20001b54 	.word	0x20001b54

080138f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80138f8:	b480      	push	{r7}
 80138fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80138fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80138fe:	4618      	mov	r0, r3
 8013900:	46bd      	mov	sp, r7
 8013902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013906:	4770      	bx	lr

08013908 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801390e:	2300      	movs	r3, #0
 8013910:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013912:	f000 f86b 	bl	80139ec <BSP_SD_IsDetected>
 8013916:	4603      	mov	r3, r0
 8013918:	2b01      	cmp	r3, #1
 801391a:	d001      	beq.n	8013920 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801391c:	2301      	movs	r3, #1
 801391e:	e005      	b.n	801392c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8013920:	4804      	ldr	r0, [pc, #16]	@ (8013934 <BSP_SD_Init+0x2c>)
 8013922:	f7f6 fbeb 	bl	800a0fc <HAL_SD_Init>
 8013926:	4603      	mov	r3, r0
 8013928:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 801392a:	79fb      	ldrb	r3, [r7, #7]
}
 801392c:	4618      	mov	r0, r3
 801392e:	3708      	adds	r7, #8
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}
 8013934:	200018b8 	.word	0x200018b8

08013938 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b088      	sub	sp, #32
 801393c:	af02      	add	r7, sp, #8
 801393e:	60f8      	str	r0, [r7, #12]
 8013940:	60b9      	str	r1, [r7, #8]
 8013942:	607a      	str	r2, [r7, #4]
 8013944:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013946:	2300      	movs	r3, #0
 8013948:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	9300      	str	r3, [sp, #0]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	68ba      	ldr	r2, [r7, #8]
 8013952:	68f9      	ldr	r1, [r7, #12]
 8013954:	4806      	ldr	r0, [pc, #24]	@ (8013970 <BSP_SD_ReadBlocks+0x38>)
 8013956:	f7f6 fc81 	bl	800a25c <HAL_SD_ReadBlocks>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d001      	beq.n	8013964 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013960:	2301      	movs	r3, #1
 8013962:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013964:	7dfb      	ldrb	r3, [r7, #23]
}
 8013966:	4618      	mov	r0, r3
 8013968:	3718      	adds	r7, #24
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
 801396e:	bf00      	nop
 8013970:	200018b8 	.word	0x200018b8

08013974 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b088      	sub	sp, #32
 8013978:	af02      	add	r7, sp, #8
 801397a:	60f8      	str	r0, [r7, #12]
 801397c:	60b9      	str	r1, [r7, #8]
 801397e:	607a      	str	r2, [r7, #4]
 8013980:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013982:	2300      	movs	r3, #0
 8013984:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	68f9      	ldr	r1, [r7, #12]
 8013990:	4806      	ldr	r0, [pc, #24]	@ (80139ac <BSP_SD_WriteBlocks+0x38>)
 8013992:	f7f6 fe49 	bl	800a628 <HAL_SD_WriteBlocks>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d001      	beq.n	80139a0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801399c:	2301      	movs	r3, #1
 801399e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80139a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3718      	adds	r7, #24
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}
 80139aa:	bf00      	nop
 80139ac:	200018b8 	.word	0x200018b8

080139b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80139b4:	4805      	ldr	r0, [pc, #20]	@ (80139cc <BSP_SD_GetCardState+0x1c>)
 80139b6:	f7f7 f995 	bl	800ace4 <HAL_SD_GetCardState>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b04      	cmp	r3, #4
 80139be:	bf14      	ite	ne
 80139c0:	2301      	movne	r3, #1
 80139c2:	2300      	moveq	r3, #0
 80139c4:	b2db      	uxtb	r3, r3
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	bd80      	pop	{r7, pc}
 80139ca:	bf00      	nop
 80139cc:	200018b8 	.word	0x200018b8

080139d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b082      	sub	sp, #8
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80139d8:	6879      	ldr	r1, [r7, #4]
 80139da:	4803      	ldr	r0, [pc, #12]	@ (80139e8 <BSP_SD_GetCardInfo+0x18>)
 80139dc:	f7f7 f956 	bl	800ac8c <HAL_SD_GetCardInfo>
}
 80139e0:	bf00      	nop
 80139e2:	3708      	adds	r7, #8
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	200018b8 	.word	0x200018b8

080139ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80139f2:	2301      	movs	r3, #1
 80139f4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80139f6:	79fb      	ldrb	r3, [r7, #7]
 80139f8:	b2db      	uxtb	r3, r3
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	370c      	adds	r7, #12
 80139fe:	46bd      	mov	sp, r7
 8013a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a04:	4770      	bx	lr
	...

08013a08 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b082      	sub	sp, #8
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	4603      	mov	r3, r0
 8013a10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013a12:	4b0b      	ldr	r3, [pc, #44]	@ (8013a40 <SD_CheckStatus+0x38>)
 8013a14:	2201      	movs	r2, #1
 8013a16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013a18:	f7ff ffca 	bl	80139b0 <BSP_SD_GetCardState>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d107      	bne.n	8013a32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013a22:	4b07      	ldr	r3, [pc, #28]	@ (8013a40 <SD_CheckStatus+0x38>)
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	b2db      	uxtb	r3, r3
 8013a28:	f023 0301 	bic.w	r3, r3, #1
 8013a2c:	b2da      	uxtb	r2, r3
 8013a2e:	4b04      	ldr	r3, [pc, #16]	@ (8013a40 <SD_CheckStatus+0x38>)
 8013a30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013a32:	4b03      	ldr	r3, [pc, #12]	@ (8013a40 <SD_CheckStatus+0x38>)
 8013a34:	781b      	ldrb	r3, [r3, #0]
 8013a36:	b2db      	uxtb	r3, r3
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3708      	adds	r7, #8
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	20000028 	.word	0x20000028

08013a44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b082      	sub	sp, #8
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8013a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8013a7c <SD_initialize+0x38>)
 8013a50:	2201      	movs	r2, #1
 8013a52:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013a54:	f7ff ff58 	bl	8013908 <BSP_SD_Init>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d107      	bne.n	8013a6e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8013a5e:	79fb      	ldrb	r3, [r7, #7]
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7ff ffd1 	bl	8013a08 <SD_CheckStatus>
 8013a66:	4603      	mov	r3, r0
 8013a68:	461a      	mov	r2, r3
 8013a6a:	4b04      	ldr	r3, [pc, #16]	@ (8013a7c <SD_initialize+0x38>)
 8013a6c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013a6e:	4b03      	ldr	r3, [pc, #12]	@ (8013a7c <SD_initialize+0x38>)
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	b2db      	uxtb	r3, r3
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3708      	adds	r7, #8
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	20000028 	.word	0x20000028

08013a80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b082      	sub	sp, #8
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	4603      	mov	r3, r0
 8013a88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013a8a:	79fb      	ldrb	r3, [r7, #7]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7ff ffbb 	bl	8013a08 <SD_CheckStatus>
 8013a92:	4603      	mov	r3, r0
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	3708      	adds	r7, #8
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b086      	sub	sp, #24
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60b9      	str	r1, [r7, #8]
 8013aa4:	607a      	str	r2, [r7, #4]
 8013aa6:	603b      	str	r3, [r7, #0]
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013aac:	2301      	movs	r3, #1
 8013aae:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8013ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ab4:	683a      	ldr	r2, [r7, #0]
 8013ab6:	6879      	ldr	r1, [r7, #4]
 8013ab8:	68b8      	ldr	r0, [r7, #8]
 8013aba:	f7ff ff3d 	bl	8013938 <BSP_SD_ReadBlocks>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d107      	bne.n	8013ad4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8013ac4:	bf00      	nop
 8013ac6:	f7ff ff73 	bl	80139b0 <BSP_SD_GetCardState>
 8013aca:	4603      	mov	r3, r0
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d1fa      	bne.n	8013ac6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3718      	adds	r7, #24
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}

08013ade <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013ade:	b580      	push	{r7, lr}
 8013ae0:	b086      	sub	sp, #24
 8013ae2:	af00      	add	r7, sp, #0
 8013ae4:	60b9      	str	r1, [r7, #8]
 8013ae6:	607a      	str	r2, [r7, #4]
 8013ae8:	603b      	str	r3, [r7, #0]
 8013aea:	4603      	mov	r3, r0
 8013aec:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013aee:	2301      	movs	r3, #1
 8013af0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8013af2:	f04f 33ff 	mov.w	r3, #4294967295
 8013af6:	683a      	ldr	r2, [r7, #0]
 8013af8:	6879      	ldr	r1, [r7, #4]
 8013afa:	68b8      	ldr	r0, [r7, #8]
 8013afc:	f7ff ff3a 	bl	8013974 <BSP_SD_WriteBlocks>
 8013b00:	4603      	mov	r3, r0
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d107      	bne.n	8013b16 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8013b06:	bf00      	nop
 8013b08:	f7ff ff52 	bl	80139b0 <BSP_SD_GetCardState>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d1fa      	bne.n	8013b08 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8013b12:	2300      	movs	r3, #0
 8013b14:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3718      	adds	r7, #24
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}

08013b20 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b08c      	sub	sp, #48	@ 0x30
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	4603      	mov	r3, r0
 8013b28:	603a      	str	r2, [r7, #0]
 8013b2a:	71fb      	strb	r3, [r7, #7]
 8013b2c:	460b      	mov	r3, r1
 8013b2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013b30:	2301      	movs	r3, #1
 8013b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013b36:	4b25      	ldr	r3, [pc, #148]	@ (8013bcc <SD_ioctl+0xac>)
 8013b38:	781b      	ldrb	r3, [r3, #0]
 8013b3a:	b2db      	uxtb	r3, r3
 8013b3c:	f003 0301 	and.w	r3, r3, #1
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d001      	beq.n	8013b48 <SD_ioctl+0x28>
 8013b44:	2303      	movs	r3, #3
 8013b46:	e03c      	b.n	8013bc2 <SD_ioctl+0xa2>

  switch (cmd)
 8013b48:	79bb      	ldrb	r3, [r7, #6]
 8013b4a:	2b03      	cmp	r3, #3
 8013b4c:	d834      	bhi.n	8013bb8 <SD_ioctl+0x98>
 8013b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8013b54 <SD_ioctl+0x34>)
 8013b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b54:	08013b65 	.word	0x08013b65
 8013b58:	08013b6d 	.word	0x08013b6d
 8013b5c:	08013b85 	.word	0x08013b85
 8013b60:	08013b9f 	.word	0x08013b9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013b64:	2300      	movs	r3, #0
 8013b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b6a:	e028      	b.n	8013bbe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b6c:	f107 030c 	add.w	r3, r7, #12
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7ff ff2d 	bl	80139d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b82:	e01c      	b.n	8013bbe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b84:	f107 030c 	add.w	r3, r7, #12
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7ff ff21 	bl	80139d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b90:	b29a      	uxth	r2, r3
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013b96:	2300      	movs	r3, #0
 8013b98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b9c:	e00f      	b.n	8013bbe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b9e:	f107 030c 	add.w	r3, r7, #12
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7ff ff14 	bl	80139d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013baa:	0a5a      	lsrs	r2, r3, #9
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013bb6:	e002      	b.n	8013bbe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013bb8:	2304      	movs	r3, #4
 8013bba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8013bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3730      	adds	r7, #48	@ 0x30
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	20000028 	.word	0x20000028

08013bd0 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;
char scheduled_packet[30] = "NULL";
void RtcInt()
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8013bd4:	4b03      	ldr	r3, [pc, #12]	@ (8013be4 <RtcInt+0x14>)
 8013bd6:	2201      	movs	r2, #1
 8013bd8:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8013bda:	bf00      	nop
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be2:	4770      	bx	lr
 8013be4:	20000029 	.word	0x20000029

08013be8 <Rtc_Alarm_watchdog_disable>:

void Rtc_Alarm_watchdog_disable()
{
 8013be8:	b480      	push	{r7}
 8013bea:	af00      	add	r7, sp, #0
  __HAL_RTC_ALARM_DISABLE_IT(&hrtc, RTC_IT_ALRB);
 8013bec:	4b06      	ldr	r3, [pc, #24]	@ (8013c08 <Rtc_Alarm_watchdog_disable+0x20>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	689a      	ldr	r2, [r3, #8]
 8013bf2:	4b05      	ldr	r3, [pc, #20]	@ (8013c08 <Rtc_Alarm_watchdog_disable+0x20>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013bfa:	609a      	str	r2, [r3, #8]
}
 8013bfc:	bf00      	nop
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c04:	4770      	bx	lr
 8013c06:	bf00      	nop
 8013c08:	20001898 	.word	0x20001898

08013c0c <Rtc_Alarm_watchdog>:

void Rtc_Alarm_watchdog()
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b092      	sub	sp, #72	@ 0x48
 8013c10:	af00      	add	r7, sp, #0
	uint16_t seconds;
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013c12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013c16:	2200      	movs	r2, #0
 8013c18:	4619      	mov	r1, r3
 8013c1a:	4828      	ldr	r0, [pc, #160]	@ (8013cbc <Rtc_Alarm_watchdog+0xb0>)
 8013c1c:	f7f5 feb9 	bl	8009992 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013c20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013c24:	2200      	movs	r2, #0
 8013c26:	4619      	mov	r1, r3
 8013c28:	4824      	ldr	r0, [pc, #144]	@ (8013cbc <Rtc_Alarm_watchdog+0xb0>)
 8013c2a:	f7f5 ff94 	bl	8009b56 <HAL_RTC_GetDate>

    seconds = gTime.Seconds + 25;
 8013c2e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8013c32:	3319      	adds	r3, #25
 8013c34:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if(seconds > 59)
 8013c38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013c3c:	2b3b      	cmp	r3, #59	@ 0x3b
 8013c3e:	d902      	bls.n	8013c46 <Rtc_Alarm_watchdog+0x3a>
    {
    	seconds = 0;
 8013c40:	2300      	movs	r3, #0
 8013c42:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    }

      RTC_AlarmTypeDef sAlarm = {0};
 8013c46:	1d3b      	adds	r3, r7, #4
 8013c48:	2228      	movs	r2, #40	@ 0x28
 8013c4a:	2100      	movs	r1, #0
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f00b f8b3 	bl	801edb8 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013c52:	2300      	movs	r3, #0
 8013c54:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = 0;
 8013c56:	2300      	movs	r3, #0
 8013c58:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = seconds;
 8013c5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013c5e:	b2db      	uxtb	r3, r3
 8013c60:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013c62:	2300      	movs	r3, #0
 8013c64:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013c66:	2300      	movs	r3, #0
 8013c68:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013c6e:	4b14      	ldr	r3, [pc, #80]	@ (8013cc0 <Rtc_Alarm_watchdog+0xb4>)
 8013c70:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013c72:	2300      	movs	r3, #0
 8013c74:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013c76:	2300      	movs	r3, #0
 8013c78:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_B;
 8013c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013c84:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013c86:	1d3b      	adds	r3, r7, #4
 8013c88:	2200      	movs	r2, #0
 8013c8a:	4619      	mov	r1, r3
 8013c8c:	480b      	ldr	r0, [pc, #44]	@ (8013cbc <Rtc_Alarm_watchdog+0xb0>)
 8013c8e:	f7f5 ffb1 	bl	8009bf4 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRB);
 8013c92:	4b0a      	ldr	r3, [pc, #40]	@ (8013cbc <Rtc_Alarm_watchdog+0xb0>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	689a      	ldr	r2, [r3, #8]
 8013c98:	4b08      	ldr	r3, [pc, #32]	@ (8013cbc <Rtc_Alarm_watchdog+0xb0>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013ca0:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRB);
 8013ca2:	4b06      	ldr	r3, [pc, #24]	@ (8013cbc <Rtc_Alarm_watchdog+0xb0>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	68db      	ldr	r3, [r3, #12]
 8013ca8:	b2da      	uxtb	r2, r3
 8013caa:	4b04      	ldr	r3, [pc, #16]	@ (8013cbc <Rtc_Alarm_watchdog+0xb0>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f462 5202 	orn	r2, r2, #8320	@ 0x2080
 8013cb2:	60da      	str	r2, [r3, #12]

}
 8013cb4:	bf00      	nop
 8013cb6:	3748      	adds	r7, #72	@ 0x48
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	20001898 	.word	0x20001898
 8013cc0:	80808000 	.word	0x80808000

08013cc4 <Set_Date>:

void Set_Date(char *Datebuffer) {
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b088      	sub	sp, #32
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8013ccc:	f107 030c 	add.w	r3, r7, #12
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f000 f8e4 	bl	8013ea0 <Parse_Date>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8013cdc:	7ffb      	ldrb	r3, [r7, #31]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d10c      	bne.n	8013cfc <Set_Date+0x38>
		sDate.Date = date[0];
 8013ce2:	7b3b      	ldrb	r3, [r7, #12]
 8013ce4:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8013ce6:	7b7b      	ldrb	r3, [r7, #13]
 8013ce8:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8013cea:	7bbb      	ldrb	r3, [r7, #14]
 8013cec:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013cee:	f107 0318 	add.w	r3, r7, #24
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	4805      	ldr	r0, [pc, #20]	@ (8013d0c <Set_Date+0x48>)
 8013cf8:	f7f5 fea9 	bl	8009a4e <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8013cfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013d00:	f7f0 fa16 	bl	8004130 <HAL_Delay>
}
 8013d04:	bf00      	nop
 8013d06:	3720      	adds	r7, #32
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	20001898 	.word	0x20001898

08013d10 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b094      	sub	sp, #80	@ 0x50
 8013d14:	af02      	add	r7, sp, #8
uint16_t minute;



if(set_alarm_Time)
 8013d16:	4b44      	ldr	r3, [pc, #272]	@ (8013e28 <Rtc_set_alarm+0x118>)
 8013d18:	781b      	ldrb	r3, [r3, #0]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d07f      	beq.n	8013e1e <Rtc_set_alarm+0x10e>
{
	uint8_t hour = 0;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013d24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d28:	2200      	movs	r2, #0
 8013d2a:	4619      	mov	r1, r3
 8013d2c:	483f      	ldr	r0, [pc, #252]	@ (8013e2c <Rtc_set_alarm+0x11c>)
 8013d2e:	f7f5 fe30 	bl	8009992 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d36:	2200      	movs	r2, #0
 8013d38:	4619      	mov	r1, r3
 8013d3a:	483c      	ldr	r0, [pc, #240]	@ (8013e2c <Rtc_set_alarm+0x11c>)
 8013d3c:	f7f5 ff0b 	bl	8009b56 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8013d40:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8013d44:	461a      	mov	r2, r3
 8013d46:	4b3a      	ldr	r3, [pc, #232]	@ (8013e30 <Rtc_set_alarm+0x120>)
 8013d48:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013d4c:	b29b      	uxth	r3, r3
 8013d4e:	4413      	add	r3, r2
 8013d50:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    hour = gTime.Hours;
 8013d54:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8013d58:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    if(minute > 59)
 8013d5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d60:	2b3b      	cmp	r3, #59	@ 0x3b
 8013d62:	d917      	bls.n	8013d94 <Rtc_set_alarm+0x84>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8013d64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d68:	4a31      	ldr	r2, [pc, #196]	@ (8013e30 <Rtc_set_alarm+0x120>)
 8013d6a:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8013d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d72:	fb01 f202 	mul.w	r2, r1, r2
 8013d76:	1a9b      	subs	r3, r3, r2
 8013d78:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
//    	if(minute == 0)
//    	{
//    		minute = 1;
//    	}

    	hour = hour + 1; //we go to next hour as our time is schedualed for next hour
 8013d7c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013d80:	3301      	adds	r3, #1
 8013d82:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    	if(hour > 23)
 8013d86:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013d8a:	2b17      	cmp	r3, #23
 8013d8c:	d902      	bls.n	8013d94 <Rtc_set_alarm+0x84>
    	{
          hour = 0;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    	}


    }

    sprintf(scheduled_packet,"%02d:%02d:%02d",hour,minute,gTime.Seconds);
 8013d94:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8013d98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d9c:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 8013da0:	9100      	str	r1, [sp, #0]
 8013da2:	4924      	ldr	r1, [pc, #144]	@ (8013e34 <Rtc_set_alarm+0x124>)
 8013da4:	4824      	ldr	r0, [pc, #144]	@ (8013e38 <Rtc_set_alarm+0x128>)
 8013da6:	f00a febd 	bl	801eb24 <siprintf>

      RTC_AlarmTypeDef sAlarm = {0};
 8013daa:	1d3b      	adds	r3, r7, #4
 8013dac:	2228      	movs	r2, #40	@ 0x28
 8013dae:	2100      	movs	r1, #0
 8013db0:	4618      	mov	r0, r3
 8013db2:	f00b f801 	bl	801edb8 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013db6:	2300      	movs	r3, #0
 8013db8:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8013dba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013dbe:	b2db      	uxtb	r3, r3
 8013dc0:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8013e3c <Rtc_set_alarm+0x12c>)
 8013dd4:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013dda:	2300      	movs	r3, #0
 8013ddc:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013dde:	2301      	movs	r3, #1
 8013de0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8013de4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013de8:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013dea:	1d3b      	adds	r3, r7, #4
 8013dec:	2200      	movs	r2, #0
 8013dee:	4619      	mov	r1, r3
 8013df0:	480e      	ldr	r0, [pc, #56]	@ (8013e2c <Rtc_set_alarm+0x11c>)
 8013df2:	f7f5 feff 	bl	8009bf4 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8013df6:	4b0d      	ldr	r3, [pc, #52]	@ (8013e2c <Rtc_set_alarm+0x11c>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	689a      	ldr	r2, [r3, #8]
 8013dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8013e2c <Rtc_set_alarm+0x11c>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013e04:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 8013e06:	4b09      	ldr	r3, [pc, #36]	@ (8013e2c <Rtc_set_alarm+0x11c>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	68db      	ldr	r3, [r3, #12]
 8013e0c:	b2da      	uxtb	r2, r3
 8013e0e:	4b07      	ldr	r3, [pc, #28]	@ (8013e2c <Rtc_set_alarm+0x11c>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8013e16:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 8013e18:	4b03      	ldr	r3, [pc, #12]	@ (8013e28 <Rtc_set_alarm+0x118>)
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	701a      	strb	r2, [r3, #0]


		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8013e1e:	bf00      	nop
 8013e20:	3748      	adds	r7, #72	@ 0x48
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
 8013e26:	bf00      	nop
 8013e28:	20000029 	.word	0x20000029
 8013e2c:	20001898 	.word	0x20001898
 8013e30:	200012cc 	.word	0x200012cc
 8013e34:	0802477c 	.word	0x0802477c
 8013e38:	2000002c 	.word	0x2000002c
 8013e3c:	80800080 	.word	0x80800080

08013e40 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b08c      	sub	sp, #48	@ 0x30
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8013e48:	f107 030c 	add.w	r3, r7, #12
 8013e4c:	4619      	mov	r1, r3
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f000 f890 	bl	8013f74 <Parse_Time>
 8013e54:	4603      	mov	r3, r0
 8013e56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8013e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d113      	bne.n	8013e8a <Set_Time+0x4a>
		sTime.Hours = time[0];
 8013e62:	7b3b      	ldrb	r3, [r7, #12]
 8013e64:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8013e66:	7b7b      	ldrb	r3, [r7, #13]
 8013e68:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8013e6a:	7bbb      	ldrb	r3, [r7, #14]
 8013e6c:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	627b      	str	r3, [r7, #36]	@ 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013e72:	2300      	movs	r3, #0
 8013e74:	62bb      	str	r3, [r7, #40]	@ 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8013e76:	f107 0318 	add.w	r3, r7, #24
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	4807      	ldr	r0, [pc, #28]	@ (8013e9c <Set_Time+0x5c>)
 8013e80:	f7f5 fced 	bl	800985e <HAL_RTC_SetTime>
 8013e84:	4603      	mov	r3, r0
 8013e86:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}

	HAL_Delay(500);
 8013e8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013e8e:	f7f0 f94f 	bl	8004130 <HAL_Delay>

}
 8013e92:	bf00      	nop
 8013e94:	3730      	adds	r7, #48	@ 0x30
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	20001898 	.word	0x20001898

08013ea0 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8013eb2:	492e      	ldr	r1, [pc, #184]	@ (8013f6c <Parse_Date+0xcc>)
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f00a ff95 	bl	801ede4 <strtok>
 8013eba:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d14b      	bne.n	8013f5a <Parse_Date+0xba>
		{
			return 1;
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	e04d      	b.n	8013f62 <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8013ec6:	68b8      	ldr	r0, [r7, #8]
 8013ec8:	f009 fcf4 	bl	801d8b4 <atoi>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8013ed0:	89fb      	ldrh	r3, [r7, #14]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d10a      	bne.n	8013eec <Parse_Date+0x4c>
 8013ed6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013eda:	2b1f      	cmp	r3, #31
 8013edc:	dc03      	bgt.n	8013ee6 <Parse_Date+0x46>
 8013ede:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	dc02      	bgt.n	8013eec <Parse_Date+0x4c>
			{
				val= 1;
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	81bb      	strh	r3, [r7, #12]
 8013eea:	e028      	b.n	8013f3e <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8013eec:	89fb      	ldrh	r3, [r7, #14]
 8013eee:	2b01      	cmp	r3, #1
 8013ef0:	d10a      	bne.n	8013f08 <Parse_Date+0x68>
 8013ef2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013ef6:	2b0c      	cmp	r3, #12
 8013ef8:	dc03      	bgt.n	8013f02 <Parse_Date+0x62>
 8013efa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	dc02      	bgt.n	8013f08 <Parse_Date+0x68>
			{
				val= 1;
 8013f02:	2301      	movs	r3, #1
 8013f04:	81bb      	strh	r3, [r7, #12]
 8013f06:	e01a      	b.n	8013f3e <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8013f08:	89fb      	ldrh	r3, [r7, #14]
 8013f0a:	2b02      	cmp	r3, #2
 8013f0c:	d112      	bne.n	8013f34 <Parse_Date+0x94>
 8013f0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013f16:	dd0d      	ble.n	8013f34 <Parse_Date+0x94>
			{
				val=val%100;
 8013f18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f1c:	4a14      	ldr	r2, [pc, #80]	@ (8013f70 <Parse_Date+0xd0>)
 8013f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8013f22:	1151      	asrs	r1, r2, #5
 8013f24:	17da      	asrs	r2, r3, #31
 8013f26:	1a8a      	subs	r2, r1, r2
 8013f28:	2164      	movs	r1, #100	@ 0x64
 8013f2a:	fb01 f202 	mul.w	r2, r1, r2
 8013f2e:	1a9b      	subs	r3, r3, r2
 8013f30:	81bb      	strh	r3, [r7, #12]
 8013f32:	e004      	b.n	8013f3e <Parse_Date+0x9e>
			}
			else if(i > 2)
 8013f34:	89fb      	ldrh	r3, [r7, #14]
 8013f36:	2b02      	cmp	r3, #2
 8013f38:	d901      	bls.n	8013f3e <Parse_Date+0x9e>
			{
				return 1;
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e011      	b.n	8013f62 <Parse_Date+0xc2>
			}


		   date[i] =val;
 8013f3e:	89fb      	ldrh	r3, [r7, #14]
 8013f40:	683a      	ldr	r2, [r7, #0]
 8013f42:	4413      	add	r3, r2
 8013f44:	89ba      	ldrh	r2, [r7, #12]
 8013f46:	b2d2      	uxtb	r2, r2
 8013f48:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8013f4a:	4908      	ldr	r1, [pc, #32]	@ (8013f6c <Parse_Date+0xcc>)
 8013f4c:	2000      	movs	r0, #0
 8013f4e:	f00a ff49 	bl	801ede4 <strtok>
 8013f52:	60b8      	str	r0, [r7, #8]
		i++;
 8013f54:	89fb      	ldrh	r3, [r7, #14]
 8013f56:	3301      	adds	r3, #1
 8013f58:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d1b2      	bne.n	8013ec6 <Parse_Date+0x26>
	}

	}

	return 0;
 8013f60:	2300      	movs	r3, #0

}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3710      	adds	r7, #16
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	0802478c 	.word	0x0802478c
 8013f70:	51eb851f 	.word	0x51eb851f

08013f74 <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b084      	sub	sp, #16
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8013f82:	2300      	movs	r3, #0
 8013f84:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8013f86:	492a      	ldr	r1, [pc, #168]	@ (8014030 <Parse_Time+0xbc>)
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f00a ff2b 	bl	801ede4 <strtok>
 8013f8e:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d143      	bne.n	801401e <Parse_Time+0xaa>
			{
				return 1;
 8013f96:	2301      	movs	r3, #1
 8013f98:	e045      	b.n	8014026 <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8013f9a:	68b8      	ldr	r0, [r7, #8]
 8013f9c:	f009 fc8a 	bl	801d8b4 <atoi>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8013fa4:	89fb      	ldrh	r3, [r7, #14]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d10a      	bne.n	8013fc0 <Parse_Time+0x4c>
 8013faa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fae:	2b18      	cmp	r3, #24
 8013fb0:	dc03      	bgt.n	8013fba <Parse_Time+0x46>
 8013fb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	da02      	bge.n	8013fc0 <Parse_Time+0x4c>
				{
					val= 24;
 8013fba:	2318      	movs	r3, #24
 8013fbc:	81bb      	strh	r3, [r7, #12]
 8013fbe:	e020      	b.n	8014002 <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8013fc0:	89fb      	ldrh	r3, [r7, #14]
 8013fc2:	2b01      	cmp	r3, #1
 8013fc4:	d10a      	bne.n	8013fdc <Parse_Time+0x68>
 8013fc6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fca:	2b3b      	cmp	r3, #59	@ 0x3b
 8013fcc:	dc03      	bgt.n	8013fd6 <Parse_Time+0x62>
 8013fce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	da02      	bge.n	8013fdc <Parse_Time+0x68>
				{
					val= 59;
 8013fd6:	233b      	movs	r3, #59	@ 0x3b
 8013fd8:	81bb      	strh	r3, [r7, #12]
 8013fda:	e012      	b.n	8014002 <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8013fdc:	89fb      	ldrh	r3, [r7, #14]
 8013fde:	2b02      	cmp	r3, #2
 8013fe0:	d10a      	bne.n	8013ff8 <Parse_Time+0x84>
 8013fe2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fe6:	2b3b      	cmp	r3, #59	@ 0x3b
 8013fe8:	dc03      	bgt.n	8013ff2 <Parse_Time+0x7e>
 8013fea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	da02      	bge.n	8013ff8 <Parse_Time+0x84>
				{
					val=59;
 8013ff2:	233b      	movs	r3, #59	@ 0x3b
 8013ff4:	81bb      	strh	r3, [r7, #12]
 8013ff6:	e004      	b.n	8014002 <Parse_Time+0x8e>
				}
				else if(i > 2)
 8013ff8:	89fb      	ldrh	r3, [r7, #14]
 8013ffa:	2b02      	cmp	r3, #2
 8013ffc:	d901      	bls.n	8014002 <Parse_Time+0x8e>
				{
					return 1;
 8013ffe:	2301      	movs	r3, #1
 8014000:	e011      	b.n	8014026 <Parse_Time+0xb2>
				}


				time[i] =val;
 8014002:	89fb      	ldrh	r3, [r7, #14]
 8014004:	683a      	ldr	r2, [r7, #0]
 8014006:	4413      	add	r3, r2
 8014008:	89ba      	ldrh	r2, [r7, #12]
 801400a:	b2d2      	uxtb	r2, r2
 801400c:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 801400e:	4908      	ldr	r1, [pc, #32]	@ (8014030 <Parse_Time+0xbc>)
 8014010:	2000      	movs	r0, #0
 8014012:	f00a fee7 	bl	801ede4 <strtok>
 8014016:	60b8      	str	r0, [r7, #8]
			i++;
 8014018:	89fb      	ldrh	r3, [r7, #14]
 801401a:	3301      	adds	r3, #1
 801401c:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d1ba      	bne.n	8013f9a <Parse_Time+0x26>
		}

		}

		return 0;
 8014024:	2300      	movs	r3, #0
}
 8014026:	4618      	mov	r0, r3
 8014028:	3710      	adds	r7, #16
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	0802478c 	.word	0x0802478c

08014034 <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8014034:	b480      	push	{r7}
 8014036:	b083      	sub	sp, #12
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	460b      	mov	r3, r1
 801403e:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8014040:	78fb      	ldrb	r3, [r7, #3]
 8014042:	091b      	lsrs	r3, r3, #4
 8014044:	b2db      	uxtb	r3, r3
 8014046:	4619      	mov	r1, r3
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	1c5a      	adds	r2, r3, #1
 801404c:	607a      	str	r2, [r7, #4]
 801404e:	4a08      	ldr	r2, [pc, #32]	@ (8014070 <CharToHexasc+0x3c>)
 8014050:	5c52      	ldrb	r2, [r2, r1]
 8014052:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 8014054:	78fb      	ldrb	r3, [r7, #3]
 8014056:	f003 030f 	and.w	r3, r3, #15
 801405a:	4a05      	ldr	r2, [pc, #20]	@ (8014070 <CharToHexasc+0x3c>)
 801405c:	5cd2      	ldrb	r2, [r2, r3]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	701a      	strb	r2, [r3, #0]
}
 8014062:	bf00      	nop
 8014064:	370c      	adds	r7, #12
 8014066:	46bd      	mov	sp, r7
 8014068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406c:	4770      	bx	lr
 801406e:	bf00      	nop
 8014070:	080250b0 	.word	0x080250b0

08014074 <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b088      	sub	sp, #32
 8014078:	af00      	add	r7, sp, #0
	adc_Disable();
 801407a:	4830      	ldr	r0, [pc, #192]	@ (801413c <adc_InitOneShotMode+0xc8>)
 801407c:	f7f0 f903 	bl	8004286 <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8014080:	f107 0314 	add.w	r3, r7, #20
 8014084:	2200      	movs	r2, #0
 8014086:	601a      	str	r2, [r3, #0]
 8014088:	605a      	str	r2, [r3, #4]
 801408a:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 801408c:	4b2b      	ldr	r3, [pc, #172]	@ (801413c <adc_InitOneShotMode+0xc8>)
 801408e:	4a2c      	ldr	r2, [pc, #176]	@ (8014140 <adc_InitOneShotMode+0xcc>)
 8014090:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8014092:	4b2a      	ldr	r3, [pc, #168]	@ (801413c <adc_InitOneShotMode+0xc8>)
 8014094:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8014098:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801409a:	4b28      	ldr	r3, [pc, #160]	@ (801413c <adc_InitOneShotMode+0xc8>)
 801409c:	2200      	movs	r2, #0
 801409e:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 80140a0:	4b26      	ldr	r3, [pc, #152]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140a2:	2200      	movs	r2, #0
 80140a4:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 80140a6:	4b25      	ldr	r3, [pc, #148]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140a8:	2200      	movs	r2, #0
 80140aa:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80140ac:	4b23      	ldr	r3, [pc, #140]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140ae:	2200      	movs	r2, #0
 80140b0:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80140b4:	4b21      	ldr	r3, [pc, #132]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140b6:	2200      	movs	r2, #0
 80140b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80140ba:	4b20      	ldr	r3, [pc, #128]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140bc:	4a21      	ldr	r2, [pc, #132]	@ (8014144 <adc_InitOneShotMode+0xd0>)
 80140be:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80140c0:	4b1e      	ldr	r3, [pc, #120]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140c2:	2200      	movs	r2, #0
 80140c4:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 80140c6:	4b1d      	ldr	r3, [pc, #116]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140c8:	2201      	movs	r2, #1
 80140ca:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 80140cc:	4b1b      	ldr	r3, [pc, #108]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140ce:	2200      	movs	r2, #0
 80140d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80140d4:	4b19      	ldr	r3, [pc, #100]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140d6:	2201      	movs	r2, #1
 80140d8:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80140da:	4818      	ldr	r0, [pc, #96]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140dc:	f7f0 f890 	bl	8004200 <HAL_ADC_Init>
 80140e0:	4603      	mov	r3, r0
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d001      	beq.n	80140ea <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 80140e6:	f7ef facd 	bl	8003684 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 80140ea:	2300      	movs	r3, #0
 80140ec:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80140ee:	f107 0314 	add.w	r3, r7, #20
 80140f2:	4619      	mov	r1, r3
 80140f4:	4811      	ldr	r0, [pc, #68]	@ (801413c <adc_InitOneShotMode+0xc8>)
 80140f6:	f7f0 fc97 	bl	8004a28 <HAL_ADCEx_MultiModeConfigChannel>
 80140fa:	4603      	mov	r3, r0
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d001      	beq.n	8014104 <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 8014100:	f7ef fac0 	bl	8003684 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8014104:	1d3b      	adds	r3, r7, #4
 8014106:	2200      	movs	r2, #0
 8014108:	601a      	str	r2, [r3, #0]
 801410a:	605a      	str	r2, [r3, #4]
 801410c:	609a      	str	r2, [r3, #8]
 801410e:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 8014110:	230a      	movs	r3, #10
 8014112:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8014114:	2301      	movs	r3, #1
 8014116:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8014118:	2302      	movs	r3, #2
 801411a:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 801411c:	2300      	movs	r3, #0
 801411e:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014120:	1d3b      	adds	r3, r7, #4
 8014122:	4619      	mov	r1, r3
 8014124:	4805      	ldr	r0, [pc, #20]	@ (801413c <adc_InitOneShotMode+0xc8>)
 8014126:	f7f0 fa61 	bl	80045ec <HAL_ADC_ConfigChannel>
 801412a:	4603      	mov	r3, r0
 801412c:	2b00      	cmp	r3, #0
 801412e:	d001      	beq.n	8014134 <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8014130:	f7ef faa8 	bl	8003684 <Error_Handler>
		  }



}
 8014134:	bf00      	nop
 8014136:	3720      	adds	r7, #32
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}
 801413c:	200017f0 	.word	0x200017f0
 8014140:	40012000 	.word	0x40012000
 8014144:	0f000001 	.word	0x0f000001

08014148 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8014148:	b580      	push	{r7, lr}
 801414a:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 801414c:	4802      	ldr	r0, [pc, #8]	@ (8014158 <adc_Getval+0x10>)
 801414e:	f7f0 fa3f 	bl	80045d0 <HAL_ADC_GetValue>
 8014152:	4603      	mov	r3, r0

}
 8014154:	4618      	mov	r0, r3
 8014156:	bd80      	pop	{r7, pc}
 8014158:	200017f0 	.word	0x200017f0
 801415c:	00000000 	.word	0x00000000

08014160 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b084      	sub	sp, #16
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8014168:	f7ff ff84 	bl	8014074 <adc_InitOneShotMode>
	HAL_Delay(1);
 801416c:	2001      	movs	r0, #1
 801416e:	f7ef ffdf 	bl	8004130 <HAL_Delay>
	adc_Start();
 8014172:	4847      	ldr	r0, [pc, #284]	@ (8014290 <adc_Measure+0x130>)
 8014174:	f7f0 f8ba 	bl	80042ec <HAL_ADC_Start>
	HAL_Delay(1);
 8014178:	2001      	movs	r0, #1
 801417a:	f7ef ffd9 	bl	8004130 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801417e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014182:	4843      	ldr	r0, [pc, #268]	@ (8014290 <adc_Measure+0x130>)
 8014184:	f7f0 f999 	bl	80044ba <HAL_ADC_PollForConversion>
 8014188:	4603      	mov	r3, r0
 801418a:	2b00      	cmp	r3, #0
 801418c:	d01d      	beq.n	80141ca <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 801418e:	2001      	movs	r0, #1
 8014190:	f7ef ffce 	bl	8004130 <HAL_Delay>
		   adc_Start();
 8014194:	483e      	ldr	r0, [pc, #248]	@ (8014290 <adc_Measure+0x130>)
 8014196:	f7f0 f8a9 	bl	80042ec <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801419a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801419e:	483c      	ldr	r0, [pc, #240]	@ (8014290 <adc_Measure+0x130>)
 80141a0:	f7f0 f98b 	bl	80044ba <HAL_ADC_PollForConversion>
 80141a4:	4603      	mov	r3, r0
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d00f      	beq.n	80141ca <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 80141aa:	2001      	movs	r0, #1
 80141ac:	f7ef ffc0 	bl	8004130 <HAL_Delay>
				adc_Start();
 80141b0:	4837      	ldr	r0, [pc, #220]	@ (8014290 <adc_Measure+0x130>)
 80141b2:	f7f0 f89b 	bl	80042ec <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141ba:	4835      	ldr	r0, [pc, #212]	@ (8014290 <adc_Measure+0x130>)
 80141bc:	f7f0 f97d 	bl	80044ba <HAL_ADC_PollForConversion>
 80141c0:	4603      	mov	r3, r0
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d001      	beq.n	80141ca <adc_Measure+0x6a>
				{
					return 0;
 80141c6:	2300      	movs	r3, #0
 80141c8:	e05a      	b.n	8014280 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 80141ca:	4831      	ldr	r0, [pc, #196]	@ (8014290 <adc_Measure+0x130>)
 80141cc:	f7f0 f942 	bl	8004454 <HAL_ADC_Stop>

	val = adc_Getval();
 80141d0:	f7ff ffba 	bl	8014148 <adc_Getval>
 80141d4:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 80141d6:	2001      	movs	r0, #1
 80141d8:	f7ef ffaa 	bl	8004130 <HAL_Delay>
	adc_Start();
 80141dc:	482c      	ldr	r0, [pc, #176]	@ (8014290 <adc_Measure+0x130>)
 80141de:	f7f0 f885 	bl	80042ec <HAL_ADC_Start>
	HAL_Delay(1);
 80141e2:	2001      	movs	r0, #1
 80141e4:	f7ef ffa4 	bl	8004130 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141ec:	4828      	ldr	r0, [pc, #160]	@ (8014290 <adc_Measure+0x130>)
 80141ee:	f7f0 f964 	bl	80044ba <HAL_ADC_PollForConversion>
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d01d      	beq.n	8014234 <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 80141f8:	2001      	movs	r0, #1
 80141fa:	f7ef ff99 	bl	8004130 <HAL_Delay>
		   adc_Start();
 80141fe:	4824      	ldr	r0, [pc, #144]	@ (8014290 <adc_Measure+0x130>)
 8014200:	f7f0 f874 	bl	80042ec <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014204:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014208:	4821      	ldr	r0, [pc, #132]	@ (8014290 <adc_Measure+0x130>)
 801420a:	f7f0 f956 	bl	80044ba <HAL_ADC_PollForConversion>
 801420e:	4603      	mov	r3, r0
 8014210:	2b00      	cmp	r3, #0
 8014212:	d00f      	beq.n	8014234 <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 8014214:	2001      	movs	r0, #1
 8014216:	f7ef ff8b 	bl	8004130 <HAL_Delay>
				adc_Start();
 801421a:	481d      	ldr	r0, [pc, #116]	@ (8014290 <adc_Measure+0x130>)
 801421c:	f7f0 f866 	bl	80042ec <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014220:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014224:	481a      	ldr	r0, [pc, #104]	@ (8014290 <adc_Measure+0x130>)
 8014226:	f7f0 f948 	bl	80044ba <HAL_ADC_PollForConversion>
 801422a:	4603      	mov	r3, r0
 801422c:	2b00      	cmp	r3, #0
 801422e:	d001      	beq.n	8014234 <adc_Measure+0xd4>
				{
					return 0;
 8014230:	2300      	movs	r3, #0
 8014232:	e025      	b.n	8014280 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8014234:	4816      	ldr	r0, [pc, #88]	@ (8014290 <adc_Measure+0x130>)
 8014236:	f7f0 f90d 	bl	8004454 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 801423a:	f7ff ff85 	bl	8014148 <adc_Getval>
 801423e:	4602      	mov	r2, r0
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	4413      	add	r3, r2
 8014244:	085b      	lsrs	r3, r3, #1
 8014246:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	ee07 3a90 	vmov	s15, r3
 801424e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014252:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8014294 <adc_Measure+0x134>
 8014256:	ee67 7a87 	vmul.f32	s15, s15, s14
 801425a:	ee17 0a90 	vmov	r0, s15
 801425e:	f7ec f98b 	bl	8000578 <__aeabi_f2d>
 8014262:	a309      	add	r3, pc, #36	@ (adr r3, 8014288 <adc_Measure+0x128>)
 8014264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014268:	f7ec f9de 	bl	8000628 <__aeabi_dmul>
 801426c:	4602      	mov	r2, r0
 801426e:	460b      	mov	r3, r1
 8014270:	4610      	mov	r0, r2
 8014272:	4619      	mov	r1, r3
 8014274:	f7ec fcd0 	bl	8000c18 <__aeabi_d2f>
 8014278:	4602      	mov	r2, r0
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	601a      	str	r2, [r3, #0]


	return 1;
 801427e:	2301      	movs	r3, #1


}
 8014280:	4618      	mov	r0, r3
 8014282:	3710      	adds	r7, #16
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	851eb852 	.word	0x851eb852
 801428c:	3ff451eb 	.word	0x3ff451eb
 8014290:	200017f0 	.word	0x200017f0
 8014294:	3a533333 	.word	0x3a533333

08014298 <init_driver>:

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

static uint8_t _i2c_address;

void init_driver(uint8_t i2c_address) {
 8014298:	b480      	push	{r7}
 801429a:	b083      	sub	sp, #12
 801429c:	af00      	add	r7, sp, #0
 801429e:	4603      	mov	r3, r0
 80142a0:	71fb      	strb	r3, [r7, #7]
    _i2c_address = i2c_address;
 80142a2:	4a04      	ldr	r2, [pc, #16]	@ (80142b4 <init_driver+0x1c>)
 80142a4:	79fb      	ldrb	r3, [r7, #7]
 80142a6:	7013      	strb	r3, [r2, #0]
}
 80142a8:	bf00      	nop
 80142aa:	370c      	adds	r7, #12
 80142ac:	46bd      	mov	sp, r7
 80142ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b2:	4770      	bx	lr
 80142b4:	20001b5c 	.word	0x20001b5c

080142b8 <scd30_await_data_ready>:

int16_t scd30_await_data_ready() {
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b082      	sub	sp, #8
 80142bc:	af00      	add	r7, sp, #0
    uint16_t data_ready = 0;
 80142be:	2300      	movs	r3, #0
 80142c0:	80bb      	strh	r3, [r7, #4]
    int16_t local_error = 0;
 80142c2:	2300      	movs	r3, #0
 80142c4:	80fb      	strh	r3, [r7, #6]
    local_error = scd30_get_data_ready(&data_ready);
 80142c6:	1d3b      	adds	r3, r7, #4
 80142c8:	4618      	mov	r0, r3
 80142ca:	f000 f8f5 	bl	80144b8 <scd30_get_data_ready>
 80142ce:	4603      	mov	r3, r0
 80142d0:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 80142d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d01c      	beq.n	8014314 <scd30_await_data_ready+0x5c>
        return local_error;
 80142da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142de:	e01e      	b.n	801431e <scd30_await_data_ready+0x66>
    }
    while (data_ready == 0) {
    	if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))//dont give delay when usb connected as we want to service console aswell
 80142e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80142e4:	4810      	ldr	r0, [pc, #64]	@ (8014328 <scd30_await_data_ready+0x70>)
 80142e6:	f7f1 fee3 	bl	80060b0 <HAL_GPIO_ReadPin>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d102      	bne.n	80142f6 <scd30_await_data_ready+0x3e>
    			{
        sensirion_hal_sleep_us(100000);
 80142f0:	480e      	ldr	r0, [pc, #56]	@ (801432c <scd30_await_data_ready+0x74>)
 80142f2:	f000 feb5 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    			}
        local_error = scd30_get_data_ready(&data_ready);
 80142f6:	1d3b      	adds	r3, r7, #4
 80142f8:	4618      	mov	r0, r3
 80142fa:	f000 f8dd 	bl	80144b8 <scd30_get_data_ready>
 80142fe:	4603      	mov	r3, r0
 8014300:	80fb      	strh	r3, [r7, #6]
        if (local_error != NO_ERROR) {
 8014302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d002      	beq.n	8014310 <scd30_await_data_ready+0x58>
            return local_error;
 801430a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801430e:	e006      	b.n	801431e <scd30_await_data_ready+0x66>
        }

        run_console_from_scd30();
 8014310:	f7ee f900 	bl	8002514 <run_console_from_scd30>
    while (data_ready == 0) {
 8014314:	88bb      	ldrh	r3, [r7, #4]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d0e2      	beq.n	80142e0 <scd30_await_data_ready+0x28>
    }
    return local_error;
 801431a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 801431e:	4618      	mov	r0, r3
 8014320:	3708      	adds	r7, #8
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}
 8014326:	bf00      	nop
 8014328:	40020000 	.word	0x40020000
 801432c:	000186a0 	.word	0x000186a0

08014330 <scd30_blocking_read_measurement_data>:

int16_t scd30_blocking_read_measurement_data(float* co2_concentration,
                                             float* temperature,
                                             float* humidity) {
 8014330:	b580      	push	{r7, lr}
 8014332:	b086      	sub	sp, #24
 8014334:	af00      	add	r7, sp, #0
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	60b9      	str	r1, [r7, #8]
 801433a:	607a      	str	r2, [r7, #4]
    int16_t local_error = 0;
 801433c:	2300      	movs	r3, #0
 801433e:	82fb      	strh	r3, [r7, #22]
    local_error = scd30_await_data_ready();
 8014340:	f7ff ffba 	bl	80142b8 <scd30_await_data_ready>
 8014344:	4603      	mov	r3, r0
 8014346:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014348:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d002      	beq.n	8014356 <scd30_blocking_read_measurement_data+0x26>
        return local_error;
 8014350:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014354:	e008      	b.n	8014368 <scd30_blocking_read_measurement_data+0x38>
    }
    local_error =
        scd30_read_measurement_data(co2_concentration, temperature, humidity);
 8014356:	687a      	ldr	r2, [r7, #4]
 8014358:	68b9      	ldr	r1, [r7, #8]
 801435a:	68f8      	ldr	r0, [r7, #12]
 801435c:	f000 f8fc 	bl	8014558 <scd30_read_measurement_data>
 8014360:	4603      	mov	r3, r0
 8014362:	82fb      	strh	r3, [r7, #22]
    return local_error;
 8014364:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014368:	4618      	mov	r0, r3
 801436a:	3718      	adds	r7, #24
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <scd30_start_periodic_measurement>:

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure) {
 8014370:	b580      	push	{r7, lr}
 8014372:	b086      	sub	sp, #24
 8014374:	af00      	add	r7, sp, #0
 8014376:	4603      	mov	r3, r0
 8014378:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801437a:	2300      	movs	r3, #0
 801437c:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801437e:	2300      	movs	r3, #0
 8014380:	60fb      	str	r3, [r7, #12]
 8014382:	2300      	movs	r3, #0
 8014384:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014386:	2300      	movs	r3, #0
 8014388:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x10);
 801438a:	8ab9      	ldrh	r1, [r7, #20]
 801438c:	f107 030c 	add.w	r3, r7, #12
 8014390:	2210      	movs	r2, #16
 8014392:	4618      	mov	r0, r3
 8014394:	f000 fd25 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014398:	4603      	mov	r3, r0
 801439a:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 801439c:	88fa      	ldrh	r2, [r7, #6]
 801439e:	8ab9      	ldrh	r1, [r7, #20]
 80143a0:	f107 030c 	add.w	r3, r7, #12
 80143a4:	4618      	mov	r0, r3
 80143a6:	f000 fd3f 	bl	8014e28 <sensirion_i2c_add_uint16_t_to_buffer>
 80143aa:	4603      	mov	r3, r0
 80143ac:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, ambient_pressure);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80143ae:	4b0b      	ldr	r3, [pc, #44]	@ (80143dc <scd30_start_periodic_measurement+0x6c>)
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	8aba      	ldrh	r2, [r7, #20]
 80143b4:	f107 010c 	add.w	r1, r7, #12
 80143b8:	4618      	mov	r0, r3
 80143ba:	f000 fd65 	bl	8014e88 <sensirion_i2c_write_data>
 80143be:	4603      	mov	r3, r0
 80143c0:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80143c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d002      	beq.n	80143d0 <scd30_start_periodic_measurement+0x60>
        return local_error;
 80143ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143ce:	e001      	b.n	80143d4 <scd30_start_periodic_measurement+0x64>
    }
    return local_error;
 80143d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3718      	adds	r7, #24
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}
 80143dc:	20001b5c 	.word	0x20001b5c

080143e0 <scd30_stop_periodic_measurement>:

int16_t scd30_stop_periodic_measurement() {
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b082      	sub	sp, #8
 80143e4:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 80143e6:	2300      	movs	r3, #0
 80143e8:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 80143ea:	2300      	movs	r3, #0
 80143ec:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 80143ee:	2300      	movs	r3, #0
 80143f0:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x104);
 80143f2:	88b9      	ldrh	r1, [r7, #4]
 80143f4:	463b      	mov	r3, r7
 80143f6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80143fa:	4618      	mov	r0, r3
 80143fc:	f000 fcf1 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014400:	4603      	mov	r3, r0
 8014402:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014404:	4b0c      	ldr	r3, [pc, #48]	@ (8014438 <scd30_stop_periodic_measurement+0x58>)
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	88ba      	ldrh	r2, [r7, #4]
 801440a:	4639      	mov	r1, r7
 801440c:	4618      	mov	r0, r3
 801440e:	f000 fd3b 	bl	8014e88 <sensirion_i2c_write_data>
 8014412:	4603      	mov	r3, r0
 8014414:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8014416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d002      	beq.n	8014424 <scd30_stop_periodic_measurement+0x44>
        return local_error;
 801441e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014422:	e005      	b.n	8014430 <scd30_stop_periodic_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014424:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014428:	f000 fe1a 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801442c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014430:	4618      	mov	r0, r3
 8014432:	3708      	adds	r7, #8
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}
 8014438:	20001b5c 	.word	0x20001b5c

0801443c <scd30_set_measurement_interval>:

int16_t scd30_set_measurement_interval(uint16_t interval) {
 801443c:	b580      	push	{r7, lr}
 801443e:	b086      	sub	sp, #24
 8014440:	af00      	add	r7, sp, #0
 8014442:	4603      	mov	r3, r0
 8014444:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014446:	2300      	movs	r3, #0
 8014448:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801444a:	2300      	movs	r3, #0
 801444c:	60fb      	str	r3, [r7, #12]
 801444e:	2300      	movs	r3, #0
 8014450:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014452:	2300      	movs	r3, #0
 8014454:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x4600);
 8014456:	8ab9      	ldrh	r1, [r7, #20]
 8014458:	f107 030c 	add.w	r3, r7, #12
 801445c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8014460:	4618      	mov	r0, r3
 8014462:	f000 fcbe 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014466:	4603      	mov	r3, r0
 8014468:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 801446a:	88fa      	ldrh	r2, [r7, #6]
 801446c:	8ab9      	ldrh	r1, [r7, #20]
 801446e:	f107 030c 	add.w	r3, r7, #12
 8014472:	4618      	mov	r0, r3
 8014474:	f000 fcd8 	bl	8014e28 <sensirion_i2c_add_uint16_t_to_buffer>
 8014478:	4603      	mov	r3, r0
 801447a:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, interval);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801447c:	4b0d      	ldr	r3, [pc, #52]	@ (80144b4 <scd30_set_measurement_interval+0x78>)
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	8aba      	ldrh	r2, [r7, #20]
 8014482:	f107 010c 	add.w	r1, r7, #12
 8014486:	4618      	mov	r0, r3
 8014488:	f000 fcfe 	bl	8014e88 <sensirion_i2c_write_data>
 801448c:	4603      	mov	r3, r0
 801448e:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014490:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d002      	beq.n	801449e <scd30_set_measurement_interval+0x62>
        return local_error;
 8014498:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801449c:	e005      	b.n	80144aa <scd30_set_measurement_interval+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801449e:	f242 7010 	movw	r0, #10000	@ 0x2710
 80144a2:	f000 fddd 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80144a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3718      	adds	r7, #24
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	20001b5c 	.word	0x20001b5c

080144b8 <scd30_get_data_ready>:
    }
    *interval = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_get_data_ready(uint16_t* data_ready_flag) {
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80144c0:	2300      	movs	r3, #0
 80144c2:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80144c4:	4b22      	ldr	r3, [pc, #136]	@ (8014550 <scd30_get_data_ready+0x98>)
 80144c6:	881b      	ldrh	r3, [r3, #0]
 80144c8:	813b      	strh	r3, [r7, #8]
 80144ca:	2300      	movs	r3, #0
 80144cc:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80144ce:	2300      	movs	r3, #0
 80144d0:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x202);
 80144d2:	89b9      	ldrh	r1, [r7, #12]
 80144d4:	f107 0308 	add.w	r3, r7, #8
 80144d8:	f240 2202 	movw	r2, #514	@ 0x202
 80144dc:	4618      	mov	r0, r3
 80144de:	f000 fc80 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 80144e2:	4603      	mov	r3, r0
 80144e4:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80144e6:	4b1b      	ldr	r3, [pc, #108]	@ (8014554 <scd30_get_data_ready+0x9c>)
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	89ba      	ldrh	r2, [r7, #12]
 80144ec:	f107 0108 	add.w	r1, r7, #8
 80144f0:	4618      	mov	r0, r3
 80144f2:	f000 fcc9 	bl	8014e88 <sensirion_i2c_write_data>
 80144f6:	4603      	mov	r3, r0
 80144f8:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80144fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d002      	beq.n	8014508 <scd30_get_data_ready+0x50>
        return local_error;
 8014502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014506:	e01f      	b.n	8014548 <scd30_get_data_ready+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014508:	f242 7010 	movw	r0, #10000	@ 0x2710
 801450c:	f000 fda8 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014510:	4b10      	ldr	r3, [pc, #64]	@ (8014554 <scd30_get_data_ready+0x9c>)
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	f107 0108 	add.w	r1, r7, #8
 8014518:	2202      	movs	r2, #2
 801451a:	4618      	mov	r0, r3
 801451c:	f000 fcc7 	bl	8014eae <sensirion_i2c_read_data_inplace>
 8014520:	4603      	mov	r3, r0
 8014522:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d002      	beq.n	8014532 <scd30_get_data_ready+0x7a>
        return local_error;
 801452c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014530:	e00a      	b.n	8014548 <scd30_get_data_ready+0x90>
    }
    *data_ready_flag = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014532:	f107 0308 	add.w	r3, r7, #8
 8014536:	4618      	mov	r0, r3
 8014538:	f000 fbc1 	bl	8014cbe <sensirion_common_bytes_to_uint16_t>
 801453c:	4603      	mov	r3, r0
 801453e:	461a      	mov	r2, r3
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014544:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014548:	4618      	mov	r0, r3
 801454a:	3710      	adds	r7, #16
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	08024790 	.word	0x08024790
 8014554:	20001b5c 	.word	0x20001b5c

08014558 <scd30_read_measurement_data>:

int16_t scd30_read_measurement_data(float* co2_concentration,
                                    float* temperature, float* humidity) {
 8014558:	b580      	push	{r7, lr}
 801455a:	b08a      	sub	sp, #40	@ 0x28
 801455c:	af00      	add	r7, sp, #0
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	60b9      	str	r1, [r7, #8]
 8014562:	607a      	str	r2, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014564:	2300      	movs	r3, #0
 8014566:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t local_buffer[18] = {0};
 8014568:	2300      	movs	r3, #0
 801456a:	613b      	str	r3, [r7, #16]
 801456c:	f107 0314 	add.w	r3, r7, #20
 8014570:	2200      	movs	r2, #0
 8014572:	601a      	str	r2, [r3, #0]
 8014574:	605a      	str	r2, [r3, #4]
 8014576:	609a      	str	r2, [r3, #8]
 8014578:	819a      	strh	r2, [r3, #12]
    uint16_t local_offset = 0;
 801457a:	2300      	movs	r3, #0
 801457c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x300);
 801457e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8014580:	f107 0310 	add.w	r3, r7, #16
 8014584:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8014588:	4618      	mov	r0, r3
 801458a:	f000 fc2a 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 801458e:	4603      	mov	r3, r0
 8014590:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014592:	4b26      	ldr	r3, [pc, #152]	@ (801462c <scd30_read_measurement_data+0xd4>)
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014598:	f107 0110 	add.w	r1, r7, #16
 801459c:	4618      	mov	r0, r3
 801459e:	f000 fc73 	bl	8014e88 <sensirion_i2c_write_data>
 80145a2:	4603      	mov	r3, r0
 80145a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 80145a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d002      	beq.n	80145b4 <scd30_read_measurement_data+0x5c>
        return local_error;
 80145ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145b2:	e036      	b.n	8014622 <scd30_read_measurement_data+0xca>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80145b4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80145b8:	f000 fd52 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 12);
 80145bc:	4b1b      	ldr	r3, [pc, #108]	@ (801462c <scd30_read_measurement_data+0xd4>)
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	f107 0110 	add.w	r1, r7, #16
 80145c4:	220c      	movs	r2, #12
 80145c6:	4618      	mov	r0, r3
 80145c8:	f000 fc71 	bl	8014eae <sensirion_i2c_read_data_inplace>
 80145cc:	4603      	mov	r3, r0
 80145ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 80145d0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d002      	beq.n	80145de <scd30_read_measurement_data+0x86>
        return local_error;
 80145d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145dc:	e021      	b.n	8014622 <scd30_read_measurement_data+0xca>
    }
    *co2_concentration = sensirion_common_bytes_to_float(&local_buffer[0]);
 80145de:	f107 0310 	add.w	r3, r7, #16
 80145e2:	4618      	mov	r0, r3
 80145e4:	f000 fb9b 	bl	8014d1e <sensirion_common_bytes_to_float>
 80145e8:	eef0 7a40 	vmov.f32	s15, s0
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_common_bytes_to_float(&local_buffer[4]);
 80145f2:	f107 0310 	add.w	r3, r7, #16
 80145f6:	3304      	adds	r3, #4
 80145f8:	4618      	mov	r0, r3
 80145fa:	f000 fb90 	bl	8014d1e <sensirion_common_bytes_to_float>
 80145fe:	eef0 7a40 	vmov.f32	s15, s0
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_common_bytes_to_float(&local_buffer[8]);
 8014608:	f107 0310 	add.w	r3, r7, #16
 801460c:	3308      	adds	r3, #8
 801460e:	4618      	mov	r0, r3
 8014610:	f000 fb85 	bl	8014d1e <sensirion_common_bytes_to_float>
 8014614:	eef0 7a40 	vmov.f32	s15, s0
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	edc3 7a00 	vstr	s15, [r3]
    return local_error;
 801461e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8014622:	4618      	mov	r0, r3
 8014624:	3728      	adds	r7, #40	@ 0x28
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	20001b5c 	.word	0x20001b5c

08014630 <scd30_activate_auto_calibration>:

int16_t scd30_activate_auto_calibration(uint16_t do_activate) {
 8014630:	b580      	push	{r7, lr}
 8014632:	b086      	sub	sp, #24
 8014634:	af00      	add	r7, sp, #0
 8014636:	4603      	mov	r3, r0
 8014638:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801463a:	2300      	movs	r3, #0
 801463c:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801463e:	2300      	movs	r3, #0
 8014640:	60fb      	str	r3, [r7, #12]
 8014642:	2300      	movs	r3, #0
 8014644:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014646:	2300      	movs	r3, #0
 8014648:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 801464a:	8ab9      	ldrh	r1, [r7, #20]
 801464c:	f107 030c 	add.w	r3, r7, #12
 8014650:	f245 3206 	movw	r2, #21254	@ 0x5306
 8014654:	4618      	mov	r0, r3
 8014656:	f000 fbc4 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 801465a:	4603      	mov	r3, r0
 801465c:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 801465e:	88fa      	ldrh	r2, [r7, #6]
 8014660:	8ab9      	ldrh	r1, [r7, #20]
 8014662:	f107 030c 	add.w	r3, r7, #12
 8014666:	4618      	mov	r0, r3
 8014668:	f000 fbde 	bl	8014e28 <sensirion_i2c_add_uint16_t_to_buffer>
 801466c:	4603      	mov	r3, r0
 801466e:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, do_activate);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014670:	4b0d      	ldr	r3, [pc, #52]	@ (80146a8 <scd30_activate_auto_calibration+0x78>)
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	8aba      	ldrh	r2, [r7, #20]
 8014676:	f107 010c 	add.w	r1, r7, #12
 801467a:	4618      	mov	r0, r3
 801467c:	f000 fc04 	bl	8014e88 <sensirion_i2c_write_data>
 8014680:	4603      	mov	r3, r0
 8014682:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014684:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d002      	beq.n	8014692 <scd30_activate_auto_calibration+0x62>
        return local_error;
 801468c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014690:	e005      	b.n	801469e <scd30_activate_auto_calibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014692:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014696:	f000 fce3 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801469a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3718      	adds	r7, #24
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	20001b5c 	.word	0x20001b5c

080146ac <scd30_get_auto_calibration_status>:

int16_t scd30_get_auto_calibration_status(uint16_t* is_active) {
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80146b4:	2300      	movs	r3, #0
 80146b6:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80146b8:	4b22      	ldr	r3, [pc, #136]	@ (8014744 <scd30_get_auto_calibration_status+0x98>)
 80146ba:	881b      	ldrh	r3, [r3, #0]
 80146bc:	813b      	strh	r3, [r7, #8]
 80146be:	2300      	movs	r3, #0
 80146c0:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80146c2:	2300      	movs	r3, #0
 80146c4:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 80146c6:	89b9      	ldrh	r1, [r7, #12]
 80146c8:	f107 0308 	add.w	r3, r7, #8
 80146cc:	f245 3206 	movw	r2, #21254	@ 0x5306
 80146d0:	4618      	mov	r0, r3
 80146d2:	f000 fb86 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 80146d6:	4603      	mov	r3, r0
 80146d8:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80146da:	4b1b      	ldr	r3, [pc, #108]	@ (8014748 <scd30_get_auto_calibration_status+0x9c>)
 80146dc:	781b      	ldrb	r3, [r3, #0]
 80146de:	89ba      	ldrh	r2, [r7, #12]
 80146e0:	f107 0108 	add.w	r1, r7, #8
 80146e4:	4618      	mov	r0, r3
 80146e6:	f000 fbcf 	bl	8014e88 <sensirion_i2c_write_data>
 80146ea:	4603      	mov	r3, r0
 80146ec:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80146ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d002      	beq.n	80146fc <scd30_get_auto_calibration_status+0x50>
        return local_error;
 80146f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80146fa:	e01f      	b.n	801473c <scd30_get_auto_calibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80146fc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014700:	f000 fcae 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014704:	4b10      	ldr	r3, [pc, #64]	@ (8014748 <scd30_get_auto_calibration_status+0x9c>)
 8014706:	781b      	ldrb	r3, [r3, #0]
 8014708:	f107 0108 	add.w	r1, r7, #8
 801470c:	2202      	movs	r2, #2
 801470e:	4618      	mov	r0, r3
 8014710:	f000 fbcd 	bl	8014eae <sensirion_i2c_read_data_inplace>
 8014714:	4603      	mov	r3, r0
 8014716:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d002      	beq.n	8014726 <scd30_get_auto_calibration_status+0x7a>
        return local_error;
 8014720:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014724:	e00a      	b.n	801473c <scd30_get_auto_calibration_status+0x90>
    }
    *is_active = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014726:	f107 0308 	add.w	r3, r7, #8
 801472a:	4618      	mov	r0, r3
 801472c:	f000 fac7 	bl	8014cbe <sensirion_common_bytes_to_uint16_t>
 8014730:	4603      	mov	r3, r0
 8014732:	461a      	mov	r2, r3
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801473c:	4618      	mov	r0, r3
 801473e:	3710      	adds	r7, #16
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}
 8014744:	08024790 	.word	0x08024790
 8014748:	20001b5c 	.word	0x20001b5c

0801474c <scd30_force_recalibration>:

int16_t scd30_force_recalibration(uint16_t co2_ref_concentration) {
 801474c:	b580      	push	{r7, lr}
 801474e:	b086      	sub	sp, #24
 8014750:	af00      	add	r7, sp, #0
 8014752:	4603      	mov	r3, r0
 8014754:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014756:	2300      	movs	r3, #0
 8014758:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801475a:	2300      	movs	r3, #0
 801475c:	60fb      	str	r3, [r7, #12]
 801475e:	2300      	movs	r3, #0
 8014760:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014762:	2300      	movs	r3, #0
 8014764:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 8014766:	8ab9      	ldrh	r1, [r7, #20]
 8014768:	f107 030c 	add.w	r3, r7, #12
 801476c:	f245 2204 	movw	r2, #20996	@ 0x5204
 8014770:	4618      	mov	r0, r3
 8014772:	f000 fb36 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014776:	4603      	mov	r3, r0
 8014778:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 801477a:	88fa      	ldrh	r2, [r7, #6]
 801477c:	8ab9      	ldrh	r1, [r7, #20]
 801477e:	f107 030c 	add.w	r3, r7, #12
 8014782:	4618      	mov	r0, r3
 8014784:	f000 fb50 	bl	8014e28 <sensirion_i2c_add_uint16_t_to_buffer>
 8014788:	4603      	mov	r3, r0
 801478a:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, co2_ref_concentration);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801478c:	4b0d      	ldr	r3, [pc, #52]	@ (80147c4 <scd30_force_recalibration+0x78>)
 801478e:	781b      	ldrb	r3, [r3, #0]
 8014790:	8aba      	ldrh	r2, [r7, #20]
 8014792:	f107 010c 	add.w	r1, r7, #12
 8014796:	4618      	mov	r0, r3
 8014798:	f000 fb76 	bl	8014e88 <sensirion_i2c_write_data>
 801479c:	4603      	mov	r3, r0
 801479e:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80147a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d002      	beq.n	80147ae <scd30_force_recalibration+0x62>
        return local_error;
 80147a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80147ac:	e005      	b.n	80147ba <scd30_force_recalibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80147ae:	f242 7010 	movw	r0, #10000	@ 0x2710
 80147b2:	f000 fc55 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80147b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3718      	adds	r7, #24
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}
 80147c2:	bf00      	nop
 80147c4:	20001b5c 	.word	0x20001b5c

080147c8 <scd30_get_force_recalibration_status>:

int16_t scd30_get_force_recalibration_status(uint16_t* co2_ref_concentration) {
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b084      	sub	sp, #16
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80147d0:	2300      	movs	r3, #0
 80147d2:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80147d4:	4b22      	ldr	r3, [pc, #136]	@ (8014860 <scd30_get_force_recalibration_status+0x98>)
 80147d6:	881b      	ldrh	r3, [r3, #0]
 80147d8:	813b      	strh	r3, [r7, #8]
 80147da:	2300      	movs	r3, #0
 80147dc:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80147de:	2300      	movs	r3, #0
 80147e0:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 80147e2:	89b9      	ldrh	r1, [r7, #12]
 80147e4:	f107 0308 	add.w	r3, r7, #8
 80147e8:	f245 2204 	movw	r2, #20996	@ 0x5204
 80147ec:	4618      	mov	r0, r3
 80147ee:	f000 faf8 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 80147f2:	4603      	mov	r3, r0
 80147f4:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80147f6:	4b1b      	ldr	r3, [pc, #108]	@ (8014864 <scd30_get_force_recalibration_status+0x9c>)
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	89ba      	ldrh	r2, [r7, #12]
 80147fc:	f107 0108 	add.w	r1, r7, #8
 8014800:	4618      	mov	r0, r3
 8014802:	f000 fb41 	bl	8014e88 <sensirion_i2c_write_data>
 8014806:	4603      	mov	r3, r0
 8014808:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801480a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d002      	beq.n	8014818 <scd30_get_force_recalibration_status+0x50>
        return local_error;
 8014812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014816:	e01f      	b.n	8014858 <scd30_get_force_recalibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014818:	f242 7010 	movw	r0, #10000	@ 0x2710
 801481c:	f000 fc20 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014820:	4b10      	ldr	r3, [pc, #64]	@ (8014864 <scd30_get_force_recalibration_status+0x9c>)
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	f107 0108 	add.w	r1, r7, #8
 8014828:	2202      	movs	r2, #2
 801482a:	4618      	mov	r0, r3
 801482c:	f000 fb3f 	bl	8014eae <sensirion_i2c_read_data_inplace>
 8014830:	4603      	mov	r3, r0
 8014832:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d002      	beq.n	8014842 <scd30_get_force_recalibration_status+0x7a>
        return local_error;
 801483c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014840:	e00a      	b.n	8014858 <scd30_get_force_recalibration_status+0x90>
    }
    *co2_ref_concentration =
        sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014842:	f107 0308 	add.w	r3, r7, #8
 8014846:	4618      	mov	r0, r3
 8014848:	f000 fa39 	bl	8014cbe <sensirion_common_bytes_to_uint16_t>
 801484c:	4603      	mov	r3, r0
 801484e:	461a      	mov	r2, r3
    *co2_ref_concentration =
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014854:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014858:	4618      	mov	r0, r3
 801485a:	3710      	adds	r7, #16
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}
 8014860:	08024790 	.word	0x08024790
 8014864:	20001b5c 	.word	0x20001b5c

08014868 <scd30_set_temperature_offset>:

int16_t scd30_set_temperature_offset(uint16_t temperature_offset) {
 8014868:	b580      	push	{r7, lr}
 801486a:	b086      	sub	sp, #24
 801486c:	af00      	add	r7, sp, #0
 801486e:	4603      	mov	r3, r0
 8014870:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014872:	2300      	movs	r3, #0
 8014874:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014876:	2300      	movs	r3, #0
 8014878:	60fb      	str	r3, [r7, #12]
 801487a:	2300      	movs	r3, #0
 801487c:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 801487e:	2300      	movs	r3, #0
 8014880:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 8014882:	8ab9      	ldrh	r1, [r7, #20]
 8014884:	f107 030c 	add.w	r3, r7, #12
 8014888:	f245 4203 	movw	r2, #21507	@ 0x5403
 801488c:	4618      	mov	r0, r3
 801488e:	f000 faa8 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014892:	4603      	mov	r3, r0
 8014894:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 8014896:	88fa      	ldrh	r2, [r7, #6]
 8014898:	8ab9      	ldrh	r1, [r7, #20]
 801489a:	f107 030c 	add.w	r3, r7, #12
 801489e:	4618      	mov	r0, r3
 80148a0:	f000 fac2 	bl	8014e28 <sensirion_i2c_add_uint16_t_to_buffer>
 80148a4:	4603      	mov	r3, r0
 80148a6:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, temperature_offset);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80148a8:	4b0d      	ldr	r3, [pc, #52]	@ (80148e0 <scd30_set_temperature_offset+0x78>)
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	8aba      	ldrh	r2, [r7, #20]
 80148ae:	f107 010c 	add.w	r1, r7, #12
 80148b2:	4618      	mov	r0, r3
 80148b4:	f000 fae8 	bl	8014e88 <sensirion_i2c_write_data>
 80148b8:	4603      	mov	r3, r0
 80148ba:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80148bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d002      	beq.n	80148ca <scd30_set_temperature_offset+0x62>
        return local_error;
 80148c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80148c8:	e005      	b.n	80148d6 <scd30_set_temperature_offset+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80148ca:	f242 7010 	movw	r0, #10000	@ 0x2710
 80148ce:	f000 fbc7 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80148d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80148d6:	4618      	mov	r0, r3
 80148d8:	3718      	adds	r7, #24
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}
 80148de:	bf00      	nop
 80148e0:	20001b5c 	.word	0x20001b5c

080148e4 <scd30_get_temperature_offset>:

int16_t scd30_get_temperature_offset(uint16_t* temperature_offset) {
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80148ec:	2300      	movs	r3, #0
 80148ee:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80148f0:	4b22      	ldr	r3, [pc, #136]	@ (801497c <scd30_get_temperature_offset+0x98>)
 80148f2:	881b      	ldrh	r3, [r3, #0]
 80148f4:	813b      	strh	r3, [r7, #8]
 80148f6:	2300      	movs	r3, #0
 80148f8:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80148fa:	2300      	movs	r3, #0
 80148fc:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 80148fe:	89b9      	ldrh	r1, [r7, #12]
 8014900:	f107 0308 	add.w	r3, r7, #8
 8014904:	f245 4203 	movw	r2, #21507	@ 0x5403
 8014908:	4618      	mov	r0, r3
 801490a:	f000 fa6a 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 801490e:	4603      	mov	r3, r0
 8014910:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014912:	4b1b      	ldr	r3, [pc, #108]	@ (8014980 <scd30_get_temperature_offset+0x9c>)
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	89ba      	ldrh	r2, [r7, #12]
 8014918:	f107 0108 	add.w	r1, r7, #8
 801491c:	4618      	mov	r0, r3
 801491e:	f000 fab3 	bl	8014e88 <sensirion_i2c_write_data>
 8014922:	4603      	mov	r3, r0
 8014924:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d002      	beq.n	8014934 <scd30_get_temperature_offset+0x50>
        return local_error;
 801492e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014932:	e01f      	b.n	8014974 <scd30_get_temperature_offset+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014934:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014938:	f000 fb92 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 801493c:	4b10      	ldr	r3, [pc, #64]	@ (8014980 <scd30_get_temperature_offset+0x9c>)
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	f107 0108 	add.w	r1, r7, #8
 8014944:	2202      	movs	r2, #2
 8014946:	4618      	mov	r0, r3
 8014948:	f000 fab1 	bl	8014eae <sensirion_i2c_read_data_inplace>
 801494c:	4603      	mov	r3, r0
 801494e:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014950:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d002      	beq.n	801495e <scd30_get_temperature_offset+0x7a>
        return local_error;
 8014958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801495c:	e00a      	b.n	8014974 <scd30_get_temperature_offset+0x90>
    }
    *temperature_offset = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801495e:	f107 0308 	add.w	r3, r7, #8
 8014962:	4618      	mov	r0, r3
 8014964:	f000 f9ab 	bl	8014cbe <sensirion_common_bytes_to_uint16_t>
 8014968:	4603      	mov	r3, r0
 801496a:	461a      	mov	r2, r3
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014970:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014974:	4618      	mov	r0, r3
 8014976:	3710      	adds	r7, #16
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}
 801497c:	08024790 	.word	0x08024790
 8014980:	20001b5c 	.word	0x20001b5c

08014984 <scd30_get_altitude_compensation>:

int16_t scd30_get_altitude_compensation(uint16_t* altitude) {
 8014984:	b580      	push	{r7, lr}
 8014986:	b084      	sub	sp, #16
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 801498c:	2300      	movs	r3, #0
 801498e:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014990:	4b22      	ldr	r3, [pc, #136]	@ (8014a1c <scd30_get_altitude_compensation+0x98>)
 8014992:	881b      	ldrh	r3, [r3, #0]
 8014994:	813b      	strh	r3, [r7, #8]
 8014996:	2300      	movs	r3, #0
 8014998:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 801499a:	2300      	movs	r3, #0
 801499c:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 801499e:	89b9      	ldrh	r1, [r7, #12]
 80149a0:	f107 0308 	add.w	r3, r7, #8
 80149a4:	f245 1202 	movw	r2, #20738	@ 0x5102
 80149a8:	4618      	mov	r0, r3
 80149aa:	f000 fa1a 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 80149ae:	4603      	mov	r3, r0
 80149b0:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80149b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014a20 <scd30_get_altitude_compensation+0x9c>)
 80149b4:	781b      	ldrb	r3, [r3, #0]
 80149b6:	89ba      	ldrh	r2, [r7, #12]
 80149b8:	f107 0108 	add.w	r1, r7, #8
 80149bc:	4618      	mov	r0, r3
 80149be:	f000 fa63 	bl	8014e88 <sensirion_i2c_write_data>
 80149c2:	4603      	mov	r3, r0
 80149c4:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80149c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d002      	beq.n	80149d4 <scd30_get_altitude_compensation+0x50>
        return local_error;
 80149ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149d2:	e01f      	b.n	8014a14 <scd30_get_altitude_compensation+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80149d4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80149d8:	f000 fb42 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 80149dc:	4b10      	ldr	r3, [pc, #64]	@ (8014a20 <scd30_get_altitude_compensation+0x9c>)
 80149de:	781b      	ldrb	r3, [r3, #0]
 80149e0:	f107 0108 	add.w	r1, r7, #8
 80149e4:	2202      	movs	r2, #2
 80149e6:	4618      	mov	r0, r3
 80149e8:	f000 fa61 	bl	8014eae <sensirion_i2c_read_data_inplace>
 80149ec:	4603      	mov	r3, r0
 80149ee:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80149f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d002      	beq.n	80149fe <scd30_get_altitude_compensation+0x7a>
        return local_error;
 80149f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149fc:	e00a      	b.n	8014a14 <scd30_get_altitude_compensation+0x90>
    }
    *altitude = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 80149fe:	f107 0308 	add.w	r3, r7, #8
 8014a02:	4618      	mov	r0, r3
 8014a04:	f000 f95b 	bl	8014cbe <sensirion_common_bytes_to_uint16_t>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3710      	adds	r7, #16
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}
 8014a1c:	08024790 	.word	0x08024790
 8014a20:	20001b5c 	.word	0x20001b5c

08014a24 <scd30_set_altitude_compensation>:

int16_t scd30_set_altitude_compensation(uint16_t altitude) {
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b086      	sub	sp, #24
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014a32:	2300      	movs	r3, #0
 8014a34:	60fb      	str	r3, [r7, #12]
 8014a36:	2300      	movs	r3, #0
 8014a38:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 8014a3e:	8ab9      	ldrh	r1, [r7, #20]
 8014a40:	f107 030c 	add.w	r3, r7, #12
 8014a44:	f245 1202 	movw	r2, #20738	@ 0x5102
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f000 f9ca 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 8014a52:	88fa      	ldrh	r2, [r7, #6]
 8014a54:	8ab9      	ldrh	r1, [r7, #20]
 8014a56:	f107 030c 	add.w	r3, r7, #12
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f000 f9e4 	bl	8014e28 <sensirion_i2c_add_uint16_t_to_buffer>
 8014a60:	4603      	mov	r3, r0
 8014a62:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, altitude);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014a64:	4b0d      	ldr	r3, [pc, #52]	@ (8014a9c <scd30_set_altitude_compensation+0x78>)
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	8aba      	ldrh	r2, [r7, #20]
 8014a6a:	f107 010c 	add.w	r1, r7, #12
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f000 fa0a 	bl	8014e88 <sensirion_i2c_write_data>
 8014a74:	4603      	mov	r3, r0
 8014a76:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014a78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d002      	beq.n	8014a86 <scd30_set_altitude_compensation+0x62>
        return local_error;
 8014a80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014a84:	e005      	b.n	8014a92 <scd30_set_altitude_compensation+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014a86:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014a8a:	f000 fae9 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014a8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3718      	adds	r7, #24
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}
 8014a9a:	bf00      	nop
 8014a9c:	20001b5c 	.word	0x20001b5c

08014aa0 <scd30_read_firmware_version>:

int16_t scd30_read_firmware_version(uint8_t* major, uint8_t* minor) {
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
 8014aa8:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014aae:	4b21      	ldr	r3, [pc, #132]	@ (8014b34 <scd30_read_firmware_version+0x94>)
 8014ab0:	881b      	ldrh	r3, [r3, #0]
 8014ab2:	813b      	strh	r3, [r7, #8]
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014ab8:	2300      	movs	r3, #0
 8014aba:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd100);
 8014abc:	89b9      	ldrh	r1, [r7, #12]
 8014abe:	f107 0308 	add.w	r3, r7, #8
 8014ac2:	f44f 4251 	mov.w	r2, #53504	@ 0xd100
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f000 f98b 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014acc:	4603      	mov	r3, r0
 8014ace:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014ad0:	4b19      	ldr	r3, [pc, #100]	@ (8014b38 <scd30_read_firmware_version+0x98>)
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	89ba      	ldrh	r2, [r7, #12]
 8014ad6:	f107 0108 	add.w	r1, r7, #8
 8014ada:	4618      	mov	r0, r3
 8014adc:	f000 f9d4 	bl	8014e88 <sensirion_i2c_write_data>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014ae4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d002      	beq.n	8014af2 <scd30_read_firmware_version+0x52>
        return local_error;
 8014aec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014af0:	e01c      	b.n	8014b2c <scd30_read_firmware_version+0x8c>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014af2:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014af6:	f000 fab3 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014afa:	4b0f      	ldr	r3, [pc, #60]	@ (8014b38 <scd30_read_firmware_version+0x98>)
 8014afc:	781b      	ldrb	r3, [r3, #0]
 8014afe:	f107 0108 	add.w	r1, r7, #8
 8014b02:	2202      	movs	r2, #2
 8014b04:	4618      	mov	r0, r3
 8014b06:	f000 f9d2 	bl	8014eae <sensirion_i2c_read_data_inplace>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014b0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d002      	beq.n	8014b1c <scd30_read_firmware_version+0x7c>
        return local_error;
 8014b16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b1a:	e007      	b.n	8014b2c <scd30_read_firmware_version+0x8c>
    }
    *major = (uint8_t)local_buffer[0];
 8014b1c:	7a3a      	ldrb	r2, [r7, #8]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	701a      	strb	r2, [r3, #0]
    *minor = (uint8_t)local_buffer[1];
 8014b22:	7a7a      	ldrb	r2, [r7, #9]
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	701a      	strb	r2, [r3, #0]
    return local_error;
 8014b28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3710      	adds	r7, #16
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	08024790 	.word	0x08024790
 8014b38:	20001b5c 	.word	0x20001b5c

08014b3c <scd30_soft_reset>:

int16_t scd30_soft_reset() {
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b082      	sub	sp, #8
 8014b40:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8014b42:	2300      	movs	r3, #0
 8014b44:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 8014b46:	2300      	movs	r3, #0
 8014b48:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd304);
 8014b4e:	88b9      	ldrh	r1, [r7, #4]
 8014b50:	463b      	mov	r3, r7
 8014b52:	f24d 3204 	movw	r2, #54020	@ 0xd304
 8014b56:	4618      	mov	r0, r3
 8014b58:	f000 f943 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014b60:	4b0c      	ldr	r3, [pc, #48]	@ (8014b94 <scd30_soft_reset+0x58>)
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	88ba      	ldrh	r2, [r7, #4]
 8014b66:	4639      	mov	r1, r7
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f000 f98d 	bl	8014e88 <sensirion_i2c_write_data>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8014b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d002      	beq.n	8014b80 <scd30_soft_reset+0x44>
        return local_error;
 8014b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b7e:	e004      	b.n	8014b8a <scd30_soft_reset+0x4e>
    }
    sensirion_i2c_hal_sleep_usec(2000 * 1000);
 8014b80:	4805      	ldr	r0, [pc, #20]	@ (8014b98 <scd30_soft_reset+0x5c>)
 8014b82:	f000 fa6d 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3708      	adds	r7, #8
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	20001b5c 	.word	0x20001b5c
 8014b98:	001e8480 	.word	0x001e8480

08014b9c <scd4x_stop_periodic_measurement>:
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
    return NO_ERROR;
}

int16_t scd4x_stop_periodic_measurement() {
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b082      	sub	sp, #8
 8014ba0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8014ba6:	88f9      	ldrh	r1, [r7, #6]
 8014ba8:	463b      	mov	r3, r7
 8014baa:	f643 7286 	movw	r2, #16262	@ 0x3f86
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f000 f917 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014bb8:	88fa      	ldrh	r2, [r7, #6]
 8014bba:	463b      	mov	r3, r7
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	2062      	movs	r0, #98	@ 0x62
 8014bc0:	f000 f962 	bl	8014e88 <sensirion_i2c_write_data>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014bc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d002      	beq.n	8014bd6 <scd4x_stop_periodic_measurement+0x3a>
        return error;
 8014bd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014bd4:	e003      	b.n	8014bde <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8014bd6:	4804      	ldr	r0, [pc, #16]	@ (8014be8 <scd4x_stop_periodic_measurement+0x4c>)
 8014bd8:	f000 fa42 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014bdc:	2300      	movs	r3, #0
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	3708      	adds	r7, #8
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}
 8014be6:	bf00      	nop
 8014be8:	0007a120 	.word	0x0007a120

08014bec <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b082      	sub	sp, #8
 8014bf0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8014bf6:	88f9      	ldrh	r1, [r7, #6]
 8014bf8:	463b      	mov	r3, r7
 8014bfa:	f243 6246 	movw	r2, #13894	@ 0x3646
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f000 f8ef 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014c04:	4603      	mov	r3, r0
 8014c06:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014c08:	88fa      	ldrh	r2, [r7, #6]
 8014c0a:	463b      	mov	r3, r7
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	2062      	movs	r0, #98	@ 0x62
 8014c10:	f000 f93a 	bl	8014e88 <sensirion_i2c_write_data>
 8014c14:	4603      	mov	r3, r0
 8014c16:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014c18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d002      	beq.n	8014c26 <scd4x_reinit+0x3a>
        return error;
 8014c20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c24:	e004      	b.n	8014c30 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8014c26:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014c2a:	f000 fa19 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c2e:	2300      	movs	r3, #0
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3708      	adds	r7, #8
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}

08014c38 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8014c42:	88f9      	ldrh	r1, [r7, #6]
 8014c44:	463b      	mov	r3, r7
 8014c46:	f243 62e0 	movw	r2, #14048	@ 0x36e0
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f000 f8c9 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014c50:	4603      	mov	r3, r0
 8014c52:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014c54:	88fa      	ldrh	r2, [r7, #6]
 8014c56:	463b      	mov	r3, r7
 8014c58:	4619      	mov	r1, r3
 8014c5a:	2062      	movs	r0, #98	@ 0x62
 8014c5c:	f000 f914 	bl	8014e88 <sensirion_i2c_write_data>
 8014c60:	4603      	mov	r3, r0
 8014c62:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014c64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d002      	beq.n	8014c72 <scd4x_power_down+0x3a>
        return error;
 8014c6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c70:	e004      	b.n	8014c7c <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8014c72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014c76:	f000 f9f3 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c7a:	2300      	movs	r3, #0
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3708      	adds	r7, #8
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8014c8e:	88f9      	ldrh	r1, [r7, #6]
 8014c90:	1d3b      	adds	r3, r7, #4
 8014c92:	f243 62f6 	movw	r2, #14070	@ 0x36f6
 8014c96:	4618      	mov	r0, r3
 8014c98:	f000 f8a3 	bl	8014de2 <sensirion_i2c_add_command_to_buffer>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014ca0:	88fa      	ldrh	r2, [r7, #6]
 8014ca2:	1d3b      	adds	r3, r7, #4
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	2062      	movs	r0, #98	@ 0x62
 8014ca8:	f000 f8ee 	bl	8014e88 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8014cac:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014cb0:	f000 f9d6 	bl	8015060 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014cb4:	2300      	movs	r3, #0
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3708      	adds	r7, #8
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}

08014cbe <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8014cbe:	b480      	push	{r7}
 8014cc0:	b083      	sub	sp, #12
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	781b      	ldrb	r3, [r3, #0]
 8014cca:	021b      	lsls	r3, r3, #8
 8014ccc:	b21a      	sxth	r2, r3
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	b21b      	sxth	r3, r3
 8014cd6:	4313      	orrs	r3, r2
 8014cd8:	b21b      	sxth	r3, r3
 8014cda:	b29b      	uxth	r3, r3
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	370c      	adds	r7, #12
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr

08014ce8 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8014ce8:	b480      	push	{r7}
 8014cea:	b083      	sub	sp, #12
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	781b      	ldrb	r3, [r3, #0]
 8014cf4:	061a      	lsls	r2, r3, #24
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	781b      	ldrb	r3, [r3, #0]
 8014cfc:	041b      	lsls	r3, r3, #16
 8014cfe:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	3302      	adds	r3, #2
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014d08:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014d0a:	687a      	ldr	r2, [r7, #4]
 8014d0c:	3203      	adds	r2, #3
 8014d0e:	7812      	ldrb	r2, [r2, #0]
 8014d10:	4313      	orrs	r3, r2
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	370c      	adds	r7, #12
 8014d16:	46bd      	mov	sp, r7
 8014d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1c:	4770      	bx	lr

08014d1e <sensirion_common_bytes_to_float>:

int32_t sensirion_common_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_common_bytes_to_uint32_t(bytes);
}

float sensirion_common_bytes_to_float(const uint8_t* bytes) {
 8014d1e:	b580      	push	{r7, lr}
 8014d20:	b084      	sub	sp, #16
 8014d22:	af00      	add	r7, sp, #0
 8014d24:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_common_bytes_to_uint32_t(bytes);
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f7ff ffde 	bl	8014ce8 <sensirion_common_bytes_to_uint32_t>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	ee07 3a90 	vmov	s15, r3
}
 8014d36:	eeb0 0a67 	vmov.f32	s0, s15
 8014d3a:	3710      	adds	r7, #16
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}

08014d40 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8014d40:	b480      	push	{r7}
 8014d42:	b085      	sub	sp, #20
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
 8014d48:	460b      	mov	r3, r1
 8014d4a:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8014d4c:	23ff      	movs	r3, #255	@ 0xff
 8014d4e:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014d50:	2300      	movs	r3, #0
 8014d52:	81fb      	strh	r3, [r7, #14]
 8014d54:	e021      	b.n	8014d9a <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8014d56:	89fb      	ldrh	r3, [r7, #14]
 8014d58:	687a      	ldr	r2, [r7, #4]
 8014d5a:	4413      	add	r3, r2
 8014d5c:	781a      	ldrb	r2, [r3, #0]
 8014d5e:	7b7b      	ldrb	r3, [r7, #13]
 8014d60:	4053      	eors	r3, r2
 8014d62:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014d64:	2308      	movs	r3, #8
 8014d66:	733b      	strb	r3, [r7, #12]
 8014d68:	e011      	b.n	8014d8e <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8014d6a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	da07      	bge.n	8014d82 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8014d72:	7b7b      	ldrb	r3, [r7, #13]
 8014d74:	005b      	lsls	r3, r3, #1
 8014d76:	b25b      	sxtb	r3, r3
 8014d78:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8014d7c:	b25b      	sxtb	r3, r3
 8014d7e:	737b      	strb	r3, [r7, #13]
 8014d80:	e002      	b.n	8014d88 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8014d82:	7b7b      	ldrb	r3, [r7, #13]
 8014d84:	005b      	lsls	r3, r3, #1
 8014d86:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014d88:	7b3b      	ldrb	r3, [r7, #12]
 8014d8a:	3b01      	subs	r3, #1
 8014d8c:	733b      	strb	r3, [r7, #12]
 8014d8e:	7b3b      	ldrb	r3, [r7, #12]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d1ea      	bne.n	8014d6a <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014d94:	89fb      	ldrh	r3, [r7, #14]
 8014d96:	3301      	adds	r3, #1
 8014d98:	81fb      	strh	r3, [r7, #14]
 8014d9a:	89fa      	ldrh	r2, [r7, #14]
 8014d9c:	887b      	ldrh	r3, [r7, #2]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d3d9      	bcc.n	8014d56 <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8014da2:	7b7b      	ldrb	r3, [r7, #13]
}
 8014da4:	4618      	mov	r0, r3
 8014da6:	3714      	adds	r7, #20
 8014da8:	46bd      	mov	sp, r7
 8014daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dae:	4770      	bx	lr

08014db0 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b082      	sub	sp, #8
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	460b      	mov	r3, r1
 8014dba:	807b      	strh	r3, [r7, #2]
 8014dbc:	4613      	mov	r3, r2
 8014dbe:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8014dc0:	887b      	ldrh	r3, [r7, #2]
 8014dc2:	4619      	mov	r1, r3
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f7ff ffbb 	bl	8014d40 <sensirion_i2c_generate_crc>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	461a      	mov	r2, r3
 8014dce:	787b      	ldrb	r3, [r7, #1]
 8014dd0:	4293      	cmp	r3, r2
 8014dd2:	d001      	beq.n	8014dd8 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	e000      	b.n	8014dda <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8014dd8:	2300      	movs	r3, #0
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3708      	adds	r7, #8
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}

08014de2 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8014de2:	b480      	push	{r7}
 8014de4:	b083      	sub	sp, #12
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	6078      	str	r0, [r7, #4]
 8014dea:	460b      	mov	r3, r1
 8014dec:	807b      	strh	r3, [r7, #2]
 8014dee:	4613      	mov	r3, r2
 8014df0:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8014df2:	883b      	ldrh	r3, [r7, #0]
 8014df4:	0a1b      	lsrs	r3, r3, #8
 8014df6:	b29a      	uxth	r2, r3
 8014df8:	887b      	ldrh	r3, [r7, #2]
 8014dfa:	1c59      	adds	r1, r3, #1
 8014dfc:	8079      	strh	r1, [r7, #2]
 8014dfe:	4619      	mov	r1, r3
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	440b      	add	r3, r1
 8014e04:	b2d2      	uxtb	r2, r2
 8014e06:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8014e08:	887b      	ldrh	r3, [r7, #2]
 8014e0a:	1c5a      	adds	r2, r3, #1
 8014e0c:	807a      	strh	r2, [r7, #2]
 8014e0e:	461a      	mov	r2, r3
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	4413      	add	r3, r2
 8014e14:	883a      	ldrh	r2, [r7, #0]
 8014e16:	b2d2      	uxtb	r2, r2
 8014e18:	701a      	strb	r2, [r3, #0]
    return offset;
 8014e1a:	887b      	ldrh	r3, [r7, #2]
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	370c      	adds	r7, #12
 8014e20:	46bd      	mov	sp, r7
 8014e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e26:	4770      	bx	lr

08014e28 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8014e28:	b590      	push	{r4, r7, lr}
 8014e2a:	b083      	sub	sp, #12
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	460b      	mov	r3, r1
 8014e32:	807b      	strh	r3, [r7, #2]
 8014e34:	4613      	mov	r3, r2
 8014e36:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8014e38:	883b      	ldrh	r3, [r7, #0]
 8014e3a:	0a1b      	lsrs	r3, r3, #8
 8014e3c:	b29a      	uxth	r2, r3
 8014e3e:	887b      	ldrh	r3, [r7, #2]
 8014e40:	1c59      	adds	r1, r3, #1
 8014e42:	8079      	strh	r1, [r7, #2]
 8014e44:	4619      	mov	r1, r3
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	440b      	add	r3, r1
 8014e4a:	b2d2      	uxtb	r2, r2
 8014e4c:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8014e4e:	887b      	ldrh	r3, [r7, #2]
 8014e50:	1c5a      	adds	r2, r3, #1
 8014e52:	807a      	strh	r2, [r7, #2]
 8014e54:	461a      	mov	r2, r3
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	4413      	add	r3, r2
 8014e5a:	883a      	ldrh	r2, [r7, #0]
 8014e5c:	b2d2      	uxtb	r2, r2
 8014e5e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8014e60:	887b      	ldrh	r3, [r7, #2]
 8014e62:	3b02      	subs	r3, #2
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8014e68:	887b      	ldrh	r3, [r7, #2]
 8014e6a:	687a      	ldr	r2, [r7, #4]
 8014e6c:	18d4      	adds	r4, r2, r3
 8014e6e:	2102      	movs	r1, #2
 8014e70:	f7ff ff66 	bl	8014d40 <sensirion_i2c_generate_crc>
 8014e74:	4603      	mov	r3, r0
 8014e76:	7023      	strb	r3, [r4, #0]
    offset++;
 8014e78:	887b      	ldrh	r3, [r7, #2]
 8014e7a:	3301      	adds	r3, #1
 8014e7c:	807b      	strh	r3, [r7, #2]

    return offset;
 8014e7e:	887b      	ldrh	r3, [r7, #2]
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	370c      	adds	r7, #12
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd90      	pop	{r4, r7, pc}

08014e88 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b082      	sub	sp, #8
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	4603      	mov	r3, r0
 8014e90:	6039      	str	r1, [r7, #0]
 8014e92:	71fb      	strb	r3, [r7, #7]
 8014e94:	4613      	mov	r3, r2
 8014e96:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8014e98:	88ba      	ldrh	r2, [r7, #4]
 8014e9a:	79fb      	ldrb	r3, [r7, #7]
 8014e9c:	6839      	ldr	r1, [r7, #0]
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f000 f8c2 	bl	8015028 <sensirion_i2c_hal_write>
 8014ea4:	4603      	mov	r3, r0
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3708      	adds	r7, #8
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}

08014eae <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8014eae:	b580      	push	{r7, lr}
 8014eb0:	b084      	sub	sp, #16
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	6039      	str	r1, [r7, #0]
 8014eb8:	71fb      	strb	r3, [r7, #7]
 8014eba:	4613      	mov	r3, r2
 8014ebc:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8014ebe:	88bb      	ldrh	r3, [r7, #4]
 8014ec0:	085b      	lsrs	r3, r3, #1
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	461a      	mov	r2, r3
 8014ec6:	0052      	lsls	r2, r2, #1
 8014ec8:	4413      	add	r3, r2
 8014eca:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8014ecc:	88bb      	ldrh	r3, [r7, #4]
 8014ece:	f003 0301 	and.w	r3, r3, #1
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d001      	beq.n	8014edc <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8014ed8:	2304      	movs	r3, #4
 8014eda:	e047      	b.n	8014f6c <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8014edc:	897a      	ldrh	r2, [r7, #10]
 8014ede:	79fb      	ldrb	r3, [r7, #7]
 8014ee0:	6839      	ldr	r1, [r7, #0]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f000 f884 	bl	8014ff0 <sensirion_i2c_hal_read>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	813b      	strh	r3, [r7, #8]
    if (error) {
 8014eec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d002      	beq.n	8014efa <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8014ef4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014ef8:	e038      	b.n	8014f6c <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014efa:	2300      	movs	r3, #0
 8014efc:	81fb      	strh	r3, [r7, #14]
 8014efe:	2300      	movs	r3, #0
 8014f00:	81bb      	strh	r3, [r7, #12]
 8014f02:	e02e      	b.n	8014f62 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014f04:	89fb      	ldrh	r3, [r7, #14]
 8014f06:	683a      	ldr	r2, [r7, #0]
 8014f08:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8014f0a:	89fb      	ldrh	r3, [r7, #14]
 8014f0c:	3302      	adds	r3, #2
 8014f0e:	683a      	ldr	r2, [r7, #0]
 8014f10:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	461a      	mov	r2, r3
 8014f16:	2102      	movs	r1, #2
 8014f18:	f7ff ff4a 	bl	8014db0 <sensirion_i2c_check_crc>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	813b      	strh	r3, [r7, #8]
        if (error) {
 8014f20:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d002      	beq.n	8014f2e <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8014f28:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f2c:	e01e      	b.n	8014f6c <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8014f2e:	89fb      	ldrh	r3, [r7, #14]
 8014f30:	683a      	ldr	r2, [r7, #0]
 8014f32:	441a      	add	r2, r3
 8014f34:	89bb      	ldrh	r3, [r7, #12]
 8014f36:	1c59      	adds	r1, r3, #1
 8014f38:	81b9      	strh	r1, [r7, #12]
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	440b      	add	r3, r1
 8014f40:	7812      	ldrb	r2, [r2, #0]
 8014f42:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8014f44:	89fb      	ldrh	r3, [r7, #14]
 8014f46:	3301      	adds	r3, #1
 8014f48:	683a      	ldr	r2, [r7, #0]
 8014f4a:	441a      	add	r2, r3
 8014f4c:	89bb      	ldrh	r3, [r7, #12]
 8014f4e:	1c59      	adds	r1, r3, #1
 8014f50:	81b9      	strh	r1, [r7, #12]
 8014f52:	4619      	mov	r1, r3
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	440b      	add	r3, r1
 8014f58:	7812      	ldrb	r2, [r2, #0]
 8014f5a:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014f5c:	89fb      	ldrh	r3, [r7, #14]
 8014f5e:	3303      	adds	r3, #3
 8014f60:	81fb      	strh	r3, [r7, #14]
 8014f62:	89fa      	ldrh	r2, [r7, #14]
 8014f64:	897b      	ldrh	r3, [r7, #10]
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d3cc      	bcc.n	8014f04 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8014f6a:	2300      	movs	r3, #0
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3710      	adds	r7, #16
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}

08014f74 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8014f74:	b580      	push	{r7, lr}
 8014f76:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8014f78:	4814      	ldr	r0, [pc, #80]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014f7a:	f7f1 fa27 	bl	80063cc <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 8014f7e:	4b13      	ldr	r3, [pc, #76]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014f80:	4a13      	ldr	r2, [pc, #76]	@ (8014fd0 <sensirion_i2c_hal_init+0x5c>)
 8014f82:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 8014f84:	4b11      	ldr	r3, [pc, #68]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014f86:	4a13      	ldr	r2, [pc, #76]	@ (8014fd4 <sensirion_i2c_hal_init+0x60>)
 8014f88:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014f8a:	4b10      	ldr	r3, [pc, #64]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8014f90:	4b0e      	ldr	r3, [pc, #56]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014f92:	2200      	movs	r2, #0
 8014f94:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014f96:	4b0d      	ldr	r3, [pc, #52]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014f98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8014f9c:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8014fa4:	4b09      	ldr	r3, [pc, #36]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014faa:	4b08      	ldr	r3, [pc, #32]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014fac:	2200      	movs	r2, #0
 8014fae:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014fb0:	4b06      	ldr	r3, [pc, #24]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014fb6:	4805      	ldr	r0, [pc, #20]	@ (8014fcc <sensirion_i2c_hal_init+0x58>)
 8014fb8:	f7f1 f8c4 	bl	8006144 <HAL_I2C_Init>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d001      	beq.n	8014fc6 <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8014fc2:	f7ee fb5f 	bl	8003684 <Error_Handler>
	  }
}
 8014fc6:	bf00      	nop
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	20001838 	.word	0x20001838
 8014fd0:	40005400 	.word	0x40005400
 8014fd4:	000186a0 	.word	0x000186a0

08014fd8 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8014fdc:	4803      	ldr	r0, [pc, #12]	@ (8014fec <sensirion_i2c_hal_free+0x14>)
 8014fde:	f7f1 f9f5 	bl	80063cc <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8014fe2:	4802      	ldr	r0, [pc, #8]	@ (8014fec <sensirion_i2c_hal_free+0x14>)
 8014fe4:	f7ee fc28 	bl	8003838 <HAL_I2C_MspDeInit>
}
 8014fe8:	bf00      	nop
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	20001838 	.word	0x20001838

08014ff0 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b084      	sub	sp, #16
 8014ff4:	af02      	add	r7, sp, #8
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	6039      	str	r1, [r7, #0]
 8014ffa:	71fb      	strb	r3, [r7, #7]
 8014ffc:	4613      	mov	r3, r2
 8014ffe:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8015000:	79fb      	ldrb	r3, [r7, #7]
 8015002:	b29b      	uxth	r3, r3
 8015004:	005b      	lsls	r3, r3, #1
 8015006:	b299      	uxth	r1, r3
 8015008:	88bb      	ldrh	r3, [r7, #4]
 801500a:	f04f 32ff 	mov.w	r2, #4294967295
 801500e:	9200      	str	r2, [sp, #0]
 8015010:	683a      	ldr	r2, [r7, #0]
 8015012:	4804      	ldr	r0, [pc, #16]	@ (8015024 <sensirion_i2c_hal_read+0x34>)
 8015014:	f7f1 fb08 	bl	8006628 <HAL_I2C_Master_Receive>
 8015018:	4603      	mov	r3, r0
 801501a:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 801501c:	4618      	mov	r0, r3
 801501e:	3708      	adds	r7, #8
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}
 8015024:	20001838 	.word	0x20001838

08015028 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8015028:	b580      	push	{r7, lr}
 801502a:	b084      	sub	sp, #16
 801502c:	af02      	add	r7, sp, #8
 801502e:	4603      	mov	r3, r0
 8015030:	6039      	str	r1, [r7, #0]
 8015032:	71fb      	strb	r3, [r7, #7]
 8015034:	4613      	mov	r3, r2
 8015036:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),(uint8_t *)data,count,HAL_MAX_DELAY);
 8015038:	79fb      	ldrb	r3, [r7, #7]
 801503a:	b29b      	uxth	r3, r3
 801503c:	005b      	lsls	r3, r3, #1
 801503e:	b299      	uxth	r1, r3
 8015040:	88bb      	ldrh	r3, [r7, #4]
 8015042:	f04f 32ff 	mov.w	r2, #4294967295
 8015046:	9200      	str	r2, [sp, #0]
 8015048:	683a      	ldr	r2, [r7, #0]
 801504a:	4804      	ldr	r0, [pc, #16]	@ (801505c <sensirion_i2c_hal_write+0x34>)
 801504c:	f7f1 f9ee 	bl	800642c <HAL_I2C_Master_Transmit>
 8015050:	4603      	mov	r3, r0
 8015052:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8015054:	4618      	mov	r0, r3
 8015056:	3708      	adds	r7, #8
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	20001838 	.word	0x20001838

08015060 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8015060:	b580      	push	{r7, lr}
 8015062:	b084      	sub	sp, #16
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */
	   uint32_t msec = useconds / 1000;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	4a0d      	ldr	r2, [pc, #52]	@ (80150a0 <sensirion_i2c_hal_sleep_usec+0x40>)
 801506c:	fba2 2303 	umull	r2, r3, r2, r3
 8015070:	099b      	lsrs	r3, r3, #6
 8015072:	60fb      	str	r3, [r7, #12]
	    if (useconds % 1000 > 0) {
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	4b0a      	ldr	r3, [pc, #40]	@ (80150a0 <sensirion_i2c_hal_sleep_usec+0x40>)
 8015078:	fba3 1302 	umull	r1, r3, r3, r2
 801507c:	099b      	lsrs	r3, r3, #6
 801507e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015082:	fb01 f303 	mul.w	r3, r1, r3
 8015086:	1ad3      	subs	r3, r2, r3
 8015088:	2b00      	cmp	r3, #0
 801508a:	d002      	beq.n	8015092 <sensirion_i2c_hal_sleep_usec+0x32>
	        msec++;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	3301      	adds	r3, #1
 8015090:	60fb      	str	r3, [r7, #12]
	    }
	    HAL_Delay(msec);
 8015092:	68f8      	ldr	r0, [r7, #12]
 8015094:	f7ef f84c 	bl	8004130 <HAL_Delay>
}
 8015098:	bf00      	nop
 801509a:	3710      	adds	r7, #16
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}
 80150a0:	10624dd3 	.word	0x10624dd3

080150a4 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 80150a4:	b480      	push	{r7}
 80150a6:	b083      	sub	sp, #12
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	061a      	lsls	r2, r3, #24
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	3301      	adds	r3, #1
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	041b      	lsls	r3, r3, #16
 80150ba:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	3302      	adds	r3, #2
 80150c0:	781b      	ldrb	r3, [r3, #0]
 80150c2:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 80150c4:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 80150c6:	687a      	ldr	r2, [r7, #4]
 80150c8:	3203      	adds	r2, #3
 80150ca:	7812      	ldrb	r2, [r2, #0]
 80150cc:	4313      	orrs	r3, r2
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	370c      	adds	r7, #12
 80150d2:	46bd      	mov	sp, r7
 80150d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d8:	4770      	bx	lr

080150da <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 80150da:	b580      	push	{r7, lr}
 80150dc:	b084      	sub	sp, #16
 80150de:	af00      	add	r7, sp, #0
 80150e0:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f7ff ffde 	bl	80150a4 <sensirion_bytes_to_uint32_t>
 80150e8:	4603      	mov	r3, r0
 80150ea:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	ee07 3a90 	vmov	s15, r3
}
 80150f2:	eeb0 0a67 	vmov.f32	s0, s15
 80150f6:	3710      	adds	r7, #16
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 80150fc:	b480      	push	{r7}
 80150fe:	b083      	sub	sp, #12
 8015100:	af00      	add	r7, sp, #0
 8015102:	4603      	mov	r3, r0
 8015104:	603a      	str	r2, [r7, #0]
 8015106:	71fb      	strb	r3, [r7, #7]
 8015108:	460b      	mov	r3, r1
 801510a:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 801510c:	79fa      	ldrb	r2, [r7, #7]
 801510e:	79bb      	ldrb	r3, [r7, #6]
 8015110:	4413      	add	r3, r2
 8015112:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 8015114:	e006      	b.n	8015124 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 8015116:	683b      	ldr	r3, [r7, #0]
 8015118:	1c5a      	adds	r2, r3, #1
 801511a:	603a      	str	r2, [r7, #0]
 801511c:	781a      	ldrb	r2, [r3, #0]
 801511e:	79fb      	ldrb	r3, [r7, #7]
 8015120:	4413      	add	r3, r2
 8015122:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 8015124:	79bb      	ldrb	r3, [r7, #6]
 8015126:	1e5a      	subs	r2, r3, #1
 8015128:	71ba      	strb	r2, [r7, #6]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d1f3      	bne.n	8015116 <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 801512e:	79fb      	ldrb	r3, [r7, #7]
 8015130:	43db      	mvns	r3, r3
 8015132:	b2db      	uxtb	r3, r3
}
 8015134:	4618      	mov	r0, r3
 8015136:	370c      	adds	r7, #12
 8015138:	46bd      	mov	sp, r7
 801513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513e:	4770      	bx	lr

08015140 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 8015140:	b480      	push	{r7}
 8015142:	b087      	sub	sp, #28
 8015144:	af00      	add	r7, sp, #0
 8015146:	4603      	mov	r3, r0
 8015148:	60b9      	str	r1, [r7, #8]
 801514a:	607a      	str	r2, [r7, #4]
 801514c:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 801514e:	2300      	movs	r3, #0
 8015150:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 8015152:	e026      	b.n	80151a2 <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	1c5a      	adds	r2, r3, #1
 8015158:	60ba      	str	r2, [r7, #8]
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	757b      	strb	r3, [r7, #21]
        switch (c) {
 801515e:	7d7b      	ldrb	r3, [r7, #21]
 8015160:	2b7e      	cmp	r3, #126	@ 0x7e
 8015162:	dc16      	bgt.n	8015192 <sensirion_shdlc_stuff_data+0x52>
 8015164:	2b7d      	cmp	r3, #125	@ 0x7d
 8015166:	da03      	bge.n	8015170 <sensirion_shdlc_stuff_data+0x30>
 8015168:	2b11      	cmp	r3, #17
 801516a:	d001      	beq.n	8015170 <sensirion_shdlc_stuff_data+0x30>
 801516c:	2b13      	cmp	r3, #19
 801516e:	d110      	bne.n	8015192 <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	1c5a      	adds	r2, r3, #1
 8015174:	607a      	str	r2, [r7, #4]
 8015176:	227d      	movs	r2, #125	@ 0x7d
 8015178:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	1c5a      	adds	r2, r3, #1
 801517e:	607a      	str	r2, [r7, #4]
 8015180:	7d7a      	ldrb	r2, [r7, #21]
 8015182:	f082 0220 	eor.w	r2, r2, #32
 8015186:	b2d2      	uxtb	r2, r2
 8015188:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 801518a:	8afb      	ldrh	r3, [r7, #22]
 801518c:	3302      	adds	r3, #2
 801518e:	82fb      	strh	r3, [r7, #22]
                break;
 8015190:	e007      	b.n	80151a2 <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	1c5a      	adds	r2, r3, #1
 8015196:	607a      	str	r2, [r7, #4]
 8015198:	7d7a      	ldrb	r2, [r7, #21]
 801519a:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 801519c:	8afb      	ldrh	r3, [r7, #22]
 801519e:	3301      	adds	r3, #1
 80151a0:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 80151a2:	7bfb      	ldrb	r3, [r7, #15]
 80151a4:	1e5a      	subs	r2, r3, #1
 80151a6:	73fa      	strb	r2, [r7, #15]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d1d3      	bne.n	8015154 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 80151ac:	8afb      	ldrh	r3, [r7, #22]
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	371c      	adds	r7, #28
 80151b2:	46bd      	mov	sp, r7
 80151b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b8:	4770      	bx	lr

080151ba <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 80151ba:	b480      	push	{r7}
 80151bc:	b083      	sub	sp, #12
 80151be:	af00      	add	r7, sp, #0
 80151c0:	4603      	mov	r3, r0
 80151c2:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 80151c4:	79fb      	ldrb	r3, [r7, #7]
 80151c6:	2b7d      	cmp	r3, #125	@ 0x7d
 80151c8:	bf0c      	ite	eq
 80151ca:	2301      	moveq	r3, #1
 80151cc:	2300      	movne	r3, #0
 80151ce:	b2db      	uxtb	r3, r3
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	370c      	adds	r7, #12
 80151d4:	46bd      	mov	sp, r7
 80151d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151da:	4770      	bx	lr

080151dc <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 80151dc:	b480      	push	{r7}
 80151de:	b083      	sub	sp, #12
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	4603      	mov	r3, r0
 80151e4:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 80151e6:	79fb      	ldrb	r3, [r7, #7]
 80151e8:	2b5e      	cmp	r3, #94	@ 0x5e
 80151ea:	d010      	beq.n	801520e <sensirion_shdlc_unstuff_byte+0x32>
 80151ec:	2b5e      	cmp	r3, #94	@ 0x5e
 80151ee:	dc10      	bgt.n	8015212 <sensirion_shdlc_unstuff_byte+0x36>
 80151f0:	2b5d      	cmp	r3, #93	@ 0x5d
 80151f2:	d00a      	beq.n	801520a <sensirion_shdlc_unstuff_byte+0x2e>
 80151f4:	2b5d      	cmp	r3, #93	@ 0x5d
 80151f6:	dc0c      	bgt.n	8015212 <sensirion_shdlc_unstuff_byte+0x36>
 80151f8:	2b31      	cmp	r3, #49	@ 0x31
 80151fa:	d002      	beq.n	8015202 <sensirion_shdlc_unstuff_byte+0x26>
 80151fc:	2b33      	cmp	r3, #51	@ 0x33
 80151fe:	d002      	beq.n	8015206 <sensirion_shdlc_unstuff_byte+0x2a>
 8015200:	e007      	b.n	8015212 <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 8015202:	2311      	movs	r3, #17
 8015204:	e006      	b.n	8015214 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 8015206:	2313      	movs	r3, #19
 8015208:	e004      	b.n	8015214 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 801520a:	237d      	movs	r3, #125	@ 0x7d
 801520c:	e002      	b.n	8015214 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 801520e:	237e      	movs	r3, #126	@ 0x7e
 8015210:	e000      	b.n	8015214 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 8015212:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8015214:	4618      	mov	r0, r3
 8015216:	370c      	adds	r7, #12
 8015218:	46bd      	mov	sp, r7
 801521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521e:	4770      	bx	lr

08015220 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 8015220:	b580      	push	{r7, lr}
 8015222:	b084      	sub	sp, #16
 8015224:	af00      	add	r7, sp, #0
 8015226:	603b      	str	r3, [r7, #0]
 8015228:	4603      	mov	r3, r0
 801522a:	71fb      	strb	r3, [r7, #7]
 801522c:	460b      	mov	r3, r1
 801522e:	71bb      	strb	r3, [r7, #6]
 8015230:	4613      	mov	r3, r2
 8015232:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 8015234:	797a      	ldrb	r2, [r7, #5]
 8015236:	79b9      	ldrb	r1, [r7, #6]
 8015238:	79f8      	ldrb	r0, [r7, #7]
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	f000 f818 	bl	8015270 <sensirion_shdlc_tx>
 8015240:	4603      	mov	r3, r0
 8015242:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 8015244:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d002      	beq.n	8015252 <sensirion_shdlc_xcv+0x32>
        return ret;
 801524c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015250:	e00a      	b.n	8015268 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 8015252:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8015256:	f000 fb07 	bl	8015868 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 801525a:	7e3b      	ldrb	r3, [r7, #24]
 801525c:	6a3a      	ldr	r2, [r7, #32]
 801525e:	69f9      	ldr	r1, [r7, #28]
 8015260:	4618      	mov	r0, r3
 8015262:	f000 f8d7 	bl	8015414 <sensirion_shdlc_rx>
 8015266:	4603      	mov	r3, r0
}
 8015268:	4618      	mov	r0, r3
 801526a:	3710      	adds	r7, #16
 801526c:	46bd      	mov	sp, r7
 801526e:	bd80      	pop	{r7, pc}

08015270 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 8015270:	b590      	push	{r4, r7, lr}
 8015272:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8015276:	af00      	add	r7, sp, #0
 8015278:	4604      	mov	r4, r0
 801527a:	4608      	mov	r0, r1
 801527c:	4611      	mov	r1, r2
 801527e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8015282:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8015286:	6013      	str	r3, [r2, #0]
 8015288:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801528c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8015290:	4622      	mov	r2, r4
 8015292:	701a      	strb	r2, [r3, #0]
 8015294:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015298:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 801529c:	4602      	mov	r2, r0
 801529e:	701a      	strb	r2, [r3, #0]
 80152a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152a4:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 80152a8:	460a      	mov	r2, r1
 80152aa:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 80152ac:	2300      	movs	r3, #0
 80152ae:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 80152b2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152b6:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80152ba:	781a      	ldrb	r2, [r3, #0]
 80152bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152c0:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80152c4:	781b      	ldrb	r3, [r3, #0]
 80152c6:	4413      	add	r3, r2
 80152c8:	b2d8      	uxtb	r0, r3
 80152ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152ce:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 80152d2:	7819      	ldrb	r1, [r3, #0]
 80152d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152d8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80152dc:	681a      	ldr	r2, [r3, #0]
 80152de:	f7ff ff0d 	bl	80150fc <sensirion_shdlc_crc>
 80152e2:	4603      	mov	r3, r0
 80152e4:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    tx_frame_buf[len++] = SHDLC_START;
 80152e8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152ec:	1c5a      	adds	r2, r3, #1
 80152ee:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 80152f2:	461a      	mov	r2, r3
 80152f4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152f8:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80152fc:	217e      	movs	r1, #126	@ 0x7e
 80152fe:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 8015300:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015304:	f107 0208 	add.w	r2, r7, #8
 8015308:	441a      	add	r2, r3
 801530a:	1dfb      	adds	r3, r7, #7
 801530c:	4619      	mov	r1, r3
 801530e:	2001      	movs	r0, #1
 8015310:	f7ff ff16 	bl	8015140 <sensirion_shdlc_stuff_data>
 8015314:	4603      	mov	r3, r0
 8015316:	461a      	mov	r2, r3
 8015318:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801531c:	4413      	add	r3, r2
 801531e:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 8015322:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015326:	f107 0208 	add.w	r2, r7, #8
 801532a:	441a      	add	r2, r3
 801532c:	1dbb      	adds	r3, r7, #6
 801532e:	4619      	mov	r1, r3
 8015330:	2001      	movs	r0, #1
 8015332:	f7ff ff05 	bl	8015140 <sensirion_shdlc_stuff_data>
 8015336:	4603      	mov	r3, r0
 8015338:	461a      	mov	r2, r3
 801533a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801533e:	4413      	add	r3, r2
 8015340:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 8015344:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015348:	f107 0208 	add.w	r2, r7, #8
 801534c:	441a      	add	r2, r3
 801534e:	1d7b      	adds	r3, r7, #5
 8015350:	4619      	mov	r1, r3
 8015352:	2001      	movs	r0, #1
 8015354:	f7ff fef4 	bl	8015140 <sensirion_shdlc_stuff_data>
 8015358:	4603      	mov	r3, r0
 801535a:	461a      	mov	r2, r3
 801535c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015360:	4413      	add	r3, r2
 8015362:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 8015366:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801536a:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 801536e:	7818      	ldrb	r0, [r3, #0]
 8015370:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015374:	f107 0208 	add.w	r2, r7, #8
 8015378:	441a      	add	r2, r3
 801537a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801537e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015382:	6819      	ldr	r1, [r3, #0]
 8015384:	f7ff fedc 	bl	8015140 <sensirion_shdlc_stuff_data>
 8015388:	4603      	mov	r3, r0
 801538a:	461a      	mov	r2, r3
 801538c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015390:	4413      	add	r3, r2
 8015392:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 8015396:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801539a:	f107 0208 	add.w	r2, r7, #8
 801539e:	441a      	add	r2, r3
 80153a0:	f207 2313 	addw	r3, r7, #531	@ 0x213
 80153a4:	4619      	mov	r1, r3
 80153a6:	2001      	movs	r0, #1
 80153a8:	f7ff feca 	bl	8015140 <sensirion_shdlc_stuff_data>
 80153ac:	4603      	mov	r3, r0
 80153ae:	461a      	mov	r2, r3
 80153b0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153b4:	4413      	add	r3, r2
 80153b6:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 80153ba:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153be:	1c5a      	adds	r2, r3, #1
 80153c0:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 80153c4:	461a      	mov	r2, r3
 80153c6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80153ca:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80153ce:	217e      	movs	r1, #126	@ 0x7e
 80153d0:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 80153d2:	f107 0208 	add.w	r2, r7, #8
 80153d6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153da:	4611      	mov	r1, r2
 80153dc:	4618      	mov	r0, r3
 80153de:	f000 f9db 	bl	8015798 <sensirion_uart_tx>
 80153e2:	4603      	mov	r3, r0
 80153e4:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (ret < 0)
 80153e8:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	da02      	bge.n	80153f6 <sensirion_shdlc_tx+0x186>
        return ret;
 80153f0:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 80153f4:	e009      	b.n	801540a <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 80153f6:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	@ 0x214
 80153fa:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153fe:	429a      	cmp	r2, r3
 8015400:	d002      	beq.n	8015408 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 8015402:	f06f 0305 	mvn.w	r3, #5
 8015406:	e000      	b.n	801540a <sensirion_shdlc_tx+0x19a>
    return 0;
 8015408:	2300      	movs	r3, #0
}
 801540a:	4618      	mov	r0, r3
 801540c:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8015410:	46bd      	mov	sp, r7
 8015412:	bd90      	pop	{r4, r7, pc}

08015414 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8015414:	b590      	push	{r4, r7, lr}
 8015416:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 801541a:	af00      	add	r7, sp, #0
 801541c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015420:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015424:	6019      	str	r1, [r3, #0]
 8015426:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801542a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801542e:	601a      	str	r2, [r3, #0]
 8015430:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015434:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8015438:	4602      	mov	r2, r0
 801543a:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 801543c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015440:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 801544a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801544e:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	3306      	adds	r3, #6
 8015456:	b29b      	uxth	r3, r3
 8015458:	005b      	lsls	r3, r3, #1
 801545a:	b29b      	uxth	r3, r3
 801545c:	f107 0210 	add.w	r2, r7, #16
 8015460:	4611      	mov	r1, r2
 8015462:	4618      	mov	r0, r3
 8015464:	f000 f9d2 	bl	801580c <sensirion_uart_rx>
 8015468:	4603      	mov	r3, r0
 801546a:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 801546e:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8015472:	2b00      	cmp	r3, #0
 8015474:	dd03      	ble.n	801547e <sensirion_shdlc_rx+0x6a>
 8015476:	4ba0      	ldr	r3, [pc, #640]	@ (80156f8 <sensirion_shdlc_rx+0x2e4>)
 8015478:	781b      	ldrb	r3, [r3, #0]
 801547a:	2b7e      	cmp	r3, #126	@ 0x7e
 801547c:	d002      	beq.n	8015484 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 801547e:	f06f 0301 	mvn.w	r3, #1
 8015482:	e133      	b.n	80156ec <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8015484:	2300      	movs	r3, #0
 8015486:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 801548a:	2301      	movs	r3, #1
 801548c:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8015490:	2300      	movs	r3, #0
 8015492:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 8015496:	e03a      	b.n	801550e <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 8015498:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 801549c:	2b00      	cmp	r3, #0
 801549e:	d015      	beq.n	80154cc <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 80154a0:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80154a4:	4a94      	ldr	r2, [pc, #592]	@ (80156f8 <sensirion_shdlc_rx+0x2e4>)
 80154a6:	5cd2      	ldrb	r2, [r2, r3]
 80154a8:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80154ac:	1c59      	adds	r1, r3, #1
 80154ae:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80154b2:	4619      	mov	r1, r3
 80154b4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80154b8:	185c      	adds	r4, r3, r1
 80154ba:	4610      	mov	r0, r2
 80154bc:	f7ff fe8e 	bl	80151dc <sensirion_shdlc_unstuff_byte>
 80154c0:	4603      	mov	r3, r0
 80154c2:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 80154c4:	2300      	movs	r3, #0
 80154c6:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80154ca:	e01b      	b.n	8015504 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 80154cc:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80154d0:	4a89      	ldr	r2, [pc, #548]	@ (80156f8 <sensirion_shdlc_rx+0x2e4>)
 80154d2:	5cd3      	ldrb	r3, [r2, r3]
 80154d4:	4618      	mov	r0, r3
 80154d6:	f7ff fe70 	bl	80151ba <sensirion_shdlc_check_unstuff>
 80154da:	4603      	mov	r3, r0
 80154dc:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 80154e0:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d10d      	bne.n	8015504 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 80154e8:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80154ec:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80154f0:	1c59      	adds	r1, r3, #1
 80154f2:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80154f6:	4619      	mov	r1, r3
 80154f8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80154fc:	440b      	add	r3, r1
 80154fe:	497e      	ldr	r1, [pc, #504]	@ (80156f8 <sensirion_shdlc_rx+0x2e4>)
 8015500:	5c8a      	ldrb	r2, [r1, r2]
 8015502:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8015504:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015508:	3301      	adds	r3, #1
 801550a:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 801550e:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015512:	2b03      	cmp	r3, #3
 8015514:	d806      	bhi.n	8015524 <sensirion_shdlc_rx+0x110>
 8015516:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 801551a:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 801551e:	3b02      	subs	r3, #2
 8015520:	429a      	cmp	r2, r3
 8015522:	dbb9      	blt.n	8015498 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8015524:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015528:	2b04      	cmp	r3, #4
 801552a:	d103      	bne.n	8015534 <sensirion_shdlc_rx+0x120>
 801552c:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015530:	2b00      	cmp	r3, #0
 8015532:	d002      	beq.n	801553a <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015534:	f06f 0304 	mvn.w	r3, #4
 8015538:	e0d8      	b.n	80156ec <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 801553a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801553e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	78db      	ldrb	r3, [r3, #3]
 8015546:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 801554a:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 801554e:	7812      	ldrb	r2, [r2, #0]
 8015550:	429a      	cmp	r2, r3
 8015552:	d202      	bcs.n	801555a <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 8015554:	f06f 0306 	mvn.w	r3, #6
 8015558:	e0c8      	b.n	80156ec <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 801555a:	2300      	movs	r3, #0
 801555c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8015560:	2300      	movs	r3, #0
 8015562:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 8015566:	e040      	b.n	80155ea <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 8015568:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 801556c:	2b00      	cmp	r3, #0
 801556e:	d018      	beq.n	80155a2 <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8015570:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015574:	4a60      	ldr	r2, [pc, #384]	@ (80156f8 <sensirion_shdlc_rx+0x2e4>)
 8015576:	5cd2      	ldrb	r2, [r2, r3]
 8015578:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801557c:	1c59      	adds	r1, r3, #1
 801557e:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8015582:	4619      	mov	r1, r3
 8015584:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015588:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	185c      	adds	r4, r3, r1
 8015590:	4610      	mov	r0, r2
 8015592:	f7ff fe23 	bl	80151dc <sensirion_shdlc_unstuff_byte>
 8015596:	4603      	mov	r3, r0
 8015598:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 801559a:	2300      	movs	r3, #0
 801559c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80155a0:	e01e      	b.n	80155e0 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 80155a2:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80155a6:	4a54      	ldr	r2, [pc, #336]	@ (80156f8 <sensirion_shdlc_rx+0x2e4>)
 80155a8:	5cd3      	ldrb	r3, [r2, r3]
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7ff fe05 	bl	80151ba <sensirion_shdlc_check_unstuff>
 80155b0:	4603      	mov	r3, r0
 80155b2:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 80155b6:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d110      	bne.n	80155e0 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 80155be:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80155c2:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80155c6:	1c59      	adds	r1, r3, #1
 80155c8:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80155cc:	4619      	mov	r1, r3
 80155ce:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155d2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	440b      	add	r3, r1
 80155da:	4947      	ldr	r1, [pc, #284]	@ (80156f8 <sensirion_shdlc_rx+0x2e4>)
 80155dc:	5c8a      	ldrb	r2, [r1, r2]
 80155de:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 80155e0:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80155e4:	3301      	adds	r3, #1
 80155e6:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 80155ea:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155ee:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	78db      	ldrb	r3, [r3, #3]
 80155f6:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 80155fa:	429a      	cmp	r2, r3
 80155fc:	d206      	bcs.n	801560c <sensirion_shdlc_rx+0x1f8>
 80155fe:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8015602:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8015606:	3b02      	subs	r3, #2
 8015608:	429a      	cmp	r2, r3
 801560a:	dbad      	blt.n	8015568 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 801560c:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015610:	2b00      	cmp	r3, #0
 8015612:	d002      	beq.n	801561a <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015614:	f06f 0304 	mvn.w	r3, #4
 8015618:	e068      	b.n	80156ec <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 801561a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801561e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	78db      	ldrb	r3, [r3, #3]
 8015626:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 801562a:	429a      	cmp	r2, r3
 801562c:	d202      	bcs.n	8015634 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 801562e:	f06f 0304 	mvn.w	r3, #4
 8015632:	e05b      	b.n	80156ec <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8015634:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015638:	1c5a      	adds	r2, r3, #1
 801563a:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 801563e:	461a      	mov	r2, r3
 8015640:	4b2d      	ldr	r3, [pc, #180]	@ (80156f8 <sensirion_shdlc_rx+0x2e4>)
 8015642:	5c9b      	ldrb	r3, [r3, r2]
 8015644:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 8015648:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 801564c:	4618      	mov	r0, r3
 801564e:	f7ff fdb4 	bl	80151ba <sensirion_shdlc_check_unstuff>
 8015652:	4603      	mov	r3, r0
 8015654:	2b00      	cmp	r3, #0
 8015656:	d00d      	beq.n	8015674 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 8015658:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 801565c:	1c5a      	adds	r2, r3, #1
 801565e:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 8015662:	461a      	mov	r2, r3
 8015664:	4b24      	ldr	r3, [pc, #144]	@ (80156f8 <sensirion_shdlc_rx+0x2e4>)
 8015666:	5c9b      	ldrb	r3, [r3, r2]
 8015668:	4618      	mov	r0, r3
 801566a:	f7ff fdb7 	bl	80151dc <sensirion_shdlc_unstuff_byte>
 801566e:	4603      	mov	r3, r0
 8015670:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 8015674:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015678:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	781a      	ldrb	r2, [r3, #0]
 8015680:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015684:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	785b      	ldrb	r3, [r3, #1]
 801568c:	4413      	add	r3, r2
 801568e:	b2da      	uxtb	r2, r3
 8015690:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015694:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	789b      	ldrb	r3, [r3, #2]
 801569c:	4413      	add	r3, r2
 801569e:	b2d8      	uxtb	r0, r3
 80156a0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156a4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	78d9      	ldrb	r1, [r3, #3]
 80156ac:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156b0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80156b4:	681a      	ldr	r2, [r3, #0]
 80156b6:	f7ff fd21 	bl	80150fc <sensirion_shdlc_crc>
 80156ba:	4603      	mov	r3, r0
 80156bc:	461a      	mov	r2, r3
 80156be:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 80156c2:	4293      	cmp	r3, r2
 80156c4:	d002      	beq.n	80156cc <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 80156c6:	f06f 0303 	mvn.w	r3, #3
 80156ca:	e00f      	b.n	80156ec <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 80156cc:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80156d0:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 80156d4:	429a      	cmp	r2, r3
 80156d6:	da05      	bge.n	80156e4 <sensirion_shdlc_rx+0x2d0>
 80156d8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80156dc:	4a06      	ldr	r2, [pc, #24]	@ (80156f8 <sensirion_shdlc_rx+0x2e4>)
 80156de:	5cd3      	ldrb	r3, [r2, r3]
 80156e0:	2b7e      	cmp	r3, #126	@ 0x7e
 80156e2:	d002      	beq.n	80156ea <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 80156e4:	f06f 0302 	mvn.w	r3, #2
 80156e8:	e000      	b.n	80156ec <sensirion_shdlc_rx+0x2d8>

    return 0;
 80156ea:	2300      	movs	r3, #0
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd90      	pop	{r4, r7, pc}
 80156f6:	bf00      	nop
 80156f8:	2000158c 	.word	0x2000158c

080156fc <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 80156fc:	b580      	push	{r7, lr}
 80156fe:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8015700:	4819      	ldr	r0, [pc, #100]	@ (8015768 <sensirion_uart_open+0x6c>)
 8015702:	f7f6 fd77 	bl	800c1f4 <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 8015706:	4b18      	ldr	r3, [pc, #96]	@ (8015768 <sensirion_uart_open+0x6c>)
 8015708:	4a18      	ldr	r2, [pc, #96]	@ (801576c <sensirion_uart_open+0x70>)
 801570a:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 801570c:	4b16      	ldr	r3, [pc, #88]	@ (8015768 <sensirion_uart_open+0x6c>)
 801570e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8015712:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8015714:	4b14      	ldr	r3, [pc, #80]	@ (8015768 <sensirion_uart_open+0x6c>)
 8015716:	2200      	movs	r2, #0
 8015718:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 801571a:	4b13      	ldr	r3, [pc, #76]	@ (8015768 <sensirion_uart_open+0x6c>)
 801571c:	2200      	movs	r2, #0
 801571e:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8015720:	4b11      	ldr	r3, [pc, #68]	@ (8015768 <sensirion_uart_open+0x6c>)
 8015722:	2200      	movs	r2, #0
 8015724:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8015726:	4b10      	ldr	r3, [pc, #64]	@ (8015768 <sensirion_uart_open+0x6c>)
 8015728:	220c      	movs	r2, #12
 801572a:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801572c:	4b0e      	ldr	r3, [pc, #56]	@ (8015768 <sensirion_uart_open+0x6c>)
 801572e:	2200      	movs	r2, #0
 8015730:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8015732:	4b0d      	ldr	r3, [pc, #52]	@ (8015768 <sensirion_uart_open+0x6c>)
 8015734:	2200      	movs	r2, #0
 8015736:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8015738:	480b      	ldr	r0, [pc, #44]	@ (8015768 <sensirion_uart_open+0x6c>)
 801573a:	f7f6 fd0b 	bl	800c154 <HAL_UART_Init>
 801573e:	4603      	mov	r3, r0
 8015740:	2b00      	cmp	r3, #0
 8015742:	d001      	beq.n	8015748 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 8015744:	f7ed ff9e 	bl	8003684 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 8015748:	f240 220a 	movw	r2, #522	@ 0x20a
 801574c:	4908      	ldr	r1, [pc, #32]	@ (8015770 <sensirion_uart_open+0x74>)
 801574e:	4806      	ldr	r0, [pc, #24]	@ (8015768 <sensirion_uart_open+0x6c>)
 8015750:	f7f6 fe32 	bl	800c3b8 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 8015754:	4b07      	ldr	r3, [pc, #28]	@ (8015774 <sensirion_uart_open+0x78>)
 8015756:	2200      	movs	r2, #0
 8015758:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 801575a:	4b07      	ldr	r3, [pc, #28]	@ (8015778 <sensirion_uart_open+0x7c>)
 801575c:	2200      	movs	r2, #0
 801575e:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 8015760:	2300      	movs	r3, #0
}
 8015762:	4618      	mov	r0, r3
 8015764:	bd80      	pop	{r7, pc}
 8015766:	bf00      	nop
 8015768:	20001abc 	.word	0x20001abc
 801576c:	40004400 	.word	0x40004400
 8015770:	2000158c 	.word	0x2000158c
 8015774:	20001b5e 	.word	0x20001b5e
 8015778:	20001b60 	.word	0x20001b60

0801577c <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 801577c:	b580      	push	{r7, lr}
 801577e:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 8015780:	4804      	ldr	r0, [pc, #16]	@ (8015794 <sensirion_uart_close+0x18>)
 8015782:	f7f6 fd37 	bl	800c1f4 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8015786:	4803      	ldr	r0, [pc, #12]	@ (8015794 <sensirion_uart_close+0x18>)
 8015788:	f7ee fa9e 	bl	8003cc8 <HAL_UART_MspDeInit>
    return 0;
 801578c:	2300      	movs	r3, #0
}
 801578e:	4618      	mov	r0, r3
 8015790:	bd80      	pop	{r7, pc}
 8015792:	bf00      	nop
 8015794:	20001abc 	.word	0x20001abc

08015798 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	4603      	mov	r3, r0
 80157a0:	6039      	str	r1, [r7, #0]
 80157a2:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 80157a4:	88fa      	ldrh	r2, [r7, #6]
 80157a6:	f04f 33ff 	mov.w	r3, #4294967295
 80157aa:	6839      	ldr	r1, [r7, #0]
 80157ac:	4807      	ldr	r0, [pc, #28]	@ (80157cc <sensirion_uart_tx+0x34>)
 80157ae:	f7f6 fd53 	bl	800c258 <HAL_UART_Transmit>
 80157b2:	4603      	mov	r3, r0
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d102      	bne.n	80157be <sensirion_uart_tx+0x26>
		{
			return data_len;
 80157b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80157bc:	e001      	b.n	80157c2 <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 80157be:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3708      	adds	r7, #8
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	20001abc 	.word	0x20001abc

080157d0 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b082      	sub	sp, #8
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	460b      	mov	r3, r1
 80157da:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 80157dc:	4a07      	ldr	r2, [pc, #28]	@ (80157fc <HAL_UARTEx_RxEventCallback+0x2c>)
 80157de:	887b      	ldrh	r3, [r7, #2]
 80157e0:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 80157e2:	4b07      	ldr	r3, [pc, #28]	@ (8015800 <HAL_UARTEx_RxEventCallback+0x30>)
 80157e4:	2201      	movs	r2, #1
 80157e6:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 80157e8:	f240 220a 	movw	r2, #522	@ 0x20a
 80157ec:	4905      	ldr	r1, [pc, #20]	@ (8015804 <HAL_UARTEx_RxEventCallback+0x34>)
 80157ee:	4806      	ldr	r0, [pc, #24]	@ (8015808 <HAL_UARTEx_RxEventCallback+0x38>)
 80157f0:	f7f6 fde2 	bl	800c3b8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80157f4:	bf00      	nop
 80157f6:	3708      	adds	r7, #8
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}
 80157fc:	20001b5e 	.word	0x20001b5e
 8015800:	20001b62 	.word	0x20001b62
 8015804:	2000158c 	.word	0x2000158c
 8015808:	20001abc 	.word	0x20001abc

0801580c <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 801580c:	b580      	push	{r7, lr}
 801580e:	b084      	sub	sp, #16
 8015810:	af00      	add	r7, sp, #0
 8015812:	4603      	mov	r3, r0
 8015814:	6039      	str	r1, [r7, #0]
 8015816:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8015818:	2300      	movs	r3, #0
 801581a:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 801581c:	e005      	b.n	801582a <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	3301      	adds	r3, #1
 8015822:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8015824:	200a      	movs	r0, #10
 8015826:	f7ee fc83 	bl	8004130 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 801582a:	4b0b      	ldr	r3, [pc, #44]	@ (8015858 <sensirion_uart_rx+0x4c>)
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d102      	bne.n	8015838 <sensirion_uart_rx+0x2c>
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	2b02      	cmp	r3, #2
 8015836:	d9f2      	bls.n	801581e <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8015838:	4b07      	ldr	r3, [pc, #28]	@ (8015858 <sensirion_uart_rx+0x4c>)
 801583a:	2200      	movs	r2, #0
 801583c:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 801583e:	4b07      	ldr	r3, [pc, #28]	@ (801585c <sensirion_uart_rx+0x50>)
 8015840:	2200      	movs	r2, #0
 8015842:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8015844:	4b06      	ldr	r3, [pc, #24]	@ (8015860 <sensirion_uart_rx+0x54>)
 8015846:	2200      	movs	r2, #0
 8015848:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 801584a:	4b06      	ldr	r3, [pc, #24]	@ (8015864 <sensirion_uart_rx+0x58>)
 801584c:	881b      	ldrh	r3, [r3, #0]
 801584e:	b21b      	sxth	r3, r3
	//return i;
}
 8015850:	4618      	mov	r0, r3
 8015852:	3710      	adds	r7, #16
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}
 8015858:	20001b62 	.word	0x20001b62
 801585c:	20001b64 	.word	0x20001b64
 8015860:	20001b60 	.word	0x20001b60
 8015864:	20001b5e 	.word	0x20001b5e

08015868 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8015868:	b580      	push	{r7, lr}
 801586a:	b082      	sub	sp, #8
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	4a06      	ldr	r2, [pc, #24]	@ (801588c <sensirion_sleep_usec+0x24>)
 8015874:	fba2 2303 	umull	r2, r3, r2, r3
 8015878:	099b      	lsrs	r3, r3, #6
 801587a:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f7ee fc57 	bl	8004130 <HAL_Delay>
}
 8015882:	bf00      	nop
 8015884:	3708      	adds	r7, #8
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
 801588a:	bf00      	nop
 801588c:	10624dd3 	.word	0x10624dd3

08015890 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 8015890:	b580      	push	{r7, lr}
 8015892:	b08a      	sub	sp, #40	@ 0x28
 8015894:	af04      	add	r7, sp, #16
 8015896:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 8015898:	2303      	movs	r3, #3
 801589a:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 801589c:	f107 020c 	add.w	r2, r7, #12
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	9302      	str	r3, [sp, #8]
 80158a4:	f107 0310 	add.w	r3, r7, #16
 80158a8:	9301      	str	r3, [sp, #4]
 80158aa:	2320      	movs	r3, #32
 80158ac:	9300      	str	r3, [sp, #0]
 80158ae:	4613      	mov	r3, r2
 80158b0:	2201      	movs	r2, #1
 80158b2:	21d0      	movs	r1, #208	@ 0xd0
 80158b4:	2000      	movs	r0, #0
 80158b6:	f7ff fcb3 	bl	8015220 <sensirion_shdlc_xcv>
 80158ba:	4603      	mov	r3, r0
 80158bc:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 80158be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	da02      	bge.n	80158cc <sps30_get_serial+0x3c>
        return ret;
 80158c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80158ca:	e009      	b.n	80158e0 <sps30_get_serial+0x50>

    if (header.state)
 80158cc:	7cbb      	ldrb	r3, [r7, #18]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d005      	beq.n	80158de <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 80158d2:	7cbb      	ldrb	r3, [r7, #18]
 80158d4:	b21b      	sxth	r3, r3
 80158d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80158da:	b21b      	sxth	r3, r3
 80158dc:	e000      	b.n	80158e0 <sps30_get_serial+0x50>

    return 0;
 80158de:	2300      	movs	r3, #0
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3718      	adds	r7, #24
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}

080158e8 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b086      	sub	sp, #24
 80158ec:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 80158ee:	f240 3301 	movw	r3, #769	@ 0x301
 80158f2:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 80158f4:	463a      	mov	r2, r7
 80158f6:	2300      	movs	r3, #0
 80158f8:	9302      	str	r3, [sp, #8]
 80158fa:	1d3b      	adds	r3, r7, #4
 80158fc:	9301      	str	r3, [sp, #4]
 80158fe:	2300      	movs	r3, #0
 8015900:	9300      	str	r3, [sp, #0]
 8015902:	4613      	mov	r3, r2
 8015904:	2202      	movs	r2, #2
 8015906:	2100      	movs	r1, #0
 8015908:	2000      	movs	r0, #0
 801590a:	f7ff fc89 	bl	8015220 <sensirion_shdlc_xcv>
 801590e:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8015910:	4618      	mov	r0, r3
 8015912:	3708      	adds	r7, #8
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}

08015918 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 8015918:	b580      	push	{r7, lr}
 801591a:	b086      	sub	sp, #24
 801591c:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 801591e:	2300      	movs	r3, #0
 8015920:	9302      	str	r3, [sp, #8]
 8015922:	1d3b      	adds	r3, r7, #4
 8015924:	9301      	str	r3, [sp, #4]
 8015926:	2300      	movs	r3, #0
 8015928:	9300      	str	r3, [sp, #0]
 801592a:	2300      	movs	r3, #0
 801592c:	2200      	movs	r2, #0
 801592e:	2101      	movs	r1, #1
 8015930:	2000      	movs	r0, #0
 8015932:	f7ff fc75 	bl	8015220 <sensirion_shdlc_xcv>
 8015936:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8015938:	4618      	mov	r0, r3
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}

08015940 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8015940:	b580      	push	{r7, lr}
 8015942:	b092      	sub	sp, #72	@ 0x48
 8015944:	af04      	add	r7, sp, #16
 8015946:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 8015948:	f107 0308 	add.w	r3, r7, #8
 801594c:	9302      	str	r3, [sp, #8]
 801594e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015952:	9301      	str	r3, [sp, #4]
 8015954:	2328      	movs	r3, #40	@ 0x28
 8015956:	9300      	str	r3, [sp, #0]
 8015958:	2300      	movs	r3, #0
 801595a:	2200      	movs	r2, #0
 801595c:	2103      	movs	r1, #3
 801595e:	2000      	movs	r0, #0
 8015960:	f7ff fc5e 	bl	8015220 <sensirion_shdlc_xcv>
 8015964:	4603      	mov	r3, r0
 8015966:	86fb      	strh	r3, [r7, #54]	@ 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 8015968:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 801596c:	2b00      	cmp	r3, #0
 801596e:	d002      	beq.n	8015976 <sps30_read_measurement+0x36>
        return error;
 8015970:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8015974:	e07f      	b.n	8015a76 <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 8015976:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801597a:	2b28      	cmp	r3, #40	@ 0x28
 801597c:	d002      	beq.n	8015984 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 801597e:	f04f 33ff 	mov.w	r3, #4294967295
 8015982:	e078      	b.n	8015a76 <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 8015984:	f107 0308 	add.w	r3, r7, #8
 8015988:	4618      	mov	r0, r3
 801598a:	f7ff fba6 	bl	80150da <sensirion_bytes_to_float>
 801598e:	eef0 7a40 	vmov.f32	s15, s0
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 8015998:	f107 0308 	add.w	r3, r7, #8
 801599c:	3304      	adds	r3, #4
 801599e:	4618      	mov	r0, r3
 80159a0:	f7ff fb9b 	bl	80150da <sensirion_bytes_to_float>
 80159a4:	eef0 7a40 	vmov.f32	s15, s0
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 80159ae:	f107 0308 	add.w	r3, r7, #8
 80159b2:	3308      	adds	r3, #8
 80159b4:	4618      	mov	r0, r3
 80159b6:	f7ff fb90 	bl	80150da <sensirion_bytes_to_float>
 80159ba:	eef0 7a40 	vmov.f32	s15, s0
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 80159c4:	f107 0308 	add.w	r3, r7, #8
 80159c8:	330c      	adds	r3, #12
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7ff fb85 	bl	80150da <sensirion_bytes_to_float>
 80159d0:	eef0 7a40 	vmov.f32	s15, s0
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 80159da:	f107 0308 	add.w	r3, r7, #8
 80159de:	3310      	adds	r3, #16
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7ff fb7a 	bl	80150da <sensirion_bytes_to_float>
 80159e6:	eef0 7a40 	vmov.f32	s15, s0
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 80159f0:	f107 0308 	add.w	r3, r7, #8
 80159f4:	3314      	adds	r3, #20
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7ff fb6f 	bl	80150da <sensirion_bytes_to_float>
 80159fc:	eef0 7a40 	vmov.f32	s15, s0
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 8015a06:	f107 0308 	add.w	r3, r7, #8
 8015a0a:	3318      	adds	r3, #24
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f7ff fb64 	bl	80150da <sensirion_bytes_to_float>
 8015a12:	eef0 7a40 	vmov.f32	s15, s0
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8015a1c:	f107 0308 	add.w	r3, r7, #8
 8015a20:	331c      	adds	r3, #28
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7ff fb59 	bl	80150da <sensirion_bytes_to_float>
 8015a28:	eef0 7a40 	vmov.f32	s15, s0
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 8015a32:	f107 0308 	add.w	r3, r7, #8
 8015a36:	3320      	adds	r3, #32
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7ff fb4e 	bl	80150da <sensirion_bytes_to_float>
 8015a3e:	eef0 7a40 	vmov.f32	s15, s0
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 8015a48:	f107 0308 	add.w	r3, r7, #8
 8015a4c:	3324      	adds	r3, #36	@ 0x24
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7ff fb43 	bl	80150da <sensirion_bytes_to_float>
 8015a54:	eef0 7a40 	vmov.f32	s15, s0
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    if (header.state) {
 8015a5e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d006      	beq.n	8015a74 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 8015a66:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015a6a:	b21b      	sxth	r3, r3
 8015a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015a70:	b21b      	sxth	r3, r3
 8015a72:	e000      	b.n	8015a76 <sps30_read_measurement+0x136>
    }

    return 0;
 8015a74:	2300      	movs	r3, #0
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3738      	adds	r7, #56	@ 0x38
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}

08015a7e <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 8015a7e:	b580      	push	{r7, lr}
 8015a80:	b086      	sub	sp, #24
 8015a82:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 8015a84:	2300      	movs	r3, #0
 8015a86:	9302      	str	r3, [sp, #8]
 8015a88:	1d3b      	adds	r3, r7, #4
 8015a8a:	9301      	str	r3, [sp, #4]
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	9300      	str	r3, [sp, #0]
 8015a90:	2300      	movs	r3, #0
 8015a92:	2200      	movs	r2, #0
 8015a94:	2156      	movs	r1, #86	@ 0x56
 8015a96:	2000      	movs	r0, #0
 8015a98:	f7ff fbc2 	bl	8015220 <sensirion_shdlc_xcv>
 8015a9c:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	3708      	adds	r7, #8
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}

08015aa6 <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8015aa6:	b580      	push	{r7, lr}
 8015aa8:	b08a      	sub	sp, #40	@ 0x28
 8015aaa:	af04      	add	r7, sp, #16
 8015aac:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8015aae:	f107 0308 	add.w	r3, r7, #8
 8015ab2:	9302      	str	r3, [sp, #8]
 8015ab4:	f107 0310 	add.w	r3, r7, #16
 8015ab8:	9301      	str	r3, [sp, #4]
 8015aba:	2307      	movs	r3, #7
 8015abc:	9300      	str	r3, [sp, #0]
 8015abe:	2300      	movs	r3, #0
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	21d1      	movs	r1, #209	@ 0xd1
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	f7ff fbab 	bl	8015220 <sensirion_shdlc_xcv>
 8015aca:	4603      	mov	r3, r0
 8015acc:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8015ace:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d002      	beq.n	8015adc <sps30_read_version+0x36>
        return error;
 8015ad6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015ada:	e01f      	b.n	8015b1c <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8015adc:	7cfb      	ldrb	r3, [r7, #19]
 8015ade:	2b07      	cmp	r3, #7
 8015ae0:	d002      	beq.n	8015ae8 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8015ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ae6:	e019      	b.n	8015b1c <sps30_read_version+0x76>
    }

    if (header.state) {
 8015ae8:	7cbb      	ldrb	r3, [r7, #18]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d005      	beq.n	8015afa <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8015aee:	7cbb      	ldrb	r3, [r7, #18]
 8015af0:	b21b      	sxth	r3, r3
 8015af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015af6:	b21b      	sxth	r3, r3
 8015af8:	e010      	b.n	8015b1c <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8015afa:	7a3a      	ldrb	r2, [r7, #8]
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8015b00:	7a7a      	ldrb	r2, [r7, #9]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8015b06:	7afa      	ldrb	r2, [r7, #11]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8015b0c:	7b7a      	ldrb	r2, [r7, #13]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8015b12:	7bba      	ldrb	r2, [r7, #14]
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	711a      	strb	r2, [r3, #4]

    return error;
 8015b18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3718      	adds	r7, #24
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}

08015b24 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b084      	sub	sp, #16
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	460b      	mov	r3, r1
 8015b2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8015b30:	f640 0074 	movw	r0, #2164	@ 0x874
 8015b34:	f007 fe7a 	bl	801d82c <USBD_static_malloc>
 8015b38:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d109      	bne.n	8015b54 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	32b0      	adds	r2, #176	@ 0xb0
 8015b4a:	2100      	movs	r1, #0
 8015b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015b50:	2302      	movs	r3, #2
 8015b52:	e06e      	b.n	8015c32 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	32b0      	adds	r2, #176	@ 0xb0
 8015b5e:	68f9      	ldr	r1, [r7, #12]
 8015b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	32b0      	adds	r2, #176	@ 0xb0
 8015b6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	7c1b      	ldrb	r3, [r3, #16]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d12b      	bne.n	8015bd8 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015b80:	4b2e      	ldr	r3, [pc, #184]	@ (8015c3c <USBD_MSC_Init+0x118>)
 8015b82:	7819      	ldrb	r1, [r3, #0]
 8015b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b88:	2202      	movs	r2, #2
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	f007 fd0b 	bl	801d5a6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015b90:	4b2a      	ldr	r3, [pc, #168]	@ (8015c3c <USBD_MSC_Init+0x118>)
 8015b92:	781b      	ldrb	r3, [r3, #0]
 8015b94:	f003 020f 	and.w	r2, r3, #15
 8015b98:	6879      	ldr	r1, [r7, #4]
 8015b9a:	4613      	mov	r3, r2
 8015b9c:	009b      	lsls	r3, r3, #2
 8015b9e:	4413      	add	r3, r2
 8015ba0:	009b      	lsls	r3, r3, #2
 8015ba2:	440b      	add	r3, r1
 8015ba4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015ba8:	2201      	movs	r2, #1
 8015baa:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015bac:	4b24      	ldr	r3, [pc, #144]	@ (8015c40 <USBD_MSC_Init+0x11c>)
 8015bae:	7819      	ldrb	r1, [r3, #0]
 8015bb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015bb4:	2202      	movs	r2, #2
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	f007 fcf5 	bl	801d5a6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015bbc:	4b20      	ldr	r3, [pc, #128]	@ (8015c40 <USBD_MSC_Init+0x11c>)
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	f003 020f 	and.w	r2, r3, #15
 8015bc4:	6879      	ldr	r1, [r7, #4]
 8015bc6:	4613      	mov	r3, r2
 8015bc8:	009b      	lsls	r3, r3, #2
 8015bca:	4413      	add	r3, r2
 8015bcc:	009b      	lsls	r3, r3, #2
 8015bce:	440b      	add	r3, r1
 8015bd0:	3324      	adds	r3, #36	@ 0x24
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	801a      	strh	r2, [r3, #0]
 8015bd6:	e028      	b.n	8015c2a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015bd8:	4b18      	ldr	r3, [pc, #96]	@ (8015c3c <USBD_MSC_Init+0x118>)
 8015bda:	7819      	ldrb	r1, [r3, #0]
 8015bdc:	2340      	movs	r3, #64	@ 0x40
 8015bde:	2202      	movs	r2, #2
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f007 fce0 	bl	801d5a6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015be6:	4b15      	ldr	r3, [pc, #84]	@ (8015c3c <USBD_MSC_Init+0x118>)
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	f003 020f 	and.w	r2, r3, #15
 8015bee:	6879      	ldr	r1, [r7, #4]
 8015bf0:	4613      	mov	r3, r2
 8015bf2:	009b      	lsls	r3, r3, #2
 8015bf4:	4413      	add	r3, r2
 8015bf6:	009b      	lsls	r3, r3, #2
 8015bf8:	440b      	add	r3, r1
 8015bfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015bfe:	2201      	movs	r2, #1
 8015c00:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015c02:	4b0f      	ldr	r3, [pc, #60]	@ (8015c40 <USBD_MSC_Init+0x11c>)
 8015c04:	7819      	ldrb	r1, [r3, #0]
 8015c06:	2340      	movs	r3, #64	@ 0x40
 8015c08:	2202      	movs	r2, #2
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f007 fccb 	bl	801d5a6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015c10:	4b0b      	ldr	r3, [pc, #44]	@ (8015c40 <USBD_MSC_Init+0x11c>)
 8015c12:	781b      	ldrb	r3, [r3, #0]
 8015c14:	f003 020f 	and.w	r2, r3, #15
 8015c18:	6879      	ldr	r1, [r7, #4]
 8015c1a:	4613      	mov	r3, r2
 8015c1c:	009b      	lsls	r3, r3, #2
 8015c1e:	4413      	add	r3, r2
 8015c20:	009b      	lsls	r3, r3, #2
 8015c22:	440b      	add	r3, r1
 8015c24:	3324      	adds	r3, #36	@ 0x24
 8015c26:	2201      	movs	r2, #1
 8015c28:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f000 fa2c 	bl	8016088 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8015c30:	2300      	movs	r3, #0
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3710      	adds	r7, #16
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}
 8015c3a:	bf00      	nop
 8015c3c:	200000af 	.word	0x200000af
 8015c40:	200000ae 	.word	0x200000ae

08015c44 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b082      	sub	sp, #8
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
 8015c4c:	460b      	mov	r3, r1
 8015c4e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8015c50:	4b26      	ldr	r3, [pc, #152]	@ (8015cec <USBD_MSC_DeInit+0xa8>)
 8015c52:	781b      	ldrb	r3, [r3, #0]
 8015c54:	4619      	mov	r1, r3
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f007 fccb 	bl	801d5f2 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8015c5c:	4b23      	ldr	r3, [pc, #140]	@ (8015cec <USBD_MSC_DeInit+0xa8>)
 8015c5e:	781b      	ldrb	r3, [r3, #0]
 8015c60:	f003 020f 	and.w	r2, r3, #15
 8015c64:	6879      	ldr	r1, [r7, #4]
 8015c66:	4613      	mov	r3, r2
 8015c68:	009b      	lsls	r3, r3, #2
 8015c6a:	4413      	add	r3, r2
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	440b      	add	r3, r1
 8015c70:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015c74:	2200      	movs	r2, #0
 8015c76:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8015c78:	4b1d      	ldr	r3, [pc, #116]	@ (8015cf0 <USBD_MSC_DeInit+0xac>)
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	4619      	mov	r1, r3
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f007 fcb7 	bl	801d5f2 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8015c84:	4b1a      	ldr	r3, [pc, #104]	@ (8015cf0 <USBD_MSC_DeInit+0xac>)
 8015c86:	781b      	ldrb	r3, [r3, #0]
 8015c88:	f003 020f 	and.w	r2, r3, #15
 8015c8c:	6879      	ldr	r1, [r7, #4]
 8015c8e:	4613      	mov	r3, r2
 8015c90:	009b      	lsls	r3, r3, #2
 8015c92:	4413      	add	r3, r2
 8015c94:	009b      	lsls	r3, r3, #2
 8015c96:	440b      	add	r3, r1
 8015c98:	3324      	adds	r3, #36	@ 0x24
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	32b0      	adds	r2, #176	@ 0xb0
 8015ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d018      	beq.n	8015ce2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f000 fa67 	bl	8016184 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	32b0      	adds	r2, #176	@ 0xb0
 8015cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f007 fdbf 	bl	801d848 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	32b0      	adds	r2, #176	@ 0xb0
 8015cd4:	2100      	movs	r1, #0
 8015cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	2200      	movs	r2, #0
 8015cde:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015ce2:	2300      	movs	r3, #0
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	3708      	adds	r7, #8
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}
 8015cec:	200000af 	.word	0x200000af
 8015cf0:	200000ae 	.word	0x200000ae

08015cf4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b086      	sub	sp, #24
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	32b0      	adds	r2, #176	@ 0xb0
 8015d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d0c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8015d12:	2300      	movs	r3, #0
 8015d14:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8015d16:	693b      	ldr	r3, [r7, #16]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d101      	bne.n	8015d20 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8015d1c:	2303      	movs	r3, #3
 8015d1e:	e0e1      	b.n	8015ee4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d053      	beq.n	8015dd4 <USBD_MSC_Setup+0xe0>
 8015d2c:	2b20      	cmp	r3, #32
 8015d2e:	f040 80d1 	bne.w	8015ed4 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	785b      	ldrb	r3, [r3, #1]
 8015d36:	2bfe      	cmp	r3, #254	@ 0xfe
 8015d38:	d002      	beq.n	8015d40 <USBD_MSC_Setup+0x4c>
 8015d3a:	2bff      	cmp	r3, #255	@ 0xff
 8015d3c:	d02a      	beq.n	8015d94 <USBD_MSC_Setup+0xa0>
 8015d3e:	e041      	b.n	8015dc4 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	885b      	ldrh	r3, [r3, #2]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d11e      	bne.n	8015d86 <USBD_MSC_Setup+0x92>
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	88db      	ldrh	r3, [r3, #6]
 8015d4c:	2b01      	cmp	r3, #1
 8015d4e:	d11a      	bne.n	8015d86 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8015d50:	683b      	ldr	r3, [r7, #0]
 8015d52:	781b      	ldrb	r3, [r3, #0]
 8015d54:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	da15      	bge.n	8015d86 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d60:	687a      	ldr	r2, [r7, #4]
 8015d62:	33b0      	adds	r3, #176	@ 0xb0
 8015d64:	009b      	lsls	r3, r3, #2
 8015d66:	4413      	add	r3, r2
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	699b      	ldr	r3, [r3, #24]
 8015d6c:	4798      	blx	r3
 8015d6e:	4603      	mov	r3, r0
 8015d70:	461a      	mov	r2, r3
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	2201      	movs	r2, #1
 8015d7a:	4619      	mov	r1, r3
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f003 f979 	bl	8019074 <USBD_CtlSendData>
 8015d82:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015d84:	e025      	b.n	8015dd2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015d86:	6839      	ldr	r1, [r7, #0]
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	f003 f902 	bl	8018f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8015d8e:	2303      	movs	r3, #3
 8015d90:	75fb      	strb	r3, [r7, #23]
          break;
 8015d92:	e01e      	b.n	8015dd2 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	885b      	ldrh	r3, [r3, #2]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d10c      	bne.n	8015db6 <USBD_MSC_Setup+0xc2>
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	88db      	ldrh	r3, [r3, #6]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d108      	bne.n	8015db6 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	db03      	blt.n	8015db6 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f000 f9b4 	bl	801611c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015db4:	e00d      	b.n	8015dd2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015db6:	6839      	ldr	r1, [r7, #0]
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f003 f8ea 	bl	8018f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8015dbe:	2303      	movs	r3, #3
 8015dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8015dc2:	e006      	b.n	8015dd2 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8015dc4:	6839      	ldr	r1, [r7, #0]
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	f003 f8e3 	bl	8018f92 <USBD_CtlError>
          ret = USBD_FAIL;
 8015dcc:	2303      	movs	r3, #3
 8015dce:	75fb      	strb	r3, [r7, #23]
          break;
 8015dd0:	bf00      	nop
      }
      break;
 8015dd2:	e086      	b.n	8015ee2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	785b      	ldrb	r3, [r3, #1]
 8015dd8:	2b0b      	cmp	r3, #11
 8015dda:	d872      	bhi.n	8015ec2 <USBD_MSC_Setup+0x1ce>
 8015ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8015de4 <USBD_MSC_Setup+0xf0>)
 8015dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015de2:	bf00      	nop
 8015de4:	08015e15 	.word	0x08015e15
 8015de8:	08015e91 	.word	0x08015e91
 8015dec:	08015ec3 	.word	0x08015ec3
 8015df0:	08015ec3 	.word	0x08015ec3
 8015df4:	08015ec3 	.word	0x08015ec3
 8015df8:	08015ec3 	.word	0x08015ec3
 8015dfc:	08015ec3 	.word	0x08015ec3
 8015e00:	08015ec3 	.word	0x08015ec3
 8015e04:	08015ec3 	.word	0x08015ec3
 8015e08:	08015ec3 	.word	0x08015ec3
 8015e0c:	08015e3f 	.word	0x08015e3f
 8015e10:	08015e69 	.word	0x08015e69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e1a:	b2db      	uxtb	r3, r3
 8015e1c:	2b03      	cmp	r3, #3
 8015e1e:	d107      	bne.n	8015e30 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015e20:	f107 030e 	add.w	r3, r7, #14
 8015e24:	2202      	movs	r2, #2
 8015e26:	4619      	mov	r1, r3
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f003 f923 	bl	8019074 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e2e:	e050      	b.n	8015ed2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e30:	6839      	ldr	r1, [r7, #0]
 8015e32:	6878      	ldr	r0, [r7, #4]
 8015e34:	f003 f8ad 	bl	8018f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e38:	2303      	movs	r3, #3
 8015e3a:	75fb      	strb	r3, [r7, #23]
          break;
 8015e3c:	e049      	b.n	8015ed2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	2b03      	cmp	r3, #3
 8015e48:	d107      	bne.n	8015e5a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	3304      	adds	r3, #4
 8015e4e:	2201      	movs	r2, #1
 8015e50:	4619      	mov	r1, r3
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f003 f90e 	bl	8019074 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e58:	e03b      	b.n	8015ed2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e5a:	6839      	ldr	r1, [r7, #0]
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f003 f898 	bl	8018f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e62:	2303      	movs	r3, #3
 8015e64:	75fb      	strb	r3, [r7, #23]
          break;
 8015e66:	e034      	b.n	8015ed2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e6e:	b2db      	uxtb	r3, r3
 8015e70:	2b03      	cmp	r3, #3
 8015e72:	d106      	bne.n	8015e82 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	885b      	ldrh	r3, [r3, #2]
 8015e78:	b2db      	uxtb	r3, r3
 8015e7a:	461a      	mov	r2, r3
 8015e7c:	693b      	ldr	r3, [r7, #16]
 8015e7e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e80:	e027      	b.n	8015ed2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e82:	6839      	ldr	r1, [r7, #0]
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f003 f884 	bl	8018f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e8a:	2303      	movs	r3, #3
 8015e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8015e8e:	e020      	b.n	8015ed2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e96:	b2db      	uxtb	r3, r3
 8015e98:	2b03      	cmp	r3, #3
 8015e9a:	d119      	bne.n	8015ed0 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	885b      	ldrh	r3, [r3, #2]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d115      	bne.n	8015ed0 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	889b      	ldrh	r3, [r3, #4]
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	4619      	mov	r1, r3
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f007 fbbf 	bl	801d630 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	889b      	ldrh	r3, [r3, #4]
 8015eb6:	b2db      	uxtb	r3, r3
 8015eb8:	4619      	mov	r1, r3
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f000 fb2e 	bl	801651c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8015ec0:	e006      	b.n	8015ed0 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8015ec2:	6839      	ldr	r1, [r7, #0]
 8015ec4:	6878      	ldr	r0, [r7, #4]
 8015ec6:	f003 f864 	bl	8018f92 <USBD_CtlError>
          ret = USBD_FAIL;
 8015eca:	2303      	movs	r3, #3
 8015ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8015ece:	e000      	b.n	8015ed2 <USBD_MSC_Setup+0x1de>
          break;
 8015ed0:	bf00      	nop
      }
      break;
 8015ed2:	e006      	b.n	8015ee2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8015ed4:	6839      	ldr	r1, [r7, #0]
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f003 f85b 	bl	8018f92 <USBD_CtlError>
      ret = USBD_FAIL;
 8015edc:	2303      	movs	r3, #3
 8015ede:	75fb      	strb	r3, [r7, #23]
      break;
 8015ee0:	bf00      	nop
  }

  return (uint8_t)ret;
 8015ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	3718      	adds	r7, #24
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd80      	pop	{r7, pc}

08015eec <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b082      	sub	sp, #8
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8015ef8:	78fb      	ldrb	r3, [r7, #3]
 8015efa:	4619      	mov	r1, r3
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f000 f959 	bl	80161b4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8015f02:	2300      	movs	r3, #0
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3708      	adds	r7, #8
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}

08015f0c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
 8015f14:	460b      	mov	r3, r1
 8015f16:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8015f18:	78fb      	ldrb	r3, [r7, #3]
 8015f1a:	4619      	mov	r1, r3
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f000 f983 	bl	8016228 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8015f22:	2300      	movs	r3, #0
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	3708      	adds	r7, #8
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015f34:	2181      	movs	r1, #129	@ 0x81
 8015f36:	4812      	ldr	r0, [pc, #72]	@ (8015f80 <USBD_MSC_GetHSCfgDesc+0x54>)
 8015f38:	f002 f9f5 	bl	8018326 <USBD_GetEpDesc>
 8015f3c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015f3e:	2101      	movs	r1, #1
 8015f40:	480f      	ldr	r0, [pc, #60]	@ (8015f80 <USBD_MSC_GetHSCfgDesc+0x54>)
 8015f42:	f002 f9f0 	bl	8018326 <USBD_GetEpDesc>
 8015f46:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d006      	beq.n	8015f5c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	2200      	movs	r2, #0
 8015f52:	711a      	strb	r2, [r3, #4]
 8015f54:	2200      	movs	r2, #0
 8015f56:	f042 0202 	orr.w	r2, r2, #2
 8015f5a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d006      	beq.n	8015f70 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	2200      	movs	r2, #0
 8015f66:	711a      	strb	r2, [r3, #4]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	f042 0202 	orr.w	r2, r2, #2
 8015f6e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2220      	movs	r2, #32
 8015f74:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015f76:	4b02      	ldr	r3, [pc, #8]	@ (8015f80 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8015f78:	4618      	mov	r0, r3
 8015f7a:	3710      	adds	r7, #16
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}
 8015f80:	20000084 	.word	0x20000084

08015f84 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b084      	sub	sp, #16
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015f8c:	2181      	movs	r1, #129	@ 0x81
 8015f8e:	4812      	ldr	r0, [pc, #72]	@ (8015fd8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8015f90:	f002 f9c9 	bl	8018326 <USBD_GetEpDesc>
 8015f94:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015f96:	2101      	movs	r1, #1
 8015f98:	480f      	ldr	r0, [pc, #60]	@ (8015fd8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8015f9a:	f002 f9c4 	bl	8018326 <USBD_GetEpDesc>
 8015f9e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d006      	beq.n	8015fb4 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	2200      	movs	r2, #0
 8015faa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015fae:	711a      	strb	r2, [r3, #4]
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d006      	beq.n	8015fc8 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015fba:	68bb      	ldr	r3, [r7, #8]
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015fc2:	711a      	strb	r2, [r3, #4]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2220      	movs	r2, #32
 8015fcc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015fce:	4b02      	ldr	r3, [pc, #8]	@ (8015fd8 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	3710      	adds	r7, #16
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}
 8015fd8:	20000084 	.word	0x20000084

08015fdc <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b084      	sub	sp, #16
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015fe4:	2181      	movs	r1, #129	@ 0x81
 8015fe6:	4812      	ldr	r0, [pc, #72]	@ (8016030 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8015fe8:	f002 f99d 	bl	8018326 <USBD_GetEpDesc>
 8015fec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015fee:	2101      	movs	r1, #1
 8015ff0:	480f      	ldr	r0, [pc, #60]	@ (8016030 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8015ff2:	f002 f998 	bl	8018326 <USBD_GetEpDesc>
 8015ff6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d006      	beq.n	801600c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	2200      	movs	r2, #0
 8016002:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016006:	711a      	strb	r2, [r3, #4]
 8016008:	2200      	movs	r2, #0
 801600a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801600c:	68bb      	ldr	r3, [r7, #8]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d006      	beq.n	8016020 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8016012:	68bb      	ldr	r3, [r7, #8]
 8016014:	2200      	movs	r2, #0
 8016016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801601a:	711a      	strb	r2, [r3, #4]
 801601c:	2200      	movs	r2, #0
 801601e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	2220      	movs	r2, #32
 8016024:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8016026:	4b02      	ldr	r3, [pc, #8]	@ (8016030 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8016028:	4618      	mov	r0, r3
 801602a:	3710      	adds	r7, #16
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}
 8016030:	20000084 	.word	0x20000084

08016034 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016034:	b480      	push	{r7}
 8016036:	b083      	sub	sp, #12
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	220a      	movs	r2, #10
 8016040:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8016042:	4b03      	ldr	r3, [pc, #12]	@ (8016050 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016044:	4618      	mov	r0, r3
 8016046:	370c      	adds	r7, #12
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr
 8016050:	200000a4 	.word	0x200000a4

08016054 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8016054:	b480      	push	{r7}
 8016056:	b083      	sub	sp, #12
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d101      	bne.n	8016068 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016064:	2303      	movs	r3, #3
 8016066:	e009      	b.n	801607c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801606e:	687a      	ldr	r2, [r7, #4]
 8016070:	33b0      	adds	r3, #176	@ 0xb0
 8016072:	009b      	lsls	r3, r3, #2
 8016074:	4413      	add	r3, r2
 8016076:	683a      	ldr	r2, [r7, #0]
 8016078:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801607a:	2300      	movs	r3, #0
}
 801607c:	4618      	mov	r0, r3
 801607e:	370c      	adds	r7, #12
 8016080:	46bd      	mov	sp, r7
 8016082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016086:	4770      	bx	lr

08016088 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b084      	sub	sp, #16
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	32b0      	adds	r2, #176	@ 0xb0
 801609a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801609e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d032      	beq.n	801610c <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	2200      	movs	r2, #0
 80160aa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	2200      	movs	r2, #0
 80160b0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	2200      	movs	r2, #0
 80160b6:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
  hmsc->scsi_sense_head = 0U;
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2200      	movs	r2, #0
 80160be:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	2200      	movs	r2, #0
 80160c6:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160d0:	687a      	ldr	r2, [r7, #4]
 80160d2:	33b0      	adds	r3, #176	@ 0xb0
 80160d4:	009b      	lsls	r3, r3, #2
 80160d6:	4413      	add	r3, r2
 80160d8:	685b      	ldr	r3, [r3, #4]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	2000      	movs	r0, #0
 80160de:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80160e0:	4b0c      	ldr	r3, [pc, #48]	@ (8016114 <MSC_BOT_Init+0x8c>)
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	4619      	mov	r1, r3
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f007 faa2 	bl	801d630 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80160ec:	4b0a      	ldr	r3, [pc, #40]	@ (8016118 <MSC_BOT_Init+0x90>)
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	4619      	mov	r1, r3
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f007 fa9c 	bl	801d630 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80160f8:	4b06      	ldr	r3, [pc, #24]	@ (8016114 <MSC_BOT_Init+0x8c>)
 80160fa:	7819      	ldrb	r1, [r3, #0]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8016102:	231f      	movs	r3, #31
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f007 fb5c 	bl	801d7c2 <USBD_LL_PrepareReceive>
 801610a:	e000      	b.n	801610e <MSC_BOT_Init+0x86>
    return;
 801610c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801610e:	3710      	adds	r7, #16
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}
 8016114:	200000af 	.word	0x200000af
 8016118:	200000ae 	.word	0x200000ae

0801611c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b084      	sub	sp, #16
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	32b0      	adds	r2, #176	@ 0xb0
 801612e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016132:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d01b      	beq.n	8016172 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	2200      	movs	r2, #0
 801613e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	2201      	movs	r2, #1
 8016144:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8016146:	4b0d      	ldr	r3, [pc, #52]	@ (801617c <MSC_BOT_Reset+0x60>)
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	4619      	mov	r1, r3
 801614c:	6878      	ldr	r0, [r7, #4]
 801614e:	f007 faad 	bl	801d6ac <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8016152:	4b0b      	ldr	r3, [pc, #44]	@ (8016180 <MSC_BOT_Reset+0x64>)
 8016154:	781b      	ldrb	r3, [r3, #0]
 8016156:	4619      	mov	r1, r3
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	f007 faa7 	bl	801d6ac <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801615e:	4b08      	ldr	r3, [pc, #32]	@ (8016180 <MSC_BOT_Reset+0x64>)
 8016160:	7819      	ldrb	r1, [r3, #0]
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8016168:	231f      	movs	r3, #31
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f007 fb29 	bl	801d7c2 <USBD_LL_PrepareReceive>
 8016170:	e000      	b.n	8016174 <MSC_BOT_Reset+0x58>
    return;
 8016172:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8016174:	3710      	adds	r7, #16
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}
 801617a:	bf00      	nop
 801617c:	200000ae 	.word	0x200000ae
 8016180:	200000af 	.word	0x200000af

08016184 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8016184:	b480      	push	{r7}
 8016186:	b085      	sub	sp, #20
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	32b0      	adds	r2, #176	@ 0xb0
 8016196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801619a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d002      	beq.n	80161a8 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	2200      	movs	r2, #0
 80161a6:	721a      	strb	r2, [r3, #8]
  }
}
 80161a8:	bf00      	nop
 80161aa:	3714      	adds	r7, #20
 80161ac:	46bd      	mov	sp, r7
 80161ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b2:	4770      	bx	lr

080161b4 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b084      	sub	sp, #16
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	460b      	mov	r3, r1
 80161be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	32b0      	adds	r2, #176	@ 0xb0
 80161ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161ce:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d020      	beq.n	8016218 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	7a1b      	ldrb	r3, [r3, #8]
 80161da:	2b02      	cmp	r3, #2
 80161dc:	d005      	beq.n	80161ea <MSC_BOT_DataIn+0x36>
 80161de:	2b02      	cmp	r3, #2
 80161e0:	db1c      	blt.n	801621c <MSC_BOT_DataIn+0x68>
 80161e2:	3b03      	subs	r3, #3
 80161e4:	2b01      	cmp	r3, #1
 80161e6:	d819      	bhi.n	801621c <MSC_BOT_DataIn+0x68>
 80161e8:	e011      	b.n	801620e <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 80161f6:	461a      	mov	r2, r3
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	f000 f9c9 	bl	8016590 <SCSI_ProcessCmd>
 80161fe:	4603      	mov	r3, r0
 8016200:	2b00      	cmp	r3, #0
 8016202:	da0d      	bge.n	8016220 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016204:	2101      	movs	r1, #1
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 f90c 	bl	8016424 <MSC_BOT_SendCSW>
      }
      break;
 801620c:	e008      	b.n	8016220 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801620e:	2100      	movs	r1, #0
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f000 f907 	bl	8016424 <MSC_BOT_SendCSW>
      break;
 8016216:	e004      	b.n	8016222 <MSC_BOT_DataIn+0x6e>
    return;
 8016218:	bf00      	nop
 801621a:	e002      	b.n	8016222 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 801621c:	bf00      	nop
 801621e:	e000      	b.n	8016222 <MSC_BOT_DataIn+0x6e>
      break;
 8016220:	bf00      	nop
  }
}
 8016222:	3710      	adds	r7, #16
 8016224:	46bd      	mov	sp, r7
 8016226:	bd80      	pop	{r7, pc}

08016228 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
 8016230:	460b      	mov	r3, r1
 8016232:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	32b0      	adds	r2, #176	@ 0xb0
 801623e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016242:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d01c      	beq.n	8016284 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	7a1b      	ldrb	r3, [r3, #8]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d002      	beq.n	8016258 <MSC_BOT_DataOut+0x30>
 8016252:	2b01      	cmp	r3, #1
 8016254:	d004      	beq.n	8016260 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8016256:	e018      	b.n	801628a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f000 f819 	bl	8016290 <MSC_BOT_CBW_Decode>
      break;
 801625e:	e014      	b.n	801628a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 801626c:	461a      	mov	r2, r3
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	f000 f98e 	bl	8016590 <SCSI_ProcessCmd>
 8016274:	4603      	mov	r3, r0
 8016276:	2b00      	cmp	r3, #0
 8016278:	da06      	bge.n	8016288 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801627a:	2101      	movs	r1, #1
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f000 f8d1 	bl	8016424 <MSC_BOT_SendCSW>
      break;
 8016282:	e001      	b.n	8016288 <MSC_BOT_DataOut+0x60>
    return;
 8016284:	bf00      	nop
 8016286:	e000      	b.n	801628a <MSC_BOT_DataOut+0x62>
      break;
 8016288:	bf00      	nop
  }
}
 801628a:	3710      	adds	r7, #16
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b084      	sub	sp, #16
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	32b0      	adds	r2, #176	@ 0xb0
 80162a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162a6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d079      	beq.n	80163a2 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80162c6:	4b3a      	ldr	r3, [pc, #232]	@ (80163b0 <MSC_BOT_CBW_Decode+0x120>)
 80162c8:	781b      	ldrb	r3, [r3, #0]
 80162ca:	4619      	mov	r1, r3
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f007 fa99 	bl	801d804 <USBD_LL_GetRxDataSize>
 80162d2:	4603      	mov	r3, r0
 80162d4:	2b1f      	cmp	r3, #31
 80162d6:	d114      	bne.n	8016302 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80162de:	4a35      	ldr	r2, [pc, #212]	@ (80163b4 <MSC_BOT_CBW_Decode+0x124>)
 80162e0:	4293      	cmp	r3, r2
 80162e2:	d10e      	bne.n	8016302 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	d809      	bhi.n	8016302 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d004      	beq.n	8016302 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80162fe:	2b10      	cmp	r3, #16
 8016300:	d90e      	bls.n	8016320 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016308:	2320      	movs	r3, #32
 801630a:	2205      	movs	r2, #5
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	f000 fe57 	bl	8016fc0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	2202      	movs	r2, #2
 8016316:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8016318:	6878      	ldr	r0, [r7, #4]
 801631a:	f000 f8bd 	bl	8016498 <MSC_BOT_Abort>
 801631e:	e043      	b.n	80163a8 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 801632c:	461a      	mov	r2, r3
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 f92e 	bl	8016590 <SCSI_ProcessCmd>
 8016334:	4603      	mov	r3, r0
 8016336:	2b00      	cmp	r3, #0
 8016338:	da0c      	bge.n	8016354 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	7a1b      	ldrb	r3, [r3, #8]
 801633e:	2b05      	cmp	r3, #5
 8016340:	d104      	bne.n	801634c <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016342:	2101      	movs	r1, #1
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f000 f86d 	bl	8016424 <MSC_BOT_SendCSW>
 801634a:	e02d      	b.n	80163a8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f000 f8a3 	bl	8016498 <MSC_BOT_Abort>
 8016352:	e029      	b.n	80163a8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	7a1b      	ldrb	r3, [r3, #8]
 8016358:	2b02      	cmp	r3, #2
 801635a:	d024      	beq.n	80163a6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8016360:	2b01      	cmp	r3, #1
 8016362:	d020      	beq.n	80163a6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8016368:	2b03      	cmp	r3, #3
 801636a:	d01c      	beq.n	80163a6 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	68db      	ldr	r3, [r3, #12]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d009      	beq.n	8016388 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	f103 0110 	add.w	r1, r3, #16
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	68db      	ldr	r3, [r3, #12]
 801637e:	461a      	mov	r2, r3
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f000 f819 	bl	80163b8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8016386:	e00f      	b.n	80163a8 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	68db      	ldr	r3, [r3, #12]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d104      	bne.n	801639a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8016390:	2100      	movs	r1, #0
 8016392:	6878      	ldr	r0, [r7, #4]
 8016394:	f000 f846 	bl	8016424 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8016398:	e006      	b.n	80163a8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	f000 f87c 	bl	8016498 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80163a0:	e002      	b.n	80163a8 <MSC_BOT_CBW_Decode+0x118>
    return;
 80163a2:	bf00      	nop
 80163a4:	e000      	b.n	80163a8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80163a6:	bf00      	nop
    }
  }
}
 80163a8:	3710      	adds	r7, #16
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
 80163ae:	bf00      	nop
 80163b0:	200000af 	.word	0x200000af
 80163b4:	43425355 	.word	0x43425355

080163b8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b086      	sub	sp, #24
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	32b0      	adds	r2, #176	@ 0xb0
 80163ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163d2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80163d4:	697b      	ldr	r3, [r7, #20]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d01e      	beq.n	8016418 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	4293      	cmp	r3, r2
 80163e4:	bf28      	it	cs
 80163e6:	4613      	movcs	r3, r2
 80163e8:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80163ea:	697b      	ldr	r3, [r7, #20]
 80163ec:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	1ad2      	subs	r2, r2, r3
 80163f4:	697b      	ldr	r3, [r7, #20]
 80163f6:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80163fa:	697b      	ldr	r3, [r7, #20]
 80163fc:	2200      	movs	r2, #0
 80163fe:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8016402:	697b      	ldr	r3, [r7, #20]
 8016404:	2204      	movs	r2, #4
 8016406:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8016408:	4b05      	ldr	r3, [pc, #20]	@ (8016420 <MSC_BOT_SendData+0x68>)
 801640a:	7819      	ldrb	r1, [r3, #0]
 801640c:	693b      	ldr	r3, [r7, #16]
 801640e:	68ba      	ldr	r2, [r7, #8]
 8016410:	68f8      	ldr	r0, [r7, #12]
 8016412:	f007 f9b5 	bl	801d780 <USBD_LL_Transmit>
 8016416:	e000      	b.n	801641a <MSC_BOT_SendData+0x62>
    return;
 8016418:	bf00      	nop
}
 801641a:	3718      	adds	r7, #24
 801641c:	46bd      	mov	sp, r7
 801641e:	bd80      	pop	{r7, pc}
 8016420:	200000ae 	.word	0x200000ae

08016424 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b084      	sub	sp, #16
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
 801642c:	460b      	mov	r3, r1
 801642e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	32b0      	adds	r2, #176	@ 0xb0
 801643a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801643e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d01d      	beq.n	8016482 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	4a10      	ldr	r2, [pc, #64]	@ (801648c <MSC_BOT_SendCSW+0x68>)
 801644a:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  hmsc->csw.bStatus = CSW_Status;
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	78fa      	ldrb	r2, [r7, #3]
 8016452:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	2200      	movs	r2, #0
 801645a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 801645c:	4b0c      	ldr	r3, [pc, #48]	@ (8016490 <MSC_BOT_SendCSW+0x6c>)
 801645e:	7819      	ldrb	r1, [r3, #0]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	f503 6203 	add.w	r2, r3, #2096	@ 0x830
 8016466:	230d      	movs	r3, #13
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f007 f989 	bl	801d780 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801646e:	4b09      	ldr	r3, [pc, #36]	@ (8016494 <MSC_BOT_SendCSW+0x70>)
 8016470:	7819      	ldrb	r1, [r3, #0]
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8016478:	231f      	movs	r3, #31
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f007 f9a1 	bl	801d7c2 <USBD_LL_PrepareReceive>
 8016480:	e000      	b.n	8016484 <MSC_BOT_SendCSW+0x60>
    return;
 8016482:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8016484:	3710      	adds	r7, #16
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
 801648a:	bf00      	nop
 801648c:	53425355 	.word	0x53425355
 8016490:	200000ae 	.word	0x200000ae
 8016494:	200000af 	.word	0x200000af

08016498 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b084      	sub	sp, #16
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	32b0      	adds	r2, #176	@ 0xb0
 80164aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d02a      	beq.n	801650c <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d10e      	bne.n	80164de <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d009      	beq.n	80164de <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d105      	bne.n	80164de <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80164d2:	4b10      	ldr	r3, [pc, #64]	@ (8016514 <MSC_BOT_Abort+0x7c>)
 80164d4:	781b      	ldrb	r3, [r3, #0]
 80164d6:	4619      	mov	r1, r3
 80164d8:	6878      	ldr	r0, [r7, #4]
 80164da:	f007 f8c8 	bl	801d66e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80164de:	4b0e      	ldr	r3, [pc, #56]	@ (8016518 <MSC_BOT_Abort+0x80>)
 80164e0:	781b      	ldrb	r3, [r3, #0]
 80164e2:	4619      	mov	r1, r3
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f007 f8c2 	bl	801d66e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	7a5b      	ldrb	r3, [r3, #9]
 80164ee:	2b02      	cmp	r3, #2
 80164f0:	d10d      	bne.n	801650e <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80164f2:	4b09      	ldr	r3, [pc, #36]	@ (8016518 <MSC_BOT_Abort+0x80>)
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	4619      	mov	r1, r3
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f007 f8b8 	bl	801d66e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80164fe:	4b05      	ldr	r3, [pc, #20]	@ (8016514 <MSC_BOT_Abort+0x7c>)
 8016500:	781b      	ldrb	r3, [r3, #0]
 8016502:	4619      	mov	r1, r3
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	f007 f8b2 	bl	801d66e <USBD_LL_StallEP>
 801650a:	e000      	b.n	801650e <MSC_BOT_Abort+0x76>
    return;
 801650c:	bf00      	nop
  }
}
 801650e:	3710      	adds	r7, #16
 8016510:	46bd      	mov	sp, r7
 8016512:	bd80      	pop	{r7, pc}
 8016514:	200000af 	.word	0x200000af
 8016518:	200000ae 	.word	0x200000ae

0801651c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b084      	sub	sp, #16
 8016520:	af00      	add	r7, sp, #0
 8016522:	6078      	str	r0, [r7, #4]
 8016524:	460b      	mov	r3, r1
 8016526:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	32b0      	adds	r2, #176	@ 0xb0
 8016532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016536:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d01d      	beq.n	801657a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	7a5b      	ldrb	r3, [r3, #9]
 8016542:	2b02      	cmp	r3, #2
 8016544:	d10c      	bne.n	8016560 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8016546:	4b10      	ldr	r3, [pc, #64]	@ (8016588 <MSC_BOT_CplClrFeature+0x6c>)
 8016548:	781b      	ldrb	r3, [r3, #0]
 801654a:	4619      	mov	r1, r3
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	f007 f88e 	bl	801d66e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8016552:	4b0e      	ldr	r3, [pc, #56]	@ (801658c <MSC_BOT_CplClrFeature+0x70>)
 8016554:	781b      	ldrb	r3, [r3, #0]
 8016556:	4619      	mov	r1, r3
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	f007 f888 	bl	801d66e <USBD_LL_StallEP>
 801655e:	e00f      	b.n	8016580 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8016560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016564:	2b00      	cmp	r3, #0
 8016566:	da0a      	bge.n	801657e <MSC_BOT_CplClrFeature+0x62>
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	7a5b      	ldrb	r3, [r3, #9]
 801656c:	2b01      	cmp	r3, #1
 801656e:	d006      	beq.n	801657e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016570:	2101      	movs	r1, #1
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f7ff ff56 	bl	8016424 <MSC_BOT_SendCSW>
 8016578:	e002      	b.n	8016580 <MSC_BOT_CplClrFeature+0x64>
    return;
 801657a:	bf00      	nop
 801657c:	e000      	b.n	8016580 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 801657e:	bf00      	nop
  }
}
 8016580:	3710      	adds	r7, #16
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}
 8016586:	bf00      	nop
 8016588:	200000ae 	.word	0x200000ae
 801658c:	200000af 	.word	0x200000af

08016590 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b086      	sub	sp, #24
 8016594:	af00      	add	r7, sp, #0
 8016596:	60f8      	str	r0, [r7, #12]
 8016598:	460b      	mov	r3, r1
 801659a:	607a      	str	r2, [r7, #4]
 801659c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	32b0      	adds	r2, #176	@ 0xb0
 80165a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165ac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80165ae:	693b      	ldr	r3, [r7, #16]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d102      	bne.n	80165ba <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80165b4:	f04f 33ff 	mov.w	r3, #4294967295
 80165b8:	e168      	b.n	801688c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	781b      	ldrb	r3, [r3, #0]
 80165be:	2baa      	cmp	r3, #170	@ 0xaa
 80165c0:	f000 8144 	beq.w	801684c <SCSI_ProcessCmd+0x2bc>
 80165c4:	2baa      	cmp	r3, #170	@ 0xaa
 80165c6:	f300 8153 	bgt.w	8016870 <SCSI_ProcessCmd+0x2e0>
 80165ca:	2ba8      	cmp	r3, #168	@ 0xa8
 80165cc:	f000 812c 	beq.w	8016828 <SCSI_ProcessCmd+0x298>
 80165d0:	2ba8      	cmp	r3, #168	@ 0xa8
 80165d2:	f300 814d 	bgt.w	8016870 <SCSI_ProcessCmd+0x2e0>
 80165d6:	2b5a      	cmp	r3, #90	@ 0x5a
 80165d8:	f300 80c0 	bgt.w	801675c <SCSI_ProcessCmd+0x1cc>
 80165dc:	2b00      	cmp	r3, #0
 80165de:	f2c0 8147 	blt.w	8016870 <SCSI_ProcessCmd+0x2e0>
 80165e2:	2b5a      	cmp	r3, #90	@ 0x5a
 80165e4:	f200 8144 	bhi.w	8016870 <SCSI_ProcessCmd+0x2e0>
 80165e8:	a201      	add	r2, pc, #4	@ (adr r2, 80165f0 <SCSI_ProcessCmd+0x60>)
 80165ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165ee:	bf00      	nop
 80165f0:	08016763 	.word	0x08016763
 80165f4:	08016871 	.word	0x08016871
 80165f8:	08016871 	.word	0x08016871
 80165fc:	08016775 	.word	0x08016775
 8016600:	08016871 	.word	0x08016871
 8016604:	08016871 	.word	0x08016871
 8016608:	08016871 	.word	0x08016871
 801660c:	08016871 	.word	0x08016871
 8016610:	08016871 	.word	0x08016871
 8016614:	08016871 	.word	0x08016871
 8016618:	08016871 	.word	0x08016871
 801661c:	08016871 	.word	0x08016871
 8016620:	08016871 	.word	0x08016871
 8016624:	08016871 	.word	0x08016871
 8016628:	08016871 	.word	0x08016871
 801662c:	08016871 	.word	0x08016871
 8016630:	08016871 	.word	0x08016871
 8016634:	08016871 	.word	0x08016871
 8016638:	08016787 	.word	0x08016787
 801663c:	08016871 	.word	0x08016871
 8016640:	08016871 	.word	0x08016871
 8016644:	08016871 	.word	0x08016871
 8016648:	08016871 	.word	0x08016871
 801664c:	08016871 	.word	0x08016871
 8016650:	08016871 	.word	0x08016871
 8016654:	08016871 	.word	0x08016871
 8016658:	080167bd 	.word	0x080167bd
 801665c:	08016799 	.word	0x08016799
 8016660:	08016871 	.word	0x08016871
 8016664:	08016871 	.word	0x08016871
 8016668:	080167ab 	.word	0x080167ab
 801666c:	08016871 	.word	0x08016871
 8016670:	08016871 	.word	0x08016871
 8016674:	08016871 	.word	0x08016871
 8016678:	08016871 	.word	0x08016871
 801667c:	080167e1 	.word	0x080167e1
 8016680:	08016871 	.word	0x08016871
 8016684:	080167f3 	.word	0x080167f3
 8016688:	08016871 	.word	0x08016871
 801668c:	08016871 	.word	0x08016871
 8016690:	08016817 	.word	0x08016817
 8016694:	08016871 	.word	0x08016871
 8016698:	0801683b 	.word	0x0801683b
 801669c:	08016871 	.word	0x08016871
 80166a0:	08016871 	.word	0x08016871
 80166a4:	08016871 	.word	0x08016871
 80166a8:	08016871 	.word	0x08016871
 80166ac:	0801685f 	.word	0x0801685f
 80166b0:	08016871 	.word	0x08016871
 80166b4:	08016871 	.word	0x08016871
 80166b8:	08016871 	.word	0x08016871
 80166bc:	08016871 	.word	0x08016871
 80166c0:	08016871 	.word	0x08016871
 80166c4:	08016871 	.word	0x08016871
 80166c8:	08016871 	.word	0x08016871
 80166cc:	08016871 	.word	0x08016871
 80166d0:	08016871 	.word	0x08016871
 80166d4:	08016871 	.word	0x08016871
 80166d8:	08016871 	.word	0x08016871
 80166dc:	08016871 	.word	0x08016871
 80166e0:	08016871 	.word	0x08016871
 80166e4:	08016871 	.word	0x08016871
 80166e8:	08016871 	.word	0x08016871
 80166ec:	08016871 	.word	0x08016871
 80166f0:	08016871 	.word	0x08016871
 80166f4:	08016871 	.word	0x08016871
 80166f8:	08016871 	.word	0x08016871
 80166fc:	08016871 	.word	0x08016871
 8016700:	08016871 	.word	0x08016871
 8016704:	08016871 	.word	0x08016871
 8016708:	08016871 	.word	0x08016871
 801670c:	08016871 	.word	0x08016871
 8016710:	08016871 	.word	0x08016871
 8016714:	08016871 	.word	0x08016871
 8016718:	08016871 	.word	0x08016871
 801671c:	08016871 	.word	0x08016871
 8016720:	08016871 	.word	0x08016871
 8016724:	08016871 	.word	0x08016871
 8016728:	08016871 	.word	0x08016871
 801672c:	08016871 	.word	0x08016871
 8016730:	08016871 	.word	0x08016871
 8016734:	08016871 	.word	0x08016871
 8016738:	08016871 	.word	0x08016871
 801673c:	08016871 	.word	0x08016871
 8016740:	08016871 	.word	0x08016871
 8016744:	08016871 	.word	0x08016871
 8016748:	08016871 	.word	0x08016871
 801674c:	08016871 	.word	0x08016871
 8016750:	08016871 	.word	0x08016871
 8016754:	08016871 	.word	0x08016871
 8016758:	080167cf 	.word	0x080167cf
 801675c:	2b9e      	cmp	r3, #158	@ 0x9e
 801675e:	d051      	beq.n	8016804 <SCSI_ProcessCmd+0x274>
 8016760:	e086      	b.n	8016870 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8016762:	7afb      	ldrb	r3, [r7, #11]
 8016764:	687a      	ldr	r2, [r7, #4]
 8016766:	4619      	mov	r1, r3
 8016768:	68f8      	ldr	r0, [r7, #12]
 801676a:	f000 f893 	bl	8016894 <SCSI_TestUnitReady>
 801676e:	4603      	mov	r3, r0
 8016770:	75fb      	strb	r3, [r7, #23]
      break;
 8016772:	e089      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8016774:	7afb      	ldrb	r3, [r7, #11]
 8016776:	687a      	ldr	r2, [r7, #4]
 8016778:	4619      	mov	r1, r3
 801677a:	68f8      	ldr	r0, [r7, #12]
 801677c:	f000 fb9a 	bl	8016eb4 <SCSI_RequestSense>
 8016780:	4603      	mov	r3, r0
 8016782:	75fb      	strb	r3, [r7, #23]
      break;
 8016784:	e080      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8016786:	7afb      	ldrb	r3, [r7, #11]
 8016788:	687a      	ldr	r2, [r7, #4]
 801678a:	4619      	mov	r1, r3
 801678c:	68f8      	ldr	r0, [r7, #12]
 801678e:	f000 f8db 	bl	8016948 <SCSI_Inquiry>
 8016792:	4603      	mov	r3, r0
 8016794:	75fb      	strb	r3, [r7, #23]
      break;
 8016796:	e077      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8016798:	7afb      	ldrb	r3, [r7, #11]
 801679a:	687a      	ldr	r2, [r7, #4]
 801679c:	4619      	mov	r1, r3
 801679e:	68f8      	ldr	r0, [r7, #12]
 80167a0:	f000 fc5c 	bl	801705c <SCSI_StartStopUnit>
 80167a4:	4603      	mov	r3, r0
 80167a6:	75fb      	strb	r3, [r7, #23]
      break;
 80167a8:	e06e      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80167aa:	7afb      	ldrb	r3, [r7, #11]
 80167ac:	687a      	ldr	r2, [r7, #4]
 80167ae:	4619      	mov	r1, r3
 80167b0:	68f8      	ldr	r0, [r7, #12]
 80167b2:	f000 fca8 	bl	8017106 <SCSI_AllowPreventRemovable>
 80167b6:	4603      	mov	r3, r0
 80167b8:	75fb      	strb	r3, [r7, #23]
      break;
 80167ba:	e065      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80167bc:	7afb      	ldrb	r3, [r7, #11]
 80167be:	687a      	ldr	r2, [r7, #4]
 80167c0:	4619      	mov	r1, r3
 80167c2:	68f8      	ldr	r0, [r7, #12]
 80167c4:	f000 faea 	bl	8016d9c <SCSI_ModeSense6>
 80167c8:	4603      	mov	r3, r0
 80167ca:	75fb      	strb	r3, [r7, #23]
      break;
 80167cc:	e05c      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80167ce:	7afb      	ldrb	r3, [r7, #11]
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	4619      	mov	r1, r3
 80167d4:	68f8      	ldr	r0, [r7, #12]
 80167d6:	f000 fb27 	bl	8016e28 <SCSI_ModeSense10>
 80167da:	4603      	mov	r3, r0
 80167dc:	75fb      	strb	r3, [r7, #23]
      break;
 80167de:	e053      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80167e0:	7afb      	ldrb	r3, [r7, #11]
 80167e2:	687a      	ldr	r2, [r7, #4]
 80167e4:	4619      	mov	r1, r3
 80167e6:	68f8      	ldr	r0, [r7, #12]
 80167e8:	f000 fa5c 	bl	8016ca4 <SCSI_ReadFormatCapacity>
 80167ec:	4603      	mov	r3, r0
 80167ee:	75fb      	strb	r3, [r7, #23]
      break;
 80167f0:	e04a      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80167f2:	7afb      	ldrb	r3, [r7, #11]
 80167f4:	687a      	ldr	r2, [r7, #4]
 80167f6:	4619      	mov	r1, r3
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	f000 f921 	bl	8016a40 <SCSI_ReadCapacity10>
 80167fe:	4603      	mov	r3, r0
 8016800:	75fb      	strb	r3, [r7, #23]
      break;
 8016802:	e041      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8016804:	7afb      	ldrb	r3, [r7, #11]
 8016806:	687a      	ldr	r2, [r7, #4]
 8016808:	4619      	mov	r1, r3
 801680a:	68f8      	ldr	r0, [r7, #12]
 801680c:	f000 f996 	bl	8016b3c <SCSI_ReadCapacity16>
 8016810:	4603      	mov	r3, r0
 8016812:	75fb      	strb	r3, [r7, #23]
      break;
 8016814:	e038      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8016816:	7afb      	ldrb	r3, [r7, #11]
 8016818:	687a      	ldr	r2, [r7, #4]
 801681a:	4619      	mov	r1, r3
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	f000 fc9f 	bl	8017160 <SCSI_Read10>
 8016822:	4603      	mov	r3, r0
 8016824:	75fb      	strb	r3, [r7, #23]
      break;
 8016826:	e02f      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8016828:	7afb      	ldrb	r3, [r7, #11]
 801682a:	687a      	ldr	r2, [r7, #4]
 801682c:	4619      	mov	r1, r3
 801682e:	68f8      	ldr	r0, [r7, #12]
 8016830:	f000 fd40 	bl	80172b4 <SCSI_Read12>
 8016834:	4603      	mov	r3, r0
 8016836:	75fb      	strb	r3, [r7, #23]
      break;
 8016838:	e026      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801683a:	7afb      	ldrb	r3, [r7, #11]
 801683c:	687a      	ldr	r2, [r7, #4]
 801683e:	4619      	mov	r1, r3
 8016840:	68f8      	ldr	r0, [r7, #12]
 8016842:	f000 fdeb 	bl	801741c <SCSI_Write10>
 8016846:	4603      	mov	r3, r0
 8016848:	75fb      	strb	r3, [r7, #23]
      break;
 801684a:	e01d      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801684c:	7afb      	ldrb	r3, [r7, #11]
 801684e:	687a      	ldr	r2, [r7, #4]
 8016850:	4619      	mov	r1, r3
 8016852:	68f8      	ldr	r0, [r7, #12]
 8016854:	f000 feb8 	bl	80175c8 <SCSI_Write12>
 8016858:	4603      	mov	r3, r0
 801685a:	75fb      	strb	r3, [r7, #23]
      break;
 801685c:	e014      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801685e:	7afb      	ldrb	r3, [r7, #11]
 8016860:	687a      	ldr	r2, [r7, #4]
 8016862:	4619      	mov	r1, r3
 8016864:	68f8      	ldr	r0, [r7, #12]
 8016866:	f000 ff95 	bl	8017794 <SCSI_Verify10>
 801686a:	4603      	mov	r3, r0
 801686c:	75fb      	strb	r3, [r7, #23]
      break;
 801686e:	e00b      	b.n	8016888 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8016870:	7af9      	ldrb	r1, [r7, #11]
 8016872:	2320      	movs	r3, #32
 8016874:	2205      	movs	r2, #5
 8016876:	68f8      	ldr	r0, [r7, #12]
 8016878:	f000 fba2 	bl	8016fc0 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801687c:	693b      	ldr	r3, [r7, #16]
 801687e:	2202      	movs	r2, #2
 8016880:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8016882:	23ff      	movs	r3, #255	@ 0xff
 8016884:	75fb      	strb	r3, [r7, #23]
      break;
 8016886:	bf00      	nop
  }

  return ret;
 8016888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801688c:	4618      	mov	r0, r3
 801688e:	3718      	adds	r7, #24
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}

08016894 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b086      	sub	sp, #24
 8016898:	af00      	add	r7, sp, #0
 801689a:	60f8      	str	r0, [r7, #12]
 801689c:	460b      	mov	r3, r1
 801689e:	607a      	str	r2, [r7, #4]
 80168a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	32b0      	adds	r2, #176	@ 0xb0
 80168ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80168b2:	697b      	ldr	r3, [r7, #20]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d102      	bne.n	80168be <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80168b8:	f04f 33ff 	mov.w	r3, #4294967295
 80168bc:	e03f      	b.n	801693e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80168be:	697b      	ldr	r3, [r7, #20]
 80168c0:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d00a      	beq.n	80168de <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80168c8:	697b      	ldr	r3, [r7, #20]
 80168ca:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80168ce:	2320      	movs	r3, #32
 80168d0:	2205      	movs	r2, #5
 80168d2:	68f8      	ldr	r0, [r7, #12]
 80168d4:	f000 fb74 	bl	8016fc0 <SCSI_SenseCode>

    return -1;
 80168d8:	f04f 33ff 	mov.w	r3, #4294967295
 80168dc:	e02f      	b.n	801693e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80168e4:	2b02      	cmp	r3, #2
 80168e6:	d10b      	bne.n	8016900 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80168e8:	7af9      	ldrb	r1, [r7, #11]
 80168ea:	233a      	movs	r3, #58	@ 0x3a
 80168ec:	2202      	movs	r2, #2
 80168ee:	68f8      	ldr	r0, [r7, #12]
 80168f0:	f000 fb66 	bl	8016fc0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80168f4:	697b      	ldr	r3, [r7, #20]
 80168f6:	2205      	movs	r2, #5
 80168f8:	721a      	strb	r2, [r3, #8]
    return -1;
 80168fa:	f04f 33ff 	mov.w	r3, #4294967295
 80168fe:	e01e      	b.n	801693e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016906:	68fa      	ldr	r2, [r7, #12]
 8016908:	33b0      	adds	r3, #176	@ 0xb0
 801690a:	009b      	lsls	r3, r3, #2
 801690c:	4413      	add	r3, r2
 801690e:	685b      	ldr	r3, [r3, #4]
 8016910:	689b      	ldr	r3, [r3, #8]
 8016912:	7afa      	ldrb	r2, [r7, #11]
 8016914:	4610      	mov	r0, r2
 8016916:	4798      	blx	r3
 8016918:	4603      	mov	r3, r0
 801691a:	2b00      	cmp	r3, #0
 801691c:	d00b      	beq.n	8016936 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801691e:	7af9      	ldrb	r1, [r7, #11]
 8016920:	233a      	movs	r3, #58	@ 0x3a
 8016922:	2202      	movs	r2, #2
 8016924:	68f8      	ldr	r0, [r7, #12]
 8016926:	f000 fb4b 	bl	8016fc0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801692a:	697b      	ldr	r3, [r7, #20]
 801692c:	2205      	movs	r2, #5
 801692e:	721a      	strb	r2, [r3, #8]

    return -1;
 8016930:	f04f 33ff 	mov.w	r3, #4294967295
 8016934:	e003      	b.n	801693e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8016936:	697b      	ldr	r3, [r7, #20]
 8016938:	2200      	movs	r2, #0
 801693a:	60da      	str	r2, [r3, #12]

  return 0;
 801693c:	2300      	movs	r3, #0
}
 801693e:	4618      	mov	r0, r3
 8016940:	3718      	adds	r7, #24
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
	...

08016948 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b088      	sub	sp, #32
 801694c:	af00      	add	r7, sp, #0
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	460b      	mov	r3, r1
 8016952:	607a      	str	r2, [r7, #4]
 8016954:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	32b0      	adds	r2, #176	@ 0xb0
 8016960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016964:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016966:	69bb      	ldr	r3, [r7, #24]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d102      	bne.n	8016972 <SCSI_Inquiry+0x2a>
  {
    return -1;
 801696c:	f04f 33ff 	mov.w	r3, #4294967295
 8016970:	e05e      	b.n	8016a30 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8016972:	69bb      	ldr	r3, [r7, #24]
 8016974:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016978:	2b00      	cmp	r3, #0
 801697a:	d10a      	bne.n	8016992 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801697c:	69bb      	ldr	r3, [r7, #24]
 801697e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016982:	2320      	movs	r3, #32
 8016984:	2205      	movs	r2, #5
 8016986:	68f8      	ldr	r0, [r7, #12]
 8016988:	f000 fb1a 	bl	8016fc0 <SCSI_SenseCode>
    return -1;
 801698c:	f04f 33ff 	mov.w	r3, #4294967295
 8016990:	e04e      	b.n	8016a30 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	3301      	adds	r3, #1
 8016996:	781b      	ldrb	r3, [r3, #0]
 8016998:	f003 0301 	and.w	r3, r3, #1
 801699c:	2b00      	cmp	r3, #0
 801699e:	d020      	beq.n	80169e2 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	3302      	adds	r3, #2
 80169a4:	781b      	ldrb	r3, [r3, #0]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d105      	bne.n	80169b6 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80169aa:	2206      	movs	r2, #6
 80169ac:	4922      	ldr	r1, [pc, #136]	@ (8016a38 <SCSI_Inquiry+0xf0>)
 80169ae:	69b8      	ldr	r0, [r7, #24]
 80169b0:	f001 f876 	bl	8017aa0 <SCSI_UpdateBotData>
 80169b4:	e03b      	b.n	8016a2e <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	3302      	adds	r3, #2
 80169ba:	781b      	ldrb	r3, [r3, #0]
 80169bc:	2b80      	cmp	r3, #128	@ 0x80
 80169be:	d105      	bne.n	80169cc <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80169c0:	2208      	movs	r2, #8
 80169c2:	491e      	ldr	r1, [pc, #120]	@ (8016a3c <SCSI_Inquiry+0xf4>)
 80169c4:	69b8      	ldr	r0, [r7, #24]
 80169c6:	f001 f86b 	bl	8017aa0 <SCSI_UpdateBotData>
 80169ca:	e030      	b.n	8016a2e <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80169cc:	69bb      	ldr	r3, [r7, #24]
 80169ce:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80169d2:	2324      	movs	r3, #36	@ 0x24
 80169d4:	2205      	movs	r2, #5
 80169d6:	68f8      	ldr	r0, [r7, #12]
 80169d8:	f000 faf2 	bl	8016fc0 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80169dc:	f04f 33ff 	mov.w	r3, #4294967295
 80169e0:	e026      	b.n	8016a30 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80169e8:	68fa      	ldr	r2, [r7, #12]
 80169ea:	33b0      	adds	r3, #176	@ 0xb0
 80169ec:	009b      	lsls	r3, r3, #2
 80169ee:	4413      	add	r3, r2
 80169f0:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80169f2:	69d9      	ldr	r1, [r3, #28]
 80169f4:	7afa      	ldrb	r2, [r7, #11]
 80169f6:	4613      	mov	r3, r2
 80169f8:	00db      	lsls	r3, r3, #3
 80169fa:	4413      	add	r3, r2
 80169fc:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80169fe:	440b      	add	r3, r1
 8016a00:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8016a02:	697b      	ldr	r3, [r7, #20]
 8016a04:	3304      	adds	r3, #4
 8016a06:	781b      	ldrb	r3, [r3, #0]
 8016a08:	3305      	adds	r3, #5
 8016a0a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	3304      	adds	r3, #4
 8016a10:	781b      	ldrb	r3, [r3, #0]
 8016a12:	461a      	mov	r2, r3
 8016a14:	8bfb      	ldrh	r3, [r7, #30]
 8016a16:	4293      	cmp	r3, r2
 8016a18:	d303      	bcc.n	8016a22 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	3304      	adds	r3, #4
 8016a1e:	781b      	ldrb	r3, [r3, #0]
 8016a20:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8016a22:	8bfb      	ldrh	r3, [r7, #30]
 8016a24:	461a      	mov	r2, r3
 8016a26:	6979      	ldr	r1, [r7, #20]
 8016a28:	69b8      	ldr	r0, [r7, #24]
 8016a2a:	f001 f839 	bl	8017aa0 <SCSI_UpdateBotData>
  }

  return 0;
 8016a2e:	2300      	movs	r3, #0
}
 8016a30:	4618      	mov	r0, r3
 8016a32:	3720      	adds	r7, #32
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}
 8016a38:	200000b0 	.word	0x200000b0
 8016a3c:	200000b8 	.word	0x200000b8

08016a40 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b086      	sub	sp, #24
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	60f8      	str	r0, [r7, #12]
 8016a48:	460b      	mov	r3, r1
 8016a4a:	607a      	str	r2, [r7, #4]
 8016a4c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	32b0      	adds	r2, #176	@ 0xb0
 8016a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a5c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8016a5e:	697b      	ldr	r3, [r7, #20]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d102      	bne.n	8016a6a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8016a64:	f04f 33ff 	mov.w	r3, #4294967295
 8016a68:	e064      	b.n	8016b34 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016a70:	68fa      	ldr	r2, [r7, #12]
 8016a72:	33b0      	adds	r3, #176	@ 0xb0
 8016a74:	009b      	lsls	r3, r3, #2
 8016a76:	4413      	add	r3, r2
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	685b      	ldr	r3, [r3, #4]
 8016a7c:	697a      	ldr	r2, [r7, #20]
 8016a7e:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016a82:	697a      	ldr	r2, [r7, #20]
 8016a84:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016a88:	7af8      	ldrb	r0, [r7, #11]
 8016a8a:	4798      	blx	r3
 8016a8c:	4603      	mov	r3, r0
 8016a8e:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016a90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d104      	bne.n	8016aa2 <SCSI_ReadCapacity10+0x62>
 8016a98:	697b      	ldr	r3, [r7, #20]
 8016a9a:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016a9e:	2b02      	cmp	r3, #2
 8016aa0:	d108      	bne.n	8016ab4 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016aa2:	7af9      	ldrb	r1, [r7, #11]
 8016aa4:	233a      	movs	r3, #58	@ 0x3a
 8016aa6:	2202      	movs	r2, #2
 8016aa8:	68f8      	ldr	r0, [r7, #12]
 8016aaa:	f000 fa89 	bl	8016fc0 <SCSI_SenseCode>
    return -1;
 8016aae:	f04f 33ff 	mov.w	r3, #4294967295
 8016ab2:	e03f      	b.n	8016b34 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016ab4:	697b      	ldr	r3, [r7, #20]
 8016ab6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016aba:	3b01      	subs	r3, #1
 8016abc:	0e1b      	lsrs	r3, r3, #24
 8016abe:	b2da      	uxtb	r2, r3
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016ac4:	697b      	ldr	r3, [r7, #20]
 8016ac6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016aca:	3b01      	subs	r3, #1
 8016acc:	0c1b      	lsrs	r3, r3, #16
 8016ace:	b2da      	uxtb	r2, r3
 8016ad0:	697b      	ldr	r3, [r7, #20]
 8016ad2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016ada:	3b01      	subs	r3, #1
 8016adc:	0a1b      	lsrs	r3, r3, #8
 8016ade:	b2da      	uxtb	r2, r3
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016aea:	b2db      	uxtb	r3, r3
 8016aec:	3b01      	subs	r3, #1
 8016aee:	b2da      	uxtb	r2, r3
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016af4:	697b      	ldr	r3, [r7, #20]
 8016af6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016afa:	161b      	asrs	r3, r3, #24
 8016afc:	b2da      	uxtb	r2, r3
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016b02:	697b      	ldr	r3, [r7, #20]
 8016b04:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b08:	141b      	asrs	r3, r3, #16
 8016b0a:	b2da      	uxtb	r2, r3
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b16:	0a1b      	lsrs	r3, r3, #8
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	b2da      	uxtb	r2, r3
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b26:	b2da      	uxtb	r2, r3
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	2208      	movs	r2, #8
 8016b30:	60da      	str	r2, [r3, #12]

  return 0;
 8016b32:	2300      	movs	r3, #0

}
 8016b34:	4618      	mov	r0, r3
 8016b36:	3718      	adds	r7, #24
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b088      	sub	sp, #32
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	60f8      	str	r0, [r7, #12]
 8016b44:	460b      	mov	r3, r1
 8016b46:	607a      	str	r2, [r7, #4]
 8016b48:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	32b0      	adds	r2, #176	@ 0xb0
 8016b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b58:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016b5a:	69bb      	ldr	r3, [r7, #24]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d102      	bne.n	8016b66 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8016b60:	f04f 33ff 	mov.w	r3, #4294967295
 8016b64:	e09a      	b.n	8016c9c <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016b6c:	68fa      	ldr	r2, [r7, #12]
 8016b6e:	33b0      	adds	r3, #176	@ 0xb0
 8016b70:	009b      	lsls	r3, r3, #2
 8016b72:	4413      	add	r3, r2
 8016b74:	685b      	ldr	r3, [r3, #4]
 8016b76:	685b      	ldr	r3, [r3, #4]
 8016b78:	69ba      	ldr	r2, [r7, #24]
 8016b7a:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016b7e:	69ba      	ldr	r2, [r7, #24]
 8016b80:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016b84:	7af8      	ldrb	r0, [r7, #11]
 8016b86:	4798      	blx	r3
 8016b88:	4603      	mov	r3, r0
 8016b8a:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016b8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d104      	bne.n	8016b9e <SCSI_ReadCapacity16+0x62>
 8016b94:	69bb      	ldr	r3, [r7, #24]
 8016b96:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016b9a:	2b02      	cmp	r3, #2
 8016b9c:	d108      	bne.n	8016bb0 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016b9e:	7af9      	ldrb	r1, [r7, #11]
 8016ba0:	233a      	movs	r3, #58	@ 0x3a
 8016ba2:	2202      	movs	r2, #2
 8016ba4:	68f8      	ldr	r0, [r7, #12]
 8016ba6:	f000 fa0b 	bl	8016fc0 <SCSI_SenseCode>
    return -1;
 8016baa:	f04f 33ff 	mov.w	r3, #4294967295
 8016bae:	e075      	b.n	8016c9c <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	330a      	adds	r3, #10
 8016bb4:	781b      	ldrb	r3, [r3, #0]
 8016bb6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	330b      	adds	r3, #11
 8016bbc:	781b      	ldrb	r3, [r3, #0]
 8016bbe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bc0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	330c      	adds	r3, #12
 8016bc6:	781b      	ldrb	r3, [r3, #0]
 8016bc8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016bca:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016bcc:	687a      	ldr	r2, [r7, #4]
 8016bce:	320d      	adds	r2, #13
 8016bd0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016bd2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bd4:	69bb      	ldr	r3, [r7, #24]
 8016bd6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016bd8:	2300      	movs	r3, #0
 8016bda:	61fb      	str	r3, [r7, #28]
 8016bdc:	e008      	b.n	8016bf0 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8016bde:	69ba      	ldr	r2, [r7, #24]
 8016be0:	69fb      	ldr	r3, [r7, #28]
 8016be2:	4413      	add	r3, r2
 8016be4:	3310      	adds	r3, #16
 8016be6:	2200      	movs	r2, #0
 8016be8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016bea:	69fb      	ldr	r3, [r7, #28]
 8016bec:	3301      	adds	r3, #1
 8016bee:	61fb      	str	r3, [r7, #28]
 8016bf0:	69bb      	ldr	r3, [r7, #24]
 8016bf2:	68db      	ldr	r3, [r3, #12]
 8016bf4:	69fa      	ldr	r2, [r7, #28]
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d3f1      	bcc.n	8016bde <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016bfa:	69bb      	ldr	r3, [r7, #24]
 8016bfc:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c00:	3b01      	subs	r3, #1
 8016c02:	0e1b      	lsrs	r3, r3, #24
 8016c04:	b2da      	uxtb	r2, r3
 8016c06:	69bb      	ldr	r3, [r7, #24]
 8016c08:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016c0a:	69bb      	ldr	r3, [r7, #24]
 8016c0c:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c10:	3b01      	subs	r3, #1
 8016c12:	0c1b      	lsrs	r3, r3, #16
 8016c14:	b2da      	uxtb	r2, r3
 8016c16:	69bb      	ldr	r3, [r7, #24]
 8016c18:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016c1a:	69bb      	ldr	r3, [r7, #24]
 8016c1c:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c20:	3b01      	subs	r3, #1
 8016c22:	0a1b      	lsrs	r3, r3, #8
 8016c24:	b2da      	uxtb	r2, r3
 8016c26:	69bb      	ldr	r3, [r7, #24]
 8016c28:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016c2a:	69bb      	ldr	r3, [r7, #24]
 8016c2c:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c30:	b2db      	uxtb	r3, r3
 8016c32:	3b01      	subs	r3, #1
 8016c34:	b2da      	uxtb	r2, r3
 8016c36:	69bb      	ldr	r3, [r7, #24]
 8016c38:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016c3a:	69bb      	ldr	r3, [r7, #24]
 8016c3c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c40:	161b      	asrs	r3, r3, #24
 8016c42:	b2da      	uxtb	r2, r3
 8016c44:	69bb      	ldr	r3, [r7, #24]
 8016c46:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016c48:	69bb      	ldr	r3, [r7, #24]
 8016c4a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c4e:	141b      	asrs	r3, r3, #16
 8016c50:	b2da      	uxtb	r2, r3
 8016c52:	69bb      	ldr	r3, [r7, #24]
 8016c54:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016c56:	69bb      	ldr	r3, [r7, #24]
 8016c58:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c5c:	0a1b      	lsrs	r3, r3, #8
 8016c5e:	b29b      	uxth	r3, r3
 8016c60:	b2da      	uxtb	r2, r3
 8016c62:	69bb      	ldr	r3, [r7, #24]
 8016c64:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8016c66:	69bb      	ldr	r3, [r7, #24]
 8016c68:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c6c:	b2da      	uxtb	r2, r3
 8016c6e:	69bb      	ldr	r3, [r7, #24]
 8016c70:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	330a      	adds	r3, #10
 8016c76:	781b      	ldrb	r3, [r3, #0]
 8016c78:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	330b      	adds	r3, #11
 8016c7e:	781b      	ldrb	r3, [r3, #0]
 8016c80:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c82:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	330c      	adds	r3, #12
 8016c88:	781b      	ldrb	r3, [r3, #0]
 8016c8a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016c8c:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016c8e:	687a      	ldr	r2, [r7, #4]
 8016c90:	320d      	adds	r2, #13
 8016c92:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016c94:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c96:	69bb      	ldr	r3, [r7, #24]
 8016c98:	60da      	str	r2, [r3, #12]

  return 0;
 8016c9a:	2300      	movs	r3, #0
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	3720      	adds	r7, #32
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}

08016ca4 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b088      	sub	sp, #32
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	60f8      	str	r0, [r7, #12]
 8016cac:	460b      	mov	r3, r1
 8016cae:	607a      	str	r2, [r7, #4]
 8016cb0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	32b0      	adds	r2, #176	@ 0xb0
 8016cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cc0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016cc2:	69bb      	ldr	r3, [r7, #24]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d102      	bne.n	8016cce <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8016cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8016ccc:	e061      	b.n	8016d92 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016cd4:	68fa      	ldr	r2, [r7, #12]
 8016cd6:	33b0      	adds	r3, #176	@ 0xb0
 8016cd8:	009b      	lsls	r3, r3, #2
 8016cda:	4413      	add	r3, r2
 8016cdc:	685b      	ldr	r3, [r3, #4]
 8016cde:	685b      	ldr	r3, [r3, #4]
 8016ce0:	f107 0214 	add.w	r2, r7, #20
 8016ce4:	f107 0110 	add.w	r1, r7, #16
 8016ce8:	7af8      	ldrb	r0, [r7, #11]
 8016cea:	4798      	blx	r3
 8016cec:	4603      	mov	r3, r0
 8016cee:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d104      	bne.n	8016d02 <SCSI_ReadFormatCapacity+0x5e>
 8016cf8:	69bb      	ldr	r3, [r7, #24]
 8016cfa:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016cfe:	2b02      	cmp	r3, #2
 8016d00:	d108      	bne.n	8016d14 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016d02:	7af9      	ldrb	r1, [r7, #11]
 8016d04:	233a      	movs	r3, #58	@ 0x3a
 8016d06:	2202      	movs	r2, #2
 8016d08:	68f8      	ldr	r0, [r7, #12]
 8016d0a:	f000 f959 	bl	8016fc0 <SCSI_SenseCode>
    return -1;
 8016d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8016d12:	e03e      	b.n	8016d92 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8016d14:	2300      	movs	r3, #0
 8016d16:	83fb      	strh	r3, [r7, #30]
 8016d18:	e007      	b.n	8016d2a <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8016d1a:	8bfb      	ldrh	r3, [r7, #30]
 8016d1c:	69ba      	ldr	r2, [r7, #24]
 8016d1e:	4413      	add	r3, r2
 8016d20:	2200      	movs	r2, #0
 8016d22:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8016d24:	8bfb      	ldrh	r3, [r7, #30]
 8016d26:	3301      	adds	r3, #1
 8016d28:	83fb      	strh	r3, [r7, #30]
 8016d2a:	8bfb      	ldrh	r3, [r7, #30]
 8016d2c:	2b0b      	cmp	r3, #11
 8016d2e:	d9f4      	bls.n	8016d1a <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8016d30:	69bb      	ldr	r3, [r7, #24]
 8016d32:	2208      	movs	r2, #8
 8016d34:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8016d36:	693b      	ldr	r3, [r7, #16]
 8016d38:	3b01      	subs	r3, #1
 8016d3a:	0e1b      	lsrs	r3, r3, #24
 8016d3c:	b2da      	uxtb	r2, r3
 8016d3e:	69bb      	ldr	r3, [r7, #24]
 8016d40:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8016d42:	693b      	ldr	r3, [r7, #16]
 8016d44:	3b01      	subs	r3, #1
 8016d46:	0c1b      	lsrs	r3, r3, #16
 8016d48:	b2da      	uxtb	r2, r3
 8016d4a:	69bb      	ldr	r3, [r7, #24]
 8016d4c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	3b01      	subs	r3, #1
 8016d52:	0a1b      	lsrs	r3, r3, #8
 8016d54:	b2da      	uxtb	r2, r3
 8016d56:	69bb      	ldr	r3, [r7, #24]
 8016d58:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8016d5a:	693b      	ldr	r3, [r7, #16]
 8016d5c:	b2db      	uxtb	r3, r3
 8016d5e:	3b01      	subs	r3, #1
 8016d60:	b2da      	uxtb	r2, r3
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8016d66:	69bb      	ldr	r3, [r7, #24]
 8016d68:	2202      	movs	r2, #2
 8016d6a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8016d6c:	8abb      	ldrh	r3, [r7, #20]
 8016d6e:	141b      	asrs	r3, r3, #16
 8016d70:	b2da      	uxtb	r2, r3
 8016d72:	69bb      	ldr	r3, [r7, #24]
 8016d74:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8016d76:	8abb      	ldrh	r3, [r7, #20]
 8016d78:	0a1b      	lsrs	r3, r3, #8
 8016d7a:	b29b      	uxth	r3, r3
 8016d7c:	b2da      	uxtb	r2, r3
 8016d7e:	69bb      	ldr	r3, [r7, #24]
 8016d80:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8016d82:	8abb      	ldrh	r3, [r7, #20]
 8016d84:	b2da      	uxtb	r2, r3
 8016d86:	69bb      	ldr	r3, [r7, #24]
 8016d88:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8016d8a:	69bb      	ldr	r3, [r7, #24]
 8016d8c:	220c      	movs	r2, #12
 8016d8e:	60da      	str	r2, [r3, #12]

  return 0;
 8016d90:	2300      	movs	r3, #0
}
 8016d92:	4618      	mov	r0, r3
 8016d94:	3720      	adds	r7, #32
 8016d96:	46bd      	mov	sp, r7
 8016d98:	bd80      	pop	{r7, pc}
	...

08016d9c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b086      	sub	sp, #24
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	60f8      	str	r0, [r7, #12]
 8016da4:	460b      	mov	r3, r1
 8016da6:	607a      	str	r2, [r7, #4]
 8016da8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	32b0      	adds	r2, #176	@ 0xb0
 8016db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016db8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8016dba:	2304      	movs	r3, #4
 8016dbc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016dbe:	693b      	ldr	r3, [r7, #16]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d102      	bne.n	8016dca <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8016dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8016dc8:	e027      	b.n	8016e1a <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016dd0:	68fa      	ldr	r2, [r7, #12]
 8016dd2:	33b0      	adds	r3, #176	@ 0xb0
 8016dd4:	009b      	lsls	r3, r3, #2
 8016dd6:	4413      	add	r3, r2
 8016dd8:	685b      	ldr	r3, [r3, #4]
 8016dda:	68db      	ldr	r3, [r3, #12]
 8016ddc:	7afa      	ldrb	r2, [r7, #11]
 8016dde:	4610      	mov	r0, r2
 8016de0:	4798      	blx	r3
 8016de2:	4603      	mov	r3, r0
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d006      	beq.n	8016df6 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8016de8:	4b0e      	ldr	r3, [pc, #56]	@ (8016e24 <SCSI_ModeSense6+0x88>)
 8016dea:	789b      	ldrb	r3, [r3, #2]
 8016dec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016df0:	b2da      	uxtb	r2, r3
 8016df2:	4b0c      	ldr	r3, [pc, #48]	@ (8016e24 <SCSI_ModeSense6+0x88>)
 8016df4:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	3304      	adds	r3, #4
 8016dfa:	781b      	ldrb	r3, [r3, #0]
 8016dfc:	461a      	mov	r2, r3
 8016dfe:	8afb      	ldrh	r3, [r7, #22]
 8016e00:	4293      	cmp	r3, r2
 8016e02:	d303      	bcc.n	8016e0c <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	3304      	adds	r3, #4
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8016e0c:	8afb      	ldrh	r3, [r7, #22]
 8016e0e:	461a      	mov	r2, r3
 8016e10:	4904      	ldr	r1, [pc, #16]	@ (8016e24 <SCSI_ModeSense6+0x88>)
 8016e12:	6938      	ldr	r0, [r7, #16]
 8016e14:	f000 fe44 	bl	8017aa0 <SCSI_UpdateBotData>

  return 0;
 8016e18:	2300      	movs	r3, #0
}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	3718      	adds	r7, #24
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop
 8016e24:	200000c0 	.word	0x200000c0

08016e28 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b086      	sub	sp, #24
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	460b      	mov	r3, r1
 8016e32:	607a      	str	r2, [r7, #4]
 8016e34:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	32b0      	adds	r2, #176	@ 0xb0
 8016e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e44:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8016e46:	2308      	movs	r3, #8
 8016e48:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d102      	bne.n	8016e56 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8016e50:	f04f 33ff 	mov.w	r3, #4294967295
 8016e54:	e027      	b.n	8016ea6 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e5c:	68fa      	ldr	r2, [r7, #12]
 8016e5e:	33b0      	adds	r3, #176	@ 0xb0
 8016e60:	009b      	lsls	r3, r3, #2
 8016e62:	4413      	add	r3, r2
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	68db      	ldr	r3, [r3, #12]
 8016e68:	7afa      	ldrb	r2, [r7, #11]
 8016e6a:	4610      	mov	r0, r2
 8016e6c:	4798      	blx	r3
 8016e6e:	4603      	mov	r3, r0
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d006      	beq.n	8016e82 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8016e74:	4b0e      	ldr	r3, [pc, #56]	@ (8016eb0 <SCSI_ModeSense10+0x88>)
 8016e76:	78db      	ldrb	r3, [r3, #3]
 8016e78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016e7c:	b2da      	uxtb	r2, r3
 8016e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8016eb0 <SCSI_ModeSense10+0x88>)
 8016e80:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	3308      	adds	r3, #8
 8016e86:	781b      	ldrb	r3, [r3, #0]
 8016e88:	461a      	mov	r2, r3
 8016e8a:	8afb      	ldrh	r3, [r7, #22]
 8016e8c:	4293      	cmp	r3, r2
 8016e8e:	d303      	bcc.n	8016e98 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	3308      	adds	r3, #8
 8016e94:	781b      	ldrb	r3, [r3, #0]
 8016e96:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8016e98:	8afb      	ldrh	r3, [r7, #22]
 8016e9a:	461a      	mov	r2, r3
 8016e9c:	4904      	ldr	r1, [pc, #16]	@ (8016eb0 <SCSI_ModeSense10+0x88>)
 8016e9e:	6938      	ldr	r0, [r7, #16]
 8016ea0:	f000 fdfe 	bl	8017aa0 <SCSI_UpdateBotData>

  return 0;
 8016ea4:	2300      	movs	r3, #0
}
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	3718      	adds	r7, #24
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}
 8016eae:	bf00      	nop
 8016eb0:	200000c4 	.word	0x200000c4

08016eb4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b086      	sub	sp, #24
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	60f8      	str	r0, [r7, #12]
 8016ebc:	460b      	mov	r3, r1
 8016ebe:	607a      	str	r2, [r7, #4]
 8016ec0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	32b0      	adds	r2, #176	@ 0xb0
 8016ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ed0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8016ed2:	693b      	ldr	r3, [r7, #16]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d102      	bne.n	8016ede <SCSI_RequestSense+0x2a>
  {
    return -1;
 8016ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8016edc:	e06c      	b.n	8016fb8 <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d10a      	bne.n	8016efe <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016ee8:	693b      	ldr	r3, [r7, #16]
 8016eea:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016eee:	2320      	movs	r3, #32
 8016ef0:	2205      	movs	r2, #5
 8016ef2:	68f8      	ldr	r0, [r7, #12]
 8016ef4:	f000 f864 	bl	8016fc0 <SCSI_SenseCode>
    return -1;
 8016ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8016efc:	e05c      	b.n	8016fb8 <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016efe:	2300      	movs	r3, #0
 8016f00:	75fb      	strb	r3, [r7, #23]
 8016f02:	e007      	b.n	8016f14 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8016f04:	7dfb      	ldrb	r3, [r7, #23]
 8016f06:	693a      	ldr	r2, [r7, #16]
 8016f08:	4413      	add	r3, r2
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016f0e:	7dfb      	ldrb	r3, [r7, #23]
 8016f10:	3301      	adds	r3, #1
 8016f12:	75fb      	strb	r3, [r7, #23]
 8016f14:	7dfb      	ldrb	r3, [r7, #23]
 8016f16:	2b11      	cmp	r3, #17
 8016f18:	d9f4      	bls.n	8016f04 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8016f1a:	693b      	ldr	r3, [r7, #16]
 8016f1c:	2270      	movs	r2, #112	@ 0x70
 8016f1e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8016f20:	693b      	ldr	r3, [r7, #16]
 8016f22:	220c      	movs	r2, #12
 8016f24:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8016f26:	693b      	ldr	r3, [r7, #16]
 8016f28:	f893 2860 	ldrb.w	r2, [r3, #2144]	@ 0x860
 8016f2c:	693b      	ldr	r3, [r7, #16]
 8016f2e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d031      	beq.n	8016f9a <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8016f36:	693b      	ldr	r3, [r7, #16]
 8016f38:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f3c:	461a      	mov	r2, r3
 8016f3e:	693b      	ldr	r3, [r7, #16]
 8016f40:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8016f44:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8016f48:	693b      	ldr	r3, [r7, #16]
 8016f4a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8016f4c:	693b      	ldr	r3, [r7, #16]
 8016f4e:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f52:	693a      	ldr	r2, [r7, #16]
 8016f54:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f58:	00db      	lsls	r3, r3, #3
 8016f5a:	4413      	add	r3, r2
 8016f5c:	791a      	ldrb	r2, [r3, #4]
 8016f5e:	693b      	ldr	r3, [r7, #16]
 8016f60:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f68:	693a      	ldr	r2, [r7, #16]
 8016f6a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f6e:	00db      	lsls	r3, r3, #3
 8016f70:	4413      	add	r3, r2
 8016f72:	795a      	ldrb	r2, [r3, #5]
 8016f74:	693b      	ldr	r3, [r7, #16]
 8016f76:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8016f78:	693b      	ldr	r3, [r7, #16]
 8016f7a:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f7e:	3301      	adds	r3, #1
 8016f80:	b2da      	uxtb	r2, r3
 8016f82:	693b      	ldr	r3, [r7, #16]
 8016f84:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8016f88:	693b      	ldr	r3, [r7, #16]
 8016f8a:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f8e:	2b04      	cmp	r3, #4
 8016f90:	d103      	bne.n	8016f9a <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 8016f92:	693b      	ldr	r3, [r7, #16]
 8016f94:	2200      	movs	r2, #0
 8016f96:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8016f9a:	693b      	ldr	r3, [r7, #16]
 8016f9c:	2212      	movs	r2, #18
 8016f9e:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	3304      	adds	r3, #4
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	2b12      	cmp	r3, #18
 8016fa8:	d805      	bhi.n	8016fb6 <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	3304      	adds	r3, #4
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	461a      	mov	r2, r3
 8016fb2:	693b      	ldr	r3, [r7, #16]
 8016fb4:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8016fb6:	2300      	movs	r3, #0
}
 8016fb8:	4618      	mov	r0, r3
 8016fba:	3718      	adds	r7, #24
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}

08016fc0 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8016fc0:	b480      	push	{r7}
 8016fc2:	b085      	sub	sp, #20
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
 8016fc8:	4608      	mov	r0, r1
 8016fca:	4611      	mov	r1, r2
 8016fcc:	461a      	mov	r2, r3
 8016fce:	4603      	mov	r3, r0
 8016fd0:	70fb      	strb	r3, [r7, #3]
 8016fd2:	460b      	mov	r3, r1
 8016fd4:	70bb      	strb	r3, [r7, #2]
 8016fd6:	4613      	mov	r3, r2
 8016fd8:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	32b0      	adds	r2, #176	@ 0xb0
 8016fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fe8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d02f      	beq.n	8017050 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8016ffe:	78b9      	ldrb	r1, [r7, #2]
 8017000:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801700a:	68fa      	ldr	r2, [r7, #12]
 801700c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8017010:	00db      	lsls	r3, r3, #3
 8017012:	4413      	add	r3, r2
 8017014:	787a      	ldrb	r2, [r7, #1]
 8017016:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801701e:	68fa      	ldr	r2, [r7, #12]
 8017020:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8017024:	00db      	lsls	r3, r3, #3
 8017026:	4413      	add	r3, r2
 8017028:	2200      	movs	r2, #0
 801702a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8017032:	3301      	adds	r3, #1
 8017034:	b2da      	uxtb	r2, r3
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8017042:	2b04      	cmp	r3, #4
 8017044:	d105      	bne.n	8017052 <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	2200      	movs	r2, #0
 801704a:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
 801704e:	e000      	b.n	8017052 <SCSI_SenseCode+0x92>
    return;
 8017050:	bf00      	nop
  }
}
 8017052:	3714      	adds	r7, #20
 8017054:	46bd      	mov	sp, r7
 8017056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705a:	4770      	bx	lr

0801705c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b086      	sub	sp, #24
 8017060:	af00      	add	r7, sp, #0
 8017062:	60f8      	str	r0, [r7, #12]
 8017064:	460b      	mov	r3, r1
 8017066:	607a      	str	r2, [r7, #4]
 8017068:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	32b0      	adds	r2, #176	@ 0xb0
 8017074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017078:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801707a:	697b      	ldr	r3, [r7, #20]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d102      	bne.n	8017086 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8017080:	f04f 33ff 	mov.w	r3, #4294967295
 8017084:	e03b      	b.n	80170fe <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8017086:	697b      	ldr	r3, [r7, #20]
 8017088:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 801708c:	2b01      	cmp	r3, #1
 801708e:	d10f      	bne.n	80170b0 <SCSI_StartStopUnit+0x54>
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	3304      	adds	r3, #4
 8017094:	781b      	ldrb	r3, [r3, #0]
 8017096:	f003 0303 	and.w	r3, r3, #3
 801709a:	2b02      	cmp	r3, #2
 801709c:	d108      	bne.n	80170b0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801709e:	7af9      	ldrb	r1, [r7, #11]
 80170a0:	2324      	movs	r3, #36	@ 0x24
 80170a2:	2205      	movs	r2, #5
 80170a4:	68f8      	ldr	r0, [r7, #12]
 80170a6:	f7ff ff8b 	bl	8016fc0 <SCSI_SenseCode>

    return -1;
 80170aa:	f04f 33ff 	mov.w	r3, #4294967295
 80170ae:	e026      	b.n	80170fe <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	3304      	adds	r3, #4
 80170b4:	781b      	ldrb	r3, [r3, #0]
 80170b6:	f003 0303 	and.w	r3, r3, #3
 80170ba:	2b01      	cmp	r3, #1
 80170bc:	d104      	bne.n	80170c8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80170be:	697b      	ldr	r3, [r7, #20]
 80170c0:	2200      	movs	r2, #0
 80170c2:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 80170c6:	e016      	b.n	80170f6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	3304      	adds	r3, #4
 80170cc:	781b      	ldrb	r3, [r3, #0]
 80170ce:	f003 0303 	and.w	r3, r3, #3
 80170d2:	2b02      	cmp	r3, #2
 80170d4:	d104      	bne.n	80170e0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80170d6:	697b      	ldr	r3, [r7, #20]
 80170d8:	2202      	movs	r2, #2
 80170da:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 80170de:	e00a      	b.n	80170f6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	3304      	adds	r3, #4
 80170e4:	781b      	ldrb	r3, [r3, #0]
 80170e6:	f003 0303 	and.w	r3, r3, #3
 80170ea:	2b03      	cmp	r3, #3
 80170ec:	d103      	bne.n	80170f6 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80170ee:	697b      	ldr	r3, [r7, #20]
 80170f0:	2200      	movs	r2, #0
 80170f2:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80170f6:	697b      	ldr	r3, [r7, #20]
 80170f8:	2200      	movs	r2, #0
 80170fa:	60da      	str	r2, [r3, #12]

  return 0;
 80170fc:	2300      	movs	r3, #0
}
 80170fe:	4618      	mov	r0, r3
 8017100:	3718      	adds	r7, #24
 8017102:	46bd      	mov	sp, r7
 8017104:	bd80      	pop	{r7, pc}

08017106 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017106:	b480      	push	{r7}
 8017108:	b087      	sub	sp, #28
 801710a:	af00      	add	r7, sp, #0
 801710c:	60f8      	str	r0, [r7, #12]
 801710e:	460b      	mov	r3, r1
 8017110:	607a      	str	r2, [r7, #4]
 8017112:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	32b0      	adds	r2, #176	@ 0xb0
 801711e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017122:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d102      	bne.n	8017130 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801712a:	f04f 33ff 	mov.w	r3, #4294967295
 801712e:	e011      	b.n	8017154 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	3304      	adds	r3, #4
 8017134:	781b      	ldrb	r3, [r3, #0]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d104      	bne.n	8017144 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	2200      	movs	r2, #0
 801713e:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 8017142:	e003      	b.n	801714c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8017144:	697b      	ldr	r3, [r7, #20]
 8017146:	2201      	movs	r2, #1
 8017148:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }

  hmsc->bot_data_length = 0U;
 801714c:	697b      	ldr	r3, [r7, #20]
 801714e:	2200      	movs	r2, #0
 8017150:	60da      	str	r2, [r3, #12]

  return 0;
 8017152:	2300      	movs	r3, #0
}
 8017154:	4618      	mov	r0, r3
 8017156:	371c      	adds	r7, #28
 8017158:	46bd      	mov	sp, r7
 801715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715e:	4770      	bx	lr

08017160 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b086      	sub	sp, #24
 8017164:	af00      	add	r7, sp, #0
 8017166:	60f8      	str	r0, [r7, #12]
 8017168:	460b      	mov	r3, r1
 801716a:	607a      	str	r2, [r7, #4]
 801716c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	32b0      	adds	r2, #176	@ 0xb0
 8017178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801717c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801717e:	697b      	ldr	r3, [r7, #20]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d102      	bne.n	801718a <SCSI_Read10+0x2a>
  {
    return -1;
 8017184:	f04f 33ff 	mov.w	r3, #4294967295
 8017188:	e090      	b.n	80172ac <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801718a:	697b      	ldr	r3, [r7, #20]
 801718c:	7a1b      	ldrb	r3, [r3, #8]
 801718e:	2b00      	cmp	r3, #0
 8017190:	f040 8082 	bne.w	8017298 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8017194:	697b      	ldr	r3, [r7, #20]
 8017196:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 801719a:	b25b      	sxtb	r3, r3
 801719c:	2b00      	cmp	r3, #0
 801719e:	db0a      	blt.n	80171b6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80171a0:	697b      	ldr	r3, [r7, #20]
 80171a2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80171a6:	2320      	movs	r3, #32
 80171a8:	2205      	movs	r2, #5
 80171aa:	68f8      	ldr	r0, [r7, #12]
 80171ac:	f7ff ff08 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 80171b0:	f04f 33ff 	mov.w	r3, #4294967295
 80171b4:	e07a      	b.n	80172ac <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80171b6:	697b      	ldr	r3, [r7, #20]
 80171b8:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80171bc:	2b02      	cmp	r3, #2
 80171be:	d108      	bne.n	80171d2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80171c0:	7af9      	ldrb	r1, [r7, #11]
 80171c2:	233a      	movs	r3, #58	@ 0x3a
 80171c4:	2202      	movs	r2, #2
 80171c6:	68f8      	ldr	r0, [r7, #12]
 80171c8:	f7ff fefa 	bl	8016fc0 <SCSI_SenseCode>

      return -1;
 80171cc:	f04f 33ff 	mov.w	r3, #4294967295
 80171d0:	e06c      	b.n	80172ac <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80171d8:	68fa      	ldr	r2, [r7, #12]
 80171da:	33b0      	adds	r3, #176	@ 0xb0
 80171dc:	009b      	lsls	r3, r3, #2
 80171de:	4413      	add	r3, r2
 80171e0:	685b      	ldr	r3, [r3, #4]
 80171e2:	689b      	ldr	r3, [r3, #8]
 80171e4:	7afa      	ldrb	r2, [r7, #11]
 80171e6:	4610      	mov	r0, r2
 80171e8:	4798      	blx	r3
 80171ea:	4603      	mov	r3, r0
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d008      	beq.n	8017202 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80171f0:	7af9      	ldrb	r1, [r7, #11]
 80171f2:	233a      	movs	r3, #58	@ 0x3a
 80171f4:	2202      	movs	r2, #2
 80171f6:	68f8      	ldr	r0, [r7, #12]
 80171f8:	f7ff fee2 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 80171fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017200:	e054      	b.n	80172ac <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	3302      	adds	r3, #2
 8017206:	781b      	ldrb	r3, [r3, #0]
 8017208:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	3303      	adds	r3, #3
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017212:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	3304      	adds	r3, #4
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801721c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801721e:	687a      	ldr	r2, [r7, #4]
 8017220:	3205      	adds	r2, #5
 8017222:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8017224:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017226:	697b      	ldr	r3, [r7, #20]
 8017228:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	3307      	adds	r3, #7
 8017230:	781b      	ldrb	r3, [r3, #0]
 8017232:	021b      	lsls	r3, r3, #8
 8017234:	687a      	ldr	r2, [r7, #4]
 8017236:	3208      	adds	r2, #8
 8017238:	7812      	ldrb	r2, [r2, #0]
 801723a:	431a      	orrs	r2, r3
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017242:	697b      	ldr	r3, [r7, #20]
 8017244:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017248:	697b      	ldr	r3, [r7, #20]
 801724a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801724e:	7af9      	ldrb	r1, [r7, #11]
 8017250:	68f8      	ldr	r0, [r7, #12]
 8017252:	f000 fadc 	bl	801780e <SCSI_CheckAddressRange>
 8017256:	4603      	mov	r3, r0
 8017258:	2b00      	cmp	r3, #0
 801725a:	da02      	bge.n	8017262 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801725c:	f04f 33ff 	mov.w	r3, #4294967295
 8017260:	e024      	b.n	80172ac <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801726e:	6979      	ldr	r1, [r7, #20]
 8017270:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 8017274:	fb01 f303 	mul.w	r3, r1, r3
 8017278:	429a      	cmp	r2, r3
 801727a:	d00a      	beq.n	8017292 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801727c:	697b      	ldr	r3, [r7, #20]
 801727e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017282:	2320      	movs	r3, #32
 8017284:	2205      	movs	r2, #5
 8017286:	68f8      	ldr	r0, [r7, #12]
 8017288:	f7ff fe9a 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 801728c:	f04f 33ff 	mov.w	r3, #4294967295
 8017290:	e00c      	b.n	80172ac <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8017292:	697b      	ldr	r3, [r7, #20]
 8017294:	2202      	movs	r2, #2
 8017296:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801729e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80172a0:	7afb      	ldrb	r3, [r7, #11]
 80172a2:	4619      	mov	r1, r3
 80172a4:	68f8      	ldr	r0, [r7, #12]
 80172a6:	f000 fadf 	bl	8017868 <SCSI_ProcessRead>
 80172aa:	4603      	mov	r3, r0
}
 80172ac:	4618      	mov	r0, r3
 80172ae:	3718      	adds	r7, #24
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}

080172b4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b086      	sub	sp, #24
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	60f8      	str	r0, [r7, #12]
 80172bc:	460b      	mov	r3, r1
 80172be:	607a      	str	r2, [r7, #4]
 80172c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	32b0      	adds	r2, #176	@ 0xb0
 80172cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d102      	bne.n	80172de <SCSI_Read12+0x2a>
  {
    return -1;
 80172d8:	f04f 33ff 	mov.w	r3, #4294967295
 80172dc:	e09a      	b.n	8017414 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	7a1b      	ldrb	r3, [r3, #8]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	f040 808c 	bne.w	8017400 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80172e8:	697b      	ldr	r3, [r7, #20]
 80172ea:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80172ee:	b25b      	sxtb	r3, r3
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	db0a      	blt.n	801730a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80172f4:	697b      	ldr	r3, [r7, #20]
 80172f6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80172fa:	2320      	movs	r3, #32
 80172fc:	2205      	movs	r2, #5
 80172fe:	68f8      	ldr	r0, [r7, #12]
 8017300:	f7ff fe5e 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 8017304:	f04f 33ff 	mov.w	r3, #4294967295
 8017308:	e084      	b.n	8017414 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801730a:	697b      	ldr	r3, [r7, #20]
 801730c:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8017310:	2b02      	cmp	r3, #2
 8017312:	d108      	bne.n	8017326 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017314:	7af9      	ldrb	r1, [r7, #11]
 8017316:	233a      	movs	r3, #58	@ 0x3a
 8017318:	2202      	movs	r2, #2
 801731a:	68f8      	ldr	r0, [r7, #12]
 801731c:	f7ff fe50 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 8017320:	f04f 33ff 	mov.w	r3, #4294967295
 8017324:	e076      	b.n	8017414 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801732c:	68fa      	ldr	r2, [r7, #12]
 801732e:	33b0      	adds	r3, #176	@ 0xb0
 8017330:	009b      	lsls	r3, r3, #2
 8017332:	4413      	add	r3, r2
 8017334:	685b      	ldr	r3, [r3, #4]
 8017336:	689b      	ldr	r3, [r3, #8]
 8017338:	7afa      	ldrb	r2, [r7, #11]
 801733a:	4610      	mov	r0, r2
 801733c:	4798      	blx	r3
 801733e:	4603      	mov	r3, r0
 8017340:	2b00      	cmp	r3, #0
 8017342:	d008      	beq.n	8017356 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017344:	7af9      	ldrb	r1, [r7, #11]
 8017346:	233a      	movs	r3, #58	@ 0x3a
 8017348:	2202      	movs	r2, #2
 801734a:	68f8      	ldr	r0, [r7, #12]
 801734c:	f7ff fe38 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 8017350:	f04f 33ff 	mov.w	r3, #4294967295
 8017354:	e05e      	b.n	8017414 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	3302      	adds	r3, #2
 801735a:	781b      	ldrb	r3, [r3, #0]
 801735c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	3303      	adds	r3, #3
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017366:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	3304      	adds	r3, #4
 801736c:	781b      	ldrb	r3, [r3, #0]
 801736e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017370:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8017372:	687a      	ldr	r2, [r7, #4]
 8017374:	3205      	adds	r2, #5
 8017376:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8017378:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801737a:	697b      	ldr	r3, [r7, #20]
 801737c:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	3306      	adds	r3, #6
 8017384:	781b      	ldrb	r3, [r3, #0]
 8017386:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	3307      	adds	r3, #7
 801738c:	781b      	ldrb	r3, [r3, #0]
 801738e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017390:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	3308      	adds	r3, #8
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801739a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801739c:	687a      	ldr	r2, [r7, #4]
 801739e:	3209      	adds	r2, #9
 80173a0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80173a2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80173a4:	697b      	ldr	r3, [r7, #20]
 80173a6:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80173aa:	697b      	ldr	r3, [r7, #20]
 80173ac:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80173b0:	697b      	ldr	r3, [r7, #20]
 80173b2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80173b6:	7af9      	ldrb	r1, [r7, #11]
 80173b8:	68f8      	ldr	r0, [r7, #12]
 80173ba:	f000 fa28 	bl	801780e <SCSI_CheckAddressRange>
 80173be:	4603      	mov	r3, r0
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	da02      	bge.n	80173ca <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80173c4:	f04f 33ff 	mov.w	r3, #4294967295
 80173c8:	e024      	b.n	8017414 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80173d0:	697b      	ldr	r3, [r7, #20]
 80173d2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80173d6:	6979      	ldr	r1, [r7, #20]
 80173d8:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 80173dc:	fb01 f303 	mul.w	r3, r1, r3
 80173e0:	429a      	cmp	r2, r3
 80173e2:	d00a      	beq.n	80173fa <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80173e4:	697b      	ldr	r3, [r7, #20]
 80173e6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80173ea:	2320      	movs	r3, #32
 80173ec:	2205      	movs	r2, #5
 80173ee:	68f8      	ldr	r0, [r7, #12]
 80173f0:	f7ff fde6 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 80173f4:	f04f 33ff 	mov.w	r3, #4294967295
 80173f8:	e00c      	b.n	8017414 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80173fa:	697b      	ldr	r3, [r7, #20]
 80173fc:	2202      	movs	r2, #2
 80173fe:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8017400:	697b      	ldr	r3, [r7, #20]
 8017402:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017406:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8017408:	7afb      	ldrb	r3, [r7, #11]
 801740a:	4619      	mov	r1, r3
 801740c:	68f8      	ldr	r0, [r7, #12]
 801740e:	f000 fa2b 	bl	8017868 <SCSI_ProcessRead>
 8017412:	4603      	mov	r3, r0
}
 8017414:	4618      	mov	r0, r3
 8017416:	3718      	adds	r7, #24
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}

0801741c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b086      	sub	sp, #24
 8017420:	af00      	add	r7, sp, #0
 8017422:	60f8      	str	r0, [r7, #12]
 8017424:	460b      	mov	r3, r1
 8017426:	607a      	str	r2, [r7, #4]
 8017428:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	32b0      	adds	r2, #176	@ 0xb0
 8017434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017438:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801743a:	697b      	ldr	r3, [r7, #20]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d102      	bne.n	8017446 <SCSI_Write10+0x2a>
  {
    return -1;
 8017440:	f04f 33ff 	mov.w	r3, #4294967295
 8017444:	e0ba      	b.n	80175bc <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017446:	697b      	ldr	r3, [r7, #20]
 8017448:	7a1b      	ldrb	r3, [r3, #8]
 801744a:	2b00      	cmp	r3, #0
 801744c:	f040 80b0 	bne.w	80175b0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8017450:	697b      	ldr	r3, [r7, #20]
 8017452:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8017456:	2b00      	cmp	r3, #0
 8017458:	d10a      	bne.n	8017470 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801745a:	697b      	ldr	r3, [r7, #20]
 801745c:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017460:	2320      	movs	r3, #32
 8017462:	2205      	movs	r2, #5
 8017464:	68f8      	ldr	r0, [r7, #12]
 8017466:	f7ff fdab 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 801746a:	f04f 33ff 	mov.w	r3, #4294967295
 801746e:	e0a5      	b.n	80175bc <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8017476:	b25b      	sxtb	r3, r3
 8017478:	2b00      	cmp	r3, #0
 801747a:	da0a      	bge.n	8017492 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801747c:	697b      	ldr	r3, [r7, #20]
 801747e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017482:	2320      	movs	r3, #32
 8017484:	2205      	movs	r2, #5
 8017486:	68f8      	ldr	r0, [r7, #12]
 8017488:	f7ff fd9a 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 801748c:	f04f 33ff 	mov.w	r3, #4294967295
 8017490:	e094      	b.n	80175bc <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017498:	68fa      	ldr	r2, [r7, #12]
 801749a:	33b0      	adds	r3, #176	@ 0xb0
 801749c:	009b      	lsls	r3, r3, #2
 801749e:	4413      	add	r3, r2
 80174a0:	685b      	ldr	r3, [r3, #4]
 80174a2:	689b      	ldr	r3, [r3, #8]
 80174a4:	7afa      	ldrb	r2, [r7, #11]
 80174a6:	4610      	mov	r0, r2
 80174a8:	4798      	blx	r3
 80174aa:	4603      	mov	r3, r0
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d008      	beq.n	80174c2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80174b0:	7af9      	ldrb	r1, [r7, #11]
 80174b2:	233a      	movs	r3, #58	@ 0x3a
 80174b4:	2202      	movs	r2, #2
 80174b6:	68f8      	ldr	r0, [r7, #12]
 80174b8:	f7ff fd82 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 80174bc:	f04f 33ff 	mov.w	r3, #4294967295
 80174c0:	e07c      	b.n	80175bc <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80174c8:	68fa      	ldr	r2, [r7, #12]
 80174ca:	33b0      	adds	r3, #176	@ 0xb0
 80174cc:	009b      	lsls	r3, r3, #2
 80174ce:	4413      	add	r3, r2
 80174d0:	685b      	ldr	r3, [r3, #4]
 80174d2:	68db      	ldr	r3, [r3, #12]
 80174d4:	7afa      	ldrb	r2, [r7, #11]
 80174d6:	4610      	mov	r0, r2
 80174d8:	4798      	blx	r3
 80174da:	4603      	mov	r3, r0
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d008      	beq.n	80174f2 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80174e0:	7af9      	ldrb	r1, [r7, #11]
 80174e2:	2327      	movs	r3, #39	@ 0x27
 80174e4:	2202      	movs	r2, #2
 80174e6:	68f8      	ldr	r0, [r7, #12]
 80174e8:	f7ff fd6a 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 80174ec:	f04f 33ff 	mov.w	r3, #4294967295
 80174f0:	e064      	b.n	80175bc <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	3302      	adds	r3, #2
 80174f6:	781b      	ldrb	r3, [r3, #0]
 80174f8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	3303      	adds	r3, #3
 80174fe:	781b      	ldrb	r3, [r3, #0]
 8017500:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017502:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	3304      	adds	r3, #4
 8017508:	781b      	ldrb	r3, [r3, #0]
 801750a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801750c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801750e:	687a      	ldr	r2, [r7, #4]
 8017510:	3205      	adds	r2, #5
 8017512:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8017514:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017516:	697b      	ldr	r3, [r7, #20]
 8017518:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	3307      	adds	r3, #7
 8017520:	781b      	ldrb	r3, [r3, #0]
 8017522:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8017524:	687a      	ldr	r2, [r7, #4]
 8017526:	3208      	adds	r2, #8
 8017528:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801752a:	431a      	orrs	r2, r3
 801752c:	697b      	ldr	r3, [r7, #20]
 801752e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017532:	697b      	ldr	r3, [r7, #20]
 8017534:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017538:	697b      	ldr	r3, [r7, #20]
 801753a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801753e:	7af9      	ldrb	r1, [r7, #11]
 8017540:	68f8      	ldr	r0, [r7, #12]
 8017542:	f000 f964 	bl	801780e <SCSI_CheckAddressRange>
 8017546:	4603      	mov	r3, r0
 8017548:	2b00      	cmp	r3, #0
 801754a:	da02      	bge.n	8017552 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801754c:	f04f 33ff 	mov.w	r3, #4294967295
 8017550:	e034      	b.n	80175bc <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017552:	697b      	ldr	r3, [r7, #20]
 8017554:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017558:	697a      	ldr	r2, [r7, #20]
 801755a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 801755e:	fb02 f303 	mul.w	r3, r2, r3
 8017562:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8017564:	697b      	ldr	r3, [r7, #20]
 8017566:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801756a:	693a      	ldr	r2, [r7, #16]
 801756c:	429a      	cmp	r2, r3
 801756e:	d00a      	beq.n	8017586 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017570:	697b      	ldr	r3, [r7, #20]
 8017572:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017576:	2320      	movs	r3, #32
 8017578:	2205      	movs	r2, #5
 801757a:	68f8      	ldr	r0, [r7, #12]
 801757c:	f7ff fd20 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 8017580:	f04f 33ff 	mov.w	r3, #4294967295
 8017584:	e01a      	b.n	80175bc <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801758c:	bf28      	it	cs
 801758e:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017592:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8017594:	697b      	ldr	r3, [r7, #20]
 8017596:	2201      	movs	r2, #1
 8017598:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801759a:	4b0a      	ldr	r3, [pc, #40]	@ (80175c4 <SCSI_Write10+0x1a8>)
 801759c:	7819      	ldrb	r1, [r3, #0]
 801759e:	697b      	ldr	r3, [r7, #20]
 80175a0:	f103 0210 	add.w	r2, r3, #16
 80175a4:	693b      	ldr	r3, [r7, #16]
 80175a6:	68f8      	ldr	r0, [r7, #12]
 80175a8:	f006 f90b 	bl	801d7c2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80175ac:	2300      	movs	r3, #0
 80175ae:	e005      	b.n	80175bc <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80175b0:	7afb      	ldrb	r3, [r7, #11]
 80175b2:	4619      	mov	r1, r3
 80175b4:	68f8      	ldr	r0, [r7, #12]
 80175b6:	f000 f9dd 	bl	8017974 <SCSI_ProcessWrite>
 80175ba:	4603      	mov	r3, r0
}
 80175bc:	4618      	mov	r0, r3
 80175be:	3718      	adds	r7, #24
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd80      	pop	{r7, pc}
 80175c4:	200000af 	.word	0x200000af

080175c8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b086      	sub	sp, #24
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	60f8      	str	r0, [r7, #12]
 80175d0:	460b      	mov	r3, r1
 80175d2:	607a      	str	r2, [r7, #4]
 80175d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	32b0      	adds	r2, #176	@ 0xb0
 80175e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175e4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d102      	bne.n	80175f2 <SCSI_Write12+0x2a>
  {
    return -1;
 80175ec:	f04f 33ff 	mov.w	r3, #4294967295
 80175f0:	e0ca      	b.n	8017788 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80175f2:	697b      	ldr	r3, [r7, #20]
 80175f4:	7a1b      	ldrb	r3, [r3, #8]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	f040 80c0 	bne.w	801777c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80175fc:	697b      	ldr	r3, [r7, #20]
 80175fe:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8017602:	2b00      	cmp	r3, #0
 8017604:	d10a      	bne.n	801761c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801760c:	2320      	movs	r3, #32
 801760e:	2205      	movs	r2, #5
 8017610:	68f8      	ldr	r0, [r7, #12]
 8017612:	f7ff fcd5 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 8017616:	f04f 33ff 	mov.w	r3, #4294967295
 801761a:	e0b5      	b.n	8017788 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8017622:	b25b      	sxtb	r3, r3
 8017624:	2b00      	cmp	r3, #0
 8017626:	da0a      	bge.n	801763e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017628:	697b      	ldr	r3, [r7, #20]
 801762a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801762e:	2320      	movs	r3, #32
 8017630:	2205      	movs	r2, #5
 8017632:	68f8      	ldr	r0, [r7, #12]
 8017634:	f7ff fcc4 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 8017638:	f04f 33ff 	mov.w	r3, #4294967295
 801763c:	e0a4      	b.n	8017788 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017644:	68fa      	ldr	r2, [r7, #12]
 8017646:	33b0      	adds	r3, #176	@ 0xb0
 8017648:	009b      	lsls	r3, r3, #2
 801764a:	4413      	add	r3, r2
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	689b      	ldr	r3, [r3, #8]
 8017650:	7afa      	ldrb	r2, [r7, #11]
 8017652:	4610      	mov	r0, r2
 8017654:	4798      	blx	r3
 8017656:	4603      	mov	r3, r0
 8017658:	2b00      	cmp	r3, #0
 801765a:	d00b      	beq.n	8017674 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801765c:	7af9      	ldrb	r1, [r7, #11]
 801765e:	233a      	movs	r3, #58	@ 0x3a
 8017660:	2202      	movs	r2, #2
 8017662:	68f8      	ldr	r0, [r7, #12]
 8017664:	f7ff fcac 	bl	8016fc0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8017668:	697b      	ldr	r3, [r7, #20]
 801766a:	2205      	movs	r2, #5
 801766c:	721a      	strb	r2, [r3, #8]
      return -1;
 801766e:	f04f 33ff 	mov.w	r3, #4294967295
 8017672:	e089      	b.n	8017788 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801767a:	68fa      	ldr	r2, [r7, #12]
 801767c:	33b0      	adds	r3, #176	@ 0xb0
 801767e:	009b      	lsls	r3, r3, #2
 8017680:	4413      	add	r3, r2
 8017682:	685b      	ldr	r3, [r3, #4]
 8017684:	68db      	ldr	r3, [r3, #12]
 8017686:	7afa      	ldrb	r2, [r7, #11]
 8017688:	4610      	mov	r0, r2
 801768a:	4798      	blx	r3
 801768c:	4603      	mov	r3, r0
 801768e:	2b00      	cmp	r3, #0
 8017690:	d00b      	beq.n	80176aa <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8017692:	7af9      	ldrb	r1, [r7, #11]
 8017694:	2327      	movs	r3, #39	@ 0x27
 8017696:	2202      	movs	r2, #2
 8017698:	68f8      	ldr	r0, [r7, #12]
 801769a:	f7ff fc91 	bl	8016fc0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801769e:	697b      	ldr	r3, [r7, #20]
 80176a0:	2205      	movs	r2, #5
 80176a2:	721a      	strb	r2, [r3, #8]
      return -1;
 80176a4:	f04f 33ff 	mov.w	r3, #4294967295
 80176a8:	e06e      	b.n	8017788 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	3302      	adds	r3, #2
 80176ae:	781b      	ldrb	r3, [r3, #0]
 80176b0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	3303      	adds	r3, #3
 80176b6:	781b      	ldrb	r3, [r3, #0]
 80176b8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176ba:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	3304      	adds	r3, #4
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80176c4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80176c6:	687a      	ldr	r2, [r7, #4]
 80176c8:	3205      	adds	r2, #5
 80176ca:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80176cc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176ce:	697b      	ldr	r3, [r7, #20]
 80176d0:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	3306      	adds	r3, #6
 80176d8:	781b      	ldrb	r3, [r3, #0]
 80176da:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	3307      	adds	r3, #7
 80176e0:	781b      	ldrb	r3, [r3, #0]
 80176e2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80176e4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	3308      	adds	r3, #8
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80176ee:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80176f0:	687a      	ldr	r2, [r7, #4]
 80176f2:	3209      	adds	r2, #9
 80176f4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80176f6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80176f8:	697b      	ldr	r3, [r7, #20]
 80176fa:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80176fe:	697b      	ldr	r3, [r7, #20]
 8017700:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017704:	697b      	ldr	r3, [r7, #20]
 8017706:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801770a:	7af9      	ldrb	r1, [r7, #11]
 801770c:	68f8      	ldr	r0, [r7, #12]
 801770e:	f000 f87e 	bl	801780e <SCSI_CheckAddressRange>
 8017712:	4603      	mov	r3, r0
 8017714:	2b00      	cmp	r3, #0
 8017716:	da02      	bge.n	801771e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017718:	f04f 33ff 	mov.w	r3, #4294967295
 801771c:	e034      	b.n	8017788 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801771e:	697b      	ldr	r3, [r7, #20]
 8017720:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017724:	697a      	ldr	r2, [r7, #20]
 8017726:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 801772a:	fb02 f303 	mul.w	r3, r2, r3
 801772e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8017730:	697b      	ldr	r3, [r7, #20]
 8017732:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8017736:	693a      	ldr	r2, [r7, #16]
 8017738:	429a      	cmp	r2, r3
 801773a:	d00a      	beq.n	8017752 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801773c:	697b      	ldr	r3, [r7, #20]
 801773e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017742:	2320      	movs	r3, #32
 8017744:	2205      	movs	r2, #5
 8017746:	68f8      	ldr	r0, [r7, #12]
 8017748:	f7ff fc3a 	bl	8016fc0 <SCSI_SenseCode>
      return -1;
 801774c:	f04f 33ff 	mov.w	r3, #4294967295
 8017750:	e01a      	b.n	8017788 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8017752:	693b      	ldr	r3, [r7, #16]
 8017754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017758:	bf28      	it	cs
 801775a:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 801775e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8017760:	697b      	ldr	r3, [r7, #20]
 8017762:	2201      	movs	r2, #1
 8017764:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8017766:	4b0a      	ldr	r3, [pc, #40]	@ (8017790 <SCSI_Write12+0x1c8>)
 8017768:	7819      	ldrb	r1, [r3, #0]
 801776a:	697b      	ldr	r3, [r7, #20]
 801776c:	f103 0210 	add.w	r2, r3, #16
 8017770:	693b      	ldr	r3, [r7, #16]
 8017772:	68f8      	ldr	r0, [r7, #12]
 8017774:	f006 f825 	bl	801d7c2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8017778:	2300      	movs	r3, #0
 801777a:	e005      	b.n	8017788 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 801777c:	7afb      	ldrb	r3, [r7, #11]
 801777e:	4619      	mov	r1, r3
 8017780:	68f8      	ldr	r0, [r7, #12]
 8017782:	f000 f8f7 	bl	8017974 <SCSI_ProcessWrite>
 8017786:	4603      	mov	r3, r0
}
 8017788:	4618      	mov	r0, r3
 801778a:	3718      	adds	r7, #24
 801778c:	46bd      	mov	sp, r7
 801778e:	bd80      	pop	{r7, pc}
 8017790:	200000af 	.word	0x200000af

08017794 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b086      	sub	sp, #24
 8017798:	af00      	add	r7, sp, #0
 801779a:	60f8      	str	r0, [r7, #12]
 801779c:	460b      	mov	r3, r1
 801779e:	607a      	str	r2, [r7, #4]
 80177a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	32b0      	adds	r2, #176	@ 0xb0
 80177ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80177b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80177b2:	697b      	ldr	r3, [r7, #20]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d102      	bne.n	80177be <SCSI_Verify10+0x2a>
  {
    return -1;
 80177b8:	f04f 33ff 	mov.w	r3, #4294967295
 80177bc:	e023      	b.n	8017806 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	3301      	adds	r3, #1
 80177c2:	781b      	ldrb	r3, [r3, #0]
 80177c4:	f003 0302 	and.w	r3, r3, #2
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d008      	beq.n	80177de <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80177cc:	7af9      	ldrb	r1, [r7, #11]
 80177ce:	2324      	movs	r3, #36	@ 0x24
 80177d0:	2205      	movs	r2, #5
 80177d2:	68f8      	ldr	r0, [r7, #12]
 80177d4:	f7ff fbf4 	bl	8016fc0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80177d8:	f04f 33ff 	mov.w	r3, #4294967295
 80177dc:	e013      	b.n	8017806 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80177e4:	697b      	ldr	r3, [r7, #20]
 80177e6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80177ea:	7af9      	ldrb	r1, [r7, #11]
 80177ec:	68f8      	ldr	r0, [r7, #12]
 80177ee:	f000 f80e 	bl	801780e <SCSI_CheckAddressRange>
 80177f2:	4603      	mov	r3, r0
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	da02      	bge.n	80177fe <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80177f8:	f04f 33ff 	mov.w	r3, #4294967295
 80177fc:	e003      	b.n	8017806 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	2200      	movs	r2, #0
 8017802:	60da      	str	r2, [r3, #12]

  return 0;
 8017804:	2300      	movs	r3, #0
}
 8017806:	4618      	mov	r0, r3
 8017808:	3718      	adds	r7, #24
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}

0801780e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801780e:	b580      	push	{r7, lr}
 8017810:	b086      	sub	sp, #24
 8017812:	af00      	add	r7, sp, #0
 8017814:	60f8      	str	r0, [r7, #12]
 8017816:	607a      	str	r2, [r7, #4]
 8017818:	603b      	str	r3, [r7, #0]
 801781a:	460b      	mov	r3, r1
 801781c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	32b0      	adds	r2, #176	@ 0xb0
 8017828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801782c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801782e:	697b      	ldr	r3, [r7, #20]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d102      	bne.n	801783a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8017834:	f04f 33ff 	mov.w	r3, #4294967295
 8017838:	e011      	b.n	801785e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801783a:	687a      	ldr	r2, [r7, #4]
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	441a      	add	r2, r3
 8017840:	697b      	ldr	r3, [r7, #20]
 8017842:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8017846:	429a      	cmp	r2, r3
 8017848:	d908      	bls.n	801785c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801784a:	7af9      	ldrb	r1, [r7, #11]
 801784c:	2321      	movs	r3, #33	@ 0x21
 801784e:	2205      	movs	r2, #5
 8017850:	68f8      	ldr	r0, [r7, #12]
 8017852:	f7ff fbb5 	bl	8016fc0 <SCSI_SenseCode>
    return -1;
 8017856:	f04f 33ff 	mov.w	r3, #4294967295
 801785a:	e000      	b.n	801785e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 801785c:	2300      	movs	r3, #0
}
 801785e:	4618      	mov	r0, r3
 8017860:	3718      	adds	r7, #24
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}
	...

08017868 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8017868:	b590      	push	{r4, r7, lr}
 801786a:	b085      	sub	sp, #20
 801786c:	af00      	add	r7, sp, #0
 801786e:	6078      	str	r0, [r7, #4]
 8017870:	460b      	mov	r3, r1
 8017872:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	32b0      	adds	r2, #176	@ 0xb0
 801787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017882:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d102      	bne.n	8017890 <SCSI_ProcessRead+0x28>
  {
    return -1;
 801788a:	f04f 33ff 	mov.w	r3, #4294967295
 801788e:	e06a      	b.n	8017966 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017896:	68fa      	ldr	r2, [r7, #12]
 8017898:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 801789c:	fb02 f303 	mul.w	r3, r2, r3
 80178a0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80178a8:	bf28      	it	cs
 80178aa:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80178ae:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80178b6:	687a      	ldr	r2, [r7, #4]
 80178b8:	33b0      	adds	r3, #176	@ 0xb0
 80178ba:	009b      	lsls	r3, r3, #2
 80178bc:	4413      	add	r3, r2
 80178be:	685b      	ldr	r3, [r3, #4]
 80178c0:	691c      	ldr	r4, [r3, #16]
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	f103 0110 	add.w	r1, r3, #16
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80178d4:	4618      	mov	r0, r3
 80178d6:	68bb      	ldr	r3, [r7, #8]
 80178d8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80178dc:	b29b      	uxth	r3, r3
 80178de:	78f8      	ldrb	r0, [r7, #3]
 80178e0:	47a0      	blx	r4
 80178e2:	4603      	mov	r3, r0
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	da08      	bge.n	80178fa <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80178e8:	78f9      	ldrb	r1, [r7, #3]
 80178ea:	2311      	movs	r3, #17
 80178ec:	2204      	movs	r2, #4
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f7ff fb66 	bl	8016fc0 <SCSI_SenseCode>
    return -1;
 80178f4:	f04f 33ff 	mov.w	r3, #4294967295
 80178f8:	e035      	b.n	8017966 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80178fa:	4b1d      	ldr	r3, [pc, #116]	@ (8017970 <SCSI_ProcessRead+0x108>)
 80178fc:	7819      	ldrb	r1, [r3, #0]
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	f103 0210 	add.w	r2, r3, #16
 8017904:	68bb      	ldr	r3, [r7, #8]
 8017906:	6878      	ldr	r0, [r7, #4]
 8017908:	f005 ff3a 	bl	801d780 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017918:	4619      	mov	r1, r3
 801791a:	68bb      	ldr	r3, [r7, #8]
 801791c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017920:	441a      	add	r2, r3
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017934:	4619      	mov	r1, r3
 8017936:	68bb      	ldr	r3, [r7, #8]
 8017938:	fbb3 f3f1 	udiv	r3, r3, r1
 801793c:	1ad2      	subs	r2, r2, r3
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 801794a:	68bb      	ldr	r3, [r7, #8]
 801794c:	1ad2      	subs	r2, r2, r3
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801795a:	2b00      	cmp	r3, #0
 801795c:	d102      	bne.n	8017964 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	2203      	movs	r2, #3
 8017962:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8017964:	2300      	movs	r3, #0
}
 8017966:	4618      	mov	r0, r3
 8017968:	3714      	adds	r7, #20
 801796a:	46bd      	mov	sp, r7
 801796c:	bd90      	pop	{r4, r7, pc}
 801796e:	bf00      	nop
 8017970:	200000ae 	.word	0x200000ae

08017974 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8017974:	b590      	push	{r4, r7, lr}
 8017976:	b085      	sub	sp, #20
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
 801797c:	460b      	mov	r3, r1
 801797e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	32b0      	adds	r2, #176	@ 0xb0
 801798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801798e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d102      	bne.n	801799c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8017996:	f04f 33ff 	mov.w	r3, #4294967295
 801799a:	e07a      	b.n	8017a92 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80179a2:	68fa      	ldr	r2, [r7, #12]
 80179a4:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 80179a8:	fb02 f303 	mul.w	r3, r2, r3
 80179ac:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80179ae:	68bb      	ldr	r3, [r7, #8]
 80179b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80179b4:	bf28      	it	cs
 80179b6:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80179ba:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80179c2:	687a      	ldr	r2, [r7, #4]
 80179c4:	33b0      	adds	r3, #176	@ 0xb0
 80179c6:	009b      	lsls	r3, r3, #2
 80179c8:	4413      	add	r3, r2
 80179ca:	685b      	ldr	r3, [r3, #4]
 80179cc:	695c      	ldr	r4, [r3, #20]
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	f103 0110 	add.w	r1, r3, #16
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80179e0:	4618      	mov	r0, r3
 80179e2:	68bb      	ldr	r3, [r7, #8]
 80179e4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80179e8:	b29b      	uxth	r3, r3
 80179ea:	78f8      	ldrb	r0, [r7, #3]
 80179ec:	47a0      	blx	r4
 80179ee:	4603      	mov	r3, r0
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	da08      	bge.n	8017a06 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80179f4:	78f9      	ldrb	r1, [r7, #3]
 80179f6:	2303      	movs	r3, #3
 80179f8:	2204      	movs	r2, #4
 80179fa:	6878      	ldr	r0, [r7, #4]
 80179fc:	f7ff fae0 	bl	8016fc0 <SCSI_SenseCode>
    return -1;
 8017a00:	f04f 33ff 	mov.w	r3, #4294967295
 8017a04:	e045      	b.n	8017a92 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a12:	4619      	mov	r1, r3
 8017a14:	68bb      	ldr	r3, [r7, #8]
 8017a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a1a:	441a      	add	r2, r3
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a2e:	4619      	mov	r1, r3
 8017a30:	68bb      	ldr	r3, [r7, #8]
 8017a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a36:	1ad2      	subs	r2, r2, r3
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8017a44:	68bb      	ldr	r3, [r7, #8]
 8017a46:	1ad2      	subs	r2, r2, r3
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d104      	bne.n	8017a62 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8017a58:	2100      	movs	r1, #0
 8017a5a:	6878      	ldr	r0, [r7, #4]
 8017a5c:	f7fe fce2 	bl	8016424 <MSC_BOT_SendCSW>
 8017a60:	e016      	b.n	8017a90 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017a68:	68fa      	ldr	r2, [r7, #12]
 8017a6a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017a6e:	fb02 f303 	mul.w	r3, r2, r3
 8017a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017a76:	bf28      	it	cs
 8017a78:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017a7c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8017a7e:	4b07      	ldr	r3, [pc, #28]	@ (8017a9c <SCSI_ProcessWrite+0x128>)
 8017a80:	7819      	ldrb	r1, [r3, #0]
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	f103 0210 	add.w	r2, r3, #16
 8017a88:	68bb      	ldr	r3, [r7, #8]
 8017a8a:	6878      	ldr	r0, [r7, #4]
 8017a8c:	f005 fe99 	bl	801d7c2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8017a90:	2300      	movs	r3, #0
}
 8017a92:	4618      	mov	r0, r3
 8017a94:	3714      	adds	r7, #20
 8017a96:	46bd      	mov	sp, r7
 8017a98:	bd90      	pop	{r4, r7, pc}
 8017a9a:	bf00      	nop
 8017a9c:	200000af 	.word	0x200000af

08017aa0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8017aa0:	b480      	push	{r7}
 8017aa2:	b087      	sub	sp, #28
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	60f8      	str	r0, [r7, #12]
 8017aa8:	60b9      	str	r1, [r7, #8]
 8017aaa:	4613      	mov	r3, r2
 8017aac:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8017aae:	88fb      	ldrh	r3, [r7, #6]
 8017ab0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d102      	bne.n	8017abe <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8017ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8017abc:	e013      	b.n	8017ae6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8017abe:	8afa      	ldrh	r2, [r7, #22]
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8017ac4:	e00b      	b.n	8017ade <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8017ac6:	8afb      	ldrh	r3, [r7, #22]
 8017ac8:	3b01      	subs	r3, #1
 8017aca:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8017acc:	8afb      	ldrh	r3, [r7, #22]
 8017ace:	68ba      	ldr	r2, [r7, #8]
 8017ad0:	441a      	add	r2, r3
 8017ad2:	8afb      	ldrh	r3, [r7, #22]
 8017ad4:	7811      	ldrb	r1, [r2, #0]
 8017ad6:	68fa      	ldr	r2, [r7, #12]
 8017ad8:	4413      	add	r3, r2
 8017ada:	460a      	mov	r2, r1
 8017adc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8017ade:	8afb      	ldrh	r3, [r7, #22]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d1f0      	bne.n	8017ac6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8017ae4:	2300      	movs	r3, #0
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	371c      	adds	r7, #28
 8017aea:	46bd      	mov	sp, r7
 8017aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af0:	4770      	bx	lr

08017af2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017af2:	b580      	push	{r7, lr}
 8017af4:	b086      	sub	sp, #24
 8017af6:	af00      	add	r7, sp, #0
 8017af8:	60f8      	str	r0, [r7, #12]
 8017afa:	60b9      	str	r1, [r7, #8]
 8017afc:	4613      	mov	r3, r2
 8017afe:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d101      	bne.n	8017b0a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017b06:	2303      	movs	r3, #3
 8017b08:	e01f      	b.n	8017b4a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	2200      	movs	r2, #0
 8017b16:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017b22:	68bb      	ldr	r3, [r7, #8]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d003      	beq.n	8017b30 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	68ba      	ldr	r2, [r7, #8]
 8017b2c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	2201      	movs	r2, #1
 8017b34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	79fa      	ldrb	r2, [r7, #7]
 8017b3c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017b3e:	68f8      	ldr	r0, [r7, #12]
 8017b40:	f005 fc94 	bl	801d46c <USBD_LL_Init>
 8017b44:	4603      	mov	r3, r0
 8017b46:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	3718      	adds	r7, #24
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bd80      	pop	{r7, pc}

08017b52 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8017b52:	b580      	push	{r7, lr}
 8017b54:	b084      	sub	sp, #16
 8017b56:	af00      	add	r7, sp, #0
 8017b58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8017b5a:	6878      	ldr	r0, [r7, #4]
 8017b5c:	f005 fd08 	bl	801d570 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	2201      	movs	r2, #1
 8017b64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d009      	beq.n	8017b86 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017b78:	685b      	ldr	r3, [r3, #4]
 8017b7a:	687a      	ldr	r2, [r7, #4]
 8017b7c:	6852      	ldr	r2, [r2, #4]
 8017b7e:	b2d2      	uxtb	r2, r2
 8017b80:	4611      	mov	r1, r2
 8017b82:	6878      	ldr	r0, [r7, #4]
 8017b84:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	2200      	movs	r2, #0
 8017b8a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	2200      	movs	r2, #0
 8017b92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	2200      	movs	r2, #0
 8017b9a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8017b9e:	6878      	ldr	r0, [r7, #4]
 8017ba0:	f005 fcb0 	bl	801d504 <USBD_LL_DeInit>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	73fb      	strb	r3, [r7, #15]

  return ret;
 8017ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8017baa:	4618      	mov	r0, r3
 8017bac:	3710      	adds	r7, #16
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd80      	pop	{r7, pc}

08017bb2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017bb2:	b580      	push	{r7, lr}
 8017bb4:	b084      	sub	sp, #16
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	6078      	str	r0, [r7, #4]
 8017bba:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017bc0:	683b      	ldr	r3, [r7, #0]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d101      	bne.n	8017bca <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017bc6:	2303      	movs	r3, #3
 8017bc8:	e025      	b.n	8017c16 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	683a      	ldr	r2, [r7, #0]
 8017bce:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	32ae      	adds	r2, #174	@ 0xae
 8017bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d00f      	beq.n	8017c06 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	32ae      	adds	r2, #174	@ 0xae
 8017bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017bf6:	f107 020e 	add.w	r2, r7, #14
 8017bfa:	4610      	mov	r0, r2
 8017bfc:	4798      	blx	r3
 8017bfe:	4602      	mov	r2, r0
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017c0c:	1c5a      	adds	r2, r3, #1
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8017c14:	2300      	movs	r3, #0
}
 8017c16:	4618      	mov	r0, r3
 8017c18:	3710      	adds	r7, #16
 8017c1a:	46bd      	mov	sp, r7
 8017c1c:	bd80      	pop	{r7, pc}

08017c1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017c1e:	b580      	push	{r7, lr}
 8017c20:	b082      	sub	sp, #8
 8017c22:	af00      	add	r7, sp, #0
 8017c24:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	f005 fc87 	bl	801d53a <USBD_LL_Start>
 8017c2c:	4603      	mov	r3, r0
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	3708      	adds	r7, #8
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}

08017c36 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8017c36:	b580      	push	{r7, lr}
 8017c38:	b082      	sub	sp, #8
 8017c3a:	af00      	add	r7, sp, #0
 8017c3c:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8017c3e:	6878      	ldr	r0, [r7, #4]
 8017c40:	f005 fc96 	bl	801d570 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d009      	beq.n	8017c62 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c54:	685b      	ldr	r3, [r3, #4]
 8017c56:	687a      	ldr	r2, [r7, #4]
 8017c58:	6852      	ldr	r2, [r2, #4]
 8017c5a:	b2d2      	uxtb	r2, r2
 8017c5c:	4611      	mov	r1, r2
 8017c5e:	6878      	ldr	r0, [r7, #4]
 8017c60:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8017c62:	2300      	movs	r3, #0
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	3708      	adds	r7, #8
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}

08017c6c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017c6c:	b480      	push	{r7}
 8017c6e:	b083      	sub	sp, #12
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017c74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8017c76:	4618      	mov	r0, r3
 8017c78:	370c      	adds	r7, #12
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c80:	4770      	bx	lr

08017c82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017c82:	b580      	push	{r7, lr}
 8017c84:	b084      	sub	sp, #16
 8017c86:	af00      	add	r7, sp, #0
 8017c88:	6078      	str	r0, [r7, #4]
 8017c8a:	460b      	mov	r3, r1
 8017c8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d009      	beq.n	8017cb0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	78fa      	ldrb	r2, [r7, #3]
 8017ca6:	4611      	mov	r1, r2
 8017ca8:	6878      	ldr	r0, [r7, #4]
 8017caa:	4798      	blx	r3
 8017cac:	4603      	mov	r3, r0
 8017cae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	3710      	adds	r7, #16
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	bd80      	pop	{r7, pc}

08017cba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017cba:	b580      	push	{r7, lr}
 8017cbc:	b084      	sub	sp, #16
 8017cbe:	af00      	add	r7, sp, #0
 8017cc0:	6078      	str	r0, [r7, #4]
 8017cc2:	460b      	mov	r3, r1
 8017cc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017cd0:	685b      	ldr	r3, [r3, #4]
 8017cd2:	78fa      	ldrb	r2, [r7, #3]
 8017cd4:	4611      	mov	r1, r2
 8017cd6:	6878      	ldr	r0, [r7, #4]
 8017cd8:	4798      	blx	r3
 8017cda:	4603      	mov	r3, r0
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d001      	beq.n	8017ce4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8017ce0:	2303      	movs	r3, #3
 8017ce2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	3710      	adds	r7, #16
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}

08017cee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017cee:	b580      	push	{r7, lr}
 8017cf0:	b084      	sub	sp, #16
 8017cf2:	af00      	add	r7, sp, #0
 8017cf4:	6078      	str	r0, [r7, #4]
 8017cf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017cfe:	6839      	ldr	r1, [r7, #0]
 8017d00:	4618      	mov	r0, r3
 8017d02:	f001 f90c 	bl	8018f1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	2201      	movs	r2, #1
 8017d0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8017d14:	461a      	mov	r2, r3
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017d22:	f003 031f 	and.w	r3, r3, #31
 8017d26:	2b02      	cmp	r3, #2
 8017d28:	d01a      	beq.n	8017d60 <USBD_LL_SetupStage+0x72>
 8017d2a:	2b02      	cmp	r3, #2
 8017d2c:	d822      	bhi.n	8017d74 <USBD_LL_SetupStage+0x86>
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d002      	beq.n	8017d38 <USBD_LL_SetupStage+0x4a>
 8017d32:	2b01      	cmp	r3, #1
 8017d34:	d00a      	beq.n	8017d4c <USBD_LL_SetupStage+0x5e>
 8017d36:	e01d      	b.n	8017d74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d3e:	4619      	mov	r1, r3
 8017d40:	6878      	ldr	r0, [r7, #4]
 8017d42:	f000 fb63 	bl	801840c <USBD_StdDevReq>
 8017d46:	4603      	mov	r3, r0
 8017d48:	73fb      	strb	r3, [r7, #15]
      break;
 8017d4a:	e020      	b.n	8017d8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d52:	4619      	mov	r1, r3
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f000 fbcb 	bl	80184f0 <USBD_StdItfReq>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8017d5e:	e016      	b.n	8017d8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d66:	4619      	mov	r1, r3
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f000 fc2d 	bl	80185c8 <USBD_StdEPReq>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	73fb      	strb	r3, [r7, #15]
      break;
 8017d72:	e00c      	b.n	8017d8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017d7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017d7e:	b2db      	uxtb	r3, r3
 8017d80:	4619      	mov	r1, r3
 8017d82:	6878      	ldr	r0, [r7, #4]
 8017d84:	f005 fc73 	bl	801d66e <USBD_LL_StallEP>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8017d8c:	bf00      	nop
  }

  return ret;
 8017d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d90:	4618      	mov	r0, r3
 8017d92:	3710      	adds	r7, #16
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bd80      	pop	{r7, pc}

08017d98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b086      	sub	sp, #24
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	60f8      	str	r0, [r7, #12]
 8017da0:	460b      	mov	r3, r1
 8017da2:	607a      	str	r2, [r7, #4]
 8017da4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8017da6:	2300      	movs	r3, #0
 8017da8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8017daa:	7afb      	ldrb	r3, [r7, #11]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d16e      	bne.n	8017e8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8017db6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017dbe:	2b03      	cmp	r3, #3
 8017dc0:	f040 8098 	bne.w	8017ef4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8017dc4:	693b      	ldr	r3, [r7, #16]
 8017dc6:	689a      	ldr	r2, [r3, #8]
 8017dc8:	693b      	ldr	r3, [r7, #16]
 8017dca:	68db      	ldr	r3, [r3, #12]
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	d913      	bls.n	8017df8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8017dd0:	693b      	ldr	r3, [r7, #16]
 8017dd2:	689a      	ldr	r2, [r3, #8]
 8017dd4:	693b      	ldr	r3, [r7, #16]
 8017dd6:	68db      	ldr	r3, [r3, #12]
 8017dd8:	1ad2      	subs	r2, r2, r3
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017dde:	693b      	ldr	r3, [r7, #16]
 8017de0:	68da      	ldr	r2, [r3, #12]
 8017de2:	693b      	ldr	r3, [r7, #16]
 8017de4:	689b      	ldr	r3, [r3, #8]
 8017de6:	4293      	cmp	r3, r2
 8017de8:	bf28      	it	cs
 8017dea:	4613      	movcs	r3, r2
 8017dec:	461a      	mov	r2, r3
 8017dee:	6879      	ldr	r1, [r7, #4]
 8017df0:	68f8      	ldr	r0, [r7, #12]
 8017df2:	f001 f96b 	bl	80190cc <USBD_CtlContinueRx>
 8017df6:	e07d      	b.n	8017ef4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017dfe:	f003 031f 	and.w	r3, r3, #31
 8017e02:	2b02      	cmp	r3, #2
 8017e04:	d014      	beq.n	8017e30 <USBD_LL_DataOutStage+0x98>
 8017e06:	2b02      	cmp	r3, #2
 8017e08:	d81d      	bhi.n	8017e46 <USBD_LL_DataOutStage+0xae>
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d002      	beq.n	8017e14 <USBD_LL_DataOutStage+0x7c>
 8017e0e:	2b01      	cmp	r3, #1
 8017e10:	d003      	beq.n	8017e1a <USBD_LL_DataOutStage+0x82>
 8017e12:	e018      	b.n	8017e46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8017e14:	2300      	movs	r3, #0
 8017e16:	75bb      	strb	r3, [r7, #22]
            break;
 8017e18:	e018      	b.n	8017e4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017e20:	b2db      	uxtb	r3, r3
 8017e22:	4619      	mov	r1, r3
 8017e24:	68f8      	ldr	r0, [r7, #12]
 8017e26:	f000 fa64 	bl	80182f2 <USBD_CoreFindIF>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	75bb      	strb	r3, [r7, #22]
            break;
 8017e2e:	e00d      	b.n	8017e4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017e36:	b2db      	uxtb	r3, r3
 8017e38:	4619      	mov	r1, r3
 8017e3a:	68f8      	ldr	r0, [r7, #12]
 8017e3c:	f000 fa66 	bl	801830c <USBD_CoreFindEP>
 8017e40:	4603      	mov	r3, r0
 8017e42:	75bb      	strb	r3, [r7, #22]
            break;
 8017e44:	e002      	b.n	8017e4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8017e46:	2300      	movs	r3, #0
 8017e48:	75bb      	strb	r3, [r7, #22]
            break;
 8017e4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017e4c:	7dbb      	ldrb	r3, [r7, #22]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d119      	bne.n	8017e86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017e58:	b2db      	uxtb	r3, r3
 8017e5a:	2b03      	cmp	r3, #3
 8017e5c:	d113      	bne.n	8017e86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017e5e:	7dba      	ldrb	r2, [r7, #22]
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	32ae      	adds	r2, #174	@ 0xae
 8017e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e68:	691b      	ldr	r3, [r3, #16]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d00b      	beq.n	8017e86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017e6e:	7dba      	ldrb	r2, [r7, #22]
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8017e76:	7dba      	ldrb	r2, [r7, #22]
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	32ae      	adds	r2, #174	@ 0xae
 8017e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e80:	691b      	ldr	r3, [r3, #16]
 8017e82:	68f8      	ldr	r0, [r7, #12]
 8017e84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017e86:	68f8      	ldr	r0, [r7, #12]
 8017e88:	f001 f931 	bl	80190ee <USBD_CtlSendStatus>
 8017e8c:	e032      	b.n	8017ef4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8017e8e:	7afb      	ldrb	r3, [r7, #11]
 8017e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017e94:	b2db      	uxtb	r3, r3
 8017e96:	4619      	mov	r1, r3
 8017e98:	68f8      	ldr	r0, [r7, #12]
 8017e9a:	f000 fa37 	bl	801830c <USBD_CoreFindEP>
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017ea2:	7dbb      	ldrb	r3, [r7, #22]
 8017ea4:	2bff      	cmp	r3, #255	@ 0xff
 8017ea6:	d025      	beq.n	8017ef4 <USBD_LL_DataOutStage+0x15c>
 8017ea8:	7dbb      	ldrb	r3, [r7, #22]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d122      	bne.n	8017ef4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017eb4:	b2db      	uxtb	r3, r3
 8017eb6:	2b03      	cmp	r3, #3
 8017eb8:	d117      	bne.n	8017eea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8017eba:	7dba      	ldrb	r2, [r7, #22]
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	32ae      	adds	r2, #174	@ 0xae
 8017ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ec4:	699b      	ldr	r3, [r3, #24]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d00f      	beq.n	8017eea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8017eca:	7dba      	ldrb	r2, [r7, #22]
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8017ed2:	7dba      	ldrb	r2, [r7, #22]
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	32ae      	adds	r2, #174	@ 0xae
 8017ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017edc:	699b      	ldr	r3, [r3, #24]
 8017ede:	7afa      	ldrb	r2, [r7, #11]
 8017ee0:	4611      	mov	r1, r2
 8017ee2:	68f8      	ldr	r0, [r7, #12]
 8017ee4:	4798      	blx	r3
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8017eea:	7dfb      	ldrb	r3, [r7, #23]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d001      	beq.n	8017ef4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8017ef0:	7dfb      	ldrb	r3, [r7, #23]
 8017ef2:	e000      	b.n	8017ef6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8017ef4:	2300      	movs	r3, #0
}
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	3718      	adds	r7, #24
 8017efa:	46bd      	mov	sp, r7
 8017efc:	bd80      	pop	{r7, pc}

08017efe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017efe:	b580      	push	{r7, lr}
 8017f00:	b086      	sub	sp, #24
 8017f02:	af00      	add	r7, sp, #0
 8017f04:	60f8      	str	r0, [r7, #12]
 8017f06:	460b      	mov	r3, r1
 8017f08:	607a      	str	r2, [r7, #4]
 8017f0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8017f0c:	7afb      	ldrb	r3, [r7, #11]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d16f      	bne.n	8017ff2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	3314      	adds	r3, #20
 8017f16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017f1e:	2b02      	cmp	r3, #2
 8017f20:	d15a      	bne.n	8017fd8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8017f22:	693b      	ldr	r3, [r7, #16]
 8017f24:	689a      	ldr	r2, [r3, #8]
 8017f26:	693b      	ldr	r3, [r7, #16]
 8017f28:	68db      	ldr	r3, [r3, #12]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d914      	bls.n	8017f58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017f2e:	693b      	ldr	r3, [r7, #16]
 8017f30:	689a      	ldr	r2, [r3, #8]
 8017f32:	693b      	ldr	r3, [r7, #16]
 8017f34:	68db      	ldr	r3, [r3, #12]
 8017f36:	1ad2      	subs	r2, r2, r3
 8017f38:	693b      	ldr	r3, [r7, #16]
 8017f3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017f3c:	693b      	ldr	r3, [r7, #16]
 8017f3e:	689b      	ldr	r3, [r3, #8]
 8017f40:	461a      	mov	r2, r3
 8017f42:	6879      	ldr	r1, [r7, #4]
 8017f44:	68f8      	ldr	r0, [r7, #12]
 8017f46:	f001 f8b0 	bl	80190aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	2100      	movs	r1, #0
 8017f50:	68f8      	ldr	r0, [r7, #12]
 8017f52:	f005 fc36 	bl	801d7c2 <USBD_LL_PrepareReceive>
 8017f56:	e03f      	b.n	8017fd8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017f58:	693b      	ldr	r3, [r7, #16]
 8017f5a:	68da      	ldr	r2, [r3, #12]
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	689b      	ldr	r3, [r3, #8]
 8017f60:	429a      	cmp	r2, r3
 8017f62:	d11c      	bne.n	8017f9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017f64:	693b      	ldr	r3, [r7, #16]
 8017f66:	685a      	ldr	r2, [r3, #4]
 8017f68:	693b      	ldr	r3, [r7, #16]
 8017f6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017f6c:	429a      	cmp	r2, r3
 8017f6e:	d316      	bcc.n	8017f9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017f70:	693b      	ldr	r3, [r7, #16]
 8017f72:	685a      	ldr	r2, [r3, #4]
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d20f      	bcs.n	8017f9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017f7e:	2200      	movs	r2, #0
 8017f80:	2100      	movs	r1, #0
 8017f82:	68f8      	ldr	r0, [r7, #12]
 8017f84:	f001 f891 	bl	80190aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f90:	2300      	movs	r3, #0
 8017f92:	2200      	movs	r2, #0
 8017f94:	2100      	movs	r1, #0
 8017f96:	68f8      	ldr	r0, [r7, #12]
 8017f98:	f005 fc13 	bl	801d7c2 <USBD_LL_PrepareReceive>
 8017f9c:	e01c      	b.n	8017fd8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017fa4:	b2db      	uxtb	r3, r3
 8017fa6:	2b03      	cmp	r3, #3
 8017fa8:	d10f      	bne.n	8017fca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017fb0:	68db      	ldr	r3, [r3, #12]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d009      	beq.n	8017fca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	2200      	movs	r2, #0
 8017fba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017fc4:	68db      	ldr	r3, [r3, #12]
 8017fc6:	68f8      	ldr	r0, [r7, #12]
 8017fc8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017fca:	2180      	movs	r1, #128	@ 0x80
 8017fcc:	68f8      	ldr	r0, [r7, #12]
 8017fce:	f005 fb4e 	bl	801d66e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017fd2:	68f8      	ldr	r0, [r7, #12]
 8017fd4:	f001 f89e 	bl	8019114 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d03a      	beq.n	8018058 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8017fe2:	68f8      	ldr	r0, [r7, #12]
 8017fe4:	f7ff fe42 	bl	8017c6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	2200      	movs	r2, #0
 8017fec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8017ff0:	e032      	b.n	8018058 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8017ff2:	7afb      	ldrb	r3, [r7, #11]
 8017ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017ff8:	b2db      	uxtb	r3, r3
 8017ffa:	4619      	mov	r1, r3
 8017ffc:	68f8      	ldr	r0, [r7, #12]
 8017ffe:	f000 f985 	bl	801830c <USBD_CoreFindEP>
 8018002:	4603      	mov	r3, r0
 8018004:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018006:	7dfb      	ldrb	r3, [r7, #23]
 8018008:	2bff      	cmp	r3, #255	@ 0xff
 801800a:	d025      	beq.n	8018058 <USBD_LL_DataInStage+0x15a>
 801800c:	7dfb      	ldrb	r3, [r7, #23]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d122      	bne.n	8018058 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018018:	b2db      	uxtb	r3, r3
 801801a:	2b03      	cmp	r3, #3
 801801c:	d11c      	bne.n	8018058 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801801e:	7dfa      	ldrb	r2, [r7, #23]
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	32ae      	adds	r2, #174	@ 0xae
 8018024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018028:	695b      	ldr	r3, [r3, #20]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d014      	beq.n	8018058 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801802e:	7dfa      	ldrb	r2, [r7, #23]
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8018036:	7dfa      	ldrb	r2, [r7, #23]
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	32ae      	adds	r2, #174	@ 0xae
 801803c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018040:	695b      	ldr	r3, [r3, #20]
 8018042:	7afa      	ldrb	r2, [r7, #11]
 8018044:	4611      	mov	r1, r2
 8018046:	68f8      	ldr	r0, [r7, #12]
 8018048:	4798      	blx	r3
 801804a:	4603      	mov	r3, r0
 801804c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801804e:	7dbb      	ldrb	r3, [r7, #22]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d001      	beq.n	8018058 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8018054:	7dbb      	ldrb	r3, [r7, #22]
 8018056:	e000      	b.n	801805a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8018058:	2300      	movs	r3, #0
}
 801805a:	4618      	mov	r0, r3
 801805c:	3718      	adds	r7, #24
 801805e:	46bd      	mov	sp, r7
 8018060:	bd80      	pop	{r7, pc}

08018062 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018062:	b580      	push	{r7, lr}
 8018064:	b084      	sub	sp, #16
 8018066:	af00      	add	r7, sp, #0
 8018068:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801806a:	2300      	movs	r3, #0
 801806c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	2201      	movs	r2, #1
 8018072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	2200      	movs	r2, #0
 801807a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	2200      	movs	r2, #0
 8018082:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2200      	movs	r2, #0
 8018088:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	2200      	movs	r2, #0
 8018090:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801809a:	2b00      	cmp	r3, #0
 801809c:	d014      	beq.n	80180c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180a4:	685b      	ldr	r3, [r3, #4]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d00e      	beq.n	80180c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180b0:	685b      	ldr	r3, [r3, #4]
 80180b2:	687a      	ldr	r2, [r7, #4]
 80180b4:	6852      	ldr	r2, [r2, #4]
 80180b6:	b2d2      	uxtb	r2, r2
 80180b8:	4611      	mov	r1, r2
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	4798      	blx	r3
 80180be:	4603      	mov	r3, r0
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d001      	beq.n	80180c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80180c4:	2303      	movs	r3, #3
 80180c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80180c8:	2340      	movs	r3, #64	@ 0x40
 80180ca:	2200      	movs	r2, #0
 80180cc:	2100      	movs	r1, #0
 80180ce:	6878      	ldr	r0, [r7, #4]
 80180d0:	f005 fa69 	bl	801d5a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	2201      	movs	r2, #1
 80180d8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2240      	movs	r2, #64	@ 0x40
 80180e0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80180e4:	2340      	movs	r3, #64	@ 0x40
 80180e6:	2200      	movs	r2, #0
 80180e8:	2180      	movs	r1, #128	@ 0x80
 80180ea:	6878      	ldr	r0, [r7, #4]
 80180ec:	f005 fa5b 	bl	801d5a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2201      	movs	r2, #1
 80180f4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	2240      	movs	r2, #64	@ 0x40
 80180fa:	621a      	str	r2, [r3, #32]

  return ret;
 80180fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80180fe:	4618      	mov	r0, r3
 8018100:	3710      	adds	r7, #16
 8018102:	46bd      	mov	sp, r7
 8018104:	bd80      	pop	{r7, pc}

08018106 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018106:	b480      	push	{r7}
 8018108:	b083      	sub	sp, #12
 801810a:	af00      	add	r7, sp, #0
 801810c:	6078      	str	r0, [r7, #4]
 801810e:	460b      	mov	r3, r1
 8018110:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	78fa      	ldrb	r2, [r7, #3]
 8018116:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018118:	2300      	movs	r3, #0
}
 801811a:	4618      	mov	r0, r3
 801811c:	370c      	adds	r7, #12
 801811e:	46bd      	mov	sp, r7
 8018120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018124:	4770      	bx	lr

08018126 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018126:	b480      	push	{r7}
 8018128:	b083      	sub	sp, #12
 801812a:	af00      	add	r7, sp, #0
 801812c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018134:	b2db      	uxtb	r3, r3
 8018136:	2b04      	cmp	r3, #4
 8018138:	d006      	beq.n	8018148 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018140:	b2da      	uxtb	r2, r3
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	2204      	movs	r2, #4
 801814c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8018150:	2300      	movs	r3, #0
}
 8018152:	4618      	mov	r0, r3
 8018154:	370c      	adds	r7, #12
 8018156:	46bd      	mov	sp, r7
 8018158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815c:	4770      	bx	lr

0801815e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801815e:	b480      	push	{r7}
 8018160:	b083      	sub	sp, #12
 8018162:	af00      	add	r7, sp, #0
 8018164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801816c:	b2db      	uxtb	r3, r3
 801816e:	2b04      	cmp	r3, #4
 8018170:	d106      	bne.n	8018180 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8018178:	b2da      	uxtb	r2, r3
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8018180:	2300      	movs	r3, #0
}
 8018182:	4618      	mov	r0, r3
 8018184:	370c      	adds	r7, #12
 8018186:	46bd      	mov	sp, r7
 8018188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818c:	4770      	bx	lr

0801818e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801818e:	b580      	push	{r7, lr}
 8018190:	b082      	sub	sp, #8
 8018192:	af00      	add	r7, sp, #0
 8018194:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801819c:	b2db      	uxtb	r3, r3
 801819e:	2b03      	cmp	r3, #3
 80181a0:	d110      	bne.n	80181c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d00b      	beq.n	80181c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181b2:	69db      	ldr	r3, [r3, #28]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d005      	beq.n	80181c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181be:	69db      	ldr	r3, [r3, #28]
 80181c0:	6878      	ldr	r0, [r7, #4]
 80181c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80181c4:	2300      	movs	r3, #0
}
 80181c6:	4618      	mov	r0, r3
 80181c8:	3708      	adds	r7, #8
 80181ca:	46bd      	mov	sp, r7
 80181cc:	bd80      	pop	{r7, pc}

080181ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80181ce:	b580      	push	{r7, lr}
 80181d0:	b082      	sub	sp, #8
 80181d2:	af00      	add	r7, sp, #0
 80181d4:	6078      	str	r0, [r7, #4]
 80181d6:	460b      	mov	r3, r1
 80181d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	32ae      	adds	r2, #174	@ 0xae
 80181e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d101      	bne.n	80181f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80181ec:	2303      	movs	r3, #3
 80181ee:	e01c      	b.n	801822a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181f6:	b2db      	uxtb	r3, r3
 80181f8:	2b03      	cmp	r3, #3
 80181fa:	d115      	bne.n	8018228 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	32ae      	adds	r2, #174	@ 0xae
 8018206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801820a:	6a1b      	ldr	r3, [r3, #32]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d00b      	beq.n	8018228 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	32ae      	adds	r2, #174	@ 0xae
 801821a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801821e:	6a1b      	ldr	r3, [r3, #32]
 8018220:	78fa      	ldrb	r2, [r7, #3]
 8018222:	4611      	mov	r1, r2
 8018224:	6878      	ldr	r0, [r7, #4]
 8018226:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018228:	2300      	movs	r3, #0
}
 801822a:	4618      	mov	r0, r3
 801822c:	3708      	adds	r7, #8
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}

08018232 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8018232:	b580      	push	{r7, lr}
 8018234:	b082      	sub	sp, #8
 8018236:	af00      	add	r7, sp, #0
 8018238:	6078      	str	r0, [r7, #4]
 801823a:	460b      	mov	r3, r1
 801823c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	32ae      	adds	r2, #174	@ 0xae
 8018248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d101      	bne.n	8018254 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8018250:	2303      	movs	r3, #3
 8018252:	e01c      	b.n	801828e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801825a:	b2db      	uxtb	r3, r3
 801825c:	2b03      	cmp	r3, #3
 801825e:	d115      	bne.n	801828c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	32ae      	adds	r2, #174	@ 0xae
 801826a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018270:	2b00      	cmp	r3, #0
 8018272:	d00b      	beq.n	801828c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	32ae      	adds	r2, #174	@ 0xae
 801827e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018284:	78fa      	ldrb	r2, [r7, #3]
 8018286:	4611      	mov	r1, r2
 8018288:	6878      	ldr	r0, [r7, #4]
 801828a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801828c:	2300      	movs	r3, #0
}
 801828e:	4618      	mov	r0, r3
 8018290:	3708      	adds	r7, #8
 8018292:	46bd      	mov	sp, r7
 8018294:	bd80      	pop	{r7, pc}

08018296 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018296:	b480      	push	{r7}
 8018298:	b083      	sub	sp, #12
 801829a:	af00      	add	r7, sp, #0
 801829c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801829e:	2300      	movs	r3, #0
}
 80182a0:	4618      	mov	r0, r3
 80182a2:	370c      	adds	r7, #12
 80182a4:	46bd      	mov	sp, r7
 80182a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182aa:	4770      	bx	lr

080182ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b084      	sub	sp, #16
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80182b4:	2300      	movs	r3, #0
 80182b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	2201      	movs	r2, #1
 80182bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d00e      	beq.n	80182e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80182d0:	685b      	ldr	r3, [r3, #4]
 80182d2:	687a      	ldr	r2, [r7, #4]
 80182d4:	6852      	ldr	r2, [r2, #4]
 80182d6:	b2d2      	uxtb	r2, r2
 80182d8:	4611      	mov	r1, r2
 80182da:	6878      	ldr	r0, [r7, #4]
 80182dc:	4798      	blx	r3
 80182de:	4603      	mov	r3, r0
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d001      	beq.n	80182e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80182e4:	2303      	movs	r3, #3
 80182e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80182e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80182ea:	4618      	mov	r0, r3
 80182ec:	3710      	adds	r7, #16
 80182ee:	46bd      	mov	sp, r7
 80182f0:	bd80      	pop	{r7, pc}

080182f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80182f2:	b480      	push	{r7}
 80182f4:	b083      	sub	sp, #12
 80182f6:	af00      	add	r7, sp, #0
 80182f8:	6078      	str	r0, [r7, #4]
 80182fa:	460b      	mov	r3, r1
 80182fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80182fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018300:	4618      	mov	r0, r3
 8018302:	370c      	adds	r7, #12
 8018304:	46bd      	mov	sp, r7
 8018306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801830a:	4770      	bx	lr

0801830c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801830c:	b480      	push	{r7}
 801830e:	b083      	sub	sp, #12
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
 8018314:	460b      	mov	r3, r1
 8018316:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018318:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801831a:	4618      	mov	r0, r3
 801831c:	370c      	adds	r7, #12
 801831e:	46bd      	mov	sp, r7
 8018320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018324:	4770      	bx	lr

08018326 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8018326:	b580      	push	{r7, lr}
 8018328:	b086      	sub	sp, #24
 801832a:	af00      	add	r7, sp, #0
 801832c:	6078      	str	r0, [r7, #4]
 801832e:	460b      	mov	r3, r1
 8018330:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801833a:	2300      	movs	r3, #0
 801833c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	885b      	ldrh	r3, [r3, #2]
 8018342:	b29b      	uxth	r3, r3
 8018344:	68fa      	ldr	r2, [r7, #12]
 8018346:	7812      	ldrb	r2, [r2, #0]
 8018348:	4293      	cmp	r3, r2
 801834a:	d91f      	bls.n	801838c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	781b      	ldrb	r3, [r3, #0]
 8018350:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8018352:	e013      	b.n	801837c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8018354:	f107 030a 	add.w	r3, r7, #10
 8018358:	4619      	mov	r1, r3
 801835a:	6978      	ldr	r0, [r7, #20]
 801835c:	f000 f81b 	bl	8018396 <USBD_GetNextDesc>
 8018360:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8018362:	697b      	ldr	r3, [r7, #20]
 8018364:	785b      	ldrb	r3, [r3, #1]
 8018366:	2b05      	cmp	r3, #5
 8018368:	d108      	bne.n	801837c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801836a:	697b      	ldr	r3, [r7, #20]
 801836c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801836e:	693b      	ldr	r3, [r7, #16]
 8018370:	789b      	ldrb	r3, [r3, #2]
 8018372:	78fa      	ldrb	r2, [r7, #3]
 8018374:	429a      	cmp	r2, r3
 8018376:	d008      	beq.n	801838a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8018378:	2300      	movs	r3, #0
 801837a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	885b      	ldrh	r3, [r3, #2]
 8018380:	b29a      	uxth	r2, r3
 8018382:	897b      	ldrh	r3, [r7, #10]
 8018384:	429a      	cmp	r2, r3
 8018386:	d8e5      	bhi.n	8018354 <USBD_GetEpDesc+0x2e>
 8018388:	e000      	b.n	801838c <USBD_GetEpDesc+0x66>
          break;
 801838a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801838c:	693b      	ldr	r3, [r7, #16]
}
 801838e:	4618      	mov	r0, r3
 8018390:	3718      	adds	r7, #24
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}

08018396 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8018396:	b480      	push	{r7}
 8018398:	b085      	sub	sp, #20
 801839a:	af00      	add	r7, sp, #0
 801839c:	6078      	str	r0, [r7, #4]
 801839e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	881b      	ldrh	r3, [r3, #0]
 80183a8:	68fa      	ldr	r2, [r7, #12]
 80183aa:	7812      	ldrb	r2, [r2, #0]
 80183ac:	4413      	add	r3, r2
 80183ae:	b29a      	uxth	r2, r3
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	461a      	mov	r2, r3
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	4413      	add	r3, r2
 80183be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80183c0:	68fb      	ldr	r3, [r7, #12]
}
 80183c2:	4618      	mov	r0, r3
 80183c4:	3714      	adds	r7, #20
 80183c6:	46bd      	mov	sp, r7
 80183c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183cc:	4770      	bx	lr

080183ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80183ce:	b480      	push	{r7}
 80183d0:	b087      	sub	sp, #28
 80183d2:	af00      	add	r7, sp, #0
 80183d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80183da:	697b      	ldr	r3, [r7, #20]
 80183dc:	781b      	ldrb	r3, [r3, #0]
 80183de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	3301      	adds	r3, #1
 80183e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80183e6:	697b      	ldr	r3, [r7, #20]
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80183ec:	8a3b      	ldrh	r3, [r7, #16]
 80183ee:	021b      	lsls	r3, r3, #8
 80183f0:	b21a      	sxth	r2, r3
 80183f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80183f6:	4313      	orrs	r3, r2
 80183f8:	b21b      	sxth	r3, r3
 80183fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80183fc:	89fb      	ldrh	r3, [r7, #14]
}
 80183fe:	4618      	mov	r0, r3
 8018400:	371c      	adds	r7, #28
 8018402:	46bd      	mov	sp, r7
 8018404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018408:	4770      	bx	lr
	...

0801840c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b084      	sub	sp, #16
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018416:	2300      	movs	r3, #0
 8018418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801841a:	683b      	ldr	r3, [r7, #0]
 801841c:	781b      	ldrb	r3, [r3, #0]
 801841e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018422:	2b40      	cmp	r3, #64	@ 0x40
 8018424:	d005      	beq.n	8018432 <USBD_StdDevReq+0x26>
 8018426:	2b40      	cmp	r3, #64	@ 0x40
 8018428:	d857      	bhi.n	80184da <USBD_StdDevReq+0xce>
 801842a:	2b00      	cmp	r3, #0
 801842c:	d00f      	beq.n	801844e <USBD_StdDevReq+0x42>
 801842e:	2b20      	cmp	r3, #32
 8018430:	d153      	bne.n	80184da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	32ae      	adds	r2, #174	@ 0xae
 801843c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018440:	689b      	ldr	r3, [r3, #8]
 8018442:	6839      	ldr	r1, [r7, #0]
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	4798      	blx	r3
 8018448:	4603      	mov	r3, r0
 801844a:	73fb      	strb	r3, [r7, #15]
      break;
 801844c:	e04a      	b.n	80184e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801844e:	683b      	ldr	r3, [r7, #0]
 8018450:	785b      	ldrb	r3, [r3, #1]
 8018452:	2b09      	cmp	r3, #9
 8018454:	d83b      	bhi.n	80184ce <USBD_StdDevReq+0xc2>
 8018456:	a201      	add	r2, pc, #4	@ (adr r2, 801845c <USBD_StdDevReq+0x50>)
 8018458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801845c:	080184b1 	.word	0x080184b1
 8018460:	080184c5 	.word	0x080184c5
 8018464:	080184cf 	.word	0x080184cf
 8018468:	080184bb 	.word	0x080184bb
 801846c:	080184cf 	.word	0x080184cf
 8018470:	0801848f 	.word	0x0801848f
 8018474:	08018485 	.word	0x08018485
 8018478:	080184cf 	.word	0x080184cf
 801847c:	080184a7 	.word	0x080184a7
 8018480:	08018499 	.word	0x08018499
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018484:	6839      	ldr	r1, [r7, #0]
 8018486:	6878      	ldr	r0, [r7, #4]
 8018488:	f000 fa3c 	bl	8018904 <USBD_GetDescriptor>
          break;
 801848c:	e024      	b.n	80184d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801848e:	6839      	ldr	r1, [r7, #0]
 8018490:	6878      	ldr	r0, [r7, #4]
 8018492:	f000 fba1 	bl	8018bd8 <USBD_SetAddress>
          break;
 8018496:	e01f      	b.n	80184d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018498:	6839      	ldr	r1, [r7, #0]
 801849a:	6878      	ldr	r0, [r7, #4]
 801849c:	f000 fbe0 	bl	8018c60 <USBD_SetConfig>
 80184a0:	4603      	mov	r3, r0
 80184a2:	73fb      	strb	r3, [r7, #15]
          break;
 80184a4:	e018      	b.n	80184d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80184a6:	6839      	ldr	r1, [r7, #0]
 80184a8:	6878      	ldr	r0, [r7, #4]
 80184aa:	f000 fc83 	bl	8018db4 <USBD_GetConfig>
          break;
 80184ae:	e013      	b.n	80184d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80184b0:	6839      	ldr	r1, [r7, #0]
 80184b2:	6878      	ldr	r0, [r7, #4]
 80184b4:	f000 fcb4 	bl	8018e20 <USBD_GetStatus>
          break;
 80184b8:	e00e      	b.n	80184d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80184ba:	6839      	ldr	r1, [r7, #0]
 80184bc:	6878      	ldr	r0, [r7, #4]
 80184be:	f000 fce3 	bl	8018e88 <USBD_SetFeature>
          break;
 80184c2:	e009      	b.n	80184d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80184c4:	6839      	ldr	r1, [r7, #0]
 80184c6:	6878      	ldr	r0, [r7, #4]
 80184c8:	f000 fd07 	bl	8018eda <USBD_ClrFeature>
          break;
 80184cc:	e004      	b.n	80184d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80184ce:	6839      	ldr	r1, [r7, #0]
 80184d0:	6878      	ldr	r0, [r7, #4]
 80184d2:	f000 fd5e 	bl	8018f92 <USBD_CtlError>
          break;
 80184d6:	bf00      	nop
      }
      break;
 80184d8:	e004      	b.n	80184e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80184da:	6839      	ldr	r1, [r7, #0]
 80184dc:	6878      	ldr	r0, [r7, #4]
 80184de:	f000 fd58 	bl	8018f92 <USBD_CtlError>
      break;
 80184e2:	bf00      	nop
  }

  return ret;
 80184e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80184e6:	4618      	mov	r0, r3
 80184e8:	3710      	adds	r7, #16
 80184ea:	46bd      	mov	sp, r7
 80184ec:	bd80      	pop	{r7, pc}
 80184ee:	bf00      	nop

080184f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b084      	sub	sp, #16
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
 80184f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80184fa:	2300      	movs	r3, #0
 80184fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80184fe:	683b      	ldr	r3, [r7, #0]
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018506:	2b40      	cmp	r3, #64	@ 0x40
 8018508:	d005      	beq.n	8018516 <USBD_StdItfReq+0x26>
 801850a:	2b40      	cmp	r3, #64	@ 0x40
 801850c:	d852      	bhi.n	80185b4 <USBD_StdItfReq+0xc4>
 801850e:	2b00      	cmp	r3, #0
 8018510:	d001      	beq.n	8018516 <USBD_StdItfReq+0x26>
 8018512:	2b20      	cmp	r3, #32
 8018514:	d14e      	bne.n	80185b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801851c:	b2db      	uxtb	r3, r3
 801851e:	3b01      	subs	r3, #1
 8018520:	2b02      	cmp	r3, #2
 8018522:	d840      	bhi.n	80185a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018524:	683b      	ldr	r3, [r7, #0]
 8018526:	889b      	ldrh	r3, [r3, #4]
 8018528:	b2db      	uxtb	r3, r3
 801852a:	2b01      	cmp	r3, #1
 801852c:	d836      	bhi.n	801859c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	889b      	ldrh	r3, [r3, #4]
 8018532:	b2db      	uxtb	r3, r3
 8018534:	4619      	mov	r1, r3
 8018536:	6878      	ldr	r0, [r7, #4]
 8018538:	f7ff fedb 	bl	80182f2 <USBD_CoreFindIF>
 801853c:	4603      	mov	r3, r0
 801853e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018540:	7bbb      	ldrb	r3, [r7, #14]
 8018542:	2bff      	cmp	r3, #255	@ 0xff
 8018544:	d01d      	beq.n	8018582 <USBD_StdItfReq+0x92>
 8018546:	7bbb      	ldrb	r3, [r7, #14]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d11a      	bne.n	8018582 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801854c:	7bba      	ldrb	r2, [r7, #14]
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	32ae      	adds	r2, #174	@ 0xae
 8018552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018556:	689b      	ldr	r3, [r3, #8]
 8018558:	2b00      	cmp	r3, #0
 801855a:	d00f      	beq.n	801857c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801855c:	7bba      	ldrb	r2, [r7, #14]
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018564:	7bba      	ldrb	r2, [r7, #14]
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	32ae      	adds	r2, #174	@ 0xae
 801856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801856e:	689b      	ldr	r3, [r3, #8]
 8018570:	6839      	ldr	r1, [r7, #0]
 8018572:	6878      	ldr	r0, [r7, #4]
 8018574:	4798      	blx	r3
 8018576:	4603      	mov	r3, r0
 8018578:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801857a:	e004      	b.n	8018586 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801857c:	2303      	movs	r3, #3
 801857e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018580:	e001      	b.n	8018586 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8018582:	2303      	movs	r3, #3
 8018584:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018586:	683b      	ldr	r3, [r7, #0]
 8018588:	88db      	ldrh	r3, [r3, #6]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d110      	bne.n	80185b0 <USBD_StdItfReq+0xc0>
 801858e:	7bfb      	ldrb	r3, [r7, #15]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d10d      	bne.n	80185b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018594:	6878      	ldr	r0, [r7, #4]
 8018596:	f000 fdaa 	bl	80190ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801859a:	e009      	b.n	80185b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801859c:	6839      	ldr	r1, [r7, #0]
 801859e:	6878      	ldr	r0, [r7, #4]
 80185a0:	f000 fcf7 	bl	8018f92 <USBD_CtlError>
          break;
 80185a4:	e004      	b.n	80185b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80185a6:	6839      	ldr	r1, [r7, #0]
 80185a8:	6878      	ldr	r0, [r7, #4]
 80185aa:	f000 fcf2 	bl	8018f92 <USBD_CtlError>
          break;
 80185ae:	e000      	b.n	80185b2 <USBD_StdItfReq+0xc2>
          break;
 80185b0:	bf00      	nop
      }
      break;
 80185b2:	e004      	b.n	80185be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80185b4:	6839      	ldr	r1, [r7, #0]
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f000 fceb 	bl	8018f92 <USBD_CtlError>
      break;
 80185bc:	bf00      	nop
  }

  return ret;
 80185be:	7bfb      	ldrb	r3, [r7, #15]
}
 80185c0:	4618      	mov	r0, r3
 80185c2:	3710      	adds	r7, #16
 80185c4:	46bd      	mov	sp, r7
 80185c6:	bd80      	pop	{r7, pc}

080185c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b084      	sub	sp, #16
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
 80185d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80185d2:	2300      	movs	r3, #0
 80185d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80185d6:	683b      	ldr	r3, [r7, #0]
 80185d8:	889b      	ldrh	r3, [r3, #4]
 80185da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80185dc:	683b      	ldr	r3, [r7, #0]
 80185de:	781b      	ldrb	r3, [r3, #0]
 80185e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80185e4:	2b40      	cmp	r3, #64	@ 0x40
 80185e6:	d007      	beq.n	80185f8 <USBD_StdEPReq+0x30>
 80185e8:	2b40      	cmp	r3, #64	@ 0x40
 80185ea:	f200 817f 	bhi.w	80188ec <USBD_StdEPReq+0x324>
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d02a      	beq.n	8018648 <USBD_StdEPReq+0x80>
 80185f2:	2b20      	cmp	r3, #32
 80185f4:	f040 817a 	bne.w	80188ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80185f8:	7bbb      	ldrb	r3, [r7, #14]
 80185fa:	4619      	mov	r1, r3
 80185fc:	6878      	ldr	r0, [r7, #4]
 80185fe:	f7ff fe85 	bl	801830c <USBD_CoreFindEP>
 8018602:	4603      	mov	r3, r0
 8018604:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018606:	7b7b      	ldrb	r3, [r7, #13]
 8018608:	2bff      	cmp	r3, #255	@ 0xff
 801860a:	f000 8174 	beq.w	80188f6 <USBD_StdEPReq+0x32e>
 801860e:	7b7b      	ldrb	r3, [r7, #13]
 8018610:	2b00      	cmp	r3, #0
 8018612:	f040 8170 	bne.w	80188f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8018616:	7b7a      	ldrb	r2, [r7, #13]
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801861e:	7b7a      	ldrb	r2, [r7, #13]
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	32ae      	adds	r2, #174	@ 0xae
 8018624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018628:	689b      	ldr	r3, [r3, #8]
 801862a:	2b00      	cmp	r3, #0
 801862c:	f000 8163 	beq.w	80188f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8018630:	7b7a      	ldrb	r2, [r7, #13]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	32ae      	adds	r2, #174	@ 0xae
 8018636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801863a:	689b      	ldr	r3, [r3, #8]
 801863c:	6839      	ldr	r1, [r7, #0]
 801863e:	6878      	ldr	r0, [r7, #4]
 8018640:	4798      	blx	r3
 8018642:	4603      	mov	r3, r0
 8018644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8018646:	e156      	b.n	80188f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018648:	683b      	ldr	r3, [r7, #0]
 801864a:	785b      	ldrb	r3, [r3, #1]
 801864c:	2b03      	cmp	r3, #3
 801864e:	d008      	beq.n	8018662 <USBD_StdEPReq+0x9a>
 8018650:	2b03      	cmp	r3, #3
 8018652:	f300 8145 	bgt.w	80188e0 <USBD_StdEPReq+0x318>
 8018656:	2b00      	cmp	r3, #0
 8018658:	f000 809b 	beq.w	8018792 <USBD_StdEPReq+0x1ca>
 801865c:	2b01      	cmp	r3, #1
 801865e:	d03c      	beq.n	80186da <USBD_StdEPReq+0x112>
 8018660:	e13e      	b.n	80188e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018668:	b2db      	uxtb	r3, r3
 801866a:	2b02      	cmp	r3, #2
 801866c:	d002      	beq.n	8018674 <USBD_StdEPReq+0xac>
 801866e:	2b03      	cmp	r3, #3
 8018670:	d016      	beq.n	80186a0 <USBD_StdEPReq+0xd8>
 8018672:	e02c      	b.n	80186ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018674:	7bbb      	ldrb	r3, [r7, #14]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d00d      	beq.n	8018696 <USBD_StdEPReq+0xce>
 801867a:	7bbb      	ldrb	r3, [r7, #14]
 801867c:	2b80      	cmp	r3, #128	@ 0x80
 801867e:	d00a      	beq.n	8018696 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018680:	7bbb      	ldrb	r3, [r7, #14]
 8018682:	4619      	mov	r1, r3
 8018684:	6878      	ldr	r0, [r7, #4]
 8018686:	f004 fff2 	bl	801d66e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801868a:	2180      	movs	r1, #128	@ 0x80
 801868c:	6878      	ldr	r0, [r7, #4]
 801868e:	f004 ffee 	bl	801d66e <USBD_LL_StallEP>
 8018692:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018694:	e020      	b.n	80186d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8018696:	6839      	ldr	r1, [r7, #0]
 8018698:	6878      	ldr	r0, [r7, #4]
 801869a:	f000 fc7a 	bl	8018f92 <USBD_CtlError>
              break;
 801869e:	e01b      	b.n	80186d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80186a0:	683b      	ldr	r3, [r7, #0]
 80186a2:	885b      	ldrh	r3, [r3, #2]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d10e      	bne.n	80186c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80186a8:	7bbb      	ldrb	r3, [r7, #14]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d00b      	beq.n	80186c6 <USBD_StdEPReq+0xfe>
 80186ae:	7bbb      	ldrb	r3, [r7, #14]
 80186b0:	2b80      	cmp	r3, #128	@ 0x80
 80186b2:	d008      	beq.n	80186c6 <USBD_StdEPReq+0xfe>
 80186b4:	683b      	ldr	r3, [r7, #0]
 80186b6:	88db      	ldrh	r3, [r3, #6]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d104      	bne.n	80186c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80186bc:	7bbb      	ldrb	r3, [r7, #14]
 80186be:	4619      	mov	r1, r3
 80186c0:	6878      	ldr	r0, [r7, #4]
 80186c2:	f004 ffd4 	bl	801d66e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80186c6:	6878      	ldr	r0, [r7, #4]
 80186c8:	f000 fd11 	bl	80190ee <USBD_CtlSendStatus>

              break;
 80186cc:	e004      	b.n	80186d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80186ce:	6839      	ldr	r1, [r7, #0]
 80186d0:	6878      	ldr	r0, [r7, #4]
 80186d2:	f000 fc5e 	bl	8018f92 <USBD_CtlError>
              break;
 80186d6:	bf00      	nop
          }
          break;
 80186d8:	e107      	b.n	80188ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80186e0:	b2db      	uxtb	r3, r3
 80186e2:	2b02      	cmp	r3, #2
 80186e4:	d002      	beq.n	80186ec <USBD_StdEPReq+0x124>
 80186e6:	2b03      	cmp	r3, #3
 80186e8:	d016      	beq.n	8018718 <USBD_StdEPReq+0x150>
 80186ea:	e04b      	b.n	8018784 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80186ec:	7bbb      	ldrb	r3, [r7, #14]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d00d      	beq.n	801870e <USBD_StdEPReq+0x146>
 80186f2:	7bbb      	ldrb	r3, [r7, #14]
 80186f4:	2b80      	cmp	r3, #128	@ 0x80
 80186f6:	d00a      	beq.n	801870e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80186f8:	7bbb      	ldrb	r3, [r7, #14]
 80186fa:	4619      	mov	r1, r3
 80186fc:	6878      	ldr	r0, [r7, #4]
 80186fe:	f004 ffb6 	bl	801d66e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018702:	2180      	movs	r1, #128	@ 0x80
 8018704:	6878      	ldr	r0, [r7, #4]
 8018706:	f004 ffb2 	bl	801d66e <USBD_LL_StallEP>
 801870a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801870c:	e040      	b.n	8018790 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801870e:	6839      	ldr	r1, [r7, #0]
 8018710:	6878      	ldr	r0, [r7, #4]
 8018712:	f000 fc3e 	bl	8018f92 <USBD_CtlError>
              break;
 8018716:	e03b      	b.n	8018790 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018718:	683b      	ldr	r3, [r7, #0]
 801871a:	885b      	ldrh	r3, [r3, #2]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d136      	bne.n	801878e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018720:	7bbb      	ldrb	r3, [r7, #14]
 8018722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018726:	2b00      	cmp	r3, #0
 8018728:	d004      	beq.n	8018734 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801872a:	7bbb      	ldrb	r3, [r7, #14]
 801872c:	4619      	mov	r1, r3
 801872e:	6878      	ldr	r0, [r7, #4]
 8018730:	f004 ffbc 	bl	801d6ac <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018734:	6878      	ldr	r0, [r7, #4]
 8018736:	f000 fcda 	bl	80190ee <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801873a:	7bbb      	ldrb	r3, [r7, #14]
 801873c:	4619      	mov	r1, r3
 801873e:	6878      	ldr	r0, [r7, #4]
 8018740:	f7ff fde4 	bl	801830c <USBD_CoreFindEP>
 8018744:	4603      	mov	r3, r0
 8018746:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018748:	7b7b      	ldrb	r3, [r7, #13]
 801874a:	2bff      	cmp	r3, #255	@ 0xff
 801874c:	d01f      	beq.n	801878e <USBD_StdEPReq+0x1c6>
 801874e:	7b7b      	ldrb	r3, [r7, #13]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d11c      	bne.n	801878e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8018754:	7b7a      	ldrb	r2, [r7, #13]
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801875c:	7b7a      	ldrb	r2, [r7, #13]
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	32ae      	adds	r2, #174	@ 0xae
 8018762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018766:	689b      	ldr	r3, [r3, #8]
 8018768:	2b00      	cmp	r3, #0
 801876a:	d010      	beq.n	801878e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801876c:	7b7a      	ldrb	r2, [r7, #13]
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	32ae      	adds	r2, #174	@ 0xae
 8018772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018776:	689b      	ldr	r3, [r3, #8]
 8018778:	6839      	ldr	r1, [r7, #0]
 801877a:	6878      	ldr	r0, [r7, #4]
 801877c:	4798      	blx	r3
 801877e:	4603      	mov	r3, r0
 8018780:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8018782:	e004      	b.n	801878e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8018784:	6839      	ldr	r1, [r7, #0]
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	f000 fc03 	bl	8018f92 <USBD_CtlError>
              break;
 801878c:	e000      	b.n	8018790 <USBD_StdEPReq+0x1c8>
              break;
 801878e:	bf00      	nop
          }
          break;
 8018790:	e0ab      	b.n	80188ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018798:	b2db      	uxtb	r3, r3
 801879a:	2b02      	cmp	r3, #2
 801879c:	d002      	beq.n	80187a4 <USBD_StdEPReq+0x1dc>
 801879e:	2b03      	cmp	r3, #3
 80187a0:	d032      	beq.n	8018808 <USBD_StdEPReq+0x240>
 80187a2:	e097      	b.n	80188d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80187a4:	7bbb      	ldrb	r3, [r7, #14]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d007      	beq.n	80187ba <USBD_StdEPReq+0x1f2>
 80187aa:	7bbb      	ldrb	r3, [r7, #14]
 80187ac:	2b80      	cmp	r3, #128	@ 0x80
 80187ae:	d004      	beq.n	80187ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80187b0:	6839      	ldr	r1, [r7, #0]
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f000 fbed 	bl	8018f92 <USBD_CtlError>
                break;
 80187b8:	e091      	b.n	80188de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	da0b      	bge.n	80187da <USBD_StdEPReq+0x212>
 80187c2:	7bbb      	ldrb	r3, [r7, #14]
 80187c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187c8:	4613      	mov	r3, r2
 80187ca:	009b      	lsls	r3, r3, #2
 80187cc:	4413      	add	r3, r2
 80187ce:	009b      	lsls	r3, r3, #2
 80187d0:	3310      	adds	r3, #16
 80187d2:	687a      	ldr	r2, [r7, #4]
 80187d4:	4413      	add	r3, r2
 80187d6:	3304      	adds	r3, #4
 80187d8:	e00b      	b.n	80187f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80187da:	7bbb      	ldrb	r3, [r7, #14]
 80187dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187e0:	4613      	mov	r3, r2
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	4413      	add	r3, r2
 80187e6:	009b      	lsls	r3, r3, #2
 80187e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80187ec:	687a      	ldr	r2, [r7, #4]
 80187ee:	4413      	add	r3, r2
 80187f0:	3304      	adds	r3, #4
 80187f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80187f4:	68bb      	ldr	r3, [r7, #8]
 80187f6:	2200      	movs	r2, #0
 80187f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	2202      	movs	r2, #2
 80187fe:	4619      	mov	r1, r3
 8018800:	6878      	ldr	r0, [r7, #4]
 8018802:	f000 fc37 	bl	8019074 <USBD_CtlSendData>
              break;
 8018806:	e06a      	b.n	80188de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801880c:	2b00      	cmp	r3, #0
 801880e:	da11      	bge.n	8018834 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018810:	7bbb      	ldrb	r3, [r7, #14]
 8018812:	f003 020f 	and.w	r2, r3, #15
 8018816:	6879      	ldr	r1, [r7, #4]
 8018818:	4613      	mov	r3, r2
 801881a:	009b      	lsls	r3, r3, #2
 801881c:	4413      	add	r3, r2
 801881e:	009b      	lsls	r3, r3, #2
 8018820:	440b      	add	r3, r1
 8018822:	3324      	adds	r3, #36	@ 0x24
 8018824:	881b      	ldrh	r3, [r3, #0]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d117      	bne.n	801885a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801882a:	6839      	ldr	r1, [r7, #0]
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	f000 fbb0 	bl	8018f92 <USBD_CtlError>
                  break;
 8018832:	e054      	b.n	80188de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018834:	7bbb      	ldrb	r3, [r7, #14]
 8018836:	f003 020f 	and.w	r2, r3, #15
 801883a:	6879      	ldr	r1, [r7, #4]
 801883c:	4613      	mov	r3, r2
 801883e:	009b      	lsls	r3, r3, #2
 8018840:	4413      	add	r3, r2
 8018842:	009b      	lsls	r3, r3, #2
 8018844:	440b      	add	r3, r1
 8018846:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801884a:	881b      	ldrh	r3, [r3, #0]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d104      	bne.n	801885a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018850:	6839      	ldr	r1, [r7, #0]
 8018852:	6878      	ldr	r0, [r7, #4]
 8018854:	f000 fb9d 	bl	8018f92 <USBD_CtlError>
                  break;
 8018858:	e041      	b.n	80188de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801885a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801885e:	2b00      	cmp	r3, #0
 8018860:	da0b      	bge.n	801887a <USBD_StdEPReq+0x2b2>
 8018862:	7bbb      	ldrb	r3, [r7, #14]
 8018864:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018868:	4613      	mov	r3, r2
 801886a:	009b      	lsls	r3, r3, #2
 801886c:	4413      	add	r3, r2
 801886e:	009b      	lsls	r3, r3, #2
 8018870:	3310      	adds	r3, #16
 8018872:	687a      	ldr	r2, [r7, #4]
 8018874:	4413      	add	r3, r2
 8018876:	3304      	adds	r3, #4
 8018878:	e00b      	b.n	8018892 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801887a:	7bbb      	ldrb	r3, [r7, #14]
 801887c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018880:	4613      	mov	r3, r2
 8018882:	009b      	lsls	r3, r3, #2
 8018884:	4413      	add	r3, r2
 8018886:	009b      	lsls	r3, r3, #2
 8018888:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801888c:	687a      	ldr	r2, [r7, #4]
 801888e:	4413      	add	r3, r2
 8018890:	3304      	adds	r3, #4
 8018892:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018894:	7bbb      	ldrb	r3, [r7, #14]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d002      	beq.n	80188a0 <USBD_StdEPReq+0x2d8>
 801889a:	7bbb      	ldrb	r3, [r7, #14]
 801889c:	2b80      	cmp	r3, #128	@ 0x80
 801889e:	d103      	bne.n	80188a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80188a0:	68bb      	ldr	r3, [r7, #8]
 80188a2:	2200      	movs	r2, #0
 80188a4:	601a      	str	r2, [r3, #0]
 80188a6:	e00e      	b.n	80188c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80188a8:	7bbb      	ldrb	r3, [r7, #14]
 80188aa:	4619      	mov	r1, r3
 80188ac:	6878      	ldr	r0, [r7, #4]
 80188ae:	f004 ff1c 	bl	801d6ea <USBD_LL_IsStallEP>
 80188b2:	4603      	mov	r3, r0
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d003      	beq.n	80188c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80188b8:	68bb      	ldr	r3, [r7, #8]
 80188ba:	2201      	movs	r2, #1
 80188bc:	601a      	str	r2, [r3, #0]
 80188be:	e002      	b.n	80188c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80188c0:	68bb      	ldr	r3, [r7, #8]
 80188c2:	2200      	movs	r2, #0
 80188c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	2202      	movs	r2, #2
 80188ca:	4619      	mov	r1, r3
 80188cc:	6878      	ldr	r0, [r7, #4]
 80188ce:	f000 fbd1 	bl	8019074 <USBD_CtlSendData>
              break;
 80188d2:	e004      	b.n	80188de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80188d4:	6839      	ldr	r1, [r7, #0]
 80188d6:	6878      	ldr	r0, [r7, #4]
 80188d8:	f000 fb5b 	bl	8018f92 <USBD_CtlError>
              break;
 80188dc:	bf00      	nop
          }
          break;
 80188de:	e004      	b.n	80188ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80188e0:	6839      	ldr	r1, [r7, #0]
 80188e2:	6878      	ldr	r0, [r7, #4]
 80188e4:	f000 fb55 	bl	8018f92 <USBD_CtlError>
          break;
 80188e8:	bf00      	nop
      }
      break;
 80188ea:	e005      	b.n	80188f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80188ec:	6839      	ldr	r1, [r7, #0]
 80188ee:	6878      	ldr	r0, [r7, #4]
 80188f0:	f000 fb4f 	bl	8018f92 <USBD_CtlError>
      break;
 80188f4:	e000      	b.n	80188f8 <USBD_StdEPReq+0x330>
      break;
 80188f6:	bf00      	nop
  }

  return ret;
 80188f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80188fa:	4618      	mov	r0, r3
 80188fc:	3710      	adds	r7, #16
 80188fe:	46bd      	mov	sp, r7
 8018900:	bd80      	pop	{r7, pc}
	...

08018904 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b084      	sub	sp, #16
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]
 801890c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801890e:	2300      	movs	r3, #0
 8018910:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018912:	2300      	movs	r3, #0
 8018914:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018916:	2300      	movs	r3, #0
 8018918:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	885b      	ldrh	r3, [r3, #2]
 801891e:	0a1b      	lsrs	r3, r3, #8
 8018920:	b29b      	uxth	r3, r3
 8018922:	3b01      	subs	r3, #1
 8018924:	2b06      	cmp	r3, #6
 8018926:	f200 8128 	bhi.w	8018b7a <USBD_GetDescriptor+0x276>
 801892a:	a201      	add	r2, pc, #4	@ (adr r2, 8018930 <USBD_GetDescriptor+0x2c>)
 801892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018930:	0801894d 	.word	0x0801894d
 8018934:	08018965 	.word	0x08018965
 8018938:	080189a5 	.word	0x080189a5
 801893c:	08018b7b 	.word	0x08018b7b
 8018940:	08018b7b 	.word	0x08018b7b
 8018944:	08018b1b 	.word	0x08018b1b
 8018948:	08018b47 	.word	0x08018b47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	687a      	ldr	r2, [r7, #4]
 8018956:	7c12      	ldrb	r2, [r2, #16]
 8018958:	f107 0108 	add.w	r1, r7, #8
 801895c:	4610      	mov	r0, r2
 801895e:	4798      	blx	r3
 8018960:	60f8      	str	r0, [r7, #12]
      break;
 8018962:	e112      	b.n	8018b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	7c1b      	ldrb	r3, [r3, #16]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d10d      	bne.n	8018988 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018974:	f107 0208 	add.w	r2, r7, #8
 8018978:	4610      	mov	r0, r2
 801897a:	4798      	blx	r3
 801897c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	3301      	adds	r3, #1
 8018982:	2202      	movs	r2, #2
 8018984:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8018986:	e100      	b.n	8018b8a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801898e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018990:	f107 0208 	add.w	r2, r7, #8
 8018994:	4610      	mov	r0, r2
 8018996:	4798      	blx	r3
 8018998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	3301      	adds	r3, #1
 801899e:	2202      	movs	r2, #2
 80189a0:	701a      	strb	r2, [r3, #0]
      break;
 80189a2:	e0f2      	b.n	8018b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80189a4:	683b      	ldr	r3, [r7, #0]
 80189a6:	885b      	ldrh	r3, [r3, #2]
 80189a8:	b2db      	uxtb	r3, r3
 80189aa:	2b05      	cmp	r3, #5
 80189ac:	f200 80ac 	bhi.w	8018b08 <USBD_GetDescriptor+0x204>
 80189b0:	a201      	add	r2, pc, #4	@ (adr r2, 80189b8 <USBD_GetDescriptor+0xb4>)
 80189b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189b6:	bf00      	nop
 80189b8:	080189d1 	.word	0x080189d1
 80189bc:	08018a05 	.word	0x08018a05
 80189c0:	08018a39 	.word	0x08018a39
 80189c4:	08018a6d 	.word	0x08018a6d
 80189c8:	08018aa1 	.word	0x08018aa1
 80189cc:	08018ad5 	.word	0x08018ad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189d6:	685b      	ldr	r3, [r3, #4]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d00b      	beq.n	80189f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189e2:	685b      	ldr	r3, [r3, #4]
 80189e4:	687a      	ldr	r2, [r7, #4]
 80189e6:	7c12      	ldrb	r2, [r2, #16]
 80189e8:	f107 0108 	add.w	r1, r7, #8
 80189ec:	4610      	mov	r0, r2
 80189ee:	4798      	blx	r3
 80189f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189f2:	e091      	b.n	8018b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80189f4:	6839      	ldr	r1, [r7, #0]
 80189f6:	6878      	ldr	r0, [r7, #4]
 80189f8:	f000 facb 	bl	8018f92 <USBD_CtlError>
            err++;
 80189fc:	7afb      	ldrb	r3, [r7, #11]
 80189fe:	3301      	adds	r3, #1
 8018a00:	72fb      	strb	r3, [r7, #11]
          break;
 8018a02:	e089      	b.n	8018b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a0a:	689b      	ldr	r3, [r3, #8]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d00b      	beq.n	8018a28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a16:	689b      	ldr	r3, [r3, #8]
 8018a18:	687a      	ldr	r2, [r7, #4]
 8018a1a:	7c12      	ldrb	r2, [r2, #16]
 8018a1c:	f107 0108 	add.w	r1, r7, #8
 8018a20:	4610      	mov	r0, r2
 8018a22:	4798      	blx	r3
 8018a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a26:	e077      	b.n	8018b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a28:	6839      	ldr	r1, [r7, #0]
 8018a2a:	6878      	ldr	r0, [r7, #4]
 8018a2c:	f000 fab1 	bl	8018f92 <USBD_CtlError>
            err++;
 8018a30:	7afb      	ldrb	r3, [r7, #11]
 8018a32:	3301      	adds	r3, #1
 8018a34:	72fb      	strb	r3, [r7, #11]
          break;
 8018a36:	e06f      	b.n	8018b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a3e:	68db      	ldr	r3, [r3, #12]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d00b      	beq.n	8018a5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a4a:	68db      	ldr	r3, [r3, #12]
 8018a4c:	687a      	ldr	r2, [r7, #4]
 8018a4e:	7c12      	ldrb	r2, [r2, #16]
 8018a50:	f107 0108 	add.w	r1, r7, #8
 8018a54:	4610      	mov	r0, r2
 8018a56:	4798      	blx	r3
 8018a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a5a:	e05d      	b.n	8018b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a5c:	6839      	ldr	r1, [r7, #0]
 8018a5e:	6878      	ldr	r0, [r7, #4]
 8018a60:	f000 fa97 	bl	8018f92 <USBD_CtlError>
            err++;
 8018a64:	7afb      	ldrb	r3, [r7, #11]
 8018a66:	3301      	adds	r3, #1
 8018a68:	72fb      	strb	r3, [r7, #11]
          break;
 8018a6a:	e055      	b.n	8018b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a72:	691b      	ldr	r3, [r3, #16]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d00b      	beq.n	8018a90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a7e:	691b      	ldr	r3, [r3, #16]
 8018a80:	687a      	ldr	r2, [r7, #4]
 8018a82:	7c12      	ldrb	r2, [r2, #16]
 8018a84:	f107 0108 	add.w	r1, r7, #8
 8018a88:	4610      	mov	r0, r2
 8018a8a:	4798      	blx	r3
 8018a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a8e:	e043      	b.n	8018b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a90:	6839      	ldr	r1, [r7, #0]
 8018a92:	6878      	ldr	r0, [r7, #4]
 8018a94:	f000 fa7d 	bl	8018f92 <USBD_CtlError>
            err++;
 8018a98:	7afb      	ldrb	r3, [r7, #11]
 8018a9a:	3301      	adds	r3, #1
 8018a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8018a9e:	e03b      	b.n	8018b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018aa6:	695b      	ldr	r3, [r3, #20]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d00b      	beq.n	8018ac4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018ab2:	695b      	ldr	r3, [r3, #20]
 8018ab4:	687a      	ldr	r2, [r7, #4]
 8018ab6:	7c12      	ldrb	r2, [r2, #16]
 8018ab8:	f107 0108 	add.w	r1, r7, #8
 8018abc:	4610      	mov	r0, r2
 8018abe:	4798      	blx	r3
 8018ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018ac2:	e029      	b.n	8018b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018ac4:	6839      	ldr	r1, [r7, #0]
 8018ac6:	6878      	ldr	r0, [r7, #4]
 8018ac8:	f000 fa63 	bl	8018f92 <USBD_CtlError>
            err++;
 8018acc:	7afb      	ldrb	r3, [r7, #11]
 8018ace:	3301      	adds	r3, #1
 8018ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8018ad2:	e021      	b.n	8018b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018ada:	699b      	ldr	r3, [r3, #24]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d00b      	beq.n	8018af8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018ae6:	699b      	ldr	r3, [r3, #24]
 8018ae8:	687a      	ldr	r2, [r7, #4]
 8018aea:	7c12      	ldrb	r2, [r2, #16]
 8018aec:	f107 0108 	add.w	r1, r7, #8
 8018af0:	4610      	mov	r0, r2
 8018af2:	4798      	blx	r3
 8018af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018af6:	e00f      	b.n	8018b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018af8:	6839      	ldr	r1, [r7, #0]
 8018afa:	6878      	ldr	r0, [r7, #4]
 8018afc:	f000 fa49 	bl	8018f92 <USBD_CtlError>
            err++;
 8018b00:	7afb      	ldrb	r3, [r7, #11]
 8018b02:	3301      	adds	r3, #1
 8018b04:	72fb      	strb	r3, [r7, #11]
          break;
 8018b06:	e007      	b.n	8018b18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018b08:	6839      	ldr	r1, [r7, #0]
 8018b0a:	6878      	ldr	r0, [r7, #4]
 8018b0c:	f000 fa41 	bl	8018f92 <USBD_CtlError>
          err++;
 8018b10:	7afb      	ldrb	r3, [r7, #11]
 8018b12:	3301      	adds	r3, #1
 8018b14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8018b16:	bf00      	nop
      }
      break;
 8018b18:	e037      	b.n	8018b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	7c1b      	ldrb	r3, [r3, #16]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d109      	bne.n	8018b36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b2a:	f107 0208 	add.w	r2, r7, #8
 8018b2e:	4610      	mov	r0, r2
 8018b30:	4798      	blx	r3
 8018b32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018b34:	e029      	b.n	8018b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018b36:	6839      	ldr	r1, [r7, #0]
 8018b38:	6878      	ldr	r0, [r7, #4]
 8018b3a:	f000 fa2a 	bl	8018f92 <USBD_CtlError>
        err++;
 8018b3e:	7afb      	ldrb	r3, [r7, #11]
 8018b40:	3301      	adds	r3, #1
 8018b42:	72fb      	strb	r3, [r7, #11]
      break;
 8018b44:	e021      	b.n	8018b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	7c1b      	ldrb	r3, [r3, #16]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d10d      	bne.n	8018b6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b56:	f107 0208 	add.w	r2, r7, #8
 8018b5a:	4610      	mov	r0, r2
 8018b5c:	4798      	blx	r3
 8018b5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	3301      	adds	r3, #1
 8018b64:	2207      	movs	r2, #7
 8018b66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018b68:	e00f      	b.n	8018b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018b6a:	6839      	ldr	r1, [r7, #0]
 8018b6c:	6878      	ldr	r0, [r7, #4]
 8018b6e:	f000 fa10 	bl	8018f92 <USBD_CtlError>
        err++;
 8018b72:	7afb      	ldrb	r3, [r7, #11]
 8018b74:	3301      	adds	r3, #1
 8018b76:	72fb      	strb	r3, [r7, #11]
      break;
 8018b78:	e007      	b.n	8018b8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8018b7a:	6839      	ldr	r1, [r7, #0]
 8018b7c:	6878      	ldr	r0, [r7, #4]
 8018b7e:	f000 fa08 	bl	8018f92 <USBD_CtlError>
      err++;
 8018b82:	7afb      	ldrb	r3, [r7, #11]
 8018b84:	3301      	adds	r3, #1
 8018b86:	72fb      	strb	r3, [r7, #11]
      break;
 8018b88:	bf00      	nop
  }

  if (err != 0U)
 8018b8a:	7afb      	ldrb	r3, [r7, #11]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d11e      	bne.n	8018bce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8018b90:	683b      	ldr	r3, [r7, #0]
 8018b92:	88db      	ldrh	r3, [r3, #6]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d016      	beq.n	8018bc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8018b98:	893b      	ldrh	r3, [r7, #8]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d00e      	beq.n	8018bbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8018b9e:	683b      	ldr	r3, [r7, #0]
 8018ba0:	88da      	ldrh	r2, [r3, #6]
 8018ba2:	893b      	ldrh	r3, [r7, #8]
 8018ba4:	4293      	cmp	r3, r2
 8018ba6:	bf28      	it	cs
 8018ba8:	4613      	movcs	r3, r2
 8018baa:	b29b      	uxth	r3, r3
 8018bac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018bae:	893b      	ldrh	r3, [r7, #8]
 8018bb0:	461a      	mov	r2, r3
 8018bb2:	68f9      	ldr	r1, [r7, #12]
 8018bb4:	6878      	ldr	r0, [r7, #4]
 8018bb6:	f000 fa5d 	bl	8019074 <USBD_CtlSendData>
 8018bba:	e009      	b.n	8018bd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018bbc:	6839      	ldr	r1, [r7, #0]
 8018bbe:	6878      	ldr	r0, [r7, #4]
 8018bc0:	f000 f9e7 	bl	8018f92 <USBD_CtlError>
 8018bc4:	e004      	b.n	8018bd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f000 fa91 	bl	80190ee <USBD_CtlSendStatus>
 8018bcc:	e000      	b.n	8018bd0 <USBD_GetDescriptor+0x2cc>
    return;
 8018bce:	bf00      	nop
  }
}
 8018bd0:	3710      	adds	r7, #16
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd80      	pop	{r7, pc}
 8018bd6:	bf00      	nop

08018bd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b084      	sub	sp, #16
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
 8018be0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	889b      	ldrh	r3, [r3, #4]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d131      	bne.n	8018c4e <USBD_SetAddress+0x76>
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	88db      	ldrh	r3, [r3, #6]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d12d      	bne.n	8018c4e <USBD_SetAddress+0x76>
 8018bf2:	683b      	ldr	r3, [r7, #0]
 8018bf4:	885b      	ldrh	r3, [r3, #2]
 8018bf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8018bf8:	d829      	bhi.n	8018c4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018bfa:	683b      	ldr	r3, [r7, #0]
 8018bfc:	885b      	ldrh	r3, [r3, #2]
 8018bfe:	b2db      	uxtb	r3, r3
 8018c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018c04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	2b03      	cmp	r3, #3
 8018c10:	d104      	bne.n	8018c1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8018c12:	6839      	ldr	r1, [r7, #0]
 8018c14:	6878      	ldr	r0, [r7, #4]
 8018c16:	f000 f9bc 	bl	8018f92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c1a:	e01d      	b.n	8018c58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	7bfa      	ldrb	r2, [r7, #15]
 8018c20:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018c24:	7bfb      	ldrb	r3, [r7, #15]
 8018c26:	4619      	mov	r1, r3
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	f004 fd8a 	bl	801d742 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018c2e:	6878      	ldr	r0, [r7, #4]
 8018c30:	f000 fa5d 	bl	80190ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018c34:	7bfb      	ldrb	r3, [r7, #15]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d004      	beq.n	8018c44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	2202      	movs	r2, #2
 8018c3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c42:	e009      	b.n	8018c58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2201      	movs	r2, #1
 8018c48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c4c:	e004      	b.n	8018c58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018c4e:	6839      	ldr	r1, [r7, #0]
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f000 f99e 	bl	8018f92 <USBD_CtlError>
  }
}
 8018c56:	bf00      	nop
 8018c58:	bf00      	nop
 8018c5a:	3710      	adds	r7, #16
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}

08018c60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b084      	sub	sp, #16
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018c6e:	683b      	ldr	r3, [r7, #0]
 8018c70:	885b      	ldrh	r3, [r3, #2]
 8018c72:	b2da      	uxtb	r2, r3
 8018c74:	4b4e      	ldr	r3, [pc, #312]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018c76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018c78:	4b4d      	ldr	r3, [pc, #308]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018c7a:	781b      	ldrb	r3, [r3, #0]
 8018c7c:	2b01      	cmp	r3, #1
 8018c7e:	d905      	bls.n	8018c8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018c80:	6839      	ldr	r1, [r7, #0]
 8018c82:	6878      	ldr	r0, [r7, #4]
 8018c84:	f000 f985 	bl	8018f92 <USBD_CtlError>
    return USBD_FAIL;
 8018c88:	2303      	movs	r3, #3
 8018c8a:	e08c      	b.n	8018da6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018c92:	b2db      	uxtb	r3, r3
 8018c94:	2b02      	cmp	r3, #2
 8018c96:	d002      	beq.n	8018c9e <USBD_SetConfig+0x3e>
 8018c98:	2b03      	cmp	r3, #3
 8018c9a:	d029      	beq.n	8018cf0 <USBD_SetConfig+0x90>
 8018c9c:	e075      	b.n	8018d8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018c9e:	4b44      	ldr	r3, [pc, #272]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018ca0:	781b      	ldrb	r3, [r3, #0]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d020      	beq.n	8018ce8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8018ca6:	4b42      	ldr	r3, [pc, #264]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018ca8:	781b      	ldrb	r3, [r3, #0]
 8018caa:	461a      	mov	r2, r3
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018cb2:	781b      	ldrb	r3, [r3, #0]
 8018cb4:	4619      	mov	r1, r3
 8018cb6:	6878      	ldr	r0, [r7, #4]
 8018cb8:	f7fe ffe3 	bl	8017c82 <USBD_SetClassConfig>
 8018cbc:	4603      	mov	r3, r0
 8018cbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018cc0:	7bfb      	ldrb	r3, [r7, #15]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d008      	beq.n	8018cd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8018cc6:	6839      	ldr	r1, [r7, #0]
 8018cc8:	6878      	ldr	r0, [r7, #4]
 8018cca:	f000 f962 	bl	8018f92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	2202      	movs	r2, #2
 8018cd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018cd6:	e065      	b.n	8018da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f000 fa08 	bl	80190ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	2203      	movs	r2, #3
 8018ce2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018ce6:	e05d      	b.n	8018da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018ce8:	6878      	ldr	r0, [r7, #4]
 8018cea:	f000 fa00 	bl	80190ee <USBD_CtlSendStatus>
      break;
 8018cee:	e059      	b.n	8018da4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018cf2:	781b      	ldrb	r3, [r3, #0]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d112      	bne.n	8018d1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	2202      	movs	r2, #2
 8018cfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8018d00:	4b2b      	ldr	r3, [pc, #172]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018d02:	781b      	ldrb	r3, [r3, #0]
 8018d04:	461a      	mov	r2, r3
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018d0a:	4b29      	ldr	r3, [pc, #164]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018d0c:	781b      	ldrb	r3, [r3, #0]
 8018d0e:	4619      	mov	r1, r3
 8018d10:	6878      	ldr	r0, [r7, #4]
 8018d12:	f7fe ffd2 	bl	8017cba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018d16:	6878      	ldr	r0, [r7, #4]
 8018d18:	f000 f9e9 	bl	80190ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018d1c:	e042      	b.n	8018da4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8018d1e:	4b24      	ldr	r3, [pc, #144]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018d20:	781b      	ldrb	r3, [r3, #0]
 8018d22:	461a      	mov	r2, r3
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	685b      	ldr	r3, [r3, #4]
 8018d28:	429a      	cmp	r2, r3
 8018d2a:	d02a      	beq.n	8018d82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	685b      	ldr	r3, [r3, #4]
 8018d30:	b2db      	uxtb	r3, r3
 8018d32:	4619      	mov	r1, r3
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	f7fe ffc0 	bl	8017cba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018d3c:	781b      	ldrb	r3, [r3, #0]
 8018d3e:	461a      	mov	r2, r3
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018d44:	4b1a      	ldr	r3, [pc, #104]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018d46:	781b      	ldrb	r3, [r3, #0]
 8018d48:	4619      	mov	r1, r3
 8018d4a:	6878      	ldr	r0, [r7, #4]
 8018d4c:	f7fe ff99 	bl	8017c82 <USBD_SetClassConfig>
 8018d50:	4603      	mov	r3, r0
 8018d52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018d54:	7bfb      	ldrb	r3, [r7, #15]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d00f      	beq.n	8018d7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8018d5a:	6839      	ldr	r1, [r7, #0]
 8018d5c:	6878      	ldr	r0, [r7, #4]
 8018d5e:	f000 f918 	bl	8018f92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	685b      	ldr	r3, [r3, #4]
 8018d66:	b2db      	uxtb	r3, r3
 8018d68:	4619      	mov	r1, r3
 8018d6a:	6878      	ldr	r0, [r7, #4]
 8018d6c:	f7fe ffa5 	bl	8017cba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	2202      	movs	r2, #2
 8018d74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018d78:	e014      	b.n	8018da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018d7a:	6878      	ldr	r0, [r7, #4]
 8018d7c:	f000 f9b7 	bl	80190ee <USBD_CtlSendStatus>
      break;
 8018d80:	e010      	b.n	8018da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018d82:	6878      	ldr	r0, [r7, #4]
 8018d84:	f000 f9b3 	bl	80190ee <USBD_CtlSendStatus>
      break;
 8018d88:	e00c      	b.n	8018da4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8018d8a:	6839      	ldr	r1, [r7, #0]
 8018d8c:	6878      	ldr	r0, [r7, #4]
 8018d8e:	f000 f900 	bl	8018f92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018d92:	4b07      	ldr	r3, [pc, #28]	@ (8018db0 <USBD_SetConfig+0x150>)
 8018d94:	781b      	ldrb	r3, [r3, #0]
 8018d96:	4619      	mov	r1, r3
 8018d98:	6878      	ldr	r0, [r7, #4]
 8018d9a:	f7fe ff8e 	bl	8017cba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8018d9e:	2303      	movs	r3, #3
 8018da0:	73fb      	strb	r3, [r7, #15]
      break;
 8018da2:	bf00      	nop
  }

  return ret;
 8018da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018da6:	4618      	mov	r0, r3
 8018da8:	3710      	adds	r7, #16
 8018daa:	46bd      	mov	sp, r7
 8018dac:	bd80      	pop	{r7, pc}
 8018dae:	bf00      	nop
 8018db0:	20001b66 	.word	0x20001b66

08018db4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b082      	sub	sp, #8
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
 8018dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018dbe:	683b      	ldr	r3, [r7, #0]
 8018dc0:	88db      	ldrh	r3, [r3, #6]
 8018dc2:	2b01      	cmp	r3, #1
 8018dc4:	d004      	beq.n	8018dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018dc6:	6839      	ldr	r1, [r7, #0]
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f000 f8e2 	bl	8018f92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018dce:	e023      	b.n	8018e18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018dd6:	b2db      	uxtb	r3, r3
 8018dd8:	2b02      	cmp	r3, #2
 8018dda:	dc02      	bgt.n	8018de2 <USBD_GetConfig+0x2e>
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	dc03      	bgt.n	8018de8 <USBD_GetConfig+0x34>
 8018de0:	e015      	b.n	8018e0e <USBD_GetConfig+0x5a>
 8018de2:	2b03      	cmp	r3, #3
 8018de4:	d00b      	beq.n	8018dfe <USBD_GetConfig+0x4a>
 8018de6:	e012      	b.n	8018e0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	2200      	movs	r2, #0
 8018dec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	3308      	adds	r3, #8
 8018df2:	2201      	movs	r2, #1
 8018df4:	4619      	mov	r1, r3
 8018df6:	6878      	ldr	r0, [r7, #4]
 8018df8:	f000 f93c 	bl	8019074 <USBD_CtlSendData>
        break;
 8018dfc:	e00c      	b.n	8018e18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	3304      	adds	r3, #4
 8018e02:	2201      	movs	r2, #1
 8018e04:	4619      	mov	r1, r3
 8018e06:	6878      	ldr	r0, [r7, #4]
 8018e08:	f000 f934 	bl	8019074 <USBD_CtlSendData>
        break;
 8018e0c:	e004      	b.n	8018e18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018e0e:	6839      	ldr	r1, [r7, #0]
 8018e10:	6878      	ldr	r0, [r7, #4]
 8018e12:	f000 f8be 	bl	8018f92 <USBD_CtlError>
        break;
 8018e16:	bf00      	nop
}
 8018e18:	bf00      	nop
 8018e1a:	3708      	adds	r7, #8
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bd80      	pop	{r7, pc}

08018e20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b082      	sub	sp, #8
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
 8018e28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018e30:	b2db      	uxtb	r3, r3
 8018e32:	3b01      	subs	r3, #1
 8018e34:	2b02      	cmp	r3, #2
 8018e36:	d81e      	bhi.n	8018e76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018e38:	683b      	ldr	r3, [r7, #0]
 8018e3a:	88db      	ldrh	r3, [r3, #6]
 8018e3c:	2b02      	cmp	r3, #2
 8018e3e:	d004      	beq.n	8018e4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018e40:	6839      	ldr	r1, [r7, #0]
 8018e42:	6878      	ldr	r0, [r7, #4]
 8018e44:	f000 f8a5 	bl	8018f92 <USBD_CtlError>
        break;
 8018e48:	e01a      	b.n	8018e80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	2201      	movs	r2, #1
 8018e4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d005      	beq.n	8018e66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	68db      	ldr	r3, [r3, #12]
 8018e5e:	f043 0202 	orr.w	r2, r3, #2
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	330c      	adds	r3, #12
 8018e6a:	2202      	movs	r2, #2
 8018e6c:	4619      	mov	r1, r3
 8018e6e:	6878      	ldr	r0, [r7, #4]
 8018e70:	f000 f900 	bl	8019074 <USBD_CtlSendData>
      break;
 8018e74:	e004      	b.n	8018e80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018e76:	6839      	ldr	r1, [r7, #0]
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f000 f88a 	bl	8018f92 <USBD_CtlError>
      break;
 8018e7e:	bf00      	nop
  }
}
 8018e80:	bf00      	nop
 8018e82:	3708      	adds	r7, #8
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}

08018e88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b082      	sub	sp, #8
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
 8018e90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018e92:	683b      	ldr	r3, [r7, #0]
 8018e94:	885b      	ldrh	r3, [r3, #2]
 8018e96:	2b01      	cmp	r3, #1
 8018e98:	d107      	bne.n	8018eaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	2201      	movs	r2, #1
 8018e9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018ea2:	6878      	ldr	r0, [r7, #4]
 8018ea4:	f000 f923 	bl	80190ee <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8018ea8:	e013      	b.n	8018ed2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8018eaa:	683b      	ldr	r3, [r7, #0]
 8018eac:	885b      	ldrh	r3, [r3, #2]
 8018eae:	2b02      	cmp	r3, #2
 8018eb0:	d10b      	bne.n	8018eca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	889b      	ldrh	r3, [r3, #4]
 8018eb6:	0a1b      	lsrs	r3, r3, #8
 8018eb8:	b29b      	uxth	r3, r3
 8018eba:	b2da      	uxtb	r2, r3
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8018ec2:	6878      	ldr	r0, [r7, #4]
 8018ec4:	f000 f913 	bl	80190ee <USBD_CtlSendStatus>
}
 8018ec8:	e003      	b.n	8018ed2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018eca:	6839      	ldr	r1, [r7, #0]
 8018ecc:	6878      	ldr	r0, [r7, #4]
 8018ece:	f000 f860 	bl	8018f92 <USBD_CtlError>
}
 8018ed2:	bf00      	nop
 8018ed4:	3708      	adds	r7, #8
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	bd80      	pop	{r7, pc}

08018eda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018eda:	b580      	push	{r7, lr}
 8018edc:	b082      	sub	sp, #8
 8018ede:	af00      	add	r7, sp, #0
 8018ee0:	6078      	str	r0, [r7, #4]
 8018ee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018eea:	b2db      	uxtb	r3, r3
 8018eec:	3b01      	subs	r3, #1
 8018eee:	2b02      	cmp	r3, #2
 8018ef0:	d80b      	bhi.n	8018f0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018ef2:	683b      	ldr	r3, [r7, #0]
 8018ef4:	885b      	ldrh	r3, [r3, #2]
 8018ef6:	2b01      	cmp	r3, #1
 8018ef8:	d10c      	bne.n	8018f14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	2200      	movs	r2, #0
 8018efe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	f000 f8f3 	bl	80190ee <USBD_CtlSendStatus>
      }
      break;
 8018f08:	e004      	b.n	8018f14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018f0a:	6839      	ldr	r1, [r7, #0]
 8018f0c:	6878      	ldr	r0, [r7, #4]
 8018f0e:	f000 f840 	bl	8018f92 <USBD_CtlError>
      break;
 8018f12:	e000      	b.n	8018f16 <USBD_ClrFeature+0x3c>
      break;
 8018f14:	bf00      	nop
  }
}
 8018f16:	bf00      	nop
 8018f18:	3708      	adds	r7, #8
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bd80      	pop	{r7, pc}

08018f1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018f1e:	b580      	push	{r7, lr}
 8018f20:	b084      	sub	sp, #16
 8018f22:	af00      	add	r7, sp, #0
 8018f24:	6078      	str	r0, [r7, #4]
 8018f26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018f28:	683b      	ldr	r3, [r7, #0]
 8018f2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	781a      	ldrb	r2, [r3, #0]
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	3301      	adds	r3, #1
 8018f38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	781a      	ldrb	r2, [r3, #0]
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	3301      	adds	r3, #1
 8018f46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018f48:	68f8      	ldr	r0, [r7, #12]
 8018f4a:	f7ff fa40 	bl	80183ce <SWAPBYTE>
 8018f4e:	4603      	mov	r3, r0
 8018f50:	461a      	mov	r2, r3
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	3301      	adds	r3, #1
 8018f5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	3301      	adds	r3, #1
 8018f60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018f62:	68f8      	ldr	r0, [r7, #12]
 8018f64:	f7ff fa33 	bl	80183ce <SWAPBYTE>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	461a      	mov	r2, r3
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	3301      	adds	r3, #1
 8018f74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	3301      	adds	r3, #1
 8018f7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018f7c:	68f8      	ldr	r0, [r7, #12]
 8018f7e:	f7ff fa26 	bl	80183ce <SWAPBYTE>
 8018f82:	4603      	mov	r3, r0
 8018f84:	461a      	mov	r2, r3
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	80da      	strh	r2, [r3, #6]
}
 8018f8a:	bf00      	nop
 8018f8c:	3710      	adds	r7, #16
 8018f8e:	46bd      	mov	sp, r7
 8018f90:	bd80      	pop	{r7, pc}

08018f92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f92:	b580      	push	{r7, lr}
 8018f94:	b082      	sub	sp, #8
 8018f96:	af00      	add	r7, sp, #0
 8018f98:	6078      	str	r0, [r7, #4]
 8018f9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018f9c:	2180      	movs	r1, #128	@ 0x80
 8018f9e:	6878      	ldr	r0, [r7, #4]
 8018fa0:	f004 fb65 	bl	801d66e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018fa4:	2100      	movs	r1, #0
 8018fa6:	6878      	ldr	r0, [r7, #4]
 8018fa8:	f004 fb61 	bl	801d66e <USBD_LL_StallEP>
}
 8018fac:	bf00      	nop
 8018fae:	3708      	adds	r7, #8
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}

08018fb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b086      	sub	sp, #24
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	60f8      	str	r0, [r7, #12]
 8018fbc:	60b9      	str	r1, [r7, #8]
 8018fbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d036      	beq.n	8019038 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018fce:	6938      	ldr	r0, [r7, #16]
 8018fd0:	f000 f836 	bl	8019040 <USBD_GetLen>
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	3301      	adds	r3, #1
 8018fd8:	b29b      	uxth	r3, r3
 8018fda:	005b      	lsls	r3, r3, #1
 8018fdc:	b29a      	uxth	r2, r3
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018fe2:	7dfb      	ldrb	r3, [r7, #23]
 8018fe4:	68ba      	ldr	r2, [r7, #8]
 8018fe6:	4413      	add	r3, r2
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	7812      	ldrb	r2, [r2, #0]
 8018fec:	701a      	strb	r2, [r3, #0]
  idx++;
 8018fee:	7dfb      	ldrb	r3, [r7, #23]
 8018ff0:	3301      	adds	r3, #1
 8018ff2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8018ff4:	7dfb      	ldrb	r3, [r7, #23]
 8018ff6:	68ba      	ldr	r2, [r7, #8]
 8018ff8:	4413      	add	r3, r2
 8018ffa:	2203      	movs	r2, #3
 8018ffc:	701a      	strb	r2, [r3, #0]
  idx++;
 8018ffe:	7dfb      	ldrb	r3, [r7, #23]
 8019000:	3301      	adds	r3, #1
 8019002:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019004:	e013      	b.n	801902e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8019006:	7dfb      	ldrb	r3, [r7, #23]
 8019008:	68ba      	ldr	r2, [r7, #8]
 801900a:	4413      	add	r3, r2
 801900c:	693a      	ldr	r2, [r7, #16]
 801900e:	7812      	ldrb	r2, [r2, #0]
 8019010:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8019012:	693b      	ldr	r3, [r7, #16]
 8019014:	3301      	adds	r3, #1
 8019016:	613b      	str	r3, [r7, #16]
    idx++;
 8019018:	7dfb      	ldrb	r3, [r7, #23]
 801901a:	3301      	adds	r3, #1
 801901c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801901e:	7dfb      	ldrb	r3, [r7, #23]
 8019020:	68ba      	ldr	r2, [r7, #8]
 8019022:	4413      	add	r3, r2
 8019024:	2200      	movs	r2, #0
 8019026:	701a      	strb	r2, [r3, #0]
    idx++;
 8019028:	7dfb      	ldrb	r3, [r7, #23]
 801902a:	3301      	adds	r3, #1
 801902c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801902e:	693b      	ldr	r3, [r7, #16]
 8019030:	781b      	ldrb	r3, [r3, #0]
 8019032:	2b00      	cmp	r3, #0
 8019034:	d1e7      	bne.n	8019006 <USBD_GetString+0x52>
 8019036:	e000      	b.n	801903a <USBD_GetString+0x86>
    return;
 8019038:	bf00      	nop
  }
}
 801903a:	3718      	adds	r7, #24
 801903c:	46bd      	mov	sp, r7
 801903e:	bd80      	pop	{r7, pc}

08019040 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019040:	b480      	push	{r7}
 8019042:	b085      	sub	sp, #20
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019048:	2300      	movs	r3, #0
 801904a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019050:	e005      	b.n	801905e <USBD_GetLen+0x1e>
  {
    len++;
 8019052:	7bfb      	ldrb	r3, [r7, #15]
 8019054:	3301      	adds	r3, #1
 8019056:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019058:	68bb      	ldr	r3, [r7, #8]
 801905a:	3301      	adds	r3, #1
 801905c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801905e:	68bb      	ldr	r3, [r7, #8]
 8019060:	781b      	ldrb	r3, [r3, #0]
 8019062:	2b00      	cmp	r3, #0
 8019064:	d1f5      	bne.n	8019052 <USBD_GetLen+0x12>
  }

  return len;
 8019066:	7bfb      	ldrb	r3, [r7, #15]
}
 8019068:	4618      	mov	r0, r3
 801906a:	3714      	adds	r7, #20
 801906c:	46bd      	mov	sp, r7
 801906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019072:	4770      	bx	lr

08019074 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019074:	b580      	push	{r7, lr}
 8019076:	b084      	sub	sp, #16
 8019078:	af00      	add	r7, sp, #0
 801907a:	60f8      	str	r0, [r7, #12]
 801907c:	60b9      	str	r1, [r7, #8]
 801907e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	2202      	movs	r2, #2
 8019084:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	687a      	ldr	r2, [r7, #4]
 801908c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	687a      	ldr	r2, [r7, #4]
 8019092:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	68ba      	ldr	r2, [r7, #8]
 8019098:	2100      	movs	r1, #0
 801909a:	68f8      	ldr	r0, [r7, #12]
 801909c:	f004 fb70 	bl	801d780 <USBD_LL_Transmit>

  return USBD_OK;
 80190a0:	2300      	movs	r3, #0
}
 80190a2:	4618      	mov	r0, r3
 80190a4:	3710      	adds	r7, #16
 80190a6:	46bd      	mov	sp, r7
 80190a8:	bd80      	pop	{r7, pc}

080190aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80190aa:	b580      	push	{r7, lr}
 80190ac:	b084      	sub	sp, #16
 80190ae:	af00      	add	r7, sp, #0
 80190b0:	60f8      	str	r0, [r7, #12]
 80190b2:	60b9      	str	r1, [r7, #8]
 80190b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	68ba      	ldr	r2, [r7, #8]
 80190ba:	2100      	movs	r1, #0
 80190bc:	68f8      	ldr	r0, [r7, #12]
 80190be:	f004 fb5f 	bl	801d780 <USBD_LL_Transmit>

  return USBD_OK;
 80190c2:	2300      	movs	r3, #0
}
 80190c4:	4618      	mov	r0, r3
 80190c6:	3710      	adds	r7, #16
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd80      	pop	{r7, pc}

080190cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b084      	sub	sp, #16
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	60f8      	str	r0, [r7, #12]
 80190d4:	60b9      	str	r1, [r7, #8]
 80190d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	68ba      	ldr	r2, [r7, #8]
 80190dc:	2100      	movs	r1, #0
 80190de:	68f8      	ldr	r0, [r7, #12]
 80190e0:	f004 fb6f 	bl	801d7c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80190e4:	2300      	movs	r3, #0
}
 80190e6:	4618      	mov	r0, r3
 80190e8:	3710      	adds	r7, #16
 80190ea:	46bd      	mov	sp, r7
 80190ec:	bd80      	pop	{r7, pc}

080190ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80190ee:	b580      	push	{r7, lr}
 80190f0:	b082      	sub	sp, #8
 80190f2:	af00      	add	r7, sp, #0
 80190f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	2204      	movs	r2, #4
 80190fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80190fe:	2300      	movs	r3, #0
 8019100:	2200      	movs	r2, #0
 8019102:	2100      	movs	r1, #0
 8019104:	6878      	ldr	r0, [r7, #4]
 8019106:	f004 fb3b 	bl	801d780 <USBD_LL_Transmit>

  return USBD_OK;
 801910a:	2300      	movs	r3, #0
}
 801910c:	4618      	mov	r0, r3
 801910e:	3708      	adds	r7, #8
 8019110:	46bd      	mov	sp, r7
 8019112:	bd80      	pop	{r7, pc}

08019114 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b082      	sub	sp, #8
 8019118:	af00      	add	r7, sp, #0
 801911a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	2205      	movs	r2, #5
 8019120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019124:	2300      	movs	r3, #0
 8019126:	2200      	movs	r2, #0
 8019128:	2100      	movs	r1, #0
 801912a:	6878      	ldr	r0, [r7, #4]
 801912c:	f004 fb49 	bl	801d7c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019130:	2300      	movs	r3, #0
}
 8019132:	4618      	mov	r0, r3
 8019134:	3708      	adds	r7, #8
 8019136:	46bd      	mov	sp, r7
 8019138:	bd80      	pop	{r7, pc}
	...

0801913c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b084      	sub	sp, #16
 8019140:	af00      	add	r7, sp, #0
 8019142:	4603      	mov	r3, r0
 8019144:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8019146:	79fb      	ldrb	r3, [r7, #7]
 8019148:	4a08      	ldr	r2, [pc, #32]	@ (801916c <disk_status+0x30>)
 801914a:	009b      	lsls	r3, r3, #2
 801914c:	4413      	add	r3, r2
 801914e:	685b      	ldr	r3, [r3, #4]
 8019150:	685b      	ldr	r3, [r3, #4]
 8019152:	79fa      	ldrb	r2, [r7, #7]
 8019154:	4905      	ldr	r1, [pc, #20]	@ (801916c <disk_status+0x30>)
 8019156:	440a      	add	r2, r1
 8019158:	7a12      	ldrb	r2, [r2, #8]
 801915a:	4610      	mov	r0, r2
 801915c:	4798      	blx	r3
 801915e:	4603      	mov	r3, r0
 8019160:	73fb      	strb	r3, [r7, #15]
  return stat;
 8019162:	7bfb      	ldrb	r3, [r7, #15]
}
 8019164:	4618      	mov	r0, r3
 8019166:	3710      	adds	r7, #16
 8019168:	46bd      	mov	sp, r7
 801916a:	bd80      	pop	{r7, pc}
 801916c:	20001d90 	.word	0x20001d90

08019170 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8019170:	b580      	push	{r7, lr}
 8019172:	b084      	sub	sp, #16
 8019174:	af00      	add	r7, sp, #0
 8019176:	4603      	mov	r3, r0
 8019178:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801917a:	2300      	movs	r3, #0
 801917c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801917e:	79fb      	ldrb	r3, [r7, #7]
 8019180:	4a0e      	ldr	r2, [pc, #56]	@ (80191bc <disk_initialize+0x4c>)
 8019182:	5cd3      	ldrb	r3, [r2, r3]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d114      	bne.n	80191b2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8019188:	79fb      	ldrb	r3, [r7, #7]
 801918a:	4a0c      	ldr	r2, [pc, #48]	@ (80191bc <disk_initialize+0x4c>)
 801918c:	009b      	lsls	r3, r3, #2
 801918e:	4413      	add	r3, r2
 8019190:	685b      	ldr	r3, [r3, #4]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	79fa      	ldrb	r2, [r7, #7]
 8019196:	4909      	ldr	r1, [pc, #36]	@ (80191bc <disk_initialize+0x4c>)
 8019198:	440a      	add	r2, r1
 801919a:	7a12      	ldrb	r2, [r2, #8]
 801919c:	4610      	mov	r0, r2
 801919e:	4798      	blx	r3
 80191a0:	4603      	mov	r3, r0
 80191a2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80191a4:	7bfb      	ldrb	r3, [r7, #15]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d103      	bne.n	80191b2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80191aa:	79fb      	ldrb	r3, [r7, #7]
 80191ac:	4a03      	ldr	r2, [pc, #12]	@ (80191bc <disk_initialize+0x4c>)
 80191ae:	2101      	movs	r1, #1
 80191b0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80191b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80191b4:	4618      	mov	r0, r3
 80191b6:	3710      	adds	r7, #16
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}
 80191bc:	20001d90 	.word	0x20001d90

080191c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80191c0:	b590      	push	{r4, r7, lr}
 80191c2:	b087      	sub	sp, #28
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	60b9      	str	r1, [r7, #8]
 80191c8:	607a      	str	r2, [r7, #4]
 80191ca:	603b      	str	r3, [r7, #0]
 80191cc:	4603      	mov	r3, r0
 80191ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80191d0:	7bfb      	ldrb	r3, [r7, #15]
 80191d2:	4a0a      	ldr	r2, [pc, #40]	@ (80191fc <disk_read+0x3c>)
 80191d4:	009b      	lsls	r3, r3, #2
 80191d6:	4413      	add	r3, r2
 80191d8:	685b      	ldr	r3, [r3, #4]
 80191da:	689c      	ldr	r4, [r3, #8]
 80191dc:	7bfb      	ldrb	r3, [r7, #15]
 80191de:	4a07      	ldr	r2, [pc, #28]	@ (80191fc <disk_read+0x3c>)
 80191e0:	4413      	add	r3, r2
 80191e2:	7a18      	ldrb	r0, [r3, #8]
 80191e4:	683b      	ldr	r3, [r7, #0]
 80191e6:	687a      	ldr	r2, [r7, #4]
 80191e8:	68b9      	ldr	r1, [r7, #8]
 80191ea:	47a0      	blx	r4
 80191ec:	4603      	mov	r3, r0
 80191ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80191f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80191f2:	4618      	mov	r0, r3
 80191f4:	371c      	adds	r7, #28
 80191f6:	46bd      	mov	sp, r7
 80191f8:	bd90      	pop	{r4, r7, pc}
 80191fa:	bf00      	nop
 80191fc:	20001d90 	.word	0x20001d90

08019200 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8019200:	b590      	push	{r4, r7, lr}
 8019202:	b087      	sub	sp, #28
 8019204:	af00      	add	r7, sp, #0
 8019206:	60b9      	str	r1, [r7, #8]
 8019208:	607a      	str	r2, [r7, #4]
 801920a:	603b      	str	r3, [r7, #0]
 801920c:	4603      	mov	r3, r0
 801920e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8019210:	7bfb      	ldrb	r3, [r7, #15]
 8019212:	4a0a      	ldr	r2, [pc, #40]	@ (801923c <disk_write+0x3c>)
 8019214:	009b      	lsls	r3, r3, #2
 8019216:	4413      	add	r3, r2
 8019218:	685b      	ldr	r3, [r3, #4]
 801921a:	68dc      	ldr	r4, [r3, #12]
 801921c:	7bfb      	ldrb	r3, [r7, #15]
 801921e:	4a07      	ldr	r2, [pc, #28]	@ (801923c <disk_write+0x3c>)
 8019220:	4413      	add	r3, r2
 8019222:	7a18      	ldrb	r0, [r3, #8]
 8019224:	683b      	ldr	r3, [r7, #0]
 8019226:	687a      	ldr	r2, [r7, #4]
 8019228:	68b9      	ldr	r1, [r7, #8]
 801922a:	47a0      	blx	r4
 801922c:	4603      	mov	r3, r0
 801922e:	75fb      	strb	r3, [r7, #23]
  return res;
 8019230:	7dfb      	ldrb	r3, [r7, #23]
}
 8019232:	4618      	mov	r0, r3
 8019234:	371c      	adds	r7, #28
 8019236:	46bd      	mov	sp, r7
 8019238:	bd90      	pop	{r4, r7, pc}
 801923a:	bf00      	nop
 801923c:	20001d90 	.word	0x20001d90

08019240 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b084      	sub	sp, #16
 8019244:	af00      	add	r7, sp, #0
 8019246:	4603      	mov	r3, r0
 8019248:	603a      	str	r2, [r7, #0]
 801924a:	71fb      	strb	r3, [r7, #7]
 801924c:	460b      	mov	r3, r1
 801924e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8019250:	79fb      	ldrb	r3, [r7, #7]
 8019252:	4a09      	ldr	r2, [pc, #36]	@ (8019278 <disk_ioctl+0x38>)
 8019254:	009b      	lsls	r3, r3, #2
 8019256:	4413      	add	r3, r2
 8019258:	685b      	ldr	r3, [r3, #4]
 801925a:	691b      	ldr	r3, [r3, #16]
 801925c:	79fa      	ldrb	r2, [r7, #7]
 801925e:	4906      	ldr	r1, [pc, #24]	@ (8019278 <disk_ioctl+0x38>)
 8019260:	440a      	add	r2, r1
 8019262:	7a10      	ldrb	r0, [r2, #8]
 8019264:	79b9      	ldrb	r1, [r7, #6]
 8019266:	683a      	ldr	r2, [r7, #0]
 8019268:	4798      	blx	r3
 801926a:	4603      	mov	r3, r0
 801926c:	73fb      	strb	r3, [r7, #15]
  return res;
 801926e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019270:	4618      	mov	r0, r3
 8019272:	3710      	adds	r7, #16
 8019274:	46bd      	mov	sp, r7
 8019276:	bd80      	pop	{r7, pc}
 8019278:	20001d90 	.word	0x20001d90

0801927c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801927c:	b480      	push	{r7}
 801927e:	b085      	sub	sp, #20
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	3301      	adds	r3, #1
 8019288:	781b      	ldrb	r3, [r3, #0]
 801928a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801928c:	89fb      	ldrh	r3, [r7, #14]
 801928e:	021b      	lsls	r3, r3, #8
 8019290:	b21a      	sxth	r2, r3
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	781b      	ldrb	r3, [r3, #0]
 8019296:	b21b      	sxth	r3, r3
 8019298:	4313      	orrs	r3, r2
 801929a:	b21b      	sxth	r3, r3
 801929c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801929e:	89fb      	ldrh	r3, [r7, #14]
}
 80192a0:	4618      	mov	r0, r3
 80192a2:	3714      	adds	r7, #20
 80192a4:	46bd      	mov	sp, r7
 80192a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192aa:	4770      	bx	lr

080192ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80192ac:	b480      	push	{r7}
 80192ae:	b085      	sub	sp, #20
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	3303      	adds	r3, #3
 80192b8:	781b      	ldrb	r3, [r3, #0]
 80192ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	021b      	lsls	r3, r3, #8
 80192c0:	687a      	ldr	r2, [r7, #4]
 80192c2:	3202      	adds	r2, #2
 80192c4:	7812      	ldrb	r2, [r2, #0]
 80192c6:	4313      	orrs	r3, r2
 80192c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	021b      	lsls	r3, r3, #8
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	3201      	adds	r2, #1
 80192d2:	7812      	ldrb	r2, [r2, #0]
 80192d4:	4313      	orrs	r3, r2
 80192d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	021b      	lsls	r3, r3, #8
 80192dc:	687a      	ldr	r2, [r7, #4]
 80192de:	7812      	ldrb	r2, [r2, #0]
 80192e0:	4313      	orrs	r3, r2
 80192e2:	60fb      	str	r3, [r7, #12]
	return rv;
 80192e4:	68fb      	ldr	r3, [r7, #12]
}
 80192e6:	4618      	mov	r0, r3
 80192e8:	3714      	adds	r7, #20
 80192ea:	46bd      	mov	sp, r7
 80192ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f0:	4770      	bx	lr

080192f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80192f2:	b480      	push	{r7}
 80192f4:	b083      	sub	sp, #12
 80192f6:	af00      	add	r7, sp, #0
 80192f8:	6078      	str	r0, [r7, #4]
 80192fa:	460b      	mov	r3, r1
 80192fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	1c5a      	adds	r2, r3, #1
 8019302:	607a      	str	r2, [r7, #4]
 8019304:	887a      	ldrh	r2, [r7, #2]
 8019306:	b2d2      	uxtb	r2, r2
 8019308:	701a      	strb	r2, [r3, #0]
 801930a:	887b      	ldrh	r3, [r7, #2]
 801930c:	0a1b      	lsrs	r3, r3, #8
 801930e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	1c5a      	adds	r2, r3, #1
 8019314:	607a      	str	r2, [r7, #4]
 8019316:	887a      	ldrh	r2, [r7, #2]
 8019318:	b2d2      	uxtb	r2, r2
 801931a:	701a      	strb	r2, [r3, #0]
}
 801931c:	bf00      	nop
 801931e:	370c      	adds	r7, #12
 8019320:	46bd      	mov	sp, r7
 8019322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019326:	4770      	bx	lr

08019328 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8019328:	b480      	push	{r7}
 801932a:	b083      	sub	sp, #12
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
 8019330:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	1c5a      	adds	r2, r3, #1
 8019336:	607a      	str	r2, [r7, #4]
 8019338:	683a      	ldr	r2, [r7, #0]
 801933a:	b2d2      	uxtb	r2, r2
 801933c:	701a      	strb	r2, [r3, #0]
 801933e:	683b      	ldr	r3, [r7, #0]
 8019340:	0a1b      	lsrs	r3, r3, #8
 8019342:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	1c5a      	adds	r2, r3, #1
 8019348:	607a      	str	r2, [r7, #4]
 801934a:	683a      	ldr	r2, [r7, #0]
 801934c:	b2d2      	uxtb	r2, r2
 801934e:	701a      	strb	r2, [r3, #0]
 8019350:	683b      	ldr	r3, [r7, #0]
 8019352:	0a1b      	lsrs	r3, r3, #8
 8019354:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	1c5a      	adds	r2, r3, #1
 801935a:	607a      	str	r2, [r7, #4]
 801935c:	683a      	ldr	r2, [r7, #0]
 801935e:	b2d2      	uxtb	r2, r2
 8019360:	701a      	strb	r2, [r3, #0]
 8019362:	683b      	ldr	r3, [r7, #0]
 8019364:	0a1b      	lsrs	r3, r3, #8
 8019366:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	1c5a      	adds	r2, r3, #1
 801936c:	607a      	str	r2, [r7, #4]
 801936e:	683a      	ldr	r2, [r7, #0]
 8019370:	b2d2      	uxtb	r2, r2
 8019372:	701a      	strb	r2, [r3, #0]
}
 8019374:	bf00      	nop
 8019376:	370c      	adds	r7, #12
 8019378:	46bd      	mov	sp, r7
 801937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937e:	4770      	bx	lr

08019380 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8019380:	b480      	push	{r7}
 8019382:	b087      	sub	sp, #28
 8019384:	af00      	add	r7, sp, #0
 8019386:	60f8      	str	r0, [r7, #12]
 8019388:	60b9      	str	r1, [r7, #8]
 801938a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8019390:	68bb      	ldr	r3, [r7, #8]
 8019392:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	2b00      	cmp	r3, #0
 8019398:	d00d      	beq.n	80193b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801939a:	693a      	ldr	r2, [r7, #16]
 801939c:	1c53      	adds	r3, r2, #1
 801939e:	613b      	str	r3, [r7, #16]
 80193a0:	697b      	ldr	r3, [r7, #20]
 80193a2:	1c59      	adds	r1, r3, #1
 80193a4:	6179      	str	r1, [r7, #20]
 80193a6:	7812      	ldrb	r2, [r2, #0]
 80193a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	3b01      	subs	r3, #1
 80193ae:	607b      	str	r3, [r7, #4]
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d1f1      	bne.n	801939a <mem_cpy+0x1a>
	}
}
 80193b6:	bf00      	nop
 80193b8:	371c      	adds	r7, #28
 80193ba:	46bd      	mov	sp, r7
 80193bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c0:	4770      	bx	lr

080193c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80193c2:	b480      	push	{r7}
 80193c4:	b087      	sub	sp, #28
 80193c6:	af00      	add	r7, sp, #0
 80193c8:	60f8      	str	r0, [r7, #12]
 80193ca:	60b9      	str	r1, [r7, #8]
 80193cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80193d2:	697b      	ldr	r3, [r7, #20]
 80193d4:	1c5a      	adds	r2, r3, #1
 80193d6:	617a      	str	r2, [r7, #20]
 80193d8:	68ba      	ldr	r2, [r7, #8]
 80193da:	b2d2      	uxtb	r2, r2
 80193dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	3b01      	subs	r3, #1
 80193e2:	607b      	str	r3, [r7, #4]
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d1f3      	bne.n	80193d2 <mem_set+0x10>
}
 80193ea:	bf00      	nop
 80193ec:	bf00      	nop
 80193ee:	371c      	adds	r7, #28
 80193f0:	46bd      	mov	sp, r7
 80193f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f6:	4770      	bx	lr

080193f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80193f8:	b480      	push	{r7}
 80193fa:	b089      	sub	sp, #36	@ 0x24
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	60f8      	str	r0, [r7, #12]
 8019400:	60b9      	str	r1, [r7, #8]
 8019402:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	61fb      	str	r3, [r7, #28]
 8019408:	68bb      	ldr	r3, [r7, #8]
 801940a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801940c:	2300      	movs	r3, #0
 801940e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8019410:	69fb      	ldr	r3, [r7, #28]
 8019412:	1c5a      	adds	r2, r3, #1
 8019414:	61fa      	str	r2, [r7, #28]
 8019416:	781b      	ldrb	r3, [r3, #0]
 8019418:	4619      	mov	r1, r3
 801941a:	69bb      	ldr	r3, [r7, #24]
 801941c:	1c5a      	adds	r2, r3, #1
 801941e:	61ba      	str	r2, [r7, #24]
 8019420:	781b      	ldrb	r3, [r3, #0]
 8019422:	1acb      	subs	r3, r1, r3
 8019424:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	3b01      	subs	r3, #1
 801942a:	607b      	str	r3, [r7, #4]
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d002      	beq.n	8019438 <mem_cmp+0x40>
 8019432:	697b      	ldr	r3, [r7, #20]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d0eb      	beq.n	8019410 <mem_cmp+0x18>

	return r;
 8019438:	697b      	ldr	r3, [r7, #20]
}
 801943a:	4618      	mov	r0, r3
 801943c:	3724      	adds	r7, #36	@ 0x24
 801943e:	46bd      	mov	sp, r7
 8019440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019444:	4770      	bx	lr

08019446 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8019446:	b480      	push	{r7}
 8019448:	b083      	sub	sp, #12
 801944a:	af00      	add	r7, sp, #0
 801944c:	6078      	str	r0, [r7, #4]
 801944e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8019450:	e002      	b.n	8019458 <chk_chr+0x12>
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	3301      	adds	r3, #1
 8019456:	607b      	str	r3, [r7, #4]
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	781b      	ldrb	r3, [r3, #0]
 801945c:	2b00      	cmp	r3, #0
 801945e:	d005      	beq.n	801946c <chk_chr+0x26>
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	781b      	ldrb	r3, [r3, #0]
 8019464:	461a      	mov	r2, r3
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	4293      	cmp	r3, r2
 801946a:	d1f2      	bne.n	8019452 <chk_chr+0xc>
	return *str;
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	781b      	ldrb	r3, [r3, #0]
}
 8019470:	4618      	mov	r0, r3
 8019472:	370c      	adds	r7, #12
 8019474:	46bd      	mov	sp, r7
 8019476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801947a:	4770      	bx	lr

0801947c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801947c:	b480      	push	{r7}
 801947e:	b085      	sub	sp, #20
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
 8019484:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8019486:	2300      	movs	r3, #0
 8019488:	60bb      	str	r3, [r7, #8]
 801948a:	68bb      	ldr	r3, [r7, #8]
 801948c:	60fb      	str	r3, [r7, #12]
 801948e:	e029      	b.n	80194e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8019490:	4a27      	ldr	r2, [pc, #156]	@ (8019530 <chk_lock+0xb4>)
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	011b      	lsls	r3, r3, #4
 8019496:	4413      	add	r3, r2
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d01d      	beq.n	80194da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801949e:	4a24      	ldr	r2, [pc, #144]	@ (8019530 <chk_lock+0xb4>)
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	011b      	lsls	r3, r3, #4
 80194a4:	4413      	add	r3, r2
 80194a6:	681a      	ldr	r2, [r3, #0]
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	429a      	cmp	r2, r3
 80194ae:	d116      	bne.n	80194de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80194b0:	4a1f      	ldr	r2, [pc, #124]	@ (8019530 <chk_lock+0xb4>)
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	011b      	lsls	r3, r3, #4
 80194b6:	4413      	add	r3, r2
 80194b8:	3304      	adds	r3, #4
 80194ba:	681a      	ldr	r2, [r3, #0]
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80194c0:	429a      	cmp	r2, r3
 80194c2:	d10c      	bne.n	80194de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80194c4:	4a1a      	ldr	r2, [pc, #104]	@ (8019530 <chk_lock+0xb4>)
 80194c6:	68fb      	ldr	r3, [r7, #12]
 80194c8:	011b      	lsls	r3, r3, #4
 80194ca:	4413      	add	r3, r2
 80194cc:	3308      	adds	r3, #8
 80194ce:	681a      	ldr	r2, [r3, #0]
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80194d4:	429a      	cmp	r2, r3
 80194d6:	d102      	bne.n	80194de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80194d8:	e007      	b.n	80194ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80194da:	2301      	movs	r3, #1
 80194dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	3301      	adds	r3, #1
 80194e2:	60fb      	str	r3, [r7, #12]
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	2b01      	cmp	r3, #1
 80194e8:	d9d2      	bls.n	8019490 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	2b02      	cmp	r3, #2
 80194ee:	d109      	bne.n	8019504 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80194f0:	68bb      	ldr	r3, [r7, #8]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d102      	bne.n	80194fc <chk_lock+0x80>
 80194f6:	683b      	ldr	r3, [r7, #0]
 80194f8:	2b02      	cmp	r3, #2
 80194fa:	d101      	bne.n	8019500 <chk_lock+0x84>
 80194fc:	2300      	movs	r3, #0
 80194fe:	e010      	b.n	8019522 <chk_lock+0xa6>
 8019500:	2312      	movs	r3, #18
 8019502:	e00e      	b.n	8019522 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8019504:	683b      	ldr	r3, [r7, #0]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d108      	bne.n	801951c <chk_lock+0xa0>
 801950a:	4a09      	ldr	r2, [pc, #36]	@ (8019530 <chk_lock+0xb4>)
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	011b      	lsls	r3, r3, #4
 8019510:	4413      	add	r3, r2
 8019512:	330c      	adds	r3, #12
 8019514:	881b      	ldrh	r3, [r3, #0]
 8019516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801951a:	d101      	bne.n	8019520 <chk_lock+0xa4>
 801951c:	2310      	movs	r3, #16
 801951e:	e000      	b.n	8019522 <chk_lock+0xa6>
 8019520:	2300      	movs	r3, #0
}
 8019522:	4618      	mov	r0, r3
 8019524:	3714      	adds	r7, #20
 8019526:	46bd      	mov	sp, r7
 8019528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952c:	4770      	bx	lr
 801952e:	bf00      	nop
 8019530:	20001b70 	.word	0x20001b70

08019534 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8019534:	b480      	push	{r7}
 8019536:	b083      	sub	sp, #12
 8019538:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801953a:	2300      	movs	r3, #0
 801953c:	607b      	str	r3, [r7, #4]
 801953e:	e002      	b.n	8019546 <enq_lock+0x12>
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	3301      	adds	r3, #1
 8019544:	607b      	str	r3, [r7, #4]
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	2b01      	cmp	r3, #1
 801954a:	d806      	bhi.n	801955a <enq_lock+0x26>
 801954c:	4a09      	ldr	r2, [pc, #36]	@ (8019574 <enq_lock+0x40>)
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	011b      	lsls	r3, r3, #4
 8019552:	4413      	add	r3, r2
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	2b00      	cmp	r3, #0
 8019558:	d1f2      	bne.n	8019540 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	2b02      	cmp	r3, #2
 801955e:	bf14      	ite	ne
 8019560:	2301      	movne	r3, #1
 8019562:	2300      	moveq	r3, #0
 8019564:	b2db      	uxtb	r3, r3
}
 8019566:	4618      	mov	r0, r3
 8019568:	370c      	adds	r7, #12
 801956a:	46bd      	mov	sp, r7
 801956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019570:	4770      	bx	lr
 8019572:	bf00      	nop
 8019574:	20001b70 	.word	0x20001b70

08019578 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8019578:	b480      	push	{r7}
 801957a:	b085      	sub	sp, #20
 801957c:	af00      	add	r7, sp, #0
 801957e:	6078      	str	r0, [r7, #4]
 8019580:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8019582:	2300      	movs	r3, #0
 8019584:	60fb      	str	r3, [r7, #12]
 8019586:	e01f      	b.n	80195c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8019588:	4a41      	ldr	r2, [pc, #260]	@ (8019690 <inc_lock+0x118>)
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	011b      	lsls	r3, r3, #4
 801958e:	4413      	add	r3, r2
 8019590:	681a      	ldr	r2, [r3, #0]
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	429a      	cmp	r2, r3
 8019598:	d113      	bne.n	80195c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801959a:	4a3d      	ldr	r2, [pc, #244]	@ (8019690 <inc_lock+0x118>)
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	011b      	lsls	r3, r3, #4
 80195a0:	4413      	add	r3, r2
 80195a2:	3304      	adds	r3, #4
 80195a4:	681a      	ldr	r2, [r3, #0]
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80195aa:	429a      	cmp	r2, r3
 80195ac:	d109      	bne.n	80195c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80195ae:	4a38      	ldr	r2, [pc, #224]	@ (8019690 <inc_lock+0x118>)
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	011b      	lsls	r3, r3, #4
 80195b4:	4413      	add	r3, r2
 80195b6:	3308      	adds	r3, #8
 80195b8:	681a      	ldr	r2, [r3, #0]
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80195be:	429a      	cmp	r2, r3
 80195c0:	d006      	beq.n	80195d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	3301      	adds	r3, #1
 80195c6:	60fb      	str	r3, [r7, #12]
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	2b01      	cmp	r3, #1
 80195cc:	d9dc      	bls.n	8019588 <inc_lock+0x10>
 80195ce:	e000      	b.n	80195d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80195d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	2b02      	cmp	r3, #2
 80195d6:	d132      	bne.n	801963e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80195d8:	2300      	movs	r3, #0
 80195da:	60fb      	str	r3, [r7, #12]
 80195dc:	e002      	b.n	80195e4 <inc_lock+0x6c>
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	3301      	adds	r3, #1
 80195e2:	60fb      	str	r3, [r7, #12]
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	2b01      	cmp	r3, #1
 80195e8:	d806      	bhi.n	80195f8 <inc_lock+0x80>
 80195ea:	4a29      	ldr	r2, [pc, #164]	@ (8019690 <inc_lock+0x118>)
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	011b      	lsls	r3, r3, #4
 80195f0:	4413      	add	r3, r2
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d1f2      	bne.n	80195de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	2b02      	cmp	r3, #2
 80195fc:	d101      	bne.n	8019602 <inc_lock+0x8a>
 80195fe:	2300      	movs	r3, #0
 8019600:	e040      	b.n	8019684 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	681a      	ldr	r2, [r3, #0]
 8019606:	4922      	ldr	r1, [pc, #136]	@ (8019690 <inc_lock+0x118>)
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	011b      	lsls	r3, r3, #4
 801960c:	440b      	add	r3, r1
 801960e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	689a      	ldr	r2, [r3, #8]
 8019614:	491e      	ldr	r1, [pc, #120]	@ (8019690 <inc_lock+0x118>)
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	011b      	lsls	r3, r3, #4
 801961a:	440b      	add	r3, r1
 801961c:	3304      	adds	r3, #4
 801961e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	695a      	ldr	r2, [r3, #20]
 8019624:	491a      	ldr	r1, [pc, #104]	@ (8019690 <inc_lock+0x118>)
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	011b      	lsls	r3, r3, #4
 801962a:	440b      	add	r3, r1
 801962c:	3308      	adds	r3, #8
 801962e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8019630:	4a17      	ldr	r2, [pc, #92]	@ (8019690 <inc_lock+0x118>)
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	011b      	lsls	r3, r3, #4
 8019636:	4413      	add	r3, r2
 8019638:	330c      	adds	r3, #12
 801963a:	2200      	movs	r2, #0
 801963c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	2b00      	cmp	r3, #0
 8019642:	d009      	beq.n	8019658 <inc_lock+0xe0>
 8019644:	4a12      	ldr	r2, [pc, #72]	@ (8019690 <inc_lock+0x118>)
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	011b      	lsls	r3, r3, #4
 801964a:	4413      	add	r3, r2
 801964c:	330c      	adds	r3, #12
 801964e:	881b      	ldrh	r3, [r3, #0]
 8019650:	2b00      	cmp	r3, #0
 8019652:	d001      	beq.n	8019658 <inc_lock+0xe0>
 8019654:	2300      	movs	r3, #0
 8019656:	e015      	b.n	8019684 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8019658:	683b      	ldr	r3, [r7, #0]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d108      	bne.n	8019670 <inc_lock+0xf8>
 801965e:	4a0c      	ldr	r2, [pc, #48]	@ (8019690 <inc_lock+0x118>)
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	011b      	lsls	r3, r3, #4
 8019664:	4413      	add	r3, r2
 8019666:	330c      	adds	r3, #12
 8019668:	881b      	ldrh	r3, [r3, #0]
 801966a:	3301      	adds	r3, #1
 801966c:	b29a      	uxth	r2, r3
 801966e:	e001      	b.n	8019674 <inc_lock+0xfc>
 8019670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019674:	4906      	ldr	r1, [pc, #24]	@ (8019690 <inc_lock+0x118>)
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	011b      	lsls	r3, r3, #4
 801967a:	440b      	add	r3, r1
 801967c:	330c      	adds	r3, #12
 801967e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	3301      	adds	r3, #1
}
 8019684:	4618      	mov	r0, r3
 8019686:	3714      	adds	r7, #20
 8019688:	46bd      	mov	sp, r7
 801968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801968e:	4770      	bx	lr
 8019690:	20001b70 	.word	0x20001b70

08019694 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8019694:	b480      	push	{r7}
 8019696:	b085      	sub	sp, #20
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	3b01      	subs	r3, #1
 80196a0:	607b      	str	r3, [r7, #4]
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	2b01      	cmp	r3, #1
 80196a6:	d825      	bhi.n	80196f4 <dec_lock+0x60>
		n = Files[i].ctr;
 80196a8:	4a17      	ldr	r2, [pc, #92]	@ (8019708 <dec_lock+0x74>)
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	011b      	lsls	r3, r3, #4
 80196ae:	4413      	add	r3, r2
 80196b0:	330c      	adds	r3, #12
 80196b2:	881b      	ldrh	r3, [r3, #0]
 80196b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80196b6:	89fb      	ldrh	r3, [r7, #14]
 80196b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80196bc:	d101      	bne.n	80196c2 <dec_lock+0x2e>
 80196be:	2300      	movs	r3, #0
 80196c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80196c2:	89fb      	ldrh	r3, [r7, #14]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d002      	beq.n	80196ce <dec_lock+0x3a>
 80196c8:	89fb      	ldrh	r3, [r7, #14]
 80196ca:	3b01      	subs	r3, #1
 80196cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80196ce:	4a0e      	ldr	r2, [pc, #56]	@ (8019708 <dec_lock+0x74>)
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	011b      	lsls	r3, r3, #4
 80196d4:	4413      	add	r3, r2
 80196d6:	330c      	adds	r3, #12
 80196d8:	89fa      	ldrh	r2, [r7, #14]
 80196da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80196dc:	89fb      	ldrh	r3, [r7, #14]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d105      	bne.n	80196ee <dec_lock+0x5a>
 80196e2:	4a09      	ldr	r2, [pc, #36]	@ (8019708 <dec_lock+0x74>)
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	011b      	lsls	r3, r3, #4
 80196e8:	4413      	add	r3, r2
 80196ea:	2200      	movs	r2, #0
 80196ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80196ee:	2300      	movs	r3, #0
 80196f0:	737b      	strb	r3, [r7, #13]
 80196f2:	e001      	b.n	80196f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80196f4:	2302      	movs	r3, #2
 80196f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80196f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80196fa:	4618      	mov	r0, r3
 80196fc:	3714      	adds	r7, #20
 80196fe:	46bd      	mov	sp, r7
 8019700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019704:	4770      	bx	lr
 8019706:	bf00      	nop
 8019708:	20001b70 	.word	0x20001b70

0801970c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801970c:	b480      	push	{r7}
 801970e:	b085      	sub	sp, #20
 8019710:	af00      	add	r7, sp, #0
 8019712:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8019714:	2300      	movs	r3, #0
 8019716:	60fb      	str	r3, [r7, #12]
 8019718:	e010      	b.n	801973c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801971a:	4a0d      	ldr	r2, [pc, #52]	@ (8019750 <clear_lock+0x44>)
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	011b      	lsls	r3, r3, #4
 8019720:	4413      	add	r3, r2
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	687a      	ldr	r2, [r7, #4]
 8019726:	429a      	cmp	r2, r3
 8019728:	d105      	bne.n	8019736 <clear_lock+0x2a>
 801972a:	4a09      	ldr	r2, [pc, #36]	@ (8019750 <clear_lock+0x44>)
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	011b      	lsls	r3, r3, #4
 8019730:	4413      	add	r3, r2
 8019732:	2200      	movs	r2, #0
 8019734:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	3301      	adds	r3, #1
 801973a:	60fb      	str	r3, [r7, #12]
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	2b01      	cmp	r3, #1
 8019740:	d9eb      	bls.n	801971a <clear_lock+0xe>
	}
}
 8019742:	bf00      	nop
 8019744:	bf00      	nop
 8019746:	3714      	adds	r7, #20
 8019748:	46bd      	mov	sp, r7
 801974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974e:	4770      	bx	lr
 8019750:	20001b70 	.word	0x20001b70

08019754 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8019754:	b580      	push	{r7, lr}
 8019756:	b086      	sub	sp, #24
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801975c:	2300      	movs	r3, #0
 801975e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	78db      	ldrb	r3, [r3, #3]
 8019764:	2b00      	cmp	r3, #0
 8019766:	d034      	beq.n	80197d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801976c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	7858      	ldrb	r0, [r3, #1]
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8019778:	2301      	movs	r3, #1
 801977a:	697a      	ldr	r2, [r7, #20]
 801977c:	f7ff fd40 	bl	8019200 <disk_write>
 8019780:	4603      	mov	r3, r0
 8019782:	2b00      	cmp	r3, #0
 8019784:	d002      	beq.n	801978c <sync_window+0x38>
			res = FR_DISK_ERR;
 8019786:	2301      	movs	r3, #1
 8019788:	73fb      	strb	r3, [r7, #15]
 801978a:	e022      	b.n	80197d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	2200      	movs	r2, #0
 8019790:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019796:	697a      	ldr	r2, [r7, #20]
 8019798:	1ad2      	subs	r2, r2, r3
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	69db      	ldr	r3, [r3, #28]
 801979e:	429a      	cmp	r2, r3
 80197a0:	d217      	bcs.n	80197d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	789b      	ldrb	r3, [r3, #2]
 80197a6:	613b      	str	r3, [r7, #16]
 80197a8:	e010      	b.n	80197cc <sync_window+0x78>
					wsect += fs->fsize;
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	69db      	ldr	r3, [r3, #28]
 80197ae:	697a      	ldr	r2, [r7, #20]
 80197b0:	4413      	add	r3, r2
 80197b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	7858      	ldrb	r0, [r3, #1]
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80197be:	2301      	movs	r3, #1
 80197c0:	697a      	ldr	r2, [r7, #20]
 80197c2:	f7ff fd1d 	bl	8019200 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80197c6:	693b      	ldr	r3, [r7, #16]
 80197c8:	3b01      	subs	r3, #1
 80197ca:	613b      	str	r3, [r7, #16]
 80197cc:	693b      	ldr	r3, [r7, #16]
 80197ce:	2b01      	cmp	r3, #1
 80197d0:	d8eb      	bhi.n	80197aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80197d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80197d4:	4618      	mov	r0, r3
 80197d6:	3718      	adds	r7, #24
 80197d8:	46bd      	mov	sp, r7
 80197da:	bd80      	pop	{r7, pc}

080197dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b084      	sub	sp, #16
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
 80197e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80197e6:	2300      	movs	r3, #0
 80197e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80197ee:	683a      	ldr	r2, [r7, #0]
 80197f0:	429a      	cmp	r2, r3
 80197f2:	d01b      	beq.n	801982c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80197f4:	6878      	ldr	r0, [r7, #4]
 80197f6:	f7ff ffad 	bl	8019754 <sync_window>
 80197fa:	4603      	mov	r3, r0
 80197fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80197fe:	7bfb      	ldrb	r3, [r7, #15]
 8019800:	2b00      	cmp	r3, #0
 8019802:	d113      	bne.n	801982c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	7858      	ldrb	r0, [r3, #1]
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801980e:	2301      	movs	r3, #1
 8019810:	683a      	ldr	r2, [r7, #0]
 8019812:	f7ff fcd5 	bl	80191c0 <disk_read>
 8019816:	4603      	mov	r3, r0
 8019818:	2b00      	cmp	r3, #0
 801981a:	d004      	beq.n	8019826 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801981c:	f04f 33ff 	mov.w	r3, #4294967295
 8019820:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8019822:	2301      	movs	r3, #1
 8019824:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	683a      	ldr	r2, [r7, #0]
 801982a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 801982c:	7bfb      	ldrb	r3, [r7, #15]
}
 801982e:	4618      	mov	r0, r3
 8019830:	3710      	adds	r7, #16
 8019832:	46bd      	mov	sp, r7
 8019834:	bd80      	pop	{r7, pc}
	...

08019838 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b084      	sub	sp, #16
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8019840:	6878      	ldr	r0, [r7, #4]
 8019842:	f7ff ff87 	bl	8019754 <sync_window>
 8019846:	4603      	mov	r3, r0
 8019848:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801984a:	7bfb      	ldrb	r3, [r7, #15]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d158      	bne.n	8019902 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	781b      	ldrb	r3, [r3, #0]
 8019854:	2b03      	cmp	r3, #3
 8019856:	d148      	bne.n	80198ea <sync_fs+0xb2>
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	791b      	ldrb	r3, [r3, #4]
 801985c:	2b01      	cmp	r3, #1
 801985e:	d144      	bne.n	80198ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	3334      	adds	r3, #52	@ 0x34
 8019864:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019868:	2100      	movs	r1, #0
 801986a:	4618      	mov	r0, r3
 801986c:	f7ff fda9 	bl	80193c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	3334      	adds	r3, #52	@ 0x34
 8019874:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019878:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801987c:	4618      	mov	r0, r3
 801987e:	f7ff fd38 	bl	80192f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	3334      	adds	r3, #52	@ 0x34
 8019886:	4921      	ldr	r1, [pc, #132]	@ (801990c <sync_fs+0xd4>)
 8019888:	4618      	mov	r0, r3
 801988a:	f7ff fd4d 	bl	8019328 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	3334      	adds	r3, #52	@ 0x34
 8019892:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8019896:	491e      	ldr	r1, [pc, #120]	@ (8019910 <sync_fs+0xd8>)
 8019898:	4618      	mov	r0, r3
 801989a:	f7ff fd45 	bl	8019328 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	3334      	adds	r3, #52	@ 0x34
 80198a2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	695b      	ldr	r3, [r3, #20]
 80198aa:	4619      	mov	r1, r3
 80198ac:	4610      	mov	r0, r2
 80198ae:	f7ff fd3b 	bl	8019328 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	3334      	adds	r3, #52	@ 0x34
 80198b6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	691b      	ldr	r3, [r3, #16]
 80198be:	4619      	mov	r1, r3
 80198c0:	4610      	mov	r0, r2
 80198c2:	f7ff fd31 	bl	8019328 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	6a1b      	ldr	r3, [r3, #32]
 80198ca:	1c5a      	adds	r2, r3, #1
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	7858      	ldrb	r0, [r3, #1]
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80198de:	2301      	movs	r3, #1
 80198e0:	f7ff fc8e 	bl	8019200 <disk_write>
			fs->fsi_flag = 0;
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	2200      	movs	r2, #0
 80198e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	785b      	ldrb	r3, [r3, #1]
 80198ee:	2200      	movs	r2, #0
 80198f0:	2100      	movs	r1, #0
 80198f2:	4618      	mov	r0, r3
 80198f4:	f7ff fca4 	bl	8019240 <disk_ioctl>
 80198f8:	4603      	mov	r3, r0
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d001      	beq.n	8019902 <sync_fs+0xca>
 80198fe:	2301      	movs	r3, #1
 8019900:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8019902:	7bfb      	ldrb	r3, [r7, #15]
}
 8019904:	4618      	mov	r0, r3
 8019906:	3710      	adds	r7, #16
 8019908:	46bd      	mov	sp, r7
 801990a:	bd80      	pop	{r7, pc}
 801990c:	41615252 	.word	0x41615252
 8019910:	61417272 	.word	0x61417272

08019914 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8019914:	b480      	push	{r7}
 8019916:	b083      	sub	sp, #12
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
 801991c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	3b02      	subs	r3, #2
 8019922:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	699b      	ldr	r3, [r3, #24]
 8019928:	3b02      	subs	r3, #2
 801992a:	683a      	ldr	r2, [r7, #0]
 801992c:	429a      	cmp	r2, r3
 801992e:	d301      	bcc.n	8019934 <clust2sect+0x20>
 8019930:	2300      	movs	r3, #0
 8019932:	e008      	b.n	8019946 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	895b      	ldrh	r3, [r3, #10]
 8019938:	461a      	mov	r2, r3
 801993a:	683b      	ldr	r3, [r7, #0]
 801993c:	fb03 f202 	mul.w	r2, r3, r2
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019944:	4413      	add	r3, r2
}
 8019946:	4618      	mov	r0, r3
 8019948:	370c      	adds	r7, #12
 801994a:	46bd      	mov	sp, r7
 801994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019950:	4770      	bx	lr

08019952 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8019952:	b580      	push	{r7, lr}
 8019954:	b086      	sub	sp, #24
 8019956:	af00      	add	r7, sp, #0
 8019958:	6078      	str	r0, [r7, #4]
 801995a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	2b01      	cmp	r3, #1
 8019966:	d904      	bls.n	8019972 <get_fat+0x20>
 8019968:	693b      	ldr	r3, [r7, #16]
 801996a:	699b      	ldr	r3, [r3, #24]
 801996c:	683a      	ldr	r2, [r7, #0]
 801996e:	429a      	cmp	r2, r3
 8019970:	d302      	bcc.n	8019978 <get_fat+0x26>
		val = 1;	/* Internal error */
 8019972:	2301      	movs	r3, #1
 8019974:	617b      	str	r3, [r7, #20]
 8019976:	e08e      	b.n	8019a96 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8019978:	f04f 33ff 	mov.w	r3, #4294967295
 801997c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801997e:	693b      	ldr	r3, [r7, #16]
 8019980:	781b      	ldrb	r3, [r3, #0]
 8019982:	2b03      	cmp	r3, #3
 8019984:	d061      	beq.n	8019a4a <get_fat+0xf8>
 8019986:	2b03      	cmp	r3, #3
 8019988:	dc7b      	bgt.n	8019a82 <get_fat+0x130>
 801998a:	2b01      	cmp	r3, #1
 801998c:	d002      	beq.n	8019994 <get_fat+0x42>
 801998e:	2b02      	cmp	r3, #2
 8019990:	d041      	beq.n	8019a16 <get_fat+0xc4>
 8019992:	e076      	b.n	8019a82 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8019994:	683b      	ldr	r3, [r7, #0]
 8019996:	60fb      	str	r3, [r7, #12]
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	085b      	lsrs	r3, r3, #1
 801999c:	68fa      	ldr	r2, [r7, #12]
 801999e:	4413      	add	r3, r2
 80199a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80199a2:	693b      	ldr	r3, [r7, #16]
 80199a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	0a5b      	lsrs	r3, r3, #9
 80199aa:	4413      	add	r3, r2
 80199ac:	4619      	mov	r1, r3
 80199ae:	6938      	ldr	r0, [r7, #16]
 80199b0:	f7ff ff14 	bl	80197dc <move_window>
 80199b4:	4603      	mov	r3, r0
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d166      	bne.n	8019a88 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	1c5a      	adds	r2, r3, #1
 80199be:	60fa      	str	r2, [r7, #12]
 80199c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80199c4:	693a      	ldr	r2, [r7, #16]
 80199c6:	4413      	add	r3, r2
 80199c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80199cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80199ce:	693b      	ldr	r3, [r7, #16]
 80199d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	0a5b      	lsrs	r3, r3, #9
 80199d6:	4413      	add	r3, r2
 80199d8:	4619      	mov	r1, r3
 80199da:	6938      	ldr	r0, [r7, #16]
 80199dc:	f7ff fefe 	bl	80197dc <move_window>
 80199e0:	4603      	mov	r3, r0
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d152      	bne.n	8019a8c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80199ec:	693a      	ldr	r2, [r7, #16]
 80199ee:	4413      	add	r3, r2
 80199f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80199f4:	021b      	lsls	r3, r3, #8
 80199f6:	68ba      	ldr	r2, [r7, #8]
 80199f8:	4313      	orrs	r3, r2
 80199fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	f003 0301 	and.w	r3, r3, #1
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d002      	beq.n	8019a0c <get_fat+0xba>
 8019a06:	68bb      	ldr	r3, [r7, #8]
 8019a08:	091b      	lsrs	r3, r3, #4
 8019a0a:	e002      	b.n	8019a12 <get_fat+0xc0>
 8019a0c:	68bb      	ldr	r3, [r7, #8]
 8019a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019a12:	617b      	str	r3, [r7, #20]
			break;
 8019a14:	e03f      	b.n	8019a96 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019a16:	693b      	ldr	r3, [r7, #16]
 8019a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a1a:	683b      	ldr	r3, [r7, #0]
 8019a1c:	0a1b      	lsrs	r3, r3, #8
 8019a1e:	4413      	add	r3, r2
 8019a20:	4619      	mov	r1, r3
 8019a22:	6938      	ldr	r0, [r7, #16]
 8019a24:	f7ff feda 	bl	80197dc <move_window>
 8019a28:	4603      	mov	r3, r0
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d130      	bne.n	8019a90 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019a2e:	693b      	ldr	r3, [r7, #16]
 8019a30:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019a34:	683b      	ldr	r3, [r7, #0]
 8019a36:	005b      	lsls	r3, r3, #1
 8019a38:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019a3c:	4413      	add	r3, r2
 8019a3e:	4618      	mov	r0, r3
 8019a40:	f7ff fc1c 	bl	801927c <ld_word>
 8019a44:	4603      	mov	r3, r0
 8019a46:	617b      	str	r3, [r7, #20]
			break;
 8019a48:	e025      	b.n	8019a96 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019a4a:	693b      	ldr	r3, [r7, #16]
 8019a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a4e:	683b      	ldr	r3, [r7, #0]
 8019a50:	09db      	lsrs	r3, r3, #7
 8019a52:	4413      	add	r3, r2
 8019a54:	4619      	mov	r1, r3
 8019a56:	6938      	ldr	r0, [r7, #16]
 8019a58:	f7ff fec0 	bl	80197dc <move_window>
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d118      	bne.n	8019a94 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019a62:	693b      	ldr	r3, [r7, #16]
 8019a64:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019a68:	683b      	ldr	r3, [r7, #0]
 8019a6a:	009b      	lsls	r3, r3, #2
 8019a6c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019a70:	4413      	add	r3, r2
 8019a72:	4618      	mov	r0, r3
 8019a74:	f7ff fc1a 	bl	80192ac <ld_dword>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8019a7e:	617b      	str	r3, [r7, #20]
			break;
 8019a80:	e009      	b.n	8019a96 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8019a82:	2301      	movs	r3, #1
 8019a84:	617b      	str	r3, [r7, #20]
 8019a86:	e006      	b.n	8019a96 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019a88:	bf00      	nop
 8019a8a:	e004      	b.n	8019a96 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019a8c:	bf00      	nop
 8019a8e:	e002      	b.n	8019a96 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019a90:	bf00      	nop
 8019a92:	e000      	b.n	8019a96 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019a94:	bf00      	nop
		}
	}

	return val;
 8019a96:	697b      	ldr	r3, [r7, #20]
}
 8019a98:	4618      	mov	r0, r3
 8019a9a:	3718      	adds	r7, #24
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	bd80      	pop	{r7, pc}

08019aa0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8019aa0:	b590      	push	{r4, r7, lr}
 8019aa2:	b089      	sub	sp, #36	@ 0x24
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	60f8      	str	r0, [r7, #12]
 8019aa8:	60b9      	str	r1, [r7, #8]
 8019aaa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8019aac:	2302      	movs	r3, #2
 8019aae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019ab0:	68bb      	ldr	r3, [r7, #8]
 8019ab2:	2b01      	cmp	r3, #1
 8019ab4:	f240 80d9 	bls.w	8019c6a <put_fat+0x1ca>
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	699b      	ldr	r3, [r3, #24]
 8019abc:	68ba      	ldr	r2, [r7, #8]
 8019abe:	429a      	cmp	r2, r3
 8019ac0:	f080 80d3 	bcs.w	8019c6a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	781b      	ldrb	r3, [r3, #0]
 8019ac8:	2b03      	cmp	r3, #3
 8019aca:	f000 8096 	beq.w	8019bfa <put_fat+0x15a>
 8019ace:	2b03      	cmp	r3, #3
 8019ad0:	f300 80cb 	bgt.w	8019c6a <put_fat+0x1ca>
 8019ad4:	2b01      	cmp	r3, #1
 8019ad6:	d002      	beq.n	8019ade <put_fat+0x3e>
 8019ad8:	2b02      	cmp	r3, #2
 8019ada:	d06e      	beq.n	8019bba <put_fat+0x11a>
 8019adc:	e0c5      	b.n	8019c6a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8019ade:	68bb      	ldr	r3, [r7, #8]
 8019ae0:	61bb      	str	r3, [r7, #24]
 8019ae2:	69bb      	ldr	r3, [r7, #24]
 8019ae4:	085b      	lsrs	r3, r3, #1
 8019ae6:	69ba      	ldr	r2, [r7, #24]
 8019ae8:	4413      	add	r3, r2
 8019aea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019af0:	69bb      	ldr	r3, [r7, #24]
 8019af2:	0a5b      	lsrs	r3, r3, #9
 8019af4:	4413      	add	r3, r2
 8019af6:	4619      	mov	r1, r3
 8019af8:	68f8      	ldr	r0, [r7, #12]
 8019afa:	f7ff fe6f 	bl	80197dc <move_window>
 8019afe:	4603      	mov	r3, r0
 8019b00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019b02:	7ffb      	ldrb	r3, [r7, #31]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	f040 80a9 	bne.w	8019c5c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b10:	69bb      	ldr	r3, [r7, #24]
 8019b12:	1c59      	adds	r1, r3, #1
 8019b14:	61b9      	str	r1, [r7, #24]
 8019b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b1a:	4413      	add	r3, r2
 8019b1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	f003 0301 	and.w	r3, r3, #1
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d00d      	beq.n	8019b44 <put_fat+0xa4>
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	781b      	ldrb	r3, [r3, #0]
 8019b2c:	b25b      	sxtb	r3, r3
 8019b2e:	f003 030f 	and.w	r3, r3, #15
 8019b32:	b25a      	sxtb	r2, r3
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	b2db      	uxtb	r3, r3
 8019b38:	011b      	lsls	r3, r3, #4
 8019b3a:	b25b      	sxtb	r3, r3
 8019b3c:	4313      	orrs	r3, r2
 8019b3e:	b25b      	sxtb	r3, r3
 8019b40:	b2db      	uxtb	r3, r3
 8019b42:	e001      	b.n	8019b48 <put_fat+0xa8>
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	b2db      	uxtb	r3, r3
 8019b48:	697a      	ldr	r2, [r7, #20]
 8019b4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	2201      	movs	r2, #1
 8019b50:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b56:	69bb      	ldr	r3, [r7, #24]
 8019b58:	0a5b      	lsrs	r3, r3, #9
 8019b5a:	4413      	add	r3, r2
 8019b5c:	4619      	mov	r1, r3
 8019b5e:	68f8      	ldr	r0, [r7, #12]
 8019b60:	f7ff fe3c 	bl	80197dc <move_window>
 8019b64:	4603      	mov	r3, r0
 8019b66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019b68:	7ffb      	ldrb	r3, [r7, #31]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d178      	bne.n	8019c60 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b74:	69bb      	ldr	r3, [r7, #24]
 8019b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b7a:	4413      	add	r3, r2
 8019b7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019b7e:	68bb      	ldr	r3, [r7, #8]
 8019b80:	f003 0301 	and.w	r3, r3, #1
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d003      	beq.n	8019b90 <put_fat+0xf0>
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	091b      	lsrs	r3, r3, #4
 8019b8c:	b2db      	uxtb	r3, r3
 8019b8e:	e00e      	b.n	8019bae <put_fat+0x10e>
 8019b90:	697b      	ldr	r3, [r7, #20]
 8019b92:	781b      	ldrb	r3, [r3, #0]
 8019b94:	b25b      	sxtb	r3, r3
 8019b96:	f023 030f 	bic.w	r3, r3, #15
 8019b9a:	b25a      	sxtb	r2, r3
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	0a1b      	lsrs	r3, r3, #8
 8019ba0:	b25b      	sxtb	r3, r3
 8019ba2:	f003 030f 	and.w	r3, r3, #15
 8019ba6:	b25b      	sxtb	r3, r3
 8019ba8:	4313      	orrs	r3, r2
 8019baa:	b25b      	sxtb	r3, r3
 8019bac:	b2db      	uxtb	r3, r3
 8019bae:	697a      	ldr	r2, [r7, #20]
 8019bb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	2201      	movs	r2, #1
 8019bb6:	70da      	strb	r2, [r3, #3]
			break;
 8019bb8:	e057      	b.n	8019c6a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bbe:	68bb      	ldr	r3, [r7, #8]
 8019bc0:	0a1b      	lsrs	r3, r3, #8
 8019bc2:	4413      	add	r3, r2
 8019bc4:	4619      	mov	r1, r3
 8019bc6:	68f8      	ldr	r0, [r7, #12]
 8019bc8:	f7ff fe08 	bl	80197dc <move_window>
 8019bcc:	4603      	mov	r3, r0
 8019bce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019bd0:	7ffb      	ldrb	r3, [r7, #31]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d146      	bne.n	8019c64 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	005b      	lsls	r3, r3, #1
 8019be0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019be4:	4413      	add	r3, r2
 8019be6:	687a      	ldr	r2, [r7, #4]
 8019be8:	b292      	uxth	r2, r2
 8019bea:	4611      	mov	r1, r2
 8019bec:	4618      	mov	r0, r3
 8019bee:	f7ff fb80 	bl	80192f2 <st_word>
			fs->wflag = 1;
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	2201      	movs	r2, #1
 8019bf6:	70da      	strb	r2, [r3, #3]
			break;
 8019bf8:	e037      	b.n	8019c6a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bfe:	68bb      	ldr	r3, [r7, #8]
 8019c00:	09db      	lsrs	r3, r3, #7
 8019c02:	4413      	add	r3, r2
 8019c04:	4619      	mov	r1, r3
 8019c06:	68f8      	ldr	r0, [r7, #12]
 8019c08:	f7ff fde8 	bl	80197dc <move_window>
 8019c0c:	4603      	mov	r3, r0
 8019c0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019c10:	7ffb      	ldrb	r3, [r7, #31]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d128      	bne.n	8019c68 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c22:	68bb      	ldr	r3, [r7, #8]
 8019c24:	009b      	lsls	r3, r3, #2
 8019c26:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019c2a:	4413      	add	r3, r2
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	f7ff fb3d 	bl	80192ac <ld_dword>
 8019c32:	4603      	mov	r3, r0
 8019c34:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8019c38:	4323      	orrs	r3, r4
 8019c3a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c42:	68bb      	ldr	r3, [r7, #8]
 8019c44:	009b      	lsls	r3, r3, #2
 8019c46:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019c4a:	4413      	add	r3, r2
 8019c4c:	6879      	ldr	r1, [r7, #4]
 8019c4e:	4618      	mov	r0, r3
 8019c50:	f7ff fb6a 	bl	8019328 <st_dword>
			fs->wflag = 1;
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	2201      	movs	r2, #1
 8019c58:	70da      	strb	r2, [r3, #3]
			break;
 8019c5a:	e006      	b.n	8019c6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c5c:	bf00      	nop
 8019c5e:	e004      	b.n	8019c6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c60:	bf00      	nop
 8019c62:	e002      	b.n	8019c6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c64:	bf00      	nop
 8019c66:	e000      	b.n	8019c6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c68:	bf00      	nop
		}
	}
	return res;
 8019c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	3724      	adds	r7, #36	@ 0x24
 8019c70:	46bd      	mov	sp, r7
 8019c72:	bd90      	pop	{r4, r7, pc}

08019c74 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8019c74:	b580      	push	{r7, lr}
 8019c76:	b088      	sub	sp, #32
 8019c78:	af00      	add	r7, sp, #0
 8019c7a:	60f8      	str	r0, [r7, #12]
 8019c7c:	60b9      	str	r1, [r7, #8]
 8019c7e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8019c80:	2300      	movs	r3, #0
 8019c82:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	2b01      	cmp	r3, #1
 8019c8e:	d904      	bls.n	8019c9a <remove_chain+0x26>
 8019c90:	69bb      	ldr	r3, [r7, #24]
 8019c92:	699b      	ldr	r3, [r3, #24]
 8019c94:	68ba      	ldr	r2, [r7, #8]
 8019c96:	429a      	cmp	r2, r3
 8019c98:	d301      	bcc.n	8019c9e <remove_chain+0x2a>
 8019c9a:	2302      	movs	r3, #2
 8019c9c:	e04b      	b.n	8019d36 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d00c      	beq.n	8019cbe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8019ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8019ca8:	6879      	ldr	r1, [r7, #4]
 8019caa:	69b8      	ldr	r0, [r7, #24]
 8019cac:	f7ff fef8 	bl	8019aa0 <put_fat>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019cb4:	7ffb      	ldrb	r3, [r7, #31]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d001      	beq.n	8019cbe <remove_chain+0x4a>
 8019cba:	7ffb      	ldrb	r3, [r7, #31]
 8019cbc:	e03b      	b.n	8019d36 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019cbe:	68b9      	ldr	r1, [r7, #8]
 8019cc0:	68f8      	ldr	r0, [r7, #12]
 8019cc2:	f7ff fe46 	bl	8019952 <get_fat>
 8019cc6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8019cc8:	697b      	ldr	r3, [r7, #20]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d031      	beq.n	8019d32 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019cce:	697b      	ldr	r3, [r7, #20]
 8019cd0:	2b01      	cmp	r3, #1
 8019cd2:	d101      	bne.n	8019cd8 <remove_chain+0x64>
 8019cd4:	2302      	movs	r3, #2
 8019cd6:	e02e      	b.n	8019d36 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019cd8:	697b      	ldr	r3, [r7, #20]
 8019cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cde:	d101      	bne.n	8019ce4 <remove_chain+0x70>
 8019ce0:	2301      	movs	r3, #1
 8019ce2:	e028      	b.n	8019d36 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	68b9      	ldr	r1, [r7, #8]
 8019ce8:	69b8      	ldr	r0, [r7, #24]
 8019cea:	f7ff fed9 	bl	8019aa0 <put_fat>
 8019cee:	4603      	mov	r3, r0
 8019cf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8019cf2:	7ffb      	ldrb	r3, [r7, #31]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d001      	beq.n	8019cfc <remove_chain+0x88>
 8019cf8:	7ffb      	ldrb	r3, [r7, #31]
 8019cfa:	e01c      	b.n	8019d36 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019cfc:	69bb      	ldr	r3, [r7, #24]
 8019cfe:	695a      	ldr	r2, [r3, #20]
 8019d00:	69bb      	ldr	r3, [r7, #24]
 8019d02:	699b      	ldr	r3, [r3, #24]
 8019d04:	3b02      	subs	r3, #2
 8019d06:	429a      	cmp	r2, r3
 8019d08:	d20b      	bcs.n	8019d22 <remove_chain+0xae>
			fs->free_clst++;
 8019d0a:	69bb      	ldr	r3, [r7, #24]
 8019d0c:	695b      	ldr	r3, [r3, #20]
 8019d0e:	1c5a      	adds	r2, r3, #1
 8019d10:	69bb      	ldr	r3, [r7, #24]
 8019d12:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8019d14:	69bb      	ldr	r3, [r7, #24]
 8019d16:	791b      	ldrb	r3, [r3, #4]
 8019d18:	f043 0301 	orr.w	r3, r3, #1
 8019d1c:	b2da      	uxtb	r2, r3
 8019d1e:	69bb      	ldr	r3, [r7, #24]
 8019d20:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8019d26:	69bb      	ldr	r3, [r7, #24]
 8019d28:	699b      	ldr	r3, [r3, #24]
 8019d2a:	68ba      	ldr	r2, [r7, #8]
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	d3c6      	bcc.n	8019cbe <remove_chain+0x4a>
 8019d30:	e000      	b.n	8019d34 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8019d32:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8019d34:	2300      	movs	r3, #0
}
 8019d36:	4618      	mov	r0, r3
 8019d38:	3720      	adds	r7, #32
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	bd80      	pop	{r7, pc}

08019d3e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019d3e:	b580      	push	{r7, lr}
 8019d40:	b088      	sub	sp, #32
 8019d42:	af00      	add	r7, sp, #0
 8019d44:	6078      	str	r0, [r7, #4]
 8019d46:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8019d4e:	683b      	ldr	r3, [r7, #0]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d10d      	bne.n	8019d70 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8019d54:	693b      	ldr	r3, [r7, #16]
 8019d56:	691b      	ldr	r3, [r3, #16]
 8019d58:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019d5a:	69bb      	ldr	r3, [r7, #24]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d004      	beq.n	8019d6a <create_chain+0x2c>
 8019d60:	693b      	ldr	r3, [r7, #16]
 8019d62:	699b      	ldr	r3, [r3, #24]
 8019d64:	69ba      	ldr	r2, [r7, #24]
 8019d66:	429a      	cmp	r2, r3
 8019d68:	d31b      	bcc.n	8019da2 <create_chain+0x64>
 8019d6a:	2301      	movs	r3, #1
 8019d6c:	61bb      	str	r3, [r7, #24]
 8019d6e:	e018      	b.n	8019da2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8019d70:	6839      	ldr	r1, [r7, #0]
 8019d72:	6878      	ldr	r0, [r7, #4]
 8019d74:	f7ff fded 	bl	8019952 <get_fat>
 8019d78:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	2b01      	cmp	r3, #1
 8019d7e:	d801      	bhi.n	8019d84 <create_chain+0x46>
 8019d80:	2301      	movs	r3, #1
 8019d82:	e070      	b.n	8019e66 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d8a:	d101      	bne.n	8019d90 <create_chain+0x52>
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	e06a      	b.n	8019e66 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8019d90:	693b      	ldr	r3, [r7, #16]
 8019d92:	699b      	ldr	r3, [r3, #24]
 8019d94:	68fa      	ldr	r2, [r7, #12]
 8019d96:	429a      	cmp	r2, r3
 8019d98:	d201      	bcs.n	8019d9e <create_chain+0x60>
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	e063      	b.n	8019e66 <create_chain+0x128>
		scl = clst;
 8019d9e:	683b      	ldr	r3, [r7, #0]
 8019da0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8019da2:	69bb      	ldr	r3, [r7, #24]
 8019da4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8019da6:	69fb      	ldr	r3, [r7, #28]
 8019da8:	3301      	adds	r3, #1
 8019daa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019dac:	693b      	ldr	r3, [r7, #16]
 8019dae:	699b      	ldr	r3, [r3, #24]
 8019db0:	69fa      	ldr	r2, [r7, #28]
 8019db2:	429a      	cmp	r2, r3
 8019db4:	d307      	bcc.n	8019dc6 <create_chain+0x88>
				ncl = 2;
 8019db6:	2302      	movs	r3, #2
 8019db8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8019dba:	69fa      	ldr	r2, [r7, #28]
 8019dbc:	69bb      	ldr	r3, [r7, #24]
 8019dbe:	429a      	cmp	r2, r3
 8019dc0:	d901      	bls.n	8019dc6 <create_chain+0x88>
 8019dc2:	2300      	movs	r3, #0
 8019dc4:	e04f      	b.n	8019e66 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019dc6:	69f9      	ldr	r1, [r7, #28]
 8019dc8:	6878      	ldr	r0, [r7, #4]
 8019dca:	f7ff fdc2 	bl	8019952 <get_fat>
 8019dce:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d00e      	beq.n	8019df4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	2b01      	cmp	r3, #1
 8019dda:	d003      	beq.n	8019de4 <create_chain+0xa6>
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019de2:	d101      	bne.n	8019de8 <create_chain+0xaa>
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	e03e      	b.n	8019e66 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8019de8:	69fa      	ldr	r2, [r7, #28]
 8019dea:	69bb      	ldr	r3, [r7, #24]
 8019dec:	429a      	cmp	r2, r3
 8019dee:	d1da      	bne.n	8019da6 <create_chain+0x68>
 8019df0:	2300      	movs	r3, #0
 8019df2:	e038      	b.n	8019e66 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8019df4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8019df6:	f04f 32ff 	mov.w	r2, #4294967295
 8019dfa:	69f9      	ldr	r1, [r7, #28]
 8019dfc:	6938      	ldr	r0, [r7, #16]
 8019dfe:	f7ff fe4f 	bl	8019aa0 <put_fat>
 8019e02:	4603      	mov	r3, r0
 8019e04:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8019e06:	7dfb      	ldrb	r3, [r7, #23]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d109      	bne.n	8019e20 <create_chain+0xe2>
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d006      	beq.n	8019e20 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019e12:	69fa      	ldr	r2, [r7, #28]
 8019e14:	6839      	ldr	r1, [r7, #0]
 8019e16:	6938      	ldr	r0, [r7, #16]
 8019e18:	f7ff fe42 	bl	8019aa0 <put_fat>
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019e20:	7dfb      	ldrb	r3, [r7, #23]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d116      	bne.n	8019e54 <create_chain+0x116>
		fs->last_clst = ncl;
 8019e26:	693b      	ldr	r3, [r7, #16]
 8019e28:	69fa      	ldr	r2, [r7, #28]
 8019e2a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8019e2c:	693b      	ldr	r3, [r7, #16]
 8019e2e:	695a      	ldr	r2, [r3, #20]
 8019e30:	693b      	ldr	r3, [r7, #16]
 8019e32:	699b      	ldr	r3, [r3, #24]
 8019e34:	3b02      	subs	r3, #2
 8019e36:	429a      	cmp	r2, r3
 8019e38:	d804      	bhi.n	8019e44 <create_chain+0x106>
 8019e3a:	693b      	ldr	r3, [r7, #16]
 8019e3c:	695b      	ldr	r3, [r3, #20]
 8019e3e:	1e5a      	subs	r2, r3, #1
 8019e40:	693b      	ldr	r3, [r7, #16]
 8019e42:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8019e44:	693b      	ldr	r3, [r7, #16]
 8019e46:	791b      	ldrb	r3, [r3, #4]
 8019e48:	f043 0301 	orr.w	r3, r3, #1
 8019e4c:	b2da      	uxtb	r2, r3
 8019e4e:	693b      	ldr	r3, [r7, #16]
 8019e50:	711a      	strb	r2, [r3, #4]
 8019e52:	e007      	b.n	8019e64 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8019e54:	7dfb      	ldrb	r3, [r7, #23]
 8019e56:	2b01      	cmp	r3, #1
 8019e58:	d102      	bne.n	8019e60 <create_chain+0x122>
 8019e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8019e5e:	e000      	b.n	8019e62 <create_chain+0x124>
 8019e60:	2301      	movs	r3, #1
 8019e62:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8019e64:	69fb      	ldr	r3, [r7, #28]
}
 8019e66:	4618      	mov	r0, r3
 8019e68:	3720      	adds	r7, #32
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bd80      	pop	{r7, pc}

08019e6e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8019e6e:	b480      	push	{r7}
 8019e70:	b087      	sub	sp, #28
 8019e72:	af00      	add	r7, sp, #0
 8019e74:	6078      	str	r0, [r7, #4]
 8019e76:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e82:	3304      	adds	r3, #4
 8019e84:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8019e86:	683b      	ldr	r3, [r7, #0]
 8019e88:	0a5b      	lsrs	r3, r3, #9
 8019e8a:	68fa      	ldr	r2, [r7, #12]
 8019e8c:	8952      	ldrh	r2, [r2, #10]
 8019e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e92:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019e94:	693b      	ldr	r3, [r7, #16]
 8019e96:	1d1a      	adds	r2, r3, #4
 8019e98:	613a      	str	r2, [r7, #16]
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8019e9e:	68bb      	ldr	r3, [r7, #8]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d101      	bne.n	8019ea8 <clmt_clust+0x3a>
 8019ea4:	2300      	movs	r3, #0
 8019ea6:	e010      	b.n	8019eca <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8019ea8:	697a      	ldr	r2, [r7, #20]
 8019eaa:	68bb      	ldr	r3, [r7, #8]
 8019eac:	429a      	cmp	r2, r3
 8019eae:	d307      	bcc.n	8019ec0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8019eb0:	697a      	ldr	r2, [r7, #20]
 8019eb2:	68bb      	ldr	r3, [r7, #8]
 8019eb4:	1ad3      	subs	r3, r2, r3
 8019eb6:	617b      	str	r3, [r7, #20]
 8019eb8:	693b      	ldr	r3, [r7, #16]
 8019eba:	3304      	adds	r3, #4
 8019ebc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019ebe:	e7e9      	b.n	8019e94 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8019ec0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8019ec2:	693b      	ldr	r3, [r7, #16]
 8019ec4:	681a      	ldr	r2, [r3, #0]
 8019ec6:	697b      	ldr	r3, [r7, #20]
 8019ec8:	4413      	add	r3, r2
}
 8019eca:	4618      	mov	r0, r3
 8019ecc:	371c      	adds	r7, #28
 8019ece:	46bd      	mov	sp, r7
 8019ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed4:	4770      	bx	lr

08019ed6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8019ed6:	b580      	push	{r7, lr}
 8019ed8:	b086      	sub	sp, #24
 8019eda:	af00      	add	r7, sp, #0
 8019edc:	6078      	str	r0, [r7, #4]
 8019ede:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019eec:	d204      	bcs.n	8019ef8 <dir_sdi+0x22>
 8019eee:	683b      	ldr	r3, [r7, #0]
 8019ef0:	f003 031f 	and.w	r3, r3, #31
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d001      	beq.n	8019efc <dir_sdi+0x26>
		return FR_INT_ERR;
 8019ef8:	2302      	movs	r3, #2
 8019efa:	e063      	b.n	8019fc4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	683a      	ldr	r2, [r7, #0]
 8019f00:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	689b      	ldr	r3, [r3, #8]
 8019f06:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8019f08:	697b      	ldr	r3, [r7, #20]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d106      	bne.n	8019f1c <dir_sdi+0x46>
 8019f0e:	693b      	ldr	r3, [r7, #16]
 8019f10:	781b      	ldrb	r3, [r3, #0]
 8019f12:	2b02      	cmp	r3, #2
 8019f14:	d902      	bls.n	8019f1c <dir_sdi+0x46>
		clst = fs->dirbase;
 8019f16:	693b      	ldr	r3, [r7, #16]
 8019f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f1a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8019f1c:	697b      	ldr	r3, [r7, #20]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d10c      	bne.n	8019f3c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	095b      	lsrs	r3, r3, #5
 8019f26:	693a      	ldr	r2, [r7, #16]
 8019f28:	8912      	ldrh	r2, [r2, #8]
 8019f2a:	4293      	cmp	r3, r2
 8019f2c:	d301      	bcc.n	8019f32 <dir_sdi+0x5c>
 8019f2e:	2302      	movs	r3, #2
 8019f30:	e048      	b.n	8019fc4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8019f32:	693b      	ldr	r3, [r7, #16]
 8019f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	61da      	str	r2, [r3, #28]
 8019f3a:	e029      	b.n	8019f90 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8019f3c:	693b      	ldr	r3, [r7, #16]
 8019f3e:	895b      	ldrh	r3, [r3, #10]
 8019f40:	025b      	lsls	r3, r3, #9
 8019f42:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019f44:	e019      	b.n	8019f7a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	6979      	ldr	r1, [r7, #20]
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	f7ff fd01 	bl	8019952 <get_fat>
 8019f50:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019f52:	697b      	ldr	r3, [r7, #20]
 8019f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f58:	d101      	bne.n	8019f5e <dir_sdi+0x88>
 8019f5a:	2301      	movs	r3, #1
 8019f5c:	e032      	b.n	8019fc4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8019f5e:	697b      	ldr	r3, [r7, #20]
 8019f60:	2b01      	cmp	r3, #1
 8019f62:	d904      	bls.n	8019f6e <dir_sdi+0x98>
 8019f64:	693b      	ldr	r3, [r7, #16]
 8019f66:	699b      	ldr	r3, [r3, #24]
 8019f68:	697a      	ldr	r2, [r7, #20]
 8019f6a:	429a      	cmp	r2, r3
 8019f6c:	d301      	bcc.n	8019f72 <dir_sdi+0x9c>
 8019f6e:	2302      	movs	r3, #2
 8019f70:	e028      	b.n	8019fc4 <dir_sdi+0xee>
			ofs -= csz;
 8019f72:	683a      	ldr	r2, [r7, #0]
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	1ad3      	subs	r3, r2, r3
 8019f78:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019f7a:	683a      	ldr	r2, [r7, #0]
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	429a      	cmp	r2, r3
 8019f80:	d2e1      	bcs.n	8019f46 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8019f82:	6979      	ldr	r1, [r7, #20]
 8019f84:	6938      	ldr	r0, [r7, #16]
 8019f86:	f7ff fcc5 	bl	8019914 <clust2sect>
 8019f8a:	4602      	mov	r2, r0
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	697a      	ldr	r2, [r7, #20]
 8019f94:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	69db      	ldr	r3, [r3, #28]
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d101      	bne.n	8019fa2 <dir_sdi+0xcc>
 8019f9e:	2302      	movs	r3, #2
 8019fa0:	e010      	b.n	8019fc4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	69da      	ldr	r2, [r3, #28]
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	0a5b      	lsrs	r3, r3, #9
 8019faa:	441a      	add	r2, r3
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8019fb0:	693b      	ldr	r3, [r7, #16]
 8019fb2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019fb6:	683b      	ldr	r3, [r7, #0]
 8019fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019fbc:	441a      	add	r2, r3
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019fc2:	2300      	movs	r3, #0
}
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	3718      	adds	r7, #24
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	bd80      	pop	{r7, pc}

08019fcc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b086      	sub	sp, #24
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
 8019fd4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	695b      	ldr	r3, [r3, #20]
 8019fe0:	3320      	adds	r3, #32
 8019fe2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	69db      	ldr	r3, [r3, #28]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d003      	beq.n	8019ff4 <dir_next+0x28>
 8019fec:	68bb      	ldr	r3, [r7, #8]
 8019fee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019ff2:	d301      	bcc.n	8019ff8 <dir_next+0x2c>
 8019ff4:	2304      	movs	r3, #4
 8019ff6:	e0aa      	b.n	801a14e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8019ff8:	68bb      	ldr	r3, [r7, #8]
 8019ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	f040 8098 	bne.w	801a134 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	69db      	ldr	r3, [r3, #28]
 801a008:	1c5a      	adds	r2, r3, #1
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	699b      	ldr	r3, [r3, #24]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d10b      	bne.n	801a02e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801a016:	68bb      	ldr	r3, [r7, #8]
 801a018:	095b      	lsrs	r3, r3, #5
 801a01a:	68fa      	ldr	r2, [r7, #12]
 801a01c:	8912      	ldrh	r2, [r2, #8]
 801a01e:	4293      	cmp	r3, r2
 801a020:	f0c0 8088 	bcc.w	801a134 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	2200      	movs	r2, #0
 801a028:	61da      	str	r2, [r3, #28]
 801a02a:	2304      	movs	r3, #4
 801a02c:	e08f      	b.n	801a14e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	0a5b      	lsrs	r3, r3, #9
 801a032:	68fa      	ldr	r2, [r7, #12]
 801a034:	8952      	ldrh	r2, [r2, #10]
 801a036:	3a01      	subs	r2, #1
 801a038:	4013      	ands	r3, r2
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d17a      	bne.n	801a134 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a03e:	687a      	ldr	r2, [r7, #4]
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	699b      	ldr	r3, [r3, #24]
 801a044:	4619      	mov	r1, r3
 801a046:	4610      	mov	r0, r2
 801a048:	f7ff fc83 	bl	8019952 <get_fat>
 801a04c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a04e:	697b      	ldr	r3, [r7, #20]
 801a050:	2b01      	cmp	r3, #1
 801a052:	d801      	bhi.n	801a058 <dir_next+0x8c>
 801a054:	2302      	movs	r3, #2
 801a056:	e07a      	b.n	801a14e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a058:	697b      	ldr	r3, [r7, #20]
 801a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a05e:	d101      	bne.n	801a064 <dir_next+0x98>
 801a060:	2301      	movs	r3, #1
 801a062:	e074      	b.n	801a14e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801a064:	68fb      	ldr	r3, [r7, #12]
 801a066:	699b      	ldr	r3, [r3, #24]
 801a068:	697a      	ldr	r2, [r7, #20]
 801a06a:	429a      	cmp	r2, r3
 801a06c:	d358      	bcc.n	801a120 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801a06e:	683b      	ldr	r3, [r7, #0]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d104      	bne.n	801a07e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	2200      	movs	r2, #0
 801a078:	61da      	str	r2, [r3, #28]
 801a07a:	2304      	movs	r3, #4
 801a07c:	e067      	b.n	801a14e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801a07e:	687a      	ldr	r2, [r7, #4]
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	699b      	ldr	r3, [r3, #24]
 801a084:	4619      	mov	r1, r3
 801a086:	4610      	mov	r0, r2
 801a088:	f7ff fe59 	bl	8019d3e <create_chain>
 801a08c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801a08e:	697b      	ldr	r3, [r7, #20]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d101      	bne.n	801a098 <dir_next+0xcc>
 801a094:	2307      	movs	r3, #7
 801a096:	e05a      	b.n	801a14e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801a098:	697b      	ldr	r3, [r7, #20]
 801a09a:	2b01      	cmp	r3, #1
 801a09c:	d101      	bne.n	801a0a2 <dir_next+0xd6>
 801a09e:	2302      	movs	r3, #2
 801a0a0:	e055      	b.n	801a14e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a0a2:	697b      	ldr	r3, [r7, #20]
 801a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0a8:	d101      	bne.n	801a0ae <dir_next+0xe2>
 801a0aa:	2301      	movs	r3, #1
 801a0ac:	e04f      	b.n	801a14e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801a0ae:	68f8      	ldr	r0, [r7, #12]
 801a0b0:	f7ff fb50 	bl	8019754 <sync_window>
 801a0b4:	4603      	mov	r3, r0
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d001      	beq.n	801a0be <dir_next+0xf2>
 801a0ba:	2301      	movs	r3, #1
 801a0bc:	e047      	b.n	801a14e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	3334      	adds	r3, #52	@ 0x34
 801a0c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a0c6:	2100      	movs	r1, #0
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f7ff f97a 	bl	80193c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	613b      	str	r3, [r7, #16]
 801a0d2:	6979      	ldr	r1, [r7, #20]
 801a0d4:	68f8      	ldr	r0, [r7, #12]
 801a0d6:	f7ff fc1d 	bl	8019914 <clust2sect>
 801a0da:	4602      	mov	r2, r0
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	631a      	str	r2, [r3, #48]	@ 0x30
 801a0e0:	e012      	b.n	801a108 <dir_next+0x13c>
						fs->wflag = 1;
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	2201      	movs	r2, #1
 801a0e6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801a0e8:	68f8      	ldr	r0, [r7, #12]
 801a0ea:	f7ff fb33 	bl	8019754 <sync_window>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d001      	beq.n	801a0f8 <dir_next+0x12c>
 801a0f4:	2301      	movs	r3, #1
 801a0f6:	e02a      	b.n	801a14e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a0f8:	693b      	ldr	r3, [r7, #16]
 801a0fa:	3301      	adds	r3, #1
 801a0fc:	613b      	str	r3, [r7, #16]
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a102:	1c5a      	adds	r2, r3, #1
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	631a      	str	r2, [r3, #48]	@ 0x30
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	895b      	ldrh	r3, [r3, #10]
 801a10c:	461a      	mov	r2, r3
 801a10e:	693b      	ldr	r3, [r7, #16]
 801a110:	4293      	cmp	r3, r2
 801a112:	d3e6      	bcc.n	801a0e2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a118:	693b      	ldr	r3, [r7, #16]
 801a11a:	1ad2      	subs	r2, r2, r3
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	697a      	ldr	r2, [r7, #20]
 801a124:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801a126:	6979      	ldr	r1, [r7, #20]
 801a128:	68f8      	ldr	r0, [r7, #12]
 801a12a:	f7ff fbf3 	bl	8019914 <clust2sect>
 801a12e:	4602      	mov	r2, r0
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	68ba      	ldr	r2, [r7, #8]
 801a138:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801a140:	68bb      	ldr	r3, [r7, #8]
 801a142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a146:	441a      	add	r2, r3
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801a14c:	2300      	movs	r3, #0
}
 801a14e:	4618      	mov	r0, r3
 801a150:	3718      	adds	r7, #24
 801a152:	46bd      	mov	sp, r7
 801a154:	bd80      	pop	{r7, pc}

0801a156 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801a156:	b580      	push	{r7, lr}
 801a158:	b086      	sub	sp, #24
 801a15a:	af00      	add	r7, sp, #0
 801a15c:	6078      	str	r0, [r7, #4]
 801a15e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801a166:	2100      	movs	r1, #0
 801a168:	6878      	ldr	r0, [r7, #4]
 801a16a:	f7ff feb4 	bl	8019ed6 <dir_sdi>
 801a16e:	4603      	mov	r3, r0
 801a170:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a172:	7dfb      	ldrb	r3, [r7, #23]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d12b      	bne.n	801a1d0 <dir_alloc+0x7a>
		n = 0;
 801a178:	2300      	movs	r3, #0
 801a17a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	69db      	ldr	r3, [r3, #28]
 801a180:	4619      	mov	r1, r3
 801a182:	68f8      	ldr	r0, [r7, #12]
 801a184:	f7ff fb2a 	bl	80197dc <move_window>
 801a188:	4603      	mov	r3, r0
 801a18a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a18c:	7dfb      	ldrb	r3, [r7, #23]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d11d      	bne.n	801a1ce <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	6a1b      	ldr	r3, [r3, #32]
 801a196:	781b      	ldrb	r3, [r3, #0]
 801a198:	2be5      	cmp	r3, #229	@ 0xe5
 801a19a:	d004      	beq.n	801a1a6 <dir_alloc+0x50>
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	6a1b      	ldr	r3, [r3, #32]
 801a1a0:	781b      	ldrb	r3, [r3, #0]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d107      	bne.n	801a1b6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801a1a6:	693b      	ldr	r3, [r7, #16]
 801a1a8:	3301      	adds	r3, #1
 801a1aa:	613b      	str	r3, [r7, #16]
 801a1ac:	693a      	ldr	r2, [r7, #16]
 801a1ae:	683b      	ldr	r3, [r7, #0]
 801a1b0:	429a      	cmp	r2, r3
 801a1b2:	d102      	bne.n	801a1ba <dir_alloc+0x64>
 801a1b4:	e00c      	b.n	801a1d0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801a1ba:	2101      	movs	r1, #1
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	f7ff ff05 	bl	8019fcc <dir_next>
 801a1c2:	4603      	mov	r3, r0
 801a1c4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801a1c6:	7dfb      	ldrb	r3, [r7, #23]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d0d7      	beq.n	801a17c <dir_alloc+0x26>
 801a1cc:	e000      	b.n	801a1d0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801a1ce:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801a1d0:	7dfb      	ldrb	r3, [r7, #23]
 801a1d2:	2b04      	cmp	r3, #4
 801a1d4:	d101      	bne.n	801a1da <dir_alloc+0x84>
 801a1d6:	2307      	movs	r3, #7
 801a1d8:	75fb      	strb	r3, [r7, #23]
	return res;
 801a1da:	7dfb      	ldrb	r3, [r7, #23]
}
 801a1dc:	4618      	mov	r0, r3
 801a1de:	3718      	adds	r7, #24
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}

0801a1e4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801a1e4:	b580      	push	{r7, lr}
 801a1e6:	b084      	sub	sp, #16
 801a1e8:	af00      	add	r7, sp, #0
 801a1ea:	6078      	str	r0, [r7, #4]
 801a1ec:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801a1ee:	683b      	ldr	r3, [r7, #0]
 801a1f0:	331a      	adds	r3, #26
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f7ff f842 	bl	801927c <ld_word>
 801a1f8:	4603      	mov	r3, r0
 801a1fa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	781b      	ldrb	r3, [r3, #0]
 801a200:	2b03      	cmp	r3, #3
 801a202:	d109      	bne.n	801a218 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a204:	683b      	ldr	r3, [r7, #0]
 801a206:	3314      	adds	r3, #20
 801a208:	4618      	mov	r0, r3
 801a20a:	f7ff f837 	bl	801927c <ld_word>
 801a20e:	4603      	mov	r3, r0
 801a210:	041b      	lsls	r3, r3, #16
 801a212:	68fa      	ldr	r2, [r7, #12]
 801a214:	4313      	orrs	r3, r2
 801a216:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801a218:	68fb      	ldr	r3, [r7, #12]
}
 801a21a:	4618      	mov	r0, r3
 801a21c:	3710      	adds	r7, #16
 801a21e:	46bd      	mov	sp, r7
 801a220:	bd80      	pop	{r7, pc}

0801a222 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801a222:	b580      	push	{r7, lr}
 801a224:	b084      	sub	sp, #16
 801a226:	af00      	add	r7, sp, #0
 801a228:	60f8      	str	r0, [r7, #12]
 801a22a:	60b9      	str	r1, [r7, #8]
 801a22c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801a22e:	68bb      	ldr	r3, [r7, #8]
 801a230:	331a      	adds	r3, #26
 801a232:	687a      	ldr	r2, [r7, #4]
 801a234:	b292      	uxth	r2, r2
 801a236:	4611      	mov	r1, r2
 801a238:	4618      	mov	r0, r3
 801a23a:	f7ff f85a 	bl	80192f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	781b      	ldrb	r3, [r3, #0]
 801a242:	2b03      	cmp	r3, #3
 801a244:	d109      	bne.n	801a25a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801a246:	68bb      	ldr	r3, [r7, #8]
 801a248:	f103 0214 	add.w	r2, r3, #20
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	0c1b      	lsrs	r3, r3, #16
 801a250:	b29b      	uxth	r3, r3
 801a252:	4619      	mov	r1, r3
 801a254:	4610      	mov	r0, r2
 801a256:	f7ff f84c 	bl	80192f2 <st_word>
	}
}
 801a25a:	bf00      	nop
 801a25c:	3710      	adds	r7, #16
 801a25e:	46bd      	mov	sp, r7
 801a260:	bd80      	pop	{r7, pc}
	...

0801a264 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801a264:	b590      	push	{r4, r7, lr}
 801a266:	b087      	sub	sp, #28
 801a268:	af00      	add	r7, sp, #0
 801a26a:	6078      	str	r0, [r7, #4]
 801a26c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801a26e:	683b      	ldr	r3, [r7, #0]
 801a270:	331a      	adds	r3, #26
 801a272:	4618      	mov	r0, r3
 801a274:	f7ff f802 	bl	801927c <ld_word>
 801a278:	4603      	mov	r3, r0
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d001      	beq.n	801a282 <cmp_lfn+0x1e>
 801a27e:	2300      	movs	r3, #0
 801a280:	e059      	b.n	801a336 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801a282:	683b      	ldr	r3, [r7, #0]
 801a284:	781b      	ldrb	r3, [r3, #0]
 801a286:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a28a:	1e5a      	subs	r2, r3, #1
 801a28c:	4613      	mov	r3, r2
 801a28e:	005b      	lsls	r3, r3, #1
 801a290:	4413      	add	r3, r2
 801a292:	009b      	lsls	r3, r3, #2
 801a294:	4413      	add	r3, r2
 801a296:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a298:	2301      	movs	r3, #1
 801a29a:	81fb      	strh	r3, [r7, #14]
 801a29c:	2300      	movs	r3, #0
 801a29e:	613b      	str	r3, [r7, #16]
 801a2a0:	e033      	b.n	801a30a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a2a2:	4a27      	ldr	r2, [pc, #156]	@ (801a340 <cmp_lfn+0xdc>)
 801a2a4:	693b      	ldr	r3, [r7, #16]
 801a2a6:	4413      	add	r3, r2
 801a2a8:	781b      	ldrb	r3, [r3, #0]
 801a2aa:	461a      	mov	r2, r3
 801a2ac:	683b      	ldr	r3, [r7, #0]
 801a2ae:	4413      	add	r3, r2
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	f7fe ffe3 	bl	801927c <ld_word>
 801a2b6:	4603      	mov	r3, r0
 801a2b8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a2ba:	89fb      	ldrh	r3, [r7, #14]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d01a      	beq.n	801a2f6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801a2c0:	697b      	ldr	r3, [r7, #20]
 801a2c2:	2bfe      	cmp	r3, #254	@ 0xfe
 801a2c4:	d812      	bhi.n	801a2ec <cmp_lfn+0x88>
 801a2c6:	89bb      	ldrh	r3, [r7, #12]
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	f001 fe21 	bl	801bf10 <ff_wtoupper>
 801a2ce:	4603      	mov	r3, r0
 801a2d0:	461c      	mov	r4, r3
 801a2d2:	697b      	ldr	r3, [r7, #20]
 801a2d4:	1c5a      	adds	r2, r3, #1
 801a2d6:	617a      	str	r2, [r7, #20]
 801a2d8:	005b      	lsls	r3, r3, #1
 801a2da:	687a      	ldr	r2, [r7, #4]
 801a2dc:	4413      	add	r3, r2
 801a2de:	881b      	ldrh	r3, [r3, #0]
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	f001 fe15 	bl	801bf10 <ff_wtoupper>
 801a2e6:	4603      	mov	r3, r0
 801a2e8:	429c      	cmp	r4, r3
 801a2ea:	d001      	beq.n	801a2f0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	e022      	b.n	801a336 <cmp_lfn+0xd2>
			}
			wc = uc;
 801a2f0:	89bb      	ldrh	r3, [r7, #12]
 801a2f2:	81fb      	strh	r3, [r7, #14]
 801a2f4:	e006      	b.n	801a304 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a2f6:	89bb      	ldrh	r3, [r7, #12]
 801a2f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a2fc:	4293      	cmp	r3, r2
 801a2fe:	d001      	beq.n	801a304 <cmp_lfn+0xa0>
 801a300:	2300      	movs	r3, #0
 801a302:	e018      	b.n	801a336 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a304:	693b      	ldr	r3, [r7, #16]
 801a306:	3301      	adds	r3, #1
 801a308:	613b      	str	r3, [r7, #16]
 801a30a:	693b      	ldr	r3, [r7, #16]
 801a30c:	2b0c      	cmp	r3, #12
 801a30e:	d9c8      	bls.n	801a2a2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801a310:	683b      	ldr	r3, [r7, #0]
 801a312:	781b      	ldrb	r3, [r3, #0]
 801a314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d00b      	beq.n	801a334 <cmp_lfn+0xd0>
 801a31c:	89fb      	ldrh	r3, [r7, #14]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d008      	beq.n	801a334 <cmp_lfn+0xd0>
 801a322:	697b      	ldr	r3, [r7, #20]
 801a324:	005b      	lsls	r3, r3, #1
 801a326:	687a      	ldr	r2, [r7, #4]
 801a328:	4413      	add	r3, r2
 801a32a:	881b      	ldrh	r3, [r3, #0]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d001      	beq.n	801a334 <cmp_lfn+0xd0>
 801a330:	2300      	movs	r3, #0
 801a332:	e000      	b.n	801a336 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801a334:	2301      	movs	r3, #1
}
 801a336:	4618      	mov	r0, r3
 801a338:	371c      	adds	r7, #28
 801a33a:	46bd      	mov	sp, r7
 801a33c:	bd90      	pop	{r4, r7, pc}
 801a33e:	bf00      	nop
 801a340:	08025140 	.word	0x08025140

0801a344 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b088      	sub	sp, #32
 801a348:	af00      	add	r7, sp, #0
 801a34a:	60f8      	str	r0, [r7, #12]
 801a34c:	60b9      	str	r1, [r7, #8]
 801a34e:	4611      	mov	r1, r2
 801a350:	461a      	mov	r2, r3
 801a352:	460b      	mov	r3, r1
 801a354:	71fb      	strb	r3, [r7, #7]
 801a356:	4613      	mov	r3, r2
 801a358:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801a35a:	68bb      	ldr	r3, [r7, #8]
 801a35c:	330d      	adds	r3, #13
 801a35e:	79ba      	ldrb	r2, [r7, #6]
 801a360:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801a362:	68bb      	ldr	r3, [r7, #8]
 801a364:	330b      	adds	r3, #11
 801a366:	220f      	movs	r2, #15
 801a368:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801a36a:	68bb      	ldr	r3, [r7, #8]
 801a36c:	330c      	adds	r3, #12
 801a36e:	2200      	movs	r2, #0
 801a370:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801a372:	68bb      	ldr	r3, [r7, #8]
 801a374:	331a      	adds	r3, #26
 801a376:	2100      	movs	r1, #0
 801a378:	4618      	mov	r0, r3
 801a37a:	f7fe ffba 	bl	80192f2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801a37e:	79fb      	ldrb	r3, [r7, #7]
 801a380:	1e5a      	subs	r2, r3, #1
 801a382:	4613      	mov	r3, r2
 801a384:	005b      	lsls	r3, r3, #1
 801a386:	4413      	add	r3, r2
 801a388:	009b      	lsls	r3, r3, #2
 801a38a:	4413      	add	r3, r2
 801a38c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801a38e:	2300      	movs	r3, #0
 801a390:	82fb      	strh	r3, [r7, #22]
 801a392:	2300      	movs	r3, #0
 801a394:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801a396:	8afb      	ldrh	r3, [r7, #22]
 801a398:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a39c:	4293      	cmp	r3, r2
 801a39e:	d007      	beq.n	801a3b0 <put_lfn+0x6c>
 801a3a0:	69fb      	ldr	r3, [r7, #28]
 801a3a2:	1c5a      	adds	r2, r3, #1
 801a3a4:	61fa      	str	r2, [r7, #28]
 801a3a6:	005b      	lsls	r3, r3, #1
 801a3a8:	68fa      	ldr	r2, [r7, #12]
 801a3aa:	4413      	add	r3, r2
 801a3ac:	881b      	ldrh	r3, [r3, #0]
 801a3ae:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801a3b0:	4a17      	ldr	r2, [pc, #92]	@ (801a410 <put_lfn+0xcc>)
 801a3b2:	69bb      	ldr	r3, [r7, #24]
 801a3b4:	4413      	add	r3, r2
 801a3b6:	781b      	ldrb	r3, [r3, #0]
 801a3b8:	461a      	mov	r2, r3
 801a3ba:	68bb      	ldr	r3, [r7, #8]
 801a3bc:	4413      	add	r3, r2
 801a3be:	8afa      	ldrh	r2, [r7, #22]
 801a3c0:	4611      	mov	r1, r2
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	f7fe ff95 	bl	80192f2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801a3c8:	8afb      	ldrh	r3, [r7, #22]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d102      	bne.n	801a3d4 <put_lfn+0x90>
 801a3ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a3d2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801a3d4:	69bb      	ldr	r3, [r7, #24]
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	61bb      	str	r3, [r7, #24]
 801a3da:	69bb      	ldr	r3, [r7, #24]
 801a3dc:	2b0c      	cmp	r3, #12
 801a3de:	d9da      	bls.n	801a396 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801a3e0:	8afb      	ldrh	r3, [r7, #22]
 801a3e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a3e6:	4293      	cmp	r3, r2
 801a3e8:	d006      	beq.n	801a3f8 <put_lfn+0xb4>
 801a3ea:	69fb      	ldr	r3, [r7, #28]
 801a3ec:	005b      	lsls	r3, r3, #1
 801a3ee:	68fa      	ldr	r2, [r7, #12]
 801a3f0:	4413      	add	r3, r2
 801a3f2:	881b      	ldrh	r3, [r3, #0]
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d103      	bne.n	801a400 <put_lfn+0xbc>
 801a3f8:	79fb      	ldrb	r3, [r7, #7]
 801a3fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3fe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801a400:	68bb      	ldr	r3, [r7, #8]
 801a402:	79fa      	ldrb	r2, [r7, #7]
 801a404:	701a      	strb	r2, [r3, #0]
}
 801a406:	bf00      	nop
 801a408:	3720      	adds	r7, #32
 801a40a:	46bd      	mov	sp, r7
 801a40c:	bd80      	pop	{r7, pc}
 801a40e:	bf00      	nop
 801a410:	08025140 	.word	0x08025140

0801a414 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b08c      	sub	sp, #48	@ 0x30
 801a418:	af00      	add	r7, sp, #0
 801a41a:	60f8      	str	r0, [r7, #12]
 801a41c:	60b9      	str	r1, [r7, #8]
 801a41e:	607a      	str	r2, [r7, #4]
 801a420:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801a422:	220b      	movs	r2, #11
 801a424:	68b9      	ldr	r1, [r7, #8]
 801a426:	68f8      	ldr	r0, [r7, #12]
 801a428:	f7fe ffaa 	bl	8019380 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801a42c:	683b      	ldr	r3, [r7, #0]
 801a42e:	2b05      	cmp	r3, #5
 801a430:	d92b      	bls.n	801a48a <gen_numname+0x76>
		sr = seq;
 801a432:	683b      	ldr	r3, [r7, #0]
 801a434:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801a436:	e022      	b.n	801a47e <gen_numname+0x6a>
			wc = *lfn++;
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	1c9a      	adds	r2, r3, #2
 801a43c:	607a      	str	r2, [r7, #4]
 801a43e:	881b      	ldrh	r3, [r3, #0]
 801a440:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801a442:	2300      	movs	r3, #0
 801a444:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a446:	e017      	b.n	801a478 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801a448:	69fb      	ldr	r3, [r7, #28]
 801a44a:	005a      	lsls	r2, r3, #1
 801a44c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a44e:	f003 0301 	and.w	r3, r3, #1
 801a452:	4413      	add	r3, r2
 801a454:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801a456:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a458:	085b      	lsrs	r3, r3, #1
 801a45a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801a45c:	69fb      	ldr	r3, [r7, #28]
 801a45e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a462:	2b00      	cmp	r3, #0
 801a464:	d005      	beq.n	801a472 <gen_numname+0x5e>
 801a466:	69fb      	ldr	r3, [r7, #28]
 801a468:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 801a46c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 801a470:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801a472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a474:	3301      	adds	r3, #1
 801a476:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a47a:	2b0f      	cmp	r3, #15
 801a47c:	d9e4      	bls.n	801a448 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	881b      	ldrh	r3, [r3, #0]
 801a482:	2b00      	cmp	r3, #0
 801a484:	d1d8      	bne.n	801a438 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801a486:	69fb      	ldr	r3, [r7, #28]
 801a488:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801a48a:	2307      	movs	r3, #7
 801a48c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801a48e:	683b      	ldr	r3, [r7, #0]
 801a490:	b2db      	uxtb	r3, r3
 801a492:	f003 030f 	and.w	r3, r3, #15
 801a496:	b2db      	uxtb	r3, r3
 801a498:	3330      	adds	r3, #48	@ 0x30
 801a49a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801a49e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4a2:	2b39      	cmp	r3, #57	@ 0x39
 801a4a4:	d904      	bls.n	801a4b0 <gen_numname+0x9c>
 801a4a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4aa:	3307      	adds	r3, #7
 801a4ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801a4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4b2:	1e5a      	subs	r2, r3, #1
 801a4b4:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a4b6:	3330      	adds	r3, #48	@ 0x30
 801a4b8:	443b      	add	r3, r7
 801a4ba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801a4be:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801a4c2:	683b      	ldr	r3, [r7, #0]
 801a4c4:	091b      	lsrs	r3, r3, #4
 801a4c6:	603b      	str	r3, [r7, #0]
	} while (seq);
 801a4c8:	683b      	ldr	r3, [r7, #0]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d1df      	bne.n	801a48e <gen_numname+0x7a>
	ns[i] = '~';
 801a4ce:	f107 0214 	add.w	r2, r7, #20
 801a4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4d4:	4413      	add	r3, r2
 801a4d6:	227e      	movs	r2, #126	@ 0x7e
 801a4d8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801a4da:	2300      	movs	r3, #0
 801a4dc:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4de:	e002      	b.n	801a4e6 <gen_numname+0xd2>
 801a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4e2:	3301      	adds	r3, #1
 801a4e4:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4ea:	429a      	cmp	r2, r3
 801a4ec:	d205      	bcs.n	801a4fa <gen_numname+0xe6>
 801a4ee:	68fa      	ldr	r2, [r7, #12]
 801a4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4f2:	4413      	add	r3, r2
 801a4f4:	781b      	ldrb	r3, [r3, #0]
 801a4f6:	2b20      	cmp	r3, #32
 801a4f8:	d1f2      	bne.n	801a4e0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801a4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4fc:	2b07      	cmp	r3, #7
 801a4fe:	d807      	bhi.n	801a510 <gen_numname+0xfc>
 801a500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a502:	1c5a      	adds	r2, r3, #1
 801a504:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a506:	3330      	adds	r3, #48	@ 0x30
 801a508:	443b      	add	r3, r7
 801a50a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801a50e:	e000      	b.n	801a512 <gen_numname+0xfe>
 801a510:	2120      	movs	r1, #32
 801a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a514:	1c5a      	adds	r2, r3, #1
 801a516:	627a      	str	r2, [r7, #36]	@ 0x24
 801a518:	68fa      	ldr	r2, [r7, #12]
 801a51a:	4413      	add	r3, r2
 801a51c:	460a      	mov	r2, r1
 801a51e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a522:	2b07      	cmp	r3, #7
 801a524:	d9e9      	bls.n	801a4fa <gen_numname+0xe6>
}
 801a526:	bf00      	nop
 801a528:	bf00      	nop
 801a52a:	3730      	adds	r7, #48	@ 0x30
 801a52c:	46bd      	mov	sp, r7
 801a52e:	bd80      	pop	{r7, pc}

0801a530 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801a530:	b480      	push	{r7}
 801a532:	b085      	sub	sp, #20
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801a538:	2300      	movs	r3, #0
 801a53a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801a53c:	230b      	movs	r3, #11
 801a53e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a540:	7bfb      	ldrb	r3, [r7, #15]
 801a542:	b2da      	uxtb	r2, r3
 801a544:	0852      	lsrs	r2, r2, #1
 801a546:	01db      	lsls	r3, r3, #7
 801a548:	4313      	orrs	r3, r2
 801a54a:	b2da      	uxtb	r2, r3
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	1c59      	adds	r1, r3, #1
 801a550:	6079      	str	r1, [r7, #4]
 801a552:	781b      	ldrb	r3, [r3, #0]
 801a554:	4413      	add	r3, r2
 801a556:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801a558:	68bb      	ldr	r3, [r7, #8]
 801a55a:	3b01      	subs	r3, #1
 801a55c:	60bb      	str	r3, [r7, #8]
 801a55e:	68bb      	ldr	r3, [r7, #8]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d1ed      	bne.n	801a540 <sum_sfn+0x10>
	return sum;
 801a564:	7bfb      	ldrb	r3, [r7, #15]
}
 801a566:	4618      	mov	r0, r3
 801a568:	3714      	adds	r7, #20
 801a56a:	46bd      	mov	sp, r7
 801a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a570:	4770      	bx	lr

0801a572 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801a572:	b580      	push	{r7, lr}
 801a574:	b086      	sub	sp, #24
 801a576:	af00      	add	r7, sp, #0
 801a578:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801a580:	2100      	movs	r1, #0
 801a582:	6878      	ldr	r0, [r7, #4]
 801a584:	f7ff fca7 	bl	8019ed6 <dir_sdi>
 801a588:	4603      	mov	r3, r0
 801a58a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801a58c:	7dfb      	ldrb	r3, [r7, #23]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d001      	beq.n	801a596 <dir_find+0x24>
 801a592:	7dfb      	ldrb	r3, [r7, #23]
 801a594:	e0a9      	b.n	801a6ea <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a596:	23ff      	movs	r3, #255	@ 0xff
 801a598:	753b      	strb	r3, [r7, #20]
 801a59a:	7d3b      	ldrb	r3, [r7, #20]
 801a59c:	757b      	strb	r3, [r7, #21]
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	f04f 32ff 	mov.w	r2, #4294967295
 801a5a4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	69db      	ldr	r3, [r3, #28]
 801a5aa:	4619      	mov	r1, r3
 801a5ac:	6938      	ldr	r0, [r7, #16]
 801a5ae:	f7ff f915 	bl	80197dc <move_window>
 801a5b2:	4603      	mov	r3, r0
 801a5b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801a5b6:	7dfb      	ldrb	r3, [r7, #23]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	f040 8090 	bne.w	801a6de <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	6a1b      	ldr	r3, [r3, #32]
 801a5c2:	781b      	ldrb	r3, [r3, #0]
 801a5c4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a5c6:	7dbb      	ldrb	r3, [r7, #22]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d102      	bne.n	801a5d2 <dir_find+0x60>
 801a5cc:	2304      	movs	r3, #4
 801a5ce:	75fb      	strb	r3, [r7, #23]
 801a5d0:	e08a      	b.n	801a6e8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	6a1b      	ldr	r3, [r3, #32]
 801a5d6:	330b      	adds	r3, #11
 801a5d8:	781b      	ldrb	r3, [r3, #0]
 801a5da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a5de:	73fb      	strb	r3, [r7, #15]
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	7bfa      	ldrb	r2, [r7, #15]
 801a5e4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801a5e6:	7dbb      	ldrb	r3, [r7, #22]
 801a5e8:	2be5      	cmp	r3, #229	@ 0xe5
 801a5ea:	d007      	beq.n	801a5fc <dir_find+0x8a>
 801a5ec:	7bfb      	ldrb	r3, [r7, #15]
 801a5ee:	f003 0308 	and.w	r3, r3, #8
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d009      	beq.n	801a60a <dir_find+0x98>
 801a5f6:	7bfb      	ldrb	r3, [r7, #15]
 801a5f8:	2b0f      	cmp	r3, #15
 801a5fa:	d006      	beq.n	801a60a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a5fc:	23ff      	movs	r3, #255	@ 0xff
 801a5fe:	757b      	strb	r3, [r7, #21]
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	f04f 32ff 	mov.w	r2, #4294967295
 801a606:	631a      	str	r2, [r3, #48]	@ 0x30
 801a608:	e05e      	b.n	801a6c8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801a60a:	7bfb      	ldrb	r3, [r7, #15]
 801a60c:	2b0f      	cmp	r3, #15
 801a60e:	d136      	bne.n	801a67e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d154      	bne.n	801a6c8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801a61e:	7dbb      	ldrb	r3, [r7, #22]
 801a620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a624:	2b00      	cmp	r3, #0
 801a626:	d00d      	beq.n	801a644 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	6a1b      	ldr	r3, [r3, #32]
 801a62c:	7b5b      	ldrb	r3, [r3, #13]
 801a62e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801a630:	7dbb      	ldrb	r3, [r7, #22]
 801a632:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a636:	75bb      	strb	r3, [r7, #22]
 801a638:	7dbb      	ldrb	r3, [r7, #22]
 801a63a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	695a      	ldr	r2, [r3, #20]
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a644:	7dba      	ldrb	r2, [r7, #22]
 801a646:	7d7b      	ldrb	r3, [r7, #21]
 801a648:	429a      	cmp	r2, r3
 801a64a:	d115      	bne.n	801a678 <dir_find+0x106>
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	6a1b      	ldr	r3, [r3, #32]
 801a650:	330d      	adds	r3, #13
 801a652:	781b      	ldrb	r3, [r3, #0]
 801a654:	7d3a      	ldrb	r2, [r7, #20]
 801a656:	429a      	cmp	r2, r3
 801a658:	d10e      	bne.n	801a678 <dir_find+0x106>
 801a65a:	693b      	ldr	r3, [r7, #16]
 801a65c:	68da      	ldr	r2, [r3, #12]
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	6a1b      	ldr	r3, [r3, #32]
 801a662:	4619      	mov	r1, r3
 801a664:	4610      	mov	r0, r2
 801a666:	f7ff fdfd 	bl	801a264 <cmp_lfn>
 801a66a:	4603      	mov	r3, r0
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d003      	beq.n	801a678 <dir_find+0x106>
 801a670:	7d7b      	ldrb	r3, [r7, #21]
 801a672:	3b01      	subs	r3, #1
 801a674:	b2db      	uxtb	r3, r3
 801a676:	e000      	b.n	801a67a <dir_find+0x108>
 801a678:	23ff      	movs	r3, #255	@ 0xff
 801a67a:	757b      	strb	r3, [r7, #21]
 801a67c:	e024      	b.n	801a6c8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a67e:	7d7b      	ldrb	r3, [r7, #21]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d109      	bne.n	801a698 <dir_find+0x126>
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	6a1b      	ldr	r3, [r3, #32]
 801a688:	4618      	mov	r0, r3
 801a68a:	f7ff ff51 	bl	801a530 <sum_sfn>
 801a68e:	4603      	mov	r3, r0
 801a690:	461a      	mov	r2, r3
 801a692:	7d3b      	ldrb	r3, [r7, #20]
 801a694:	4293      	cmp	r3, r2
 801a696:	d024      	beq.n	801a6e2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a69e:	f003 0301 	and.w	r3, r3, #1
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d10a      	bne.n	801a6bc <dir_find+0x14a>
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	6a18      	ldr	r0, [r3, #32]
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	3324      	adds	r3, #36	@ 0x24
 801a6ae:	220b      	movs	r2, #11
 801a6b0:	4619      	mov	r1, r3
 801a6b2:	f7fe fea1 	bl	80193f8 <mem_cmp>
 801a6b6:	4603      	mov	r3, r0
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d014      	beq.n	801a6e6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a6bc:	23ff      	movs	r3, #255	@ 0xff
 801a6be:	757b      	strb	r3, [r7, #21]
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	f04f 32ff 	mov.w	r2, #4294967295
 801a6c6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801a6c8:	2100      	movs	r1, #0
 801a6ca:	6878      	ldr	r0, [r7, #4]
 801a6cc:	f7ff fc7e 	bl	8019fcc <dir_next>
 801a6d0:	4603      	mov	r3, r0
 801a6d2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801a6d4:	7dfb      	ldrb	r3, [r7, #23]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	f43f af65 	beq.w	801a5a6 <dir_find+0x34>
 801a6dc:	e004      	b.n	801a6e8 <dir_find+0x176>
		if (res != FR_OK) break;
 801a6de:	bf00      	nop
 801a6e0:	e002      	b.n	801a6e8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a6e2:	bf00      	nop
 801a6e4:	e000      	b.n	801a6e8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a6e6:	bf00      	nop

	return res;
 801a6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	3718      	adds	r7, #24
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bd80      	pop	{r7, pc}
	...

0801a6f4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b08c      	sub	sp, #48	@ 0x30
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a708:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d001      	beq.n	801a714 <dir_register+0x20>
 801a710:	2306      	movs	r3, #6
 801a712:	e0e0      	b.n	801a8d6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801a714:	2300      	movs	r3, #0
 801a716:	627b      	str	r3, [r7, #36]	@ 0x24
 801a718:	e002      	b.n	801a720 <dir_register+0x2c>
 801a71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a71c:	3301      	adds	r3, #1
 801a71e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a720:	69fb      	ldr	r3, [r7, #28]
 801a722:	68da      	ldr	r2, [r3, #12]
 801a724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a726:	005b      	lsls	r3, r3, #1
 801a728:	4413      	add	r3, r2
 801a72a:	881b      	ldrh	r3, [r3, #0]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d1f4      	bne.n	801a71a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801a736:	f107 030c 	add.w	r3, r7, #12
 801a73a:	220c      	movs	r2, #12
 801a73c:	4618      	mov	r0, r3
 801a73e:	f7fe fe1f 	bl	8019380 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801a742:	7dfb      	ldrb	r3, [r7, #23]
 801a744:	f003 0301 	and.w	r3, r3, #1
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d032      	beq.n	801a7b2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	2240      	movs	r2, #64	@ 0x40
 801a750:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801a754:	2301      	movs	r3, #1
 801a756:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a758:	e016      	b.n	801a788 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801a760:	69fb      	ldr	r3, [r7, #28]
 801a762:	68da      	ldr	r2, [r3, #12]
 801a764:	f107 010c 	add.w	r1, r7, #12
 801a768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a76a:	f7ff fe53 	bl	801a414 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801a76e:	6878      	ldr	r0, [r7, #4]
 801a770:	f7ff feff 	bl	801a572 <dir_find>
 801a774:	4603      	mov	r3, r0
 801a776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801a77a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d106      	bne.n	801a790 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801a782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a784:	3301      	adds	r3, #1
 801a786:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a78a:	2b63      	cmp	r3, #99	@ 0x63
 801a78c:	d9e5      	bls.n	801a75a <dir_register+0x66>
 801a78e:	e000      	b.n	801a792 <dir_register+0x9e>
			if (res != FR_OK) break;
 801a790:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801a792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a794:	2b64      	cmp	r3, #100	@ 0x64
 801a796:	d101      	bne.n	801a79c <dir_register+0xa8>
 801a798:	2307      	movs	r3, #7
 801a79a:	e09c      	b.n	801a8d6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801a79c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7a0:	2b04      	cmp	r3, #4
 801a7a2:	d002      	beq.n	801a7aa <dir_register+0xb6>
 801a7a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7a8:	e095      	b.n	801a8d6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801a7aa:	7dfa      	ldrb	r2, [r7, #23]
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801a7b2:	7dfb      	ldrb	r3, [r7, #23]
 801a7b4:	f003 0302 	and.w	r3, r3, #2
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d007      	beq.n	801a7cc <dir_register+0xd8>
 801a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7be:	330c      	adds	r3, #12
 801a7c0:	4a47      	ldr	r2, [pc, #284]	@ (801a8e0 <dir_register+0x1ec>)
 801a7c2:	fba2 2303 	umull	r2, r3, r2, r3
 801a7c6:	089b      	lsrs	r3, r3, #2
 801a7c8:	3301      	adds	r3, #1
 801a7ca:	e000      	b.n	801a7ce <dir_register+0xda>
 801a7cc:	2301      	movs	r3, #1
 801a7ce:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801a7d0:	6a39      	ldr	r1, [r7, #32]
 801a7d2:	6878      	ldr	r0, [r7, #4]
 801a7d4:	f7ff fcbf 	bl	801a156 <dir_alloc>
 801a7d8:	4603      	mov	r3, r0
 801a7da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801a7de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d148      	bne.n	801a878 <dir_register+0x184>
 801a7e6:	6a3b      	ldr	r3, [r7, #32]
 801a7e8:	3b01      	subs	r3, #1
 801a7ea:	623b      	str	r3, [r7, #32]
 801a7ec:	6a3b      	ldr	r3, [r7, #32]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d042      	beq.n	801a878 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	695a      	ldr	r2, [r3, #20]
 801a7f6:	6a3b      	ldr	r3, [r7, #32]
 801a7f8:	015b      	lsls	r3, r3, #5
 801a7fa:	1ad3      	subs	r3, r2, r3
 801a7fc:	4619      	mov	r1, r3
 801a7fe:	6878      	ldr	r0, [r7, #4]
 801a800:	f7ff fb69 	bl	8019ed6 <dir_sdi>
 801a804:	4603      	mov	r3, r0
 801a806:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a80a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d132      	bne.n	801a878 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	3324      	adds	r3, #36	@ 0x24
 801a816:	4618      	mov	r0, r3
 801a818:	f7ff fe8a 	bl	801a530 <sum_sfn>
 801a81c:	4603      	mov	r3, r0
 801a81e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	69db      	ldr	r3, [r3, #28]
 801a824:	4619      	mov	r1, r3
 801a826:	69f8      	ldr	r0, [r7, #28]
 801a828:	f7fe ffd8 	bl	80197dc <move_window>
 801a82c:	4603      	mov	r3, r0
 801a82e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801a832:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a836:	2b00      	cmp	r3, #0
 801a838:	d11d      	bne.n	801a876 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801a83a:	69fb      	ldr	r3, [r7, #28]
 801a83c:	68d8      	ldr	r0, [r3, #12]
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	6a19      	ldr	r1, [r3, #32]
 801a842:	6a3b      	ldr	r3, [r7, #32]
 801a844:	b2da      	uxtb	r2, r3
 801a846:	7efb      	ldrb	r3, [r7, #27]
 801a848:	f7ff fd7c 	bl	801a344 <put_lfn>
				fs->wflag = 1;
 801a84c:	69fb      	ldr	r3, [r7, #28]
 801a84e:	2201      	movs	r2, #1
 801a850:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801a852:	2100      	movs	r1, #0
 801a854:	6878      	ldr	r0, [r7, #4]
 801a856:	f7ff fbb9 	bl	8019fcc <dir_next>
 801a85a:	4603      	mov	r3, r0
 801a85c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801a860:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a864:	2b00      	cmp	r3, #0
 801a866:	d107      	bne.n	801a878 <dir_register+0x184>
 801a868:	6a3b      	ldr	r3, [r7, #32]
 801a86a:	3b01      	subs	r3, #1
 801a86c:	623b      	str	r3, [r7, #32]
 801a86e:	6a3b      	ldr	r3, [r7, #32]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d1d5      	bne.n	801a820 <dir_register+0x12c>
 801a874:	e000      	b.n	801a878 <dir_register+0x184>
				if (res != FR_OK) break;
 801a876:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801a878:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d128      	bne.n	801a8d2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	69db      	ldr	r3, [r3, #28]
 801a884:	4619      	mov	r1, r3
 801a886:	69f8      	ldr	r0, [r7, #28]
 801a888:	f7fe ffa8 	bl	80197dc <move_window>
 801a88c:	4603      	mov	r3, r0
 801a88e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a892:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a896:	2b00      	cmp	r3, #0
 801a898:	d11b      	bne.n	801a8d2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	6a1b      	ldr	r3, [r3, #32]
 801a89e:	2220      	movs	r2, #32
 801a8a0:	2100      	movs	r1, #0
 801a8a2:	4618      	mov	r0, r3
 801a8a4:	f7fe fd8d 	bl	80193c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	6a18      	ldr	r0, [r3, #32]
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	3324      	adds	r3, #36	@ 0x24
 801a8b0:	220b      	movs	r2, #11
 801a8b2:	4619      	mov	r1, r3
 801a8b4:	f7fe fd64 	bl	8019380 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	6a1b      	ldr	r3, [r3, #32]
 801a8c2:	330c      	adds	r3, #12
 801a8c4:	f002 0218 	and.w	r2, r2, #24
 801a8c8:	b2d2      	uxtb	r2, r2
 801a8ca:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801a8cc:	69fb      	ldr	r3, [r7, #28]
 801a8ce:	2201      	movs	r2, #1
 801a8d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801a8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801a8d6:	4618      	mov	r0, r3
 801a8d8:	3730      	adds	r7, #48	@ 0x30
 801a8da:	46bd      	mov	sp, r7
 801a8dc:	bd80      	pop	{r7, pc}
 801a8de:	bf00      	nop
 801a8e0:	4ec4ec4f 	.word	0x4ec4ec4f

0801a8e4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801a8e4:	b580      	push	{r7, lr}
 801a8e6:	b088      	sub	sp, #32
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	6078      	str	r0, [r7, #4]
 801a8ec:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801a8f4:	683b      	ldr	r3, [r7, #0]
 801a8f6:	2200      	movs	r2, #0
 801a8f8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	69db      	ldr	r3, [r3, #28]
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	f000 80ca 	beq.w	801aa98 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a90c:	d032      	beq.n	801a974 <get_fileinfo+0x90>
			i = j = 0;
 801a90e:	2300      	movs	r3, #0
 801a910:	61bb      	str	r3, [r7, #24]
 801a912:	69bb      	ldr	r3, [r7, #24]
 801a914:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a916:	e01b      	b.n	801a950 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801a918:	89fb      	ldrh	r3, [r7, #14]
 801a91a:	2100      	movs	r1, #0
 801a91c:	4618      	mov	r0, r3
 801a91e:	f001 fabb 	bl	801be98 <ff_convert>
 801a922:	4603      	mov	r3, r0
 801a924:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801a926:	89fb      	ldrh	r3, [r7, #14]
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d102      	bne.n	801a932 <get_fileinfo+0x4e>
 801a92c:	2300      	movs	r3, #0
 801a92e:	61fb      	str	r3, [r7, #28]
 801a930:	e01a      	b.n	801a968 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801a932:	69fb      	ldr	r3, [r7, #28]
 801a934:	2bfe      	cmp	r3, #254	@ 0xfe
 801a936:	d902      	bls.n	801a93e <get_fileinfo+0x5a>
 801a938:	2300      	movs	r3, #0
 801a93a:	61fb      	str	r3, [r7, #28]
 801a93c:	e014      	b.n	801a968 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801a93e:	69fb      	ldr	r3, [r7, #28]
 801a940:	1c5a      	adds	r2, r3, #1
 801a942:	61fa      	str	r2, [r7, #28]
 801a944:	89fa      	ldrh	r2, [r7, #14]
 801a946:	b2d1      	uxtb	r1, r2
 801a948:	683a      	ldr	r2, [r7, #0]
 801a94a:	4413      	add	r3, r2
 801a94c:	460a      	mov	r2, r1
 801a94e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a950:	693b      	ldr	r3, [r7, #16]
 801a952:	68da      	ldr	r2, [r3, #12]
 801a954:	69bb      	ldr	r3, [r7, #24]
 801a956:	1c59      	adds	r1, r3, #1
 801a958:	61b9      	str	r1, [r7, #24]
 801a95a:	005b      	lsls	r3, r3, #1
 801a95c:	4413      	add	r3, r2
 801a95e:	881b      	ldrh	r3, [r3, #0]
 801a960:	81fb      	strh	r3, [r7, #14]
 801a962:	89fb      	ldrh	r3, [r7, #14]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d1d7      	bne.n	801a918 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801a968:	683a      	ldr	r2, [r7, #0]
 801a96a:	69fb      	ldr	r3, [r7, #28]
 801a96c:	4413      	add	r3, r2
 801a96e:	3316      	adds	r3, #22
 801a970:	2200      	movs	r2, #0
 801a972:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801a974:	2300      	movs	r3, #0
 801a976:	61bb      	str	r3, [r7, #24]
 801a978:	69bb      	ldr	r3, [r7, #24]
 801a97a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801a97c:	683a      	ldr	r2, [r7, #0]
 801a97e:	69fb      	ldr	r3, [r7, #28]
 801a980:	4413      	add	r3, r2
 801a982:	3316      	adds	r3, #22
 801a984:	781b      	ldrb	r3, [r3, #0]
 801a986:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801a988:	e04d      	b.n	801aa26 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	6a1a      	ldr	r2, [r3, #32]
 801a98e:	69fb      	ldr	r3, [r7, #28]
 801a990:	1c59      	adds	r1, r3, #1
 801a992:	61f9      	str	r1, [r7, #28]
 801a994:	4413      	add	r3, r2
 801a996:	781b      	ldrb	r3, [r3, #0]
 801a998:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801a99a:	7dfb      	ldrb	r3, [r7, #23]
 801a99c:	2b20      	cmp	r3, #32
 801a99e:	d041      	beq.n	801aa24 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801a9a0:	7dfb      	ldrb	r3, [r7, #23]
 801a9a2:	2b05      	cmp	r3, #5
 801a9a4:	d101      	bne.n	801a9aa <get_fileinfo+0xc6>
 801a9a6:	23e5      	movs	r3, #229	@ 0xe5
 801a9a8:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801a9aa:	69fb      	ldr	r3, [r7, #28]
 801a9ac:	2b09      	cmp	r3, #9
 801a9ae:	d10f      	bne.n	801a9d0 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 801a9b0:	89bb      	ldrh	r3, [r7, #12]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d105      	bne.n	801a9c2 <get_fileinfo+0xde>
 801a9b6:	683a      	ldr	r2, [r7, #0]
 801a9b8:	69bb      	ldr	r3, [r7, #24]
 801a9ba:	4413      	add	r3, r2
 801a9bc:	3316      	adds	r3, #22
 801a9be:	222e      	movs	r2, #46	@ 0x2e
 801a9c0:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801a9c2:	69bb      	ldr	r3, [r7, #24]
 801a9c4:	1c5a      	adds	r2, r3, #1
 801a9c6:	61ba      	str	r2, [r7, #24]
 801a9c8:	683a      	ldr	r2, [r7, #0]
 801a9ca:	4413      	add	r3, r2
 801a9cc:	222e      	movs	r2, #46	@ 0x2e
 801a9ce:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801a9d0:	683a      	ldr	r2, [r7, #0]
 801a9d2:	69bb      	ldr	r3, [r7, #24]
 801a9d4:	4413      	add	r3, r2
 801a9d6:	3309      	adds	r3, #9
 801a9d8:	7dfa      	ldrb	r2, [r7, #23]
 801a9da:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801a9dc:	89bb      	ldrh	r3, [r7, #12]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d11c      	bne.n	801aa1c <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801a9e2:	7dfb      	ldrb	r3, [r7, #23]
 801a9e4:	2b40      	cmp	r3, #64	@ 0x40
 801a9e6:	d913      	bls.n	801aa10 <get_fileinfo+0x12c>
 801a9e8:	7dfb      	ldrb	r3, [r7, #23]
 801a9ea:	2b5a      	cmp	r3, #90	@ 0x5a
 801a9ec:	d810      	bhi.n	801aa10 <get_fileinfo+0x12c>
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	6a1b      	ldr	r3, [r3, #32]
 801a9f2:	330c      	adds	r3, #12
 801a9f4:	781b      	ldrb	r3, [r3, #0]
 801a9f6:	461a      	mov	r2, r3
 801a9f8:	69fb      	ldr	r3, [r7, #28]
 801a9fa:	2b08      	cmp	r3, #8
 801a9fc:	d901      	bls.n	801aa02 <get_fileinfo+0x11e>
 801a9fe:	2310      	movs	r3, #16
 801aa00:	e000      	b.n	801aa04 <get_fileinfo+0x120>
 801aa02:	2308      	movs	r3, #8
 801aa04:	4013      	ands	r3, r2
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d002      	beq.n	801aa10 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 801aa0a:	7dfb      	ldrb	r3, [r7, #23]
 801aa0c:	3320      	adds	r3, #32
 801aa0e:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801aa10:	683a      	ldr	r2, [r7, #0]
 801aa12:	69bb      	ldr	r3, [r7, #24]
 801aa14:	4413      	add	r3, r2
 801aa16:	3316      	adds	r3, #22
 801aa18:	7dfa      	ldrb	r2, [r7, #23]
 801aa1a:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801aa1c:	69bb      	ldr	r3, [r7, #24]
 801aa1e:	3301      	adds	r3, #1
 801aa20:	61bb      	str	r3, [r7, #24]
 801aa22:	e000      	b.n	801aa26 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 801aa24:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801aa26:	69fb      	ldr	r3, [r7, #28]
 801aa28:	2b0a      	cmp	r3, #10
 801aa2a:	d9ae      	bls.n	801a98a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801aa2c:	89bb      	ldrh	r3, [r7, #12]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d10d      	bne.n	801aa4e <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 801aa32:	683a      	ldr	r2, [r7, #0]
 801aa34:	69bb      	ldr	r3, [r7, #24]
 801aa36:	4413      	add	r3, r2
 801aa38:	3316      	adds	r3, #22
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	6a1b      	ldr	r3, [r3, #32]
 801aa42:	330c      	adds	r3, #12
 801aa44:	781b      	ldrb	r3, [r3, #0]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d101      	bne.n	801aa4e <get_fileinfo+0x16a>
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801aa4e:	683a      	ldr	r2, [r7, #0]
 801aa50:	69bb      	ldr	r3, [r7, #24]
 801aa52:	4413      	add	r3, r2
 801aa54:	3309      	adds	r3, #9
 801aa56:	2200      	movs	r2, #0
 801aa58:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	6a1b      	ldr	r3, [r3, #32]
 801aa5e:	7ada      	ldrb	r2, [r3, #11]
 801aa60:	683b      	ldr	r3, [r7, #0]
 801aa62:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	6a1b      	ldr	r3, [r3, #32]
 801aa68:	331c      	adds	r3, #28
 801aa6a:	4618      	mov	r0, r3
 801aa6c:	f7fe fc1e 	bl	80192ac <ld_dword>
 801aa70:	4602      	mov	r2, r0
 801aa72:	683b      	ldr	r3, [r7, #0]
 801aa74:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	6a1b      	ldr	r3, [r3, #32]
 801aa7a:	3316      	adds	r3, #22
 801aa7c:	4618      	mov	r0, r3
 801aa7e:	f7fe fc15 	bl	80192ac <ld_dword>
 801aa82:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801aa84:	68bb      	ldr	r3, [r7, #8]
 801aa86:	b29a      	uxth	r2, r3
 801aa88:	683b      	ldr	r3, [r7, #0]
 801aa8a:	80da      	strh	r2, [r3, #6]
 801aa8c:	68bb      	ldr	r3, [r7, #8]
 801aa8e:	0c1b      	lsrs	r3, r3, #16
 801aa90:	b29a      	uxth	r2, r3
 801aa92:	683b      	ldr	r3, [r7, #0]
 801aa94:	809a      	strh	r2, [r3, #4]
 801aa96:	e000      	b.n	801aa9a <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801aa98:	bf00      	nop
}
 801aa9a:	3720      	adds	r7, #32
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bd80      	pop	{r7, pc}

0801aaa0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b08a      	sub	sp, #40	@ 0x28
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
 801aaa8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801aaaa:	683b      	ldr	r3, [r7, #0]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	613b      	str	r3, [r7, #16]
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	68db      	ldr	r3, [r3, #12]
 801aab6:	60fb      	str	r3, [r7, #12]
 801aab8:	2300      	movs	r3, #0
 801aaba:	617b      	str	r3, [r7, #20]
 801aabc:	697b      	ldr	r3, [r7, #20]
 801aabe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801aac0:	69bb      	ldr	r3, [r7, #24]
 801aac2:	1c5a      	adds	r2, r3, #1
 801aac4:	61ba      	str	r2, [r7, #24]
 801aac6:	693a      	ldr	r2, [r7, #16]
 801aac8:	4413      	add	r3, r2
 801aaca:	781b      	ldrb	r3, [r3, #0]
 801aacc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801aace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aad0:	2b1f      	cmp	r3, #31
 801aad2:	d940      	bls.n	801ab56 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801aad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aad6:	2b2f      	cmp	r3, #47	@ 0x2f
 801aad8:	d006      	beq.n	801aae8 <create_name+0x48>
 801aada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aadc:	2b5c      	cmp	r3, #92	@ 0x5c
 801aade:	d110      	bne.n	801ab02 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801aae0:	e002      	b.n	801aae8 <create_name+0x48>
 801aae2:	69bb      	ldr	r3, [r7, #24]
 801aae4:	3301      	adds	r3, #1
 801aae6:	61bb      	str	r3, [r7, #24]
 801aae8:	693a      	ldr	r2, [r7, #16]
 801aaea:	69bb      	ldr	r3, [r7, #24]
 801aaec:	4413      	add	r3, r2
 801aaee:	781b      	ldrb	r3, [r3, #0]
 801aaf0:	2b2f      	cmp	r3, #47	@ 0x2f
 801aaf2:	d0f6      	beq.n	801aae2 <create_name+0x42>
 801aaf4:	693a      	ldr	r2, [r7, #16]
 801aaf6:	69bb      	ldr	r3, [r7, #24]
 801aaf8:	4413      	add	r3, r2
 801aafa:	781b      	ldrb	r3, [r3, #0]
 801aafc:	2b5c      	cmp	r3, #92	@ 0x5c
 801aafe:	d0f0      	beq.n	801aae2 <create_name+0x42>
			break;
 801ab00:	e02a      	b.n	801ab58 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801ab02:	697b      	ldr	r3, [r7, #20]
 801ab04:	2bfe      	cmp	r3, #254	@ 0xfe
 801ab06:	d901      	bls.n	801ab0c <create_name+0x6c>
 801ab08:	2306      	movs	r3, #6
 801ab0a:	e17d      	b.n	801ae08 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801ab0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab0e:	b2db      	uxtb	r3, r3
 801ab10:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ab12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab14:	2101      	movs	r1, #1
 801ab16:	4618      	mov	r0, r3
 801ab18:	f001 f9be 	bl	801be98 <ff_convert>
 801ab1c:	4603      	mov	r3, r0
 801ab1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ab20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d101      	bne.n	801ab2a <create_name+0x8a>
 801ab26:	2306      	movs	r3, #6
 801ab28:	e16e      	b.n	801ae08 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ab2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab2c:	2b7f      	cmp	r3, #127	@ 0x7f
 801ab2e:	d809      	bhi.n	801ab44 <create_name+0xa4>
 801ab30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab32:	4619      	mov	r1, r3
 801ab34:	488d      	ldr	r0, [pc, #564]	@ (801ad6c <create_name+0x2cc>)
 801ab36:	f7fe fc86 	bl	8019446 <chk_chr>
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d001      	beq.n	801ab44 <create_name+0xa4>
 801ab40:	2306      	movs	r3, #6
 801ab42:	e161      	b.n	801ae08 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ab44:	697b      	ldr	r3, [r7, #20]
 801ab46:	1c5a      	adds	r2, r3, #1
 801ab48:	617a      	str	r2, [r7, #20]
 801ab4a:	005b      	lsls	r3, r3, #1
 801ab4c:	68fa      	ldr	r2, [r7, #12]
 801ab4e:	4413      	add	r3, r2
 801ab50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ab52:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801ab54:	e7b4      	b.n	801aac0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801ab56:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801ab58:	693a      	ldr	r2, [r7, #16]
 801ab5a:	69bb      	ldr	r3, [r7, #24]
 801ab5c:	441a      	add	r2, r3
 801ab5e:	683b      	ldr	r3, [r7, #0]
 801ab60:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801ab62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab64:	2b1f      	cmp	r3, #31
 801ab66:	d801      	bhi.n	801ab6c <create_name+0xcc>
 801ab68:	2304      	movs	r3, #4
 801ab6a:	e000      	b.n	801ab6e <create_name+0xce>
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ab72:	e011      	b.n	801ab98 <create_name+0xf8>
		w = lfn[di - 1];
 801ab74:	697b      	ldr	r3, [r7, #20]
 801ab76:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ab7a:	3b01      	subs	r3, #1
 801ab7c:	005b      	lsls	r3, r3, #1
 801ab7e:	68fa      	ldr	r2, [r7, #12]
 801ab80:	4413      	add	r3, r2
 801ab82:	881b      	ldrh	r3, [r3, #0]
 801ab84:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801ab86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab88:	2b20      	cmp	r3, #32
 801ab8a:	d002      	beq.n	801ab92 <create_name+0xf2>
 801ab8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab8e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ab90:	d106      	bne.n	801aba0 <create_name+0x100>
		di--;
 801ab92:	697b      	ldr	r3, [r7, #20]
 801ab94:	3b01      	subs	r3, #1
 801ab96:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ab98:	697b      	ldr	r3, [r7, #20]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d1ea      	bne.n	801ab74 <create_name+0xd4>
 801ab9e:	e000      	b.n	801aba2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801aba0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801aba2:	697b      	ldr	r3, [r7, #20]
 801aba4:	005b      	lsls	r3, r3, #1
 801aba6:	68fa      	ldr	r2, [r7, #12]
 801aba8:	4413      	add	r3, r2
 801abaa:	2200      	movs	r2, #0
 801abac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801abae:	697b      	ldr	r3, [r7, #20]
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d101      	bne.n	801abb8 <create_name+0x118>
 801abb4:	2306      	movs	r3, #6
 801abb6:	e127      	b.n	801ae08 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	3324      	adds	r3, #36	@ 0x24
 801abbc:	220b      	movs	r2, #11
 801abbe:	2120      	movs	r1, #32
 801abc0:	4618      	mov	r0, r3
 801abc2:	f7fe fbfe 	bl	80193c2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801abc6:	2300      	movs	r3, #0
 801abc8:	61bb      	str	r3, [r7, #24]
 801abca:	e002      	b.n	801abd2 <create_name+0x132>
 801abcc:	69bb      	ldr	r3, [r7, #24]
 801abce:	3301      	adds	r3, #1
 801abd0:	61bb      	str	r3, [r7, #24]
 801abd2:	69bb      	ldr	r3, [r7, #24]
 801abd4:	005b      	lsls	r3, r3, #1
 801abd6:	68fa      	ldr	r2, [r7, #12]
 801abd8:	4413      	add	r3, r2
 801abda:	881b      	ldrh	r3, [r3, #0]
 801abdc:	2b20      	cmp	r3, #32
 801abde:	d0f5      	beq.n	801abcc <create_name+0x12c>
 801abe0:	69bb      	ldr	r3, [r7, #24]
 801abe2:	005b      	lsls	r3, r3, #1
 801abe4:	68fa      	ldr	r2, [r7, #12]
 801abe6:	4413      	add	r3, r2
 801abe8:	881b      	ldrh	r3, [r3, #0]
 801abea:	2b2e      	cmp	r3, #46	@ 0x2e
 801abec:	d0ee      	beq.n	801abcc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801abee:	69bb      	ldr	r3, [r7, #24]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d009      	beq.n	801ac08 <create_name+0x168>
 801abf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801abf8:	f043 0303 	orr.w	r3, r3, #3
 801abfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801ac00:	e002      	b.n	801ac08 <create_name+0x168>
 801ac02:	697b      	ldr	r3, [r7, #20]
 801ac04:	3b01      	subs	r3, #1
 801ac06:	617b      	str	r3, [r7, #20]
 801ac08:	697b      	ldr	r3, [r7, #20]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d009      	beq.n	801ac22 <create_name+0x182>
 801ac0e:	697b      	ldr	r3, [r7, #20]
 801ac10:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ac14:	3b01      	subs	r3, #1
 801ac16:	005b      	lsls	r3, r3, #1
 801ac18:	68fa      	ldr	r2, [r7, #12]
 801ac1a:	4413      	add	r3, r2
 801ac1c:	881b      	ldrh	r3, [r3, #0]
 801ac1e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac20:	d1ef      	bne.n	801ac02 <create_name+0x162>

	i = b = 0; ni = 8;
 801ac22:	2300      	movs	r3, #0
 801ac24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ac28:	2300      	movs	r3, #0
 801ac2a:	623b      	str	r3, [r7, #32]
 801ac2c:	2308      	movs	r3, #8
 801ac2e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801ac30:	69bb      	ldr	r3, [r7, #24]
 801ac32:	1c5a      	adds	r2, r3, #1
 801ac34:	61ba      	str	r2, [r7, #24]
 801ac36:	005b      	lsls	r3, r3, #1
 801ac38:	68fa      	ldr	r2, [r7, #12]
 801ac3a:	4413      	add	r3, r2
 801ac3c:	881b      	ldrh	r3, [r3, #0]
 801ac3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801ac40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	f000 8090 	beq.w	801ad68 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801ac48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac4a:	2b20      	cmp	r3, #32
 801ac4c:	d006      	beq.n	801ac5c <create_name+0x1bc>
 801ac4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac50:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac52:	d10a      	bne.n	801ac6a <create_name+0x1ca>
 801ac54:	69ba      	ldr	r2, [r7, #24]
 801ac56:	697b      	ldr	r3, [r7, #20]
 801ac58:	429a      	cmp	r2, r3
 801ac5a:	d006      	beq.n	801ac6a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801ac5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac60:	f043 0303 	orr.w	r3, r3, #3
 801ac64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ac68:	e07d      	b.n	801ad66 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801ac6a:	6a3a      	ldr	r2, [r7, #32]
 801ac6c:	69fb      	ldr	r3, [r7, #28]
 801ac6e:	429a      	cmp	r2, r3
 801ac70:	d203      	bcs.n	801ac7a <create_name+0x1da>
 801ac72:	69ba      	ldr	r2, [r7, #24]
 801ac74:	697b      	ldr	r3, [r7, #20]
 801ac76:	429a      	cmp	r2, r3
 801ac78:	d123      	bne.n	801acc2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801ac7a:	69fb      	ldr	r3, [r7, #28]
 801ac7c:	2b0b      	cmp	r3, #11
 801ac7e:	d106      	bne.n	801ac8e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801ac80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac84:	f043 0303 	orr.w	r3, r3, #3
 801ac88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ac8c:	e075      	b.n	801ad7a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801ac8e:	69ba      	ldr	r2, [r7, #24]
 801ac90:	697b      	ldr	r3, [r7, #20]
 801ac92:	429a      	cmp	r2, r3
 801ac94:	d005      	beq.n	801aca2 <create_name+0x202>
 801ac96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac9a:	f043 0303 	orr.w	r3, r3, #3
 801ac9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801aca2:	69ba      	ldr	r2, [r7, #24]
 801aca4:	697b      	ldr	r3, [r7, #20]
 801aca6:	429a      	cmp	r2, r3
 801aca8:	d866      	bhi.n	801ad78 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801acaa:	697b      	ldr	r3, [r7, #20]
 801acac:	61bb      	str	r3, [r7, #24]
 801acae:	2308      	movs	r3, #8
 801acb0:	623b      	str	r3, [r7, #32]
 801acb2:	230b      	movs	r3, #11
 801acb4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801acb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801acba:	009b      	lsls	r3, r3, #2
 801acbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801acc0:	e051      	b.n	801ad66 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801acc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acc4:	2b7f      	cmp	r3, #127	@ 0x7f
 801acc6:	d914      	bls.n	801acf2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801acc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acca:	2100      	movs	r1, #0
 801accc:	4618      	mov	r0, r3
 801acce:	f001 f8e3 	bl	801be98 <ff_convert>
 801acd2:	4603      	mov	r3, r0
 801acd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801acd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d004      	beq.n	801ace6 <create_name+0x246>
 801acdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acde:	3b80      	subs	r3, #128	@ 0x80
 801ace0:	4a23      	ldr	r2, [pc, #140]	@ (801ad70 <create_name+0x2d0>)
 801ace2:	5cd3      	ldrb	r3, [r2, r3]
 801ace4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801ace6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801acea:	f043 0302 	orr.w	r3, r3, #2
 801acee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801acf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d007      	beq.n	801ad08 <create_name+0x268>
 801acf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acfa:	4619      	mov	r1, r3
 801acfc:	481d      	ldr	r0, [pc, #116]	@ (801ad74 <create_name+0x2d4>)
 801acfe:	f7fe fba2 	bl	8019446 <chk_chr>
 801ad02:	4603      	mov	r3, r0
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d008      	beq.n	801ad1a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801ad08:	235f      	movs	r3, #95	@ 0x5f
 801ad0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801ad0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad10:	f043 0303 	orr.w	r3, r3, #3
 801ad14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ad18:	e01b      	b.n	801ad52 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801ad1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad1c:	2b40      	cmp	r3, #64	@ 0x40
 801ad1e:	d909      	bls.n	801ad34 <create_name+0x294>
 801ad20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad22:	2b5a      	cmp	r3, #90	@ 0x5a
 801ad24:	d806      	bhi.n	801ad34 <create_name+0x294>
					b |= 2;
 801ad26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad2a:	f043 0302 	orr.w	r3, r3, #2
 801ad2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ad32:	e00e      	b.n	801ad52 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801ad34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad36:	2b60      	cmp	r3, #96	@ 0x60
 801ad38:	d90b      	bls.n	801ad52 <create_name+0x2b2>
 801ad3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad3c:	2b7a      	cmp	r3, #122	@ 0x7a
 801ad3e:	d808      	bhi.n	801ad52 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801ad40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad44:	f043 0301 	orr.w	r3, r3, #1
 801ad48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ad4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad4e:	3b20      	subs	r3, #32
 801ad50:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801ad52:	6a3b      	ldr	r3, [r7, #32]
 801ad54:	1c5a      	adds	r2, r3, #1
 801ad56:	623a      	str	r2, [r7, #32]
 801ad58:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ad5a:	b2d1      	uxtb	r1, r2
 801ad5c:	687a      	ldr	r2, [r7, #4]
 801ad5e:	4413      	add	r3, r2
 801ad60:	460a      	mov	r2, r1
 801ad62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801ad66:	e763      	b.n	801ac30 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801ad68:	bf00      	nop
 801ad6a:	e006      	b.n	801ad7a <create_name+0x2da>
 801ad6c:	08024794 	.word	0x08024794
 801ad70:	080250c0 	.word	0x080250c0
 801ad74:	080247a0 	.word	0x080247a0
			if (si > di) break;			/* No extension */
 801ad78:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801ad80:	2be5      	cmp	r3, #229	@ 0xe5
 801ad82:	d103      	bne.n	801ad8c <create_name+0x2ec>
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	2205      	movs	r2, #5
 801ad88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801ad8c:	69fb      	ldr	r3, [r7, #28]
 801ad8e:	2b08      	cmp	r3, #8
 801ad90:	d104      	bne.n	801ad9c <create_name+0x2fc>
 801ad92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad96:	009b      	lsls	r3, r3, #2
 801ad98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801ad9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ada0:	f003 030c 	and.w	r3, r3, #12
 801ada4:	2b0c      	cmp	r3, #12
 801ada6:	d005      	beq.n	801adb4 <create_name+0x314>
 801ada8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801adac:	f003 0303 	and.w	r3, r3, #3
 801adb0:	2b03      	cmp	r3, #3
 801adb2:	d105      	bne.n	801adc0 <create_name+0x320>
 801adb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801adb8:	f043 0302 	orr.w	r3, r3, #2
 801adbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801adc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801adc4:	f003 0302 	and.w	r3, r3, #2
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d117      	bne.n	801adfc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801adcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801add0:	f003 0303 	and.w	r3, r3, #3
 801add4:	2b01      	cmp	r3, #1
 801add6:	d105      	bne.n	801ade4 <create_name+0x344>
 801add8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801addc:	f043 0310 	orr.w	r3, r3, #16
 801ade0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801ade4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ade8:	f003 030c 	and.w	r3, r3, #12
 801adec:	2b04      	cmp	r3, #4
 801adee:	d105      	bne.n	801adfc <create_name+0x35c>
 801adf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801adf4:	f043 0308 	orr.w	r3, r3, #8
 801adf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ae02:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801ae06:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801ae08:	4618      	mov	r0, r3
 801ae0a:	3728      	adds	r7, #40	@ 0x28
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bd80      	pop	{r7, pc}

0801ae10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b086      	sub	sp, #24
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	6078      	str	r0, [r7, #4]
 801ae18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801ae1e:	693b      	ldr	r3, [r7, #16]
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801ae24:	e002      	b.n	801ae2c <follow_path+0x1c>
 801ae26:	683b      	ldr	r3, [r7, #0]
 801ae28:	3301      	adds	r3, #1
 801ae2a:	603b      	str	r3, [r7, #0]
 801ae2c:	683b      	ldr	r3, [r7, #0]
 801ae2e:	781b      	ldrb	r3, [r3, #0]
 801ae30:	2b2f      	cmp	r3, #47	@ 0x2f
 801ae32:	d0f8      	beq.n	801ae26 <follow_path+0x16>
 801ae34:	683b      	ldr	r3, [r7, #0]
 801ae36:	781b      	ldrb	r3, [r3, #0]
 801ae38:	2b5c      	cmp	r3, #92	@ 0x5c
 801ae3a:	d0f4      	beq.n	801ae26 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801ae3c:	693b      	ldr	r3, [r7, #16]
 801ae3e:	2200      	movs	r2, #0
 801ae40:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ae42:	683b      	ldr	r3, [r7, #0]
 801ae44:	781b      	ldrb	r3, [r3, #0]
 801ae46:	2b1f      	cmp	r3, #31
 801ae48:	d80a      	bhi.n	801ae60 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	2280      	movs	r2, #128	@ 0x80
 801ae4e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801ae52:	2100      	movs	r1, #0
 801ae54:	6878      	ldr	r0, [r7, #4]
 801ae56:	f7ff f83e 	bl	8019ed6 <dir_sdi>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	75fb      	strb	r3, [r7, #23]
 801ae5e:	e043      	b.n	801aee8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ae60:	463b      	mov	r3, r7
 801ae62:	4619      	mov	r1, r3
 801ae64:	6878      	ldr	r0, [r7, #4]
 801ae66:	f7ff fe1b 	bl	801aaa0 <create_name>
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ae6e:	7dfb      	ldrb	r3, [r7, #23]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d134      	bne.n	801aede <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801ae74:	6878      	ldr	r0, [r7, #4]
 801ae76:	f7ff fb7c 	bl	801a572 <dir_find>
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801ae84:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801ae86:	7dfb      	ldrb	r3, [r7, #23]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d00a      	beq.n	801aea2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801ae8c:	7dfb      	ldrb	r3, [r7, #23]
 801ae8e:	2b04      	cmp	r3, #4
 801ae90:	d127      	bne.n	801aee2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801ae92:	7afb      	ldrb	r3, [r7, #11]
 801ae94:	f003 0304 	and.w	r3, r3, #4
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d122      	bne.n	801aee2 <follow_path+0xd2>
 801ae9c:	2305      	movs	r3, #5
 801ae9e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801aea0:	e01f      	b.n	801aee2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801aea2:	7afb      	ldrb	r3, [r7, #11]
 801aea4:	f003 0304 	and.w	r3, r3, #4
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d11c      	bne.n	801aee6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801aeac:	693b      	ldr	r3, [r7, #16]
 801aeae:	799b      	ldrb	r3, [r3, #6]
 801aeb0:	f003 0310 	and.w	r3, r3, #16
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d102      	bne.n	801aebe <follow_path+0xae>
				res = FR_NO_PATH; break;
 801aeb8:	2305      	movs	r3, #5
 801aeba:	75fb      	strb	r3, [r7, #23]
 801aebc:	e014      	b.n	801aee8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	695b      	ldr	r3, [r3, #20]
 801aec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801aecc:	4413      	add	r3, r2
 801aece:	4619      	mov	r1, r3
 801aed0:	68f8      	ldr	r0, [r7, #12]
 801aed2:	f7ff f987 	bl	801a1e4 <ld_clust>
 801aed6:	4602      	mov	r2, r0
 801aed8:	693b      	ldr	r3, [r7, #16]
 801aeda:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801aedc:	e7c0      	b.n	801ae60 <follow_path+0x50>
			if (res != FR_OK) break;
 801aede:	bf00      	nop
 801aee0:	e002      	b.n	801aee8 <follow_path+0xd8>
				break;
 801aee2:	bf00      	nop
 801aee4:	e000      	b.n	801aee8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801aee6:	bf00      	nop
			}
		}
	}

	return res;
 801aee8:	7dfb      	ldrb	r3, [r7, #23]
}
 801aeea:	4618      	mov	r0, r3
 801aeec:	3718      	adds	r7, #24
 801aeee:	46bd      	mov	sp, r7
 801aef0:	bd80      	pop	{r7, pc}

0801aef2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801aef2:	b480      	push	{r7}
 801aef4:	b087      	sub	sp, #28
 801aef6:	af00      	add	r7, sp, #0
 801aef8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801aefa:	f04f 33ff 	mov.w	r3, #4294967295
 801aefe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d031      	beq.n	801af6c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	617b      	str	r3, [r7, #20]
 801af0e:	e002      	b.n	801af16 <get_ldnumber+0x24>
 801af10:	697b      	ldr	r3, [r7, #20]
 801af12:	3301      	adds	r3, #1
 801af14:	617b      	str	r3, [r7, #20]
 801af16:	697b      	ldr	r3, [r7, #20]
 801af18:	781b      	ldrb	r3, [r3, #0]
 801af1a:	2b1f      	cmp	r3, #31
 801af1c:	d903      	bls.n	801af26 <get_ldnumber+0x34>
 801af1e:	697b      	ldr	r3, [r7, #20]
 801af20:	781b      	ldrb	r3, [r3, #0]
 801af22:	2b3a      	cmp	r3, #58	@ 0x3a
 801af24:	d1f4      	bne.n	801af10 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801af26:	697b      	ldr	r3, [r7, #20]
 801af28:	781b      	ldrb	r3, [r3, #0]
 801af2a:	2b3a      	cmp	r3, #58	@ 0x3a
 801af2c:	d11c      	bne.n	801af68 <get_ldnumber+0x76>
			tp = *path;
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	1c5a      	adds	r2, r3, #1
 801af38:	60fa      	str	r2, [r7, #12]
 801af3a:	781b      	ldrb	r3, [r3, #0]
 801af3c:	3b30      	subs	r3, #48	@ 0x30
 801af3e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801af40:	68bb      	ldr	r3, [r7, #8]
 801af42:	2b09      	cmp	r3, #9
 801af44:	d80e      	bhi.n	801af64 <get_ldnumber+0x72>
 801af46:	68fa      	ldr	r2, [r7, #12]
 801af48:	697b      	ldr	r3, [r7, #20]
 801af4a:	429a      	cmp	r2, r3
 801af4c:	d10a      	bne.n	801af64 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801af4e:	68bb      	ldr	r3, [r7, #8]
 801af50:	2b00      	cmp	r3, #0
 801af52:	d107      	bne.n	801af64 <get_ldnumber+0x72>
					vol = (int)i;
 801af54:	68bb      	ldr	r3, [r7, #8]
 801af56:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801af58:	697b      	ldr	r3, [r7, #20]
 801af5a:	3301      	adds	r3, #1
 801af5c:	617b      	str	r3, [r7, #20]
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	697a      	ldr	r2, [r7, #20]
 801af62:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801af64:	693b      	ldr	r3, [r7, #16]
 801af66:	e002      	b.n	801af6e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801af68:	2300      	movs	r3, #0
 801af6a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801af6c:	693b      	ldr	r3, [r7, #16]
}
 801af6e:	4618      	mov	r0, r3
 801af70:	371c      	adds	r7, #28
 801af72:	46bd      	mov	sp, r7
 801af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af78:	4770      	bx	lr
	...

0801af7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801af7c:	b580      	push	{r7, lr}
 801af7e:	b082      	sub	sp, #8
 801af80:	af00      	add	r7, sp, #0
 801af82:	6078      	str	r0, [r7, #4]
 801af84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	2200      	movs	r2, #0
 801af8a:	70da      	strb	r2, [r3, #3]
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	f04f 32ff 	mov.w	r2, #4294967295
 801af92:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801af94:	6839      	ldr	r1, [r7, #0]
 801af96:	6878      	ldr	r0, [r7, #4]
 801af98:	f7fe fc20 	bl	80197dc <move_window>
 801af9c:	4603      	mov	r3, r0
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d001      	beq.n	801afa6 <check_fs+0x2a>
 801afa2:	2304      	movs	r3, #4
 801afa4:	e038      	b.n	801b018 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	3334      	adds	r3, #52	@ 0x34
 801afaa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801afae:	4618      	mov	r0, r3
 801afb0:	f7fe f964 	bl	801927c <ld_word>
 801afb4:	4603      	mov	r3, r0
 801afb6:	461a      	mov	r2, r3
 801afb8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801afbc:	429a      	cmp	r2, r3
 801afbe:	d001      	beq.n	801afc4 <check_fs+0x48>
 801afc0:	2303      	movs	r3, #3
 801afc2:	e029      	b.n	801b018 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801afca:	2be9      	cmp	r3, #233	@ 0xe9
 801afcc:	d009      	beq.n	801afe2 <check_fs+0x66>
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801afd4:	2beb      	cmp	r3, #235	@ 0xeb
 801afd6:	d11e      	bne.n	801b016 <check_fs+0x9a>
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801afde:	2b90      	cmp	r3, #144	@ 0x90
 801afe0:	d119      	bne.n	801b016 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	3334      	adds	r3, #52	@ 0x34
 801afe6:	3336      	adds	r3, #54	@ 0x36
 801afe8:	4618      	mov	r0, r3
 801afea:	f7fe f95f 	bl	80192ac <ld_dword>
 801afee:	4603      	mov	r3, r0
 801aff0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801aff4:	4a0a      	ldr	r2, [pc, #40]	@ (801b020 <check_fs+0xa4>)
 801aff6:	4293      	cmp	r3, r2
 801aff8:	d101      	bne.n	801affe <check_fs+0x82>
 801affa:	2300      	movs	r3, #0
 801affc:	e00c      	b.n	801b018 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	3334      	adds	r3, #52	@ 0x34
 801b002:	3352      	adds	r3, #82	@ 0x52
 801b004:	4618      	mov	r0, r3
 801b006:	f7fe f951 	bl	80192ac <ld_dword>
 801b00a:	4603      	mov	r3, r0
 801b00c:	4a05      	ldr	r2, [pc, #20]	@ (801b024 <check_fs+0xa8>)
 801b00e:	4293      	cmp	r3, r2
 801b010:	d101      	bne.n	801b016 <check_fs+0x9a>
 801b012:	2300      	movs	r3, #0
 801b014:	e000      	b.n	801b018 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801b016:	2302      	movs	r3, #2
}
 801b018:	4618      	mov	r0, r3
 801b01a:	3708      	adds	r7, #8
 801b01c:	46bd      	mov	sp, r7
 801b01e:	bd80      	pop	{r7, pc}
 801b020:	00544146 	.word	0x00544146
 801b024:	33544146 	.word	0x33544146

0801b028 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801b028:	b580      	push	{r7, lr}
 801b02a:	b096      	sub	sp, #88	@ 0x58
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	60f8      	str	r0, [r7, #12]
 801b030:	60b9      	str	r1, [r7, #8]
 801b032:	4613      	mov	r3, r2
 801b034:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801b036:	68bb      	ldr	r3, [r7, #8]
 801b038:	2200      	movs	r2, #0
 801b03a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801b03c:	68f8      	ldr	r0, [r7, #12]
 801b03e:	f7ff ff58 	bl	801aef2 <get_ldnumber>
 801b042:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801b044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b046:	2b00      	cmp	r3, #0
 801b048:	da01      	bge.n	801b04e <find_volume+0x26>
 801b04a:	230b      	movs	r3, #11
 801b04c:	e230      	b.n	801b4b0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801b04e:	4aa1      	ldr	r2, [pc, #644]	@ (801b2d4 <find_volume+0x2ac>)
 801b050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b056:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801b058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d101      	bne.n	801b062 <find_volume+0x3a>
 801b05e:	230c      	movs	r3, #12
 801b060:	e226      	b.n	801b4b0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801b062:	68bb      	ldr	r3, [r7, #8]
 801b064:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b066:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801b068:	79fb      	ldrb	r3, [r7, #7]
 801b06a:	f023 0301 	bic.w	r3, r3, #1
 801b06e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801b070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b072:	781b      	ldrb	r3, [r3, #0]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d01a      	beq.n	801b0ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 801b078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b07a:	785b      	ldrb	r3, [r3, #1]
 801b07c:	4618      	mov	r0, r3
 801b07e:	f7fe f85d 	bl	801913c <disk_status>
 801b082:	4603      	mov	r3, r0
 801b084:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801b088:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b08c:	f003 0301 	and.w	r3, r3, #1
 801b090:	2b00      	cmp	r3, #0
 801b092:	d10c      	bne.n	801b0ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801b094:	79fb      	ldrb	r3, [r7, #7]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d007      	beq.n	801b0aa <find_volume+0x82>
 801b09a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b09e:	f003 0304 	and.w	r3, r3, #4
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d001      	beq.n	801b0aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801b0a6:	230a      	movs	r3, #10
 801b0a8:	e202      	b.n	801b4b0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801b0aa:	2300      	movs	r3, #0
 801b0ac:	e200      	b.n	801b4b0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0b0:	2200      	movs	r2, #0
 801b0b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801b0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b0b6:	b2da      	uxtb	r2, r3
 801b0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801b0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0be:	785b      	ldrb	r3, [r3, #1]
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	f7fe f855 	bl	8019170 <disk_initialize>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801b0cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0d0:	f003 0301 	and.w	r3, r3, #1
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d001      	beq.n	801b0dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801b0d8:	2303      	movs	r3, #3
 801b0da:	e1e9      	b.n	801b4b0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801b0dc:	79fb      	ldrb	r3, [r7, #7]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d007      	beq.n	801b0f2 <find_volume+0xca>
 801b0e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0e6:	f003 0304 	and.w	r3, r3, #4
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d001      	beq.n	801b0f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801b0ee:	230a      	movs	r3, #10
 801b0f0:	e1de      	b.n	801b4b0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801b0f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b0f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b0fa:	f7ff ff3f 	bl	801af7c <check_fs>
 801b0fe:	4603      	mov	r3, r0
 801b100:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801b104:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b108:	2b02      	cmp	r3, #2
 801b10a:	d149      	bne.n	801b1a0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b10c:	2300      	movs	r3, #0
 801b10e:	643b      	str	r3, [r7, #64]	@ 0x40
 801b110:	e01e      	b.n	801b150 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801b112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b114:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801b118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b11a:	011b      	lsls	r3, r3, #4
 801b11c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801b120:	4413      	add	r3, r2
 801b122:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801b124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b126:	3304      	adds	r3, #4
 801b128:	781b      	ldrb	r3, [r3, #0]
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d006      	beq.n	801b13c <find_volume+0x114>
 801b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b130:	3308      	adds	r3, #8
 801b132:	4618      	mov	r0, r3
 801b134:	f7fe f8ba 	bl	80192ac <ld_dword>
 801b138:	4602      	mov	r2, r0
 801b13a:	e000      	b.n	801b13e <find_volume+0x116>
 801b13c:	2200      	movs	r2, #0
 801b13e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b140:	009b      	lsls	r3, r3, #2
 801b142:	3358      	adds	r3, #88	@ 0x58
 801b144:	443b      	add	r3, r7
 801b146:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b14a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b14c:	3301      	adds	r3, #1
 801b14e:	643b      	str	r3, [r7, #64]	@ 0x40
 801b150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b152:	2b03      	cmp	r3, #3
 801b154:	d9dd      	bls.n	801b112 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801b156:	2300      	movs	r3, #0
 801b158:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801b15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d002      	beq.n	801b166 <find_volume+0x13e>
 801b160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b162:	3b01      	subs	r3, #1
 801b164:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801b166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b168:	009b      	lsls	r3, r3, #2
 801b16a:	3358      	adds	r3, #88	@ 0x58
 801b16c:	443b      	add	r3, r7
 801b16e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801b172:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801b174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b176:	2b00      	cmp	r3, #0
 801b178:	d005      	beq.n	801b186 <find_volume+0x15e>
 801b17a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b17c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b17e:	f7ff fefd 	bl	801af7c <check_fs>
 801b182:	4603      	mov	r3, r0
 801b184:	e000      	b.n	801b188 <find_volume+0x160>
 801b186:	2303      	movs	r3, #3
 801b188:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801b18c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b190:	2b01      	cmp	r3, #1
 801b192:	d905      	bls.n	801b1a0 <find_volume+0x178>
 801b194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b196:	3301      	adds	r3, #1
 801b198:	643b      	str	r3, [r7, #64]	@ 0x40
 801b19a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b19c:	2b03      	cmp	r3, #3
 801b19e:	d9e2      	bls.n	801b166 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801b1a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b1a4:	2b04      	cmp	r3, #4
 801b1a6:	d101      	bne.n	801b1ac <find_volume+0x184>
 801b1a8:	2301      	movs	r3, #1
 801b1aa:	e181      	b.n	801b4b0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801b1ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b1b0:	2b01      	cmp	r3, #1
 801b1b2:	d901      	bls.n	801b1b8 <find_volume+0x190>
 801b1b4:	230d      	movs	r3, #13
 801b1b6:	e17b      	b.n	801b4b0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801b1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1ba:	3334      	adds	r3, #52	@ 0x34
 801b1bc:	330b      	adds	r3, #11
 801b1be:	4618      	mov	r0, r3
 801b1c0:	f7fe f85c 	bl	801927c <ld_word>
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b1ca:	d001      	beq.n	801b1d0 <find_volume+0x1a8>
 801b1cc:	230d      	movs	r3, #13
 801b1ce:	e16f      	b.n	801b4b0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801b1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1d2:	3334      	adds	r3, #52	@ 0x34
 801b1d4:	3316      	adds	r3, #22
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	f7fe f850 	bl	801927c <ld_word>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801b1e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d106      	bne.n	801b1f4 <find_volume+0x1cc>
 801b1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1e8:	3334      	adds	r3, #52	@ 0x34
 801b1ea:	3324      	adds	r3, #36	@ 0x24
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f7fe f85d 	bl	80192ac <ld_dword>
 801b1f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801b1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b1f8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801b1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1fc:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801b200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b202:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801b204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b206:	789b      	ldrb	r3, [r3, #2]
 801b208:	2b01      	cmp	r3, #1
 801b20a:	d005      	beq.n	801b218 <find_volume+0x1f0>
 801b20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b20e:	789b      	ldrb	r3, [r3, #2]
 801b210:	2b02      	cmp	r3, #2
 801b212:	d001      	beq.n	801b218 <find_volume+0x1f0>
 801b214:	230d      	movs	r3, #13
 801b216:	e14b      	b.n	801b4b0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801b218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b21a:	789b      	ldrb	r3, [r3, #2]
 801b21c:	461a      	mov	r2, r3
 801b21e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b220:	fb02 f303 	mul.w	r3, r2, r3
 801b224:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801b226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801b22c:	461a      	mov	r2, r3
 801b22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b230:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801b232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b234:	895b      	ldrh	r3, [r3, #10]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d008      	beq.n	801b24c <find_volume+0x224>
 801b23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b23c:	895b      	ldrh	r3, [r3, #10]
 801b23e:	461a      	mov	r2, r3
 801b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b242:	895b      	ldrh	r3, [r3, #10]
 801b244:	3b01      	subs	r3, #1
 801b246:	4013      	ands	r3, r2
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d001      	beq.n	801b250 <find_volume+0x228>
 801b24c:	230d      	movs	r3, #13
 801b24e:	e12f      	b.n	801b4b0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801b250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b252:	3334      	adds	r3, #52	@ 0x34
 801b254:	3311      	adds	r3, #17
 801b256:	4618      	mov	r0, r3
 801b258:	f7fe f810 	bl	801927c <ld_word>
 801b25c:	4603      	mov	r3, r0
 801b25e:	461a      	mov	r2, r3
 801b260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b262:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b266:	891b      	ldrh	r3, [r3, #8]
 801b268:	f003 030f 	and.w	r3, r3, #15
 801b26c:	b29b      	uxth	r3, r3
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d001      	beq.n	801b276 <find_volume+0x24e>
 801b272:	230d      	movs	r3, #13
 801b274:	e11c      	b.n	801b4b0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801b276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b278:	3334      	adds	r3, #52	@ 0x34
 801b27a:	3313      	adds	r3, #19
 801b27c:	4618      	mov	r0, r3
 801b27e:	f7fd fffd 	bl	801927c <ld_word>
 801b282:	4603      	mov	r3, r0
 801b284:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801b286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d106      	bne.n	801b29a <find_volume+0x272>
 801b28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b28e:	3334      	adds	r3, #52	@ 0x34
 801b290:	3320      	adds	r3, #32
 801b292:	4618      	mov	r0, r3
 801b294:	f7fe f80a 	bl	80192ac <ld_dword>
 801b298:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801b29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b29c:	3334      	adds	r3, #52	@ 0x34
 801b29e:	330e      	adds	r3, #14
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	f7fd ffeb 	bl	801927c <ld_word>
 801b2a6:	4603      	mov	r3, r0
 801b2a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801b2aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d101      	bne.n	801b2b4 <find_volume+0x28c>
 801b2b0:	230d      	movs	r3, #13
 801b2b2:	e0fd      	b.n	801b4b0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801b2b4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b2b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2b8:	4413      	add	r3, r2
 801b2ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b2bc:	8912      	ldrh	r2, [r2, #8]
 801b2be:	0912      	lsrs	r2, r2, #4
 801b2c0:	b292      	uxth	r2, r2
 801b2c2:	4413      	add	r3, r2
 801b2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801b2c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2ca:	429a      	cmp	r2, r3
 801b2cc:	d204      	bcs.n	801b2d8 <find_volume+0x2b0>
 801b2ce:	230d      	movs	r3, #13
 801b2d0:	e0ee      	b.n	801b4b0 <find_volume+0x488>
 801b2d2:	bf00      	nop
 801b2d4:	20001b68 	.word	0x20001b68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801b2d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2dc:	1ad3      	subs	r3, r2, r3
 801b2de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b2e0:	8952      	ldrh	r2, [r2, #10]
 801b2e2:	fbb3 f3f2 	udiv	r3, r3, r2
 801b2e6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801b2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d101      	bne.n	801b2f2 <find_volume+0x2ca>
 801b2ee:	230d      	movs	r3, #13
 801b2f0:	e0de      	b.n	801b4b0 <find_volume+0x488>
		fmt = FS_FAT32;
 801b2f2:	2303      	movs	r3, #3
 801b2f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2fa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801b2fe:	4293      	cmp	r3, r2
 801b300:	d802      	bhi.n	801b308 <find_volume+0x2e0>
 801b302:	2302      	movs	r3, #2
 801b304:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801b308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b30a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801b30e:	4293      	cmp	r3, r2
 801b310:	d802      	bhi.n	801b318 <find_volume+0x2f0>
 801b312:	2301      	movs	r3, #1
 801b314:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801b318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b31a:	1c9a      	adds	r2, r3, #2
 801b31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b31e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801b320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b322:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b324:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801b326:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b32a:	441a      	add	r2, r3
 801b32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b32e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801b330:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b334:	441a      	add	r2, r3
 801b336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b338:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801b33a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b33e:	2b03      	cmp	r3, #3
 801b340:	d11e      	bne.n	801b380 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801b342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b344:	3334      	adds	r3, #52	@ 0x34
 801b346:	332a      	adds	r3, #42	@ 0x2a
 801b348:	4618      	mov	r0, r3
 801b34a:	f7fd ff97 	bl	801927c <ld_word>
 801b34e:	4603      	mov	r3, r0
 801b350:	2b00      	cmp	r3, #0
 801b352:	d001      	beq.n	801b358 <find_volume+0x330>
 801b354:	230d      	movs	r3, #13
 801b356:	e0ab      	b.n	801b4b0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801b358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b35a:	891b      	ldrh	r3, [r3, #8]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d001      	beq.n	801b364 <find_volume+0x33c>
 801b360:	230d      	movs	r3, #13
 801b362:	e0a5      	b.n	801b4b0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801b364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b366:	3334      	adds	r3, #52	@ 0x34
 801b368:	332c      	adds	r3, #44	@ 0x2c
 801b36a:	4618      	mov	r0, r3
 801b36c:	f7fd ff9e 	bl	80192ac <ld_dword>
 801b370:	4602      	mov	r2, r0
 801b372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b374:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801b376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b378:	699b      	ldr	r3, [r3, #24]
 801b37a:	009b      	lsls	r3, r3, #2
 801b37c:	647b      	str	r3, [r7, #68]	@ 0x44
 801b37e:	e01f      	b.n	801b3c0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801b380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b382:	891b      	ldrh	r3, [r3, #8]
 801b384:	2b00      	cmp	r3, #0
 801b386:	d101      	bne.n	801b38c <find_volume+0x364>
 801b388:	230d      	movs	r3, #13
 801b38a:	e091      	b.n	801b4b0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801b38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b38e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b392:	441a      	add	r2, r3
 801b394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b396:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801b398:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b39c:	2b02      	cmp	r3, #2
 801b39e:	d103      	bne.n	801b3a8 <find_volume+0x380>
 801b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3a2:	699b      	ldr	r3, [r3, #24]
 801b3a4:	005b      	lsls	r3, r3, #1
 801b3a6:	e00a      	b.n	801b3be <find_volume+0x396>
 801b3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3aa:	699a      	ldr	r2, [r3, #24]
 801b3ac:	4613      	mov	r3, r2
 801b3ae:	005b      	lsls	r3, r3, #1
 801b3b0:	4413      	add	r3, r2
 801b3b2:	085a      	lsrs	r2, r3, #1
 801b3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3b6:	699b      	ldr	r3, [r3, #24]
 801b3b8:	f003 0301 	and.w	r3, r3, #1
 801b3bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801b3be:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801b3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3c2:	69da      	ldr	r2, [r3, #28]
 801b3c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b3c6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801b3ca:	0a5b      	lsrs	r3, r3, #9
 801b3cc:	429a      	cmp	r2, r3
 801b3ce:	d201      	bcs.n	801b3d4 <find_volume+0x3ac>
 801b3d0:	230d      	movs	r3, #13
 801b3d2:	e06d      	b.n	801b4b0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801b3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3d6:	f04f 32ff 	mov.w	r2, #4294967295
 801b3da:	615a      	str	r2, [r3, #20]
 801b3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3de:	695a      	ldr	r2, [r3, #20]
 801b3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3e2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801b3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3e6:	2280      	movs	r2, #128	@ 0x80
 801b3e8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801b3ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b3ee:	2b03      	cmp	r3, #3
 801b3f0:	d149      	bne.n	801b486 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801b3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3f4:	3334      	adds	r3, #52	@ 0x34
 801b3f6:	3330      	adds	r3, #48	@ 0x30
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	f7fd ff3f 	bl	801927c <ld_word>
 801b3fe:	4603      	mov	r3, r0
 801b400:	2b01      	cmp	r3, #1
 801b402:	d140      	bne.n	801b486 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801b404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b406:	3301      	adds	r3, #1
 801b408:	4619      	mov	r1, r3
 801b40a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b40c:	f7fe f9e6 	bl	80197dc <move_window>
 801b410:	4603      	mov	r3, r0
 801b412:	2b00      	cmp	r3, #0
 801b414:	d137      	bne.n	801b486 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801b416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b418:	2200      	movs	r2, #0
 801b41a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801b41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b41e:	3334      	adds	r3, #52	@ 0x34
 801b420:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b424:	4618      	mov	r0, r3
 801b426:	f7fd ff29 	bl	801927c <ld_word>
 801b42a:	4603      	mov	r3, r0
 801b42c:	461a      	mov	r2, r3
 801b42e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801b432:	429a      	cmp	r2, r3
 801b434:	d127      	bne.n	801b486 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801b436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b438:	3334      	adds	r3, #52	@ 0x34
 801b43a:	4618      	mov	r0, r3
 801b43c:	f7fd ff36 	bl	80192ac <ld_dword>
 801b440:	4603      	mov	r3, r0
 801b442:	4a1d      	ldr	r2, [pc, #116]	@ (801b4b8 <find_volume+0x490>)
 801b444:	4293      	cmp	r3, r2
 801b446:	d11e      	bne.n	801b486 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801b448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b44a:	3334      	adds	r3, #52	@ 0x34
 801b44c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b450:	4618      	mov	r0, r3
 801b452:	f7fd ff2b 	bl	80192ac <ld_dword>
 801b456:	4603      	mov	r3, r0
 801b458:	4a18      	ldr	r2, [pc, #96]	@ (801b4bc <find_volume+0x494>)
 801b45a:	4293      	cmp	r3, r2
 801b45c:	d113      	bne.n	801b486 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801b45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b460:	3334      	adds	r3, #52	@ 0x34
 801b462:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801b466:	4618      	mov	r0, r3
 801b468:	f7fd ff20 	bl	80192ac <ld_dword>
 801b46c:	4602      	mov	r2, r0
 801b46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b470:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801b472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b474:	3334      	adds	r3, #52	@ 0x34
 801b476:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801b47a:	4618      	mov	r0, r3
 801b47c:	f7fd ff16 	bl	80192ac <ld_dword>
 801b480:	4602      	mov	r2, r0
 801b482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b484:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801b486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b488:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801b48c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801b48e:	4b0c      	ldr	r3, [pc, #48]	@ (801b4c0 <find_volume+0x498>)
 801b490:	881b      	ldrh	r3, [r3, #0]
 801b492:	3301      	adds	r3, #1
 801b494:	b29a      	uxth	r2, r3
 801b496:	4b0a      	ldr	r3, [pc, #40]	@ (801b4c0 <find_volume+0x498>)
 801b498:	801a      	strh	r2, [r3, #0]
 801b49a:	4b09      	ldr	r3, [pc, #36]	@ (801b4c0 <find_volume+0x498>)
 801b49c:	881a      	ldrh	r2, [r3, #0]
 801b49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4a0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801b4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4a4:	4a07      	ldr	r2, [pc, #28]	@ (801b4c4 <find_volume+0x49c>)
 801b4a6:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801b4a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b4aa:	f7fe f92f 	bl	801970c <clear_lock>
#endif
	return FR_OK;
 801b4ae:	2300      	movs	r3, #0
}
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	3758      	adds	r7, #88	@ 0x58
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	bd80      	pop	{r7, pc}
 801b4b8:	41615252 	.word	0x41615252
 801b4bc:	61417272 	.word	0x61417272
 801b4c0:	20001b6c 	.word	0x20001b6c
 801b4c4:	20001b90 	.word	0x20001b90

0801b4c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801b4c8:	b580      	push	{r7, lr}
 801b4ca:	b084      	sub	sp, #16
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	6078      	str	r0, [r7, #4]
 801b4d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801b4d2:	2309      	movs	r3, #9
 801b4d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d01c      	beq.n	801b516 <validate+0x4e>
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d018      	beq.n	801b516 <validate+0x4e>
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	781b      	ldrb	r3, [r3, #0]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d013      	beq.n	801b516 <validate+0x4e>
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	889a      	ldrh	r2, [r3, #4]
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	88db      	ldrh	r3, [r3, #6]
 801b4f8:	429a      	cmp	r2, r3
 801b4fa:	d10c      	bne.n	801b516 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	785b      	ldrb	r3, [r3, #1]
 801b502:	4618      	mov	r0, r3
 801b504:	f7fd fe1a 	bl	801913c <disk_status>
 801b508:	4603      	mov	r3, r0
 801b50a:	f003 0301 	and.w	r3, r3, #1
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d101      	bne.n	801b516 <validate+0x4e>
			res = FR_OK;
 801b512:	2300      	movs	r3, #0
 801b514:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801b516:	7bfb      	ldrb	r3, [r7, #15]
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d102      	bne.n	801b522 <validate+0x5a>
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	e000      	b.n	801b524 <validate+0x5c>
 801b522:	2300      	movs	r3, #0
 801b524:	683a      	ldr	r2, [r7, #0]
 801b526:	6013      	str	r3, [r2, #0]
	return res;
 801b528:	7bfb      	ldrb	r3, [r7, #15]
}
 801b52a:	4618      	mov	r0, r3
 801b52c:	3710      	adds	r7, #16
 801b52e:	46bd      	mov	sp, r7
 801b530:	bd80      	pop	{r7, pc}
	...

0801b534 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801b534:	b580      	push	{r7, lr}
 801b536:	b088      	sub	sp, #32
 801b538:	af00      	add	r7, sp, #0
 801b53a:	60f8      	str	r0, [r7, #12]
 801b53c:	60b9      	str	r1, [r7, #8]
 801b53e:	4613      	mov	r3, r2
 801b540:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801b542:	68bb      	ldr	r3, [r7, #8]
 801b544:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801b546:	f107 0310 	add.w	r3, r7, #16
 801b54a:	4618      	mov	r0, r3
 801b54c:	f7ff fcd1 	bl	801aef2 <get_ldnumber>
 801b550:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801b552:	69fb      	ldr	r3, [r7, #28]
 801b554:	2b00      	cmp	r3, #0
 801b556:	da01      	bge.n	801b55c <f_mount+0x28>
 801b558:	230b      	movs	r3, #11
 801b55a:	e02b      	b.n	801b5b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801b55c:	4a17      	ldr	r2, [pc, #92]	@ (801b5bc <f_mount+0x88>)
 801b55e:	69fb      	ldr	r3, [r7, #28]
 801b560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b564:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801b566:	69bb      	ldr	r3, [r7, #24]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d005      	beq.n	801b578 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801b56c:	69b8      	ldr	r0, [r7, #24]
 801b56e:	f7fe f8cd 	bl	801970c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801b572:	69bb      	ldr	r3, [r7, #24]
 801b574:	2200      	movs	r2, #0
 801b576:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d002      	beq.n	801b584 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	2200      	movs	r2, #0
 801b582:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801b584:	68fa      	ldr	r2, [r7, #12]
 801b586:	490d      	ldr	r1, [pc, #52]	@ (801b5bc <f_mount+0x88>)
 801b588:	69fb      	ldr	r3, [r7, #28]
 801b58a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	2b00      	cmp	r3, #0
 801b592:	d002      	beq.n	801b59a <f_mount+0x66>
 801b594:	79fb      	ldrb	r3, [r7, #7]
 801b596:	2b01      	cmp	r3, #1
 801b598:	d001      	beq.n	801b59e <f_mount+0x6a>
 801b59a:	2300      	movs	r3, #0
 801b59c:	e00a      	b.n	801b5b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801b59e:	f107 010c 	add.w	r1, r7, #12
 801b5a2:	f107 0308 	add.w	r3, r7, #8
 801b5a6:	2200      	movs	r2, #0
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f7ff fd3d 	bl	801b028 <find_volume>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801b5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	3720      	adds	r7, #32
 801b5b8:	46bd      	mov	sp, r7
 801b5ba:	bd80      	pop	{r7, pc}
 801b5bc:	20001b68 	.word	0x20001b68

0801b5c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801b5c0:	b580      	push	{r7, lr}
 801b5c2:	b09a      	sub	sp, #104	@ 0x68
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	60f8      	str	r0, [r7, #12]
 801b5c8:	60b9      	str	r1, [r7, #8]
 801b5ca:	4613      	mov	r3, r2
 801b5cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d101      	bne.n	801b5d8 <f_open+0x18>
 801b5d4:	2309      	movs	r3, #9
 801b5d6:	e1a9      	b.n	801b92c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801b5d8:	79fb      	ldrb	r3, [r7, #7]
 801b5da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b5de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801b5e0:	79fa      	ldrb	r2, [r7, #7]
 801b5e2:	f107 0114 	add.w	r1, r7, #20
 801b5e6:	f107 0308 	add.w	r3, r7, #8
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f7ff fd1c 	bl	801b028 <find_volume>
 801b5f0:	4603      	mov	r3, r0
 801b5f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801b5f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	f040 818d 	bne.w	801b91a <f_open+0x35a>
		dj.obj.fs = fs;
 801b600:	697b      	ldr	r3, [r7, #20]
 801b602:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801b604:	68ba      	ldr	r2, [r7, #8]
 801b606:	f107 0318 	add.w	r3, r7, #24
 801b60a:	4611      	mov	r1, r2
 801b60c:	4618      	mov	r0, r3
 801b60e:	f7ff fbff 	bl	801ae10 <follow_path>
 801b612:	4603      	mov	r3, r0
 801b614:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801b618:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d118      	bne.n	801b652 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801b620:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b624:	b25b      	sxtb	r3, r3
 801b626:	2b00      	cmp	r3, #0
 801b628:	da03      	bge.n	801b632 <f_open+0x72>
				res = FR_INVALID_NAME;
 801b62a:	2306      	movs	r3, #6
 801b62c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b630:	e00f      	b.n	801b652 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b632:	79fb      	ldrb	r3, [r7, #7]
 801b634:	2b01      	cmp	r3, #1
 801b636:	bf8c      	ite	hi
 801b638:	2301      	movhi	r3, #1
 801b63a:	2300      	movls	r3, #0
 801b63c:	b2db      	uxtb	r3, r3
 801b63e:	461a      	mov	r2, r3
 801b640:	f107 0318 	add.w	r3, r7, #24
 801b644:	4611      	mov	r1, r2
 801b646:	4618      	mov	r0, r3
 801b648:	f7fd ff18 	bl	801947c <chk_lock>
 801b64c:	4603      	mov	r3, r0
 801b64e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801b652:	79fb      	ldrb	r3, [r7, #7]
 801b654:	f003 031c 	and.w	r3, r3, #28
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d07f      	beq.n	801b75c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801b65c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b660:	2b00      	cmp	r3, #0
 801b662:	d017      	beq.n	801b694 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801b664:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b668:	2b04      	cmp	r3, #4
 801b66a:	d10e      	bne.n	801b68a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801b66c:	f7fd ff62 	bl	8019534 <enq_lock>
 801b670:	4603      	mov	r3, r0
 801b672:	2b00      	cmp	r3, #0
 801b674:	d006      	beq.n	801b684 <f_open+0xc4>
 801b676:	f107 0318 	add.w	r3, r7, #24
 801b67a:	4618      	mov	r0, r3
 801b67c:	f7ff f83a 	bl	801a6f4 <dir_register>
 801b680:	4603      	mov	r3, r0
 801b682:	e000      	b.n	801b686 <f_open+0xc6>
 801b684:	2312      	movs	r3, #18
 801b686:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801b68a:	79fb      	ldrb	r3, [r7, #7]
 801b68c:	f043 0308 	orr.w	r3, r3, #8
 801b690:	71fb      	strb	r3, [r7, #7]
 801b692:	e010      	b.n	801b6b6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801b694:	7fbb      	ldrb	r3, [r7, #30]
 801b696:	f003 0311 	and.w	r3, r3, #17
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d003      	beq.n	801b6a6 <f_open+0xe6>
					res = FR_DENIED;
 801b69e:	2307      	movs	r3, #7
 801b6a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b6a4:	e007      	b.n	801b6b6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801b6a6:	79fb      	ldrb	r3, [r7, #7]
 801b6a8:	f003 0304 	and.w	r3, r3, #4
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d002      	beq.n	801b6b6 <f_open+0xf6>
 801b6b0:	2308      	movs	r3, #8
 801b6b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801b6b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d168      	bne.n	801b790 <f_open+0x1d0>
 801b6be:	79fb      	ldrb	r3, [r7, #7]
 801b6c0:	f003 0308 	and.w	r3, r3, #8
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d063      	beq.n	801b790 <f_open+0x1d0>
				dw = GET_FATTIME();
 801b6c8:	f7f8 f916 	bl	80138f8 <get_fattime>
 801b6cc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801b6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6d0:	330e      	adds	r3, #14
 801b6d2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b6d4:	4618      	mov	r0, r3
 801b6d6:	f7fd fe27 	bl	8019328 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801b6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6dc:	3316      	adds	r3, #22
 801b6de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b6e0:	4618      	mov	r0, r3
 801b6e2:	f7fd fe21 	bl	8019328 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801b6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6e8:	330b      	adds	r3, #11
 801b6ea:	2220      	movs	r2, #32
 801b6ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801b6ee:	697b      	ldr	r3, [r7, #20]
 801b6f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b6f2:	4611      	mov	r1, r2
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	f7fe fd75 	bl	801a1e4 <ld_clust>
 801b6fa:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801b6fc:	697b      	ldr	r3, [r7, #20]
 801b6fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b700:	2200      	movs	r2, #0
 801b702:	4618      	mov	r0, r3
 801b704:	f7fe fd8d 	bl	801a222 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801b708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b70a:	331c      	adds	r3, #28
 801b70c:	2100      	movs	r1, #0
 801b70e:	4618      	mov	r0, r3
 801b710:	f7fd fe0a 	bl	8019328 <st_dword>
					fs->wflag = 1;
 801b714:	697b      	ldr	r3, [r7, #20]
 801b716:	2201      	movs	r2, #1
 801b718:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801b71a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d037      	beq.n	801b790 <f_open+0x1d0>
						dw = fs->winsect;
 801b720:	697b      	ldr	r3, [r7, #20]
 801b722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b724:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801b726:	f107 0318 	add.w	r3, r7, #24
 801b72a:	2200      	movs	r2, #0
 801b72c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b72e:	4618      	mov	r0, r3
 801b730:	f7fe faa0 	bl	8019c74 <remove_chain>
 801b734:	4603      	mov	r3, r0
 801b736:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801b73a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d126      	bne.n	801b790 <f_open+0x1d0>
							res = move_window(fs, dw);
 801b742:	697b      	ldr	r3, [r7, #20]
 801b744:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b746:	4618      	mov	r0, r3
 801b748:	f7fe f848 	bl	80197dc <move_window>
 801b74c:	4603      	mov	r3, r0
 801b74e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801b752:	697b      	ldr	r3, [r7, #20]
 801b754:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b756:	3a01      	subs	r2, #1
 801b758:	611a      	str	r2, [r3, #16]
 801b75a:	e019      	b.n	801b790 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801b75c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b760:	2b00      	cmp	r3, #0
 801b762:	d115      	bne.n	801b790 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801b764:	7fbb      	ldrb	r3, [r7, #30]
 801b766:	f003 0310 	and.w	r3, r3, #16
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d003      	beq.n	801b776 <f_open+0x1b6>
					res = FR_NO_FILE;
 801b76e:	2304      	movs	r3, #4
 801b770:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b774:	e00c      	b.n	801b790 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801b776:	79fb      	ldrb	r3, [r7, #7]
 801b778:	f003 0302 	and.w	r3, r3, #2
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d007      	beq.n	801b790 <f_open+0x1d0>
 801b780:	7fbb      	ldrb	r3, [r7, #30]
 801b782:	f003 0301 	and.w	r3, r3, #1
 801b786:	2b00      	cmp	r3, #0
 801b788:	d002      	beq.n	801b790 <f_open+0x1d0>
						res = FR_DENIED;
 801b78a:	2307      	movs	r3, #7
 801b78c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801b790:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b794:	2b00      	cmp	r3, #0
 801b796:	d126      	bne.n	801b7e6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801b798:	79fb      	ldrb	r3, [r7, #7]
 801b79a:	f003 0308 	and.w	r3, r3, #8
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d003      	beq.n	801b7aa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801b7a2:	79fb      	ldrb	r3, [r7, #7]
 801b7a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b7a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801b7aa:	697b      	ldr	r3, [r7, #20]
 801b7ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b7ae:	68fb      	ldr	r3, [r7, #12]
 801b7b0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801b7b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b7b4:	68fb      	ldr	r3, [r7, #12]
 801b7b6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b7b8:	79fb      	ldrb	r3, [r7, #7]
 801b7ba:	2b01      	cmp	r3, #1
 801b7bc:	bf8c      	ite	hi
 801b7be:	2301      	movhi	r3, #1
 801b7c0:	2300      	movls	r3, #0
 801b7c2:	b2db      	uxtb	r3, r3
 801b7c4:	461a      	mov	r2, r3
 801b7c6:	f107 0318 	add.w	r3, r7, #24
 801b7ca:	4611      	mov	r1, r2
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	f7fd fed3 	bl	8019578 <inc_lock>
 801b7d2:	4602      	mov	r2, r0
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801b7d8:	68fb      	ldr	r3, [r7, #12]
 801b7da:	691b      	ldr	r3, [r3, #16]
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d102      	bne.n	801b7e6 <f_open+0x226>
 801b7e0:	2302      	movs	r3, #2
 801b7e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801b7e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	f040 8095 	bne.w	801b91a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801b7f0:	697b      	ldr	r3, [r7, #20]
 801b7f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b7f4:	4611      	mov	r1, r2
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	f7fe fcf4 	bl	801a1e4 <ld_clust>
 801b7fc:	4602      	mov	r2, r0
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801b802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b804:	331c      	adds	r3, #28
 801b806:	4618      	mov	r0, r3
 801b808:	f7fd fd50 	bl	80192ac <ld_dword>
 801b80c:	4602      	mov	r2, r0
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	2200      	movs	r2, #0
 801b816:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801b818:	697a      	ldr	r2, [r7, #20]
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801b81e:	697b      	ldr	r3, [r7, #20]
 801b820:	88da      	ldrh	r2, [r3, #6]
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	79fa      	ldrb	r2, [r7, #7]
 801b82a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	2200      	movs	r2, #0
 801b830:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	2200      	movs	r2, #0
 801b836:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	2200      	movs	r2, #0
 801b83c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	3330      	adds	r3, #48	@ 0x30
 801b842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b846:	2100      	movs	r1, #0
 801b848:	4618      	mov	r0, r3
 801b84a:	f7fd fdba 	bl	80193c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801b84e:	79fb      	ldrb	r3, [r7, #7]
 801b850:	f003 0320 	and.w	r3, r3, #32
 801b854:	2b00      	cmp	r3, #0
 801b856:	d060      	beq.n	801b91a <f_open+0x35a>
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	68db      	ldr	r3, [r3, #12]
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d05c      	beq.n	801b91a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	68da      	ldr	r2, [r3, #12]
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801b868:	697b      	ldr	r3, [r7, #20]
 801b86a:	895b      	ldrh	r3, [r3, #10]
 801b86c:	025b      	lsls	r3, r3, #9
 801b86e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	689b      	ldr	r3, [r3, #8]
 801b874:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	68db      	ldr	r3, [r3, #12]
 801b87a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b87c:	e016      	b.n	801b8ac <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b882:	4618      	mov	r0, r3
 801b884:	f7fe f865 	bl	8019952 <get_fat>
 801b888:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801b88a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b88c:	2b01      	cmp	r3, #1
 801b88e:	d802      	bhi.n	801b896 <f_open+0x2d6>
 801b890:	2302      	movs	r3, #2
 801b892:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801b896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b89c:	d102      	bne.n	801b8a4 <f_open+0x2e4>
 801b89e:	2301      	movs	r3, #1
 801b8a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b8a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b8a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b8a8:	1ad3      	subs	r3, r2, r3
 801b8aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b8ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d103      	bne.n	801b8bc <f_open+0x2fc>
 801b8b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b8b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b8b8:	429a      	cmp	r2, r3
 801b8ba:	d8e0      	bhi.n	801b87e <f_open+0x2be>
				}
				fp->clust = clst;
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b8c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801b8c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d127      	bne.n	801b91a <f_open+0x35a>
 801b8ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d022      	beq.n	801b91a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801b8d4:	697b      	ldr	r3, [r7, #20]
 801b8d6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b8d8:	4618      	mov	r0, r3
 801b8da:	f7fe f81b 	bl	8019914 <clust2sect>
 801b8de:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801b8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d103      	bne.n	801b8ee <f_open+0x32e>
						res = FR_INT_ERR;
 801b8e6:	2302      	movs	r3, #2
 801b8e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b8ec:	e015      	b.n	801b91a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801b8ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8f0:	0a5a      	lsrs	r2, r3, #9
 801b8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b8f4:	441a      	add	r2, r3
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801b8fa:	697b      	ldr	r3, [r7, #20]
 801b8fc:	7858      	ldrb	r0, [r3, #1]
 801b8fe:	68fb      	ldr	r3, [r7, #12]
 801b900:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	6a1a      	ldr	r2, [r3, #32]
 801b908:	2301      	movs	r3, #1
 801b90a:	f7fd fc59 	bl	80191c0 <disk_read>
 801b90e:	4603      	mov	r3, r0
 801b910:	2b00      	cmp	r3, #0
 801b912:	d002      	beq.n	801b91a <f_open+0x35a>
 801b914:	2301      	movs	r3, #1
 801b916:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801b91a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d002      	beq.n	801b928 <f_open+0x368>
 801b922:	68fb      	ldr	r3, [r7, #12]
 801b924:	2200      	movs	r2, #0
 801b926:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801b928:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801b92c:	4618      	mov	r0, r3
 801b92e:	3768      	adds	r7, #104	@ 0x68
 801b930:	46bd      	mov	sp, r7
 801b932:	bd80      	pop	{r7, pc}

0801b934 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801b934:	b580      	push	{r7, lr}
 801b936:	b08c      	sub	sp, #48	@ 0x30
 801b938:	af00      	add	r7, sp, #0
 801b93a:	60f8      	str	r0, [r7, #12]
 801b93c:	60b9      	str	r1, [r7, #8]
 801b93e:	607a      	str	r2, [r7, #4]
 801b940:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801b942:	68bb      	ldr	r3, [r7, #8]
 801b944:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801b946:	683b      	ldr	r3, [r7, #0]
 801b948:	2200      	movs	r2, #0
 801b94a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801b94c:	68fb      	ldr	r3, [r7, #12]
 801b94e:	f107 0210 	add.w	r2, r7, #16
 801b952:	4611      	mov	r1, r2
 801b954:	4618      	mov	r0, r3
 801b956:	f7ff fdb7 	bl	801b4c8 <validate>
 801b95a:	4603      	mov	r3, r0
 801b95c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801b960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b964:	2b00      	cmp	r3, #0
 801b966:	d107      	bne.n	801b978 <f_write+0x44>
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	7d5b      	ldrb	r3, [r3, #21]
 801b96c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801b970:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b974:	2b00      	cmp	r3, #0
 801b976:	d002      	beq.n	801b97e <f_write+0x4a>
 801b978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b97c:	e14b      	b.n	801bc16 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	7d1b      	ldrb	r3, [r3, #20]
 801b982:	f003 0302 	and.w	r3, r3, #2
 801b986:	2b00      	cmp	r3, #0
 801b988:	d101      	bne.n	801b98e <f_write+0x5a>
 801b98a:	2307      	movs	r3, #7
 801b98c:	e143      	b.n	801bc16 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801b98e:	68fb      	ldr	r3, [r7, #12]
 801b990:	699a      	ldr	r2, [r3, #24]
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	441a      	add	r2, r3
 801b996:	68fb      	ldr	r3, [r7, #12]
 801b998:	699b      	ldr	r3, [r3, #24]
 801b99a:	429a      	cmp	r2, r3
 801b99c:	f080 812d 	bcs.w	801bbfa <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	699b      	ldr	r3, [r3, #24]
 801b9a4:	43db      	mvns	r3, r3
 801b9a6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801b9a8:	e127      	b.n	801bbfa <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801b9aa:	68fb      	ldr	r3, [r7, #12]
 801b9ac:	699b      	ldr	r3, [r3, #24]
 801b9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	f040 80e3 	bne.w	801bb7e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	699b      	ldr	r3, [r3, #24]
 801b9bc:	0a5b      	lsrs	r3, r3, #9
 801b9be:	693a      	ldr	r2, [r7, #16]
 801b9c0:	8952      	ldrh	r2, [r2, #10]
 801b9c2:	3a01      	subs	r2, #1
 801b9c4:	4013      	ands	r3, r2
 801b9c6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801b9c8:	69bb      	ldr	r3, [r7, #24]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d143      	bne.n	801ba56 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	699b      	ldr	r3, [r3, #24]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d10c      	bne.n	801b9f0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	689b      	ldr	r3, [r3, #8]
 801b9da:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801b9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d11a      	bne.n	801ba18 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801b9e2:	68fb      	ldr	r3, [r7, #12]
 801b9e4:	2100      	movs	r1, #0
 801b9e6:	4618      	mov	r0, r3
 801b9e8:	f7fe f9a9 	bl	8019d3e <create_chain>
 801b9ec:	62b8      	str	r0, [r7, #40]	@ 0x28
 801b9ee:	e013      	b.n	801ba18 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d007      	beq.n	801ba08 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	699b      	ldr	r3, [r3, #24]
 801b9fc:	4619      	mov	r1, r3
 801b9fe:	68f8      	ldr	r0, [r7, #12]
 801ba00:	f7fe fa35 	bl	8019e6e <clmt_clust>
 801ba04:	62b8      	str	r0, [r7, #40]	@ 0x28
 801ba06:	e007      	b.n	801ba18 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801ba08:	68fa      	ldr	r2, [r7, #12]
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	69db      	ldr	r3, [r3, #28]
 801ba0e:	4619      	mov	r1, r3
 801ba10:	4610      	mov	r0, r2
 801ba12:	f7fe f994 	bl	8019d3e <create_chain>
 801ba16:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801ba18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	f000 80f2 	beq.w	801bc04 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801ba20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba22:	2b01      	cmp	r3, #1
 801ba24:	d104      	bne.n	801ba30 <f_write+0xfc>
 801ba26:	68fb      	ldr	r3, [r7, #12]
 801ba28:	2202      	movs	r2, #2
 801ba2a:	755a      	strb	r2, [r3, #21]
 801ba2c:	2302      	movs	r3, #2
 801ba2e:	e0f2      	b.n	801bc16 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ba30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba36:	d104      	bne.n	801ba42 <f_write+0x10e>
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	2201      	movs	r2, #1
 801ba3c:	755a      	strb	r2, [r3, #21]
 801ba3e:	2301      	movs	r3, #1
 801ba40:	e0e9      	b.n	801bc16 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba46:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	689b      	ldr	r3, [r3, #8]
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d102      	bne.n	801ba56 <f_write+0x122>
 801ba50:	68fb      	ldr	r3, [r7, #12]
 801ba52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba54:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	7d1b      	ldrb	r3, [r3, #20]
 801ba5a:	b25b      	sxtb	r3, r3
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	da18      	bge.n	801ba92 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ba60:	693b      	ldr	r3, [r7, #16]
 801ba62:	7858      	ldrb	r0, [r3, #1]
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	6a1a      	ldr	r2, [r3, #32]
 801ba6e:	2301      	movs	r3, #1
 801ba70:	f7fd fbc6 	bl	8019200 <disk_write>
 801ba74:	4603      	mov	r3, r0
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d004      	beq.n	801ba84 <f_write+0x150>
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	2201      	movs	r2, #1
 801ba7e:	755a      	strb	r2, [r3, #21]
 801ba80:	2301      	movs	r3, #1
 801ba82:	e0c8      	b.n	801bc16 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	7d1b      	ldrb	r3, [r3, #20]
 801ba88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ba8c:	b2da      	uxtb	r2, r3
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801ba92:	693a      	ldr	r2, [r7, #16]
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	69db      	ldr	r3, [r3, #28]
 801ba98:	4619      	mov	r1, r3
 801ba9a:	4610      	mov	r0, r2
 801ba9c:	f7fd ff3a 	bl	8019914 <clust2sect>
 801baa0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801baa2:	697b      	ldr	r3, [r7, #20]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d104      	bne.n	801bab2 <f_write+0x17e>
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	2202      	movs	r2, #2
 801baac:	755a      	strb	r2, [r3, #21]
 801baae:	2302      	movs	r3, #2
 801bab0:	e0b1      	b.n	801bc16 <f_write+0x2e2>
			sect += csect;
 801bab2:	697a      	ldr	r2, [r7, #20]
 801bab4:	69bb      	ldr	r3, [r7, #24]
 801bab6:	4413      	add	r3, r2
 801bab8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	0a5b      	lsrs	r3, r3, #9
 801babe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801bac0:	6a3b      	ldr	r3, [r7, #32]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d03c      	beq.n	801bb40 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801bac6:	69ba      	ldr	r2, [r7, #24]
 801bac8:	6a3b      	ldr	r3, [r7, #32]
 801baca:	4413      	add	r3, r2
 801bacc:	693a      	ldr	r2, [r7, #16]
 801bace:	8952      	ldrh	r2, [r2, #10]
 801bad0:	4293      	cmp	r3, r2
 801bad2:	d905      	bls.n	801bae0 <f_write+0x1ac>
					cc = fs->csize - csect;
 801bad4:	693b      	ldr	r3, [r7, #16]
 801bad6:	895b      	ldrh	r3, [r3, #10]
 801bad8:	461a      	mov	r2, r3
 801bada:	69bb      	ldr	r3, [r7, #24]
 801badc:	1ad3      	subs	r3, r2, r3
 801bade:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801bae0:	693b      	ldr	r3, [r7, #16]
 801bae2:	7858      	ldrb	r0, [r3, #1]
 801bae4:	6a3b      	ldr	r3, [r7, #32]
 801bae6:	697a      	ldr	r2, [r7, #20]
 801bae8:	69f9      	ldr	r1, [r7, #28]
 801baea:	f7fd fb89 	bl	8019200 <disk_write>
 801baee:	4603      	mov	r3, r0
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d004      	beq.n	801bafe <f_write+0x1ca>
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	2201      	movs	r2, #1
 801baf8:	755a      	strb	r2, [r3, #21]
 801bafa:	2301      	movs	r3, #1
 801bafc:	e08b      	b.n	801bc16 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801bafe:	68fb      	ldr	r3, [r7, #12]
 801bb00:	6a1a      	ldr	r2, [r3, #32]
 801bb02:	697b      	ldr	r3, [r7, #20]
 801bb04:	1ad3      	subs	r3, r2, r3
 801bb06:	6a3a      	ldr	r2, [r7, #32]
 801bb08:	429a      	cmp	r2, r3
 801bb0a:	d915      	bls.n	801bb38 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801bb12:	68fb      	ldr	r3, [r7, #12]
 801bb14:	6a1a      	ldr	r2, [r3, #32]
 801bb16:	697b      	ldr	r3, [r7, #20]
 801bb18:	1ad3      	subs	r3, r2, r3
 801bb1a:	025b      	lsls	r3, r3, #9
 801bb1c:	69fa      	ldr	r2, [r7, #28]
 801bb1e:	4413      	add	r3, r2
 801bb20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801bb24:	4619      	mov	r1, r3
 801bb26:	f7fd fc2b 	bl	8019380 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801bb2a:	68fb      	ldr	r3, [r7, #12]
 801bb2c:	7d1b      	ldrb	r3, [r3, #20]
 801bb2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bb32:	b2da      	uxtb	r2, r3
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801bb38:	6a3b      	ldr	r3, [r7, #32]
 801bb3a:	025b      	lsls	r3, r3, #9
 801bb3c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801bb3e:	e03f      	b.n	801bbc0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	6a1b      	ldr	r3, [r3, #32]
 801bb44:	697a      	ldr	r2, [r7, #20]
 801bb46:	429a      	cmp	r2, r3
 801bb48:	d016      	beq.n	801bb78 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	699a      	ldr	r2, [r3, #24]
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801bb52:	429a      	cmp	r2, r3
 801bb54:	d210      	bcs.n	801bb78 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801bb56:	693b      	ldr	r3, [r7, #16]
 801bb58:	7858      	ldrb	r0, [r3, #1]
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bb60:	2301      	movs	r3, #1
 801bb62:	697a      	ldr	r2, [r7, #20]
 801bb64:	f7fd fb2c 	bl	80191c0 <disk_read>
 801bb68:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d004      	beq.n	801bb78 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	2201      	movs	r2, #1
 801bb72:	755a      	strb	r2, [r3, #21]
 801bb74:	2301      	movs	r3, #1
 801bb76:	e04e      	b.n	801bc16 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	697a      	ldr	r2, [r7, #20]
 801bb7c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	699b      	ldr	r3, [r3, #24]
 801bb82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb86:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801bb8a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801bb8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	429a      	cmp	r2, r3
 801bb92:	d901      	bls.n	801bb98 <f_write+0x264>
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bb9e:	68fb      	ldr	r3, [r7, #12]
 801bba0:	699b      	ldr	r3, [r3, #24]
 801bba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bba6:	4413      	add	r3, r2
 801bba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bbaa:	69f9      	ldr	r1, [r7, #28]
 801bbac:	4618      	mov	r0, r3
 801bbae:	f7fd fbe7 	bl	8019380 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	7d1b      	ldrb	r3, [r3, #20]
 801bbb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801bbba:	b2da      	uxtb	r2, r3
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801bbc0:	69fa      	ldr	r2, [r7, #28]
 801bbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbc4:	4413      	add	r3, r2
 801bbc6:	61fb      	str	r3, [r7, #28]
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	699a      	ldr	r2, [r3, #24]
 801bbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbce:	441a      	add	r2, r3
 801bbd0:	68fb      	ldr	r3, [r7, #12]
 801bbd2:	619a      	str	r2, [r3, #24]
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	68da      	ldr	r2, [r3, #12]
 801bbd8:	68fb      	ldr	r3, [r7, #12]
 801bbda:	699b      	ldr	r3, [r3, #24]
 801bbdc:	429a      	cmp	r2, r3
 801bbde:	bf38      	it	cc
 801bbe0:	461a      	movcc	r2, r3
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	60da      	str	r2, [r3, #12]
 801bbe6:	683b      	ldr	r3, [r7, #0]
 801bbe8:	681a      	ldr	r2, [r3, #0]
 801bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbec:	441a      	add	r2, r3
 801bbee:	683b      	ldr	r3, [r7, #0]
 801bbf0:	601a      	str	r2, [r3, #0]
 801bbf2:	687a      	ldr	r2, [r7, #4]
 801bbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbf6:	1ad3      	subs	r3, r2, r3
 801bbf8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	f47f aed4 	bne.w	801b9aa <f_write+0x76>
 801bc02:	e000      	b.n	801bc06 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801bc04:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	7d1b      	ldrb	r3, [r3, #20]
 801bc0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc0e:	b2da      	uxtb	r2, r3
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801bc14:	2300      	movs	r3, #0
}
 801bc16:	4618      	mov	r0, r3
 801bc18:	3730      	adds	r7, #48	@ 0x30
 801bc1a:	46bd      	mov	sp, r7
 801bc1c:	bd80      	pop	{r7, pc}

0801bc1e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801bc1e:	b580      	push	{r7, lr}
 801bc20:	b086      	sub	sp, #24
 801bc22:	af00      	add	r7, sp, #0
 801bc24:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	f107 0208 	add.w	r2, r7, #8
 801bc2c:	4611      	mov	r1, r2
 801bc2e:	4618      	mov	r0, r3
 801bc30:	f7ff fc4a 	bl	801b4c8 <validate>
 801bc34:	4603      	mov	r3, r0
 801bc36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bc38:	7dfb      	ldrb	r3, [r7, #23]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d168      	bne.n	801bd10 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	7d1b      	ldrb	r3, [r3, #20]
 801bc42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d062      	beq.n	801bd10 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	7d1b      	ldrb	r3, [r3, #20]
 801bc4e:	b25b      	sxtb	r3, r3
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	da15      	bge.n	801bc80 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801bc54:	68bb      	ldr	r3, [r7, #8]
 801bc56:	7858      	ldrb	r0, [r3, #1]
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	6a1a      	ldr	r2, [r3, #32]
 801bc62:	2301      	movs	r3, #1
 801bc64:	f7fd facc 	bl	8019200 <disk_write>
 801bc68:	4603      	mov	r3, r0
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d001      	beq.n	801bc72 <f_sync+0x54>
 801bc6e:	2301      	movs	r3, #1
 801bc70:	e04f      	b.n	801bd12 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	7d1b      	ldrb	r3, [r3, #20]
 801bc76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bc7a:	b2da      	uxtb	r2, r3
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801bc80:	f7f7 fe3a 	bl	80138f8 <get_fattime>
 801bc84:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801bc86:	68ba      	ldr	r2, [r7, #8]
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc8c:	4619      	mov	r1, r3
 801bc8e:	4610      	mov	r0, r2
 801bc90:	f7fd fda4 	bl	80197dc <move_window>
 801bc94:	4603      	mov	r3, r0
 801bc96:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801bc98:	7dfb      	ldrb	r3, [r7, #23]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d138      	bne.n	801bd10 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bca2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	330b      	adds	r3, #11
 801bca8:	781a      	ldrb	r2, [r3, #0]
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	330b      	adds	r3, #11
 801bcae:	f042 0220 	orr.w	r2, r2, #32
 801bcb2:	b2d2      	uxtb	r2, r2
 801bcb4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	6818      	ldr	r0, [r3, #0]
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	689b      	ldr	r3, [r3, #8]
 801bcbe:	461a      	mov	r2, r3
 801bcc0:	68f9      	ldr	r1, [r7, #12]
 801bcc2:	f7fe faae 	bl	801a222 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	f103 021c 	add.w	r2, r3, #28
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	68db      	ldr	r3, [r3, #12]
 801bcd0:	4619      	mov	r1, r3
 801bcd2:	4610      	mov	r0, r2
 801bcd4:	f7fd fb28 	bl	8019328 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801bcd8:	68fb      	ldr	r3, [r7, #12]
 801bcda:	3316      	adds	r3, #22
 801bcdc:	6939      	ldr	r1, [r7, #16]
 801bcde:	4618      	mov	r0, r3
 801bce0:	f7fd fb22 	bl	8019328 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	3312      	adds	r3, #18
 801bce8:	2100      	movs	r1, #0
 801bcea:	4618      	mov	r0, r3
 801bcec:	f7fd fb01 	bl	80192f2 <st_word>
					fs->wflag = 1;
 801bcf0:	68bb      	ldr	r3, [r7, #8]
 801bcf2:	2201      	movs	r2, #1
 801bcf4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801bcf6:	68bb      	ldr	r3, [r7, #8]
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f7fd fd9d 	bl	8019838 <sync_fs>
 801bcfe:	4603      	mov	r3, r0
 801bd00:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	7d1b      	ldrb	r3, [r3, #20]
 801bd06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bd0a:	b2da      	uxtb	r2, r3
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801bd10:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd12:	4618      	mov	r0, r3
 801bd14:	3718      	adds	r7, #24
 801bd16:	46bd      	mov	sp, r7
 801bd18:	bd80      	pop	{r7, pc}

0801bd1a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801bd1a:	b580      	push	{r7, lr}
 801bd1c:	b084      	sub	sp, #16
 801bd1e:	af00      	add	r7, sp, #0
 801bd20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801bd22:	6878      	ldr	r0, [r7, #4]
 801bd24:	f7ff ff7b 	bl	801bc1e <f_sync>
 801bd28:	4603      	mov	r3, r0
 801bd2a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801bd2c:	7bfb      	ldrb	r3, [r7, #15]
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d118      	bne.n	801bd64 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	f107 0208 	add.w	r2, r7, #8
 801bd38:	4611      	mov	r1, r2
 801bd3a:	4618      	mov	r0, r3
 801bd3c:	f7ff fbc4 	bl	801b4c8 <validate>
 801bd40:	4603      	mov	r3, r0
 801bd42:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801bd44:	7bfb      	ldrb	r3, [r7, #15]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d10c      	bne.n	801bd64 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	691b      	ldr	r3, [r3, #16]
 801bd4e:	4618      	mov	r0, r3
 801bd50:	f7fd fca0 	bl	8019694 <dec_lock>
 801bd54:	4603      	mov	r3, r0
 801bd56:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801bd58:	7bfb      	ldrb	r3, [r7, #15]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d102      	bne.n	801bd64 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	2200      	movs	r2, #0
 801bd62:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801bd64:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd66:	4618      	mov	r0, r3
 801bd68:	3710      	adds	r7, #16
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	bd80      	pop	{r7, pc}

0801bd6e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801bd6e:	b580      	push	{r7, lr}
 801bd70:	b090      	sub	sp, #64	@ 0x40
 801bd72:	af00      	add	r7, sp, #0
 801bd74:	6078      	str	r0, [r7, #4]
 801bd76:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801bd78:	f107 0108 	add.w	r1, r7, #8
 801bd7c:	1d3b      	adds	r3, r7, #4
 801bd7e:	2200      	movs	r2, #0
 801bd80:	4618      	mov	r0, r3
 801bd82:	f7ff f951 	bl	801b028 <find_volume>
 801bd86:	4603      	mov	r3, r0
 801bd88:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801bd8c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d11f      	bne.n	801bdd4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801bd94:	687a      	ldr	r2, [r7, #4]
 801bd96:	f107 0308 	add.w	r3, r7, #8
 801bd9a:	4611      	mov	r1, r2
 801bd9c:	4618      	mov	r0, r3
 801bd9e:	f7ff f837 	bl	801ae10 <follow_path>
 801bda2:	4603      	mov	r3, r0
 801bda4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801bda8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d111      	bne.n	801bdd4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801bdb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bdb4:	b25b      	sxtb	r3, r3
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	da03      	bge.n	801bdc2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801bdba:	2306      	movs	r3, #6
 801bdbc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801bdc0:	e008      	b.n	801bdd4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801bdc2:	683b      	ldr	r3, [r7, #0]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d005      	beq.n	801bdd4 <f_stat+0x66>
 801bdc8:	f107 0308 	add.w	r3, r7, #8
 801bdcc:	6839      	ldr	r1, [r7, #0]
 801bdce:	4618      	mov	r0, r3
 801bdd0:	f7fe fd88 	bl	801a8e4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801bdd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801bdd8:	4618      	mov	r0, r3
 801bdda:	3740      	adds	r7, #64	@ 0x40
 801bddc:	46bd      	mov	sp, r7
 801bdde:	bd80      	pop	{r7, pc}

0801bde0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801bde0:	b480      	push	{r7}
 801bde2:	b087      	sub	sp, #28
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	60f8      	str	r0, [r7, #12]
 801bde8:	60b9      	str	r1, [r7, #8]
 801bdea:	4613      	mov	r3, r2
 801bdec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801bdee:	2301      	movs	r3, #1
 801bdf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801bdf2:	2300      	movs	r3, #0
 801bdf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801bdf6:	4b1f      	ldr	r3, [pc, #124]	@ (801be74 <FATFS_LinkDriverEx+0x94>)
 801bdf8:	7a5b      	ldrb	r3, [r3, #9]
 801bdfa:	b2db      	uxtb	r3, r3
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d131      	bne.n	801be64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801be00:	4b1c      	ldr	r3, [pc, #112]	@ (801be74 <FATFS_LinkDriverEx+0x94>)
 801be02:	7a5b      	ldrb	r3, [r3, #9]
 801be04:	b2db      	uxtb	r3, r3
 801be06:	461a      	mov	r2, r3
 801be08:	4b1a      	ldr	r3, [pc, #104]	@ (801be74 <FATFS_LinkDriverEx+0x94>)
 801be0a:	2100      	movs	r1, #0
 801be0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801be0e:	4b19      	ldr	r3, [pc, #100]	@ (801be74 <FATFS_LinkDriverEx+0x94>)
 801be10:	7a5b      	ldrb	r3, [r3, #9]
 801be12:	b2db      	uxtb	r3, r3
 801be14:	4a17      	ldr	r2, [pc, #92]	@ (801be74 <FATFS_LinkDriverEx+0x94>)
 801be16:	009b      	lsls	r3, r3, #2
 801be18:	4413      	add	r3, r2
 801be1a:	68fa      	ldr	r2, [r7, #12]
 801be1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801be1e:	4b15      	ldr	r3, [pc, #84]	@ (801be74 <FATFS_LinkDriverEx+0x94>)
 801be20:	7a5b      	ldrb	r3, [r3, #9]
 801be22:	b2db      	uxtb	r3, r3
 801be24:	461a      	mov	r2, r3
 801be26:	4b13      	ldr	r3, [pc, #76]	@ (801be74 <FATFS_LinkDriverEx+0x94>)
 801be28:	4413      	add	r3, r2
 801be2a:	79fa      	ldrb	r2, [r7, #7]
 801be2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801be2e:	4b11      	ldr	r3, [pc, #68]	@ (801be74 <FATFS_LinkDriverEx+0x94>)
 801be30:	7a5b      	ldrb	r3, [r3, #9]
 801be32:	b2db      	uxtb	r3, r3
 801be34:	1c5a      	adds	r2, r3, #1
 801be36:	b2d1      	uxtb	r1, r2
 801be38:	4a0e      	ldr	r2, [pc, #56]	@ (801be74 <FATFS_LinkDriverEx+0x94>)
 801be3a:	7251      	strb	r1, [r2, #9]
 801be3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801be3e:	7dbb      	ldrb	r3, [r7, #22]
 801be40:	3330      	adds	r3, #48	@ 0x30
 801be42:	b2da      	uxtb	r2, r3
 801be44:	68bb      	ldr	r3, [r7, #8]
 801be46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	3301      	adds	r3, #1
 801be4c:	223a      	movs	r2, #58	@ 0x3a
 801be4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801be50:	68bb      	ldr	r3, [r7, #8]
 801be52:	3302      	adds	r3, #2
 801be54:	222f      	movs	r2, #47	@ 0x2f
 801be56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801be58:	68bb      	ldr	r3, [r7, #8]
 801be5a:	3303      	adds	r3, #3
 801be5c:	2200      	movs	r2, #0
 801be5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801be60:	2300      	movs	r3, #0
 801be62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801be64:	7dfb      	ldrb	r3, [r7, #23]
}
 801be66:	4618      	mov	r0, r3
 801be68:	371c      	adds	r7, #28
 801be6a:	46bd      	mov	sp, r7
 801be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be70:	4770      	bx	lr
 801be72:	bf00      	nop
 801be74:	20001d90 	.word	0x20001d90

0801be78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801be78:	b580      	push	{r7, lr}
 801be7a:	b082      	sub	sp, #8
 801be7c:	af00      	add	r7, sp, #0
 801be7e:	6078      	str	r0, [r7, #4]
 801be80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801be82:	2200      	movs	r2, #0
 801be84:	6839      	ldr	r1, [r7, #0]
 801be86:	6878      	ldr	r0, [r7, #4]
 801be88:	f7ff ffaa 	bl	801bde0 <FATFS_LinkDriverEx>
 801be8c:	4603      	mov	r3, r0
}
 801be8e:	4618      	mov	r0, r3
 801be90:	3708      	adds	r7, #8
 801be92:	46bd      	mov	sp, r7
 801be94:	bd80      	pop	{r7, pc}
	...

0801be98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801be98:	b480      	push	{r7}
 801be9a:	b085      	sub	sp, #20
 801be9c:	af00      	add	r7, sp, #0
 801be9e:	4603      	mov	r3, r0
 801bea0:	6039      	str	r1, [r7, #0]
 801bea2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801bea4:	88fb      	ldrh	r3, [r7, #6]
 801bea6:	2b7f      	cmp	r3, #127	@ 0x7f
 801bea8:	d802      	bhi.n	801beb0 <ff_convert+0x18>
		c = chr;
 801beaa:	88fb      	ldrh	r3, [r7, #6]
 801beac:	81fb      	strh	r3, [r7, #14]
 801beae:	e025      	b.n	801befc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801beb0:	683b      	ldr	r3, [r7, #0]
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d00b      	beq.n	801bece <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801beb6:	88fb      	ldrh	r3, [r7, #6]
 801beb8:	2bff      	cmp	r3, #255	@ 0xff
 801beba:	d805      	bhi.n	801bec8 <ff_convert+0x30>
 801bebc:	88fb      	ldrh	r3, [r7, #6]
 801bebe:	3b80      	subs	r3, #128	@ 0x80
 801bec0:	4a12      	ldr	r2, [pc, #72]	@ (801bf0c <ff_convert+0x74>)
 801bec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bec6:	e000      	b.n	801beca <ff_convert+0x32>
 801bec8:	2300      	movs	r3, #0
 801beca:	81fb      	strh	r3, [r7, #14]
 801becc:	e016      	b.n	801befc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801bece:	2300      	movs	r3, #0
 801bed0:	81fb      	strh	r3, [r7, #14]
 801bed2:	e009      	b.n	801bee8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801bed4:	89fb      	ldrh	r3, [r7, #14]
 801bed6:	4a0d      	ldr	r2, [pc, #52]	@ (801bf0c <ff_convert+0x74>)
 801bed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bedc:	88fa      	ldrh	r2, [r7, #6]
 801bede:	429a      	cmp	r2, r3
 801bee0:	d006      	beq.n	801bef0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801bee2:	89fb      	ldrh	r3, [r7, #14]
 801bee4:	3301      	adds	r3, #1
 801bee6:	81fb      	strh	r3, [r7, #14]
 801bee8:	89fb      	ldrh	r3, [r7, #14]
 801beea:	2b7f      	cmp	r3, #127	@ 0x7f
 801beec:	d9f2      	bls.n	801bed4 <ff_convert+0x3c>
 801beee:	e000      	b.n	801bef2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801bef0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801bef2:	89fb      	ldrh	r3, [r7, #14]
 801bef4:	3380      	adds	r3, #128	@ 0x80
 801bef6:	b29b      	uxth	r3, r3
 801bef8:	b2db      	uxtb	r3, r3
 801befa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801befc:	89fb      	ldrh	r3, [r7, #14]
}
 801befe:	4618      	mov	r0, r3
 801bf00:	3714      	adds	r7, #20
 801bf02:	46bd      	mov	sp, r7
 801bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf08:	4770      	bx	lr
 801bf0a:	bf00      	nop
 801bf0c:	08025150 	.word	0x08025150

0801bf10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801bf10:	b480      	push	{r7}
 801bf12:	b087      	sub	sp, #28
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	4603      	mov	r3, r0
 801bf18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801bf1a:	88fb      	ldrh	r3, [r7, #6]
 801bf1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bf20:	d201      	bcs.n	801bf26 <ff_wtoupper+0x16>
 801bf22:	4b3e      	ldr	r3, [pc, #248]	@ (801c01c <ff_wtoupper+0x10c>)
 801bf24:	e000      	b.n	801bf28 <ff_wtoupper+0x18>
 801bf26:	4b3e      	ldr	r3, [pc, #248]	@ (801c020 <ff_wtoupper+0x110>)
 801bf28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801bf2a:	697b      	ldr	r3, [r7, #20]
 801bf2c:	1c9a      	adds	r2, r3, #2
 801bf2e:	617a      	str	r2, [r7, #20]
 801bf30:	881b      	ldrh	r3, [r3, #0]
 801bf32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801bf34:	8a7b      	ldrh	r3, [r7, #18]
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d068      	beq.n	801c00c <ff_wtoupper+0xfc>
 801bf3a:	88fa      	ldrh	r2, [r7, #6]
 801bf3c:	8a7b      	ldrh	r3, [r7, #18]
 801bf3e:	429a      	cmp	r2, r3
 801bf40:	d364      	bcc.n	801c00c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801bf42:	697b      	ldr	r3, [r7, #20]
 801bf44:	1c9a      	adds	r2, r3, #2
 801bf46:	617a      	str	r2, [r7, #20]
 801bf48:	881b      	ldrh	r3, [r3, #0]
 801bf4a:	823b      	strh	r3, [r7, #16]
 801bf4c:	8a3b      	ldrh	r3, [r7, #16]
 801bf4e:	0a1b      	lsrs	r3, r3, #8
 801bf50:	81fb      	strh	r3, [r7, #14]
 801bf52:	8a3b      	ldrh	r3, [r7, #16]
 801bf54:	b2db      	uxtb	r3, r3
 801bf56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801bf58:	88fa      	ldrh	r2, [r7, #6]
 801bf5a:	8a79      	ldrh	r1, [r7, #18]
 801bf5c:	8a3b      	ldrh	r3, [r7, #16]
 801bf5e:	440b      	add	r3, r1
 801bf60:	429a      	cmp	r2, r3
 801bf62:	da49      	bge.n	801bff8 <ff_wtoupper+0xe8>
			switch (cmd) {
 801bf64:	89fb      	ldrh	r3, [r7, #14]
 801bf66:	2b08      	cmp	r3, #8
 801bf68:	d84f      	bhi.n	801c00a <ff_wtoupper+0xfa>
 801bf6a:	a201      	add	r2, pc, #4	@ (adr r2, 801bf70 <ff_wtoupper+0x60>)
 801bf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf70:	0801bf95 	.word	0x0801bf95
 801bf74:	0801bfa7 	.word	0x0801bfa7
 801bf78:	0801bfbd 	.word	0x0801bfbd
 801bf7c:	0801bfc5 	.word	0x0801bfc5
 801bf80:	0801bfcd 	.word	0x0801bfcd
 801bf84:	0801bfd5 	.word	0x0801bfd5
 801bf88:	0801bfdd 	.word	0x0801bfdd
 801bf8c:	0801bfe5 	.word	0x0801bfe5
 801bf90:	0801bfed 	.word	0x0801bfed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801bf94:	88fa      	ldrh	r2, [r7, #6]
 801bf96:	8a7b      	ldrh	r3, [r7, #18]
 801bf98:	1ad3      	subs	r3, r2, r3
 801bf9a:	005b      	lsls	r3, r3, #1
 801bf9c:	697a      	ldr	r2, [r7, #20]
 801bf9e:	4413      	add	r3, r2
 801bfa0:	881b      	ldrh	r3, [r3, #0]
 801bfa2:	80fb      	strh	r3, [r7, #6]
 801bfa4:	e027      	b.n	801bff6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801bfa6:	88fa      	ldrh	r2, [r7, #6]
 801bfa8:	8a7b      	ldrh	r3, [r7, #18]
 801bfaa:	1ad3      	subs	r3, r2, r3
 801bfac:	b29b      	uxth	r3, r3
 801bfae:	f003 0301 	and.w	r3, r3, #1
 801bfb2:	b29b      	uxth	r3, r3
 801bfb4:	88fa      	ldrh	r2, [r7, #6]
 801bfb6:	1ad3      	subs	r3, r2, r3
 801bfb8:	80fb      	strh	r3, [r7, #6]
 801bfba:	e01c      	b.n	801bff6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801bfbc:	88fb      	ldrh	r3, [r7, #6]
 801bfbe:	3b10      	subs	r3, #16
 801bfc0:	80fb      	strh	r3, [r7, #6]
 801bfc2:	e018      	b.n	801bff6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801bfc4:	88fb      	ldrh	r3, [r7, #6]
 801bfc6:	3b20      	subs	r3, #32
 801bfc8:	80fb      	strh	r3, [r7, #6]
 801bfca:	e014      	b.n	801bff6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801bfcc:	88fb      	ldrh	r3, [r7, #6]
 801bfce:	3b30      	subs	r3, #48	@ 0x30
 801bfd0:	80fb      	strh	r3, [r7, #6]
 801bfd2:	e010      	b.n	801bff6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801bfd4:	88fb      	ldrh	r3, [r7, #6]
 801bfd6:	3b1a      	subs	r3, #26
 801bfd8:	80fb      	strh	r3, [r7, #6]
 801bfda:	e00c      	b.n	801bff6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801bfdc:	88fb      	ldrh	r3, [r7, #6]
 801bfde:	3308      	adds	r3, #8
 801bfe0:	80fb      	strh	r3, [r7, #6]
 801bfe2:	e008      	b.n	801bff6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801bfe4:	88fb      	ldrh	r3, [r7, #6]
 801bfe6:	3b50      	subs	r3, #80	@ 0x50
 801bfe8:	80fb      	strh	r3, [r7, #6]
 801bfea:	e004      	b.n	801bff6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801bfec:	88fb      	ldrh	r3, [r7, #6]
 801bfee:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801bff2:	80fb      	strh	r3, [r7, #6]
 801bff4:	bf00      	nop
			}
			break;
 801bff6:	e008      	b.n	801c00a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801bff8:	89fb      	ldrh	r3, [r7, #14]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d195      	bne.n	801bf2a <ff_wtoupper+0x1a>
 801bffe:	8a3b      	ldrh	r3, [r7, #16]
 801c000:	005b      	lsls	r3, r3, #1
 801c002:	697a      	ldr	r2, [r7, #20]
 801c004:	4413      	add	r3, r2
 801c006:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801c008:	e78f      	b.n	801bf2a <ff_wtoupper+0x1a>
			break;
 801c00a:	bf00      	nop
	}

	return chr;
 801c00c:	88fb      	ldrh	r3, [r7, #6]
}
 801c00e:	4618      	mov	r0, r3
 801c010:	371c      	adds	r7, #28
 801c012:	46bd      	mov	sp, r7
 801c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c018:	4770      	bx	lr
 801c01a:	bf00      	nop
 801c01c:	08025250 	.word	0x08025250
 801c020:	08025444 	.word	0x08025444

0801c024 <Mount_SD>:
//			printf("Successfully saved to SD Card\n");
//			}
//	}
//}

FRESULT Mount_SD(const TCHAR *path) {
 801c024:	b580      	push	{r7, lr}
 801c026:	b082      	sub	sp, #8
 801c028:	af00      	add	r7, sp, #0
 801c02a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 801c02c:	2201      	movs	r2, #1
 801c02e:	6879      	ldr	r1, [r7, #4]
 801c030:	480e      	ldr	r0, [pc, #56]	@ (801c06c <Mount_SD+0x48>)
 801c032:	f7ff fa7f 	bl	801b534 <f_mount>
 801c036:	4603      	mov	r3, r0
 801c038:	461a      	mov	r2, r3
 801c03a:	4b0d      	ldr	r3, [pc, #52]	@ (801c070 <Mount_SD+0x4c>)
 801c03c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c03e:	4b0c      	ldr	r3, [pc, #48]	@ (801c070 <Mount_SD+0x4c>)
 801c040:	781b      	ldrb	r3, [r3, #0]
 801c042:	2b00      	cmp	r3, #0
 801c044:	d006      	beq.n	801c054 <Mount_SD+0x30>
		if (sdioPrints)
 801c046:	2300      	movs	r3, #0
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d009      	beq.n	801c060 <Mount_SD+0x3c>
			printf("ERROR!!! in mounting SD CARD...\n");
 801c04c:	4809      	ldr	r0, [pc, #36]	@ (801c074 <Mount_SD+0x50>)
 801c04e:	f002 fd61 	bl	801eb14 <puts>
 801c052:	e005      	b.n	801c060 <Mount_SD+0x3c>
	} else if (sdioPrints)
 801c054:	2300      	movs	r3, #0
 801c056:	2b00      	cmp	r3, #0
 801c058:	d002      	beq.n	801c060 <Mount_SD+0x3c>
		printf("SD CARD mounted successfully...\n");
 801c05a:	4807      	ldr	r0, [pc, #28]	@ (801c078 <Mount_SD+0x54>)
 801c05c:	f002 fd5a 	bl	801eb14 <puts>

	return fresult;
 801c060:	4b03      	ldr	r3, [pc, #12]	@ (801c070 <Mount_SD+0x4c>)
 801c062:	781b      	ldrb	r3, [r3, #0]
}
 801c064:	4618      	mov	r0, r3
 801c066:	3708      	adds	r7, #8
 801c068:	46bd      	mov	sp, r7
 801c06a:	bd80      	pop	{r7, pc}
 801c06c:	20001d9c 	.word	0x20001d9c
 801c070:	20002318 	.word	0x20002318
 801c074:	080247dc 	.word	0x080247dc
 801c078:	080247fc 	.word	0x080247fc

0801c07c <Unmount_SD>:

void Unmount_SD(const TCHAR *path) {
 801c07c:	b580      	push	{r7, lr}
 801c07e:	b082      	sub	sp, #8
 801c080:	af00      	add	r7, sp, #0
 801c082:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 801c084:	2201      	movs	r2, #1
 801c086:	6879      	ldr	r1, [r7, #4]
 801c088:	2000      	movs	r0, #0
 801c08a:	f7ff fa53 	bl	801b534 <f_mount>
 801c08e:	4603      	mov	r3, r0
 801c090:	461a      	mov	r2, r3
 801c092:	4b0b      	ldr	r3, [pc, #44]	@ (801c0c0 <Unmount_SD+0x44>)
 801c094:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c096:	4b0a      	ldr	r3, [pc, #40]	@ (801c0c0 <Unmount_SD+0x44>)
 801c098:	781b      	ldrb	r3, [r3, #0]
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d106      	bne.n	801c0ac <Unmount_SD+0x30>
		if (sdioPrints)
 801c09e:	2300      	movs	r3, #0
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d009      	beq.n	801c0b8 <Unmount_SD+0x3c>
			printf("SD CARD UNMOUNTED successfully...\n\n");
 801c0a4:	4807      	ldr	r0, [pc, #28]	@ (801c0c4 <Unmount_SD+0x48>)
 801c0a6:	f002 fd35 	bl	801eb14 <puts>
	} else if (sdioPrints)
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 801c0aa:	e005      	b.n	801c0b8 <Unmount_SD+0x3c>
	} else if (sdioPrints)
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d002      	beq.n	801c0b8 <Unmount_SD+0x3c>
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 801c0b2:	4805      	ldr	r0, [pc, #20]	@ (801c0c8 <Unmount_SD+0x4c>)
 801c0b4:	f002 fd2e 	bl	801eb14 <puts>
}
 801c0b8:	bf00      	nop
 801c0ba:	3708      	adds	r7, #8
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	bd80      	pop	{r7, pc}
 801c0c0:	20002318 	.word	0x20002318
 801c0c4:	0802481c 	.word	0x0802481c
 801c0c8:	08024840 	.word	0x08024840

0801c0cc <Create_File>:
		}
		return fresult;
	}
}

FRESULT Create_File(char *name) {
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	b0a8      	sub	sp, #160	@ 0xa0
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat(name, &fno);
 801c0d4:	4941      	ldr	r1, [pc, #260]	@ (801c1dc <Create_File+0x110>)
 801c0d6:	6878      	ldr	r0, [r7, #4]
 801c0d8:	f7ff fe49 	bl	801bd6e <f_stat>
 801c0dc:	4603      	mov	r3, r0
 801c0de:	461a      	mov	r2, r3
 801c0e0:	4b3f      	ldr	r3, [pc, #252]	@ (801c1e0 <Create_File+0x114>)
 801c0e2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c0e4:	4b3e      	ldr	r3, [pc, #248]	@ (801c1e0 <Create_File+0x114>)
 801c0e6:	781b      	ldrb	r3, [r3, #0]
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d114      	bne.n	801c116 <Create_File+0x4a>
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801c0ec:	4b3d      	ldr	r3, [pc, #244]	@ (801c1e4 <Create_File+0x118>)
 801c0ee:	2201      	movs	r2, #1
 801c0f0:	701a      	strb	r2, [r3, #0]

		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",
 801c0f2:	f107 0308 	add.w	r3, r7, #8
 801c0f6:	687a      	ldr	r2, [r7, #4]
 801c0f8:	493b      	ldr	r1, [pc, #236]	@ (801c1e8 <Create_File+0x11c>)
 801c0fa:	4618      	mov	r0, r3
 801c0fc:	f002 fd12 	bl	801eb24 <siprintf>
				name);
		if (sdioPrints)
 801c100:	2300      	movs	r3, #0
 801c102:	2b00      	cmp	r3, #0
 801c104:	d004      	beq.n	801c110 <Create_File+0x44>
			printf(buf);
 801c106:	f107 0308 	add.w	r3, r7, #8
 801c10a:	4618      	mov	r0, r3
 801c10c:	f002 fc9a 	bl	801ea44 <iprintf>

		return fresult;
 801c110:	4b33      	ldr	r3, [pc, #204]	@ (801c1e0 <Create_File+0x114>)
 801c112:	781b      	ldrb	r3, [r3, #0]
 801c114:	e05d      	b.n	801c1d2 <Create_File+0x106>
	} else {
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 801c116:	220b      	movs	r2, #11
 801c118:	6879      	ldr	r1, [r7, #4]
 801c11a:	4834      	ldr	r0, [pc, #208]	@ (801c1ec <Create_File+0x120>)
 801c11c:	f7ff fa50 	bl	801b5c0 <f_open>
 801c120:	4603      	mov	r3, r0
 801c122:	461a      	mov	r2, r3
 801c124:	4b2e      	ldr	r3, [pc, #184]	@ (801c1e0 <Create_File+0x114>)
 801c126:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c128:	4b2d      	ldr	r3, [pc, #180]	@ (801c1e0 <Create_File+0x114>)
 801c12a:	781b      	ldrb	r3, [r3, #0]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d013      	beq.n	801c158 <Create_File+0x8c>

			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n", fresult,
 801c130:	4b2b      	ldr	r3, [pc, #172]	@ (801c1e0 <Create_File+0x114>)
 801c132:	781b      	ldrb	r3, [r3, #0]
 801c134:	461a      	mov	r2, r3
 801c136:	f107 0008 	add.w	r0, r7, #8
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	492c      	ldr	r1, [pc, #176]	@ (801c1f0 <Create_File+0x124>)
 801c13e:	f002 fcf1 	bl	801eb24 <siprintf>
					name);
			if (sdioPrints)
 801c142:	2300      	movs	r3, #0
 801c144:	2b00      	cmp	r3, #0
 801c146:	d004      	beq.n	801c152 <Create_File+0x86>
				printf(buf);
 801c148:	f107 0308 	add.w	r3, r7, #8
 801c14c:	4618      	mov	r0, r3
 801c14e:	f002 fc79 	bl	801ea44 <iprintf>

			return fresult;
 801c152:	4b23      	ldr	r3, [pc, #140]	@ (801c1e0 <Create_File+0x114>)
 801c154:	781b      	ldrb	r3, [r3, #0]
 801c156:	e03c      	b.n	801c1d2 <Create_File+0x106>
		} else {

			sprintf(buf,
 801c158:	f107 0308 	add.w	r3, r7, #8
 801c15c:	687a      	ldr	r2, [r7, #4]
 801c15e:	4925      	ldr	r1, [pc, #148]	@ (801c1f4 <Create_File+0x128>)
 801c160:	4618      	mov	r0, r3
 801c162:	f002 fcdf 	bl	801eb24 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			if (sdioPrints)
 801c166:	2300      	movs	r3, #0
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d004      	beq.n	801c176 <Create_File+0xaa>
				printf(buf);
 801c16c:	f107 0308 	add.w	r3, r7, #8
 801c170:	4618      	mov	r0, r3
 801c172:	f002 fc67 	bl	801ea44 <iprintf>

		}

		fresult = f_close(&fil);
 801c176:	481d      	ldr	r0, [pc, #116]	@ (801c1ec <Create_File+0x120>)
 801c178:	f7ff fdcf 	bl	801bd1a <f_close>
 801c17c:	4603      	mov	r3, r0
 801c17e:	461a      	mov	r2, r3
 801c180:	4b17      	ldr	r3, [pc, #92]	@ (801c1e0 <Create_File+0x114>)
 801c182:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c184:	4b16      	ldr	r3, [pc, #88]	@ (801c1e0 <Create_File+0x114>)
 801c186:	781b      	ldrb	r3, [r3, #0]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d011      	beq.n	801c1b0 <Create_File+0xe4>

			sprintf(buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801c18c:	4b14      	ldr	r3, [pc, #80]	@ (801c1e0 <Create_File+0x114>)
 801c18e:	781b      	ldrb	r3, [r3, #0]
 801c190:	461a      	mov	r2, r3
 801c192:	f107 0008 	add.w	r0, r7, #8
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	4917      	ldr	r1, [pc, #92]	@ (801c1f8 <Create_File+0x12c>)
 801c19a:	f002 fcc3 	bl	801eb24 <siprintf>
			if (sdioPrints)
 801c19e:	2300      	movs	r3, #0
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d014      	beq.n	801c1ce <Create_File+0x102>
				printf(buf);
 801c1a4:	f107 0308 	add.w	r3, r7, #8
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	f002 fc4b 	bl	801ea44 <iprintf>
 801c1ae:	e00e      	b.n	801c1ce <Create_File+0x102>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c1b0:	f107 0308 	add.w	r3, r7, #8
 801c1b4:	687a      	ldr	r2, [r7, #4]
 801c1b6:	4911      	ldr	r1, [pc, #68]	@ (801c1fc <Create_File+0x130>)
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f002 fcb3 	bl	801eb24 <siprintf>
			if (sdioPrints)
 801c1be:	2300      	movs	r3, #0
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d004      	beq.n	801c1ce <Create_File+0x102>
				printf(buf);
 801c1c4:	f107 0308 	add.w	r3, r7, #8
 801c1c8:	4618      	mov	r0, r3
 801c1ca:	f002 fc3b 	bl	801ea44 <iprintf>

		}
	}
	return fresult;
 801c1ce:	4b04      	ldr	r3, [pc, #16]	@ (801c1e0 <Create_File+0x114>)
 801c1d0:	781b      	ldrb	r3, [r3, #0]
}
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	37a0      	adds	r7, #160	@ 0xa0
 801c1d6:	46bd      	mov	sp, r7
 801c1d8:	bd80      	pop	{r7, pc}
 801c1da:	bf00      	nop
 801c1dc:	20002200 	.word	0x20002200
 801c1e0:	20002318 	.word	0x20002318
 801c1e4:	20002321 	.word	0x20002321
 801c1e8:	08024a04 	.word	0x08024a04
 801c1ec:	20001fd0 	.word	0x20001fd0
 801c1f0:	08024a38 	.word	0x08024a38
 801c1f4:	08024a60 	.word	0x08024a60
 801c1f8:	08024aa0 	.word	0x08024aa0
 801c1fc:	080249e4 	.word	0x080249e4

0801c200 <Update_File>:

FRESULT Update_File(char *name, char *data) {
 801c200:	b580      	push	{r7, lr}
 801c202:	b0a8      	sub	sp, #160	@ 0xa0
 801c204:	af00      	add	r7, sp, #0
 801c206:	6078      	str	r0, [r7, #4]
 801c208:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 801c20a:	4951      	ldr	r1, [pc, #324]	@ (801c350 <Update_File+0x150>)
 801c20c:	6878      	ldr	r0, [r7, #4]
 801c20e:	f7ff fdae 	bl	801bd6e <f_stat>
 801c212:	4603      	mov	r3, r0
 801c214:	461a      	mov	r2, r3
 801c216:	4b4f      	ldr	r3, [pc, #316]	@ (801c354 <Update_File+0x154>)
 801c218:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c21a:	4b4e      	ldr	r3, [pc, #312]	@ (801c354 <Update_File+0x154>)
 801c21c:	781b      	ldrb	r3, [r3, #0]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d011      	beq.n	801c246 <Update_File+0x46>

		sprintf(buf, "ERROR!!! *%s* does not exists\n", name);
 801c222:	f107 0308 	add.w	r3, r7, #8
 801c226:	687a      	ldr	r2, [r7, #4]
 801c228:	494b      	ldr	r1, [pc, #300]	@ (801c358 <Update_File+0x158>)
 801c22a:	4618      	mov	r0, r3
 801c22c:	f002 fc7a 	bl	801eb24 <siprintf>
		if (sdioPrints)
 801c230:	2300      	movs	r3, #0
 801c232:	2b00      	cmp	r3, #0
 801c234:	d004      	beq.n	801c240 <Update_File+0x40>
			printf(buf);
 801c236:	f107 0308 	add.w	r3, r7, #8
 801c23a:	4618      	mov	r0, r3
 801c23c:	f002 fc02 	bl	801ea44 <iprintf>

		return fresult;
 801c240:	4b44      	ldr	r3, [pc, #272]	@ (801c354 <Update_File+0x154>)
 801c242:	781b      	ldrb	r3, [r3, #0]
 801c244:	e080      	b.n	801c348 <Update_File+0x148>
	}

	else {
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801c246:	2232      	movs	r2, #50	@ 0x32
 801c248:	6879      	ldr	r1, [r7, #4]
 801c24a:	4844      	ldr	r0, [pc, #272]	@ (801c35c <Update_File+0x15c>)
 801c24c:	f7ff f9b8 	bl	801b5c0 <f_open>
 801c250:	4603      	mov	r3, r0
 801c252:	461a      	mov	r2, r3
 801c254:	4b3f      	ldr	r3, [pc, #252]	@ (801c354 <Update_File+0x154>)
 801c256:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c258:	4b3e      	ldr	r3, [pc, #248]	@ (801c354 <Update_File+0x154>)
 801c25a:	781b      	ldrb	r3, [r3, #0]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d013      	beq.n	801c288 <Update_File+0x88>

			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n", fresult,
 801c260:	4b3c      	ldr	r3, [pc, #240]	@ (801c354 <Update_File+0x154>)
 801c262:	781b      	ldrb	r3, [r3, #0]
 801c264:	461a      	mov	r2, r3
 801c266:	f107 0008 	add.w	r0, r7, #8
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	493c      	ldr	r1, [pc, #240]	@ (801c360 <Update_File+0x160>)
 801c26e:	f002 fc59 	bl	801eb24 <siprintf>
					name);
			if (sdioPrints)
 801c272:	2300      	movs	r3, #0
 801c274:	2b00      	cmp	r3, #0
 801c276:	d004      	beq.n	801c282 <Update_File+0x82>
				printf(buf);
 801c278:	f107 0308 	add.w	r3, r7, #8
 801c27c:	4618      	mov	r0, r3
 801c27e:	f002 fbe1 	bl	801ea44 <iprintf>

			return fresult;
 801c282:	4b34      	ldr	r3, [pc, #208]	@ (801c354 <Update_File+0x154>)
 801c284:	781b      	ldrb	r3, [r3, #0]
 801c286:	e05f      	b.n	801c348 <Update_File+0x148>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 801c288:	6838      	ldr	r0, [r7, #0]
 801c28a:	f7e4 f809 	bl	80002a0 <strlen>
 801c28e:	4602      	mov	r2, r0
 801c290:	4b34      	ldr	r3, [pc, #208]	@ (801c364 <Update_File+0x164>)
 801c292:	6839      	ldr	r1, [r7, #0]
 801c294:	4831      	ldr	r0, [pc, #196]	@ (801c35c <Update_File+0x15c>)
 801c296:	f7ff fb4d 	bl	801b934 <f_write>
 801c29a:	4603      	mov	r3, r0
 801c29c:	461a      	mov	r2, r3
 801c29e:	4b2d      	ldr	r3, [pc, #180]	@ (801c354 <Update_File+0x154>)
 801c2a0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c2a2:	4b2c      	ldr	r3, [pc, #176]	@ (801c354 <Update_File+0x154>)
 801c2a4:	781b      	ldrb	r3, [r3, #0]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d011      	beq.n	801c2ce <Update_File+0xce>

			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n", fresult,
 801c2aa:	4b2a      	ldr	r3, [pc, #168]	@ (801c354 <Update_File+0x154>)
 801c2ac:	781b      	ldrb	r3, [r3, #0]
 801c2ae:	461a      	mov	r2, r3
 801c2b0:	f107 0008 	add.w	r0, r7, #8
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	492c      	ldr	r1, [pc, #176]	@ (801c368 <Update_File+0x168>)
 801c2b8:	f002 fc34 	bl	801eb24 <siprintf>
					name);
			if (sdioPrints)
 801c2bc:	2300      	movs	r3, #0
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d014      	beq.n	801c2ec <Update_File+0xec>
				printf(buf);
 801c2c2:	f107 0308 	add.w	r3, r7, #8
 801c2c6:	4618      	mov	r0, r3
 801c2c8:	f002 fbbc 	bl	801ea44 <iprintf>
 801c2cc:	e00e      	b.n	801c2ec <Update_File+0xec>

		}

		else {

			sprintf(buf, "*%s* UPDATED successfully\n", name);
 801c2ce:	f107 0308 	add.w	r3, r7, #8
 801c2d2:	687a      	ldr	r2, [r7, #4]
 801c2d4:	4925      	ldr	r1, [pc, #148]	@ (801c36c <Update_File+0x16c>)
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	f002 fc24 	bl	801eb24 <siprintf>
			if (sdioPrints)
 801c2dc:	2300      	movs	r3, #0
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d004      	beq.n	801c2ec <Update_File+0xec>
				printf(buf);
 801c2e2:	f107 0308 	add.w	r3, r7, #8
 801c2e6:	4618      	mov	r0, r3
 801c2e8:	f002 fbac 	bl	801ea44 <iprintf>

		}

		/* Close file */
		fresult = f_close(&fil);
 801c2ec:	481b      	ldr	r0, [pc, #108]	@ (801c35c <Update_File+0x15c>)
 801c2ee:	f7ff fd14 	bl	801bd1a <f_close>
 801c2f2:	4603      	mov	r3, r0
 801c2f4:	461a      	mov	r2, r3
 801c2f6:	4b17      	ldr	r3, [pc, #92]	@ (801c354 <Update_File+0x154>)
 801c2f8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c2fa:	4b16      	ldr	r3, [pc, #88]	@ (801c354 <Update_File+0x154>)
 801c2fc:	781b      	ldrb	r3, [r3, #0]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d011      	beq.n	801c326 <Update_File+0x126>

			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n", fresult,
 801c302:	4b14      	ldr	r3, [pc, #80]	@ (801c354 <Update_File+0x154>)
 801c304:	781b      	ldrb	r3, [r3, #0]
 801c306:	461a      	mov	r2, r3
 801c308:	f107 0008 	add.w	r0, r7, #8
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	4918      	ldr	r1, [pc, #96]	@ (801c370 <Update_File+0x170>)
 801c310:	f002 fc08 	bl	801eb24 <siprintf>
					name);
			if (sdioPrints)
 801c314:	2300      	movs	r3, #0
 801c316:	2b00      	cmp	r3, #0
 801c318:	d014      	beq.n	801c344 <Update_File+0x144>
				printf(buf);
 801c31a:	f107 0308 	add.w	r3, r7, #8
 801c31e:	4618      	mov	r0, r3
 801c320:	f002 fb90 	bl	801ea44 <iprintf>
 801c324:	e00e      	b.n	801c344 <Update_File+0x144>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c326:	f107 0308 	add.w	r3, r7, #8
 801c32a:	687a      	ldr	r2, [r7, #4]
 801c32c:	4911      	ldr	r1, [pc, #68]	@ (801c374 <Update_File+0x174>)
 801c32e:	4618      	mov	r0, r3
 801c330:	f002 fbf8 	bl	801eb24 <siprintf>
			if (sdioPrints)
 801c334:	2300      	movs	r3, #0
 801c336:	2b00      	cmp	r3, #0
 801c338:	d004      	beq.n	801c344 <Update_File+0x144>
				printf(buf);
 801c33a:	f107 0308 	add.w	r3, r7, #8
 801c33e:	4618      	mov	r0, r3
 801c340:	f002 fb80 	bl	801ea44 <iprintf>

		}
	}
	return fresult;
 801c344:	4b03      	ldr	r3, [pc, #12]	@ (801c354 <Update_File+0x154>)
 801c346:	781b      	ldrb	r3, [r3, #0]
}
 801c348:	4618      	mov	r0, r3
 801c34a:	37a0      	adds	r7, #160	@ 0xa0
 801c34c:	46bd      	mov	sp, r7
 801c34e:	bd80      	pop	{r7, pc}
 801c350:	20002200 	.word	0x20002200
 801c354:	20002318 	.word	0x20002318
 801c358:	08024894 	.word	0x08024894
 801c35c:	20001fd0 	.word	0x20001fd0
 801c360:	080248b4 	.word	0x080248b4
 801c364:	2000231c 	.word	0x2000231c
 801c368:	08024ac4 	.word	0x08024ac4
 801c36c:	08024aec 	.word	0x08024aec
 801c370:	080249bc 	.word	0x080249bc
 801c374:	080249e4 	.word	0x080249e4

0801c378 <check_file_exists>:
/**
 * 0 file exists
 * 1 file is not there
 */
uint8_t check_file_exists(char *name)
{
 801c378:	b580      	push	{r7, lr}
 801c37a:	b082      	sub	sp, #8
 801c37c:	af00      	add	r7, sp, #0
 801c37e:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 801c380:	4906      	ldr	r1, [pc, #24]	@ (801c39c <check_file_exists+0x24>)
 801c382:	6878      	ldr	r0, [r7, #4]
 801c384:	f7ff fcf3 	bl	801bd6e <f_stat>
 801c388:	4603      	mov	r3, r0
 801c38a:	461a      	mov	r2, r3
 801c38c:	4b04      	ldr	r3, [pc, #16]	@ (801c3a0 <check_file_exists+0x28>)
 801c38e:	701a      	strb	r2, [r3, #0]


	return fresult;
 801c390:	4b03      	ldr	r3, [pc, #12]	@ (801c3a0 <check_file_exists+0x28>)
 801c392:	781b      	ldrb	r3, [r3, #0]

}
 801c394:	4618      	mov	r0, r3
 801c396:	3708      	adds	r7, #8
 801c398:	46bd      	mov	sp, r7
 801c39a:	bd80      	pop	{r7, pc}
 801c39c:	20002200 	.word	0x20002200
 801c3a0:	20002318 	.word	0x20002318

0801c3a4 <json_update>:
uint8_t fileWrite_sec = 0;

uint8_t datawritten = 0;
char buffer[255];

void json_update() {
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b088      	sub	sp, #32
 801c3a8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c3aa:	f107 0314 	add.w	r3, r7, #20
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	4619      	mov	r1, r3
 801c3b2:	48b4      	ldr	r0, [pc, #720]	@ (801c684 <json_update+0x2e0>)
 801c3b4:	f7ed fbcf 	bl	8009b56 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c3b8:	463b      	mov	r3, r7
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	4619      	mov	r1, r3
 801c3be:	48b1      	ldr	r0, [pc, #708]	@ (801c684 <json_update+0x2e0>)
 801c3c0:	f7ed fae7 	bl	8009992 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c3c4:	7dba      	ldrb	r2, [r7, #22]
 801c3c6:	4bb0      	ldr	r3, [pc, #704]	@ (801c688 <json_update+0x2e4>)
 801c3c8:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c3ca:	7d7a      	ldrb	r2, [r7, #21]
 801c3cc:	4baf      	ldr	r3, [pc, #700]	@ (801c68c <json_update+0x2e8>)
 801c3ce:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c3d0:	7dfa      	ldrb	r2, [r7, #23]
 801c3d2:	4baf      	ldr	r3, [pc, #700]	@ (801c690 <json_update+0x2ec>)
 801c3d4:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c3d6:	783a      	ldrb	r2, [r7, #0]
 801c3d8:	4bae      	ldr	r3, [pc, #696]	@ (801c694 <json_update+0x2f0>)
 801c3da:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c3dc:	787a      	ldrb	r2, [r7, #1]
 801c3de:	4bae      	ldr	r3, [pc, #696]	@ (801c698 <json_update+0x2f4>)
 801c3e0:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c3e2:	78ba      	ldrb	r2, [r7, #2]
 801c3e4:	4bad      	ldr	r3, [pc, #692]	@ (801c69c <json_update+0x2f8>)
 801c3e6:	701a      	strb	r2, [r3, #0]

	fresult1 = Mount_SD("/");
 801c3e8:	48ad      	ldr	r0, [pc, #692]	@ (801c6a0 <json_update+0x2fc>)
 801c3ea:	f7ff fe1b 	bl	801c024 <Mount_SD>
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	461a      	mov	r2, r3
 801c3f2:	4bac      	ldr	r3, [pc, #688]	@ (801c6a4 <json_update+0x300>)
 801c3f4:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c3f6:	4bab      	ldr	r3, [pc, #684]	@ (801c6a4 <json_update+0x300>)
 801c3f8:	781b      	ldrb	r3, [r3, #0]
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	f040 8137 	bne.w	801c66e <json_update+0x2ca>
		//CAN Bus
		sprintf(buffer, "{\n");
 801c400:	49a9      	ldr	r1, [pc, #676]	@ (801c6a8 <json_update+0x304>)
 801c402:	48aa      	ldr	r0, [pc, #680]	@ (801c6ac <json_update+0x308>)
 801c404:	f002 fb8e 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c408:	49a8      	ldr	r1, [pc, #672]	@ (801c6ac <json_update+0x308>)
 801c40a:	48a9      	ldr	r0, [pc, #676]	@ (801c6b0 <json_update+0x30c>)
 801c40c:	f7ff fef8 	bl	801c200 <Update_File>
 801c410:	4603      	mov	r3, r0
 801c412:	461a      	mov	r2, r3
 801c414:	4ba3      	ldr	r3, [pc, #652]	@ (801c6a4 <json_update+0x300>)
 801c416:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c418:	22ff      	movs	r2, #255	@ 0xff
 801c41a:	2100      	movs	r1, #0
 801c41c:	48a3      	ldr	r0, [pc, #652]	@ (801c6ac <json_update+0x308>)
 801c41e:	f002 fccb 	bl	801edb8 <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801c422:	f7e6 f829 	bl	8002478 <ver_GetUid>
 801c426:	4603      	mov	r3, r0
 801c428:	461a      	mov	r2, r3
 801c42a:	49a2      	ldr	r1, [pc, #648]	@ (801c6b4 <json_update+0x310>)
 801c42c:	489f      	ldr	r0, [pc, #636]	@ (801c6ac <json_update+0x308>)
 801c42e:	f002 fb79 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c432:	499e      	ldr	r1, [pc, #632]	@ (801c6ac <json_update+0x308>)
 801c434:	489e      	ldr	r0, [pc, #632]	@ (801c6b0 <json_update+0x30c>)
 801c436:	f7ff fee3 	bl	801c200 <Update_File>
 801c43a:	4603      	mov	r3, r0
 801c43c:	461a      	mov	r2, r3
 801c43e:	4b99      	ldr	r3, [pc, #612]	@ (801c6a4 <json_update+0x300>)
 801c440:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c442:	22ff      	movs	r2, #255	@ 0xff
 801c444:	2100      	movs	r1, #0
 801c446:	4899      	ldr	r0, [pc, #612]	@ (801c6ac <json_update+0x308>)
 801c448:	f002 fcb6 	bl	801edb8 <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801c44c:	4a9a      	ldr	r2, [pc, #616]	@ (801c6b8 <json_update+0x314>)
 801c44e:	499b      	ldr	r1, [pc, #620]	@ (801c6bc <json_update+0x318>)
 801c450:	4896      	ldr	r0, [pc, #600]	@ (801c6ac <json_update+0x308>)
 801c452:	f002 fb67 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c456:	4995      	ldr	r1, [pc, #596]	@ (801c6ac <json_update+0x308>)
 801c458:	4895      	ldr	r0, [pc, #596]	@ (801c6b0 <json_update+0x30c>)
 801c45a:	f7ff fed1 	bl	801c200 <Update_File>
 801c45e:	4603      	mov	r3, r0
 801c460:	461a      	mov	r2, r3
 801c462:	4b90      	ldr	r3, [pc, #576]	@ (801c6a4 <json_update+0x300>)
 801c464:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c466:	22ff      	movs	r2, #255	@ 0xff
 801c468:	2100      	movs	r1, #0
 801c46a:	4890      	ldr	r0, [pc, #576]	@ (801c6ac <json_update+0x308>)
 801c46c:	f002 fca4 	bl	801edb8 <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c470:	783b      	ldrb	r3, [r7, #0]
 801c472:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801c474:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c476:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801c478:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c47a:	9300      	str	r3, [sp, #0]
 801c47c:	460b      	mov	r3, r1
 801c47e:	4990      	ldr	r1, [pc, #576]	@ (801c6c0 <json_update+0x31c>)
 801c480:	488a      	ldr	r0, [pc, #552]	@ (801c6ac <json_update+0x308>)
 801c482:	f002 fb4f 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c486:	4989      	ldr	r1, [pc, #548]	@ (801c6ac <json_update+0x308>)
 801c488:	4889      	ldr	r0, [pc, #548]	@ (801c6b0 <json_update+0x30c>)
 801c48a:	f7ff feb9 	bl	801c200 <Update_File>
 801c48e:	4603      	mov	r3, r0
 801c490:	461a      	mov	r2, r3
 801c492:	4b84      	ldr	r3, [pc, #528]	@ (801c6a4 <json_update+0x300>)
 801c494:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c496:	22ff      	movs	r2, #255	@ 0xff
 801c498:	2100      	movs	r1, #0
 801c49a:	4884      	ldr	r0, [pc, #528]	@ (801c6ac <json_update+0x308>)
 801c49c:	f002 fc8c 	bl	801edb8 <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801c4a0:	4a88      	ldr	r2, [pc, #544]	@ (801c6c4 <json_update+0x320>)
 801c4a2:	4989      	ldr	r1, [pc, #548]	@ (801c6c8 <json_update+0x324>)
 801c4a4:	4881      	ldr	r0, [pc, #516]	@ (801c6ac <json_update+0x308>)
 801c4a6:	f002 fb3d 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4aa:	4980      	ldr	r1, [pc, #512]	@ (801c6ac <json_update+0x308>)
 801c4ac:	4880      	ldr	r0, [pc, #512]	@ (801c6b0 <json_update+0x30c>)
 801c4ae:	f7ff fea7 	bl	801c200 <Update_File>
 801c4b2:	4603      	mov	r3, r0
 801c4b4:	461a      	mov	r2, r3
 801c4b6:	4b7b      	ldr	r3, [pc, #492]	@ (801c6a4 <json_update+0x300>)
 801c4b8:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4ba:	22ff      	movs	r2, #255	@ 0xff
 801c4bc:	2100      	movs	r1, #0
 801c4be:	487b      	ldr	r0, [pc, #492]	@ (801c6ac <json_update+0x308>)
 801c4c0:	f002 fc7a 	bl	801edb8 <memset>
		sprintf(buffer, "\"Filename\":\"%s\",\n", _Flash_Packet.filename_ver_date);
 801c4c4:	4a81      	ldr	r2, [pc, #516]	@ (801c6cc <json_update+0x328>)
 801c4c6:	4982      	ldr	r1, [pc, #520]	@ (801c6d0 <json_update+0x32c>)
 801c4c8:	4878      	ldr	r0, [pc, #480]	@ (801c6ac <json_update+0x308>)
 801c4ca:	f002 fb2b 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4ce:	4977      	ldr	r1, [pc, #476]	@ (801c6ac <json_update+0x308>)
 801c4d0:	4877      	ldr	r0, [pc, #476]	@ (801c6b0 <json_update+0x30c>)
 801c4d2:	f7ff fe95 	bl	801c200 <Update_File>
 801c4d6:	4603      	mov	r3, r0
 801c4d8:	461a      	mov	r2, r3
 801c4da:	4b72      	ldr	r3, [pc, #456]	@ (801c6a4 <json_update+0x300>)
 801c4dc:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4de:	22ff      	movs	r2, #255	@ 0xff
 801c4e0:	2100      	movs	r1, #0
 801c4e2:	4872      	ldr	r0, [pc, #456]	@ (801c6ac <json_update+0x308>)
 801c4e4:	f002 fc68 	bl	801edb8 <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801c4e8:	4a7a      	ldr	r2, [pc, #488]	@ (801c6d4 <json_update+0x330>)
 801c4ea:	497b      	ldr	r1, [pc, #492]	@ (801c6d8 <json_update+0x334>)
 801c4ec:	486f      	ldr	r0, [pc, #444]	@ (801c6ac <json_update+0x308>)
 801c4ee:	f002 fb19 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4f2:	496e      	ldr	r1, [pc, #440]	@ (801c6ac <json_update+0x308>)
 801c4f4:	486e      	ldr	r0, [pc, #440]	@ (801c6b0 <json_update+0x30c>)
 801c4f6:	f7ff fe83 	bl	801c200 <Update_File>
 801c4fa:	4603      	mov	r3, r0
 801c4fc:	461a      	mov	r2, r3
 801c4fe:	4b69      	ldr	r3, [pc, #420]	@ (801c6a4 <json_update+0x300>)
 801c500:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c502:	22ff      	movs	r2, #255	@ 0xff
 801c504:	2100      	movs	r1, #0
 801c506:	4869      	ldr	r0, [pc, #420]	@ (801c6ac <json_update+0x308>)
 801c508:	f002 fc56 	bl	801edb8 <memset>
		sprintf(buffer, "\"co2\":\"%.2f\",\n", _RunTime_Packet.co2);
 801c50c:	4b73      	ldr	r3, [pc, #460]	@ (801c6dc <json_update+0x338>)
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	4618      	mov	r0, r3
 801c512:	f7e4 f831 	bl	8000578 <__aeabi_f2d>
 801c516:	4602      	mov	r2, r0
 801c518:	460b      	mov	r3, r1
 801c51a:	4971      	ldr	r1, [pc, #452]	@ (801c6e0 <json_update+0x33c>)
 801c51c:	4863      	ldr	r0, [pc, #396]	@ (801c6ac <json_update+0x308>)
 801c51e:	f002 fb01 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c522:	4962      	ldr	r1, [pc, #392]	@ (801c6ac <json_update+0x308>)
 801c524:	4862      	ldr	r0, [pc, #392]	@ (801c6b0 <json_update+0x30c>)
 801c526:	f7ff fe6b 	bl	801c200 <Update_File>
 801c52a:	4603      	mov	r3, r0
 801c52c:	461a      	mov	r2, r3
 801c52e:	4b5d      	ldr	r3, [pc, #372]	@ (801c6a4 <json_update+0x300>)
 801c530:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c532:	22ff      	movs	r2, #255	@ 0xff
 801c534:	2100      	movs	r1, #0
 801c536:	485d      	ldr	r0, [pc, #372]	@ (801c6ac <json_update+0x308>)
 801c538:	f002 fc3e 	bl	801edb8 <memset>
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
				_RunTime_Packet.temperature);
 801c53c:	4b67      	ldr	r3, [pc, #412]	@ (801c6dc <json_update+0x338>)
 801c53e:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
 801c540:	4618      	mov	r0, r3
 801c542:	f7e4 f819 	bl	8000578 <__aeabi_f2d>
 801c546:	4602      	mov	r2, r0
 801c548:	460b      	mov	r3, r1
 801c54a:	4966      	ldr	r1, [pc, #408]	@ (801c6e4 <json_update+0x340>)
 801c54c:	4857      	ldr	r0, [pc, #348]	@ (801c6ac <json_update+0x308>)
 801c54e:	f002 fae9 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c552:	4956      	ldr	r1, [pc, #344]	@ (801c6ac <json_update+0x308>)
 801c554:	4856      	ldr	r0, [pc, #344]	@ (801c6b0 <json_update+0x30c>)
 801c556:	f7ff fe53 	bl	801c200 <Update_File>
 801c55a:	4603      	mov	r3, r0
 801c55c:	461a      	mov	r2, r3
 801c55e:	4b51      	ldr	r3, [pc, #324]	@ (801c6a4 <json_update+0x300>)
 801c560:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c562:	22ff      	movs	r2, #255	@ 0xff
 801c564:	2100      	movs	r1, #0
 801c566:	4851      	ldr	r0, [pc, #324]	@ (801c6ac <json_update+0x308>)
 801c568:	f002 fc26 	bl	801edb8 <memset>
		sprintf(buffer, "\"humidity\":\"%.2f\",\n", _RunTime_Packet.humidity);
 801c56c:	4b5b      	ldr	r3, [pc, #364]	@ (801c6dc <json_update+0x338>)
 801c56e:	689b      	ldr	r3, [r3, #8]
 801c570:	4618      	mov	r0, r3
 801c572:	f7e4 f801 	bl	8000578 <__aeabi_f2d>
 801c576:	4602      	mov	r2, r0
 801c578:	460b      	mov	r3, r1
 801c57a:	495b      	ldr	r1, [pc, #364]	@ (801c6e8 <json_update+0x344>)
 801c57c:	484b      	ldr	r0, [pc, #300]	@ (801c6ac <json_update+0x308>)
 801c57e:	f002 fad1 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c582:	494a      	ldr	r1, [pc, #296]	@ (801c6ac <json_update+0x308>)
 801c584:	484a      	ldr	r0, [pc, #296]	@ (801c6b0 <json_update+0x30c>)
 801c586:	f7ff fe3b 	bl	801c200 <Update_File>
 801c58a:	4603      	mov	r3, r0
 801c58c:	461a      	mov	r2, r3
 801c58e:	4b45      	ldr	r3, [pc, #276]	@ (801c6a4 <json_update+0x300>)
 801c590:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c592:	22ff      	movs	r2, #255	@ 0xff
 801c594:	2100      	movs	r1, #0
 801c596:	4845      	ldr	r0, [pc, #276]	@ (801c6ac <json_update+0x308>)
 801c598:	f002 fc0e 	bl	801edb8 <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801c59c:	4b4f      	ldr	r3, [pc, #316]	@ (801c6dc <json_update+0x338>)
 801c59e:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d001      	beq.n	801c5a8 <json_update+0x204>
 801c5a4:	4b51      	ldr	r3, [pc, #324]	@ (801c6ec <json_update+0x348>)
 801c5a6:	e000      	b.n	801c5aa <json_update+0x206>
 801c5a8:	4b51      	ldr	r3, [pc, #324]	@ (801c6f0 <json_update+0x34c>)
 801c5aa:	461a      	mov	r2, r3
 801c5ac:	4951      	ldr	r1, [pc, #324]	@ (801c6f4 <json_update+0x350>)
 801c5ae:	483f      	ldr	r0, [pc, #252]	@ (801c6ac <json_update+0x308>)
 801c5b0:	f002 fab8 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5b4:	493d      	ldr	r1, [pc, #244]	@ (801c6ac <json_update+0x308>)
 801c5b6:	483e      	ldr	r0, [pc, #248]	@ (801c6b0 <json_update+0x30c>)
 801c5b8:	f7ff fe22 	bl	801c200 <Update_File>
 801c5bc:	4603      	mov	r3, r0
 801c5be:	461a      	mov	r2, r3
 801c5c0:	4b38      	ldr	r3, [pc, #224]	@ (801c6a4 <json_update+0x300>)
 801c5c2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c5c4:	22ff      	movs	r2, #255	@ 0xff
 801c5c6:	2100      	movs	r1, #0
 801c5c8:	4838      	ldr	r0, [pc, #224]	@ (801c6ac <json_update+0x308>)
 801c5ca:	f002 fbf5 	bl	801edb8 <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801c5ce:	4b43      	ldr	r3, [pc, #268]	@ (801c6dc <json_update+0x338>)
 801c5d0:	695b      	ldr	r3, [r3, #20]
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	f7e3 ffd0 	bl	8000578 <__aeabi_f2d>
 801c5d8:	4602      	mov	r2, r0
 801c5da:	460b      	mov	r3, r1
 801c5dc:	4946      	ldr	r1, [pc, #280]	@ (801c6f8 <json_update+0x354>)
 801c5de:	4833      	ldr	r0, [pc, #204]	@ (801c6ac <json_update+0x308>)
 801c5e0:	f002 faa0 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5e4:	4931      	ldr	r1, [pc, #196]	@ (801c6ac <json_update+0x308>)
 801c5e6:	4832      	ldr	r0, [pc, #200]	@ (801c6b0 <json_update+0x30c>)
 801c5e8:	f7ff fe0a 	bl	801c200 <Update_File>
 801c5ec:	4603      	mov	r3, r0
 801c5ee:	461a      	mov	r2, r3
 801c5f0:	4b2c      	ldr	r3, [pc, #176]	@ (801c6a4 <json_update+0x300>)
 801c5f2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c5f4:	22ff      	movs	r2, #255	@ 0xff
 801c5f6:	2100      	movs	r1, #0
 801c5f8:	482c      	ldr	r0, [pc, #176]	@ (801c6ac <json_update+0x308>)
 801c5fa:	f002 fbdd 	bl	801edb8 <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801c5fe:	493f      	ldr	r1, [pc, #252]	@ (801c6fc <json_update+0x358>)
 801c600:	482a      	ldr	r0, [pc, #168]	@ (801c6ac <json_update+0x308>)
 801c602:	f002 fa8f 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c606:	4929      	ldr	r1, [pc, #164]	@ (801c6ac <json_update+0x308>)
 801c608:	4829      	ldr	r0, [pc, #164]	@ (801c6b0 <json_update+0x30c>)
 801c60a:	f7ff fdf9 	bl	801c200 <Update_File>
 801c60e:	4603      	mov	r3, r0
 801c610:	461a      	mov	r2, r3
 801c612:	4b24      	ldr	r3, [pc, #144]	@ (801c6a4 <json_update+0x300>)
 801c614:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c616:	22ff      	movs	r2, #255	@ 0xff
 801c618:	2100      	movs	r1, #0
 801c61a:	4824      	ldr	r0, [pc, #144]	@ (801c6ac <json_update+0x308>)
 801c61c:	f002 fbcc 	bl	801edb8 <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801c620:	4b2e      	ldr	r3, [pc, #184]	@ (801c6dc <json_update+0x338>)
 801c622:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801c624:	4618      	mov	r0, r3
 801c626:	f7e3 ffa7 	bl	8000578 <__aeabi_f2d>
 801c62a:	4602      	mov	r2, r0
 801c62c:	460b      	mov	r3, r1
 801c62e:	4934      	ldr	r1, [pc, #208]	@ (801c700 <json_update+0x35c>)
 801c630:	481e      	ldr	r0, [pc, #120]	@ (801c6ac <json_update+0x308>)
 801c632:	f002 fa77 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c636:	491d      	ldr	r1, [pc, #116]	@ (801c6ac <json_update+0x308>)
 801c638:	481d      	ldr	r0, [pc, #116]	@ (801c6b0 <json_update+0x30c>)
 801c63a:	f7ff fde1 	bl	801c200 <Update_File>
 801c63e:	4603      	mov	r3, r0
 801c640:	461a      	mov	r2, r3
 801c642:	4b18      	ldr	r3, [pc, #96]	@ (801c6a4 <json_update+0x300>)
 801c644:	701a      	strb	r2, [r3, #0]

		//we end it
		memset(buffer, 0, sizeof(buffer));
 801c646:	22ff      	movs	r2, #255	@ 0xff
 801c648:	2100      	movs	r1, #0
 801c64a:	4818      	ldr	r0, [pc, #96]	@ (801c6ac <json_update+0x308>)
 801c64c:	f002 fbb4 	bl	801edb8 <memset>
		sprintf(buffer, "}\n\n");
 801c650:	492c      	ldr	r1, [pc, #176]	@ (801c704 <json_update+0x360>)
 801c652:	4816      	ldr	r0, [pc, #88]	@ (801c6ac <json_update+0x308>)
 801c654:	f002 fa66 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c658:	4914      	ldr	r1, [pc, #80]	@ (801c6ac <json_update+0x308>)
 801c65a:	4815      	ldr	r0, [pc, #84]	@ (801c6b0 <json_update+0x30c>)
 801c65c:	f7ff fdd0 	bl	801c200 <Update_File>
 801c660:	4603      	mov	r3, r0
 801c662:	461a      	mov	r2, r3
 801c664:	4b0f      	ldr	r3, [pc, #60]	@ (801c6a4 <json_update+0x300>)
 801c666:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c668:	480d      	ldr	r0, [pc, #52]	@ (801c6a0 <json_update+0x2fc>)
 801c66a:	f7ff fd07 	bl	801c07c <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c66e:	4b0d      	ldr	r3, [pc, #52]	@ (801c6a4 <json_update+0x300>)
 801c670:	781b      	ldrb	r3, [r3, #0]
 801c672:	b25a      	sxtb	r2, r3
 801c674:	4b19      	ldr	r3, [pc, #100]	@ (801c6dc <json_update+0x338>)
 801c676:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c67a:	bf00      	nop
 801c67c:	3718      	adds	r7, #24
 801c67e:	46bd      	mov	sp, r7
 801c680:	bd80      	pop	{r7, pc}
 801c682:	bf00      	nop
 801c684:	20001898 	.word	0x20001898
 801c688:	20002322 	.word	0x20002322
 801c68c:	20002323 	.word	0x20002323
 801c690:	20002324 	.word	0x20002324
 801c694:	20002325 	.word	0x20002325
 801c698:	20002326 	.word	0x20002326
 801c69c:	20002327 	.word	0x20002327
 801c6a0:	08024bd8 	.word	0x08024bd8
 801c6a4:	20002320 	.word	0x20002320
 801c6a8:	08024bdc 	.word	0x08024bdc
 801c6ac:	2000232c 	.word	0x2000232c
 801c6b0:	20001461 	.word	0x20001461
 801c6b4:	08024be0 	.word	0x08024be0
 801c6b8:	20001399 	.word	0x20001399
 801c6bc:	08024bf0 	.word	0x08024bf0
 801c6c0:	08024bfc 	.word	0x08024bfc
 801c6c4:	200013cb 	.word	0x200013cb
 801c6c8:	08024c1c 	.word	0x08024c1c
 801c6cc:	200014c5 	.word	0x200014c5
 801c6d0:	08024c30 	.word	0x08024c30
 801c6d4:	2000142f 	.word	0x2000142f
 801c6d8:	08024c44 	.word	0x08024c44
 801c6dc:	20001530 	.word	0x20001530
 801c6e0:	08024c54 	.word	0x08024c54
 801c6e4:	08024c64 	.word	0x08024c64
 801c6e8:	08024c7c 	.word	0x08024c7c
 801c6ec:	08024c90 	.word	0x08024c90
 801c6f0:	08024c98 	.word	0x08024c98
 801c6f4:	08024ca0 	.word	0x08024ca0
 801c6f8:	08024cb0 	.word	0x08024cb0
 801c6fc:	08024cc4 	.word	0x08024cc4
 801c700:	08024cd4 	.word	0x08024cd4
 801c704:	08024ce8 	.word	0x08024ce8

0801c708 <csv_update>:
void csv_update() {
 801c708:	b580      	push	{r7, lr}
 801c70a:	b088      	sub	sp, #32
 801c70c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c70e:	f107 0314 	add.w	r3, r7, #20
 801c712:	2200      	movs	r2, #0
 801c714:	4619      	mov	r1, r3
 801c716:	48ab      	ldr	r0, [pc, #684]	@ (801c9c4 <csv_update+0x2bc>)
 801c718:	f7ed fa1d 	bl	8009b56 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c71c:	463b      	mov	r3, r7
 801c71e:	2200      	movs	r2, #0
 801c720:	4619      	mov	r1, r3
 801c722:	48a8      	ldr	r0, [pc, #672]	@ (801c9c4 <csv_update+0x2bc>)
 801c724:	f7ed f935 	bl	8009992 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c728:	7dba      	ldrb	r2, [r7, #22]
 801c72a:	4ba7      	ldr	r3, [pc, #668]	@ (801c9c8 <csv_update+0x2c0>)
 801c72c:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c72e:	7d7a      	ldrb	r2, [r7, #21]
 801c730:	4ba6      	ldr	r3, [pc, #664]	@ (801c9cc <csv_update+0x2c4>)
 801c732:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c734:	7dfa      	ldrb	r2, [r7, #23]
 801c736:	4ba6      	ldr	r3, [pc, #664]	@ (801c9d0 <csv_update+0x2c8>)
 801c738:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c73a:	783a      	ldrb	r2, [r7, #0]
 801c73c:	4ba5      	ldr	r3, [pc, #660]	@ (801c9d4 <csv_update+0x2cc>)
 801c73e:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c740:	787a      	ldrb	r2, [r7, #1]
 801c742:	4ba5      	ldr	r3, [pc, #660]	@ (801c9d8 <csv_update+0x2d0>)
 801c744:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c746:	78ba      	ldrb	r2, [r7, #2]
 801c748:	4ba4      	ldr	r3, [pc, #656]	@ (801c9dc <csv_update+0x2d4>)
 801c74a:	701a      	strb	r2, [r3, #0]
	fresult1 = Mount_SD("/");
 801c74c:	48a4      	ldr	r0, [pc, #656]	@ (801c9e0 <csv_update+0x2d8>)
 801c74e:	f7ff fc69 	bl	801c024 <Mount_SD>
 801c752:	4603      	mov	r3, r0
 801c754:	461a      	mov	r2, r3
 801c756:	4ba3      	ldr	r3, [pc, #652]	@ (801c9e4 <csv_update+0x2dc>)
 801c758:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c75a:	4ba2      	ldr	r3, [pc, #648]	@ (801c9e4 <csv_update+0x2dc>)
 801c75c:	781b      	ldrb	r3, [r3, #0]
 801c75e:	2b00      	cmp	r3, #0
 801c760:	f040 8126 	bne.w	801c9b0 <csv_update+0x2a8>


		sprintf(buffer, "%s ,", ver_GetUid());
 801c764:	f7e5 fe88 	bl	8002478 <ver_GetUid>
 801c768:	4603      	mov	r3, r0
 801c76a:	461a      	mov	r2, r3
 801c76c:	499e      	ldr	r1, [pc, #632]	@ (801c9e8 <csv_update+0x2e0>)
 801c76e:	489f      	ldr	r0, [pc, #636]	@ (801c9ec <csv_update+0x2e4>)
 801c770:	f002 f9d8 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c774:	499d      	ldr	r1, [pc, #628]	@ (801c9ec <csv_update+0x2e4>)
 801c776:	489e      	ldr	r0, [pc, #632]	@ (801c9f0 <csv_update+0x2e8>)
 801c778:	f7ff fd42 	bl	801c200 <Update_File>
 801c77c:	4603      	mov	r3, r0
 801c77e:	461a      	mov	r2, r3
 801c780:	4b98      	ldr	r3, [pc, #608]	@ (801c9e4 <csv_update+0x2dc>)
 801c782:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c784:	22ff      	movs	r2, #255	@ 0xff
 801c786:	2100      	movs	r1, #0
 801c788:	4898      	ldr	r0, [pc, #608]	@ (801c9ec <csv_update+0x2e4>)
 801c78a:	f002 fb15 	bl	801edb8 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801c78e:	4a99      	ldr	r2, [pc, #612]	@ (801c9f4 <csv_update+0x2ec>)
 801c790:	4995      	ldr	r1, [pc, #596]	@ (801c9e8 <csv_update+0x2e0>)
 801c792:	4896      	ldr	r0, [pc, #600]	@ (801c9ec <csv_update+0x2e4>)
 801c794:	f002 f9c6 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c798:	4994      	ldr	r1, [pc, #592]	@ (801c9ec <csv_update+0x2e4>)
 801c79a:	4895      	ldr	r0, [pc, #596]	@ (801c9f0 <csv_update+0x2e8>)
 801c79c:	f7ff fd30 	bl	801c200 <Update_File>
 801c7a0:	4603      	mov	r3, r0
 801c7a2:	461a      	mov	r2, r3
 801c7a4:	4b8f      	ldr	r3, [pc, #572]	@ (801c9e4 <csv_update+0x2dc>)
 801c7a6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7a8:	22ff      	movs	r2, #255	@ 0xff
 801c7aa:	2100      	movs	r1, #0
 801c7ac:	488f      	ldr	r0, [pc, #572]	@ (801c9ec <csv_update+0x2e4>)
 801c7ae:	f002 fb03 	bl	801edb8 <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c7b2:	783b      	ldrb	r3, [r7, #0]
 801c7b4:	461a      	mov	r2, r3
 801c7b6:	787b      	ldrb	r3, [r7, #1]
 801c7b8:	4619      	mov	r1, r3
				sTime.Seconds);
 801c7ba:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c7bc:	9300      	str	r3, [sp, #0]
 801c7be:	460b      	mov	r3, r1
 801c7c0:	498d      	ldr	r1, [pc, #564]	@ (801c9f8 <csv_update+0x2f0>)
 801c7c2:	488a      	ldr	r0, [pc, #552]	@ (801c9ec <csv_update+0x2e4>)
 801c7c4:	f002 f9ae 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7c8:	4988      	ldr	r1, [pc, #544]	@ (801c9ec <csv_update+0x2e4>)
 801c7ca:	4889      	ldr	r0, [pc, #548]	@ (801c9f0 <csv_update+0x2e8>)
 801c7cc:	f7ff fd18 	bl	801c200 <Update_File>
 801c7d0:	4603      	mov	r3, r0
 801c7d2:	461a      	mov	r2, r3
 801c7d4:	4b83      	ldr	r3, [pc, #524]	@ (801c9e4 <csv_update+0x2dc>)
 801c7d6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7d8:	22ff      	movs	r2, #255	@ 0xff
 801c7da:	2100      	movs	r1, #0
 801c7dc:	4883      	ldr	r0, [pc, #524]	@ (801c9ec <csv_update+0x2e4>)
 801c7de:	f002 faeb 	bl	801edb8 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801c7e2:	4a86      	ldr	r2, [pc, #536]	@ (801c9fc <csv_update+0x2f4>)
 801c7e4:	4980      	ldr	r1, [pc, #512]	@ (801c9e8 <csv_update+0x2e0>)
 801c7e6:	4881      	ldr	r0, [pc, #516]	@ (801c9ec <csv_update+0x2e4>)
 801c7e8:	f002 f99c 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7ec:	497f      	ldr	r1, [pc, #508]	@ (801c9ec <csv_update+0x2e4>)
 801c7ee:	4880      	ldr	r0, [pc, #512]	@ (801c9f0 <csv_update+0x2e8>)
 801c7f0:	f7ff fd06 	bl	801c200 <Update_File>
 801c7f4:	4603      	mov	r3, r0
 801c7f6:	461a      	mov	r2, r3
 801c7f8:	4b7a      	ldr	r3, [pc, #488]	@ (801c9e4 <csv_update+0x2dc>)
 801c7fa:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7fc:	22ff      	movs	r2, #255	@ 0xff
 801c7fe:	2100      	movs	r1, #0
 801c800:	487a      	ldr	r0, [pc, #488]	@ (801c9ec <csv_update+0x2e4>)
 801c802:	f002 fad9 	bl	801edb8 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.filename_ver_date);
 801c806:	4a7e      	ldr	r2, [pc, #504]	@ (801ca00 <csv_update+0x2f8>)
 801c808:	4977      	ldr	r1, [pc, #476]	@ (801c9e8 <csv_update+0x2e0>)
 801c80a:	4878      	ldr	r0, [pc, #480]	@ (801c9ec <csv_update+0x2e4>)
 801c80c:	f002 f98a 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c810:	4976      	ldr	r1, [pc, #472]	@ (801c9ec <csv_update+0x2e4>)
 801c812:	4877      	ldr	r0, [pc, #476]	@ (801c9f0 <csv_update+0x2e8>)
 801c814:	f7ff fcf4 	bl	801c200 <Update_File>
 801c818:	4603      	mov	r3, r0
 801c81a:	461a      	mov	r2, r3
 801c81c:	4b71      	ldr	r3, [pc, #452]	@ (801c9e4 <csv_update+0x2dc>)
 801c81e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c820:	22ff      	movs	r2, #255	@ 0xff
 801c822:	2100      	movs	r1, #0
 801c824:	4871      	ldr	r0, [pc, #452]	@ (801c9ec <csv_update+0x2e4>)
 801c826:	f002 fac7 	bl	801edb8 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801c82a:	4a76      	ldr	r2, [pc, #472]	@ (801ca04 <csv_update+0x2fc>)
 801c82c:	496e      	ldr	r1, [pc, #440]	@ (801c9e8 <csv_update+0x2e0>)
 801c82e:	486f      	ldr	r0, [pc, #444]	@ (801c9ec <csv_update+0x2e4>)
 801c830:	f002 f978 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c834:	496d      	ldr	r1, [pc, #436]	@ (801c9ec <csv_update+0x2e4>)
 801c836:	486e      	ldr	r0, [pc, #440]	@ (801c9f0 <csv_update+0x2e8>)
 801c838:	f7ff fce2 	bl	801c200 <Update_File>
 801c83c:	4603      	mov	r3, r0
 801c83e:	461a      	mov	r2, r3
 801c840:	4b68      	ldr	r3, [pc, #416]	@ (801c9e4 <csv_update+0x2dc>)
 801c842:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "%ld ,", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c844:	22ff      	movs	r2, #255	@ 0xff
 801c846:	2100      	movs	r1, #0
 801c848:	4868      	ldr	r0, [pc, #416]	@ (801c9ec <csv_update+0x2e4>)
 801c84a:	f002 fab5 	bl	801edb8 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.co2);
 801c84e:	4b6e      	ldr	r3, [pc, #440]	@ (801ca08 <csv_update+0x300>)
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	4618      	mov	r0, r3
 801c854:	f7e3 fe90 	bl	8000578 <__aeabi_f2d>
 801c858:	4602      	mov	r2, r0
 801c85a:	460b      	mov	r3, r1
 801c85c:	496b      	ldr	r1, [pc, #428]	@ (801ca0c <csv_update+0x304>)
 801c85e:	4863      	ldr	r0, [pc, #396]	@ (801c9ec <csv_update+0x2e4>)
 801c860:	f002 f960 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c864:	4961      	ldr	r1, [pc, #388]	@ (801c9ec <csv_update+0x2e4>)
 801c866:	4862      	ldr	r0, [pc, #392]	@ (801c9f0 <csv_update+0x2e8>)
 801c868:	f7ff fcca 	bl	801c200 <Update_File>
 801c86c:	4603      	mov	r3, r0
 801c86e:	461a      	mov	r2, r3
 801c870:	4b5c      	ldr	r3, [pc, #368]	@ (801c9e4 <csv_update+0x2dc>)
 801c872:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c874:	22ff      	movs	r2, #255	@ 0xff
 801c876:	2100      	movs	r1, #0
 801c878:	485c      	ldr	r0, [pc, #368]	@ (801c9ec <csv_update+0x2e4>)
 801c87a:	f002 fa9d 	bl	801edb8 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.temperature);
 801c87e:	4b62      	ldr	r3, [pc, #392]	@ (801ca08 <csv_update+0x300>)
 801c880:	685b      	ldr	r3, [r3, #4]
 801c882:	4618      	mov	r0, r3
 801c884:	f7e3 fe78 	bl	8000578 <__aeabi_f2d>
 801c888:	4602      	mov	r2, r0
 801c88a:	460b      	mov	r3, r1
 801c88c:	495f      	ldr	r1, [pc, #380]	@ (801ca0c <csv_update+0x304>)
 801c88e:	4857      	ldr	r0, [pc, #348]	@ (801c9ec <csv_update+0x2e4>)
 801c890:	f002 f948 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c894:	4955      	ldr	r1, [pc, #340]	@ (801c9ec <csv_update+0x2e4>)
 801c896:	4856      	ldr	r0, [pc, #344]	@ (801c9f0 <csv_update+0x2e8>)
 801c898:	f7ff fcb2 	bl	801c200 <Update_File>
 801c89c:	4603      	mov	r3, r0
 801c89e:	461a      	mov	r2, r3
 801c8a0:	4b50      	ldr	r3, [pc, #320]	@ (801c9e4 <csv_update+0x2dc>)
 801c8a2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c8a4:	22ff      	movs	r2, #255	@ 0xff
 801c8a6:	2100      	movs	r1, #0
 801c8a8:	4850      	ldr	r0, [pc, #320]	@ (801c9ec <csv_update+0x2e4>)
 801c8aa:	f002 fa85 	bl	801edb8 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.humidity);
 801c8ae:	4b56      	ldr	r3, [pc, #344]	@ (801ca08 <csv_update+0x300>)
 801c8b0:	689b      	ldr	r3, [r3, #8]
 801c8b2:	4618      	mov	r0, r3
 801c8b4:	f7e3 fe60 	bl	8000578 <__aeabi_f2d>
 801c8b8:	4602      	mov	r2, r0
 801c8ba:	460b      	mov	r3, r1
 801c8bc:	4953      	ldr	r1, [pc, #332]	@ (801ca0c <csv_update+0x304>)
 801c8be:	484b      	ldr	r0, [pc, #300]	@ (801c9ec <csv_update+0x2e4>)
 801c8c0:	f002 f930 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8c4:	4949      	ldr	r1, [pc, #292]	@ (801c9ec <csv_update+0x2e4>)
 801c8c6:	484a      	ldr	r0, [pc, #296]	@ (801c9f0 <csv_update+0x2e8>)
 801c8c8:	f7ff fc9a 	bl	801c200 <Update_File>
 801c8cc:	4603      	mov	r3, r0
 801c8ce:	461a      	mov	r2, r3
 801c8d0:	4b44      	ldr	r3, [pc, #272]	@ (801c9e4 <csv_update+0x2dc>)
 801c8d2:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c8d4:	22ff      	movs	r2, #255	@ 0xff
 801c8d6:	2100      	movs	r1, #0
 801c8d8:	4844      	ldr	r0, [pc, #272]	@ (801c9ec <csv_update+0x2e4>)
 801c8da:	f002 fa6d 	bl	801edb8 <memset>
		sprintf(buffer, "%s ,",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801c8de:	4b4a      	ldr	r3, [pc, #296]	@ (801ca08 <csv_update+0x300>)
 801c8e0:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "%s ,",
 801c8e2:	2b01      	cmp	r3, #1
 801c8e4:	d101      	bne.n	801c8ea <csv_update+0x1e2>
 801c8e6:	4b4a      	ldr	r3, [pc, #296]	@ (801ca10 <csv_update+0x308>)
 801c8e8:	e000      	b.n	801c8ec <csv_update+0x1e4>
 801c8ea:	4b4a      	ldr	r3, [pc, #296]	@ (801ca14 <csv_update+0x30c>)
 801c8ec:	461a      	mov	r2, r3
 801c8ee:	493e      	ldr	r1, [pc, #248]	@ (801c9e8 <csv_update+0x2e0>)
 801c8f0:	483e      	ldr	r0, [pc, #248]	@ (801c9ec <csv_update+0x2e4>)
 801c8f2:	f002 f917 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8f6:	493d      	ldr	r1, [pc, #244]	@ (801c9ec <csv_update+0x2e4>)
 801c8f8:	483d      	ldr	r0, [pc, #244]	@ (801c9f0 <csv_update+0x2e8>)
 801c8fa:	f7ff fc81 	bl	801c200 <Update_File>
 801c8fe:	4603      	mov	r3, r0
 801c900:	461a      	mov	r2, r3
 801c902:	4b38      	ldr	r3, [pc, #224]	@ (801c9e4 <csv_update+0x2dc>)
 801c904:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c906:	22ff      	movs	r2, #255	@ 0xff
 801c908:	2100      	movs	r1, #0
 801c90a:	4838      	ldr	r0, [pc, #224]	@ (801c9ec <csv_update+0x2e4>)
 801c90c:	f002 fa54 	bl	801edb8 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801c910:	4b3d      	ldr	r3, [pc, #244]	@ (801ca08 <csv_update+0x300>)
 801c912:	695b      	ldr	r3, [r3, #20]
 801c914:	4618      	mov	r0, r3
 801c916:	f7e3 fe2f 	bl	8000578 <__aeabi_f2d>
 801c91a:	4602      	mov	r2, r0
 801c91c:	460b      	mov	r3, r1
 801c91e:	493e      	ldr	r1, [pc, #248]	@ (801ca18 <csv_update+0x310>)
 801c920:	4832      	ldr	r0, [pc, #200]	@ (801c9ec <csv_update+0x2e4>)
 801c922:	f002 f8ff 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c926:	4931      	ldr	r1, [pc, #196]	@ (801c9ec <csv_update+0x2e4>)
 801c928:	4831      	ldr	r0, [pc, #196]	@ (801c9f0 <csv_update+0x2e8>)
 801c92a:	f7ff fc69 	bl	801c200 <Update_File>
 801c92e:	4603      	mov	r3, r0
 801c930:	461a      	mov	r2, r3
 801c932:	4b2c      	ldr	r3, [pc, #176]	@ (801c9e4 <csv_update+0x2dc>)
 801c934:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c936:	22ff      	movs	r2, #255	@ 0xff
 801c938:	2100      	movs	r1, #0
 801c93a:	482c      	ldr	r0, [pc, #176]	@ (801c9ec <csv_update+0x2e4>)
 801c93c:	f002 fa3c 	bl	801edb8 <memset>
		sprintf(buffer, "NONE ,");
 801c940:	4936      	ldr	r1, [pc, #216]	@ (801ca1c <csv_update+0x314>)
 801c942:	482a      	ldr	r0, [pc, #168]	@ (801c9ec <csv_update+0x2e4>)
 801c944:	f002 f8ee 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c948:	4928      	ldr	r1, [pc, #160]	@ (801c9ec <csv_update+0x2e4>)
 801c94a:	4829      	ldr	r0, [pc, #164]	@ (801c9f0 <csv_update+0x2e8>)
 801c94c:	f7ff fc58 	bl	801c200 <Update_File>
 801c950:	4603      	mov	r3, r0
 801c952:	461a      	mov	r2, r3
 801c954:	4b23      	ldr	r3, [pc, #140]	@ (801c9e4 <csv_update+0x2dc>)
 801c956:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c958:	22ff      	movs	r2, #255	@ 0xff
 801c95a:	2100      	movs	r1, #0
 801c95c:	4823      	ldr	r0, [pc, #140]	@ (801c9ec <csv_update+0x2e4>)
 801c95e:	f002 fa2b 	bl	801edb8 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801c962:	4b29      	ldr	r3, [pc, #164]	@ (801ca08 <csv_update+0x300>)
 801c964:	6a1b      	ldr	r3, [r3, #32]
 801c966:	4618      	mov	r0, r3
 801c968:	f7e3 fe06 	bl	8000578 <__aeabi_f2d>
 801c96c:	4602      	mov	r2, r0
 801c96e:	460b      	mov	r3, r1
 801c970:	4929      	ldr	r1, [pc, #164]	@ (801ca18 <csv_update+0x310>)
 801c972:	481e      	ldr	r0, [pc, #120]	@ (801c9ec <csv_update+0x2e4>)
 801c974:	f002 f8d6 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c978:	491c      	ldr	r1, [pc, #112]	@ (801c9ec <csv_update+0x2e4>)
 801c97a:	481d      	ldr	r0, [pc, #116]	@ (801c9f0 <csv_update+0x2e8>)
 801c97c:	f7ff fc40 	bl	801c200 <Update_File>
 801c980:	4603      	mov	r3, r0
 801c982:	461a      	mov	r2, r3
 801c984:	4b17      	ldr	r3, [pc, #92]	@ (801c9e4 <csv_update+0x2dc>)
 801c986:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c988:	22ff      	movs	r2, #255	@ 0xff
 801c98a:	2100      	movs	r1, #0
 801c98c:	4817      	ldr	r0, [pc, #92]	@ (801c9ec <csv_update+0x2e4>)
 801c98e:	f002 fa13 	bl	801edb8 <memset>
		sprintf(buffer, "\n");
 801c992:	4923      	ldr	r1, [pc, #140]	@ (801ca20 <csv_update+0x318>)
 801c994:	4815      	ldr	r0, [pc, #84]	@ (801c9ec <csv_update+0x2e4>)
 801c996:	f002 f8c5 	bl	801eb24 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c99a:	4914      	ldr	r1, [pc, #80]	@ (801c9ec <csv_update+0x2e4>)
 801c99c:	4814      	ldr	r0, [pc, #80]	@ (801c9f0 <csv_update+0x2e8>)
 801c99e:	f7ff fc2f 	bl	801c200 <Update_File>
 801c9a2:	4603      	mov	r3, r0
 801c9a4:	461a      	mov	r2, r3
 801c9a6:	4b0f      	ldr	r3, [pc, #60]	@ (801c9e4 <csv_update+0x2dc>)
 801c9a8:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c9aa:	480d      	ldr	r0, [pc, #52]	@ (801c9e0 <csv_update+0x2d8>)
 801c9ac:	f7ff fb66 	bl	801c07c <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c9b0:	4b0c      	ldr	r3, [pc, #48]	@ (801c9e4 <csv_update+0x2dc>)
 801c9b2:	781b      	ldrb	r3, [r3, #0]
 801c9b4:	b25a      	sxtb	r2, r3
 801c9b6:	4b14      	ldr	r3, [pc, #80]	@ (801ca08 <csv_update+0x300>)
 801c9b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c9bc:	bf00      	nop
 801c9be:	3718      	adds	r7, #24
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bd80      	pop	{r7, pc}
 801c9c4:	20001898 	.word	0x20001898
 801c9c8:	20002322 	.word	0x20002322
 801c9cc:	20002323 	.word	0x20002323
 801c9d0:	20002324 	.word	0x20002324
 801c9d4:	20002325 	.word	0x20002325
 801c9d8:	20002326 	.word	0x20002326
 801c9dc:	20002327 	.word	0x20002327
 801c9e0:	08024bd8 	.word	0x08024bd8
 801c9e4:	20002320 	.word	0x20002320
 801c9e8:	08024cec 	.word	0x08024cec
 801c9ec:	2000232c 	.word	0x2000232c
 801c9f0:	20001461 	.word	0x20001461
 801c9f4:	20001399 	.word	0x20001399
 801c9f8:	08024cf4 	.word	0x08024cf4
 801c9fc:	200013cb 	.word	0x200013cb
 801ca00:	200014c5 	.word	0x200014c5
 801ca04:	2000142f 	.word	0x2000142f
 801ca08:	20001530 	.word	0x20001530
 801ca0c:	08024d08 	.word	0x08024d08
 801ca10:	08024c90 	.word	0x08024c90
 801ca14:	08024c98 	.word	0x08024c98
 801ca18:	08024d10 	.word	0x08024d10
 801ca1c:	08024d18 	.word	0x08024d18
 801ca20:	08024d20 	.word	0x08024d20

0801ca24 <csv_header>:
void csv_header() {
 801ca24:	b580      	push	{r7, lr}
 801ca26:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801ca28:	485d      	ldr	r0, [pc, #372]	@ (801cba0 <csv_header+0x17c>)
 801ca2a:	f7ff fafb 	bl	801c024 <Mount_SD>
 801ca2e:	4603      	mov	r3, r0
 801ca30:	461a      	mov	r2, r3
 801ca32:	4b5c      	ldr	r3, [pc, #368]	@ (801cba4 <csv_header+0x180>)
 801ca34:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801ca36:	4b5b      	ldr	r3, [pc, #364]	@ (801cba4 <csv_header+0x180>)
 801ca38:	781b      	ldrb	r3, [r3, #0]
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	f040 80a7 	bne.w	801cb8e <csv_header+0x16a>


		sprintf(buffer, "devEUI ,");
 801ca40:	4959      	ldr	r1, [pc, #356]	@ (801cba8 <csv_header+0x184>)
 801ca42:	485a      	ldr	r0, [pc, #360]	@ (801cbac <csv_header+0x188>)
 801ca44:	f002 f86e 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca48:	4958      	ldr	r1, [pc, #352]	@ (801cbac <csv_header+0x188>)
 801ca4a:	4859      	ldr	r0, [pc, #356]	@ (801cbb0 <csv_header+0x18c>)
 801ca4c:	f7ff fbd8 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca50:	22ff      	movs	r2, #255	@ 0xff
 801ca52:	2100      	movs	r1, #0
 801ca54:	4855      	ldr	r0, [pc, #340]	@ (801cbac <csv_header+0x188>)
 801ca56:	f002 f9af 	bl	801edb8 <memset>
		sprintf(buffer, "id ,");
 801ca5a:	4956      	ldr	r1, [pc, #344]	@ (801cbb4 <csv_header+0x190>)
 801ca5c:	4853      	ldr	r0, [pc, #332]	@ (801cbac <csv_header+0x188>)
 801ca5e:	f002 f861 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca62:	4952      	ldr	r1, [pc, #328]	@ (801cbac <csv_header+0x188>)
 801ca64:	4852      	ldr	r0, [pc, #328]	@ (801cbb0 <csv_header+0x18c>)
 801ca66:	f7ff fbcb 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca6a:	22ff      	movs	r2, #255	@ 0xff
 801ca6c:	2100      	movs	r1, #0
 801ca6e:	484f      	ldr	r0, [pc, #316]	@ (801cbac <csv_header+0x188>)
 801ca70:	f002 f9a2 	bl	801edb8 <memset>
		sprintf(buffer, "timestamp ,");
 801ca74:	4950      	ldr	r1, [pc, #320]	@ (801cbb8 <csv_header+0x194>)
 801ca76:	484d      	ldr	r0, [pc, #308]	@ (801cbac <csv_header+0x188>)
 801ca78:	f002 f854 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca7c:	494b      	ldr	r1, [pc, #300]	@ (801cbac <csv_header+0x188>)
 801ca7e:	484c      	ldr	r0, [pc, #304]	@ (801cbb0 <csv_header+0x18c>)
 801ca80:	f7ff fbbe 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca84:	22ff      	movs	r2, #255	@ 0xff
 801ca86:	2100      	movs	r1, #0
 801ca88:	4848      	ldr	r0, [pc, #288]	@ (801cbac <csv_header+0x188>)
 801ca8a:	f002 f995 	bl	801edb8 <memset>
		sprintf(buffer, "location ,");
 801ca8e:	494b      	ldr	r1, [pc, #300]	@ (801cbbc <csv_header+0x198>)
 801ca90:	4846      	ldr	r0, [pc, #280]	@ (801cbac <csv_header+0x188>)
 801ca92:	f002 f847 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca96:	4945      	ldr	r1, [pc, #276]	@ (801cbac <csv_header+0x188>)
 801ca98:	4845      	ldr	r0, [pc, #276]	@ (801cbb0 <csv_header+0x18c>)
 801ca9a:	f7ff fbb1 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca9e:	22ff      	movs	r2, #255	@ 0xff
 801caa0:	2100      	movs	r1, #0
 801caa2:	4842      	ldr	r0, [pc, #264]	@ (801cbac <csv_header+0x188>)
 801caa4:	f002 f988 	bl	801edb8 <memset>
		sprintf(buffer, "Filename ,");
 801caa8:	4945      	ldr	r1, [pc, #276]	@ (801cbc0 <csv_header+0x19c>)
 801caaa:	4840      	ldr	r0, [pc, #256]	@ (801cbac <csv_header+0x188>)
 801caac:	f002 f83a 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cab0:	493e      	ldr	r1, [pc, #248]	@ (801cbac <csv_header+0x188>)
 801cab2:	483f      	ldr	r0, [pc, #252]	@ (801cbb0 <csv_header+0x18c>)
 801cab4:	f7ff fba4 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cab8:	22ff      	movs	r2, #255	@ 0xff
 801caba:	2100      	movs	r1, #0
 801cabc:	483b      	ldr	r0, [pc, #236]	@ (801cbac <csv_header+0x188>)
 801cabe:	f002 f97b 	bl	801edb8 <memset>
		sprintf(buffer, "group ,");
 801cac2:	4940      	ldr	r1, [pc, #256]	@ (801cbc4 <csv_header+0x1a0>)
 801cac4:	4839      	ldr	r0, [pc, #228]	@ (801cbac <csv_header+0x188>)
 801cac6:	f002 f82d 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801caca:	4938      	ldr	r1, [pc, #224]	@ (801cbac <csv_header+0x188>)
 801cacc:	4838      	ldr	r0, [pc, #224]	@ (801cbb0 <csv_header+0x18c>)
 801cace:	f7ff fb97 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cad2:	22ff      	movs	r2, #255	@ 0xff
 801cad4:	2100      	movs	r1, #0
 801cad6:	4835      	ldr	r0, [pc, #212]	@ (801cbac <csv_header+0x188>)
 801cad8:	f002 f96e 	bl	801edb8 <memset>
		sprintf(buffer, "co2 ,");
 801cadc:	493a      	ldr	r1, [pc, #232]	@ (801cbc8 <csv_header+0x1a4>)
 801cade:	4833      	ldr	r0, [pc, #204]	@ (801cbac <csv_header+0x188>)
 801cae0:	f002 f820 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cae4:	4931      	ldr	r1, [pc, #196]	@ (801cbac <csv_header+0x188>)
 801cae6:	4832      	ldr	r0, [pc, #200]	@ (801cbb0 <csv_header+0x18c>)
 801cae8:	f7ff fb8a 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801caec:	22ff      	movs	r2, #255	@ 0xff
 801caee:	2100      	movs	r1, #0
 801caf0:	482e      	ldr	r0, [pc, #184]	@ (801cbac <csv_header+0x188>)
 801caf2:	f002 f961 	bl	801edb8 <memset>
		sprintf(buffer, "temperature ,");
 801caf6:	4935      	ldr	r1, [pc, #212]	@ (801cbcc <csv_header+0x1a8>)
 801caf8:	482c      	ldr	r0, [pc, #176]	@ (801cbac <csv_header+0x188>)
 801cafa:	f002 f813 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cafe:	492b      	ldr	r1, [pc, #172]	@ (801cbac <csv_header+0x188>)
 801cb00:	482b      	ldr	r0, [pc, #172]	@ (801cbb0 <csv_header+0x18c>)
 801cb02:	f7ff fb7d 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb06:	22ff      	movs	r2, #255	@ 0xff
 801cb08:	2100      	movs	r1, #0
 801cb0a:	4828      	ldr	r0, [pc, #160]	@ (801cbac <csv_header+0x188>)
 801cb0c:	f002 f954 	bl	801edb8 <memset>
		sprintf(buffer, "humidity ,");
 801cb10:	492f      	ldr	r1, [pc, #188]	@ (801cbd0 <csv_header+0x1ac>)
 801cb12:	4826      	ldr	r0, [pc, #152]	@ (801cbac <csv_header+0x188>)
 801cb14:	f002 f806 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb18:	4924      	ldr	r1, [pc, #144]	@ (801cbac <csv_header+0x188>)
 801cb1a:	4825      	ldr	r0, [pc, #148]	@ (801cbb0 <csv_header+0x18c>)
 801cb1c:	f7ff fb70 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb20:	22ff      	movs	r2, #255	@ 0xff
 801cb22:	2100      	movs	r1, #0
 801cb24:	4821      	ldr	r0, [pc, #132]	@ (801cbac <csv_header+0x188>)
 801cb26:	f002 f947 	bl	801edb8 <memset>
		sprintf(buffer, "pir ,");
 801cb2a:	492a      	ldr	r1, [pc, #168]	@ (801cbd4 <csv_header+0x1b0>)
 801cb2c:	481f      	ldr	r0, [pc, #124]	@ (801cbac <csv_header+0x188>)
 801cb2e:	f001 fff9 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb32:	491e      	ldr	r1, [pc, #120]	@ (801cbac <csv_header+0x188>)
 801cb34:	481e      	ldr	r0, [pc, #120]	@ (801cbb0 <csv_header+0x18c>)
 801cb36:	f7ff fb63 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb3a:	22ff      	movs	r2, #255	@ 0xff
 801cb3c:	2100      	movs	r1, #0
 801cb3e:	481b      	ldr	r0, [pc, #108]	@ (801cbac <csv_header+0x188>)
 801cb40:	f002 f93a 	bl	801edb8 <memset>
		sprintf(buffer, "pm2.5 ,");
 801cb44:	4924      	ldr	r1, [pc, #144]	@ (801cbd8 <csv_header+0x1b4>)
 801cb46:	4819      	ldr	r0, [pc, #100]	@ (801cbac <csv_header+0x188>)
 801cb48:	f001 ffec 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb4c:	4917      	ldr	r1, [pc, #92]	@ (801cbac <csv_header+0x188>)
 801cb4e:	4818      	ldr	r0, [pc, #96]	@ (801cbb0 <csv_header+0x18c>)
 801cb50:	f7ff fb56 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb54:	22ff      	movs	r2, #255	@ 0xff
 801cb56:	2100      	movs	r1, #0
 801cb58:	4814      	ldr	r0, [pc, #80]	@ (801cbac <csv_header+0x188>)
 801cb5a:	f002 f92d 	bl	801edb8 <memset>
		sprintf(buffer, "port ,");
 801cb5e:	491f      	ldr	r1, [pc, #124]	@ (801cbdc <csv_header+0x1b8>)
 801cb60:	4812      	ldr	r0, [pc, #72]	@ (801cbac <csv_header+0x188>)
 801cb62:	f001 ffdf 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb66:	4911      	ldr	r1, [pc, #68]	@ (801cbac <csv_header+0x188>)
 801cb68:	4811      	ldr	r0, [pc, #68]	@ (801cbb0 <csv_header+0x18c>)
 801cb6a:	f7ff fb49 	bl	801c200 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb6e:	22ff      	movs	r2, #255	@ 0xff
 801cb70:	2100      	movs	r1, #0
 801cb72:	480e      	ldr	r0, [pc, #56]	@ (801cbac <csv_header+0x188>)
 801cb74:	f002 f920 	bl	801edb8 <memset>
		sprintf(buffer, "battery \n\n");
 801cb78:	4919      	ldr	r1, [pc, #100]	@ (801cbe0 <csv_header+0x1bc>)
 801cb7a:	480c      	ldr	r0, [pc, #48]	@ (801cbac <csv_header+0x188>)
 801cb7c:	f001 ffd2 	bl	801eb24 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb80:	490a      	ldr	r1, [pc, #40]	@ (801cbac <csv_header+0x188>)
 801cb82:	480b      	ldr	r0, [pc, #44]	@ (801cbb0 <csv_header+0x18c>)
 801cb84:	f7ff fb3c 	bl	801c200 <Update_File>

		Unmount_SD("/");
 801cb88:	4805      	ldr	r0, [pc, #20]	@ (801cba0 <csv_header+0x17c>)
 801cb8a:	f7ff fa77 	bl	801c07c <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801cb8e:	4b05      	ldr	r3, [pc, #20]	@ (801cba4 <csv_header+0x180>)
 801cb90:	781b      	ldrb	r3, [r3, #0]
 801cb92:	b25a      	sxtb	r2, r3
 801cb94:	4b13      	ldr	r3, [pc, #76]	@ (801cbe4 <csv_header+0x1c0>)
 801cb96:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

}
 801cb9a:	bf00      	nop
 801cb9c:	bd80      	pop	{r7, pc}
 801cb9e:	bf00      	nop
 801cba0:	08024bd8 	.word	0x08024bd8
 801cba4:	20002320 	.word	0x20002320
 801cba8:	08024d24 	.word	0x08024d24
 801cbac:	2000232c 	.word	0x2000232c
 801cbb0:	20001461 	.word	0x20001461
 801cbb4:	08024d30 	.word	0x08024d30
 801cbb8:	08024d38 	.word	0x08024d38
 801cbbc:	08024d44 	.word	0x08024d44
 801cbc0:	08024d50 	.word	0x08024d50
 801cbc4:	08024d5c 	.word	0x08024d5c
 801cbc8:	08024d64 	.word	0x08024d64
 801cbcc:	08024d6c 	.word	0x08024d6c
 801cbd0:	08024d7c 	.word	0x08024d7c
 801cbd4:	08024d88 	.word	0x08024d88
 801cbd8:	08024d90 	.word	0x08024d90
 801cbdc:	08024d98 	.word	0x08024d98
 801cbe0:	08024da0 	.word	0x08024da0
 801cbe4:	20001530 	.word	0x20001530

0801cbe8 <filesaving_process>:
uint8_t filesaving_process() {
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	af00      	add	r7, sp, #0
//	__disable_irq();

	 Mount_SD("/");
 801cbec:	481c      	ldr	r0, [pc, #112]	@ (801cc60 <filesaving_process+0x78>)
 801cbee:	f7ff fa19 	bl	801c024 <Mount_SD>
	 if(check_file_exists(_Flash_Packet.filename_with_format)) //if file does not exists then create it
 801cbf2:	481c      	ldr	r0, [pc, #112]	@ (801cc64 <filesaving_process+0x7c>)
 801cbf4:	f7ff fbc0 	bl	801c378 <check_file_exists>
 801cbf8:	4603      	mov	r3, r0
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d00c      	beq.n	801cc18 <filesaving_process+0x30>
	 {
		Unmount_SD("/");
 801cbfe:	4818      	ldr	r0, [pc, #96]	@ (801cc60 <filesaving_process+0x78>)
 801cc00:	f7ff fa3c 	bl	801c07c <Unmount_SD>
		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,_Flash_Packet.File_Format);
 801cc04:	4918      	ldr	r1, [pc, #96]	@ (801cc68 <filesaving_process+0x80>)
 801cc06:	4819      	ldr	r0, [pc, #100]	@ (801cc6c <filesaving_process+0x84>)
 801cc08:	f000 f838 	bl	801cc7c <createfile>
 801cc0c:	4603      	mov	r3, r0
 801cc0e:	461a      	mov	r2, r3
 801cc10:	4b17      	ldr	r3, [pc, #92]	@ (801cc70 <filesaving_process+0x88>)
 801cc12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801cc16:	e002      	b.n	801cc1e <filesaving_process+0x36>
	 }
	 else
	 {
		Unmount_SD("/");
 801cc18:	4811      	ldr	r0, [pc, #68]	@ (801cc60 <filesaving_process+0x78>)
 801cc1a:	f7ff fa2f 	bl	801c07c <Unmount_SD>
	 }




	memset(buffer, 0, sizeof(buffer));
 801cc1e:	22ff      	movs	r2, #255	@ 0xff
 801cc20:	2100      	movs	r1, #0
 801cc22:	4814      	ldr	r0, [pc, #80]	@ (801cc74 <filesaving_process+0x8c>)
 801cc24:	f002 f8c8 	bl	801edb8 <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801cc28:	4b11      	ldr	r3, [pc, #68]	@ (801cc70 <filesaving_process+0x88>)
 801cc2a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d002      	beq.n	801cc38 <filesaving_process+0x50>
		csv_update();
 801cc32:	f7ff fd69 	bl	801c708 <csv_update>
 801cc36:	e001      	b.n	801cc3c <filesaving_process+0x54>
	} else {
		json_update();
 801cc38:	f7ff fbb4 	bl	801c3a4 <json_update>
	}

	if (_RunTime_Packet.sd_card_disk_write_error != 0) //means there is error
 801cc3c:	4b0c      	ldr	r3, [pc, #48]	@ (801cc70 <filesaving_process+0x88>)
 801cc3e:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d006      	beq.n	801cc54 <filesaving_process+0x6c>
			{
		//blink red so user can know
		blink_red();
 801cc46:	f7e5 fa19 	bl	800207c <blink_red>
		datawritten = 2;
 801cc4a:	4b0b      	ldr	r3, [pc, #44]	@ (801cc78 <filesaving_process+0x90>)
 801cc4c:	2202      	movs	r2, #2
 801cc4e:	701a      	strb	r2, [r3, #0]
		return 1; //not working
 801cc50:	2301      	movs	r3, #1
 801cc52:	e003      	b.n	801cc5c <filesaving_process+0x74>
	} else //packet written succesfully
	{
		datawritten = 1;
 801cc54:	4b08      	ldr	r3, [pc, #32]	@ (801cc78 <filesaving_process+0x90>)
 801cc56:	2201      	movs	r2, #1
 801cc58:	701a      	strb	r2, [r3, #0]
	}

	return 0; //all good
 801cc5a:	2300      	movs	r3, #0
//	__enable_irq();
}
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	bd80      	pop	{r7, pc}
 801cc60:	08024bd8 	.word	0x08024bd8
 801cc64:	20001461 	.word	0x20001461
 801cc68:	20001330 	.word	0x20001330
 801cc6c:	200012cc 	.word	0x200012cc
 801cc70:	20001530 	.word	0x20001530
 801cc74:	2000232c 	.word	0x2000232c
 801cc78:	20002328 	.word	0x20002328

0801cc7c <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801cc7c:	b580      	push	{r7, lr}
 801cc7e:	b08c      	sub	sp, #48	@ 0x30
 801cc80:	af04      	add	r7, sp, #16
 801cc82:	6078      	str	r0, [r7, #4]
 801cc84:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801cc86:	f107 031c 	add.w	r3, r7, #28
 801cc8a:	2200      	movs	r2, #0
 801cc8c:	4619      	mov	r1, r3
 801cc8e:	4845      	ldr	r0, [pc, #276]	@ (801cda4 <createfile+0x128>)
 801cc90:	f7ec ff61 	bl	8009b56 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801cc94:	f107 0308 	add.w	r3, r7, #8
 801cc98:	2200      	movs	r2, #0
 801cc9a:	4619      	mov	r1, r3
 801cc9c:	4841      	ldr	r0, [pc, #260]	@ (801cda4 <createfile+0x128>)
 801cc9e:	f7ec fe78 	bl	8009992 <HAL_RTC_GetTime>


	//if rtc backup register has nothing or our filename with foirmat is not same as filename then create a file otheriwse just go forward
	if((HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) || !strstr(_Flash_Packet.filename_with_format,_Flash_Packet.File_Name)
 801cca2:	2101      	movs	r1, #1
 801cca4:	483f      	ldr	r0, [pc, #252]	@ (801cda4 <createfile+0x128>)
 801cca6:	f7ed fa07 	bl	800a0b8 <HAL_RTCEx_BKUPRead>
 801ccaa:	4603      	mov	r3, r0
 801ccac:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 801ccb0:	4293      	cmp	r3, r2
 801ccb2:	d11b      	bne.n	801ccec <createfile+0x70>
 801ccb4:	493c      	ldr	r1, [pc, #240]	@ (801cda8 <createfile+0x12c>)
 801ccb6:	483d      	ldr	r0, [pc, #244]	@ (801cdac <createfile+0x130>)
 801ccb8:	f002 f8f0 	bl	801ee9c <strstr>
 801ccbc:	4603      	mov	r3, r0
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d014      	beq.n	801ccec <createfile+0x70>
			|| _RunTime_Packet.year_changed || _RunTime_Packet.filename_changed || _RunTime_Packet.fileformat_changed || (_RunTime_Packet.sd_file_creation == -1))
 801ccc2:	4b3b      	ldr	r3, [pc, #236]	@ (801cdb0 <createfile+0x134>)
 801ccc4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d10f      	bne.n	801ccec <createfile+0x70>
 801cccc:	4b38      	ldr	r3, [pc, #224]	@ (801cdb0 <createfile+0x134>)
 801ccce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d10a      	bne.n	801ccec <createfile+0x70>
 801ccd6:	4b36      	ldr	r3, [pc, #216]	@ (801cdb0 <createfile+0x134>)
 801ccd8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d105      	bne.n	801ccec <createfile+0x70>
 801cce0:	4b33      	ldr	r3, [pc, #204]	@ (801cdb0 <createfile+0x134>)
 801cce2:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 801cce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ccea:	d121      	bne.n	801cd30 <createfile+0xb4>
	{
	  sprintf(_Flash_Packet.filename_with_format, "%s_%02d-%02d-%02d%s", filename,sDate.Year, sDate.Month, sDate.Date, fileformat);
 801ccec:	7ffb      	ldrb	r3, [r7, #31]
 801ccee:	4618      	mov	r0, r3
 801ccf0:	7f7b      	ldrb	r3, [r7, #29]
 801ccf2:	461a      	mov	r2, r3
 801ccf4:	7fbb      	ldrb	r3, [r7, #30]
 801ccf6:	4619      	mov	r1, r3
 801ccf8:	683b      	ldr	r3, [r7, #0]
 801ccfa:	9302      	str	r3, [sp, #8]
 801ccfc:	9101      	str	r1, [sp, #4]
 801ccfe:	9200      	str	r2, [sp, #0]
 801cd00:	4603      	mov	r3, r0
 801cd02:	687a      	ldr	r2, [r7, #4]
 801cd04:	492b      	ldr	r1, [pc, #172]	@ (801cdb4 <createfile+0x138>)
 801cd06:	4829      	ldr	r0, [pc, #164]	@ (801cdac <createfile+0x130>)
 801cd08:	f001 ff0c 	bl	801eb24 <siprintf>
	  sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,sDate.Month, sDate.Date);
 801cd0c:	7ffb      	ldrb	r3, [r7, #31]
 801cd0e:	4619      	mov	r1, r3
 801cd10:	7f7b      	ldrb	r3, [r7, #29]
 801cd12:	7fba      	ldrb	r2, [r7, #30]
 801cd14:	9201      	str	r2, [sp, #4]
 801cd16:	9300      	str	r3, [sp, #0]
 801cd18:	460b      	mov	r3, r1
 801cd1a:	687a      	ldr	r2, [r7, #4]
 801cd1c:	4926      	ldr	r1, [pc, #152]	@ (801cdb8 <createfile+0x13c>)
 801cd1e:	4827      	ldr	r0, [pc, #156]	@ (801cdbc <createfile+0x140>)
 801cd20:	f001 ff00 	bl	801eb24 <siprintf>
	  set_param_flags();
 801cd24:	4b26      	ldr	r3, [pc, #152]	@ (801cdc0 <createfile+0x144>)
 801cd26:	2201      	movs	r2, #1
 801cd28:	701a      	strb	r2, [r3, #0]
 801cd2a:	4b26      	ldr	r3, [pc, #152]	@ (801cdc4 <createfile+0x148>)
 801cd2c:	2201      	movs	r2, #1
 801cd2e:	701a      	strb	r2, [r3, #0]
	}
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801cd30:	4825      	ldr	r0, [pc, #148]	@ (801cdc8 <createfile+0x14c>)
 801cd32:	f7ff f977 	bl	801c024 <Mount_SD>
 801cd36:	4603      	mov	r3, r0
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d002      	beq.n	801cd42 <createfile+0xc6>
	} else {
		//	__enable_irq();
		return -1;
 801cd3c:	f04f 33ff 	mov.w	r3, #4294967295
 801cd40:	e02b      	b.n	801cd9a <createfile+0x11e>
	}
	Unmount_SD("/");
 801cd42:	4821      	ldr	r0, [pc, #132]	@ (801cdc8 <createfile+0x14c>)
 801cd44:	f7ff f99a 	bl	801c07c <Unmount_SD>



	fresult1 = Mount_SD("/");
 801cd48:	481f      	ldr	r0, [pc, #124]	@ (801cdc8 <createfile+0x14c>)
 801cd4a:	f7ff f96b 	bl	801c024 <Mount_SD>
 801cd4e:	4603      	mov	r3, r0
 801cd50:	461a      	mov	r2, r3
 801cd52:	4b1e      	ldr	r3, [pc, #120]	@ (801cdcc <createfile+0x150>)
 801cd54:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801cd56:	4b1d      	ldr	r3, [pc, #116]	@ (801cdcc <createfile+0x150>)
 801cd58:	781b      	ldrb	r3, [r3, #0]
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d119      	bne.n	801cd92 <createfile+0x116>





		fresult1 = Create_File(_Flash_Packet.filename_with_format);
 801cd5e:	4813      	ldr	r0, [pc, #76]	@ (801cdac <createfile+0x130>)
 801cd60:	f7ff f9b4 	bl	801c0cc <Create_File>
 801cd64:	4603      	mov	r3, r0
 801cd66:	461a      	mov	r2, r3
 801cd68:	4b18      	ldr	r3, [pc, #96]	@ (801cdcc <createfile+0x150>)
 801cd6a:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801cd6c:	4816      	ldr	r0, [pc, #88]	@ (801cdc8 <createfile+0x14c>)
 801cd6e:	f7ff f985 	bl	801c07c <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801cd72:	4b0f      	ldr	r3, [pc, #60]	@ (801cdb0 <createfile+0x134>)
 801cd74:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d00d      	beq.n	801cd98 <createfile+0x11c>
			if (file_already_exist) {
 801cd7c:	4b14      	ldr	r3, [pc, #80]	@ (801cdd0 <createfile+0x154>)
 801cd7e:	781b      	ldrb	r3, [r3, #0]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d003      	beq.n	801cd8c <createfile+0x110>
				file_already_exist = 0;
 801cd84:	4b12      	ldr	r3, [pc, #72]	@ (801cdd0 <createfile+0x154>)
 801cd86:	2200      	movs	r2, #0
 801cd88:	701a      	strb	r2, [r3, #0]
 801cd8a:	e005      	b.n	801cd98 <createfile+0x11c>
			} else {
				csv_header();  //json does not require an header only csv
 801cd8c:	f7ff fe4a 	bl	801ca24 <csv_header>
 801cd90:	e002      	b.n	801cd98 <createfile+0x11c>
			}
		}

	} else {
		//	__enable_irq();
		return -1;
 801cd92:	f04f 33ff 	mov.w	r3, #4294967295
 801cd96:	e000      	b.n	801cd9a <createfile+0x11e>
	}
//	__enable_irq();
	return 0;
 801cd98:	2300      	movs	r3, #0
}
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	3720      	adds	r7, #32
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	bd80      	pop	{r7, pc}
 801cda2:	bf00      	nop
 801cda4:	20001898 	.word	0x20001898
 801cda8:	200012cc 	.word	0x200012cc
 801cdac:	20001461 	.word	0x20001461
 801cdb0:	20001530 	.word	0x20001530
 801cdb4:	08024dac 	.word	0x08024dac
 801cdb8:	08024dc0 	.word	0x08024dc0
 801cdbc:	200014c5 	.word	0x200014c5
 801cdc0:	20001579 	.word	0x20001579
 801cdc4:	2000157a 	.word	0x2000157a
 801cdc8:	08024bd8 	.word	0x08024bd8
 801cdcc:	20002320 	.word	0x20002320
 801cdd0:	20002321 	.word	0x20002321

0801cdd4 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801cdd4:	b580      	push	{r7, lr}
 801cdd6:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801cdd8:	4905      	ldr	r1, [pc, #20]	@ (801cdf0 <MX_USB_DEVICE_DeInit+0x1c>)
 801cdda:	4806      	ldr	r0, [pc, #24]	@ (801cdf4 <MX_USB_DEVICE_DeInit+0x20>)
 801cddc:	f7f8 ff32 	bl	8015c44 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801cde0:	4804      	ldr	r0, [pc, #16]	@ (801cdf4 <MX_USB_DEVICE_DeInit+0x20>)
 801cde2:	f7fa ff28 	bl	8017c36 <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801cde6:	4803      	ldr	r0, [pc, #12]	@ (801cdf4 <MX_USB_DEVICE_DeInit+0x20>)
 801cde8:	f7fa feb3 	bl	8017b52 <USBD_DeInit>

}
 801cdec:	bf00      	nop
 801cdee:	bd80      	pop	{r7, pc}
 801cdf0:	2000011c 	.word	0x2000011c
 801cdf4:	2000242c 	.word	0x2000242c

0801cdf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cdf8:	b580      	push	{r7, lr}
 801cdfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cdfc:	2200      	movs	r2, #0
 801cdfe:	4912      	ldr	r1, [pc, #72]	@ (801ce48 <MX_USB_DEVICE_Init+0x50>)
 801ce00:	4812      	ldr	r0, [pc, #72]	@ (801ce4c <MX_USB_DEVICE_Init+0x54>)
 801ce02:	f7fa fe76 	bl	8017af2 <USBD_Init>
 801ce06:	4603      	mov	r3, r0
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	d001      	beq.n	801ce10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801ce0c:	f7e6 fc3a 	bl	8003684 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801ce10:	490f      	ldr	r1, [pc, #60]	@ (801ce50 <MX_USB_DEVICE_Init+0x58>)
 801ce12:	480e      	ldr	r0, [pc, #56]	@ (801ce4c <MX_USB_DEVICE_Init+0x54>)
 801ce14:	f7fa fecd 	bl	8017bb2 <USBD_RegisterClass>
 801ce18:	4603      	mov	r3, r0
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d001      	beq.n	801ce22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801ce1e:	f7e6 fc31 	bl	8003684 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801ce22:	490c      	ldr	r1, [pc, #48]	@ (801ce54 <MX_USB_DEVICE_Init+0x5c>)
 801ce24:	4809      	ldr	r0, [pc, #36]	@ (801ce4c <MX_USB_DEVICE_Init+0x54>)
 801ce26:	f7f9 f915 	bl	8016054 <USBD_MSC_RegisterStorage>
 801ce2a:	4603      	mov	r3, r0
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d001      	beq.n	801ce34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801ce30:	f7e6 fc28 	bl	8003684 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801ce34:	4805      	ldr	r0, [pc, #20]	@ (801ce4c <MX_USB_DEVICE_Init+0x54>)
 801ce36:	f7fa fef2 	bl	8017c1e <USBD_Start>
 801ce3a:	4603      	mov	r3, r0
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d001      	beq.n	801ce44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801ce40:	f7e6 fc20 	bl	8003684 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801ce44:	bf00      	nop
 801ce46:	bd80      	pop	{r7, pc}
 801ce48:	200000cc 	.word	0x200000cc
 801ce4c:	2000242c 	.word	0x2000242c
 801ce50:	2000004c 	.word	0x2000004c
 801ce54:	2000011c 	.word	0x2000011c

0801ce58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce58:	b480      	push	{r7}
 801ce5a:	b083      	sub	sp, #12
 801ce5c:	af00      	add	r7, sp, #0
 801ce5e:	4603      	mov	r3, r0
 801ce60:	6039      	str	r1, [r7, #0]
 801ce62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ce64:	683b      	ldr	r3, [r7, #0]
 801ce66:	2212      	movs	r2, #18
 801ce68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801ce6a:	4b03      	ldr	r3, [pc, #12]	@ (801ce78 <USBD_FS_DeviceDescriptor+0x20>)
}
 801ce6c:	4618      	mov	r0, r3
 801ce6e:	370c      	adds	r7, #12
 801ce70:	46bd      	mov	sp, r7
 801ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce76:	4770      	bx	lr
 801ce78:	200000e8 	.word	0x200000e8

0801ce7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce7c:	b480      	push	{r7}
 801ce7e:	b083      	sub	sp, #12
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	4603      	mov	r3, r0
 801ce84:	6039      	str	r1, [r7, #0]
 801ce86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ce88:	683b      	ldr	r3, [r7, #0]
 801ce8a:	2204      	movs	r2, #4
 801ce8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ce8e:	4b03      	ldr	r3, [pc, #12]	@ (801ce9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801ce90:	4618      	mov	r0, r3
 801ce92:	370c      	adds	r7, #12
 801ce94:	46bd      	mov	sp, r7
 801ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce9a:	4770      	bx	lr
 801ce9c:	200000fc 	.word	0x200000fc

0801cea0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cea0:	b580      	push	{r7, lr}
 801cea2:	b082      	sub	sp, #8
 801cea4:	af00      	add	r7, sp, #0
 801cea6:	4603      	mov	r3, r0
 801cea8:	6039      	str	r1, [r7, #0]
 801ceaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ceac:	79fb      	ldrb	r3, [r7, #7]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d105      	bne.n	801cebe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ceb2:	683a      	ldr	r2, [r7, #0]
 801ceb4:	4907      	ldr	r1, [pc, #28]	@ (801ced4 <USBD_FS_ProductStrDescriptor+0x34>)
 801ceb6:	4808      	ldr	r0, [pc, #32]	@ (801ced8 <USBD_FS_ProductStrDescriptor+0x38>)
 801ceb8:	f7fc f87c 	bl	8018fb4 <USBD_GetString>
 801cebc:	e004      	b.n	801cec8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cebe:	683a      	ldr	r2, [r7, #0]
 801cec0:	4904      	ldr	r1, [pc, #16]	@ (801ced4 <USBD_FS_ProductStrDescriptor+0x34>)
 801cec2:	4805      	ldr	r0, [pc, #20]	@ (801ced8 <USBD_FS_ProductStrDescriptor+0x38>)
 801cec4:	f7fc f876 	bl	8018fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cec8:	4b02      	ldr	r3, [pc, #8]	@ (801ced4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801ceca:	4618      	mov	r0, r3
 801cecc:	3708      	adds	r7, #8
 801cece:	46bd      	mov	sp, r7
 801ced0:	bd80      	pop	{r7, pc}
 801ced2:	bf00      	nop
 801ced4:	20002708 	.word	0x20002708
 801ced8:	08024dd4 	.word	0x08024dd4

0801cedc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cedc:	b580      	push	{r7, lr}
 801cede:	b082      	sub	sp, #8
 801cee0:	af00      	add	r7, sp, #0
 801cee2:	4603      	mov	r3, r0
 801cee4:	6039      	str	r1, [r7, #0]
 801cee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cee8:	683a      	ldr	r2, [r7, #0]
 801ceea:	4904      	ldr	r1, [pc, #16]	@ (801cefc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801ceec:	4804      	ldr	r0, [pc, #16]	@ (801cf00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ceee:	f7fc f861 	bl	8018fb4 <USBD_GetString>
  return USBD_StrDesc;
 801cef2:	4b02      	ldr	r3, [pc, #8]	@ (801cefc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801cef4:	4618      	mov	r0, r3
 801cef6:	3708      	adds	r7, #8
 801cef8:	46bd      	mov	sp, r7
 801cefa:	bd80      	pop	{r7, pc}
 801cefc:	20002708 	.word	0x20002708
 801cf00:	08024de8 	.word	0x08024de8

0801cf04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf04:	b580      	push	{r7, lr}
 801cf06:	b082      	sub	sp, #8
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	4603      	mov	r3, r0
 801cf0c:	6039      	str	r1, [r7, #0]
 801cf0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801cf10:	683b      	ldr	r3, [r7, #0]
 801cf12:	221a      	movs	r2, #26
 801cf14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801cf16:	f000 f843 	bl	801cfa0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801cf1a:	4b02      	ldr	r3, [pc, #8]	@ (801cf24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	3708      	adds	r7, #8
 801cf20:	46bd      	mov	sp, r7
 801cf22:	bd80      	pop	{r7, pc}
 801cf24:	20000100 	.word	0x20000100

0801cf28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf28:	b580      	push	{r7, lr}
 801cf2a:	b082      	sub	sp, #8
 801cf2c:	af00      	add	r7, sp, #0
 801cf2e:	4603      	mov	r3, r0
 801cf30:	6039      	str	r1, [r7, #0]
 801cf32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801cf34:	79fb      	ldrb	r3, [r7, #7]
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d105      	bne.n	801cf46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cf3a:	683a      	ldr	r2, [r7, #0]
 801cf3c:	4907      	ldr	r1, [pc, #28]	@ (801cf5c <USBD_FS_ConfigStrDescriptor+0x34>)
 801cf3e:	4808      	ldr	r0, [pc, #32]	@ (801cf60 <USBD_FS_ConfigStrDescriptor+0x38>)
 801cf40:	f7fc f838 	bl	8018fb4 <USBD_GetString>
 801cf44:	e004      	b.n	801cf50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cf46:	683a      	ldr	r2, [r7, #0]
 801cf48:	4904      	ldr	r1, [pc, #16]	@ (801cf5c <USBD_FS_ConfigStrDescriptor+0x34>)
 801cf4a:	4805      	ldr	r0, [pc, #20]	@ (801cf60 <USBD_FS_ConfigStrDescriptor+0x38>)
 801cf4c:	f7fc f832 	bl	8018fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cf50:	4b02      	ldr	r3, [pc, #8]	@ (801cf5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801cf52:	4618      	mov	r0, r3
 801cf54:	3708      	adds	r7, #8
 801cf56:	46bd      	mov	sp, r7
 801cf58:	bd80      	pop	{r7, pc}
 801cf5a:	bf00      	nop
 801cf5c:	20002708 	.word	0x20002708
 801cf60:	08024dfc 	.word	0x08024dfc

0801cf64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf64:	b580      	push	{r7, lr}
 801cf66:	b082      	sub	sp, #8
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	4603      	mov	r3, r0
 801cf6c:	6039      	str	r1, [r7, #0]
 801cf6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cf70:	79fb      	ldrb	r3, [r7, #7]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d105      	bne.n	801cf82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cf76:	683a      	ldr	r2, [r7, #0]
 801cf78:	4907      	ldr	r1, [pc, #28]	@ (801cf98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cf7a:	4808      	ldr	r0, [pc, #32]	@ (801cf9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cf7c:	f7fc f81a 	bl	8018fb4 <USBD_GetString>
 801cf80:	e004      	b.n	801cf8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cf82:	683a      	ldr	r2, [r7, #0]
 801cf84:	4904      	ldr	r1, [pc, #16]	@ (801cf98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cf86:	4805      	ldr	r0, [pc, #20]	@ (801cf9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cf88:	f7fc f814 	bl	8018fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cf8c:	4b02      	ldr	r3, [pc, #8]	@ (801cf98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801cf8e:	4618      	mov	r0, r3
 801cf90:	3708      	adds	r7, #8
 801cf92:	46bd      	mov	sp, r7
 801cf94:	bd80      	pop	{r7, pc}
 801cf96:	bf00      	nop
 801cf98:	20002708 	.word	0x20002708
 801cf9c:	08024e08 	.word	0x08024e08

0801cfa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cfa0:	b580      	push	{r7, lr}
 801cfa2:	b084      	sub	sp, #16
 801cfa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 801cfa6:	68fa      	ldr	r2, [r7, #12]
 801cfa8:	68bb      	ldr	r3, [r7, #8]
 801cfaa:	4413      	add	r3, r2
 801cfac:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d009      	beq.n	801cfc8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cfb4:	2208      	movs	r2, #8
 801cfb6:	4906      	ldr	r1, [pc, #24]	@ (801cfd0 <Get_SerialNum+0x30>)
 801cfb8:	68f8      	ldr	r0, [r7, #12]
 801cfba:	f000 f80d 	bl	801cfd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cfbe:	2204      	movs	r2, #4
 801cfc0:	4904      	ldr	r1, [pc, #16]	@ (801cfd4 <Get_SerialNum+0x34>)
 801cfc2:	6878      	ldr	r0, [r7, #4]
 801cfc4:	f000 f808 	bl	801cfd8 <IntToUnicode>
  }
}
 801cfc8:	bf00      	nop
 801cfca:	3710      	adds	r7, #16
 801cfcc:	46bd      	mov	sp, r7
 801cfce:	bd80      	pop	{r7, pc}
 801cfd0:	20000102 	.word	0x20000102
 801cfd4:	20000112 	.word	0x20000112

0801cfd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cfd8:	b480      	push	{r7}
 801cfda:	b087      	sub	sp, #28
 801cfdc:	af00      	add	r7, sp, #0
 801cfde:	60f8      	str	r0, [r7, #12]
 801cfe0:	60b9      	str	r1, [r7, #8]
 801cfe2:	4613      	mov	r3, r2
 801cfe4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801cfe6:	2300      	movs	r3, #0
 801cfe8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801cfea:	2300      	movs	r3, #0
 801cfec:	75fb      	strb	r3, [r7, #23]
 801cfee:	e027      	b.n	801d040 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801cff0:	68fb      	ldr	r3, [r7, #12]
 801cff2:	0f1b      	lsrs	r3, r3, #28
 801cff4:	2b09      	cmp	r3, #9
 801cff6:	d80b      	bhi.n	801d010 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	0f1b      	lsrs	r3, r3, #28
 801cffc:	b2da      	uxtb	r2, r3
 801cffe:	7dfb      	ldrb	r3, [r7, #23]
 801d000:	005b      	lsls	r3, r3, #1
 801d002:	4619      	mov	r1, r3
 801d004:	68bb      	ldr	r3, [r7, #8]
 801d006:	440b      	add	r3, r1
 801d008:	3230      	adds	r2, #48	@ 0x30
 801d00a:	b2d2      	uxtb	r2, r2
 801d00c:	701a      	strb	r2, [r3, #0]
 801d00e:	e00a      	b.n	801d026 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	0f1b      	lsrs	r3, r3, #28
 801d014:	b2da      	uxtb	r2, r3
 801d016:	7dfb      	ldrb	r3, [r7, #23]
 801d018:	005b      	lsls	r3, r3, #1
 801d01a:	4619      	mov	r1, r3
 801d01c:	68bb      	ldr	r3, [r7, #8]
 801d01e:	440b      	add	r3, r1
 801d020:	3237      	adds	r2, #55	@ 0x37
 801d022:	b2d2      	uxtb	r2, r2
 801d024:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d026:	68fb      	ldr	r3, [r7, #12]
 801d028:	011b      	lsls	r3, r3, #4
 801d02a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d02c:	7dfb      	ldrb	r3, [r7, #23]
 801d02e:	005b      	lsls	r3, r3, #1
 801d030:	3301      	adds	r3, #1
 801d032:	68ba      	ldr	r2, [r7, #8]
 801d034:	4413      	add	r3, r2
 801d036:	2200      	movs	r2, #0
 801d038:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d03a:	7dfb      	ldrb	r3, [r7, #23]
 801d03c:	3301      	adds	r3, #1
 801d03e:	75fb      	strb	r3, [r7, #23]
 801d040:	7dfa      	ldrb	r2, [r7, #23]
 801d042:	79fb      	ldrb	r3, [r7, #7]
 801d044:	429a      	cmp	r2, r3
 801d046:	d3d3      	bcc.n	801cff0 <IntToUnicode+0x18>
  }
}
 801d048:	bf00      	nop
 801d04a:	bf00      	nop
 801d04c:	371c      	adds	r7, #28
 801d04e:	46bd      	mov	sp, r7
 801d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d054:	4770      	bx	lr

0801d056 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801d056:	b480      	push	{r7}
 801d058:	b083      	sub	sp, #12
 801d05a:	af00      	add	r7, sp, #0
 801d05c:	4603      	mov	r3, r0
 801d05e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801d060:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801d062:	4618      	mov	r0, r3
 801d064:	370c      	adds	r7, #12
 801d066:	46bd      	mov	sp, r7
 801d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d06c:	4770      	bx	lr
	...

0801d070 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801d070:	b580      	push	{r7, lr}
 801d072:	b08e      	sub	sp, #56	@ 0x38
 801d074:	af00      	add	r7, sp, #0
 801d076:	4603      	mov	r3, r0
 801d078:	60b9      	str	r1, [r7, #8]
 801d07a:	607a      	str	r2, [r7, #4]
 801d07c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801d07e:	23ff      	movs	r3, #255	@ 0xff
 801d080:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801d084:	f107 0314 	add.w	r3, r7, #20
 801d088:	4619      	mov	r1, r3
 801d08a:	480a      	ldr	r0, [pc, #40]	@ (801d0b4 <STORAGE_GetCapacity_FS+0x44>)
 801d08c:	f7ed fdfe 	bl	800ac8c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801d090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d092:	1e5a      	subs	r2, r3, #1
 801d094:	68bb      	ldr	r3, [r7, #8]
 801d096:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801d098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d09a:	b29a      	uxth	r2, r3
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  return ret;
 801d0a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	3738      	adds	r7, #56	@ 0x38
 801d0ae:	46bd      	mov	sp, r7
 801d0b0:	bd80      	pop	{r7, pc}
 801d0b2:	bf00      	nop
 801d0b4:	200018b8 	.word	0x200018b8

0801d0b8 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801d0b8:	b480      	push	{r7}
 801d0ba:	b083      	sub	sp, #12
 801d0bc:	af00      	add	r7, sp, #0
 801d0be:	4603      	mov	r3, r0
 801d0c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801d0c2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d0c4:	4618      	mov	r0, r3
 801d0c6:	370c      	adds	r7, #12
 801d0c8:	46bd      	mov	sp, r7
 801d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ce:	4770      	bx	lr

0801d0d0 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801d0d0:	b480      	push	{r7}
 801d0d2:	b083      	sub	sp, #12
 801d0d4:	af00      	add	r7, sp, #0
 801d0d6:	4603      	mov	r3, r0
 801d0d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801d0da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d0dc:	4618      	mov	r0, r3
 801d0de:	370c      	adds	r7, #12
 801d0e0:	46bd      	mov	sp, r7
 801d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0e6:	4770      	bx	lr

0801d0e8 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b088      	sub	sp, #32
 801d0ec:	af02      	add	r7, sp, #8
 801d0ee:	60b9      	str	r1, [r7, #8]
 801d0f0:	607a      	str	r2, [r7, #4]
 801d0f2:	461a      	mov	r2, r3
 801d0f4:	4603      	mov	r3, r0
 801d0f6:	73fb      	strb	r3, [r7, #15]
 801d0f8:	4613      	mov	r3, r2
 801d0fa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801d0fc:	23ff      	movs	r3, #255	@ 0xff
 801d0fe:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801d100:	f7e7 f80a 	bl	8004118 <HAL_GetTick>
 801d104:	4603      	mov	r3, r0
 801d106:	4a0d      	ldr	r2, [pc, #52]	@ (801d13c <STORAGE_Read_FS+0x54>)
 801d108:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801d10a:	89bb      	ldrh	r3, [r7, #12]
 801d10c:	f04f 32ff 	mov.w	r2, #4294967295
 801d110:	9200      	str	r2, [sp, #0]
 801d112:	687a      	ldr	r2, [r7, #4]
 801d114:	68b9      	ldr	r1, [r7, #8]
 801d116:	480a      	ldr	r0, [pc, #40]	@ (801d140 <STORAGE_Read_FS+0x58>)
 801d118:	f7ed f8a0 	bl	800a25c <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d11c:	bf00      	nop
 801d11e:	4808      	ldr	r0, [pc, #32]	@ (801d140 <STORAGE_Read_FS+0x58>)
 801d120:	f7ed fde0 	bl	800ace4 <HAL_SD_GetCardState>
 801d124:	4603      	mov	r3, r0
 801d126:	2b04      	cmp	r3, #4
 801d128:	d1f9      	bne.n	801d11e <STORAGE_Read_FS+0x36>
	  ret = 0;
 801d12a:	2300      	movs	r3, #0
 801d12c:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d12e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801d132:	4618      	mov	r0, r3
 801d134:	3718      	adds	r7, #24
 801d136:	46bd      	mov	sp, r7
 801d138:	bd80      	pop	{r7, pc}
 801d13a:	bf00      	nop
 801d13c:	200017c0 	.word	0x200017c0
 801d140:	200018b8 	.word	0x200018b8

0801d144 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d144:	b580      	push	{r7, lr}
 801d146:	b088      	sub	sp, #32
 801d148:	af02      	add	r7, sp, #8
 801d14a:	60b9      	str	r1, [r7, #8]
 801d14c:	607a      	str	r2, [r7, #4]
 801d14e:	461a      	mov	r2, r3
 801d150:	4603      	mov	r3, r0
 801d152:	73fb      	strb	r3, [r7, #15]
 801d154:	4613      	mov	r3, r2
 801d156:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801d158:	23ff      	movs	r3, #255	@ 0xff
 801d15a:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801d15c:	89bb      	ldrh	r3, [r7, #12]
 801d15e:	f04f 32ff 	mov.w	r2, #4294967295
 801d162:	9200      	str	r2, [sp, #0]
 801d164:	687a      	ldr	r2, [r7, #4]
 801d166:	68b9      	ldr	r1, [r7, #8]
 801d168:	4808      	ldr	r0, [pc, #32]	@ (801d18c <STORAGE_Write_FS+0x48>)
 801d16a:	f7ed fa5d 	bl	800a628 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d16e:	bf00      	nop
 801d170:	4806      	ldr	r0, [pc, #24]	@ (801d18c <STORAGE_Write_FS+0x48>)
 801d172:	f7ed fdb7 	bl	800ace4 <HAL_SD_GetCardState>
 801d176:	4603      	mov	r3, r0
 801d178:	2b04      	cmp	r3, #4
 801d17a:	d1f9      	bne.n	801d170 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801d17c:	2300      	movs	r3, #0
 801d17e:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d180:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801d184:	4618      	mov	r0, r3
 801d186:	3718      	adds	r7, #24
 801d188:	46bd      	mov	sp, r7
 801d18a:	bd80      	pop	{r7, pc}
 801d18c:	200018b8 	.word	0x200018b8

0801d190 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801d190:	b480      	push	{r7}
 801d192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801d194:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801d196:	4618      	mov	r0, r3
 801d198:	46bd      	mov	sp, r7
 801d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d19e:	4770      	bx	lr

0801d1a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d1a0:	b580      	push	{r7, lr}
 801d1a2:	b08a      	sub	sp, #40	@ 0x28
 801d1a4:	af00      	add	r7, sp, #0
 801d1a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d1a8:	f107 0314 	add.w	r3, r7, #20
 801d1ac:	2200      	movs	r2, #0
 801d1ae:	601a      	str	r2, [r3, #0]
 801d1b0:	605a      	str	r2, [r3, #4]
 801d1b2:	609a      	str	r2, [r3, #8]
 801d1b4:	60da      	str	r2, [r3, #12]
 801d1b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	681b      	ldr	r3, [r3, #0]
 801d1bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d1c0:	d13a      	bne.n	801d238 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d1c2:	2300      	movs	r3, #0
 801d1c4:	613b      	str	r3, [r7, #16]
 801d1c6:	4b1e      	ldr	r3, [pc, #120]	@ (801d240 <HAL_PCD_MspInit+0xa0>)
 801d1c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d1ca:	4a1d      	ldr	r2, [pc, #116]	@ (801d240 <HAL_PCD_MspInit+0xa0>)
 801d1cc:	f043 0301 	orr.w	r3, r3, #1
 801d1d0:	6313      	str	r3, [r2, #48]	@ 0x30
 801d1d2:	4b1b      	ldr	r3, [pc, #108]	@ (801d240 <HAL_PCD_MspInit+0xa0>)
 801d1d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d1d6:	f003 0301 	and.w	r3, r3, #1
 801d1da:	613b      	str	r3, [r7, #16]
 801d1dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d1de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801d1e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d1e4:	2302      	movs	r3, #2
 801d1e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d1ec:	2303      	movs	r3, #3
 801d1ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d1f0:	230a      	movs	r3, #10
 801d1f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d1f4:	f107 0314 	add.w	r3, r7, #20
 801d1f8:	4619      	mov	r1, r3
 801d1fa:	4812      	ldr	r0, [pc, #72]	@ (801d244 <HAL_PCD_MspInit+0xa4>)
 801d1fc:	f7e8 fcf0 	bl	8005be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d200:	4b0f      	ldr	r3, [pc, #60]	@ (801d240 <HAL_PCD_MspInit+0xa0>)
 801d202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d204:	4a0e      	ldr	r2, [pc, #56]	@ (801d240 <HAL_PCD_MspInit+0xa0>)
 801d206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d20a:	6353      	str	r3, [r2, #52]	@ 0x34
 801d20c:	2300      	movs	r3, #0
 801d20e:	60fb      	str	r3, [r7, #12]
 801d210:	4b0b      	ldr	r3, [pc, #44]	@ (801d240 <HAL_PCD_MspInit+0xa0>)
 801d212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d214:	4a0a      	ldr	r2, [pc, #40]	@ (801d240 <HAL_PCD_MspInit+0xa0>)
 801d216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d21a:	6453      	str	r3, [r2, #68]	@ 0x44
 801d21c:	4b08      	ldr	r3, [pc, #32]	@ (801d240 <HAL_PCD_MspInit+0xa0>)
 801d21e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801d224:	60fb      	str	r3, [r7, #12]
 801d226:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801d228:	2200      	movs	r2, #0
 801d22a:	2100      	movs	r1, #0
 801d22c:	2043      	movs	r0, #67	@ 0x43
 801d22e:	f7e7 fd56 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d232:	2043      	movs	r0, #67	@ 0x43
 801d234:	f7e7 fd6f 	bl	8004d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d238:	bf00      	nop
 801d23a:	3728      	adds	r7, #40	@ 0x28
 801d23c:	46bd      	mov	sp, r7
 801d23e:	bd80      	pop	{r7, pc}
 801d240:	40023800 	.word	0x40023800
 801d244:	40020000 	.word	0x40020000

0801d248 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801d248:	b580      	push	{r7, lr}
 801d24a:	b082      	sub	sp, #8
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	681b      	ldr	r3, [r3, #0]
 801d254:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d258:	d10d      	bne.n	801d276 <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801d25a:	4b09      	ldr	r3, [pc, #36]	@ (801d280 <HAL_PCD_MspDeInit+0x38>)
 801d25c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d25e:	4a08      	ldr	r2, [pc, #32]	@ (801d280 <HAL_PCD_MspDeInit+0x38>)
 801d260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d264:	6353      	str	r3, [r2, #52]	@ 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801d266:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801d26a:	4806      	ldr	r0, [pc, #24]	@ (801d284 <HAL_PCD_MspDeInit+0x3c>)
 801d26c:	f7e8 fe3c 	bl	8005ee8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801d270:	2043      	movs	r0, #67	@ 0x43
 801d272:	f7e7 fd5e 	bl	8004d32 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801d276:	bf00      	nop
 801d278:	3708      	adds	r7, #8
 801d27a:	46bd      	mov	sp, r7
 801d27c:	bd80      	pop	{r7, pc}
 801d27e:	bf00      	nop
 801d280:	40023800 	.word	0x40023800
 801d284:	40020000 	.word	0x40020000

0801d288 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d288:	b580      	push	{r7, lr}
 801d28a:	b082      	sub	sp, #8
 801d28c:	af00      	add	r7, sp, #0
 801d28e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801d29c:	4619      	mov	r1, r3
 801d29e:	4610      	mov	r0, r2
 801d2a0:	f7fa fd25 	bl	8017cee <USBD_LL_SetupStage>
}
 801d2a4:	bf00      	nop
 801d2a6:	3708      	adds	r7, #8
 801d2a8:	46bd      	mov	sp, r7
 801d2aa:	bd80      	pop	{r7, pc}

0801d2ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b082      	sub	sp, #8
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
 801d2b4:	460b      	mov	r3, r1
 801d2b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d2be:	78fa      	ldrb	r2, [r7, #3]
 801d2c0:	6879      	ldr	r1, [r7, #4]
 801d2c2:	4613      	mov	r3, r2
 801d2c4:	00db      	lsls	r3, r3, #3
 801d2c6:	4413      	add	r3, r2
 801d2c8:	009b      	lsls	r3, r3, #2
 801d2ca:	440b      	add	r3, r1
 801d2cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d2d0:	681a      	ldr	r2, [r3, #0]
 801d2d2:	78fb      	ldrb	r3, [r7, #3]
 801d2d4:	4619      	mov	r1, r3
 801d2d6:	f7fa fd5f 	bl	8017d98 <USBD_LL_DataOutStage>
}
 801d2da:	bf00      	nop
 801d2dc:	3708      	adds	r7, #8
 801d2de:	46bd      	mov	sp, r7
 801d2e0:	bd80      	pop	{r7, pc}

0801d2e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2e2:	b580      	push	{r7, lr}
 801d2e4:	b082      	sub	sp, #8
 801d2e6:	af00      	add	r7, sp, #0
 801d2e8:	6078      	str	r0, [r7, #4]
 801d2ea:	460b      	mov	r3, r1
 801d2ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d2f4:	78fa      	ldrb	r2, [r7, #3]
 801d2f6:	6879      	ldr	r1, [r7, #4]
 801d2f8:	4613      	mov	r3, r2
 801d2fa:	00db      	lsls	r3, r3, #3
 801d2fc:	4413      	add	r3, r2
 801d2fe:	009b      	lsls	r3, r3, #2
 801d300:	440b      	add	r3, r1
 801d302:	3320      	adds	r3, #32
 801d304:	681a      	ldr	r2, [r3, #0]
 801d306:	78fb      	ldrb	r3, [r7, #3]
 801d308:	4619      	mov	r1, r3
 801d30a:	f7fa fdf8 	bl	8017efe <USBD_LL_DataInStage>
}
 801d30e:	bf00      	nop
 801d310:	3708      	adds	r7, #8
 801d312:	46bd      	mov	sp, r7
 801d314:	bd80      	pop	{r7, pc}

0801d316 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d316:	b580      	push	{r7, lr}
 801d318:	b082      	sub	sp, #8
 801d31a:	af00      	add	r7, sp, #0
 801d31c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d324:	4618      	mov	r0, r3
 801d326:	f7fa ff32 	bl	801818e <USBD_LL_SOF>
}
 801d32a:	bf00      	nop
 801d32c:	3708      	adds	r7, #8
 801d32e:	46bd      	mov	sp, r7
 801d330:	bd80      	pop	{r7, pc}

0801d332 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d332:	b580      	push	{r7, lr}
 801d334:	b084      	sub	sp, #16
 801d336:	af00      	add	r7, sp, #0
 801d338:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d33a:	2301      	movs	r3, #1
 801d33c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	79db      	ldrb	r3, [r3, #7]
 801d342:	2b00      	cmp	r3, #0
 801d344:	d102      	bne.n	801d34c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801d346:	2300      	movs	r3, #0
 801d348:	73fb      	strb	r3, [r7, #15]
 801d34a:	e008      	b.n	801d35e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	79db      	ldrb	r3, [r3, #7]
 801d350:	2b02      	cmp	r3, #2
 801d352:	d102      	bne.n	801d35a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801d354:	2301      	movs	r3, #1
 801d356:	73fb      	strb	r3, [r7, #15]
 801d358:	e001      	b.n	801d35e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801d35a:	f7e6 f993 	bl	8003684 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d364:	7bfa      	ldrb	r2, [r7, #15]
 801d366:	4611      	mov	r1, r2
 801d368:	4618      	mov	r0, r3
 801d36a:	f7fa fecc 	bl	8018106 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d374:	4618      	mov	r0, r3
 801d376:	f7fa fe74 	bl	8018062 <USBD_LL_Reset>
}
 801d37a:	bf00      	nop
 801d37c:	3710      	adds	r7, #16
 801d37e:	46bd      	mov	sp, r7
 801d380:	bd80      	pop	{r7, pc}
	...

0801d384 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d384:	b580      	push	{r7, lr}
 801d386:	b082      	sub	sp, #8
 801d388:	af00      	add	r7, sp, #0
 801d38a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d392:	4618      	mov	r0, r3
 801d394:	f7fa fec7 	bl	8018126 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	687a      	ldr	r2, [r7, #4]
 801d3a4:	6812      	ldr	r2, [r2, #0]
 801d3a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801d3aa:	f043 0301 	orr.w	r3, r3, #1
 801d3ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	7adb      	ldrb	r3, [r3, #11]
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d005      	beq.n	801d3c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d3b8:	4b04      	ldr	r3, [pc, #16]	@ (801d3cc <HAL_PCD_SuspendCallback+0x48>)
 801d3ba:	691b      	ldr	r3, [r3, #16]
 801d3bc:	4a03      	ldr	r2, [pc, #12]	@ (801d3cc <HAL_PCD_SuspendCallback+0x48>)
 801d3be:	f043 0306 	orr.w	r3, r3, #6
 801d3c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d3c4:	bf00      	nop
 801d3c6:	3708      	adds	r7, #8
 801d3c8:	46bd      	mov	sp, r7
 801d3ca:	bd80      	pop	{r7, pc}
 801d3cc:	e000ed00 	.word	0xe000ed00

0801d3d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d3d0:	b580      	push	{r7, lr}
 801d3d2:	b082      	sub	sp, #8
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d3de:	4618      	mov	r0, r3
 801d3e0:	f7fa febd 	bl	801815e <USBD_LL_Resume>
}
 801d3e4:	bf00      	nop
 801d3e6:	3708      	adds	r7, #8
 801d3e8:	46bd      	mov	sp, r7
 801d3ea:	bd80      	pop	{r7, pc}

0801d3ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d3ec:	b580      	push	{r7, lr}
 801d3ee:	b082      	sub	sp, #8
 801d3f0:	af00      	add	r7, sp, #0
 801d3f2:	6078      	str	r0, [r7, #4]
 801d3f4:	460b      	mov	r3, r1
 801d3f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d3fe:	78fa      	ldrb	r2, [r7, #3]
 801d400:	4611      	mov	r1, r2
 801d402:	4618      	mov	r0, r3
 801d404:	f7fa ff15 	bl	8018232 <USBD_LL_IsoOUTIncomplete>
}
 801d408:	bf00      	nop
 801d40a:	3708      	adds	r7, #8
 801d40c:	46bd      	mov	sp, r7
 801d40e:	bd80      	pop	{r7, pc}

0801d410 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b082      	sub	sp, #8
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
 801d418:	460b      	mov	r3, r1
 801d41a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d422:	78fa      	ldrb	r2, [r7, #3]
 801d424:	4611      	mov	r1, r2
 801d426:	4618      	mov	r0, r3
 801d428:	f7fa fed1 	bl	80181ce <USBD_LL_IsoINIncomplete>
}
 801d42c:	bf00      	nop
 801d42e:	3708      	adds	r7, #8
 801d430:	46bd      	mov	sp, r7
 801d432:	bd80      	pop	{r7, pc}

0801d434 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d434:	b580      	push	{r7, lr}
 801d436:	b082      	sub	sp, #8
 801d438:	af00      	add	r7, sp, #0
 801d43a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d442:	4618      	mov	r0, r3
 801d444:	f7fa ff27 	bl	8018296 <USBD_LL_DevConnected>
}
 801d448:	bf00      	nop
 801d44a:	3708      	adds	r7, #8
 801d44c:	46bd      	mov	sp, r7
 801d44e:	bd80      	pop	{r7, pc}

0801d450 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d450:	b580      	push	{r7, lr}
 801d452:	b082      	sub	sp, #8
 801d454:	af00      	add	r7, sp, #0
 801d456:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d45e:	4618      	mov	r0, r3
 801d460:	f7fa ff24 	bl	80182ac <USBD_LL_DevDisconnected>
}
 801d464:	bf00      	nop
 801d466:	3708      	adds	r7, #8
 801d468:	46bd      	mov	sp, r7
 801d46a:	bd80      	pop	{r7, pc}

0801d46c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d46c:	b580      	push	{r7, lr}
 801d46e:	b082      	sub	sp, #8
 801d470:	af00      	add	r7, sp, #0
 801d472:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	781b      	ldrb	r3, [r3, #0]
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d13c      	bne.n	801d4f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d47c:	4a20      	ldr	r2, [pc, #128]	@ (801d500 <USBD_LL_Init+0x94>)
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	4a1e      	ldr	r2, [pc, #120]	@ (801d500 <USBD_LL_Init+0x94>)
 801d488:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d48c:	4b1c      	ldr	r3, [pc, #112]	@ (801d500 <USBD_LL_Init+0x94>)
 801d48e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801d492:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d494:	4b1a      	ldr	r3, [pc, #104]	@ (801d500 <USBD_LL_Init+0x94>)
 801d496:	2204      	movs	r2, #4
 801d498:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d49a:	4b19      	ldr	r3, [pc, #100]	@ (801d500 <USBD_LL_Init+0x94>)
 801d49c:	2202      	movs	r2, #2
 801d49e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d4a0:	4b17      	ldr	r3, [pc, #92]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4a2:	2200      	movs	r2, #0
 801d4a4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d4a6:	4b16      	ldr	r3, [pc, #88]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4a8:	2202      	movs	r2, #2
 801d4aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d4ac:	4b14      	ldr	r3, [pc, #80]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4ae:	2200      	movs	r2, #0
 801d4b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d4b2:	4b13      	ldr	r3, [pc, #76]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d4b8:	4b11      	ldr	r3, [pc, #68]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4ba:	2200      	movs	r2, #0
 801d4bc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d4be:	4b10      	ldr	r3, [pc, #64]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4c0:	2200      	movs	r2, #0
 801d4c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d4c4:	4b0e      	ldr	r3, [pc, #56]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4c6:	2200      	movs	r2, #0
 801d4c8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d4ca:	480d      	ldr	r0, [pc, #52]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4cc:	f7e9 ffe4 	bl	8007498 <HAL_PCD_Init>
 801d4d0:	4603      	mov	r3, r0
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d001      	beq.n	801d4da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d4d6:	f7e6 f8d5 	bl	8003684 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d4da:	2180      	movs	r1, #128	@ 0x80
 801d4dc:	4808      	ldr	r0, [pc, #32]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4de:	f7eb fa9a 	bl	8008a16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d4e2:	2240      	movs	r2, #64	@ 0x40
 801d4e4:	2100      	movs	r1, #0
 801d4e6:	4806      	ldr	r0, [pc, #24]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4e8:	f7eb fa4e 	bl	8008988 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d4ec:	2280      	movs	r2, #128	@ 0x80
 801d4ee:	2101      	movs	r1, #1
 801d4f0:	4803      	ldr	r0, [pc, #12]	@ (801d500 <USBD_LL_Init+0x94>)
 801d4f2:	f7eb fa49 	bl	8008988 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d4f6:	2300      	movs	r3, #0
}
 801d4f8:	4618      	mov	r0, r3
 801d4fa:	3708      	adds	r7, #8
 801d4fc:	46bd      	mov	sp, r7
 801d4fe:	bd80      	pop	{r7, pc}
 801d500:	20002908 	.word	0x20002908

0801d504 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801d504:	b580      	push	{r7, lr}
 801d506:	b084      	sub	sp, #16
 801d508:	af00      	add	r7, sp, #0
 801d50a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d50c:	2300      	movs	r3, #0
 801d50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d510:	2300      	movs	r3, #0
 801d512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d51a:	4618      	mov	r0, r3
 801d51c:	f7ea f8cb 	bl	80076b6 <HAL_PCD_DeInit>
 801d520:	4603      	mov	r3, r0
 801d522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d524:	7bfb      	ldrb	r3, [r7, #15]
 801d526:	4618      	mov	r0, r3
 801d528:	f000 f998 	bl	801d85c <USBD_Get_USB_Status>
 801d52c:	4603      	mov	r3, r0
 801d52e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d530:	7bbb      	ldrb	r3, [r7, #14]
}
 801d532:	4618      	mov	r0, r3
 801d534:	3710      	adds	r7, #16
 801d536:	46bd      	mov	sp, r7
 801d538:	bd80      	pop	{r7, pc}

0801d53a <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d53a:	b580      	push	{r7, lr}
 801d53c:	b084      	sub	sp, #16
 801d53e:	af00      	add	r7, sp, #0
 801d540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d542:	2300      	movs	r3, #0
 801d544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d546:	2300      	movs	r3, #0
 801d548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d550:	4618      	mov	r0, r3
 801d552:	f7ea f8d3 	bl	80076fc <HAL_PCD_Start>
 801d556:	4603      	mov	r3, r0
 801d558:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d55a:	7bfb      	ldrb	r3, [r7, #15]
 801d55c:	4618      	mov	r0, r3
 801d55e:	f000 f97d 	bl	801d85c <USBD_Get_USB_Status>
 801d562:	4603      	mov	r3, r0
 801d564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d566:	7bbb      	ldrb	r3, [r7, #14]
}
 801d568:	4618      	mov	r0, r3
 801d56a:	3710      	adds	r7, #16
 801d56c:	46bd      	mov	sp, r7
 801d56e:	bd80      	pop	{r7, pc}

0801d570 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801d570:	b580      	push	{r7, lr}
 801d572:	b084      	sub	sp, #16
 801d574:	af00      	add	r7, sp, #0
 801d576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d578:	2300      	movs	r3, #0
 801d57a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d57c:	2300      	movs	r3, #0
 801d57e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d586:	4618      	mov	r0, r3
 801d588:	f7ea f8ed 	bl	8007766 <HAL_PCD_Stop>
 801d58c:	4603      	mov	r3, r0
 801d58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d590:	7bfb      	ldrb	r3, [r7, #15]
 801d592:	4618      	mov	r0, r3
 801d594:	f000 f962 	bl	801d85c <USBD_Get_USB_Status>
 801d598:	4603      	mov	r3, r0
 801d59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d59c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d59e:	4618      	mov	r0, r3
 801d5a0:	3710      	adds	r7, #16
 801d5a2:	46bd      	mov	sp, r7
 801d5a4:	bd80      	pop	{r7, pc}

0801d5a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d5a6:	b580      	push	{r7, lr}
 801d5a8:	b084      	sub	sp, #16
 801d5aa:	af00      	add	r7, sp, #0
 801d5ac:	6078      	str	r0, [r7, #4]
 801d5ae:	4608      	mov	r0, r1
 801d5b0:	4611      	mov	r1, r2
 801d5b2:	461a      	mov	r2, r3
 801d5b4:	4603      	mov	r3, r0
 801d5b6:	70fb      	strb	r3, [r7, #3]
 801d5b8:	460b      	mov	r3, r1
 801d5ba:	70bb      	strb	r3, [r7, #2]
 801d5bc:	4613      	mov	r3, r2
 801d5be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5c0:	2300      	movs	r3, #0
 801d5c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d5ce:	78bb      	ldrb	r3, [r7, #2]
 801d5d0:	883a      	ldrh	r2, [r7, #0]
 801d5d2:	78f9      	ldrb	r1, [r7, #3]
 801d5d4:	f7ea fdc7 	bl	8008166 <HAL_PCD_EP_Open>
 801d5d8:	4603      	mov	r3, r0
 801d5da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5dc:	7bfb      	ldrb	r3, [r7, #15]
 801d5de:	4618      	mov	r0, r3
 801d5e0:	f000 f93c 	bl	801d85c <USBD_Get_USB_Status>
 801d5e4:	4603      	mov	r3, r0
 801d5e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d5e8:	7bbb      	ldrb	r3, [r7, #14]
}
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	3710      	adds	r7, #16
 801d5ee:	46bd      	mov	sp, r7
 801d5f0:	bd80      	pop	{r7, pc}

0801d5f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d5f2:	b580      	push	{r7, lr}
 801d5f4:	b084      	sub	sp, #16
 801d5f6:	af00      	add	r7, sp, #0
 801d5f8:	6078      	str	r0, [r7, #4]
 801d5fa:	460b      	mov	r3, r1
 801d5fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5fe:	2300      	movs	r3, #0
 801d600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d602:	2300      	movs	r3, #0
 801d604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d60c:	78fa      	ldrb	r2, [r7, #3]
 801d60e:	4611      	mov	r1, r2
 801d610:	4618      	mov	r0, r3
 801d612:	f7ea fe10 	bl	8008236 <HAL_PCD_EP_Close>
 801d616:	4603      	mov	r3, r0
 801d618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d61a:	7bfb      	ldrb	r3, [r7, #15]
 801d61c:	4618      	mov	r0, r3
 801d61e:	f000 f91d 	bl	801d85c <USBD_Get_USB_Status>
 801d622:	4603      	mov	r3, r0
 801d624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d626:	7bbb      	ldrb	r3, [r7, #14]
}
 801d628:	4618      	mov	r0, r3
 801d62a:	3710      	adds	r7, #16
 801d62c:	46bd      	mov	sp, r7
 801d62e:	bd80      	pop	{r7, pc}

0801d630 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d630:	b580      	push	{r7, lr}
 801d632:	b084      	sub	sp, #16
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
 801d638:	460b      	mov	r3, r1
 801d63a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d63c:	2300      	movs	r3, #0
 801d63e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d640:	2300      	movs	r3, #0
 801d642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d64a:	78fa      	ldrb	r2, [r7, #3]
 801d64c:	4611      	mov	r1, r2
 801d64e:	4618      	mov	r0, r3
 801d650:	f7ea ffb2 	bl	80085b8 <HAL_PCD_EP_Flush>
 801d654:	4603      	mov	r3, r0
 801d656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d658:	7bfb      	ldrb	r3, [r7, #15]
 801d65a:	4618      	mov	r0, r3
 801d65c:	f000 f8fe 	bl	801d85c <USBD_Get_USB_Status>
 801d660:	4603      	mov	r3, r0
 801d662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d664:	7bbb      	ldrb	r3, [r7, #14]
}
 801d666:	4618      	mov	r0, r3
 801d668:	3710      	adds	r7, #16
 801d66a:	46bd      	mov	sp, r7
 801d66c:	bd80      	pop	{r7, pc}

0801d66e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d66e:	b580      	push	{r7, lr}
 801d670:	b084      	sub	sp, #16
 801d672:	af00      	add	r7, sp, #0
 801d674:	6078      	str	r0, [r7, #4]
 801d676:	460b      	mov	r3, r1
 801d678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d67a:	2300      	movs	r3, #0
 801d67c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d67e:	2300      	movs	r3, #0
 801d680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d688:	78fa      	ldrb	r2, [r7, #3]
 801d68a:	4611      	mov	r1, r2
 801d68c:	4618      	mov	r0, r3
 801d68e:	f7ea fea9 	bl	80083e4 <HAL_PCD_EP_SetStall>
 801d692:	4603      	mov	r3, r0
 801d694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d696:	7bfb      	ldrb	r3, [r7, #15]
 801d698:	4618      	mov	r0, r3
 801d69a:	f000 f8df 	bl	801d85c <USBD_Get_USB_Status>
 801d69e:	4603      	mov	r3, r0
 801d6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	3710      	adds	r7, #16
 801d6a8:	46bd      	mov	sp, r7
 801d6aa:	bd80      	pop	{r7, pc}

0801d6ac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b084      	sub	sp, #16
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	6078      	str	r0, [r7, #4]
 801d6b4:	460b      	mov	r3, r1
 801d6b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6bc:	2300      	movs	r3, #0
 801d6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d6c6:	78fa      	ldrb	r2, [r7, #3]
 801d6c8:	4611      	mov	r1, r2
 801d6ca:	4618      	mov	r0, r3
 801d6cc:	f7ea feed 	bl	80084aa <HAL_PCD_EP_ClrStall>
 801d6d0:	4603      	mov	r3, r0
 801d6d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d6d4:	7bfb      	ldrb	r3, [r7, #15]
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	f000 f8c0 	bl	801d85c <USBD_Get_USB_Status>
 801d6dc:	4603      	mov	r3, r0
 801d6de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d6e0:	7bbb      	ldrb	r3, [r7, #14]
}
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	3710      	adds	r7, #16
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	bd80      	pop	{r7, pc}

0801d6ea <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d6ea:	b480      	push	{r7}
 801d6ec:	b085      	sub	sp, #20
 801d6ee:	af00      	add	r7, sp, #0
 801d6f0:	6078      	str	r0, [r7, #4]
 801d6f2:	460b      	mov	r3, r1
 801d6f4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d6fc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d6fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d702:	2b00      	cmp	r3, #0
 801d704:	da0b      	bge.n	801d71e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d706:	78fb      	ldrb	r3, [r7, #3]
 801d708:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d70c:	68f9      	ldr	r1, [r7, #12]
 801d70e:	4613      	mov	r3, r2
 801d710:	00db      	lsls	r3, r3, #3
 801d712:	4413      	add	r3, r2
 801d714:	009b      	lsls	r3, r3, #2
 801d716:	440b      	add	r3, r1
 801d718:	3316      	adds	r3, #22
 801d71a:	781b      	ldrb	r3, [r3, #0]
 801d71c:	e00b      	b.n	801d736 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d71e:	78fb      	ldrb	r3, [r7, #3]
 801d720:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d724:	68f9      	ldr	r1, [r7, #12]
 801d726:	4613      	mov	r3, r2
 801d728:	00db      	lsls	r3, r3, #3
 801d72a:	4413      	add	r3, r2
 801d72c:	009b      	lsls	r3, r3, #2
 801d72e:	440b      	add	r3, r1
 801d730:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801d734:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d736:	4618      	mov	r0, r3
 801d738:	3714      	adds	r7, #20
 801d73a:	46bd      	mov	sp, r7
 801d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d740:	4770      	bx	lr

0801d742 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d742:	b580      	push	{r7, lr}
 801d744:	b084      	sub	sp, #16
 801d746:	af00      	add	r7, sp, #0
 801d748:	6078      	str	r0, [r7, #4]
 801d74a:	460b      	mov	r3, r1
 801d74c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d74e:	2300      	movs	r3, #0
 801d750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d752:	2300      	movs	r3, #0
 801d754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d75c:	78fa      	ldrb	r2, [r7, #3]
 801d75e:	4611      	mov	r1, r2
 801d760:	4618      	mov	r0, r3
 801d762:	f7ea fcdc 	bl	800811e <HAL_PCD_SetAddress>
 801d766:	4603      	mov	r3, r0
 801d768:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d76a:	7bfb      	ldrb	r3, [r7, #15]
 801d76c:	4618      	mov	r0, r3
 801d76e:	f000 f875 	bl	801d85c <USBD_Get_USB_Status>
 801d772:	4603      	mov	r3, r0
 801d774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d776:	7bbb      	ldrb	r3, [r7, #14]
}
 801d778:	4618      	mov	r0, r3
 801d77a:	3710      	adds	r7, #16
 801d77c:	46bd      	mov	sp, r7
 801d77e:	bd80      	pop	{r7, pc}

0801d780 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d780:	b580      	push	{r7, lr}
 801d782:	b086      	sub	sp, #24
 801d784:	af00      	add	r7, sp, #0
 801d786:	60f8      	str	r0, [r7, #12]
 801d788:	607a      	str	r2, [r7, #4]
 801d78a:	603b      	str	r3, [r7, #0]
 801d78c:	460b      	mov	r3, r1
 801d78e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d790:	2300      	movs	r3, #0
 801d792:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d794:	2300      	movs	r3, #0
 801d796:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d798:	68fb      	ldr	r3, [r7, #12]
 801d79a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d79e:	7af9      	ldrb	r1, [r7, #11]
 801d7a0:	683b      	ldr	r3, [r7, #0]
 801d7a2:	687a      	ldr	r2, [r7, #4]
 801d7a4:	f7ea fde4 	bl	8008370 <HAL_PCD_EP_Transmit>
 801d7a8:	4603      	mov	r3, r0
 801d7aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d7ac:	7dfb      	ldrb	r3, [r7, #23]
 801d7ae:	4618      	mov	r0, r3
 801d7b0:	f000 f854 	bl	801d85c <USBD_Get_USB_Status>
 801d7b4:	4603      	mov	r3, r0
 801d7b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d7b8:	7dbb      	ldrb	r3, [r7, #22]
}
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	3718      	adds	r7, #24
 801d7be:	46bd      	mov	sp, r7
 801d7c0:	bd80      	pop	{r7, pc}

0801d7c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d7c2:	b580      	push	{r7, lr}
 801d7c4:	b086      	sub	sp, #24
 801d7c6:	af00      	add	r7, sp, #0
 801d7c8:	60f8      	str	r0, [r7, #12]
 801d7ca:	607a      	str	r2, [r7, #4]
 801d7cc:	603b      	str	r3, [r7, #0]
 801d7ce:	460b      	mov	r3, r1
 801d7d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d7d2:	2300      	movs	r3, #0
 801d7d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d7d6:	2300      	movs	r3, #0
 801d7d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d7da:	68fb      	ldr	r3, [r7, #12]
 801d7dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d7e0:	7af9      	ldrb	r1, [r7, #11]
 801d7e2:	683b      	ldr	r3, [r7, #0]
 801d7e4:	687a      	ldr	r2, [r7, #4]
 801d7e6:	f7ea fd70 	bl	80082ca <HAL_PCD_EP_Receive>
 801d7ea:	4603      	mov	r3, r0
 801d7ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d7ee:	7dfb      	ldrb	r3, [r7, #23]
 801d7f0:	4618      	mov	r0, r3
 801d7f2:	f000 f833 	bl	801d85c <USBD_Get_USB_Status>
 801d7f6:	4603      	mov	r3, r0
 801d7f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d7fa:	7dbb      	ldrb	r3, [r7, #22]
}
 801d7fc:	4618      	mov	r0, r3
 801d7fe:	3718      	adds	r7, #24
 801d800:	46bd      	mov	sp, r7
 801d802:	bd80      	pop	{r7, pc}

0801d804 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d804:	b580      	push	{r7, lr}
 801d806:	b082      	sub	sp, #8
 801d808:	af00      	add	r7, sp, #0
 801d80a:	6078      	str	r0, [r7, #4]
 801d80c:	460b      	mov	r3, r1
 801d80e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d816:	78fa      	ldrb	r2, [r7, #3]
 801d818:	4611      	mov	r1, r2
 801d81a:	4618      	mov	r0, r3
 801d81c:	f7ea fd90 	bl	8008340 <HAL_PCD_EP_GetRxCount>
 801d820:	4603      	mov	r3, r0
}
 801d822:	4618      	mov	r0, r3
 801d824:	3708      	adds	r7, #8
 801d826:	46bd      	mov	sp, r7
 801d828:	bd80      	pop	{r7, pc}
	...

0801d82c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d82c:	b480      	push	{r7}
 801d82e:	b083      	sub	sp, #12
 801d830:	af00      	add	r7, sp, #0
 801d832:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d834:	4b03      	ldr	r3, [pc, #12]	@ (801d844 <USBD_static_malloc+0x18>)
}
 801d836:	4618      	mov	r0, r3
 801d838:	370c      	adds	r7, #12
 801d83a:	46bd      	mov	sp, r7
 801d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d840:	4770      	bx	lr
 801d842:	bf00      	nop
 801d844:	20002dec 	.word	0x20002dec

0801d848 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d848:	b480      	push	{r7}
 801d84a:	b083      	sub	sp, #12
 801d84c:	af00      	add	r7, sp, #0
 801d84e:	6078      	str	r0, [r7, #4]

}
 801d850:	bf00      	nop
 801d852:	370c      	adds	r7, #12
 801d854:	46bd      	mov	sp, r7
 801d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d85a:	4770      	bx	lr

0801d85c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d85c:	b480      	push	{r7}
 801d85e:	b085      	sub	sp, #20
 801d860:	af00      	add	r7, sp, #0
 801d862:	4603      	mov	r3, r0
 801d864:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d866:	2300      	movs	r3, #0
 801d868:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d86a:	79fb      	ldrb	r3, [r7, #7]
 801d86c:	2b03      	cmp	r3, #3
 801d86e:	d817      	bhi.n	801d8a0 <USBD_Get_USB_Status+0x44>
 801d870:	a201      	add	r2, pc, #4	@ (adr r2, 801d878 <USBD_Get_USB_Status+0x1c>)
 801d872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d876:	bf00      	nop
 801d878:	0801d889 	.word	0x0801d889
 801d87c:	0801d88f 	.word	0x0801d88f
 801d880:	0801d895 	.word	0x0801d895
 801d884:	0801d89b 	.word	0x0801d89b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d888:	2300      	movs	r3, #0
 801d88a:	73fb      	strb	r3, [r7, #15]
    break;
 801d88c:	e00b      	b.n	801d8a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d88e:	2303      	movs	r3, #3
 801d890:	73fb      	strb	r3, [r7, #15]
    break;
 801d892:	e008      	b.n	801d8a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d894:	2301      	movs	r3, #1
 801d896:	73fb      	strb	r3, [r7, #15]
    break;
 801d898:	e005      	b.n	801d8a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d89a:	2303      	movs	r3, #3
 801d89c:	73fb      	strb	r3, [r7, #15]
    break;
 801d89e:	e002      	b.n	801d8a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d8a0:	2303      	movs	r3, #3
 801d8a2:	73fb      	strb	r3, [r7, #15]
    break;
 801d8a4:	bf00      	nop
  }
  return usb_status;
 801d8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8a8:	4618      	mov	r0, r3
 801d8aa:	3714      	adds	r7, #20
 801d8ac:	46bd      	mov	sp, r7
 801d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8b2:	4770      	bx	lr

0801d8b4 <atoi>:
 801d8b4:	220a      	movs	r2, #10
 801d8b6:	2100      	movs	r1, #0
 801d8b8:	f000 b932 	b.w	801db20 <strtol>

0801d8bc <malloc>:
 801d8bc:	4b02      	ldr	r3, [pc, #8]	@ (801d8c8 <malloc+0xc>)
 801d8be:	4601      	mov	r1, r0
 801d8c0:	6818      	ldr	r0, [r3, #0]
 801d8c2:	f000 b825 	b.w	801d910 <_malloc_r>
 801d8c6:	bf00      	nop
 801d8c8:	20000148 	.word	0x20000148

0801d8cc <sbrk_aligned>:
 801d8cc:	b570      	push	{r4, r5, r6, lr}
 801d8ce:	4e0f      	ldr	r6, [pc, #60]	@ (801d90c <sbrk_aligned+0x40>)
 801d8d0:	460c      	mov	r4, r1
 801d8d2:	6831      	ldr	r1, [r6, #0]
 801d8d4:	4605      	mov	r5, r0
 801d8d6:	b911      	cbnz	r1, 801d8de <sbrk_aligned+0x12>
 801d8d8:	f001 fb2e 	bl	801ef38 <_sbrk_r>
 801d8dc:	6030      	str	r0, [r6, #0]
 801d8de:	4621      	mov	r1, r4
 801d8e0:	4628      	mov	r0, r5
 801d8e2:	f001 fb29 	bl	801ef38 <_sbrk_r>
 801d8e6:	1c43      	adds	r3, r0, #1
 801d8e8:	d103      	bne.n	801d8f2 <sbrk_aligned+0x26>
 801d8ea:	f04f 34ff 	mov.w	r4, #4294967295
 801d8ee:	4620      	mov	r0, r4
 801d8f0:	bd70      	pop	{r4, r5, r6, pc}
 801d8f2:	1cc4      	adds	r4, r0, #3
 801d8f4:	f024 0403 	bic.w	r4, r4, #3
 801d8f8:	42a0      	cmp	r0, r4
 801d8fa:	d0f8      	beq.n	801d8ee <sbrk_aligned+0x22>
 801d8fc:	1a21      	subs	r1, r4, r0
 801d8fe:	4628      	mov	r0, r5
 801d900:	f001 fb1a 	bl	801ef38 <_sbrk_r>
 801d904:	3001      	adds	r0, #1
 801d906:	d1f2      	bne.n	801d8ee <sbrk_aligned+0x22>
 801d908:	e7ef      	b.n	801d8ea <sbrk_aligned+0x1e>
 801d90a:	bf00      	nop
 801d90c:	20003664 	.word	0x20003664

0801d910 <_malloc_r>:
 801d910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d914:	1ccd      	adds	r5, r1, #3
 801d916:	f025 0503 	bic.w	r5, r5, #3
 801d91a:	3508      	adds	r5, #8
 801d91c:	2d0c      	cmp	r5, #12
 801d91e:	bf38      	it	cc
 801d920:	250c      	movcc	r5, #12
 801d922:	2d00      	cmp	r5, #0
 801d924:	4606      	mov	r6, r0
 801d926:	db01      	blt.n	801d92c <_malloc_r+0x1c>
 801d928:	42a9      	cmp	r1, r5
 801d92a:	d904      	bls.n	801d936 <_malloc_r+0x26>
 801d92c:	230c      	movs	r3, #12
 801d92e:	6033      	str	r3, [r6, #0]
 801d930:	2000      	movs	r0, #0
 801d932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801da0c <_malloc_r+0xfc>
 801d93a:	f000 f869 	bl	801da10 <__malloc_lock>
 801d93e:	f8d8 3000 	ldr.w	r3, [r8]
 801d942:	461c      	mov	r4, r3
 801d944:	bb44      	cbnz	r4, 801d998 <_malloc_r+0x88>
 801d946:	4629      	mov	r1, r5
 801d948:	4630      	mov	r0, r6
 801d94a:	f7ff ffbf 	bl	801d8cc <sbrk_aligned>
 801d94e:	1c43      	adds	r3, r0, #1
 801d950:	4604      	mov	r4, r0
 801d952:	d158      	bne.n	801da06 <_malloc_r+0xf6>
 801d954:	f8d8 4000 	ldr.w	r4, [r8]
 801d958:	4627      	mov	r7, r4
 801d95a:	2f00      	cmp	r7, #0
 801d95c:	d143      	bne.n	801d9e6 <_malloc_r+0xd6>
 801d95e:	2c00      	cmp	r4, #0
 801d960:	d04b      	beq.n	801d9fa <_malloc_r+0xea>
 801d962:	6823      	ldr	r3, [r4, #0]
 801d964:	4639      	mov	r1, r7
 801d966:	4630      	mov	r0, r6
 801d968:	eb04 0903 	add.w	r9, r4, r3
 801d96c:	f001 fae4 	bl	801ef38 <_sbrk_r>
 801d970:	4581      	cmp	r9, r0
 801d972:	d142      	bne.n	801d9fa <_malloc_r+0xea>
 801d974:	6821      	ldr	r1, [r4, #0]
 801d976:	1a6d      	subs	r5, r5, r1
 801d978:	4629      	mov	r1, r5
 801d97a:	4630      	mov	r0, r6
 801d97c:	f7ff ffa6 	bl	801d8cc <sbrk_aligned>
 801d980:	3001      	adds	r0, #1
 801d982:	d03a      	beq.n	801d9fa <_malloc_r+0xea>
 801d984:	6823      	ldr	r3, [r4, #0]
 801d986:	442b      	add	r3, r5
 801d988:	6023      	str	r3, [r4, #0]
 801d98a:	f8d8 3000 	ldr.w	r3, [r8]
 801d98e:	685a      	ldr	r2, [r3, #4]
 801d990:	bb62      	cbnz	r2, 801d9ec <_malloc_r+0xdc>
 801d992:	f8c8 7000 	str.w	r7, [r8]
 801d996:	e00f      	b.n	801d9b8 <_malloc_r+0xa8>
 801d998:	6822      	ldr	r2, [r4, #0]
 801d99a:	1b52      	subs	r2, r2, r5
 801d99c:	d420      	bmi.n	801d9e0 <_malloc_r+0xd0>
 801d99e:	2a0b      	cmp	r2, #11
 801d9a0:	d917      	bls.n	801d9d2 <_malloc_r+0xc2>
 801d9a2:	1961      	adds	r1, r4, r5
 801d9a4:	42a3      	cmp	r3, r4
 801d9a6:	6025      	str	r5, [r4, #0]
 801d9a8:	bf18      	it	ne
 801d9aa:	6059      	strne	r1, [r3, #4]
 801d9ac:	6863      	ldr	r3, [r4, #4]
 801d9ae:	bf08      	it	eq
 801d9b0:	f8c8 1000 	streq.w	r1, [r8]
 801d9b4:	5162      	str	r2, [r4, r5]
 801d9b6:	604b      	str	r3, [r1, #4]
 801d9b8:	4630      	mov	r0, r6
 801d9ba:	f000 f82f 	bl	801da1c <__malloc_unlock>
 801d9be:	f104 000b 	add.w	r0, r4, #11
 801d9c2:	1d23      	adds	r3, r4, #4
 801d9c4:	f020 0007 	bic.w	r0, r0, #7
 801d9c8:	1ac2      	subs	r2, r0, r3
 801d9ca:	bf1c      	itt	ne
 801d9cc:	1a1b      	subne	r3, r3, r0
 801d9ce:	50a3      	strne	r3, [r4, r2]
 801d9d0:	e7af      	b.n	801d932 <_malloc_r+0x22>
 801d9d2:	6862      	ldr	r2, [r4, #4]
 801d9d4:	42a3      	cmp	r3, r4
 801d9d6:	bf0c      	ite	eq
 801d9d8:	f8c8 2000 	streq.w	r2, [r8]
 801d9dc:	605a      	strne	r2, [r3, #4]
 801d9de:	e7eb      	b.n	801d9b8 <_malloc_r+0xa8>
 801d9e0:	4623      	mov	r3, r4
 801d9e2:	6864      	ldr	r4, [r4, #4]
 801d9e4:	e7ae      	b.n	801d944 <_malloc_r+0x34>
 801d9e6:	463c      	mov	r4, r7
 801d9e8:	687f      	ldr	r7, [r7, #4]
 801d9ea:	e7b6      	b.n	801d95a <_malloc_r+0x4a>
 801d9ec:	461a      	mov	r2, r3
 801d9ee:	685b      	ldr	r3, [r3, #4]
 801d9f0:	42a3      	cmp	r3, r4
 801d9f2:	d1fb      	bne.n	801d9ec <_malloc_r+0xdc>
 801d9f4:	2300      	movs	r3, #0
 801d9f6:	6053      	str	r3, [r2, #4]
 801d9f8:	e7de      	b.n	801d9b8 <_malloc_r+0xa8>
 801d9fa:	230c      	movs	r3, #12
 801d9fc:	6033      	str	r3, [r6, #0]
 801d9fe:	4630      	mov	r0, r6
 801da00:	f000 f80c 	bl	801da1c <__malloc_unlock>
 801da04:	e794      	b.n	801d930 <_malloc_r+0x20>
 801da06:	6005      	str	r5, [r0, #0]
 801da08:	e7d6      	b.n	801d9b8 <_malloc_r+0xa8>
 801da0a:	bf00      	nop
 801da0c:	20003668 	.word	0x20003668

0801da10 <__malloc_lock>:
 801da10:	4801      	ldr	r0, [pc, #4]	@ (801da18 <__malloc_lock+0x8>)
 801da12:	f001 bade 	b.w	801efd2 <__retarget_lock_acquire_recursive>
 801da16:	bf00      	nop
 801da18:	200037ac 	.word	0x200037ac

0801da1c <__malloc_unlock>:
 801da1c:	4801      	ldr	r0, [pc, #4]	@ (801da24 <__malloc_unlock+0x8>)
 801da1e:	f001 bad9 	b.w	801efd4 <__retarget_lock_release_recursive>
 801da22:	bf00      	nop
 801da24:	200037ac 	.word	0x200037ac

0801da28 <_strtol_l.constprop.0>:
 801da28:	2b24      	cmp	r3, #36	@ 0x24
 801da2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da2e:	4686      	mov	lr, r0
 801da30:	4690      	mov	r8, r2
 801da32:	d801      	bhi.n	801da38 <_strtol_l.constprop.0+0x10>
 801da34:	2b01      	cmp	r3, #1
 801da36:	d106      	bne.n	801da46 <_strtol_l.constprop.0+0x1e>
 801da38:	f001 faa0 	bl	801ef7c <__errno>
 801da3c:	2316      	movs	r3, #22
 801da3e:	6003      	str	r3, [r0, #0]
 801da40:	2000      	movs	r0, #0
 801da42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da46:	4834      	ldr	r0, [pc, #208]	@ (801db18 <_strtol_l.constprop.0+0xf0>)
 801da48:	460d      	mov	r5, r1
 801da4a:	462a      	mov	r2, r5
 801da4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801da50:	5d06      	ldrb	r6, [r0, r4]
 801da52:	f016 0608 	ands.w	r6, r6, #8
 801da56:	d1f8      	bne.n	801da4a <_strtol_l.constprop.0+0x22>
 801da58:	2c2d      	cmp	r4, #45	@ 0x2d
 801da5a:	d12d      	bne.n	801dab8 <_strtol_l.constprop.0+0x90>
 801da5c:	782c      	ldrb	r4, [r5, #0]
 801da5e:	2601      	movs	r6, #1
 801da60:	1c95      	adds	r5, r2, #2
 801da62:	f033 0210 	bics.w	r2, r3, #16
 801da66:	d109      	bne.n	801da7c <_strtol_l.constprop.0+0x54>
 801da68:	2c30      	cmp	r4, #48	@ 0x30
 801da6a:	d12a      	bne.n	801dac2 <_strtol_l.constprop.0+0x9a>
 801da6c:	782a      	ldrb	r2, [r5, #0]
 801da6e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801da72:	2a58      	cmp	r2, #88	@ 0x58
 801da74:	d125      	bne.n	801dac2 <_strtol_l.constprop.0+0x9a>
 801da76:	786c      	ldrb	r4, [r5, #1]
 801da78:	2310      	movs	r3, #16
 801da7a:	3502      	adds	r5, #2
 801da7c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801da80:	f10c 3cff 	add.w	ip, ip, #4294967295
 801da84:	2200      	movs	r2, #0
 801da86:	fbbc f9f3 	udiv	r9, ip, r3
 801da8a:	4610      	mov	r0, r2
 801da8c:	fb03 ca19 	mls	sl, r3, r9, ip
 801da90:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801da94:	2f09      	cmp	r7, #9
 801da96:	d81b      	bhi.n	801dad0 <_strtol_l.constprop.0+0xa8>
 801da98:	463c      	mov	r4, r7
 801da9a:	42a3      	cmp	r3, r4
 801da9c:	dd27      	ble.n	801daee <_strtol_l.constprop.0+0xc6>
 801da9e:	1c57      	adds	r7, r2, #1
 801daa0:	d007      	beq.n	801dab2 <_strtol_l.constprop.0+0x8a>
 801daa2:	4581      	cmp	r9, r0
 801daa4:	d320      	bcc.n	801dae8 <_strtol_l.constprop.0+0xc0>
 801daa6:	d101      	bne.n	801daac <_strtol_l.constprop.0+0x84>
 801daa8:	45a2      	cmp	sl, r4
 801daaa:	db1d      	blt.n	801dae8 <_strtol_l.constprop.0+0xc0>
 801daac:	fb00 4003 	mla	r0, r0, r3, r4
 801dab0:	2201      	movs	r2, #1
 801dab2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dab6:	e7eb      	b.n	801da90 <_strtol_l.constprop.0+0x68>
 801dab8:	2c2b      	cmp	r4, #43	@ 0x2b
 801daba:	bf04      	itt	eq
 801dabc:	782c      	ldrbeq	r4, [r5, #0]
 801dabe:	1c95      	addeq	r5, r2, #2
 801dac0:	e7cf      	b.n	801da62 <_strtol_l.constprop.0+0x3a>
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d1da      	bne.n	801da7c <_strtol_l.constprop.0+0x54>
 801dac6:	2c30      	cmp	r4, #48	@ 0x30
 801dac8:	bf0c      	ite	eq
 801daca:	2308      	moveq	r3, #8
 801dacc:	230a      	movne	r3, #10
 801dace:	e7d5      	b.n	801da7c <_strtol_l.constprop.0+0x54>
 801dad0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801dad4:	2f19      	cmp	r7, #25
 801dad6:	d801      	bhi.n	801dadc <_strtol_l.constprop.0+0xb4>
 801dad8:	3c37      	subs	r4, #55	@ 0x37
 801dada:	e7de      	b.n	801da9a <_strtol_l.constprop.0+0x72>
 801dadc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801dae0:	2f19      	cmp	r7, #25
 801dae2:	d804      	bhi.n	801daee <_strtol_l.constprop.0+0xc6>
 801dae4:	3c57      	subs	r4, #87	@ 0x57
 801dae6:	e7d8      	b.n	801da9a <_strtol_l.constprop.0+0x72>
 801dae8:	f04f 32ff 	mov.w	r2, #4294967295
 801daec:	e7e1      	b.n	801dab2 <_strtol_l.constprop.0+0x8a>
 801daee:	1c53      	adds	r3, r2, #1
 801daf0:	d108      	bne.n	801db04 <_strtol_l.constprop.0+0xdc>
 801daf2:	2322      	movs	r3, #34	@ 0x22
 801daf4:	f8ce 3000 	str.w	r3, [lr]
 801daf8:	4660      	mov	r0, ip
 801dafa:	f1b8 0f00 	cmp.w	r8, #0
 801dafe:	d0a0      	beq.n	801da42 <_strtol_l.constprop.0+0x1a>
 801db00:	1e69      	subs	r1, r5, #1
 801db02:	e006      	b.n	801db12 <_strtol_l.constprop.0+0xea>
 801db04:	b106      	cbz	r6, 801db08 <_strtol_l.constprop.0+0xe0>
 801db06:	4240      	negs	r0, r0
 801db08:	f1b8 0f00 	cmp.w	r8, #0
 801db0c:	d099      	beq.n	801da42 <_strtol_l.constprop.0+0x1a>
 801db0e:	2a00      	cmp	r2, #0
 801db10:	d1f6      	bne.n	801db00 <_strtol_l.constprop.0+0xd8>
 801db12:	f8c8 1000 	str.w	r1, [r8]
 801db16:	e794      	b.n	801da42 <_strtol_l.constprop.0+0x1a>
 801db18:	08025525 	.word	0x08025525

0801db1c <_strtol_r>:
 801db1c:	f7ff bf84 	b.w	801da28 <_strtol_l.constprop.0>

0801db20 <strtol>:
 801db20:	4613      	mov	r3, r2
 801db22:	460a      	mov	r2, r1
 801db24:	4601      	mov	r1, r0
 801db26:	4802      	ldr	r0, [pc, #8]	@ (801db30 <strtol+0x10>)
 801db28:	6800      	ldr	r0, [r0, #0]
 801db2a:	f7ff bf7d 	b.w	801da28 <_strtol_l.constprop.0>
 801db2e:	bf00      	nop
 801db30:	20000148 	.word	0x20000148

0801db34 <__cvt>:
 801db34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801db38:	ec57 6b10 	vmov	r6, r7, d0
 801db3c:	2f00      	cmp	r7, #0
 801db3e:	460c      	mov	r4, r1
 801db40:	4619      	mov	r1, r3
 801db42:	463b      	mov	r3, r7
 801db44:	bfbb      	ittet	lt
 801db46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801db4a:	461f      	movlt	r7, r3
 801db4c:	2300      	movge	r3, #0
 801db4e:	232d      	movlt	r3, #45	@ 0x2d
 801db50:	700b      	strb	r3, [r1, #0]
 801db52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801db54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801db58:	4691      	mov	r9, r2
 801db5a:	f023 0820 	bic.w	r8, r3, #32
 801db5e:	bfbc      	itt	lt
 801db60:	4632      	movlt	r2, r6
 801db62:	4616      	movlt	r6, r2
 801db64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801db68:	d005      	beq.n	801db76 <__cvt+0x42>
 801db6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801db6e:	d100      	bne.n	801db72 <__cvt+0x3e>
 801db70:	3401      	adds	r4, #1
 801db72:	2102      	movs	r1, #2
 801db74:	e000      	b.n	801db78 <__cvt+0x44>
 801db76:	2103      	movs	r1, #3
 801db78:	ab03      	add	r3, sp, #12
 801db7a:	9301      	str	r3, [sp, #4]
 801db7c:	ab02      	add	r3, sp, #8
 801db7e:	9300      	str	r3, [sp, #0]
 801db80:	ec47 6b10 	vmov	d0, r6, r7
 801db84:	4653      	mov	r3, sl
 801db86:	4622      	mov	r2, r4
 801db88:	f001 faea 	bl	801f160 <_dtoa_r>
 801db8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801db90:	4605      	mov	r5, r0
 801db92:	d119      	bne.n	801dbc8 <__cvt+0x94>
 801db94:	f019 0f01 	tst.w	r9, #1
 801db98:	d00e      	beq.n	801dbb8 <__cvt+0x84>
 801db9a:	eb00 0904 	add.w	r9, r0, r4
 801db9e:	2200      	movs	r2, #0
 801dba0:	2300      	movs	r3, #0
 801dba2:	4630      	mov	r0, r6
 801dba4:	4639      	mov	r1, r7
 801dba6:	f7e2 ffa7 	bl	8000af8 <__aeabi_dcmpeq>
 801dbaa:	b108      	cbz	r0, 801dbb0 <__cvt+0x7c>
 801dbac:	f8cd 900c 	str.w	r9, [sp, #12]
 801dbb0:	2230      	movs	r2, #48	@ 0x30
 801dbb2:	9b03      	ldr	r3, [sp, #12]
 801dbb4:	454b      	cmp	r3, r9
 801dbb6:	d31e      	bcc.n	801dbf6 <__cvt+0xc2>
 801dbb8:	9b03      	ldr	r3, [sp, #12]
 801dbba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dbbc:	1b5b      	subs	r3, r3, r5
 801dbbe:	4628      	mov	r0, r5
 801dbc0:	6013      	str	r3, [r2, #0]
 801dbc2:	b004      	add	sp, #16
 801dbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801dbcc:	eb00 0904 	add.w	r9, r0, r4
 801dbd0:	d1e5      	bne.n	801db9e <__cvt+0x6a>
 801dbd2:	7803      	ldrb	r3, [r0, #0]
 801dbd4:	2b30      	cmp	r3, #48	@ 0x30
 801dbd6:	d10a      	bne.n	801dbee <__cvt+0xba>
 801dbd8:	2200      	movs	r2, #0
 801dbda:	2300      	movs	r3, #0
 801dbdc:	4630      	mov	r0, r6
 801dbde:	4639      	mov	r1, r7
 801dbe0:	f7e2 ff8a 	bl	8000af8 <__aeabi_dcmpeq>
 801dbe4:	b918      	cbnz	r0, 801dbee <__cvt+0xba>
 801dbe6:	f1c4 0401 	rsb	r4, r4, #1
 801dbea:	f8ca 4000 	str.w	r4, [sl]
 801dbee:	f8da 3000 	ldr.w	r3, [sl]
 801dbf2:	4499      	add	r9, r3
 801dbf4:	e7d3      	b.n	801db9e <__cvt+0x6a>
 801dbf6:	1c59      	adds	r1, r3, #1
 801dbf8:	9103      	str	r1, [sp, #12]
 801dbfa:	701a      	strb	r2, [r3, #0]
 801dbfc:	e7d9      	b.n	801dbb2 <__cvt+0x7e>

0801dbfe <__exponent>:
 801dbfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc00:	2900      	cmp	r1, #0
 801dc02:	bfba      	itte	lt
 801dc04:	4249      	neglt	r1, r1
 801dc06:	232d      	movlt	r3, #45	@ 0x2d
 801dc08:	232b      	movge	r3, #43	@ 0x2b
 801dc0a:	2909      	cmp	r1, #9
 801dc0c:	7002      	strb	r2, [r0, #0]
 801dc0e:	7043      	strb	r3, [r0, #1]
 801dc10:	dd29      	ble.n	801dc66 <__exponent+0x68>
 801dc12:	f10d 0307 	add.w	r3, sp, #7
 801dc16:	461d      	mov	r5, r3
 801dc18:	270a      	movs	r7, #10
 801dc1a:	461a      	mov	r2, r3
 801dc1c:	fbb1 f6f7 	udiv	r6, r1, r7
 801dc20:	fb07 1416 	mls	r4, r7, r6, r1
 801dc24:	3430      	adds	r4, #48	@ 0x30
 801dc26:	f802 4c01 	strb.w	r4, [r2, #-1]
 801dc2a:	460c      	mov	r4, r1
 801dc2c:	2c63      	cmp	r4, #99	@ 0x63
 801dc2e:	f103 33ff 	add.w	r3, r3, #4294967295
 801dc32:	4631      	mov	r1, r6
 801dc34:	dcf1      	bgt.n	801dc1a <__exponent+0x1c>
 801dc36:	3130      	adds	r1, #48	@ 0x30
 801dc38:	1e94      	subs	r4, r2, #2
 801dc3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801dc3e:	1c41      	adds	r1, r0, #1
 801dc40:	4623      	mov	r3, r4
 801dc42:	42ab      	cmp	r3, r5
 801dc44:	d30a      	bcc.n	801dc5c <__exponent+0x5e>
 801dc46:	f10d 0309 	add.w	r3, sp, #9
 801dc4a:	1a9b      	subs	r3, r3, r2
 801dc4c:	42ac      	cmp	r4, r5
 801dc4e:	bf88      	it	hi
 801dc50:	2300      	movhi	r3, #0
 801dc52:	3302      	adds	r3, #2
 801dc54:	4403      	add	r3, r0
 801dc56:	1a18      	subs	r0, r3, r0
 801dc58:	b003      	add	sp, #12
 801dc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801dc60:	f801 6f01 	strb.w	r6, [r1, #1]!
 801dc64:	e7ed      	b.n	801dc42 <__exponent+0x44>
 801dc66:	2330      	movs	r3, #48	@ 0x30
 801dc68:	3130      	adds	r1, #48	@ 0x30
 801dc6a:	7083      	strb	r3, [r0, #2]
 801dc6c:	70c1      	strb	r1, [r0, #3]
 801dc6e:	1d03      	adds	r3, r0, #4
 801dc70:	e7f1      	b.n	801dc56 <__exponent+0x58>
	...

0801dc74 <_printf_float>:
 801dc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc78:	b08d      	sub	sp, #52	@ 0x34
 801dc7a:	460c      	mov	r4, r1
 801dc7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801dc80:	4616      	mov	r6, r2
 801dc82:	461f      	mov	r7, r3
 801dc84:	4605      	mov	r5, r0
 801dc86:	f001 f91f 	bl	801eec8 <_localeconv_r>
 801dc8a:	6803      	ldr	r3, [r0, #0]
 801dc8c:	9304      	str	r3, [sp, #16]
 801dc8e:	4618      	mov	r0, r3
 801dc90:	f7e2 fb06 	bl	80002a0 <strlen>
 801dc94:	2300      	movs	r3, #0
 801dc96:	930a      	str	r3, [sp, #40]	@ 0x28
 801dc98:	f8d8 3000 	ldr.w	r3, [r8]
 801dc9c:	9005      	str	r0, [sp, #20]
 801dc9e:	3307      	adds	r3, #7
 801dca0:	f023 0307 	bic.w	r3, r3, #7
 801dca4:	f103 0208 	add.w	r2, r3, #8
 801dca8:	f894 a018 	ldrb.w	sl, [r4, #24]
 801dcac:	f8d4 b000 	ldr.w	fp, [r4]
 801dcb0:	f8c8 2000 	str.w	r2, [r8]
 801dcb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dcb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801dcbc:	9307      	str	r3, [sp, #28]
 801dcbe:	f8cd 8018 	str.w	r8, [sp, #24]
 801dcc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801dcc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dcca:	4b9c      	ldr	r3, [pc, #624]	@ (801df3c <_printf_float+0x2c8>)
 801dccc:	f04f 32ff 	mov.w	r2, #4294967295
 801dcd0:	f7e2 ff44 	bl	8000b5c <__aeabi_dcmpun>
 801dcd4:	bb70      	cbnz	r0, 801dd34 <_printf_float+0xc0>
 801dcd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dcda:	4b98      	ldr	r3, [pc, #608]	@ (801df3c <_printf_float+0x2c8>)
 801dcdc:	f04f 32ff 	mov.w	r2, #4294967295
 801dce0:	f7e2 ff1e 	bl	8000b20 <__aeabi_dcmple>
 801dce4:	bb30      	cbnz	r0, 801dd34 <_printf_float+0xc0>
 801dce6:	2200      	movs	r2, #0
 801dce8:	2300      	movs	r3, #0
 801dcea:	4640      	mov	r0, r8
 801dcec:	4649      	mov	r1, r9
 801dcee:	f7e2 ff0d 	bl	8000b0c <__aeabi_dcmplt>
 801dcf2:	b110      	cbz	r0, 801dcfa <_printf_float+0x86>
 801dcf4:	232d      	movs	r3, #45	@ 0x2d
 801dcf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dcfa:	4a91      	ldr	r2, [pc, #580]	@ (801df40 <_printf_float+0x2cc>)
 801dcfc:	4b91      	ldr	r3, [pc, #580]	@ (801df44 <_printf_float+0x2d0>)
 801dcfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801dd02:	bf94      	ite	ls
 801dd04:	4690      	movls	r8, r2
 801dd06:	4698      	movhi	r8, r3
 801dd08:	2303      	movs	r3, #3
 801dd0a:	6123      	str	r3, [r4, #16]
 801dd0c:	f02b 0304 	bic.w	r3, fp, #4
 801dd10:	6023      	str	r3, [r4, #0]
 801dd12:	f04f 0900 	mov.w	r9, #0
 801dd16:	9700      	str	r7, [sp, #0]
 801dd18:	4633      	mov	r3, r6
 801dd1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801dd1c:	4621      	mov	r1, r4
 801dd1e:	4628      	mov	r0, r5
 801dd20:	f000 f9d2 	bl	801e0c8 <_printf_common>
 801dd24:	3001      	adds	r0, #1
 801dd26:	f040 808d 	bne.w	801de44 <_printf_float+0x1d0>
 801dd2a:	f04f 30ff 	mov.w	r0, #4294967295
 801dd2e:	b00d      	add	sp, #52	@ 0x34
 801dd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd34:	4642      	mov	r2, r8
 801dd36:	464b      	mov	r3, r9
 801dd38:	4640      	mov	r0, r8
 801dd3a:	4649      	mov	r1, r9
 801dd3c:	f7e2 ff0e 	bl	8000b5c <__aeabi_dcmpun>
 801dd40:	b140      	cbz	r0, 801dd54 <_printf_float+0xe0>
 801dd42:	464b      	mov	r3, r9
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	bfbc      	itt	lt
 801dd48:	232d      	movlt	r3, #45	@ 0x2d
 801dd4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801dd4e:	4a7e      	ldr	r2, [pc, #504]	@ (801df48 <_printf_float+0x2d4>)
 801dd50:	4b7e      	ldr	r3, [pc, #504]	@ (801df4c <_printf_float+0x2d8>)
 801dd52:	e7d4      	b.n	801dcfe <_printf_float+0x8a>
 801dd54:	6863      	ldr	r3, [r4, #4]
 801dd56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801dd5a:	9206      	str	r2, [sp, #24]
 801dd5c:	1c5a      	adds	r2, r3, #1
 801dd5e:	d13b      	bne.n	801ddd8 <_printf_float+0x164>
 801dd60:	2306      	movs	r3, #6
 801dd62:	6063      	str	r3, [r4, #4]
 801dd64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801dd68:	2300      	movs	r3, #0
 801dd6a:	6022      	str	r2, [r4, #0]
 801dd6c:	9303      	str	r3, [sp, #12]
 801dd6e:	ab0a      	add	r3, sp, #40	@ 0x28
 801dd70:	e9cd a301 	strd	sl, r3, [sp, #4]
 801dd74:	ab09      	add	r3, sp, #36	@ 0x24
 801dd76:	9300      	str	r3, [sp, #0]
 801dd78:	6861      	ldr	r1, [r4, #4]
 801dd7a:	ec49 8b10 	vmov	d0, r8, r9
 801dd7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801dd82:	4628      	mov	r0, r5
 801dd84:	f7ff fed6 	bl	801db34 <__cvt>
 801dd88:	9b06      	ldr	r3, [sp, #24]
 801dd8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dd8c:	2b47      	cmp	r3, #71	@ 0x47
 801dd8e:	4680      	mov	r8, r0
 801dd90:	d129      	bne.n	801dde6 <_printf_float+0x172>
 801dd92:	1cc8      	adds	r0, r1, #3
 801dd94:	db02      	blt.n	801dd9c <_printf_float+0x128>
 801dd96:	6863      	ldr	r3, [r4, #4]
 801dd98:	4299      	cmp	r1, r3
 801dd9a:	dd41      	ble.n	801de20 <_printf_float+0x1ac>
 801dd9c:	f1aa 0a02 	sub.w	sl, sl, #2
 801dda0:	fa5f fa8a 	uxtb.w	sl, sl
 801dda4:	3901      	subs	r1, #1
 801dda6:	4652      	mov	r2, sl
 801dda8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801ddac:	9109      	str	r1, [sp, #36]	@ 0x24
 801ddae:	f7ff ff26 	bl	801dbfe <__exponent>
 801ddb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ddb4:	1813      	adds	r3, r2, r0
 801ddb6:	2a01      	cmp	r2, #1
 801ddb8:	4681      	mov	r9, r0
 801ddba:	6123      	str	r3, [r4, #16]
 801ddbc:	dc02      	bgt.n	801ddc4 <_printf_float+0x150>
 801ddbe:	6822      	ldr	r2, [r4, #0]
 801ddc0:	07d2      	lsls	r2, r2, #31
 801ddc2:	d501      	bpl.n	801ddc8 <_printf_float+0x154>
 801ddc4:	3301      	adds	r3, #1
 801ddc6:	6123      	str	r3, [r4, #16]
 801ddc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d0a2      	beq.n	801dd16 <_printf_float+0xa2>
 801ddd0:	232d      	movs	r3, #45	@ 0x2d
 801ddd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ddd6:	e79e      	b.n	801dd16 <_printf_float+0xa2>
 801ddd8:	9a06      	ldr	r2, [sp, #24]
 801ddda:	2a47      	cmp	r2, #71	@ 0x47
 801dddc:	d1c2      	bne.n	801dd64 <_printf_float+0xf0>
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d1c0      	bne.n	801dd64 <_printf_float+0xf0>
 801dde2:	2301      	movs	r3, #1
 801dde4:	e7bd      	b.n	801dd62 <_printf_float+0xee>
 801dde6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801ddea:	d9db      	bls.n	801dda4 <_printf_float+0x130>
 801ddec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801ddf0:	d118      	bne.n	801de24 <_printf_float+0x1b0>
 801ddf2:	2900      	cmp	r1, #0
 801ddf4:	6863      	ldr	r3, [r4, #4]
 801ddf6:	dd0b      	ble.n	801de10 <_printf_float+0x19c>
 801ddf8:	6121      	str	r1, [r4, #16]
 801ddfa:	b913      	cbnz	r3, 801de02 <_printf_float+0x18e>
 801ddfc:	6822      	ldr	r2, [r4, #0]
 801ddfe:	07d0      	lsls	r0, r2, #31
 801de00:	d502      	bpl.n	801de08 <_printf_float+0x194>
 801de02:	3301      	adds	r3, #1
 801de04:	440b      	add	r3, r1
 801de06:	6123      	str	r3, [r4, #16]
 801de08:	65a1      	str	r1, [r4, #88]	@ 0x58
 801de0a:	f04f 0900 	mov.w	r9, #0
 801de0e:	e7db      	b.n	801ddc8 <_printf_float+0x154>
 801de10:	b913      	cbnz	r3, 801de18 <_printf_float+0x1a4>
 801de12:	6822      	ldr	r2, [r4, #0]
 801de14:	07d2      	lsls	r2, r2, #31
 801de16:	d501      	bpl.n	801de1c <_printf_float+0x1a8>
 801de18:	3302      	adds	r3, #2
 801de1a:	e7f4      	b.n	801de06 <_printf_float+0x192>
 801de1c:	2301      	movs	r3, #1
 801de1e:	e7f2      	b.n	801de06 <_printf_float+0x192>
 801de20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801de24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de26:	4299      	cmp	r1, r3
 801de28:	db05      	blt.n	801de36 <_printf_float+0x1c2>
 801de2a:	6823      	ldr	r3, [r4, #0]
 801de2c:	6121      	str	r1, [r4, #16]
 801de2e:	07d8      	lsls	r0, r3, #31
 801de30:	d5ea      	bpl.n	801de08 <_printf_float+0x194>
 801de32:	1c4b      	adds	r3, r1, #1
 801de34:	e7e7      	b.n	801de06 <_printf_float+0x192>
 801de36:	2900      	cmp	r1, #0
 801de38:	bfd4      	ite	le
 801de3a:	f1c1 0202 	rsble	r2, r1, #2
 801de3e:	2201      	movgt	r2, #1
 801de40:	4413      	add	r3, r2
 801de42:	e7e0      	b.n	801de06 <_printf_float+0x192>
 801de44:	6823      	ldr	r3, [r4, #0]
 801de46:	055a      	lsls	r2, r3, #21
 801de48:	d407      	bmi.n	801de5a <_printf_float+0x1e6>
 801de4a:	6923      	ldr	r3, [r4, #16]
 801de4c:	4642      	mov	r2, r8
 801de4e:	4631      	mov	r1, r6
 801de50:	4628      	mov	r0, r5
 801de52:	47b8      	blx	r7
 801de54:	3001      	adds	r0, #1
 801de56:	d12b      	bne.n	801deb0 <_printf_float+0x23c>
 801de58:	e767      	b.n	801dd2a <_printf_float+0xb6>
 801de5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801de5e:	f240 80dd 	bls.w	801e01c <_printf_float+0x3a8>
 801de62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801de66:	2200      	movs	r2, #0
 801de68:	2300      	movs	r3, #0
 801de6a:	f7e2 fe45 	bl	8000af8 <__aeabi_dcmpeq>
 801de6e:	2800      	cmp	r0, #0
 801de70:	d033      	beq.n	801deda <_printf_float+0x266>
 801de72:	4a37      	ldr	r2, [pc, #220]	@ (801df50 <_printf_float+0x2dc>)
 801de74:	2301      	movs	r3, #1
 801de76:	4631      	mov	r1, r6
 801de78:	4628      	mov	r0, r5
 801de7a:	47b8      	blx	r7
 801de7c:	3001      	adds	r0, #1
 801de7e:	f43f af54 	beq.w	801dd2a <_printf_float+0xb6>
 801de82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801de86:	4543      	cmp	r3, r8
 801de88:	db02      	blt.n	801de90 <_printf_float+0x21c>
 801de8a:	6823      	ldr	r3, [r4, #0]
 801de8c:	07d8      	lsls	r0, r3, #31
 801de8e:	d50f      	bpl.n	801deb0 <_printf_float+0x23c>
 801de90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801de94:	4631      	mov	r1, r6
 801de96:	4628      	mov	r0, r5
 801de98:	47b8      	blx	r7
 801de9a:	3001      	adds	r0, #1
 801de9c:	f43f af45 	beq.w	801dd2a <_printf_float+0xb6>
 801dea0:	f04f 0900 	mov.w	r9, #0
 801dea4:	f108 38ff 	add.w	r8, r8, #4294967295
 801dea8:	f104 0a1a 	add.w	sl, r4, #26
 801deac:	45c8      	cmp	r8, r9
 801deae:	dc09      	bgt.n	801dec4 <_printf_float+0x250>
 801deb0:	6823      	ldr	r3, [r4, #0]
 801deb2:	079b      	lsls	r3, r3, #30
 801deb4:	f100 8103 	bmi.w	801e0be <_printf_float+0x44a>
 801deb8:	68e0      	ldr	r0, [r4, #12]
 801deba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801debc:	4298      	cmp	r0, r3
 801debe:	bfb8      	it	lt
 801dec0:	4618      	movlt	r0, r3
 801dec2:	e734      	b.n	801dd2e <_printf_float+0xba>
 801dec4:	2301      	movs	r3, #1
 801dec6:	4652      	mov	r2, sl
 801dec8:	4631      	mov	r1, r6
 801deca:	4628      	mov	r0, r5
 801decc:	47b8      	blx	r7
 801dece:	3001      	adds	r0, #1
 801ded0:	f43f af2b 	beq.w	801dd2a <_printf_float+0xb6>
 801ded4:	f109 0901 	add.w	r9, r9, #1
 801ded8:	e7e8      	b.n	801deac <_printf_float+0x238>
 801deda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dedc:	2b00      	cmp	r3, #0
 801dede:	dc39      	bgt.n	801df54 <_printf_float+0x2e0>
 801dee0:	4a1b      	ldr	r2, [pc, #108]	@ (801df50 <_printf_float+0x2dc>)
 801dee2:	2301      	movs	r3, #1
 801dee4:	4631      	mov	r1, r6
 801dee6:	4628      	mov	r0, r5
 801dee8:	47b8      	blx	r7
 801deea:	3001      	adds	r0, #1
 801deec:	f43f af1d 	beq.w	801dd2a <_printf_float+0xb6>
 801def0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801def4:	ea59 0303 	orrs.w	r3, r9, r3
 801def8:	d102      	bne.n	801df00 <_printf_float+0x28c>
 801defa:	6823      	ldr	r3, [r4, #0]
 801defc:	07d9      	lsls	r1, r3, #31
 801defe:	d5d7      	bpl.n	801deb0 <_printf_float+0x23c>
 801df00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801df04:	4631      	mov	r1, r6
 801df06:	4628      	mov	r0, r5
 801df08:	47b8      	blx	r7
 801df0a:	3001      	adds	r0, #1
 801df0c:	f43f af0d 	beq.w	801dd2a <_printf_float+0xb6>
 801df10:	f04f 0a00 	mov.w	sl, #0
 801df14:	f104 0b1a 	add.w	fp, r4, #26
 801df18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df1a:	425b      	negs	r3, r3
 801df1c:	4553      	cmp	r3, sl
 801df1e:	dc01      	bgt.n	801df24 <_printf_float+0x2b0>
 801df20:	464b      	mov	r3, r9
 801df22:	e793      	b.n	801de4c <_printf_float+0x1d8>
 801df24:	2301      	movs	r3, #1
 801df26:	465a      	mov	r2, fp
 801df28:	4631      	mov	r1, r6
 801df2a:	4628      	mov	r0, r5
 801df2c:	47b8      	blx	r7
 801df2e:	3001      	adds	r0, #1
 801df30:	f43f aefb 	beq.w	801dd2a <_printf_float+0xb6>
 801df34:	f10a 0a01 	add.w	sl, sl, #1
 801df38:	e7ee      	b.n	801df18 <_printf_float+0x2a4>
 801df3a:	bf00      	nop
 801df3c:	7fefffff 	.word	0x7fefffff
 801df40:	08025625 	.word	0x08025625
 801df44:	08025629 	.word	0x08025629
 801df48:	0802562d 	.word	0x0802562d
 801df4c:	08025631 	.word	0x08025631
 801df50:	08025635 	.word	0x08025635
 801df54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801df56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801df5a:	4553      	cmp	r3, sl
 801df5c:	bfa8      	it	ge
 801df5e:	4653      	movge	r3, sl
 801df60:	2b00      	cmp	r3, #0
 801df62:	4699      	mov	r9, r3
 801df64:	dc36      	bgt.n	801dfd4 <_printf_float+0x360>
 801df66:	f04f 0b00 	mov.w	fp, #0
 801df6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801df6e:	f104 021a 	add.w	r2, r4, #26
 801df72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801df74:	9306      	str	r3, [sp, #24]
 801df76:	eba3 0309 	sub.w	r3, r3, r9
 801df7a:	455b      	cmp	r3, fp
 801df7c:	dc31      	bgt.n	801dfe2 <_printf_float+0x36e>
 801df7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df80:	459a      	cmp	sl, r3
 801df82:	dc3a      	bgt.n	801dffa <_printf_float+0x386>
 801df84:	6823      	ldr	r3, [r4, #0]
 801df86:	07da      	lsls	r2, r3, #31
 801df88:	d437      	bmi.n	801dffa <_printf_float+0x386>
 801df8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df8c:	ebaa 0903 	sub.w	r9, sl, r3
 801df90:	9b06      	ldr	r3, [sp, #24]
 801df92:	ebaa 0303 	sub.w	r3, sl, r3
 801df96:	4599      	cmp	r9, r3
 801df98:	bfa8      	it	ge
 801df9a:	4699      	movge	r9, r3
 801df9c:	f1b9 0f00 	cmp.w	r9, #0
 801dfa0:	dc33      	bgt.n	801e00a <_printf_float+0x396>
 801dfa2:	f04f 0800 	mov.w	r8, #0
 801dfa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dfaa:	f104 0b1a 	add.w	fp, r4, #26
 801dfae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfb0:	ebaa 0303 	sub.w	r3, sl, r3
 801dfb4:	eba3 0309 	sub.w	r3, r3, r9
 801dfb8:	4543      	cmp	r3, r8
 801dfba:	f77f af79 	ble.w	801deb0 <_printf_float+0x23c>
 801dfbe:	2301      	movs	r3, #1
 801dfc0:	465a      	mov	r2, fp
 801dfc2:	4631      	mov	r1, r6
 801dfc4:	4628      	mov	r0, r5
 801dfc6:	47b8      	blx	r7
 801dfc8:	3001      	adds	r0, #1
 801dfca:	f43f aeae 	beq.w	801dd2a <_printf_float+0xb6>
 801dfce:	f108 0801 	add.w	r8, r8, #1
 801dfd2:	e7ec      	b.n	801dfae <_printf_float+0x33a>
 801dfd4:	4642      	mov	r2, r8
 801dfd6:	4631      	mov	r1, r6
 801dfd8:	4628      	mov	r0, r5
 801dfda:	47b8      	blx	r7
 801dfdc:	3001      	adds	r0, #1
 801dfde:	d1c2      	bne.n	801df66 <_printf_float+0x2f2>
 801dfe0:	e6a3      	b.n	801dd2a <_printf_float+0xb6>
 801dfe2:	2301      	movs	r3, #1
 801dfe4:	4631      	mov	r1, r6
 801dfe6:	4628      	mov	r0, r5
 801dfe8:	9206      	str	r2, [sp, #24]
 801dfea:	47b8      	blx	r7
 801dfec:	3001      	adds	r0, #1
 801dfee:	f43f ae9c 	beq.w	801dd2a <_printf_float+0xb6>
 801dff2:	9a06      	ldr	r2, [sp, #24]
 801dff4:	f10b 0b01 	add.w	fp, fp, #1
 801dff8:	e7bb      	b.n	801df72 <_printf_float+0x2fe>
 801dffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dffe:	4631      	mov	r1, r6
 801e000:	4628      	mov	r0, r5
 801e002:	47b8      	blx	r7
 801e004:	3001      	adds	r0, #1
 801e006:	d1c0      	bne.n	801df8a <_printf_float+0x316>
 801e008:	e68f      	b.n	801dd2a <_printf_float+0xb6>
 801e00a:	9a06      	ldr	r2, [sp, #24]
 801e00c:	464b      	mov	r3, r9
 801e00e:	4442      	add	r2, r8
 801e010:	4631      	mov	r1, r6
 801e012:	4628      	mov	r0, r5
 801e014:	47b8      	blx	r7
 801e016:	3001      	adds	r0, #1
 801e018:	d1c3      	bne.n	801dfa2 <_printf_float+0x32e>
 801e01a:	e686      	b.n	801dd2a <_printf_float+0xb6>
 801e01c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e020:	f1ba 0f01 	cmp.w	sl, #1
 801e024:	dc01      	bgt.n	801e02a <_printf_float+0x3b6>
 801e026:	07db      	lsls	r3, r3, #31
 801e028:	d536      	bpl.n	801e098 <_printf_float+0x424>
 801e02a:	2301      	movs	r3, #1
 801e02c:	4642      	mov	r2, r8
 801e02e:	4631      	mov	r1, r6
 801e030:	4628      	mov	r0, r5
 801e032:	47b8      	blx	r7
 801e034:	3001      	adds	r0, #1
 801e036:	f43f ae78 	beq.w	801dd2a <_printf_float+0xb6>
 801e03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e03e:	4631      	mov	r1, r6
 801e040:	4628      	mov	r0, r5
 801e042:	47b8      	blx	r7
 801e044:	3001      	adds	r0, #1
 801e046:	f43f ae70 	beq.w	801dd2a <_printf_float+0xb6>
 801e04a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801e04e:	2200      	movs	r2, #0
 801e050:	2300      	movs	r3, #0
 801e052:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e056:	f7e2 fd4f 	bl	8000af8 <__aeabi_dcmpeq>
 801e05a:	b9c0      	cbnz	r0, 801e08e <_printf_float+0x41a>
 801e05c:	4653      	mov	r3, sl
 801e05e:	f108 0201 	add.w	r2, r8, #1
 801e062:	4631      	mov	r1, r6
 801e064:	4628      	mov	r0, r5
 801e066:	47b8      	blx	r7
 801e068:	3001      	adds	r0, #1
 801e06a:	d10c      	bne.n	801e086 <_printf_float+0x412>
 801e06c:	e65d      	b.n	801dd2a <_printf_float+0xb6>
 801e06e:	2301      	movs	r3, #1
 801e070:	465a      	mov	r2, fp
 801e072:	4631      	mov	r1, r6
 801e074:	4628      	mov	r0, r5
 801e076:	47b8      	blx	r7
 801e078:	3001      	adds	r0, #1
 801e07a:	f43f ae56 	beq.w	801dd2a <_printf_float+0xb6>
 801e07e:	f108 0801 	add.w	r8, r8, #1
 801e082:	45d0      	cmp	r8, sl
 801e084:	dbf3      	blt.n	801e06e <_printf_float+0x3fa>
 801e086:	464b      	mov	r3, r9
 801e088:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801e08c:	e6df      	b.n	801de4e <_printf_float+0x1da>
 801e08e:	f04f 0800 	mov.w	r8, #0
 801e092:	f104 0b1a 	add.w	fp, r4, #26
 801e096:	e7f4      	b.n	801e082 <_printf_float+0x40e>
 801e098:	2301      	movs	r3, #1
 801e09a:	4642      	mov	r2, r8
 801e09c:	e7e1      	b.n	801e062 <_printf_float+0x3ee>
 801e09e:	2301      	movs	r3, #1
 801e0a0:	464a      	mov	r2, r9
 801e0a2:	4631      	mov	r1, r6
 801e0a4:	4628      	mov	r0, r5
 801e0a6:	47b8      	blx	r7
 801e0a8:	3001      	adds	r0, #1
 801e0aa:	f43f ae3e 	beq.w	801dd2a <_printf_float+0xb6>
 801e0ae:	f108 0801 	add.w	r8, r8, #1
 801e0b2:	68e3      	ldr	r3, [r4, #12]
 801e0b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e0b6:	1a5b      	subs	r3, r3, r1
 801e0b8:	4543      	cmp	r3, r8
 801e0ba:	dcf0      	bgt.n	801e09e <_printf_float+0x42a>
 801e0bc:	e6fc      	b.n	801deb8 <_printf_float+0x244>
 801e0be:	f04f 0800 	mov.w	r8, #0
 801e0c2:	f104 0919 	add.w	r9, r4, #25
 801e0c6:	e7f4      	b.n	801e0b2 <_printf_float+0x43e>

0801e0c8 <_printf_common>:
 801e0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0cc:	4616      	mov	r6, r2
 801e0ce:	4698      	mov	r8, r3
 801e0d0:	688a      	ldr	r2, [r1, #8]
 801e0d2:	690b      	ldr	r3, [r1, #16]
 801e0d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e0d8:	4293      	cmp	r3, r2
 801e0da:	bfb8      	it	lt
 801e0dc:	4613      	movlt	r3, r2
 801e0de:	6033      	str	r3, [r6, #0]
 801e0e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e0e4:	4607      	mov	r7, r0
 801e0e6:	460c      	mov	r4, r1
 801e0e8:	b10a      	cbz	r2, 801e0ee <_printf_common+0x26>
 801e0ea:	3301      	adds	r3, #1
 801e0ec:	6033      	str	r3, [r6, #0]
 801e0ee:	6823      	ldr	r3, [r4, #0]
 801e0f0:	0699      	lsls	r1, r3, #26
 801e0f2:	bf42      	ittt	mi
 801e0f4:	6833      	ldrmi	r3, [r6, #0]
 801e0f6:	3302      	addmi	r3, #2
 801e0f8:	6033      	strmi	r3, [r6, #0]
 801e0fa:	6825      	ldr	r5, [r4, #0]
 801e0fc:	f015 0506 	ands.w	r5, r5, #6
 801e100:	d106      	bne.n	801e110 <_printf_common+0x48>
 801e102:	f104 0a19 	add.w	sl, r4, #25
 801e106:	68e3      	ldr	r3, [r4, #12]
 801e108:	6832      	ldr	r2, [r6, #0]
 801e10a:	1a9b      	subs	r3, r3, r2
 801e10c:	42ab      	cmp	r3, r5
 801e10e:	dc26      	bgt.n	801e15e <_printf_common+0x96>
 801e110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e114:	6822      	ldr	r2, [r4, #0]
 801e116:	3b00      	subs	r3, #0
 801e118:	bf18      	it	ne
 801e11a:	2301      	movne	r3, #1
 801e11c:	0692      	lsls	r2, r2, #26
 801e11e:	d42b      	bmi.n	801e178 <_printf_common+0xb0>
 801e120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e124:	4641      	mov	r1, r8
 801e126:	4638      	mov	r0, r7
 801e128:	47c8      	blx	r9
 801e12a:	3001      	adds	r0, #1
 801e12c:	d01e      	beq.n	801e16c <_printf_common+0xa4>
 801e12e:	6823      	ldr	r3, [r4, #0]
 801e130:	6922      	ldr	r2, [r4, #16]
 801e132:	f003 0306 	and.w	r3, r3, #6
 801e136:	2b04      	cmp	r3, #4
 801e138:	bf02      	ittt	eq
 801e13a:	68e5      	ldreq	r5, [r4, #12]
 801e13c:	6833      	ldreq	r3, [r6, #0]
 801e13e:	1aed      	subeq	r5, r5, r3
 801e140:	68a3      	ldr	r3, [r4, #8]
 801e142:	bf0c      	ite	eq
 801e144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e148:	2500      	movne	r5, #0
 801e14a:	4293      	cmp	r3, r2
 801e14c:	bfc4      	itt	gt
 801e14e:	1a9b      	subgt	r3, r3, r2
 801e150:	18ed      	addgt	r5, r5, r3
 801e152:	2600      	movs	r6, #0
 801e154:	341a      	adds	r4, #26
 801e156:	42b5      	cmp	r5, r6
 801e158:	d11a      	bne.n	801e190 <_printf_common+0xc8>
 801e15a:	2000      	movs	r0, #0
 801e15c:	e008      	b.n	801e170 <_printf_common+0xa8>
 801e15e:	2301      	movs	r3, #1
 801e160:	4652      	mov	r2, sl
 801e162:	4641      	mov	r1, r8
 801e164:	4638      	mov	r0, r7
 801e166:	47c8      	blx	r9
 801e168:	3001      	adds	r0, #1
 801e16a:	d103      	bne.n	801e174 <_printf_common+0xac>
 801e16c:	f04f 30ff 	mov.w	r0, #4294967295
 801e170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e174:	3501      	adds	r5, #1
 801e176:	e7c6      	b.n	801e106 <_printf_common+0x3e>
 801e178:	18e1      	adds	r1, r4, r3
 801e17a:	1c5a      	adds	r2, r3, #1
 801e17c:	2030      	movs	r0, #48	@ 0x30
 801e17e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e182:	4422      	add	r2, r4
 801e184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e18c:	3302      	adds	r3, #2
 801e18e:	e7c7      	b.n	801e120 <_printf_common+0x58>
 801e190:	2301      	movs	r3, #1
 801e192:	4622      	mov	r2, r4
 801e194:	4641      	mov	r1, r8
 801e196:	4638      	mov	r0, r7
 801e198:	47c8      	blx	r9
 801e19a:	3001      	adds	r0, #1
 801e19c:	d0e6      	beq.n	801e16c <_printf_common+0xa4>
 801e19e:	3601      	adds	r6, #1
 801e1a0:	e7d9      	b.n	801e156 <_printf_common+0x8e>
	...

0801e1a4 <_printf_i>:
 801e1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e1a8:	7e0f      	ldrb	r7, [r1, #24]
 801e1aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e1ac:	2f78      	cmp	r7, #120	@ 0x78
 801e1ae:	4691      	mov	r9, r2
 801e1b0:	4680      	mov	r8, r0
 801e1b2:	460c      	mov	r4, r1
 801e1b4:	469a      	mov	sl, r3
 801e1b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e1ba:	d807      	bhi.n	801e1cc <_printf_i+0x28>
 801e1bc:	2f62      	cmp	r7, #98	@ 0x62
 801e1be:	d80a      	bhi.n	801e1d6 <_printf_i+0x32>
 801e1c0:	2f00      	cmp	r7, #0
 801e1c2:	f000 80d2 	beq.w	801e36a <_printf_i+0x1c6>
 801e1c6:	2f58      	cmp	r7, #88	@ 0x58
 801e1c8:	f000 80b9 	beq.w	801e33e <_printf_i+0x19a>
 801e1cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e1d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e1d4:	e03a      	b.n	801e24c <_printf_i+0xa8>
 801e1d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e1da:	2b15      	cmp	r3, #21
 801e1dc:	d8f6      	bhi.n	801e1cc <_printf_i+0x28>
 801e1de:	a101      	add	r1, pc, #4	@ (adr r1, 801e1e4 <_printf_i+0x40>)
 801e1e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e1e4:	0801e23d 	.word	0x0801e23d
 801e1e8:	0801e251 	.word	0x0801e251
 801e1ec:	0801e1cd 	.word	0x0801e1cd
 801e1f0:	0801e1cd 	.word	0x0801e1cd
 801e1f4:	0801e1cd 	.word	0x0801e1cd
 801e1f8:	0801e1cd 	.word	0x0801e1cd
 801e1fc:	0801e251 	.word	0x0801e251
 801e200:	0801e1cd 	.word	0x0801e1cd
 801e204:	0801e1cd 	.word	0x0801e1cd
 801e208:	0801e1cd 	.word	0x0801e1cd
 801e20c:	0801e1cd 	.word	0x0801e1cd
 801e210:	0801e351 	.word	0x0801e351
 801e214:	0801e27b 	.word	0x0801e27b
 801e218:	0801e30b 	.word	0x0801e30b
 801e21c:	0801e1cd 	.word	0x0801e1cd
 801e220:	0801e1cd 	.word	0x0801e1cd
 801e224:	0801e373 	.word	0x0801e373
 801e228:	0801e1cd 	.word	0x0801e1cd
 801e22c:	0801e27b 	.word	0x0801e27b
 801e230:	0801e1cd 	.word	0x0801e1cd
 801e234:	0801e1cd 	.word	0x0801e1cd
 801e238:	0801e313 	.word	0x0801e313
 801e23c:	6833      	ldr	r3, [r6, #0]
 801e23e:	1d1a      	adds	r2, r3, #4
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	6032      	str	r2, [r6, #0]
 801e244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e24c:	2301      	movs	r3, #1
 801e24e:	e09d      	b.n	801e38c <_printf_i+0x1e8>
 801e250:	6833      	ldr	r3, [r6, #0]
 801e252:	6820      	ldr	r0, [r4, #0]
 801e254:	1d19      	adds	r1, r3, #4
 801e256:	6031      	str	r1, [r6, #0]
 801e258:	0606      	lsls	r6, r0, #24
 801e25a:	d501      	bpl.n	801e260 <_printf_i+0xbc>
 801e25c:	681d      	ldr	r5, [r3, #0]
 801e25e:	e003      	b.n	801e268 <_printf_i+0xc4>
 801e260:	0645      	lsls	r5, r0, #25
 801e262:	d5fb      	bpl.n	801e25c <_printf_i+0xb8>
 801e264:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e268:	2d00      	cmp	r5, #0
 801e26a:	da03      	bge.n	801e274 <_printf_i+0xd0>
 801e26c:	232d      	movs	r3, #45	@ 0x2d
 801e26e:	426d      	negs	r5, r5
 801e270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e274:	4859      	ldr	r0, [pc, #356]	@ (801e3dc <_printf_i+0x238>)
 801e276:	230a      	movs	r3, #10
 801e278:	e011      	b.n	801e29e <_printf_i+0xfa>
 801e27a:	6821      	ldr	r1, [r4, #0]
 801e27c:	6833      	ldr	r3, [r6, #0]
 801e27e:	0608      	lsls	r0, r1, #24
 801e280:	f853 5b04 	ldr.w	r5, [r3], #4
 801e284:	d402      	bmi.n	801e28c <_printf_i+0xe8>
 801e286:	0649      	lsls	r1, r1, #25
 801e288:	bf48      	it	mi
 801e28a:	b2ad      	uxthmi	r5, r5
 801e28c:	2f6f      	cmp	r7, #111	@ 0x6f
 801e28e:	4853      	ldr	r0, [pc, #332]	@ (801e3dc <_printf_i+0x238>)
 801e290:	6033      	str	r3, [r6, #0]
 801e292:	bf14      	ite	ne
 801e294:	230a      	movne	r3, #10
 801e296:	2308      	moveq	r3, #8
 801e298:	2100      	movs	r1, #0
 801e29a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e29e:	6866      	ldr	r6, [r4, #4]
 801e2a0:	60a6      	str	r6, [r4, #8]
 801e2a2:	2e00      	cmp	r6, #0
 801e2a4:	bfa2      	ittt	ge
 801e2a6:	6821      	ldrge	r1, [r4, #0]
 801e2a8:	f021 0104 	bicge.w	r1, r1, #4
 801e2ac:	6021      	strge	r1, [r4, #0]
 801e2ae:	b90d      	cbnz	r5, 801e2b4 <_printf_i+0x110>
 801e2b0:	2e00      	cmp	r6, #0
 801e2b2:	d04b      	beq.n	801e34c <_printf_i+0x1a8>
 801e2b4:	4616      	mov	r6, r2
 801e2b6:	fbb5 f1f3 	udiv	r1, r5, r3
 801e2ba:	fb03 5711 	mls	r7, r3, r1, r5
 801e2be:	5dc7      	ldrb	r7, [r0, r7]
 801e2c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e2c4:	462f      	mov	r7, r5
 801e2c6:	42bb      	cmp	r3, r7
 801e2c8:	460d      	mov	r5, r1
 801e2ca:	d9f4      	bls.n	801e2b6 <_printf_i+0x112>
 801e2cc:	2b08      	cmp	r3, #8
 801e2ce:	d10b      	bne.n	801e2e8 <_printf_i+0x144>
 801e2d0:	6823      	ldr	r3, [r4, #0]
 801e2d2:	07df      	lsls	r7, r3, #31
 801e2d4:	d508      	bpl.n	801e2e8 <_printf_i+0x144>
 801e2d6:	6923      	ldr	r3, [r4, #16]
 801e2d8:	6861      	ldr	r1, [r4, #4]
 801e2da:	4299      	cmp	r1, r3
 801e2dc:	bfde      	ittt	le
 801e2de:	2330      	movle	r3, #48	@ 0x30
 801e2e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e2e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e2e8:	1b92      	subs	r2, r2, r6
 801e2ea:	6122      	str	r2, [r4, #16]
 801e2ec:	f8cd a000 	str.w	sl, [sp]
 801e2f0:	464b      	mov	r3, r9
 801e2f2:	aa03      	add	r2, sp, #12
 801e2f4:	4621      	mov	r1, r4
 801e2f6:	4640      	mov	r0, r8
 801e2f8:	f7ff fee6 	bl	801e0c8 <_printf_common>
 801e2fc:	3001      	adds	r0, #1
 801e2fe:	d14a      	bne.n	801e396 <_printf_i+0x1f2>
 801e300:	f04f 30ff 	mov.w	r0, #4294967295
 801e304:	b004      	add	sp, #16
 801e306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e30a:	6823      	ldr	r3, [r4, #0]
 801e30c:	f043 0320 	orr.w	r3, r3, #32
 801e310:	6023      	str	r3, [r4, #0]
 801e312:	4833      	ldr	r0, [pc, #204]	@ (801e3e0 <_printf_i+0x23c>)
 801e314:	2778      	movs	r7, #120	@ 0x78
 801e316:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e31a:	6823      	ldr	r3, [r4, #0]
 801e31c:	6831      	ldr	r1, [r6, #0]
 801e31e:	061f      	lsls	r7, r3, #24
 801e320:	f851 5b04 	ldr.w	r5, [r1], #4
 801e324:	d402      	bmi.n	801e32c <_printf_i+0x188>
 801e326:	065f      	lsls	r7, r3, #25
 801e328:	bf48      	it	mi
 801e32a:	b2ad      	uxthmi	r5, r5
 801e32c:	6031      	str	r1, [r6, #0]
 801e32e:	07d9      	lsls	r1, r3, #31
 801e330:	bf44      	itt	mi
 801e332:	f043 0320 	orrmi.w	r3, r3, #32
 801e336:	6023      	strmi	r3, [r4, #0]
 801e338:	b11d      	cbz	r5, 801e342 <_printf_i+0x19e>
 801e33a:	2310      	movs	r3, #16
 801e33c:	e7ac      	b.n	801e298 <_printf_i+0xf4>
 801e33e:	4827      	ldr	r0, [pc, #156]	@ (801e3dc <_printf_i+0x238>)
 801e340:	e7e9      	b.n	801e316 <_printf_i+0x172>
 801e342:	6823      	ldr	r3, [r4, #0]
 801e344:	f023 0320 	bic.w	r3, r3, #32
 801e348:	6023      	str	r3, [r4, #0]
 801e34a:	e7f6      	b.n	801e33a <_printf_i+0x196>
 801e34c:	4616      	mov	r6, r2
 801e34e:	e7bd      	b.n	801e2cc <_printf_i+0x128>
 801e350:	6833      	ldr	r3, [r6, #0]
 801e352:	6825      	ldr	r5, [r4, #0]
 801e354:	6961      	ldr	r1, [r4, #20]
 801e356:	1d18      	adds	r0, r3, #4
 801e358:	6030      	str	r0, [r6, #0]
 801e35a:	062e      	lsls	r6, r5, #24
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	d501      	bpl.n	801e364 <_printf_i+0x1c0>
 801e360:	6019      	str	r1, [r3, #0]
 801e362:	e002      	b.n	801e36a <_printf_i+0x1c6>
 801e364:	0668      	lsls	r0, r5, #25
 801e366:	d5fb      	bpl.n	801e360 <_printf_i+0x1bc>
 801e368:	8019      	strh	r1, [r3, #0]
 801e36a:	2300      	movs	r3, #0
 801e36c:	6123      	str	r3, [r4, #16]
 801e36e:	4616      	mov	r6, r2
 801e370:	e7bc      	b.n	801e2ec <_printf_i+0x148>
 801e372:	6833      	ldr	r3, [r6, #0]
 801e374:	1d1a      	adds	r2, r3, #4
 801e376:	6032      	str	r2, [r6, #0]
 801e378:	681e      	ldr	r6, [r3, #0]
 801e37a:	6862      	ldr	r2, [r4, #4]
 801e37c:	2100      	movs	r1, #0
 801e37e:	4630      	mov	r0, r6
 801e380:	f7e1 ff3e 	bl	8000200 <memchr>
 801e384:	b108      	cbz	r0, 801e38a <_printf_i+0x1e6>
 801e386:	1b80      	subs	r0, r0, r6
 801e388:	6060      	str	r0, [r4, #4]
 801e38a:	6863      	ldr	r3, [r4, #4]
 801e38c:	6123      	str	r3, [r4, #16]
 801e38e:	2300      	movs	r3, #0
 801e390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e394:	e7aa      	b.n	801e2ec <_printf_i+0x148>
 801e396:	6923      	ldr	r3, [r4, #16]
 801e398:	4632      	mov	r2, r6
 801e39a:	4649      	mov	r1, r9
 801e39c:	4640      	mov	r0, r8
 801e39e:	47d0      	blx	sl
 801e3a0:	3001      	adds	r0, #1
 801e3a2:	d0ad      	beq.n	801e300 <_printf_i+0x15c>
 801e3a4:	6823      	ldr	r3, [r4, #0]
 801e3a6:	079b      	lsls	r3, r3, #30
 801e3a8:	d413      	bmi.n	801e3d2 <_printf_i+0x22e>
 801e3aa:	68e0      	ldr	r0, [r4, #12]
 801e3ac:	9b03      	ldr	r3, [sp, #12]
 801e3ae:	4298      	cmp	r0, r3
 801e3b0:	bfb8      	it	lt
 801e3b2:	4618      	movlt	r0, r3
 801e3b4:	e7a6      	b.n	801e304 <_printf_i+0x160>
 801e3b6:	2301      	movs	r3, #1
 801e3b8:	4632      	mov	r2, r6
 801e3ba:	4649      	mov	r1, r9
 801e3bc:	4640      	mov	r0, r8
 801e3be:	47d0      	blx	sl
 801e3c0:	3001      	adds	r0, #1
 801e3c2:	d09d      	beq.n	801e300 <_printf_i+0x15c>
 801e3c4:	3501      	adds	r5, #1
 801e3c6:	68e3      	ldr	r3, [r4, #12]
 801e3c8:	9903      	ldr	r1, [sp, #12]
 801e3ca:	1a5b      	subs	r3, r3, r1
 801e3cc:	42ab      	cmp	r3, r5
 801e3ce:	dcf2      	bgt.n	801e3b6 <_printf_i+0x212>
 801e3d0:	e7eb      	b.n	801e3aa <_printf_i+0x206>
 801e3d2:	2500      	movs	r5, #0
 801e3d4:	f104 0619 	add.w	r6, r4, #25
 801e3d8:	e7f5      	b.n	801e3c6 <_printf_i+0x222>
 801e3da:	bf00      	nop
 801e3dc:	08025637 	.word	0x08025637
 801e3e0:	08025648 	.word	0x08025648

0801e3e4 <_scanf_float>:
 801e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3e8:	b087      	sub	sp, #28
 801e3ea:	4617      	mov	r7, r2
 801e3ec:	9303      	str	r3, [sp, #12]
 801e3ee:	688b      	ldr	r3, [r1, #8]
 801e3f0:	1e5a      	subs	r2, r3, #1
 801e3f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e3f6:	bf81      	itttt	hi
 801e3f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e3fc:	eb03 0b05 	addhi.w	fp, r3, r5
 801e400:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e404:	608b      	strhi	r3, [r1, #8]
 801e406:	680b      	ldr	r3, [r1, #0]
 801e408:	460a      	mov	r2, r1
 801e40a:	f04f 0500 	mov.w	r5, #0
 801e40e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801e412:	f842 3b1c 	str.w	r3, [r2], #28
 801e416:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e41a:	4680      	mov	r8, r0
 801e41c:	460c      	mov	r4, r1
 801e41e:	bf98      	it	ls
 801e420:	f04f 0b00 	movls.w	fp, #0
 801e424:	9201      	str	r2, [sp, #4]
 801e426:	4616      	mov	r6, r2
 801e428:	46aa      	mov	sl, r5
 801e42a:	46a9      	mov	r9, r5
 801e42c:	9502      	str	r5, [sp, #8]
 801e42e:	68a2      	ldr	r2, [r4, #8]
 801e430:	b152      	cbz	r2, 801e448 <_scanf_float+0x64>
 801e432:	683b      	ldr	r3, [r7, #0]
 801e434:	781b      	ldrb	r3, [r3, #0]
 801e436:	2b4e      	cmp	r3, #78	@ 0x4e
 801e438:	d864      	bhi.n	801e504 <_scanf_float+0x120>
 801e43a:	2b40      	cmp	r3, #64	@ 0x40
 801e43c:	d83c      	bhi.n	801e4b8 <_scanf_float+0xd4>
 801e43e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801e442:	b2c8      	uxtb	r0, r1
 801e444:	280e      	cmp	r0, #14
 801e446:	d93a      	bls.n	801e4be <_scanf_float+0xda>
 801e448:	f1b9 0f00 	cmp.w	r9, #0
 801e44c:	d003      	beq.n	801e456 <_scanf_float+0x72>
 801e44e:	6823      	ldr	r3, [r4, #0]
 801e450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e454:	6023      	str	r3, [r4, #0]
 801e456:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e45a:	f1ba 0f01 	cmp.w	sl, #1
 801e45e:	f200 8117 	bhi.w	801e690 <_scanf_float+0x2ac>
 801e462:	9b01      	ldr	r3, [sp, #4]
 801e464:	429e      	cmp	r6, r3
 801e466:	f200 8108 	bhi.w	801e67a <_scanf_float+0x296>
 801e46a:	2001      	movs	r0, #1
 801e46c:	b007      	add	sp, #28
 801e46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e472:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801e476:	2a0d      	cmp	r2, #13
 801e478:	d8e6      	bhi.n	801e448 <_scanf_float+0x64>
 801e47a:	a101      	add	r1, pc, #4	@ (adr r1, 801e480 <_scanf_float+0x9c>)
 801e47c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e480:	0801e5c7 	.word	0x0801e5c7
 801e484:	0801e449 	.word	0x0801e449
 801e488:	0801e449 	.word	0x0801e449
 801e48c:	0801e449 	.word	0x0801e449
 801e490:	0801e627 	.word	0x0801e627
 801e494:	0801e5ff 	.word	0x0801e5ff
 801e498:	0801e449 	.word	0x0801e449
 801e49c:	0801e449 	.word	0x0801e449
 801e4a0:	0801e5d5 	.word	0x0801e5d5
 801e4a4:	0801e449 	.word	0x0801e449
 801e4a8:	0801e449 	.word	0x0801e449
 801e4ac:	0801e449 	.word	0x0801e449
 801e4b0:	0801e449 	.word	0x0801e449
 801e4b4:	0801e58d 	.word	0x0801e58d
 801e4b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801e4bc:	e7db      	b.n	801e476 <_scanf_float+0x92>
 801e4be:	290e      	cmp	r1, #14
 801e4c0:	d8c2      	bhi.n	801e448 <_scanf_float+0x64>
 801e4c2:	a001      	add	r0, pc, #4	@ (adr r0, 801e4c8 <_scanf_float+0xe4>)
 801e4c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801e4c8:	0801e57d 	.word	0x0801e57d
 801e4cc:	0801e449 	.word	0x0801e449
 801e4d0:	0801e57d 	.word	0x0801e57d
 801e4d4:	0801e613 	.word	0x0801e613
 801e4d8:	0801e449 	.word	0x0801e449
 801e4dc:	0801e525 	.word	0x0801e525
 801e4e0:	0801e563 	.word	0x0801e563
 801e4e4:	0801e563 	.word	0x0801e563
 801e4e8:	0801e563 	.word	0x0801e563
 801e4ec:	0801e563 	.word	0x0801e563
 801e4f0:	0801e563 	.word	0x0801e563
 801e4f4:	0801e563 	.word	0x0801e563
 801e4f8:	0801e563 	.word	0x0801e563
 801e4fc:	0801e563 	.word	0x0801e563
 801e500:	0801e563 	.word	0x0801e563
 801e504:	2b6e      	cmp	r3, #110	@ 0x6e
 801e506:	d809      	bhi.n	801e51c <_scanf_float+0x138>
 801e508:	2b60      	cmp	r3, #96	@ 0x60
 801e50a:	d8b2      	bhi.n	801e472 <_scanf_float+0x8e>
 801e50c:	2b54      	cmp	r3, #84	@ 0x54
 801e50e:	d07b      	beq.n	801e608 <_scanf_float+0x224>
 801e510:	2b59      	cmp	r3, #89	@ 0x59
 801e512:	d199      	bne.n	801e448 <_scanf_float+0x64>
 801e514:	2d07      	cmp	r5, #7
 801e516:	d197      	bne.n	801e448 <_scanf_float+0x64>
 801e518:	2508      	movs	r5, #8
 801e51a:	e02c      	b.n	801e576 <_scanf_float+0x192>
 801e51c:	2b74      	cmp	r3, #116	@ 0x74
 801e51e:	d073      	beq.n	801e608 <_scanf_float+0x224>
 801e520:	2b79      	cmp	r3, #121	@ 0x79
 801e522:	e7f6      	b.n	801e512 <_scanf_float+0x12e>
 801e524:	6821      	ldr	r1, [r4, #0]
 801e526:	05c8      	lsls	r0, r1, #23
 801e528:	d51b      	bpl.n	801e562 <_scanf_float+0x17e>
 801e52a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801e52e:	6021      	str	r1, [r4, #0]
 801e530:	f109 0901 	add.w	r9, r9, #1
 801e534:	f1bb 0f00 	cmp.w	fp, #0
 801e538:	d003      	beq.n	801e542 <_scanf_float+0x15e>
 801e53a:	3201      	adds	r2, #1
 801e53c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e540:	60a2      	str	r2, [r4, #8]
 801e542:	68a3      	ldr	r3, [r4, #8]
 801e544:	3b01      	subs	r3, #1
 801e546:	60a3      	str	r3, [r4, #8]
 801e548:	6923      	ldr	r3, [r4, #16]
 801e54a:	3301      	adds	r3, #1
 801e54c:	6123      	str	r3, [r4, #16]
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	3b01      	subs	r3, #1
 801e552:	2b00      	cmp	r3, #0
 801e554:	607b      	str	r3, [r7, #4]
 801e556:	f340 8087 	ble.w	801e668 <_scanf_float+0x284>
 801e55a:	683b      	ldr	r3, [r7, #0]
 801e55c:	3301      	adds	r3, #1
 801e55e:	603b      	str	r3, [r7, #0]
 801e560:	e765      	b.n	801e42e <_scanf_float+0x4a>
 801e562:	eb1a 0105 	adds.w	r1, sl, r5
 801e566:	f47f af6f 	bne.w	801e448 <_scanf_float+0x64>
 801e56a:	6822      	ldr	r2, [r4, #0]
 801e56c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801e570:	6022      	str	r2, [r4, #0]
 801e572:	460d      	mov	r5, r1
 801e574:	468a      	mov	sl, r1
 801e576:	f806 3b01 	strb.w	r3, [r6], #1
 801e57a:	e7e2      	b.n	801e542 <_scanf_float+0x15e>
 801e57c:	6822      	ldr	r2, [r4, #0]
 801e57e:	0610      	lsls	r0, r2, #24
 801e580:	f57f af62 	bpl.w	801e448 <_scanf_float+0x64>
 801e584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e588:	6022      	str	r2, [r4, #0]
 801e58a:	e7f4      	b.n	801e576 <_scanf_float+0x192>
 801e58c:	f1ba 0f00 	cmp.w	sl, #0
 801e590:	d10e      	bne.n	801e5b0 <_scanf_float+0x1cc>
 801e592:	f1b9 0f00 	cmp.w	r9, #0
 801e596:	d10e      	bne.n	801e5b6 <_scanf_float+0x1d2>
 801e598:	6822      	ldr	r2, [r4, #0]
 801e59a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e59e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e5a2:	d108      	bne.n	801e5b6 <_scanf_float+0x1d2>
 801e5a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e5a8:	6022      	str	r2, [r4, #0]
 801e5aa:	f04f 0a01 	mov.w	sl, #1
 801e5ae:	e7e2      	b.n	801e576 <_scanf_float+0x192>
 801e5b0:	f1ba 0f02 	cmp.w	sl, #2
 801e5b4:	d055      	beq.n	801e662 <_scanf_float+0x27e>
 801e5b6:	2d01      	cmp	r5, #1
 801e5b8:	d002      	beq.n	801e5c0 <_scanf_float+0x1dc>
 801e5ba:	2d04      	cmp	r5, #4
 801e5bc:	f47f af44 	bne.w	801e448 <_scanf_float+0x64>
 801e5c0:	3501      	adds	r5, #1
 801e5c2:	b2ed      	uxtb	r5, r5
 801e5c4:	e7d7      	b.n	801e576 <_scanf_float+0x192>
 801e5c6:	f1ba 0f01 	cmp.w	sl, #1
 801e5ca:	f47f af3d 	bne.w	801e448 <_scanf_float+0x64>
 801e5ce:	f04f 0a02 	mov.w	sl, #2
 801e5d2:	e7d0      	b.n	801e576 <_scanf_float+0x192>
 801e5d4:	b97d      	cbnz	r5, 801e5f6 <_scanf_float+0x212>
 801e5d6:	f1b9 0f00 	cmp.w	r9, #0
 801e5da:	f47f af38 	bne.w	801e44e <_scanf_float+0x6a>
 801e5de:	6822      	ldr	r2, [r4, #0]
 801e5e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e5e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e5e8:	f040 8108 	bne.w	801e7fc <_scanf_float+0x418>
 801e5ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e5f0:	6022      	str	r2, [r4, #0]
 801e5f2:	2501      	movs	r5, #1
 801e5f4:	e7bf      	b.n	801e576 <_scanf_float+0x192>
 801e5f6:	2d03      	cmp	r5, #3
 801e5f8:	d0e2      	beq.n	801e5c0 <_scanf_float+0x1dc>
 801e5fa:	2d05      	cmp	r5, #5
 801e5fc:	e7de      	b.n	801e5bc <_scanf_float+0x1d8>
 801e5fe:	2d02      	cmp	r5, #2
 801e600:	f47f af22 	bne.w	801e448 <_scanf_float+0x64>
 801e604:	2503      	movs	r5, #3
 801e606:	e7b6      	b.n	801e576 <_scanf_float+0x192>
 801e608:	2d06      	cmp	r5, #6
 801e60a:	f47f af1d 	bne.w	801e448 <_scanf_float+0x64>
 801e60e:	2507      	movs	r5, #7
 801e610:	e7b1      	b.n	801e576 <_scanf_float+0x192>
 801e612:	6822      	ldr	r2, [r4, #0]
 801e614:	0591      	lsls	r1, r2, #22
 801e616:	f57f af17 	bpl.w	801e448 <_scanf_float+0x64>
 801e61a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e61e:	6022      	str	r2, [r4, #0]
 801e620:	f8cd 9008 	str.w	r9, [sp, #8]
 801e624:	e7a7      	b.n	801e576 <_scanf_float+0x192>
 801e626:	6822      	ldr	r2, [r4, #0]
 801e628:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e62c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e630:	d006      	beq.n	801e640 <_scanf_float+0x25c>
 801e632:	0550      	lsls	r0, r2, #21
 801e634:	f57f af08 	bpl.w	801e448 <_scanf_float+0x64>
 801e638:	f1b9 0f00 	cmp.w	r9, #0
 801e63c:	f000 80de 	beq.w	801e7fc <_scanf_float+0x418>
 801e640:	0591      	lsls	r1, r2, #22
 801e642:	bf58      	it	pl
 801e644:	9902      	ldrpl	r1, [sp, #8]
 801e646:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e64a:	bf58      	it	pl
 801e64c:	eba9 0101 	subpl.w	r1, r9, r1
 801e650:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e654:	bf58      	it	pl
 801e656:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e65a:	6022      	str	r2, [r4, #0]
 801e65c:	f04f 0900 	mov.w	r9, #0
 801e660:	e789      	b.n	801e576 <_scanf_float+0x192>
 801e662:	f04f 0a03 	mov.w	sl, #3
 801e666:	e786      	b.n	801e576 <_scanf_float+0x192>
 801e668:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e66c:	4639      	mov	r1, r7
 801e66e:	4640      	mov	r0, r8
 801e670:	4798      	blx	r3
 801e672:	2800      	cmp	r0, #0
 801e674:	f43f aedb 	beq.w	801e42e <_scanf_float+0x4a>
 801e678:	e6e6      	b.n	801e448 <_scanf_float+0x64>
 801e67a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e67e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e682:	463a      	mov	r2, r7
 801e684:	4640      	mov	r0, r8
 801e686:	4798      	blx	r3
 801e688:	6923      	ldr	r3, [r4, #16]
 801e68a:	3b01      	subs	r3, #1
 801e68c:	6123      	str	r3, [r4, #16]
 801e68e:	e6e8      	b.n	801e462 <_scanf_float+0x7e>
 801e690:	1e6b      	subs	r3, r5, #1
 801e692:	2b06      	cmp	r3, #6
 801e694:	d824      	bhi.n	801e6e0 <_scanf_float+0x2fc>
 801e696:	2d02      	cmp	r5, #2
 801e698:	d836      	bhi.n	801e708 <_scanf_float+0x324>
 801e69a:	9b01      	ldr	r3, [sp, #4]
 801e69c:	429e      	cmp	r6, r3
 801e69e:	f67f aee4 	bls.w	801e46a <_scanf_float+0x86>
 801e6a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e6a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e6aa:	463a      	mov	r2, r7
 801e6ac:	4640      	mov	r0, r8
 801e6ae:	4798      	blx	r3
 801e6b0:	6923      	ldr	r3, [r4, #16]
 801e6b2:	3b01      	subs	r3, #1
 801e6b4:	6123      	str	r3, [r4, #16]
 801e6b6:	e7f0      	b.n	801e69a <_scanf_float+0x2b6>
 801e6b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e6bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e6c0:	463a      	mov	r2, r7
 801e6c2:	4640      	mov	r0, r8
 801e6c4:	4798      	blx	r3
 801e6c6:	6923      	ldr	r3, [r4, #16]
 801e6c8:	3b01      	subs	r3, #1
 801e6ca:	6123      	str	r3, [r4, #16]
 801e6cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e6d0:	fa5f fa8a 	uxtb.w	sl, sl
 801e6d4:	f1ba 0f02 	cmp.w	sl, #2
 801e6d8:	d1ee      	bne.n	801e6b8 <_scanf_float+0x2d4>
 801e6da:	3d03      	subs	r5, #3
 801e6dc:	b2ed      	uxtb	r5, r5
 801e6de:	1b76      	subs	r6, r6, r5
 801e6e0:	6823      	ldr	r3, [r4, #0]
 801e6e2:	05da      	lsls	r2, r3, #23
 801e6e4:	d530      	bpl.n	801e748 <_scanf_float+0x364>
 801e6e6:	055b      	lsls	r3, r3, #21
 801e6e8:	d511      	bpl.n	801e70e <_scanf_float+0x32a>
 801e6ea:	9b01      	ldr	r3, [sp, #4]
 801e6ec:	429e      	cmp	r6, r3
 801e6ee:	f67f aebc 	bls.w	801e46a <_scanf_float+0x86>
 801e6f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e6f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e6fa:	463a      	mov	r2, r7
 801e6fc:	4640      	mov	r0, r8
 801e6fe:	4798      	blx	r3
 801e700:	6923      	ldr	r3, [r4, #16]
 801e702:	3b01      	subs	r3, #1
 801e704:	6123      	str	r3, [r4, #16]
 801e706:	e7f0      	b.n	801e6ea <_scanf_float+0x306>
 801e708:	46aa      	mov	sl, r5
 801e70a:	46b3      	mov	fp, r6
 801e70c:	e7de      	b.n	801e6cc <_scanf_float+0x2e8>
 801e70e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e712:	6923      	ldr	r3, [r4, #16]
 801e714:	2965      	cmp	r1, #101	@ 0x65
 801e716:	f103 33ff 	add.w	r3, r3, #4294967295
 801e71a:	f106 35ff 	add.w	r5, r6, #4294967295
 801e71e:	6123      	str	r3, [r4, #16]
 801e720:	d00c      	beq.n	801e73c <_scanf_float+0x358>
 801e722:	2945      	cmp	r1, #69	@ 0x45
 801e724:	d00a      	beq.n	801e73c <_scanf_float+0x358>
 801e726:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e72a:	463a      	mov	r2, r7
 801e72c:	4640      	mov	r0, r8
 801e72e:	4798      	blx	r3
 801e730:	6923      	ldr	r3, [r4, #16]
 801e732:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e736:	3b01      	subs	r3, #1
 801e738:	1eb5      	subs	r5, r6, #2
 801e73a:	6123      	str	r3, [r4, #16]
 801e73c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e740:	463a      	mov	r2, r7
 801e742:	4640      	mov	r0, r8
 801e744:	4798      	blx	r3
 801e746:	462e      	mov	r6, r5
 801e748:	6822      	ldr	r2, [r4, #0]
 801e74a:	f012 0210 	ands.w	r2, r2, #16
 801e74e:	d001      	beq.n	801e754 <_scanf_float+0x370>
 801e750:	2000      	movs	r0, #0
 801e752:	e68b      	b.n	801e46c <_scanf_float+0x88>
 801e754:	7032      	strb	r2, [r6, #0]
 801e756:	6823      	ldr	r3, [r4, #0]
 801e758:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e75c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e760:	d11c      	bne.n	801e79c <_scanf_float+0x3b8>
 801e762:	9b02      	ldr	r3, [sp, #8]
 801e764:	454b      	cmp	r3, r9
 801e766:	eba3 0209 	sub.w	r2, r3, r9
 801e76a:	d123      	bne.n	801e7b4 <_scanf_float+0x3d0>
 801e76c:	9901      	ldr	r1, [sp, #4]
 801e76e:	2200      	movs	r2, #0
 801e770:	4640      	mov	r0, r8
 801e772:	f002 fdb9 	bl	80212e8 <_strtod_r>
 801e776:	9b03      	ldr	r3, [sp, #12]
 801e778:	6821      	ldr	r1, [r4, #0]
 801e77a:	681b      	ldr	r3, [r3, #0]
 801e77c:	f011 0f02 	tst.w	r1, #2
 801e780:	ec57 6b10 	vmov	r6, r7, d0
 801e784:	f103 0204 	add.w	r2, r3, #4
 801e788:	d01f      	beq.n	801e7ca <_scanf_float+0x3e6>
 801e78a:	9903      	ldr	r1, [sp, #12]
 801e78c:	600a      	str	r2, [r1, #0]
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	e9c3 6700 	strd	r6, r7, [r3]
 801e794:	68e3      	ldr	r3, [r4, #12]
 801e796:	3301      	adds	r3, #1
 801e798:	60e3      	str	r3, [r4, #12]
 801e79a:	e7d9      	b.n	801e750 <_scanf_float+0x36c>
 801e79c:	9b04      	ldr	r3, [sp, #16]
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d0e4      	beq.n	801e76c <_scanf_float+0x388>
 801e7a2:	9905      	ldr	r1, [sp, #20]
 801e7a4:	230a      	movs	r3, #10
 801e7a6:	3101      	adds	r1, #1
 801e7a8:	4640      	mov	r0, r8
 801e7aa:	f7ff f9b7 	bl	801db1c <_strtol_r>
 801e7ae:	9b04      	ldr	r3, [sp, #16]
 801e7b0:	9e05      	ldr	r6, [sp, #20]
 801e7b2:	1ac2      	subs	r2, r0, r3
 801e7b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e7b8:	429e      	cmp	r6, r3
 801e7ba:	bf28      	it	cs
 801e7bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e7c0:	4910      	ldr	r1, [pc, #64]	@ (801e804 <_scanf_float+0x420>)
 801e7c2:	4630      	mov	r0, r6
 801e7c4:	f000 f9ae 	bl	801eb24 <siprintf>
 801e7c8:	e7d0      	b.n	801e76c <_scanf_float+0x388>
 801e7ca:	f011 0f04 	tst.w	r1, #4
 801e7ce:	9903      	ldr	r1, [sp, #12]
 801e7d0:	600a      	str	r2, [r1, #0]
 801e7d2:	d1dc      	bne.n	801e78e <_scanf_float+0x3aa>
 801e7d4:	681d      	ldr	r5, [r3, #0]
 801e7d6:	4632      	mov	r2, r6
 801e7d8:	463b      	mov	r3, r7
 801e7da:	4630      	mov	r0, r6
 801e7dc:	4639      	mov	r1, r7
 801e7de:	f7e2 f9bd 	bl	8000b5c <__aeabi_dcmpun>
 801e7e2:	b128      	cbz	r0, 801e7f0 <_scanf_float+0x40c>
 801e7e4:	4808      	ldr	r0, [pc, #32]	@ (801e808 <_scanf_float+0x424>)
 801e7e6:	f000 fc0d 	bl	801f004 <nanf>
 801e7ea:	ed85 0a00 	vstr	s0, [r5]
 801e7ee:	e7d1      	b.n	801e794 <_scanf_float+0x3b0>
 801e7f0:	4630      	mov	r0, r6
 801e7f2:	4639      	mov	r1, r7
 801e7f4:	f7e2 fa10 	bl	8000c18 <__aeabi_d2f>
 801e7f8:	6028      	str	r0, [r5, #0]
 801e7fa:	e7cb      	b.n	801e794 <_scanf_float+0x3b0>
 801e7fc:	f04f 0900 	mov.w	r9, #0
 801e800:	e629      	b.n	801e456 <_scanf_float+0x72>
 801e802:	bf00      	nop
 801e804:	08025659 	.word	0x08025659
 801e808:	0802570a 	.word	0x0802570a

0801e80c <std>:
 801e80c:	2300      	movs	r3, #0
 801e80e:	b510      	push	{r4, lr}
 801e810:	4604      	mov	r4, r0
 801e812:	e9c0 3300 	strd	r3, r3, [r0]
 801e816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e81a:	6083      	str	r3, [r0, #8]
 801e81c:	8181      	strh	r1, [r0, #12]
 801e81e:	6643      	str	r3, [r0, #100]	@ 0x64
 801e820:	81c2      	strh	r2, [r0, #14]
 801e822:	6183      	str	r3, [r0, #24]
 801e824:	4619      	mov	r1, r3
 801e826:	2208      	movs	r2, #8
 801e828:	305c      	adds	r0, #92	@ 0x5c
 801e82a:	f000 fac5 	bl	801edb8 <memset>
 801e82e:	4b0d      	ldr	r3, [pc, #52]	@ (801e864 <std+0x58>)
 801e830:	6263      	str	r3, [r4, #36]	@ 0x24
 801e832:	4b0d      	ldr	r3, [pc, #52]	@ (801e868 <std+0x5c>)
 801e834:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e836:	4b0d      	ldr	r3, [pc, #52]	@ (801e86c <std+0x60>)
 801e838:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e83a:	4b0d      	ldr	r3, [pc, #52]	@ (801e870 <std+0x64>)
 801e83c:	6323      	str	r3, [r4, #48]	@ 0x30
 801e83e:	4b0d      	ldr	r3, [pc, #52]	@ (801e874 <std+0x68>)
 801e840:	6224      	str	r4, [r4, #32]
 801e842:	429c      	cmp	r4, r3
 801e844:	d006      	beq.n	801e854 <std+0x48>
 801e846:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e84a:	4294      	cmp	r4, r2
 801e84c:	d002      	beq.n	801e854 <std+0x48>
 801e84e:	33d0      	adds	r3, #208	@ 0xd0
 801e850:	429c      	cmp	r4, r3
 801e852:	d105      	bne.n	801e860 <std+0x54>
 801e854:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e85c:	f000 bbb8 	b.w	801efd0 <__retarget_lock_init_recursive>
 801e860:	bd10      	pop	{r4, pc}
 801e862:	bf00      	nop
 801e864:	0801eb65 	.word	0x0801eb65
 801e868:	0801eb87 	.word	0x0801eb87
 801e86c:	0801ebbf 	.word	0x0801ebbf
 801e870:	0801ebe3 	.word	0x0801ebe3
 801e874:	2000366c 	.word	0x2000366c

0801e878 <stdio_exit_handler>:
 801e878:	4a02      	ldr	r2, [pc, #8]	@ (801e884 <stdio_exit_handler+0xc>)
 801e87a:	4903      	ldr	r1, [pc, #12]	@ (801e888 <stdio_exit_handler+0x10>)
 801e87c:	4803      	ldr	r0, [pc, #12]	@ (801e88c <stdio_exit_handler+0x14>)
 801e87e:	f000 b869 	b.w	801e954 <_fwalk_sglue>
 801e882:	bf00      	nop
 801e884:	2000013c 	.word	0x2000013c
 801e888:	08021931 	.word	0x08021931
 801e88c:	2000014c 	.word	0x2000014c

0801e890 <cleanup_stdio>:
 801e890:	6841      	ldr	r1, [r0, #4]
 801e892:	4b0c      	ldr	r3, [pc, #48]	@ (801e8c4 <cleanup_stdio+0x34>)
 801e894:	4299      	cmp	r1, r3
 801e896:	b510      	push	{r4, lr}
 801e898:	4604      	mov	r4, r0
 801e89a:	d001      	beq.n	801e8a0 <cleanup_stdio+0x10>
 801e89c:	f003 f848 	bl	8021930 <_fflush_r>
 801e8a0:	68a1      	ldr	r1, [r4, #8]
 801e8a2:	4b09      	ldr	r3, [pc, #36]	@ (801e8c8 <cleanup_stdio+0x38>)
 801e8a4:	4299      	cmp	r1, r3
 801e8a6:	d002      	beq.n	801e8ae <cleanup_stdio+0x1e>
 801e8a8:	4620      	mov	r0, r4
 801e8aa:	f003 f841 	bl	8021930 <_fflush_r>
 801e8ae:	68e1      	ldr	r1, [r4, #12]
 801e8b0:	4b06      	ldr	r3, [pc, #24]	@ (801e8cc <cleanup_stdio+0x3c>)
 801e8b2:	4299      	cmp	r1, r3
 801e8b4:	d004      	beq.n	801e8c0 <cleanup_stdio+0x30>
 801e8b6:	4620      	mov	r0, r4
 801e8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8bc:	f003 b838 	b.w	8021930 <_fflush_r>
 801e8c0:	bd10      	pop	{r4, pc}
 801e8c2:	bf00      	nop
 801e8c4:	2000366c 	.word	0x2000366c
 801e8c8:	200036d4 	.word	0x200036d4
 801e8cc:	2000373c 	.word	0x2000373c

0801e8d0 <global_stdio_init.part.0>:
 801e8d0:	b510      	push	{r4, lr}
 801e8d2:	4b0b      	ldr	r3, [pc, #44]	@ (801e900 <global_stdio_init.part.0+0x30>)
 801e8d4:	4c0b      	ldr	r4, [pc, #44]	@ (801e904 <global_stdio_init.part.0+0x34>)
 801e8d6:	4a0c      	ldr	r2, [pc, #48]	@ (801e908 <global_stdio_init.part.0+0x38>)
 801e8d8:	601a      	str	r2, [r3, #0]
 801e8da:	4620      	mov	r0, r4
 801e8dc:	2200      	movs	r2, #0
 801e8de:	2104      	movs	r1, #4
 801e8e0:	f7ff ff94 	bl	801e80c <std>
 801e8e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e8e8:	2201      	movs	r2, #1
 801e8ea:	2109      	movs	r1, #9
 801e8ec:	f7ff ff8e 	bl	801e80c <std>
 801e8f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e8f4:	2202      	movs	r2, #2
 801e8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8fa:	2112      	movs	r1, #18
 801e8fc:	f7ff bf86 	b.w	801e80c <std>
 801e900:	200037a4 	.word	0x200037a4
 801e904:	2000366c 	.word	0x2000366c
 801e908:	0801e879 	.word	0x0801e879

0801e90c <__sfp_lock_acquire>:
 801e90c:	4801      	ldr	r0, [pc, #4]	@ (801e914 <__sfp_lock_acquire+0x8>)
 801e90e:	f000 bb60 	b.w	801efd2 <__retarget_lock_acquire_recursive>
 801e912:	bf00      	nop
 801e914:	200037ad 	.word	0x200037ad

0801e918 <__sfp_lock_release>:
 801e918:	4801      	ldr	r0, [pc, #4]	@ (801e920 <__sfp_lock_release+0x8>)
 801e91a:	f000 bb5b 	b.w	801efd4 <__retarget_lock_release_recursive>
 801e91e:	bf00      	nop
 801e920:	200037ad 	.word	0x200037ad

0801e924 <__sinit>:
 801e924:	b510      	push	{r4, lr}
 801e926:	4604      	mov	r4, r0
 801e928:	f7ff fff0 	bl	801e90c <__sfp_lock_acquire>
 801e92c:	6a23      	ldr	r3, [r4, #32]
 801e92e:	b11b      	cbz	r3, 801e938 <__sinit+0x14>
 801e930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e934:	f7ff bff0 	b.w	801e918 <__sfp_lock_release>
 801e938:	4b04      	ldr	r3, [pc, #16]	@ (801e94c <__sinit+0x28>)
 801e93a:	6223      	str	r3, [r4, #32]
 801e93c:	4b04      	ldr	r3, [pc, #16]	@ (801e950 <__sinit+0x2c>)
 801e93e:	681b      	ldr	r3, [r3, #0]
 801e940:	2b00      	cmp	r3, #0
 801e942:	d1f5      	bne.n	801e930 <__sinit+0xc>
 801e944:	f7ff ffc4 	bl	801e8d0 <global_stdio_init.part.0>
 801e948:	e7f2      	b.n	801e930 <__sinit+0xc>
 801e94a:	bf00      	nop
 801e94c:	0801e891 	.word	0x0801e891
 801e950:	200037a4 	.word	0x200037a4

0801e954 <_fwalk_sglue>:
 801e954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e958:	4607      	mov	r7, r0
 801e95a:	4688      	mov	r8, r1
 801e95c:	4614      	mov	r4, r2
 801e95e:	2600      	movs	r6, #0
 801e960:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e964:	f1b9 0901 	subs.w	r9, r9, #1
 801e968:	d505      	bpl.n	801e976 <_fwalk_sglue+0x22>
 801e96a:	6824      	ldr	r4, [r4, #0]
 801e96c:	2c00      	cmp	r4, #0
 801e96e:	d1f7      	bne.n	801e960 <_fwalk_sglue+0xc>
 801e970:	4630      	mov	r0, r6
 801e972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e976:	89ab      	ldrh	r3, [r5, #12]
 801e978:	2b01      	cmp	r3, #1
 801e97a:	d907      	bls.n	801e98c <_fwalk_sglue+0x38>
 801e97c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e980:	3301      	adds	r3, #1
 801e982:	d003      	beq.n	801e98c <_fwalk_sglue+0x38>
 801e984:	4629      	mov	r1, r5
 801e986:	4638      	mov	r0, r7
 801e988:	47c0      	blx	r8
 801e98a:	4306      	orrs	r6, r0
 801e98c:	3568      	adds	r5, #104	@ 0x68
 801e98e:	e7e9      	b.n	801e964 <_fwalk_sglue+0x10>

0801e990 <_fwrite_r>:
 801e990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e994:	9c08      	ldr	r4, [sp, #32]
 801e996:	468a      	mov	sl, r1
 801e998:	4690      	mov	r8, r2
 801e99a:	fb02 f903 	mul.w	r9, r2, r3
 801e99e:	4606      	mov	r6, r0
 801e9a0:	b118      	cbz	r0, 801e9aa <_fwrite_r+0x1a>
 801e9a2:	6a03      	ldr	r3, [r0, #32]
 801e9a4:	b90b      	cbnz	r3, 801e9aa <_fwrite_r+0x1a>
 801e9a6:	f7ff ffbd 	bl	801e924 <__sinit>
 801e9aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e9ac:	07dd      	lsls	r5, r3, #31
 801e9ae:	d405      	bmi.n	801e9bc <_fwrite_r+0x2c>
 801e9b0:	89a3      	ldrh	r3, [r4, #12]
 801e9b2:	0598      	lsls	r0, r3, #22
 801e9b4:	d402      	bmi.n	801e9bc <_fwrite_r+0x2c>
 801e9b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9b8:	f000 fb0b 	bl	801efd2 <__retarget_lock_acquire_recursive>
 801e9bc:	89a3      	ldrh	r3, [r4, #12]
 801e9be:	0719      	lsls	r1, r3, #28
 801e9c0:	d516      	bpl.n	801e9f0 <_fwrite_r+0x60>
 801e9c2:	6923      	ldr	r3, [r4, #16]
 801e9c4:	b1a3      	cbz	r3, 801e9f0 <_fwrite_r+0x60>
 801e9c6:	2500      	movs	r5, #0
 801e9c8:	454d      	cmp	r5, r9
 801e9ca:	d01f      	beq.n	801ea0c <_fwrite_r+0x7c>
 801e9cc:	68a7      	ldr	r7, [r4, #8]
 801e9ce:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801e9d2:	3f01      	subs	r7, #1
 801e9d4:	2f00      	cmp	r7, #0
 801e9d6:	60a7      	str	r7, [r4, #8]
 801e9d8:	da04      	bge.n	801e9e4 <_fwrite_r+0x54>
 801e9da:	69a3      	ldr	r3, [r4, #24]
 801e9dc:	429f      	cmp	r7, r3
 801e9de:	db0f      	blt.n	801ea00 <_fwrite_r+0x70>
 801e9e0:	290a      	cmp	r1, #10
 801e9e2:	d00d      	beq.n	801ea00 <_fwrite_r+0x70>
 801e9e4:	6823      	ldr	r3, [r4, #0]
 801e9e6:	1c5a      	adds	r2, r3, #1
 801e9e8:	6022      	str	r2, [r4, #0]
 801e9ea:	7019      	strb	r1, [r3, #0]
 801e9ec:	3501      	adds	r5, #1
 801e9ee:	e7eb      	b.n	801e9c8 <_fwrite_r+0x38>
 801e9f0:	4621      	mov	r1, r4
 801e9f2:	4630      	mov	r0, r6
 801e9f4:	f000 f970 	bl	801ecd8 <__swsetup_r>
 801e9f8:	2800      	cmp	r0, #0
 801e9fa:	d0e4      	beq.n	801e9c6 <_fwrite_r+0x36>
 801e9fc:	2500      	movs	r5, #0
 801e9fe:	e005      	b.n	801ea0c <_fwrite_r+0x7c>
 801ea00:	4622      	mov	r2, r4
 801ea02:	4630      	mov	r0, r6
 801ea04:	f000 f92a 	bl	801ec5c <__swbuf_r>
 801ea08:	3001      	adds	r0, #1
 801ea0a:	d1ef      	bne.n	801e9ec <_fwrite_r+0x5c>
 801ea0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea0e:	07da      	lsls	r2, r3, #31
 801ea10:	d405      	bmi.n	801ea1e <_fwrite_r+0x8e>
 801ea12:	89a3      	ldrh	r3, [r4, #12]
 801ea14:	059b      	lsls	r3, r3, #22
 801ea16:	d402      	bmi.n	801ea1e <_fwrite_r+0x8e>
 801ea18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea1a:	f000 fadb 	bl	801efd4 <__retarget_lock_release_recursive>
 801ea1e:	fbb5 f0f8 	udiv	r0, r5, r8
 801ea22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801ea28 <fwrite>:
 801ea28:	b507      	push	{r0, r1, r2, lr}
 801ea2a:	9300      	str	r3, [sp, #0]
 801ea2c:	4613      	mov	r3, r2
 801ea2e:	460a      	mov	r2, r1
 801ea30:	4601      	mov	r1, r0
 801ea32:	4803      	ldr	r0, [pc, #12]	@ (801ea40 <fwrite+0x18>)
 801ea34:	6800      	ldr	r0, [r0, #0]
 801ea36:	f7ff ffab 	bl	801e990 <_fwrite_r>
 801ea3a:	b003      	add	sp, #12
 801ea3c:	f85d fb04 	ldr.w	pc, [sp], #4
 801ea40:	20000148 	.word	0x20000148

0801ea44 <iprintf>:
 801ea44:	b40f      	push	{r0, r1, r2, r3}
 801ea46:	b507      	push	{r0, r1, r2, lr}
 801ea48:	4906      	ldr	r1, [pc, #24]	@ (801ea64 <iprintf+0x20>)
 801ea4a:	ab04      	add	r3, sp, #16
 801ea4c:	6808      	ldr	r0, [r1, #0]
 801ea4e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea52:	6881      	ldr	r1, [r0, #8]
 801ea54:	9301      	str	r3, [sp, #4]
 801ea56:	f002 fdcf 	bl	80215f8 <_vfiprintf_r>
 801ea5a:	b003      	add	sp, #12
 801ea5c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea60:	b004      	add	sp, #16
 801ea62:	4770      	bx	lr
 801ea64:	20000148 	.word	0x20000148

0801ea68 <_puts_r>:
 801ea68:	6a03      	ldr	r3, [r0, #32]
 801ea6a:	b570      	push	{r4, r5, r6, lr}
 801ea6c:	6884      	ldr	r4, [r0, #8]
 801ea6e:	4605      	mov	r5, r0
 801ea70:	460e      	mov	r6, r1
 801ea72:	b90b      	cbnz	r3, 801ea78 <_puts_r+0x10>
 801ea74:	f7ff ff56 	bl	801e924 <__sinit>
 801ea78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea7a:	07db      	lsls	r3, r3, #31
 801ea7c:	d405      	bmi.n	801ea8a <_puts_r+0x22>
 801ea7e:	89a3      	ldrh	r3, [r4, #12]
 801ea80:	0598      	lsls	r0, r3, #22
 801ea82:	d402      	bmi.n	801ea8a <_puts_r+0x22>
 801ea84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea86:	f000 faa4 	bl	801efd2 <__retarget_lock_acquire_recursive>
 801ea8a:	89a3      	ldrh	r3, [r4, #12]
 801ea8c:	0719      	lsls	r1, r3, #28
 801ea8e:	d502      	bpl.n	801ea96 <_puts_r+0x2e>
 801ea90:	6923      	ldr	r3, [r4, #16]
 801ea92:	2b00      	cmp	r3, #0
 801ea94:	d135      	bne.n	801eb02 <_puts_r+0x9a>
 801ea96:	4621      	mov	r1, r4
 801ea98:	4628      	mov	r0, r5
 801ea9a:	f000 f91d 	bl	801ecd8 <__swsetup_r>
 801ea9e:	b380      	cbz	r0, 801eb02 <_puts_r+0x9a>
 801eaa0:	f04f 35ff 	mov.w	r5, #4294967295
 801eaa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eaa6:	07da      	lsls	r2, r3, #31
 801eaa8:	d405      	bmi.n	801eab6 <_puts_r+0x4e>
 801eaaa:	89a3      	ldrh	r3, [r4, #12]
 801eaac:	059b      	lsls	r3, r3, #22
 801eaae:	d402      	bmi.n	801eab6 <_puts_r+0x4e>
 801eab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eab2:	f000 fa8f 	bl	801efd4 <__retarget_lock_release_recursive>
 801eab6:	4628      	mov	r0, r5
 801eab8:	bd70      	pop	{r4, r5, r6, pc}
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	da04      	bge.n	801eac8 <_puts_r+0x60>
 801eabe:	69a2      	ldr	r2, [r4, #24]
 801eac0:	429a      	cmp	r2, r3
 801eac2:	dc17      	bgt.n	801eaf4 <_puts_r+0x8c>
 801eac4:	290a      	cmp	r1, #10
 801eac6:	d015      	beq.n	801eaf4 <_puts_r+0x8c>
 801eac8:	6823      	ldr	r3, [r4, #0]
 801eaca:	1c5a      	adds	r2, r3, #1
 801eacc:	6022      	str	r2, [r4, #0]
 801eace:	7019      	strb	r1, [r3, #0]
 801ead0:	68a3      	ldr	r3, [r4, #8]
 801ead2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ead6:	3b01      	subs	r3, #1
 801ead8:	60a3      	str	r3, [r4, #8]
 801eada:	2900      	cmp	r1, #0
 801eadc:	d1ed      	bne.n	801eaba <_puts_r+0x52>
 801eade:	2b00      	cmp	r3, #0
 801eae0:	da11      	bge.n	801eb06 <_puts_r+0x9e>
 801eae2:	4622      	mov	r2, r4
 801eae4:	210a      	movs	r1, #10
 801eae6:	4628      	mov	r0, r5
 801eae8:	f000 f8b8 	bl	801ec5c <__swbuf_r>
 801eaec:	3001      	adds	r0, #1
 801eaee:	d0d7      	beq.n	801eaa0 <_puts_r+0x38>
 801eaf0:	250a      	movs	r5, #10
 801eaf2:	e7d7      	b.n	801eaa4 <_puts_r+0x3c>
 801eaf4:	4622      	mov	r2, r4
 801eaf6:	4628      	mov	r0, r5
 801eaf8:	f000 f8b0 	bl	801ec5c <__swbuf_r>
 801eafc:	3001      	adds	r0, #1
 801eafe:	d1e7      	bne.n	801ead0 <_puts_r+0x68>
 801eb00:	e7ce      	b.n	801eaa0 <_puts_r+0x38>
 801eb02:	3e01      	subs	r6, #1
 801eb04:	e7e4      	b.n	801ead0 <_puts_r+0x68>
 801eb06:	6823      	ldr	r3, [r4, #0]
 801eb08:	1c5a      	adds	r2, r3, #1
 801eb0a:	6022      	str	r2, [r4, #0]
 801eb0c:	220a      	movs	r2, #10
 801eb0e:	701a      	strb	r2, [r3, #0]
 801eb10:	e7ee      	b.n	801eaf0 <_puts_r+0x88>
	...

0801eb14 <puts>:
 801eb14:	4b02      	ldr	r3, [pc, #8]	@ (801eb20 <puts+0xc>)
 801eb16:	4601      	mov	r1, r0
 801eb18:	6818      	ldr	r0, [r3, #0]
 801eb1a:	f7ff bfa5 	b.w	801ea68 <_puts_r>
 801eb1e:	bf00      	nop
 801eb20:	20000148 	.word	0x20000148

0801eb24 <siprintf>:
 801eb24:	b40e      	push	{r1, r2, r3}
 801eb26:	b500      	push	{lr}
 801eb28:	b09c      	sub	sp, #112	@ 0x70
 801eb2a:	ab1d      	add	r3, sp, #116	@ 0x74
 801eb2c:	9002      	str	r0, [sp, #8]
 801eb2e:	9006      	str	r0, [sp, #24]
 801eb30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801eb34:	4809      	ldr	r0, [pc, #36]	@ (801eb5c <siprintf+0x38>)
 801eb36:	9107      	str	r1, [sp, #28]
 801eb38:	9104      	str	r1, [sp, #16]
 801eb3a:	4909      	ldr	r1, [pc, #36]	@ (801eb60 <siprintf+0x3c>)
 801eb3c:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb40:	9105      	str	r1, [sp, #20]
 801eb42:	6800      	ldr	r0, [r0, #0]
 801eb44:	9301      	str	r3, [sp, #4]
 801eb46:	a902      	add	r1, sp, #8
 801eb48:	f002 fc30 	bl	80213ac <_svfiprintf_r>
 801eb4c:	9b02      	ldr	r3, [sp, #8]
 801eb4e:	2200      	movs	r2, #0
 801eb50:	701a      	strb	r2, [r3, #0]
 801eb52:	b01c      	add	sp, #112	@ 0x70
 801eb54:	f85d eb04 	ldr.w	lr, [sp], #4
 801eb58:	b003      	add	sp, #12
 801eb5a:	4770      	bx	lr
 801eb5c:	20000148 	.word	0x20000148
 801eb60:	ffff0208 	.word	0xffff0208

0801eb64 <__sread>:
 801eb64:	b510      	push	{r4, lr}
 801eb66:	460c      	mov	r4, r1
 801eb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb6c:	f000 f9d2 	bl	801ef14 <_read_r>
 801eb70:	2800      	cmp	r0, #0
 801eb72:	bfab      	itete	ge
 801eb74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801eb76:	89a3      	ldrhlt	r3, [r4, #12]
 801eb78:	181b      	addge	r3, r3, r0
 801eb7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801eb7e:	bfac      	ite	ge
 801eb80:	6563      	strge	r3, [r4, #84]	@ 0x54
 801eb82:	81a3      	strhlt	r3, [r4, #12]
 801eb84:	bd10      	pop	{r4, pc}

0801eb86 <__swrite>:
 801eb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb8a:	461f      	mov	r7, r3
 801eb8c:	898b      	ldrh	r3, [r1, #12]
 801eb8e:	05db      	lsls	r3, r3, #23
 801eb90:	4605      	mov	r5, r0
 801eb92:	460c      	mov	r4, r1
 801eb94:	4616      	mov	r6, r2
 801eb96:	d505      	bpl.n	801eba4 <__swrite+0x1e>
 801eb98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb9c:	2302      	movs	r3, #2
 801eb9e:	2200      	movs	r2, #0
 801eba0:	f000 f9a6 	bl	801eef0 <_lseek_r>
 801eba4:	89a3      	ldrh	r3, [r4, #12]
 801eba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ebaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ebae:	81a3      	strh	r3, [r4, #12]
 801ebb0:	4632      	mov	r2, r6
 801ebb2:	463b      	mov	r3, r7
 801ebb4:	4628      	mov	r0, r5
 801ebb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ebba:	f000 b9cd 	b.w	801ef58 <_write_r>

0801ebbe <__sseek>:
 801ebbe:	b510      	push	{r4, lr}
 801ebc0:	460c      	mov	r4, r1
 801ebc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebc6:	f000 f993 	bl	801eef0 <_lseek_r>
 801ebca:	1c43      	adds	r3, r0, #1
 801ebcc:	89a3      	ldrh	r3, [r4, #12]
 801ebce:	bf15      	itete	ne
 801ebd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ebd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ebd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ebda:	81a3      	strheq	r3, [r4, #12]
 801ebdc:	bf18      	it	ne
 801ebde:	81a3      	strhne	r3, [r4, #12]
 801ebe0:	bd10      	pop	{r4, pc}

0801ebe2 <__sclose>:
 801ebe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebe6:	f000 b973 	b.w	801eed0 <_close_r>

0801ebea <_vsniprintf_r>:
 801ebea:	b530      	push	{r4, r5, lr}
 801ebec:	4614      	mov	r4, r2
 801ebee:	2c00      	cmp	r4, #0
 801ebf0:	b09b      	sub	sp, #108	@ 0x6c
 801ebf2:	4605      	mov	r5, r0
 801ebf4:	461a      	mov	r2, r3
 801ebf6:	da05      	bge.n	801ec04 <_vsniprintf_r+0x1a>
 801ebf8:	238b      	movs	r3, #139	@ 0x8b
 801ebfa:	6003      	str	r3, [r0, #0]
 801ebfc:	f04f 30ff 	mov.w	r0, #4294967295
 801ec00:	b01b      	add	sp, #108	@ 0x6c
 801ec02:	bd30      	pop	{r4, r5, pc}
 801ec04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ec08:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ec0c:	bf14      	ite	ne
 801ec0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ec12:	4623      	moveq	r3, r4
 801ec14:	9302      	str	r3, [sp, #8]
 801ec16:	9305      	str	r3, [sp, #20]
 801ec18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ec1c:	9100      	str	r1, [sp, #0]
 801ec1e:	9104      	str	r1, [sp, #16]
 801ec20:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ec24:	4669      	mov	r1, sp
 801ec26:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ec28:	f002 fbc0 	bl	80213ac <_svfiprintf_r>
 801ec2c:	1c43      	adds	r3, r0, #1
 801ec2e:	bfbc      	itt	lt
 801ec30:	238b      	movlt	r3, #139	@ 0x8b
 801ec32:	602b      	strlt	r3, [r5, #0]
 801ec34:	2c00      	cmp	r4, #0
 801ec36:	d0e3      	beq.n	801ec00 <_vsniprintf_r+0x16>
 801ec38:	9b00      	ldr	r3, [sp, #0]
 801ec3a:	2200      	movs	r2, #0
 801ec3c:	701a      	strb	r2, [r3, #0]
 801ec3e:	e7df      	b.n	801ec00 <_vsniprintf_r+0x16>

0801ec40 <vsniprintf>:
 801ec40:	b507      	push	{r0, r1, r2, lr}
 801ec42:	9300      	str	r3, [sp, #0]
 801ec44:	4613      	mov	r3, r2
 801ec46:	460a      	mov	r2, r1
 801ec48:	4601      	mov	r1, r0
 801ec4a:	4803      	ldr	r0, [pc, #12]	@ (801ec58 <vsniprintf+0x18>)
 801ec4c:	6800      	ldr	r0, [r0, #0]
 801ec4e:	f7ff ffcc 	bl	801ebea <_vsniprintf_r>
 801ec52:	b003      	add	sp, #12
 801ec54:	f85d fb04 	ldr.w	pc, [sp], #4
 801ec58:	20000148 	.word	0x20000148

0801ec5c <__swbuf_r>:
 801ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec5e:	460e      	mov	r6, r1
 801ec60:	4614      	mov	r4, r2
 801ec62:	4605      	mov	r5, r0
 801ec64:	b118      	cbz	r0, 801ec6e <__swbuf_r+0x12>
 801ec66:	6a03      	ldr	r3, [r0, #32]
 801ec68:	b90b      	cbnz	r3, 801ec6e <__swbuf_r+0x12>
 801ec6a:	f7ff fe5b 	bl	801e924 <__sinit>
 801ec6e:	69a3      	ldr	r3, [r4, #24]
 801ec70:	60a3      	str	r3, [r4, #8]
 801ec72:	89a3      	ldrh	r3, [r4, #12]
 801ec74:	071a      	lsls	r2, r3, #28
 801ec76:	d501      	bpl.n	801ec7c <__swbuf_r+0x20>
 801ec78:	6923      	ldr	r3, [r4, #16]
 801ec7a:	b943      	cbnz	r3, 801ec8e <__swbuf_r+0x32>
 801ec7c:	4621      	mov	r1, r4
 801ec7e:	4628      	mov	r0, r5
 801ec80:	f000 f82a 	bl	801ecd8 <__swsetup_r>
 801ec84:	b118      	cbz	r0, 801ec8e <__swbuf_r+0x32>
 801ec86:	f04f 37ff 	mov.w	r7, #4294967295
 801ec8a:	4638      	mov	r0, r7
 801ec8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec8e:	6823      	ldr	r3, [r4, #0]
 801ec90:	6922      	ldr	r2, [r4, #16]
 801ec92:	1a98      	subs	r0, r3, r2
 801ec94:	6963      	ldr	r3, [r4, #20]
 801ec96:	b2f6      	uxtb	r6, r6
 801ec98:	4283      	cmp	r3, r0
 801ec9a:	4637      	mov	r7, r6
 801ec9c:	dc05      	bgt.n	801ecaa <__swbuf_r+0x4e>
 801ec9e:	4621      	mov	r1, r4
 801eca0:	4628      	mov	r0, r5
 801eca2:	f002 fe45 	bl	8021930 <_fflush_r>
 801eca6:	2800      	cmp	r0, #0
 801eca8:	d1ed      	bne.n	801ec86 <__swbuf_r+0x2a>
 801ecaa:	68a3      	ldr	r3, [r4, #8]
 801ecac:	3b01      	subs	r3, #1
 801ecae:	60a3      	str	r3, [r4, #8]
 801ecb0:	6823      	ldr	r3, [r4, #0]
 801ecb2:	1c5a      	adds	r2, r3, #1
 801ecb4:	6022      	str	r2, [r4, #0]
 801ecb6:	701e      	strb	r6, [r3, #0]
 801ecb8:	6962      	ldr	r2, [r4, #20]
 801ecba:	1c43      	adds	r3, r0, #1
 801ecbc:	429a      	cmp	r2, r3
 801ecbe:	d004      	beq.n	801ecca <__swbuf_r+0x6e>
 801ecc0:	89a3      	ldrh	r3, [r4, #12]
 801ecc2:	07db      	lsls	r3, r3, #31
 801ecc4:	d5e1      	bpl.n	801ec8a <__swbuf_r+0x2e>
 801ecc6:	2e0a      	cmp	r6, #10
 801ecc8:	d1df      	bne.n	801ec8a <__swbuf_r+0x2e>
 801ecca:	4621      	mov	r1, r4
 801eccc:	4628      	mov	r0, r5
 801ecce:	f002 fe2f 	bl	8021930 <_fflush_r>
 801ecd2:	2800      	cmp	r0, #0
 801ecd4:	d0d9      	beq.n	801ec8a <__swbuf_r+0x2e>
 801ecd6:	e7d6      	b.n	801ec86 <__swbuf_r+0x2a>

0801ecd8 <__swsetup_r>:
 801ecd8:	b538      	push	{r3, r4, r5, lr}
 801ecda:	4b29      	ldr	r3, [pc, #164]	@ (801ed80 <__swsetup_r+0xa8>)
 801ecdc:	4605      	mov	r5, r0
 801ecde:	6818      	ldr	r0, [r3, #0]
 801ece0:	460c      	mov	r4, r1
 801ece2:	b118      	cbz	r0, 801ecec <__swsetup_r+0x14>
 801ece4:	6a03      	ldr	r3, [r0, #32]
 801ece6:	b90b      	cbnz	r3, 801ecec <__swsetup_r+0x14>
 801ece8:	f7ff fe1c 	bl	801e924 <__sinit>
 801ecec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ecf0:	0719      	lsls	r1, r3, #28
 801ecf2:	d422      	bmi.n	801ed3a <__swsetup_r+0x62>
 801ecf4:	06da      	lsls	r2, r3, #27
 801ecf6:	d407      	bmi.n	801ed08 <__swsetup_r+0x30>
 801ecf8:	2209      	movs	r2, #9
 801ecfa:	602a      	str	r2, [r5, #0]
 801ecfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed00:	81a3      	strh	r3, [r4, #12]
 801ed02:	f04f 30ff 	mov.w	r0, #4294967295
 801ed06:	e033      	b.n	801ed70 <__swsetup_r+0x98>
 801ed08:	0758      	lsls	r0, r3, #29
 801ed0a:	d512      	bpl.n	801ed32 <__swsetup_r+0x5a>
 801ed0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ed0e:	b141      	cbz	r1, 801ed22 <__swsetup_r+0x4a>
 801ed10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ed14:	4299      	cmp	r1, r3
 801ed16:	d002      	beq.n	801ed1e <__swsetup_r+0x46>
 801ed18:	4628      	mov	r0, r5
 801ed1a:	f000 ffe5 	bl	801fce8 <_free_r>
 801ed1e:	2300      	movs	r3, #0
 801ed20:	6363      	str	r3, [r4, #52]	@ 0x34
 801ed22:	89a3      	ldrh	r3, [r4, #12]
 801ed24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ed28:	81a3      	strh	r3, [r4, #12]
 801ed2a:	2300      	movs	r3, #0
 801ed2c:	6063      	str	r3, [r4, #4]
 801ed2e:	6923      	ldr	r3, [r4, #16]
 801ed30:	6023      	str	r3, [r4, #0]
 801ed32:	89a3      	ldrh	r3, [r4, #12]
 801ed34:	f043 0308 	orr.w	r3, r3, #8
 801ed38:	81a3      	strh	r3, [r4, #12]
 801ed3a:	6923      	ldr	r3, [r4, #16]
 801ed3c:	b94b      	cbnz	r3, 801ed52 <__swsetup_r+0x7a>
 801ed3e:	89a3      	ldrh	r3, [r4, #12]
 801ed40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ed44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ed48:	d003      	beq.n	801ed52 <__swsetup_r+0x7a>
 801ed4a:	4621      	mov	r1, r4
 801ed4c:	4628      	mov	r0, r5
 801ed4e:	f002 fe4f 	bl	80219f0 <__smakebuf_r>
 801ed52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed56:	f013 0201 	ands.w	r2, r3, #1
 801ed5a:	d00a      	beq.n	801ed72 <__swsetup_r+0x9a>
 801ed5c:	2200      	movs	r2, #0
 801ed5e:	60a2      	str	r2, [r4, #8]
 801ed60:	6962      	ldr	r2, [r4, #20]
 801ed62:	4252      	negs	r2, r2
 801ed64:	61a2      	str	r2, [r4, #24]
 801ed66:	6922      	ldr	r2, [r4, #16]
 801ed68:	b942      	cbnz	r2, 801ed7c <__swsetup_r+0xa4>
 801ed6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ed6e:	d1c5      	bne.n	801ecfc <__swsetup_r+0x24>
 801ed70:	bd38      	pop	{r3, r4, r5, pc}
 801ed72:	0799      	lsls	r1, r3, #30
 801ed74:	bf58      	it	pl
 801ed76:	6962      	ldrpl	r2, [r4, #20]
 801ed78:	60a2      	str	r2, [r4, #8]
 801ed7a:	e7f4      	b.n	801ed66 <__swsetup_r+0x8e>
 801ed7c:	2000      	movs	r0, #0
 801ed7e:	e7f7      	b.n	801ed70 <__swsetup_r+0x98>
 801ed80:	20000148 	.word	0x20000148

0801ed84 <memmove>:
 801ed84:	4288      	cmp	r0, r1
 801ed86:	b510      	push	{r4, lr}
 801ed88:	eb01 0402 	add.w	r4, r1, r2
 801ed8c:	d902      	bls.n	801ed94 <memmove+0x10>
 801ed8e:	4284      	cmp	r4, r0
 801ed90:	4623      	mov	r3, r4
 801ed92:	d807      	bhi.n	801eda4 <memmove+0x20>
 801ed94:	1e43      	subs	r3, r0, #1
 801ed96:	42a1      	cmp	r1, r4
 801ed98:	d008      	beq.n	801edac <memmove+0x28>
 801ed9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ed9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801eda2:	e7f8      	b.n	801ed96 <memmove+0x12>
 801eda4:	4402      	add	r2, r0
 801eda6:	4601      	mov	r1, r0
 801eda8:	428a      	cmp	r2, r1
 801edaa:	d100      	bne.n	801edae <memmove+0x2a>
 801edac:	bd10      	pop	{r4, pc}
 801edae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801edb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801edb6:	e7f7      	b.n	801eda8 <memmove+0x24>

0801edb8 <memset>:
 801edb8:	4402      	add	r2, r0
 801edba:	4603      	mov	r3, r0
 801edbc:	4293      	cmp	r3, r2
 801edbe:	d100      	bne.n	801edc2 <memset+0xa>
 801edc0:	4770      	bx	lr
 801edc2:	f803 1b01 	strb.w	r1, [r3], #1
 801edc6:	e7f9      	b.n	801edbc <memset+0x4>

0801edc8 <strchr>:
 801edc8:	b2c9      	uxtb	r1, r1
 801edca:	4603      	mov	r3, r0
 801edcc:	4618      	mov	r0, r3
 801edce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801edd2:	b112      	cbz	r2, 801edda <strchr+0x12>
 801edd4:	428a      	cmp	r2, r1
 801edd6:	d1f9      	bne.n	801edcc <strchr+0x4>
 801edd8:	4770      	bx	lr
 801edda:	2900      	cmp	r1, #0
 801eddc:	bf18      	it	ne
 801edde:	2000      	movne	r0, #0
 801ede0:	4770      	bx	lr
	...

0801ede4 <strtok>:
 801ede4:	4b16      	ldr	r3, [pc, #88]	@ (801ee40 <strtok+0x5c>)
 801ede6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edea:	681f      	ldr	r7, [r3, #0]
 801edec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801edee:	4605      	mov	r5, r0
 801edf0:	460e      	mov	r6, r1
 801edf2:	b9ec      	cbnz	r4, 801ee30 <strtok+0x4c>
 801edf4:	2050      	movs	r0, #80	@ 0x50
 801edf6:	f7fe fd61 	bl	801d8bc <malloc>
 801edfa:	4602      	mov	r2, r0
 801edfc:	6478      	str	r0, [r7, #68]	@ 0x44
 801edfe:	b920      	cbnz	r0, 801ee0a <strtok+0x26>
 801ee00:	4b10      	ldr	r3, [pc, #64]	@ (801ee44 <strtok+0x60>)
 801ee02:	4811      	ldr	r0, [pc, #68]	@ (801ee48 <strtok+0x64>)
 801ee04:	215b      	movs	r1, #91	@ 0x5b
 801ee06:	f000 f903 	bl	801f010 <__assert_func>
 801ee0a:	e9c0 4400 	strd	r4, r4, [r0]
 801ee0e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ee12:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ee16:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801ee1a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801ee1e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801ee22:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801ee26:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801ee2a:	6184      	str	r4, [r0, #24]
 801ee2c:	7704      	strb	r4, [r0, #28]
 801ee2e:	6244      	str	r4, [r0, #36]	@ 0x24
 801ee30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ee32:	4631      	mov	r1, r6
 801ee34:	4628      	mov	r0, r5
 801ee36:	2301      	movs	r3, #1
 801ee38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ee3c:	f000 b806 	b.w	801ee4c <__strtok_r>
 801ee40:	20000148 	.word	0x20000148
 801ee44:	0802565e 	.word	0x0802565e
 801ee48:	08025675 	.word	0x08025675

0801ee4c <__strtok_r>:
 801ee4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee4e:	4604      	mov	r4, r0
 801ee50:	b908      	cbnz	r0, 801ee56 <__strtok_r+0xa>
 801ee52:	6814      	ldr	r4, [r2, #0]
 801ee54:	b144      	cbz	r4, 801ee68 <__strtok_r+0x1c>
 801ee56:	4620      	mov	r0, r4
 801ee58:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ee5c:	460f      	mov	r7, r1
 801ee5e:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ee62:	b91e      	cbnz	r6, 801ee6c <__strtok_r+0x20>
 801ee64:	b965      	cbnz	r5, 801ee80 <__strtok_r+0x34>
 801ee66:	6015      	str	r5, [r2, #0]
 801ee68:	2000      	movs	r0, #0
 801ee6a:	e005      	b.n	801ee78 <__strtok_r+0x2c>
 801ee6c:	42b5      	cmp	r5, r6
 801ee6e:	d1f6      	bne.n	801ee5e <__strtok_r+0x12>
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d1f0      	bne.n	801ee56 <__strtok_r+0xa>
 801ee74:	6014      	str	r4, [r2, #0]
 801ee76:	7003      	strb	r3, [r0, #0]
 801ee78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee7a:	461c      	mov	r4, r3
 801ee7c:	e00c      	b.n	801ee98 <__strtok_r+0x4c>
 801ee7e:	b915      	cbnz	r5, 801ee86 <__strtok_r+0x3a>
 801ee80:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ee84:	460e      	mov	r6, r1
 801ee86:	f816 5b01 	ldrb.w	r5, [r6], #1
 801ee8a:	42ab      	cmp	r3, r5
 801ee8c:	d1f7      	bne.n	801ee7e <__strtok_r+0x32>
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d0f3      	beq.n	801ee7a <__strtok_r+0x2e>
 801ee92:	2300      	movs	r3, #0
 801ee94:	f804 3c01 	strb.w	r3, [r4, #-1]
 801ee98:	6014      	str	r4, [r2, #0]
 801ee9a:	e7ed      	b.n	801ee78 <__strtok_r+0x2c>

0801ee9c <strstr>:
 801ee9c:	780a      	ldrb	r2, [r1, #0]
 801ee9e:	b570      	push	{r4, r5, r6, lr}
 801eea0:	b96a      	cbnz	r2, 801eebe <strstr+0x22>
 801eea2:	bd70      	pop	{r4, r5, r6, pc}
 801eea4:	429a      	cmp	r2, r3
 801eea6:	d109      	bne.n	801eebc <strstr+0x20>
 801eea8:	460c      	mov	r4, r1
 801eeaa:	4605      	mov	r5, r0
 801eeac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d0f6      	beq.n	801eea2 <strstr+0x6>
 801eeb4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801eeb8:	429e      	cmp	r6, r3
 801eeba:	d0f7      	beq.n	801eeac <strstr+0x10>
 801eebc:	3001      	adds	r0, #1
 801eebe:	7803      	ldrb	r3, [r0, #0]
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d1ef      	bne.n	801eea4 <strstr+0x8>
 801eec4:	4618      	mov	r0, r3
 801eec6:	e7ec      	b.n	801eea2 <strstr+0x6>

0801eec8 <_localeconv_r>:
 801eec8:	4800      	ldr	r0, [pc, #0]	@ (801eecc <_localeconv_r+0x4>)
 801eeca:	4770      	bx	lr
 801eecc:	20000288 	.word	0x20000288

0801eed0 <_close_r>:
 801eed0:	b538      	push	{r3, r4, r5, lr}
 801eed2:	4d06      	ldr	r5, [pc, #24]	@ (801eeec <_close_r+0x1c>)
 801eed4:	2300      	movs	r3, #0
 801eed6:	4604      	mov	r4, r0
 801eed8:	4608      	mov	r0, r1
 801eeda:	602b      	str	r3, [r5, #0]
 801eedc:	f7e5 f810 	bl	8003f00 <_close>
 801eee0:	1c43      	adds	r3, r0, #1
 801eee2:	d102      	bne.n	801eeea <_close_r+0x1a>
 801eee4:	682b      	ldr	r3, [r5, #0]
 801eee6:	b103      	cbz	r3, 801eeea <_close_r+0x1a>
 801eee8:	6023      	str	r3, [r4, #0]
 801eeea:	bd38      	pop	{r3, r4, r5, pc}
 801eeec:	200037a8 	.word	0x200037a8

0801eef0 <_lseek_r>:
 801eef0:	b538      	push	{r3, r4, r5, lr}
 801eef2:	4d07      	ldr	r5, [pc, #28]	@ (801ef10 <_lseek_r+0x20>)
 801eef4:	4604      	mov	r4, r0
 801eef6:	4608      	mov	r0, r1
 801eef8:	4611      	mov	r1, r2
 801eefa:	2200      	movs	r2, #0
 801eefc:	602a      	str	r2, [r5, #0]
 801eefe:	461a      	mov	r2, r3
 801ef00:	f7e5 f825 	bl	8003f4e <_lseek>
 801ef04:	1c43      	adds	r3, r0, #1
 801ef06:	d102      	bne.n	801ef0e <_lseek_r+0x1e>
 801ef08:	682b      	ldr	r3, [r5, #0]
 801ef0a:	b103      	cbz	r3, 801ef0e <_lseek_r+0x1e>
 801ef0c:	6023      	str	r3, [r4, #0]
 801ef0e:	bd38      	pop	{r3, r4, r5, pc}
 801ef10:	200037a8 	.word	0x200037a8

0801ef14 <_read_r>:
 801ef14:	b538      	push	{r3, r4, r5, lr}
 801ef16:	4d07      	ldr	r5, [pc, #28]	@ (801ef34 <_read_r+0x20>)
 801ef18:	4604      	mov	r4, r0
 801ef1a:	4608      	mov	r0, r1
 801ef1c:	4611      	mov	r1, r2
 801ef1e:	2200      	movs	r2, #0
 801ef20:	602a      	str	r2, [r5, #0]
 801ef22:	461a      	mov	r2, r3
 801ef24:	f7e4 ffb3 	bl	8003e8e <_read>
 801ef28:	1c43      	adds	r3, r0, #1
 801ef2a:	d102      	bne.n	801ef32 <_read_r+0x1e>
 801ef2c:	682b      	ldr	r3, [r5, #0]
 801ef2e:	b103      	cbz	r3, 801ef32 <_read_r+0x1e>
 801ef30:	6023      	str	r3, [r4, #0]
 801ef32:	bd38      	pop	{r3, r4, r5, pc}
 801ef34:	200037a8 	.word	0x200037a8

0801ef38 <_sbrk_r>:
 801ef38:	b538      	push	{r3, r4, r5, lr}
 801ef3a:	4d06      	ldr	r5, [pc, #24]	@ (801ef54 <_sbrk_r+0x1c>)
 801ef3c:	2300      	movs	r3, #0
 801ef3e:	4604      	mov	r4, r0
 801ef40:	4608      	mov	r0, r1
 801ef42:	602b      	str	r3, [r5, #0]
 801ef44:	f7e5 f810 	bl	8003f68 <_sbrk>
 801ef48:	1c43      	adds	r3, r0, #1
 801ef4a:	d102      	bne.n	801ef52 <_sbrk_r+0x1a>
 801ef4c:	682b      	ldr	r3, [r5, #0]
 801ef4e:	b103      	cbz	r3, 801ef52 <_sbrk_r+0x1a>
 801ef50:	6023      	str	r3, [r4, #0]
 801ef52:	bd38      	pop	{r3, r4, r5, pc}
 801ef54:	200037a8 	.word	0x200037a8

0801ef58 <_write_r>:
 801ef58:	b538      	push	{r3, r4, r5, lr}
 801ef5a:	4d07      	ldr	r5, [pc, #28]	@ (801ef78 <_write_r+0x20>)
 801ef5c:	4604      	mov	r4, r0
 801ef5e:	4608      	mov	r0, r1
 801ef60:	4611      	mov	r1, r2
 801ef62:	2200      	movs	r2, #0
 801ef64:	602a      	str	r2, [r5, #0]
 801ef66:	461a      	mov	r2, r3
 801ef68:	f7e4 ffae 	bl	8003ec8 <_write>
 801ef6c:	1c43      	adds	r3, r0, #1
 801ef6e:	d102      	bne.n	801ef76 <_write_r+0x1e>
 801ef70:	682b      	ldr	r3, [r5, #0]
 801ef72:	b103      	cbz	r3, 801ef76 <_write_r+0x1e>
 801ef74:	6023      	str	r3, [r4, #0]
 801ef76:	bd38      	pop	{r3, r4, r5, pc}
 801ef78:	200037a8 	.word	0x200037a8

0801ef7c <__errno>:
 801ef7c:	4b01      	ldr	r3, [pc, #4]	@ (801ef84 <__errno+0x8>)
 801ef7e:	6818      	ldr	r0, [r3, #0]
 801ef80:	4770      	bx	lr
 801ef82:	bf00      	nop
 801ef84:	20000148 	.word	0x20000148

0801ef88 <__libc_init_array>:
 801ef88:	b570      	push	{r4, r5, r6, lr}
 801ef8a:	4d0d      	ldr	r5, [pc, #52]	@ (801efc0 <__libc_init_array+0x38>)
 801ef8c:	4c0d      	ldr	r4, [pc, #52]	@ (801efc4 <__libc_init_array+0x3c>)
 801ef8e:	1b64      	subs	r4, r4, r5
 801ef90:	10a4      	asrs	r4, r4, #2
 801ef92:	2600      	movs	r6, #0
 801ef94:	42a6      	cmp	r6, r4
 801ef96:	d109      	bne.n	801efac <__libc_init_array+0x24>
 801ef98:	4d0b      	ldr	r5, [pc, #44]	@ (801efc8 <__libc_init_array+0x40>)
 801ef9a:	4c0c      	ldr	r4, [pc, #48]	@ (801efcc <__libc_init_array+0x44>)
 801ef9c:	f003 f98c 	bl	80222b8 <_init>
 801efa0:	1b64      	subs	r4, r4, r5
 801efa2:	10a4      	asrs	r4, r4, #2
 801efa4:	2600      	movs	r6, #0
 801efa6:	42a6      	cmp	r6, r4
 801efa8:	d105      	bne.n	801efb6 <__libc_init_array+0x2e>
 801efaa:	bd70      	pop	{r4, r5, r6, pc}
 801efac:	f855 3b04 	ldr.w	r3, [r5], #4
 801efb0:	4798      	blx	r3
 801efb2:	3601      	adds	r6, #1
 801efb4:	e7ee      	b.n	801ef94 <__libc_init_array+0xc>
 801efb6:	f855 3b04 	ldr.w	r3, [r5], #4
 801efba:	4798      	blx	r3
 801efbc:	3601      	adds	r6, #1
 801efbe:	e7f2      	b.n	801efa6 <__libc_init_array+0x1e>
 801efc0:	080259b4 	.word	0x080259b4
 801efc4:	080259b4 	.word	0x080259b4
 801efc8:	080259b4 	.word	0x080259b4
 801efcc:	080259b8 	.word	0x080259b8

0801efd0 <__retarget_lock_init_recursive>:
 801efd0:	4770      	bx	lr

0801efd2 <__retarget_lock_acquire_recursive>:
 801efd2:	4770      	bx	lr

0801efd4 <__retarget_lock_release_recursive>:
 801efd4:	4770      	bx	lr

0801efd6 <strcpy>:
 801efd6:	4603      	mov	r3, r0
 801efd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801efdc:	f803 2b01 	strb.w	r2, [r3], #1
 801efe0:	2a00      	cmp	r2, #0
 801efe2:	d1f9      	bne.n	801efd8 <strcpy+0x2>
 801efe4:	4770      	bx	lr

0801efe6 <memcpy>:
 801efe6:	440a      	add	r2, r1
 801efe8:	4291      	cmp	r1, r2
 801efea:	f100 33ff 	add.w	r3, r0, #4294967295
 801efee:	d100      	bne.n	801eff2 <memcpy+0xc>
 801eff0:	4770      	bx	lr
 801eff2:	b510      	push	{r4, lr}
 801eff4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eff8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801effc:	4291      	cmp	r1, r2
 801effe:	d1f9      	bne.n	801eff4 <memcpy+0xe>
 801f000:	bd10      	pop	{r4, pc}
	...

0801f004 <nanf>:
 801f004:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f00c <nanf+0x8>
 801f008:	4770      	bx	lr
 801f00a:	bf00      	nop
 801f00c:	7fc00000 	.word	0x7fc00000

0801f010 <__assert_func>:
 801f010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f012:	4614      	mov	r4, r2
 801f014:	461a      	mov	r2, r3
 801f016:	4b09      	ldr	r3, [pc, #36]	@ (801f03c <__assert_func+0x2c>)
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	4605      	mov	r5, r0
 801f01c:	68d8      	ldr	r0, [r3, #12]
 801f01e:	b954      	cbnz	r4, 801f036 <__assert_func+0x26>
 801f020:	4b07      	ldr	r3, [pc, #28]	@ (801f040 <__assert_func+0x30>)
 801f022:	461c      	mov	r4, r3
 801f024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f028:	9100      	str	r1, [sp, #0]
 801f02a:	462b      	mov	r3, r5
 801f02c:	4905      	ldr	r1, [pc, #20]	@ (801f044 <__assert_func+0x34>)
 801f02e:	f002 fca7 	bl	8021980 <fiprintf>
 801f032:	f002 fd55 	bl	8021ae0 <abort>
 801f036:	4b04      	ldr	r3, [pc, #16]	@ (801f048 <__assert_func+0x38>)
 801f038:	e7f4      	b.n	801f024 <__assert_func+0x14>
 801f03a:	bf00      	nop
 801f03c:	20000148 	.word	0x20000148
 801f040:	0802570a 	.word	0x0802570a
 801f044:	080256dc 	.word	0x080256dc
 801f048:	080256cf 	.word	0x080256cf

0801f04c <quorem>:
 801f04c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f050:	6903      	ldr	r3, [r0, #16]
 801f052:	690c      	ldr	r4, [r1, #16]
 801f054:	42a3      	cmp	r3, r4
 801f056:	4607      	mov	r7, r0
 801f058:	db7e      	blt.n	801f158 <quorem+0x10c>
 801f05a:	3c01      	subs	r4, #1
 801f05c:	f101 0814 	add.w	r8, r1, #20
 801f060:	00a3      	lsls	r3, r4, #2
 801f062:	f100 0514 	add.w	r5, r0, #20
 801f066:	9300      	str	r3, [sp, #0]
 801f068:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f06c:	9301      	str	r3, [sp, #4]
 801f06e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f076:	3301      	adds	r3, #1
 801f078:	429a      	cmp	r2, r3
 801f07a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f07e:	fbb2 f6f3 	udiv	r6, r2, r3
 801f082:	d32e      	bcc.n	801f0e2 <quorem+0x96>
 801f084:	f04f 0a00 	mov.w	sl, #0
 801f088:	46c4      	mov	ip, r8
 801f08a:	46ae      	mov	lr, r5
 801f08c:	46d3      	mov	fp, sl
 801f08e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f092:	b298      	uxth	r0, r3
 801f094:	fb06 a000 	mla	r0, r6, r0, sl
 801f098:	0c02      	lsrs	r2, r0, #16
 801f09a:	0c1b      	lsrs	r3, r3, #16
 801f09c:	fb06 2303 	mla	r3, r6, r3, r2
 801f0a0:	f8de 2000 	ldr.w	r2, [lr]
 801f0a4:	b280      	uxth	r0, r0
 801f0a6:	b292      	uxth	r2, r2
 801f0a8:	1a12      	subs	r2, r2, r0
 801f0aa:	445a      	add	r2, fp
 801f0ac:	f8de 0000 	ldr.w	r0, [lr]
 801f0b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f0b4:	b29b      	uxth	r3, r3
 801f0b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801f0ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801f0be:	b292      	uxth	r2, r2
 801f0c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801f0c4:	45e1      	cmp	r9, ip
 801f0c6:	f84e 2b04 	str.w	r2, [lr], #4
 801f0ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f0ce:	d2de      	bcs.n	801f08e <quorem+0x42>
 801f0d0:	9b00      	ldr	r3, [sp, #0]
 801f0d2:	58eb      	ldr	r3, [r5, r3]
 801f0d4:	b92b      	cbnz	r3, 801f0e2 <quorem+0x96>
 801f0d6:	9b01      	ldr	r3, [sp, #4]
 801f0d8:	3b04      	subs	r3, #4
 801f0da:	429d      	cmp	r5, r3
 801f0dc:	461a      	mov	r2, r3
 801f0de:	d32f      	bcc.n	801f140 <quorem+0xf4>
 801f0e0:	613c      	str	r4, [r7, #16]
 801f0e2:	4638      	mov	r0, r7
 801f0e4:	f001 f90e 	bl	8020304 <__mcmp>
 801f0e8:	2800      	cmp	r0, #0
 801f0ea:	db25      	blt.n	801f138 <quorem+0xec>
 801f0ec:	4629      	mov	r1, r5
 801f0ee:	2000      	movs	r0, #0
 801f0f0:	f858 2b04 	ldr.w	r2, [r8], #4
 801f0f4:	f8d1 c000 	ldr.w	ip, [r1]
 801f0f8:	fa1f fe82 	uxth.w	lr, r2
 801f0fc:	fa1f f38c 	uxth.w	r3, ip
 801f100:	eba3 030e 	sub.w	r3, r3, lr
 801f104:	4403      	add	r3, r0
 801f106:	0c12      	lsrs	r2, r2, #16
 801f108:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f10c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f110:	b29b      	uxth	r3, r3
 801f112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f116:	45c1      	cmp	r9, r8
 801f118:	f841 3b04 	str.w	r3, [r1], #4
 801f11c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f120:	d2e6      	bcs.n	801f0f0 <quorem+0xa4>
 801f122:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f12a:	b922      	cbnz	r2, 801f136 <quorem+0xea>
 801f12c:	3b04      	subs	r3, #4
 801f12e:	429d      	cmp	r5, r3
 801f130:	461a      	mov	r2, r3
 801f132:	d30b      	bcc.n	801f14c <quorem+0x100>
 801f134:	613c      	str	r4, [r7, #16]
 801f136:	3601      	adds	r6, #1
 801f138:	4630      	mov	r0, r6
 801f13a:	b003      	add	sp, #12
 801f13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f140:	6812      	ldr	r2, [r2, #0]
 801f142:	3b04      	subs	r3, #4
 801f144:	2a00      	cmp	r2, #0
 801f146:	d1cb      	bne.n	801f0e0 <quorem+0x94>
 801f148:	3c01      	subs	r4, #1
 801f14a:	e7c6      	b.n	801f0da <quorem+0x8e>
 801f14c:	6812      	ldr	r2, [r2, #0]
 801f14e:	3b04      	subs	r3, #4
 801f150:	2a00      	cmp	r2, #0
 801f152:	d1ef      	bne.n	801f134 <quorem+0xe8>
 801f154:	3c01      	subs	r4, #1
 801f156:	e7ea      	b.n	801f12e <quorem+0xe2>
 801f158:	2000      	movs	r0, #0
 801f15a:	e7ee      	b.n	801f13a <quorem+0xee>
 801f15c:	0000      	movs	r0, r0
	...

0801f160 <_dtoa_r>:
 801f160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f164:	69c7      	ldr	r7, [r0, #28]
 801f166:	b099      	sub	sp, #100	@ 0x64
 801f168:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f16c:	ec55 4b10 	vmov	r4, r5, d0
 801f170:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f172:	9109      	str	r1, [sp, #36]	@ 0x24
 801f174:	4683      	mov	fp, r0
 801f176:	920e      	str	r2, [sp, #56]	@ 0x38
 801f178:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f17a:	b97f      	cbnz	r7, 801f19c <_dtoa_r+0x3c>
 801f17c:	2010      	movs	r0, #16
 801f17e:	f7fe fb9d 	bl	801d8bc <malloc>
 801f182:	4602      	mov	r2, r0
 801f184:	f8cb 001c 	str.w	r0, [fp, #28]
 801f188:	b920      	cbnz	r0, 801f194 <_dtoa_r+0x34>
 801f18a:	4ba7      	ldr	r3, [pc, #668]	@ (801f428 <_dtoa_r+0x2c8>)
 801f18c:	21ef      	movs	r1, #239	@ 0xef
 801f18e:	48a7      	ldr	r0, [pc, #668]	@ (801f42c <_dtoa_r+0x2cc>)
 801f190:	f7ff ff3e 	bl	801f010 <__assert_func>
 801f194:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f198:	6007      	str	r7, [r0, #0]
 801f19a:	60c7      	str	r7, [r0, #12]
 801f19c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f1a0:	6819      	ldr	r1, [r3, #0]
 801f1a2:	b159      	cbz	r1, 801f1bc <_dtoa_r+0x5c>
 801f1a4:	685a      	ldr	r2, [r3, #4]
 801f1a6:	604a      	str	r2, [r1, #4]
 801f1a8:	2301      	movs	r3, #1
 801f1aa:	4093      	lsls	r3, r2
 801f1ac:	608b      	str	r3, [r1, #8]
 801f1ae:	4658      	mov	r0, fp
 801f1b0:	f000 fe24 	bl	801fdfc <_Bfree>
 801f1b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f1b8:	2200      	movs	r2, #0
 801f1ba:	601a      	str	r2, [r3, #0]
 801f1bc:	1e2b      	subs	r3, r5, #0
 801f1be:	bfb9      	ittee	lt
 801f1c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f1c4:	9303      	strlt	r3, [sp, #12]
 801f1c6:	2300      	movge	r3, #0
 801f1c8:	6033      	strge	r3, [r6, #0]
 801f1ca:	9f03      	ldr	r7, [sp, #12]
 801f1cc:	4b98      	ldr	r3, [pc, #608]	@ (801f430 <_dtoa_r+0x2d0>)
 801f1ce:	bfbc      	itt	lt
 801f1d0:	2201      	movlt	r2, #1
 801f1d2:	6032      	strlt	r2, [r6, #0]
 801f1d4:	43bb      	bics	r3, r7
 801f1d6:	d112      	bne.n	801f1fe <_dtoa_r+0x9e>
 801f1d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f1da:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f1de:	6013      	str	r3, [r2, #0]
 801f1e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f1e4:	4323      	orrs	r3, r4
 801f1e6:	f000 854d 	beq.w	801fc84 <_dtoa_r+0xb24>
 801f1ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f1ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f444 <_dtoa_r+0x2e4>
 801f1f0:	2b00      	cmp	r3, #0
 801f1f2:	f000 854f 	beq.w	801fc94 <_dtoa_r+0xb34>
 801f1f6:	f10a 0303 	add.w	r3, sl, #3
 801f1fa:	f000 bd49 	b.w	801fc90 <_dtoa_r+0xb30>
 801f1fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f202:	2200      	movs	r2, #0
 801f204:	ec51 0b17 	vmov	r0, r1, d7
 801f208:	2300      	movs	r3, #0
 801f20a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f20e:	f7e1 fc73 	bl	8000af8 <__aeabi_dcmpeq>
 801f212:	4680      	mov	r8, r0
 801f214:	b158      	cbz	r0, 801f22e <_dtoa_r+0xce>
 801f216:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f218:	2301      	movs	r3, #1
 801f21a:	6013      	str	r3, [r2, #0]
 801f21c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f21e:	b113      	cbz	r3, 801f226 <_dtoa_r+0xc6>
 801f220:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f222:	4b84      	ldr	r3, [pc, #528]	@ (801f434 <_dtoa_r+0x2d4>)
 801f224:	6013      	str	r3, [r2, #0]
 801f226:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801f448 <_dtoa_r+0x2e8>
 801f22a:	f000 bd33 	b.w	801fc94 <_dtoa_r+0xb34>
 801f22e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f232:	aa16      	add	r2, sp, #88	@ 0x58
 801f234:	a917      	add	r1, sp, #92	@ 0x5c
 801f236:	4658      	mov	r0, fp
 801f238:	f001 f984 	bl	8020544 <__d2b>
 801f23c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f240:	4681      	mov	r9, r0
 801f242:	2e00      	cmp	r6, #0
 801f244:	d077      	beq.n	801f336 <_dtoa_r+0x1d6>
 801f246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f248:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f24c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f254:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f258:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f25c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f260:	4619      	mov	r1, r3
 801f262:	2200      	movs	r2, #0
 801f264:	4b74      	ldr	r3, [pc, #464]	@ (801f438 <_dtoa_r+0x2d8>)
 801f266:	f7e1 f827 	bl	80002b8 <__aeabi_dsub>
 801f26a:	a369      	add	r3, pc, #420	@ (adr r3, 801f410 <_dtoa_r+0x2b0>)
 801f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f270:	f7e1 f9da 	bl	8000628 <__aeabi_dmul>
 801f274:	a368      	add	r3, pc, #416	@ (adr r3, 801f418 <_dtoa_r+0x2b8>)
 801f276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f27a:	f7e1 f81f 	bl	80002bc <__adddf3>
 801f27e:	4604      	mov	r4, r0
 801f280:	4630      	mov	r0, r6
 801f282:	460d      	mov	r5, r1
 801f284:	f7e1 f966 	bl	8000554 <__aeabi_i2d>
 801f288:	a365      	add	r3, pc, #404	@ (adr r3, 801f420 <_dtoa_r+0x2c0>)
 801f28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f28e:	f7e1 f9cb 	bl	8000628 <__aeabi_dmul>
 801f292:	4602      	mov	r2, r0
 801f294:	460b      	mov	r3, r1
 801f296:	4620      	mov	r0, r4
 801f298:	4629      	mov	r1, r5
 801f29a:	f7e1 f80f 	bl	80002bc <__adddf3>
 801f29e:	4604      	mov	r4, r0
 801f2a0:	460d      	mov	r5, r1
 801f2a2:	f7e1 fc71 	bl	8000b88 <__aeabi_d2iz>
 801f2a6:	2200      	movs	r2, #0
 801f2a8:	4607      	mov	r7, r0
 801f2aa:	2300      	movs	r3, #0
 801f2ac:	4620      	mov	r0, r4
 801f2ae:	4629      	mov	r1, r5
 801f2b0:	f7e1 fc2c 	bl	8000b0c <__aeabi_dcmplt>
 801f2b4:	b140      	cbz	r0, 801f2c8 <_dtoa_r+0x168>
 801f2b6:	4638      	mov	r0, r7
 801f2b8:	f7e1 f94c 	bl	8000554 <__aeabi_i2d>
 801f2bc:	4622      	mov	r2, r4
 801f2be:	462b      	mov	r3, r5
 801f2c0:	f7e1 fc1a 	bl	8000af8 <__aeabi_dcmpeq>
 801f2c4:	b900      	cbnz	r0, 801f2c8 <_dtoa_r+0x168>
 801f2c6:	3f01      	subs	r7, #1
 801f2c8:	2f16      	cmp	r7, #22
 801f2ca:	d851      	bhi.n	801f370 <_dtoa_r+0x210>
 801f2cc:	4b5b      	ldr	r3, [pc, #364]	@ (801f43c <_dtoa_r+0x2dc>)
 801f2ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f2da:	f7e1 fc17 	bl	8000b0c <__aeabi_dcmplt>
 801f2de:	2800      	cmp	r0, #0
 801f2e0:	d048      	beq.n	801f374 <_dtoa_r+0x214>
 801f2e2:	3f01      	subs	r7, #1
 801f2e4:	2300      	movs	r3, #0
 801f2e6:	9312      	str	r3, [sp, #72]	@ 0x48
 801f2e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f2ea:	1b9b      	subs	r3, r3, r6
 801f2ec:	1e5a      	subs	r2, r3, #1
 801f2ee:	bf44      	itt	mi
 801f2f0:	f1c3 0801 	rsbmi	r8, r3, #1
 801f2f4:	2300      	movmi	r3, #0
 801f2f6:	9208      	str	r2, [sp, #32]
 801f2f8:	bf54      	ite	pl
 801f2fa:	f04f 0800 	movpl.w	r8, #0
 801f2fe:	9308      	strmi	r3, [sp, #32]
 801f300:	2f00      	cmp	r7, #0
 801f302:	db39      	blt.n	801f378 <_dtoa_r+0x218>
 801f304:	9b08      	ldr	r3, [sp, #32]
 801f306:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f308:	443b      	add	r3, r7
 801f30a:	9308      	str	r3, [sp, #32]
 801f30c:	2300      	movs	r3, #0
 801f30e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f312:	2b09      	cmp	r3, #9
 801f314:	d864      	bhi.n	801f3e0 <_dtoa_r+0x280>
 801f316:	2b05      	cmp	r3, #5
 801f318:	bfc4      	itt	gt
 801f31a:	3b04      	subgt	r3, #4
 801f31c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f320:	f1a3 0302 	sub.w	r3, r3, #2
 801f324:	bfcc      	ite	gt
 801f326:	2400      	movgt	r4, #0
 801f328:	2401      	movle	r4, #1
 801f32a:	2b03      	cmp	r3, #3
 801f32c:	d863      	bhi.n	801f3f6 <_dtoa_r+0x296>
 801f32e:	e8df f003 	tbb	[pc, r3]
 801f332:	372a      	.short	0x372a
 801f334:	5535      	.short	0x5535
 801f336:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f33a:	441e      	add	r6, r3
 801f33c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f340:	2b20      	cmp	r3, #32
 801f342:	bfc1      	itttt	gt
 801f344:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f348:	409f      	lslgt	r7, r3
 801f34a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f34e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f352:	bfd6      	itet	le
 801f354:	f1c3 0320 	rsble	r3, r3, #32
 801f358:	ea47 0003 	orrgt.w	r0, r7, r3
 801f35c:	fa04 f003 	lslle.w	r0, r4, r3
 801f360:	f7e1 f8e8 	bl	8000534 <__aeabi_ui2d>
 801f364:	2201      	movs	r2, #1
 801f366:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f36a:	3e01      	subs	r6, #1
 801f36c:	9214      	str	r2, [sp, #80]	@ 0x50
 801f36e:	e777      	b.n	801f260 <_dtoa_r+0x100>
 801f370:	2301      	movs	r3, #1
 801f372:	e7b8      	b.n	801f2e6 <_dtoa_r+0x186>
 801f374:	9012      	str	r0, [sp, #72]	@ 0x48
 801f376:	e7b7      	b.n	801f2e8 <_dtoa_r+0x188>
 801f378:	427b      	negs	r3, r7
 801f37a:	930a      	str	r3, [sp, #40]	@ 0x28
 801f37c:	2300      	movs	r3, #0
 801f37e:	eba8 0807 	sub.w	r8, r8, r7
 801f382:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f384:	e7c4      	b.n	801f310 <_dtoa_r+0x1b0>
 801f386:	2300      	movs	r3, #0
 801f388:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f38a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	dc35      	bgt.n	801f3fc <_dtoa_r+0x29c>
 801f390:	2301      	movs	r3, #1
 801f392:	9300      	str	r3, [sp, #0]
 801f394:	9307      	str	r3, [sp, #28]
 801f396:	461a      	mov	r2, r3
 801f398:	920e      	str	r2, [sp, #56]	@ 0x38
 801f39a:	e00b      	b.n	801f3b4 <_dtoa_r+0x254>
 801f39c:	2301      	movs	r3, #1
 801f39e:	e7f3      	b.n	801f388 <_dtoa_r+0x228>
 801f3a0:	2300      	movs	r3, #0
 801f3a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f3a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3a6:	18fb      	adds	r3, r7, r3
 801f3a8:	9300      	str	r3, [sp, #0]
 801f3aa:	3301      	adds	r3, #1
 801f3ac:	2b01      	cmp	r3, #1
 801f3ae:	9307      	str	r3, [sp, #28]
 801f3b0:	bfb8      	it	lt
 801f3b2:	2301      	movlt	r3, #1
 801f3b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801f3b8:	2100      	movs	r1, #0
 801f3ba:	2204      	movs	r2, #4
 801f3bc:	f102 0514 	add.w	r5, r2, #20
 801f3c0:	429d      	cmp	r5, r3
 801f3c2:	d91f      	bls.n	801f404 <_dtoa_r+0x2a4>
 801f3c4:	6041      	str	r1, [r0, #4]
 801f3c6:	4658      	mov	r0, fp
 801f3c8:	f000 fcd8 	bl	801fd7c <_Balloc>
 801f3cc:	4682      	mov	sl, r0
 801f3ce:	2800      	cmp	r0, #0
 801f3d0:	d13c      	bne.n	801f44c <_dtoa_r+0x2ec>
 801f3d2:	4b1b      	ldr	r3, [pc, #108]	@ (801f440 <_dtoa_r+0x2e0>)
 801f3d4:	4602      	mov	r2, r0
 801f3d6:	f240 11af 	movw	r1, #431	@ 0x1af
 801f3da:	e6d8      	b.n	801f18e <_dtoa_r+0x2e>
 801f3dc:	2301      	movs	r3, #1
 801f3de:	e7e0      	b.n	801f3a2 <_dtoa_r+0x242>
 801f3e0:	2401      	movs	r4, #1
 801f3e2:	2300      	movs	r3, #0
 801f3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 801f3e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f3e8:	f04f 33ff 	mov.w	r3, #4294967295
 801f3ec:	9300      	str	r3, [sp, #0]
 801f3ee:	9307      	str	r3, [sp, #28]
 801f3f0:	2200      	movs	r2, #0
 801f3f2:	2312      	movs	r3, #18
 801f3f4:	e7d0      	b.n	801f398 <_dtoa_r+0x238>
 801f3f6:	2301      	movs	r3, #1
 801f3f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f3fa:	e7f5      	b.n	801f3e8 <_dtoa_r+0x288>
 801f3fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3fe:	9300      	str	r3, [sp, #0]
 801f400:	9307      	str	r3, [sp, #28]
 801f402:	e7d7      	b.n	801f3b4 <_dtoa_r+0x254>
 801f404:	3101      	adds	r1, #1
 801f406:	0052      	lsls	r2, r2, #1
 801f408:	e7d8      	b.n	801f3bc <_dtoa_r+0x25c>
 801f40a:	bf00      	nop
 801f40c:	f3af 8000 	nop.w
 801f410:	636f4361 	.word	0x636f4361
 801f414:	3fd287a7 	.word	0x3fd287a7
 801f418:	8b60c8b3 	.word	0x8b60c8b3
 801f41c:	3fc68a28 	.word	0x3fc68a28
 801f420:	509f79fb 	.word	0x509f79fb
 801f424:	3fd34413 	.word	0x3fd34413
 801f428:	0802565e 	.word	0x0802565e
 801f42c:	08025718 	.word	0x08025718
 801f430:	7ff00000 	.word	0x7ff00000
 801f434:	08025636 	.word	0x08025636
 801f438:	3ff80000 	.word	0x3ff80000
 801f43c:	08025810 	.word	0x08025810
 801f440:	08025770 	.word	0x08025770
 801f444:	08025714 	.word	0x08025714
 801f448:	08025635 	.word	0x08025635
 801f44c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f450:	6018      	str	r0, [r3, #0]
 801f452:	9b07      	ldr	r3, [sp, #28]
 801f454:	2b0e      	cmp	r3, #14
 801f456:	f200 80a4 	bhi.w	801f5a2 <_dtoa_r+0x442>
 801f45a:	2c00      	cmp	r4, #0
 801f45c:	f000 80a1 	beq.w	801f5a2 <_dtoa_r+0x442>
 801f460:	2f00      	cmp	r7, #0
 801f462:	dd33      	ble.n	801f4cc <_dtoa_r+0x36c>
 801f464:	4bad      	ldr	r3, [pc, #692]	@ (801f71c <_dtoa_r+0x5bc>)
 801f466:	f007 020f 	and.w	r2, r7, #15
 801f46a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f46e:	ed93 7b00 	vldr	d7, [r3]
 801f472:	05f8      	lsls	r0, r7, #23
 801f474:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f478:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f47c:	d516      	bpl.n	801f4ac <_dtoa_r+0x34c>
 801f47e:	4ba8      	ldr	r3, [pc, #672]	@ (801f720 <_dtoa_r+0x5c0>)
 801f480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f488:	f7e1 f9f8 	bl	800087c <__aeabi_ddiv>
 801f48c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f490:	f004 040f 	and.w	r4, r4, #15
 801f494:	2603      	movs	r6, #3
 801f496:	4da2      	ldr	r5, [pc, #648]	@ (801f720 <_dtoa_r+0x5c0>)
 801f498:	b954      	cbnz	r4, 801f4b0 <_dtoa_r+0x350>
 801f49a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f4a2:	f7e1 f9eb 	bl	800087c <__aeabi_ddiv>
 801f4a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f4aa:	e028      	b.n	801f4fe <_dtoa_r+0x39e>
 801f4ac:	2602      	movs	r6, #2
 801f4ae:	e7f2      	b.n	801f496 <_dtoa_r+0x336>
 801f4b0:	07e1      	lsls	r1, r4, #31
 801f4b2:	d508      	bpl.n	801f4c6 <_dtoa_r+0x366>
 801f4b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f4b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f4bc:	f7e1 f8b4 	bl	8000628 <__aeabi_dmul>
 801f4c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f4c4:	3601      	adds	r6, #1
 801f4c6:	1064      	asrs	r4, r4, #1
 801f4c8:	3508      	adds	r5, #8
 801f4ca:	e7e5      	b.n	801f498 <_dtoa_r+0x338>
 801f4cc:	f000 80d2 	beq.w	801f674 <_dtoa_r+0x514>
 801f4d0:	427c      	negs	r4, r7
 801f4d2:	4b92      	ldr	r3, [pc, #584]	@ (801f71c <_dtoa_r+0x5bc>)
 801f4d4:	4d92      	ldr	r5, [pc, #584]	@ (801f720 <_dtoa_r+0x5c0>)
 801f4d6:	f004 020f 	and.w	r2, r4, #15
 801f4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f4e6:	f7e1 f89f 	bl	8000628 <__aeabi_dmul>
 801f4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f4ee:	1124      	asrs	r4, r4, #4
 801f4f0:	2300      	movs	r3, #0
 801f4f2:	2602      	movs	r6, #2
 801f4f4:	2c00      	cmp	r4, #0
 801f4f6:	f040 80b2 	bne.w	801f65e <_dtoa_r+0x4fe>
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d1d3      	bne.n	801f4a6 <_dtoa_r+0x346>
 801f4fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f500:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f504:	2b00      	cmp	r3, #0
 801f506:	f000 80b7 	beq.w	801f678 <_dtoa_r+0x518>
 801f50a:	4b86      	ldr	r3, [pc, #536]	@ (801f724 <_dtoa_r+0x5c4>)
 801f50c:	2200      	movs	r2, #0
 801f50e:	4620      	mov	r0, r4
 801f510:	4629      	mov	r1, r5
 801f512:	f7e1 fafb 	bl	8000b0c <__aeabi_dcmplt>
 801f516:	2800      	cmp	r0, #0
 801f518:	f000 80ae 	beq.w	801f678 <_dtoa_r+0x518>
 801f51c:	9b07      	ldr	r3, [sp, #28]
 801f51e:	2b00      	cmp	r3, #0
 801f520:	f000 80aa 	beq.w	801f678 <_dtoa_r+0x518>
 801f524:	9b00      	ldr	r3, [sp, #0]
 801f526:	2b00      	cmp	r3, #0
 801f528:	dd37      	ble.n	801f59a <_dtoa_r+0x43a>
 801f52a:	1e7b      	subs	r3, r7, #1
 801f52c:	9304      	str	r3, [sp, #16]
 801f52e:	4620      	mov	r0, r4
 801f530:	4b7d      	ldr	r3, [pc, #500]	@ (801f728 <_dtoa_r+0x5c8>)
 801f532:	2200      	movs	r2, #0
 801f534:	4629      	mov	r1, r5
 801f536:	f7e1 f877 	bl	8000628 <__aeabi_dmul>
 801f53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f53e:	9c00      	ldr	r4, [sp, #0]
 801f540:	3601      	adds	r6, #1
 801f542:	4630      	mov	r0, r6
 801f544:	f7e1 f806 	bl	8000554 <__aeabi_i2d>
 801f548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f54c:	f7e1 f86c 	bl	8000628 <__aeabi_dmul>
 801f550:	4b76      	ldr	r3, [pc, #472]	@ (801f72c <_dtoa_r+0x5cc>)
 801f552:	2200      	movs	r2, #0
 801f554:	f7e0 feb2 	bl	80002bc <__adddf3>
 801f558:	4605      	mov	r5, r0
 801f55a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f55e:	2c00      	cmp	r4, #0
 801f560:	f040 808d 	bne.w	801f67e <_dtoa_r+0x51e>
 801f564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f568:	4b71      	ldr	r3, [pc, #452]	@ (801f730 <_dtoa_r+0x5d0>)
 801f56a:	2200      	movs	r2, #0
 801f56c:	f7e0 fea4 	bl	80002b8 <__aeabi_dsub>
 801f570:	4602      	mov	r2, r0
 801f572:	460b      	mov	r3, r1
 801f574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f578:	462a      	mov	r2, r5
 801f57a:	4633      	mov	r3, r6
 801f57c:	f7e1 fae4 	bl	8000b48 <__aeabi_dcmpgt>
 801f580:	2800      	cmp	r0, #0
 801f582:	f040 828b 	bne.w	801fa9c <_dtoa_r+0x93c>
 801f586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f58a:	462a      	mov	r2, r5
 801f58c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f590:	f7e1 fabc 	bl	8000b0c <__aeabi_dcmplt>
 801f594:	2800      	cmp	r0, #0
 801f596:	f040 8128 	bne.w	801f7ea <_dtoa_r+0x68a>
 801f59a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f59e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f5a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f5a4:	2b00      	cmp	r3, #0
 801f5a6:	f2c0 815a 	blt.w	801f85e <_dtoa_r+0x6fe>
 801f5aa:	2f0e      	cmp	r7, #14
 801f5ac:	f300 8157 	bgt.w	801f85e <_dtoa_r+0x6fe>
 801f5b0:	4b5a      	ldr	r3, [pc, #360]	@ (801f71c <_dtoa_r+0x5bc>)
 801f5b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f5b6:	ed93 7b00 	vldr	d7, [r3]
 801f5ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	ed8d 7b00 	vstr	d7, [sp]
 801f5c2:	da03      	bge.n	801f5cc <_dtoa_r+0x46c>
 801f5c4:	9b07      	ldr	r3, [sp, #28]
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	f340 8101 	ble.w	801f7ce <_dtoa_r+0x66e>
 801f5cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f5d0:	4656      	mov	r6, sl
 801f5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f5d6:	4620      	mov	r0, r4
 801f5d8:	4629      	mov	r1, r5
 801f5da:	f7e1 f94f 	bl	800087c <__aeabi_ddiv>
 801f5de:	f7e1 fad3 	bl	8000b88 <__aeabi_d2iz>
 801f5e2:	4680      	mov	r8, r0
 801f5e4:	f7e0 ffb6 	bl	8000554 <__aeabi_i2d>
 801f5e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f5ec:	f7e1 f81c 	bl	8000628 <__aeabi_dmul>
 801f5f0:	4602      	mov	r2, r0
 801f5f2:	460b      	mov	r3, r1
 801f5f4:	4620      	mov	r0, r4
 801f5f6:	4629      	mov	r1, r5
 801f5f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f5fc:	f7e0 fe5c 	bl	80002b8 <__aeabi_dsub>
 801f600:	f806 4b01 	strb.w	r4, [r6], #1
 801f604:	9d07      	ldr	r5, [sp, #28]
 801f606:	eba6 040a 	sub.w	r4, r6, sl
 801f60a:	42a5      	cmp	r5, r4
 801f60c:	4602      	mov	r2, r0
 801f60e:	460b      	mov	r3, r1
 801f610:	f040 8117 	bne.w	801f842 <_dtoa_r+0x6e2>
 801f614:	f7e0 fe52 	bl	80002bc <__adddf3>
 801f618:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f61c:	4604      	mov	r4, r0
 801f61e:	460d      	mov	r5, r1
 801f620:	f7e1 fa92 	bl	8000b48 <__aeabi_dcmpgt>
 801f624:	2800      	cmp	r0, #0
 801f626:	f040 80f9 	bne.w	801f81c <_dtoa_r+0x6bc>
 801f62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f62e:	4620      	mov	r0, r4
 801f630:	4629      	mov	r1, r5
 801f632:	f7e1 fa61 	bl	8000af8 <__aeabi_dcmpeq>
 801f636:	b118      	cbz	r0, 801f640 <_dtoa_r+0x4e0>
 801f638:	f018 0f01 	tst.w	r8, #1
 801f63c:	f040 80ee 	bne.w	801f81c <_dtoa_r+0x6bc>
 801f640:	4649      	mov	r1, r9
 801f642:	4658      	mov	r0, fp
 801f644:	f000 fbda 	bl	801fdfc <_Bfree>
 801f648:	2300      	movs	r3, #0
 801f64a:	7033      	strb	r3, [r6, #0]
 801f64c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f64e:	3701      	adds	r7, #1
 801f650:	601f      	str	r7, [r3, #0]
 801f652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f654:	2b00      	cmp	r3, #0
 801f656:	f000 831d 	beq.w	801fc94 <_dtoa_r+0xb34>
 801f65a:	601e      	str	r6, [r3, #0]
 801f65c:	e31a      	b.n	801fc94 <_dtoa_r+0xb34>
 801f65e:	07e2      	lsls	r2, r4, #31
 801f660:	d505      	bpl.n	801f66e <_dtoa_r+0x50e>
 801f662:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f666:	f7e0 ffdf 	bl	8000628 <__aeabi_dmul>
 801f66a:	3601      	adds	r6, #1
 801f66c:	2301      	movs	r3, #1
 801f66e:	1064      	asrs	r4, r4, #1
 801f670:	3508      	adds	r5, #8
 801f672:	e73f      	b.n	801f4f4 <_dtoa_r+0x394>
 801f674:	2602      	movs	r6, #2
 801f676:	e742      	b.n	801f4fe <_dtoa_r+0x39e>
 801f678:	9c07      	ldr	r4, [sp, #28]
 801f67a:	9704      	str	r7, [sp, #16]
 801f67c:	e761      	b.n	801f542 <_dtoa_r+0x3e2>
 801f67e:	4b27      	ldr	r3, [pc, #156]	@ (801f71c <_dtoa_r+0x5bc>)
 801f680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f686:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f68a:	4454      	add	r4, sl
 801f68c:	2900      	cmp	r1, #0
 801f68e:	d053      	beq.n	801f738 <_dtoa_r+0x5d8>
 801f690:	4928      	ldr	r1, [pc, #160]	@ (801f734 <_dtoa_r+0x5d4>)
 801f692:	2000      	movs	r0, #0
 801f694:	f7e1 f8f2 	bl	800087c <__aeabi_ddiv>
 801f698:	4633      	mov	r3, r6
 801f69a:	462a      	mov	r2, r5
 801f69c:	f7e0 fe0c 	bl	80002b8 <__aeabi_dsub>
 801f6a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f6a4:	4656      	mov	r6, sl
 801f6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6aa:	f7e1 fa6d 	bl	8000b88 <__aeabi_d2iz>
 801f6ae:	4605      	mov	r5, r0
 801f6b0:	f7e0 ff50 	bl	8000554 <__aeabi_i2d>
 801f6b4:	4602      	mov	r2, r0
 801f6b6:	460b      	mov	r3, r1
 801f6b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6bc:	f7e0 fdfc 	bl	80002b8 <__aeabi_dsub>
 801f6c0:	3530      	adds	r5, #48	@ 0x30
 801f6c2:	4602      	mov	r2, r0
 801f6c4:	460b      	mov	r3, r1
 801f6c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f6ca:	f806 5b01 	strb.w	r5, [r6], #1
 801f6ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f6d2:	f7e1 fa1b 	bl	8000b0c <__aeabi_dcmplt>
 801f6d6:	2800      	cmp	r0, #0
 801f6d8:	d171      	bne.n	801f7be <_dtoa_r+0x65e>
 801f6da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f6de:	4911      	ldr	r1, [pc, #68]	@ (801f724 <_dtoa_r+0x5c4>)
 801f6e0:	2000      	movs	r0, #0
 801f6e2:	f7e0 fde9 	bl	80002b8 <__aeabi_dsub>
 801f6e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f6ea:	f7e1 fa0f 	bl	8000b0c <__aeabi_dcmplt>
 801f6ee:	2800      	cmp	r0, #0
 801f6f0:	f040 8095 	bne.w	801f81e <_dtoa_r+0x6be>
 801f6f4:	42a6      	cmp	r6, r4
 801f6f6:	f43f af50 	beq.w	801f59a <_dtoa_r+0x43a>
 801f6fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f6fe:	4b0a      	ldr	r3, [pc, #40]	@ (801f728 <_dtoa_r+0x5c8>)
 801f700:	2200      	movs	r2, #0
 801f702:	f7e0 ff91 	bl	8000628 <__aeabi_dmul>
 801f706:	4b08      	ldr	r3, [pc, #32]	@ (801f728 <_dtoa_r+0x5c8>)
 801f708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f70c:	2200      	movs	r2, #0
 801f70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f712:	f7e0 ff89 	bl	8000628 <__aeabi_dmul>
 801f716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f71a:	e7c4      	b.n	801f6a6 <_dtoa_r+0x546>
 801f71c:	08025810 	.word	0x08025810
 801f720:	080257e8 	.word	0x080257e8
 801f724:	3ff00000 	.word	0x3ff00000
 801f728:	40240000 	.word	0x40240000
 801f72c:	401c0000 	.word	0x401c0000
 801f730:	40140000 	.word	0x40140000
 801f734:	3fe00000 	.word	0x3fe00000
 801f738:	4631      	mov	r1, r6
 801f73a:	4628      	mov	r0, r5
 801f73c:	f7e0 ff74 	bl	8000628 <__aeabi_dmul>
 801f740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f744:	9415      	str	r4, [sp, #84]	@ 0x54
 801f746:	4656      	mov	r6, sl
 801f748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f74c:	f7e1 fa1c 	bl	8000b88 <__aeabi_d2iz>
 801f750:	4605      	mov	r5, r0
 801f752:	f7e0 feff 	bl	8000554 <__aeabi_i2d>
 801f756:	4602      	mov	r2, r0
 801f758:	460b      	mov	r3, r1
 801f75a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f75e:	f7e0 fdab 	bl	80002b8 <__aeabi_dsub>
 801f762:	3530      	adds	r5, #48	@ 0x30
 801f764:	f806 5b01 	strb.w	r5, [r6], #1
 801f768:	4602      	mov	r2, r0
 801f76a:	460b      	mov	r3, r1
 801f76c:	42a6      	cmp	r6, r4
 801f76e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f772:	f04f 0200 	mov.w	r2, #0
 801f776:	d124      	bne.n	801f7c2 <_dtoa_r+0x662>
 801f778:	4bac      	ldr	r3, [pc, #688]	@ (801fa2c <_dtoa_r+0x8cc>)
 801f77a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f77e:	f7e0 fd9d 	bl	80002bc <__adddf3>
 801f782:	4602      	mov	r2, r0
 801f784:	460b      	mov	r3, r1
 801f786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f78a:	f7e1 f9dd 	bl	8000b48 <__aeabi_dcmpgt>
 801f78e:	2800      	cmp	r0, #0
 801f790:	d145      	bne.n	801f81e <_dtoa_r+0x6be>
 801f792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f796:	49a5      	ldr	r1, [pc, #660]	@ (801fa2c <_dtoa_r+0x8cc>)
 801f798:	2000      	movs	r0, #0
 801f79a:	f7e0 fd8d 	bl	80002b8 <__aeabi_dsub>
 801f79e:	4602      	mov	r2, r0
 801f7a0:	460b      	mov	r3, r1
 801f7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f7a6:	f7e1 f9b1 	bl	8000b0c <__aeabi_dcmplt>
 801f7aa:	2800      	cmp	r0, #0
 801f7ac:	f43f aef5 	beq.w	801f59a <_dtoa_r+0x43a>
 801f7b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f7b2:	1e73      	subs	r3, r6, #1
 801f7b4:	9315      	str	r3, [sp, #84]	@ 0x54
 801f7b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f7ba:	2b30      	cmp	r3, #48	@ 0x30
 801f7bc:	d0f8      	beq.n	801f7b0 <_dtoa_r+0x650>
 801f7be:	9f04      	ldr	r7, [sp, #16]
 801f7c0:	e73e      	b.n	801f640 <_dtoa_r+0x4e0>
 801f7c2:	4b9b      	ldr	r3, [pc, #620]	@ (801fa30 <_dtoa_r+0x8d0>)
 801f7c4:	f7e0 ff30 	bl	8000628 <__aeabi_dmul>
 801f7c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f7cc:	e7bc      	b.n	801f748 <_dtoa_r+0x5e8>
 801f7ce:	d10c      	bne.n	801f7ea <_dtoa_r+0x68a>
 801f7d0:	4b98      	ldr	r3, [pc, #608]	@ (801fa34 <_dtoa_r+0x8d4>)
 801f7d2:	2200      	movs	r2, #0
 801f7d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f7d8:	f7e0 ff26 	bl	8000628 <__aeabi_dmul>
 801f7dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f7e0:	f7e1 f9a8 	bl	8000b34 <__aeabi_dcmpge>
 801f7e4:	2800      	cmp	r0, #0
 801f7e6:	f000 8157 	beq.w	801fa98 <_dtoa_r+0x938>
 801f7ea:	2400      	movs	r4, #0
 801f7ec:	4625      	mov	r5, r4
 801f7ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7f0:	43db      	mvns	r3, r3
 801f7f2:	9304      	str	r3, [sp, #16]
 801f7f4:	4656      	mov	r6, sl
 801f7f6:	2700      	movs	r7, #0
 801f7f8:	4621      	mov	r1, r4
 801f7fa:	4658      	mov	r0, fp
 801f7fc:	f000 fafe 	bl	801fdfc <_Bfree>
 801f800:	2d00      	cmp	r5, #0
 801f802:	d0dc      	beq.n	801f7be <_dtoa_r+0x65e>
 801f804:	b12f      	cbz	r7, 801f812 <_dtoa_r+0x6b2>
 801f806:	42af      	cmp	r7, r5
 801f808:	d003      	beq.n	801f812 <_dtoa_r+0x6b2>
 801f80a:	4639      	mov	r1, r7
 801f80c:	4658      	mov	r0, fp
 801f80e:	f000 faf5 	bl	801fdfc <_Bfree>
 801f812:	4629      	mov	r1, r5
 801f814:	4658      	mov	r0, fp
 801f816:	f000 faf1 	bl	801fdfc <_Bfree>
 801f81a:	e7d0      	b.n	801f7be <_dtoa_r+0x65e>
 801f81c:	9704      	str	r7, [sp, #16]
 801f81e:	4633      	mov	r3, r6
 801f820:	461e      	mov	r6, r3
 801f822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f826:	2a39      	cmp	r2, #57	@ 0x39
 801f828:	d107      	bne.n	801f83a <_dtoa_r+0x6da>
 801f82a:	459a      	cmp	sl, r3
 801f82c:	d1f8      	bne.n	801f820 <_dtoa_r+0x6c0>
 801f82e:	9a04      	ldr	r2, [sp, #16]
 801f830:	3201      	adds	r2, #1
 801f832:	9204      	str	r2, [sp, #16]
 801f834:	2230      	movs	r2, #48	@ 0x30
 801f836:	f88a 2000 	strb.w	r2, [sl]
 801f83a:	781a      	ldrb	r2, [r3, #0]
 801f83c:	3201      	adds	r2, #1
 801f83e:	701a      	strb	r2, [r3, #0]
 801f840:	e7bd      	b.n	801f7be <_dtoa_r+0x65e>
 801f842:	4b7b      	ldr	r3, [pc, #492]	@ (801fa30 <_dtoa_r+0x8d0>)
 801f844:	2200      	movs	r2, #0
 801f846:	f7e0 feef 	bl	8000628 <__aeabi_dmul>
 801f84a:	2200      	movs	r2, #0
 801f84c:	2300      	movs	r3, #0
 801f84e:	4604      	mov	r4, r0
 801f850:	460d      	mov	r5, r1
 801f852:	f7e1 f951 	bl	8000af8 <__aeabi_dcmpeq>
 801f856:	2800      	cmp	r0, #0
 801f858:	f43f aebb 	beq.w	801f5d2 <_dtoa_r+0x472>
 801f85c:	e6f0      	b.n	801f640 <_dtoa_r+0x4e0>
 801f85e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f860:	2a00      	cmp	r2, #0
 801f862:	f000 80db 	beq.w	801fa1c <_dtoa_r+0x8bc>
 801f866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f868:	2a01      	cmp	r2, #1
 801f86a:	f300 80bf 	bgt.w	801f9ec <_dtoa_r+0x88c>
 801f86e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f870:	2a00      	cmp	r2, #0
 801f872:	f000 80b7 	beq.w	801f9e4 <_dtoa_r+0x884>
 801f876:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f87a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f87c:	4646      	mov	r6, r8
 801f87e:	9a08      	ldr	r2, [sp, #32]
 801f880:	2101      	movs	r1, #1
 801f882:	441a      	add	r2, r3
 801f884:	4658      	mov	r0, fp
 801f886:	4498      	add	r8, r3
 801f888:	9208      	str	r2, [sp, #32]
 801f88a:	f000 fbb5 	bl	801fff8 <__i2b>
 801f88e:	4605      	mov	r5, r0
 801f890:	b15e      	cbz	r6, 801f8aa <_dtoa_r+0x74a>
 801f892:	9b08      	ldr	r3, [sp, #32]
 801f894:	2b00      	cmp	r3, #0
 801f896:	dd08      	ble.n	801f8aa <_dtoa_r+0x74a>
 801f898:	42b3      	cmp	r3, r6
 801f89a:	9a08      	ldr	r2, [sp, #32]
 801f89c:	bfa8      	it	ge
 801f89e:	4633      	movge	r3, r6
 801f8a0:	eba8 0803 	sub.w	r8, r8, r3
 801f8a4:	1af6      	subs	r6, r6, r3
 801f8a6:	1ad3      	subs	r3, r2, r3
 801f8a8:	9308      	str	r3, [sp, #32]
 801f8aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f8ac:	b1f3      	cbz	r3, 801f8ec <_dtoa_r+0x78c>
 801f8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	f000 80b7 	beq.w	801fa24 <_dtoa_r+0x8c4>
 801f8b6:	b18c      	cbz	r4, 801f8dc <_dtoa_r+0x77c>
 801f8b8:	4629      	mov	r1, r5
 801f8ba:	4622      	mov	r2, r4
 801f8bc:	4658      	mov	r0, fp
 801f8be:	f000 fc5b 	bl	8020178 <__pow5mult>
 801f8c2:	464a      	mov	r2, r9
 801f8c4:	4601      	mov	r1, r0
 801f8c6:	4605      	mov	r5, r0
 801f8c8:	4658      	mov	r0, fp
 801f8ca:	f000 fbab 	bl	8020024 <__multiply>
 801f8ce:	4649      	mov	r1, r9
 801f8d0:	9004      	str	r0, [sp, #16]
 801f8d2:	4658      	mov	r0, fp
 801f8d4:	f000 fa92 	bl	801fdfc <_Bfree>
 801f8d8:	9b04      	ldr	r3, [sp, #16]
 801f8da:	4699      	mov	r9, r3
 801f8dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f8de:	1b1a      	subs	r2, r3, r4
 801f8e0:	d004      	beq.n	801f8ec <_dtoa_r+0x78c>
 801f8e2:	4649      	mov	r1, r9
 801f8e4:	4658      	mov	r0, fp
 801f8e6:	f000 fc47 	bl	8020178 <__pow5mult>
 801f8ea:	4681      	mov	r9, r0
 801f8ec:	2101      	movs	r1, #1
 801f8ee:	4658      	mov	r0, fp
 801f8f0:	f000 fb82 	bl	801fff8 <__i2b>
 801f8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8f6:	4604      	mov	r4, r0
 801f8f8:	2b00      	cmp	r3, #0
 801f8fa:	f000 81cf 	beq.w	801fc9c <_dtoa_r+0xb3c>
 801f8fe:	461a      	mov	r2, r3
 801f900:	4601      	mov	r1, r0
 801f902:	4658      	mov	r0, fp
 801f904:	f000 fc38 	bl	8020178 <__pow5mult>
 801f908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f90a:	2b01      	cmp	r3, #1
 801f90c:	4604      	mov	r4, r0
 801f90e:	f300 8095 	bgt.w	801fa3c <_dtoa_r+0x8dc>
 801f912:	9b02      	ldr	r3, [sp, #8]
 801f914:	2b00      	cmp	r3, #0
 801f916:	f040 8087 	bne.w	801fa28 <_dtoa_r+0x8c8>
 801f91a:	9b03      	ldr	r3, [sp, #12]
 801f91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f920:	2b00      	cmp	r3, #0
 801f922:	f040 8089 	bne.w	801fa38 <_dtoa_r+0x8d8>
 801f926:	9b03      	ldr	r3, [sp, #12]
 801f928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f92c:	0d1b      	lsrs	r3, r3, #20
 801f92e:	051b      	lsls	r3, r3, #20
 801f930:	b12b      	cbz	r3, 801f93e <_dtoa_r+0x7de>
 801f932:	9b08      	ldr	r3, [sp, #32]
 801f934:	3301      	adds	r3, #1
 801f936:	9308      	str	r3, [sp, #32]
 801f938:	f108 0801 	add.w	r8, r8, #1
 801f93c:	2301      	movs	r3, #1
 801f93e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f942:	2b00      	cmp	r3, #0
 801f944:	f000 81b0 	beq.w	801fca8 <_dtoa_r+0xb48>
 801f948:	6923      	ldr	r3, [r4, #16]
 801f94a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f94e:	6918      	ldr	r0, [r3, #16]
 801f950:	f000 fb06 	bl	801ff60 <__hi0bits>
 801f954:	f1c0 0020 	rsb	r0, r0, #32
 801f958:	9b08      	ldr	r3, [sp, #32]
 801f95a:	4418      	add	r0, r3
 801f95c:	f010 001f 	ands.w	r0, r0, #31
 801f960:	d077      	beq.n	801fa52 <_dtoa_r+0x8f2>
 801f962:	f1c0 0320 	rsb	r3, r0, #32
 801f966:	2b04      	cmp	r3, #4
 801f968:	dd6b      	ble.n	801fa42 <_dtoa_r+0x8e2>
 801f96a:	9b08      	ldr	r3, [sp, #32]
 801f96c:	f1c0 001c 	rsb	r0, r0, #28
 801f970:	4403      	add	r3, r0
 801f972:	4480      	add	r8, r0
 801f974:	4406      	add	r6, r0
 801f976:	9308      	str	r3, [sp, #32]
 801f978:	f1b8 0f00 	cmp.w	r8, #0
 801f97c:	dd05      	ble.n	801f98a <_dtoa_r+0x82a>
 801f97e:	4649      	mov	r1, r9
 801f980:	4642      	mov	r2, r8
 801f982:	4658      	mov	r0, fp
 801f984:	f000 fc52 	bl	802022c <__lshift>
 801f988:	4681      	mov	r9, r0
 801f98a:	9b08      	ldr	r3, [sp, #32]
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	dd05      	ble.n	801f99c <_dtoa_r+0x83c>
 801f990:	4621      	mov	r1, r4
 801f992:	461a      	mov	r2, r3
 801f994:	4658      	mov	r0, fp
 801f996:	f000 fc49 	bl	802022c <__lshift>
 801f99a:	4604      	mov	r4, r0
 801f99c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f99e:	2b00      	cmp	r3, #0
 801f9a0:	d059      	beq.n	801fa56 <_dtoa_r+0x8f6>
 801f9a2:	4621      	mov	r1, r4
 801f9a4:	4648      	mov	r0, r9
 801f9a6:	f000 fcad 	bl	8020304 <__mcmp>
 801f9aa:	2800      	cmp	r0, #0
 801f9ac:	da53      	bge.n	801fa56 <_dtoa_r+0x8f6>
 801f9ae:	1e7b      	subs	r3, r7, #1
 801f9b0:	9304      	str	r3, [sp, #16]
 801f9b2:	4649      	mov	r1, r9
 801f9b4:	2300      	movs	r3, #0
 801f9b6:	220a      	movs	r2, #10
 801f9b8:	4658      	mov	r0, fp
 801f9ba:	f000 fa41 	bl	801fe40 <__multadd>
 801f9be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9c0:	4681      	mov	r9, r0
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	f000 8172 	beq.w	801fcac <_dtoa_r+0xb4c>
 801f9c8:	2300      	movs	r3, #0
 801f9ca:	4629      	mov	r1, r5
 801f9cc:	220a      	movs	r2, #10
 801f9ce:	4658      	mov	r0, fp
 801f9d0:	f000 fa36 	bl	801fe40 <__multadd>
 801f9d4:	9b00      	ldr	r3, [sp, #0]
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	4605      	mov	r5, r0
 801f9da:	dc67      	bgt.n	801faac <_dtoa_r+0x94c>
 801f9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9de:	2b02      	cmp	r3, #2
 801f9e0:	dc41      	bgt.n	801fa66 <_dtoa_r+0x906>
 801f9e2:	e063      	b.n	801faac <_dtoa_r+0x94c>
 801f9e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f9e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f9ea:	e746      	b.n	801f87a <_dtoa_r+0x71a>
 801f9ec:	9b07      	ldr	r3, [sp, #28]
 801f9ee:	1e5c      	subs	r4, r3, #1
 801f9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9f2:	42a3      	cmp	r3, r4
 801f9f4:	bfbf      	itttt	lt
 801f9f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f9f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f9fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f9fc:	1ae3      	sublt	r3, r4, r3
 801f9fe:	bfb4      	ite	lt
 801fa00:	18d2      	addlt	r2, r2, r3
 801fa02:	1b1c      	subge	r4, r3, r4
 801fa04:	9b07      	ldr	r3, [sp, #28]
 801fa06:	bfbc      	itt	lt
 801fa08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801fa0a:	2400      	movlt	r4, #0
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	bfb5      	itete	lt
 801fa10:	eba8 0603 	sublt.w	r6, r8, r3
 801fa14:	9b07      	ldrge	r3, [sp, #28]
 801fa16:	2300      	movlt	r3, #0
 801fa18:	4646      	movge	r6, r8
 801fa1a:	e730      	b.n	801f87e <_dtoa_r+0x71e>
 801fa1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fa1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801fa20:	4646      	mov	r6, r8
 801fa22:	e735      	b.n	801f890 <_dtoa_r+0x730>
 801fa24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fa26:	e75c      	b.n	801f8e2 <_dtoa_r+0x782>
 801fa28:	2300      	movs	r3, #0
 801fa2a:	e788      	b.n	801f93e <_dtoa_r+0x7de>
 801fa2c:	3fe00000 	.word	0x3fe00000
 801fa30:	40240000 	.word	0x40240000
 801fa34:	40140000 	.word	0x40140000
 801fa38:	9b02      	ldr	r3, [sp, #8]
 801fa3a:	e780      	b.n	801f93e <_dtoa_r+0x7de>
 801fa3c:	2300      	movs	r3, #0
 801fa3e:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa40:	e782      	b.n	801f948 <_dtoa_r+0x7e8>
 801fa42:	d099      	beq.n	801f978 <_dtoa_r+0x818>
 801fa44:	9a08      	ldr	r2, [sp, #32]
 801fa46:	331c      	adds	r3, #28
 801fa48:	441a      	add	r2, r3
 801fa4a:	4498      	add	r8, r3
 801fa4c:	441e      	add	r6, r3
 801fa4e:	9208      	str	r2, [sp, #32]
 801fa50:	e792      	b.n	801f978 <_dtoa_r+0x818>
 801fa52:	4603      	mov	r3, r0
 801fa54:	e7f6      	b.n	801fa44 <_dtoa_r+0x8e4>
 801fa56:	9b07      	ldr	r3, [sp, #28]
 801fa58:	9704      	str	r7, [sp, #16]
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	dc20      	bgt.n	801faa0 <_dtoa_r+0x940>
 801fa5e:	9300      	str	r3, [sp, #0]
 801fa60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa62:	2b02      	cmp	r3, #2
 801fa64:	dd1e      	ble.n	801faa4 <_dtoa_r+0x944>
 801fa66:	9b00      	ldr	r3, [sp, #0]
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	f47f aec0 	bne.w	801f7ee <_dtoa_r+0x68e>
 801fa6e:	4621      	mov	r1, r4
 801fa70:	2205      	movs	r2, #5
 801fa72:	4658      	mov	r0, fp
 801fa74:	f000 f9e4 	bl	801fe40 <__multadd>
 801fa78:	4601      	mov	r1, r0
 801fa7a:	4604      	mov	r4, r0
 801fa7c:	4648      	mov	r0, r9
 801fa7e:	f000 fc41 	bl	8020304 <__mcmp>
 801fa82:	2800      	cmp	r0, #0
 801fa84:	f77f aeb3 	ble.w	801f7ee <_dtoa_r+0x68e>
 801fa88:	4656      	mov	r6, sl
 801fa8a:	2331      	movs	r3, #49	@ 0x31
 801fa8c:	f806 3b01 	strb.w	r3, [r6], #1
 801fa90:	9b04      	ldr	r3, [sp, #16]
 801fa92:	3301      	adds	r3, #1
 801fa94:	9304      	str	r3, [sp, #16]
 801fa96:	e6ae      	b.n	801f7f6 <_dtoa_r+0x696>
 801fa98:	9c07      	ldr	r4, [sp, #28]
 801fa9a:	9704      	str	r7, [sp, #16]
 801fa9c:	4625      	mov	r5, r4
 801fa9e:	e7f3      	b.n	801fa88 <_dtoa_r+0x928>
 801faa0:	9b07      	ldr	r3, [sp, #28]
 801faa2:	9300      	str	r3, [sp, #0]
 801faa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	f000 8104 	beq.w	801fcb4 <_dtoa_r+0xb54>
 801faac:	2e00      	cmp	r6, #0
 801faae:	dd05      	ble.n	801fabc <_dtoa_r+0x95c>
 801fab0:	4629      	mov	r1, r5
 801fab2:	4632      	mov	r2, r6
 801fab4:	4658      	mov	r0, fp
 801fab6:	f000 fbb9 	bl	802022c <__lshift>
 801faba:	4605      	mov	r5, r0
 801fabc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fabe:	2b00      	cmp	r3, #0
 801fac0:	d05a      	beq.n	801fb78 <_dtoa_r+0xa18>
 801fac2:	6869      	ldr	r1, [r5, #4]
 801fac4:	4658      	mov	r0, fp
 801fac6:	f000 f959 	bl	801fd7c <_Balloc>
 801faca:	4606      	mov	r6, r0
 801facc:	b928      	cbnz	r0, 801fada <_dtoa_r+0x97a>
 801face:	4b84      	ldr	r3, [pc, #528]	@ (801fce0 <_dtoa_r+0xb80>)
 801fad0:	4602      	mov	r2, r0
 801fad2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801fad6:	f7ff bb5a 	b.w	801f18e <_dtoa_r+0x2e>
 801fada:	692a      	ldr	r2, [r5, #16]
 801fadc:	3202      	adds	r2, #2
 801fade:	0092      	lsls	r2, r2, #2
 801fae0:	f105 010c 	add.w	r1, r5, #12
 801fae4:	300c      	adds	r0, #12
 801fae6:	f7ff fa7e 	bl	801efe6 <memcpy>
 801faea:	2201      	movs	r2, #1
 801faec:	4631      	mov	r1, r6
 801faee:	4658      	mov	r0, fp
 801faf0:	f000 fb9c 	bl	802022c <__lshift>
 801faf4:	f10a 0301 	add.w	r3, sl, #1
 801faf8:	9307      	str	r3, [sp, #28]
 801fafa:	9b00      	ldr	r3, [sp, #0]
 801fafc:	4453      	add	r3, sl
 801fafe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fb00:	9b02      	ldr	r3, [sp, #8]
 801fb02:	f003 0301 	and.w	r3, r3, #1
 801fb06:	462f      	mov	r7, r5
 801fb08:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb0a:	4605      	mov	r5, r0
 801fb0c:	9b07      	ldr	r3, [sp, #28]
 801fb0e:	4621      	mov	r1, r4
 801fb10:	3b01      	subs	r3, #1
 801fb12:	4648      	mov	r0, r9
 801fb14:	9300      	str	r3, [sp, #0]
 801fb16:	f7ff fa99 	bl	801f04c <quorem>
 801fb1a:	4639      	mov	r1, r7
 801fb1c:	9002      	str	r0, [sp, #8]
 801fb1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fb22:	4648      	mov	r0, r9
 801fb24:	f000 fbee 	bl	8020304 <__mcmp>
 801fb28:	462a      	mov	r2, r5
 801fb2a:	9008      	str	r0, [sp, #32]
 801fb2c:	4621      	mov	r1, r4
 801fb2e:	4658      	mov	r0, fp
 801fb30:	f000 fc04 	bl	802033c <__mdiff>
 801fb34:	68c2      	ldr	r2, [r0, #12]
 801fb36:	4606      	mov	r6, r0
 801fb38:	bb02      	cbnz	r2, 801fb7c <_dtoa_r+0xa1c>
 801fb3a:	4601      	mov	r1, r0
 801fb3c:	4648      	mov	r0, r9
 801fb3e:	f000 fbe1 	bl	8020304 <__mcmp>
 801fb42:	4602      	mov	r2, r0
 801fb44:	4631      	mov	r1, r6
 801fb46:	4658      	mov	r0, fp
 801fb48:	920e      	str	r2, [sp, #56]	@ 0x38
 801fb4a:	f000 f957 	bl	801fdfc <_Bfree>
 801fb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fb52:	9e07      	ldr	r6, [sp, #28]
 801fb54:	ea43 0102 	orr.w	r1, r3, r2
 801fb58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb5a:	4319      	orrs	r1, r3
 801fb5c:	d110      	bne.n	801fb80 <_dtoa_r+0xa20>
 801fb5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fb62:	d029      	beq.n	801fbb8 <_dtoa_r+0xa58>
 801fb64:	9b08      	ldr	r3, [sp, #32]
 801fb66:	2b00      	cmp	r3, #0
 801fb68:	dd02      	ble.n	801fb70 <_dtoa_r+0xa10>
 801fb6a:	9b02      	ldr	r3, [sp, #8]
 801fb6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801fb70:	9b00      	ldr	r3, [sp, #0]
 801fb72:	f883 8000 	strb.w	r8, [r3]
 801fb76:	e63f      	b.n	801f7f8 <_dtoa_r+0x698>
 801fb78:	4628      	mov	r0, r5
 801fb7a:	e7bb      	b.n	801faf4 <_dtoa_r+0x994>
 801fb7c:	2201      	movs	r2, #1
 801fb7e:	e7e1      	b.n	801fb44 <_dtoa_r+0x9e4>
 801fb80:	9b08      	ldr	r3, [sp, #32]
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	db04      	blt.n	801fb90 <_dtoa_r+0xa30>
 801fb86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fb88:	430b      	orrs	r3, r1
 801fb8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb8c:	430b      	orrs	r3, r1
 801fb8e:	d120      	bne.n	801fbd2 <_dtoa_r+0xa72>
 801fb90:	2a00      	cmp	r2, #0
 801fb92:	dded      	ble.n	801fb70 <_dtoa_r+0xa10>
 801fb94:	4649      	mov	r1, r9
 801fb96:	2201      	movs	r2, #1
 801fb98:	4658      	mov	r0, fp
 801fb9a:	f000 fb47 	bl	802022c <__lshift>
 801fb9e:	4621      	mov	r1, r4
 801fba0:	4681      	mov	r9, r0
 801fba2:	f000 fbaf 	bl	8020304 <__mcmp>
 801fba6:	2800      	cmp	r0, #0
 801fba8:	dc03      	bgt.n	801fbb2 <_dtoa_r+0xa52>
 801fbaa:	d1e1      	bne.n	801fb70 <_dtoa_r+0xa10>
 801fbac:	f018 0f01 	tst.w	r8, #1
 801fbb0:	d0de      	beq.n	801fb70 <_dtoa_r+0xa10>
 801fbb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fbb6:	d1d8      	bne.n	801fb6a <_dtoa_r+0xa0a>
 801fbb8:	9a00      	ldr	r2, [sp, #0]
 801fbba:	2339      	movs	r3, #57	@ 0x39
 801fbbc:	7013      	strb	r3, [r2, #0]
 801fbbe:	4633      	mov	r3, r6
 801fbc0:	461e      	mov	r6, r3
 801fbc2:	3b01      	subs	r3, #1
 801fbc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fbc8:	2a39      	cmp	r2, #57	@ 0x39
 801fbca:	d052      	beq.n	801fc72 <_dtoa_r+0xb12>
 801fbcc:	3201      	adds	r2, #1
 801fbce:	701a      	strb	r2, [r3, #0]
 801fbd0:	e612      	b.n	801f7f8 <_dtoa_r+0x698>
 801fbd2:	2a00      	cmp	r2, #0
 801fbd4:	dd07      	ble.n	801fbe6 <_dtoa_r+0xa86>
 801fbd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fbda:	d0ed      	beq.n	801fbb8 <_dtoa_r+0xa58>
 801fbdc:	9a00      	ldr	r2, [sp, #0]
 801fbde:	f108 0301 	add.w	r3, r8, #1
 801fbe2:	7013      	strb	r3, [r2, #0]
 801fbe4:	e608      	b.n	801f7f8 <_dtoa_r+0x698>
 801fbe6:	9b07      	ldr	r3, [sp, #28]
 801fbe8:	9a07      	ldr	r2, [sp, #28]
 801fbea:	f803 8c01 	strb.w	r8, [r3, #-1]
 801fbee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fbf0:	4293      	cmp	r3, r2
 801fbf2:	d028      	beq.n	801fc46 <_dtoa_r+0xae6>
 801fbf4:	4649      	mov	r1, r9
 801fbf6:	2300      	movs	r3, #0
 801fbf8:	220a      	movs	r2, #10
 801fbfa:	4658      	mov	r0, fp
 801fbfc:	f000 f920 	bl	801fe40 <__multadd>
 801fc00:	42af      	cmp	r7, r5
 801fc02:	4681      	mov	r9, r0
 801fc04:	f04f 0300 	mov.w	r3, #0
 801fc08:	f04f 020a 	mov.w	r2, #10
 801fc0c:	4639      	mov	r1, r7
 801fc0e:	4658      	mov	r0, fp
 801fc10:	d107      	bne.n	801fc22 <_dtoa_r+0xac2>
 801fc12:	f000 f915 	bl	801fe40 <__multadd>
 801fc16:	4607      	mov	r7, r0
 801fc18:	4605      	mov	r5, r0
 801fc1a:	9b07      	ldr	r3, [sp, #28]
 801fc1c:	3301      	adds	r3, #1
 801fc1e:	9307      	str	r3, [sp, #28]
 801fc20:	e774      	b.n	801fb0c <_dtoa_r+0x9ac>
 801fc22:	f000 f90d 	bl	801fe40 <__multadd>
 801fc26:	4629      	mov	r1, r5
 801fc28:	4607      	mov	r7, r0
 801fc2a:	2300      	movs	r3, #0
 801fc2c:	220a      	movs	r2, #10
 801fc2e:	4658      	mov	r0, fp
 801fc30:	f000 f906 	bl	801fe40 <__multadd>
 801fc34:	4605      	mov	r5, r0
 801fc36:	e7f0      	b.n	801fc1a <_dtoa_r+0xaba>
 801fc38:	9b00      	ldr	r3, [sp, #0]
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	bfcc      	ite	gt
 801fc3e:	461e      	movgt	r6, r3
 801fc40:	2601      	movle	r6, #1
 801fc42:	4456      	add	r6, sl
 801fc44:	2700      	movs	r7, #0
 801fc46:	4649      	mov	r1, r9
 801fc48:	2201      	movs	r2, #1
 801fc4a:	4658      	mov	r0, fp
 801fc4c:	f000 faee 	bl	802022c <__lshift>
 801fc50:	4621      	mov	r1, r4
 801fc52:	4681      	mov	r9, r0
 801fc54:	f000 fb56 	bl	8020304 <__mcmp>
 801fc58:	2800      	cmp	r0, #0
 801fc5a:	dcb0      	bgt.n	801fbbe <_dtoa_r+0xa5e>
 801fc5c:	d102      	bne.n	801fc64 <_dtoa_r+0xb04>
 801fc5e:	f018 0f01 	tst.w	r8, #1
 801fc62:	d1ac      	bne.n	801fbbe <_dtoa_r+0xa5e>
 801fc64:	4633      	mov	r3, r6
 801fc66:	461e      	mov	r6, r3
 801fc68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fc6c:	2a30      	cmp	r2, #48	@ 0x30
 801fc6e:	d0fa      	beq.n	801fc66 <_dtoa_r+0xb06>
 801fc70:	e5c2      	b.n	801f7f8 <_dtoa_r+0x698>
 801fc72:	459a      	cmp	sl, r3
 801fc74:	d1a4      	bne.n	801fbc0 <_dtoa_r+0xa60>
 801fc76:	9b04      	ldr	r3, [sp, #16]
 801fc78:	3301      	adds	r3, #1
 801fc7a:	9304      	str	r3, [sp, #16]
 801fc7c:	2331      	movs	r3, #49	@ 0x31
 801fc7e:	f88a 3000 	strb.w	r3, [sl]
 801fc82:	e5b9      	b.n	801f7f8 <_dtoa_r+0x698>
 801fc84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fc86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801fce4 <_dtoa_r+0xb84>
 801fc8a:	b11b      	cbz	r3, 801fc94 <_dtoa_r+0xb34>
 801fc8c:	f10a 0308 	add.w	r3, sl, #8
 801fc90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fc92:	6013      	str	r3, [r2, #0]
 801fc94:	4650      	mov	r0, sl
 801fc96:	b019      	add	sp, #100	@ 0x64
 801fc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc9e:	2b01      	cmp	r3, #1
 801fca0:	f77f ae37 	ble.w	801f912 <_dtoa_r+0x7b2>
 801fca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fca6:	930a      	str	r3, [sp, #40]	@ 0x28
 801fca8:	2001      	movs	r0, #1
 801fcaa:	e655      	b.n	801f958 <_dtoa_r+0x7f8>
 801fcac:	9b00      	ldr	r3, [sp, #0]
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	f77f aed6 	ble.w	801fa60 <_dtoa_r+0x900>
 801fcb4:	4656      	mov	r6, sl
 801fcb6:	4621      	mov	r1, r4
 801fcb8:	4648      	mov	r0, r9
 801fcba:	f7ff f9c7 	bl	801f04c <quorem>
 801fcbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fcc2:	f806 8b01 	strb.w	r8, [r6], #1
 801fcc6:	9b00      	ldr	r3, [sp, #0]
 801fcc8:	eba6 020a 	sub.w	r2, r6, sl
 801fccc:	4293      	cmp	r3, r2
 801fcce:	ddb3      	ble.n	801fc38 <_dtoa_r+0xad8>
 801fcd0:	4649      	mov	r1, r9
 801fcd2:	2300      	movs	r3, #0
 801fcd4:	220a      	movs	r2, #10
 801fcd6:	4658      	mov	r0, fp
 801fcd8:	f000 f8b2 	bl	801fe40 <__multadd>
 801fcdc:	4681      	mov	r9, r0
 801fcde:	e7ea      	b.n	801fcb6 <_dtoa_r+0xb56>
 801fce0:	08025770 	.word	0x08025770
 801fce4:	0802570b 	.word	0x0802570b

0801fce8 <_free_r>:
 801fce8:	b538      	push	{r3, r4, r5, lr}
 801fcea:	4605      	mov	r5, r0
 801fcec:	2900      	cmp	r1, #0
 801fcee:	d041      	beq.n	801fd74 <_free_r+0x8c>
 801fcf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fcf4:	1f0c      	subs	r4, r1, #4
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	bfb8      	it	lt
 801fcfa:	18e4      	addlt	r4, r4, r3
 801fcfc:	f7fd fe88 	bl	801da10 <__malloc_lock>
 801fd00:	4a1d      	ldr	r2, [pc, #116]	@ (801fd78 <_free_r+0x90>)
 801fd02:	6813      	ldr	r3, [r2, #0]
 801fd04:	b933      	cbnz	r3, 801fd14 <_free_r+0x2c>
 801fd06:	6063      	str	r3, [r4, #4]
 801fd08:	6014      	str	r4, [r2, #0]
 801fd0a:	4628      	mov	r0, r5
 801fd0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd10:	f7fd be84 	b.w	801da1c <__malloc_unlock>
 801fd14:	42a3      	cmp	r3, r4
 801fd16:	d908      	bls.n	801fd2a <_free_r+0x42>
 801fd18:	6820      	ldr	r0, [r4, #0]
 801fd1a:	1821      	adds	r1, r4, r0
 801fd1c:	428b      	cmp	r3, r1
 801fd1e:	bf01      	itttt	eq
 801fd20:	6819      	ldreq	r1, [r3, #0]
 801fd22:	685b      	ldreq	r3, [r3, #4]
 801fd24:	1809      	addeq	r1, r1, r0
 801fd26:	6021      	streq	r1, [r4, #0]
 801fd28:	e7ed      	b.n	801fd06 <_free_r+0x1e>
 801fd2a:	461a      	mov	r2, r3
 801fd2c:	685b      	ldr	r3, [r3, #4]
 801fd2e:	b10b      	cbz	r3, 801fd34 <_free_r+0x4c>
 801fd30:	42a3      	cmp	r3, r4
 801fd32:	d9fa      	bls.n	801fd2a <_free_r+0x42>
 801fd34:	6811      	ldr	r1, [r2, #0]
 801fd36:	1850      	adds	r0, r2, r1
 801fd38:	42a0      	cmp	r0, r4
 801fd3a:	d10b      	bne.n	801fd54 <_free_r+0x6c>
 801fd3c:	6820      	ldr	r0, [r4, #0]
 801fd3e:	4401      	add	r1, r0
 801fd40:	1850      	adds	r0, r2, r1
 801fd42:	4283      	cmp	r3, r0
 801fd44:	6011      	str	r1, [r2, #0]
 801fd46:	d1e0      	bne.n	801fd0a <_free_r+0x22>
 801fd48:	6818      	ldr	r0, [r3, #0]
 801fd4a:	685b      	ldr	r3, [r3, #4]
 801fd4c:	6053      	str	r3, [r2, #4]
 801fd4e:	4408      	add	r0, r1
 801fd50:	6010      	str	r0, [r2, #0]
 801fd52:	e7da      	b.n	801fd0a <_free_r+0x22>
 801fd54:	d902      	bls.n	801fd5c <_free_r+0x74>
 801fd56:	230c      	movs	r3, #12
 801fd58:	602b      	str	r3, [r5, #0]
 801fd5a:	e7d6      	b.n	801fd0a <_free_r+0x22>
 801fd5c:	6820      	ldr	r0, [r4, #0]
 801fd5e:	1821      	adds	r1, r4, r0
 801fd60:	428b      	cmp	r3, r1
 801fd62:	bf04      	itt	eq
 801fd64:	6819      	ldreq	r1, [r3, #0]
 801fd66:	685b      	ldreq	r3, [r3, #4]
 801fd68:	6063      	str	r3, [r4, #4]
 801fd6a:	bf04      	itt	eq
 801fd6c:	1809      	addeq	r1, r1, r0
 801fd6e:	6021      	streq	r1, [r4, #0]
 801fd70:	6054      	str	r4, [r2, #4]
 801fd72:	e7ca      	b.n	801fd0a <_free_r+0x22>
 801fd74:	bd38      	pop	{r3, r4, r5, pc}
 801fd76:	bf00      	nop
 801fd78:	20003668 	.word	0x20003668

0801fd7c <_Balloc>:
 801fd7c:	b570      	push	{r4, r5, r6, lr}
 801fd7e:	69c6      	ldr	r6, [r0, #28]
 801fd80:	4604      	mov	r4, r0
 801fd82:	460d      	mov	r5, r1
 801fd84:	b976      	cbnz	r6, 801fda4 <_Balloc+0x28>
 801fd86:	2010      	movs	r0, #16
 801fd88:	f7fd fd98 	bl	801d8bc <malloc>
 801fd8c:	4602      	mov	r2, r0
 801fd8e:	61e0      	str	r0, [r4, #28]
 801fd90:	b920      	cbnz	r0, 801fd9c <_Balloc+0x20>
 801fd92:	4b18      	ldr	r3, [pc, #96]	@ (801fdf4 <_Balloc+0x78>)
 801fd94:	4818      	ldr	r0, [pc, #96]	@ (801fdf8 <_Balloc+0x7c>)
 801fd96:	216b      	movs	r1, #107	@ 0x6b
 801fd98:	f7ff f93a 	bl	801f010 <__assert_func>
 801fd9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fda0:	6006      	str	r6, [r0, #0]
 801fda2:	60c6      	str	r6, [r0, #12]
 801fda4:	69e6      	ldr	r6, [r4, #28]
 801fda6:	68f3      	ldr	r3, [r6, #12]
 801fda8:	b183      	cbz	r3, 801fdcc <_Balloc+0x50>
 801fdaa:	69e3      	ldr	r3, [r4, #28]
 801fdac:	68db      	ldr	r3, [r3, #12]
 801fdae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fdb2:	b9b8      	cbnz	r0, 801fde4 <_Balloc+0x68>
 801fdb4:	2101      	movs	r1, #1
 801fdb6:	fa01 f605 	lsl.w	r6, r1, r5
 801fdba:	1d72      	adds	r2, r6, #5
 801fdbc:	0092      	lsls	r2, r2, #2
 801fdbe:	4620      	mov	r0, r4
 801fdc0:	f001 fe95 	bl	8021aee <_calloc_r>
 801fdc4:	b160      	cbz	r0, 801fde0 <_Balloc+0x64>
 801fdc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fdca:	e00e      	b.n	801fdea <_Balloc+0x6e>
 801fdcc:	2221      	movs	r2, #33	@ 0x21
 801fdce:	2104      	movs	r1, #4
 801fdd0:	4620      	mov	r0, r4
 801fdd2:	f001 fe8c 	bl	8021aee <_calloc_r>
 801fdd6:	69e3      	ldr	r3, [r4, #28]
 801fdd8:	60f0      	str	r0, [r6, #12]
 801fdda:	68db      	ldr	r3, [r3, #12]
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	d1e4      	bne.n	801fdaa <_Balloc+0x2e>
 801fde0:	2000      	movs	r0, #0
 801fde2:	bd70      	pop	{r4, r5, r6, pc}
 801fde4:	6802      	ldr	r2, [r0, #0]
 801fde6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fdea:	2300      	movs	r3, #0
 801fdec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fdf0:	e7f7      	b.n	801fde2 <_Balloc+0x66>
 801fdf2:	bf00      	nop
 801fdf4:	0802565e 	.word	0x0802565e
 801fdf8:	08025781 	.word	0x08025781

0801fdfc <_Bfree>:
 801fdfc:	b570      	push	{r4, r5, r6, lr}
 801fdfe:	69c6      	ldr	r6, [r0, #28]
 801fe00:	4605      	mov	r5, r0
 801fe02:	460c      	mov	r4, r1
 801fe04:	b976      	cbnz	r6, 801fe24 <_Bfree+0x28>
 801fe06:	2010      	movs	r0, #16
 801fe08:	f7fd fd58 	bl	801d8bc <malloc>
 801fe0c:	4602      	mov	r2, r0
 801fe0e:	61e8      	str	r0, [r5, #28]
 801fe10:	b920      	cbnz	r0, 801fe1c <_Bfree+0x20>
 801fe12:	4b09      	ldr	r3, [pc, #36]	@ (801fe38 <_Bfree+0x3c>)
 801fe14:	4809      	ldr	r0, [pc, #36]	@ (801fe3c <_Bfree+0x40>)
 801fe16:	218f      	movs	r1, #143	@ 0x8f
 801fe18:	f7ff f8fa 	bl	801f010 <__assert_func>
 801fe1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fe20:	6006      	str	r6, [r0, #0]
 801fe22:	60c6      	str	r6, [r0, #12]
 801fe24:	b13c      	cbz	r4, 801fe36 <_Bfree+0x3a>
 801fe26:	69eb      	ldr	r3, [r5, #28]
 801fe28:	6862      	ldr	r2, [r4, #4]
 801fe2a:	68db      	ldr	r3, [r3, #12]
 801fe2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fe30:	6021      	str	r1, [r4, #0]
 801fe32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fe36:	bd70      	pop	{r4, r5, r6, pc}
 801fe38:	0802565e 	.word	0x0802565e
 801fe3c:	08025781 	.word	0x08025781

0801fe40 <__multadd>:
 801fe40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe44:	690d      	ldr	r5, [r1, #16]
 801fe46:	4607      	mov	r7, r0
 801fe48:	460c      	mov	r4, r1
 801fe4a:	461e      	mov	r6, r3
 801fe4c:	f101 0c14 	add.w	ip, r1, #20
 801fe50:	2000      	movs	r0, #0
 801fe52:	f8dc 3000 	ldr.w	r3, [ip]
 801fe56:	b299      	uxth	r1, r3
 801fe58:	fb02 6101 	mla	r1, r2, r1, r6
 801fe5c:	0c1e      	lsrs	r6, r3, #16
 801fe5e:	0c0b      	lsrs	r3, r1, #16
 801fe60:	fb02 3306 	mla	r3, r2, r6, r3
 801fe64:	b289      	uxth	r1, r1
 801fe66:	3001      	adds	r0, #1
 801fe68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fe6c:	4285      	cmp	r5, r0
 801fe6e:	f84c 1b04 	str.w	r1, [ip], #4
 801fe72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fe76:	dcec      	bgt.n	801fe52 <__multadd+0x12>
 801fe78:	b30e      	cbz	r6, 801febe <__multadd+0x7e>
 801fe7a:	68a3      	ldr	r3, [r4, #8]
 801fe7c:	42ab      	cmp	r3, r5
 801fe7e:	dc19      	bgt.n	801feb4 <__multadd+0x74>
 801fe80:	6861      	ldr	r1, [r4, #4]
 801fe82:	4638      	mov	r0, r7
 801fe84:	3101      	adds	r1, #1
 801fe86:	f7ff ff79 	bl	801fd7c <_Balloc>
 801fe8a:	4680      	mov	r8, r0
 801fe8c:	b928      	cbnz	r0, 801fe9a <__multadd+0x5a>
 801fe8e:	4602      	mov	r2, r0
 801fe90:	4b0c      	ldr	r3, [pc, #48]	@ (801fec4 <__multadd+0x84>)
 801fe92:	480d      	ldr	r0, [pc, #52]	@ (801fec8 <__multadd+0x88>)
 801fe94:	21ba      	movs	r1, #186	@ 0xba
 801fe96:	f7ff f8bb 	bl	801f010 <__assert_func>
 801fe9a:	6922      	ldr	r2, [r4, #16]
 801fe9c:	3202      	adds	r2, #2
 801fe9e:	f104 010c 	add.w	r1, r4, #12
 801fea2:	0092      	lsls	r2, r2, #2
 801fea4:	300c      	adds	r0, #12
 801fea6:	f7ff f89e 	bl	801efe6 <memcpy>
 801feaa:	4621      	mov	r1, r4
 801feac:	4638      	mov	r0, r7
 801feae:	f7ff ffa5 	bl	801fdfc <_Bfree>
 801feb2:	4644      	mov	r4, r8
 801feb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801feb8:	3501      	adds	r5, #1
 801feba:	615e      	str	r6, [r3, #20]
 801febc:	6125      	str	r5, [r4, #16]
 801febe:	4620      	mov	r0, r4
 801fec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fec4:	08025770 	.word	0x08025770
 801fec8:	08025781 	.word	0x08025781

0801fecc <__s2b>:
 801fecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fed0:	460c      	mov	r4, r1
 801fed2:	4615      	mov	r5, r2
 801fed4:	461f      	mov	r7, r3
 801fed6:	2209      	movs	r2, #9
 801fed8:	3308      	adds	r3, #8
 801feda:	4606      	mov	r6, r0
 801fedc:	fb93 f3f2 	sdiv	r3, r3, r2
 801fee0:	2100      	movs	r1, #0
 801fee2:	2201      	movs	r2, #1
 801fee4:	429a      	cmp	r2, r3
 801fee6:	db09      	blt.n	801fefc <__s2b+0x30>
 801fee8:	4630      	mov	r0, r6
 801feea:	f7ff ff47 	bl	801fd7c <_Balloc>
 801feee:	b940      	cbnz	r0, 801ff02 <__s2b+0x36>
 801fef0:	4602      	mov	r2, r0
 801fef2:	4b19      	ldr	r3, [pc, #100]	@ (801ff58 <__s2b+0x8c>)
 801fef4:	4819      	ldr	r0, [pc, #100]	@ (801ff5c <__s2b+0x90>)
 801fef6:	21d3      	movs	r1, #211	@ 0xd3
 801fef8:	f7ff f88a 	bl	801f010 <__assert_func>
 801fefc:	0052      	lsls	r2, r2, #1
 801fefe:	3101      	adds	r1, #1
 801ff00:	e7f0      	b.n	801fee4 <__s2b+0x18>
 801ff02:	9b08      	ldr	r3, [sp, #32]
 801ff04:	6143      	str	r3, [r0, #20]
 801ff06:	2d09      	cmp	r5, #9
 801ff08:	f04f 0301 	mov.w	r3, #1
 801ff0c:	6103      	str	r3, [r0, #16]
 801ff0e:	dd16      	ble.n	801ff3e <__s2b+0x72>
 801ff10:	f104 0909 	add.w	r9, r4, #9
 801ff14:	46c8      	mov	r8, r9
 801ff16:	442c      	add	r4, r5
 801ff18:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ff1c:	4601      	mov	r1, r0
 801ff1e:	3b30      	subs	r3, #48	@ 0x30
 801ff20:	220a      	movs	r2, #10
 801ff22:	4630      	mov	r0, r6
 801ff24:	f7ff ff8c 	bl	801fe40 <__multadd>
 801ff28:	45a0      	cmp	r8, r4
 801ff2a:	d1f5      	bne.n	801ff18 <__s2b+0x4c>
 801ff2c:	f1a5 0408 	sub.w	r4, r5, #8
 801ff30:	444c      	add	r4, r9
 801ff32:	1b2d      	subs	r5, r5, r4
 801ff34:	1963      	adds	r3, r4, r5
 801ff36:	42bb      	cmp	r3, r7
 801ff38:	db04      	blt.n	801ff44 <__s2b+0x78>
 801ff3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff3e:	340a      	adds	r4, #10
 801ff40:	2509      	movs	r5, #9
 801ff42:	e7f6      	b.n	801ff32 <__s2b+0x66>
 801ff44:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ff48:	4601      	mov	r1, r0
 801ff4a:	3b30      	subs	r3, #48	@ 0x30
 801ff4c:	220a      	movs	r2, #10
 801ff4e:	4630      	mov	r0, r6
 801ff50:	f7ff ff76 	bl	801fe40 <__multadd>
 801ff54:	e7ee      	b.n	801ff34 <__s2b+0x68>
 801ff56:	bf00      	nop
 801ff58:	08025770 	.word	0x08025770
 801ff5c:	08025781 	.word	0x08025781

0801ff60 <__hi0bits>:
 801ff60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ff64:	4603      	mov	r3, r0
 801ff66:	bf36      	itet	cc
 801ff68:	0403      	lslcc	r3, r0, #16
 801ff6a:	2000      	movcs	r0, #0
 801ff6c:	2010      	movcc	r0, #16
 801ff6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ff72:	bf3c      	itt	cc
 801ff74:	021b      	lslcc	r3, r3, #8
 801ff76:	3008      	addcc	r0, #8
 801ff78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ff7c:	bf3c      	itt	cc
 801ff7e:	011b      	lslcc	r3, r3, #4
 801ff80:	3004      	addcc	r0, #4
 801ff82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ff86:	bf3c      	itt	cc
 801ff88:	009b      	lslcc	r3, r3, #2
 801ff8a:	3002      	addcc	r0, #2
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	db05      	blt.n	801ff9c <__hi0bits+0x3c>
 801ff90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ff94:	f100 0001 	add.w	r0, r0, #1
 801ff98:	bf08      	it	eq
 801ff9a:	2020      	moveq	r0, #32
 801ff9c:	4770      	bx	lr

0801ff9e <__lo0bits>:
 801ff9e:	6803      	ldr	r3, [r0, #0]
 801ffa0:	4602      	mov	r2, r0
 801ffa2:	f013 0007 	ands.w	r0, r3, #7
 801ffa6:	d00b      	beq.n	801ffc0 <__lo0bits+0x22>
 801ffa8:	07d9      	lsls	r1, r3, #31
 801ffaa:	d421      	bmi.n	801fff0 <__lo0bits+0x52>
 801ffac:	0798      	lsls	r0, r3, #30
 801ffae:	bf49      	itett	mi
 801ffb0:	085b      	lsrmi	r3, r3, #1
 801ffb2:	089b      	lsrpl	r3, r3, #2
 801ffb4:	2001      	movmi	r0, #1
 801ffb6:	6013      	strmi	r3, [r2, #0]
 801ffb8:	bf5c      	itt	pl
 801ffba:	6013      	strpl	r3, [r2, #0]
 801ffbc:	2002      	movpl	r0, #2
 801ffbe:	4770      	bx	lr
 801ffc0:	b299      	uxth	r1, r3
 801ffc2:	b909      	cbnz	r1, 801ffc8 <__lo0bits+0x2a>
 801ffc4:	0c1b      	lsrs	r3, r3, #16
 801ffc6:	2010      	movs	r0, #16
 801ffc8:	b2d9      	uxtb	r1, r3
 801ffca:	b909      	cbnz	r1, 801ffd0 <__lo0bits+0x32>
 801ffcc:	3008      	adds	r0, #8
 801ffce:	0a1b      	lsrs	r3, r3, #8
 801ffd0:	0719      	lsls	r1, r3, #28
 801ffd2:	bf04      	itt	eq
 801ffd4:	091b      	lsreq	r3, r3, #4
 801ffd6:	3004      	addeq	r0, #4
 801ffd8:	0799      	lsls	r1, r3, #30
 801ffda:	bf04      	itt	eq
 801ffdc:	089b      	lsreq	r3, r3, #2
 801ffde:	3002      	addeq	r0, #2
 801ffe0:	07d9      	lsls	r1, r3, #31
 801ffe2:	d403      	bmi.n	801ffec <__lo0bits+0x4e>
 801ffe4:	085b      	lsrs	r3, r3, #1
 801ffe6:	f100 0001 	add.w	r0, r0, #1
 801ffea:	d003      	beq.n	801fff4 <__lo0bits+0x56>
 801ffec:	6013      	str	r3, [r2, #0]
 801ffee:	4770      	bx	lr
 801fff0:	2000      	movs	r0, #0
 801fff2:	4770      	bx	lr
 801fff4:	2020      	movs	r0, #32
 801fff6:	4770      	bx	lr

0801fff8 <__i2b>:
 801fff8:	b510      	push	{r4, lr}
 801fffa:	460c      	mov	r4, r1
 801fffc:	2101      	movs	r1, #1
 801fffe:	f7ff febd 	bl	801fd7c <_Balloc>
 8020002:	4602      	mov	r2, r0
 8020004:	b928      	cbnz	r0, 8020012 <__i2b+0x1a>
 8020006:	4b05      	ldr	r3, [pc, #20]	@ (802001c <__i2b+0x24>)
 8020008:	4805      	ldr	r0, [pc, #20]	@ (8020020 <__i2b+0x28>)
 802000a:	f240 1145 	movw	r1, #325	@ 0x145
 802000e:	f7fe ffff 	bl	801f010 <__assert_func>
 8020012:	2301      	movs	r3, #1
 8020014:	6144      	str	r4, [r0, #20]
 8020016:	6103      	str	r3, [r0, #16]
 8020018:	bd10      	pop	{r4, pc}
 802001a:	bf00      	nop
 802001c:	08025770 	.word	0x08025770
 8020020:	08025781 	.word	0x08025781

08020024 <__multiply>:
 8020024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020028:	4614      	mov	r4, r2
 802002a:	690a      	ldr	r2, [r1, #16]
 802002c:	6923      	ldr	r3, [r4, #16]
 802002e:	429a      	cmp	r2, r3
 8020030:	bfa8      	it	ge
 8020032:	4623      	movge	r3, r4
 8020034:	460f      	mov	r7, r1
 8020036:	bfa4      	itt	ge
 8020038:	460c      	movge	r4, r1
 802003a:	461f      	movge	r7, r3
 802003c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8020040:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8020044:	68a3      	ldr	r3, [r4, #8]
 8020046:	6861      	ldr	r1, [r4, #4]
 8020048:	eb0a 0609 	add.w	r6, sl, r9
 802004c:	42b3      	cmp	r3, r6
 802004e:	b085      	sub	sp, #20
 8020050:	bfb8      	it	lt
 8020052:	3101      	addlt	r1, #1
 8020054:	f7ff fe92 	bl	801fd7c <_Balloc>
 8020058:	b930      	cbnz	r0, 8020068 <__multiply+0x44>
 802005a:	4602      	mov	r2, r0
 802005c:	4b44      	ldr	r3, [pc, #272]	@ (8020170 <__multiply+0x14c>)
 802005e:	4845      	ldr	r0, [pc, #276]	@ (8020174 <__multiply+0x150>)
 8020060:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8020064:	f7fe ffd4 	bl	801f010 <__assert_func>
 8020068:	f100 0514 	add.w	r5, r0, #20
 802006c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020070:	462b      	mov	r3, r5
 8020072:	2200      	movs	r2, #0
 8020074:	4543      	cmp	r3, r8
 8020076:	d321      	bcc.n	80200bc <__multiply+0x98>
 8020078:	f107 0114 	add.w	r1, r7, #20
 802007c:	f104 0214 	add.w	r2, r4, #20
 8020080:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8020084:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8020088:	9302      	str	r3, [sp, #8]
 802008a:	1b13      	subs	r3, r2, r4
 802008c:	3b15      	subs	r3, #21
 802008e:	f023 0303 	bic.w	r3, r3, #3
 8020092:	3304      	adds	r3, #4
 8020094:	f104 0715 	add.w	r7, r4, #21
 8020098:	42ba      	cmp	r2, r7
 802009a:	bf38      	it	cc
 802009c:	2304      	movcc	r3, #4
 802009e:	9301      	str	r3, [sp, #4]
 80200a0:	9b02      	ldr	r3, [sp, #8]
 80200a2:	9103      	str	r1, [sp, #12]
 80200a4:	428b      	cmp	r3, r1
 80200a6:	d80c      	bhi.n	80200c2 <__multiply+0x9e>
 80200a8:	2e00      	cmp	r6, #0
 80200aa:	dd03      	ble.n	80200b4 <__multiply+0x90>
 80200ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80200b0:	2b00      	cmp	r3, #0
 80200b2:	d05b      	beq.n	802016c <__multiply+0x148>
 80200b4:	6106      	str	r6, [r0, #16]
 80200b6:	b005      	add	sp, #20
 80200b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200bc:	f843 2b04 	str.w	r2, [r3], #4
 80200c0:	e7d8      	b.n	8020074 <__multiply+0x50>
 80200c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80200c6:	f1ba 0f00 	cmp.w	sl, #0
 80200ca:	d024      	beq.n	8020116 <__multiply+0xf2>
 80200cc:	f104 0e14 	add.w	lr, r4, #20
 80200d0:	46a9      	mov	r9, r5
 80200d2:	f04f 0c00 	mov.w	ip, #0
 80200d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80200da:	f8d9 3000 	ldr.w	r3, [r9]
 80200de:	fa1f fb87 	uxth.w	fp, r7
 80200e2:	b29b      	uxth	r3, r3
 80200e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80200e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80200ec:	f8d9 7000 	ldr.w	r7, [r9]
 80200f0:	4463      	add	r3, ip
 80200f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80200f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80200fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80200fe:	b29b      	uxth	r3, r3
 8020100:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020104:	4572      	cmp	r2, lr
 8020106:	f849 3b04 	str.w	r3, [r9], #4
 802010a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802010e:	d8e2      	bhi.n	80200d6 <__multiply+0xb2>
 8020110:	9b01      	ldr	r3, [sp, #4]
 8020112:	f845 c003 	str.w	ip, [r5, r3]
 8020116:	9b03      	ldr	r3, [sp, #12]
 8020118:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802011c:	3104      	adds	r1, #4
 802011e:	f1b9 0f00 	cmp.w	r9, #0
 8020122:	d021      	beq.n	8020168 <__multiply+0x144>
 8020124:	682b      	ldr	r3, [r5, #0]
 8020126:	f104 0c14 	add.w	ip, r4, #20
 802012a:	46ae      	mov	lr, r5
 802012c:	f04f 0a00 	mov.w	sl, #0
 8020130:	f8bc b000 	ldrh.w	fp, [ip]
 8020134:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8020138:	fb09 770b 	mla	r7, r9, fp, r7
 802013c:	4457      	add	r7, sl
 802013e:	b29b      	uxth	r3, r3
 8020140:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020144:	f84e 3b04 	str.w	r3, [lr], #4
 8020148:	f85c 3b04 	ldr.w	r3, [ip], #4
 802014c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020150:	f8be 3000 	ldrh.w	r3, [lr]
 8020154:	fb09 330a 	mla	r3, r9, sl, r3
 8020158:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802015c:	4562      	cmp	r2, ip
 802015e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020162:	d8e5      	bhi.n	8020130 <__multiply+0x10c>
 8020164:	9f01      	ldr	r7, [sp, #4]
 8020166:	51eb      	str	r3, [r5, r7]
 8020168:	3504      	adds	r5, #4
 802016a:	e799      	b.n	80200a0 <__multiply+0x7c>
 802016c:	3e01      	subs	r6, #1
 802016e:	e79b      	b.n	80200a8 <__multiply+0x84>
 8020170:	08025770 	.word	0x08025770
 8020174:	08025781 	.word	0x08025781

08020178 <__pow5mult>:
 8020178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802017c:	4615      	mov	r5, r2
 802017e:	f012 0203 	ands.w	r2, r2, #3
 8020182:	4607      	mov	r7, r0
 8020184:	460e      	mov	r6, r1
 8020186:	d007      	beq.n	8020198 <__pow5mult+0x20>
 8020188:	4c25      	ldr	r4, [pc, #148]	@ (8020220 <__pow5mult+0xa8>)
 802018a:	3a01      	subs	r2, #1
 802018c:	2300      	movs	r3, #0
 802018e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020192:	f7ff fe55 	bl	801fe40 <__multadd>
 8020196:	4606      	mov	r6, r0
 8020198:	10ad      	asrs	r5, r5, #2
 802019a:	d03d      	beq.n	8020218 <__pow5mult+0xa0>
 802019c:	69fc      	ldr	r4, [r7, #28]
 802019e:	b97c      	cbnz	r4, 80201c0 <__pow5mult+0x48>
 80201a0:	2010      	movs	r0, #16
 80201a2:	f7fd fb8b 	bl	801d8bc <malloc>
 80201a6:	4602      	mov	r2, r0
 80201a8:	61f8      	str	r0, [r7, #28]
 80201aa:	b928      	cbnz	r0, 80201b8 <__pow5mult+0x40>
 80201ac:	4b1d      	ldr	r3, [pc, #116]	@ (8020224 <__pow5mult+0xac>)
 80201ae:	481e      	ldr	r0, [pc, #120]	@ (8020228 <__pow5mult+0xb0>)
 80201b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80201b4:	f7fe ff2c 	bl	801f010 <__assert_func>
 80201b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80201bc:	6004      	str	r4, [r0, #0]
 80201be:	60c4      	str	r4, [r0, #12]
 80201c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80201c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80201c8:	b94c      	cbnz	r4, 80201de <__pow5mult+0x66>
 80201ca:	f240 2171 	movw	r1, #625	@ 0x271
 80201ce:	4638      	mov	r0, r7
 80201d0:	f7ff ff12 	bl	801fff8 <__i2b>
 80201d4:	2300      	movs	r3, #0
 80201d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80201da:	4604      	mov	r4, r0
 80201dc:	6003      	str	r3, [r0, #0]
 80201de:	f04f 0900 	mov.w	r9, #0
 80201e2:	07eb      	lsls	r3, r5, #31
 80201e4:	d50a      	bpl.n	80201fc <__pow5mult+0x84>
 80201e6:	4631      	mov	r1, r6
 80201e8:	4622      	mov	r2, r4
 80201ea:	4638      	mov	r0, r7
 80201ec:	f7ff ff1a 	bl	8020024 <__multiply>
 80201f0:	4631      	mov	r1, r6
 80201f2:	4680      	mov	r8, r0
 80201f4:	4638      	mov	r0, r7
 80201f6:	f7ff fe01 	bl	801fdfc <_Bfree>
 80201fa:	4646      	mov	r6, r8
 80201fc:	106d      	asrs	r5, r5, #1
 80201fe:	d00b      	beq.n	8020218 <__pow5mult+0xa0>
 8020200:	6820      	ldr	r0, [r4, #0]
 8020202:	b938      	cbnz	r0, 8020214 <__pow5mult+0x9c>
 8020204:	4622      	mov	r2, r4
 8020206:	4621      	mov	r1, r4
 8020208:	4638      	mov	r0, r7
 802020a:	f7ff ff0b 	bl	8020024 <__multiply>
 802020e:	6020      	str	r0, [r4, #0]
 8020210:	f8c0 9000 	str.w	r9, [r0]
 8020214:	4604      	mov	r4, r0
 8020216:	e7e4      	b.n	80201e2 <__pow5mult+0x6a>
 8020218:	4630      	mov	r0, r6
 802021a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802021e:	bf00      	nop
 8020220:	080257dc 	.word	0x080257dc
 8020224:	0802565e 	.word	0x0802565e
 8020228:	08025781 	.word	0x08025781

0802022c <__lshift>:
 802022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020230:	460c      	mov	r4, r1
 8020232:	6849      	ldr	r1, [r1, #4]
 8020234:	6923      	ldr	r3, [r4, #16]
 8020236:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802023a:	68a3      	ldr	r3, [r4, #8]
 802023c:	4607      	mov	r7, r0
 802023e:	4691      	mov	r9, r2
 8020240:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020244:	f108 0601 	add.w	r6, r8, #1
 8020248:	42b3      	cmp	r3, r6
 802024a:	db0b      	blt.n	8020264 <__lshift+0x38>
 802024c:	4638      	mov	r0, r7
 802024e:	f7ff fd95 	bl	801fd7c <_Balloc>
 8020252:	4605      	mov	r5, r0
 8020254:	b948      	cbnz	r0, 802026a <__lshift+0x3e>
 8020256:	4602      	mov	r2, r0
 8020258:	4b28      	ldr	r3, [pc, #160]	@ (80202fc <__lshift+0xd0>)
 802025a:	4829      	ldr	r0, [pc, #164]	@ (8020300 <__lshift+0xd4>)
 802025c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020260:	f7fe fed6 	bl	801f010 <__assert_func>
 8020264:	3101      	adds	r1, #1
 8020266:	005b      	lsls	r3, r3, #1
 8020268:	e7ee      	b.n	8020248 <__lshift+0x1c>
 802026a:	2300      	movs	r3, #0
 802026c:	f100 0114 	add.w	r1, r0, #20
 8020270:	f100 0210 	add.w	r2, r0, #16
 8020274:	4618      	mov	r0, r3
 8020276:	4553      	cmp	r3, sl
 8020278:	db33      	blt.n	80202e2 <__lshift+0xb6>
 802027a:	6920      	ldr	r0, [r4, #16]
 802027c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020280:	f104 0314 	add.w	r3, r4, #20
 8020284:	f019 091f 	ands.w	r9, r9, #31
 8020288:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802028c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020290:	d02b      	beq.n	80202ea <__lshift+0xbe>
 8020292:	f1c9 0e20 	rsb	lr, r9, #32
 8020296:	468a      	mov	sl, r1
 8020298:	2200      	movs	r2, #0
 802029a:	6818      	ldr	r0, [r3, #0]
 802029c:	fa00 f009 	lsl.w	r0, r0, r9
 80202a0:	4310      	orrs	r0, r2
 80202a2:	f84a 0b04 	str.w	r0, [sl], #4
 80202a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80202aa:	459c      	cmp	ip, r3
 80202ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80202b0:	d8f3      	bhi.n	802029a <__lshift+0x6e>
 80202b2:	ebac 0304 	sub.w	r3, ip, r4
 80202b6:	3b15      	subs	r3, #21
 80202b8:	f023 0303 	bic.w	r3, r3, #3
 80202bc:	3304      	adds	r3, #4
 80202be:	f104 0015 	add.w	r0, r4, #21
 80202c2:	4584      	cmp	ip, r0
 80202c4:	bf38      	it	cc
 80202c6:	2304      	movcc	r3, #4
 80202c8:	50ca      	str	r2, [r1, r3]
 80202ca:	b10a      	cbz	r2, 80202d0 <__lshift+0xa4>
 80202cc:	f108 0602 	add.w	r6, r8, #2
 80202d0:	3e01      	subs	r6, #1
 80202d2:	4638      	mov	r0, r7
 80202d4:	612e      	str	r6, [r5, #16]
 80202d6:	4621      	mov	r1, r4
 80202d8:	f7ff fd90 	bl	801fdfc <_Bfree>
 80202dc:	4628      	mov	r0, r5
 80202de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80202e6:	3301      	adds	r3, #1
 80202e8:	e7c5      	b.n	8020276 <__lshift+0x4a>
 80202ea:	3904      	subs	r1, #4
 80202ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80202f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80202f4:	459c      	cmp	ip, r3
 80202f6:	d8f9      	bhi.n	80202ec <__lshift+0xc0>
 80202f8:	e7ea      	b.n	80202d0 <__lshift+0xa4>
 80202fa:	bf00      	nop
 80202fc:	08025770 	.word	0x08025770
 8020300:	08025781 	.word	0x08025781

08020304 <__mcmp>:
 8020304:	690a      	ldr	r2, [r1, #16]
 8020306:	4603      	mov	r3, r0
 8020308:	6900      	ldr	r0, [r0, #16]
 802030a:	1a80      	subs	r0, r0, r2
 802030c:	b530      	push	{r4, r5, lr}
 802030e:	d10e      	bne.n	802032e <__mcmp+0x2a>
 8020310:	3314      	adds	r3, #20
 8020312:	3114      	adds	r1, #20
 8020314:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020318:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802031c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8020320:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8020324:	4295      	cmp	r5, r2
 8020326:	d003      	beq.n	8020330 <__mcmp+0x2c>
 8020328:	d205      	bcs.n	8020336 <__mcmp+0x32>
 802032a:	f04f 30ff 	mov.w	r0, #4294967295
 802032e:	bd30      	pop	{r4, r5, pc}
 8020330:	42a3      	cmp	r3, r4
 8020332:	d3f3      	bcc.n	802031c <__mcmp+0x18>
 8020334:	e7fb      	b.n	802032e <__mcmp+0x2a>
 8020336:	2001      	movs	r0, #1
 8020338:	e7f9      	b.n	802032e <__mcmp+0x2a>
	...

0802033c <__mdiff>:
 802033c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020340:	4689      	mov	r9, r1
 8020342:	4606      	mov	r6, r0
 8020344:	4611      	mov	r1, r2
 8020346:	4648      	mov	r0, r9
 8020348:	4614      	mov	r4, r2
 802034a:	f7ff ffdb 	bl	8020304 <__mcmp>
 802034e:	1e05      	subs	r5, r0, #0
 8020350:	d112      	bne.n	8020378 <__mdiff+0x3c>
 8020352:	4629      	mov	r1, r5
 8020354:	4630      	mov	r0, r6
 8020356:	f7ff fd11 	bl	801fd7c <_Balloc>
 802035a:	4602      	mov	r2, r0
 802035c:	b928      	cbnz	r0, 802036a <__mdiff+0x2e>
 802035e:	4b3f      	ldr	r3, [pc, #252]	@ (802045c <__mdiff+0x120>)
 8020360:	f240 2137 	movw	r1, #567	@ 0x237
 8020364:	483e      	ldr	r0, [pc, #248]	@ (8020460 <__mdiff+0x124>)
 8020366:	f7fe fe53 	bl	801f010 <__assert_func>
 802036a:	2301      	movs	r3, #1
 802036c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020370:	4610      	mov	r0, r2
 8020372:	b003      	add	sp, #12
 8020374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020378:	bfbc      	itt	lt
 802037a:	464b      	movlt	r3, r9
 802037c:	46a1      	movlt	r9, r4
 802037e:	4630      	mov	r0, r6
 8020380:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020384:	bfba      	itte	lt
 8020386:	461c      	movlt	r4, r3
 8020388:	2501      	movlt	r5, #1
 802038a:	2500      	movge	r5, #0
 802038c:	f7ff fcf6 	bl	801fd7c <_Balloc>
 8020390:	4602      	mov	r2, r0
 8020392:	b918      	cbnz	r0, 802039c <__mdiff+0x60>
 8020394:	4b31      	ldr	r3, [pc, #196]	@ (802045c <__mdiff+0x120>)
 8020396:	f240 2145 	movw	r1, #581	@ 0x245
 802039a:	e7e3      	b.n	8020364 <__mdiff+0x28>
 802039c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80203a0:	6926      	ldr	r6, [r4, #16]
 80203a2:	60c5      	str	r5, [r0, #12]
 80203a4:	f109 0310 	add.w	r3, r9, #16
 80203a8:	f109 0514 	add.w	r5, r9, #20
 80203ac:	f104 0e14 	add.w	lr, r4, #20
 80203b0:	f100 0b14 	add.w	fp, r0, #20
 80203b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80203b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80203bc:	9301      	str	r3, [sp, #4]
 80203be:	46d9      	mov	r9, fp
 80203c0:	f04f 0c00 	mov.w	ip, #0
 80203c4:	9b01      	ldr	r3, [sp, #4]
 80203c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80203ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80203ce:	9301      	str	r3, [sp, #4]
 80203d0:	fa1f f38a 	uxth.w	r3, sl
 80203d4:	4619      	mov	r1, r3
 80203d6:	b283      	uxth	r3, r0
 80203d8:	1acb      	subs	r3, r1, r3
 80203da:	0c00      	lsrs	r0, r0, #16
 80203dc:	4463      	add	r3, ip
 80203de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80203e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80203e6:	b29b      	uxth	r3, r3
 80203e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80203ec:	4576      	cmp	r6, lr
 80203ee:	f849 3b04 	str.w	r3, [r9], #4
 80203f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80203f6:	d8e5      	bhi.n	80203c4 <__mdiff+0x88>
 80203f8:	1b33      	subs	r3, r6, r4
 80203fa:	3b15      	subs	r3, #21
 80203fc:	f023 0303 	bic.w	r3, r3, #3
 8020400:	3415      	adds	r4, #21
 8020402:	3304      	adds	r3, #4
 8020404:	42a6      	cmp	r6, r4
 8020406:	bf38      	it	cc
 8020408:	2304      	movcc	r3, #4
 802040a:	441d      	add	r5, r3
 802040c:	445b      	add	r3, fp
 802040e:	461e      	mov	r6, r3
 8020410:	462c      	mov	r4, r5
 8020412:	4544      	cmp	r4, r8
 8020414:	d30e      	bcc.n	8020434 <__mdiff+0xf8>
 8020416:	f108 0103 	add.w	r1, r8, #3
 802041a:	1b49      	subs	r1, r1, r5
 802041c:	f021 0103 	bic.w	r1, r1, #3
 8020420:	3d03      	subs	r5, #3
 8020422:	45a8      	cmp	r8, r5
 8020424:	bf38      	it	cc
 8020426:	2100      	movcc	r1, #0
 8020428:	440b      	add	r3, r1
 802042a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802042e:	b191      	cbz	r1, 8020456 <__mdiff+0x11a>
 8020430:	6117      	str	r7, [r2, #16]
 8020432:	e79d      	b.n	8020370 <__mdiff+0x34>
 8020434:	f854 1b04 	ldr.w	r1, [r4], #4
 8020438:	46e6      	mov	lr, ip
 802043a:	0c08      	lsrs	r0, r1, #16
 802043c:	fa1c fc81 	uxtah	ip, ip, r1
 8020440:	4471      	add	r1, lr
 8020442:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8020446:	b289      	uxth	r1, r1
 8020448:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802044c:	f846 1b04 	str.w	r1, [r6], #4
 8020450:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020454:	e7dd      	b.n	8020412 <__mdiff+0xd6>
 8020456:	3f01      	subs	r7, #1
 8020458:	e7e7      	b.n	802042a <__mdiff+0xee>
 802045a:	bf00      	nop
 802045c:	08025770 	.word	0x08025770
 8020460:	08025781 	.word	0x08025781

08020464 <__ulp>:
 8020464:	b082      	sub	sp, #8
 8020466:	ed8d 0b00 	vstr	d0, [sp]
 802046a:	9a01      	ldr	r2, [sp, #4]
 802046c:	4b0f      	ldr	r3, [pc, #60]	@ (80204ac <__ulp+0x48>)
 802046e:	4013      	ands	r3, r2
 8020470:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8020474:	2b00      	cmp	r3, #0
 8020476:	dc08      	bgt.n	802048a <__ulp+0x26>
 8020478:	425b      	negs	r3, r3
 802047a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802047e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8020482:	da04      	bge.n	802048e <__ulp+0x2a>
 8020484:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8020488:	4113      	asrs	r3, r2
 802048a:	2200      	movs	r2, #0
 802048c:	e008      	b.n	80204a0 <__ulp+0x3c>
 802048e:	f1a2 0314 	sub.w	r3, r2, #20
 8020492:	2b1e      	cmp	r3, #30
 8020494:	bfda      	itte	le
 8020496:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802049a:	40da      	lsrle	r2, r3
 802049c:	2201      	movgt	r2, #1
 802049e:	2300      	movs	r3, #0
 80204a0:	4619      	mov	r1, r3
 80204a2:	4610      	mov	r0, r2
 80204a4:	ec41 0b10 	vmov	d0, r0, r1
 80204a8:	b002      	add	sp, #8
 80204aa:	4770      	bx	lr
 80204ac:	7ff00000 	.word	0x7ff00000

080204b0 <__b2d>:
 80204b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204b4:	6906      	ldr	r6, [r0, #16]
 80204b6:	f100 0814 	add.w	r8, r0, #20
 80204ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80204be:	1f37      	subs	r7, r6, #4
 80204c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80204c4:	4610      	mov	r0, r2
 80204c6:	f7ff fd4b 	bl	801ff60 <__hi0bits>
 80204ca:	f1c0 0320 	rsb	r3, r0, #32
 80204ce:	280a      	cmp	r0, #10
 80204d0:	600b      	str	r3, [r1, #0]
 80204d2:	491b      	ldr	r1, [pc, #108]	@ (8020540 <__b2d+0x90>)
 80204d4:	dc15      	bgt.n	8020502 <__b2d+0x52>
 80204d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80204da:	fa22 f30c 	lsr.w	r3, r2, ip
 80204de:	45b8      	cmp	r8, r7
 80204e0:	ea43 0501 	orr.w	r5, r3, r1
 80204e4:	bf34      	ite	cc
 80204e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80204ea:	2300      	movcs	r3, #0
 80204ec:	3015      	adds	r0, #21
 80204ee:	fa02 f000 	lsl.w	r0, r2, r0
 80204f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80204f6:	4303      	orrs	r3, r0
 80204f8:	461c      	mov	r4, r3
 80204fa:	ec45 4b10 	vmov	d0, r4, r5
 80204fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020502:	45b8      	cmp	r8, r7
 8020504:	bf3a      	itte	cc
 8020506:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802050a:	f1a6 0708 	subcc.w	r7, r6, #8
 802050e:	2300      	movcs	r3, #0
 8020510:	380b      	subs	r0, #11
 8020512:	d012      	beq.n	802053a <__b2d+0x8a>
 8020514:	f1c0 0120 	rsb	r1, r0, #32
 8020518:	fa23 f401 	lsr.w	r4, r3, r1
 802051c:	4082      	lsls	r2, r0
 802051e:	4322      	orrs	r2, r4
 8020520:	4547      	cmp	r7, r8
 8020522:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8020526:	bf8c      	ite	hi
 8020528:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802052c:	2200      	movls	r2, #0
 802052e:	4083      	lsls	r3, r0
 8020530:	40ca      	lsrs	r2, r1
 8020532:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8020536:	4313      	orrs	r3, r2
 8020538:	e7de      	b.n	80204f8 <__b2d+0x48>
 802053a:	ea42 0501 	orr.w	r5, r2, r1
 802053e:	e7db      	b.n	80204f8 <__b2d+0x48>
 8020540:	3ff00000 	.word	0x3ff00000

08020544 <__d2b>:
 8020544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020548:	460f      	mov	r7, r1
 802054a:	2101      	movs	r1, #1
 802054c:	ec59 8b10 	vmov	r8, r9, d0
 8020550:	4616      	mov	r6, r2
 8020552:	f7ff fc13 	bl	801fd7c <_Balloc>
 8020556:	4604      	mov	r4, r0
 8020558:	b930      	cbnz	r0, 8020568 <__d2b+0x24>
 802055a:	4602      	mov	r2, r0
 802055c:	4b23      	ldr	r3, [pc, #140]	@ (80205ec <__d2b+0xa8>)
 802055e:	4824      	ldr	r0, [pc, #144]	@ (80205f0 <__d2b+0xac>)
 8020560:	f240 310f 	movw	r1, #783	@ 0x30f
 8020564:	f7fe fd54 	bl	801f010 <__assert_func>
 8020568:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802056c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020570:	b10d      	cbz	r5, 8020576 <__d2b+0x32>
 8020572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020576:	9301      	str	r3, [sp, #4]
 8020578:	f1b8 0300 	subs.w	r3, r8, #0
 802057c:	d023      	beq.n	80205c6 <__d2b+0x82>
 802057e:	4668      	mov	r0, sp
 8020580:	9300      	str	r3, [sp, #0]
 8020582:	f7ff fd0c 	bl	801ff9e <__lo0bits>
 8020586:	e9dd 1200 	ldrd	r1, r2, [sp]
 802058a:	b1d0      	cbz	r0, 80205c2 <__d2b+0x7e>
 802058c:	f1c0 0320 	rsb	r3, r0, #32
 8020590:	fa02 f303 	lsl.w	r3, r2, r3
 8020594:	430b      	orrs	r3, r1
 8020596:	40c2      	lsrs	r2, r0
 8020598:	6163      	str	r3, [r4, #20]
 802059a:	9201      	str	r2, [sp, #4]
 802059c:	9b01      	ldr	r3, [sp, #4]
 802059e:	61a3      	str	r3, [r4, #24]
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	bf0c      	ite	eq
 80205a4:	2201      	moveq	r2, #1
 80205a6:	2202      	movne	r2, #2
 80205a8:	6122      	str	r2, [r4, #16]
 80205aa:	b1a5      	cbz	r5, 80205d6 <__d2b+0x92>
 80205ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80205b0:	4405      	add	r5, r0
 80205b2:	603d      	str	r5, [r7, #0]
 80205b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80205b8:	6030      	str	r0, [r6, #0]
 80205ba:	4620      	mov	r0, r4
 80205bc:	b003      	add	sp, #12
 80205be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80205c2:	6161      	str	r1, [r4, #20]
 80205c4:	e7ea      	b.n	802059c <__d2b+0x58>
 80205c6:	a801      	add	r0, sp, #4
 80205c8:	f7ff fce9 	bl	801ff9e <__lo0bits>
 80205cc:	9b01      	ldr	r3, [sp, #4]
 80205ce:	6163      	str	r3, [r4, #20]
 80205d0:	3020      	adds	r0, #32
 80205d2:	2201      	movs	r2, #1
 80205d4:	e7e8      	b.n	80205a8 <__d2b+0x64>
 80205d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80205da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80205de:	6038      	str	r0, [r7, #0]
 80205e0:	6918      	ldr	r0, [r3, #16]
 80205e2:	f7ff fcbd 	bl	801ff60 <__hi0bits>
 80205e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80205ea:	e7e5      	b.n	80205b8 <__d2b+0x74>
 80205ec:	08025770 	.word	0x08025770
 80205f0:	08025781 	.word	0x08025781

080205f4 <__ratio>:
 80205f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205f8:	b085      	sub	sp, #20
 80205fa:	e9cd 1000 	strd	r1, r0, [sp]
 80205fe:	a902      	add	r1, sp, #8
 8020600:	f7ff ff56 	bl	80204b0 <__b2d>
 8020604:	9800      	ldr	r0, [sp, #0]
 8020606:	a903      	add	r1, sp, #12
 8020608:	ec55 4b10 	vmov	r4, r5, d0
 802060c:	f7ff ff50 	bl	80204b0 <__b2d>
 8020610:	9b01      	ldr	r3, [sp, #4]
 8020612:	6919      	ldr	r1, [r3, #16]
 8020614:	9b00      	ldr	r3, [sp, #0]
 8020616:	691b      	ldr	r3, [r3, #16]
 8020618:	1ac9      	subs	r1, r1, r3
 802061a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802061e:	1a9b      	subs	r3, r3, r2
 8020620:	ec5b ab10 	vmov	sl, fp, d0
 8020624:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8020628:	2b00      	cmp	r3, #0
 802062a:	bfce      	itee	gt
 802062c:	462a      	movgt	r2, r5
 802062e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020632:	465a      	movle	r2, fp
 8020634:	462f      	mov	r7, r5
 8020636:	46d9      	mov	r9, fp
 8020638:	bfcc      	ite	gt
 802063a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802063e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8020642:	464b      	mov	r3, r9
 8020644:	4652      	mov	r2, sl
 8020646:	4620      	mov	r0, r4
 8020648:	4639      	mov	r1, r7
 802064a:	f7e0 f917 	bl	800087c <__aeabi_ddiv>
 802064e:	ec41 0b10 	vmov	d0, r0, r1
 8020652:	b005      	add	sp, #20
 8020654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020658 <__copybits>:
 8020658:	3901      	subs	r1, #1
 802065a:	b570      	push	{r4, r5, r6, lr}
 802065c:	1149      	asrs	r1, r1, #5
 802065e:	6914      	ldr	r4, [r2, #16]
 8020660:	3101      	adds	r1, #1
 8020662:	f102 0314 	add.w	r3, r2, #20
 8020666:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802066a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802066e:	1f05      	subs	r5, r0, #4
 8020670:	42a3      	cmp	r3, r4
 8020672:	d30c      	bcc.n	802068e <__copybits+0x36>
 8020674:	1aa3      	subs	r3, r4, r2
 8020676:	3b11      	subs	r3, #17
 8020678:	f023 0303 	bic.w	r3, r3, #3
 802067c:	3211      	adds	r2, #17
 802067e:	42a2      	cmp	r2, r4
 8020680:	bf88      	it	hi
 8020682:	2300      	movhi	r3, #0
 8020684:	4418      	add	r0, r3
 8020686:	2300      	movs	r3, #0
 8020688:	4288      	cmp	r0, r1
 802068a:	d305      	bcc.n	8020698 <__copybits+0x40>
 802068c:	bd70      	pop	{r4, r5, r6, pc}
 802068e:	f853 6b04 	ldr.w	r6, [r3], #4
 8020692:	f845 6f04 	str.w	r6, [r5, #4]!
 8020696:	e7eb      	b.n	8020670 <__copybits+0x18>
 8020698:	f840 3b04 	str.w	r3, [r0], #4
 802069c:	e7f4      	b.n	8020688 <__copybits+0x30>

0802069e <__any_on>:
 802069e:	f100 0214 	add.w	r2, r0, #20
 80206a2:	6900      	ldr	r0, [r0, #16]
 80206a4:	114b      	asrs	r3, r1, #5
 80206a6:	4298      	cmp	r0, r3
 80206a8:	b510      	push	{r4, lr}
 80206aa:	db11      	blt.n	80206d0 <__any_on+0x32>
 80206ac:	dd0a      	ble.n	80206c4 <__any_on+0x26>
 80206ae:	f011 011f 	ands.w	r1, r1, #31
 80206b2:	d007      	beq.n	80206c4 <__any_on+0x26>
 80206b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80206b8:	fa24 f001 	lsr.w	r0, r4, r1
 80206bc:	fa00 f101 	lsl.w	r1, r0, r1
 80206c0:	428c      	cmp	r4, r1
 80206c2:	d10b      	bne.n	80206dc <__any_on+0x3e>
 80206c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80206c8:	4293      	cmp	r3, r2
 80206ca:	d803      	bhi.n	80206d4 <__any_on+0x36>
 80206cc:	2000      	movs	r0, #0
 80206ce:	bd10      	pop	{r4, pc}
 80206d0:	4603      	mov	r3, r0
 80206d2:	e7f7      	b.n	80206c4 <__any_on+0x26>
 80206d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80206d8:	2900      	cmp	r1, #0
 80206da:	d0f5      	beq.n	80206c8 <__any_on+0x2a>
 80206dc:	2001      	movs	r0, #1
 80206de:	e7f6      	b.n	80206ce <__any_on+0x30>

080206e0 <sulp>:
 80206e0:	b570      	push	{r4, r5, r6, lr}
 80206e2:	4604      	mov	r4, r0
 80206e4:	460d      	mov	r5, r1
 80206e6:	ec45 4b10 	vmov	d0, r4, r5
 80206ea:	4616      	mov	r6, r2
 80206ec:	f7ff feba 	bl	8020464 <__ulp>
 80206f0:	ec51 0b10 	vmov	r0, r1, d0
 80206f4:	b17e      	cbz	r6, 8020716 <sulp+0x36>
 80206f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80206fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80206fe:	2b00      	cmp	r3, #0
 8020700:	dd09      	ble.n	8020716 <sulp+0x36>
 8020702:	051b      	lsls	r3, r3, #20
 8020704:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8020708:	2400      	movs	r4, #0
 802070a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 802070e:	4622      	mov	r2, r4
 8020710:	462b      	mov	r3, r5
 8020712:	f7df ff89 	bl	8000628 <__aeabi_dmul>
 8020716:	ec41 0b10 	vmov	d0, r0, r1
 802071a:	bd70      	pop	{r4, r5, r6, pc}
 802071c:	0000      	movs	r0, r0
	...

08020720 <_strtod_l>:
 8020720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020724:	b09f      	sub	sp, #124	@ 0x7c
 8020726:	460c      	mov	r4, r1
 8020728:	9217      	str	r2, [sp, #92]	@ 0x5c
 802072a:	2200      	movs	r2, #0
 802072c:	921a      	str	r2, [sp, #104]	@ 0x68
 802072e:	9005      	str	r0, [sp, #20]
 8020730:	f04f 0a00 	mov.w	sl, #0
 8020734:	f04f 0b00 	mov.w	fp, #0
 8020738:	460a      	mov	r2, r1
 802073a:	9219      	str	r2, [sp, #100]	@ 0x64
 802073c:	7811      	ldrb	r1, [r2, #0]
 802073e:	292b      	cmp	r1, #43	@ 0x2b
 8020740:	d04a      	beq.n	80207d8 <_strtod_l+0xb8>
 8020742:	d838      	bhi.n	80207b6 <_strtod_l+0x96>
 8020744:	290d      	cmp	r1, #13
 8020746:	d832      	bhi.n	80207ae <_strtod_l+0x8e>
 8020748:	2908      	cmp	r1, #8
 802074a:	d832      	bhi.n	80207b2 <_strtod_l+0x92>
 802074c:	2900      	cmp	r1, #0
 802074e:	d03b      	beq.n	80207c8 <_strtod_l+0xa8>
 8020750:	2200      	movs	r2, #0
 8020752:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020754:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8020756:	782a      	ldrb	r2, [r5, #0]
 8020758:	2a30      	cmp	r2, #48	@ 0x30
 802075a:	f040 80b3 	bne.w	80208c4 <_strtod_l+0x1a4>
 802075e:	786a      	ldrb	r2, [r5, #1]
 8020760:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8020764:	2a58      	cmp	r2, #88	@ 0x58
 8020766:	d16e      	bne.n	8020846 <_strtod_l+0x126>
 8020768:	9302      	str	r3, [sp, #8]
 802076a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802076c:	9301      	str	r3, [sp, #4]
 802076e:	ab1a      	add	r3, sp, #104	@ 0x68
 8020770:	9300      	str	r3, [sp, #0]
 8020772:	4a8e      	ldr	r2, [pc, #568]	@ (80209ac <_strtod_l+0x28c>)
 8020774:	9805      	ldr	r0, [sp, #20]
 8020776:	ab1b      	add	r3, sp, #108	@ 0x6c
 8020778:	a919      	add	r1, sp, #100	@ 0x64
 802077a:	f001 fa33 	bl	8021be4 <__gethex>
 802077e:	f010 060f 	ands.w	r6, r0, #15
 8020782:	4604      	mov	r4, r0
 8020784:	d005      	beq.n	8020792 <_strtod_l+0x72>
 8020786:	2e06      	cmp	r6, #6
 8020788:	d128      	bne.n	80207dc <_strtod_l+0xbc>
 802078a:	3501      	adds	r5, #1
 802078c:	2300      	movs	r3, #0
 802078e:	9519      	str	r5, [sp, #100]	@ 0x64
 8020790:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020792:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020794:	2b00      	cmp	r3, #0
 8020796:	f040 858e 	bne.w	80212b6 <_strtod_l+0xb96>
 802079a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802079c:	b1cb      	cbz	r3, 80207d2 <_strtod_l+0xb2>
 802079e:	4652      	mov	r2, sl
 80207a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80207a4:	ec43 2b10 	vmov	d0, r2, r3
 80207a8:	b01f      	add	sp, #124	@ 0x7c
 80207aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207ae:	2920      	cmp	r1, #32
 80207b0:	d1ce      	bne.n	8020750 <_strtod_l+0x30>
 80207b2:	3201      	adds	r2, #1
 80207b4:	e7c1      	b.n	802073a <_strtod_l+0x1a>
 80207b6:	292d      	cmp	r1, #45	@ 0x2d
 80207b8:	d1ca      	bne.n	8020750 <_strtod_l+0x30>
 80207ba:	2101      	movs	r1, #1
 80207bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80207be:	1c51      	adds	r1, r2, #1
 80207c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80207c2:	7852      	ldrb	r2, [r2, #1]
 80207c4:	2a00      	cmp	r2, #0
 80207c6:	d1c5      	bne.n	8020754 <_strtod_l+0x34>
 80207c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80207ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80207cc:	2b00      	cmp	r3, #0
 80207ce:	f040 8570 	bne.w	80212b2 <_strtod_l+0xb92>
 80207d2:	4652      	mov	r2, sl
 80207d4:	465b      	mov	r3, fp
 80207d6:	e7e5      	b.n	80207a4 <_strtod_l+0x84>
 80207d8:	2100      	movs	r1, #0
 80207da:	e7ef      	b.n	80207bc <_strtod_l+0x9c>
 80207dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80207de:	b13a      	cbz	r2, 80207f0 <_strtod_l+0xd0>
 80207e0:	2135      	movs	r1, #53	@ 0x35
 80207e2:	a81c      	add	r0, sp, #112	@ 0x70
 80207e4:	f7ff ff38 	bl	8020658 <__copybits>
 80207e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80207ea:	9805      	ldr	r0, [sp, #20]
 80207ec:	f7ff fb06 	bl	801fdfc <_Bfree>
 80207f0:	3e01      	subs	r6, #1
 80207f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80207f4:	2e04      	cmp	r6, #4
 80207f6:	d806      	bhi.n	8020806 <_strtod_l+0xe6>
 80207f8:	e8df f006 	tbb	[pc, r6]
 80207fc:	201d0314 	.word	0x201d0314
 8020800:	14          	.byte	0x14
 8020801:	00          	.byte	0x00
 8020802:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8020806:	05e1      	lsls	r1, r4, #23
 8020808:	bf48      	it	mi
 802080a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802080e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020812:	0d1b      	lsrs	r3, r3, #20
 8020814:	051b      	lsls	r3, r3, #20
 8020816:	2b00      	cmp	r3, #0
 8020818:	d1bb      	bne.n	8020792 <_strtod_l+0x72>
 802081a:	f7fe fbaf 	bl	801ef7c <__errno>
 802081e:	2322      	movs	r3, #34	@ 0x22
 8020820:	6003      	str	r3, [r0, #0]
 8020822:	e7b6      	b.n	8020792 <_strtod_l+0x72>
 8020824:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8020828:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802082c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8020830:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8020834:	e7e7      	b.n	8020806 <_strtod_l+0xe6>
 8020836:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80209b4 <_strtod_l+0x294>
 802083a:	e7e4      	b.n	8020806 <_strtod_l+0xe6>
 802083c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8020840:	f04f 3aff 	mov.w	sl, #4294967295
 8020844:	e7df      	b.n	8020806 <_strtod_l+0xe6>
 8020846:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020848:	1c5a      	adds	r2, r3, #1
 802084a:	9219      	str	r2, [sp, #100]	@ 0x64
 802084c:	785b      	ldrb	r3, [r3, #1]
 802084e:	2b30      	cmp	r3, #48	@ 0x30
 8020850:	d0f9      	beq.n	8020846 <_strtod_l+0x126>
 8020852:	2b00      	cmp	r3, #0
 8020854:	d09d      	beq.n	8020792 <_strtod_l+0x72>
 8020856:	2301      	movs	r3, #1
 8020858:	9309      	str	r3, [sp, #36]	@ 0x24
 802085a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802085c:	930c      	str	r3, [sp, #48]	@ 0x30
 802085e:	2300      	movs	r3, #0
 8020860:	9308      	str	r3, [sp, #32]
 8020862:	930a      	str	r3, [sp, #40]	@ 0x28
 8020864:	461f      	mov	r7, r3
 8020866:	220a      	movs	r2, #10
 8020868:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802086a:	7805      	ldrb	r5, [r0, #0]
 802086c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8020870:	b2d9      	uxtb	r1, r3
 8020872:	2909      	cmp	r1, #9
 8020874:	d928      	bls.n	80208c8 <_strtod_l+0x1a8>
 8020876:	494e      	ldr	r1, [pc, #312]	@ (80209b0 <_strtod_l+0x290>)
 8020878:	2201      	movs	r2, #1
 802087a:	f001 f8f5 	bl	8021a68 <strncmp>
 802087e:	2800      	cmp	r0, #0
 8020880:	d032      	beq.n	80208e8 <_strtod_l+0x1c8>
 8020882:	2000      	movs	r0, #0
 8020884:	462a      	mov	r2, r5
 8020886:	4681      	mov	r9, r0
 8020888:	463d      	mov	r5, r7
 802088a:	4603      	mov	r3, r0
 802088c:	2a65      	cmp	r2, #101	@ 0x65
 802088e:	d001      	beq.n	8020894 <_strtod_l+0x174>
 8020890:	2a45      	cmp	r2, #69	@ 0x45
 8020892:	d114      	bne.n	80208be <_strtod_l+0x19e>
 8020894:	b91d      	cbnz	r5, 802089e <_strtod_l+0x17e>
 8020896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020898:	4302      	orrs	r2, r0
 802089a:	d095      	beq.n	80207c8 <_strtod_l+0xa8>
 802089c:	2500      	movs	r5, #0
 802089e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80208a0:	1c62      	adds	r2, r4, #1
 80208a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80208a4:	7862      	ldrb	r2, [r4, #1]
 80208a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80208a8:	d077      	beq.n	802099a <_strtod_l+0x27a>
 80208aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80208ac:	d07b      	beq.n	80209a6 <_strtod_l+0x286>
 80208ae:	f04f 0c00 	mov.w	ip, #0
 80208b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80208b6:	2909      	cmp	r1, #9
 80208b8:	f240 8082 	bls.w	80209c0 <_strtod_l+0x2a0>
 80208bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80208be:	f04f 0800 	mov.w	r8, #0
 80208c2:	e0a2      	b.n	8020a0a <_strtod_l+0x2ea>
 80208c4:	2300      	movs	r3, #0
 80208c6:	e7c7      	b.n	8020858 <_strtod_l+0x138>
 80208c8:	2f08      	cmp	r7, #8
 80208ca:	bfd5      	itete	le
 80208cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80208ce:	9908      	ldrgt	r1, [sp, #32]
 80208d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80208d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80208d8:	f100 0001 	add.w	r0, r0, #1
 80208dc:	bfd4      	ite	le
 80208de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80208e0:	9308      	strgt	r3, [sp, #32]
 80208e2:	3701      	adds	r7, #1
 80208e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80208e6:	e7bf      	b.n	8020868 <_strtod_l+0x148>
 80208e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80208ea:	1c5a      	adds	r2, r3, #1
 80208ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80208ee:	785a      	ldrb	r2, [r3, #1]
 80208f0:	b37f      	cbz	r7, 8020952 <_strtod_l+0x232>
 80208f2:	4681      	mov	r9, r0
 80208f4:	463d      	mov	r5, r7
 80208f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80208fa:	2b09      	cmp	r3, #9
 80208fc:	d912      	bls.n	8020924 <_strtod_l+0x204>
 80208fe:	2301      	movs	r3, #1
 8020900:	e7c4      	b.n	802088c <_strtod_l+0x16c>
 8020902:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020904:	1c5a      	adds	r2, r3, #1
 8020906:	9219      	str	r2, [sp, #100]	@ 0x64
 8020908:	785a      	ldrb	r2, [r3, #1]
 802090a:	3001      	adds	r0, #1
 802090c:	2a30      	cmp	r2, #48	@ 0x30
 802090e:	d0f8      	beq.n	8020902 <_strtod_l+0x1e2>
 8020910:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8020914:	2b08      	cmp	r3, #8
 8020916:	f200 84d3 	bhi.w	80212c0 <_strtod_l+0xba0>
 802091a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802091c:	930c      	str	r3, [sp, #48]	@ 0x30
 802091e:	4681      	mov	r9, r0
 8020920:	2000      	movs	r0, #0
 8020922:	4605      	mov	r5, r0
 8020924:	3a30      	subs	r2, #48	@ 0x30
 8020926:	f100 0301 	add.w	r3, r0, #1
 802092a:	d02a      	beq.n	8020982 <_strtod_l+0x262>
 802092c:	4499      	add	r9, r3
 802092e:	eb00 0c05 	add.w	ip, r0, r5
 8020932:	462b      	mov	r3, r5
 8020934:	210a      	movs	r1, #10
 8020936:	4563      	cmp	r3, ip
 8020938:	d10d      	bne.n	8020956 <_strtod_l+0x236>
 802093a:	1c69      	adds	r1, r5, #1
 802093c:	4401      	add	r1, r0
 802093e:	4428      	add	r0, r5
 8020940:	2808      	cmp	r0, #8
 8020942:	dc16      	bgt.n	8020972 <_strtod_l+0x252>
 8020944:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020946:	230a      	movs	r3, #10
 8020948:	fb03 2300 	mla	r3, r3, r0, r2
 802094c:	930a      	str	r3, [sp, #40]	@ 0x28
 802094e:	2300      	movs	r3, #0
 8020950:	e018      	b.n	8020984 <_strtod_l+0x264>
 8020952:	4638      	mov	r0, r7
 8020954:	e7da      	b.n	802090c <_strtod_l+0x1ec>
 8020956:	2b08      	cmp	r3, #8
 8020958:	f103 0301 	add.w	r3, r3, #1
 802095c:	dc03      	bgt.n	8020966 <_strtod_l+0x246>
 802095e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020960:	434e      	muls	r6, r1
 8020962:	960a      	str	r6, [sp, #40]	@ 0x28
 8020964:	e7e7      	b.n	8020936 <_strtod_l+0x216>
 8020966:	2b10      	cmp	r3, #16
 8020968:	bfde      	ittt	le
 802096a:	9e08      	ldrle	r6, [sp, #32]
 802096c:	434e      	mulle	r6, r1
 802096e:	9608      	strle	r6, [sp, #32]
 8020970:	e7e1      	b.n	8020936 <_strtod_l+0x216>
 8020972:	280f      	cmp	r0, #15
 8020974:	dceb      	bgt.n	802094e <_strtod_l+0x22e>
 8020976:	9808      	ldr	r0, [sp, #32]
 8020978:	230a      	movs	r3, #10
 802097a:	fb03 2300 	mla	r3, r3, r0, r2
 802097e:	9308      	str	r3, [sp, #32]
 8020980:	e7e5      	b.n	802094e <_strtod_l+0x22e>
 8020982:	4629      	mov	r1, r5
 8020984:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020986:	1c50      	adds	r0, r2, #1
 8020988:	9019      	str	r0, [sp, #100]	@ 0x64
 802098a:	7852      	ldrb	r2, [r2, #1]
 802098c:	4618      	mov	r0, r3
 802098e:	460d      	mov	r5, r1
 8020990:	e7b1      	b.n	80208f6 <_strtod_l+0x1d6>
 8020992:	f04f 0900 	mov.w	r9, #0
 8020996:	2301      	movs	r3, #1
 8020998:	e77d      	b.n	8020896 <_strtod_l+0x176>
 802099a:	f04f 0c00 	mov.w	ip, #0
 802099e:	1ca2      	adds	r2, r4, #2
 80209a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80209a2:	78a2      	ldrb	r2, [r4, #2]
 80209a4:	e785      	b.n	80208b2 <_strtod_l+0x192>
 80209a6:	f04f 0c01 	mov.w	ip, #1
 80209aa:	e7f8      	b.n	802099e <_strtod_l+0x27e>
 80209ac:	080258f0 	.word	0x080258f0
 80209b0:	080258d8 	.word	0x080258d8
 80209b4:	7ff00000 	.word	0x7ff00000
 80209b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80209ba:	1c51      	adds	r1, r2, #1
 80209bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80209be:	7852      	ldrb	r2, [r2, #1]
 80209c0:	2a30      	cmp	r2, #48	@ 0x30
 80209c2:	d0f9      	beq.n	80209b8 <_strtod_l+0x298>
 80209c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80209c8:	2908      	cmp	r1, #8
 80209ca:	f63f af78 	bhi.w	80208be <_strtod_l+0x19e>
 80209ce:	3a30      	subs	r2, #48	@ 0x30
 80209d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80209d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80209d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80209d6:	f04f 080a 	mov.w	r8, #10
 80209da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80209dc:	1c56      	adds	r6, r2, #1
 80209de:	9619      	str	r6, [sp, #100]	@ 0x64
 80209e0:	7852      	ldrb	r2, [r2, #1]
 80209e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80209e6:	f1be 0f09 	cmp.w	lr, #9
 80209ea:	d939      	bls.n	8020a60 <_strtod_l+0x340>
 80209ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80209ee:	1a76      	subs	r6, r6, r1
 80209f0:	2e08      	cmp	r6, #8
 80209f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80209f6:	dc03      	bgt.n	8020a00 <_strtod_l+0x2e0>
 80209f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80209fa:	4588      	cmp	r8, r1
 80209fc:	bfa8      	it	ge
 80209fe:	4688      	movge	r8, r1
 8020a00:	f1bc 0f00 	cmp.w	ip, #0
 8020a04:	d001      	beq.n	8020a0a <_strtod_l+0x2ea>
 8020a06:	f1c8 0800 	rsb	r8, r8, #0
 8020a0a:	2d00      	cmp	r5, #0
 8020a0c:	d14e      	bne.n	8020aac <_strtod_l+0x38c>
 8020a0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020a10:	4308      	orrs	r0, r1
 8020a12:	f47f aebe 	bne.w	8020792 <_strtod_l+0x72>
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	f47f aed6 	bne.w	80207c8 <_strtod_l+0xa8>
 8020a1c:	2a69      	cmp	r2, #105	@ 0x69
 8020a1e:	d028      	beq.n	8020a72 <_strtod_l+0x352>
 8020a20:	dc25      	bgt.n	8020a6e <_strtod_l+0x34e>
 8020a22:	2a49      	cmp	r2, #73	@ 0x49
 8020a24:	d025      	beq.n	8020a72 <_strtod_l+0x352>
 8020a26:	2a4e      	cmp	r2, #78	@ 0x4e
 8020a28:	f47f aece 	bne.w	80207c8 <_strtod_l+0xa8>
 8020a2c:	499b      	ldr	r1, [pc, #620]	@ (8020c9c <_strtod_l+0x57c>)
 8020a2e:	a819      	add	r0, sp, #100	@ 0x64
 8020a30:	f001 fafa 	bl	8022028 <__match>
 8020a34:	2800      	cmp	r0, #0
 8020a36:	f43f aec7 	beq.w	80207c8 <_strtod_l+0xa8>
 8020a3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020a3c:	781b      	ldrb	r3, [r3, #0]
 8020a3e:	2b28      	cmp	r3, #40	@ 0x28
 8020a40:	d12e      	bne.n	8020aa0 <_strtod_l+0x380>
 8020a42:	4997      	ldr	r1, [pc, #604]	@ (8020ca0 <_strtod_l+0x580>)
 8020a44:	aa1c      	add	r2, sp, #112	@ 0x70
 8020a46:	a819      	add	r0, sp, #100	@ 0x64
 8020a48:	f001 fb02 	bl	8022050 <__hexnan>
 8020a4c:	2805      	cmp	r0, #5
 8020a4e:	d127      	bne.n	8020aa0 <_strtod_l+0x380>
 8020a50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020a52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8020a56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8020a5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8020a5e:	e698      	b.n	8020792 <_strtod_l+0x72>
 8020a60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020a62:	fb08 2101 	mla	r1, r8, r1, r2
 8020a66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8020a6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8020a6c:	e7b5      	b.n	80209da <_strtod_l+0x2ba>
 8020a6e:	2a6e      	cmp	r2, #110	@ 0x6e
 8020a70:	e7da      	b.n	8020a28 <_strtod_l+0x308>
 8020a72:	498c      	ldr	r1, [pc, #560]	@ (8020ca4 <_strtod_l+0x584>)
 8020a74:	a819      	add	r0, sp, #100	@ 0x64
 8020a76:	f001 fad7 	bl	8022028 <__match>
 8020a7a:	2800      	cmp	r0, #0
 8020a7c:	f43f aea4 	beq.w	80207c8 <_strtod_l+0xa8>
 8020a80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020a82:	4989      	ldr	r1, [pc, #548]	@ (8020ca8 <_strtod_l+0x588>)
 8020a84:	3b01      	subs	r3, #1
 8020a86:	a819      	add	r0, sp, #100	@ 0x64
 8020a88:	9319      	str	r3, [sp, #100]	@ 0x64
 8020a8a:	f001 facd 	bl	8022028 <__match>
 8020a8e:	b910      	cbnz	r0, 8020a96 <_strtod_l+0x376>
 8020a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020a92:	3301      	adds	r3, #1
 8020a94:	9319      	str	r3, [sp, #100]	@ 0x64
 8020a96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020cb8 <_strtod_l+0x598>
 8020a9a:	f04f 0a00 	mov.w	sl, #0
 8020a9e:	e678      	b.n	8020792 <_strtod_l+0x72>
 8020aa0:	4882      	ldr	r0, [pc, #520]	@ (8020cac <_strtod_l+0x58c>)
 8020aa2:	f001 f815 	bl	8021ad0 <nan>
 8020aa6:	ec5b ab10 	vmov	sl, fp, d0
 8020aaa:	e672      	b.n	8020792 <_strtod_l+0x72>
 8020aac:	eba8 0309 	sub.w	r3, r8, r9
 8020ab0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020ab2:	9309      	str	r3, [sp, #36]	@ 0x24
 8020ab4:	2f00      	cmp	r7, #0
 8020ab6:	bf08      	it	eq
 8020ab8:	462f      	moveq	r7, r5
 8020aba:	2d10      	cmp	r5, #16
 8020abc:	462c      	mov	r4, r5
 8020abe:	bfa8      	it	ge
 8020ac0:	2410      	movge	r4, #16
 8020ac2:	f7df fd37 	bl	8000534 <__aeabi_ui2d>
 8020ac6:	2d09      	cmp	r5, #9
 8020ac8:	4682      	mov	sl, r0
 8020aca:	468b      	mov	fp, r1
 8020acc:	dc13      	bgt.n	8020af6 <_strtod_l+0x3d6>
 8020ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	f43f ae5e 	beq.w	8020792 <_strtod_l+0x72>
 8020ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ad8:	dd78      	ble.n	8020bcc <_strtod_l+0x4ac>
 8020ada:	2b16      	cmp	r3, #22
 8020adc:	dc5f      	bgt.n	8020b9e <_strtod_l+0x47e>
 8020ade:	4974      	ldr	r1, [pc, #464]	@ (8020cb0 <_strtod_l+0x590>)
 8020ae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ae8:	4652      	mov	r2, sl
 8020aea:	465b      	mov	r3, fp
 8020aec:	f7df fd9c 	bl	8000628 <__aeabi_dmul>
 8020af0:	4682      	mov	sl, r0
 8020af2:	468b      	mov	fp, r1
 8020af4:	e64d      	b.n	8020792 <_strtod_l+0x72>
 8020af6:	4b6e      	ldr	r3, [pc, #440]	@ (8020cb0 <_strtod_l+0x590>)
 8020af8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020afc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8020b00:	f7df fd92 	bl	8000628 <__aeabi_dmul>
 8020b04:	4682      	mov	sl, r0
 8020b06:	9808      	ldr	r0, [sp, #32]
 8020b08:	468b      	mov	fp, r1
 8020b0a:	f7df fd13 	bl	8000534 <__aeabi_ui2d>
 8020b0e:	4602      	mov	r2, r0
 8020b10:	460b      	mov	r3, r1
 8020b12:	4650      	mov	r0, sl
 8020b14:	4659      	mov	r1, fp
 8020b16:	f7df fbd1 	bl	80002bc <__adddf3>
 8020b1a:	2d0f      	cmp	r5, #15
 8020b1c:	4682      	mov	sl, r0
 8020b1e:	468b      	mov	fp, r1
 8020b20:	ddd5      	ble.n	8020ace <_strtod_l+0x3ae>
 8020b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b24:	1b2c      	subs	r4, r5, r4
 8020b26:	441c      	add	r4, r3
 8020b28:	2c00      	cmp	r4, #0
 8020b2a:	f340 8096 	ble.w	8020c5a <_strtod_l+0x53a>
 8020b2e:	f014 030f 	ands.w	r3, r4, #15
 8020b32:	d00a      	beq.n	8020b4a <_strtod_l+0x42a>
 8020b34:	495e      	ldr	r1, [pc, #376]	@ (8020cb0 <_strtod_l+0x590>)
 8020b36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020b3a:	4652      	mov	r2, sl
 8020b3c:	465b      	mov	r3, fp
 8020b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b42:	f7df fd71 	bl	8000628 <__aeabi_dmul>
 8020b46:	4682      	mov	sl, r0
 8020b48:	468b      	mov	fp, r1
 8020b4a:	f034 040f 	bics.w	r4, r4, #15
 8020b4e:	d073      	beq.n	8020c38 <_strtod_l+0x518>
 8020b50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8020b54:	dd48      	ble.n	8020be8 <_strtod_l+0x4c8>
 8020b56:	2400      	movs	r4, #0
 8020b58:	46a0      	mov	r8, r4
 8020b5a:	940a      	str	r4, [sp, #40]	@ 0x28
 8020b5c:	46a1      	mov	r9, r4
 8020b5e:	9a05      	ldr	r2, [sp, #20]
 8020b60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020cb8 <_strtod_l+0x598>
 8020b64:	2322      	movs	r3, #34	@ 0x22
 8020b66:	6013      	str	r3, [r2, #0]
 8020b68:	f04f 0a00 	mov.w	sl, #0
 8020b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020b6e:	2b00      	cmp	r3, #0
 8020b70:	f43f ae0f 	beq.w	8020792 <_strtod_l+0x72>
 8020b74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020b76:	9805      	ldr	r0, [sp, #20]
 8020b78:	f7ff f940 	bl	801fdfc <_Bfree>
 8020b7c:	9805      	ldr	r0, [sp, #20]
 8020b7e:	4649      	mov	r1, r9
 8020b80:	f7ff f93c 	bl	801fdfc <_Bfree>
 8020b84:	9805      	ldr	r0, [sp, #20]
 8020b86:	4641      	mov	r1, r8
 8020b88:	f7ff f938 	bl	801fdfc <_Bfree>
 8020b8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020b8e:	9805      	ldr	r0, [sp, #20]
 8020b90:	f7ff f934 	bl	801fdfc <_Bfree>
 8020b94:	9805      	ldr	r0, [sp, #20]
 8020b96:	4621      	mov	r1, r4
 8020b98:	f7ff f930 	bl	801fdfc <_Bfree>
 8020b9c:	e5f9      	b.n	8020792 <_strtod_l+0x72>
 8020b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020ba0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8020ba4:	4293      	cmp	r3, r2
 8020ba6:	dbbc      	blt.n	8020b22 <_strtod_l+0x402>
 8020ba8:	4c41      	ldr	r4, [pc, #260]	@ (8020cb0 <_strtod_l+0x590>)
 8020baa:	f1c5 050f 	rsb	r5, r5, #15
 8020bae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020bb2:	4652      	mov	r2, sl
 8020bb4:	465b      	mov	r3, fp
 8020bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020bba:	f7df fd35 	bl	8000628 <__aeabi_dmul>
 8020bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bc0:	1b5d      	subs	r5, r3, r5
 8020bc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020bc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8020bca:	e78f      	b.n	8020aec <_strtod_l+0x3cc>
 8020bcc:	3316      	adds	r3, #22
 8020bce:	dba8      	blt.n	8020b22 <_strtod_l+0x402>
 8020bd0:	4b37      	ldr	r3, [pc, #220]	@ (8020cb0 <_strtod_l+0x590>)
 8020bd2:	eba9 0808 	sub.w	r8, r9, r8
 8020bd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8020bda:	e9d8 2300 	ldrd	r2, r3, [r8]
 8020bde:	4650      	mov	r0, sl
 8020be0:	4659      	mov	r1, fp
 8020be2:	f7df fe4b 	bl	800087c <__aeabi_ddiv>
 8020be6:	e783      	b.n	8020af0 <_strtod_l+0x3d0>
 8020be8:	4b32      	ldr	r3, [pc, #200]	@ (8020cb4 <_strtod_l+0x594>)
 8020bea:	9308      	str	r3, [sp, #32]
 8020bec:	2300      	movs	r3, #0
 8020bee:	1124      	asrs	r4, r4, #4
 8020bf0:	4650      	mov	r0, sl
 8020bf2:	4659      	mov	r1, fp
 8020bf4:	461e      	mov	r6, r3
 8020bf6:	2c01      	cmp	r4, #1
 8020bf8:	dc21      	bgt.n	8020c3e <_strtod_l+0x51e>
 8020bfa:	b10b      	cbz	r3, 8020c00 <_strtod_l+0x4e0>
 8020bfc:	4682      	mov	sl, r0
 8020bfe:	468b      	mov	fp, r1
 8020c00:	492c      	ldr	r1, [pc, #176]	@ (8020cb4 <_strtod_l+0x594>)
 8020c02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8020c06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8020c0a:	4652      	mov	r2, sl
 8020c0c:	465b      	mov	r3, fp
 8020c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020c12:	f7df fd09 	bl	8000628 <__aeabi_dmul>
 8020c16:	4b28      	ldr	r3, [pc, #160]	@ (8020cb8 <_strtod_l+0x598>)
 8020c18:	460a      	mov	r2, r1
 8020c1a:	400b      	ands	r3, r1
 8020c1c:	4927      	ldr	r1, [pc, #156]	@ (8020cbc <_strtod_l+0x59c>)
 8020c1e:	428b      	cmp	r3, r1
 8020c20:	4682      	mov	sl, r0
 8020c22:	d898      	bhi.n	8020b56 <_strtod_l+0x436>
 8020c24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8020c28:	428b      	cmp	r3, r1
 8020c2a:	bf86      	itte	hi
 8020c2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020cc0 <_strtod_l+0x5a0>
 8020c30:	f04f 3aff 	movhi.w	sl, #4294967295
 8020c34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8020c38:	2300      	movs	r3, #0
 8020c3a:	9308      	str	r3, [sp, #32]
 8020c3c:	e07a      	b.n	8020d34 <_strtod_l+0x614>
 8020c3e:	07e2      	lsls	r2, r4, #31
 8020c40:	d505      	bpl.n	8020c4e <_strtod_l+0x52e>
 8020c42:	9b08      	ldr	r3, [sp, #32]
 8020c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c48:	f7df fcee 	bl	8000628 <__aeabi_dmul>
 8020c4c:	2301      	movs	r3, #1
 8020c4e:	9a08      	ldr	r2, [sp, #32]
 8020c50:	3208      	adds	r2, #8
 8020c52:	3601      	adds	r6, #1
 8020c54:	1064      	asrs	r4, r4, #1
 8020c56:	9208      	str	r2, [sp, #32]
 8020c58:	e7cd      	b.n	8020bf6 <_strtod_l+0x4d6>
 8020c5a:	d0ed      	beq.n	8020c38 <_strtod_l+0x518>
 8020c5c:	4264      	negs	r4, r4
 8020c5e:	f014 020f 	ands.w	r2, r4, #15
 8020c62:	d00a      	beq.n	8020c7a <_strtod_l+0x55a>
 8020c64:	4b12      	ldr	r3, [pc, #72]	@ (8020cb0 <_strtod_l+0x590>)
 8020c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020c6a:	4650      	mov	r0, sl
 8020c6c:	4659      	mov	r1, fp
 8020c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c72:	f7df fe03 	bl	800087c <__aeabi_ddiv>
 8020c76:	4682      	mov	sl, r0
 8020c78:	468b      	mov	fp, r1
 8020c7a:	1124      	asrs	r4, r4, #4
 8020c7c:	d0dc      	beq.n	8020c38 <_strtod_l+0x518>
 8020c7e:	2c1f      	cmp	r4, #31
 8020c80:	dd20      	ble.n	8020cc4 <_strtod_l+0x5a4>
 8020c82:	2400      	movs	r4, #0
 8020c84:	46a0      	mov	r8, r4
 8020c86:	940a      	str	r4, [sp, #40]	@ 0x28
 8020c88:	46a1      	mov	r9, r4
 8020c8a:	9a05      	ldr	r2, [sp, #20]
 8020c8c:	2322      	movs	r3, #34	@ 0x22
 8020c8e:	f04f 0a00 	mov.w	sl, #0
 8020c92:	f04f 0b00 	mov.w	fp, #0
 8020c96:	6013      	str	r3, [r2, #0]
 8020c98:	e768      	b.n	8020b6c <_strtod_l+0x44c>
 8020c9a:	bf00      	nop
 8020c9c:	08025632 	.word	0x08025632
 8020ca0:	080258dc 	.word	0x080258dc
 8020ca4:	0802562a 	.word	0x0802562a
 8020ca8:	0802570e 	.word	0x0802570e
 8020cac:	0802570a 	.word	0x0802570a
 8020cb0:	08025810 	.word	0x08025810
 8020cb4:	080257e8 	.word	0x080257e8
 8020cb8:	7ff00000 	.word	0x7ff00000
 8020cbc:	7ca00000 	.word	0x7ca00000
 8020cc0:	7fefffff 	.word	0x7fefffff
 8020cc4:	f014 0310 	ands.w	r3, r4, #16
 8020cc8:	bf18      	it	ne
 8020cca:	236a      	movne	r3, #106	@ 0x6a
 8020ccc:	4ea9      	ldr	r6, [pc, #676]	@ (8020f74 <_strtod_l+0x854>)
 8020cce:	9308      	str	r3, [sp, #32]
 8020cd0:	4650      	mov	r0, sl
 8020cd2:	4659      	mov	r1, fp
 8020cd4:	2300      	movs	r3, #0
 8020cd6:	07e2      	lsls	r2, r4, #31
 8020cd8:	d504      	bpl.n	8020ce4 <_strtod_l+0x5c4>
 8020cda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020cde:	f7df fca3 	bl	8000628 <__aeabi_dmul>
 8020ce2:	2301      	movs	r3, #1
 8020ce4:	1064      	asrs	r4, r4, #1
 8020ce6:	f106 0608 	add.w	r6, r6, #8
 8020cea:	d1f4      	bne.n	8020cd6 <_strtod_l+0x5b6>
 8020cec:	b10b      	cbz	r3, 8020cf2 <_strtod_l+0x5d2>
 8020cee:	4682      	mov	sl, r0
 8020cf0:	468b      	mov	fp, r1
 8020cf2:	9b08      	ldr	r3, [sp, #32]
 8020cf4:	b1b3      	cbz	r3, 8020d24 <_strtod_l+0x604>
 8020cf6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8020cfa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	4659      	mov	r1, fp
 8020d02:	dd0f      	ble.n	8020d24 <_strtod_l+0x604>
 8020d04:	2b1f      	cmp	r3, #31
 8020d06:	dd55      	ble.n	8020db4 <_strtod_l+0x694>
 8020d08:	2b34      	cmp	r3, #52	@ 0x34
 8020d0a:	bfde      	ittt	le
 8020d0c:	f04f 33ff 	movle.w	r3, #4294967295
 8020d10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8020d14:	4093      	lslle	r3, r2
 8020d16:	f04f 0a00 	mov.w	sl, #0
 8020d1a:	bfcc      	ite	gt
 8020d1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8020d20:	ea03 0b01 	andle.w	fp, r3, r1
 8020d24:	2200      	movs	r2, #0
 8020d26:	2300      	movs	r3, #0
 8020d28:	4650      	mov	r0, sl
 8020d2a:	4659      	mov	r1, fp
 8020d2c:	f7df fee4 	bl	8000af8 <__aeabi_dcmpeq>
 8020d30:	2800      	cmp	r0, #0
 8020d32:	d1a6      	bne.n	8020c82 <_strtod_l+0x562>
 8020d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d36:	9300      	str	r3, [sp, #0]
 8020d38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020d3a:	9805      	ldr	r0, [sp, #20]
 8020d3c:	462b      	mov	r3, r5
 8020d3e:	463a      	mov	r2, r7
 8020d40:	f7ff f8c4 	bl	801fecc <__s2b>
 8020d44:	900a      	str	r0, [sp, #40]	@ 0x28
 8020d46:	2800      	cmp	r0, #0
 8020d48:	f43f af05 	beq.w	8020b56 <_strtod_l+0x436>
 8020d4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020d4e:	2a00      	cmp	r2, #0
 8020d50:	eba9 0308 	sub.w	r3, r9, r8
 8020d54:	bfa8      	it	ge
 8020d56:	2300      	movge	r3, #0
 8020d58:	9312      	str	r3, [sp, #72]	@ 0x48
 8020d5a:	2400      	movs	r4, #0
 8020d5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8020d60:	9316      	str	r3, [sp, #88]	@ 0x58
 8020d62:	46a0      	mov	r8, r4
 8020d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d66:	9805      	ldr	r0, [sp, #20]
 8020d68:	6859      	ldr	r1, [r3, #4]
 8020d6a:	f7ff f807 	bl	801fd7c <_Balloc>
 8020d6e:	4681      	mov	r9, r0
 8020d70:	2800      	cmp	r0, #0
 8020d72:	f43f aef4 	beq.w	8020b5e <_strtod_l+0x43e>
 8020d76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d78:	691a      	ldr	r2, [r3, #16]
 8020d7a:	3202      	adds	r2, #2
 8020d7c:	f103 010c 	add.w	r1, r3, #12
 8020d80:	0092      	lsls	r2, r2, #2
 8020d82:	300c      	adds	r0, #12
 8020d84:	f7fe f92f 	bl	801efe6 <memcpy>
 8020d88:	ec4b ab10 	vmov	d0, sl, fp
 8020d8c:	9805      	ldr	r0, [sp, #20]
 8020d8e:	aa1c      	add	r2, sp, #112	@ 0x70
 8020d90:	a91b      	add	r1, sp, #108	@ 0x6c
 8020d92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8020d96:	f7ff fbd5 	bl	8020544 <__d2b>
 8020d9a:	901a      	str	r0, [sp, #104]	@ 0x68
 8020d9c:	2800      	cmp	r0, #0
 8020d9e:	f43f aede 	beq.w	8020b5e <_strtod_l+0x43e>
 8020da2:	9805      	ldr	r0, [sp, #20]
 8020da4:	2101      	movs	r1, #1
 8020da6:	f7ff f927 	bl	801fff8 <__i2b>
 8020daa:	4680      	mov	r8, r0
 8020dac:	b948      	cbnz	r0, 8020dc2 <_strtod_l+0x6a2>
 8020dae:	f04f 0800 	mov.w	r8, #0
 8020db2:	e6d4      	b.n	8020b5e <_strtod_l+0x43e>
 8020db4:	f04f 32ff 	mov.w	r2, #4294967295
 8020db8:	fa02 f303 	lsl.w	r3, r2, r3
 8020dbc:	ea03 0a0a 	and.w	sl, r3, sl
 8020dc0:	e7b0      	b.n	8020d24 <_strtod_l+0x604>
 8020dc2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8020dc4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020dc6:	2d00      	cmp	r5, #0
 8020dc8:	bfab      	itete	ge
 8020dca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8020dcc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8020dce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020dd0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8020dd2:	bfac      	ite	ge
 8020dd4:	18ef      	addge	r7, r5, r3
 8020dd6:	1b5e      	sublt	r6, r3, r5
 8020dd8:	9b08      	ldr	r3, [sp, #32]
 8020dda:	1aed      	subs	r5, r5, r3
 8020ddc:	4415      	add	r5, r2
 8020dde:	4b66      	ldr	r3, [pc, #408]	@ (8020f78 <_strtod_l+0x858>)
 8020de0:	3d01      	subs	r5, #1
 8020de2:	429d      	cmp	r5, r3
 8020de4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020de8:	da50      	bge.n	8020e8c <_strtod_l+0x76c>
 8020dea:	1b5b      	subs	r3, r3, r5
 8020dec:	2b1f      	cmp	r3, #31
 8020dee:	eba2 0203 	sub.w	r2, r2, r3
 8020df2:	f04f 0101 	mov.w	r1, #1
 8020df6:	dc3d      	bgt.n	8020e74 <_strtod_l+0x754>
 8020df8:	fa01 f303 	lsl.w	r3, r1, r3
 8020dfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020dfe:	2300      	movs	r3, #0
 8020e00:	9310      	str	r3, [sp, #64]	@ 0x40
 8020e02:	18bd      	adds	r5, r7, r2
 8020e04:	9b08      	ldr	r3, [sp, #32]
 8020e06:	42af      	cmp	r7, r5
 8020e08:	4416      	add	r6, r2
 8020e0a:	441e      	add	r6, r3
 8020e0c:	463b      	mov	r3, r7
 8020e0e:	bfa8      	it	ge
 8020e10:	462b      	movge	r3, r5
 8020e12:	42b3      	cmp	r3, r6
 8020e14:	bfa8      	it	ge
 8020e16:	4633      	movge	r3, r6
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	bfc2      	ittt	gt
 8020e1c:	1aed      	subgt	r5, r5, r3
 8020e1e:	1af6      	subgt	r6, r6, r3
 8020e20:	1aff      	subgt	r7, r7, r3
 8020e22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	dd16      	ble.n	8020e56 <_strtod_l+0x736>
 8020e28:	4641      	mov	r1, r8
 8020e2a:	9805      	ldr	r0, [sp, #20]
 8020e2c:	461a      	mov	r2, r3
 8020e2e:	f7ff f9a3 	bl	8020178 <__pow5mult>
 8020e32:	4680      	mov	r8, r0
 8020e34:	2800      	cmp	r0, #0
 8020e36:	d0ba      	beq.n	8020dae <_strtod_l+0x68e>
 8020e38:	4601      	mov	r1, r0
 8020e3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020e3c:	9805      	ldr	r0, [sp, #20]
 8020e3e:	f7ff f8f1 	bl	8020024 <__multiply>
 8020e42:	900e      	str	r0, [sp, #56]	@ 0x38
 8020e44:	2800      	cmp	r0, #0
 8020e46:	f43f ae8a 	beq.w	8020b5e <_strtod_l+0x43e>
 8020e4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020e4c:	9805      	ldr	r0, [sp, #20]
 8020e4e:	f7fe ffd5 	bl	801fdfc <_Bfree>
 8020e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020e54:	931a      	str	r3, [sp, #104]	@ 0x68
 8020e56:	2d00      	cmp	r5, #0
 8020e58:	dc1d      	bgt.n	8020e96 <_strtod_l+0x776>
 8020e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	dd23      	ble.n	8020ea8 <_strtod_l+0x788>
 8020e60:	4649      	mov	r1, r9
 8020e62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020e64:	9805      	ldr	r0, [sp, #20]
 8020e66:	f7ff f987 	bl	8020178 <__pow5mult>
 8020e6a:	4681      	mov	r9, r0
 8020e6c:	b9e0      	cbnz	r0, 8020ea8 <_strtod_l+0x788>
 8020e6e:	f04f 0900 	mov.w	r9, #0
 8020e72:	e674      	b.n	8020b5e <_strtod_l+0x43e>
 8020e74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020e78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8020e7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020e80:	35e2      	adds	r5, #226	@ 0xe2
 8020e82:	fa01 f305 	lsl.w	r3, r1, r5
 8020e86:	9310      	str	r3, [sp, #64]	@ 0x40
 8020e88:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020e8a:	e7ba      	b.n	8020e02 <_strtod_l+0x6e2>
 8020e8c:	2300      	movs	r3, #0
 8020e8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8020e90:	2301      	movs	r3, #1
 8020e92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020e94:	e7b5      	b.n	8020e02 <_strtod_l+0x6e2>
 8020e96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020e98:	9805      	ldr	r0, [sp, #20]
 8020e9a:	462a      	mov	r2, r5
 8020e9c:	f7ff f9c6 	bl	802022c <__lshift>
 8020ea0:	901a      	str	r0, [sp, #104]	@ 0x68
 8020ea2:	2800      	cmp	r0, #0
 8020ea4:	d1d9      	bne.n	8020e5a <_strtod_l+0x73a>
 8020ea6:	e65a      	b.n	8020b5e <_strtod_l+0x43e>
 8020ea8:	2e00      	cmp	r6, #0
 8020eaa:	dd07      	ble.n	8020ebc <_strtod_l+0x79c>
 8020eac:	4649      	mov	r1, r9
 8020eae:	9805      	ldr	r0, [sp, #20]
 8020eb0:	4632      	mov	r2, r6
 8020eb2:	f7ff f9bb 	bl	802022c <__lshift>
 8020eb6:	4681      	mov	r9, r0
 8020eb8:	2800      	cmp	r0, #0
 8020eba:	d0d8      	beq.n	8020e6e <_strtod_l+0x74e>
 8020ebc:	2f00      	cmp	r7, #0
 8020ebe:	dd08      	ble.n	8020ed2 <_strtod_l+0x7b2>
 8020ec0:	4641      	mov	r1, r8
 8020ec2:	9805      	ldr	r0, [sp, #20]
 8020ec4:	463a      	mov	r2, r7
 8020ec6:	f7ff f9b1 	bl	802022c <__lshift>
 8020eca:	4680      	mov	r8, r0
 8020ecc:	2800      	cmp	r0, #0
 8020ece:	f43f ae46 	beq.w	8020b5e <_strtod_l+0x43e>
 8020ed2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020ed4:	9805      	ldr	r0, [sp, #20]
 8020ed6:	464a      	mov	r2, r9
 8020ed8:	f7ff fa30 	bl	802033c <__mdiff>
 8020edc:	4604      	mov	r4, r0
 8020ede:	2800      	cmp	r0, #0
 8020ee0:	f43f ae3d 	beq.w	8020b5e <_strtod_l+0x43e>
 8020ee4:	68c3      	ldr	r3, [r0, #12]
 8020ee6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020ee8:	2300      	movs	r3, #0
 8020eea:	60c3      	str	r3, [r0, #12]
 8020eec:	4641      	mov	r1, r8
 8020eee:	f7ff fa09 	bl	8020304 <__mcmp>
 8020ef2:	2800      	cmp	r0, #0
 8020ef4:	da46      	bge.n	8020f84 <_strtod_l+0x864>
 8020ef6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020ef8:	ea53 030a 	orrs.w	r3, r3, sl
 8020efc:	d16c      	bne.n	8020fd8 <_strtod_l+0x8b8>
 8020efe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020f02:	2b00      	cmp	r3, #0
 8020f04:	d168      	bne.n	8020fd8 <_strtod_l+0x8b8>
 8020f06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020f0a:	0d1b      	lsrs	r3, r3, #20
 8020f0c:	051b      	lsls	r3, r3, #20
 8020f0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020f12:	d961      	bls.n	8020fd8 <_strtod_l+0x8b8>
 8020f14:	6963      	ldr	r3, [r4, #20]
 8020f16:	b913      	cbnz	r3, 8020f1e <_strtod_l+0x7fe>
 8020f18:	6923      	ldr	r3, [r4, #16]
 8020f1a:	2b01      	cmp	r3, #1
 8020f1c:	dd5c      	ble.n	8020fd8 <_strtod_l+0x8b8>
 8020f1e:	4621      	mov	r1, r4
 8020f20:	2201      	movs	r2, #1
 8020f22:	9805      	ldr	r0, [sp, #20]
 8020f24:	f7ff f982 	bl	802022c <__lshift>
 8020f28:	4641      	mov	r1, r8
 8020f2a:	4604      	mov	r4, r0
 8020f2c:	f7ff f9ea 	bl	8020304 <__mcmp>
 8020f30:	2800      	cmp	r0, #0
 8020f32:	dd51      	ble.n	8020fd8 <_strtod_l+0x8b8>
 8020f34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020f38:	9a08      	ldr	r2, [sp, #32]
 8020f3a:	0d1b      	lsrs	r3, r3, #20
 8020f3c:	051b      	lsls	r3, r3, #20
 8020f3e:	2a00      	cmp	r2, #0
 8020f40:	d06b      	beq.n	802101a <_strtod_l+0x8fa>
 8020f42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020f46:	d868      	bhi.n	802101a <_strtod_l+0x8fa>
 8020f48:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8020f4c:	f67f ae9d 	bls.w	8020c8a <_strtod_l+0x56a>
 8020f50:	4b0a      	ldr	r3, [pc, #40]	@ (8020f7c <_strtod_l+0x85c>)
 8020f52:	4650      	mov	r0, sl
 8020f54:	4659      	mov	r1, fp
 8020f56:	2200      	movs	r2, #0
 8020f58:	f7df fb66 	bl	8000628 <__aeabi_dmul>
 8020f5c:	4b08      	ldr	r3, [pc, #32]	@ (8020f80 <_strtod_l+0x860>)
 8020f5e:	400b      	ands	r3, r1
 8020f60:	4682      	mov	sl, r0
 8020f62:	468b      	mov	fp, r1
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	f47f ae05 	bne.w	8020b74 <_strtod_l+0x454>
 8020f6a:	9a05      	ldr	r2, [sp, #20]
 8020f6c:	2322      	movs	r3, #34	@ 0x22
 8020f6e:	6013      	str	r3, [r2, #0]
 8020f70:	e600      	b.n	8020b74 <_strtod_l+0x454>
 8020f72:	bf00      	nop
 8020f74:	08025908 	.word	0x08025908
 8020f78:	fffffc02 	.word	0xfffffc02
 8020f7c:	39500000 	.word	0x39500000
 8020f80:	7ff00000 	.word	0x7ff00000
 8020f84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020f88:	d165      	bne.n	8021056 <_strtod_l+0x936>
 8020f8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020f90:	b35a      	cbz	r2, 8020fea <_strtod_l+0x8ca>
 8020f92:	4a9f      	ldr	r2, [pc, #636]	@ (8021210 <_strtod_l+0xaf0>)
 8020f94:	4293      	cmp	r3, r2
 8020f96:	d12b      	bne.n	8020ff0 <_strtod_l+0x8d0>
 8020f98:	9b08      	ldr	r3, [sp, #32]
 8020f9a:	4651      	mov	r1, sl
 8020f9c:	b303      	cbz	r3, 8020fe0 <_strtod_l+0x8c0>
 8020f9e:	4b9d      	ldr	r3, [pc, #628]	@ (8021214 <_strtod_l+0xaf4>)
 8020fa0:	465a      	mov	r2, fp
 8020fa2:	4013      	ands	r3, r2
 8020fa4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8020fac:	d81b      	bhi.n	8020fe6 <_strtod_l+0x8c6>
 8020fae:	0d1b      	lsrs	r3, r3, #20
 8020fb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8020fb8:	4299      	cmp	r1, r3
 8020fba:	d119      	bne.n	8020ff0 <_strtod_l+0x8d0>
 8020fbc:	4b96      	ldr	r3, [pc, #600]	@ (8021218 <_strtod_l+0xaf8>)
 8020fbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020fc0:	429a      	cmp	r2, r3
 8020fc2:	d102      	bne.n	8020fca <_strtod_l+0x8aa>
 8020fc4:	3101      	adds	r1, #1
 8020fc6:	f43f adca 	beq.w	8020b5e <_strtod_l+0x43e>
 8020fca:	4b92      	ldr	r3, [pc, #584]	@ (8021214 <_strtod_l+0xaf4>)
 8020fcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020fce:	401a      	ands	r2, r3
 8020fd0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8020fd4:	f04f 0a00 	mov.w	sl, #0
 8020fd8:	9b08      	ldr	r3, [sp, #32]
 8020fda:	2b00      	cmp	r3, #0
 8020fdc:	d1b8      	bne.n	8020f50 <_strtod_l+0x830>
 8020fde:	e5c9      	b.n	8020b74 <_strtod_l+0x454>
 8020fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8020fe4:	e7e8      	b.n	8020fb8 <_strtod_l+0x898>
 8020fe6:	4613      	mov	r3, r2
 8020fe8:	e7e6      	b.n	8020fb8 <_strtod_l+0x898>
 8020fea:	ea53 030a 	orrs.w	r3, r3, sl
 8020fee:	d0a1      	beq.n	8020f34 <_strtod_l+0x814>
 8020ff0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020ff2:	b1db      	cbz	r3, 802102c <_strtod_l+0x90c>
 8020ff4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ff6:	4213      	tst	r3, r2
 8020ff8:	d0ee      	beq.n	8020fd8 <_strtod_l+0x8b8>
 8020ffa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020ffc:	9a08      	ldr	r2, [sp, #32]
 8020ffe:	4650      	mov	r0, sl
 8021000:	4659      	mov	r1, fp
 8021002:	b1bb      	cbz	r3, 8021034 <_strtod_l+0x914>
 8021004:	f7ff fb6c 	bl	80206e0 <sulp>
 8021008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802100c:	ec53 2b10 	vmov	r2, r3, d0
 8021010:	f7df f954 	bl	80002bc <__adddf3>
 8021014:	4682      	mov	sl, r0
 8021016:	468b      	mov	fp, r1
 8021018:	e7de      	b.n	8020fd8 <_strtod_l+0x8b8>
 802101a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802101e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8021022:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8021026:	f04f 3aff 	mov.w	sl, #4294967295
 802102a:	e7d5      	b.n	8020fd8 <_strtod_l+0x8b8>
 802102c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802102e:	ea13 0f0a 	tst.w	r3, sl
 8021032:	e7e1      	b.n	8020ff8 <_strtod_l+0x8d8>
 8021034:	f7ff fb54 	bl	80206e0 <sulp>
 8021038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802103c:	ec53 2b10 	vmov	r2, r3, d0
 8021040:	f7df f93a 	bl	80002b8 <__aeabi_dsub>
 8021044:	2200      	movs	r2, #0
 8021046:	2300      	movs	r3, #0
 8021048:	4682      	mov	sl, r0
 802104a:	468b      	mov	fp, r1
 802104c:	f7df fd54 	bl	8000af8 <__aeabi_dcmpeq>
 8021050:	2800      	cmp	r0, #0
 8021052:	d0c1      	beq.n	8020fd8 <_strtod_l+0x8b8>
 8021054:	e619      	b.n	8020c8a <_strtod_l+0x56a>
 8021056:	4641      	mov	r1, r8
 8021058:	4620      	mov	r0, r4
 802105a:	f7ff facb 	bl	80205f4 <__ratio>
 802105e:	ec57 6b10 	vmov	r6, r7, d0
 8021062:	2200      	movs	r2, #0
 8021064:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8021068:	4630      	mov	r0, r6
 802106a:	4639      	mov	r1, r7
 802106c:	f7df fd58 	bl	8000b20 <__aeabi_dcmple>
 8021070:	2800      	cmp	r0, #0
 8021072:	d06f      	beq.n	8021154 <_strtod_l+0xa34>
 8021074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021076:	2b00      	cmp	r3, #0
 8021078:	d17a      	bne.n	8021170 <_strtod_l+0xa50>
 802107a:	f1ba 0f00 	cmp.w	sl, #0
 802107e:	d158      	bne.n	8021132 <_strtod_l+0xa12>
 8021080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021086:	2b00      	cmp	r3, #0
 8021088:	d15a      	bne.n	8021140 <_strtod_l+0xa20>
 802108a:	4b64      	ldr	r3, [pc, #400]	@ (802121c <_strtod_l+0xafc>)
 802108c:	2200      	movs	r2, #0
 802108e:	4630      	mov	r0, r6
 8021090:	4639      	mov	r1, r7
 8021092:	f7df fd3b 	bl	8000b0c <__aeabi_dcmplt>
 8021096:	2800      	cmp	r0, #0
 8021098:	d159      	bne.n	802114e <_strtod_l+0xa2e>
 802109a:	4630      	mov	r0, r6
 802109c:	4639      	mov	r1, r7
 802109e:	4b60      	ldr	r3, [pc, #384]	@ (8021220 <_strtod_l+0xb00>)
 80210a0:	2200      	movs	r2, #0
 80210a2:	f7df fac1 	bl	8000628 <__aeabi_dmul>
 80210a6:	4606      	mov	r6, r0
 80210a8:	460f      	mov	r7, r1
 80210aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80210ae:	9606      	str	r6, [sp, #24]
 80210b0:	9307      	str	r3, [sp, #28]
 80210b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80210b6:	4d57      	ldr	r5, [pc, #348]	@ (8021214 <_strtod_l+0xaf4>)
 80210b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80210bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210be:	401d      	ands	r5, r3
 80210c0:	4b58      	ldr	r3, [pc, #352]	@ (8021224 <_strtod_l+0xb04>)
 80210c2:	429d      	cmp	r5, r3
 80210c4:	f040 80b2 	bne.w	802122c <_strtod_l+0xb0c>
 80210c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80210ce:	ec4b ab10 	vmov	d0, sl, fp
 80210d2:	f7ff f9c7 	bl	8020464 <__ulp>
 80210d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80210da:	ec51 0b10 	vmov	r0, r1, d0
 80210de:	f7df faa3 	bl	8000628 <__aeabi_dmul>
 80210e2:	4652      	mov	r2, sl
 80210e4:	465b      	mov	r3, fp
 80210e6:	f7df f8e9 	bl	80002bc <__adddf3>
 80210ea:	460b      	mov	r3, r1
 80210ec:	4949      	ldr	r1, [pc, #292]	@ (8021214 <_strtod_l+0xaf4>)
 80210ee:	4a4e      	ldr	r2, [pc, #312]	@ (8021228 <_strtod_l+0xb08>)
 80210f0:	4019      	ands	r1, r3
 80210f2:	4291      	cmp	r1, r2
 80210f4:	4682      	mov	sl, r0
 80210f6:	d942      	bls.n	802117e <_strtod_l+0xa5e>
 80210f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80210fa:	4b47      	ldr	r3, [pc, #284]	@ (8021218 <_strtod_l+0xaf8>)
 80210fc:	429a      	cmp	r2, r3
 80210fe:	d103      	bne.n	8021108 <_strtod_l+0x9e8>
 8021100:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021102:	3301      	adds	r3, #1
 8021104:	f43f ad2b 	beq.w	8020b5e <_strtod_l+0x43e>
 8021108:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8021218 <_strtod_l+0xaf8>
 802110c:	f04f 3aff 	mov.w	sl, #4294967295
 8021110:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8021112:	9805      	ldr	r0, [sp, #20]
 8021114:	f7fe fe72 	bl	801fdfc <_Bfree>
 8021118:	9805      	ldr	r0, [sp, #20]
 802111a:	4649      	mov	r1, r9
 802111c:	f7fe fe6e 	bl	801fdfc <_Bfree>
 8021120:	9805      	ldr	r0, [sp, #20]
 8021122:	4641      	mov	r1, r8
 8021124:	f7fe fe6a 	bl	801fdfc <_Bfree>
 8021128:	9805      	ldr	r0, [sp, #20]
 802112a:	4621      	mov	r1, r4
 802112c:	f7fe fe66 	bl	801fdfc <_Bfree>
 8021130:	e618      	b.n	8020d64 <_strtod_l+0x644>
 8021132:	f1ba 0f01 	cmp.w	sl, #1
 8021136:	d103      	bne.n	8021140 <_strtod_l+0xa20>
 8021138:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802113a:	2b00      	cmp	r3, #0
 802113c:	f43f ada5 	beq.w	8020c8a <_strtod_l+0x56a>
 8021140:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80211f0 <_strtod_l+0xad0>
 8021144:	4f35      	ldr	r7, [pc, #212]	@ (802121c <_strtod_l+0xafc>)
 8021146:	ed8d 7b06 	vstr	d7, [sp, #24]
 802114a:	2600      	movs	r6, #0
 802114c:	e7b1      	b.n	80210b2 <_strtod_l+0x992>
 802114e:	4f34      	ldr	r7, [pc, #208]	@ (8021220 <_strtod_l+0xb00>)
 8021150:	2600      	movs	r6, #0
 8021152:	e7aa      	b.n	80210aa <_strtod_l+0x98a>
 8021154:	4b32      	ldr	r3, [pc, #200]	@ (8021220 <_strtod_l+0xb00>)
 8021156:	4630      	mov	r0, r6
 8021158:	4639      	mov	r1, r7
 802115a:	2200      	movs	r2, #0
 802115c:	f7df fa64 	bl	8000628 <__aeabi_dmul>
 8021160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021162:	4606      	mov	r6, r0
 8021164:	460f      	mov	r7, r1
 8021166:	2b00      	cmp	r3, #0
 8021168:	d09f      	beq.n	80210aa <_strtod_l+0x98a>
 802116a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802116e:	e7a0      	b.n	80210b2 <_strtod_l+0x992>
 8021170:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80211f8 <_strtod_l+0xad8>
 8021174:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021178:	ec57 6b17 	vmov	r6, r7, d7
 802117c:	e799      	b.n	80210b2 <_strtod_l+0x992>
 802117e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8021182:	9b08      	ldr	r3, [sp, #32]
 8021184:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8021188:	2b00      	cmp	r3, #0
 802118a:	d1c1      	bne.n	8021110 <_strtod_l+0x9f0>
 802118c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8021190:	0d1b      	lsrs	r3, r3, #20
 8021192:	051b      	lsls	r3, r3, #20
 8021194:	429d      	cmp	r5, r3
 8021196:	d1bb      	bne.n	8021110 <_strtod_l+0x9f0>
 8021198:	4630      	mov	r0, r6
 802119a:	4639      	mov	r1, r7
 802119c:	f7df fda4 	bl	8000ce8 <__aeabi_d2lz>
 80211a0:	f7df fa14 	bl	80005cc <__aeabi_l2d>
 80211a4:	4602      	mov	r2, r0
 80211a6:	460b      	mov	r3, r1
 80211a8:	4630      	mov	r0, r6
 80211aa:	4639      	mov	r1, r7
 80211ac:	f7df f884 	bl	80002b8 <__aeabi_dsub>
 80211b0:	460b      	mov	r3, r1
 80211b2:	4602      	mov	r2, r0
 80211b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80211b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80211bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80211be:	ea46 060a 	orr.w	r6, r6, sl
 80211c2:	431e      	orrs	r6, r3
 80211c4:	d06f      	beq.n	80212a6 <_strtod_l+0xb86>
 80211c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8021200 <_strtod_l+0xae0>)
 80211c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211cc:	f7df fc9e 	bl	8000b0c <__aeabi_dcmplt>
 80211d0:	2800      	cmp	r0, #0
 80211d2:	f47f accf 	bne.w	8020b74 <_strtod_l+0x454>
 80211d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8021208 <_strtod_l+0xae8>)
 80211d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80211e0:	f7df fcb2 	bl	8000b48 <__aeabi_dcmpgt>
 80211e4:	2800      	cmp	r0, #0
 80211e6:	d093      	beq.n	8021110 <_strtod_l+0x9f0>
 80211e8:	e4c4      	b.n	8020b74 <_strtod_l+0x454>
 80211ea:	bf00      	nop
 80211ec:	f3af 8000 	nop.w
 80211f0:	00000000 	.word	0x00000000
 80211f4:	bff00000 	.word	0xbff00000
 80211f8:	00000000 	.word	0x00000000
 80211fc:	3ff00000 	.word	0x3ff00000
 8021200:	94a03595 	.word	0x94a03595
 8021204:	3fdfffff 	.word	0x3fdfffff
 8021208:	35afe535 	.word	0x35afe535
 802120c:	3fe00000 	.word	0x3fe00000
 8021210:	000fffff 	.word	0x000fffff
 8021214:	7ff00000 	.word	0x7ff00000
 8021218:	7fefffff 	.word	0x7fefffff
 802121c:	3ff00000 	.word	0x3ff00000
 8021220:	3fe00000 	.word	0x3fe00000
 8021224:	7fe00000 	.word	0x7fe00000
 8021228:	7c9fffff 	.word	0x7c9fffff
 802122c:	9b08      	ldr	r3, [sp, #32]
 802122e:	b323      	cbz	r3, 802127a <_strtod_l+0xb5a>
 8021230:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8021234:	d821      	bhi.n	802127a <_strtod_l+0xb5a>
 8021236:	a328      	add	r3, pc, #160	@ (adr r3, 80212d8 <_strtod_l+0xbb8>)
 8021238:	e9d3 2300 	ldrd	r2, r3, [r3]
 802123c:	4630      	mov	r0, r6
 802123e:	4639      	mov	r1, r7
 8021240:	f7df fc6e 	bl	8000b20 <__aeabi_dcmple>
 8021244:	b1a0      	cbz	r0, 8021270 <_strtod_l+0xb50>
 8021246:	4639      	mov	r1, r7
 8021248:	4630      	mov	r0, r6
 802124a:	f7df fcc5 	bl	8000bd8 <__aeabi_d2uiz>
 802124e:	2801      	cmp	r0, #1
 8021250:	bf38      	it	cc
 8021252:	2001      	movcc	r0, #1
 8021254:	f7df f96e 	bl	8000534 <__aeabi_ui2d>
 8021258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802125a:	4606      	mov	r6, r0
 802125c:	460f      	mov	r7, r1
 802125e:	b9fb      	cbnz	r3, 80212a0 <_strtod_l+0xb80>
 8021260:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021264:	9014      	str	r0, [sp, #80]	@ 0x50
 8021266:	9315      	str	r3, [sp, #84]	@ 0x54
 8021268:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 802126c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8021270:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021272:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8021276:	1b5b      	subs	r3, r3, r5
 8021278:	9311      	str	r3, [sp, #68]	@ 0x44
 802127a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802127e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8021282:	f7ff f8ef 	bl	8020464 <__ulp>
 8021286:	4650      	mov	r0, sl
 8021288:	ec53 2b10 	vmov	r2, r3, d0
 802128c:	4659      	mov	r1, fp
 802128e:	f7df f9cb 	bl	8000628 <__aeabi_dmul>
 8021292:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8021296:	f7df f811 	bl	80002bc <__adddf3>
 802129a:	4682      	mov	sl, r0
 802129c:	468b      	mov	fp, r1
 802129e:	e770      	b.n	8021182 <_strtod_l+0xa62>
 80212a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80212a4:	e7e0      	b.n	8021268 <_strtod_l+0xb48>
 80212a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80212e0 <_strtod_l+0xbc0>)
 80212a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212ac:	f7df fc2e 	bl	8000b0c <__aeabi_dcmplt>
 80212b0:	e798      	b.n	80211e4 <_strtod_l+0xac4>
 80212b2:	2300      	movs	r3, #0
 80212b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80212b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80212b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80212ba:	6013      	str	r3, [r2, #0]
 80212bc:	f7ff ba6d 	b.w	802079a <_strtod_l+0x7a>
 80212c0:	2a65      	cmp	r2, #101	@ 0x65
 80212c2:	f43f ab66 	beq.w	8020992 <_strtod_l+0x272>
 80212c6:	2a45      	cmp	r2, #69	@ 0x45
 80212c8:	f43f ab63 	beq.w	8020992 <_strtod_l+0x272>
 80212cc:	2301      	movs	r3, #1
 80212ce:	f7ff bb9e 	b.w	8020a0e <_strtod_l+0x2ee>
 80212d2:	bf00      	nop
 80212d4:	f3af 8000 	nop.w
 80212d8:	ffc00000 	.word	0xffc00000
 80212dc:	41dfffff 	.word	0x41dfffff
 80212e0:	94a03595 	.word	0x94a03595
 80212e4:	3fcfffff 	.word	0x3fcfffff

080212e8 <_strtod_r>:
 80212e8:	4b01      	ldr	r3, [pc, #4]	@ (80212f0 <_strtod_r+0x8>)
 80212ea:	f7ff ba19 	b.w	8020720 <_strtod_l>
 80212ee:	bf00      	nop
 80212f0:	20000198 	.word	0x20000198

080212f4 <__ssputs_r>:
 80212f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212f8:	688e      	ldr	r6, [r1, #8]
 80212fa:	461f      	mov	r7, r3
 80212fc:	42be      	cmp	r6, r7
 80212fe:	680b      	ldr	r3, [r1, #0]
 8021300:	4682      	mov	sl, r0
 8021302:	460c      	mov	r4, r1
 8021304:	4690      	mov	r8, r2
 8021306:	d82d      	bhi.n	8021364 <__ssputs_r+0x70>
 8021308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802130c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021310:	d026      	beq.n	8021360 <__ssputs_r+0x6c>
 8021312:	6965      	ldr	r5, [r4, #20]
 8021314:	6909      	ldr	r1, [r1, #16]
 8021316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802131a:	eba3 0901 	sub.w	r9, r3, r1
 802131e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021322:	1c7b      	adds	r3, r7, #1
 8021324:	444b      	add	r3, r9
 8021326:	106d      	asrs	r5, r5, #1
 8021328:	429d      	cmp	r5, r3
 802132a:	bf38      	it	cc
 802132c:	461d      	movcc	r5, r3
 802132e:	0553      	lsls	r3, r2, #21
 8021330:	d527      	bpl.n	8021382 <__ssputs_r+0x8e>
 8021332:	4629      	mov	r1, r5
 8021334:	f7fc faec 	bl	801d910 <_malloc_r>
 8021338:	4606      	mov	r6, r0
 802133a:	b360      	cbz	r0, 8021396 <__ssputs_r+0xa2>
 802133c:	6921      	ldr	r1, [r4, #16]
 802133e:	464a      	mov	r2, r9
 8021340:	f7fd fe51 	bl	801efe6 <memcpy>
 8021344:	89a3      	ldrh	r3, [r4, #12]
 8021346:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802134a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802134e:	81a3      	strh	r3, [r4, #12]
 8021350:	6126      	str	r6, [r4, #16]
 8021352:	6165      	str	r5, [r4, #20]
 8021354:	444e      	add	r6, r9
 8021356:	eba5 0509 	sub.w	r5, r5, r9
 802135a:	6026      	str	r6, [r4, #0]
 802135c:	60a5      	str	r5, [r4, #8]
 802135e:	463e      	mov	r6, r7
 8021360:	42be      	cmp	r6, r7
 8021362:	d900      	bls.n	8021366 <__ssputs_r+0x72>
 8021364:	463e      	mov	r6, r7
 8021366:	6820      	ldr	r0, [r4, #0]
 8021368:	4632      	mov	r2, r6
 802136a:	4641      	mov	r1, r8
 802136c:	f7fd fd0a 	bl	801ed84 <memmove>
 8021370:	68a3      	ldr	r3, [r4, #8]
 8021372:	1b9b      	subs	r3, r3, r6
 8021374:	60a3      	str	r3, [r4, #8]
 8021376:	6823      	ldr	r3, [r4, #0]
 8021378:	4433      	add	r3, r6
 802137a:	6023      	str	r3, [r4, #0]
 802137c:	2000      	movs	r0, #0
 802137e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021382:	462a      	mov	r2, r5
 8021384:	f000 ff11 	bl	80221aa <_realloc_r>
 8021388:	4606      	mov	r6, r0
 802138a:	2800      	cmp	r0, #0
 802138c:	d1e0      	bne.n	8021350 <__ssputs_r+0x5c>
 802138e:	6921      	ldr	r1, [r4, #16]
 8021390:	4650      	mov	r0, sl
 8021392:	f7fe fca9 	bl	801fce8 <_free_r>
 8021396:	230c      	movs	r3, #12
 8021398:	f8ca 3000 	str.w	r3, [sl]
 802139c:	89a3      	ldrh	r3, [r4, #12]
 802139e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80213a2:	81a3      	strh	r3, [r4, #12]
 80213a4:	f04f 30ff 	mov.w	r0, #4294967295
 80213a8:	e7e9      	b.n	802137e <__ssputs_r+0x8a>
	...

080213ac <_svfiprintf_r>:
 80213ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213b0:	4698      	mov	r8, r3
 80213b2:	898b      	ldrh	r3, [r1, #12]
 80213b4:	061b      	lsls	r3, r3, #24
 80213b6:	b09d      	sub	sp, #116	@ 0x74
 80213b8:	4607      	mov	r7, r0
 80213ba:	460d      	mov	r5, r1
 80213bc:	4614      	mov	r4, r2
 80213be:	d510      	bpl.n	80213e2 <_svfiprintf_r+0x36>
 80213c0:	690b      	ldr	r3, [r1, #16]
 80213c2:	b973      	cbnz	r3, 80213e2 <_svfiprintf_r+0x36>
 80213c4:	2140      	movs	r1, #64	@ 0x40
 80213c6:	f7fc faa3 	bl	801d910 <_malloc_r>
 80213ca:	6028      	str	r0, [r5, #0]
 80213cc:	6128      	str	r0, [r5, #16]
 80213ce:	b930      	cbnz	r0, 80213de <_svfiprintf_r+0x32>
 80213d0:	230c      	movs	r3, #12
 80213d2:	603b      	str	r3, [r7, #0]
 80213d4:	f04f 30ff 	mov.w	r0, #4294967295
 80213d8:	b01d      	add	sp, #116	@ 0x74
 80213da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213de:	2340      	movs	r3, #64	@ 0x40
 80213e0:	616b      	str	r3, [r5, #20]
 80213e2:	2300      	movs	r3, #0
 80213e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80213e6:	2320      	movs	r3, #32
 80213e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80213ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80213f0:	2330      	movs	r3, #48	@ 0x30
 80213f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021590 <_svfiprintf_r+0x1e4>
 80213f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80213fa:	f04f 0901 	mov.w	r9, #1
 80213fe:	4623      	mov	r3, r4
 8021400:	469a      	mov	sl, r3
 8021402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021406:	b10a      	cbz	r2, 802140c <_svfiprintf_r+0x60>
 8021408:	2a25      	cmp	r2, #37	@ 0x25
 802140a:	d1f9      	bne.n	8021400 <_svfiprintf_r+0x54>
 802140c:	ebba 0b04 	subs.w	fp, sl, r4
 8021410:	d00b      	beq.n	802142a <_svfiprintf_r+0x7e>
 8021412:	465b      	mov	r3, fp
 8021414:	4622      	mov	r2, r4
 8021416:	4629      	mov	r1, r5
 8021418:	4638      	mov	r0, r7
 802141a:	f7ff ff6b 	bl	80212f4 <__ssputs_r>
 802141e:	3001      	adds	r0, #1
 8021420:	f000 80a7 	beq.w	8021572 <_svfiprintf_r+0x1c6>
 8021424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021426:	445a      	add	r2, fp
 8021428:	9209      	str	r2, [sp, #36]	@ 0x24
 802142a:	f89a 3000 	ldrb.w	r3, [sl]
 802142e:	2b00      	cmp	r3, #0
 8021430:	f000 809f 	beq.w	8021572 <_svfiprintf_r+0x1c6>
 8021434:	2300      	movs	r3, #0
 8021436:	f04f 32ff 	mov.w	r2, #4294967295
 802143a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802143e:	f10a 0a01 	add.w	sl, sl, #1
 8021442:	9304      	str	r3, [sp, #16]
 8021444:	9307      	str	r3, [sp, #28]
 8021446:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802144a:	931a      	str	r3, [sp, #104]	@ 0x68
 802144c:	4654      	mov	r4, sl
 802144e:	2205      	movs	r2, #5
 8021450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021454:	484e      	ldr	r0, [pc, #312]	@ (8021590 <_svfiprintf_r+0x1e4>)
 8021456:	f7de fed3 	bl	8000200 <memchr>
 802145a:	9a04      	ldr	r2, [sp, #16]
 802145c:	b9d8      	cbnz	r0, 8021496 <_svfiprintf_r+0xea>
 802145e:	06d0      	lsls	r0, r2, #27
 8021460:	bf44      	itt	mi
 8021462:	2320      	movmi	r3, #32
 8021464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021468:	0711      	lsls	r1, r2, #28
 802146a:	bf44      	itt	mi
 802146c:	232b      	movmi	r3, #43	@ 0x2b
 802146e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021472:	f89a 3000 	ldrb.w	r3, [sl]
 8021476:	2b2a      	cmp	r3, #42	@ 0x2a
 8021478:	d015      	beq.n	80214a6 <_svfiprintf_r+0xfa>
 802147a:	9a07      	ldr	r2, [sp, #28]
 802147c:	4654      	mov	r4, sl
 802147e:	2000      	movs	r0, #0
 8021480:	f04f 0c0a 	mov.w	ip, #10
 8021484:	4621      	mov	r1, r4
 8021486:	f811 3b01 	ldrb.w	r3, [r1], #1
 802148a:	3b30      	subs	r3, #48	@ 0x30
 802148c:	2b09      	cmp	r3, #9
 802148e:	d94b      	bls.n	8021528 <_svfiprintf_r+0x17c>
 8021490:	b1b0      	cbz	r0, 80214c0 <_svfiprintf_r+0x114>
 8021492:	9207      	str	r2, [sp, #28]
 8021494:	e014      	b.n	80214c0 <_svfiprintf_r+0x114>
 8021496:	eba0 0308 	sub.w	r3, r0, r8
 802149a:	fa09 f303 	lsl.w	r3, r9, r3
 802149e:	4313      	orrs	r3, r2
 80214a0:	9304      	str	r3, [sp, #16]
 80214a2:	46a2      	mov	sl, r4
 80214a4:	e7d2      	b.n	802144c <_svfiprintf_r+0xa0>
 80214a6:	9b03      	ldr	r3, [sp, #12]
 80214a8:	1d19      	adds	r1, r3, #4
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	9103      	str	r1, [sp, #12]
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	bfbb      	ittet	lt
 80214b2:	425b      	neglt	r3, r3
 80214b4:	f042 0202 	orrlt.w	r2, r2, #2
 80214b8:	9307      	strge	r3, [sp, #28]
 80214ba:	9307      	strlt	r3, [sp, #28]
 80214bc:	bfb8      	it	lt
 80214be:	9204      	strlt	r2, [sp, #16]
 80214c0:	7823      	ldrb	r3, [r4, #0]
 80214c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80214c4:	d10a      	bne.n	80214dc <_svfiprintf_r+0x130>
 80214c6:	7863      	ldrb	r3, [r4, #1]
 80214c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80214ca:	d132      	bne.n	8021532 <_svfiprintf_r+0x186>
 80214cc:	9b03      	ldr	r3, [sp, #12]
 80214ce:	1d1a      	adds	r2, r3, #4
 80214d0:	681b      	ldr	r3, [r3, #0]
 80214d2:	9203      	str	r2, [sp, #12]
 80214d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80214d8:	3402      	adds	r4, #2
 80214da:	9305      	str	r3, [sp, #20]
 80214dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80215a0 <_svfiprintf_r+0x1f4>
 80214e0:	7821      	ldrb	r1, [r4, #0]
 80214e2:	2203      	movs	r2, #3
 80214e4:	4650      	mov	r0, sl
 80214e6:	f7de fe8b 	bl	8000200 <memchr>
 80214ea:	b138      	cbz	r0, 80214fc <_svfiprintf_r+0x150>
 80214ec:	9b04      	ldr	r3, [sp, #16]
 80214ee:	eba0 000a 	sub.w	r0, r0, sl
 80214f2:	2240      	movs	r2, #64	@ 0x40
 80214f4:	4082      	lsls	r2, r0
 80214f6:	4313      	orrs	r3, r2
 80214f8:	3401      	adds	r4, #1
 80214fa:	9304      	str	r3, [sp, #16]
 80214fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021500:	4824      	ldr	r0, [pc, #144]	@ (8021594 <_svfiprintf_r+0x1e8>)
 8021502:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021506:	2206      	movs	r2, #6
 8021508:	f7de fe7a 	bl	8000200 <memchr>
 802150c:	2800      	cmp	r0, #0
 802150e:	d036      	beq.n	802157e <_svfiprintf_r+0x1d2>
 8021510:	4b21      	ldr	r3, [pc, #132]	@ (8021598 <_svfiprintf_r+0x1ec>)
 8021512:	bb1b      	cbnz	r3, 802155c <_svfiprintf_r+0x1b0>
 8021514:	9b03      	ldr	r3, [sp, #12]
 8021516:	3307      	adds	r3, #7
 8021518:	f023 0307 	bic.w	r3, r3, #7
 802151c:	3308      	adds	r3, #8
 802151e:	9303      	str	r3, [sp, #12]
 8021520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021522:	4433      	add	r3, r6
 8021524:	9309      	str	r3, [sp, #36]	@ 0x24
 8021526:	e76a      	b.n	80213fe <_svfiprintf_r+0x52>
 8021528:	fb0c 3202 	mla	r2, ip, r2, r3
 802152c:	460c      	mov	r4, r1
 802152e:	2001      	movs	r0, #1
 8021530:	e7a8      	b.n	8021484 <_svfiprintf_r+0xd8>
 8021532:	2300      	movs	r3, #0
 8021534:	3401      	adds	r4, #1
 8021536:	9305      	str	r3, [sp, #20]
 8021538:	4619      	mov	r1, r3
 802153a:	f04f 0c0a 	mov.w	ip, #10
 802153e:	4620      	mov	r0, r4
 8021540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021544:	3a30      	subs	r2, #48	@ 0x30
 8021546:	2a09      	cmp	r2, #9
 8021548:	d903      	bls.n	8021552 <_svfiprintf_r+0x1a6>
 802154a:	2b00      	cmp	r3, #0
 802154c:	d0c6      	beq.n	80214dc <_svfiprintf_r+0x130>
 802154e:	9105      	str	r1, [sp, #20]
 8021550:	e7c4      	b.n	80214dc <_svfiprintf_r+0x130>
 8021552:	fb0c 2101 	mla	r1, ip, r1, r2
 8021556:	4604      	mov	r4, r0
 8021558:	2301      	movs	r3, #1
 802155a:	e7f0      	b.n	802153e <_svfiprintf_r+0x192>
 802155c:	ab03      	add	r3, sp, #12
 802155e:	9300      	str	r3, [sp, #0]
 8021560:	462a      	mov	r2, r5
 8021562:	4b0e      	ldr	r3, [pc, #56]	@ (802159c <_svfiprintf_r+0x1f0>)
 8021564:	a904      	add	r1, sp, #16
 8021566:	4638      	mov	r0, r7
 8021568:	f7fc fb84 	bl	801dc74 <_printf_float>
 802156c:	1c42      	adds	r2, r0, #1
 802156e:	4606      	mov	r6, r0
 8021570:	d1d6      	bne.n	8021520 <_svfiprintf_r+0x174>
 8021572:	89ab      	ldrh	r3, [r5, #12]
 8021574:	065b      	lsls	r3, r3, #25
 8021576:	f53f af2d 	bmi.w	80213d4 <_svfiprintf_r+0x28>
 802157a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802157c:	e72c      	b.n	80213d8 <_svfiprintf_r+0x2c>
 802157e:	ab03      	add	r3, sp, #12
 8021580:	9300      	str	r3, [sp, #0]
 8021582:	462a      	mov	r2, r5
 8021584:	4b05      	ldr	r3, [pc, #20]	@ (802159c <_svfiprintf_r+0x1f0>)
 8021586:	a904      	add	r1, sp, #16
 8021588:	4638      	mov	r0, r7
 802158a:	f7fc fe0b 	bl	801e1a4 <_printf_i>
 802158e:	e7ed      	b.n	802156c <_svfiprintf_r+0x1c0>
 8021590:	08025930 	.word	0x08025930
 8021594:	0802593a 	.word	0x0802593a
 8021598:	0801dc75 	.word	0x0801dc75
 802159c:	080212f5 	.word	0x080212f5
 80215a0:	08025936 	.word	0x08025936

080215a4 <__sfputc_r>:
 80215a4:	6893      	ldr	r3, [r2, #8]
 80215a6:	3b01      	subs	r3, #1
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	b410      	push	{r4}
 80215ac:	6093      	str	r3, [r2, #8]
 80215ae:	da08      	bge.n	80215c2 <__sfputc_r+0x1e>
 80215b0:	6994      	ldr	r4, [r2, #24]
 80215b2:	42a3      	cmp	r3, r4
 80215b4:	db01      	blt.n	80215ba <__sfputc_r+0x16>
 80215b6:	290a      	cmp	r1, #10
 80215b8:	d103      	bne.n	80215c2 <__sfputc_r+0x1e>
 80215ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80215be:	f7fd bb4d 	b.w	801ec5c <__swbuf_r>
 80215c2:	6813      	ldr	r3, [r2, #0]
 80215c4:	1c58      	adds	r0, r3, #1
 80215c6:	6010      	str	r0, [r2, #0]
 80215c8:	7019      	strb	r1, [r3, #0]
 80215ca:	4608      	mov	r0, r1
 80215cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80215d0:	4770      	bx	lr

080215d2 <__sfputs_r>:
 80215d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215d4:	4606      	mov	r6, r0
 80215d6:	460f      	mov	r7, r1
 80215d8:	4614      	mov	r4, r2
 80215da:	18d5      	adds	r5, r2, r3
 80215dc:	42ac      	cmp	r4, r5
 80215de:	d101      	bne.n	80215e4 <__sfputs_r+0x12>
 80215e0:	2000      	movs	r0, #0
 80215e2:	e007      	b.n	80215f4 <__sfputs_r+0x22>
 80215e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80215e8:	463a      	mov	r2, r7
 80215ea:	4630      	mov	r0, r6
 80215ec:	f7ff ffda 	bl	80215a4 <__sfputc_r>
 80215f0:	1c43      	adds	r3, r0, #1
 80215f2:	d1f3      	bne.n	80215dc <__sfputs_r+0xa>
 80215f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080215f8 <_vfiprintf_r>:
 80215f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215fc:	460d      	mov	r5, r1
 80215fe:	b09d      	sub	sp, #116	@ 0x74
 8021600:	4614      	mov	r4, r2
 8021602:	4698      	mov	r8, r3
 8021604:	4606      	mov	r6, r0
 8021606:	b118      	cbz	r0, 8021610 <_vfiprintf_r+0x18>
 8021608:	6a03      	ldr	r3, [r0, #32]
 802160a:	b90b      	cbnz	r3, 8021610 <_vfiprintf_r+0x18>
 802160c:	f7fd f98a 	bl	801e924 <__sinit>
 8021610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021612:	07d9      	lsls	r1, r3, #31
 8021614:	d405      	bmi.n	8021622 <_vfiprintf_r+0x2a>
 8021616:	89ab      	ldrh	r3, [r5, #12]
 8021618:	059a      	lsls	r2, r3, #22
 802161a:	d402      	bmi.n	8021622 <_vfiprintf_r+0x2a>
 802161c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802161e:	f7fd fcd8 	bl	801efd2 <__retarget_lock_acquire_recursive>
 8021622:	89ab      	ldrh	r3, [r5, #12]
 8021624:	071b      	lsls	r3, r3, #28
 8021626:	d501      	bpl.n	802162c <_vfiprintf_r+0x34>
 8021628:	692b      	ldr	r3, [r5, #16]
 802162a:	b99b      	cbnz	r3, 8021654 <_vfiprintf_r+0x5c>
 802162c:	4629      	mov	r1, r5
 802162e:	4630      	mov	r0, r6
 8021630:	f7fd fb52 	bl	801ecd8 <__swsetup_r>
 8021634:	b170      	cbz	r0, 8021654 <_vfiprintf_r+0x5c>
 8021636:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021638:	07dc      	lsls	r4, r3, #31
 802163a:	d504      	bpl.n	8021646 <_vfiprintf_r+0x4e>
 802163c:	f04f 30ff 	mov.w	r0, #4294967295
 8021640:	b01d      	add	sp, #116	@ 0x74
 8021642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021646:	89ab      	ldrh	r3, [r5, #12]
 8021648:	0598      	lsls	r0, r3, #22
 802164a:	d4f7      	bmi.n	802163c <_vfiprintf_r+0x44>
 802164c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802164e:	f7fd fcc1 	bl	801efd4 <__retarget_lock_release_recursive>
 8021652:	e7f3      	b.n	802163c <_vfiprintf_r+0x44>
 8021654:	2300      	movs	r3, #0
 8021656:	9309      	str	r3, [sp, #36]	@ 0x24
 8021658:	2320      	movs	r3, #32
 802165a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802165e:	f8cd 800c 	str.w	r8, [sp, #12]
 8021662:	2330      	movs	r3, #48	@ 0x30
 8021664:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021814 <_vfiprintf_r+0x21c>
 8021668:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802166c:	f04f 0901 	mov.w	r9, #1
 8021670:	4623      	mov	r3, r4
 8021672:	469a      	mov	sl, r3
 8021674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021678:	b10a      	cbz	r2, 802167e <_vfiprintf_r+0x86>
 802167a:	2a25      	cmp	r2, #37	@ 0x25
 802167c:	d1f9      	bne.n	8021672 <_vfiprintf_r+0x7a>
 802167e:	ebba 0b04 	subs.w	fp, sl, r4
 8021682:	d00b      	beq.n	802169c <_vfiprintf_r+0xa4>
 8021684:	465b      	mov	r3, fp
 8021686:	4622      	mov	r2, r4
 8021688:	4629      	mov	r1, r5
 802168a:	4630      	mov	r0, r6
 802168c:	f7ff ffa1 	bl	80215d2 <__sfputs_r>
 8021690:	3001      	adds	r0, #1
 8021692:	f000 80a7 	beq.w	80217e4 <_vfiprintf_r+0x1ec>
 8021696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021698:	445a      	add	r2, fp
 802169a:	9209      	str	r2, [sp, #36]	@ 0x24
 802169c:	f89a 3000 	ldrb.w	r3, [sl]
 80216a0:	2b00      	cmp	r3, #0
 80216a2:	f000 809f 	beq.w	80217e4 <_vfiprintf_r+0x1ec>
 80216a6:	2300      	movs	r3, #0
 80216a8:	f04f 32ff 	mov.w	r2, #4294967295
 80216ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80216b0:	f10a 0a01 	add.w	sl, sl, #1
 80216b4:	9304      	str	r3, [sp, #16]
 80216b6:	9307      	str	r3, [sp, #28]
 80216b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80216bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80216be:	4654      	mov	r4, sl
 80216c0:	2205      	movs	r2, #5
 80216c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216c6:	4853      	ldr	r0, [pc, #332]	@ (8021814 <_vfiprintf_r+0x21c>)
 80216c8:	f7de fd9a 	bl	8000200 <memchr>
 80216cc:	9a04      	ldr	r2, [sp, #16]
 80216ce:	b9d8      	cbnz	r0, 8021708 <_vfiprintf_r+0x110>
 80216d0:	06d1      	lsls	r1, r2, #27
 80216d2:	bf44      	itt	mi
 80216d4:	2320      	movmi	r3, #32
 80216d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80216da:	0713      	lsls	r3, r2, #28
 80216dc:	bf44      	itt	mi
 80216de:	232b      	movmi	r3, #43	@ 0x2b
 80216e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80216e4:	f89a 3000 	ldrb.w	r3, [sl]
 80216e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80216ea:	d015      	beq.n	8021718 <_vfiprintf_r+0x120>
 80216ec:	9a07      	ldr	r2, [sp, #28]
 80216ee:	4654      	mov	r4, sl
 80216f0:	2000      	movs	r0, #0
 80216f2:	f04f 0c0a 	mov.w	ip, #10
 80216f6:	4621      	mov	r1, r4
 80216f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80216fc:	3b30      	subs	r3, #48	@ 0x30
 80216fe:	2b09      	cmp	r3, #9
 8021700:	d94b      	bls.n	802179a <_vfiprintf_r+0x1a2>
 8021702:	b1b0      	cbz	r0, 8021732 <_vfiprintf_r+0x13a>
 8021704:	9207      	str	r2, [sp, #28]
 8021706:	e014      	b.n	8021732 <_vfiprintf_r+0x13a>
 8021708:	eba0 0308 	sub.w	r3, r0, r8
 802170c:	fa09 f303 	lsl.w	r3, r9, r3
 8021710:	4313      	orrs	r3, r2
 8021712:	9304      	str	r3, [sp, #16]
 8021714:	46a2      	mov	sl, r4
 8021716:	e7d2      	b.n	80216be <_vfiprintf_r+0xc6>
 8021718:	9b03      	ldr	r3, [sp, #12]
 802171a:	1d19      	adds	r1, r3, #4
 802171c:	681b      	ldr	r3, [r3, #0]
 802171e:	9103      	str	r1, [sp, #12]
 8021720:	2b00      	cmp	r3, #0
 8021722:	bfbb      	ittet	lt
 8021724:	425b      	neglt	r3, r3
 8021726:	f042 0202 	orrlt.w	r2, r2, #2
 802172a:	9307      	strge	r3, [sp, #28]
 802172c:	9307      	strlt	r3, [sp, #28]
 802172e:	bfb8      	it	lt
 8021730:	9204      	strlt	r2, [sp, #16]
 8021732:	7823      	ldrb	r3, [r4, #0]
 8021734:	2b2e      	cmp	r3, #46	@ 0x2e
 8021736:	d10a      	bne.n	802174e <_vfiprintf_r+0x156>
 8021738:	7863      	ldrb	r3, [r4, #1]
 802173a:	2b2a      	cmp	r3, #42	@ 0x2a
 802173c:	d132      	bne.n	80217a4 <_vfiprintf_r+0x1ac>
 802173e:	9b03      	ldr	r3, [sp, #12]
 8021740:	1d1a      	adds	r2, r3, #4
 8021742:	681b      	ldr	r3, [r3, #0]
 8021744:	9203      	str	r2, [sp, #12]
 8021746:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802174a:	3402      	adds	r4, #2
 802174c:	9305      	str	r3, [sp, #20]
 802174e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021824 <_vfiprintf_r+0x22c>
 8021752:	7821      	ldrb	r1, [r4, #0]
 8021754:	2203      	movs	r2, #3
 8021756:	4650      	mov	r0, sl
 8021758:	f7de fd52 	bl	8000200 <memchr>
 802175c:	b138      	cbz	r0, 802176e <_vfiprintf_r+0x176>
 802175e:	9b04      	ldr	r3, [sp, #16]
 8021760:	eba0 000a 	sub.w	r0, r0, sl
 8021764:	2240      	movs	r2, #64	@ 0x40
 8021766:	4082      	lsls	r2, r0
 8021768:	4313      	orrs	r3, r2
 802176a:	3401      	adds	r4, #1
 802176c:	9304      	str	r3, [sp, #16]
 802176e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021772:	4829      	ldr	r0, [pc, #164]	@ (8021818 <_vfiprintf_r+0x220>)
 8021774:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021778:	2206      	movs	r2, #6
 802177a:	f7de fd41 	bl	8000200 <memchr>
 802177e:	2800      	cmp	r0, #0
 8021780:	d03f      	beq.n	8021802 <_vfiprintf_r+0x20a>
 8021782:	4b26      	ldr	r3, [pc, #152]	@ (802181c <_vfiprintf_r+0x224>)
 8021784:	bb1b      	cbnz	r3, 80217ce <_vfiprintf_r+0x1d6>
 8021786:	9b03      	ldr	r3, [sp, #12]
 8021788:	3307      	adds	r3, #7
 802178a:	f023 0307 	bic.w	r3, r3, #7
 802178e:	3308      	adds	r3, #8
 8021790:	9303      	str	r3, [sp, #12]
 8021792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021794:	443b      	add	r3, r7
 8021796:	9309      	str	r3, [sp, #36]	@ 0x24
 8021798:	e76a      	b.n	8021670 <_vfiprintf_r+0x78>
 802179a:	fb0c 3202 	mla	r2, ip, r2, r3
 802179e:	460c      	mov	r4, r1
 80217a0:	2001      	movs	r0, #1
 80217a2:	e7a8      	b.n	80216f6 <_vfiprintf_r+0xfe>
 80217a4:	2300      	movs	r3, #0
 80217a6:	3401      	adds	r4, #1
 80217a8:	9305      	str	r3, [sp, #20]
 80217aa:	4619      	mov	r1, r3
 80217ac:	f04f 0c0a 	mov.w	ip, #10
 80217b0:	4620      	mov	r0, r4
 80217b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80217b6:	3a30      	subs	r2, #48	@ 0x30
 80217b8:	2a09      	cmp	r2, #9
 80217ba:	d903      	bls.n	80217c4 <_vfiprintf_r+0x1cc>
 80217bc:	2b00      	cmp	r3, #0
 80217be:	d0c6      	beq.n	802174e <_vfiprintf_r+0x156>
 80217c0:	9105      	str	r1, [sp, #20]
 80217c2:	e7c4      	b.n	802174e <_vfiprintf_r+0x156>
 80217c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80217c8:	4604      	mov	r4, r0
 80217ca:	2301      	movs	r3, #1
 80217cc:	e7f0      	b.n	80217b0 <_vfiprintf_r+0x1b8>
 80217ce:	ab03      	add	r3, sp, #12
 80217d0:	9300      	str	r3, [sp, #0]
 80217d2:	462a      	mov	r2, r5
 80217d4:	4b12      	ldr	r3, [pc, #72]	@ (8021820 <_vfiprintf_r+0x228>)
 80217d6:	a904      	add	r1, sp, #16
 80217d8:	4630      	mov	r0, r6
 80217da:	f7fc fa4b 	bl	801dc74 <_printf_float>
 80217de:	4607      	mov	r7, r0
 80217e0:	1c78      	adds	r0, r7, #1
 80217e2:	d1d6      	bne.n	8021792 <_vfiprintf_r+0x19a>
 80217e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80217e6:	07d9      	lsls	r1, r3, #31
 80217e8:	d405      	bmi.n	80217f6 <_vfiprintf_r+0x1fe>
 80217ea:	89ab      	ldrh	r3, [r5, #12]
 80217ec:	059a      	lsls	r2, r3, #22
 80217ee:	d402      	bmi.n	80217f6 <_vfiprintf_r+0x1fe>
 80217f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80217f2:	f7fd fbef 	bl	801efd4 <__retarget_lock_release_recursive>
 80217f6:	89ab      	ldrh	r3, [r5, #12]
 80217f8:	065b      	lsls	r3, r3, #25
 80217fa:	f53f af1f 	bmi.w	802163c <_vfiprintf_r+0x44>
 80217fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021800:	e71e      	b.n	8021640 <_vfiprintf_r+0x48>
 8021802:	ab03      	add	r3, sp, #12
 8021804:	9300      	str	r3, [sp, #0]
 8021806:	462a      	mov	r2, r5
 8021808:	4b05      	ldr	r3, [pc, #20]	@ (8021820 <_vfiprintf_r+0x228>)
 802180a:	a904      	add	r1, sp, #16
 802180c:	4630      	mov	r0, r6
 802180e:	f7fc fcc9 	bl	801e1a4 <_printf_i>
 8021812:	e7e4      	b.n	80217de <_vfiprintf_r+0x1e6>
 8021814:	08025930 	.word	0x08025930
 8021818:	0802593a 	.word	0x0802593a
 802181c:	0801dc75 	.word	0x0801dc75
 8021820:	080215d3 	.word	0x080215d3
 8021824:	08025936 	.word	0x08025936

08021828 <__sflush_r>:
 8021828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021830:	0716      	lsls	r6, r2, #28
 8021832:	4605      	mov	r5, r0
 8021834:	460c      	mov	r4, r1
 8021836:	d454      	bmi.n	80218e2 <__sflush_r+0xba>
 8021838:	684b      	ldr	r3, [r1, #4]
 802183a:	2b00      	cmp	r3, #0
 802183c:	dc02      	bgt.n	8021844 <__sflush_r+0x1c>
 802183e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021840:	2b00      	cmp	r3, #0
 8021842:	dd48      	ble.n	80218d6 <__sflush_r+0xae>
 8021844:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021846:	2e00      	cmp	r6, #0
 8021848:	d045      	beq.n	80218d6 <__sflush_r+0xae>
 802184a:	2300      	movs	r3, #0
 802184c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021850:	682f      	ldr	r7, [r5, #0]
 8021852:	6a21      	ldr	r1, [r4, #32]
 8021854:	602b      	str	r3, [r5, #0]
 8021856:	d030      	beq.n	80218ba <__sflush_r+0x92>
 8021858:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802185a:	89a3      	ldrh	r3, [r4, #12]
 802185c:	0759      	lsls	r1, r3, #29
 802185e:	d505      	bpl.n	802186c <__sflush_r+0x44>
 8021860:	6863      	ldr	r3, [r4, #4]
 8021862:	1ad2      	subs	r2, r2, r3
 8021864:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021866:	b10b      	cbz	r3, 802186c <__sflush_r+0x44>
 8021868:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802186a:	1ad2      	subs	r2, r2, r3
 802186c:	2300      	movs	r3, #0
 802186e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021870:	6a21      	ldr	r1, [r4, #32]
 8021872:	4628      	mov	r0, r5
 8021874:	47b0      	blx	r6
 8021876:	1c43      	adds	r3, r0, #1
 8021878:	89a3      	ldrh	r3, [r4, #12]
 802187a:	d106      	bne.n	802188a <__sflush_r+0x62>
 802187c:	6829      	ldr	r1, [r5, #0]
 802187e:	291d      	cmp	r1, #29
 8021880:	d82b      	bhi.n	80218da <__sflush_r+0xb2>
 8021882:	4a2a      	ldr	r2, [pc, #168]	@ (802192c <__sflush_r+0x104>)
 8021884:	410a      	asrs	r2, r1
 8021886:	07d6      	lsls	r6, r2, #31
 8021888:	d427      	bmi.n	80218da <__sflush_r+0xb2>
 802188a:	2200      	movs	r2, #0
 802188c:	6062      	str	r2, [r4, #4]
 802188e:	04d9      	lsls	r1, r3, #19
 8021890:	6922      	ldr	r2, [r4, #16]
 8021892:	6022      	str	r2, [r4, #0]
 8021894:	d504      	bpl.n	80218a0 <__sflush_r+0x78>
 8021896:	1c42      	adds	r2, r0, #1
 8021898:	d101      	bne.n	802189e <__sflush_r+0x76>
 802189a:	682b      	ldr	r3, [r5, #0]
 802189c:	b903      	cbnz	r3, 80218a0 <__sflush_r+0x78>
 802189e:	6560      	str	r0, [r4, #84]	@ 0x54
 80218a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80218a2:	602f      	str	r7, [r5, #0]
 80218a4:	b1b9      	cbz	r1, 80218d6 <__sflush_r+0xae>
 80218a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80218aa:	4299      	cmp	r1, r3
 80218ac:	d002      	beq.n	80218b4 <__sflush_r+0x8c>
 80218ae:	4628      	mov	r0, r5
 80218b0:	f7fe fa1a 	bl	801fce8 <_free_r>
 80218b4:	2300      	movs	r3, #0
 80218b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80218b8:	e00d      	b.n	80218d6 <__sflush_r+0xae>
 80218ba:	2301      	movs	r3, #1
 80218bc:	4628      	mov	r0, r5
 80218be:	47b0      	blx	r6
 80218c0:	4602      	mov	r2, r0
 80218c2:	1c50      	adds	r0, r2, #1
 80218c4:	d1c9      	bne.n	802185a <__sflush_r+0x32>
 80218c6:	682b      	ldr	r3, [r5, #0]
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	d0c6      	beq.n	802185a <__sflush_r+0x32>
 80218cc:	2b1d      	cmp	r3, #29
 80218ce:	d001      	beq.n	80218d4 <__sflush_r+0xac>
 80218d0:	2b16      	cmp	r3, #22
 80218d2:	d11e      	bne.n	8021912 <__sflush_r+0xea>
 80218d4:	602f      	str	r7, [r5, #0]
 80218d6:	2000      	movs	r0, #0
 80218d8:	e022      	b.n	8021920 <__sflush_r+0xf8>
 80218da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80218de:	b21b      	sxth	r3, r3
 80218e0:	e01b      	b.n	802191a <__sflush_r+0xf2>
 80218e2:	690f      	ldr	r7, [r1, #16]
 80218e4:	2f00      	cmp	r7, #0
 80218e6:	d0f6      	beq.n	80218d6 <__sflush_r+0xae>
 80218e8:	0793      	lsls	r3, r2, #30
 80218ea:	680e      	ldr	r6, [r1, #0]
 80218ec:	bf08      	it	eq
 80218ee:	694b      	ldreq	r3, [r1, #20]
 80218f0:	600f      	str	r7, [r1, #0]
 80218f2:	bf18      	it	ne
 80218f4:	2300      	movne	r3, #0
 80218f6:	eba6 0807 	sub.w	r8, r6, r7
 80218fa:	608b      	str	r3, [r1, #8]
 80218fc:	f1b8 0f00 	cmp.w	r8, #0
 8021900:	dde9      	ble.n	80218d6 <__sflush_r+0xae>
 8021902:	6a21      	ldr	r1, [r4, #32]
 8021904:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021906:	4643      	mov	r3, r8
 8021908:	463a      	mov	r2, r7
 802190a:	4628      	mov	r0, r5
 802190c:	47b0      	blx	r6
 802190e:	2800      	cmp	r0, #0
 8021910:	dc08      	bgt.n	8021924 <__sflush_r+0xfc>
 8021912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802191a:	81a3      	strh	r3, [r4, #12]
 802191c:	f04f 30ff 	mov.w	r0, #4294967295
 8021920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021924:	4407      	add	r7, r0
 8021926:	eba8 0800 	sub.w	r8, r8, r0
 802192a:	e7e7      	b.n	80218fc <__sflush_r+0xd4>
 802192c:	dfbffffe 	.word	0xdfbffffe

08021930 <_fflush_r>:
 8021930:	b538      	push	{r3, r4, r5, lr}
 8021932:	690b      	ldr	r3, [r1, #16]
 8021934:	4605      	mov	r5, r0
 8021936:	460c      	mov	r4, r1
 8021938:	b913      	cbnz	r3, 8021940 <_fflush_r+0x10>
 802193a:	2500      	movs	r5, #0
 802193c:	4628      	mov	r0, r5
 802193e:	bd38      	pop	{r3, r4, r5, pc}
 8021940:	b118      	cbz	r0, 802194a <_fflush_r+0x1a>
 8021942:	6a03      	ldr	r3, [r0, #32]
 8021944:	b90b      	cbnz	r3, 802194a <_fflush_r+0x1a>
 8021946:	f7fc ffed 	bl	801e924 <__sinit>
 802194a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802194e:	2b00      	cmp	r3, #0
 8021950:	d0f3      	beq.n	802193a <_fflush_r+0xa>
 8021952:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021954:	07d0      	lsls	r0, r2, #31
 8021956:	d404      	bmi.n	8021962 <_fflush_r+0x32>
 8021958:	0599      	lsls	r1, r3, #22
 802195a:	d402      	bmi.n	8021962 <_fflush_r+0x32>
 802195c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802195e:	f7fd fb38 	bl	801efd2 <__retarget_lock_acquire_recursive>
 8021962:	4628      	mov	r0, r5
 8021964:	4621      	mov	r1, r4
 8021966:	f7ff ff5f 	bl	8021828 <__sflush_r>
 802196a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802196c:	07da      	lsls	r2, r3, #31
 802196e:	4605      	mov	r5, r0
 8021970:	d4e4      	bmi.n	802193c <_fflush_r+0xc>
 8021972:	89a3      	ldrh	r3, [r4, #12]
 8021974:	059b      	lsls	r3, r3, #22
 8021976:	d4e1      	bmi.n	802193c <_fflush_r+0xc>
 8021978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802197a:	f7fd fb2b 	bl	801efd4 <__retarget_lock_release_recursive>
 802197e:	e7dd      	b.n	802193c <_fflush_r+0xc>

08021980 <fiprintf>:
 8021980:	b40e      	push	{r1, r2, r3}
 8021982:	b503      	push	{r0, r1, lr}
 8021984:	4601      	mov	r1, r0
 8021986:	ab03      	add	r3, sp, #12
 8021988:	4805      	ldr	r0, [pc, #20]	@ (80219a0 <fiprintf+0x20>)
 802198a:	f853 2b04 	ldr.w	r2, [r3], #4
 802198e:	6800      	ldr	r0, [r0, #0]
 8021990:	9301      	str	r3, [sp, #4]
 8021992:	f7ff fe31 	bl	80215f8 <_vfiprintf_r>
 8021996:	b002      	add	sp, #8
 8021998:	f85d eb04 	ldr.w	lr, [sp], #4
 802199c:	b003      	add	sp, #12
 802199e:	4770      	bx	lr
 80219a0:	20000148 	.word	0x20000148

080219a4 <__swhatbuf_r>:
 80219a4:	b570      	push	{r4, r5, r6, lr}
 80219a6:	460c      	mov	r4, r1
 80219a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219ac:	2900      	cmp	r1, #0
 80219ae:	b096      	sub	sp, #88	@ 0x58
 80219b0:	4615      	mov	r5, r2
 80219b2:	461e      	mov	r6, r3
 80219b4:	da0d      	bge.n	80219d2 <__swhatbuf_r+0x2e>
 80219b6:	89a3      	ldrh	r3, [r4, #12]
 80219b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80219bc:	f04f 0100 	mov.w	r1, #0
 80219c0:	bf14      	ite	ne
 80219c2:	2340      	movne	r3, #64	@ 0x40
 80219c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80219c8:	2000      	movs	r0, #0
 80219ca:	6031      	str	r1, [r6, #0]
 80219cc:	602b      	str	r3, [r5, #0]
 80219ce:	b016      	add	sp, #88	@ 0x58
 80219d0:	bd70      	pop	{r4, r5, r6, pc}
 80219d2:	466a      	mov	r2, sp
 80219d4:	f000 f85a 	bl	8021a8c <_fstat_r>
 80219d8:	2800      	cmp	r0, #0
 80219da:	dbec      	blt.n	80219b6 <__swhatbuf_r+0x12>
 80219dc:	9901      	ldr	r1, [sp, #4]
 80219de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80219e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80219e6:	4259      	negs	r1, r3
 80219e8:	4159      	adcs	r1, r3
 80219ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80219ee:	e7eb      	b.n	80219c8 <__swhatbuf_r+0x24>

080219f0 <__smakebuf_r>:
 80219f0:	898b      	ldrh	r3, [r1, #12]
 80219f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80219f4:	079d      	lsls	r5, r3, #30
 80219f6:	4606      	mov	r6, r0
 80219f8:	460c      	mov	r4, r1
 80219fa:	d507      	bpl.n	8021a0c <__smakebuf_r+0x1c>
 80219fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021a00:	6023      	str	r3, [r4, #0]
 8021a02:	6123      	str	r3, [r4, #16]
 8021a04:	2301      	movs	r3, #1
 8021a06:	6163      	str	r3, [r4, #20]
 8021a08:	b003      	add	sp, #12
 8021a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a0c:	ab01      	add	r3, sp, #4
 8021a0e:	466a      	mov	r2, sp
 8021a10:	f7ff ffc8 	bl	80219a4 <__swhatbuf_r>
 8021a14:	9f00      	ldr	r7, [sp, #0]
 8021a16:	4605      	mov	r5, r0
 8021a18:	4639      	mov	r1, r7
 8021a1a:	4630      	mov	r0, r6
 8021a1c:	f7fb ff78 	bl	801d910 <_malloc_r>
 8021a20:	b948      	cbnz	r0, 8021a36 <__smakebuf_r+0x46>
 8021a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a26:	059a      	lsls	r2, r3, #22
 8021a28:	d4ee      	bmi.n	8021a08 <__smakebuf_r+0x18>
 8021a2a:	f023 0303 	bic.w	r3, r3, #3
 8021a2e:	f043 0302 	orr.w	r3, r3, #2
 8021a32:	81a3      	strh	r3, [r4, #12]
 8021a34:	e7e2      	b.n	80219fc <__smakebuf_r+0xc>
 8021a36:	89a3      	ldrh	r3, [r4, #12]
 8021a38:	6020      	str	r0, [r4, #0]
 8021a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021a3e:	81a3      	strh	r3, [r4, #12]
 8021a40:	9b01      	ldr	r3, [sp, #4]
 8021a42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021a46:	b15b      	cbz	r3, 8021a60 <__smakebuf_r+0x70>
 8021a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021a4c:	4630      	mov	r0, r6
 8021a4e:	f000 f82f 	bl	8021ab0 <_isatty_r>
 8021a52:	b128      	cbz	r0, 8021a60 <__smakebuf_r+0x70>
 8021a54:	89a3      	ldrh	r3, [r4, #12]
 8021a56:	f023 0303 	bic.w	r3, r3, #3
 8021a5a:	f043 0301 	orr.w	r3, r3, #1
 8021a5e:	81a3      	strh	r3, [r4, #12]
 8021a60:	89a3      	ldrh	r3, [r4, #12]
 8021a62:	431d      	orrs	r5, r3
 8021a64:	81a5      	strh	r5, [r4, #12]
 8021a66:	e7cf      	b.n	8021a08 <__smakebuf_r+0x18>

08021a68 <strncmp>:
 8021a68:	b510      	push	{r4, lr}
 8021a6a:	b16a      	cbz	r2, 8021a88 <strncmp+0x20>
 8021a6c:	3901      	subs	r1, #1
 8021a6e:	1884      	adds	r4, r0, r2
 8021a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021a74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021a78:	429a      	cmp	r2, r3
 8021a7a:	d103      	bne.n	8021a84 <strncmp+0x1c>
 8021a7c:	42a0      	cmp	r0, r4
 8021a7e:	d001      	beq.n	8021a84 <strncmp+0x1c>
 8021a80:	2a00      	cmp	r2, #0
 8021a82:	d1f5      	bne.n	8021a70 <strncmp+0x8>
 8021a84:	1ad0      	subs	r0, r2, r3
 8021a86:	bd10      	pop	{r4, pc}
 8021a88:	4610      	mov	r0, r2
 8021a8a:	e7fc      	b.n	8021a86 <strncmp+0x1e>

08021a8c <_fstat_r>:
 8021a8c:	b538      	push	{r3, r4, r5, lr}
 8021a8e:	4d07      	ldr	r5, [pc, #28]	@ (8021aac <_fstat_r+0x20>)
 8021a90:	2300      	movs	r3, #0
 8021a92:	4604      	mov	r4, r0
 8021a94:	4608      	mov	r0, r1
 8021a96:	4611      	mov	r1, r2
 8021a98:	602b      	str	r3, [r5, #0]
 8021a9a:	f7e2 fa3d 	bl	8003f18 <_fstat>
 8021a9e:	1c43      	adds	r3, r0, #1
 8021aa0:	d102      	bne.n	8021aa8 <_fstat_r+0x1c>
 8021aa2:	682b      	ldr	r3, [r5, #0]
 8021aa4:	b103      	cbz	r3, 8021aa8 <_fstat_r+0x1c>
 8021aa6:	6023      	str	r3, [r4, #0]
 8021aa8:	bd38      	pop	{r3, r4, r5, pc}
 8021aaa:	bf00      	nop
 8021aac:	200037a8 	.word	0x200037a8

08021ab0 <_isatty_r>:
 8021ab0:	b538      	push	{r3, r4, r5, lr}
 8021ab2:	4d06      	ldr	r5, [pc, #24]	@ (8021acc <_isatty_r+0x1c>)
 8021ab4:	2300      	movs	r3, #0
 8021ab6:	4604      	mov	r4, r0
 8021ab8:	4608      	mov	r0, r1
 8021aba:	602b      	str	r3, [r5, #0]
 8021abc:	f7e2 fa3c 	bl	8003f38 <_isatty>
 8021ac0:	1c43      	adds	r3, r0, #1
 8021ac2:	d102      	bne.n	8021aca <_isatty_r+0x1a>
 8021ac4:	682b      	ldr	r3, [r5, #0]
 8021ac6:	b103      	cbz	r3, 8021aca <_isatty_r+0x1a>
 8021ac8:	6023      	str	r3, [r4, #0]
 8021aca:	bd38      	pop	{r3, r4, r5, pc}
 8021acc:	200037a8 	.word	0x200037a8

08021ad0 <nan>:
 8021ad0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021ad8 <nan+0x8>
 8021ad4:	4770      	bx	lr
 8021ad6:	bf00      	nop
 8021ad8:	00000000 	.word	0x00000000
 8021adc:	7ff80000 	.word	0x7ff80000

08021ae0 <abort>:
 8021ae0:	b508      	push	{r3, lr}
 8021ae2:	2006      	movs	r0, #6
 8021ae4:	f000 fbc4 	bl	8022270 <raise>
 8021ae8:	2001      	movs	r0, #1
 8021aea:	f7e2 f9c5 	bl	8003e78 <_exit>

08021aee <_calloc_r>:
 8021aee:	b570      	push	{r4, r5, r6, lr}
 8021af0:	fba1 5402 	umull	r5, r4, r1, r2
 8021af4:	b93c      	cbnz	r4, 8021b06 <_calloc_r+0x18>
 8021af6:	4629      	mov	r1, r5
 8021af8:	f7fb ff0a 	bl	801d910 <_malloc_r>
 8021afc:	4606      	mov	r6, r0
 8021afe:	b928      	cbnz	r0, 8021b0c <_calloc_r+0x1e>
 8021b00:	2600      	movs	r6, #0
 8021b02:	4630      	mov	r0, r6
 8021b04:	bd70      	pop	{r4, r5, r6, pc}
 8021b06:	220c      	movs	r2, #12
 8021b08:	6002      	str	r2, [r0, #0]
 8021b0a:	e7f9      	b.n	8021b00 <_calloc_r+0x12>
 8021b0c:	462a      	mov	r2, r5
 8021b0e:	4621      	mov	r1, r4
 8021b10:	f7fd f952 	bl	801edb8 <memset>
 8021b14:	e7f5      	b.n	8021b02 <_calloc_r+0x14>

08021b16 <rshift>:
 8021b16:	6903      	ldr	r3, [r0, #16]
 8021b18:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021b20:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021b24:	f100 0414 	add.w	r4, r0, #20
 8021b28:	dd45      	ble.n	8021bb6 <rshift+0xa0>
 8021b2a:	f011 011f 	ands.w	r1, r1, #31
 8021b2e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021b32:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021b36:	d10c      	bne.n	8021b52 <rshift+0x3c>
 8021b38:	f100 0710 	add.w	r7, r0, #16
 8021b3c:	4629      	mov	r1, r5
 8021b3e:	42b1      	cmp	r1, r6
 8021b40:	d334      	bcc.n	8021bac <rshift+0x96>
 8021b42:	1a9b      	subs	r3, r3, r2
 8021b44:	009b      	lsls	r3, r3, #2
 8021b46:	1eea      	subs	r2, r5, #3
 8021b48:	4296      	cmp	r6, r2
 8021b4a:	bf38      	it	cc
 8021b4c:	2300      	movcc	r3, #0
 8021b4e:	4423      	add	r3, r4
 8021b50:	e015      	b.n	8021b7e <rshift+0x68>
 8021b52:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021b56:	f1c1 0820 	rsb	r8, r1, #32
 8021b5a:	40cf      	lsrs	r7, r1
 8021b5c:	f105 0e04 	add.w	lr, r5, #4
 8021b60:	46a1      	mov	r9, r4
 8021b62:	4576      	cmp	r6, lr
 8021b64:	46f4      	mov	ip, lr
 8021b66:	d815      	bhi.n	8021b94 <rshift+0x7e>
 8021b68:	1a9a      	subs	r2, r3, r2
 8021b6a:	0092      	lsls	r2, r2, #2
 8021b6c:	3a04      	subs	r2, #4
 8021b6e:	3501      	adds	r5, #1
 8021b70:	42ae      	cmp	r6, r5
 8021b72:	bf38      	it	cc
 8021b74:	2200      	movcc	r2, #0
 8021b76:	18a3      	adds	r3, r4, r2
 8021b78:	50a7      	str	r7, [r4, r2]
 8021b7a:	b107      	cbz	r7, 8021b7e <rshift+0x68>
 8021b7c:	3304      	adds	r3, #4
 8021b7e:	1b1a      	subs	r2, r3, r4
 8021b80:	42a3      	cmp	r3, r4
 8021b82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021b86:	bf08      	it	eq
 8021b88:	2300      	moveq	r3, #0
 8021b8a:	6102      	str	r2, [r0, #16]
 8021b8c:	bf08      	it	eq
 8021b8e:	6143      	streq	r3, [r0, #20]
 8021b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021b94:	f8dc c000 	ldr.w	ip, [ip]
 8021b98:	fa0c fc08 	lsl.w	ip, ip, r8
 8021b9c:	ea4c 0707 	orr.w	r7, ip, r7
 8021ba0:	f849 7b04 	str.w	r7, [r9], #4
 8021ba4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021ba8:	40cf      	lsrs	r7, r1
 8021baa:	e7da      	b.n	8021b62 <rshift+0x4c>
 8021bac:	f851 cb04 	ldr.w	ip, [r1], #4
 8021bb0:	f847 cf04 	str.w	ip, [r7, #4]!
 8021bb4:	e7c3      	b.n	8021b3e <rshift+0x28>
 8021bb6:	4623      	mov	r3, r4
 8021bb8:	e7e1      	b.n	8021b7e <rshift+0x68>

08021bba <__hexdig_fun>:
 8021bba:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8021bbe:	2b09      	cmp	r3, #9
 8021bc0:	d802      	bhi.n	8021bc8 <__hexdig_fun+0xe>
 8021bc2:	3820      	subs	r0, #32
 8021bc4:	b2c0      	uxtb	r0, r0
 8021bc6:	4770      	bx	lr
 8021bc8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021bcc:	2b05      	cmp	r3, #5
 8021bce:	d801      	bhi.n	8021bd4 <__hexdig_fun+0x1a>
 8021bd0:	3847      	subs	r0, #71	@ 0x47
 8021bd2:	e7f7      	b.n	8021bc4 <__hexdig_fun+0xa>
 8021bd4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021bd8:	2b05      	cmp	r3, #5
 8021bda:	d801      	bhi.n	8021be0 <__hexdig_fun+0x26>
 8021bdc:	3827      	subs	r0, #39	@ 0x27
 8021bde:	e7f1      	b.n	8021bc4 <__hexdig_fun+0xa>
 8021be0:	2000      	movs	r0, #0
 8021be2:	4770      	bx	lr

08021be4 <__gethex>:
 8021be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021be8:	b085      	sub	sp, #20
 8021bea:	468a      	mov	sl, r1
 8021bec:	9302      	str	r3, [sp, #8]
 8021bee:	680b      	ldr	r3, [r1, #0]
 8021bf0:	9001      	str	r0, [sp, #4]
 8021bf2:	4690      	mov	r8, r2
 8021bf4:	1c9c      	adds	r4, r3, #2
 8021bf6:	46a1      	mov	r9, r4
 8021bf8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8021bfc:	2830      	cmp	r0, #48	@ 0x30
 8021bfe:	d0fa      	beq.n	8021bf6 <__gethex+0x12>
 8021c00:	eba9 0303 	sub.w	r3, r9, r3
 8021c04:	f1a3 0b02 	sub.w	fp, r3, #2
 8021c08:	f7ff ffd7 	bl	8021bba <__hexdig_fun>
 8021c0c:	4605      	mov	r5, r0
 8021c0e:	2800      	cmp	r0, #0
 8021c10:	d168      	bne.n	8021ce4 <__gethex+0x100>
 8021c12:	49a0      	ldr	r1, [pc, #640]	@ (8021e94 <__gethex+0x2b0>)
 8021c14:	2201      	movs	r2, #1
 8021c16:	4648      	mov	r0, r9
 8021c18:	f7ff ff26 	bl	8021a68 <strncmp>
 8021c1c:	4607      	mov	r7, r0
 8021c1e:	2800      	cmp	r0, #0
 8021c20:	d167      	bne.n	8021cf2 <__gethex+0x10e>
 8021c22:	f899 0001 	ldrb.w	r0, [r9, #1]
 8021c26:	4626      	mov	r6, r4
 8021c28:	f7ff ffc7 	bl	8021bba <__hexdig_fun>
 8021c2c:	2800      	cmp	r0, #0
 8021c2e:	d062      	beq.n	8021cf6 <__gethex+0x112>
 8021c30:	4623      	mov	r3, r4
 8021c32:	7818      	ldrb	r0, [r3, #0]
 8021c34:	2830      	cmp	r0, #48	@ 0x30
 8021c36:	4699      	mov	r9, r3
 8021c38:	f103 0301 	add.w	r3, r3, #1
 8021c3c:	d0f9      	beq.n	8021c32 <__gethex+0x4e>
 8021c3e:	f7ff ffbc 	bl	8021bba <__hexdig_fun>
 8021c42:	fab0 f580 	clz	r5, r0
 8021c46:	096d      	lsrs	r5, r5, #5
 8021c48:	f04f 0b01 	mov.w	fp, #1
 8021c4c:	464a      	mov	r2, r9
 8021c4e:	4616      	mov	r6, r2
 8021c50:	3201      	adds	r2, #1
 8021c52:	7830      	ldrb	r0, [r6, #0]
 8021c54:	f7ff ffb1 	bl	8021bba <__hexdig_fun>
 8021c58:	2800      	cmp	r0, #0
 8021c5a:	d1f8      	bne.n	8021c4e <__gethex+0x6a>
 8021c5c:	498d      	ldr	r1, [pc, #564]	@ (8021e94 <__gethex+0x2b0>)
 8021c5e:	2201      	movs	r2, #1
 8021c60:	4630      	mov	r0, r6
 8021c62:	f7ff ff01 	bl	8021a68 <strncmp>
 8021c66:	2800      	cmp	r0, #0
 8021c68:	d13f      	bne.n	8021cea <__gethex+0x106>
 8021c6a:	b944      	cbnz	r4, 8021c7e <__gethex+0x9a>
 8021c6c:	1c74      	adds	r4, r6, #1
 8021c6e:	4622      	mov	r2, r4
 8021c70:	4616      	mov	r6, r2
 8021c72:	3201      	adds	r2, #1
 8021c74:	7830      	ldrb	r0, [r6, #0]
 8021c76:	f7ff ffa0 	bl	8021bba <__hexdig_fun>
 8021c7a:	2800      	cmp	r0, #0
 8021c7c:	d1f8      	bne.n	8021c70 <__gethex+0x8c>
 8021c7e:	1ba4      	subs	r4, r4, r6
 8021c80:	00a7      	lsls	r7, r4, #2
 8021c82:	7833      	ldrb	r3, [r6, #0]
 8021c84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8021c88:	2b50      	cmp	r3, #80	@ 0x50
 8021c8a:	d13e      	bne.n	8021d0a <__gethex+0x126>
 8021c8c:	7873      	ldrb	r3, [r6, #1]
 8021c8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8021c90:	d033      	beq.n	8021cfa <__gethex+0x116>
 8021c92:	2b2d      	cmp	r3, #45	@ 0x2d
 8021c94:	d034      	beq.n	8021d00 <__gethex+0x11c>
 8021c96:	1c71      	adds	r1, r6, #1
 8021c98:	2400      	movs	r4, #0
 8021c9a:	7808      	ldrb	r0, [r1, #0]
 8021c9c:	f7ff ff8d 	bl	8021bba <__hexdig_fun>
 8021ca0:	1e43      	subs	r3, r0, #1
 8021ca2:	b2db      	uxtb	r3, r3
 8021ca4:	2b18      	cmp	r3, #24
 8021ca6:	d830      	bhi.n	8021d0a <__gethex+0x126>
 8021ca8:	f1a0 0210 	sub.w	r2, r0, #16
 8021cac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021cb0:	f7ff ff83 	bl	8021bba <__hexdig_fun>
 8021cb4:	f100 3cff 	add.w	ip, r0, #4294967295
 8021cb8:	fa5f fc8c 	uxtb.w	ip, ip
 8021cbc:	f1bc 0f18 	cmp.w	ip, #24
 8021cc0:	f04f 030a 	mov.w	r3, #10
 8021cc4:	d91e      	bls.n	8021d04 <__gethex+0x120>
 8021cc6:	b104      	cbz	r4, 8021cca <__gethex+0xe6>
 8021cc8:	4252      	negs	r2, r2
 8021cca:	4417      	add	r7, r2
 8021ccc:	f8ca 1000 	str.w	r1, [sl]
 8021cd0:	b1ed      	cbz	r5, 8021d0e <__gethex+0x12a>
 8021cd2:	f1bb 0f00 	cmp.w	fp, #0
 8021cd6:	bf0c      	ite	eq
 8021cd8:	2506      	moveq	r5, #6
 8021cda:	2500      	movne	r5, #0
 8021cdc:	4628      	mov	r0, r5
 8021cde:	b005      	add	sp, #20
 8021ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ce4:	2500      	movs	r5, #0
 8021ce6:	462c      	mov	r4, r5
 8021ce8:	e7b0      	b.n	8021c4c <__gethex+0x68>
 8021cea:	2c00      	cmp	r4, #0
 8021cec:	d1c7      	bne.n	8021c7e <__gethex+0x9a>
 8021cee:	4627      	mov	r7, r4
 8021cf0:	e7c7      	b.n	8021c82 <__gethex+0x9e>
 8021cf2:	464e      	mov	r6, r9
 8021cf4:	462f      	mov	r7, r5
 8021cf6:	2501      	movs	r5, #1
 8021cf8:	e7c3      	b.n	8021c82 <__gethex+0x9e>
 8021cfa:	2400      	movs	r4, #0
 8021cfc:	1cb1      	adds	r1, r6, #2
 8021cfe:	e7cc      	b.n	8021c9a <__gethex+0xb6>
 8021d00:	2401      	movs	r4, #1
 8021d02:	e7fb      	b.n	8021cfc <__gethex+0x118>
 8021d04:	fb03 0002 	mla	r0, r3, r2, r0
 8021d08:	e7ce      	b.n	8021ca8 <__gethex+0xc4>
 8021d0a:	4631      	mov	r1, r6
 8021d0c:	e7de      	b.n	8021ccc <__gethex+0xe8>
 8021d0e:	eba6 0309 	sub.w	r3, r6, r9
 8021d12:	3b01      	subs	r3, #1
 8021d14:	4629      	mov	r1, r5
 8021d16:	2b07      	cmp	r3, #7
 8021d18:	dc0a      	bgt.n	8021d30 <__gethex+0x14c>
 8021d1a:	9801      	ldr	r0, [sp, #4]
 8021d1c:	f7fe f82e 	bl	801fd7c <_Balloc>
 8021d20:	4604      	mov	r4, r0
 8021d22:	b940      	cbnz	r0, 8021d36 <__gethex+0x152>
 8021d24:	4b5c      	ldr	r3, [pc, #368]	@ (8021e98 <__gethex+0x2b4>)
 8021d26:	4602      	mov	r2, r0
 8021d28:	21e4      	movs	r1, #228	@ 0xe4
 8021d2a:	485c      	ldr	r0, [pc, #368]	@ (8021e9c <__gethex+0x2b8>)
 8021d2c:	f7fd f970 	bl	801f010 <__assert_func>
 8021d30:	3101      	adds	r1, #1
 8021d32:	105b      	asrs	r3, r3, #1
 8021d34:	e7ef      	b.n	8021d16 <__gethex+0x132>
 8021d36:	f100 0a14 	add.w	sl, r0, #20
 8021d3a:	2300      	movs	r3, #0
 8021d3c:	4655      	mov	r5, sl
 8021d3e:	469b      	mov	fp, r3
 8021d40:	45b1      	cmp	r9, r6
 8021d42:	d337      	bcc.n	8021db4 <__gethex+0x1d0>
 8021d44:	f845 bb04 	str.w	fp, [r5], #4
 8021d48:	eba5 050a 	sub.w	r5, r5, sl
 8021d4c:	10ad      	asrs	r5, r5, #2
 8021d4e:	6125      	str	r5, [r4, #16]
 8021d50:	4658      	mov	r0, fp
 8021d52:	f7fe f905 	bl	801ff60 <__hi0bits>
 8021d56:	016d      	lsls	r5, r5, #5
 8021d58:	f8d8 6000 	ldr.w	r6, [r8]
 8021d5c:	1a2d      	subs	r5, r5, r0
 8021d5e:	42b5      	cmp	r5, r6
 8021d60:	dd54      	ble.n	8021e0c <__gethex+0x228>
 8021d62:	1bad      	subs	r5, r5, r6
 8021d64:	4629      	mov	r1, r5
 8021d66:	4620      	mov	r0, r4
 8021d68:	f7fe fc99 	bl	802069e <__any_on>
 8021d6c:	4681      	mov	r9, r0
 8021d6e:	b178      	cbz	r0, 8021d90 <__gethex+0x1ac>
 8021d70:	1e6b      	subs	r3, r5, #1
 8021d72:	1159      	asrs	r1, r3, #5
 8021d74:	f003 021f 	and.w	r2, r3, #31
 8021d78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8021d7c:	f04f 0901 	mov.w	r9, #1
 8021d80:	fa09 f202 	lsl.w	r2, r9, r2
 8021d84:	420a      	tst	r2, r1
 8021d86:	d003      	beq.n	8021d90 <__gethex+0x1ac>
 8021d88:	454b      	cmp	r3, r9
 8021d8a:	dc36      	bgt.n	8021dfa <__gethex+0x216>
 8021d8c:	f04f 0902 	mov.w	r9, #2
 8021d90:	4629      	mov	r1, r5
 8021d92:	4620      	mov	r0, r4
 8021d94:	f7ff febf 	bl	8021b16 <rshift>
 8021d98:	442f      	add	r7, r5
 8021d9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021d9e:	42bb      	cmp	r3, r7
 8021da0:	da42      	bge.n	8021e28 <__gethex+0x244>
 8021da2:	9801      	ldr	r0, [sp, #4]
 8021da4:	4621      	mov	r1, r4
 8021da6:	f7fe f829 	bl	801fdfc <_Bfree>
 8021daa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021dac:	2300      	movs	r3, #0
 8021dae:	6013      	str	r3, [r2, #0]
 8021db0:	25a3      	movs	r5, #163	@ 0xa3
 8021db2:	e793      	b.n	8021cdc <__gethex+0xf8>
 8021db4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8021db8:	2a2e      	cmp	r2, #46	@ 0x2e
 8021dba:	d012      	beq.n	8021de2 <__gethex+0x1fe>
 8021dbc:	2b20      	cmp	r3, #32
 8021dbe:	d104      	bne.n	8021dca <__gethex+0x1e6>
 8021dc0:	f845 bb04 	str.w	fp, [r5], #4
 8021dc4:	f04f 0b00 	mov.w	fp, #0
 8021dc8:	465b      	mov	r3, fp
 8021dca:	7830      	ldrb	r0, [r6, #0]
 8021dcc:	9303      	str	r3, [sp, #12]
 8021dce:	f7ff fef4 	bl	8021bba <__hexdig_fun>
 8021dd2:	9b03      	ldr	r3, [sp, #12]
 8021dd4:	f000 000f 	and.w	r0, r0, #15
 8021dd8:	4098      	lsls	r0, r3
 8021dda:	ea4b 0b00 	orr.w	fp, fp, r0
 8021dde:	3304      	adds	r3, #4
 8021de0:	e7ae      	b.n	8021d40 <__gethex+0x15c>
 8021de2:	45b1      	cmp	r9, r6
 8021de4:	d8ea      	bhi.n	8021dbc <__gethex+0x1d8>
 8021de6:	492b      	ldr	r1, [pc, #172]	@ (8021e94 <__gethex+0x2b0>)
 8021de8:	9303      	str	r3, [sp, #12]
 8021dea:	2201      	movs	r2, #1
 8021dec:	4630      	mov	r0, r6
 8021dee:	f7ff fe3b 	bl	8021a68 <strncmp>
 8021df2:	9b03      	ldr	r3, [sp, #12]
 8021df4:	2800      	cmp	r0, #0
 8021df6:	d1e1      	bne.n	8021dbc <__gethex+0x1d8>
 8021df8:	e7a2      	b.n	8021d40 <__gethex+0x15c>
 8021dfa:	1ea9      	subs	r1, r5, #2
 8021dfc:	4620      	mov	r0, r4
 8021dfe:	f7fe fc4e 	bl	802069e <__any_on>
 8021e02:	2800      	cmp	r0, #0
 8021e04:	d0c2      	beq.n	8021d8c <__gethex+0x1a8>
 8021e06:	f04f 0903 	mov.w	r9, #3
 8021e0a:	e7c1      	b.n	8021d90 <__gethex+0x1ac>
 8021e0c:	da09      	bge.n	8021e22 <__gethex+0x23e>
 8021e0e:	1b75      	subs	r5, r6, r5
 8021e10:	4621      	mov	r1, r4
 8021e12:	9801      	ldr	r0, [sp, #4]
 8021e14:	462a      	mov	r2, r5
 8021e16:	f7fe fa09 	bl	802022c <__lshift>
 8021e1a:	1b7f      	subs	r7, r7, r5
 8021e1c:	4604      	mov	r4, r0
 8021e1e:	f100 0a14 	add.w	sl, r0, #20
 8021e22:	f04f 0900 	mov.w	r9, #0
 8021e26:	e7b8      	b.n	8021d9a <__gethex+0x1b6>
 8021e28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021e2c:	42bd      	cmp	r5, r7
 8021e2e:	dd6f      	ble.n	8021f10 <__gethex+0x32c>
 8021e30:	1bed      	subs	r5, r5, r7
 8021e32:	42ae      	cmp	r6, r5
 8021e34:	dc34      	bgt.n	8021ea0 <__gethex+0x2bc>
 8021e36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021e3a:	2b02      	cmp	r3, #2
 8021e3c:	d022      	beq.n	8021e84 <__gethex+0x2a0>
 8021e3e:	2b03      	cmp	r3, #3
 8021e40:	d024      	beq.n	8021e8c <__gethex+0x2a8>
 8021e42:	2b01      	cmp	r3, #1
 8021e44:	d115      	bne.n	8021e72 <__gethex+0x28e>
 8021e46:	42ae      	cmp	r6, r5
 8021e48:	d113      	bne.n	8021e72 <__gethex+0x28e>
 8021e4a:	2e01      	cmp	r6, #1
 8021e4c:	d10b      	bne.n	8021e66 <__gethex+0x282>
 8021e4e:	9a02      	ldr	r2, [sp, #8]
 8021e50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021e54:	6013      	str	r3, [r2, #0]
 8021e56:	2301      	movs	r3, #1
 8021e58:	6123      	str	r3, [r4, #16]
 8021e5a:	f8ca 3000 	str.w	r3, [sl]
 8021e5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021e60:	2562      	movs	r5, #98	@ 0x62
 8021e62:	601c      	str	r4, [r3, #0]
 8021e64:	e73a      	b.n	8021cdc <__gethex+0xf8>
 8021e66:	1e71      	subs	r1, r6, #1
 8021e68:	4620      	mov	r0, r4
 8021e6a:	f7fe fc18 	bl	802069e <__any_on>
 8021e6e:	2800      	cmp	r0, #0
 8021e70:	d1ed      	bne.n	8021e4e <__gethex+0x26a>
 8021e72:	9801      	ldr	r0, [sp, #4]
 8021e74:	4621      	mov	r1, r4
 8021e76:	f7fd ffc1 	bl	801fdfc <_Bfree>
 8021e7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021e7c:	2300      	movs	r3, #0
 8021e7e:	6013      	str	r3, [r2, #0]
 8021e80:	2550      	movs	r5, #80	@ 0x50
 8021e82:	e72b      	b.n	8021cdc <__gethex+0xf8>
 8021e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	d1f3      	bne.n	8021e72 <__gethex+0x28e>
 8021e8a:	e7e0      	b.n	8021e4e <__gethex+0x26a>
 8021e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	d1dd      	bne.n	8021e4e <__gethex+0x26a>
 8021e92:	e7ee      	b.n	8021e72 <__gethex+0x28e>
 8021e94:	080258d8 	.word	0x080258d8
 8021e98:	08025770 	.word	0x08025770
 8021e9c:	08025949 	.word	0x08025949
 8021ea0:	1e6f      	subs	r7, r5, #1
 8021ea2:	f1b9 0f00 	cmp.w	r9, #0
 8021ea6:	d130      	bne.n	8021f0a <__gethex+0x326>
 8021ea8:	b127      	cbz	r7, 8021eb4 <__gethex+0x2d0>
 8021eaa:	4639      	mov	r1, r7
 8021eac:	4620      	mov	r0, r4
 8021eae:	f7fe fbf6 	bl	802069e <__any_on>
 8021eb2:	4681      	mov	r9, r0
 8021eb4:	117a      	asrs	r2, r7, #5
 8021eb6:	2301      	movs	r3, #1
 8021eb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8021ebc:	f007 071f 	and.w	r7, r7, #31
 8021ec0:	40bb      	lsls	r3, r7
 8021ec2:	4213      	tst	r3, r2
 8021ec4:	4629      	mov	r1, r5
 8021ec6:	4620      	mov	r0, r4
 8021ec8:	bf18      	it	ne
 8021eca:	f049 0902 	orrne.w	r9, r9, #2
 8021ece:	f7ff fe22 	bl	8021b16 <rshift>
 8021ed2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8021ed6:	1b76      	subs	r6, r6, r5
 8021ed8:	2502      	movs	r5, #2
 8021eda:	f1b9 0f00 	cmp.w	r9, #0
 8021ede:	d047      	beq.n	8021f70 <__gethex+0x38c>
 8021ee0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021ee4:	2b02      	cmp	r3, #2
 8021ee6:	d015      	beq.n	8021f14 <__gethex+0x330>
 8021ee8:	2b03      	cmp	r3, #3
 8021eea:	d017      	beq.n	8021f1c <__gethex+0x338>
 8021eec:	2b01      	cmp	r3, #1
 8021eee:	d109      	bne.n	8021f04 <__gethex+0x320>
 8021ef0:	f019 0f02 	tst.w	r9, #2
 8021ef4:	d006      	beq.n	8021f04 <__gethex+0x320>
 8021ef6:	f8da 3000 	ldr.w	r3, [sl]
 8021efa:	ea49 0903 	orr.w	r9, r9, r3
 8021efe:	f019 0f01 	tst.w	r9, #1
 8021f02:	d10e      	bne.n	8021f22 <__gethex+0x33e>
 8021f04:	f045 0510 	orr.w	r5, r5, #16
 8021f08:	e032      	b.n	8021f70 <__gethex+0x38c>
 8021f0a:	f04f 0901 	mov.w	r9, #1
 8021f0e:	e7d1      	b.n	8021eb4 <__gethex+0x2d0>
 8021f10:	2501      	movs	r5, #1
 8021f12:	e7e2      	b.n	8021eda <__gethex+0x2f6>
 8021f14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f16:	f1c3 0301 	rsb	r3, r3, #1
 8021f1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	d0f0      	beq.n	8021f04 <__gethex+0x320>
 8021f22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021f26:	f104 0314 	add.w	r3, r4, #20
 8021f2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021f2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021f32:	f04f 0c00 	mov.w	ip, #0
 8021f36:	4618      	mov	r0, r3
 8021f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021f40:	d01b      	beq.n	8021f7a <__gethex+0x396>
 8021f42:	3201      	adds	r2, #1
 8021f44:	6002      	str	r2, [r0, #0]
 8021f46:	2d02      	cmp	r5, #2
 8021f48:	f104 0314 	add.w	r3, r4, #20
 8021f4c:	d13c      	bne.n	8021fc8 <__gethex+0x3e4>
 8021f4e:	f8d8 2000 	ldr.w	r2, [r8]
 8021f52:	3a01      	subs	r2, #1
 8021f54:	42b2      	cmp	r2, r6
 8021f56:	d109      	bne.n	8021f6c <__gethex+0x388>
 8021f58:	1171      	asrs	r1, r6, #5
 8021f5a:	2201      	movs	r2, #1
 8021f5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021f60:	f006 061f 	and.w	r6, r6, #31
 8021f64:	fa02 f606 	lsl.w	r6, r2, r6
 8021f68:	421e      	tst	r6, r3
 8021f6a:	d13a      	bne.n	8021fe2 <__gethex+0x3fe>
 8021f6c:	f045 0520 	orr.w	r5, r5, #32
 8021f70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021f72:	601c      	str	r4, [r3, #0]
 8021f74:	9b02      	ldr	r3, [sp, #8]
 8021f76:	601f      	str	r7, [r3, #0]
 8021f78:	e6b0      	b.n	8021cdc <__gethex+0xf8>
 8021f7a:	4299      	cmp	r1, r3
 8021f7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8021f80:	d8d9      	bhi.n	8021f36 <__gethex+0x352>
 8021f82:	68a3      	ldr	r3, [r4, #8]
 8021f84:	459b      	cmp	fp, r3
 8021f86:	db17      	blt.n	8021fb8 <__gethex+0x3d4>
 8021f88:	6861      	ldr	r1, [r4, #4]
 8021f8a:	9801      	ldr	r0, [sp, #4]
 8021f8c:	3101      	adds	r1, #1
 8021f8e:	f7fd fef5 	bl	801fd7c <_Balloc>
 8021f92:	4681      	mov	r9, r0
 8021f94:	b918      	cbnz	r0, 8021f9e <__gethex+0x3ba>
 8021f96:	4b1a      	ldr	r3, [pc, #104]	@ (8022000 <__gethex+0x41c>)
 8021f98:	4602      	mov	r2, r0
 8021f9a:	2184      	movs	r1, #132	@ 0x84
 8021f9c:	e6c5      	b.n	8021d2a <__gethex+0x146>
 8021f9e:	6922      	ldr	r2, [r4, #16]
 8021fa0:	3202      	adds	r2, #2
 8021fa2:	f104 010c 	add.w	r1, r4, #12
 8021fa6:	0092      	lsls	r2, r2, #2
 8021fa8:	300c      	adds	r0, #12
 8021faa:	f7fd f81c 	bl	801efe6 <memcpy>
 8021fae:	4621      	mov	r1, r4
 8021fb0:	9801      	ldr	r0, [sp, #4]
 8021fb2:	f7fd ff23 	bl	801fdfc <_Bfree>
 8021fb6:	464c      	mov	r4, r9
 8021fb8:	6923      	ldr	r3, [r4, #16]
 8021fba:	1c5a      	adds	r2, r3, #1
 8021fbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021fc0:	6122      	str	r2, [r4, #16]
 8021fc2:	2201      	movs	r2, #1
 8021fc4:	615a      	str	r2, [r3, #20]
 8021fc6:	e7be      	b.n	8021f46 <__gethex+0x362>
 8021fc8:	6922      	ldr	r2, [r4, #16]
 8021fca:	455a      	cmp	r2, fp
 8021fcc:	dd0b      	ble.n	8021fe6 <__gethex+0x402>
 8021fce:	2101      	movs	r1, #1
 8021fd0:	4620      	mov	r0, r4
 8021fd2:	f7ff fda0 	bl	8021b16 <rshift>
 8021fd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021fda:	3701      	adds	r7, #1
 8021fdc:	42bb      	cmp	r3, r7
 8021fde:	f6ff aee0 	blt.w	8021da2 <__gethex+0x1be>
 8021fe2:	2501      	movs	r5, #1
 8021fe4:	e7c2      	b.n	8021f6c <__gethex+0x388>
 8021fe6:	f016 061f 	ands.w	r6, r6, #31
 8021fea:	d0fa      	beq.n	8021fe2 <__gethex+0x3fe>
 8021fec:	4453      	add	r3, sl
 8021fee:	f1c6 0620 	rsb	r6, r6, #32
 8021ff2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021ff6:	f7fd ffb3 	bl	801ff60 <__hi0bits>
 8021ffa:	42b0      	cmp	r0, r6
 8021ffc:	dbe7      	blt.n	8021fce <__gethex+0x3ea>
 8021ffe:	e7f0      	b.n	8021fe2 <__gethex+0x3fe>
 8022000:	08025770 	.word	0x08025770

08022004 <L_shift>:
 8022004:	f1c2 0208 	rsb	r2, r2, #8
 8022008:	0092      	lsls	r2, r2, #2
 802200a:	b570      	push	{r4, r5, r6, lr}
 802200c:	f1c2 0620 	rsb	r6, r2, #32
 8022010:	6843      	ldr	r3, [r0, #4]
 8022012:	6804      	ldr	r4, [r0, #0]
 8022014:	fa03 f506 	lsl.w	r5, r3, r6
 8022018:	432c      	orrs	r4, r5
 802201a:	40d3      	lsrs	r3, r2
 802201c:	6004      	str	r4, [r0, #0]
 802201e:	f840 3f04 	str.w	r3, [r0, #4]!
 8022022:	4288      	cmp	r0, r1
 8022024:	d3f4      	bcc.n	8022010 <L_shift+0xc>
 8022026:	bd70      	pop	{r4, r5, r6, pc}

08022028 <__match>:
 8022028:	b530      	push	{r4, r5, lr}
 802202a:	6803      	ldr	r3, [r0, #0]
 802202c:	3301      	adds	r3, #1
 802202e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022032:	b914      	cbnz	r4, 802203a <__match+0x12>
 8022034:	6003      	str	r3, [r0, #0]
 8022036:	2001      	movs	r0, #1
 8022038:	bd30      	pop	{r4, r5, pc}
 802203a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802203e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8022042:	2d19      	cmp	r5, #25
 8022044:	bf98      	it	ls
 8022046:	3220      	addls	r2, #32
 8022048:	42a2      	cmp	r2, r4
 802204a:	d0f0      	beq.n	802202e <__match+0x6>
 802204c:	2000      	movs	r0, #0
 802204e:	e7f3      	b.n	8022038 <__match+0x10>

08022050 <__hexnan>:
 8022050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022054:	680b      	ldr	r3, [r1, #0]
 8022056:	6801      	ldr	r1, [r0, #0]
 8022058:	115e      	asrs	r6, r3, #5
 802205a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802205e:	f013 031f 	ands.w	r3, r3, #31
 8022062:	b087      	sub	sp, #28
 8022064:	bf18      	it	ne
 8022066:	3604      	addne	r6, #4
 8022068:	2500      	movs	r5, #0
 802206a:	1f37      	subs	r7, r6, #4
 802206c:	4682      	mov	sl, r0
 802206e:	4690      	mov	r8, r2
 8022070:	9301      	str	r3, [sp, #4]
 8022072:	f846 5c04 	str.w	r5, [r6, #-4]
 8022076:	46b9      	mov	r9, r7
 8022078:	463c      	mov	r4, r7
 802207a:	9502      	str	r5, [sp, #8]
 802207c:	46ab      	mov	fp, r5
 802207e:	784a      	ldrb	r2, [r1, #1]
 8022080:	1c4b      	adds	r3, r1, #1
 8022082:	9303      	str	r3, [sp, #12]
 8022084:	b342      	cbz	r2, 80220d8 <__hexnan+0x88>
 8022086:	4610      	mov	r0, r2
 8022088:	9105      	str	r1, [sp, #20]
 802208a:	9204      	str	r2, [sp, #16]
 802208c:	f7ff fd95 	bl	8021bba <__hexdig_fun>
 8022090:	2800      	cmp	r0, #0
 8022092:	d151      	bne.n	8022138 <__hexnan+0xe8>
 8022094:	9a04      	ldr	r2, [sp, #16]
 8022096:	9905      	ldr	r1, [sp, #20]
 8022098:	2a20      	cmp	r2, #32
 802209a:	d818      	bhi.n	80220ce <__hexnan+0x7e>
 802209c:	9b02      	ldr	r3, [sp, #8]
 802209e:	459b      	cmp	fp, r3
 80220a0:	dd13      	ble.n	80220ca <__hexnan+0x7a>
 80220a2:	454c      	cmp	r4, r9
 80220a4:	d206      	bcs.n	80220b4 <__hexnan+0x64>
 80220a6:	2d07      	cmp	r5, #7
 80220a8:	dc04      	bgt.n	80220b4 <__hexnan+0x64>
 80220aa:	462a      	mov	r2, r5
 80220ac:	4649      	mov	r1, r9
 80220ae:	4620      	mov	r0, r4
 80220b0:	f7ff ffa8 	bl	8022004 <L_shift>
 80220b4:	4544      	cmp	r4, r8
 80220b6:	d952      	bls.n	802215e <__hexnan+0x10e>
 80220b8:	2300      	movs	r3, #0
 80220ba:	f1a4 0904 	sub.w	r9, r4, #4
 80220be:	f844 3c04 	str.w	r3, [r4, #-4]
 80220c2:	f8cd b008 	str.w	fp, [sp, #8]
 80220c6:	464c      	mov	r4, r9
 80220c8:	461d      	mov	r5, r3
 80220ca:	9903      	ldr	r1, [sp, #12]
 80220cc:	e7d7      	b.n	802207e <__hexnan+0x2e>
 80220ce:	2a29      	cmp	r2, #41	@ 0x29
 80220d0:	d157      	bne.n	8022182 <__hexnan+0x132>
 80220d2:	3102      	adds	r1, #2
 80220d4:	f8ca 1000 	str.w	r1, [sl]
 80220d8:	f1bb 0f00 	cmp.w	fp, #0
 80220dc:	d051      	beq.n	8022182 <__hexnan+0x132>
 80220de:	454c      	cmp	r4, r9
 80220e0:	d206      	bcs.n	80220f0 <__hexnan+0xa0>
 80220e2:	2d07      	cmp	r5, #7
 80220e4:	dc04      	bgt.n	80220f0 <__hexnan+0xa0>
 80220e6:	462a      	mov	r2, r5
 80220e8:	4649      	mov	r1, r9
 80220ea:	4620      	mov	r0, r4
 80220ec:	f7ff ff8a 	bl	8022004 <L_shift>
 80220f0:	4544      	cmp	r4, r8
 80220f2:	d936      	bls.n	8022162 <__hexnan+0x112>
 80220f4:	f1a8 0204 	sub.w	r2, r8, #4
 80220f8:	4623      	mov	r3, r4
 80220fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80220fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8022102:	429f      	cmp	r7, r3
 8022104:	d2f9      	bcs.n	80220fa <__hexnan+0xaa>
 8022106:	1b3b      	subs	r3, r7, r4
 8022108:	f023 0303 	bic.w	r3, r3, #3
 802210c:	3304      	adds	r3, #4
 802210e:	3401      	adds	r4, #1
 8022110:	3e03      	subs	r6, #3
 8022112:	42b4      	cmp	r4, r6
 8022114:	bf88      	it	hi
 8022116:	2304      	movhi	r3, #4
 8022118:	4443      	add	r3, r8
 802211a:	2200      	movs	r2, #0
 802211c:	f843 2b04 	str.w	r2, [r3], #4
 8022120:	429f      	cmp	r7, r3
 8022122:	d2fb      	bcs.n	802211c <__hexnan+0xcc>
 8022124:	683b      	ldr	r3, [r7, #0]
 8022126:	b91b      	cbnz	r3, 8022130 <__hexnan+0xe0>
 8022128:	4547      	cmp	r7, r8
 802212a:	d128      	bne.n	802217e <__hexnan+0x12e>
 802212c:	2301      	movs	r3, #1
 802212e:	603b      	str	r3, [r7, #0]
 8022130:	2005      	movs	r0, #5
 8022132:	b007      	add	sp, #28
 8022134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022138:	3501      	adds	r5, #1
 802213a:	2d08      	cmp	r5, #8
 802213c:	f10b 0b01 	add.w	fp, fp, #1
 8022140:	dd06      	ble.n	8022150 <__hexnan+0x100>
 8022142:	4544      	cmp	r4, r8
 8022144:	d9c1      	bls.n	80220ca <__hexnan+0x7a>
 8022146:	2300      	movs	r3, #0
 8022148:	f844 3c04 	str.w	r3, [r4, #-4]
 802214c:	2501      	movs	r5, #1
 802214e:	3c04      	subs	r4, #4
 8022150:	6822      	ldr	r2, [r4, #0]
 8022152:	f000 000f 	and.w	r0, r0, #15
 8022156:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802215a:	6020      	str	r0, [r4, #0]
 802215c:	e7b5      	b.n	80220ca <__hexnan+0x7a>
 802215e:	2508      	movs	r5, #8
 8022160:	e7b3      	b.n	80220ca <__hexnan+0x7a>
 8022162:	9b01      	ldr	r3, [sp, #4]
 8022164:	2b00      	cmp	r3, #0
 8022166:	d0dd      	beq.n	8022124 <__hexnan+0xd4>
 8022168:	f1c3 0320 	rsb	r3, r3, #32
 802216c:	f04f 32ff 	mov.w	r2, #4294967295
 8022170:	40da      	lsrs	r2, r3
 8022172:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8022176:	4013      	ands	r3, r2
 8022178:	f846 3c04 	str.w	r3, [r6, #-4]
 802217c:	e7d2      	b.n	8022124 <__hexnan+0xd4>
 802217e:	3f04      	subs	r7, #4
 8022180:	e7d0      	b.n	8022124 <__hexnan+0xd4>
 8022182:	2004      	movs	r0, #4
 8022184:	e7d5      	b.n	8022132 <__hexnan+0xe2>

08022186 <__ascii_mbtowc>:
 8022186:	b082      	sub	sp, #8
 8022188:	b901      	cbnz	r1, 802218c <__ascii_mbtowc+0x6>
 802218a:	a901      	add	r1, sp, #4
 802218c:	b142      	cbz	r2, 80221a0 <__ascii_mbtowc+0x1a>
 802218e:	b14b      	cbz	r3, 80221a4 <__ascii_mbtowc+0x1e>
 8022190:	7813      	ldrb	r3, [r2, #0]
 8022192:	600b      	str	r3, [r1, #0]
 8022194:	7812      	ldrb	r2, [r2, #0]
 8022196:	1e10      	subs	r0, r2, #0
 8022198:	bf18      	it	ne
 802219a:	2001      	movne	r0, #1
 802219c:	b002      	add	sp, #8
 802219e:	4770      	bx	lr
 80221a0:	4610      	mov	r0, r2
 80221a2:	e7fb      	b.n	802219c <__ascii_mbtowc+0x16>
 80221a4:	f06f 0001 	mvn.w	r0, #1
 80221a8:	e7f8      	b.n	802219c <__ascii_mbtowc+0x16>

080221aa <_realloc_r>:
 80221aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80221ae:	4680      	mov	r8, r0
 80221b0:	4615      	mov	r5, r2
 80221b2:	460c      	mov	r4, r1
 80221b4:	b921      	cbnz	r1, 80221c0 <_realloc_r+0x16>
 80221b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80221ba:	4611      	mov	r1, r2
 80221bc:	f7fb bba8 	b.w	801d910 <_malloc_r>
 80221c0:	b92a      	cbnz	r2, 80221ce <_realloc_r+0x24>
 80221c2:	f7fd fd91 	bl	801fce8 <_free_r>
 80221c6:	2400      	movs	r4, #0
 80221c8:	4620      	mov	r0, r4
 80221ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221ce:	f000 f86b 	bl	80222a8 <_malloc_usable_size_r>
 80221d2:	4285      	cmp	r5, r0
 80221d4:	4606      	mov	r6, r0
 80221d6:	d802      	bhi.n	80221de <_realloc_r+0x34>
 80221d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80221dc:	d8f4      	bhi.n	80221c8 <_realloc_r+0x1e>
 80221de:	4629      	mov	r1, r5
 80221e0:	4640      	mov	r0, r8
 80221e2:	f7fb fb95 	bl	801d910 <_malloc_r>
 80221e6:	4607      	mov	r7, r0
 80221e8:	2800      	cmp	r0, #0
 80221ea:	d0ec      	beq.n	80221c6 <_realloc_r+0x1c>
 80221ec:	42b5      	cmp	r5, r6
 80221ee:	462a      	mov	r2, r5
 80221f0:	4621      	mov	r1, r4
 80221f2:	bf28      	it	cs
 80221f4:	4632      	movcs	r2, r6
 80221f6:	f7fc fef6 	bl	801efe6 <memcpy>
 80221fa:	4621      	mov	r1, r4
 80221fc:	4640      	mov	r0, r8
 80221fe:	f7fd fd73 	bl	801fce8 <_free_r>
 8022202:	463c      	mov	r4, r7
 8022204:	e7e0      	b.n	80221c8 <_realloc_r+0x1e>

08022206 <__ascii_wctomb>:
 8022206:	4603      	mov	r3, r0
 8022208:	4608      	mov	r0, r1
 802220a:	b141      	cbz	r1, 802221e <__ascii_wctomb+0x18>
 802220c:	2aff      	cmp	r2, #255	@ 0xff
 802220e:	d904      	bls.n	802221a <__ascii_wctomb+0x14>
 8022210:	228a      	movs	r2, #138	@ 0x8a
 8022212:	601a      	str	r2, [r3, #0]
 8022214:	f04f 30ff 	mov.w	r0, #4294967295
 8022218:	4770      	bx	lr
 802221a:	700a      	strb	r2, [r1, #0]
 802221c:	2001      	movs	r0, #1
 802221e:	4770      	bx	lr

08022220 <_raise_r>:
 8022220:	291f      	cmp	r1, #31
 8022222:	b538      	push	{r3, r4, r5, lr}
 8022224:	4605      	mov	r5, r0
 8022226:	460c      	mov	r4, r1
 8022228:	d904      	bls.n	8022234 <_raise_r+0x14>
 802222a:	2316      	movs	r3, #22
 802222c:	6003      	str	r3, [r0, #0]
 802222e:	f04f 30ff 	mov.w	r0, #4294967295
 8022232:	bd38      	pop	{r3, r4, r5, pc}
 8022234:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022236:	b112      	cbz	r2, 802223e <_raise_r+0x1e>
 8022238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802223c:	b94b      	cbnz	r3, 8022252 <_raise_r+0x32>
 802223e:	4628      	mov	r0, r5
 8022240:	f000 f830 	bl	80222a4 <_getpid_r>
 8022244:	4622      	mov	r2, r4
 8022246:	4601      	mov	r1, r0
 8022248:	4628      	mov	r0, r5
 802224a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802224e:	f000 b817 	b.w	8022280 <_kill_r>
 8022252:	2b01      	cmp	r3, #1
 8022254:	d00a      	beq.n	802226c <_raise_r+0x4c>
 8022256:	1c59      	adds	r1, r3, #1
 8022258:	d103      	bne.n	8022262 <_raise_r+0x42>
 802225a:	2316      	movs	r3, #22
 802225c:	6003      	str	r3, [r0, #0]
 802225e:	2001      	movs	r0, #1
 8022260:	e7e7      	b.n	8022232 <_raise_r+0x12>
 8022262:	2100      	movs	r1, #0
 8022264:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022268:	4620      	mov	r0, r4
 802226a:	4798      	blx	r3
 802226c:	2000      	movs	r0, #0
 802226e:	e7e0      	b.n	8022232 <_raise_r+0x12>

08022270 <raise>:
 8022270:	4b02      	ldr	r3, [pc, #8]	@ (802227c <raise+0xc>)
 8022272:	4601      	mov	r1, r0
 8022274:	6818      	ldr	r0, [r3, #0]
 8022276:	f7ff bfd3 	b.w	8022220 <_raise_r>
 802227a:	bf00      	nop
 802227c:	20000148 	.word	0x20000148

08022280 <_kill_r>:
 8022280:	b538      	push	{r3, r4, r5, lr}
 8022282:	4d07      	ldr	r5, [pc, #28]	@ (80222a0 <_kill_r+0x20>)
 8022284:	2300      	movs	r3, #0
 8022286:	4604      	mov	r4, r0
 8022288:	4608      	mov	r0, r1
 802228a:	4611      	mov	r1, r2
 802228c:	602b      	str	r3, [r5, #0]
 802228e:	f7e1 fde3 	bl	8003e58 <_kill>
 8022292:	1c43      	adds	r3, r0, #1
 8022294:	d102      	bne.n	802229c <_kill_r+0x1c>
 8022296:	682b      	ldr	r3, [r5, #0]
 8022298:	b103      	cbz	r3, 802229c <_kill_r+0x1c>
 802229a:	6023      	str	r3, [r4, #0]
 802229c:	bd38      	pop	{r3, r4, r5, pc}
 802229e:	bf00      	nop
 80222a0:	200037a8 	.word	0x200037a8

080222a4 <_getpid_r>:
 80222a4:	f7e1 bdd0 	b.w	8003e48 <_getpid>

080222a8 <_malloc_usable_size_r>:
 80222a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80222ac:	1f18      	subs	r0, r3, #4
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	bfbc      	itt	lt
 80222b2:	580b      	ldrlt	r3, [r1, r0]
 80222b4:	18c0      	addlt	r0, r0, r3
 80222b6:	4770      	bx	lr

080222b8 <_init>:
 80222b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222ba:	bf00      	nop
 80222bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222be:	bc08      	pop	{r3}
 80222c0:	469e      	mov	lr, r3
 80222c2:	4770      	bx	lr

080222c4 <_fini>:
 80222c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222c6:	bf00      	nop
 80222c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222ca:	bc08      	pop	{r3}
 80222cc:	469e      	mov	lr, r3
 80222ce:	4770      	bx	lr
